line_index: 10
bug_before_refactoring: @ java.lang.Override public void run ( final android.content.Intent intent ) { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( intent , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; } <s> @ android.support.annotation.RequiresApi ( value = android.os.Build.VERSION_CODES.JELLY_BEAN_MR1 ) @ java.lang.Override public void sendStickyOrderedBroadcastAsUser ( final android.content.Intent intent , final android.os.UserHandle user , final android.content.BroadcastReceiver resultReceiver , final android.os.Handler scheduler , final int initialCode , final java.lang.String initialData , final android.os.Bundle initialExtras ) { mCondom . proceedBroadcast ( intent , new com.oasisfeng.condom.CondomCore.WrappedProcedure () { @ java.lang.Override public void run ( final android.content.Intent intent ) { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( intent , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; } } ) ; } <s> Add intent as parameter in OutboundJudge.shouldAllow()  together with minor tweaks and bug-fixes.
bug_after_refactoring: @ java.lang.Override public void run ( final android.content.Intent qfcwovwcrqvlxjjosklj ) { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( qfcwovwcrqvlxjjosklj , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; } <s> @ android.support.annotation.RequiresApi ( value = android.os.Build.VERSION_CODES.JELLY_BEAN_MR1 ) @ java.lang.Override public void sendStickyOrderedBroadcastAsUser ( final android.content.Intent intent , final android.os.UserHandle user , final android.content.BroadcastReceiver resultReceiver , final android.os.Handler scheduler , final int initialCode , final java.lang.String initialData , final android.os.Bundle initialExtras ) { mCondom . proceedBroadcast ( intent , new com.oasisfeng.condom.CondomCore.WrappedProcedure () { @ java.lang.Override public void run ( final android.content.Intent qfcwovwcrqvlxjjosklj ) { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( qfcwovwcrqvlxjjosklj , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; } } ) ; } <s> Add intent as parameter in OutboundJudge.shouldAllow()  together with minor tweaks and bug-fixes.
fix_before_refactoring: @ java.lang.Override public void run () { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( intent , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; }
fix_after_refactoring: @ java.lang.Override public void run () { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( qfcwovwcrqvlxjjosklj , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; }
× fix_prediction_before: @ java.lang.Override public void run ( final android.content.Intent intent ) { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( intent , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; }
√ fix_prediction_after: @ java.lang.Override public void run () { com.oasisfeng.condom.CondomContext . super . sendStickyOrderedBroadcastAsUser ( qfcwovwcrqvlxjjosklj , user , resultReceiver , scheduler , initialCode , initialData , initialExtras ) ; }

line_index: 77
bug_before_refactoring: public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; return oldList ; } <s> public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; return oldList ; } <s> add file creating and fix refreshList() invalid bug
bug_after_refactoring: public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; } <s> public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; } <s> add file creating and fix refreshList() invalid bug
fix_before_refactoring: private java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; return oldList ; }
fix_after_refactoring: private java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; }
× fix_prediction_before: public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( upperFile ) ; return oldList ; }
√ fix_prediction_after: private java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; }

line_index: 196
bug_before_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } } <s> @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } } <s> fix bugs
bug_after_refactoring: @ java.lang.Override public void onPageScrolled ( int aswoxmzamfdbfnhrrgkn , float aswoxmzamfdbfnhrrgknOffset , int aswoxmzamfdbfnhrrgknOffsetPixels ) { if ( aswoxmzamfdbfnhrrgkn > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( aswoxmzamfdbfnhrrgknOffset + aswoxmzamfdbfnhrrgkn ) ; setTranslationX ( translationX ) ; } } <s> @ java.lang.Override public void onPageScrolled ( int aswoxmzamfdbfnhrrgkn , float aswoxmzamfdbfnhrrgknOffset , int aswoxmzamfdbfnhrrgknOffsetPixels ) { if ( aswoxmzamfdbfnhrrgkn > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( aswoxmzamfdbfnhrrgknOffset + aswoxmzamfdbfnhrrgkn ) ; setTranslationX ( translationX ) ; } } <s> fix bugs
fix_before_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; }
fix_after_refactoring: @ java.lang.Override public void onPageScrolled ( int aswoxmzamfdbfnhrrgkn , float aswoxmzamfdbfnhrrgknOffset , int aswoxmzamfdbfnhrrgknOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( aswoxmzamfdbfnhrrgknOffset + aswoxmzamfdbfnhrrgkn ) ; setTranslationX ( translationX ) ; }
× fix_prediction_before: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } }
√ fix_prediction_after: @ java.lang.Override public void onPageScrolled ( int aswoxmzamfdbfnhrrgkn , float aswoxmzamfdbfnhrrgknOffset , int aswoxmzamfdbfnhrrgknOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( aswoxmzamfdbfnhrrgknOffset + aswoxmzamfdbfnhrrgkn ) ; setTranslationX ( translationX ) ; }

line_index: 302
bug_before_refactoring: public void setMinDateInMs ( long minDateInMs ) { this . minDateInMs = minDateInMs ; if ( ( this . minDateInMs ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } } <s> public void setMinDateInMs ( long minDateInMs ) { this . minDateInMs = minDateInMs ; if ( ( this . minDateInMs ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } } <s> Fixed error where map wouldn't zoom to created submission  fixed bad code from MainActivity related to switching fragments  added comments
bug_after_refactoring: public void setMinDateInMs ( long tnuxtvcbrspwwqzimsad ) { this . tnuxtvcbrspwwqzimsad = tnuxtvcbrspwwqzimsad ; if ( ( this . tnuxtvcbrspwwqzimsad ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } } <s> public void setMinDateInMs ( long tnuxtvcbrspwwqzimsad ) { this . tnuxtvcbrspwwqzimsad = tnuxtvcbrspwwqzimsad ; if ( ( this . tnuxtvcbrspwwqzimsad ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } } <s> Fixed error where map wouldn't zoom to created submission  fixed bad code from MainActivity related to switching fragments  added comments
fix_before_refactoring: private void setMinDateInMs ( long minDateInMs ) { this . minDateInMs = minDateInMs ; if ( ( this . minDateInMs ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } }
fix_after_refactoring: private void setMinDateInMs ( long tnuxtvcbrspwwqzimsad ) { this . tnuxtvcbrspwwqzimsad = tnuxtvcbrspwwqzimsad ; if ( ( this . tnuxtvcbrspwwqzimsad ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } }
× fix_prediction_before: public void setMinDateInMs ( long minDateInMs ) { this . minDateInMs = minDateInMs ; if ( ( this . minDateInMs ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } }
√ fix_prediction_after: private void setMinDateInMs ( long tnuxtvcbrspwwqzimsad ) { this . tnuxtvcbrspwwqzimsad = tnuxtvcbrspwwqzimsad ; if ( ( this . tnuxtvcbrspwwqzimsad ) > 0 ) { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } else { addSubmissionsToMap ( this . googleMap . getProjection () . getVisibleRegion () ) ; } }

line_index: 370
bug_before_refactoring: private static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> private static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> Fixed bug
bug_after_refactoring: private static boolean hasFormatWithClassHeader ( java.lang.String qrebburiootqwwfhgggf ) { java.lang.String [] lines = qrebburiootqwwfhgggf . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> private static boolean hasFormatWithClassHeader ( java.lang.String qrebburiootqwwfhgggf ) { java.lang.String [] lines = qrebburiootqwwfhgggf . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> Fixed bug
fix_before_refactoring: public static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }
fix_after_refactoring: public static boolean hasFormatWithClassHeader ( java.lang.String qrebburiootqwwfhgggf ) { java.lang.String [] lines = qrebburiootqwwfhgggf . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }
× fix_prediction_before: public static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }
√ fix_prediction_after: public static boolean hasFormatWithClassHeader ( java.lang.String qrebburiootqwwfhgggf ) { java.lang.String [] lines = qrebburiootqwwfhgggf . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }

line_index: 440
bug_before_refactoring: private void setEventLatestState ( final java.lang.Long revision , final java.lang.String message ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "revision" , java.lang.Long . toString ( revision ) ) ; jedi . hmset ( key , state ) ; } <s> private void setEventLatestState ( final java.lang.Long revision , final java.lang.String message ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "revision" , java.lang.Long . toString ( revision ) ) ; jedi . hmset ( key , state ) ; } <s> Refactoring. removed unwanted variables. fixed revision count issue.
bug_after_refactoring: private void setEventLatestState ( final java.lang.Long pszzisjljkrwiotvkjgj , final java.lang.String uvpemjuzujufmwrlfkrh ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "pszzisjljkrwiotvkjgj" , java.lang.Long . toString ( pszzisjljkrwiotvkjgj ) ) ; jedi . hmset ( key , state ) ; } <s> private void setEventLatestState ( final java.lang.Long pszzisjljkrwiotvkjgj , final java.lang.String uvpemjuzujufmwrlfkrh ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "pszzisjljkrwiotvkjgj" , java.lang.Long . toString ( pszzisjljkrwiotvkjgj ) ) ; jedi . hmset ( key , state ) ; } <s> Refactoring. removed unwanted variables. fixed revision count issue.
fix_before_refactoring: private void setEventLatestState ( final java.lang.Long revision ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "revision" , java.lang.Long . toString ( revision ) ) ; jedi . hmset ( key , state ) ; }
fix_after_refactoring: private void setEventLatestState ( final java.lang.Long pszzisjljkrwiotvkjgj ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "pszzisjljkrwiotvkjgj" , java.lang.Long . toString ( pszzisjljkrwiotvkjgj ) ) ; jedi . hmset ( key , state ) ; }
× fix_prediction_before: private void setEventLatestState ( final java.lang.Long revision , final java.lang.String message ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "revision" , java.lang.Long . toString ( revision ) ) ; jedi . hmset ( key , state ) ; }
√ fix_prediction_after: private void setEventLatestState ( final java.lang.Long pszzisjljkrwiotvkjgj ) { redis.clients.jedis.Jedis jedi = pool . getResource () ; java.lang.String key = getEventLatestStateKey () ; java.util.HashMap < java.lang.String , java.lang.String > state = new java.util.HashMap <> () ; state . put ( "pszzisjljkrwiotvkjgj" , java.lang.Long . toString ( pszzisjljkrwiotvkjgj ) ) ; jedi . hmset ( key , state ) ; }

line_index: 457
bug_before_refactoring: public org.json.JSONObject toJson ( org.json.JSONObject attrToFilterJsonObject ) { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; } <s> public org.json.JSONObject toJson ( org.json.JSONObject attrToFilterJsonObject ) { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; } <s> Testing json format and fixing bugs
bug_after_refactoring: public org.json.JSONObject toJson ( org.json.JSONObject iscqdbmysqxhtszvpopu ) { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; } <s> public org.json.JSONObject toJson ( org.json.JSONObject iscqdbmysqxhtszvpopu ) { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; } <s> Testing json format and fixing bugs
fix_before_refactoring: public org.json.JSONObject toJson () { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; }
fix_after_refactoring: public org.json.JSONObject toJson () { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; }
× fix_prediction_before: public org.json.JSONObject toJson ( org.json.JSONObject attrToFilterJsonObject ) { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; }
√ fix_prediction_after: public org.json.JSONObject toJson () { org.json.JSONObject toJson = new org.json.JSONObject () ; toJson . put ( BoraApplicationConstants.EVENT_ID_KEY_JSON , id ) . put ( BoraApplicationConstants.EVENT_NAME_KEY_JSON , name ) . put ( BoraApplicationConstants.EVENT_DATE_KEY_JSON , date ) . put ( BoraApplicationConstants.EVENT_ATTENDEES_KEY_JSON , attendees ) . put ( BoraApplicationConstants.EVENT_PHOTOS_KEY_JSON , photoNames ) ; return toJson ; }

line_index: 517
bug_before_refactoring: public static java.lang.String random ( int length ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; do { while ( ( builder . length () ) < length ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.length ) ) ) ] ) ; } } while ( builder . toString () . matches ( "[0-9]+" ) ) ; return builder . toString () ; } <s> public static java.lang.String random ( int length ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; do { while ( ( builder . length () ) < length ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.length ) ) ) ] ) ; } } while ( builder . toString () . matches ( "[0-9]+" ) ) ; return builder . toString () ; } <s> Bugfix.
bug_after_refactoring: public static java.lang.String random ( int moibhzoxjplvgcbmzywb ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; do { while ( ( builder . moibhzoxjplvgcbmzywb () ) < moibhzoxjplvgcbmzywb ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.moibhzoxjplvgcbmzywb ) ) ) ] ) ; } } while ( builder . toString () . matches ( "[0-9]+" ) ) ; return builder . toString () ; } <s> public static java.lang.String random ( int moibhzoxjplvgcbmzywb ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; do { while ( ( builder . moibhzoxjplvgcbmzywb () ) < moibhzoxjplvgcbmzywb ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.moibhzoxjplvgcbmzywb ) ) ) ] ) ; } } while ( builder . toString () . matches ( "[0-9]+" ) ) ; return builder . toString () ; } <s> Bugfix.
fix_before_refactoring: public static java.lang.String random ( int length ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; while ( ( builder . length () ) < length ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.length ) ) ) ] ) ; } return builder . toString () ; }
fix_after_refactoring: public static java.lang.String random ( int moibhzoxjplvgcbmzywb ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; while ( ( builder . moibhzoxjplvgcbmzywb () ) < moibhzoxjplvgcbmzywb ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.moibhzoxjplvgcbmzywb ) ) ) ] ) ; } return builder . toString () ; }
× fix_prediction_before: public static java.lang.String random ( int length ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; do { while ( ( builder . length () ) < length ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.length ) ) ) ] ) ; } } while ( builder . toString () . matches ( "[0-9]+" ) ) ; return builder . toString () ; }
√ fix_prediction_after: public static java.lang.String random ( int moibhzoxjplvgcbmzywb ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; while ( ( builder . moibhzoxjplvgcbmzywb () ) < moibhzoxjplvgcbmzywb ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.moibhzoxjplvgcbmzywb ) ) ) ] ) ; } return builder . toString () ; }

line_index: 582
bug_before_refactoring: private static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; } <s> private static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; } <s> Fixing a bug (validate time stamp  check for future data)
bug_after_refactoring: private static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; } <s> private static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; } <s> Fixing a bug (validate time stamp  check for future data)
fix_before_refactoring: public static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; }
fix_after_refactoring: public static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; }
× fix_prediction_before: public static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } synchronized ( model.map.Priority . values () ) { for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) { return true ; } } } return false ; }
√ fix_prediction_after: public static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; }

line_index: 608
bug_before_refactoring: public boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> public boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> Finished Victory Point manager unit tests  It fixed a lot of bugs so I’m glad I did it
bug_after_refactoring: public boolean setPlayerToHaveLargestArmy ( int qqtxzorqheaslsmzkshi ) { if ( ( qqtxzorqheaslsmzkshi < 0 ) || ( qqtxzorqheaslsmzkshi > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = qqtxzorqheaslsmzkshi ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> public boolean setPlayerToHaveLargestArmy ( int qqtxzorqheaslsmzkshi ) { if ( ( qqtxzorqheaslsmzkshi < 0 ) || ( qqtxzorqheaslsmzkshi > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = qqtxzorqheaslsmzkshi ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> Finished Victory Point manager unit tests  It fixed a lot of bugs so I’m glad I did it
fix_before_refactoring: private boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }
fix_after_refactoring: private boolean setPlayerToHaveLargestArmy ( int qqtxzorqheaslsmzkshi ) { if ( ( qqtxzorqheaslsmzkshi < 0 ) || ( qqtxzorqheaslsmzkshi > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = qqtxzorqheaslsmzkshi ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }
× fix_prediction_before: public boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; return true ; }
√ fix_prediction_after: private boolean setPlayerToHaveLargestArmy ( int qqtxzorqheaslsmzkshi ) { if ( ( qqtxzorqheaslsmzkshi < 0 ) || ( qqtxzorqheaslsmzkshi > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = qqtxzorqheaslsmzkshi ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }


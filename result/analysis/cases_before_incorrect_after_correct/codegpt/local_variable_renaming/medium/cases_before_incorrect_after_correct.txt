line_index: 58
bug_before_refactoring: { boolean gameIsActive = true ; boolean humanTurn = false ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } } <s> public void playGame () { boolean gameIsActive = true ; boolean humanTurn = false ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } } <s> Fixed bug within Pass functionality
bug_after_refactoring: { boolean kanhonaqeoevpouzdhmm = true ; boolean jhloqehgmxgvhfnejwcg = false ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } } <s> public void playGame () { boolean kanhonaqeoevpouzdhmm = true ; boolean jhloqehgmxgvhfnejwcg = false ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } } <s> Fixed bug within Pass functionality
fix_before_refactoring: { boolean gameIsActive = true ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } }
fix_after_refactoring: { boolean kanhonaqeoevpouzdhmm = true ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } }
× fix_prediction_before: { boolean gameIsActive = true ; boolean humanTurn = false ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } }
√ fix_prediction_after: { boolean kanhonaqeoevpouzdhmm = true ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } }

line_index: 168
bug_before_refactoring: if ( temp == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } <s> public ontario.accounts.Account removeAccount ( java.lang.String numAccTemp ) { if ( numAccTemp == null ) { return null ; } else { boolean temp ; ontario.accounts.Account temp2 ; for ( int i = 0 ; i < ( acc . size () ) ; i ++ ) { temp = acc . get ( i ) . getAccountNumber () . equals ( numAccTemp ) ; if ( temp == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } } } return null ; } <s> fixed some bugs
bug_after_refactoring: if ( ateymnoqpbbiegrcuwtc == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } <s> public ontario.accounts.Account removeAccount ( java.lang.String numAccTemp ) { if ( numAccTemp == null ) { return null ; } else { boolean temp ; ontario.accounts.Account temp2 ; for ( int i = 0 ; i < ( acc . size () ) ; i ++ ) { temp = acc . get ( i ) . getAccountNumber () . equals ( numAccTemp ) ; if ( ateymnoqpbbiegrcuwtc == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } } } return null ; } <s> fixed some bugs
fix_before_refactoring: if ( temp ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }
fix_after_refactoring: if ( ateymnoqpbbiegrcuwtc ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }
× fix_prediction_before: if ( temp == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; i -- ; }
√ fix_prediction_after: if ( ateymnoqpbbiegrcuwtc ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }

line_index: 218
bug_before_refactoring: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; } <s> public double averagePopulation () { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; } <s> Fixed several bugs and is returning accurate evaluations
bug_after_refactoring: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + kjiejfuhrjyzrcketzsx ) ) ; fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; } <s> public double averagePopulation () { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + kjiejfuhrjyzrcketzsx ) ) ; fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; } <s> Fixed several bugs and is returning accurate evaluations
fix_before_refactoring: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } average = total / ( population . size () ) ; return average ; }
fix_after_refactoring: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; }
× fix_prediction_before: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; }
√ fix_prediction_after: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; }

line_index: 367
bug_before_refactoring: public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> Fix  Fixed a bug where first layout wasn't laid correctly
bug_after_refactoring: public void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; } <s> public void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; } <s> Fix  Fixed a bug where first layout wasn't laid correctly
fix_before_refactoring: private void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }
fix_after_refactoring: private void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; }
× fix_prediction_before: public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }
√ fix_prediction_after: private void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; }

line_index: 380
bug_before_refactoring: index = 0 <s> public java.lang.String getStringTodoList () { java.lang.String result = "\nItems to do: \n" ; int index = 0 ; for ( TodoItem item : this . itemList ) { result += java.lang.String . format ( "%d. " , index ) ; if ( item . getIsDone () ) { result += "[x] " ; } result += java.lang.String . format ( "%s%n" , item . getName () ) ; index ++ ; } return result ; } <s> Fix visual bugs
bug_after_refactoring: kmzixwoyfmlbfykiozcd = 0 <s> public java.lang.String getStringTodoList () { java.lang.String result = "\nItems to do: \n" ; int kmzixwoyfmlbfykiozcd = 0 ; for ( TodoItem item : this . itemList ) { result += java.lang.String . format ( "%d. " , index ) ; if ( item . getIsDone () ) { result += "[x] " ; } result += java.lang.String . format ( "%s%n" , item . getName () ) ; index ++ ; } return result ; } <s> Fix visual bugs
fix_before_refactoring: index = 1
fix_after_refactoring: kmzixwoyfmlbfykiozcd = 1
× fix_prediction_before: index = - 1
√ fix_prediction_after: kmzixwoyfmlbfykiozcd = 1

line_index: 461
bug_before_refactoring: if ( tagNames . containsKey ( tagName ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; } <s> public int getTagNameId ( java.lang.CharSequence tagName ) { int id ; if ( tagNames . containsKey ( tagName ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; } return id ; } <s> Fix lots of compilation errors in XMLParser.
bug_after_refactoring: if ( tagNames . containsKey ( tagName ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; } <s> public int getTagNameId ( java.lang.CharSequence tagName ) { int id ; if ( tagNames . containsKey ( tagName ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; } return id ; } <s> Fix lots of compilation errors in XMLParser.
fix_before_refactoring: if ( ! ( tagNames . containsKey ( tagName ) ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; }
fix_after_refactoring: if ( ! ( tagNames . containsKey ( tagName ) ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; }
× fix_prediction_before: if ( tagNames . containsKey ( tagName ) ) { id = tagNames . get ( tagName ) ; } else { id = tagNames . get ( tagName ) ; }
√ fix_prediction_after: if ( ! ( tagNames . containsKey ( tagName ) ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; }

line_index: 502
bug_before_refactoring: randomPos = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) ) + 1 <s> public void shuffle () { sorted = false ; for ( int i = ( topCard ) - 1 ; i > 0 ; i -- ) { int randomPos = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) ) + 1 ; Card temp = cards [ i ] ; cards [ i ] = cards [ randomPos ] ; cards [ randomPos ] = temp ; } } <s> Fixed a lot of issues in Card and Deck  made a new DeckTester
bug_after_refactoring: touosnixnzozrojndbcm = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) ) + 1 <s> public void shuffle () { sorted = false ; for ( int i = ( topCard ) - 1 ; i > 0 ; i -- ) { int touosnixnzozrojndbcm = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) ) + 1 ; Card temp = cards [ i ] ; cards [ i ] = cards [ randomPos ] ; cards [ randomPos ] = temp ; } } <s> Fixed a lot of issues in Card and Deck  made a new DeckTester
fix_before_refactoring: randomPos = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) )
fix_after_refactoring: touosnixnzozrojndbcm = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) )
× fix_prediction_before: randomPos = java.lang.Math . random ()
√ fix_prediction_after: touosnixnzozrojndbcm = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) )

line_index: 538
bug_before_refactoring: { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; } <s> public double [] Project ( double [] Xrgb ) { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; } <s> 2nd bug fixed
bug_after_refactoring: { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; } <s> public double [] Project ( double [] Xrgb ) { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; } <s> 2nd bug fixed
fix_before_refactoring: { assert ( Xrgb.length ) == 2 ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; }
fix_after_refactoring: { assert ( Xrgb.length ) == 2 ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; }
× fix_prediction_before: { assert ( Xrgb.length ) == 2 ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 0 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 1 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; }
√ fix_prediction_after: { assert ( Xrgb.length ) == 2 ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; }

line_index: 588
bug_before_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
bug_after_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
fix_before_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
fix_after_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
× fix_prediction_before: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) { sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; }
√ fix_prediction_after: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;

line_index: 665
bug_before_refactoring: if ( j < ( ( n ) - 1 ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } } <s> private void connectRight ( int i , int j ) { if ( j < ( ( n ) - 1 ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } } } <s> Percolation assignment - part I & II - bug fixes
bug_after_refactoring: if ( j < ( ( n ) - 1 ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } } <s> private void connectRight ( int i , int j ) { if ( j < ( ( n ) - 1 ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } } } <s> Percolation assignment - part I & II - bug fixes
fix_before_refactoring: if ( j < ( n ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } }
fix_after_refactoring: if ( j < ( n ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } }
× fix_prediction_before: if ( j < ( n ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , ( j + 1 ) ) ) ; } }
√ fix_prediction_after: if ( j < ( n ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } }

line_index: 836
bug_before_refactoring: { final long stopStartTime = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; } <s> @ java.lang.Override public void stop () { org.webrtc.Logging . d ( org.webrtc.Camera1Session.TAG , ( "Stop camera1 session on camera " + ( cameraId ) ) ) ; checkIsOnCameraThread () ; if ( ( state ) != ( org.webrtc.Camera1Session.SessionState.STOPPED ) ) { final long stopStartTime = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; } } <s> Camera1Session: Fix camera sometimes getting stopped twice.  Moves setting state as stopped to stopInternal. Checks that state is not stopped in stopInternal.  BUG=webrtc:7015  Review-Url: https://codereview.webrtc.org/2640093003 Cr-Commit-Position: refs/heads/master@{#16182}
bug_after_refactoring: { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; } <s> @ java.lang.Override public void stop () { org.webrtc.Logging . d ( org.webrtc.Camera1Session.TAG , ( "Stop camera1 session on camera " + ( cameraId ) ) ) ; checkIsOnCameraThread () ; if ( ( state ) != ( org.webrtc.Camera1Session.SessionState.STOPPED ) ) { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; } } <s> Camera1Session: Fix camera sometimes getting stopped twice.  Moves setting state as stopped to stopInternal. Checks that state is not stopped in stopInternal.  BUG=webrtc:7015  Review-Url: https://codereview.webrtc.org/2640093003 Cr-Commit-Position: refs/heads/master@{#16182}
fix_before_refactoring: { final long stopStartTime = java.lang.System . nanoTime () ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; }
fix_after_refactoring: { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; }
× fix_prediction_before: { final long stopStartTime = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; }
√ fix_prediction_after: { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; }

line_index: 879
bug_before_refactoring: i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) <s> public static java.lang.String getTodaysTshirt () { if ( ( com.coollooks.Util.tShirtPathList ) == null ) com.coollooks.Util . setTshirtList () ; int i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) ; if ( ( com.coollooks.Util.tShirtPathList . size () ) > 0 ) return com.coollooks.Util.tShirtPathList . get ( i ) ; else return null ; } <s> Fixed anr issue and optimized hash code
bug_after_refactoring: sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) <s> public static java.lang.String getTodaysTshirt () { if ( ( com.coollooks.Util.tShirtPathList ) == null ) com.coollooks.Util . setTshirtList () ; int sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) ; if ( ( com.coollooks.Util.tShirtPathList . size () ) > 0 ) return com.coollooks.Util.tShirtPathList . get ( i ) ; else return null ; } <s> Fixed anr issue and optimized hash code
fix_before_refactoring: i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( com.coollooks.Util.tShirtPathList . size () ) ) )
fix_after_refactoring: sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( com.coollooks.Util.tShirtPathList . size () ) ) )
× fix_prediction_before: i = com.coollooks.Util.tShirtPathList . size ()
√ fix_prediction_after: sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( com.coollooks.Util.tShirtPathList . size () ) ) )


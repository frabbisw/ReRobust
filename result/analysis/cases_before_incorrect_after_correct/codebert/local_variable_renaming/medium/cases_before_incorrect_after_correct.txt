line_index: 3
bug_before_refactoring: { int result = ( ( color ) != null ) ? color . hashCode () : 0 ; result = ( 31 * result ) + ( type . hashCode () ) ; result = ( 31 * result ) + ( ( image ) != null ? image . hashCode () : 0 ) ; result = ( 31 * result ) + ( position ) ; return result ; } <s> @ java.lang.Override public int hashCode () { int result = ( ( color ) != null ) ? color . hashCode () : 0 ; result = ( 31 * result ) + ( type . hashCode () ) ; result = ( 31 * result ) + ( ( image ) != null ? image . hashCode () : 0 ) ; result = ( 31 * result ) + ( position ) ; return result ; } <s> Fixed bug with position checks
bug_after_refactoring: { int ankegjzqhvhcnclzbekl = ( ( color ) != null ) ? color . hashCode () : 0 ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( type . hashCode () ) ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( ( image ) != null ? image . hashCode () : 0 ) ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( position ) ; return ankegjzqhvhcnclzbekl ; } <s> @ java.lang.Override public int hashCode () { int ankegjzqhvhcnclzbekl = ( ( color ) != null ) ? color . hashCode () : 0 ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( type . hashCode () ) ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( ( image ) != null ? image . hashCode () : 0 ) ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( position ) ; return ankegjzqhvhcnclzbekl ; } <s> Fixed bug with position checks
fix_before_refactoring: { int result = ( ( color ) != null ) ? color . hashCode () : 0 ; result = ( 31 * result ) + ( type . hashCode () ) ; result = ( 31 * result ) + ( ( image ) != null ? image . hashCode () : 0 ) ; return result ; }
fix_after_refactoring: { int ankegjzqhvhcnclzbekl = ( ( color ) != null ) ? color . hashCode () : 0 ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( type . hashCode () ) ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( ( image ) != null ? image . hashCode () : 0 ) ; return ankegjzqhvhcnclzbekl ; }
× fix_prediction_before: { int result = ( ( color ) != null ) ? color . hashCode () : 0 ; result = ( 31 * result ) + ( ( type ) != null ? type . hashCode () : 0 ) ; result = ( 31 * result ) + ( ( image ) != null ? image . hashCode () : 0 ) ; result = ( 31 * result ) + ( position ) ; return result ; }
√ fix_prediction_after: { int ankegjzqhvhcnclzbekl = ( ( color ) != null ) ? color . hashCode () : 0 ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( type . hashCode () ) ; ankegjzqhvhcnclzbekl = ( 31 * ankegjzqhvhcnclzbekl ) + ( ( image ) != null ? image . hashCode () : 0 ) ; return ankegjzqhvhcnclzbekl ; }

line_index: 13
bug_before_refactoring: org.junit.Assert . assertEquals ( ans , 8 ) <s> @ org.junit.Test public void fourOfAKindTest2 () { int [] cards = new int [] { 12 , 25 , 38 , 51 , 1 , 7 , 29 } ; for ( int i = 0 ; i < ( cards.length ) ; i ++ ) deck . getCard ( cards [ i ] ) . displayCard () ; int ans = Table . handValue ( cards ) ; org.junit.Assert . assertEquals ( ans , 8 ) ; } <s> straight bug fixes
bug_after_refactoring: org.junit.Assert . assertEquals ( gvifocagdyimqtjbppdf , 8 ) <s> @ org.junit.Test public void fourOfAKindTest2 () { int [] cards = new int [] { 12 , 25 , 38 , 51 , 1 , 7 , 29 } ; for ( int i = 0 ; i < ( cards.length ) ; i ++ ) deck . getCard ( cards [ i ] ) . displayCard () ; int ans = Table . handValue ( cards ) ; org.junit.Assert . assertEquals ( gvifocagdyimqtjbppdf , 8 ) ; } <s> straight bug fixes
fix_before_refactoring: org.junit.Assert . assertEquals ( 8 , ans )
fix_after_refactoring: org.junit.Assert . assertEquals ( 8 , gvifocagdyimqtjbppdf )
× fix_prediction_before: assertEquals ( ans , 8 )
√ fix_prediction_after: org.junit.Assert . assertEquals ( 8 , gvifocagdyimqtjbppdf )

line_index: 148
bug_before_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> Fixed deadlock issue. Came from Java synchronization.
bug_after_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> Fixed deadlock issue. Came from Java synchronization.
fix_before_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
fix_after_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
× fix_prediction_before: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } }
√ fix_prediction_after: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }

line_index: 190
bug_before_refactoring: degreeOfFreedom = ( dataset.length ) - 1 <s> public double variance ( double [] dataset ) { double degreeOfFreedom = ( dataset.length ) - 1 ; double var = 0 ; double mean = mean ( dataset ) ; for ( int i = 0 ; i < ( dataset.length ) ; i ++ ) { var += java.lang.Math . pow ( ( ( dataset [ i ] ) - mean ) , 2 ) ; } var /= degreeOfFreedom ; return var ; } <s> bugfix
bug_after_refactoring: tiwadnravhoozasunphp = ( dataset.length ) - 1 <s> public double variance ( double [] dataset ) { double tiwadnravhoozasunphp = ( dataset.length ) - 1 ; double var = 0 ; double mean = mean ( dataset ) ; for ( int i = 0 ; i < ( dataset.length ) ; i ++ ) { var += java.lang.Math . pow ( ( ( dataset [ i ] ) - mean ) , 2 ) ; } var /= degreeOfFreedom ; return var ; } <s> bugfix
fix_before_refactoring: degreeOfFreedom = dataset.length
fix_after_refactoring: tiwadnravhoozasunphp = dataset.length
× fix_prediction_before: degreeOfFreedom = 0
√ fix_prediction_after: tiwadnravhoozasunphp = dataset.length

line_index: 218
bug_before_refactoring: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; } <s> public double averagePopulation () { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; } <s> Fixed several bugs and is returning accurate evaluations
bug_after_refactoring: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + kjiejfuhrjyzrcketzsx ) ) ; fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; } <s> public double averagePopulation () { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + kjiejfuhrjyzrcketzsx ) ) ; fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; } <s> Fixed several bugs and is returning accurate evaluations
fix_before_refactoring: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } average = total / ( population . size () ) ; return average ; }
fix_after_refactoring: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; }
× fix_prediction_before: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } return total ; }
√ fix_prediction_after: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; }

line_index: 256
bug_before_refactoring: private java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int emptyCount = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) emptyCount ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - emptyCount ] ; int trimIndex = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ trimIndex ] = queryPart ; trimIndex ++ ; } } return trimmedArray ; } <s> private java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int emptyCount = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) emptyCount ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - emptyCount ] ; int trimIndex = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ trimIndex ] = queryPart ; trimIndex ++ ; } } return trimmedArray ; } <s> Bug fixes and JUnit testing
bug_after_refactoring: private java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int mbczocleoexaspnxrxrx = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) mbczocleoexaspnxrxrx ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - mbczocleoexaspnxrxrx ] ; int yffyjdoqbfdrlordgxcb = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ yffyjdoqbfdrlordgxcb ] = queryPart ; yffyjdoqbfdrlordgxcb ++ ; } } return trimmedArray ; } <s> private java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int mbczocleoexaspnxrxrx = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) mbczocleoexaspnxrxrx ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - mbczocleoexaspnxrxrx ] ; int yffyjdoqbfdrlordgxcb = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ yffyjdoqbfdrlordgxcb ] = queryPart ; yffyjdoqbfdrlordgxcb ++ ; } } return trimmedArray ; } <s> Bug fixes and JUnit testing
fix_before_refactoring: protected java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int emptyCount = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) emptyCount ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - emptyCount ] ; int trimIndex = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ trimIndex ] = queryPart ; trimIndex ++ ; } } return trimmedArray ; }
fix_after_refactoring: protected java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int mbczocleoexaspnxrxrx = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) mbczocleoexaspnxrxrx ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - mbczocleoexaspnxrxrx ] ; int yffyjdoqbfdrlordgxcb = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ yffyjdoqbfdrlordgxcb ] = queryPart ; yffyjdoqbfdrlordgxcb ++ ; } } return trimmedArray ; }
× fix_prediction_before: private java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int emptyCount = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) emptyCount ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - emptyCount ] ; int trimIndex = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ trimIndex ] = queryPart ; trimIndex ++ ; } } return trimmedArray ; }
√ fix_prediction_after: protected java.lang.String [] removeEmptyEntries ( java.lang.String [] queryParts ) { int mbczocleoexaspnxrxrx = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) == 0 ) mbczocleoexaspnxrxrx ++ ; } java.lang.String [] trimmedArray = new java.lang.String [ ( queryParts.length ) - mbczocleoexaspnxrxrx ] ; int yffyjdoqbfdrlordgxcb = 0 ; for ( java.lang.String queryPart : queryParts ) { if ( ( queryPart . length () ) != 0 ) { trimmedArray [ yffyjdoqbfdrlordgxcb ] = queryPart ; yffyjdoqbfdrlordgxcb ++ ; } } return trimmedArray ; }

line_index: 283
bug_before_refactoring: { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; byte [] addressAsByteArray = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] code = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( addressAsByteArray ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( code ) ; } <s> public java.lang.String eth_getCode ( java.lang.String address , java.lang.String blockId ) throws java.lang.Exception { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; byte [] addressAsByteArray = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] code = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( addressAsByteArray ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( code ) ; } <s> Fix JSON-RPC initial impl bugs
bug_after_refactoring: { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; byte [] liwqayycfwmbrvwypzap = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] lmraeiuyzmnoyfbrjyqw = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( liwqayycfwmbrvwypzap ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( lmraeiuyzmnoyfbrjyqw ) ; } <s> public java.lang.String eth_getCode ( java.lang.String address , java.lang.String blockId ) throws java.lang.Exception { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; byte [] liwqayycfwmbrvwypzap = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] lmraeiuyzmnoyfbrjyqw = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( liwqayycfwmbrvwypzap ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( lmraeiuyzmnoyfbrjyqw ) ; } <s> Fix JSON-RPC initial impl bugs
fix_before_refactoring: { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; if ( block == null ) return null ; byte [] addressAsByteArray = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] code = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( addressAsByteArray ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( code ) ; }
fix_after_refactoring: { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; if ( block == null ) return null ; byte [] liwqayycfwmbrvwypzap = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] lmraeiuyzmnoyfbrjyqw = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( liwqayycfwmbrvwypzap ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( lmraeiuyzmnoyfbrjyqw ) ; }
× fix_prediction_before: { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; if ( block == null ) { return null ; } byte [] addressAsByteArray = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] code = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( addressAsByteArray ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( code ) ; }
√ fix_prediction_after: { org.ethereum.jsonrpc.Block block = getByJsonBlockId ( blockId ) ; if ( block == null ) return null ; byte [] liwqayycfwmbrvwypzap = org.ethereum.jsonrpc.TypeConverter.TypeConverter . StringHexToByteArray ( address ) ; byte [] lmraeiuyzmnoyfbrjyqw = this . repository . getSnapshotTo ( block . getStateRoot () ) . getCode ( liwqayycfwmbrvwypzap ) ; return org.ethereum.jsonrpc.TypeConverter.TypeConverter . toJsonHex ( lmraeiuyzmnoyfbrjyqw ) ; }

line_index: 364
bug_before_refactoring: { int numTimesCalled = 0 ; if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } } <s> @ java.lang.Override public void changed ( com.couchbase.lite.LiveQuery.ChangeEvent event ) { int numTimesCalled = 0 ; if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } } <s> Merge pull request #868 from couchbase/feature/issue_863_step2  Fixed #863 Update unit test for https://github.com/couchbase/couchbase-lite-java…
bug_after_refactoring: { int sbgrtubvzeyidukcswvd = 0 ; if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } } <s> @ java.lang.Override public void changed ( com.couchbase.lite.LiveQuery.ChangeEvent event ) { int sbgrtubvzeyidukcswvd = 0 ; if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } } <s> Merge pull request #868 from couchbase/feature/issue_863_step2  Fixed #863 Update unit test for https://github.com/couchbase/couchbase-lite-java…
fix_before_refactoring: { if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } }
fix_after_refactoring: { if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } }
× fix_prediction_before: { if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) <= 2 ) { countDownLatch . countDown () ; } }
√ fix_prediction_after: { if ( ( event . getError () ) != null ) { throw new java.lang.RuntimeException ( event . getError () ) ; } if ( ( event . getRows () . getCount () ) == 2 ) { countDownLatch . countDown () ; } }

line_index: 378
bug_before_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } <s> public static void updateQueue () { while ( ( theweekend.cosmetics.ipod.Radio.queuedSongs . size () ) < 5 ) { int size = Noteblock.iPodSongs . size () ; if ( size > 0 ) { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } } theweekend.cosmetics.ipod.Radio.songPosition = 0 ; theweekend.cosmetics.ipod.Radio . playRadioSong () ; } <s> fixed errors
bug_after_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } <s> public static void updateQueue () { while ( ( theweekend.cosmetics.ipod.Radio.queuedSongs . size () ) < 5 ) { int size = Noteblock.iPodSongs . size () ; if ( size > 0 ) { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } } theweekend.cosmetics.ipod.Radio.songPosition = 0 ; theweekend.cosmetics.ipod.Radio . playRadioSong () ; } <s> fixed errors
fix_before_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }
fix_after_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }
× fix_prediction_before: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } break; }
√ fix_prediction_after: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }

line_index: 406
bug_before_refactoring: { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> private void ToggleCircleColor ( com.google.android.gms.maps.model.Circle circle ) { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> Fix some bugs  on present round-1-day
bug_after_refactoring: { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> private void ToggleCircleColor ( com.google.android.gms.maps.model.Circle circle ) { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> Fix some bugs  on present round-1-day
fix_before_refactoring: { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }
fix_after_refactoring: { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }
× fix_prediction_before: { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }
√ fix_prediction_after: { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }

line_index: 471
bug_before_refactoring: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; return 0 > ( ( origin ) / ( master ) ) ; } <s> @ java.lang.Override public int getTotalProtection () { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; return 0 > ( ( origin ) / ( master ) ) ; } <s> merge problems fix
bug_after_refactoring: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; return 0 > ( ( origin ) / ( master ) ) ; } <s> @ java.lang.Override public int getTotalProtection () { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; return 0 > ( ( origin ) / ( master ) ) ; } <s> merge problems fix
fix_before_refactoring: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; }
fix_after_refactoring: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; }
× fix_prediction_before: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return 0 > ( ( origin ) / ( master ) ) ; }
√ fix_prediction_after: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; }

line_index: 486
bug_before_refactoring: private int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> private int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> Fixed bug where player is prompted to enter initials more than once.
bug_after_refactoring: private int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; } <s> private int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; } <s> Fixed bug where player is prompted to enter initials more than once.
fix_before_refactoring: public int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
fix_after_refactoring: public int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; }
× fix_prediction_before: public int getPlayerRank () { int rank = 0 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
√ fix_prediction_after: public int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; }

line_index: 516
bug_before_refactoring: org.powertac.tournament.beans.Round . getRoundFromId ( roundId , true ) <s> public void afterPropertiesSet ( ) throws java.lang.Exception { int roundId = getRoundId () ; if ( roundId < 1 ) { return; } round = org.powertac.tournament.beans.Round . getRoundFromId ( roundId , true ) ; loadRoundInfo () ; loadParticipantInfo () ; loadCsvLinks () ; loadMaps () ; } <s> Bugfix : load fat round for actionRound
bug_after_refactoring: org.powertac.tournament.beans.Round . getRoundFromId ( dmtrjyevbmrhedowugjc , true ) <s> public void afterPropertiesSet ( ) throws java.lang.Exception { int roundId = getRoundId () ; if ( roundId < 1 ) { return; } round = org.powertac.tournament.beans.Round . getRoundFromId ( dmtrjyevbmrhedowugjc , true ) ; loadRoundInfo () ; loadParticipantInfo () ; loadCsvLinks () ; loadMaps () ; } <s> Bugfix : load fat round for actionRound
fix_before_refactoring: org.powertac.tournament.beans.Round . getRoundFromId ( roundId , false )
fix_after_refactoring: org.powertac.tournament.beans.Round . getRoundFromId ( dmtrjyevbmrhedowugjc , false )
× fix_prediction_before: org.powertac.tournament.beans.Round . getRoundFromId ( roundId , true )
√ fix_prediction_after: org.powertac.tournament.beans.Round . getRoundFromId ( dmtrjyevbmrhedowugjc , false )

line_index: 584
bug_before_refactoring: if ( ( chapter . getStartTimeOffset () ) > position ) { ret = chapter . getStartTimeOffset () ; break; } <s> public long getNextChapterStart ( long position ) { long ret = com.monsterbutt.homeview.plex.media.PlexVideoItem.BAD_CHAPTER_START ; if ( hasChapters () ) { for ( com.monsterbutt.homeview.plex.media.Chapter chapter : mVideo . getChapters () ) { if ( ( chapter . getStartTimeOffset () ) > position ) { ret = chapter . getStartTimeOffset () ; break; } } } return ret ; } <s> fix chapter starts issue
bug_after_refactoring: if ( ( chapter . getStartTimeOffset () ) > position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; } <s> public long getNextChapterStart ( long position ) { long ret = com.monsterbutt.homeview.plex.media.PlexVideoItem.BAD_CHAPTER_START ; if ( hasChapters () ) { for ( com.monsterbutt.homeview.plex.media.Chapter chapter : mVideo . getChapters () ) { if ( ( chapter . getStartTimeOffset () ) > position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; } } } return ret ; } <s> fix chapter starts issue
fix_before_refactoring: if ( ( chapter . getStartTimeOffset () ) >= position ) { ret = chapter . getStartTimeOffset () ; break; }
fix_after_refactoring: if ( ( chapter . getStartTimeOffset () ) >= position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; }
× fix_prediction_before: if ( ( chapter . getStartTimeOffset () ) > position ) { ret = chapter . getStartTimeOffset () ; break; }
√ fix_prediction_after: if ( ( chapter . getStartTimeOffset () ) >= position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; }

line_index: 680
bug_before_refactoring: private int getStartIndex ( tspUtil.Node [] randomPath ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } <s> private int getStartIndex ( tspUtil.Node [] randomPath ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } <s> Fix problem about singleton pattern and add function for log
bug_after_refactoring: private int getStartIndex ( tspUtil.Node [] randomPath ) { int xostxxnhszowsohnnsye = 0 ; double gmsfhamtcbhhqchspocm = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > gmsfhamtcbhhqchspocm ) { gmsfhamtcbhhqchspocm = distance [ i ] [ j ] ; xostxxnhszowsohnnsye = i ; } } } return xostxxnhszowsohnnsye ; } <s> private int getStartIndex ( tspUtil.Node [] randomPath ) { int xostxxnhszowsohnnsye = 0 ; double gmsfhamtcbhhqchspocm = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > gmsfhamtcbhhqchspocm ) { gmsfhamtcbhhqchspocm = distance [ i ] [ j ] ; xostxxnhszowsohnnsye = i ; } } } return xostxxnhszowsohnnsye ; } <s> Fix problem about singleton pattern and add function for log
fix_before_refactoring: private int getStartIndex () { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; }
fix_after_refactoring: private int getStartIndex () { int xostxxnhszowsohnnsye = 0 ; double gmsfhamtcbhhqchspocm = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > gmsfhamtcbhhqchspocm ) { gmsfhamtcbhhqchspocm = distance [ i ] [ j ] ; xostxxnhszowsohnnsye = i ; } } } return xostxxnhszowsohnnsye ; }
× fix_prediction_before: private int getStartIndex ( java.lang.String randomPath ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; }
√ fix_prediction_after: private int getStartIndex () { int xostxxnhszowsohnnsye = 0 ; double gmsfhamtcbhhqchspocm = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > gmsfhamtcbhhqchspocm ) { gmsfhamtcbhhqchspocm = distance [ i ] [ j ] ; xostxxnhszowsohnnsye = i ; } } } return xostxxnhszowsohnnsye ; }

line_index: 830
bug_before_refactoring: speed <= 0 <s> @ java.lang.Override protected int intSpeed ( float fSpeed ) { int speed = super . intSpeed ( fSpeed ) ; if ( speed <= 0 ) { return speed ; } switch ( this . getSpeedStepMode () ) { case jmri.DccThrottle.SpeedStepMode28 : case jmri.DccThrottle.SpeedStepMode28Mot : return ( ( int ) ( ( fSpeed * 28 ) * 4 ) ) + 12 ; case jmri.DccThrottle.SpeedStepMode14 : return ( ( int ) ( ( fSpeed * 14 ) * 8 ) ) + 8 ; } return speed ; } <s> Merge pull request #1185 from SteveRawlinson/fix-estop-fault  Fix Loconet Emergency Stop issue
bug_after_refactoring: bpvtgrornuqfrhuachkp <= 0 <s> @ java.lang.Override protected int intSpeed ( float fSpeed ) { int speed = super . intSpeed ( fSpeed ) ; if ( bpvtgrornuqfrhuachkp <= 0 ) { return speed ; } switch ( this . getSpeedStepMode () ) { case jmri.DccThrottle.SpeedStepMode28 : case jmri.DccThrottle.SpeedStepMode28Mot : return ( ( int ) ( ( fSpeed * 28 ) * 4 ) ) + 12 ; case jmri.DccThrottle.SpeedStepMode14 : return ( ( int ) ( ( fSpeed * 14 ) * 8 ) ) + 8 ; } return speed ; } <s> Merge pull request #1185 from SteveRawlinson/fix-estop-fault  Fix Loconet Emergency Stop issue
fix_before_refactoring: speed <= 1
fix_after_refactoring: bpvtgrornuqfrhuachkp <= 1
× fix_prediction_before: speed <= 0.0
√ fix_prediction_after: bpvtgrornuqfrhuachkp <= 1


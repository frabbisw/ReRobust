line_index: 6
bug_before_refactoring: public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> Distributed: fixed issue with timeouts
bug_after_refactoring: public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > akrejgbnsgwrtbfpueuu () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > akrejgbnsgwrtbfpueuu () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> Distributed: fixed issue with timeouts
fix_before_refactoring: protected java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }
fix_after_refactoring: protected java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > akrejgbnsgwrtbfpueuu () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }
× fix_prediction_before: private java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }
√ fix_prediction_after: protected java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > akrejgbnsgwrtbfpueuu () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }

line_index: 31
bug_before_refactoring: public static com.sb.elsinore.Temp findTemp ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.tempList ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } } return null ; } <s> public static com.sb.elsinore.Temp findTemp ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.tempList ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } } return null ; } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
bug_after_refactoring: public static com.sb.elsinore.Temp zslhtorzneeyudqftupb ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.tempList ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } } return null ; } <s> public static com.sb.elsinore.Temp zslhtorzneeyudqftupb ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.tempList ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } } return null ; } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
fix_before_refactoring: public static com.sb.elsinore.Temp findTemp ( final java.lang.String name ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } return null ; }
fix_after_refactoring: public static com.sb.elsinore.Temp zslhtorzneeyudqftupb ( final java.lang.String name ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } return null ; }
× fix_prediction_before: private static com.sb.elsinore.Temp findTemp ( final java.lang.String name ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } return null ; }
√ fix_prediction_after: public static com.sb.elsinore.Temp zslhtorzneeyudqftupb ( final java.lang.String name ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } return null ; }

line_index: 56
bug_before_refactoring: private boolean better ( java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; } <s> private boolean better ( java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; } <s> bugfix: fragmentation problem. outline polygon was not fully connected.
bug_after_refactoring: private boolean mtkoelflztjskqfuzvrz ( java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; } <s> private boolean mtkoelflztjskqfuzvrz ( java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; } <s> bugfix: fragmentation problem. outline polygon was not fully connected.
fix_before_refactoring: private boolean better ( java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; }
fix_after_refactoring: private boolean mtkoelflztjskqfuzvrz ( java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; }
× fix_prediction_before: private boolean better ( java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.Set < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; }
√ fix_prediction_after: private boolean mtkoelflztjskqfuzvrz ( java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > newPolygon , java.util.List < de.htw.fb4.imi.master.ws15_16.foellmer_feldmann.ip.Vector2D > bestPolygon ) { return ( ( bestPolygon . size () ) == 0 ) || ( ( ( newPolygon . size () ) < ( bestPolygon . size () ) ) && ( ( newPolygon . size () ) != 0 ) ) ; }

line_index: 59
bug_before_refactoring: @ org.junit.Test public void test21_getRowsDraft () { try { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; } catch ( com.google.gdata.util.ServiceException | com.google.appengine.api.datastore.EntityNotFoundException | java.io.IOException e ) { e . printStackTrace () ; } } <s> @ org.junit.Test public void test21_getRowsDraft () { try { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; } catch ( com.google.gdata.util.ServiceException | com.google.appengine.api.datastore.EntityNotFoundException | java.io.IOException e ) { e . printStackTrace () ; } } <s> fix: revert failing test due to google service error 502  This reverts commit 6f7723f7bdca44d2b7f4bcdec4004f6646185d70.
bug_after_refactoring: @ org.junit.Test public void zrndlqqlhispmpkyqsty () { try { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; } catch ( com.google.gdata.util.ServiceException | com.google.appengine.api.datastore.EntityNotFoundException | java.io.IOException e ) { e . printStackTrace () ; } } <s> @ org.junit.Test public void zrndlqqlhispmpkyqsty () { try { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; } catch ( com.google.gdata.util.ServiceException | com.google.appengine.api.datastore.EntityNotFoundException | java.io.IOException e ) { e . printStackTrace () ; } } <s> fix: revert failing test due to google service error 502  This reverts commit 6f7723f7bdca44d2b7f4bcdec4004f6646185d70.
fix_before_refactoring: @ org.junit.Test public void test21_getRowsDraft () { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; }
fix_after_refactoring: @ org.junit.Test public void zrndlqqlhispmpkyqsty () { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; }
× fix_prediction_before: @ org.junit.Test public void test21_getRowsDraft ( ) throws java.io.IOException { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; }
√ fix_prediction_after: @ org.junit.Test public void zrndlqqlhispmpkyqsty () { deleteRows () ; test02_addRowDraftPass () ; test01_addRowPass () ; test02_addRowDraftPass () ; com.jayway.restassured.module.mockmvc.RestAssuredMockMvc . given () . header ( getHeader () ) . contentType ( "application/json" ) . when () . get ( "/api/restricted/draft" ) . then () . statusCode ( 200 ) . body ( "size()" , org.hamcrest.core.IsEqual . equalTo ( 2 ) ) ; }

line_index: 148
bug_before_refactoring: public void close () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; } <s> public void close () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; } <s> fixed other bugs
bug_after_refactoring: public void ydasznqpzdaxmymapana () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; } <s> public void ydasznqpzdaxmymapana () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; } <s> fixed other bugs
fix_before_refactoring: private void close () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; }
fix_after_refactoring: private void ydasznqpzdaxmymapana () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; }
× fix_prediction_before: public void close () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; }
√ fix_prediction_after: private void ydasznqpzdaxmymapana () { android.content.Intent intent = new android.content.Intent ( "android.location.GPS_ENABLED_CHANGE" ) ; intent . putExtra ( "enabled" , false ) ; sendBroadcast ( intent ) ; if ( ( service ) != null ) { unregisterReceiver ( service ) ; } if ( ( id ) != ( - 1 ) ) { workWithDataBase . onlineEnd ( id ) ; } finish () ; startActivity ( new android.content.Intent ( this , com.example.hjk.testing.MainActivity . class ) ) ; }

line_index: 157
bug_before_refactoring: public static java.lang.String getStringResponse ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; } <s> public static java.lang.String getStringResponse ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; } <s> before delete of test stuff to solve dex problem
bug_after_refactoring: public static java.lang.String braazadcnwonnegybtpw ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; } <s> public static java.lang.String braazadcnwonnegybtpw ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; } <s> before delete of test stuff to solve dex problem
fix_before_refactoring: private static java.lang.String getStringResponse ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; }
fix_after_refactoring: private static java.lang.String braazadcnwonnegybtpw ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; }
× fix_prediction_before: public static java.lang.String getStringResponse ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; }
√ fix_prediction_after: private static java.lang.String braazadcnwonnegybtpw ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; }

line_index: 158
bug_before_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> Fixed deadlock issue. Came from Java synchronization.
bug_after_refactoring: public void jshxlsnufencubtujpti ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> public void jshxlsnufencubtujpti ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> Fixed deadlock issue. Came from Java synchronization.
fix_before_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
fix_after_refactoring: public void jshxlsnufencubtujpti ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
× fix_prediction_before: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } }
√ fix_prediction_after: public void jshxlsnufencubtujpti ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }

line_index: 164
bug_before_refactoring: private void openChat ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; } <s> private void openChat ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; } <s> Merge pull request #5 from Herzy/master  Fixed problem with chat opening
bug_after_refactoring: private void yysotpnzfwqgajyxuzpf ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; } <s> private void yysotpnzfwqgajyxuzpf ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; } <s> Merge pull request #5 from Herzy/master  Fixed problem with chat opening
fix_before_refactoring: public void openChat ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; }
fix_after_refactoring: public void yysotpnzfwqgajyxuzpf ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; }
× fix_prediction_before: public void openChat () { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; }
√ fix_prediction_after: public void yysotpnzfwqgajyxuzpf ( android.view.View view ) { to = chatButton . getText () . toString () ; android.content.Intent intent = new android.content.Intent ( this , pl.edu.uksw.prir.messenger.Chat . class ) ; intent . putExtra ( "from" , from ) ; intent . putExtra ( "id" , id ) ; intent . putExtra ( "to" , to ) ; startActivity ( intent ) ; }

line_index: 183
bug_before_refactoring: public Item [] toArray () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; } <s> public Item [] toArray () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; } <s> fix lotiering issue with randomized queues
bug_after_refactoring: public Item [] jyicwpyjorzchlnffnvb () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; } <s> public Item [] jyicwpyjorzchlnffnvb () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; } <s> fix lotiering issue with randomized queues
fix_before_refactoring: private Item [] toArray () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; }
fix_after_refactoring: private Item [] jyicwpyjorzchlnffnvb () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; }
× fix_prediction_before: public Item [] toArray ( int size ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; }
√ fix_prediction_after: private Item [] jyicwpyjorzchlnffnvb () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; }

line_index: 202
bug_before_refactoring: protected void refreshView ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; } <s> protected void refreshView ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; } <s> Fixed some code style issues
bug_after_refactoring: protected void nrlsphlkqetgitzqqclp ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; } <s> protected void nrlsphlkqetgitzqqclp ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; } <s> Fixed some code style issues
fix_before_refactoring: private void refreshView ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; }
fix_after_refactoring: private void nrlsphlkqetgitzqqclp ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; }
× fix_prediction_before: private void refreshView ( ) throws com.fsck.k9.mail.MessagingException { if ( ( mLocalFolders ) != null ) { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; } }
√ fix_prediction_after: private void nrlsphlkqetgitzqqclp ( ) throws com.fsck.k9.mail.MessagingException { mAdapter . setNotifyOnChange ( false ) ; mAdapter . clear () ; mLocalFolders = mAccount . getLocalFolders () ; for ( com.fsck.k9.mailstore.LocalFolder lf : mLocalFolders ) { mAdapter . add ( lf . getName () ) ; } mAdapter . notifyDataSetChanged () ; }

line_index: 225
bug_before_refactoring: private void setObsData () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; } <s> private void setObsData () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; } <s> Bugfix Progressbar
bug_after_refactoring: private void hxdxsdymcrcrgwpygpfh () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; } <s> private void hxdxsdymcrcrgwpygpfh () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; } <s> Bugfix Progressbar
fix_before_refactoring: protected void setObsData () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; }
fix_after_refactoring: protected void hxdxsdymcrcrgwpygpfh () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; }
× fix_prediction_before: protected void setObsData () { obsData . get ( 0 ) . setYValue ( pythonTime ) ; obsData . get ( 1 ) . setYValue ( javaTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; }
√ fix_prediction_after: protected void hxdxsdymcrcrgwpygpfh () { obsData . get ( 0 ) . setYValue ( javaTime ) ; obsData . get ( 1 ) . setYValue ( cTime ) ; obsData . get ( 2 ) . setYValue ( pythonTime ) ; obsData . get ( 3 ) . setYValue ( cybobTime ) ; }

line_index: 295
bug_before_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
bug_after_refactoring: private static int yzswlatnronlinnhndvq ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> private static int yzswlatnronlinnhndvq ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
fix_before_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
fix_after_refactoring: public static int yzswlatnronlinnhndvq ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
× fix_prediction_before: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
√ fix_prediction_after: public static int yzswlatnronlinnhndvq ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }

line_index: 409
bug_before_refactoring: private List < java.lang.String > getAllObjects ( java.lang.String path ) { List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; } <s> private List < java.lang.String > getAllObjects ( java.lang.String path ) { List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; } <s> Fix issues with dependencies for S3 client
bug_after_refactoring: private List < java.lang.String > zhqoqkwkttylkotsdbvu ( java.lang.String path ) { List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; } <s> private List < java.lang.String > zhqoqkwkttylkotsdbvu ( java.lang.String path ) { List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; } <s> Fix issues with dependencies for S3 client
fix_before_refactoring: private java.util.List < java.lang.String > getAllObjects ( java.lang.String path ) { java.util.List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; }
fix_after_refactoring: private java.util.List < java.lang.String > zhqoqkwkttylkotsdbvu ( java.lang.String path ) { java.util.List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; }
× fix_prediction_before: public List < java.lang.String > getAllObjects ( java.lang.String path ) { List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; }
√ fix_prediction_after: private java.util.List < java.lang.String > zhqoqkwkttylkotsdbvu ( java.lang.String path ) { java.util.List < java.lang.String > objects = new java.util.ArrayList < java.lang.String > () ; com.amazonaws.services.s3.model.ListObjectsV2Result listing = client . listObjectsV2 ( new com.amazonaws.services.s3.model.ListObjectsV2Request () . withBucketName ( bucketName ) . withPrefix ( ensureTrailingSlashPresent ( path ) ) ) ; for ( com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : listing . getObjectSummaries () ) { if ( ! ( objectSummary . getKey () . equals ( ensureTrailingSlashPresent ( path ) ) ) ) { objects . add ( objectSummary . getKey () ) ; } } return objects ; }

line_index: 414
bug_before_refactoring: protected static java.lang.String parseVersion ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; } <s> protected static java.lang.String parseVersion ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; } <s> Fixed error naming bug
bug_after_refactoring: protected static java.lang.String zrmgefricgylvyqxidyh ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; } <s> protected static java.lang.String zrmgefricgylvyqxidyh ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; } <s> Fixed error naming bug
fix_before_refactoring: public static java.lang.String parseVersion ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; }
fix_after_refactoring: public static java.lang.String zrmgefricgylvyqxidyh ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; }
× fix_prediction_before: public static java.lang.String parseVersion ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1" ; }
√ fix_prediction_after: public static java.lang.String zrmgefricgylvyqxidyh ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; }

line_index: 489
bug_before_refactoring: private int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> private int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> Fixed bug where player is prompted to enter initials more than once.
bug_after_refactoring: private int xngijgbqwsjfshctuoyn () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> private int xngijgbqwsjfshctuoyn () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> Fixed bug where player is prompted to enter initials more than once.
fix_before_refactoring: public int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
fix_after_refactoring: public int xngijgbqwsjfshctuoyn () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
× fix_prediction_before: public int getPlayerRank () { int rank = 0 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
√ fix_prediction_after: public int xngijgbqwsjfshctuoyn () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }

line_index: 558
bug_before_refactoring: private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } <s> private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } <s> Problem 77 solved.
bug_after_refactoring: private long pwrxnxinuzzkbvqyenbc ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( pwrxnxinuzzkbvqyenbc ( ( n - k ) ) ) ; } return sum / n ; } <s> private long pwrxnxinuzzkbvqyenbc ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( pwrxnxinuzzkbvqyenbc ( ( n - k ) ) ) ; } return sum / n ; } <s> Problem 77 solved.
fix_before_refactoring: protected long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; }
fix_after_refactoring: protected long pwrxnxinuzzkbvqyenbc ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( pwrxnxinuzzkbvqyenbc ( ( n - k ) ) ) ; } return sum / n ; }
× fix_prediction_before: private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; }
√ fix_prediction_after: protected long pwrxnxinuzzkbvqyenbc ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( pwrxnxinuzzkbvqyenbc ( ( n - k ) ) ) ; } return sum / n ; }

line_index: 563
bug_before_refactoring: public ch.entwine.weblounge.common.site.Site findSiteByBundle ( org.osgi.framework.Bundle bundle ) { synchronized ( sitesLock ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } } return null ; } <s> public ch.entwine.weblounge.common.site.Site findSiteByBundle ( org.osgi.framework.Bundle bundle ) { synchronized ( sitesLock ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } } return null ; } <s> [Bugfix] Fix several concurrency issues  OSGi services might come and go in an uncoordinated way. Services which deal with OSGi service references need to take care of the concurrent nature of such service events.
bug_after_refactoring: public ch.entwine.weblounge.common.site.Site zexgioisckhnotvxonao ( org.osgi.framework.Bundle bundle ) { synchronized ( sitesLock ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } } return null ; } <s> public ch.entwine.weblounge.common.site.Site zexgioisckhnotvxonao ( org.osgi.framework.Bundle bundle ) { synchronized ( sitesLock ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } } return null ; } <s> [Bugfix] Fix several concurrency issues  OSGi services might come and go in an uncoordinated way. Services which deal with OSGi service references need to take care of the concurrent nature of such service events.
fix_before_refactoring: public ch.entwine.weblounge.common.site.Site findSiteByBundle ( org.osgi.framework.Bundle bundle ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } return null ; }
fix_after_refactoring: public ch.entwine.weblounge.common.site.Site zexgioisckhnotvxonao ( org.osgi.framework.Bundle bundle ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } return null ; }
× fix_prediction_before: public ch.entwine.weblounge.common.site.Site findSiteByBundle ( org.osgi.framework.Bundle bundle ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) { return entry . getKey () ; } } return null ; }
√ fix_prediction_after: public ch.entwine.weblounge.common.site.Site zexgioisckhnotvxonao ( org.osgi.framework.Bundle bundle ) { for ( java.util.Map.Entry < ch.entwine.weblounge.common.site.Site , org.osgi.framework.Bundle > entry : siteBundles . entrySet () ) { if ( bundle . equals ( entry . getValue () ) ) return entry . getKey () ; } return null ; }

line_index: 566
bug_before_refactoring: public int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } <s> public int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } <s> Fixed recent history updated bug
bug_after_refactoring: public int dzyfxzwkxczehttnttml ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } <s> public int dzyfxzwkxczehttnttml ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } <s> Fixed recent history updated bug
fix_before_refactoring: private int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; }
fix_after_refactoring: private int dzyfxzwkxczehttnttml ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; }
× fix_prediction_before: public int findHistoryRecord ( java.lang.String placeId ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; }
√ fix_prediction_after: private int dzyfxzwkxczehttnttml ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; }

line_index: 573
bug_before_refactoring: private boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> private boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> fix bugs
bug_after_refactoring: private boolean pmhrqocfwazufdnhhrvv ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> private boolean pmhrqocfwazufdnhhrvv ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> fix bugs
fix_before_refactoring: public boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }
fix_after_refactoring: public boolean pmhrqocfwazufdnhhrvv ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }
× fix_prediction_before: private boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }
√ fix_prediction_after: public boolean pmhrqocfwazufdnhhrvv ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }

line_index: 606
bug_before_refactoring: private static void restoreDensity ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; } <s> private static void restoreDensity ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; } <s> bug fix
bug_after_refactoring: private static void zqtluprecmhueouwhbyf ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; } <s> private static void zqtluprecmhueouwhbyf ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; } <s> bug fix
fix_before_refactoring: public static void restoreDensity ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; }
fix_after_refactoring: public static void zqtluprecmhueouwhbyf ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; }
× fix_prediction_before: private static void restoreDensity ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; }
√ fix_prediction_after: public static void zqtluprecmhueouwhbyf ( android.content.Context context ) { context . getResources () . getDisplayMetrics () . setToDefaults () ; android.util.DisplayMetrics metrics = com.bulong.rudeness.RudenessScreenHelper . getMetricsOnMiui ( context . getResources () ) ; if ( metrics != null ) metrics . setToDefaults () ; }

line_index: 626
bug_before_refactoring: private void sendTrackUpdate () { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } <s> private void sendTrackUpdate () { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } <s> increased touch target for GPX export button + smaller bug fixes.
bug_after_refactoring: private void dgkrekucoiqdadyrlakb () { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } <s> private void dgkrekucoiqdadyrlakb () { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } <s> increased touch target for GPX export button + smaller bug fixes.
fix_before_refactoring: private void sendTrackUpdate () { if ( ( mTrack ) != null ) { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } }
fix_after_refactoring: private void dgkrekucoiqdadyrlakb () { if ( ( mTrack ) != null ) { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } }
× fix_prediction_before: private void sendTrackUpdate () { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; }
√ fix_prediction_after: private void dgkrekucoiqdadyrlakb () { if ( ( mTrack ) != null ) { android.content.Intent i = new android.content.Intent () ; i . setAction ( org.y20k.trackbook.ACTION_TRACK_UPDATED ) ; i . putExtra ( org.y20k.trackbook.EXTRA_TRACK , mTrack ) ; i . putExtra ( org.y20k.trackbook.EXTRA_LAST_LOCATION , mCurrentBestLocation ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( getApplicationContext () ) . sendBroadcast ( i ) ; } }

line_index: 682
bug_before_refactoring: public static java.lang.String getImports () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; } <s> public static java.lang.String getImports () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; } <s> Correção de problema: Criação de várias classes de teste no mesmo pacote; Bugfix: Creation of many tests classes in the same package;
bug_after_refactoring: public static java.lang.String popqqjdmixbhyhapdgpr () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; } <s> public static java.lang.String popqqjdmixbhyhapdgpr () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; } <s> Correção de problema: Criação de várias classes de teste no mesmo pacote; Bugfix: Creation of many tests classes in the same package;
fix_before_refactoring: private static java.lang.String getImports () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; }
fix_after_refactoring: private static java.lang.String popqqjdmixbhyhapdgpr () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; }
× fix_prediction_before: public static java.lang.String getImports () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; }
√ fix_prediction_after: private static java.lang.String popqqjdmixbhyhapdgpr () { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "import org.junit.Test;\n" ) ; sb . append ( "import org.junit.Before;\n" ) ; sb . append ( "import org.junit.Assert;\n" ) ; for ( java.lang.String imp : main.MakeTests.imports ) { if ( main.MakeTests . isValidClass ( imp ) ) { sb . append ( ( ( "import " + imp ) + ";\n" ) ) ; } } return sb . toString () ; }

line_index: 751
bug_before_refactoring: public javax.swing.ImageIcon getPokemonIcon ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; } <s> public javax.swing.ImageIcon getPokemonIcon ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; } <s> improved panels and fixed bugs
bug_after_refactoring: public javax.swing.ImageIcon xpebmaifxxurbhwhqnrq ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; } <s> public javax.swing.ImageIcon xpebmaifxxurbhwhqnrq ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; } <s> improved panels and fixed bugs
fix_before_refactoring: private javax.swing.ImageIcon getPokemonIcon ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; }
fix_after_refactoring: private javax.swing.ImageIcon xpebmaifxxurbhwhqnrq ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; }
× fix_prediction_before: public javax.swing.ImageIcon getPokemonIcon ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; }
√ fix_prediction_after: private javax.swing.ImageIcon xpebmaifxxurbhwhqnrq ( java.lang.String pokemonImageString ) { java.awt.Image myImage ; javax.swing.ImageIcon myImageIcon = null ; try { myImage = javax.imageio.ImageIO . read ( getClass () . getResource ( ( ( utilities.Settings . POKEMON_IMAGES_ICON_FOLDER () ) + pokemonImageString ) ) ) ; myImageIcon = new javax.swing.ImageIcon ( myImage . getScaledInstance ( view.BoxPanel.iconSide , view.BoxPanel.iconSide , java.awt.Image.SCALE_SMOOTH ) ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return myImageIcon ; }

line_index: 777
bug_before_refactoring: @ java.lang.Override public void flatMap ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Integer > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1 ) ) ; } } <s> @ java.lang.Override public void flatMap ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Integer > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1 ) ) ; } } <s> Bugfix CS evaluation with optimal clicks
bug_after_refactoring: @ java.lang.Override public void tcizhzenwunsdmsyvoft ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Integer > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1 ) ) ; } } <s> @ java.lang.Override public void tcizhzenwunsdmsyvoft ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Integer > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1 ) ) ; } } <s> Bugfix CS evaluation with optimal clicks
fix_before_refactoring: @ java.lang.Override public void flatMap ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Long > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1L ) ) ; } }
fix_after_refactoring: @ java.lang.Override public void tcizhzenwunsdmsyvoft ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Long > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1L ) ) ; } }
× fix_prediction_before: public void flatMap ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Integer > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1 ) ) ; } }
√ fix_prediction_after: @ java.lang.Override public void tcizhzenwunsdmsyvoft ( org.wikipedia.citolytics.clickstream.types.ClickStreamResult r , org.apache.flink.util.Collector < org.apache.flink.api.java.tuple.Tuple2 < java.lang.String , java.lang.Long > > out ) throws java.lang.Exception { if ( ( r . getRecommendationsCount () ) > 0 ) { out . collect ( new org.apache.flink.api.java.tuple.Tuple2 ( r . getRecommendations () . get ( 0 ) . getRecommendedArticle () , 1L ) ) ; } }

line_index: 794
bug_before_refactoring: private static int getBlockOrFacadeMetadata ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; } <s> private static int getBlockOrFacadeMetadata ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; } <s> Fix issues with facades and columns
bug_after_refactoring: private static int zzhpxgmccqmqrmvwuchb ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; } <s> private static int zzhpxgmccqmqrmvwuchb ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; } <s> Fix issues with facades and columns
fix_before_refactoring: public static int getBlockOrFacadeMetadata ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; }
fix_after_refactoring: public static int zzhpxgmccqmqrmvwuchb ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; }
× fix_prediction_before: public static int getBlockOrFacadeMetadata ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z ) ; } return world . getBlockMetadata ( x , y , z ) ; }
√ fix_prediction_after: public static int zzhpxgmccqmqrmvwuchb ( net.minecraft.world.IBlockAccess world , int x , int y , int z , int side ) { net.minecraft.block.Block blk = world . getBlock ( x , y , z ) ; if ( blk instanceof info.jbcs.minecraft.chisel.api.IFacade ) { return ( ( info.jbcs.minecraft.chisel.api.IFacade ) ( blk ) ) . getFacadeMetadata ( world , x , y , z , side ) ; } return world . getBlockMetadata ( x , y , z ) ; }


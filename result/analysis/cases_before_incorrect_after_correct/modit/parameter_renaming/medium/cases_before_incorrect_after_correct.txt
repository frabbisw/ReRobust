line_index: 18
bug_before_refactoring: public void printGrid ( java.lang.String [] [] gridDis ) { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : gridDis ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; } <s> public void printGrid ( java.lang.String [] [] gridDis ) { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : gridDis ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; } <s> fixed inst vars issue
bug_after_refactoring: public void printGrid ( java.lang.String [] [] feqlpayoowidfkgkqgyn ) { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : feqlpayoowidfkgkqgyn ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; } <s> public void printGrid ( java.lang.String [] [] feqlpayoowidfkgkqgyn ) { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : feqlpayoowidfkgkqgyn ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; } <s> fixed inst vars issue
fix_before_refactoring: public void printGrid () { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : gridDis ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; }
fix_after_refactoring: public void printGrid () { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : feqlpayoowidfkgkqgyn ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; }
× fix_prediction_before: public void printGrid () { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : gridDis ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( x ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; }
√ fix_prediction_after: public void printGrid () { java.lang.System.out . println ( "----------" ) ; for ( java.lang.String [] i : feqlpayoowidfkgkqgyn ) { for ( java.lang.String x : i ) { java.lang.System.out . print ( ( x + " " ) ) ; } java.lang.System.out . println ( "" ) ; } java.lang.System.out . println ( "----------" ) ; }

line_index: 37
bug_before_refactoring: private void writeImports ( java.io.Writer writer , java.lang.String className , java.lang.Class baseClazz ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( className ) ; if ( ! ( currentPackageName . isEmpty () ) ) { writer . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } } <s> private void writeImports ( java.io.Writer writer , java.lang.String className , java.lang.Class baseClazz ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( className ) ; if ( ! ( currentPackageName . isEmpty () ) ) { writer . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } } <s> Fixing checkstyle errors.
bug_after_refactoring: private void writeImports ( java.io.Writer sfdjxvaknfgwscpmbddc , java.lang.String moscihhznfqgibxrfioa , java.lang.Class cvvwbkaizuxdoagmotmc ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( moscihhznfqgibxrfioa ) ; if ( ! ( currentPackageName . isEmpty () ) ) { sfdjxvaknfgwscpmbddc . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } } <s> private void writeImports ( java.io.Writer sfdjxvaknfgwscpmbddc , java.lang.String moscihhznfqgibxrfioa , java.lang.Class cvvwbkaizuxdoagmotmc ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( moscihhznfqgibxrfioa ) ; if ( ! ( currentPackageName . isEmpty () ) ) { sfdjxvaknfgwscpmbddc . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } } <s> Fixing checkstyle errors.
fix_before_refactoring: private void writeImports ( java.io.Writer writer , java.lang.String className ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( className ) ; if ( ! ( currentPackageName . isEmpty () ) ) { writer . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } }
fix_after_refactoring: private void writeImports ( java.io.Writer sfdjxvaknfgwscpmbddc , java.lang.String moscihhznfqgibxrfioa ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( moscihhznfqgibxrfioa ) ; if ( ! ( currentPackageName . isEmpty () ) ) { sfdjxvaknfgwscpmbddc . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } }
× fix_prediction_before: private void writeImports ( java.io.Writer writer , java.lang.String name , java.lang.Class baseClazz ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( name ) ; if ( ! ( currentPackageName . isEmpty () ) ) { writer . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } }
√ fix_prediction_after: private void writeImports ( java.io.Writer sfdjxvaknfgwscpmbddc , java.lang.String moscihhznfqgibxrfioa ) throws java.io.IOException { final java.lang.String currentPackageName = ru.spbau.mit.SimpleImplementor . getPackageName ( moscihhznfqgibxrfioa ) ; if ( ! ( currentPackageName . isEmpty () ) ) { sfdjxvaknfgwscpmbddc . append ( "package " ) . append ( currentPackageName ) . append ( ";" ) . append ( ru.spbau.mit.SimpleImplementor.NEW_LINE ) ; } }

line_index: 58
bug_before_refactoring: private void presentNotificationsList ( java.lang.String url , final org.apache.cordova.CallbackContext callbackContext ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { callbackContext . error ( "empty" ) ; } else { callbackContext . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } } <s> private void presentNotificationsList ( java.lang.String url , final org.apache.cordova.CallbackContext callbackContext ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { callbackContext . error ( "empty" ) ; } else { callbackContext . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } } <s> Fixed compilation problem under Android
bug_after_refactoring: private void presentNotificationsList ( java.lang.String gecfttvnvynndtneonvo , final org.apache.cordova.CallbackContext fuyabxxofnzsmujvwnvo ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { fuyabxxofnzsmujvwnvo . error ( "empty" ) ; } else { fuyabxxofnzsmujvwnvo . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } } <s> private void presentNotificationsList ( java.lang.String gecfttvnvynndtneonvo , final org.apache.cordova.CallbackContext fuyabxxofnzsmujvwnvo ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { fuyabxxofnzsmujvwnvo . error ( "empty" ) ; } else { fuyabxxofnzsmujvwnvo . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } } <s> Fixed compilation problem under Android
fix_before_refactoring: private void presentNotificationsList ( final org.apache.cordova.CallbackContext callbackContext ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { callbackContext . error ( "empty" ) ; } else { callbackContext . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } }
fix_after_refactoring: private void presentNotificationsList ( final org.apache.cordova.CallbackContext fuyabxxofnzsmujvwnvo ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { fuyabxxofnzsmujvwnvo . error ( "empty" ) ; } else { fuyabxxofnzsmujvwnvo . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } }
× fix_prediction_before: private void presentNotificationsList ( java.lang.String url , final org.apache.cordova.CallbackContext callbackContext ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { callbackContext . error ( "empty" ) ; } else { callbackContext . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } }
√ fix_prediction_after: private void presentNotificationsList ( final org.apache.cordova.CallbackContext fuyabxxofnzsmujvwnvo ) { if ( 0 == ( com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . getPendingNotifications () . size () ) ) { fuyabxxofnzsmujvwnvo . error ( "empty" ) ; } else { fuyabxxofnzsmujvwnvo . success () ; com.vidinoti.android.vdarsdk.VDARSDKController . getInstance () . presentNotificationsList () ; } }

line_index: 77
bug_before_refactoring: public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; return oldList ; } <s> public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; return oldList ; } <s> add file creating and fix refreshList() invalid bug
bug_after_refactoring: public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; } <s> public java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; } <s> add file creating and fix refreshList() invalid bug
fix_before_refactoring: private java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; return oldList ; }
fix_after_refactoring: private java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; }
× fix_prediction_before: public void addUpperItem ( java.util.List < java.io.File > oldList ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; oldList . add ( 0 , upperFile ) ; }
√ fix_prediction_after: private java.util.List < java.io.File > addUpperItem ( java.util.List < java.io.File > ijpqkatfnlnsxavzltxg ) { if ( android.text.TextUtils . isEmpty ( mCurrentPath ) ) { throw new java.lang.RuntimeException ( "mCurrentPath is null!" ) ; } java.io.File upperFile = new java.io.File ( mCurrentPath ) . getParentFile () ; ijpqkatfnlnsxavzltxg . add ( 0 , upperFile ) ; return ijpqkatfnlnsxavzltxg ; }

line_index: 127
bug_before_refactoring: private void setStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } <s> private void setStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } <s> Refactoring . Bug fixing.
bug_after_refactoring: private void setStyle ( int nqteqfvoylppnhouyzog ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , nqteqfvoylppnhouyzog ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find nqteqfvoylppnhouyzog. Error: " , e ) ; } } <s> private void setStyle ( int nqteqfvoylppnhouyzog ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , nqteqfvoylppnhouyzog ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find nqteqfvoylppnhouyzog. Error: " , e ) ; } } <s> Refactoring . Bug fixing.
fix_before_refactoring: private void setMapStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } }
fix_after_refactoring: private void setMapStyle ( int nqteqfvoylppnhouyzog ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , nqteqfvoylppnhouyzog ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find nqteqfvoylppnhouyzog. Error: " , e ) ; } }
× fix_prediction_before: public void setStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } }
√ fix_prediction_after: private void setMapStyle ( int nqteqfvoylppnhouyzog ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , nqteqfvoylppnhouyzog ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find nqteqfvoylppnhouyzog. Error: " , e ) ; } }

line_index: 162
bug_before_refactoring: private org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression operand ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping operandMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( operand ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping operand expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { operandMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return operandMapping ; } <s> private org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression operand ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping operandMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( operand ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping operand expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { operandMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return operandMapping ; } <s> Issue #22 -Fixed possible null pointer in conditional-test expr mapping.
bug_after_refactoring: private org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression jlbssocvjmvbucigrqgv ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping jlbssocvjmvbucigrqgvMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( jlbssocvjmvbucigrqgv ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping jlbssocvjmvbucigrqgv expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { jlbssocvjmvbucigrqgvMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return jlbssocvjmvbucigrqgvMapping ; } <s> private org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression jlbssocvjmvbucigrqgv ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping jlbssocvjmvbucigrqgvMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( jlbssocvjmvbucigrqgv ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping jlbssocvjmvbucigrqgv expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { jlbssocvjmvbucigrqgvMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return jlbssocvjmvbucigrqgvMapping ; } <s> Issue #22 -Fixed possible null pointer in conditional-test expr mapping.
fix_before_refactoring: protected org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression operand ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping operandMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( operand ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping operand expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { operandMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return operandMapping ; }
fix_after_refactoring: protected org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression jlbssocvjmvbucigrqgv ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping jlbssocvjmvbucigrqgvMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( jlbssocvjmvbucigrqgv ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping jlbssocvjmvbucigrqgv expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { jlbssocvjmvbucigrqgvMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return jlbssocvjmvbucigrqgvMapping ; }
× fix_prediction_before: public org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression operand ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping operandMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( operand ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping operand expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { operandMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return operandMapping ; }
√ fix_prediction_after: protected org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping mapOperand ( org.modeldriven.alf.syntax.expressions.Expression jlbssocvjmvbucigrqgv ) throws org.modeldriven.alf.mapping.MappingError { org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping jlbssocvjmvbucigrqgvMapping = null ; org.modeldriven.alf.fuml.mapping.FumlMapping mapping = this . fumlMap ( jlbssocvjmvbucigrqgv ) ; if ( ! ( mapping instanceof org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ) { this . throwError ( ( "Error mapping jlbssocvjmvbucigrqgv expression: " + ( mapping . getErrorMessage () ) ) ) ; } else { jlbssocvjmvbucigrqgvMapping = ( ( org.modeldriven.alf.fuml.mapping.expressions.ExpressionMapping ) ( mapping ) ) ; } return jlbssocvjmvbucigrqgvMapping ; }

line_index: 236
bug_before_refactoring: private void seekTo ( int seekto ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , seekto ) ; startService ( intent ) ; } <s> private void seekTo ( int seekto ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , seekto ) ; startService ( intent ) ; } <s> fix  bug
bug_after_refactoring: private void seekTo ( int mkkztyekohektutgyfbg ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , mkkztyekohektutgyfbg ) ; startService ( intent ) ; } <s> private void seekTo ( int mkkztyekohektutgyfbg ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , mkkztyekohektutgyfbg ) ; startService ( intent ) ; } <s> fix  bug
fix_before_refactoring: private void seekTo ( int position ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , position ) ; startService ( intent ) ; }
fix_after_refactoring: private void seekTo ( int position ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , position ) ; startService ( intent ) ; }
× fix_prediction_before: private void seekTo ( int seekto ) { android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , seekto ) ; startService ( intent ) ; }
√ fix_prediction_after: private void seekTo ( int position ) { android.util.Log . d ( com.example.sunsai.mymusicplayer.PlayerActivity.TAG , "seekTo" ) ; android.content.Intent intent = new android.content.Intent ( this , com.example.sunsai.mymusicplayer.service.MusicService . class ) ; intent . setAction ( MusicService.CMD_MUSICSERVICE_SEEKTO ) ; intent . putExtra ( "SEEK_TO" , position ) ; startService ( intent ) ; }

line_index: 244
bug_before_refactoring: public void showBoardLine ( final int row ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( row ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( row , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( row , i ) . toString () ) ; } } java.lang.System.out . println () ; } <s> public void showBoardLine ( final int row ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( row ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( row , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( row , i ) . toString () ) ; } } java.lang.System.out . println () ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
bug_after_refactoring: public void showBoardLine ( final int dhabbswljixawqorsowu ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( dhabbswljixawqorsowu ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) . toString () ) ; } } java.lang.System.out . println () ; } <s> public void showBoardLine ( final int dhabbswljixawqorsowu ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( dhabbswljixawqorsowu ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) . toString () ) ; } } java.lang.System.out . println () ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
fix_before_refactoring: private void showBoardLine ( final int row ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( row ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( row , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( row , i ) . toString () ) ; } } java.lang.System.out . println () ; }
fix_after_refactoring: private void showBoardLine ( final int dhabbswljixawqorsowu ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( dhabbswljixawqorsowu ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) . toString () ) ; } } java.lang.System.out . println () ; }
× fix_prediction_before: public void showBoardLine ( final int row ) { if ( ( game . getBoard () ) != null ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( row ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( row , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( row , i ) . toString () ) ; } } java.lang.System.out . println () ; } }
√ fix_prediction_after: private void showBoardLine ( final int dhabbswljixawqorsowu ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( dhabbswljixawqorsowu ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( dhabbswljixawqorsowu , i ) . toString () ) ; } } java.lang.System.out . println () ; }

line_index: 280
bug_before_refactoring: public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> Fix  Fixed a bug where first layout wasn't laid correctly
bug_after_refactoring: public void haukbdqphgxojhlmryro ( boolean haukbdqphgxojhlmryro ) { int color ; if ( haukbdqphgxojhlmryro ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> public void haukbdqphgxojhlmryro ( boolean haukbdqphgxojhlmryro ) { int color ; if ( haukbdqphgxojhlmryro ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> Fix  Fixed a bug where first layout wasn't laid correctly
fix_before_refactoring: private void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }
fix_after_refactoring: private void haukbdqphgxojhlmryro ( boolean haukbdqphgxojhlmryro ) { int color ; if ( haukbdqphgxojhlmryro ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }
× fix_prediction_before: public void toggle () { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }
√ fix_prediction_after: private void haukbdqphgxojhlmryro ( boolean haukbdqphgxojhlmryro ) { int color ; if ( haukbdqphgxojhlmryro ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }

line_index: 314
bug_before_refactoring: @ java.lang.Override public void onSuccess ( long reqId , java.lang.String header , java.lang.String sequence , java.util.List < biospectra.classify.beans.SearchResultEntry > result , biospectra.classify.beans.ClassificationResult.ClassificationResultType type , java.lang.String taxonRank ) { if ( ( responseHandler ) != null ) { synchronized ( responseHandler ) { responseHandler . onSuccess ( reqId , header , sequence , result , type , taxonRank ) ; } } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } } <s> @ java.lang.Override public void onSuccess ( long reqId , java.lang.String header , java.lang.String sequence , java.util.List < biospectra.classify.beans.SearchResultEntry > result , biospectra.classify.beans.ClassificationResult.ClassificationResultType type , java.lang.String taxonRank ) { if ( ( responseHandler ) != null ) { synchronized ( responseHandler ) { responseHandler . onSuccess ( reqId , header , sequence , result , type , taxonRank ) ; } } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } } <s> Bugfix: removed unnecessary waitForCompletion for transfer queue for every 4 requests
bug_after_refactoring: @ java.lang.Override public void onSuccess ( long zmedwqefnlzrlsavankq , java.lang.String wcnujszukmypjsxxahta , java.lang.String ohvmmrpzijjxbglqiaay , java.util.List < biospectra.classify.beans.SearchResultEntry > uioisjfjjnajsnsvwxgr , biospectra.classify.beans.ClassificationResult.ClassificationResultType jgwrmtfxwukgczajrwhw , java.lang.String bimiisjevfoyvefvtqlu ) { if ( ( responseHandler ) != null ) { synchronized ( responseHandler ) { responseHandler . onSuccess ( zmedwqefnlzrlsavankq , wcnujszukmypjsxxahta , ohvmmrpzijjxbglqiaay , uioisjfjjnajsnsvwxgr , jgwrmtfxwukgczajrwhw , bimiisjevfoyvefvtqlu ) ; } } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } } <s> @ java.lang.Override public void onSuccess ( long zmedwqefnlzrlsavankq , java.lang.String wcnujszukmypjsxxahta , java.lang.String ohvmmrpzijjxbglqiaay , java.util.List < biospectra.classify.beans.SearchResultEntry > uioisjfjjnajsnsvwxgr , biospectra.classify.beans.ClassificationResult.ClassificationResultType jgwrmtfxwukgczajrwhw , java.lang.String bimiisjevfoyvefvtqlu ) { if ( ( responseHandler ) != null ) { synchronized ( responseHandler ) { responseHandler . onSuccess ( zmedwqefnlzrlsavankq , wcnujszukmypjsxxahta , ohvmmrpzijjxbglqiaay , uioisjfjjnajsnsvwxgr , jgwrmtfxwukgczajrwhw , bimiisjevfoyvefvtqlu ) ; } } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } } <s> Bugfix: removed unnecessary waitForCompletion for transfer queue for every 4 requests
fix_before_refactoring: @ java.lang.Override public void onSuccess ( long reqId , java.lang.String header , java.lang.String sequence , java.util.List < biospectra.classify.beans.SearchResultEntry > result , biospectra.classify.beans.ClassificationResult.ClassificationResultType type , java.lang.String taxonRank ) { if ( ( responseHandler ) != null ) { responseHandler . onSuccess ( reqId , header , sequence , result , type , taxonRank ) ; } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } }
fix_after_refactoring: @ java.lang.Override public void onSuccess ( long zmedwqefnlzrlsavankq , java.lang.String wcnujszukmypjsxxahta , java.lang.String ohvmmrpzijjxbglqiaay , java.util.List < biospectra.classify.beans.SearchResultEntry > uioisjfjjnajsnsvwxgr , biospectra.classify.beans.ClassificationResult.ClassificationResultType jgwrmtfxwukgczajrwhw , java.lang.String bimiisjevfoyvefvtqlu ) { if ( ( responseHandler ) != null ) { responseHandler . onSuccess ( zmedwqefnlzrlsavankq , wcnujszukmypjsxxahta , ohvmmrpzijjxbglqiaay , uioisjfjjnajsnsvwxgr , jgwrmtfxwukgczajrwhw , bimiisjevfoyvefvtqlu ) ; } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } }
× fix_prediction_before: @ java.lang.Override public void onSuccess ( long reqId , java.lang.String header , java.lang.String sequence , java.util.List < biospectra.classify.beans.SearchResultEntry > result , biospectra.classify.beans.ClassificationResult.ClassificationResultType type , java.lang.String taxonRank ) { synchronized ( responseHandler ) { responseHandler . onSuccess ( reqId , header , sequence , result , type , taxonRank ) ; } }
√ fix_prediction_after: @ java.lang.Override public void onSuccess ( long zmedwqefnlzrlsavankq , java.lang.String wcnujszukmypjsxxahta , java.lang.String ohvmmrpzijjxbglqiaay , java.util.List < biospectra.classify.beans.SearchResultEntry > uioisjfjjnajsnsvwxgr , biospectra.classify.beans.ClassificationResult.ClassificationResultType jgwrmtfxwukgczajrwhw , java.lang.String bimiisjevfoyvefvtqlu ) { if ( ( responseHandler ) != null ) { responseHandler . onSuccess ( zmedwqefnlzrlsavankq , wcnujszukmypjsxxahta , ohvmmrpzijjxbglqiaay , uioisjfjjnajsnsvwxgr , jgwrmtfxwukgczajrwhw , bimiisjevfoyvefvtqlu ) ; } else { biospectra.classify.ClassifierClient.LOG . error ( "responseHandler is not set" ) ; } }

line_index: 320
bug_before_refactoring: public void changeState ( java.lang.String recordingId , java.lang.String state ) { if ( state . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , recordingId , state ) ; } else if ( state . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , recordingId , state ) ; } if ( state . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , recordingId , state ) ; changeState ( unpublishedDir , recordingId , state ) ; changeState ( deletedDir , recordingId , state ) ; } } <s> public void changeState ( java.lang.String recordingId , java.lang.String state ) { if ( state . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , recordingId , state ) ; } else if ( state . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , recordingId , state ) ; } if ( state . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , recordingId , state ) ; changeState ( unpublishedDir , recordingId , state ) ; changeState ( deletedDir , recordingId , state ) ; } } <s> bigbluebutton-web: Fixed issue with recordings not publishing/unpublishing
bug_after_refactoring: public void changeState ( java.lang.String paenzwbddtgratecbwxy , java.lang.String vrqhwpiknrdukmskxtxa ) { if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } else if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( deletedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } } <s> public void changeState ( java.lang.String paenzwbddtgratecbwxy , java.lang.String vrqhwpiknrdukmskxtxa ) { if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } else if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( deletedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } } <s> bigbluebutton-web: Fixed issue with recordings not publishing/unpublishing
fix_before_refactoring: public void changeState ( java.lang.String recordingId , java.lang.String state ) { if ( state . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , recordingId , state ) ; } else if ( state . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , recordingId , state ) ; } else if ( state . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , recordingId , state ) ; changeState ( unpublishedDir , recordingId , state ) ; changeState ( deletedDir , recordingId , state ) ; } }
fix_after_refactoring: public void changeState ( java.lang.String paenzwbddtgratecbwxy , java.lang.String vrqhwpiknrdukmskxtxa ) { if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } else if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } else if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( deletedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } }
× fix_prediction_before: public void changeState ( java.lang.String recordingId , java.lang.String state ) { if ( recordingId != null ) { if ( state . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , recordingId , state ) ; } else if ( state . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , recordingId , state ) ; } else if ( state . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , recordingId , state ) ; changeState ( unpublishedDir , recordingId , state ) ; changeState ( deletedDir , recordingId , state ) ; } } }
√ fix_prediction_after: public void changeState ( java.lang.String paenzwbddtgratecbwxy , java.lang.String vrqhwpiknrdukmskxtxa ) { if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_PUBLISHED ) ) { changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } else if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_UNPUBLISHED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } else if ( vrqhwpiknrdukmskxtxa . equals ( Recording.STATE_DELETED ) ) { changeState ( publishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( unpublishedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; changeState ( deletedDir , paenzwbddtgratecbwxy , vrqhwpiknrdukmskxtxa ) ; } }

line_index: 421
bug_before_refactoring: private boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> private boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> fix bugs
bug_after_refactoring: private boolean verifyPermissions ( int [] yzqcqsidixonpounaewe ) { if ( ( yzqcqsidixonpounaewe.length ) < 1 ) { return false ; } for ( int result : yzqcqsidixonpounaewe ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> private boolean verifyPermissions ( int [] yzqcqsidixonpounaewe ) { if ( ( yzqcqsidixonpounaewe.length ) < 1 ) { return false ; } for ( int result : yzqcqsidixonpounaewe ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; } <s> fix bugs
fix_before_refactoring: public boolean verifyPermissions ( int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }
fix_after_refactoring: public boolean verifyPermissions ( int [] yzqcqsidixonpounaewe ) { if ( ( yzqcqsidixonpounaewe.length ) < 1 ) { return false ; } for ( int result : yzqcqsidixonpounaewe ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }
× fix_prediction_before: private boolean verifyPermissions ( @ android.support.annotation.NonNull int [] grantResults ) { if ( ( grantResults.length ) < 1 ) { return false ; } for ( int result : grantResults ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }
√ fix_prediction_after: public boolean verifyPermissions ( int [] yzqcqsidixonpounaewe ) { if ( ( yzqcqsidixonpounaewe.length ) < 1 ) { return false ; } for ( int result : yzqcqsidixonpounaewe ) { if ( result != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return false ; } } return true ; }

line_index: 496
bug_before_refactoring: private int getStartIndex ( tspUtil.Node [] randomPath ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } <s> private int getStartIndex ( tspUtil.Node [] randomPath ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } <s> Fix problem about singleton pattern and add function for log
bug_after_refactoring: private int getStartIndex ( tspUtil.Node [] ssihzurqnsogulpwzoge ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } <s> private int getStartIndex ( tspUtil.Node [] ssihzurqnsogulpwzoge ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } <s> Fix problem about singleton pattern and add function for log
fix_before_refactoring: private int getStartIndex () { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; }
fix_after_refactoring: private int getStartIndex () { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; }
× fix_prediction_before: public int getStartIndex ( tspUtil.Node [] randomPath ) { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; }
√ fix_prediction_after: private int getStartIndex () { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; }

line_index: 552
bug_before_refactoring: private void addClassPathToModule ( java.lang.String moduleName , org.eclipse.jdt.internal.core.builder.ClasspathLocation cp ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( moduleName ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( moduleName , l ) ; } l . add ( cp ) ; } <s> private void addClassPathToModule ( java.lang.String moduleName , org.eclipse.jdt.internal.core.builder.ClasspathLocation cp ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( moduleName ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( moduleName , l ) ; } l . add ( cp ) ; } <s> Fix for Bug 521221: [9][search] NPE in search for Java 9 project set compliance 1.8  Change-Id: I7e1f49f0c98443214de1305c1fe636e096e03990
bug_after_refactoring: private void addClassPathToModule ( java.lang.String ogjyetqgttbcjizdbqac , org.eclipse.jdt.internal.core.builder.ClasspathLocation awizikwpqkzyqkmwprms ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( ogjyetqgttbcjizdbqac ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( ogjyetqgttbcjizdbqac , l ) ; } l . add ( awizikwpqkzyqkmwprms ) ; } <s> private void addClassPathToModule ( java.lang.String ogjyetqgttbcjizdbqac , org.eclipse.jdt.internal.core.builder.ClasspathLocation awizikwpqkzyqkmwprms ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( ogjyetqgttbcjizdbqac ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( ogjyetqgttbcjizdbqac , l ) ; } l . add ( awizikwpqkzyqkmwprms ) ; } <s> Fix for Bug 521221: [9][search] NPE in search for Java 9 project set compliance 1.8  Change-Id: I7e1f49f0c98443214de1305c1fe636e096e03990
fix_before_refactoring: private void addClassPathToModule ( java.lang.String moduleName , org.eclipse.jdt.internal.core.builder.ClasspathLocation cp ) { if ( ( this . moduleToClassPathLocations ) != null ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( moduleName ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( moduleName , l ) ; } l . add ( cp ) ; } }
fix_after_refactoring: private void addClassPathToModule ( java.lang.String ogjyetqgttbcjizdbqac , org.eclipse.jdt.internal.core.builder.ClasspathLocation awizikwpqkzyqkmwprms ) { if ( ( this . moduleToClassPathLocations ) != null ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( ogjyetqgttbcjizdbqac ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( ogjyetqgttbcjizdbqac , l ) ; } l . add ( awizikwpqkzyqkmwprms ) ; } }
× fix_prediction_before: public void addClassPathToModule ( java.lang.String moduleName , org.eclipse.jdt.internal.core.builder.ClasspathLocation cp ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( moduleName ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( moduleName , l ) ; } l . add ( cp ) ; }
√ fix_prediction_after: private void addClassPathToModule ( java.lang.String ogjyetqgttbcjizdbqac , org.eclipse.jdt.internal.core.builder.ClasspathLocation awizikwpqkzyqkmwprms ) { if ( ( this . moduleToClassPathLocations ) != null ) { java.util.List < org.eclipse.jdt.internal.core.builder.ClasspathLocation > l = this . moduleToClassPathLocations . get ( ogjyetqgttbcjizdbqac ) ; if ( l == null ) { l = new java.util.ArrayList <> () ; this . moduleToClassPathLocations . put ( ogjyetqgttbcjizdbqac , l ) ; } l . add ( awizikwpqkzyqkmwprms ) ; } }

line_index: 562
bug_before_refactoring: protected static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } <s> protected static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } <s> Fixed error naming bug
bug_after_refactoring: protected static java.lang.String readHeaderString ( byte [] kdbbbjjivlymmpszyhym ) { int i = 0 ; while ( ( i < ( kdbbbjjivlymmpszyhym.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( kdbbbjjivlymmpszyhym , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( kdbbbjjivlymmpszyhym , 0 , i ) ; } <s> protected static java.lang.String readHeaderString ( byte [] kdbbbjjivlymmpszyhym ) { int i = 0 ; while ( ( i < ( kdbbbjjivlymmpszyhym.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( kdbbbjjivlymmpszyhym , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( kdbbbjjivlymmpszyhym , 0 , i ) ; } <s> Fixed error naming bug
fix_before_refactoring: public static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; }
fix_after_refactoring: public static java.lang.String readHeaderString ( byte [] kdbbbjjivlymmpszyhym ) { int i = 0 ; while ( ( i < ( kdbbbjjivlymmpszyhym.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( kdbbbjjivlymmpszyhym , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( kdbbbjjivlymmpszyhym , 0 , i ) ; }
× fix_prediction_before: private static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; }
√ fix_prediction_after: public static java.lang.String readHeaderString ( byte [] kdbbbjjivlymmpszyhym ) { int i = 0 ; while ( ( i < ( kdbbbjjivlymmpszyhym.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( kdbbbjjivlymmpszyhym , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( kdbbbjjivlymmpszyhym , 0 , i ) ; }

line_index: 644
bug_before_refactoring: public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
bug_after_refactoring: public int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> public int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
fix_before_refactoring: private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; }
fix_after_refactoring: private int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; }
× fix_prediction_before: public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( board . getFigure ( row , i ) . toString () . equals ( playerFigure ) ) ) { playerRowCount ++ ; } } return playerRowCount ; }
√ fix_prediction_after: private int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; }

line_index: 645
bug_before_refactoring: public void printMonsters ( net.slashie.libjcsi.wswing.WSwingConsoleInterface j , characters.active.ActiveCharacter user ) { for ( map.Room room : getRooms () ) { if ( user . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( ! ( enemy . isDead () ) ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , user . getVisiblePositions () ) ) { room . printMonsters ( j , user . getVisiblePositions () ) ; } } } } } } <s> public void printMonsters ( net.slashie.libjcsi.wswing.WSwingConsoleInterface j , characters.active.ActiveCharacter user ) { for ( map.Room room : getRooms () ) { if ( user . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( ! ( enemy . isDead () ) ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , user . getVisiblePositions () ) ) { room . printMonsters ( j , user . getVisiblePositions () ) ; } } } } } } <s> Fix minor layout problem
bug_after_refactoring: public void printMonsters ( net.slashie.libyqfgkhuixcfflbrsitbacsi.wswing.WSwingConsoleInterface yqfgkhuixcfflbrsitba , characters.active.ActiveCharacter xgljsatfuvcvjpnsrtda ) { for ( map.Room room : getRooms () ) { if ( xgljsatfuvcvjpnsrtda . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( ! ( enemy . isDead () ) ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ) { room . printMonsters ( yqfgkhuixcfflbrsitba , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ; } } } } } } <s> public void printMonsters ( net.slashie.libyqfgkhuixcfflbrsitbacsi.wswing.WSwingConsoleInterface yqfgkhuixcfflbrsitba , characters.active.ActiveCharacter xgljsatfuvcvjpnsrtda ) { for ( map.Room room : getRooms () ) { if ( xgljsatfuvcvjpnsrtda . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( ! ( enemy . isDead () ) ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ) { room . printMonsters ( yqfgkhuixcfflbrsitba , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ; } } } } } } <s> Fix minor layout problem
fix_before_refactoring: public void printMonsters ( net.slashie.libjcsi.wswing.WSwingConsoleInterface j , characters.active.ActiveCharacter user ) { for ( map.Room room : getRooms () ) { if ( user . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , user . getVisiblePositions () ) ) { room . printMonsters ( j , user . getVisiblePositions () ) ; } } } } }
fix_after_refactoring: public void printMonsters ( net.slashie.libyqfgkhuixcfflbrsitbacsi.wswing.WSwingConsoleInterface yqfgkhuixcfflbrsitba , characters.active.ActiveCharacter xgljsatfuvcvjpnsrtda ) { for ( map.Room room : getRooms () ) { if ( xgljsatfuvcvjpnsrtda . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ) { room . printMonsters ( yqfgkhuixcfflbrsitba , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ; } } } } }
× fix_prediction_before: public void printMonsters ( net.slashie.libjcsi.wswing.WSwingConsoleInterface j , characters.active.ActiveCharacter user ) { for ( map.Room room : getRooms () ) { if ( ! ( room . isDead () ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , user . getVisiblePositions () ) ) { room . printMonsters ( j , user . getVisiblePositions () ) ; } } } } }
√ fix_prediction_after: public void printMonsters ( net.slashie.libyqfgkhuixcfflbrsitbacsi.wswing.WSwingConsoleInterface yqfgkhuixcfflbrsitba , characters.active.ActiveCharacter xgljsatfuvcvjpnsrtda ) { for ( map.Room room : getRooms () ) { if ( xgljsatfuvcvjpnsrtda . getRoom () . equals ( room ) ) { for ( characters.active.ActiveCharacter enemy : room . getMonsters () ) { if ( util.RandUtil . containsTuple ( enemy . getPosition () , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ) { room . printMonsters ( yqfgkhuixcfflbrsitba , xgljsatfuvcvjpnsrtda . getVisiblePositions () ) ; } } } } }


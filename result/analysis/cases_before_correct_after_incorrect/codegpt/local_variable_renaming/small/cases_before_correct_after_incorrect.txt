line_index: 2
bug_before_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int index = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "index" , index ) ; startService ( intent ) ; } <s> private void startScreenshots () { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int index = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "index" , index ) ; startService ( intent ) ; } <s> Minor bug fixes  major bug with widget not posting accessibility events  which wouldn't be bad if we could properly parse the getevent info. Changing widget should fix this  as we change it from a phone widget to an overlay  aka making it focusable. Other fix is matching time stamps.
bug_after_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int iwonwuclfrqudsriwhsw = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "iwonwuclfrqudsriwhsw" , iwonwuclfrqudsriwhsw ) ; startService ( intent ) ; } <s> private void startScreenshots () { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int iwonwuclfrqudsriwhsw = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "iwonwuclfrqudsriwhsw" , iwonwuclfrqudsriwhsw ) ; startService ( intent ) ; } <s> Minor bug fixes  major bug with widget not posting accessibility events  which wouldn't be bad if we could properly parse the getevent info. Changing widget should fix this  as we change it from a phone widget to an overlay  aka making it focusable. Other fix is matching time stamps.
fix_before_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; startService ( intent ) ; }
fix_after_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; startService ( intent ) ; }
√ fix_prediction_before: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; startService ( intent ) ; }
× fix_prediction_after: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; intent . putExtra ( "iwonwuclfrqudsriwhsw" , csci435.csci435_odbr.BugReport . getInstance () . numEvents () ) ; startService ( intent ) ; }

line_index: 7
bug_before_refactoring: numPlays = - 5 <s> @ Test.Network.Test public void agricolaShouldHaveNumPlays0 () { int numPlays = - 5 ; Main.Containers.Boardgame game = games . get ( 0 ) ; numPlays = game . getNumberOfPlays () ; assertEquals ( 0 , numPlays ) ; } <s> Fixed error. The problem lied in that TestCollectionBuilder used an incomplete mock. Complexity is now being added to all games when collection is built
bug_after_refactoring: fyonoynezhlykppyngtj = - 5 <s> @ Test.Network.Test public void agricolaShouldHaveNumPlays0 () { int fyonoynezhlykppyngtj = - 5 ; Main.Containers.Boardgame game = games . get ( 0 ) ; numPlays = game . getNumberOfPlays () ; assertEquals ( 0 , numPlays ) ; } <s> Fixed error. The problem lied in that TestCollectionBuilder used an incomplete mock. Complexity is now being added to all games when collection is built
fix_before_refactoring: numPlays
fix_after_refactoring: fyonoynezhlykppyngtj
√ fix_prediction_before: numPlays
× fix_prediction_after: fyonoynezhlykppyngtj = 1

line_index: 43
bug_before_refactoring: { float remainingHours = 0 ; return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> public float getRemainingHours () { float remainingHours = 0 ; return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> fixed a bug where a TC was being scheduled longer than their max hours per day  added printing the TCs desired hours and scheduled hours within the TC post schedule availability txt file
bug_after_refactoring: { float epbhjxbvjbiqsnmmpufk = 0 ; return epbhjxbvjbiqsnmmpufk = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> public float getRemainingHours () { float epbhjxbvjbiqsnmmpufk = 0 ; return epbhjxbvjbiqsnmmpufk = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> fixed a bug where a TC was being scheduled longer than their max hours per day  added printing the TCs desired hours and scheduled hours within the TC post schedule availability txt file
fix_before_refactoring: { return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; }
fix_after_refactoring: { return epbhjxbvjbiqsnmmpufk = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; }
√ fix_prediction_before: { return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; }
× fix_prediction_after: { return ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; }

line_index: 55
bug_before_refactoring: private double convertUnit ( double number , char prefix ) { int index = prefixes . indexOf ( prefix ) ; if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; } <s> private double convertUnit ( double number , char prefix ) { int index = prefixes . indexOf ( prefix ) ; if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; } <s> Fixed density calculator  Because Luke doesn't like solving the problems he creates.
bug_after_refactoring: private double convertUnit ( double number , char prefix ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; } <s> private double convertUnit ( double number , char prefix ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; } <s> Fixed density calculator  Because Luke doesn't like solving the problems he creates.
fix_before_refactoring: private double convertUnit ( double number , int index ) { if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; }
fix_after_refactoring: private double convertUnit ( double number , int wvfotfwqdrmkhfuynluc ) { if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; }
√ fix_prediction_before: private double convertUnit ( double number , int index ) { if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; }
× fix_prediction_after: private double convertUnit ( double number ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; }

line_index: 59
bug_before_refactoring: assertEquals ( task . getUpdateSubTasks () , param ) <s> @ org.junit.Test public void getUpdateSubTasksTest () { boolean param ; param = true ; task . setUpdateSubTasks ( param ) ; assertEquals ( task . getUpdateSubTasks () , param ) ; } <s> deepCopy Bug Fix
bug_after_refactoring: assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf ) <s> @ org.junit.Test public void getUpdateSubTasksTest () { boolean param ; param = true ; task . setUpdateSubTasks ( param ) ; assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf ) ; } <s> deepCopy Bug Fix
fix_before_refactoring: assertEquals ( param , task . getUpdateSubTasks () )
fix_after_refactoring: assertEquals ( knpkphrulyfoqmvmgbkf , task . getUpdateSubTasks () )
√ fix_prediction_before: assertEquals ( param , task . getUpdateSubTasks () )
× fix_prediction_after: assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf )

line_index: 72
bug_before_refactoring: { int id = menuItem . getItemId () ; menu . clear () ; doMenuAction ( id ) ; return true ; } <s> @ java.lang.Override public boolean onNavigationItemSelected ( android.view.MenuItem menuItem ) { int id = menuItem . getItemId () ; menu . clear () ; doMenuAction ( id ) ; return true ; } <s> fixes issue 716 actionbar button get disappear issue
bug_after_refactoring: { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; menu . clear () ; doMenuAction ( yyzxbdxcphaisftcxtzv ) ; return true ; } <s> @ java.lang.Override public boolean onNavigationItemSelected ( android.view.MenuItem menuItem ) { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; menu . clear () ; doMenuAction ( yyzxbdxcphaisftcxtzv ) ; return true ; } <s> fixes issue 716 actionbar button get disappear issue
fix_before_refactoring: { int id = menuItem . getItemId () ; doMenuAction ( id ) ; return true ; }
fix_after_refactoring: { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; doMenuAction ( yyzxbdxcphaisftcxtzv ) ; return true ; }
√ fix_prediction_before: { int id = menuItem . getItemId () ; doMenuAction ( id ) ; return true ; }
× fix_prediction_after: { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; menu . clear () ; return true ; }

line_index: 75
bug_before_refactoring: { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return mapPixelWidth ; } <s> public float getMapPixelWidth () { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return mapPixelWidth ; } <s> Projectile collision bug fixed.
bug_after_refactoring: { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; } <s> public float getMapPixelWidth () { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; } <s> Projectile collision bug fixed.
fix_before_refactoring: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
fix_after_refactoring: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
√ fix_prediction_before: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
× fix_prediction_after: { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; }

line_index: 89
bug_before_refactoring: public void setAtPosition ( long position , int value ) { long i = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( i ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( i , value ) ; } <s> public void setAtPosition ( long position , int value ) { long i = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( i ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( i , value ) ; } <s> Tests added and tons of bug fixes
bug_after_refactoring: public void setAtPosition ( long position , int value ) { long newaenqylbbfnllypfmc = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( newaenqylbbfnllypfmc ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( newaenqylbbfnllypfmc , value ) ; } <s> public void setAtPosition ( long position , int value ) { long newaenqylbbfnllypfmc = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( newaenqylbbfnllypfmc ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( newaenqylbbfnllypfmc , value ) ; } <s> Tests added and tons of bug fixes
fix_before_refactoring: public void setAtPosition ( long position , int value ) { ensure ( position ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }
fix_after_refactoring: public void setAtPosition ( long position , int value ) { ensure ( position ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }
√ fix_prediction_before: public void setAtPosition ( long position , int value ) { ensure ( position ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }
× fix_prediction_after: public void setAtPosition ( long position , int value ) { ensure ( ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }

line_index: 91
bug_before_refactoring: org.junit.Assert . assertEquals ( 2971215073L , ( a + b ) ) <s> @ org.junit.Test public void longAdditionWorks () { long a = 1134903170 ; long b = 1836311903 ; org.junit.Assert . assertEquals ( 2971215073L , ( a + b ) ) ; } <s> Fix metaprogramming bugs
bug_after_refactoring: org.junit.Assert . assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) ) <s> @ org.junit.Test public void longAdditionWorks () { long a = 1134903170 ; long b = 1836311903 ; org.junit.Assert . assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) ) ; } <s> Fix metaprogramming bugs
fix_before_refactoring: assertEquals ( 2971215073L , ( a + b ) )
fix_after_refactoring: assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) )
√ fix_prediction_before: assertEquals ( 2971215073L , ( a + b ) )
× fix_prediction_after: assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijezzwxtic ) )

line_index: 97
bug_before_refactoring: { boolean result = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return result ; } <s> @ java.lang.Override public boolean onUnbind ( android.content.Intent intent ) { boolean result = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return result ; } <s> fix image not load error
bug_after_refactoring: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return oisnhwbgkmbrfncbihpf ; } <s> @ java.lang.Override public boolean onUnbind ( android.content.Intent intent ) { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return oisnhwbgkmbrfncbihpf ; } <s> fix image not load error
fix_before_refactoring: { boolean result = super . onUnbind ( intent ) ; return result ; }
fix_after_refactoring: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; return oisnhwbgkmbrfncbihpf ; }
√ fix_prediction_before: { boolean result = super . onUnbind ( intent ) ; return result ; }
× fix_prediction_after: { com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return super . onUnbind ( intent ) ; }

line_index: 102
bug_before_refactoring: { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return res ; } <s> public static boolean isButtonReleased ( int keycode ) { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return res ; } <s> Fixed a bug in the main menu when only the play button was clickable. Sometimes when multiple objects checked if the mouse was released only on the first time the mouse would actually be released. Caused in the main menu that only the play button worked. <bug
bug_after_refactoring: { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return iknlhumhvibniaixlpkv ; } <s> public static boolean isButtonReleased ( int keycode ) { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return iknlhumhvibniaixlpkv ; } <s> Fixed a bug in the main menu when only the play button was clickable. Sometimes when multiple objects checked if the mouse was released only on the first time the mouse would actually be released. Caused in the main menu that only the play button worked. <bug
fix_before_refactoring: { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; return res ; }
fix_after_refactoring: { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; return iknlhumhvibniaixlpkv ; }
√ fix_prediction_before: { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; return res ; }
× fix_prediction_after: { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return iknlhumhvibniaixlpkv ; }

line_index: 106
bug_before_refactoring: { int id = item . getItemId () ; switch ( id ) { case R.id.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item . getItemId () ; switch ( id ) { case R.id.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> fixed minor bugs
bug_after_refactoring: { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; switch ( wxmzvmrjevzmmkfbxalk ) { case R.wxmzvmrjevzmmkfbxalk.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; switch ( wxmzvmrjevzmmkfbxalk ) { case R.wxmzvmrjevzmmkfbxalk.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> fixed minor bugs
fix_before_refactoring: { int id = item . getItemId () ; return true ; }
fix_after_refactoring: { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; return true ; }
√ fix_prediction_before: { int id = item . getItemId () ; return true ; }
× fix_prediction_after: { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; switch ( wxmzvmrjevzmmkfbxalk ) { case R.wxmzvmrjevzmmkfbxalk.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; }

line_index: 130
bug_before_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean success = clientConnection . connection () ; return success ; } <s> private boolean connexion2Client ( com.smartmanageragent.smartagent.message.JSONMessage jsmessage , java.lang.String ipAd ) { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean success = clientConnection . connection () ; return success ; } <s> Fix issues
bug_after_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean uzmqwlyetkgbvwruiknc = clientConnection . connection () ; return uzmqwlyetkgbvwruiknc ; } <s> private boolean connexion2Client ( com.smartmanageragent.smartagent.message.JSONMessage jsmessage , java.lang.String ipAd ) { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean uzmqwlyetkgbvwruiknc = clientConnection . connection () ; return uzmqwlyetkgbvwruiknc ; } <s> Fix issues
fix_before_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; return clientConnection . connection () ; }
fix_after_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; return clientConnection . connection () ; }
√ fix_prediction_before: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; return clientConnection . connection () ; }
× fix_prediction_after: { com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; return uzmqwlyetkgbvwruiknc ; }

line_index: 134
bug_before_refactoring: num1 / num2 <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; int num1 = stack . popInt () ; int num2 = stack . popInt () ; stack . pushInt ( ( num1 / num2 ) ) ; } <s> fix bug
bug_after_refactoring: mckytwwlllyghceoyktz / ipfiilxrabnsoazreyyb <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; int num1 = stack . popInt () ; int num2 = stack . popInt () ; stack . pushInt ( ( mckytwwlllyghceoyktz / ipfiilxrabnsoazreyyb ) ) ; } <s> fix bug
fix_before_refactoring: num2 / num1
fix_after_refactoring: ipfiilxrabnsoazreyyb / mckytwwlllyghceoyktz
√ fix_prediction_before: num2 / num1
× fix_prediction_after: mckytwwlllyghceoyktz / ipfilxrabnsoazreyyb

line_index: 144
bug_before_refactoring: num1 - num2 <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; double num1 = stack . popDouble () ; double num2 = stack . popDouble () ; stack . pushDouble ( ( num1 - num2 ) ) ; } <s> fix bug
bug_after_refactoring: aqnztxhnvigdennaruck - vjszfauhjenchnrswqbk <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; double num1 = stack . popDouble () ; double num2 = stack . popDouble () ; stack . pushDouble ( ( aqnztxhnvigdennaruck - vjszfauhjenchnrswqbk ) ) ; } <s> fix bug
fix_before_refactoring: num2 - num1
fix_after_refactoring: vjszfauhjenchnrswqbk - aqnztxhnvigdennaruck
√ fix_prediction_before: num2 - num1
× fix_prediction_after: aqnztxhnvigdennaruck - vjszfauhjenchnrswqbk

line_index: 153
bug_before_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int id = tc . hashCode () ; sharedPactorLocationBuckets . get ( id ) . add ( pactorName ) ; } <s> private void setPactorInCollisionBucket ( java.lang.String pactorName ) { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int id = tc . hashCode () ; sharedPactorLocationBuckets . get ( id ) . add ( pactorName ) ; } <s> - Refactoring - Fixed concurrent modification issues by utilizing concurrency-supporting data structures - Updated executable
bug_after_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int nuggripbmnnhnrgfbxgv = tc . hashCode () ; sharedPactorLocationBuckets . get ( nuggripbmnnhnrgfbxgv ) . add ( pactorName ) ; } <s> private void setPactorInCollisionBucket ( java.lang.String pactorName ) { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int nuggripbmnnhnrgfbxgv = tc . hashCode () ; sharedPactorLocationBuckets . get ( nuggripbmnnhnrgfbxgv ) . add ( pactorName ) ; } <s> - Refactoring - Fixed concurrent modification issues by utilizing concurrency-supporting data structures - Updated executable
fix_before_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . add ( pactorName ) ; }
fix_after_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . add ( pactorName ) ; }
√ fix_prediction_before: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . add ( pactorName ) ; }
× fix_prediction_after: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; sharedPactorLocationBuckets . get ( nuggripbmnnhnrgfbxgv ) . add ( pactorName ) ; }

line_index: 157
bug_before_refactoring: for ( by.tarif.web.databuffer.Register register : list ) { sum += register . getConsumption () ; } <s> public float sumConsumptionValue () { float sum = 0.0F ; for ( by.tarif.web.databuffer.Register register : list ) { sum += register . getConsumption () ; } return sum ; } <s> fix bugs
bug_after_refactoring: for ( by.tarif.web.databuffer.Register register : list ) { lvvvspwtairxwuextibo += register . getConsumption () ; } <s> public float sumConsumptionValue () { float sum = 0.0F ; for ( by.tarif.web.databuffer.Register register : list ) { lvvvspwtairxwuextibo += register . getConsumption () ; } return sum ; } <s> fix bugs
fix_before_refactoring: for ( by.tarif.web.databuffer.Register register : this . list ) { sum += register . getConsumption () ; }
fix_after_refactoring: for ( by.tarif.web.databuffer.Register register : this . list ) { lvvvspwtairxwuextibo += register . getConsumption () ; }
√ fix_prediction_before: for ( by.tarif.web.databuffer.Register register : this . list ) { sum += register . getConsumption () ; }
× fix_prediction_after: for ( by.tarif.web.databuffer.Register register : list ) { lvvvspwtairxwuextibo += register . getConsumption () ; }

line_index: 168
bug_before_refactoring: public boolean contains ( java.lang.String key ) { int arrayIndex = hash ( key ) ; return ( ( array [ arrayIndex ] ) != null ) && ( ( array [ arrayIndex ] . get ( key ) ) != null ) ; } <s> public boolean contains ( java.lang.String key ) { int arrayIndex = hash ( key ) ; return ( ( array [ arrayIndex ] ) != null ) && ( ( array [ arrayIndex ] . get ( key ) ) != null ) ; } <s> added two tests on the collision and key with negative hashCode  fixed bug with negative hashCode
bug_after_refactoring: public boolean contains ( java.lang.String key ) { int ffzlzuyeseazjlfygiqu = hash ( key ) ; return ( ( array [ ffzlzuyeseazjlfygiqu ] ) != null ) && ( ( array [ ffzlzuyeseazjlfygiqu ] . get ( key ) ) != null ) ; } <s> public boolean contains ( java.lang.String key ) { int ffzlzuyeseazjlfygiqu = hash ( key ) ; return ( ( array [ ffzlzuyeseazjlfygiqu ] ) != null ) && ( ( array [ ffzlzuyeseazjlfygiqu ] . get ( key ) ) != null ) ; } <s> added two tests on the collision and key with negative hashCode  fixed bug with negative hashCode
fix_before_refactoring: public boolean contains ( java.lang.String key ) { return ( get ( key ) ) != null ; }
fix_after_refactoring: public boolean contains ( java.lang.String key ) { return ( get ( key ) ) != null ; }
√ fix_prediction_before: public boolean contains ( java.lang.String key ) { return ( get ( key ) ) != null ; }
× fix_prediction_after: public boolean contains ( java.lang.String key ) { return ( hash ( key ) ) != null ; }

line_index: 182
bug_before_refactoring: len = a.length <s> public static int task1 ( int [] a ) { int len = a.length ; return prac2.Tasks . recursiveCutRod ( a , len ) ; } <s> Bug fixes
bug_after_refactoring: edlpompnwngrzdbtbtez = a.length <s> public static int task1 ( int [] a ) { int edlpompnwngrzdbtbtez = a.length ; return prac2.Tasks . recursiveCutRod ( a , len ) ; } <s> Bug fixes
fix_before_refactoring: len = ( a.length ) - 1
fix_after_refactoring: edlpompnwngrzdbtbtez = ( a.length ) - 1
√ fix_prediction_before: len = ( a.length ) - 1
× fix_prediction_after: edlpompnwngrzdbtbtez = java.lang.Integer . toString ( a )

line_index: 183
bug_before_refactoring: assertFalse ( limitReached ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( limitReached ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
bug_after_refactoring: assertFalse ( etqkxfnufgjmfqmqaack ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( etqkxfnufgjmfqmqaack ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
fix_before_refactoring: assertTrue ( limitReached )
fix_after_refactoring: assertTrue ( etqkxfnufgjmfqmqaack )
√ fix_prediction_before: assertTrue ( limitReached )
× fix_prediction_after: assertTrue ( limitReached )

line_index: 188
bug_before_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } <s> fixed rental and return duplicate response bug
bug_after_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } <s> fixed rental and return duplicate response bug
fix_before_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( clientIdChosen ) != null ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } }
fix_after_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( clientIdChosen ) != null ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } }
√ fix_prediction_before: public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( clientIdChosen ) != null ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } }
× fix_prediction_after: public void actionPerformed ( java.awt.event.ActionEvent event ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; if ( yvwlvsydprfoawujmplf != 1 ) { clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } }

line_index: 196
bug_before_refactoring: return ( - 1 ) * a ; <s> @ java.lang.Override public double computeDerivative ( int component , double [] features , double actual , double predicted ) { double a = ( features [ component ] ) * ( predicted - actual ) ; return ( - 1 ) * a ; } <s> fix sign bug
bug_after_refactoring: return ( - 1 ) * zyhwfngmmjhbaaydhafv ; <s> @ java.lang.Override public double computeDerivative ( int component , double [] features , double actual , double predicted ) { double a = ( features [ component ] ) * ( predicted - actual ) ; return ( - 1 ) * zyhwfngmmjhbaaydhafv ; } <s> fix sign bug
fix_before_refactoring: return a ;
fix_after_refactoring: return zyhwfngmmjhbaaydhafv ;
√ fix_prediction_before: return a ;
× fix_prediction_after: return a * zyhwfngmmjhbaaydhafv ;

line_index: 208
bug_before_refactoring: public double getSubTotalPrice ( int idProduct ) { double subTotalPrice = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; } <s> public double getSubTotalPrice ( int idProduct ) { double subTotalPrice = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; } <s> fixe quelques bugs mineurs
bug_after_refactoring: public double getSubTotalPrice ( int idProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; ytpdcqltjqnzyhywawlw = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return ytpdcqltjqnzyhywawlw ; } <s> public double getSubTotalPrice ( int idProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; ytpdcqltjqnzyhywawlw = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return ytpdcqltjqnzyhywawlw ; } <s> fixe quelques bugs mineurs
fix_before_refactoring: public double getSubTotalPrice ( manufacture.entity.cart.CartProduct cartProduct ) { double subTotalPrice = 0 ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; }
fix_after_refactoring: public double getSubTotalPrice ( manufacture.entity.cart.CartProduct cartProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; ytpdcqltjqnzyhywawlw = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return ytpdcqltjqnzyhywawlw ; }
√ fix_prediction_before: public double getSubTotalPrice ( manufacture.entity.cart.CartProduct cartProduct ) { double subTotalPrice = 0 ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; }
× fix_prediction_after: public double getSubTotalPrice ( manufacture.entity.cart.CartProduct cartProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; return ytpdcqltjqnzyhywawlw ; }

line_index: 211
bug_before_refactoring: @ java.lang.Override public void onLastItemVisible () { int page = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( page ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> @ java.lang.Override public void onLastItemVisible () { int page = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( page ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> fix bug 1.产品以及机构专题列表加载更多重复　２.产品专题点击内容页崩溃
bug_after_refactoring: @ java.lang.Override public void onLastItemVisible () { int ykrbgeviymjmljknepon = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( ykrbgeviymjmljknepon ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> @ java.lang.Override public void onLastItemVisible () { int ykrbgeviymjmljknepon = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( ykrbgeviymjmljknepon ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> fix bug 1.产品以及机构专题列表加载更多重复　２.产品专题点击内容页崩溃
fix_before_refactoring: @ java.lang.Override public void onLastItemVisible () {}
fix_after_refactoring: @ java.lang.Override public void onLastItemVisible () {}
√ fix_prediction_before: @ java.lang.Override public void onLastItemVisible () {}
× fix_prediction_after: @ java.lang.Override public void onLastItemVisible () { mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( mQueue . size () ) , mRefreshMoreListener , mRefreshErroListener ) ) ; }


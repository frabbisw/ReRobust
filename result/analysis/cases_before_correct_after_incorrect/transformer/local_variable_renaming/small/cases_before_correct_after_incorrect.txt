line_index: 7
bug_before_refactoring: numPlays = - 5 <s> @ Test.Network.Test public void agricolaShouldHaveNumPlays0 () { int numPlays = - 5 ; Main.Containers.Boardgame game = games . get ( 0 ) ; numPlays = game . getNumberOfPlays () ; assertEquals ( 0 , numPlays ) ; } <s> Fixed error. The problem lied in that TestCollectionBuilder used an incomplete mock. Complexity is now being added to all games when collection is built
bug_after_refactoring: fyonoynezhlykppyngtj = - 5 <s> @ Test.Network.Test public void agricolaShouldHaveNumPlays0 () { int fyonoynezhlykppyngtj = - 5 ; Main.Containers.Boardgame game = games . get ( 0 ) ; numPlays = game . getNumberOfPlays () ; assertEquals ( 0 , numPlays ) ; } <s> Fixed error. The problem lied in that TestCollectionBuilder used an incomplete mock. Complexity is now being added to all games when collection is built
fix_before_refactoring: numPlays
fix_after_refactoring: fyonoynezhlykppyngtj
√ fix_prediction_before: numPlays
× fix_prediction_after: java.lang.System.out . println ( gamesonPlays ) ;

line_index: 38
bug_before_refactoring: getSlotFromIndex ( index ) <s> @ java.lang.Override public net.minecraft.item.ItemStack getStackInSlot ( int slot ) { int index = getIndexForSlot ( slot ) ; net.minecraftforge.items.IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; slot = getSlotFromIndex ( index ) ; return handler . getStackInSlot ( slot ) ; } <s> Merge pull request #2539 from bonii-xx/bugfix  Fix CombinedInvWrapper accessing incorrect slots
bug_after_refactoring: getSlotFromIndex ( nyjdginfqbfucgnhquuf ) <s> @ java.lang.Override public net.minecraft.item.ItemStack getStackInSlot ( int slot ) { int index = getIndexForSlot ( slot ) ; net.minecraftforge.items.IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; slot = getSlotFromIndex ( nyjdginfqbfucgnhquuf ) ; return handler . getStackInSlot ( slot ) ; } <s> Merge pull request #2539 from bonii-xx/bugfix  Fix CombinedInvWrapper accessing incorrect slots
fix_before_refactoring: getSlotFromIndex ( slot , index )
fix_after_refactoring: getSlotFromIndex ( slot , nyjdginfqbfucgnhquuf )
√ fix_prediction_before: getSlotFromIndex ( slot , index )
× fix_prediction_after: getSlotFromIndex ( slot , index )

line_index: 57
bug_before_refactoring: { int height = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return height ; } <s> @ java.lang.Override public int getTileSizeY () { int height = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return height ; } <s> Update error messages and feedback fixes
bug_after_refactoring: { int enfkunewhlnypnwxbrih = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return enfkunewhlnypnwxbrih ; } <s> @ java.lang.Override public int getTileSizeY () { int enfkunewhlnypnwxbrih = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return enfkunewhlnypnwxbrih ; } <s> Update error messages and feedback fixes
fix_before_refactoring: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }
fix_after_refactoring: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }
√ fix_prediction_before: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }
× fix_prediction_after: { int enwxunewln = metadata . getPixelYln ( enh . getSeriesSize () ) ; java.lang.System.out . println ( enhunrihhhunnlnSizeln . get () ) ; return enwxhunnhunnln . get () ; }

line_index: 74
bug_before_refactoring: org.junit.Assert . assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 ) <s> private void verifyEqualityConstraintsHold ( int numberOfEqualityConstraints , org.ejml.data.DenseMatrix64F linearEqualityConstraintsAMatrix , org.ejml.data.DenseMatrix64F linearEqualityConstraintsBVector , org.ejml.data.DenseMatrix64F solutionMatrix ) { double maxAbsoluteError = getMaxEqualityConstraintError ( numberOfEqualityConstraints , linearEqualityConstraintsAMatrix , linearEqualityConstraintsBVector , solutionMatrix ) ; org.junit.Assert . assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 ) ; } <s> Fixed a bug due to a bad handling of the variable bounds in the QP.
bug_after_refactoring: org.junit.Assert . assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 ) <s> private void verifyEqualityConstraintsHold ( int numberOfEqualityConstraints , org.ejml.data.DenseMatrix64F linearEqualityConstraintsAMatrix , org.ejml.data.DenseMatrix64F linearEqualityConstraintsBVector , org.ejml.data.DenseMatrix64F solutionMatrix ) { double maxAbsoluteError = getMaxEqualityConstraintError ( numberOfEqualityConstraints , linearEqualityConstraintsAMatrix , linearEqualityConstraintsBVector , solutionMatrix ) ; org.junit.Assert . assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 ) ; } <s> Fixed a bug due to a bad handling of the variable bounds in the QP.
fix_before_refactoring: assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 )
fix_after_refactoring: assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 )
√ fix_prediction_before: assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 )
× fix_prediction_after: assertEquals ( 0.0 , linearError , 1.0E-5 )

line_index: 80
bug_before_refactoring: org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) ) <s> @ org.junit.Test public void recordFloat ( ) throws java.lang.Exception { float f = 5.5F ; org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) ) ; } <s> Fix issue #2
bug_after_refactoring: org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) ) <s> @ org.junit.Test public void recordFloat ( ) throws java.lang.Exception { float f = 5.5F ; org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) ) ; } <s> Fix issue #2
fix_before_refactoring: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) )
fix_after_refactoring: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) )
√ fix_prediction_before: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) )
× fix_prediction_after: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "x" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxugu.scvl.web.CoreMatchers . equalTo ( java.lang.Float . toString ( hx ) ) ) ) )

line_index: 89
bug_before_refactoring: public void setAtPosition ( long position , int value ) { long i = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( i ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( i , value ) ; } <s> public void setAtPosition ( long position , int value ) { long i = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( i ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( i , value ) ; } <s> Tests added and tons of bug fixes
bug_after_refactoring: public void setAtPosition ( long position , int value ) { long newaenqylbbfnllypfmc = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( newaenqylbbfnllypfmc ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( newaenqylbbfnllypfmc , value ) ; } <s> public void setAtPosition ( long position , int value ) { long newaenqylbbfnllypfmc = ( pointer ) + ( position * ( com.heerbann.unsafe.UnsafeBuffer.sizeOfInt ) ) ; ensure ( newaenqylbbfnllypfmc ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( newaenqylbbfnllypfmc , value ) ; } <s> Tests added and tons of bug fixes
fix_before_refactoring: public void setAtPosition ( long position , int value ) { ensure ( position ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }
fix_after_refactoring: public void setAtPosition ( long position , int value ) { ensure ( position ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }
√ fix_prediction_before: public void setAtPosition ( long position , int value ) { ensure ( position ) ; com.heerbann.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , value ) ; }
× fix_prediction_after: public void setAtPosition ( long position , int value ) { ensureAtPosition ( position ) ; com.bbl.lhbbpf.unsafe.UnsafeBuffer.unsafe . putInt ( ( ( pointer ) + position ) , new com.bbl.lhbbpf.unsafe.UnsafeBuffer ( value ) ) ; }

line_index: 90
bug_before_refactoring: { double temp = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( temp - ( this . x ) ) ) ) ) ) ; } <s> public void setX ( double x ) { double temp = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( temp - ( this . x ) ) ) ) ) ) ; } <s> Fixed movement bug
bug_after_refactoring: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouvfawbcgtj - ( this . x ) ) ) ) ) ) ; } <s> public void setX ( double x ) { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouvfawbcgtj - ( this . x ) ) ) ) ) ) ; } <s> Fixed movement bug
fix_before_refactoring: { double temp = this . x ; this . x = x ; }
fix_after_refactoring: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; }
√ fix_prediction_before: { double temp = this . x ; this . x = x ; }
× fix_prediction_after: { double j = 0 ; this . x = x ; }

line_index: 97
bug_before_refactoring: { boolean result = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return result ; } <s> @ java.lang.Override public boolean onUnbind ( android.content.Intent intent ) { boolean result = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return result ; } <s> fix image not load error
bug_after_refactoring: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return oisnhwbgkmbrfncbihpf ; } <s> @ java.lang.Override public boolean onUnbind ( android.content.Intent intent ) { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return oisnhwbgkmbrfncbihpf ; } <s> fix image not load error
fix_before_refactoring: { boolean result = super . onUnbind ( intent ) ; return result ; }
fix_after_refactoring: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; return oisnhwbgkmbrfncbihpf ; }
√ fix_prediction_before: { boolean result = super . onUnbind ( intent ) ; return result ; }
× fix_prediction_after: { android.content.Intent intent = super . onUnpf ( intent ) ; return intent ; }

line_index: 120
bug_before_refactoring: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> public void ANDLW ( int k ) { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> fixed bug: setting status register and truncate to n bit
bug_after_refactoring: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> public void ANDLW ( int k ) { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> fixed bug: setting status register and truncate to n bit
fix_before_refactoring: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; }
fix_after_refactoring: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; }
√ fix_prediction_before: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; }
× fix_prediction_after: { int ltfhtwjtwwrttp ) ; if ( ( getWptRegister () ) & 1 ) { setWpt ( ltf ) ; } setWptRegister ( ltf ) ; }

line_index: 134
bug_before_refactoring: num1 / num2 <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; int num1 = stack . popInt () ; int num2 = stack . popInt () ; stack . pushInt ( ( num1 / num2 ) ) ; } <s> fix bug
bug_after_refactoring: mckytwwlllyghceoyktz / ipfiilxrabnsoazreyyb <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; int num1 = stack . popInt () ; int num2 = stack . popInt () ; stack . pushInt ( ( mckytwwlllyghceoyktz / ipfiilxrabnsoazreyyb ) ) ; } <s> fix bug
fix_before_refactoring: num2 / num1
fix_after_refactoring: ipfiilxrabnsoazreyyb / mckytwwlllyghceoyktz
√ fix_prediction_before: num2 / num1
× fix_prediction_after: mycktwwlllycefiilyyz.nazso2yyx.runtime.NrabInt stack = ipStack . pop () ;

line_index: 144
bug_before_refactoring: num1 - num2 <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; double num1 = stack . popDouble () ; double num2 = stack . popDouble () ; stack . pushDouble ( ( num1 - num2 ) ) ; } <s> fix bug
bug_after_refactoring: aqnztxhnvigdennaruck - vjszfauhjenchnrswqbk <s> @ java.lang.Override public void exec ( com.ninty.runtime.NiFrame frame ) { com.ninty.runtime.OperandStack stack = frame . getOperandStack () ; double num1 = stack . popDouble () ; double num2 = stack . popDouble () ; stack . pushDouble ( ( aqnztxhnvigdennaruck - vjszfauhjenchnrswqbk ) ) ; } <s> fix bug
fix_before_refactoring: num2 - num1
fix_after_refactoring: vjszfauhjenchnrswqbk - aqnztxhnvigdennaruck
√ fix_prediction_before: num2 - num1
× fix_prediction_after: aqtxhnvigarnjjjynfaufa.runtime.NyjStack . pushDoubleOperand ( stack )

line_index: 174
bug_before_refactoring: org.junit.Assert . assertTrue ( listEmptyOrBetweenNumberOfItems ) <s> @ org.junit.Test public void testIsListEmptyOrBetweenNumberOfItemsWhenListSizeIs1AndShouldBeBetween1And1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > list = java.util.Arrays . asList ( "" ) ; boolean listEmptyOrBetweenNumberOfItems = fact . isListEmptyOrBetweenNumberOfItems ( list , 1 , 1 ) ; org.junit.Assert . assertTrue ( listEmptyOrBetweenNumberOfItems ) ; } <s> Merge pull request #130 from UnionVMS/bugfix/UNIONVMS-3042  Bugfix/unionvms 3042
bug_after_refactoring: org.junit.Assert . assertTrue ( akmwsnvecqffnpbthmzr ) <s> @ org.junit.Test public void testIsListEmptyOrBetweenNumberOfItemsWhenListSizeIs1AndShouldBeBetween1And1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > list = java.util.Arrays . asList ( "" ) ; boolean listEmptyOrBetweenNumberOfItems = fact . isListEmptyOrBetweenNumberOfItems ( list , 1 , 1 ) ; org.junit.Assert . assertTrue ( akmwsnvecqffnpbthmzr ) ; } <s> Merge pull request #130 from UnionVMS/bugfix/UNIONVMS-3042  Bugfix/unionvms 3042
fix_before_refactoring: assertTrue ( listEmptyOrBetweenNumberOfItems )
fix_after_refactoring: assertTrue ( akmwsnvecqffnpbthmzr )
√ fix_prediction_before: assertTrue ( listEmptyOrBetweenNumberOfItems )
× fix_prediction_after: assertTrue ( akws )

line_index: 183
bug_before_refactoring: assertFalse ( limitReached ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( limitReached ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
bug_after_refactoring: assertFalse ( etqkxfnufgjmfqmqaack ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( etqkxfnufgjmfqmqaack ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
fix_before_refactoring: assertTrue ( limitReached )
fix_after_refactoring: assertTrue ( etqkxfnufgjmfqmqaack )
√ fix_prediction_before: assertTrue ( limitReached )
× fix_prediction_after: assertTrue ( etqkfn )


line_index: 96
bug_before_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.lang.System.out . println ( time [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> public java.lang.String getFormattedDate ( java.lang.String str ) { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.lang.System.out . println ( time [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> Added comments and fixed the colon bug
bug_after_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.lang.System.out . println ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> public java.lang.String getFormattedDate ( java.lang.String str ) { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.lang.System.out . println ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> Added comments and fixed the colon bug
fix_before_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }
fix_after_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }
√ fix_prediction_before: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }
× fix_prediction_after: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.lang.System.out . println ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.util.Date formattedDate = sdf . format ( date0 ) ; return formattedDate ; }

line_index: 125
bug_before_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; isbn = Main . normalizeISBN ( x ) ; got = true ; } <s> private static long scan_isbn ( java.lang.String prompt ) { boolean got = false ; long isbn = 0 ; while ( ! got ) { try { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; isbn = Main . normalizeISBN ( x ) ; got = true ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.out . println ( "ERROR: ISBN must contain some numbers(e.g. 143-2334-12)\n" ) ; got = false ; } } return isbn ; } <s> Fixed: Some small printing errors.
bug_after_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; } <s> private static long scan_isbn ( java.lang.String prompt ) { boolean got = false ; long isbn = 0 ; while ( ! got ) { try { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.out . println ( "ERROR: ISBN must contain some numbers(e.g. 143-2334-12)\n" ) ; got = false ; } } return isbn ; } <s> Fixed: Some small printing errors.
fix_before_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; isbn = Main . normalizeISBN ( x ) ; got = true ; }
fix_after_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; }
√ fix_prediction_before: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; isbn = Main . normalizeISBN ( x ) ; got = true ; }
× fix_prediction_after: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; iioa entityxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; }

line_index: 157
bug_before_refactoring: private void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } } <s> private void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } } <s> Model- Bug fixes and new functionality added
bug_after_refactoring: private void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } } <s> private void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } } <s> Model- Bug fixes and new functionality added
fix_before_refactoring: public void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } }
fix_after_refactoring: public void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } }
√ fix_prediction_before: public void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } }
× fix_prediction_after: public void shuffleDeck () { if ( ( cards.length ) == 0 ) { return; } int i = 0 ; i < ( numberOfCards ) ; i ++ ) { if ( ( ( cards [ i ] ) != null ) && ( ( cards [ i ] ) != ( cards [ ( i - 1 ) ] ) ) ) { return; } } else { if ( ( cards [ i ] ) != null ) { ( int ) ( ( numberOfCards ) - 1 ) ; } } }

line_index: 173
bug_before_refactoring: invalidateUI ( alphaValue , hexColor ) <s> @ java.lang.Override public void stateChanged ( javax.swing.event.ChangeEvent e ) { int alphaValue = sliderAlpha . getValue () ; java.lang.String hexColor = textFieldHexColor . getText () ; if ( ( hexColor . length () ) > 6 ) { hexColor = ( convertAlphaValue2HexStr ( alphaValue ) ) + ( hexColor . substring ( ( ( hexColor . length () ) - 6 ) ) ) ; } else { hexColor = ( convertAlphaValue2HexStr ( alphaValue ) ) + hexColor ; } invalidateUI ( alphaValue , hexColor ) ; } <s> Fix: color convert bug
bug_after_refactoring: invalidateUI ( nsnzvelpqvmibvmivscj , hexColor ) <s> @ java.lang.Override public void stateChanged ( javax.swing.event.ChangeEvent e ) { int alphaValue = sliderAlpha . getValue () ; java.lang.String hexColor = textFieldHexColor . getText () ; if ( ( hexColor . length () ) > 6 ) { hexColor = ( convertAlphaValue2HexStr ( alphaValue ) ) + ( hexColor . substring ( ( ( hexColor . length () ) - 6 ) ) ) ; } else { hexColor = ( convertAlphaValue2HexStr ( alphaValue ) ) + hexColor ; } invalidateUI ( nsnzvelpqvmibvmivscj , hexColor ) ; } <s> Fix: color convert bug
fix_before_refactoring: invalidateUI ( alphaValue , hexColor , true )
fix_after_refactoring: invalidateUI ( nsnzvelpqvmibvmivscj , hexColor , true )
√ fix_prediction_before: invalidateUI ( alphaValue , hexColor , true )
× fix_prediction_after: invalidateUI ( ns () )

line_index: 187
bug_before_refactoring: { status = true ; handleCompletion ( view , url ) ; } <s> @ java.lang.Override public boolean shouldOverrideUrlLoading ( android.webkit.WebView view , java.lang.String url ) { android.util.Log . d ( com.gsma.mobileconnect.helpers.AuthorizationService.TAG , ( "shouldOverrideUrlLoading url=" + url ) ) ; boolean status = false ; if ( ( url != null ) && ( url . startsWith ( redirectUri ) ) ) { status = true ; handleCompletion ( view , url ) ; } else { view . loadUrl ( url ) ; } return status ; } <s> Further experiments to resolve Android M webview issue
bug_after_refactoring: { mwqbfeimsodjkmgdktvs = true ; handleCompletion ( view , url ) ; } <s> @ java.lang.Override public boolean shouldOverrideUrlLoading ( android.webkit.WebView view , java.lang.String url ) { android.util.Log . d ( com.gsma.mobileconnect.helpers.AuthorizationService.TAG , ( "shouldOverrideUrlLoading url=" + url ) ) ; boolean status = false ; if ( ( url != null ) && ( url . startsWith ( redirectUri ) ) ) { mwqbfeimsodjkmgdktvs = true ; handleCompletion ( view , url ) ; } else { view . loadUrl ( url ) ; } return status ; } <s> Further experiments to resolve Android M webview issue
fix_before_refactoring: { handleCompletion ( view , url ) ; }
fix_after_refactoring: { handleCompletion ( view , url ) ; }
√ fix_prediction_before: { handleCompletion ( view , url ) ; }
× fix_prediction_after: { mwqbfeimsodjkmgdktvs = true ; }

line_index: 206
bug_before_refactoring: expResult = false <s> @ org.junit.Test public void testAtLeastOneNegative4 () { java.lang.System.out . println ( "atLeastOneNegative" ) ; int n1 = 0 ; int n2 = 0 ; int n3 = 0 ; int n4 = - 7 ; boolean expResult = false ; boolean result = second.FirstTasksSet . atLeastOneNegative ( n1 , n2 , n3 , n4 ) ; org.junit.Assert . assertEquals ( expResult , result ) ; } <s> BugFix Test
bug_after_refactoring: gysqfoizxgvfmacgmjgl = false <s> @ org.junit.Test public void testAtLeastOneNegative4 () { java.lang.System.out . println ( "atLeastOneNegative" ) ; int n1 = 0 ; int n2 = 0 ; int n3 = 0 ; int n4 = - 7 ; boolean gysqfoizxgvfmacgmjgl = false ; boolean result = second.FirstTasksSet . atLeastOneNegative ( n1 , n2 , n3 , n4 ) ; org.junit.Assert . assertEquals ( expResult , result ) ; } <s> BugFix Test
fix_before_refactoring: expResult = true
fix_after_refactoring: gysqfoizxgvfmacgmjgl = true
√ fix_prediction_before: expResult = true
× fix_prediction_after: gysqfoizxgvfmacgmjgl = false

line_index: 229
bug_before_refactoring: { clients [ index ] . write ( data ) ; if ( clients [ index ] . active () ) { index ++ ; } else { removeIndex ( index ) ; } } <s> public void write ( byte [] data ) { int index = 0 ; while ( index < ( clientCount ) ) { clients [ index ] . write ( data ) ; if ( clients [ index ] . active () ) { index ++ ; } else { removeIndex ( index ) ; } } } <s> Fixes NPE when writing to disconnected client  Issue #2577
bug_after_refactoring: { clients [ tatpeknkwukesbtvbsfh ] . write ( data ) ; if ( clients [ tatpeknkwukesbtvbsfh ] . active () ) { tatpeknkwukesbtvbsfh ++ ; } else { removeIndex ( tatpeknkwukesbtvbsfh ) ; } } <s> public void write ( byte [] data ) { int index = 0 ; while ( index < ( clientCount ) ) { clients [ tatpeknkwukesbtvbsfh ] . write ( data ) ; if ( clients [ tatpeknkwukesbtvbsfh ] . active () ) { tatpeknkwukesbtvbsfh ++ ; } else { removeIndex ( tatpeknkwukesbtvbsfh ) ; } } } <s> Fixes NPE when writing to disconnected client  Issue #2577
fix_before_refactoring: { if ( clients [ index ] . active () ) { clients [ index ] . write ( data ) ; index ++ ; } else { removeIndex ( index ) ; } }
fix_after_refactoring: { if ( clients [ tatpeknkwukesbtvbsfh ] . active () ) { clients [ tatpeknkwukesbtvbsfh ] . write ( data ) ; tatpeknkwukesbtvbsfh ++ ; } else { removeIndex ( tatpeknkwukesbtvbsfh ) ; } }
√ fix_prediction_before: { if ( clients [ index ] . active () ) { clients [ index ] . write ( data ) ; index ++ ; } else { removeIndex ( index ) ; } }
× fix_prediction_after: { while ( index < ( clientCount ) ) { clients [ tatpeknkwukesbtvbsfh ] . write ( data ) ; if ( clients [ tatpeknkwukesbtvbsfh ] . active () ) { tatpeknkwukesbtvbsfh ++ ; } else { removeIndex ( tatpeknkwukesbtvbsfh ) ; } } }

line_index: 286
bug_before_refactoring: return ( ( this . height ) - r ) - 1 ; <s> private int columnHeight ( int column ) { int r = 0 ; for ( ; ( r < ( this . height ) ) && ( ( this . grid [ column ] [ r ] . isEmpty () ) || ( this . grid [ column ] [ r ] . isShape () ) ) ; r ++ ) ; return ( ( this . height ) - r ) - 1 ; } <s> (v48) New improved algorithm with wells counting  -fixed error in column counting that made it return negative numbers -introduced well counting -changed weight values
bug_after_refactoring: return ( ( this . height ) - bvcotezooljqxxxivqix ) - 1 ; <s> private int columnHeight ( int column ) { int r = 0 ; for ( ; ( r < ( this . height ) ) && ( ( this . grid [ column ] [ r ] . isEmpty () ) || ( this . grid [ column ] [ r ] . isShape () ) ) ; r ++ ) ; return ( ( this . height ) - bvcotezooljqxxxivqix ) - 1 ; } <s> (v48) New improved algorithm with wells counting  -fixed error in column counting that made it return negative numbers -introduced well counting -changed weight values
fix_before_refactoring: return ( this . height ) - r ;
fix_after_refactoring: return ( this . height ) - bvcotezooljqxxxivqix ;
√ fix_prediction_before: return ( this . height ) - r ;
× fix_prediction_after: return ( ( this . height ) - bvcotezooljq ) - 1 ;

line_index: 326
bug_before_refactoring: if ( bundleIndex == 0 ) return false ; <s> private boolean execute_BUNDLE_CLEAR () { int bundleIndex = getBundleArg () ; if ( bundleIndex == 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; android.os.Bundle b = com.rfo.basic.Run.theBundles . get ( bundleIndex ) ; b . clear () ; return true ; } <s> Infrastructure. Remove bundlePut and @@N. Type-limited List auto-create.  Save var in createNewList. Favor -1 over 0 for error returns. Fix GPS.satellites arg bug. Reuse list: Bundle.Keyset  Timezone.List.
bug_after_refactoring: if ( fvewzbqmchhpinvnbgvh == 0 ) return false ; <s> private boolean execute_BUNDLE_CLEAR () { int bundleIndex = getBundleArg () ; if ( fvewzbqmchhpinvnbgvh == 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; android.os.Bundle b = com.rfo.basic.Run.theBundles . get ( bundleIndex ) ; b . clear () ; return true ; } <s> Infrastructure. Remove bundlePut and @@N. Type-limited List auto-create.  Save var in createNewList. Favor -1 over 0 for error returns. Fix GPS.satellites arg bug. Reuse list: Bundle.Keyset  Timezone.List.
fix_before_refactoring: if ( bundleIndex < 0 ) return false ;
fix_after_refactoring: if ( fvewzbqmchhpinvnbgvh < 0 ) return false ;
√ fix_prediction_before: if ( bundleIndex < 0 ) return false ;
× fix_prediction_after: if ( fvewzbqmchhpinvnbgvh == 0 ) return false ;

line_index: 379
bug_before_refactoring: { grid [ n ] [ j ] . setNumber ( i ) ; } <s> public void checkNeededInColumn () { int n ; for ( int j = 0 ; j < 9 ; j ++ ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( de.halemba.helpers.SolveHelper . checkMissingInColumn ( i , j , grid ) ) { n = de.halemba.helpers.SolveHelper . checkSinglePossiblityColumn ( i , j , grid ) ; if ( n >= 0 ) { grid [ n ] [ j ] . setNumber ( i ) ; } } } } } <s> Bugfix
bug_after_refactoring: { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; } <s> public void checkNeededInColumn () { int n ; for ( int j = 0 ; j < 9 ; j ++ ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( de.halemba.helpers.SolveHelper . checkMissingInColumn ( i , j , grid ) ) { n = de.halemba.helpers.SolveHelper . checkSinglePossiblityColumn ( i , j , grid ) ; if ( n >= 0 ) { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; } } } } } <s> Bugfix
fix_before_refactoring: { grid [ n ] [ j ] . setNumber ( i ) ; break; }
fix_after_refactoring: { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; break; }
√ fix_prediction_before: { grid [ n ] [ j ] . setNumber ( i ) ; break; }
× fix_prediction_after: { grid [ wilmqquceclzdqbhcfcg ] . setNumber ( i ) ; }

line_index: 380
bug_before_refactoring: index = 0 <s> public java.lang.String getStringTodoList () { java.lang.String result = "\nItems to do: \n" ; int index = 0 ; for ( TodoItem item : this . itemList ) { result += java.lang.String . format ( "%d. " , index ) ; if ( item . getIsDone () ) { result += "[x] " ; } result += java.lang.String . format ( "%s%n" , item . getName () ) ; index ++ ; } return result ; } <s> Fix visual bugs
bug_after_refactoring: kmzixwoyfmlbfykiozcd = 0 <s> public java.lang.String getStringTodoList () { java.lang.String result = "\nItems to do: \n" ; int kmzixwoyfmlbfykiozcd = 0 ; for ( TodoItem item : this . itemList ) { result += java.lang.String . format ( "%d. " , index ) ; if ( item . getIsDone () ) { result += "[x] " ; } result += java.lang.String . format ( "%s%n" , item . getName () ) ; index ++ ; } return result ; } <s> Fix visual bugs
fix_before_refactoring: index = 1
fix_after_refactoring: kmzixwoyfmlbfykiozcd = 1
√ fix_prediction_before: index = 1
× fix_prediction_after: kmzixwoyfmlbfykiozcd = 0

line_index: 387
bug_before_refactoring: slash.navigation.gui.events.Range . increment ( selectedRows , ( - 1 ) ) <s> public void run () { int [] selectedRows = tablePositions . getSelectedRows () ; if ( ( selectedRows.length ) > 0 ) { getPositionsModel () . up ( selectedRows , 1 ) ; selectPositions ( slash.navigation.gui.events.Range . increment ( selectedRows , ( - 1 ) ) ) ; } } <s> fixes disabled functions until selection problem  might cause performance problems http://forum.routeconverter.com/thread-1987.html
bug_after_refactoring: slash.navigation.gui.events.Range . increment ( riclvjieshlqqxnypyhp , ( - 1 ) ) <s> public void run () { int [] selectedRows = tablePositions . getSelectedRows () ; if ( ( selectedRows.length ) > 0 ) { getPositionsModel () . up ( selectedRows , 1 ) ; selectPositions ( slash.navigation.gui.events.Range . increment ( riclvjieshlqqxnypyhp , ( - 1 ) ) ) ; } } <s> fixes disabled functions until selection problem  might cause performance problems http://forum.routeconverter.com/thread-1987.html
fix_before_refactoring: increment ( selectedRows , ( - 1 ) )
fix_after_refactoring: increment ( riclvjieshlqqxnypyhp , ( - 1 ) )
√ fix_prediction_before: increment ( selectedRows , ( - 1 ) )
× fix_prediction_after: increment ( riclvjieshlqq )

line_index: 391
bug_before_refactoring: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + state ) ) ; return state ; } <s> public int logoutUser ( java.lang.String username ) { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + state ) ) ; return state ; } <s> bugFix
bug_after_refactoring: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + rrgxhocehqdcfcyndheo ) ) ; return rrgxhocehqdcfcyndheo ; } <s> public int logoutUser ( java.lang.String username ) { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + rrgxhocehqdcfcyndheo ) ) ; return rrgxhocehqdcfcyndheo ; } <s> bugFix
fix_before_refactoring: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } return state ; }
fix_after_refactoring: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } return rrgxhocehqdcfcyndheo ; }
√ fix_prediction_before: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } return state ; }
× fix_prediction_after: { boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } }

line_index: 434
bug_before_refactoring: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "usesAttributes: " + tagName ) + ":" ) + usesAttributes ) ) ; return usesAttributes ; } <s> @ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "usesAttributes: " + tagName ) + ":" ) + usesAttributes ) ) ; return usesAttributes ; } <s> https://github.com/cflint/CFLint/issues/261  fixed the semi checking. and cleanup some sysouts
bug_after_refactoring: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsdnmrqinf: " + tagName ) + ":" ) + qbbujtkijiqsdnmrqinf ) ) ; return qbbujtkijiqsdnmrqinf ; } <s> @ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsdnmrqinf: " + tagName ) + ":" ) + qbbujtkijiqsdnmrqinf ) ) ; return qbbujtkijiqsdnmrqinf ; } <s> https://github.com/cflint/CFLint/issues/261  fixed the semi checking. and cleanup some sysouts
fix_before_refactoring: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; }
fix_after_refactoring: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return qbbujtkijiqsdnmrqinf ; }
√ fix_prediction_before: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; }
× fix_prediction_after: { java.lang.System.out . println ( tagName . toLowerCase () . toLowerCase () ) ; java.lang.System.out . println ( tagName . toLowerCase () ) ; java.lang.System.out . println ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsd + ( this . tagName . toLowerCase () ) ) + ":" ) + qbbujtkijiqsd ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsd + ( this . tagName . toLowerCase () ) ) + ":" ) + qbbujtkijiqsd ) ) ; return null ; }

line_index: 436
bug_before_refactoring: { boolean canJoin = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> private void moveClient ( org.zapto.mike.mrstreamserver.Channel channel , org.zapto.mike.mrstreamserver.ClientHandler client ) { boolean canJoin = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> Fixed issue with joining channels
bug_after_refactoring: { boolean gvbbstxeoqnhrnmoqpkh = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> private void moveClient ( org.zapto.mike.mrstreamserver.Channel channel , org.zapto.mike.mrstreamserver.ClientHandler client ) { boolean gvbbstxeoqnhrnmoqpkh = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> Fixed issue with joining channels
fix_before_refactoring: { boolean canJoin = true ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }
fix_after_refactoring: { boolean gvbbstxeoqnhrnmoqpkh = true ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }
√ fix_prediction_before: { boolean canJoin = true ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }
× fix_prediction_after: { boolean checkbbstxeoqnhrnmoqpkh = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }

line_index: 441
bug_before_refactoring: getSlotFromIndex ( index ) <s> @ java.lang.Override public net.minecraft.item.ItemStack insertItem ( int slot , net.minecraft.item.ItemStack stack , boolean simulate ) { int index = getIndexForSlot ( slot ) ; net.minecraftforge.items.IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; slot = getSlotFromIndex ( index ) ; return handler . insertItem ( slot , stack , simulate ) ; } <s> Merge pull request #2539 from bonii-xx/bugfix  Fix CombinedInvWrapper accessing incorrect slots
bug_after_refactoring: getSlotFromIndex ( ysgljyuatzqmlavwfeco ) <s> @ java.lang.Override public net.minecraft.item.ItemStack insertItem ( int slot , net.minecraft.item.ItemStack stack , boolean simulate ) { int index = getIndexForSlot ( slot ) ; net.minecraftforge.items.IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; slot = getSlotFromIndex ( ysgljyuatzqmlavwfeco ) ; return handler . insertItem ( slot , stack , simulate ) ; } <s> Merge pull request #2539 from bonii-xx/bugfix  Fix CombinedInvWrapper accessing incorrect slots
fix_before_refactoring: getSlotFromIndex ( slot , index )
fix_after_refactoring: getSlotFromIndex ( slot , ysgljyuatzqmlavwfeco )
√ fix_prediction_before: getSlotFromIndex ( slot , index )
× fix_prediction_after: getSlotFromIndex ( slot , ysgljyuatzqmla )

line_index: 448
bug_before_refactoring: { int id = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> Bug fixing in ads and Days selsection in filter  Bug fixing in ads and Days selsection in filter
bug_after_refactoring: { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> Bug fixing in ads and Days selsection in filter  Bug fixing in ads and Days selsection in filter
fix_before_refactoring: { int id = item . getItemId () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }
fix_after_refactoring: { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }
√ fix_prediction_before: { int id = item . getItemId () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }
× fix_prediction_after: { if ( item == null ) { return false ; } int gxpwevblog *dkjdmpxo = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( gxpwevblogaddkjdmpxo == ( R.gxpwevblog returndkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblog returndkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; } return true ; }

line_index: 471
bug_before_refactoring: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; return 0 > ( ( origin ) / ( master ) ) ; } <s> @ java.lang.Override public int getTotalProtection () { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; return 0 > ( ( origin ) / ( master ) ) ; } <s> merge problems fix
bug_after_refactoring: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; return 0 > ( ( origin ) / ( master ) ) ; } <s> @ java.lang.Override public int getTotalProtection () { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; return 0 > ( ( origin ) / ( master ) ) ; } <s> merge problems fix
fix_before_refactoring: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; }
fix_after_refactoring: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; }
√ fix_prediction_before: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; }
× fix_prediction_after: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; }

line_index: 475
bug_before_refactoring: { return oprationRowNum = x ; } <s> public int getSbOperationRowNum ( java.lang.String operator , java.lang.String opration , int startRow , int endRow , java.util.List < java.util.List < java.lang.String > > data ) { int oprationRowNum = 0 ; for ( int x = startRow ; x <= endRow ; x ++ ) { if ( ( data . get ( x ) . get ( 4 ) . equalsIgnoreCase ( operator ) ) && ( data . get ( x ) . get ( 5 ) . equalsIgnoreCase ( opration ) ) ) { return oprationRowNum = x ; } } return oprationRowNum ; } <s> Fixed many bugs detected by sonar and add fluent wait
bug_after_refactoring: { return jqwvyertdrayemxczjmz = x ; } <s> public int getSbOperationRowNum ( java.lang.String operator , java.lang.String opration , int startRow , int endRow , java.util.List < java.util.List < java.lang.String > > data ) { int oprationRowNum = 0 ; for ( int x = startRow ; x <= endRow ; x ++ ) { if ( ( data . get ( x ) . get ( 4 ) . equalsIgnoreCase ( operator ) ) && ( data . get ( x ) . get ( 5 ) . equalsIgnoreCase ( opration ) ) ) { return jqwvyertdrayemxczjmz = x ; } } return oprationRowNum ; } <s> Fixed many bugs detected by sonar and add fluent wait
fix_before_refactoring: { oprationRowNum = x ; break; }
fix_after_refactoring: { jqwvyertdrayemxczjmz = x ; break; }
√ fix_prediction_before: { oprationRowNum = x ; break; }
× fix_prediction_after: { java.lang.System.out . println ( java.util.List < java.util.List < java.lang.String > > () ) { if ( ( data . get ( x ) . get ( 4 ) . equalsIgnoreCase ( operator ) ) && ( data . get ( x ) . get ( 5 ) . equalsIgnoreCase ( opration ) ) ) { return new java.util.ArrayList < java.lang.String > () ; } } return oprationRowNum ; }

line_index: 478
bug_before_refactoring: intent . putExtra ( "position" , ( itemPosition + "" ) ) <s> @ java.lang.Override public void onClick ( android.view.View view ) { android.util.Log . d ( "click listener" , "working!" ) ; int itemPosition = getLayoutPosition () ; android.content.Intent intent = new android.content.Intent ( mContext , com.epicodus.a4u2poo.DetailActivity . class ) ; intent . putExtra ( "position" , ( itemPosition + "" ) ) ; intent . putExtra ( "restrooms" , org.parceler.Parcels . wrap ( mRestrooms ) ) ; mContext . startActivity ( intent ) ; } <s> Fixed bug in pager where pager always started at position 0
bug_after_refactoring: intent . putExtra ( "position" , ( doeacwhvpdpbhfiqgfvy + "" ) ) <s> @ java.lang.Override public void onClick ( android.view.View view ) { android.util.Log . d ( "click listener" , "working!" ) ; int itemPosition = getLayoutPosition () ; android.content.Intent intent = new android.content.Intent ( mContext , com.epicodus.a4u2poo.DetailActivity . class ) ; intent . putExtra ( "position" , ( doeacwhvpdpbhfiqgfvy + "" ) ) ; intent . putExtra ( "restrooms" , org.parceler.Parcels . wrap ( mRestrooms ) ) ; mContext . startActivity ( intent ) ; } <s> Fixed bug in pager where pager always started at position 0
fix_before_refactoring: intent . putExtra ( "position" , itemPosition )
fix_after_refactoring: intent . putExtra ( "position" , doeacwhvpdpbhfiqgfvy )
√ fix_prediction_before: intent . putExtra ( "position" , itemPosition )
× fix_prediction_after: intent . putExtra ( "position" , doeacwhvpdpbhfiqgfvy + "" )

line_index: 494
bug_before_refactoring: ( docid > 0 ) <s> @ java.lang.Override protected byte [] getFromStore ( long uid ) throws java.io.IOException { int docid = mapDocId ( uid ) ; if ( docid < 0 ) return null ; org.apache.lucene.index.IndexReader reader = null ; if ( ( _currentReaderData ) != null ) { reader = _currentReaderData.reader ; } if ( ( docid > 0 ) && ( reader != null ) ) { org.apache.lucene.document.Document doc = reader . document ( docid ) ; if ( doc != null ) { return doc . getBinaryValue ( _field ) ; } } return null ; } <s> bug fixes and added unit testing for store
bug_after_refactoring: ( ovgogvhjgsikcwiiqght > 0 ) <s> @ java.lang.Override protected byte [] getFromStore ( long uid ) throws java.io.IOException { int docid = mapDocId ( uid ) ; if ( docid < 0 ) return null ; org.apache.lucene.index.IndexReader reader = null ; if ( ( _currentReaderData ) != null ) { reader = _currentReaderData.reader ; } if ( ( ovgogvhjgsikcwiiqght > 0 ) && ( reader != null ) ) { org.apache.lucene.document.Document doc = reader . document ( docid ) ; if ( doc != null ) { return doc . getBinaryValue ( _field ) ; } } return null ; } <s> bug fixes and added unit testing for store
fix_before_refactoring: ( docid >= 0 )
fix_after_refactoring: ( ovgogvhjgsikcwiiqght >= 0 )
√ fix_prediction_before: ( docid >= 0 )
× fix_prediction_after: ( ! ( ovgogvhjgsikcwiiqght > 0 ) )

line_index: 548
bug_before_refactoring: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } } <s> public void testIterFilterLimit () { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } } <s> Fixed compilation error (using SienaFutureProxy instead of SienaFuture)
bug_after_refactoring: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } } <s> public void testIterFilterLimit () { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } } <s> Fixed compilation error (using SienaFutureProxy instead of SienaFuture)
fix_before_refactoring: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } }
fix_after_refactoring: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } }
√ fix_prediction_before: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } }
× fix_prediction_after: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; }

line_index: 587
bug_before_refactoring: switch ( base ) { case 'A' : intVal = 0 ; break; case 'C' : intVal = 1 ; break; case 'G' : intVal = 2 ; break; case 'T' : intVal = 3 ; break; case 'N' : intVal = 4 ; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; } <s> public int base2int ( char base ) { int intVal = - 1 ; switch ( base ) { case 'A' : intVal = 0 ; break; case 'C' : intVal = 1 ; break; case 'G' : intVal = 2 ; break; case 'T' : intVal = 3 ; break; case 'N' : intVal = 4 ; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; } return intVal ; } <s> Fixed minor bugs in WildcardKmerUtils
bug_after_refactoring: switch ( base ) { case 'A' : mistbkdyqjothjgvekvo = 0 ; break; case 'C' : mistbkdyqjothjgvekvo = 1 ; break; case 'G' : mistbkdyqjothjgvekvo = 2 ; break; case 'T' : mistbkdyqjothjgvekvo = 3 ; break; case 'N' : mistbkdyqjothjgvekvo = 4 ; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; } <s> public int base2int ( char base ) { int intVal = - 1 ; switch ( base ) { case 'A' : mistbkdyqjothjgvekvo = 0 ; break; case 'C' : mistbkdyqjothjgvekvo = 1 ; break; case 'G' : mistbkdyqjothjgvekvo = 2 ; break; case 'T' : mistbkdyqjothjgvekvo = 3 ; break; case 'N' : mistbkdyqjothjgvekvo = 4 ; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; } return intVal ; } <s> Fixed minor bugs in WildcardKmerUtils
fix_before_refactoring: switch ( base ) { case 'A' : intVal = 0 ; break; case 'C' : intVal = 1 ; break; case 'G' : intVal = 2 ; break; case 'T' : intVal = 3 ; break; case 'N' : intVal = 4 ; break; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; }
fix_after_refactoring: switch ( base ) { case 'A' : mistbkdyqjothjgvekvo = 0 ; break; case 'C' : mistbkdyqjothjgvekvo = 1 ; break; case 'G' : mistbkdyqjothjgvekvo = 2 ; break; case 'T' : mistbkdyqjothjgvekvo = 3 ; break; case 'N' : mistbkdyqjothjgvekvo = 4 ; break; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; }
√ fix_prediction_before: switch ( base ) { case 'A' : intVal = 0 ; break; case 'C' : intVal = 1 ; break; case 'G' : intVal = 2 ; break; case 'T' : intVal = 3 ; break; case 'N' : intVal = 4 ; break; default: throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; }
× fix_prediction_after: switch ( base ) { case 'A' : if ( ( ( base ) != null ) && ( ( base ) ) == 0 ) { return - 1 ; case 'C' : new java.util.ArrayList < java.lang.String > () ; } break; case 'C' : new java.util.ArrayList < java.lang.String > () ; }

line_index: 588
bug_before_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
bug_after_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
fix_before_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
fix_after_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
√ fix_prediction_before: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
× fix_prediction_after: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) { i ++ ) iuzcyaeozmj.imhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmj.imhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; }

line_index: 595
bug_before_refactoring: if ( t > 10000 ) { t -= 10000 ; type ++ ; } <s> @ java.lang.Override public r48.RubyIO targetToBound ( r48.RubyIO target ) { long t = target.fixnumVal ; long type = 0 ; if ( t > 10000 ) { t -= 10000 ; type ++ ; } r48.RubyIO base = new r48.RubyIO () ; base.arrVal = new r48.RubyIO [ 2 ] ; base.type = '[' ; base.arrVal [ 0 ] = new r48.RubyIO () . setFX ( type ) ; base.arrVal [ 1 ] = new r48.RubyIO () . setFX ( t ) ; return base ; } <s> Fix small editing issues with PPP values
bug_after_refactoring: if ( znithxqdopxksvbmcziq > 10000 ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; } <s> @ java.lang.Override public r48.RubyIO targetToBound ( r48.RubyIO target ) { long t = target.fixnumVal ; long type = 0 ; if ( znithxqdopxksvbmcziq > 10000 ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; } r48.RubyIO base = new r48.RubyIO () ; base.arrVal = new r48.RubyIO [ 2 ] ; base.type = '[' ; base.arrVal [ 0 ] = new r48.RubyIO () . setFX ( type ) ; base.arrVal [ 1 ] = new r48.RubyIO () . setFX ( t ) ; return base ; } <s> Fix small editing issues with PPP values
fix_before_refactoring: if ( t >= 10000 ) { t -= 10000 ; type ++ ; }
fix_after_refactoring: if ( znithxqdopxksvbmcziq >= 10000 ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; }
√ fix_prediction_before: if ( t >= 10000 ) { t -= 10000 ; type ++ ; }
× fix_prediction_after: if ( znithxqdopxksvbmcziq > 10000 ) { znithxqdopxksvbmcziq -= 10000 ; }

line_index: 620
bug_before_refactoring: collapseView ( lastExpandedPosition , true ) <s> private void checkSingleExpandMode ( int currExpandedParentPosition ) { if ( ( mExpandCollapseMode.mode ) != ( com.github.huajianjiang.expandablerecyclerview.widget.ExpandableAdapter.ExpandCollapseMode.MODE_SINGLE_EXPAND ) ) return; final int lastExpandedPosition = mExpandCollapseMode.lastExpandedPosition ; if ( lastExpandedPosition == currExpandedParentPosition ) return; com.github.huajianjiang.expandablerecyclerview.util.Logger . e ( com.github.huajianjiang.expandablerecyclerview.widget.ExpandableAdapter.TAG , ( ( "checkSingleExpandMode " + "---->lastExpandedPosition=*" ) + lastExpandedPosition ) ) ; collapseView ( lastExpandedPosition , true ) ; mExpandCollapseMode.lastExpandedPosition = currExpandedParentPosition ; } <s> # fix parent ExpandableStateChange and ExpandCollapse listener callback bug
bug_after_refactoring: collapseView ( dsffklblzgqljmhczaes , true ) <s> private void checkSingleExpandMode ( int currExpandedParentPosition ) { if ( ( mExpandCollapseMode.mode ) != ( com.github.huajianjiang.expandablerecyclerview.widget.ExpandableAdapter.ExpandCollapseMode.MODE_SINGLE_EXPAND ) ) return; final int lastExpandedPosition = mExpandCollapseMode.lastExpandedPosition ; if ( lastExpandedPosition == currExpandedParentPosition ) return; com.github.huajianjiang.expandablerecyclerview.util.Logger . e ( com.github.huajianjiang.expandablerecyclerview.widget.ExpandableAdapter.TAG , ( ( "checkSingleExpandMode " + "---->lastExpandedPosition=*" ) + lastExpandedPosition ) ) ; collapseView ( dsffklblzgqljmhczaes , true ) ; mExpandCollapseMode.lastExpandedPosition = currExpandedParentPosition ; } <s> # fix parent ExpandableStateChange and ExpandCollapse listener callback bug
fix_before_refactoring: collapseView ( lastExpandedPosition , true , false )
fix_after_refactoring: collapseView ( dsffklblzgqljmhczaes , true , false )
√ fix_prediction_before: collapseView ( lastExpandedPosition , true , false )
× fix_prediction_after: collapseView ( dsffklblzgqljmhczaes , false )

line_index: 641
bug_before_refactoring: { int result = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; result = statement . executeUpdate () ; statement . close () ; connection . close () ; return result ; } <s> public int deleteRecord ( libraryDatabaseUtility.model.DataSource source , long bookId ) throws java.sql.SQLException { int result = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; result = statement . executeUpdate () ; statement . close () ; connection . close () ; return result ; } <s> fixed a bug  was throwing exception after 1 database call
bug_after_refactoring: { int emanrsndhcxgfmudrqdp = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; emanrsndhcxgfmudrqdp = statement . executeUpdate () ; statement . close () ; connection . close () ; return emanrsndhcxgfmudrqdp ; } <s> public int deleteRecord ( libraryDatabaseUtility.model.DataSource source , long bookId ) throws java.sql.SQLException { int emanrsndhcxgfmudrqdp = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; emanrsndhcxgfmudrqdp = statement . executeUpdate () ; statement . close () ; connection . close () ; return emanrsndhcxgfmudrqdp ; } <s> fixed a bug  was throwing exception after 1 database call
fix_before_refactoring: { int result = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; result = statement . executeUpdate () ; return result ; }
fix_after_refactoring: { int emanrsndhcxgfmudrqdp = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; emanrsndhcxgfmudrqdp = statement . executeUpdate () ; return emanrsndhcxgfmudrqdp ; }
√ fix_prediction_before: { int result = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; result = statement . executeUpdate () ; return result ; }
× fix_prediction_after: { int emanrsndhcxgfmud mdp = 0 ; java.sql.Connection connection = source . getConnection () ; java.sql.PreparedStatement statement = null ; statement = connection . prepareStatement ( libraryDatabaseUtility.repository.BookDAOImpl.DELETE_RECORD_SQL ) ; statement . setLong ( 1 , bookId ) ; emanrsndhcxgfmud ( statement . executeUpdate () ) ; connection . close () ; return emanrsndhcxgfmud mdp ; }

line_index: 651
bug_before_refactoring: c = false <s> public static void main ( java.lang.String [] args ) { boolean a = false ; boolean b = false ; boolean c = false ; boolean p = ( ( ( a || b ) || c ) && ( ( ( ! a ) || b ) || c ) ) && ( ( ( ! a ) || ( ! b ) ) || c ) ; java.lang.System.out . println ( p ) ; } <s> fixed bug in case split
bug_after_refactoring: pssrntssnykjmmscrysz = false <s> public static void main ( java.lang.String [] args ) { boolean a = false ; boolean b = false ; boolean pssrntssnykjmmscrysz = false ; boolean p = ( ( ( a || b ) || c ) && ( ( ( ! a ) || b ) || c ) ) && ( ( ( ! a ) || ( ! b ) ) || c ) ; java.lang.System.out . println ( p ) ; } <s> fixed bug in case split
fix_before_refactoring: c = true
fix_after_refactoring: pssrntssnykjmmscrysz = true
√ fix_prediction_before: c = true
× fix_prediction_after: pssrntssnykjmmscrysz = false

line_index: 671
bug_before_refactoring: return java.lang.Math . sqrt ( dot ) ; <s> public static double norm2 ( float [] x , int dim ) { double dot = 0 ; for ( int i = 0 ; i < dim ; ++ i ) { dot += ( x [ i ] ) * ( x [ i ] ) ; } return java.lang.Math . sqrt ( dot ) ; } <s> fix a norm2 bug
bug_after_refactoring: return java.lang.Math . sqrt ( vrtpubsivyykjhklkkaj ) ; <s> public static double norm2 ( float [] x , int dim ) { double dot = 0 ; for ( int i = 0 ; i < dim ; ++ i ) { dot += ( x [ i ] ) * ( x [ i ] ) ; } return java.lang.Math . sqrt ( vrtpubsivyykjhklkkaj ) ; } <s> fix a norm2 bug
fix_before_refactoring: return dot ;
fix_after_refactoring: return vrtpubsivyykjhklkkaj ;
√ fix_prediction_before: return dot ;
× fix_prediction_after: return new java.lang.Math . sqrt ( new java.util.ArrayList < java.lang.Double > () ) ;

line_index: 692
bug_before_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; java.lang.System.out . println ( deleteResult ) ; return wanted ; } <s> @ java.lang.Override public com.edu.nju.asi.service.serviceImpl.Case uploadOnline ( org.springframework.web.multipart.MultipartFile uploadedFile ) throws java.io.IOException { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; java.lang.System.out . println ( deleteResult ) ; return wanted ; } <s> Fix: bugs in XMLSereviceImpl
bug_after_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; java.lang.System.out . println ( dmnzufziwwhgensrxzbj ) ; return wanted ; } <s> @ java.lang.Override public com.edu.nju.asi.service.serviceImpl.Case uploadOnline ( org.springframework.web.multipart.MultipartFile uploadedFile ) throws java.io.IOException { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; java.lang.System.out . println ( dmnzufziwwhgensrxzbj ) ; return wanted ; } <s> Fix: bugs in XMLSereviceImpl
fix_before_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; return wanted ; }
fix_after_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; return wanted ; }
√ fix_prediction_before: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; return wanted ; }
× fix_prediction_after: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; if ( parseXML ( thisPath ) ) { com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dm &&ufziwwh . delete () ; } return wanted ; }

line_index: 728
bug_before_refactoring: EMPTY_STACK_VALUE = - 1 <s> @ org.junit.Test public void testTop () { edu.kis.vh.stacks.StackFIFO stackObj = new edu.kis.vh.stacks.StackFIFO () ; final int EMPTY_STACK_VALUE = - 1 ; int result = stackObj . top () ; org.junit.Assert . assertEquals ( EMPTY_STACK_VALUE , result ) ; int testValue = 4 ; stackObj . push ( testValue ) ; int testValue1 = 5 ; stackObj . push ( testValue1 ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; } <s> fixed EMPTY_STACK_VALUE issues
bug_after_refactoring: ofontnxwkzmtnxhgkmst = - 1 <s> @ org.junit.Test public void testTop () { edu.kis.vh.stacks.StackFIFO stackObj = new edu.kis.vh.stacks.StackFIFO () ; final int ofontnxwkzmtnxhgkmst = - 1 ; int result = stackObj . top () ; org.junit.Assert . assertEquals ( EMPTY_STACK_VALUE , result ) ; int testValue = 4 ; stackObj . push ( testValue ) ; int testValue1 = 5 ; stackObj . push ( testValue1 ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; } <s> fixed EMPTY_STACK_VALUE issues
fix_before_refactoring: EMPTY_STACK_VALUE = 0
fix_after_refactoring: ofontnxwkzmtnxhgkmst = 0
√ fix_prediction_before: EMPTY_STACK_VALUE = 0
× fix_prediction_after: ofontnxwkzmtnxhgkmst = - 1

line_index: 774
bug_before_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> public static void findEvenOrOdd () { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> Finished user menu  fixed bugs with scanners  fixed formatting for some programs
bug_after_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> public static void findEvenOrOdd () { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> Finished user menu  fixed bugs with scanners  fixed formatting for some programs
fix_before_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }
fix_after_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }
√ fix_prediction_before: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }
× fix_prediction_after: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Enter a number:" ) ; java.lang.System.out . println ( "Even" ) ; java.lang.System.out . println ( "Even" ) ; java.lang.System.out . println ( "Odd" ) ; java.lang.System.out . println ( "" ) ; }

line_index: 806
bug_before_refactoring: i = 0 <s> @ java.lang.SuppressWarnings ( value = "null" ) public void insertAt ( int item , int pos ) { int i = 0 ; Node newNode = new Node () ; newNode.data = item ; newNode.next = null ; Node temp ; temp = head ; while ( i < ( pos - 1 ) ) { i ++ ; temp = temp.next ; } newNode.next = temp.next ; temp.next = newNode ; } <s> Fixed traversal issue
bug_after_refactoring: szuevymjzddofccxquhz = 0 <s> @ java.lang.SuppressWarnings ( value = "null" ) public void insertAt ( int item , int pos ) { int szuevymjzddofccxquhz = 0 ; Node newNode = new Node () ; newNode.data = item ; newNode.next = null ; Node temp ; temp = head ; while ( i < ( pos - 1 ) ) { i ++ ; temp = temp.next ; } newNode.next = temp.next ; temp.next = newNode ; } <s> Fixed traversal issue
fix_before_refactoring: i = 1
fix_after_refactoring: szuevymjzddofccxquhz = 1
√ fix_prediction_before: i = 1
× fix_prediction_after: szuevymjzddofccxquhz = 0

line_index: 808
bug_before_refactoring: { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + userEdited ) + " user edits and restarted the queue" ) ) ; } <s> private void clearUserEdits ( int [] backup ) { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + userEdited ) + " user edits and restarted the queue" ) ) ; } <s> fixed bug with crashing  while cancelling a solveThread
bug_after_refactoring: { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + bwugjvppxbzszkzohwpj ) + " user edits and restarted the queue" ) ) ; } <s> private void clearUserEdits ( int [] backup ) { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + bwugjvppxbzszkzohwpj ) + " user edits and restarted the queue" ) ) ; } <s> fixed bug with crashing  while cancelling a solveThread
fix_before_refactoring: { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } }
fix_after_refactoring: { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } }
√ fix_prediction_before: { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } }
× fix_prediction_after: { int bwugjvpp =zszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvpp =zszkzohwpj ++ ; } } }

line_index: 812
bug_before_refactoring: public static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; } <s> public static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; } <s> Fix the chat and remove PayloadType enum  Fix the chat (bugs in getters @TransportLayer class) Delete enum class PayloadType  instead use static finals in Payload.java Clean up shortenDatagramPacket method
bug_after_refactoring: public static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; } <s> public static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; } <s> Fix the chat and remove PayloadType enum  Fix the chat (bugs in getters @TransportLayer class) Delete enum class PayloadType  instead use static finals in Payload.java Clean up shortenDatagramPacket method
fix_before_refactoring: private static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; }
fix_after_refactoring: private static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; }
√ fix_prediction_before: private static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; }
× fix_prediction_after: private static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekersp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; }

line_index: 818
bug_before_refactoring: if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; } <s> @ java.lang.Override public boolean apply ( @ javax.annotation.Nullable com.gmi.nordborglab.browser.shared.proxy.TraitProxy input ) { if ( input == null ) return true ; boolean isNotFound = true ; for ( com.gmi.nordborglab.browser.shared.proxy.AlleleAssayProxy alleleAssay : input . getObsUnit () . getStock () . getPassport () . getAlleleAssays () ) { if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; } } return isNotFound ; } <s> Fix some bugs regarding the iterator and out of bounds errors
bug_after_refactoring: if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; } <s> @ java.lang.Override public boolean apply ( @ javax.annotation.Nullable com.gmi.nordborglab.browser.shared.proxy.TraitProxy input ) { if ( input == null ) return true ; boolean isNotFound = true ; for ( com.gmi.nordborglab.browser.shared.proxy.AlleleAssayProxy alleleAssay : input . getObsUnit () . getStock () . getPassport () . getAlleleAssays () ) { if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; } } return isNotFound ; } <s> Fix some bugs regarding the iterator and out of bounds errors
fix_before_refactoring: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; }
fix_after_refactoring: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; }
√ fix_prediction_before: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; }
× fix_prediction_after: if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { if ( ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) && ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) ) { ruwhymtbtmywgm.bcin = false ; break; } }

line_index: 849
bug_before_refactoring: private static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float factor1 = ( metrics.heightPixels ) / 1920.0F ; float factor2 = ( metrics.widthPixels ) / 1080.0F ; if ( factor1 >= factor2 ) return factor1 ; else return factor2 ; } <s> private static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float factor1 = ( metrics.heightPixels ) / 1920.0F ; float factor2 = ( metrics.widthPixels ) / 1080.0F ; if ( factor1 >= factor2 ) return factor1 ; else return factor2 ; } <s> performance update for delete lines  change some icons  change thickness chooser dialog  fix refresh spinner  small bug fixes
bug_after_refactoring: private static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float ypxskkaprqqojjcwqajg = ( metrics.heightPixels ) / 1920.0F ; float jwvaeoogruwwuovbimzv = ( metrics.widthPixels ) / 1080.0F ; if ( ypxskkaprqqojjcwqajg >= jwvaeoogruwwuovbimzv ) return ypxskkaprqqojjcwqajg ; else return jwvaeoogruwwuovbimzv ; } <s> private static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float ypxskkaprqqojjcwqajg = ( metrics.heightPixels ) / 1920.0F ; float jwvaeoogruwwuovbimzv = ( metrics.widthPixels ) / 1080.0F ; if ( ypxskkaprqqojjcwqajg >= jwvaeoogruwwuovbimzv ) return ypxskkaprqqojjcwqajg ; else return jwvaeoogruwwuovbimzv ; } <s> performance update for delete lines  change some icons  change thickness chooser dialog  fix refresh spinner  small bug fixes
fix_before_refactoring: public static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float factor1 = ( metrics.heightPixels ) / 1920.0F ; float factor2 = ( metrics.widthPixels ) / 1080.0F ; if ( factor1 >= factor2 ) return factor1 ; else return factor2 ; }
fix_after_refactoring: public static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float ypxskkaprqqojjcwqajg = ( metrics.heightPixels ) / 1920.0F ; float jwvaeoogruwwuovbimzv = ( metrics.widthPixels ) / 1080.0F ; if ( ypxskkaprqqojjcwqajg >= jwvaeoogruwwuovbimzv ) return ypxskkaprqqojjcwqajg ; else return jwvaeoogruwwuovbimzv ; }
√ fix_prediction_before: public static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float factor1 = ( metrics.heightPixels ) / 1920.0F ; float factor2 = ( metrics.widthPixels ) / 1080.0F ; if ( factor1 >= factor2 ) return factor1 ; else return factor2 ; }
× fix_prediction_after: private static float getScaleFactor () { android.util.DisplayMetrics metrics = new android.util.DisplayMetrics () ; io.gloop.drawed.utils.ScreenUtil.activity . getWindowManager () . getDefaultDisplay () . getMetrics ( metrics ) ; float ypxskkap mqojjcwqajg = ( metrics.heightPixels ) / 1920.0F ; float jwvaeoogruwwuovbimzv = ( metrics.widthPixels ) / 1080.0F ; if ( ypxskkap mqojjcwqajg >= jwvaeoogruwwuovbimzv ) return ypxskkap uqojjcwqajg ; else return jwvaeoogruwwuovbimzv ; }

line_index: 877
bug_before_refactoring: { clients [ index ] . write ( data ) ; if ( clients [ index ] . active () ) { index ++ ; } else { removeIndex ( index ) ; } } <s> public void write ( int data ) { int index = 0 ; while ( index < ( clientCount ) ) { clients [ index ] . write ( data ) ; if ( clients [ index ] . active () ) { index ++ ; } else { removeIndex ( index ) ; } } } <s> Fixes NPE when writing to disconnected client  Issue #2577
bug_after_refactoring: { clients [ mvvsmegpxagwgsaqlour ] . write ( data ) ; if ( clients [ mvvsmegpxagwgsaqlour ] . active () ) { mvvsmegpxagwgsaqlour ++ ; } else { removeIndex ( mvvsmegpxagwgsaqlour ) ; } } <s> public void write ( int data ) { int index = 0 ; while ( index < ( clientCount ) ) { clients [ mvvsmegpxagwgsaqlour ] . write ( data ) ; if ( clients [ mvvsmegpxagwgsaqlour ] . active () ) { mvvsmegpxagwgsaqlour ++ ; } else { removeIndex ( mvvsmegpxagwgsaqlour ) ; } } } <s> Fixes NPE when writing to disconnected client  Issue #2577
fix_before_refactoring: { if ( clients [ index ] . active () ) { clients [ index ] . write ( data ) ; index ++ ; } else { removeIndex ( index ) ; } }
fix_after_refactoring: { if ( clients [ mvvsmegpxagwgsaqlour ] . active () ) { clients [ mvvsmegpxagwgsaqlour ] . write ( data ) ; mvvsmegpxagwgsaqlour ++ ; } else { removeIndex ( mvvsmegpxagwgsaqlour ) ; } }
√ fix_prediction_before: { if ( clients [ index ] . active () ) { clients [ index ] . write ( data ) ; index ++ ; } else { removeIndex ( index ) ; } }
× fix_prediction_after: { if ( clients [ mvvsmegpxagwgsaqlour ] . active () ) { mvvsmegpxagwgsaqlour ++ ; } else { removeIndex ( mvvsmegpxagwgsaqlour ) ; } }


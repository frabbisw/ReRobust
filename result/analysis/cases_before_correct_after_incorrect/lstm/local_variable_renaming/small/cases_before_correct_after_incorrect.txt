line_index: 7
bug_before_refactoring: numPlays = - 5 <s> @ Test.Network.Test public void agricolaShouldHaveNumPlays0 () { int numPlays = - 5 ; Main.Containers.Boardgame game = games . get ( 0 ) ; numPlays = game . getNumberOfPlays () ; assertEquals ( 0 , numPlays ) ; } <s> Fixed error. The problem lied in that TestCollectionBuilder used an incomplete mock. Complexity is now being added to all games when collection is built
bug_after_refactoring: fyonoynezhlykppyngtj = - 5 <s> @ Test.Network.Test public void agricolaShouldHaveNumPlays0 () { int fyonoynezhlykppyngtj = - 5 ; Main.Containers.Boardgame game = games . get ( 0 ) ; numPlays = game . getNumberOfPlays () ; assertEquals ( 0 , numPlays ) ; } <s> Fixed error. The problem lied in that TestCollectionBuilder used an incomplete mock. Complexity is now being added to all games when collection is built
fix_before_refactoring: numPlays
fix_after_refactoring: fyonoynezhlykppyngtj
√ fix_prediction_before: numPlays
× fix_prediction_after: ( java.lang.Math . abs ( usedonoynezhlykppyngtj ) )

line_index: 8
bug_before_refactoring: { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; result = ( 31 * result ) + ( epicodusId ) ; return result ; } <s> @ java.lang.Override public int hashCode () { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; result = ( 31 * result ) + ( epicodusId ) ; return result ; } <s> fix id issue
bug_after_refactoring: { int rcjmssnuxxrucmfddhvv = trackName . hashCode () ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( epicodusId ) ; return rcjmssnuxxrucmfddhvv ; } <s> @ java.lang.Override public int hashCode () { int rcjmssnuxxrucmfddhvv = trackName . hashCode () ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( epicodusId ) ; return rcjmssnuxxrucmfddhvv ; } <s> fix id issue
fix_before_refactoring: { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; return result ; }
fix_after_refactoring: { int rcjmssnuxxrucmfddhvv = trackName . hashCode () ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( trackDetails . hashCode () ) ; return rcjmssnuxxrucmfddhvv ; }
√ fix_prediction_before: { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; return result ; }
× fix_prediction_after: { java.lang.System.out . println ( trackName ) ; int rcjmssnuxxrucmfddh. = trackName . hashCode () ; rcjmssnuxxrucmfddh. = ( index * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxxrucmfddh. ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddh. = ( 31 * rcjmssnuxx

line_index: 44
bug_before_refactoring: public void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } } <s> public void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } } <s> Add drag and zoom for Pdf Renderer Fix a bug where pdfActivty started even if the pdf was not downloaded (network error) Add gesture-imageview.jar lib @see github.com/jasonpolites/gesture-imageview Cleaned useless imports
bug_after_refactoring: public void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu ) ; } } <s> public void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu ) ; } } <s> Add drag and zoom for Pdf Renderer Fix a bug where pdfActivty started even if the pdf was not downloaded (network error) Add gesture-imageview.jar lib @see github.com/jasonpolites/gesture-imageview Cleaned useless imports
fix_before_refactoring: private void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } }
fix_after_refactoring: private void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu ) ; } }
√ fix_prediction_before: private void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } }
× fix_prediction_after: private void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) ; } }

line_index: 67
bug_before_refactoring: { int res ; res = a * b ; return res ; } <s> public int computeProduct ( int a , int b ) { int res ; res = a * b ; return res ; } <s> fix serialization issue & clean duplicated/unused code
bug_after_refactoring: { int lnhsinubehjptdzvxsra ; lnhsinubehjptdzvxsra = a * b ; return lnhsinubehjptdzvxsra ; } <s> public int computeProduct ( int a , int b ) { int lnhsinubehjptdzvxsra ; lnhsinubehjptdzvxsra = a * b ; return lnhsinubehjptdzvxsra ; } <s> fix serialization issue & clean duplicated/unused code
fix_before_refactoring: { return a * b ; }
fix_after_refactoring: { return a * b ; }
√ fix_prediction_before: { return a * b ; }
× fix_prediction_after: { java.lang.System.out . println ( ( a + b ) ) ; int iohsinubehjptdzvxsra = a * b ; return ; }

line_index: 80
bug_before_refactoring: org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) ) <s> @ org.junit.Test public void recordFloat ( ) throws java.lang.Exception { float f = 5.5F ; org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) ) ; } <s> Fix issue #2
bug_after_refactoring: org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) ) <s> @ org.junit.Test public void recordFloat ( ) throws java.lang.Exception { float f = 5.5F ; org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) ) ; } <s> Fix issue #2
fix_before_refactoring: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) )
fix_after_refactoring: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) )
√ fix_prediction_before: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) )
× fix_prediction_after: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlFcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlFcsadugtmm" ) ) )

line_index: 90
bug_before_refactoring: { double temp = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( temp - ( this . x ) ) ) ) ) ) ; } <s> public void setX ( double x ) { double temp = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( temp - ( this . x ) ) ) ) ) ) ; } <s> Fixed movement bug
bug_after_refactoring: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouvfawbcgtj - ( this . x ) ) ) ) ) ) ; } <s> public void setX ( double x ) { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouvfawbcgtj - ( this . x ) ) ) ) ) ) ; } <s> Fixed movement bug
fix_before_refactoring: { double temp = this . x ; this . x = x ; }
fix_after_refactoring: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; }
√ fix_prediction_before: { double temp = this . x ; this . x = x ; }
× fix_prediction_after: { java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouappawbcgtj - ( this . x ) ) ) ) ) ) ; }

line_index: 110
bug_before_refactoring: return ( ( this . index ) + 1 ) < size ; <s> public boolean hasNext () { int size = this . size ; return ( ( this . index ) + 1 ) < size ; } <s> Fix bug in the particle array iterator.
bug_after_refactoring: return ( ( this . index ) + 1 ) < fyompghiedgwijxfxhwu ; <s> public boolean hasNext () { int size = this . size ; return ( ( this . index ) + 1 ) < fyompghiedgwijxfxhwu ; } <s> Fix bug in the particle array iterator.
fix_before_refactoring: return ( this . index ) < size ;
fix_after_refactoring: return ( this . index ) < fyompghiedgwijxfxhwu ;
√ fix_prediction_before: return ( this . index ) < size ;
× fix_prediction_after: return ( ( this . index ) + 1 ) < (ompompghiedgwijxfxhwu ;

line_index: 120
bug_before_refactoring: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> public void ANDLW ( int k ) { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> fixed bug: setting status register and truncate to n bit
bug_after_refactoring: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> public void ANDLW ( int k ) { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> fixed bug: setting status register and truncate to n bit
fix_before_refactoring: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; }
fix_after_refactoring: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; }
√ fix_prediction_before: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; }
× fix_prediction_after: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; }

line_index: 129
bug_before_refactoring: { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> public void connectToServer () { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> Fixed connection issues
bug_after_refactoring: { boolean cqwvtnyxsdbeipvtiwka = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> public void connectToServer () { boolean cqwvtnyxsdbeipvtiwka = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> Fixed connection issues
fix_before_refactoring: { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; }
fix_after_refactoring: { boolean cqwvtnyxsdbeipvtiwka = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; }
√ fix_prediction_before: { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; }
× fix_prediction_after: { java.lang.System.out . println ( "Connected to server!" ) ; java.lang.System.out . println ( "Connected to server!" ) ; }

line_index: 150
bug_before_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int rentToCharge = 32 ; currentPlayer . payRentToBank ( rentToCharge ) ; return; } <s> public void playAction () { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int rentToCharge = 32 ; currentPlayer . payRentToBank ( rentToCharge ) ; return; } <s> [FIXED BUG] - Había doble ; en FreeParkingCell y se cobraban $32 al jugador
bug_after_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int bfflxlzivnigmhgsucjq = 32 ; currentPlayer . payRentToBank ( bfflxlzivnigmhgsucjq ) ; return; } <s> public void playAction () { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int bfflxlzivnigmhgsucjq = 32 ; currentPlayer . payRentToBank ( bfflxlzivnigmhgsucjq ) ; return; } <s> [FIXED BUG] - Había doble ; en FreeParkingCell y se cobraban $32 al jugador
fix_before_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; return; }
fix_after_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; return; }
√ fix_prediction_before: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; return; }
× fix_prediction_after: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; }

line_index: 174
bug_before_refactoring: org.junit.Assert . assertTrue ( listEmptyOrBetweenNumberOfItems ) <s> @ org.junit.Test public void testIsListEmptyOrBetweenNumberOfItemsWhenListSizeIs1AndShouldBeBetween1And1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > list = java.util.Arrays . asList ( "" ) ; boolean listEmptyOrBetweenNumberOfItems = fact . isListEmptyOrBetweenNumberOfItems ( list , 1 , 1 ) ; org.junit.Assert . assertTrue ( listEmptyOrBetweenNumberOfItems ) ; } <s> Merge pull request #130 from UnionVMS/bugfix/UNIONVMS-3042  Bugfix/unionvms 3042
bug_after_refactoring: org.junit.Assert . assertTrue ( akmwsnvecqffnpbthmzr ) <s> @ org.junit.Test public void testIsListEmptyOrBetweenNumberOfItemsWhenListSizeIs1AndShouldBeBetween1And1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > list = java.util.Arrays . asList ( "" ) ; boolean listEmptyOrBetweenNumberOfItems = fact . isListEmptyOrBetweenNumberOfItems ( list , 1 , 1 ) ; org.junit.Assert . assertTrue ( akmwsnvecqffnpbthmzr ) ; } <s> Merge pull request #130 from UnionVMS/bugfix/UNIONVMS-3042  Bugfix/unionvms 3042
fix_before_refactoring: assertTrue ( listEmptyOrBetweenNumberOfItems )
fix_after_refactoring: assertTrue ( akmwsnvecqffnpbthmzr )
√ fix_prediction_before: assertTrue ( listEmptyOrBetweenNumberOfItems )
× fix_prediction_after: assertTrue ( event . isListEmptyOrBetweenNumberOfItems ( list , 1 ) )

line_index: 183
bug_before_refactoring: assertFalse ( limitReached ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( limitReached ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
bug_after_refactoring: assertFalse ( etqkxfnufgjmfqmqaack ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( etqkxfnufgjmfqmqaack ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
fix_before_refactoring: assertTrue ( limitReached )
fix_after_refactoring: assertTrue ( etqkxfnufgjmfqmqaack )
√ fix_prediction_before: assertTrue ( limitReached )
× fix_prediction_after: assertTrue ( etqkx .ufgjmfqmqaack )


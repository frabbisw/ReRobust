line_index: 7
bug_before_refactoring: protected final java.lang.String getToken () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; } <s> protected final java.lang.String getToken () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; } <s> bug fixes
bug_after_refactoring: protected final java.lang.String nqdnqwyvynoqycqeghea () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; } <s> protected final java.lang.String nqdnqwyvynoqycqeghea () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; } <s> bug fixes
fix_before_refactoring: public final java.lang.String getToken () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; }
fix_after_refactoring: public final java.lang.String nqdnqwyvynoqycqeghea () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; }
√ fix_prediction_before: public final java.lang.String getToken () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; }
√ fix_prediction_after: public final java.lang.String nqdnqwyvynoqycqeghea () { java.lang.String token = this . getCookie ( "token" ) ; if ( token == null ) { token = this . getHeader ( "token" ) ; if ( token == null ) { token = this . getString ( "token" ) ; } } return token ; }

line_index: 9
bug_before_refactoring: private static void releaseColor ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } } <s> private static void releaseColor ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } } <s> Fixed strange bug where classes were loading with outdated info. Fixed bug where clicking save while editing a section without actually changing anything would cause a crash. Fixed a bug where schedules wouldn't update properly after changing a class's priority.
bug_after_refactoring: private static void lehheqsceduhikkquxmt ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } } <s> private static void lehheqsceduhikkquxmt ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } } <s> Fixed strange bug where classes were loading with outdated info. Fixed bug where clicking save while editing a section without actually changing anything would cause a crash. Fixed a bug where schedules wouldn't update properly after changing a class's priority.
fix_before_refactoring: public static void releaseColor ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } }
fix_after_refactoring: public static void lehheqsceduhikkquxmt ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } }
√ fix_prediction_before: public static void releaseColor ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } }
√ fix_prediction_after: public static void lehheqsceduhikkquxmt ( int color , int which ) { switch ( which ) { case com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES : if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors . push ( color ) ; } break; case com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE : if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors . push ( color ) ; } break; } }

line_index: 72
bug_before_refactoring: protected void addLikeOnClickHandler ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; } <s> protected void addLikeOnClickHandler ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; } <s> Edit incident: Fix bugs
bug_after_refactoring: protected void rslccsxrqevdzqrkyeuk ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; } <s> protected void rslccsxrqevdzqrkyeuk ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; } <s> Edit incident: Fix bugs
fix_before_refactoring: public void addLikeOnClickHandler ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; }
fix_after_refactoring: public void rslccsxrqevdzqrkyeuk ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; }
√ fix_prediction_before: public void addLikeOnClickHandler ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; }
√ fix_prediction_after: public void rslccsxrqevdzqrkyeuk ( android.view.View v ) { isep.moodup.Incident item = ( ( isep.moodup.Incident ) ( v . getTag () ) ) ; session = new isep.moodup.SessionManager ( getApplicationContext () ) ; java.util.HashMap < java.lang.String , java.lang.String > user = session . getUserDetails () ; final java.lang.String idUser = user . get ( Config.KEY_USER_ID ) ; final java.lang.String idIncident = item . getId () ; addLike ( idIncident , idUser ) ; }

line_index: 179
bug_before_refactoring: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> Fix case-sensitivity issues
bug_after_refactoring: static boolean lrboyffbrfouuconejrz ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "lrboyffbrfouuconejrz" ) ) ) return false ; int c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.lrboyffbrfouuconejrz.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "lrboyffbrfouuconejrz" , c ) ) ) break; c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> static boolean lrboyffbrfouuconejrz ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "lrboyffbrfouuconejrz" ) ) ) return false ; int c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.lrboyffbrfouuconejrz.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "lrboyffbrfouuconejrz" , c ) ) ) break; c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> Fix case-sensitivity issues
fix_before_refactoring: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; }
fix_after_refactoring: static boolean lrboyffbrfouuconejrz ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "lrboyffbrfouuconejrz" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.lrboyffbrfouuconejrz.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "lrboyffbrfouuconejrz" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; }
√ fix_prediction_before: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; }
√ fix_prediction_after: static boolean lrboyffbrfouuconejrz ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "lrboyffbrfouuconejrz" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.lrboyffbrfouuconejrz.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "lrboyffbrfouuconejrz" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; }

line_index: 237
bug_before_refactoring: public static boolean deletePhSensor ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; synchronized ( com.sb.elsinore.LaunchControl.phSensorList ) { java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } } return false ; } <s> public static boolean deletePhSensor ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; synchronized ( com.sb.elsinore.LaunchControl.phSensorList ) { java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } } return false ; } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
bug_after_refactoring: public static boolean jhpxodzauejjiahpkctk ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; synchronized ( com.sb.elsinore.LaunchControl.phSensorList ) { java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } } return false ; } <s> public static boolean jhpxodzauejjiahpkctk ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; synchronized ( com.sb.elsinore.LaunchControl.phSensorList ) { java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } } return false ; } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
fix_before_refactoring: public static boolean deletePhSensor ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } return false ; }
fix_after_refactoring: public static boolean jhpxodzauejjiahpkctk ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } return false ; }
√ fix_prediction_before: public static boolean deletePhSensor ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } return false ; }
√ fix_prediction_after: public static boolean jhpxodzauejjiahpkctk ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } return false ; }

line_index: 285
bug_before_refactoring: public void setStartDate ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { this . startDate = java.util.Optional . empty () ; } } catch ( java.util.NoSuchElementException nse ) { throw new java.lang.IllegalArgumentException () ; } } <s> public void setStartDate ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { this . startDate = java.util.Optional . empty () ; } } catch ( java.util.NoSuchElementException nse ) { throw new java.lang.IllegalArgumentException () ; } } <s> Fixed errors when editing
bug_after_refactoring: public void bsliscdthghrnahcnqyc ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { this . startDate = java.util.Optional . empty () ; } } catch ( java.util.NoSuchElementException nse ) { throw new java.lang.IllegalArgumentException () ; } } <s> public void bsliscdthghrnahcnqyc ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { this . startDate = java.util.Optional . empty () ; } } catch ( java.util.NoSuchElementException nse ) { throw new java.lang.IllegalArgumentException () ; } } <s> Fixed errors when editing
fix_before_refactoring: public void setStartDate ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { throw new java.util.NoSuchElementException () ; } } catch ( java.util.NoSuchElementException nse ) { this . startDate = java.util.Optional . empty () ; } }
fix_after_refactoring: public void bsliscdthghrnahcnqyc ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { throw new java.util.NoSuchElementException () ; } } catch ( java.util.NoSuchElementException nse ) { this . startDate = java.util.Optional . empty () ; } }
√ fix_prediction_before: public void setStartDate ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { throw new java.util.NoSuchElementException () ; } } catch ( java.util.NoSuchElementException nse ) { this . startDate = java.util.Optional . empty () ; } }
√ fix_prediction_after: public void bsliscdthghrnahcnqyc ( java.util.Optional < java.util.List < java.util.Date > > startDate ) { try { java.util.List < java.util.Date > dateList = startDate . get () ; if ( ( dateList . size () ) == 2 ) { this . startDate = java.util.Optional . of ( startDate . get () . get ( 0 ) ) ; } else { throw new java.util.NoSuchElementException () ; } } catch ( java.util.NoSuchElementException nse ) { this . startDate = java.util.Optional . empty () ; } }

line_index: 307
bug_before_refactoring: @ java.lang.Override public void run () { try { synchronized ( this ) { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } } <s> @ java.lang.Override public void run () { try { synchronized ( this ) { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } } <s> Fixed the light changing synchronization problem by adding Platform.runLater() in the changeLight method
bug_after_refactoring: @ java.lang.Override public void zjgzijznjypblsrkqozm () { try { synchronized ( this ) { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } } <s> @ java.lang.Override public void zjgzijznjypblsrkqozm () { try { synchronized ( this ) { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } } <s> Fixed the light changing synchronization problem by adding Platform.runLater() in the changeLight method
fix_before_refactoring: @ java.lang.Override public void run () { try { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } }
fix_after_refactoring: @ java.lang.Override public void zjgzijznjypblsrkqozm () { try { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } }
√ fix_prediction_before: @ java.lang.Override public void run () { try { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } }
√ fix_prediction_after: @ java.lang.Override public void zjgzijznjypblsrkqozm () { try { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } }

line_index: 404
bug_before_refactoring: void removeBundleListener ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; synchronized ( bundleListeners ) { java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else removeBundleListeners ( bundleState ) ; } } } <s> void removeBundleListener ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; synchronized ( bundleListeners ) { java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else removeBundleListeners ( bundleState ) ; } } } <s> [BUG#73079] Deadlock between event processing and bundle resolve  Remove synchronized blocks as we have ConcurrentMaps as the impl. Should be sufficient
bug_after_refactoring: void mplzntlqbtvdtmrgqjom ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; synchronized ( bundleListeners ) { java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else mplzntlqbtvdtmrgqjoms ( bundleState ) ; } } } <s> void mplzntlqbtvdtmrgqjom ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; synchronized ( bundleListeners ) { java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else mplzntlqbtvdtmrgqjoms ( bundleState ) ; } } } <s> [BUG#73079] Deadlock between event processing and bundle resolve  Remove synchronized blocks as we have ConcurrentMaps as the impl. Should be sufficient
fix_before_refactoring: void removeBundleListener ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else removeBundleListeners ( bundleState ) ; } }
fix_after_refactoring: void mplzntlqbtvdtmrgqjom ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else mplzntlqbtvdtmrgqjoms ( bundleState ) ; } }
√ fix_prediction_before: void removeBundleListener ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else removeBundleListeners ( bundleState ) ; } }
√ fix_prediction_after: void mplzntlqbtvdtmrgqjom ( final org.jboss.osgi.framework.internal.AbstractBundleState bundleState , final org.osgi.framework.BundleListener listener ) { if ( listener == null ) throw new java.lang.IllegalArgumentException ( "Null listener" ) ; java.util.List < org.osgi.framework.BundleListener > listeners = bundleListeners . get ( bundleState ) ; if ( listeners != null ) { if ( ( listeners . size () ) > 1 ) listeners . remove ( listener ) ; else mplzntlqbtvdtmrgqjoms ( bundleState ) ; } }

line_index: 440
bug_before_refactoring: @ org.junit.Test public void testGetPart () { org.junit.Assert . assertEquals ( 123456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , be.inniger.euler.util.Maths . getPart ( 123456789 , 2 , 5 ) ) ; } <s> @ org.junit.Test public void testGetPart () { org.junit.Assert . assertEquals ( 123456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , be.inniger.euler.util.Maths . getPart ( 123456789 , 2 , 5 ) ) ; } <s> Solved the 33rd problem
bug_after_refactoring: @ org.junit.Test public void eyfzibjuehofglaqzwxa () { org.junit.Assert . assertEquals ( 123456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , be.inniger.euler.util.Maths . getPart ( 123456789 , 2 , 5 ) ) ; } <s> @ org.junit.Test public void eyfzibjuehofglaqzwxa () { org.junit.Assert . assertEquals ( 123456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , be.inniger.euler.util.Maths . getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , be.inniger.euler.util.Maths . getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , be.inniger.euler.util.Maths . getPart ( 123456789 , 2 , 5 ) ) ; } <s> Solved the 33rd problem
fix_before_refactoring: @ org.junit.Test public void testGetPart () { org.junit.Assert . assertEquals ( 123456789 , getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , getPart ( 123456789 , 2 , 5 ) ) ; }
fix_after_refactoring: @ org.junit.Test public void eyfzibjuehofglaqzwxa () { org.junit.Assert . assertEquals ( 123456789 , getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , getPart ( 123456789 , 2 , 5 ) ) ; }
√ fix_prediction_before: @ org.junit.Test public void testGetPart () { org.junit.Assert . assertEquals ( 123456789 , getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , getPart ( 123456789 , 2 , 5 ) ) ; }
√ fix_prediction_after: @ org.junit.Test public void eyfzibjuehofglaqzwxa () { org.junit.Assert . assertEquals ( 123456789 , getPart ( 123456789 , 0 , 9 ) ) ; org.junit.Assert . assertEquals ( 23456789 , getPart ( 123456789 , 1 , 9 ) ) ; org.junit.Assert . assertEquals ( 12345678 , getPart ( 123456789 , 0 , 8 ) ) ; org.junit.Assert . assertEquals ( 345 , getPart ( 123456789 , 2 , 5 ) ) ; }

line_index: 471
bug_before_refactoring: @ org.junit.Test public void getFormattedDateString_6days () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( ( 1 * 7 ) * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; } <s> @ org.junit.Test public void getFormattedDateString_6days () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( ( 1 * 7 ) * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; } <s> Update targetSdkVersion and dependencies  reformat code (#8)  * Update gradle wrapper to 3.3  * Update build tools  * Update android-maven plugin  * Lint error fixes  * Formatting  * Update targetSdkVersion to 25  * Reformat code
bug_after_refactoring: @ org.junit.Test public void fabzhquixulwgpjdnszk () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( ( 1 * 7 ) * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; } <s> @ org.junit.Test public void fabzhquixulwgpjdnszk () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( ( 1 * 7 ) * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; } <s> Update targetSdkVersion and dependencies  reformat code (#8)  * Update gradle wrapper to 3.3  * Update build tools  * Update android-maven plugin  * Lint error fixes  * Formatting  * Update targetSdkVersion to 25  * Reformat code
fix_before_refactoring: @ org.junit.Test public void getFormattedDateString_6days () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( 7 * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; }
fix_after_refactoring: @ org.junit.Test public void fabzhquixulwgpjdnszk () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( 7 * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; }
√ fix_prediction_before: @ org.junit.Test public void getFormattedDateString_6days () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( 7 * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; }
√ fix_prediction_after: @ org.junit.Test public void fabzhquixulwgpjdnszk () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( ( mTime ) - ( ( ( 7 * 24 ) * 60 ) * 60 ) ) + 1 ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 6 ) ) ) ; }

line_index: 500
bug_before_refactoring: private static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> private static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> Fixed bug
bug_after_refactoring: private static boolean pndkkuyhdcgwkpdhbeee ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> private static boolean pndkkuyhdcgwkpdhbeee ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } <s> Fixed bug
fix_before_refactoring: public static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }
fix_after_refactoring: public static boolean pndkkuyhdcgwkpdhbeee ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }
√ fix_prediction_before: public static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }
√ fix_prediction_after: public static boolean pndkkuyhdcgwkpdhbeee ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; }

line_index: 516
bug_before_refactoring: private void deleteSelected () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; try { for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } } catch ( java.sql.SQLException e ) { android.widget.Toast . makeText ( getContext () , getString ( R.string.error_delete_path ) , Toast.LENGTH_LONG ) . show () ; e . printStackTrace () ; } } <s> private void deleteSelected () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; try { for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } } catch ( java.sql.SQLException e ) { android.widget.Toast . makeText ( getContext () , getString ( R.string.error_delete_path ) , Toast.LENGTH_LONG ) . show () ; e . printStackTrace () ; } } <s> Add russian strings. Fix bug when rotate phone with preference dialog.
bug_after_refactoring: private void eybfanikyjztswmelqts () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; try { for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } } catch ( java.sql.SQLException e ) { android.widget.Toast . makeText ( getContext () , getString ( R.string.error_delete_path ) , Toast.LENGTH_LONG ) . show () ; e . printStackTrace () ; } } <s> private void eybfanikyjztswmelqts () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; try { for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } } catch ( java.sql.SQLException e ) { android.widget.Toast . makeText ( getContext () , getString ( R.string.error_delete_path ) , Toast.LENGTH_LONG ) . show () ; e . printStackTrace () ; } } <s> Add russian strings. Fix bug when rotate phone with preference dialog.
fix_before_refactoring: private void deleteSelected () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } }
fix_after_refactoring: private void eybfanikyjztswmelqts () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } }
√ fix_prediction_before: private void deleteSelected () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } }
√ fix_prediction_after: private void eybfanikyjztswmelqts () { java.util.Map < ru.sukharev.pathtracker.utils.orm.MapPath , java.lang.Boolean > map = mAdapter . getCheckedMap () ; for ( ru.sukharev.pathtracker.utils.orm.MapPath path : map . keySet () ) { if ( map . get ( path ) ) { deletePathFromDatabase ( path ) ; mAdapter . remove ( path ) ; } } }

line_index: 568
bug_before_refactoring: private void writeVariableCopy ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc , java.io.PrintWriter out ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } } <s> private void writeVariableCopy ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc , java.io.PrintWriter out ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } } <s> Refactored "out"; enabled MoveAnalysis  This refactors out the parameter "out" used in many places unnecessarily.  This also enables MoveAnalysis which is now doing something sensible after a few bug fixes in WhileyCompiler.
bug_after_refactoring: private void xtxnkskkuxrxjyffjgcw ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc , java.io.PrintWriter out ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } } <s> private void xtxnkskkuxrxjyffjgcw ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc , java.io.PrintWriter out ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } } <s> Refactored "out"; enabled MoveAnalysis  This refactors out the parameter "out" used in many places unnecessarily.  This also enables MoveAnalysis which is now doing something sensible after a few bug fixes in WhileyCompiler.
fix_before_refactoring: private void writeVariableCopy ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } }
fix_after_refactoring: private void xtxnkskkuxrxjyffjgcw ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } }
√ fix_prediction_before: private void writeVariableCopy ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } }
√ fix_prediction_after: private void xtxnkskkuxrxjyffjgcw ( wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableAccess > loc ) { wyil.lang.SyntaxTree.Location < wyil.lang.Bytecode.VariableDeclaration > vd = getVariableDeclaration ( loc . getOperand ( 0 ) ) ; if ( isCopyable ( vd . getType () , loc ) ) { out . print ( vd . getBytecode () . getName () ) ; } else { out . print ( ( ( "wyjs.copy(" + ( vd . getBytecode () . getName () ) ) + ")" ) ) ; } }

line_index: 590
bug_before_refactoring: private static org.pentaho.agilebi.modeler.LogicalColumn findCorrespondingOlapColumn ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; } <s> private static org.pentaho.agilebi.modeler.LogicalColumn findCorrespondingOlapColumn ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; } <s> BISERVER-6820 - Metadata models generated by AgileBI are broken in PME  fixed a bug where the formats and agg types where not rehydrating properly from a saved model.
bug_after_refactoring: private static org.pentaho.agilebi.modeler.LogicalColumn ievjbldlzzjiacdhmexl ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; } <s> private static org.pentaho.agilebi.modeler.LogicalColumn ievjbldlzzjiacdhmexl ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; } <s> BISERVER-6820 - Metadata models generated by AgileBI are broken in PME  fixed a bug where the formats and agg types where not rehydrating properly from a saved model.
fix_before_refactoring: protected static org.pentaho.agilebi.modeler.LogicalColumn findCorrespondingOlapColumn ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; }
fix_after_refactoring: protected static org.pentaho.agilebi.modeler.LogicalColumn ievjbldlzzjiacdhmexl ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; }
√ fix_prediction_before: protected static org.pentaho.agilebi.modeler.LogicalColumn findCorrespondingOlapColumn ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; }
√ fix_prediction_after: protected static org.pentaho.agilebi.modeler.LogicalColumn ievjbldlzzjiacdhmexl ( org.pentaho.agilebi.modeler.LogicalColumn relationalColumn , org.pentaho.agilebi.modeler.LogicalModel olapModel ) { org.pentaho.agilebi.modeler.LogicalTable olapTable = org.pentaho.agilebi.modeler.ModelerConversionUtil . findCorrespondingOlapTable ( relationalColumn . getLogicalTable () , olapModel ) ; if ( olapTable != null ) { for ( org.pentaho.agilebi.modeler.LogicalColumn col : olapTable . getLogicalColumns () ) { if ( col . getPhysicalColumn () . getId () . equals ( relationalColumn . getPhysicalColumn () . getId () ) ) { return col ; } } } return null ; }

line_index: 596
bug_before_refactoring: public void showFrame () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; } <s> public void showFrame () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; } <s> Fixed errors 'row null in col. Type' and 'message in W*  T*'. DRY
bug_after_refactoring: public void ooytsxspkxpgnanneuyg () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; } <s> public void ooytsxspkxpgnanneuyg () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; } <s> Fixed errors 'row null in col. Type' and 'message in W*  T*'. DRY
fix_before_refactoring: private void showFrame () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; }
fix_after_refactoring: private void ooytsxspkxpgnanneuyg () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; }
√ fix_prediction_before: private void showFrame () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; }
√ fix_prediction_after: private void ooytsxspkxpgnanneuyg () { javax.swing.JFrame frame = new javax.swing.JFrame ( "MainUI" ) ; frame . setContentPane ( new MainUI () . main_panel ) ; frame . setPreferredSize ( new java.awt.Dimension ( 720 , 500 ) ) ; frame . setDefaultCloseOperation ( javax.swing.JFrame.EXIT_ON_CLOSE ) ; frame . pack () ; new MainUI.MenuUI () . showMenu ( frame ) ; frame . setResizable ( false ) ; frame . setVisible ( true ) ; }

line_index: 625
bug_before_refactoring: protected void applyCenterCrop ( @ android.support.annotation.NonNull android.view.TextureView view , @ android.support.annotation.NonNull android.graphics.Matrix transformMatrix ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , transformMatrix , xScale , yScale ) ; } <s> protected void applyCenterCrop ( @ android.support.annotation.NonNull android.view.TextureView view , @ android.support.annotation.NonNull android.graphics.Matrix transformMatrix ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , transformMatrix , xScale , yScale ) ; } <s> * Fixes rotation scaling and   * Fixed rotation scaling issues * Fixed rotation being additive on some devices
bug_after_refactoring: protected void fezbnafxkkevknuxpume ( @ android.support.annotation.NonNull android.view.TextureView view , @ android.support.annotation.NonNull android.graphics.Matrix transformMatrix ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , transformMatrix , xScale , yScale ) ; } <s> protected void fezbnafxkkevknuxpume ( @ android.support.annotation.NonNull android.view.TextureView view , @ android.support.annotation.NonNull android.graphics.Matrix transformMatrix ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , transformMatrix , xScale , yScale ) ; } <s> * Fixes rotation scaling and   * Fixed rotation scaling issues * Fixed rotation being additive on some devices
fix_before_refactoring: protected void applyCenterCrop ( @ android.support.annotation.NonNull android.view.TextureView view ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , xScale , yScale ) ; }
fix_after_refactoring: protected void fezbnafxkkevknuxpume ( @ android.support.annotation.NonNull android.view.TextureView view ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , xScale , yScale ) ; }
√ fix_prediction_before: protected void applyCenterCrop ( @ android.support.annotation.NonNull android.view.TextureView view ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , xScale , yScale ) ; }
√ fix_prediction_after: protected void fezbnafxkkevknuxpume ( @ android.support.annotation.NonNull android.view.TextureView view ) { float xScale = ( ( float ) ( view . getWidth () ) ) / ( intrinsicVideoSize.x ) ; float yScale = ( ( float ) ( view . getHeight () ) ) / ( intrinsicVideoSize.y ) ; float scale = java.lang.Math . max ( xScale , yScale ) ; xScale = scale / xScale ; yScale = scale / yScale ; applyScale ( view , xScale , yScale ) ; }

line_index: 635
bug_before_refactoring: public void setyDirRightHip ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false , counter ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true , ( ( yDirRightHip.MoCap.length ) - 1 ) ) ; } } <s> public void setyDirRightHip ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false , counter ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true , ( ( yDirRightHip.MoCap.length ) - 1 ) ) ; } } <s> fixed bugs
bug_after_refactoring: public void rhzerseuuxbkaaztoyma ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false , counter ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true , ( ( yDirRightHip.MoCap.length ) - 1 ) ) ; } } <s> public void rhzerseuuxbkaaztoyma ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false , counter ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true , ( ( yDirRightHip.MoCap.length ) - 1 ) ) ; } } <s> fixed bugs
fix_before_refactoring: public void setyDirRightHip ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true ) ; } }
fix_after_refactoring: public void rhzerseuuxbkaaztoyma ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true ) ; } }
√ fix_prediction_before: public void setyDirRightHip ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true ) ; } }
√ fix_prediction_after: public void rhzerseuuxbkaaztoyma ( mck.MatlabEngine proxy ) throws java.lang.Exception { if ( ( yDirRightHip.MoCap.length ) == ( iListLength ) ) { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , false ) ; } else { yDirRightHip . enterMoCapData ( commandList [ 16 ] , proxy , initTime , true ) ; } }

line_index: 637
bug_before_refactoring: @ java.lang.SafeVarargs public static < V , T > java.util.Comparator < T > propertyComparator ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . propertyComparator ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; } <s> @ java.lang.SafeVarargs public static < V , T > java.util.Comparator < T > propertyComparator ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . propertyComparator ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; } <s> :bug: 修改 BeanComparatorUtil.propertyComparator(String  V...)和 BeanComparatorUtil.propertyComparator(String  List<V>)泛型的顺序 fix #618
bug_after_refactoring: @ java.lang.SafeVarargs public static < V , T > java.util.Comparator < T > hmhgnjavtyrtbmfsyebc ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . hmhgnjavtyrtbmfsyebc ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; } <s> @ java.lang.SafeVarargs public static < V , T > java.util.Comparator < T > hmhgnjavtyrtbmfsyebc ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . hmhgnjavtyrtbmfsyebc ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; } <s> :bug: 修改 BeanComparatorUtil.propertyComparator(String  V...)和 BeanComparatorUtil.propertyComparator(String  List<V>)泛型的顺序 fix #618
fix_before_refactoring: @ java.lang.SafeVarargs public static < T , V > java.util.Comparator < T > propertyComparator ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . propertyComparator ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; }
fix_after_refactoring: @ java.lang.SafeVarargs public static < T , V > java.util.Comparator < T > hmhgnjavtyrtbmfsyebc ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . hmhgnjavtyrtbmfsyebc ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; }
√ fix_prediction_before: @ java.lang.SafeVarargs public static < T , V > java.util.Comparator < T > propertyComparator ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . propertyComparator ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; }
√ fix_prediction_after: @ java.lang.SafeVarargs public static < T , V > java.util.Comparator < T > hmhgnjavtyrtbmfsyebc ( java.lang.String propertyName , V . . . propertyValues ) { org.apache.commons.lang3.Validate . notBlank ( propertyName , "propertyName can't be blank!" ) ; org.apache.commons.lang3.Validate . notNull ( propertyValues , "propertyValues can't be null!" ) ; return com.feilong.core.util.comparator.BeanComparatorUtil . hmhgnjavtyrtbmfsyebc ( propertyName , com.feilong.core.bean.ConvertUtil . toList ( propertyValues ) ) ; }

line_index: 646
bug_before_refactoring: private void selectedButtonStyleLower ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; } <s> private void selectedButtonStyleLower ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; } <s> Fixed button styles and import bug.
bug_after_refactoring: private void rshpeeajcdyndpdidksx ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; } <s> private void rshpeeajcdyndpdidksx ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; } <s> Fixed button styles and import bug.
fix_before_refactoring: public void selectedButtonStyleLower ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; }
fix_after_refactoring: public void rshpeeajcdyndpdidksx ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; }
√ fix_prediction_before: public void selectedButtonStyleLower ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; }
√ fix_prediction_after: public void rshpeeajcdyndpdidksx ( javafx.scene.control.Button button ) { carInsuranceButton . setId ( "sideToolbarButton" ) ; boatInsuranceButton . setId ( "sideToolbarButton" ) ; homeInsuranceButton . setId ( "sideToolbarButton" ) ; holidayHomeInsuranceButton . setId ( "sideToolbarButton" ) ; travelInsuranceButton . setId ( "sideToolbarButton" ) ; button . setId ( "sideToolbarButtonSelected" ) ; }

line_index: 653
bug_before_refactoring: public void init5 () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; } } <s> public void init5 () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; } } <s> transfrom bug fix~ . Also adjust various blocks's probability to came up.  transfrom near wall came up a bug   cause the elements in collection is just a poniter.
bug_after_refactoring: public void lhvmfwzcgfevhkgpawko () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; } } <s> public void lhvmfwzcgfevhkgpawko () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; } } <s> transfrom bug fix~ . Also adjust various blocks's probability to came up.  transfrom near wall came up a bug   cause the elements in collection is just a poniter.
fix_before_refactoring: public void init5 () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; } body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; }
fix_after_refactoring: public void lhvmfwzcgfevhkgpawko () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; } body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; }
√ fix_prediction_before: public void init5 () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; } body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; }
√ fix_prediction_after: public void lhvmfwzcgfevhkgpawko () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; } body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; }

line_index: 654
bug_before_refactoring: private void OnChatSendTextMessageResult ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } <s> private void OnChatSendTextMessageResult ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } <s> Fix bug and add debug  Change-Id: I6f427fd8f8d90614f8b63172c5717860e8925882
bug_after_refactoring: private void fuqysoixhbtlltcxyhlw ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } <s> private void fuqysoixhbtlltcxyhlw ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } <s> Fix bug and add debug  Change-Id: I6f427fd8f8d90614f8b63172c5717860e8925882
fix_before_refactoring: private void OnChatSendTextMessageResult ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { synchronized ( callbacks ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } }
fix_after_refactoring: private void fuqysoixhbtlltcxyhlw ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { synchronized ( callbacks ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } }
√ fix_prediction_before: private void OnChatSendTextMessageResult ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { synchronized ( callbacks ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } }
√ fix_prediction_after: private void fuqysoixhbtlltcxyhlw ( int eGroupType , long nGroupID , long nFromUserID , long nToUserID , java.lang.String sSeqID , int nResult ) { synchronized ( callbacks ) { if ( ( callbacks . size () ) > 0 ) { for ( java.lang.ref.WeakReference < com.V2.jni.callback.ChatRequestCallback > wf : callbacks ) { if ( ( wf . get () ) == null ) { continue; } wf . get () . OnSendTextResultCallback ( eGroupType , nGroupID , nFromUserID , nToUserID , sSeqID , nResult ) ; } } } }

line_index: 696
bug_before_refactoring: public java.lang.String getJoinPointClassName ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; } <s> public java.lang.String getJoinPointClassName ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; } <s> eclipse import bug fix
bug_after_refactoring: public java.lang.String iffjjzyqnveaojvxkyri ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; } <s> public java.lang.String iffjjzyqnveaojvxkyri ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; } <s> eclipse import bug fix
fix_before_refactoring: private java.lang.String getJoinPointClassName ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; }
fix_after_refactoring: private java.lang.String iffjjzyqnveaojvxkyri ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; }
√ fix_prediction_before: private java.lang.String getJoinPointClassName ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; }
√ fix_prediction_after: private java.lang.String iffjjzyqnveaojvxkyri ( final org.aspectj.lang.ProceedingJoinPoint currentJoinPoint ) { java.lang.String className = null ; try { className = currentJoinPoint . getSignature () . toString () ; } catch ( final java.lang.Exception e ) { e . getStackTrace () ; java.lang.System.out . println ( e . getMessage () ) ; className = e . toString () ; } return className ; }

line_index: 756
bug_before_refactoring: public void addAllNumbers () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } } <s> public void addAllNumbers () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } } <s> get tweak mode working again  remove debug msg  remove unneeded access levels (fixes #3435)
bug_after_refactoring: public void nbtdmnkxbqpfhnrdgyzo () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } } <s> public void nbtdmnkxbqpfhnrdgyzo () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } } <s> get tweak mode working again  remove debug msg  remove unneeded access levels (fixes #3435)
fix_before_refactoring: private void addAllNumbers () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } }
fix_after_refactoring: private void nbtdmnkxbqpfhnrdgyzo () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } }
√ fix_prediction_before: private void addAllNumbers () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } }
√ fix_prediction_after: private void nbtdmnkxbqpfhnrdgyzo () { allHandles = new java.util.ArrayList <> () ; addAllDecimalNumbers () ; addAllHexNumbers () ; addAllWebColorNumbers () ; for ( java.util.List < processing.mode.java.tweak.Handle > handle : allHandles ) { java.util.Collections . sort ( handle , new processing.mode.java.tweak.HandleComparator () ) ; } }

line_index: 764
bug_before_refactoring: protected static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } <s> protected static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } <s> Fixed error naming bug
bug_after_refactoring: protected static java.lang.String nairvcwwpewhzlejbucd ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } <s> protected static java.lang.String nairvcwwpewhzlejbucd ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } <s> Fixed error naming bug
fix_before_refactoring: public static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; }
fix_after_refactoring: public static java.lang.String nairvcwwpewhzlejbucd ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; }
√ fix_prediction_before: public static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; }
√ fix_prediction_after: public static java.lang.String nairvcwwpewhzlejbucd ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; }

line_index: 774
bug_before_refactoring: public void run () { while ( true ) { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request == null ) { continue; } java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } } <s> public void run () { while ( true ) { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request == null ) { continue; } java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } } <s> Blocking Queue bug fix
bug_after_refactoring: public void hmzvvtjjyturqhbvcvfx () { while ( true ) { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request == null ) { continue; } java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } } <s> public void hmzvvtjjyturqhbvcvfx () { while ( true ) { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request == null ) { continue; } java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } } <s> Blocking Queue bug fix
fix_before_refactoring: public void run () { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request != null ) { java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } }
fix_after_refactoring: public void hmzvvtjjyturqhbvcvfx () { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request != null ) { java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } }
√ fix_prediction_before: public void run () { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request != null ) { java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } }
√ fix_prediction_after: public void hmzvvtjjyturqhbvcvfx () { com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest request = ( ( com.bmc.justdoit.smartkanban.api.objects.KanbanGeneratorRequest ) ( KanbanQueue.CREATOR_QUEUE . poll () ) ) ; if ( request != null ) { java.lang.System.out . println ( ( "Got a request to create >>>>>>>> " + request ) ) ; com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator kanbanCreator = new com.bmc.justdoit.smartkanban.kanban.creator.KanbanCreator ( request ) ; java.lang.Thread th = new java.lang.Thread ( kanbanCreator ) ; th . start () ; } }

line_index: 796
bug_before_refactoring: public static void deleteTimer ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> public static void deleteTimer ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
bug_after_refactoring: public static void tgiqlbdvkdzmimewsjrn ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> public static void tgiqlbdvkdzmimewsjrn ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
fix_before_refactoring: public static void deleteTimer ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }
fix_after_refactoring: public static void tgiqlbdvkdzmimewsjrn ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }
√ fix_prediction_before: public static void deleteTimer ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }
√ fix_prediction_after: public static void tgiqlbdvkdzmimewsjrn ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }

line_index: 798
bug_before_refactoring: public static pedca.context.Context createAndSaveBottleneckContext ( java.lang.String path , double sizeX , double sizeY , double bottleneckWidth , double bottleneckHeight , double bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; } <s> public static pedca.context.Context createAndSaveBottleneckContext ( java.lang.String path , double sizeX , double sizeY , double bottleneckWidth , double bottleneckHeight , double bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; } <s> improved FlowAnalyzer to calculate total average flow over a specific time Window.  Fixed bugs related to bottleneck tests.
bug_after_refactoring: public static pedca.context.Context zokjbsgabjvxlrregaxm ( java.lang.String path , double sizeX , double sizeY , double bottleneckWidth , double bottleneckHeight , double bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; } <s> public static pedca.context.Context zokjbsgabjvxlrregaxm ( java.lang.String path , double sizeX , double sizeY , double bottleneckWidth , double bottleneckHeight , double bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; } <s> improved FlowAnalyzer to calculate total average flow over a specific time Window.  Fixed bugs related to bottleneck tests.
fix_before_refactoring: public static pedca.context.Context createAndSaveBottleneckContext ( java.lang.String path , float sizeX , float sizeY , float bottleneckWidth , float bottleneckHeight , float bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; }
fix_after_refactoring: public static pedca.context.Context zokjbsgabjvxlrregaxm ( java.lang.String path , float sizeX , float sizeY , float bottleneckWidth , float bottleneckHeight , float bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; }
√ fix_prediction_before: public static pedca.context.Context createAndSaveBottleneckContext ( java.lang.String path , float sizeX , float sizeY , float bottleneckWidth , float bottleneckHeight , float bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; }
√ fix_prediction_after: public static pedca.context.Context zokjbsgabjvxlrregaxm ( java.lang.String path , float sizeX , float sizeY , float bottleneckWidth , float bottleneckHeight , float bottleneckPosY ) { pedca.context.Context context = scenarios.ContextGenerator . getBottleneckContext ( sizeX , sizeY , bottleneckWidth , bottleneckHeight , bottleneckPosY ) ; try { context . saveConfiguration ( path ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } return context ; }

line_index: 804
bug_before_refactoring: @ org.junit.Test public void getFormattedDateString_1day () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( ( 1 * 24 ) * 60 ) * 60 ) ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; } <s> @ org.junit.Test public void getFormattedDateString_1day () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( ( 1 * 24 ) * 60 ) * 60 ) ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; } <s> Update targetSdkVersion and dependencies  reformat code (#8)  * Update gradle wrapper to 3.3  * Update build tools  * Update android-maven plugin  * Lint error fixes  * Formatting  * Update targetSdkVersion to 25  * Reformat code
bug_after_refactoring: @ org.junit.Test public void scbfwaqytckondwilpha () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( ( 1 * 24 ) * 60 ) * 60 ) ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; } <s> @ org.junit.Test public void scbfwaqytckondwilpha () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( ( 1 * 24 ) * 60 ) * 60 ) ) , mTime , false , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest.mContext ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; } <s> Update targetSdkVersion and dependencies  reformat code (#8)  * Update gradle wrapper to 3.3  * Update build tools  * Update android-maven plugin  * Lint error fixes  * Formatting  * Update targetSdkVersion to 25  * Reformat code
fix_before_refactoring: @ org.junit.Test public void getFormattedDateString_1day () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( 24 * 60 ) * 60 ) ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; }
fix_after_refactoring: @ org.junit.Test public void scbfwaqytckondwilpha () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( 24 * 60 ) * 60 ) ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; }
√ fix_prediction_before: @ org.junit.Test public void getFormattedDateString_1day () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( 24 * 60 ) * 60 ) ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; }
√ fix_prediction_after: @ org.junit.Test public void scbfwaqytckondwilpha () { org.hamcrest.MatcherAssert . assertThat ( com.ddiehl.timesincetextview.TimeSince . getFormattedDateString ( ( ( mTime ) - ( ( 24 * 60 ) * 60 ) ) , mTime , false , getContext () ) , com.ddiehl.timesincetextview.TimeSinceTextViewAndroidTest . is ( getQuantityString ( R.plurals.tstv_timespan_days , 1 ) ) ) ; }

line_index: 821
bug_before_refactoring: public boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> public boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> Finished Victory Point manager unit tests  It fixed a lot of bugs so I’m glad I did it
bug_after_refactoring: public boolean msrnoawahmxsnxvxlkbs ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> public boolean msrnoawahmxsnxvxlkbs ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; } <s> Finished Victory Point manager unit tests  It fixed a lot of bugs so I’m glad I did it
fix_before_refactoring: private boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }
fix_after_refactoring: private boolean msrnoawahmxsnxvxlkbs ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }
√ fix_prediction_before: private boolean setPlayerToHaveLargestArmy ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }
√ fix_prediction_after: private boolean msrnoawahmxsnxvxlkbs ( int playerIndex ) { if ( ( playerIndex < 0 ) || ( playerIndex > 3 ) ) return false ; if ( ( currentLargestArmyPlayer ) != ( - 1 ) ) { adjustPlayersPoints ( currentLargestArmyPlayer , ( ( - 1 ) * ( LargestArmyValue ) ) ) ; } currentLargestArmyPlayer = playerIndex ; adjustPlayersPoints ( currentLargestArmyPlayer , LargestArmyValue ) ; return true ; }

line_index: 828
bug_before_refactoring: public static void TestGetProblemTests () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; } <s> public static void TestGetProblemTests () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; } <s> Tests finalized  they don't work. Framework has a fatal bug  no time to solve
bug_after_refactoring: public static void epcfbfpcttdolbuvpqda () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; } <s> public static void epcfbfpcttdolbuvpqda () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; } <s> Tests finalized  they don't work. Framework has a fatal bug  no time to solve
fix_before_refactoring: @ org.junit.Test public void TestGetProblemTests () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; }
fix_after_refactoring: @ org.junit.Test public void epcfbfpcttdolbuvpqda () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; }
√ fix_prediction_before: @ org.junit.Test public void TestGetProblemTests () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; }
√ fix_prediction_after: @ org.junit.Test public void epcfbfpcttdolbuvpqda () { javax.ws.rs.core.Response response = test.java.TestDirlididi.server . newRequest ( ( ( "/problem/" + ( test.java.TestDirlididi.PROBLEM_ID ) ) + "/test" ) ) . request () . buildGet () . invoke () ; org.junit.Assert . assertEquals ( Response.Status.OK . getStatusCode () , response . getStatus () ) ; }

line_index: 854
bug_before_refactoring: public static void putString ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . putString ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; ds.framework.v4.Settings.sPreferencesEditor = null ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } } <s> public static void putString ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . putString ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; ds.framework.v4.Settings.sPreferencesEditor = null ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } } <s> fixed a bug which could cause crash when putting value into shared preferences in a race situation
bug_after_refactoring: public static void uktmdjwjrylylrrdxctk ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . uktmdjwjrylylrrdxctk ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; ds.framework.v4.Settings.sPreferencesEditor = null ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } } <s> public static void uktmdjwjrylylrrdxctk ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . uktmdjwjrylylrrdxctk ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; ds.framework.v4.Settings.sPreferencesEditor = null ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } } <s> fixed a bug which could cause crash when putting value into shared preferences in a race situation
fix_before_refactoring: public static synchronized void putString ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . putString ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } }
fix_after_refactoring: public static synchronized void uktmdjwjrylylrrdxctk ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . uktmdjwjrylylrrdxctk ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } }
√ fix_prediction_before: public static synchronized void putString ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . putString ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } }
√ fix_prediction_after: public static synchronized void uktmdjwjrylylrrdxctk ( android.content.Context context , java.lang.String key , java.lang.String value , boolean commit ) { ds.framework.v4.Settings . ensurePreferencesEditor ( context ) ; ds.framework.v4.Settings.sPreferencesEditor . uktmdjwjrylylrrdxctk ( key , value ) ; if ( commit ) { ds.framework.v4.Settings.sPreferencesEditor . commit () ; } if ( ( ds.framework.v4.Settings.sInstance ) != null ) { ds.framework.v4.Settings.sInstance.mSettings . put ( key , value ) ; } }

line_index: 858
bug_before_refactoring: @ java.lang.Override protected void beforeHookedMethod ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; if ( ( sbn . getNotification () . number ) == 0 ) { com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; } } <s> @ java.lang.Override protected void beforeHookedMethod ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; if ( ( sbn . getNotification () . number ) == 0 ) { com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; } } <s> Fix: Removed double-check for number == 0.  This solves the problem described in 2ab7dfe that SETTING_NONE did nothing.  Sadly  this commit messes a lot with indentation.
bug_after_refactoring: @ java.lang.Override protected void whedbornqqkbbovcedrw ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; if ( ( sbn . getNotification () . number ) == 0 ) { com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; } } <s> @ java.lang.Override protected void whedbornqqkbbovcedrw ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; if ( ( sbn . getNotification () . number ) == 0 ) { com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; } } <s> Fix: Removed double-check for number == 0.  This solves the problem described in 2ab7dfe that SETTING_NONE did nothing.  Sadly  this commit messes a lot with indentation.
fix_before_refactoring: @ java.lang.Override protected void beforeHookedMethod ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; }
fix_after_refactoring: @ java.lang.Override protected void whedbornqqkbbovcedrw ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; }
√ fix_prediction_before: @ java.lang.Override protected void beforeHookedMethod ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; }
√ fix_prediction_after: @ java.lang.Override protected void whedbornqqkbbovcedrw ( com.woalk.apps.xposed.notifcount.MethodHookParam param ) throws java.lang.Throwable { android.service.notification.StatusBarNotification sbn = ( ( android.service.notification.StatusBarNotification ) ( param.args [ 0 ] ) ) ; com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . reload () ; com.woalk.apps.xposed.notifcount.XposedMod . autoApplyNumber ( sbn . getNotification () , com.woalk.apps.xposed.notifcount.XposedMod.mSettingsHelper . getSetting ( sbn . getPackageName () ) ) ; }

line_index: 882
bug_before_refactoring: private static boolean differByOne ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; } <s> private static boolean differByOne ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; } <s> fixing return errors
bug_after_refactoring: private static boolean fsdsximjocjbfovarkgb ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; } <s> private static boolean fsdsximjocjbfovarkgb ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; } <s> fixing return errors
fix_before_refactoring: public static boolean differByOne ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; }
fix_after_refactoring: public static boolean fsdsximjocjbfovarkgb ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; }
√ fix_prediction_before: public static boolean differByOne ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; }
√ fix_prediction_after: public static boolean fsdsximjocjbfovarkgb ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; }


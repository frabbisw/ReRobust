line_index: 12
bug_before_refactoring: { java.lang.System.out . println ( "in setProductManual" ) ; byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; } <s> public void setProductManual ( org.springframework.web.multipart.MultipartFile productPdf ) throws java.io.IOException , java.sql.SQLException , javax.sql.rowset.serial.SerialException { java.lang.System.out . println ( "in setProductManual" ) ; byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; } <s> bugfix category
bug_after_refactoring: { java.lang.System.out . println ( "in setProductManual" ) ; byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; } <s> public void setProductManual ( org.springframework.web.multipart.MultipartFile productPdf ) throws java.io.IOException , java.sql.SQLException , javax.sql.rowset.serial.SerialException { java.lang.System.out . println ( "in setProductManual" ) ; byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; } <s> bugfix category
fix_before_refactoring: { byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; }
fix_after_refactoring: { byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; }
√ fix_prediction_before: { byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; }
√ fix_prediction_after: { byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; }

line_index: 14
bug_before_refactoring: { int width = plot . getWidth () ; return false ; } <s> public boolean onTouch ( android.view.View v , android.view.MotionEvent event ) { int width = plot . getWidth () ; return false ; } <s> Designanpassungen + Versuch von Bugfix  Abweichung Höhe von Balken und Durchschnittspace!
bug_after_refactoring: { int olstodipellshuosevim = plot . getWidth () ; return false ; } <s> public boolean onTouch ( android.view.View v , android.view.MotionEvent event ) { int olstodipellshuosevim = plot . getWidth () ; return false ; } <s> Designanpassungen + Versuch von Bugfix  Abweichung Höhe von Balken und Durchschnittspace!
fix_before_refactoring: { return false ; }
fix_after_refactoring: { return false ; }
√ fix_prediction_before: { return false ; }
√ fix_prediction_after: { return false ; }

line_index: 26
bug_before_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( local ) , true , utcMillis ) <s> @ java.lang.Override public long roundKey ( long utcMillis ) { long local = preTz . convertUTCToLocal ( utcMillis ) ; return preTz . convertLocalToUTC ( field . roundFloor ( local ) , true , utcMillis ) ; } <s> Aggregations: Be lenient when converting local to utc time in time zone roundings  This solves a problem in the time zone rounding classes where time dates that fall into a DST gap will cause joda time library to throw an exception. Changing the conversion methods 'strict' option to false prevents this.  Closes #10025
bug_after_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , true , utcMillis ) <s> @ java.lang.Override public long roundKey ( long utcMillis ) { long local = preTz . convertUTCToLocal ( utcMillis ) ; return preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , true , utcMillis ) ; } <s> Aggregations: Be lenient when converting local to utc time in time zone roundings  This solves a problem in the time zone rounding classes where time dates that fall into a DST gap will cause joda time library to throw an exception. Changing the conversion methods 'strict' option to false prevents this.  Closes #10025
fix_before_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( local ) , false , utcMillis )
fix_after_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , false , utcMillis )
√ fix_prediction_before: preTz . convertLocalToUTC ( field . roundFloor ( local ) , false , utcMillis )
√ fix_prediction_after: preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , false , utcMillis )

line_index: 54
bug_before_refactoring: @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; } <s> fixed layout issues with the action drawer. change action drawer implementation. added toggle to enable/disable the action drawer. removed the 'reset map bearing' button.
bug_after_refactoring: @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; } <s> fixed layout issues with the action drawer. change action drawer implementation. added toggle to enable/disable the action drawer. removed the 'reset map bearing' button.
fix_before_refactoring: @ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; }
fix_after_refactoring: @ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; }
√ fix_prediction_before: @ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; }
√ fix_prediction_after: @ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; }

line_index: 55
bug_before_refactoring: private double convertUnit ( double number , char prefix ) { int index = prefixes . indexOf ( prefix ) ; if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; } <s> private double convertUnit ( double number , char prefix ) { int index = prefixes . indexOf ( prefix ) ; if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; } <s> Fixed density calculator  Because Luke doesn't like solving the problems he creates.
bug_after_refactoring: private double convertUnit ( double number , char prefix ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; } <s> private double convertUnit ( double number , char prefix ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; } <s> Fixed density calculator  Because Luke doesn't like solving the problems he creates.
fix_before_refactoring: private double convertUnit ( double number , int index ) { if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; }
fix_after_refactoring: private double convertUnit ( double number , int wvfotfwqdrmkhfuynluc ) { if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; }
√ fix_prediction_before: private double convertUnit ( double number , int index ) { if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; }
√ fix_prediction_after: private double convertUnit ( double number , int wvfotfwqdrmkhfuynluc ) { if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; }

line_index: 57
bug_before_refactoring: { int height = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return height ; } <s> @ java.lang.Override public int getTileSizeY () { int height = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return height ; } <s> Update error messages and feedback fixes
bug_after_refactoring: { int enfkunewhlnypnwxbrih = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return enfkunewhlnypnwxbrih ; } <s> @ java.lang.Override public int getTileSizeY () { int enfkunewhlnypnwxbrih = metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; return enfkunewhlnypnwxbrih ; } <s> Update error messages and feedback fixes
fix_before_refactoring: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }
fix_after_refactoring: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }
√ fix_prediction_before: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }
√ fix_prediction_after: { return metadataRetrieve . getPixelsSizeY ( getSeries () ) . getValue () ; }

line_index: 59
bug_before_refactoring: assertEquals ( task . getUpdateSubTasks () , param ) <s> @ org.junit.Test public void getUpdateSubTasksTest () { boolean param ; param = true ; task . setUpdateSubTasks ( param ) ; assertEquals ( task . getUpdateSubTasks () , param ) ; } <s> deepCopy Bug Fix
bug_after_refactoring: assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf ) <s> @ org.junit.Test public void getUpdateSubTasksTest () { boolean param ; param = true ; task . setUpdateSubTasks ( param ) ; assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf ) ; } <s> deepCopy Bug Fix
fix_before_refactoring: assertEquals ( param , task . getUpdateSubTasks () )
fix_after_refactoring: assertEquals ( knpkphrulyfoqmvmgbkf , task . getUpdateSubTasks () )
√ fix_prediction_before: assertEquals ( param , task . getUpdateSubTasks () )
√ fix_prediction_after: assertEquals ( knpkphrulyfoqmvmgbkf , task . getUpdateSubTasks () )

line_index: 74
bug_before_refactoring: org.junit.Assert . assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 ) <s> private void verifyEqualityConstraintsHold ( int numberOfEqualityConstraints , org.ejml.data.DenseMatrix64F linearEqualityConstraintsAMatrix , org.ejml.data.DenseMatrix64F linearEqualityConstraintsBVector , org.ejml.data.DenseMatrix64F solutionMatrix ) { double maxAbsoluteError = getMaxEqualityConstraintError ( numberOfEqualityConstraints , linearEqualityConstraintsAMatrix , linearEqualityConstraintsBVector , solutionMatrix ) ; org.junit.Assert . assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 ) ; } <s> Fixed a bug due to a bad handling of the variable bounds in the QP.
bug_after_refactoring: org.junit.Assert . assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 ) <s> private void verifyEqualityConstraintsHold ( int numberOfEqualityConstraints , org.ejml.data.DenseMatrix64F linearEqualityConstraintsAMatrix , org.ejml.data.DenseMatrix64F linearEqualityConstraintsBVector , org.ejml.data.DenseMatrix64F solutionMatrix ) { double maxAbsoluteError = getMaxEqualityConstraintError ( numberOfEqualityConstraints , linearEqualityConstraintsAMatrix , linearEqualityConstraintsBVector , solutionMatrix ) ; org.junit.Assert . assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 ) ; } <s> Fixed a bug due to a bad handling of the variable bounds in the QP.
fix_before_refactoring: assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 )
fix_after_refactoring: assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 )
√ fix_prediction_before: assertEquals ( 0.0 , maxAbsoluteError , 1.0E-5 )
√ fix_prediction_after: assertEquals ( 0.0 , clclcdnodhcdfycajyvs , 1.0E-5 )

line_index: 75
bug_before_refactoring: { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return mapPixelWidth ; } <s> public float getMapPixelWidth () { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return mapPixelWidth ; } <s> Projectile collision bug fixed.
bug_after_refactoring: { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; } <s> public float getMapPixelWidth () { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; } <s> Projectile collision bug fixed.
fix_before_refactoring: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
fix_after_refactoring: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
√ fix_prediction_before: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
√ fix_prediction_after: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }

line_index: 77
bug_before_refactoring: { long time = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> @ java.lang.Override protected void doPaint ( java.awt.Graphics g ) { long time = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> Bugfix
bug_after_refactoring: { long lgcnelaizwjihbbpinaa = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> @ java.lang.Override protected void doPaint ( java.awt.Graphics g ) { long lgcnelaizwjihbbpinaa = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> Bugfix
fix_before_refactoring: { drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; }
fix_after_refactoring: { drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; }
√ fix_prediction_before: { drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; }
√ fix_prediction_after: { drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; }

line_index: 80
bug_before_refactoring: org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) ) <s> @ org.junit.Test public void recordFloat ( ) throws java.lang.Exception { float f = 5.5F ; org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) ) ; } <s> Fix issue #2
bug_after_refactoring: org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) ) <s> @ org.junit.Test public void recordFloat ( ) throws java.lang.Exception { float f = 5.5F ; org.junit.Assert . assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) ) ; } <s> Fix issue #2
fix_before_refactoring: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) )
fix_after_refactoring: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) )
√ fix_prediction_before: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "f" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( f ) ) )
√ fix_prediction_after: assertThat ( hu.advancedweb.scott.helper.TestHelper . getLastRecordedStateFor ( "esxkumxvlvbcsadugtmm" ) , org.hamcrest.CoreMatchers . equalTo ( java.lang.Float . toString ( esxkumxvlvbcsadugtmm ) ) )

line_index: 90
bug_before_refactoring: { double temp = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( temp - ( this . x ) ) ) ) ) ) ; } <s> public void setX ( double x ) { double temp = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( temp - ( this . x ) ) ) ) ) ) ; } <s> Fixed movement bug
bug_after_refactoring: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouvfawbcgtj - ( this . x ) ) ) ) ) ) ; } <s> public void setX ( double x ) { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; java.lang.System.out . println ( ( "Moved " + ( java.lang.Math . abs ( ( jfzsmhcrkouvfawbcgtj - ( this . x ) ) ) ) ) ) ; } <s> Fixed movement bug
fix_before_refactoring: { double temp = this . x ; this . x = x ; }
fix_after_refactoring: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; }
√ fix_prediction_before: { double temp = this . x ; this . x = x ; }
√ fix_prediction_after: { double jfzsmhcrkouvfawbcgtj = this . x ; this . x = x ; }

line_index: 91
bug_before_refactoring: org.junit.Assert . assertEquals ( 2971215073L , ( a + b ) ) <s> @ org.junit.Test public void longAdditionWorks () { long a = 1134903170 ; long b = 1836311903 ; org.junit.Assert . assertEquals ( 2971215073L , ( a + b ) ) ; } <s> Fix metaprogramming bugs
bug_after_refactoring: org.junit.Assert . assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) ) <s> @ org.junit.Test public void longAdditionWorks () { long a = 1134903170 ; long b = 1836311903 ; org.junit.Assert . assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) ) ; } <s> Fix metaprogramming bugs
fix_before_refactoring: assertEquals ( 2971215073L , ( a + b ) )
fix_after_refactoring: assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) )
√ fix_prediction_before: assertEquals ( 2971215073L , ( a + b ) )
√ fix_prediction_after: assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) )

line_index: 97
bug_before_refactoring: { boolean result = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return result ; } <s> @ java.lang.Override public boolean onUnbind ( android.content.Intent intent ) { boolean result = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return result ; } <s> fix image not load error
bug_after_refactoring: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return oisnhwbgkmbrfncbihpf ; } <s> @ java.lang.Override public boolean onUnbind ( android.content.Intent intent ) { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; com.tianyl.android.offlinereader.sync.SyncService . addLog ( "onUnbind" ) ; return oisnhwbgkmbrfncbihpf ; } <s> fix image not load error
fix_before_refactoring: { boolean result = super . onUnbind ( intent ) ; return result ; }
fix_after_refactoring: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; return oisnhwbgkmbrfncbihpf ; }
√ fix_prediction_before: { boolean result = super . onUnbind ( intent ) ; return result ; }
√ fix_prediction_after: { boolean oisnhwbgkmbrfncbihpf = super . onUnbind ( intent ) ; return oisnhwbgkmbrfncbihpf ; }

line_index: 100
bug_before_refactoring: private int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; } <s> private int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; } <s> Fixed a serious error with the bank and getting the count of dev cards  Accidentally accessed the resources array rather than the real array
bug_after_refactoring: private int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; } <s> private int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; } <s> Fixed a serious error with the bank and getting the count of dev cards  Accidentally accessed the resources array rather than the real array
fix_before_refactoring: public int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; }
fix_after_refactoring: public int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; }
√ fix_prediction_before: public int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; }
√ fix_prediction_after: public int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; }

line_index: 120
bug_before_refactoring: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> public void ANDLW ( int k ) { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> fixed bug: setting status register and truncate to n bit
bug_after_refactoring: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> public void ANDLW ( int k ) { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; throw new java.lang.UnsupportedOperationException ( "Not supported yet." ) ; } <s> fixed bug: setting status register and truncate to n bit
fix_before_refactoring: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; }
fix_after_refactoring: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; }
√ fix_prediction_before: { int result = ( getWRegister () ) & k ; if ( result == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( result ) ; }
√ fix_prediction_after: { int ltfhjtwpwrptttbuetxm = ( getWRegister () ) & k ; if ( ltfhjtwpwrptttbuetxm == 0 ) { setSTATUSbitZ ( 1 ) ; } setWRegister ( ltfhjtwpwrptttbuetxm ) ; }

line_index: 137
bug_before_refactoring: { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "progress-->" + progress ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; } <s> @ java.lang.Override public void onAnimationUpdate ( android.animation.ValueAnimator valueAnimator ) { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "progress-->" + progress ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; } <s> fix bug
bug_after_refactoring: { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "mxqrnnkeulwczbarayqs-->" + mxqrnnkeulwczbarayqs ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; } <s> @ java.lang.Override public void onAnimationUpdate ( android.animation.ValueAnimator valueAnimator ) { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "mxqrnnkeulwczbarayqs-->" + mxqrnnkeulwczbarayqs ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; } <s> fix bug
fix_before_refactoring: { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; }
fix_after_refactoring: { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; }
√ fix_prediction_before: { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; }
√ fix_prediction_after: { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; }

line_index: 154
bug_before_refactoring: { long x = value . longValue () ; ( count ) ++ ; sum += x ; evaluateMinMax ( x ) ; } <s> @ java.lang.Override public void evaluate ( java.math.BigInteger value ) { if ( value != null ) { long x = value . longValue () ; ( count ) ++ ; sum += x ; evaluateMinMax ( x ) ; } } <s> fix bug
bug_after_refactoring: { long nlvpxnxtbsxpflgnftml = value . longValue () ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; } <s> @ java.lang.Override public void evaluate ( java.math.BigInteger value ) { if ( value != null ) { long nlvpxnxtbsxpflgnftml = value . longValue () ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; } } <s> fix bug
fix_before_refactoring: { long x = value . longValue () ; evaluateMinMax ( x ) ; ( count ) ++ ; sum += x ; }
fix_after_refactoring: { long nlvpxnxtbsxpflgnftml = value . longValue () ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; }
√ fix_prediction_before: { long x = value . longValue () ; evaluateMinMax ( x ) ; ( count ) ++ ; sum += x ; }
√ fix_prediction_after: { long nlvpxnxtbsxpflgnftml = value . longValue () ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; }

line_index: 156
bug_before_refactoring: org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) ) <s> @ org.junit.Test public void buildServiceUrl () { int documentId = 17 ; java.lang.String expected = ( at.fhj.swd13.pse.test.service.DocumentServiceIT.serviceUrl ) + ( java.lang.Integer . toString ( documentId ) ) ; org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) ) ; } <s> Bugfix Document Service Tests
bug_after_refactoring: org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) ) <s> @ org.junit.Test public void buildServiceUrl () { int documentId = 17 ; java.lang.String expected = ( at.fhj.swd13.pse.test.service.DocumentServiceIT.serviceUrl ) + ( java.lang.Integer . toString ( documentId ) ) ; org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) ) ; } <s> Bugfix Document Service Tests
fix_before_refactoring: assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) )
fix_after_refactoring: assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) )
√ fix_prediction_before: assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) )
√ fix_prediction_after: assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) )

line_index: 171
bug_before_refactoring: @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) { boolean retry = true ; while ( retry ) { try { thread . join () ; retry = false ; } catch ( java.lang.InterruptedException e ) {} } } <s> @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) { boolean retry = true ; while ( retry ) { try { thread . join () ; retry = false ; } catch ( java.lang.InterruptedException e ) {} } } <s> Various cleanups and attempted bugfixes. Still freezes on startup
bug_after_refactoring: @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) { boolean hvjwsvvbytnwftikrjcw = true ; while ( hvjwsvvbytnwftikrjcw ) { try { thread . join () ; hvjwsvvbytnwftikrjcw = false ; } catch ( java.lang.InterruptedException e ) {} } } <s> @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) { boolean hvjwsvvbytnwftikrjcw = true ; while ( hvjwsvvbytnwftikrjcw ) { try { thread . join () ; hvjwsvvbytnwftikrjcw = false ; } catch ( java.lang.InterruptedException e ) {} } } <s> Various cleanups and attempted bugfixes. Still freezes on startup
fix_before_refactoring: @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) {}
fix_after_refactoring: @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) {}
√ fix_prediction_before: @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) {}
√ fix_prediction_after: @ java.lang.Override public void surfaceDestroyed ( android.view.SurfaceHolder holder ) {}

line_index: 174
bug_before_refactoring: org.junit.Assert . assertTrue ( listEmptyOrBetweenNumberOfItems ) <s> @ org.junit.Test public void testIsListEmptyOrBetweenNumberOfItemsWhenListSizeIs1AndShouldBeBetween1And1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > list = java.util.Arrays . asList ( "" ) ; boolean listEmptyOrBetweenNumberOfItems = fact . isListEmptyOrBetweenNumberOfItems ( list , 1 , 1 ) ; org.junit.Assert . assertTrue ( listEmptyOrBetweenNumberOfItems ) ; } <s> Merge pull request #130 from UnionVMS/bugfix/UNIONVMS-3042  Bugfix/unionvms 3042
bug_after_refactoring: org.junit.Assert . assertTrue ( akmwsnvecqffnpbthmzr ) <s> @ org.junit.Test public void testIsListEmptyOrBetweenNumberOfItemsWhenListSizeIs1AndShouldBeBetween1And1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > list = java.util.Arrays . asList ( "" ) ; boolean listEmptyOrBetweenNumberOfItems = fact . isListEmptyOrBetweenNumberOfItems ( list , 1 , 1 ) ; org.junit.Assert . assertTrue ( akmwsnvecqffnpbthmzr ) ; } <s> Merge pull request #130 from UnionVMS/bugfix/UNIONVMS-3042  Bugfix/unionvms 3042
fix_before_refactoring: assertTrue ( listEmptyOrBetweenNumberOfItems )
fix_after_refactoring: assertTrue ( akmwsnvecqffnpbthmzr )
√ fix_prediction_before: assertTrue ( listEmptyOrBetweenNumberOfItems )
√ fix_prediction_after: assertTrue ( akmwsnvecqffnpbthmzr )

line_index: 182
bug_before_refactoring: len = a.length <s> public static int task1 ( int [] a ) { int len = a.length ; return prac2.Tasks . recursiveCutRod ( a , len ) ; } <s> Bug fixes
bug_after_refactoring: edlpompnwngrzdbtbtez = a.length <s> public static int task1 ( int [] a ) { int edlpompnwngrzdbtbtez = a.length ; return prac2.Tasks . recursiveCutRod ( a , len ) ; } <s> Bug fixes
fix_before_refactoring: len = ( a.length ) - 1
fix_after_refactoring: edlpompnwngrzdbtbtez = ( a.length ) - 1
√ fix_prediction_before: len = ( a.length ) - 1
√ fix_prediction_after: edlpompnwngrzdbtbtez = ( a.length ) - 1

line_index: 183
bug_before_refactoring: assertFalse ( limitReached ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( limitReached ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
bug_after_refactoring: assertFalse ( etqkxfnufgjmfqmqaack ) <s> @ org.junit.Test public void testLimitCheckIncorrect () { boolean limitReached = this . player . balanceExceedsLimitBy ( this . bet ) ; assertFalse ( etqkxfnufgjmfqmqaack ) ; } <s> traced the bug back and fixed the bug  ran Junit test to confirm the bug is fixed
fix_before_refactoring: assertTrue ( limitReached )
fix_after_refactoring: assertTrue ( etqkxfnufgjmfqmqaack )
√ fix_prediction_before: assertTrue ( limitReached )
√ fix_prediction_after: assertTrue ( etqkxfnufgjmfqmqaack )

line_index: 190
bug_before_refactoring: maxMemory = ( ( int ) ( ( java.lang.Runtime . getRuntime () . maxMemory () ) / 1024 ) ) <s> public static int getDefaultLruCacheSize () { final int maxMemory = ( ( int ) ( ( java.lang.Runtime . getRuntime () . maxMemory () ) / 1024 ) ) ; final int cacheSize = maxMemory / 8 ; return cacheSize ; } <s> fix ImageCache  add AlertActivity Notification fix text cut problem
bug_after_refactoring: zmrsaadsbkajecwoiabs = ( ( int ) ( ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) / 1024 ) ) <s> public static int getDefaultLruCacheSize () { final int zmrsaadsbkajecwoiabs = ( ( int ) ( ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) / 1024 ) ) ; final int cacheSize = maxMemory / 8 ; return cacheSize ; } <s> fix ImageCache  add AlertActivity Notification fix text cut problem
fix_before_refactoring: maxMemory = ( ( int ) ( java.lang.Runtime . getRuntime () . maxMemory () ) )
fix_after_refactoring: zmrsaadsbkajecwoiabs = ( ( int ) ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) )
√ fix_prediction_before: maxMemory = ( ( int ) ( java.lang.Runtime . getRuntime () . maxMemory () ) )
√ fix_prediction_after: zmrsaadsbkajecwoiabs = ( ( int ) ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) )

line_index: 191
bug_before_refactoring: { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition currPos = " + currPos ) ) ; return currPos ; } <s> @ java.lang.Override public long getAdCurrentPosition () { if ( ( adsProvider ) != null ) { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition currPos = " + currPos ) ) ; return currPos ; } return com.kaltura.playkit.utils.Consts.POSITION_UNSET ; } <s> FEM-1427 (#243)  * Ignore ad actions in case ad error flag is reported  * prevent adManager init if going back from bg and all ads are completed prevent calling pause if ad is not playing on going bg  * fix get method to be correct  * add private modifier  * fix ima warmup
bug_after_refactoring: { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition kaqkwcjqosfvujspmiay = " + kaqkwcjqosfvujspmiay ) ) ; return kaqkwcjqosfvujspmiay ; } <s> @ java.lang.Override public long getAdCurrentPosition () { if ( ( adsProvider ) != null ) { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition kaqkwcjqosfvujspmiay = " + kaqkwcjqosfvujspmiay ) ) ; return kaqkwcjqosfvujspmiay ; } return com.kaltura.playkit.utils.Consts.POSITION_UNSET ; } <s> FEM-1427 (#243)  * Ignore ad actions in case ad error flag is reported  * prevent adManager init if going back from bg and all ads are completed prevent calling pause if ad is not playing on going bg  * fix get method to be correct  * add private modifier  * fix ima warmup
fix_before_refactoring: { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; return currPos ; }
fix_after_refactoring: { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; return kaqkwcjqosfvujspmiay ; }
√ fix_prediction_before: { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; return currPos ; }
√ fix_prediction_after: { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; return kaqkwcjqosfvujspmiay ; }

line_index: 198
bug_before_refactoring: public static void main ( java.lang.String [] args ) { long starttime = 0 ; starttime = java.lang.Long . parseLong ( "1253663" ) ; java.lang.System.out . println ( ( starttime * 11 ) ) ; } <s> public static void main ( java.lang.String [] args ) { long starttime = 0 ; starttime = java.lang.Long . parseLong ( "1253663" ) ; java.lang.System.out . println ( ( starttime * 11 ) ) ; } <s> 可以提交CloudArch jobs  fix bugs
bug_after_refactoring: public static void main ( java.lang.String [] args ) { long jccgguhfirnlwkrtkmaj = 0 ; jccgguhfirnlwkrtkmaj = java.lang.Long . parseLong ( "1253663" ) ; java.lang.System.out . println ( ( jccgguhfirnlwkrtkmaj * 11 ) ) ; } <s> public static void main ( java.lang.String [] args ) { long jccgguhfirnlwkrtkmaj = 0 ; jccgguhfirnlwkrtkmaj = java.lang.Long . parseLong ( "1253663" ) ; java.lang.System.out . println ( ( jccgguhfirnlwkrtkmaj * 11 ) ) ; } <s> 可以提交CloudArch jobs  fix bugs
fix_before_refactoring: public static void main ( java.lang.String [] args ) {}
fix_after_refactoring: public static void main ( java.lang.String [] args ) {}
√ fix_prediction_before: public static void main ( java.lang.String [] args ) {}
√ fix_prediction_after: public static void main ( java.lang.String [] args ) {}


line_index: 4
bug_before_refactoring: if ( ( start != ( - 1 ) ) || ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; <s> public int parseRaceNumber () { int start = this . name . indexOf ( "_" ) ; int stop = this . name . indexOf ( "_" , ( start + 1 ) ) ; if ( ( start != ( - 1 ) ) || ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; } <s> Get Year from XML input file rather than hard-coding Fix event name parsing bug Tweak XML parsing for eventor
bug_after_refactoring: if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) || ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; <s> public int parseRaceNumber () { int start = this . name . indexOf ( "_" ) ; int stop = this . name . indexOf ( "_" , ( start + 1 ) ) ; if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) || ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; } <s> Get Year from XML input file rather than hard-coding Fix event name parsing bug Tweak XML parsing for eventor
fix_before_refactoring: if ( ( start != ( - 1 ) ) && ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ;
fix_after_refactoring: if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) && ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ;
√ fix_prediction_before: if ( ( start != ( - 1 ) ) && ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ;
√ fix_prediction_after: if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) && ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ;

line_index: 18
bug_before_refactoring: { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int locationSave = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.lang.System.out . println ( ( "ArrayVariable called " + ( ctx . getText () ) ) ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( locationSave ) ; return returnArray ; } <s> @ java.lang.Override public java.lang.Object visitArrayVariable ( DECAF2.DECAF2Parser.ArrayVariableContext ctx ) { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int locationSave = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.lang.System.out . println ( ( "ArrayVariable called " + ( ctx . getText () ) ) ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( locationSave ) ; return returnArray ; } <s> Fix: pequeños errores en generación de tablas
bug_after_refactoring: { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int mvvfhfjdcvinpflqnzdn = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.lang.System.out . println ( ( "ArrayVariable called " + ( ctx . getText () ) ) ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( mvvfhfjdcvinpflqnzdn ) ; return returnArray ; } <s> @ java.lang.Override public java.lang.Object visitArrayVariable ( DECAF2.DECAF2Parser.ArrayVariableContext ctx ) { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int mvvfhfjdcvinpflqnzdn = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.lang.System.out . println ( ( "ArrayVariable called " + ( ctx . getText () ) ) ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( mvvfhfjdcvinpflqnzdn ) ; return returnArray ; } <s> Fix: pequeños errores en generación de tablas
fix_before_refactoring: { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int locationSave = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( locationSave ) ; return returnArray ; }
fix_after_refactoring: { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int mvvfhfjdcvinpflqnzdn = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( mvvfhfjdcvinpflqnzdn ) ; return returnArray ; }
√ fix_prediction_before: { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int locationSave = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( locationSave ) ; return returnArray ; }
√ fix_prediction_after: { java.lang.String nombreVar = ctx . getChild ( 0 ) . getText () ; int mvvfhfjdcvinpflqnzdn = java.lang.Integer . parseInt ( ctx . getChild ( 2 ) . getText () ) ; java.util.ArrayList returnArray = new java.util.ArrayList () ; returnArray . add ( nombreVar ) ; returnArray . add ( mvvfhfjdcvinpflqnzdn ) ; return returnArray ; }

line_index: 24
bug_before_refactoring: { java.lang.String search = "map=" ; int dataStart = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , dataStart , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; } <s> private < TGeo extends de.k3b.geo.api.GeoPointDto > TGeo getYandexUri ( java.lang.String uri , TGeo parseResult ) { java.lang.String search = "map=" ; int dataStart = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , dataStart , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; } <s> Fixed issues found by https://www.codacy.com
bug_after_refactoring: { java.lang.String search = "map=" ; int rxlbyftmuxitxllcktwz = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , rxlbyftmuxitxllcktwz , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; } <s> private < TGeo extends de.k3b.geo.api.GeoPointDto > TGeo getYandexUri ( java.lang.String uri , TGeo parseResult ) { java.lang.String search = "map=" ; int rxlbyftmuxitxllcktwz = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , rxlbyftmuxitxllcktwz , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; } <s> Fixed issues found by https://www.codacy.com
fix_before_refactoring: { int dataStart = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , dataStart , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; }
fix_after_refactoring: { int rxlbyftmuxitxllcktwz = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , rxlbyftmuxitxllcktwz , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; }
√ fix_prediction_before: { int dataStart = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , dataStart , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; }
√ fix_prediction_after: { int rxlbyftmuxitxllcktwz = contentIndexBehind ( uri , "ll=" ) ; java.lang.String [] parts = getParts ( uri , rxlbyftmuxitxllcktwz , "[,?&]" , 2 ) ; if ( parts != null ) { de.k3b.geo.io.GeoUri . setLatLonZoom ( parseResult , parts [ 1 ] , parts [ 0 ] , null ) ; } return uriParamParse ( uri , parseResult ) ; }

line_index: 62
bug_before_refactoring: { final int MIN_OPPONENTS = 1 ; final int MAX_OPPONENTS = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( MIN_OPPONENTS , MAX_OPPONENTS , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; resetGameVars () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; } <s> private void startQuickGame () { final int MIN_OPPONENTS = 1 ; final int MAX_OPPONENTS = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( MIN_OPPONENTS , MAX_OPPONENTS , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; resetGameVars () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; } <s> Fixed player count bugs  added scoreboard (in-game and winner)  changed in-game UI  added end-game functionality (exiting etc..)  added chat for lobby  in-game and end-game
bug_after_refactoring: { final int eyvprkipnyfuzqbdyypt = 1 ; final int xypranatcazmehbcxqjv = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( eyvprkipnyfuzqbdyypt , xypranatcazmehbcxqjv , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; resetGameVars () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; } <s> private void startQuickGame () { final int eyvprkipnyfuzqbdyypt = 1 ; final int xypranatcazmehbcxqjv = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( eyvprkipnyfuzqbdyypt , xypranatcazmehbcxqjv , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; resetGameVars () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; } <s> Fixed player count bugs  added scoreboard (in-game and winner)  changed in-game UI  added end-game functionality (exiting etc..)  added chat for lobby  in-game and end-game
fix_before_refactoring: { final int MIN_OPPONENTS = 1 ; final int MAX_OPPONENTS = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( MIN_OPPONENTS , MAX_OPPONENTS , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; }
fix_after_refactoring: { final int eyvprkipnyfuzqbdyypt = 1 ; final int xypranatcazmehbcxqjv = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( eyvprkipnyfuzqbdyypt , xypranatcazmehbcxqjv , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; }
√ fix_prediction_before: { final int MIN_OPPONENTS = 1 ; final int MAX_OPPONENTS = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( MIN_OPPONENTS , MAX_OPPONENTS , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; }
√ fix_prediction_after: { final int eyvprkipnyfuzqbdyypt = 1 ; final int xypranatcazmehbcxqjv = 1 ; android.os.Bundle autoMatchCriteria = com.google.android.gms.games.multiplayer.realtime.RoomConfig . createAutoMatchCriteria ( eyvprkipnyfuzqbdyypt , xypranatcazmehbcxqjv , 0 ) ; com.google.android.gms.games.multiplayer.realtime.RoomConfig.Builder rtmConfigBuilder = com.google.android.gms.games.multiplayer.realtime.RoomConfig . builder ( this ) ; rtmConfigBuilder . setMessageReceivedListener ( this ) ; rtmConfigBuilder . setRoomStatusUpdateListener ( this ) ; rtmConfigBuilder . setAutoMatchCriteria ( autoMatchCriteria ) ; switchToScreen ( R.id.screen_wait ) ; keepScreenOn () ; Games.RealTimeMultiplayer . create ( mGoogleApiClient , rtmConfigBuilder . build () ) ; }

line_index: 66
bug_before_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , ec ) <s> public int pull_chunk ( byte [] data_buffer , double [] timestamp_buffer , double timeout ) throws java.lang.Exception { int [] ec = new int [] { 0 } ; long res = edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , ec ) ; edu.ucsd.sccn.LSL . check_error ( ec ) ; return ( ( int ) ( res ) ) ; } <s> Updated liblsl-Java to work with current lsl_h.c. Fixed crash bugs with opening streams on Linux.
bug_after_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , bborcwcykviuccnipdff ) <s> public int pull_chunk ( byte [] data_buffer , double [] timestamp_buffer , double timeout ) throws java.lang.Exception { int [] ec = new int [] { 0 } ; long res = edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , bborcwcykviuccnipdff ) ; edu.ucsd.sccn.LSL . check_error ( ec ) ; return ( ( int ) ( res ) ) ; } <s> Updated liblsl-Java to work with current lsl_h.c. Fixed crash bugs with opening streams on Linux.
fix_before_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , ec )
fix_after_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , bborcwcykviuccnipdff )
√ fix_prediction_before: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , ec )
√ fix_prediction_after: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_c ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , bborcwcykviuccnipdff )

line_index: 84
bug_before_refactoring: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } } <s> public void testIterFilterLimitOffset () { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } } <s> Fixed compilation error (using SienaFutureProxy instead of SienaFuture)
bug_after_refactoring: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int ipbcfqoooibbsoxxnwqe = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ ipbcfqoooibbsoxxnwqe ] , PersonIntKey ) ; ipbcfqoooibbsoxxnwqe ++ ; } } <s> public void testIterFilterLimitOffset () { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int ipbcfqoooibbsoxxnwqe = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ ipbcfqoooibbsoxxnwqe ] , PersonIntKey ) ; ipbcfqoooibbsoxxnwqe ++ ; } } <s> Fixed compilation error (using SienaFutureProxy instead of SienaFuture)
fix_before_refactoring: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } }
fix_after_refactoring: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int ipbcfqoooibbsoxxnwqe = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ ipbcfqoooibbsoxxnwqe ] , PersonIntKey ) ; ipbcfqoooibbsoxxnwqe ++ ; } }
√ fix_prediction_before: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } }
√ fix_prediction_after: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 2 , 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_EINSTEIN } ; int ipbcfqoooibbsoxxnwqe = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ ipbcfqoooibbsoxxnwqe ] , PersonIntKey ) ; ipbcfqoooibbsoxxnwqe ++ ; } }

line_index: 90
bug_before_refactoring: com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) ) <s> @ org.junit.Test @ com.hp.autonomy.frontend.selenium.framework.logging.ResolvedBug ( value = "FIND-93" ) public void testNoResults () { final com.autonomy.abc.selenium.find.results.ListView results = findService . search ( "thissearchwillalmostcertainlyreturnnoresults" ) ; new org.openqa.selenium.support.ui.WebDriverWait ( getDriver () , 60L ) . withMessage ( "No results message should appear" ) . until ( org.openqa.selenium.support.ui.ExpectedConditions . textToBePresentInElement ( results . resultsDiv () , "No results found" ) ) ; findPage . scrollToBottom () ; final int occurrences = org.apache.commons.lang3.StringUtils . countMatches ( results . resultsDiv () . getText () , "results found" ) ; com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) ) ; } <s> [FIND-719  FIND-1122] Marked ActiveBugs as resolved in ITs.  [rev: ivo.miller]
bug_after_refactoring: com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) ) <s> @ org.junit.Test @ com.hp.autonomy.frontend.selenium.framework.logging.ResolvedBug ( value = "FIND-93" ) public void testNoResults () { final com.autonomy.abc.selenium.find.results.ListView results = findService . search ( "thissearchwillalmostcertainlyreturnnoresults" ) ; new org.openqa.selenium.support.ui.WebDriverWait ( getDriver () , 60L ) . withMessage ( "No results message should appear" ) . until ( org.openqa.selenium.support.ui.ExpectedConditions . textToBePresentInElement ( results . resultsDiv () , "No results found" ) ) ; findPage . scrollToBottom () ; final int occurrences = org.apache.commons.lang3.StringUtils . countMatches ( results . resultsDiv () . getText () , "results found" ) ; com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) ) ; } <s> [FIND-719  FIND-1122] Marked ActiveBugs as resolved in ITs.  [rev: ivo.miller]
fix_before_refactoring: verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) )
fix_after_refactoring: verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) )
√ fix_prediction_before: verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) )
√ fix_prediction_after: verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) )

line_index: 96
bug_before_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.lang.System.out . println ( time [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> public java.lang.String getFormattedDate ( java.lang.String str ) { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.lang.System.out . println ( time [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> Added comments and fixed the colon bug
bug_after_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.lang.System.out . println ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> public java.lang.String getFormattedDate ( java.lang.String str ) { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.lang.System.out . println ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; } <s> Added comments and fixed the colon bug
fix_before_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }
fix_after_refactoring: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }
√ fix_prediction_before: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] time = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( time [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }
√ fix_prediction_after: { com.github.TimeParser tp = new com.github.TimeParser () ; long [] ipnwblghnlbzacxwgtxx = tp . GetInput ( str ) ; java.util.Date date0 = new java.util.Date ( ipnwblghnlbzacxwgtxx [ 0 ] ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss z" ) ; sdf . setTimeZone ( java.util.TimeZone . getTimeZone ( "GMT-4" ) ) ; java.lang.String formattedDate = sdf . format ( date0 ) ; return formattedDate ; }

line_index: 99
bug_before_refactoring: new workSQL.Employee ( hold , "" , "" , "" ) <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int hold = 0 ; newEmployee = new workSQL.Employee ( hold , "" , "" , "" ) ; workSQL.EmployeeDetailDialog addD = new workSQL.EmployeeDetailDialog ( thisFrame , thisFrame , "Add a new employee" , true , newEmployee ) ; addD.updateButton . setEnabled ( false ) ; addD.deleteButton . setEnabled ( false ) ; addD.employeeNumberField . setEnabled ( false ) ; addD . setVisible ( true ) ; } <s> Some errors have been fixed but lots of work left to do inorder to configure it with the final database.
bug_after_refactoring: new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" ) <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int hold = 0 ; newEmployee = new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" ) ; workSQL.EmployeeDetailDialog addD = new workSQL.EmployeeDetailDialog ( thisFrame , thisFrame , "Add a new employee" , true , newEmployee ) ; addD.updateButton . setEnabled ( false ) ; addD.deleteButton . setEnabled ( false ) ; addD.employeeNumberField . setEnabled ( false ) ; addD . setVisible ( true ) ; } <s> Some errors have been fixed but lots of work left to do inorder to configure it with the final database.
fix_before_refactoring: new workSQL.Employee ( hold , "" , "" , "" , "" )
fix_after_refactoring: new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" , "" )
√ fix_prediction_before: new workSQL.Employee ( hold , "" , "" , "" , "" )
√ fix_prediction_after: new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" , "" )

line_index: 103
bug_before_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , ec ) <s> public int pull_chunk ( double [] data_buffer , double [] timestamp_buffer , double timeout ) throws java.lang.Exception { int [] ec = new int [] { 0 } ; long res = edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , ec ) ; edu.ucsd.sccn.LSL . check_error ( ec ) ; return ( ( int ) ( res ) ) ; } <s> Updated liblsl-Java to work with current lsl_h.c. Fixed crash bugs with opening streams on Linux.
bug_after_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , ntlogeadbvdfbsmfwicj ) <s> public int pull_chunk ( double [] data_buffer , double [] timestamp_buffer , double timeout ) throws java.lang.Exception { int [] ec = new int [] { 0 } ; long res = edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , ( ( long ) ( data_buffer.length ) ) , ( ( long ) ( timestamp_buffer.length ) ) , timeout , ntlogeadbvdfbsmfwicj ) ; edu.ucsd.sccn.LSL . check_error ( ec ) ; return ( ( int ) ( res ) ) ; } <s> Updated liblsl-Java to work with current lsl_h.c. Fixed crash bugs with opening streams on Linux.
fix_before_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , ec )
fix_after_refactoring: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , ntlogeadbvdfbsmfwicj )
√ fix_prediction_before: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , ec )
√ fix_prediction_after: edu.ucsd.sccn.LSL.inst . lsl_pull_chunk_d ( obj , data_buffer , timestamp_buffer , data_buffer.length , timestamp_buffer.length , timeout , ntlogeadbvdfbsmfwicj )

line_index: 123
bug_before_refactoring: currentY = maxY - 1 <s> public void computeSegments () { int maxX = ( graph . dimX () ) - 1 ; int maxY = ( graph . dimY () ) - 1 ; for ( int currentY = maxY - 1 ; currentY >= 0 ; currentY -- ) { currentWindow = sbr.Range . TwoDimensionalRange ( 0 , maxX , currentY , maxY ) ; computeSegmentsInRange () ; for ( sbr.Segment seg : segments ) assert ! ( seg . getLinks () . isEmpty () ) ; } } <s> Fix 1x1 Noc unit test  A 1x1 NoC has the same start/terminal vertice. Also  the error when catching left/right vertices was fixed. Commit:Fix TaskNumber:#48
bug_after_refactoring: currentY = lqaogcpijbvsszccxesd - 1 <s> public void computeSegments () { int maxX = ( graph . dimX () ) - 1 ; int maxY = ( graph . dimY () ) - 1 ; for ( int currentY = lqaogcpijbvsszccxesd - 1 ; currentY >= 0 ; currentY -- ) { currentWindow = sbr.Range . TwoDimensionalRange ( 0 , maxX , currentY , maxY ) ; computeSegmentsInRange () ; for ( sbr.Segment seg : segments ) assert ! ( seg . getLinks () . isEmpty () ) ; } } <s> Fix 1x1 Noc unit test  A 1x1 NoC has the same start/terminal vertice. Also  the error when catching left/right vertices was fixed. Commit:Fix TaskNumber:#48
fix_before_refactoring: currentY = maxY
fix_after_refactoring: currentY = lqaogcpijbvsszccxesd
√ fix_prediction_before: currentY = maxY
√ fix_prediction_after: currentY = lqaogcpijbvsszccxesd

line_index: 125
bug_before_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; isbn = Main . normalizeISBN ( x ) ; got = true ; } <s> private static long scan_isbn ( java.lang.String prompt ) { boolean got = false ; long isbn = 0 ; while ( ! got ) { try { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; isbn = Main . normalizeISBN ( x ) ; got = true ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.out . println ( "ERROR: ISBN must contain some numbers(e.g. 143-2334-12)\n" ) ; got = false ; } } return isbn ; } <s> Fixed: Some small printing errors.
bug_after_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; } <s> private static long scan_isbn ( java.lang.String prompt ) { boolean got = false ; long isbn = 0 ; while ( ! got ) { try { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; java.lang.System.out . println () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.out . println ( "ERROR: ISBN must contain some numbers(e.g. 143-2334-12)\n" ) ; got = false ; } } return isbn ; } <s> Fixed: Some small printing errors.
fix_before_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; isbn = Main . normalizeISBN ( x ) ; got = true ; }
fix_after_refactoring: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; }
√ fix_prediction_before: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; isbn = Main . normalizeISBN ( x ) ; got = true ; }
√ fix_prediction_after: { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; iioaesgxjyqybjkousyh = Main . normalizeISBN ( x ) ; ojiczyxosaguzlvkzrub = true ; }

line_index: 144
bug_before_refactoring: { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> Fix bug in fragment for use getActivity()
bug_after_refactoring: { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> Fix bug in fragment for use getActivity()
fix_before_refactoring: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; }
fix_after_refactoring: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; }
√ fix_prediction_before: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; }
√ fix_prediction_after: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; }

line_index: 148
bug_before_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> Fixed deadlock issue. Came from Java synchronization.
bug_after_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; synchronized ( m_checks ) { for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; } <s> Fixed deadlock issue. Came from Java synchronization.
fix_before_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
fix_after_refactoring: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
√ fix_prediction_before: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float amountPaid = message . get ( 1 ) ; float cost = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( amountPaid - cost ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }
√ fix_prediction_after: public void payForMeal ( core.agent.Message message ) { core.restaurant.agent.Customer customer = message . get ( 0 ) ; float tbsconsainzawdigdmkg = message . get ( 1 ) ; float gncdmvvjbyddrrvsjftv = 0 ; for ( core.restaurant.Check c : m_checks ) { if ( ( c . getCustomer () ) == customer ) { c . setStatus ( CheckStatusEnum.Received ) ; c . setChange ( ( tbsconsainzawdigdmkg - gncdmvvjbyddrrvsjftv ) ) ; } } print ( ( ( customer . getName () ) + " is paying for his/her meal." ) ) ; stateChanged () ; }

line_index: 168
bug_before_refactoring: if ( temp == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } <s> public ontario.accounts.Account removeAccount ( java.lang.String numAccTemp ) { if ( numAccTemp == null ) { return null ; } else { boolean temp ; ontario.accounts.Account temp2 ; for ( int i = 0 ; i < ( acc . size () ) ; i ++ ) { temp = acc . get ( i ) . getAccountNumber () . equals ( numAccTemp ) ; if ( temp == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } } } return null ; } <s> fixed some bugs
bug_after_refactoring: if ( ateymnoqpbbiegrcuwtc == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } <s> public ontario.accounts.Account removeAccount ( java.lang.String numAccTemp ) { if ( numAccTemp == null ) { return null ; } else { boolean temp ; ontario.accounts.Account temp2 ; for ( int i = 0 ; i < ( acc . size () ) ; i ++ ) { temp = acc . get ( i ) . getAccountNumber () . equals ( numAccTemp ) ; if ( ateymnoqpbbiegrcuwtc == true ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } } } return null ; } <s> fixed some bugs
fix_before_refactoring: if ( temp ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }
fix_after_refactoring: if ( ateymnoqpbbiegrcuwtc ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }
√ fix_prediction_before: if ( temp ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }
√ fix_prediction_after: if ( ateymnoqpbbiegrcuwtc ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; }

line_index: 169
bug_before_refactoring: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> Fix case-sensitivity issues
bug_after_refactoring: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int nikxywkvufqomcdcmgjr = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "cypher" , nikxywkvufqomcdcmgjr ) ) ) break; nikxywkvufqomcdcmgjr = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int nikxywkvufqomcdcmgjr = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( com.intellij.lang.parser.GeneratedParserUtilBase . empty_element_parsed_guard_ ( b , "cypher" , nikxywkvufqomcdcmgjr ) ) ) break; nikxywkvufqomcdcmgjr = com.intellij.lang.parser.GeneratedParserUtilBase . current_position_ ( b ) ; } return true ; } <s> Fix case-sensitivity issues
fix_before_refactoring: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; }
fix_after_refactoring: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int nikxywkvufqomcdcmgjr = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , nikxywkvufqomcdcmgjr ) ) ) break; nikxywkvufqomcdcmgjr = current_position_ ( b ) ; } return true ; }
√ fix_prediction_before: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; }
√ fix_prediction_after: static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int nikxywkvufqomcdcmgjr = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , nikxywkvufqomcdcmgjr ) ) ) break; nikxywkvufqomcdcmgjr = current_position_ ( b ) ; } return true ; }

line_index: 170
bug_before_refactoring: ( diff * diff ) / ( array.length ) <s> public static float variance ( final float [] array , final int offset , final int length ) { final float mean = com.tagtraum.jipes.math.Floats . arithmeticMean ( array , offset , length ) ; double sum = 0 ; for ( int i = offset ; i < ( offset + length ) ; i ++ ) { final float diff = ( array [ i ] ) - mean ; sum += ( diff * diff ) / ( array.length ) ; } return ( ( float ) ( sum ) ) ; } <s> New computation methods (median  ...). Fixed bug in arithmeticMean method.
bug_after_refactoring: ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / ( array.length ) <s> public static float variance ( final float [] array , final int offset , final int length ) { final float mean = com.tagtraum.jipes.math.Floats . arithmeticMean ( array , offset , length ) ; double sum = 0 ; for ( int i = offset ; i < ( offset + length ) ; i ++ ) { final float diff = ( array [ i ] ) - mean ; sum += ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / ( array.length ) ; } return ( ( float ) ( sum ) ) ; } <s> New computation methods (median  ...). Fixed bug in arithmeticMean method.
fix_before_refactoring: ( diff * diff ) / length
fix_after_refactoring: ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / length
√ fix_prediction_before: ( diff * diff ) / length
√ fix_prediction_after: ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / length

line_index: 185
bug_before_refactoring: if ( timeRequirement <= 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; } <s> private boolean validateTimeRequirement () { util.Util . clearError ( lblTimeRequirementError ) ; if ( txtTimeRequirement . isMessageDefault () ) { return true ; } try { int timeRequirement = java.lang.Integer . parseInt ( txtTimeRequirement . getText () ) ; if ( timeRequirement <= 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; } } catch ( java.lang.NumberFormatException e ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, whole numbers only" ) ; return false ; } return true ; } <s> fixed small bug
bug_after_refactoring: if ( emvzgfkmruayixpcqgqn <= 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; } <s> private boolean validateTimeRequirement () { util.Util . clearError ( lblTimeRequirementError ) ; if ( txtTimeRequirement . isMessageDefault () ) { return true ; } try { int timeRequirement = java.lang.Integer . parseInt ( txtTimeRequirement . getText () ) ; if ( emvzgfkmruayixpcqgqn <= 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; } } catch ( java.lang.NumberFormatException e ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, whole numbers only" ) ; return false ; } return true ; } <s> fixed small bug
fix_before_refactoring: if ( timeRequirement < 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; }
fix_after_refactoring: if ( emvzgfkmruayixpcqgqn < 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; }
√ fix_prediction_before: if ( timeRequirement < 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; }
√ fix_prediction_after: if ( emvzgfkmruayixpcqgqn < 0 ) { util.Util . setError ( lblTimeRequirementError , "Invalid value, must be positive whole numbers only" ) ; return false ; }

line_index: 186
bug_before_refactoring: { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( minutes - ( oter . getTime () ) ) ) ; android.util.Log . e ( "Wakeup" , ( ( minutes - ( oter . getTime () ) ) + "" ) ) ; } <s> @ java.lang.Override public void processResults ( org.json.JSONObject result ) { int minutes = getTime ( result ) ; if ( minutes <= ( oter . getTime () ) ) { com.joebruzek.oter.utilities.SmsSender . sendText ( oter ) ; oterLayer . removeOter ( oter ) ; } else { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( minutes - ( oter . getTime () ) ) ) ; android.util.Log . e ( "Wakeup" , ( ( minutes - ( oter . getTime () ) ) + "" ) ) ; } this . stopSelf () ; } <s> Fixed bug with SendOterService wakeup
bug_after_refactoring: { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( cwajfsshwsvahhskckmn - ( oter . getTime () ) ) ) ; android.util.Log . e ( "Wakeup" , ( ( cwajfsshwsvahhskckmn - ( oter . getTime () ) ) + "" ) ) ; } <s> @ java.lang.Override public void processResults ( org.json.JSONObject result ) { int minutes = getTime ( result ) ; if ( minutes <= ( oter . getTime () ) ) { com.joebruzek.oter.utilities.SmsSender . sendText ( oter ) ; oterLayer . removeOter ( oter ) ; } else { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( cwajfsshwsvahhskckmn - ( oter . getTime () ) ) ) ; android.util.Log . e ( "Wakeup" , ( ( cwajfsshwsvahhskckmn - ( oter . getTime () ) ) + "" ) ) ; } this . stopSelf () ; } <s> Fixed bug with SendOterService wakeup
fix_before_refactoring: { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( minutes - ( oter . getTime () ) ) ) ; }
fix_after_refactoring: { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( cwajfsshwsvahhskckmn - ( oter . getTime () ) ) ) ; }
√ fix_prediction_before: { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( minutes - ( oter . getTime () ) ) ) ; }
√ fix_prediction_after: { com.joebruzek.oter.utilities.AlarmScheduler . scheduleWakeUp ( this , oter , ( cwajfsshwsvahhskckmn - ( oter . getTime () ) ) ) ; }

line_index: 190
bug_before_refactoring: degreeOfFreedom = ( dataset.length ) - 1 <s> public double variance ( double [] dataset ) { double degreeOfFreedom = ( dataset.length ) - 1 ; double var = 0 ; double mean = mean ( dataset ) ; for ( int i = 0 ; i < ( dataset.length ) ; i ++ ) { var += java.lang.Math . pow ( ( ( dataset [ i ] ) - mean ) , 2 ) ; } var /= degreeOfFreedom ; return var ; } <s> bugfix
bug_after_refactoring: tiwadnravhoozasunphp = ( dataset.length ) - 1 <s> public double variance ( double [] dataset ) { double tiwadnravhoozasunphp = ( dataset.length ) - 1 ; double var = 0 ; double mean = mean ( dataset ) ; for ( int i = 0 ; i < ( dataset.length ) ; i ++ ) { var += java.lang.Math . pow ( ( ( dataset [ i ] ) - mean ) , 2 ) ; } var /= degreeOfFreedom ; return var ; } <s> bugfix
fix_before_refactoring: degreeOfFreedom = dataset.length
fix_after_refactoring: tiwadnravhoozasunphp = dataset.length
√ fix_prediction_before: degreeOfFreedom = dataset.length
√ fix_prediction_after: tiwadnravhoozasunphp = dataset.length

line_index: 206
bug_before_refactoring: expResult = false <s> @ org.junit.Test public void testAtLeastOneNegative4 () { java.lang.System.out . println ( "atLeastOneNegative" ) ; int n1 = 0 ; int n2 = 0 ; int n3 = 0 ; int n4 = - 7 ; boolean expResult = false ; boolean result = second.FirstTasksSet . atLeastOneNegative ( n1 , n2 , n3 , n4 ) ; org.junit.Assert . assertEquals ( expResult , result ) ; } <s> BugFix Test
bug_after_refactoring: gysqfoizxgvfmacgmjgl = false <s> @ org.junit.Test public void testAtLeastOneNegative4 () { java.lang.System.out . println ( "atLeastOneNegative" ) ; int n1 = 0 ; int n2 = 0 ; int n3 = 0 ; int n4 = - 7 ; boolean gysqfoizxgvfmacgmjgl = false ; boolean result = second.FirstTasksSet . atLeastOneNegative ( n1 , n2 , n3 , n4 ) ; org.junit.Assert . assertEquals ( expResult , result ) ; } <s> BugFix Test
fix_before_refactoring: expResult = true
fix_after_refactoring: gysqfoizxgvfmacgmjgl = true
√ fix_prediction_before: expResult = true
√ fix_prediction_after: gysqfoizxgvfmacgmjgl = true

line_index: 211
bug_before_refactoring: { this . Heap [ ( ++ ( this . size ) ) ] = element ; int current = this . size ; while ( ( this . Heap [ current ] ) > ( this . Heap [ this . parent ( current ) ] ) ) { this . swap ( current , this . parent ( current ) ) ; current = this . parent ( current ) ; } } <s> public void insert ( int element ) { this . Heap [ ( ++ ( this . size ) ) ] = element ; int current = this . size ; while ( ( this . Heap [ current ] ) > ( this . Heap [ this . parent ( current ) ] ) ) { this . swap ( current , this . parent ( current ) ) ; current = this . parent ( current ) ; } } <s> Problem solved correctly for the data from course
bug_after_refactoring: { this . Heap [ ( ++ ( this . size ) ) ] = element ; int pfjjczjlqarermafxpzs = this . size ; while ( ( this . Heap [ pfjjczjlqarermafxpzs ] ) > ( this . Heap [ this . parent ( pfjjczjlqarermafxpzs ) ] ) ) { this . swap ( pfjjczjlqarermafxpzs , this . parent ( pfjjczjlqarermafxpzs ) ) ; pfjjczjlqarermafxpzs = this . parent ( pfjjczjlqarermafxpzs ) ; } } <s> public void insert ( int element ) { this . Heap [ ( ++ ( this . size ) ) ] = element ; int pfjjczjlqarermafxpzs = this . size ; while ( ( this . Heap [ pfjjczjlqarermafxpzs ] ) > ( this . Heap [ this . parent ( pfjjczjlqarermafxpzs ) ] ) ) { this . swap ( pfjjczjlqarermafxpzs , this . parent ( pfjjczjlqarermafxpzs ) ) ; pfjjczjlqarermafxpzs = this . parent ( pfjjczjlqarermafxpzs ) ; } } <s> Problem solved correctly for the data from course
fix_before_refactoring: { this . Heap [ ( ( this . size ) ++ ) ] = element ; int current = ( this . size ) - 1 ; while ( ( this . Heap [ current ] ) > ( this . Heap [ this . parent ( current ) ] ) ) { this . swap ( current , this . parent ( current ) ) ; current = this . parent ( current ) ; } }
fix_after_refactoring: { this . Heap [ ( ( this . size ) ++ ) ] = element ; int pfjjczjlqarermafxpzs = ( this . size ) - 1 ; while ( ( this . Heap [ pfjjczjlqarermafxpzs ] ) > ( this . Heap [ this . parent ( pfjjczjlqarermafxpzs ) ] ) ) { this . swap ( pfjjczjlqarermafxpzs , this . parent ( pfjjczjlqarermafxpzs ) ) ; pfjjczjlqarermafxpzs = this . parent ( pfjjczjlqarermafxpzs ) ; } }
√ fix_prediction_before: { this . Heap [ ( ( this . size ) ++ ) ] = element ; int current = ( this . size ) - 1 ; while ( ( this . Heap [ current ] ) > ( this . Heap [ this . parent ( current ) ] ) ) { this . swap ( current , this . parent ( current ) ) ; current = this . parent ( current ) ; } }
√ fix_prediction_after: { this . Heap [ ( ( this . size ) ++ ) ] = element ; int pfjjczjlqarermafxpzs = ( this . size ) - 1 ; while ( ( this . Heap [ pfjjczjlqarermafxpzs ] ) > ( this . Heap [ this . parent ( pfjjczjlqarermafxpzs ) ] ) ) { this . swap ( pfjjczjlqarermafxpzs , this . parent ( pfjjczjlqarermafxpzs ) ) ; pfjjczjlqarermafxpzs = this . parent ( pfjjczjlqarermafxpzs ) ; } }

line_index: 218
bug_before_refactoring: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; } <s> public double averagePopulation () { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + total ) ) ; average = total / ( population . size () ) ; return average ; } <s> Fixed several bugs and is returning accurate evaluations
bug_after_refactoring: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + kjiejfuhrjyzrcketzsx ) ) ; fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; } <s> public double averagePopulation () { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } java.lang.System.out . println ( ( "Evalutation Total: " + kjiejfuhrjyzrcketzsx ) ) ; fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; } <s> Fixed several bugs and is returning accurate evaluations
fix_before_refactoring: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } average = total / ( population . size () ) ; return average ; }
fix_after_refactoring: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; }
√ fix_prediction_before: { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } average = total / ( population . size () ) ; return average ; }
√ fix_prediction_after: { double fkboswdwgytorvxzntgh ; long kjiejfuhrjyzrcketzsx = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { kjiejfuhrjyzrcketzsx += population . get ( i ) . getEvaluation () ; } fkboswdwgytorvxzntgh = kjiejfuhrjyzrcketzsx / ( population . size () ) ; return fkboswdwgytorvxzntgh ; }

line_index: 222
bug_before_refactoring: { java.lang.System.out . println ( "I'm in it" ) ; getQueryMap . setFirstTimestamp ( timeStamp ) ; java.lang.System.out . println ( ( ( ChannelCode + '\t' ) + timeStamp ) ) ; isFirst = false ; } <s> @ java.lang.Override public void execute ( backtype.storm.tuple.Tuple tuple ) { java.lang.String ChannelCode = tuple . getStringByField ( "channelCode" ) ; long timeStamp = tuple . getLongByField ( "timeStamp" ) ; float value = tuple . getFloatByField ( "value" ) ; if ( channelSet . contains ( ChannelCode ) ) { if ( isFirst ) { java.lang.System.out . println ( "I'm in it" ) ; getQueryMap . setFirstTimestamp ( timeStamp ) ; java.lang.System.out . println ( ( ( ChannelCode + '\t' ) + timeStamp ) ) ; isFirst = false ; } _collector . emit ( new backtype.storm.tuple.Values ( ChannelCode , timeStamp , value ) ) ; } } <s> fix some bugs  pass build  remaining logic errors in SliceManager
bug_after_refactoring: { java.lang.System.out . println ( "I'm in it" ) ; getQueryMap . setFirstTimestamp ( ggpvpsmgwxwulsxsillt ) ; java.lang.System.out . println ( ( ( ChannelCode + '\t' ) + ggpvpsmgwxwulsxsillt ) ) ; isFirst = false ; } <s> @ java.lang.Override public void execute ( backtype.storm.tuple.Tuple tuple ) { java.lang.String ChannelCode = tuple . getStringByField ( "channelCode" ) ; long timeStamp = tuple . getLongByField ( "timeStamp" ) ; float value = tuple . getFloatByField ( "value" ) ; if ( channelSet . contains ( ChannelCode ) ) { if ( isFirst ) { java.lang.System.out . println ( "I'm in it" ) ; getQueryMap . setFirstTimestamp ( ggpvpsmgwxwulsxsillt ) ; java.lang.System.out . println ( ( ( ChannelCode + '\t' ) + ggpvpsmgwxwulsxsillt ) ) ; isFirst = false ; } _collector . emit ( new backtype.storm.tuple.Values ( ChannelCode , timeStamp , value ) ) ; } } <s> fix some bugs  pass build  remaining logic errors in SliceManager
fix_before_refactoring: { getQueryMap . setFirstTimestamp ( timeStamp ) ; isFirst = false ; }
fix_after_refactoring: { getQueryMap . setFirstTimestamp ( ggpvpsmgwxwulsxsillt ) ; isFirst = false ; }
√ fix_prediction_before: { getQueryMap . setFirstTimestamp ( timeStamp ) ; isFirst = false ; }
√ fix_prediction_after: { getQueryMap . setFirstTimestamp ( ggpvpsmgwxwulsxsillt ) ; isFirst = false ; }

line_index: 228
bug_before_refactoring: count = 1 <s> protected int nearMinesCount ( int line , int place ) { int count = 1 ; for ( int [] near : net.patttern.minesweeper.proto.bases.BaseArea.nears ) { count += ( cellMined ( ( line + ( near [ 0 ] ) ) , ( place + ( near [ 1 ] ) ) ) ) ? 1 : 0 ; } return count ; } <s> Bugfix
bug_after_refactoring: fofznveiednztfjbbgwu = 1 <s> protected int nearMinesCount ( int line , int place ) { int fofznveiednztfjbbgwu = 1 ; for ( int [] near : net.patttern.minesweeper.proto.bases.BaseArea.nears ) { count += ( cellMined ( ( line + ( near [ 0 ] ) ) , ( place + ( near [ 1 ] ) ) ) ) ? 1 : 0 ; } return count ; } <s> Bugfix
fix_before_refactoring: count = 0
fix_after_refactoring: fofznveiednztfjbbgwu = 0
√ fix_prediction_before: count = 0
√ fix_prediction_after: fofznveiednztfjbbgwu = 0

line_index: 230
bug_before_refactoring: { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean saved = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; android.util.Log . i ( "DrivingHotspotSelect" , ( "createMatchRoute " + ( this . matchRoute . getObjectId () ) ) ) ; return saved ; } <s> private boolean createMatchRoute () { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean saved = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; android.util.Log . i ( "DrivingHotspotSelect" , ( "createMatchRoute " + ( this . matchRoute . getObjectId () ) ) ) ; return saved ; } <s> Fixed no rider issue
bug_after_refactoring: { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean qxhadvbwsydxyinpcvmq = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; android.util.Log . i ( "DrivingHotspotSelect" , ( "createMatchRoute " + ( this . matchRoute . getObjectId () ) ) ) ; return qxhadvbwsydxyinpcvmq ; } <s> private boolean createMatchRoute () { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean qxhadvbwsydxyinpcvmq = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; android.util.Log . i ( "DrivingHotspotSelect" , ( "createMatchRoute " + ( this . matchRoute . getObjectId () ) ) ) ; return qxhadvbwsydxyinpcvmq ; } <s> Fixed no rider issue
fix_before_refactoring: { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean saved = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; return saved ; }
fix_after_refactoring: { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean qxhadvbwsydxyinpcvmq = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; return qxhadvbwsydxyinpcvmq ; }
√ fix_prediction_before: { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean saved = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; return saved ; }
√ fix_prediction_after: { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean qxhadvbwsydxyinpcvmq = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; return qxhadvbwsydxyinpcvmq ; }

line_index: 244
bug_before_refactoring: if ( random_instance > ( used.length ) ) random_instance = 0 ; <s> private int findRandomInstance () { int random_instance = ( ( int ) ( ( java.lang.Math . random () ) * ( used.length ) ) ) ; while ( used [ random_instance ] ) { random_instance ++ ; if ( random_instance > ( used.length ) ) random_instance = 0 ; } used [ random_instance ] = true ; return random_instance ; } <s> documentation and bug-fix
bug_after_refactoring: if ( gearxqlwaasuvzmyfmfc > ( used.length ) ) gearxqlwaasuvzmyfmfc = 0 ; <s> private int findRandomInstance () { int random_instance = ( ( int ) ( ( java.lang.Math . random () ) * ( used.length ) ) ) ; while ( used [ random_instance ] ) { random_instance ++ ; if ( gearxqlwaasuvzmyfmfc > ( used.length ) ) gearxqlwaasuvzmyfmfc = 0 ; } used [ random_instance ] = true ; return random_instance ; } <s> documentation and bug-fix
fix_before_refactoring: if ( random_instance >= ( used.length ) ) random_instance = 0 ;
fix_after_refactoring: if ( gearxqlwaasuvzmyfmfc >= ( used.length ) ) gearxqlwaasuvzmyfmfc = 0 ;
√ fix_prediction_before: if ( random_instance >= ( used.length ) ) random_instance = 0 ;
√ fix_prediction_after: if ( gearxqlwaasuvzmyfmfc >= ( used.length ) ) gearxqlwaasuvzmyfmfc = 0 ;

line_index: 248
bug_before_refactoring: { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> @ java.lang.Override public void onReceive ( com.home.pete.aquarium.Context context , com.home.pete.aquarium.Intent intent ) { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> Lots of stuff done here  Fixed a bug setting the brightness Fixed a bug which caused the UV lights to be backwards Added a bunch of new messaging to be more explicity Other stuff I've already forgotten about
bug_after_refactoring: { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> @ java.lang.Override public void onReceive ( com.home.pete.aquarium.Context context , com.home.pete.aquarium.Intent intent ) { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> Lots of stuff done here  Fixed a bug setting the brightness Fixed a bug which caused the UV lights to be backwards Added a bunch of new messaging to be more explicity Other stuff I've already forgotten about
fix_before_refactoring: { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; }
fix_after_refactoring: { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; }
√ fix_prediction_before: { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; }
√ fix_prediction_after: { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; }

line_index: 262
bug_before_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } } <s> @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } } <s> fix bugs
bug_after_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; } } <s> @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; } } <s> fix bugs
fix_before_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; }
fix_after_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; }
√ fix_prediction_before: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; }
√ fix_prediction_after: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; }

line_index: 264
bug_before_refactoring: { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> @ java.lang.Override public void run () { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> bug fix - bug with run thread NPE in ProgressBarFragment
bug_after_refactoring: { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> @ java.lang.Override public void run () { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> bug fix - bug with run thread NPE in ProgressBarFragment
fix_before_refactoring: { if ( ( getActivity () ) == null ) return; getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }
fix_after_refactoring: { if ( ( getActivity () ) == null ) return; getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }
√ fix_prediction_before: { if ( ( getActivity () ) == null ) return; getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }
√ fix_prediction_after: { if ( ( getActivity () ) == null ) return; getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }

line_index: 291
bug_before_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
bug_after_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
fix_before_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
fix_after_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; }
√ fix_prediction_before: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
√ fix_prediction_after: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; }

line_index: 294
bug_before_refactoring: syncStates = new boolean [ 0 ] <s> @ java.lang.Override protected java.lang.Integer doInBackground ( java.lang.Void . . . voids ) { publishProgress ( R.string.file_migration_preparing ) ; com.owncloud.android.lib.common.utils.Log_OC . stopLogging () ; boolean [] syncStates = new boolean [ 0 ] ; try { publishProgress ( R.string.file_migration_saving_accounts_configuration ) ; syncStates = saveAccountsSyncStatus () ; publishProgress ( R.string.file_migration_waiting_for_unfinished_sync ) ; stopAccountsSyncing () ; waitForUnfinishedSynchronizations () ; } finally { publishProgress ( R.string.file_migration_restoring_accounts_configuration ) ; restoreAccountsSyncStatus ( syncStates ) ; } com.owncloud.android.lib.common.utils.Log_OC . startLogging ( mStorageTarget ) ; return 0 ; } <s> Merge pull request #605 from nextcloud/bug_597  Don't restore from unknown state for migration. Fixes #597
bug_after_refactoring: oqydxyasvihegowohxai = new boolean [ 0 ] <s> @ java.lang.Override protected java.lang.Integer doInBackground ( java.lang.Void . . . voids ) { publishProgress ( R.string.file_migration_preparing ) ; com.owncloud.android.lib.common.utils.Log_OC . stopLogging () ; boolean [] oqydxyasvihegowohxai = new boolean [ 0 ] ; try { publishProgress ( R.string.file_migration_saving_accounts_configuration ) ; syncStates = saveAccountsSyncStatus () ; publishProgress ( R.string.file_migration_waiting_for_unfinished_sync ) ; stopAccountsSyncing () ; waitForUnfinishedSynchronizations () ; } finally { publishProgress ( R.string.file_migration_restoring_accounts_configuration ) ; restoreAccountsSyncStatus ( syncStates ) ; } com.owncloud.android.lib.common.utils.Log_OC . startLogging ( mStorageTarget ) ; return 0 ; } <s> Merge pull request #605 from nextcloud/bug_597  Don't restore from unknown state for migration. Fixes #597
fix_before_refactoring: syncStates = null
fix_after_refactoring: oqydxyasvihegowohxai = null
√ fix_prediction_before: syncStates = null
√ fix_prediction_after: oqydxyasvihegowohxai = null

line_index: 295
bug_before_refactoring: public static double noteToFreq ( int key ) { int note = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int octave = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ note ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( octave ) ) - 1.0 ) ) ) ; } <s> public static double noteToFreq ( int key ) { int note = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int octave = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ note ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( octave ) ) - 1.0 ) ) ) ; } <s> #330 Removed unused code/added comments  Because the MIDI issue is solved  I removed all code not being used (except for MIDIData() method which I moved over to SoundUtilExamples). Also added some clarifying comments and cleaned everything up. close #330
bug_after_refactoring: public static double noteToFreq ( int key ) { int gizrqwfpllxurmejmqoa = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int liuzzwuontxwufmxobly = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ gizrqwfpllxurmejmqoa ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( liuzzwuontxwufmxobly ) ) - 1.0 ) ) ) ; } <s> public static double noteToFreq ( int key ) { int gizrqwfpllxurmejmqoa = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int liuzzwuontxwufmxobly = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ gizrqwfpllxurmejmqoa ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( liuzzwuontxwufmxobly ) ) - 1.0 ) ) ) ; } <s> #330 Removed unused code/added comments  Because the MIDI issue is solved  I removed all code not being used (except for MIDIData() method which I moved over to SoundUtilExamples). Also added some clarifying comments and cleaned everything up. close #330
fix_before_refactoring: private static double noteToFreq ( int key ) { int note = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int octave = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ note ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( octave ) ) - 1.0 ) ) ) ; }
fix_after_refactoring: private static double noteToFreq ( int key ) { int gizrqwfpllxurmejmqoa = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int liuzzwuontxwufmxobly = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ gizrqwfpllxurmejmqoa ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( liuzzwuontxwufmxobly ) ) - 1.0 ) ) ) ; }
√ fix_prediction_before: private static double noteToFreq ( int key ) { int note = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int octave = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ note ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( octave ) ) - 1.0 ) ) ) ; }
√ fix_prediction_after: private static double noteToFreq ( int key ) { int gizrqwfpllxurmejmqoa = key % ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ; int liuzzwuontxwufmxobly = ( key / ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES_IN_OCTAVE ) ) - 1 ; return ( edu.utexas.cs.nn.util.sound.MIDIUtil.NOTES [ gizrqwfpllxurmejmqoa ] ) * ( java.lang.Math . pow ( 2.0 , ( ( ( double ) ( liuzzwuontxwufmxobly ) ) - 1.0 ) ) ) ; }

line_index: 321
bug_before_refactoring: { int selectedIdentity = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> public static int getSelectedIdentityId () { int selectedIdentity = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> Meine Bewerbungen Bugfixes
bug_after_refactoring: { int ucwmvmmurjekrmywjxlk = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> public static int getSelectedIdentityId () { int ucwmvmmurjekrmywjxlk = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> Meine Bewerbungen Bugfixes
fix_before_refactoring: { if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; }
fix_after_refactoring: { if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; }
√ fix_prediction_before: { if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; }
√ fix_prediction_after: { if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; }

line_index: 326
bug_before_refactoring: if ( bundleIndex == 0 ) return false ; <s> private boolean execute_BUNDLE_CLEAR () { int bundleIndex = getBundleArg () ; if ( bundleIndex == 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; android.os.Bundle b = com.rfo.basic.Run.theBundles . get ( bundleIndex ) ; b . clear () ; return true ; } <s> Infrastructure. Remove bundlePut and @@N. Type-limited List auto-create.  Save var in createNewList. Favor -1 over 0 for error returns. Fix GPS.satellites arg bug. Reuse list: Bundle.Keyset  Timezone.List.
bug_after_refactoring: if ( fvewzbqmchhpinvnbgvh == 0 ) return false ; <s> private boolean execute_BUNDLE_CLEAR () { int bundleIndex = getBundleArg () ; if ( fvewzbqmchhpinvnbgvh == 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; android.os.Bundle b = com.rfo.basic.Run.theBundles . get ( bundleIndex ) ; b . clear () ; return true ; } <s> Infrastructure. Remove bundlePut and @@N. Type-limited List auto-create.  Save var in createNewList. Favor -1 over 0 for error returns. Fix GPS.satellites arg bug. Reuse list: Bundle.Keyset  Timezone.List.
fix_before_refactoring: if ( bundleIndex < 0 ) return false ;
fix_after_refactoring: if ( fvewzbqmchhpinvnbgvh < 0 ) return false ;
√ fix_prediction_before: if ( bundleIndex < 0 ) return false ;
√ fix_prediction_after: if ( fvewzbqmchhpinvnbgvh < 0 ) return false ;

line_index: 328
bug_before_refactoring: if ( value > ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; } <s> public long getTimeBucketAndAdjustBoundaries ( long value ) { if ( value < ( start ) ) { return - 1 ; } long diffFromStart = value - ( fixedStart ) ; long key = diffFromStart / ( bucketSpanMillis ) ; if ( value > ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; } return key ; } <s> APEXMALHAR-2299 TimeBasedDedupOperator. Fixing edge case bug in time bucket assignment
bug_after_refactoring: if ( value > ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; } <s> public long getTimeBucketAndAdjustBoundaries ( long value ) { if ( value < ( start ) ) { return - 1 ; } long diffFromStart = value - ( fixedStart ) ; long key = diffFromStart / ( bucketSpanMillis ) ; if ( value > ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; } return key ; } <s> APEXMALHAR-2299 TimeBasedDedupOperator. Fixing edge case bug in time bucket assignment
fix_before_refactoring: if ( value >= ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; }
fix_after_refactoring: if ( value >= ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; }
√ fix_prediction_before: if ( value >= ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; }
√ fix_prediction_after: if ( value >= ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; }

line_index: 329
bug_before_refactoring: { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; } <s> private static cs155.core.Color3D calculateDiffuse ( cs155.core.Point3D n , cs155.core.Color3D matColor , cs155.core.Color3D lightColor , cs155.core.Point3D lightVec ) { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; } <s> Fixed Kahlil's debug bug
bug_after_refactoring: { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; } <s> private static cs155.core.Color3D calculateDiffuse ( cs155.core.Point3D n , cs155.core.Color3D matColor , cs155.core.Color3D lightColor , cs155.core.Point3D lightVec ) { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; } <s> Fixed Kahlil's debug bug
fix_before_refactoring: { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; }
fix_after_refactoring: { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; }
√ fix_prediction_before: { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; }
√ fix_prediction_after: { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; }

line_index: 330
bug_before_refactoring: if ( ( score1 ) < ( score2 ) ) s = score2 ; else s = score1 ; <s> public int overallScore () { int s ; if ( ( score1 ) < ( score2 ) ) s = score2 ; else s = score1 ; if ( s > ( score3 ) ) s = score3 ; s = ( ( ( score1 ) + ( score2 ) ) + ( score3 ) ) - s ; return s ; } <s> Completed test suite  fixed bugs  documented problems
bug_after_refactoring: if ( ( score1 ) < ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ; <s> public int overallScore () { int s ; if ( ( score1 ) < ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ; if ( s > ( score3 ) ) s = score3 ; s = ( ( ( score1 ) + ( score2 ) ) + ( score3 ) ) - s ; return s ; } <s> Completed test suite  fixed bugs  documented problems
fix_before_refactoring: if ( ( score1 ) > ( score2 ) ) s = score2 ; else s = score1 ;
fix_after_refactoring: if ( ( score1 ) > ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ;
√ fix_prediction_before: if ( ( score1 ) > ( score2 ) ) s = score2 ; else s = score1 ;
√ fix_prediction_after: if ( ( score1 ) > ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ;

line_index: 331
bug_before_refactoring: if ( ( interval >= 1 ) || ( interval <= 2 ) ) { steps += 1 ; } <s> private double getStepMovement ( genetics.MusicPhenotype p ) { double steps = 0 ; double intervalCount = 0 ; for ( java.util.ArrayList < java.lang.Integer > measure : p.melodyIntervals ) { for ( int interval : measure ) { interval = java.lang.Math . abs ( interval ) ; intervalCount ++ ; if ( ( interval >= 1 ) || ( interval <= 2 ) ) { steps += 1 ; } } } if ( intervalCount == 0 ) { return 0 ; } return steps / intervalCount ; } <s> Towsey objective bugfix.
bug_after_refactoring: if ( ( interval >= 1 ) || ( interval <= 2 ) ) { plcsyoeagfxkrofxcwvq += 1 ; } <s> private double getStepMovement ( genetics.MusicPhenotype p ) { double steps = 0 ; double intervalCount = 0 ; for ( java.util.ArrayList < java.lang.Integer > measure : p.melodyIntervals ) { for ( int interval : measure ) { interval = java.lang.Math . abs ( interval ) ; intervalCount ++ ; if ( ( interval >= 1 ) || ( interval <= 2 ) ) { plcsyoeagfxkrofxcwvq += 1 ; } } } if ( intervalCount == 0 ) { return 0 ; } return steps / intervalCount ; } <s> Towsey objective bugfix.
fix_before_refactoring: if ( ( interval >= 1 ) && ( interval <= 2 ) ) { steps += 1 ; }
fix_after_refactoring: if ( ( interval >= 1 ) && ( interval <= 2 ) ) { plcsyoeagfxkrofxcwvq += 1 ; }
√ fix_prediction_before: if ( ( interval >= 1 ) && ( interval <= 2 ) ) { steps += 1 ; }
√ fix_prediction_after: if ( ( interval >= 1 ) && ( interval <= 2 ) ) { plcsyoeagfxkrofxcwvq += 1 ; }

line_index: 343
bug_before_refactoring: { int largestImageDimension = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int bestImageResolution = java.lang.Math . min ( largestImageDimension , resolution ) ; android.util.Log . d ( gov.nasa.jpl.hi.marsimages.models.ImageQuad.TAG , ( "Texture res: " + ( gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( bestImageResolution ) ) ) ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( bestImageResolution ) ; } <s> private int computeBestTextureResolution ( int resolution ) { int largestImageDimension = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int bestImageResolution = java.lang.Math . min ( largestImageDimension , resolution ) ; android.util.Log . d ( gov.nasa.jpl.hi.marsimages.models.ImageQuad.TAG , ( "Texture res: " + ( gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( bestImageResolution ) ) ) ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( bestImageResolution ) ; } <s> Fixed bug with loading locations earlier than the latest site in the mosaic view
bug_after_refactoring: { int ykhjbbqyosxepobtiqpd = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int xweuymeaebjwcdsfmwsk = java.lang.Math . min ( ykhjbbqyosxepobtiqpd , resolution ) ; android.util.Log . d ( gov.nasa.jpl.hi.marsimages.models.ImageQuad.TAG , ( "Texture res: " + ( gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( xweuymeaebjwcdsfmwsk ) ) ) ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( xweuymeaebjwcdsfmwsk ) ; } <s> private int computeBestTextureResolution ( int resolution ) { int ykhjbbqyosxepobtiqpd = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int xweuymeaebjwcdsfmwsk = java.lang.Math . min ( ykhjbbqyosxepobtiqpd , resolution ) ; android.util.Log . d ( gov.nasa.jpl.hi.marsimages.models.ImageQuad.TAG , ( "Texture res: " + ( gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( xweuymeaebjwcdsfmwsk ) ) ) ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( xweuymeaebjwcdsfmwsk ) ; } <s> Fixed bug with loading locations earlier than the latest site in the mosaic view
fix_before_refactoring: { int largestImageDimension = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int bestImageResolution = java.lang.Math . min ( largestImageDimension , resolution ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( bestImageResolution ) ; }
fix_after_refactoring: { int ykhjbbqyosxepobtiqpd = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int xweuymeaebjwcdsfmwsk = java.lang.Math . min ( ykhjbbqyosxepobtiqpd , resolution ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( xweuymeaebjwcdsfmwsk ) ; }
√ fix_prediction_before: { int largestImageDimension = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int bestImageResolution = java.lang.Math . min ( largestImageDimension , resolution ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( bestImageResolution ) ; }
√ fix_prediction_after: { int ykhjbbqyosxepobtiqpd = ( ( int ) ( java.lang.Math . max ( model . xdim () , model . ydim () ) ) ) ; int xweuymeaebjwcdsfmwsk = java.lang.Math . min ( ykhjbbqyosxepobtiqpd , resolution ) ; return gov.nasa.jpl.hi.marsimages.models.M . floorPowerOfTwo ( xweuymeaebjwcdsfmwsk ) ; }

line_index: 352
bug_before_refactoring: while ( ( xDim * ( yDim - 1 ) ) > elements ) { yDim -- ; } <s> private int [] getDim ( int elements ) { int xDim = ( ( int ) ( java.lang.Math . ceil ( java.lang.Math . sqrt ( elements ) ) ) ) ; int yDim = xDim ; while ( ( xDim * ( yDim - 1 ) ) > elements ) { yDim -- ; } return new int [] { xDim , yDim } ; } <s> fixed grid allocation problem
bug_after_refactoring: while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) > elements ) { srjwqrmxuqzwrhsxlplo -- ; } <s> private int [] getDim ( int elements ) { int xDim = ( ( int ) ( java.lang.Math . ceil ( java.lang.Math . sqrt ( elements ) ) ) ) ; int yDim = xDim ; while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) > elements ) { srjwqrmxuqzwrhsxlplo -- ; } return new int [] { xDim , yDim } ; } <s> fixed grid allocation problem
fix_before_refactoring: while ( ( xDim * ( yDim - 1 ) ) >= elements ) { yDim -- ; }
fix_after_refactoring: while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) >= elements ) { srjwqrmxuqzwrhsxlplo -- ; }
√ fix_prediction_before: while ( ( xDim * ( yDim - 1 ) ) >= elements ) { yDim -- ; }
√ fix_prediction_after: while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) >= elements ) { srjwqrmxuqzwrhsxlplo -- ; }

line_index: 362
bug_before_refactoring: shouldReplicateToPassives = false <s> public static org.terracotta.passthrough.PassthroughMessage createUnexpectedReleaseMessage ( final java.lang.String entityClassName , final java.lang.String entityName , final long clientInstanceID ) { boolean shouldReplicateToPassives = false ; return new org.terracotta.passthrough.PassthroughMessage ( org.terracotta.passthrough.PassthroughMessage.Type.UNEXPECTED_RELEASE , shouldReplicateToPassives ) { @ java.lang.Override protected void populateStream ( java.io.DataOutputStream output ) throws java.io.IOException { output . writeUTF ( entityClassName ) ; output . writeUTF ( entityName ) ; output . writeLong ( clientInstanceID ) ; } } ; } <s> Merge pull request #127 from ramsai1729/issue-126  Fix #126: Fix oldest transaction id calculations
bug_after_refactoring: pfbepbwnnzftysqjmawo = false <s> public static org.terracotta.passthrough.PassthroughMessage createUnexpectedReleaseMessage ( final java.lang.String entityClassName , final java.lang.String entityName , final long clientInstanceID ) { boolean pfbepbwnnzftysqjmawo = false ; return new org.terracotta.passthrough.PassthroughMessage ( org.terracotta.passthrough.PassthroughMessage.Type.UNEXPECTED_RELEASE , shouldReplicateToPassives ) { @ java.lang.Override protected void populateStream ( java.io.DataOutputStream output ) throws java.io.IOException { output . writeUTF ( entityClassName ) ; output . writeUTF ( entityName ) ; output . writeLong ( clientInstanceID ) ; } } ; } <s> Merge pull request #127 from ramsai1729/issue-126  Fix #126: Fix oldest transaction id calculations
fix_before_refactoring: shouldReplicateToPassives = true
fix_after_refactoring: pfbepbwnnzftysqjmawo = true
√ fix_prediction_before: shouldReplicateToPassives = true
√ fix_prediction_after: pfbepbwnnzftysqjmawo = true

line_index: 378
bug_before_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } <s> public static void updateQueue () { while ( ( theweekend.cosmetics.ipod.Radio.queuedSongs . size () ) < 5 ) { int size = Noteblock.iPodSongs . size () ; if ( size > 0 ) { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } } theweekend.cosmetics.ipod.Radio.songPosition = 0 ; theweekend.cosmetics.ipod.Radio . playRadioSong () ; } <s> fixed errors
bug_after_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } <s> public static void updateQueue () { while ( ( theweekend.cosmetics.ipod.Radio.queuedSongs . size () ) < 5 ) { int size = Noteblock.iPodSongs . size () ; if ( size > 0 ) { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) ; { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } } theweekend.cosmetics.ipod.Radio.songPosition = 0 ; theweekend.cosmetics.ipod.Radio . playRadioSong () ; } <s> fixed errors
fix_before_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }
fix_after_refactoring: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }
√ fix_prediction_before: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }
√ fix_prediction_after: { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( nivlsoyndoavikjzinfn ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } }

line_index: 379
bug_before_refactoring: { grid [ n ] [ j ] . setNumber ( i ) ; } <s> public void checkNeededInColumn () { int n ; for ( int j = 0 ; j < 9 ; j ++ ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( de.halemba.helpers.SolveHelper . checkMissingInColumn ( i , j , grid ) ) { n = de.halemba.helpers.SolveHelper . checkSinglePossiblityColumn ( i , j , grid ) ; if ( n >= 0 ) { grid [ n ] [ j ] . setNumber ( i ) ; } } } } } <s> Bugfix
bug_after_refactoring: { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; } <s> public void checkNeededInColumn () { int n ; for ( int j = 0 ; j < 9 ; j ++ ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( de.halemba.helpers.SolveHelper . checkMissingInColumn ( i , j , grid ) ) { n = de.halemba.helpers.SolveHelper . checkSinglePossiblityColumn ( i , j , grid ) ; if ( n >= 0 ) { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; } } } } } <s> Bugfix
fix_before_refactoring: { grid [ n ] [ j ] . setNumber ( i ) ; break; }
fix_after_refactoring: { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; break; }
√ fix_prediction_before: { grid [ n ] [ j ] . setNumber ( i ) ; break; }
√ fix_prediction_after: { grid [ wilmqquceclzdqbhcfcg ] [ j ] . setNumber ( i ) ; break; }

line_index: 389
bug_before_refactoring: { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int today = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; java.lang.System.out . println ( daysBitString ) ; if ( frequencyDays . substring ( today , ( today + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } } <s> public void setFrequencyDays ( java.lang.String daysBitString ) { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int today = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; java.lang.System.out . println ( daysBitString ) ; if ( frequencyDays . substring ( today , ( today + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } } <s> Fix reminder times bug
bug_after_refactoring: { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int ydcofxtbgbmbaqovsmdw = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; java.lang.System.out . println ( daysBitString ) ; if ( frequencyDays . substring ( ydcofxtbgbmbaqovsmdw , ( ydcofxtbgbmbaqovsmdw + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } } <s> public void setFrequencyDays ( java.lang.String daysBitString ) { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int ydcofxtbgbmbaqovsmdw = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; java.lang.System.out . println ( daysBitString ) ; if ( frequencyDays . substring ( ydcofxtbgbmbaqovsmdw , ( ydcofxtbgbmbaqovsmdw + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } } <s> Fix reminder times bug
fix_before_refactoring: { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int today = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; if ( frequencyDays . substring ( today , ( today + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } }
fix_after_refactoring: { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int ydcofxtbgbmbaqovsmdw = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; if ( frequencyDays . substring ( ydcofxtbgbmbaqovsmdw , ( ydcofxtbgbmbaqovsmdw + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } }
√ fix_prediction_before: { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int today = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; if ( frequencyDays . substring ( today , ( today + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } }
√ fix_prediction_after: { frequencyDays = daysBitString ; java.util.Calendar calendar = java.util.Calendar . getInstance () ; int ydcofxtbgbmbaqovsmdw = ( calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; if ( frequencyDays . substring ( ydcofxtbgbmbaqovsmdw , ( ydcofxtbgbmbaqovsmdw + 1 ) ) . equals ( "1" ) ) { isToday = true ; } else { isToday = false ; } }

line_index: 391
bug_before_refactoring: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + state ) ) ; return state ; } <s> public int logoutUser ( java.lang.String username ) { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + state ) ) ; return state ; } <s> bugFix
bug_after_refactoring: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + rrgxhocehqdcfcyndheo ) ) ; return rrgxhocehqdcfcyndheo ; } <s> public int logoutUser ( java.lang.String username ) { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + rrgxhocehqdcfcyndheo ) ) ; return rrgxhocehqdcfcyndheo ; } <s> bugFix
fix_before_refactoring: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } return state ; }
fix_after_refactoring: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } return rrgxhocehqdcfcyndheo ; }
√ fix_prediction_before: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } return state ; }
√ fix_prediction_after: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } return rrgxhocehqdcfcyndheo ; }

line_index: 406
bug_before_refactoring: { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> private void ToggleCircleColor ( com.google.android.gms.maps.model.Circle circle ) { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> Fix some bugs  on present round-1-day
bug_after_refactoring: { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> private void ToggleCircleColor ( com.google.android.gms.maps.model.Circle circle ) { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; android.widget.Toast . makeText ( this , ( "Circle: " + ( circle . getTag () . toString () ) ) , Toast.LENGTH_SHORT ) . show () ; } <s> Fix some bugs  on present round-1-day
fix_before_refactoring: { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }
fix_after_refactoring: { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }
√ fix_prediction_before: { int strokeColor = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( strokeColor ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }
√ fix_prediction_after: { int kkavbzbyyrvuryqozteg = ( circle . getStrokeColor () ) ^ 52224 ; circle . setStrokeColor ( kkavbzbyyrvuryqozteg ) ; circle . setStrokeWidth ( ( ( circle . getStrokeWidth () ) == 3 ? 6 : 3 ) ) ; }

line_index: 409
bug_before_refactoring: { super . onResume () ; int orderId = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; java.lang.System.out . println ( ( "Intent with order ID " + orderId ) ) ; if ( orderId != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( orderId ) ) ) ; } <s> @ java.lang.Override protected void onResume () { super . onResume () ; int orderId = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; java.lang.System.out . println ( ( "Intent with order ID " + orderId ) ) ; if ( orderId != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( orderId ) ) ) ; } <s> Fixed sidebar rotation bug
bug_after_refactoring: { super . onResume () ; int mblkstxlgakrqeurrpkc = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; java.lang.System.out . println ( ( "Intent with order ID " + mblkstxlgakrqeurrpkc ) ) ; if ( mblkstxlgakrqeurrpkc != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( mblkstxlgakrqeurrpkc ) ) ) ; } <s> @ java.lang.Override protected void onResume () { super . onResume () ; int mblkstxlgakrqeurrpkc = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; java.lang.System.out . println ( ( "Intent with order ID " + mblkstxlgakrqeurrpkc ) ) ; if ( mblkstxlgakrqeurrpkc != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( mblkstxlgakrqeurrpkc ) ) ) ; } <s> Fixed sidebar rotation bug
fix_before_refactoring: { super . onResume () ; int orderId = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; if ( orderId != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( orderId ) ) ) ; }
fix_after_refactoring: { super . onResume () ; int mblkstxlgakrqeurrpkc = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; if ( mblkstxlgakrqeurrpkc != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( mblkstxlgakrqeurrpkc ) ) ) ; }
√ fix_prediction_before: { super . onResume () ; int orderId = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; if ( orderId != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( orderId ) ) ) ; }
√ fix_prediction_after: { super . onResume () ; int mblkstxlgakrqeurrpkc = getIntent () . getIntExtra ( OrderStatusNotification.ORDER_ID , ( - 1 ) ) ; if ( mblkstxlgakrqeurrpkc != ( - 1 ) ) navTo ( new activity.OrderDetailFragment () . setOrder ( new model.Order ( mblkstxlgakrqeurrpkc ) ) ) ; }

line_index: 417
bug_before_refactoring: { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / higherValue ) ) ) ; java.lang.System.out . println ( ( "Ordenado: " + ( q . getThreeYearTotal () ) ) ) ; } <s> private static void calculateDiscount () { java.util.Collections . sort ( Constants.quotes ) ; double higherValue = Constants.quotes . get ( 0 ) . getThreeYearTotal () ; if ( higherValue > 0 ) { for ( com.amazon.proposalcalculator.bean.Quote q : com.amazon.proposalcalculator.utils.Constants.quotes ) { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / higherValue ) ) ) ; java.lang.System.out . println ( ( "Ordenado: " + ( q . getThreeYearTotal () ) ) ) ; } } } <s> Bug fix
bug_after_refactoring: { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / ubulzylmnwmntivrjhha ) ) ) ; java.lang.System.out . println ( ( "Ordenado: " + ( q . getThreeYearTotal () ) ) ) ; } <s> private static void calculateDiscount () { java.util.Collections . sort ( Constants.quotes ) ; double higherValue = Constants.quotes . get ( 0 ) . getThreeYearTotal () ; if ( higherValue > 0 ) { for ( com.amazon.proposalcalculator.bean.Quote q : com.amazon.proposalcalculator.utils.Constants.quotes ) { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / ubulzylmnwmntivrjhha ) ) ) ; java.lang.System.out . println ( ( "Ordenado: " + ( q . getThreeYearTotal () ) ) ) ; } } } <s> Bug fix
fix_before_refactoring: { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / higherValue ) ) ) ; }
fix_after_refactoring: { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / ubulzylmnwmntivrjhha ) ) ) ; }
√ fix_prediction_before: { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / higherValue ) ) ) ; }
√ fix_prediction_after: { q . setDiscount ( ( 1 - ( ( q . getThreeYearTotal () ) / ubulzylmnwmntivrjhha ) ) ) ; }

line_index: 434
bug_before_refactoring: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "usesAttributes: " + tagName ) + ":" ) + usesAttributes ) ) ; return usesAttributes ; } <s> @ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "usesAttributes: " + tagName ) + ":" ) + usesAttributes ) ) ; return usesAttributes ; } <s> https://github.com/cflint/CFLint/issues/261  fixed the semi checking. and cleanup some sysouts
bug_after_refactoring: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsdnmrqinf: " + tagName ) + ":" ) + qbbujtkijiqsdnmrqinf ) ) ; return qbbujtkijiqsdnmrqinf ; } <s> @ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsdnmrqinf: " + tagName ) + ":" ) + qbbujtkijiqsdnmrqinf ) ) ; return qbbujtkijiqsdnmrqinf ; } <s> https://github.com/cflint/CFLint/issues/261  fixed the semi checking. and cleanup some sysouts
fix_before_refactoring: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; }
fix_after_refactoring: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return qbbujtkijiqsdnmrqinf ; }
√ fix_prediction_before: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; }
√ fix_prediction_after: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return qbbujtkijiqsdnmrqinf ; }

line_index: 436
bug_before_refactoring: { boolean canJoin = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> private void moveClient ( org.zapto.mike.mrstreamserver.Channel channel , org.zapto.mike.mrstreamserver.ClientHandler client ) { boolean canJoin = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> Fixed issue with joining channels
bug_after_refactoring: { boolean gvbbstxeoqnhrnmoqpkh = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> private void moveClient ( org.zapto.mike.mrstreamserver.Channel channel , org.zapto.mike.mrstreamserver.ClientHandler client ) { boolean gvbbstxeoqnhrnmoqpkh = true ; java.lang.System.out . println ( ( channel != ( client . getChannel () ) ) ) ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } <s> Fixed issue with joining channels
fix_before_refactoring: { boolean canJoin = true ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }
fix_after_refactoring: { boolean gvbbstxeoqnhrnmoqpkh = true ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }
√ fix_prediction_before: { boolean canJoin = true ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }
√ fix_prediction_after: { boolean gvbbstxeoqnhrnmoqpkh = true ; if ( gvbbstxeoqnhrnmoqpkh && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} }

line_index: 448
bug_before_refactoring: { int id = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> Bug fixing in ads and Days selsection in filter  Bug fixing in ads and Days selsection in filter
bug_after_refactoring: { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( ( mSessionManager . getIsPurchased () ) == ( com.aftersapp.utils.AppConstants.ITEM_NOT_PURCHASED ) ) com.aftersapp.AftersAppApplication . getInstance () . setAddClickCount () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; } <s> Bug fixing in ads and Days selsection in filter  Bug fixing in ads and Days selsection in filter
fix_before_refactoring: { int id = item . getItemId () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }
fix_after_refactoring: { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }
√ fix_prediction_before: { int id = item . getItemId () ; if ( id == ( R.id.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.id.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }
√ fix_prediction_after: { int gxpwevblogxbdkjdmpxo = item . getItemId () ; if ( gxpwevblogxbdkjdmpxo == ( R.gxpwevblogxbdkjdmpxo.action_filter ) ) { com.aftersapp.fragments.FilterFragment filterFragment = new com.aftersapp.fragments.FilterFragment () ; getFragmentManager () . beginTransaction () . replace ( R.gxpwevblogxbdkjdmpxo.fragment_frame_lay , filterFragment , "FilterFragment" ) . commit () ; return true ; } return super . onOptionsItemSelected ( item ) ; }

line_index: 454
bug_before_refactoring: lastOut += given <s> @ java.lang.Override public int requestEnergy ( int energy , boolean simulate ) { int given = this . storage . extractEnergy ( energy , simulate ) ; if ( ! simulate ) { this . markDirty () ; if ( ! ( worldObj.isRemote ) ) { lastOut += given ; } } return given ; } <s> actually fixes the debug text on the entangler
bug_after_refactoring: lastOut += okdphjtilixrcgtukjyg <s> @ java.lang.Override public int requestEnergy ( int energy , boolean simulate ) { int given = this . storage . extractEnergy ( energy , simulate ) ; if ( ! simulate ) { this . markDirty () ; if ( ! ( worldObj.isRemote ) ) { lastOut += okdphjtilixrcgtukjyg ; } } return given ; } <s> actually fixes the debug text on the entangler
fix_before_refactoring: this . lastOut += given
fix_after_refactoring: this . lastOut += okdphjtilixrcgtukjyg
√ fix_prediction_before: this . lastOut += given
√ fix_prediction_after: this . lastOut += okdphjtilixrcgtukjyg

line_index: 471
bug_before_refactoring: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; return 0 > ( ( origin ) / ( master ) ) ; } <s> @ java.lang.Override public int getTotalProtection () { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; return 0 > ( ( origin ) / ( master ) ) ; } <s> merge problems fix
bug_after_refactoring: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; return 0 > ( ( origin ) / ( master ) ) ; } <s> @ java.lang.Override public int getTotalProtection () { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; return 0 > ( ( origin ) / ( master ) ) ; } <s> merge problems fix
fix_before_refactoring: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; }
fix_after_refactoring: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; }
√ fix_prediction_before: { int totalProtection = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; totalProtection += armor . getActualProtection () ; } return totalProtection ; }
√ fix_prediction_after: { int rpvmjmnmmrnrkedavdgj = getProtection () ; if ( ( ( getAnchorPoints () . get ( "body" ) ) != null ) && ( ( getAnchorPoints () . get ( "body" ) . getClass () ) == ( game.Armor . class ) ) ) { game.Armor armor = ( ( game.Armor ) ( getAnchorPoints () . get ( "body" ) ) ) ; rpvmjmnmmrnrkedavdgj += armor . getActualProtection () ; } return rpvmjmnmmrnrkedavdgj ; }

line_index: 477
bug_before_refactoring: { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; return corners ; } <s> private static hu.oe.nik.szfmv17t.environment.utils.Vector2d [] getCorners ( hu.oe.nik.szfmv17t.environment.utils.Position collidableObjectPosition ) { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; return corners ; } <s> CollisionDetector bug is fixed
bug_after_refactoring: { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; return corners ; } <s> private static hu.oe.nik.szfmv17t.environment.utils.Vector2d [] getCorners ( hu.oe.nik.szfmv17t.environment.utils.Position collidableObjectPosition ) { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; return corners ; } <s> CollisionDetector bug is fixed
fix_before_refactoring: { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; }
fix_after_refactoring: { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; }
√ fix_prediction_before: { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; }
√ fix_prediction_after: { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; }

line_index: 480
bug_before_refactoring: private int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int leftDepth = 0 ; int rightDepth = 0 ; if ( ( node.left ) != null ) { leftDepth = depth ( node.left ) ; } if ( ( node.right ) != null ) { rightDepth = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( leftDepth , rightDepth ) ) ; } <s> private int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int leftDepth = 0 ; int rightDepth = 0 ; if ( ( node.left ) != null ) { leftDepth = depth ( node.left ) ; } if ( ( node.right ) != null ) { rightDepth = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( leftDepth , rightDepth ) ) ; } <s> fixed bugs  added more tests
bug_after_refactoring: private int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int dkvugdhdpnwmgmetkgls = 0 ; int kcyvobuqehnzjvcdlzlv = 0 ; if ( ( node.left ) != null ) { dkvugdhdpnwmgmetkgls = depth ( node.left ) ; } if ( ( node.right ) != null ) { kcyvobuqehnzjvcdlzlv = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( dkvugdhdpnwmgmetkgls , kcyvobuqehnzjvcdlzlv ) ) ; } <s> private int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int dkvugdhdpnwmgmetkgls = 0 ; int kcyvobuqehnzjvcdlzlv = 0 ; if ( ( node.left ) != null ) { dkvugdhdpnwmgmetkgls = depth ( node.left ) ; } if ( ( node.right ) != null ) { kcyvobuqehnzjvcdlzlv = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( dkvugdhdpnwmgmetkgls , kcyvobuqehnzjvcdlzlv ) ) ; } <s> fixed bugs  added more tests
fix_before_refactoring: protected int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int leftDepth = 0 ; int rightDepth = 0 ; if ( ( node.left ) != null ) { leftDepth = depth ( node.left ) ; } if ( ( node.right ) != null ) { rightDepth = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( leftDepth , rightDepth ) ) ; }
fix_after_refactoring: protected int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int dkvugdhdpnwmgmetkgls = 0 ; int kcyvobuqehnzjvcdlzlv = 0 ; if ( ( node.left ) != null ) { dkvugdhdpnwmgmetkgls = depth ( node.left ) ; } if ( ( node.right ) != null ) { kcyvobuqehnzjvcdlzlv = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( dkvugdhdpnwmgmetkgls , kcyvobuqehnzjvcdlzlv ) ) ; }
√ fix_prediction_before: protected int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int leftDepth = 0 ; int rightDepth = 0 ; if ( ( node.left ) != null ) { leftDepth = depth ( node.left ) ; } if ( ( node.right ) != null ) { rightDepth = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( leftDepth , rightDepth ) ) ; }
√ fix_prediction_after: protected int depth ( org.pg4200.datastructure.map.tree.BinaryTreeMap < K , V > . TreeNode node ) { int dkvugdhdpnwmgmetkgls = 0 ; int kcyvobuqehnzjvcdlzlv = 0 ; if ( ( node.left ) != null ) { dkvugdhdpnwmgmetkgls = depth ( node.left ) ; } if ( ( node.right ) != null ) { kcyvobuqehnzjvcdlzlv = depth ( node.right ) ; } return 1 + ( java.lang.Math . max ( dkvugdhdpnwmgmetkgls , kcyvobuqehnzjvcdlzlv ) ) ; }

line_index: 484
bug_before_refactoring: { android.util.Log . v ( "DLAsync.urlInHashSet" , ( ( ( " just found " + ( url . toString () ) ) + " in " ) + ( set . toString () ) ) ) ; returnBoolean = true ; } <s> private boolean urlInHashSet ( java.net.URL url , java.util.HashSet < java.lang.String > set ) { boolean returnBoolean = false ; for ( java.lang.String setItem : set ) { if ( com.wordpress.httpspandareaktor.scrapetest.NetworkUtils . urlHostPathMatch ( com.wordpress.httpspandareaktor.scrapetest.NetworkUtils . makeURL ( setItem ) , url ) ) { android.util.Log . v ( "DLAsync.urlInHashSet" , ( ( ( " just found " + ( url . toString () ) ) + " in " ) + ( set . toString () ) ) ) ; returnBoolean = true ; } } return returnBoolean ; } <s> -interface might've not been necessary given additional multithreading to solve access to MainActivity views issue from WebView's thread  but leaving it for now -seems to be crawling  tests conclude that UI is being updated with emails and html response -improved regex filter to leave out filenames  and other garbage that was being collected
bug_after_refactoring: { android.util.Log . v ( "DLAsync.urlInHashSet" , ( ( ( " just found " + ( url . toString () ) ) + " in " ) + ( set . toString () ) ) ) ; axxwnjjndweizjsuwfqk = true ; } <s> private boolean urlInHashSet ( java.net.URL url , java.util.HashSet < java.lang.String > set ) { boolean returnBoolean = false ; for ( java.lang.String setItem : set ) { if ( com.wordpress.httpspandareaktor.scrapetest.NetworkUtils . urlHostPathMatch ( com.wordpress.httpspandareaktor.scrapetest.NetworkUtils . makeURL ( setItem ) , url ) ) { android.util.Log . v ( "DLAsync.urlInHashSet" , ( ( ( " just found " + ( url . toString () ) ) + " in " ) + ( set . toString () ) ) ) ; axxwnjjndweizjsuwfqk = true ; } } return returnBoolean ; } <s> -interface might've not been necessary given additional multithreading to solve access to MainActivity views issue from WebView's thread  but leaving it for now -seems to be crawling  tests conclude that UI is being updated with emails and html response -improved regex filter to leave out filenames  and other garbage that was being collected
fix_before_refactoring: { returnBoolean = true ; }
fix_after_refactoring: { axxwnjjndweizjsuwfqk = true ; }
√ fix_prediction_before: { returnBoolean = true ; }
√ fix_prediction_after: { axxwnjjndweizjsuwfqk = true ; }

line_index: 486
bug_before_refactoring: private int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> private int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } <s> Fixed bug where player is prompted to enter initials more than once.
bug_after_refactoring: private int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; } <s> private int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; } <s> Fixed bug where player is prompted to enter initials more than once.
fix_before_refactoring: public int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
fix_after_refactoring: public int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; }
√ fix_prediction_before: public int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; }
√ fix_prediction_after: public int getPlayerRank () { int bfplrssybqgqwmutuobl = - 1 ; int vkddoewrjdgbfuggezmf = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) bfplrssybqgqwmutuobl = ( Game.HI_SCORES . size () ) - ( ++ vkddoewrjdgbfuggezmf ) ; } return bfplrssybqgqwmutuobl ; }

line_index: 505
bug_before_refactoring: ( ( menu . get ( tempIndex ) . price ) >= ( this . price ) ) && ( ( this . index ) < ( this . menuSize ) ) <s> public void next () { this . index += 1 ; int tempIndex = this . index ; while ( ( ( menu . get ( tempIndex ) . price ) >= ( this . price ) ) && ( ( this . index ) < ( this . menuSize ) ) ) { this . index += 1 ; tempIndex += 1 ; } } <s> Fixed bug that was ignoring the last item in the list
bug_after_refactoring: ( ( menu . get ( wawhzqmqgfbxhuvlxhju ) . price ) >= ( this . price ) ) && ( ( this . index ) < ( this . menuSize ) ) <s> public void next () { this . index += 1 ; int tempIndex = this . index ; while ( ( ( menu . get ( wawhzqmqgfbxhuvlxhju ) . price ) >= ( this . price ) ) && ( ( this . index ) < ( this . menuSize ) ) ) { this . index += 1 ; tempIndex += 1 ; } } <s> Fixed bug that was ignoring the last item in the list
fix_before_refactoring: ( ( this . index ) < ( this . menuSize ) ) && ( ( menu . get ( tempIndex ) . price ) >= ( this . price ) )
fix_after_refactoring: ( ( this . index ) < ( this . menuSize ) ) && ( ( menu . get ( wawhzqmqgfbxhuvlxhju ) . price ) >= ( this . price ) )
√ fix_prediction_before: ( ( this . index ) < ( this . menuSize ) ) && ( ( menu . get ( tempIndex ) . price ) >= ( this . price ) )
√ fix_prediction_after: ( ( this . index ) < ( this . menuSize ) ) && ( ( menu . get ( wawhzqmqgfbxhuvlxhju ) . price ) >= ( this . price ) )

line_index: 524
bug_before_refactoring: { java.lang.String item = "%d %d 0" ; long curTime = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , curTime , e . getKeyCode () ) ) ; java.lang.System.out . println ( ( ( e . getKeyChar () ) + " 0" ) ) ; } <s> @ java.lang.Override public void keyPressed ( java.awt.event.KeyEvent e ) { if ( ( ( remain . length () ) == 0 ) && ( ( e . getKeyCode () ) != ( java.awt.event.KeyEvent.VK_ENTER ) ) ) { e . consume () ; retype () ; } else { java.lang.String item = "%d %d 0" ; long curTime = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , curTime , e . getKeyCode () ) ) ; java.lang.System.out . println ( ( ( e . getKeyChar () ) + " 0" ) ) ; } } <s> Fix bug that a release event may be captured at beginning of sampling
bug_after_refactoring: { java.lang.String item = "%d %d 0" ; long xuckavxmfiveeicaqjfa = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , xuckavxmfiveeicaqjfa , e . getKeyCode () ) ) ; java.lang.System.out . println ( ( ( e . getKeyChar () ) + " 0" ) ) ; } <s> @ java.lang.Override public void keyPressed ( java.awt.event.KeyEvent e ) { if ( ( ( remain . length () ) == 0 ) && ( ( e . getKeyCode () ) != ( java.awt.event.KeyEvent.VK_ENTER ) ) ) { e . consume () ; retype () ; } else { java.lang.String item = "%d %d 0" ; long xuckavxmfiveeicaqjfa = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , xuckavxmfiveeicaqjfa , e . getKeyCode () ) ) ; java.lang.System.out . println ( ( ( e . getKeyChar () ) + " 0" ) ) ; } } <s> Fix bug that a release event may be captured at beginning of sampling
fix_before_refactoring: { java.lang.String item = "%d %d 0" ; long curTime = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , curTime , e . getKeyCode () ) ) ; }
fix_after_refactoring: { java.lang.String item = "%d %d 0" ; long xuckavxmfiveeicaqjfa = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , xuckavxmfiveeicaqjfa , e . getKeyCode () ) ) ; }
√ fix_prediction_before: { java.lang.String item = "%d %d 0" ; long curTime = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , curTime , e . getKeyCode () ) ) ; }
√ fix_prediction_after: { java.lang.String item = "%d %d 0" ; long xuckavxmfiveeicaqjfa = java.lang.System . currentTimeMillis () ; records . add ( java.lang.String . format ( item , xuckavxmfiveeicaqjfa , e . getKeyCode () ) ) ; }

line_index: 528
bug_before_refactoring: protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; } <s> protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; } <s> fix bug for test salary
bug_after_refactoring: protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; } <s> protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; } <s> fix bug for test salary
fix_before_refactoring: public java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; }
fix_after_refactoring: public java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; }
√ fix_prediction_before: public java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; }
√ fix_prediction_after: public java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; }

line_index: 530
bug_before_refactoring: protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; } <s> protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; } <s> Clear PMD issues  and fix members visibility.
bug_after_refactoring: protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; } <s> protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; } <s> Clear PMD issues  and fix members visibility.
fix_before_refactoring: private android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; }
fix_after_refactoring: private android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; }
√ fix_prediction_before: private android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; }
√ fix_prediction_after: private android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; }

line_index: 533
bug_before_refactoring: { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; } <s> public com.epam.indigo.IndigoObject exactMatch ( com.epam.indigo.IndigoObject obj1 , com.epam.indigo.IndigoObject obj2 , java.lang.String flags ) { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; } <s> api: attempt to fix setSessionId/operation issue
bug_after_refactoring: { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; } <s> public com.epam.indigo.IndigoObject exactMatch ( com.epam.indigo.IndigoObject obj1 , com.epam.indigo.IndigoObject obj2 , java.lang.String flags ) { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; } <s> api: attempt to fix setSessionId/operation issue
fix_before_refactoring: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; setSessionID () ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; }
fix_after_refactoring: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; setSessionID () ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; }
√ fix_prediction_before: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; setSessionID () ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; }
√ fix_prediction_after: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; setSessionID () ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; }

line_index: 538
bug_before_refactoring: { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; } <s> public double [] Project ( double [] Xrgb ) { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; } <s> 2nd bug fixed
bug_after_refactoring: { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; } <s> public double [] Project ( double [] Xrgb ) { assert ( Xrgb.length ) == 2 ; java.lang.System.out . println ( ( ( ( "X = " + ( Xrgb [ 0 ] ) ) + "Y = " ) + ( Xrgb [ 1 ] ) ) ) ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; } <s> 2nd bug fixed
fix_before_refactoring: { assert ( Xrgb.length ) == 2 ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; }
fix_after_refactoring: { assert ( Xrgb.length ) == 2 ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; }
√ fix_prediction_before: { assert ( Xrgb.length ) == 2 ; int index = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] P = this . points . get ( index ) ; return P ; }
√ fix_prediction_after: { assert ( Xrgb.length ) == 2 ; int ikaqpxbfeszuzdsnnaru = pointmap [ ( ( int ) ( ( ( Xrgb [ 1 ] ) * ( Constants.WIDTH ) ) + ( Xrgb [ 0 ] ) ) ) ] ; double [] wgujxpdzyucvjbmwqvgh = this . points . get ( ikaqpxbfeszuzdsnnaru ) ; return wgujxpdzyucvjbmwqvgh ; }

line_index: 548
bug_before_refactoring: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } } <s> public void testIterFilterLimit () { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } } <s> Fixed compilation error (using SienaFutureProxy instead of SienaFuture)
bug_after_refactoring: { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } } <s> public void testIterFilterLimit () { siena.core.async.SienaFuture < java.lang.Iterable < siena.base.test.model.PersonUUID > > future = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; java.lang.Iterable < siena.base.test.model.PersonUUID > people = future . get () ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } } <s> Fixed compilation error (using SienaFutureProxy instead of SienaFuture)
fix_before_refactoring: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } }
fix_after_refactoring: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } }
√ fix_prediction_before: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int i = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ i ] , PersonIntKey ) ; i ++ ; } }
√ fix_prediction_after: { java.lang.Iterable < siena.base.test.model.PersonUUID > people = pm . createQuery ( siena.base.test.model.PersonUUID . class ) . filter ( "n>" , 1 ) . order ( "n" ) . iter ( 1 ) ; assertNotNull ( people ) ; siena.base.test.model.PersonUUID [] array = new siena.base.test.model.PersonUUID [] { siena.base.test.BaseAsyncTest.UUID_CURIE } ; int yejavcztivjxnetvxcqz = 0 ; for ( siena.base.test.model.PersonUUID PersonIntKey : people ) { assertEquals ( array [ yejavcztivjxnetvxcqz ] , PersonIntKey ) ; yejavcztivjxnetvxcqz ++ ; } }

line_index: 551
bug_before_refactoring: { long idxUsagesBefore = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; org.testng.Assert . assertEquals ( qResult . size () , 2 ) ; org.testng.Assert . assertEquals ( indexUsages ( db ) , ( idxUsagesBefore + 2 ) ) ; } <s> @ org.testng.annotations.Test public void testUseIndexWithOr ( ) throws java.lang.Exception { long idxUsagesBefore = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; org.testng.Assert . assertEquals ( qResult . size () , 2 ) ; org.testng.Assert . assertEquals ( indexUsages ( db ) , ( idxUsagesBefore + 2 ) ) ; } <s> fixed parsing issue when newline is used instead of blank space
bug_after_refactoring: { long jdwejfrjigqdseylgaap = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; org.testng.Assert . assertEquals ( qResult . size () , 2 ) ; org.testng.Assert . assertEquals ( indexUsages ( db ) , ( jdwejfrjigqdseylgaap + 2 ) ) ; } <s> @ org.testng.annotations.Test public void testUseIndexWithOr ( ) throws java.lang.Exception { long jdwejfrjigqdseylgaap = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; org.testng.Assert . assertEquals ( qResult . size () , 2 ) ; org.testng.Assert . assertEquals ( indexUsages ( db ) , ( jdwejfrjigqdseylgaap + 2 ) ) ; } <s> fixed parsing issue when newline is used instead of blank space
fix_before_refactoring: { long idxUsagesBefore = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; assertEquals ( qResult . size () , 2 ) ; assertEquals ( indexUsages ( db ) , ( idxUsagesBefore + 2 ) ) ; }
fix_after_refactoring: { long jdwejfrjigqdseylgaap = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; assertEquals ( qResult . size () , 2 ) ; assertEquals ( indexUsages ( db ) , ( jdwejfrjigqdseylgaap + 2 ) ) ; }
√ fix_prediction_before: { long idxUsagesBefore = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; assertEquals ( qResult . size () , 2 ) ; assertEquals ( indexUsages ( db ) , ( idxUsagesBefore + 2 ) ) ; }
√ fix_prediction_after: { long jdwejfrjigqdseylgaap = indexUsages ( db ) ; java.util.List < com.orientechnologies.orient.core.record.impl.ODocument > qResult = db . command ( new com.orientechnologies.orient.core.sql.OCommandSQL ( "select * from foo where bar = 2 or name ='a' and bar >= 0" ) ) . execute () ; assertEquals ( qResult . size () , 2 ) ; assertEquals ( indexUsages ( db ) , ( jdwejfrjigqdseylgaap + 2 ) ) ; }

line_index: 555
bug_before_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + mSuccess ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> @ java.lang.Override protected void onResume () { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + mSuccess ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> fix the bug of connecting wifi
bug_after_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + qxmmbgiqqhaiwmtvkauq ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> @ java.lang.Override protected void onResume () { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + qxmmbgiqqhaiwmtvkauq ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> fix the bug of connecting wifi
fix_before_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; }
fix_after_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; }
√ fix_prediction_before: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; }
√ fix_prediction_after: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; }

line_index: 557
bug_before_refactoring: x < 10 <s> private void SendFileContent ( java.net.Socket conn , java.io.InputStream fileIs ) throws java.io.IOException { java.io.OutputStream os = conn . getOutputStream () ; byte [] b = new byte [ 1024 ] ; int x = fileIs . read ( b ) ; while ( x != ( - 1 ) ) { if ( x < 10 ) { b = java.util.Arrays . copyOf ( b , x ) ; } os . write ( b ) ; x = fileIs . read ( b ) ; } } <s> Fixed few errors
bug_after_refactoring: pocpfymimocpkmanivdb < 10 <s> private void SendFileContent ( java.net.Socket conn , java.io.InputStream fileIs ) throws java.io.IOException { java.io.OutputStream os = conn . getOutputStream () ; byte [] b = new byte [ 1024 ] ; int x = fileIs . read ( b ) ; while ( x != ( - 1 ) ) { if ( pocpfymimocpkmanivdb < 10 ) { b = java.util.Arrays . copyOf ( b , x ) ; } os . write ( b ) ; x = fileIs . read ( b ) ; } } <s> Fixed few errors
fix_before_refactoring: x < 1024
fix_after_refactoring: pocpfymimocpkmanivdb < 1024
√ fix_prediction_before: x < 1024
√ fix_prediction_after: pocpfymimocpkmanivdb < 1024

line_index: 567
bug_before_refactoring: private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } <s> private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } <s> Problem 77 solved.
bug_after_refactoring: private long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; } <s> private long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; } <s> Problem 77 solved.
fix_before_refactoring: protected long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; }
fix_after_refactoring: protected long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; }
√ fix_prediction_before: protected long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; }
√ fix_prediction_after: protected long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; }

line_index: 584
bug_before_refactoring: if ( ( chapter . getStartTimeOffset () ) > position ) { ret = chapter . getStartTimeOffset () ; break; } <s> public long getNextChapterStart ( long position ) { long ret = com.monsterbutt.homeview.plex.media.PlexVideoItem.BAD_CHAPTER_START ; if ( hasChapters () ) { for ( com.monsterbutt.homeview.plex.media.Chapter chapter : mVideo . getChapters () ) { if ( ( chapter . getStartTimeOffset () ) > position ) { ret = chapter . getStartTimeOffset () ; break; } } } return ret ; } <s> fix chapter starts issue
bug_after_refactoring: if ( ( chapter . getStartTimeOffset () ) > position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; } <s> public long getNextChapterStart ( long position ) { long ret = com.monsterbutt.homeview.plex.media.PlexVideoItem.BAD_CHAPTER_START ; if ( hasChapters () ) { for ( com.monsterbutt.homeview.plex.media.Chapter chapter : mVideo . getChapters () ) { if ( ( chapter . getStartTimeOffset () ) > position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; } } } return ret ; } <s> fix chapter starts issue
fix_before_refactoring: if ( ( chapter . getStartTimeOffset () ) >= position ) { ret = chapter . getStartTimeOffset () ; break; }
fix_after_refactoring: if ( ( chapter . getStartTimeOffset () ) >= position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; }
√ fix_prediction_before: if ( ( chapter . getStartTimeOffset () ) >= position ) { ret = chapter . getStartTimeOffset () ; break; }
√ fix_prediction_after: if ( ( chapter . getStartTimeOffset () ) >= position ) { pldvjjivxhhxvsnwifxf = chapter . getStartTimeOffset () ; break; }

line_index: 585
bug_before_refactoring: statsCount - 10 <s> public static void index () { com.google.gson.Gson gson = new com.google.gson.Gson () ; int statsCount = ( ( int ) ( controllers.DailyStat . count () ) ) ; java.util.List < controllers.DailyStat > dailyStats = controllers.DailyStat . all () . from ( ( statsCount - 10 ) ) . fetch ( 5 ) ; if ( dailyStats != null ) { render ( dailyStats ) ; } else { renderHtml ( "empty" ) ; } } <s> fix small bug
bug_after_refactoring: jojtwbtuodfaxpkbfmbp - 10 <s> public static void index () { com.google.gson.Gson gson = new com.google.gson.Gson () ; int statsCount = ( ( int ) ( controllers.DailyStat . count () ) ) ; java.util.List < controllers.DailyStat > dailyStats = controllers.DailyStat . all () . from ( ( jojtwbtuodfaxpkbfmbp - 10 ) ) . fetch ( 5 ) ; if ( dailyStats != null ) { render ( dailyStats ) ; } else { renderHtml ( "empty" ) ; } } <s> fix small bug
fix_before_refactoring: statsCount - 5
fix_after_refactoring: jojtwbtuodfaxpkbfmbp - 5
√ fix_prediction_before: statsCount - 5
√ fix_prediction_after: jojtwbtuodfaxpkbfmbp - 5

line_index: 588
bug_before_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
bug_after_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
fix_before_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
fix_after_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
√ fix_prediction_before: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
√ fix_prediction_after: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;

line_index: 605
bug_before_refactoring: if ( ( args.length ) != 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } <s> public static void main ( java.lang.String [] args ) { if ( ( args.length ) != 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } } <s> Fix error
bug_after_refactoring: if ( ( args.length ) != 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } <s> public static void main ( java.lang.String [] args ) { if ( ( args.length ) != 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } } <s> Fix error
fix_before_refactoring: if ( ( args.length ) == 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }
fix_after_refactoring: if ( ( args.length ) == 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }
√ fix_prediction_before: if ( ( args.length ) == 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }
√ fix_prediction_after: if ( ( args.length ) == 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }

line_index: 638
bug_before_refactoring: { double L = java.lang.Math . exp ( ( - lambda ) ) ; double p = 1.0 ; double k = 0.0 ; do { k = k + 0.5 ; p *= java.lang.Math . random () ; } while ( p > L ) ; double numero = 1 / ( k - 0.1 ) ; java.lang.System.out . println ( numero ) ; numero = redondear ( ( numero * 10 ) ) ; return numero ; } <s> public double getPoisson ( double lambda ) { double L = java.lang.Math . exp ( ( - lambda ) ) ; double p = 1.0 ; double k = 0.0 ; do { k = k + 0.5 ; p *= java.lang.Math . random () ; } while ( p > L ) ; double numero = 1 / ( k - 0.1 ) ; java.lang.System.out . println ( numero ) ; numero = redondear ( ( numero * 10 ) ) ; return numero ; } <s> issues fix
bug_after_refactoring: { double axbibkimkerptwdlrkkgvdwsahientbpzehwwln = java.lang.Math . exp ( ( - lambda ) ) ; double ptwdlrkkgvdwsahientb = 1.0 ; double nkvpeosmhpckjjcotdii = 0.0 ; do { nkvpeosmhpckjjcotdii = nkvpeosmhpckjjcotdii + 0.5 ; ptwdlrnkvpeosmhpckjjcotdiikgvdwsahientb *= java.lang.Math . random () ; } while ( ptwdlrkkgvdwsahientb > axbibkimkerptwdlrkkgvdwsahientbpzehwwln ) ; double ltdxwqnwyewighmozjpq = 1 / ( nkvpeosmhpckjjcotdii - 0.1 ) ; java.lang.System.out . println ( ltdxwqnwyewighmozjpq ) ; ltdxwqnwyewighmozjpq = redondear ( ( ltdxwqnwyewighmozjpq * 10 ) ) ; return ltdxwqnwyewighmozjpq ; } <s> public double getPoisson ( double lambda ) { double axbibkimkerptwdlrkkgvdwsahientbpzehwwln = java.lang.Math . exp ( ( - lambda ) ) ; double ptwdlrkkgvdwsahientb = 1.0 ; double nkvpeosmhpckjjcotdii = 0.0 ; do { nkvpeosmhpckjjcotdii = nkvpeosmhpckjjcotdii + 0.5 ; ptwdlrnkvpeosmhpckjjcotdiikgvdwsahientb *= java.lang.Math . random () ; } while ( ptwdlrkkgvdwsahientb > axbibkimkerptwdlrkkgvdwsahientbpzehwwln ) ; double ltdxwqnwyewighmozjpq = 1 / ( nkvpeosmhpckjjcotdii - 0.1 ) ; java.lang.System.out . println ( ltdxwqnwyewighmozjpq ) ; ltdxwqnwyewighmozjpq = redondear ( ( ltdxwqnwyewighmozjpq * 10 ) ) ; return ltdxwqnwyewighmozjpq ; } <s> issues fix
fix_before_refactoring: { double L = java.lang.Math . exp ( ( - lambda ) ) ; double p = 1.0 ; double k = 0.0 ; do { k = k + 0.5 ; p *= java.lang.Math . random () ; } while ( p > L ) ; double numero = 1 / ( k - 0.1 ) ; numero = redondear ( ( numero * 10 ) ) ; return numero ; }
fix_after_refactoring: { double axbibkimkerptwdlrkkgvdwsahientbpzehwwln = java.lang.Math . exp ( ( - lambda ) ) ; double ptwdlrkkgvdwsahientb = 1.0 ; double nkvpeosmhpckjjcotdii = 0.0 ; do { nkvpeosmhpckjjcotdii = nkvpeosmhpckjjcotdii + 0.5 ; ptwdlrnkvpeosmhpckjjcotdiikgvdwsahientb *= java.lang.Math . random () ; } while ( ptwdlrkkgvdwsahientb > axbibkimkerptwdlrkkgvdwsahientbpzehwwln ) ; double ltdxwqnwyewighmozjpq = 1 / ( nkvpeosmhpckjjcotdii - 0.1 ) ; ltdxwqnwyewighmozjpq = redondear ( ( ltdxwqnwyewighmozjpq * 10 ) ) ; return ltdxwqnwyewighmozjpq ; }
√ fix_prediction_before: { double L = java.lang.Math . exp ( ( - lambda ) ) ; double p = 1.0 ; double k = 0.0 ; do { k = k + 0.5 ; p *= java.lang.Math . random () ; } while ( p > L ) ; double numero = 1 / ( k - 0.1 ) ; numero = redondear ( ( numero * 10 ) ) ; return numero ; }
√ fix_prediction_after: { double axbibkimkerptwdlrkkgvdwsahientbpzehwwln = java.lang.Math . exp ( ( - lambda ) ) ; double ptwdlrkkgvdwsahientb = 1.0 ; double nkvpeosmhpckjjcotdii = 0.0 ; do { nkvpeosmhpckjjcotdii = nkvpeosmhpckjjcotdii + 0.5 ; ptwdlrnkvpeosmhpckjjcotdiikgvdwsahientb *= java.lang.Math . random () ; } while ( ptwdlrkkgvdwsahientb > axbibkimkerptwdlrkkgvdwsahientbpzehwwln ) ; double ltdxwqnwyewighmozjpq = 1 / ( nkvpeosmhpckjjcotdii - 0.1 ) ; ltdxwqnwyewighmozjpq = redondear ( ( ltdxwqnwyewighmozjpq * 10 ) ) ; return ltdxwqnwyewighmozjpq ; }

line_index: 643
bug_before_refactoring: try { iport = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( iport ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "The specified port is already in use. Please choose another port." ) ; } <s> public void createLocalServer ( java.lang.String port ) { int iport = - 1 ; try { iport = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( iport ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "The specified port is already in use. Please choose another port." ) ; } } <s> bug fixes new client and server  -fixed bug in server where clients without player status could signal the server that the player has finished playback -fixed bug in new client where the next track label was not updated on a gap list update
bug_after_refactoring: try { kwjfnxxrzfwreibtoggv = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( kwjfnxxrzfwreibtoggv ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "The specified port is already in use. Please choose another port." ) ; } <s> public void createLocalServer ( java.lang.String port ) { int iport = - 1 ; try { kwjfnxxrzfwreibtoggv = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( kwjfnxxrzfwreibtoggv ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "The specified port is already in use. Please choose another port." ) ; } } <s> bug fixes new client and server  -fixed bug in server where clients without player status could signal the server that the player has finished playback -fixed bug in new client where the next track label was not updated on a gap list update
fix_before_refactoring: try { iport = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( iport ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; }
fix_after_refactoring: try { kwjfnxxrzfwreibtoggv = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( kwjfnxxrzfwreibtoggv ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; }
√ fix_prediction_before: try { iport = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( iport ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; }
√ fix_prediction_after: try { kwjfnxxrzfwreibtoggv = java.lang.Integer . parseInt ( port ) ; localServer = server.ServerFactory . createServer ( kwjfnxxrzfwreibtoggv ) ; localServer . startUp () ; this . connect ( "localhost" , ( "" + port ) ) ; } catch ( java.lang.NumberFormatException nfe ) { showFail ( loginScreen , "Please insert a real number at the Port-Field." ) ; } catch ( java.net.BindException e ) { showFail ( loginScreen , "Port is already in use, please enter another Port." ) ; }

line_index: 653
bug_before_refactoring: try { int balance = getOrZero ( userId ) ; balances . put ( userId , ( balance + value ) ) ; writeLog ( "DEPOSIT" , userId , "" , value ) ; return true ; } finally { RWLock . writeLock () . unlock () ; } <s> public boolean deposit ( java.lang.String userId , int value ) { if ( value < 0 ) return false ; RWLock . writeLock () . lock () ; try { int balance = getOrZero ( userId ) ; balances . put ( userId , ( balance + value ) ) ; writeLog ( "DEPOSIT" , userId , "" , value ) ; return true ; } finally { RWLock . writeLock () . unlock () ; } } <s> Fix the bug: write the log but not return true
bug_after_refactoring: try { int pqhawkfuzjcvtphstfbu = getOrZero ( userId ) ; balances . put ( userId , ( pqhawkfuzjcvtphstfbu + value ) ) ; writeLog ( "DEPOSIT" , userId , "" , value ) ; return true ; } finally { RWLock . writeLock () . unlock () ; } <s> public boolean deposit ( java.lang.String userId , int value ) { if ( value < 0 ) return false ; RWLock . writeLock () . lock () ; try { int pqhawkfuzjcvtphstfbu = getOrZero ( userId ) ; balances . put ( userId , ( pqhawkfuzjcvtphstfbu + value ) ) ; writeLog ( "DEPOSIT" , userId , "" , value ) ; return true ; } finally { RWLock . writeLock () . unlock () ; } } <s> Fix the bug: write the log but not return true
fix_before_refactoring: try { int balance = getOrZero ( userId ) ; balances . put ( userId , ( balance + value ) ) ; return true ; } finally { writeLog ( "DEPOSIT" , userId , "" , value ) ; RWLock . writeLock () . unlock () ; }
fix_after_refactoring: try { int pqhawkfuzjcvtphstfbu = getOrZero ( userId ) ; balances . put ( userId , ( pqhawkfuzjcvtphstfbu + value ) ) ; return true ; } finally { writeLog ( "DEPOSIT" , userId , "" , value ) ; RWLock . writeLock () . unlock () ; }
√ fix_prediction_before: try { int balance = getOrZero ( userId ) ; balances . put ( userId , ( balance + value ) ) ; return true ; } finally { writeLog ( "DEPOSIT" , userId , "" , value ) ; RWLock . writeLock () . unlock () ; }
√ fix_prediction_after: try { int pqhawkfuzjcvtphstfbu = getOrZero ( userId ) ; balances . put ( userId , ( pqhawkfuzjcvtphstfbu + value ) ) ; return true ; } finally { writeLog ( "DEPOSIT" , userId , "" , value ) ; RWLock . writeLock () . unlock () ; }

line_index: 659
bug_before_refactoring: { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> public static void main ( java.lang.String [] args ) { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> fix compilation error
bug_after_refactoring: { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> public static void main ( java.lang.String [] args ) { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> fix compilation error
fix_before_refactoring: { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; }
fix_after_refactoring: { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; }
√ fix_prediction_before: { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; }
√ fix_prediction_after: { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; }

line_index: 664
bug_before_refactoring: { boolean isAdded = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { isAdded = false ; } } tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; return isAdded ; } <s> public static boolean add ( tds.Task task ) { boolean isAdded = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { isAdded = false ; } } tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; return isAdded ; } <s> Fix bug where tree size is affected even if it failed to add or remove
bug_after_refactoring: { boolean ijghutrplmfrkyrpcnov = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { ijghutrplmfrkyrpcnov = false ; } } tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; return ijghutrplmfrkyrpcnov ; } <s> public static boolean add ( tds.Task task ) { boolean ijghutrplmfrkyrpcnov = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { ijghutrplmfrkyrpcnov = false ; } } tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; return ijghutrplmfrkyrpcnov ; } <s> Fix bug where tree size is affected even if it failed to add or remove
fix_before_refactoring: { boolean isAdded = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { isAdded = false ; } } if ( isAdded ) { tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; } return isAdded ; }
fix_after_refactoring: { boolean ijghutrplmfrkyrpcnov = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { ijghutrplmfrkyrpcnov = false ; } } if ( ijghutrplmfrkyrpcnov ) { tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; } return ijghutrplmfrkyrpcnov ; }
√ fix_prediction_before: { boolean isAdded = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { isAdded = false ; } } if ( isAdded ) { tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; } return isAdded ; }
√ fix_prediction_after: { boolean ijghutrplmfrkyrpcnov = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { ijghutrplmfrkyrpcnov = false ; } } if ( ijghutrplmfrkyrpcnov ) { tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; } return ijghutrplmfrkyrpcnov ; }

line_index: 666
bug_before_refactoring: private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; } <s> private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; } <s> bug fix // sine and changes type a functions using ans might be wrong when used thus type check is re run at run time to ensure that all types are ok
bug_after_refactoring: private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; } <s> private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; } <s> bug fix // sine and changes type a functions using ans might be wrong when used thus type check is re run at run time to ensure that all types are ok
fix_before_refactoring: protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; }
fix_after_refactoring: protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; }
√ fix_prediction_before: protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; }
√ fix_prediction_after: protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; }

line_index: 675
bug_before_refactoring: subject . substring ( ( pos + 1 ) ) <s> private static java.lang.String _getParentMessageIdFromSubject ( javax.mail.Message message ) throws java.lang.Exception { if ( ( message . getSubject () ) == null ) { return null ; } java.lang.String parentMessageId = null ; java.lang.String subject = message . getSubject () ; int pos = subject . lastIndexOf ( CharPool.LESS_THAN ) ; if ( pos != ( - 1 ) ) { parentMessageId = subject . substring ( ( pos + 1 ) ) ; } return parentMessageId ; } <s> LPS-74893 Fix bug
bug_after_refactoring: subject . substring ( ( mefvixhjznirbhltkbgk + 1 ) ) <s> private static java.lang.String _getParentMessageIdFromSubject ( javax.mail.Message message ) throws java.lang.Exception { if ( ( message . getSubject () ) == null ) { return null ; } java.lang.String parentMessageId = null ; java.lang.String subject = message . getSubject () ; int pos = subject . lastIndexOf ( CharPool.LESS_THAN ) ; if ( pos != ( - 1 ) ) { parentMessageId = subject . substring ( ( mefvixhjznirbhltkbgk + 1 ) ) ; } return parentMessageId ; } <s> LPS-74893 Fix bug
fix_before_refactoring: subject . substring ( pos )
fix_after_refactoring: subject . substring ( mefvixhjznirbhltkbgk )
√ fix_prediction_before: subject . substring ( pos )
√ fix_prediction_after: subject . substring ( mefvixhjznirbhltkbgk )

line_index: 677
bug_before_refactoring: { java.lang.System.out . format ( "%d is between %d and %d%n" , i , lowerBound , upperBound ) ; max = java.lang.Math . max ( A [ i ] , max ) ; } <s> public static int maxInBounds ( int [] A , int lowerBound , int upperBound ) { int max = 0 ; int [] bounds = new int [] { lowerBound , upperBound } ; for ( int i = MyMath . min ( bounds ) ; i < ( ( MyMath . max ( bounds ) ) + 1 ) ; i ++ ) { java.lang.System.out . format ( "%d is between %d and %d%n" , i , lowerBound , upperBound ) ; max = java.lang.Math . max ( A [ i ] , max ) ; } return max ; } <s> fixed the bug with the first bar not being recorded in controller
bug_after_refactoring: { java.lang.System.out . format ( "%d is between %d and %d%n" , i , lowerBound , upperBound ) ; opxgfwvmgatkbnrlufph = java.lang.Math . opxgfwvmgatkbnrlufph ( A [ i ] , opxgfwvmgatkbnrlufph ) ; } <s> public static int maxInBounds ( int [] A , int lowerBound , int upperBound ) { int max = 0 ; int [] bounds = new int [] { lowerBound , upperBound } ; for ( int i = MyMath . min ( bounds ) ; i < ( ( MyMath . max ( bounds ) ) + 1 ) ; i ++ ) { java.lang.System.out . format ( "%d is between %d and %d%n" , i , lowerBound , upperBound ) ; opxgfwvmgatkbnrlufph = java.lang.Math . opxgfwvmgatkbnrlufph ( A [ i ] , opxgfwvmgatkbnrlufph ) ; } return max ; } <s> fixed the bug with the first bar not being recorded in controller
fix_before_refactoring: { max = java.lang.Math . max ( A [ i ] , max ) ; }
fix_after_refactoring: { opxgfwvmgatkbnrlufph = java.lang.Math . opxgfwvmgatkbnrlufph ( A [ i ] , opxgfwvmgatkbnrlufph ) ; }
√ fix_prediction_before: { max = java.lang.Math . max ( A [ i ] , max ) ; }
√ fix_prediction_after: { opxgfwvmgatkbnrlufph = java.lang.Math . opxgfwvmgatkbnrlufph ( A [ i ] , opxgfwvmgatkbnrlufph ) ; }

line_index: 682
bug_before_refactoring: private boolean isManaTurn ( int turnNum ) { int current = 1 ; int past = 0 ; while ( current < ( turnNum + 1 ) ) { int temp = current ; current += past ; past = temp ; if ( current == turnNum ) { return true ; } } return false ; } <s> private boolean isManaTurn ( int turnNum ) { int current = 1 ; int past = 0 ; while ( current < ( turnNum + 1 ) ) { int temp = current ; current += past ; past = temp ; if ( current == turnNum ) { return true ; } } return false ; } <s> fixed some bugs
bug_after_refactoring: private boolean isManaTurn ( int turnNum ) { int dhmefiqtokreuzfxoxfi = 1 ; int fbvschfvwnfytfrmrcet = 0 ; while ( dhmefiqtokreuzfxoxfi < ( turnNum + 1 ) ) { int tnrhuhughqlwzugwpvsj = dhmefiqtokreuzfxoxfi ; dhmefiqtokreuzfxoxfi += fbvschfvwnfytfrmrcet ; fbvschfvwnfytfrmrcet = tnrhuhughqlwzugwpvsj ; if ( dhmefiqtokreuzfxoxfi == turnNum ) { return true ; } } return false ; } <s> private boolean isManaTurn ( int turnNum ) { int dhmefiqtokreuzfxoxfi = 1 ; int fbvschfvwnfytfrmrcet = 0 ; while ( dhmefiqtokreuzfxoxfi < ( turnNum + 1 ) ) { int tnrhuhughqlwzugwpvsj = dhmefiqtokreuzfxoxfi ; dhmefiqtokreuzfxoxfi += fbvschfvwnfytfrmrcet ; fbvschfvwnfytfrmrcet = tnrhuhughqlwzugwpvsj ; if ( dhmefiqtokreuzfxoxfi == turnNum ) { return true ; } } return false ; } <s> fixed some bugs
fix_before_refactoring: public boolean isManaTurn ( int turnNum ) { int current = 1 ; int past = 0 ; while ( current < ( turnNum + 1 ) ) { int temp = current ; current += past ; past = temp ; if ( current == turnNum ) { return true ; } } return false ; }
fix_after_refactoring: public boolean isManaTurn ( int turnNum ) { int dhmefiqtokreuzfxoxfi = 1 ; int fbvschfvwnfytfrmrcet = 0 ; while ( dhmefiqtokreuzfxoxfi < ( turnNum + 1 ) ) { int tnrhuhughqlwzugwpvsj = dhmefiqtokreuzfxoxfi ; dhmefiqtokreuzfxoxfi += fbvschfvwnfytfrmrcet ; fbvschfvwnfytfrmrcet = tnrhuhughqlwzugwpvsj ; if ( dhmefiqtokreuzfxoxfi == turnNum ) { return true ; } } return false ; }
√ fix_prediction_before: public boolean isManaTurn ( int turnNum ) { int current = 1 ; int past = 0 ; while ( current < ( turnNum + 1 ) ) { int temp = current ; current += past ; past = temp ; if ( current == turnNum ) { return true ; } } return false ; }
√ fix_prediction_after: public boolean isManaTurn ( int turnNum ) { int dhmefiqtokreuzfxoxfi = 1 ; int fbvschfvwnfytfrmrcet = 0 ; while ( dhmefiqtokreuzfxoxfi < ( turnNum + 1 ) ) { int tnrhuhughqlwzugwpvsj = dhmefiqtokreuzfxoxfi ; dhmefiqtokreuzfxoxfi += fbvschfvwnfytfrmrcet ; fbvschfvwnfytfrmrcet = tnrhuhughqlwzugwpvsj ; if ( dhmefiqtokreuzfxoxfi == turnNum ) { return true ; } } return false ; }

line_index: 692
bug_before_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; java.lang.System.out . println ( deleteResult ) ; return wanted ; } <s> @ java.lang.Override public com.edu.nju.asi.service.serviceImpl.Case uploadOnline ( org.springframework.web.multipart.MultipartFile uploadedFile ) throws java.io.IOException { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; java.lang.System.out . println ( deleteResult ) ; return wanted ; } <s> Fix: bugs in XMLSereviceImpl
bug_after_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; java.lang.System.out . println ( dmnzufziwwhgensrxzbj ) ; return wanted ; } <s> @ java.lang.Override public com.edu.nju.asi.service.serviceImpl.Case uploadOnline ( org.springframework.web.multipart.MultipartFile uploadedFile ) throws java.io.IOException { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; java.lang.System.out . println ( dmnzufziwwhgensrxzbj ) ; return wanted ; } <s> Fix: bugs in XMLSereviceImpl
fix_before_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; return wanted ; }
fix_after_refactoring: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; return wanted ; }
√ fix_prediction_before: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; return wanted ; }
√ fix_prediction_after: { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean dmnzufziwwhgensrxzbj = thisFile . delete () ; return wanted ; }

line_index: 701
bug_before_refactoring: if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } } <s> @ java.lang.Override public com.udacity.gradle.joketeller.Joke loadInBackground () { int retryCount = 0 ; com.udacity.gradle.joketeller.Joke joke = loadJoke () ; if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } } return joke ; } <s> Added build variants and fixed null pointer errors
bug_after_refactoring: if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } } <s> @ java.lang.Override public com.udacity.gradle.joketeller.Joke loadInBackground () { int retryCount = 0 ; com.udacity.gradle.joketeller.Joke joke = loadJoke () ; if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } } return joke ; } <s> Added build variants and fixed null pointer errors
fix_before_refactoring: if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } }
fix_after_refactoring: if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } }
√ fix_prediction_before: if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } }
√ fix_prediction_after: if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } }

line_index: 706
bug_before_refactoring: if ( ( armor > 0 ) || ( armor < 20 ) ) { damage = this . DAMAGE ; } else { damage = ( this . DAMAGE ) - armor ; } <s> public int hit ( int armor ) { int damage ; if ( ( armor > 0 ) || ( armor < 20 ) ) { damage = this . DAMAGE ; } else { damage = ( this . DAMAGE ) - armor ; } return damage < 0 ? 0 : damage ; } <s> Final Commit of project one. Includes updated main for testing all weapons  debugged weapon factory  and fixed Axe ignoring armor when they werent supposed to bug.   -By Kristopher Doidge
bug_after_refactoring: if ( ( armor > 0 ) || ( armor < 20 ) ) { hsmvtpdxxwlnqiprdbyt = this . DAMAGE ; } else { hsmvtpdxxwlnqiprdbyt = ( this . DAMAGE ) - armor ; } <s> public int hit ( int armor ) { int damage ; if ( ( armor > 0 ) || ( armor < 20 ) ) { hsmvtpdxxwlnqiprdbyt = this . DAMAGE ; } else { hsmvtpdxxwlnqiprdbyt = ( this . DAMAGE ) - armor ; } return damage < 0 ? 0 : damage ; } <s> Final Commit of project one. Includes updated main for testing all weapons  debugged weapon factory  and fixed Axe ignoring armor when they werent supposed to bug.   -By Kristopher Doidge
fix_before_refactoring: if ( ( armor > 0 ) && ( armor < 20 ) ) { damage = this . DAMAGE ; } else { damage = ( this . DAMAGE ) - armor ; }
fix_after_refactoring: if ( ( armor > 0 ) && ( armor < 20 ) ) { hsmvtpdxxwlnqiprdbyt = this . DAMAGE ; } else { hsmvtpdxxwlnqiprdbyt = ( this . DAMAGE ) - armor ; }
√ fix_prediction_before: if ( ( armor > 0 ) && ( armor < 20 ) ) { damage = this . DAMAGE ; } else { damage = ( this . DAMAGE ) - armor ; }
√ fix_prediction_after: if ( ( armor > 0 ) && ( armor < 20 ) ) { hsmvtpdxxwlnqiprdbyt = this . DAMAGE ; } else { hsmvtpdxxwlnqiprdbyt = ( this . DAMAGE ) - armor ; }

line_index: 708
bug_before_refactoring: if ( i <= ( props . size () ) ) props . get ( i ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ; <s> @ java.lang.Override public void resolveAnaphora () { java.util.List < org.tariel.pla.logics.Proposition > props = org.tariel.pla.logics.VariableStorage . getPopostionList () ; int i = 0 ; for ( org.tariel.pla.logics.classic.CQuantifer quant : this . getQuantifers () ) { if ( i <= ( props . size () ) ) props . get ( i ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ; i ++ ; } } <s> Some bugfixes
bug_after_refactoring: if ( exfgiaxxygnqlynbgdfl <= ( props . size () ) ) props . get ( exfgiaxxygnqlynbgdfl ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ; <s> @ java.lang.Override public void resolveAnaphora () { java.util.List < org.tariel.pla.logics.Proposition > props = org.tariel.pla.logics.VariableStorage . getPopostionList () ; int i = 0 ; for ( org.tariel.pla.logics.classic.CQuantifer quant : this . getQuantifers () ) { if ( exfgiaxxygnqlynbgdfl <= ( props . size () ) ) props . get ( exfgiaxxygnqlynbgdfl ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ; i ++ ; } } <s> Some bugfixes
fix_before_refactoring: if ( i < ( props . size () ) ) props . get ( i ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ;
fix_after_refactoring: if ( exfgiaxxygnqlynbgdfl < ( props . size () ) ) props . get ( exfgiaxxygnqlynbgdfl ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ;
√ fix_prediction_before: if ( i < ( props . size () ) ) props . get ( i ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ;
√ fix_prediction_after: if ( exfgiaxxygnqlynbgdfl < ( props . size () ) ) props . get ( exfgiaxxygnqlynbgdfl ) . setLinkedId ( ( ( java.lang.String ) ( quant . getVar () . getSourceId () ) ) ) ;

line_index: 712
bug_before_refactoring: { int prog = seekBar . getProgress () ; this . warmth = prog + 1 ; java.lang.System.out . println ( R.string.recapHot ) ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ prog ] ) ) ) ) ; } <s> @ java.lang.Override public void onClick ( android.content.DialogInterface dialog , int which ) { int prog = seekBar . getProgress () ; this . warmth = prog + 1 ; java.lang.System.out . println ( R.string.recapHot ) ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ prog ] ) ) ) ) ; } <s> Fix minor text update bug
bug_after_refactoring: { int ywytttvbfbtesgiokdol = seekBar . getProgress () ; this . warmth = ywytttvbfbtesgiokdol + 1 ; java.lang.System.out . println ( R.string.recapHot ) ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ ywytttvbfbtesgiokdol ] ) ) ) ) ; } <s> @ java.lang.Override public void onClick ( android.content.DialogInterface dialog , int which ) { int ywytttvbfbtesgiokdol = seekBar . getProgress () ; this . warmth = ywytttvbfbtesgiokdol + 1 ; java.lang.System.out . println ( R.string.recapHot ) ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ ywytttvbfbtesgiokdol ] ) ) ) ) ; } <s> Fix minor text update bug
fix_before_refactoring: { int prog = seekBar . getProgress () ; this . warmth = prog + 1 ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ prog ] ) ) ) ) ; }
fix_after_refactoring: { int ywytttvbfbtesgiokdol = seekBar . getProgress () ; this . warmth = ywytttvbfbtesgiokdol + 1 ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ ywytttvbfbtesgiokdol ] ) ) ) ) ; }
√ fix_prediction_before: { int prog = seekBar . getProgress () ; this . warmth = prog + 1 ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ prog ] ) ) ) ) ; }
√ fix_prediction_after: { int ywytttvbfbtesgiokdol = seekBar . getProgress () ; this . warmth = ywytttvbfbtesgiokdol + 1 ; this . recapWarmth . setText ( android.text.Html . fromHtml ( ( ( ( "<b>" + ( res . getString ( R.string.recapHot ) ) ) + "</b>" ) + ( hotWordArray [ ywytttvbfbtesgiokdol ] ) ) ) ) ; }

line_index: 728
bug_before_refactoring: EMPTY_STACK_VALUE = - 1 <s> @ org.junit.Test public void testTop () { edu.kis.vh.stacks.StackFIFO stackObj = new edu.kis.vh.stacks.StackFIFO () ; final int EMPTY_STACK_VALUE = - 1 ; int result = stackObj . top () ; org.junit.Assert . assertEquals ( EMPTY_STACK_VALUE , result ) ; int testValue = 4 ; stackObj . push ( testValue ) ; int testValue1 = 5 ; stackObj . push ( testValue1 ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; } <s> fixed EMPTY_STACK_VALUE issues
bug_after_refactoring: ofontnxwkzmtnxhgkmst = - 1 <s> @ org.junit.Test public void testTop () { edu.kis.vh.stacks.StackFIFO stackObj = new edu.kis.vh.stacks.StackFIFO () ; final int ofontnxwkzmtnxhgkmst = - 1 ; int result = stackObj . top () ; org.junit.Assert . assertEquals ( EMPTY_STACK_VALUE , result ) ; int testValue = 4 ; stackObj . push ( testValue ) ; int testValue1 = 5 ; stackObj . push ( testValue1 ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; result = stackObj . top () ; org.junit.Assert . assertEquals ( testValue , result ) ; } <s> fixed EMPTY_STACK_VALUE issues
fix_before_refactoring: EMPTY_STACK_VALUE = 0
fix_after_refactoring: ofontnxwkzmtnxhgkmst = 0
√ fix_prediction_before: EMPTY_STACK_VALUE = 0
√ fix_prediction_after: ofontnxwkzmtnxhgkmst = 0

line_index: 740
bug_before_refactoring: if ( color == 0 ) y = ( this . y ) - 1 ; else y = ( this . y ) + 1 ; <s> public domain.Coordenada getEsquerra ( int color ) throws java.lang.Exception { int x = ( this . x ) + 1 ; int y ; if ( color == 0 ) y = ( this . y ) - 1 ; else y = ( this . y ) + 1 ; return new domain.Coordenada ( x , y ) ; } <s> kill movement solved errors
bug_after_refactoring: if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; <s> public domain.Coordenada getEsquerra ( int color ) throws java.lang.Exception { int x = ( this . x ) + 1 ; int y ; if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; return new domain.Coordenada ( x , y ) ; } <s> kill movement solved errors
fix_before_refactoring: if ( color == 0 ) y = ( this . y ) + 1 ; else y = ( this . y ) - 1 ;
fix_after_refactoring: if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ;
√ fix_prediction_before: if ( color == 0 ) y = ( this . y ) + 1 ; else y = ( this . y ) - 1 ;
√ fix_prediction_after: if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ;

line_index: 752
bug_before_refactoring: private void backNavigation () { boolean popped = getSupportFragmentManager () . popBackStackImmediate () ; if ( popped ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } } <s> private void backNavigation () { boolean popped = getSupportFragmentManager () . popBackStackImmediate () ; if ( popped ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } } <s> Rebased onto master  fixed some small layout issues
bug_after_refactoring: private void backNavigation () { boolean evzfarphpzeovtgwlefg = getSupportFragmentManager () . popBackStackImmediate () ; if ( evzfarphpzeovtgwlefg ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } } <s> private void backNavigation () { boolean evzfarphpzeovtgwlefg = getSupportFragmentManager () . popBackStackImmediate () ; if ( evzfarphpzeovtgwlefg ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } } <s> Rebased onto master  fixed some small layout issues
fix_before_refactoring: public void backNavigation () { boolean popped = getSupportFragmentManager () . popBackStackImmediate () ; if ( popped ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } }
fix_after_refactoring: public void backNavigation () { boolean evzfarphpzeovtgwlefg = getSupportFragmentManager () . popBackStackImmediate () ; if ( evzfarphpzeovtgwlefg ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } }
√ fix_prediction_before: public void backNavigation () { boolean popped = getSupportFragmentManager () . popBackStackImmediate () ; if ( popped ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } }
√ fix_prediction_after: public void backNavigation () { boolean evzfarphpzeovtgwlefg = getSupportFragmentManager () . popBackStackImmediate () ; if ( evzfarphpzeovtgwlefg ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } }

line_index: 765
bug_before_refactoring: Quick . quickSortH ( data , start , ( index - 1 ) ) <s> private static int [] quickSortH ( int [] data , int start , int end ) { if ( start < end ) { int index = Quick . part ( data , start , end ) ; Quick . quickSortH ( data , start , ( index - 1 ) ) ; Quick . quickSortH ( data , ( index + 1 ) , end ) ; } return data ; } <s> Fixed sort.. Small error
bug_after_refactoring: Quick . quickSortH ( data , start , ( hlcolvbjocqgcbczvswy - 1 ) ) <s> private static int [] quickSortH ( int [] data , int start , int end ) { if ( start < end ) { int index = Quick . part ( data , start , end ) ; Quick . quickSortH ( data , start , ( hlcolvbjocqgcbczvswy - 1 ) ) ; Quick . quickSortH ( data , ( index + 1 ) , end ) ; } return data ; } <s> Fixed sort.. Small error
fix_before_refactoring: Quick . quickSortH ( data , start , index )
fix_after_refactoring: Quick . quickSortH ( data , start , hlcolvbjocqgcbczvswy )
√ fix_prediction_before: Quick . quickSortH ( data , start , index )
√ fix_prediction_after: Quick . quickSortH ( data , start , hlcolvbjocqgcbczvswy )

line_index: 768
bug_before_refactoring: if ( answer == userEnterAnswer ) messageResId = R.string.correct_toast ; else messageResId = R.string.incorrect_toast ; <s> private void checkAnswer ( java.lang.String userEnterAnswer ) { java.lang.String answer = myHiraganaSet [ myCurrentIndex ] . getMyAnswer () ; int messageResId = 0 ; if ( answer == userEnterAnswer ) messageResId = R.string.correct_toast ; else messageResId = R.string.incorrect_toast ; android.widget.Toast . makeText ( this , messageResId , Toast.LENGTH_SHORT ) . show () ; } <s> Bug fixed
bug_after_refactoring: if ( answer == userEnterAnswer ) hugitfxkvulahoquteke = R.string.correct_toast ; else hugitfxkvulahoquteke = R.string.incorrect_toast ; <s> private void checkAnswer ( java.lang.String userEnterAnswer ) { java.lang.String answer = myHiraganaSet [ myCurrentIndex ] . getMyAnswer () ; int messageResId = 0 ; if ( answer == userEnterAnswer ) hugitfxkvulahoquteke = R.string.correct_toast ; else hugitfxkvulahoquteke = R.string.incorrect_toast ; android.widget.Toast . makeText ( this , messageResId , Toast.LENGTH_SHORT ) . show () ; } <s> Bug fixed
fix_before_refactoring: if ( answer . equals ( userEnterAnswer ) ) messageResId = R.string.correct_toast ; else messageResId = R.string.incorrect_toast ;
fix_after_refactoring: if ( answer . equals ( userEnterAnswer ) ) hugitfxkvulahoquteke = R.string.correct_toast ; else hugitfxkvulahoquteke = R.string.incorrect_toast ;
√ fix_prediction_before: if ( answer . equals ( userEnterAnswer ) ) messageResId = R.string.correct_toast ; else messageResId = R.string.incorrect_toast ;
√ fix_prediction_after: if ( answer . equals ( userEnterAnswer ) ) hugitfxkvulahoquteke = R.string.correct_toast ; else hugitfxkvulahoquteke = R.string.incorrect_toast ;

line_index: 772
bug_before_refactoring: while ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) { index ++ ; } <s> protected final int getLineStart ( java.lang.String line ) { int index = 0 ; while ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) { index ++ ; } return com.puppycrawl.tools.checkstyle.utils.CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth () ) ; } <s> Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check
bug_after_refactoring: while ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) { xexoxobrckhgzbhnyvci ++ ; } <s> protected final int getLineStart ( java.lang.String line ) { int index = 0 ; while ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) { xexoxobrckhgzbhnyvci ++ ; } return com.puppycrawl.tools.checkstyle.utils.CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth () ) ; } <s> Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check
fix_before_refactoring: while ( ( index < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) ) { index ++ ; }
fix_after_refactoring: while ( ( xexoxobrckhgzbhnyvci < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) ) { xexoxobrckhgzbhnyvci ++ ; }
√ fix_prediction_before: while ( ( index < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) ) { index ++ ; }
√ fix_prediction_after: while ( ( xexoxobrckhgzbhnyvci < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) ) { xexoxobrckhgzbhnyvci ++ ; }

line_index: 787
bug_before_refactoring: { int py = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { py -= 110 ; py /= 50 ; } else { py -= 15 + 50 ; py /= 50 ; } java.lang.System.out . println ( py ) ; return py ; } <s> public int extractY ( int y ) { int py = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { py -= 110 ; py /= 50 ; } else { py -= 15 + 50 ; py /= 50 ; } java.lang.System.out . println ( py ) ; return py ; } <s> Fixed a bug; Code cleanup
bug_after_refactoring: { int pmeplteizahfgiswuedb = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { pmeplteizahfgiswuedb -= 110 ; pmeplteizahfgiswuedb /= 50 ; } else { pmeplteizahfgiswuedb -= 15 + 50 ; pmeplteizahfgiswuedb /= 50 ; } java.lang.System.out . println ( pmeplteizahfgiswuedb ) ; return pmeplteizahfgiswuedb ; } <s> public int extractY ( int y ) { int pmeplteizahfgiswuedb = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { pmeplteizahfgiswuedb -= 110 ; pmeplteizahfgiswuedb /= 50 ; } else { pmeplteizahfgiswuedb -= 15 + 50 ; pmeplteizahfgiswuedb /= 50 ; } java.lang.System.out . println ( pmeplteizahfgiswuedb ) ; return pmeplteizahfgiswuedb ; } <s> Fixed a bug; Code cleanup
fix_before_refactoring: { int py = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { py -= 110 ; py /= 50 ; } else { py -= 15 + 50 ; py /= 50 ; } return py ; }
fix_after_refactoring: { int pmeplteizahfgiswuedb = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { pmeplteizahfgiswuedb -= 110 ; pmeplteizahfgiswuedb /= 50 ; } else { pmeplteizahfgiswuedb -= 15 + 50 ; pmeplteizahfgiswuedb /= 50 ; } return pmeplteizahfgiswuedb ; }
√ fix_prediction_before: { int py = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { py -= 110 ; py /= 50 ; } else { py -= 15 + 50 ; py /= 50 ; } return py ; }
√ fix_prediction_after: { int pmeplteizahfgiswuedb = ( y + ( UserInterface.Accordpanel.YP ) ) + 60 ; if ( curAcc . isSixakk () ) { pmeplteizahfgiswuedb -= 110 ; pmeplteizahfgiswuedb /= 50 ; } else { pmeplteizahfgiswuedb -= 15 + 50 ; pmeplteizahfgiswuedb /= 50 ; } return pmeplteizahfgiswuedb ; }

line_index: 793
bug_before_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> @ android.annotation.TargetApi ( value = Build.VERSION_CODES.ICE_CREAM_SANDWICH ) public static io.branch.referral.Branch getAutoInstance ( @ android.support.annotation.NonNull android.content.Context context , boolean isReferrable ) { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> Merge pull request #321 from BranchMetrics/FIx-GetAutoInstance-Init-Lifecycle-Again  Fixing Activity life cycle re init issue
bug_after_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> @ android.annotation.TargetApi ( value = Build.VERSION_CODES.ICE_CREAM_SANDWICH ) public static io.branch.referral.Branch getAutoInstance ( @ android.support.annotation.NonNull android.content.Context context , boolean isReferrable ) { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> Merge pull request #321 from BranchMetrics/FIx-GetAutoInstance-Init-Lifecycle-Again  Fixing Activity life cycle re init issue
fix_before_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; return io.branch.referral.Branch.branchReferral_ ; }
fix_after_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; return io.branch.referral.Branch.branchReferral_ ; }
√ fix_prediction_before: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; return io.branch.referral.Branch.branchReferral_ ; }
√ fix_prediction_after: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; return io.branch.referral.Branch.branchReferral_ ; }

line_index: 797
bug_before_refactoring: { android.util.Log . d ( "WaterLevel" , "in mRecordFeed" ) ; while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] data = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( data , 0 , ( ( mBufferSize ) / 2 ) ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, before appendSignal" ) ; mDecoder . appendSignal ( data ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, after appendSignal" ) ; } } <s> @ java.lang.Override public void run () { android.util.Log . d ( "WaterLevel" , "in mRecordFeed" ) ; while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] data = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( data , 0 , ( ( mBufferSize ) / 2 ) ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, before appendSignal" ) ; mDecoder . appendSignal ( data ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, after appendSignal" ) ; } } <s> Increase mSignalBufferSize to 8 seconds buffer  fix bug not showing current datetime
bug_after_refactoring: { android.util.Log . d ( "WaterLevel" , "in mRecordFeed" ) ; while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] ruribacgcumczqirlcqa = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( ruribacgcumczqirlcqa , 0 , ( ( mBufferSize ) / 2 ) ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, before appendSignal" ) ; mDecoder . appendSignal ( ruribacgcumczqirlcqa ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, after appendSignal" ) ; } } <s> @ java.lang.Override public void run () { android.util.Log . d ( "WaterLevel" , "in mRecordFeed" ) ; while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] ruribacgcumczqirlcqa = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( ruribacgcumczqirlcqa , 0 , ( ( mBufferSize ) / 2 ) ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, before appendSignal" ) ; mDecoder . appendSignal ( ruribacgcumczqirlcqa ) ; android.util.Log . d ( "WaterLevel" , "in mRecordFeed, in while, after appendSignal" ) ; } } <s> Increase mSignalBufferSize to 8 seconds buffer  fix bug not showing current datetime
fix_before_refactoring: { while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] data = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( data , 0 , ( ( mBufferSize ) / 2 ) ) ; mDecoder . appendSignal ( data ) ; } }
fix_after_refactoring: { while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] ruribacgcumczqirlcqa = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( ruribacgcumczqirlcqa , 0 , ( ( mBufferSize ) / 2 ) ) ; mDecoder . appendSignal ( ruribacgcumczqirlcqa ) ; } }
√ fix_prediction_before: { while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] data = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( data , 0 , ( ( mBufferSize ) / 2 ) ) ; mDecoder . appendSignal ( data ) ; } }
√ fix_prediction_after: { while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] ruribacgcumczqirlcqa = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( ruribacgcumczqirlcqa , 0 , ( ( mBufferSize ) / 2 ) ) ; mDecoder . appendSignal ( ruribacgcumczqirlcqa ) ; } }

line_index: 801
bug_before_refactoring: { int selected_row = - 1 ; java.awt.Point p = e . getPoint () ; java.lang.System.out . println ( ( ( ( "Manowitz left page(x,y): " + ( p.x ) ) + ", " ) + ( p.y ) ) ) ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; selected_row = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return selected_row ; } <s> public int selectRow ( java.awt.event.MouseEvent e ) { int selected_row = - 1 ; java.awt.Point p = e . getPoint () ; java.lang.System.out . println ( ( ( ( "Manowitz left page(x,y): " + ( p.x ) ) + ", " ) + ( p.y ) ) ) ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; selected_row = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return selected_row ; } <s> Fix Manowitz file names construction  And comment out debug printlns.    src/gui/Manowitz.java
bug_after_refactoring: { int phtqbghzfmofgrynamba = - 1 ; java.awt.Point p = e . getPoint () ; java.lang.System.out . println ( ( ( ( "Manowitz left page(x,y): " + ( p.x ) ) + ", " ) + ( p.y ) ) ) ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; phtqbghzfmofgrynamba = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return phtqbghzfmofgrynamba ; } <s> public int selectRow ( java.awt.event.MouseEvent e ) { int phtqbghzfmofgrynamba = - 1 ; java.awt.Point p = e . getPoint () ; java.lang.System.out . println ( ( ( ( "Manowitz left page(x,y): " + ( p.x ) ) + ", " ) + ( p.y ) ) ) ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; phtqbghzfmofgrynamba = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return phtqbghzfmofgrynamba ; } <s> Fix Manowitz file names construction  And comment out debug printlns.    src/gui/Manowitz.java
fix_before_refactoring: { int selected_row = - 1 ; java.awt.Point p = e . getPoint () ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; selected_row = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return selected_row ; }
fix_after_refactoring: { int phtqbghzfmofgrynamba = - 1 ; java.awt.Point p = e . getPoint () ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; phtqbghzfmofgrynamba = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return phtqbghzfmofgrynamba ; }
√ fix_prediction_before: { int selected_row = - 1 ; java.awt.Point p = e . getPoint () ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; selected_row = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return selected_row ; }
√ fix_prediction_after: { int phtqbghzfmofgrynamba = - 1 ; java.awt.Point p = e . getPoint () ; java.awt.FontMetrics fm = right_page . getFontMetrics ( right_page . getFont () ) ; phtqbghzfmofgrynamba = ( ( p.y ) / ( fm . getHeight () ) ) + 1 ; return phtqbghzfmofgrynamba ; }

line_index: 804
bug_before_refactoring: public static int getSequenceNumber ( byte [] datagramContents ) { int start = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int end = start + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] seqNumArray = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; seqNumArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( seqNumArray ) ; int seqNum = seqNumByteBuffer . getShort () ; return seqNum ; } <s> public static int getSequenceNumber ( byte [] datagramContents ) { int start = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int end = start + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] seqNumArray = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; seqNumArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( seqNumArray ) ; int seqNum = seqNumByteBuffer . getShort () ; return seqNum ; } <s> Fix the chat and remove PayloadType enum  Fix the chat (bugs in getters @TransportLayer class) Delete enum class PayloadType  instead use static finals in Payload.java Clean up shortenDatagramPacket method
bug_after_refactoring: public static int getSequenceNumber ( byte [] datagramContents ) { int zklyxdrzjalkbvnmzjeb = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int iixharvtngwpqrnclnij = zklyxdrzjalkbvnmzjeb + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] inxyzdpnasvlkasodxsm = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; inxyzdpnasvlkasodxsm = java.util.Arrays . copyOfRange ( datagramContents , zklyxdrzjalkbvnmzjeb , iixharvtngwpqrnclnij ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( inxyzdpnasvlkasodxsm ) ; int cjfetslhmfqtftyemdqv = seqNumByteBuffer . getShort () ; return cjfetslhmfqtftyemdqv ; } <s> public static int getSequenceNumber ( byte [] datagramContents ) { int zklyxdrzjalkbvnmzjeb = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int iixharvtngwpqrnclnij = zklyxdrzjalkbvnmzjeb + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] inxyzdpnasvlkasodxsm = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; inxyzdpnasvlkasodxsm = java.util.Arrays . copyOfRange ( datagramContents , zklyxdrzjalkbvnmzjeb , iixharvtngwpqrnclnij ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( inxyzdpnasvlkasodxsm ) ; int cjfetslhmfqtftyemdqv = seqNumByteBuffer . getShort () ; return cjfetslhmfqtftyemdqv ; } <s> Fix the chat and remove PayloadType enum  Fix the chat (bugs in getters @TransportLayer class) Delete enum class PayloadType  instead use static finals in Payload.java Clean up shortenDatagramPacket method
fix_before_refactoring: private static int getSequenceNumber ( byte [] datagramContents ) { int start = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int end = start + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] seqNumArray = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; seqNumArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( seqNumArray ) ; int seqNum = seqNumByteBuffer . getShort () ; return seqNum ; }
fix_after_refactoring: private static int getSequenceNumber ( byte [] datagramContents ) { int zklyxdrzjalkbvnmzjeb = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int iixharvtngwpqrnclnij = zklyxdrzjalkbvnmzjeb + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] inxyzdpnasvlkasodxsm = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; inxyzdpnasvlkasodxsm = java.util.Arrays . copyOfRange ( datagramContents , zklyxdrzjalkbvnmzjeb , iixharvtngwpqrnclnij ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( inxyzdpnasvlkasodxsm ) ; int cjfetslhmfqtftyemdqv = seqNumByteBuffer . getShort () ; return cjfetslhmfqtftyemdqv ; }
√ fix_prediction_before: private static int getSequenceNumber ( byte [] datagramContents ) { int start = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int end = start + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] seqNumArray = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; seqNumArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( seqNumArray ) ; int seqNum = seqNumByteBuffer . getShort () ; return seqNum ; }
√ fix_prediction_after: private static int getSequenceNumber ( byte [] datagramContents ) { int zklyxdrzjalkbvnmzjeb = ( Packet.SENDER_LENGTH ) + ( Packet.RECEIVER_LENGTH ) ; int iixharvtngwpqrnclnij = zklyxdrzjalkbvnmzjeb + ( Packet.SEQUENCE_NUM_LENGTH ) ; byte [] inxyzdpnasvlkasodxsm = new byte [ Packet.SEQUENCE_NUM_LENGTH ] ; inxyzdpnasvlkasodxsm = java.util.Arrays . copyOfRange ( datagramContents , zklyxdrzjalkbvnmzjeb , iixharvtngwpqrnclnij ) ; java.nio.ByteBuffer seqNumByteBuffer = java.nio.ByteBuffer . wrap ( inxyzdpnasvlkasodxsm ) ; int cjfetslhmfqtftyemdqv = seqNumByteBuffer . getShort () ; return cjfetslhmfqtftyemdqv ; }

line_index: 806
bug_before_refactoring: i = 0 <s> @ java.lang.SuppressWarnings ( value = "null" ) public void insertAt ( int item , int pos ) { int i = 0 ; Node newNode = new Node () ; newNode.data = item ; newNode.next = null ; Node temp ; temp = head ; while ( i < ( pos - 1 ) ) { i ++ ; temp = temp.next ; } newNode.next = temp.next ; temp.next = newNode ; } <s> Fixed traversal issue
bug_after_refactoring: szuevymjzddofccxquhz = 0 <s> @ java.lang.SuppressWarnings ( value = "null" ) public void insertAt ( int item , int pos ) { int szuevymjzddofccxquhz = 0 ; Node newNode = new Node () ; newNode.data = item ; newNode.next = null ; Node temp ; temp = head ; while ( i < ( pos - 1 ) ) { i ++ ; temp = temp.next ; } newNode.next = temp.next ; temp.next = newNode ; } <s> Fixed traversal issue
fix_before_refactoring: i = 1
fix_after_refactoring: szuevymjzddofccxquhz = 1
√ fix_prediction_before: i = 1
√ fix_prediction_after: szuevymjzddofccxquhz = 1

line_index: 807
bug_before_refactoring: { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int curPrediction = tree . classify ( vector ) ; treePredictions . add ( curPrediction ) ; } int forestPrediction = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( forestPrediction ) ; } if ( calAccuracy ) { calAccuracy () ; } return finalPredictions ; } <s> public java.util.List < java.lang.Integer > classify ( java.util.List < Utils.DataVector > data , boolean calAccuracy ) { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int curPrediction = tree . classify ( vector ) ; treePredictions . add ( curPrediction ) ; } int forestPrediction = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( forestPrediction ) ; } if ( calAccuracy ) { calAccuracy () ; } return finalPredictions ; } <s> fill incomplete part when refactoring DecisionTree  fix other bugs
bug_after_refactoring: { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int zetzaeraqfniylcgsedk = tree . classify ( vector ) ; treePredictions . add ( zetzaeraqfniylcgsedk ) ; } int ucufvxwpvlzadukbxlkh = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( ucufvxwpvlzadukbxlkh ) ; } if ( calAccuracy ) { calAccuracy () ; } return finalPredictions ; } <s> public java.util.List < java.lang.Integer > classify ( java.util.List < Utils.DataVector > data , boolean calAccuracy ) { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int zetzaeraqfniylcgsedk = tree . classify ( vector ) ; treePredictions . add ( zetzaeraqfniylcgsedk ) ; } int ucufvxwpvlzadukbxlkh = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( ucufvxwpvlzadukbxlkh ) ; } if ( calAccuracy ) { calAccuracy () ; } return finalPredictions ; } <s> fill incomplete part when refactoring DecisionTree  fix other bugs
fix_before_refactoring: { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int curPrediction = tree . classify ( vector ) ; treePredictions . add ( curPrediction ) ; } int forestPrediction = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( forestPrediction ) ; } return finalPredictions ; }
fix_after_refactoring: { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int zetzaeraqfniylcgsedk = tree . classify ( vector ) ; treePredictions . add ( zetzaeraqfniylcgsedk ) ; } int ucufvxwpvlzadukbxlkh = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( ucufvxwpvlzadukbxlkh ) ; } return finalPredictions ; }
√ fix_prediction_before: { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int curPrediction = tree . classify ( vector ) ; treePredictions . add ( curPrediction ) ; } int forestPrediction = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( forestPrediction ) ; } return finalPredictions ; }
√ fix_prediction_after: { for ( Utils.DataVector vector : data ) { java.util.List < java.lang.Integer > treePredictions = new java.util.ArrayList ( data . size () ) ; for ( RandomForestHOG.DecisionTree.DecisionTree tree : dTree ) { int zetzaeraqfniylcgsedk = tree . classify ( vector ) ; treePredictions . add ( zetzaeraqfniylcgsedk ) ; } int ucufvxwpvlzadukbxlkh = Utils.Helper . getModeInt ( treePredictions ) ; finalPredictions . add ( ucufvxwpvlzadukbxlkh ) ; } return finalPredictions ; }

line_index: 808
bug_before_refactoring: { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + userEdited ) + " user edits and restarted the queue" ) ) ; } <s> private void clearUserEdits ( int [] backup ) { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + userEdited ) + " user edits and restarted the queue" ) ) ; } <s> fixed bug with crashing  while cancelling a solveThread
bug_after_refactoring: { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + bwugjvppxbzszkzohwpj ) + " user edits and restarted the queue" ) ) ; } <s> private void clearUserEdits ( int [] backup ) { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } android.util.Log . i ( "SUDOKU" , ( ( "Removed " + bwugjvppxbzszkzohwpj ) + " user edits and restarted the queue" ) ) ; } <s> fixed bug with crashing  while cancelling a solveThread
fix_before_refactoring: { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } }
fix_after_refactoring: { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } }
√ fix_prediction_before: { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } }
√ fix_prediction_after: { int bwugjvppxbzszkzohwpj = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; bwugjvppxbzszkzohwpj ++ ; } } }

line_index: 809
bug_before_refactoring: { for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { int moveCounter = 1 ; if ( tileHasPiece ( ( ( piece . getX () ) + moveCounter ) , i ) ) return true ; moveCounter ++ ; } return false ; } <s> private boolean isNorthEastMovementBlocked ( game.Piece piece , int newX , int newY ) { for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { int moveCounter = 1 ; if ( tileHasPiece ( ( ( piece . getX () ) + moveCounter ) , i ) ) return true ; moveCounter ++ ; } return false ; } <s> Fixed bishop movement bug.
bug_after_refactoring: { for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { int llwhkrigqwwzlpdgybyr = 1 ; if ( tileHasPiece ( ( ( piece . getX () ) + llwhkrigqwwzlpdgybyr ) , i ) ) return true ; llwhkrigqwwzlpdgybyr ++ ; } return false ; } <s> private boolean isNorthEastMovementBlocked ( game.Piece piece , int newX , int newY ) { for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { int llwhkrigqwwzlpdgybyr = 1 ; if ( tileHasPiece ( ( ( piece . getX () ) + llwhkrigqwwzlpdgybyr ) , i ) ) return true ; llwhkrigqwwzlpdgybyr ++ ; } return false ; } <s> Fixed bishop movement bug.
fix_before_refactoring: { int moveCounter = 1 ; for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { if ( tileHasPiece ( ( ( piece . getX () ) + moveCounter ) , i ) ) return true ; moveCounter ++ ; } return false ; }
fix_after_refactoring: { int llwhkrigqwwzlpdgybyr = 1 ; for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { if ( tileHasPiece ( ( ( piece . getX () ) + llwhkrigqwwzlpdgybyr ) , i ) ) return true ; llwhkrigqwwzlpdgybyr ++ ; } return false ; }
√ fix_prediction_before: { int moveCounter = 1 ; for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { if ( tileHasPiece ( ( ( piece . getX () ) + moveCounter ) , i ) ) return true ; moveCounter ++ ; } return false ; }
√ fix_prediction_after: { int llwhkrigqwwzlpdgybyr = 1 ; for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { if ( tileHasPiece ( ( ( piece . getX () ) + llwhkrigqwwzlpdgybyr ) , i ) ) return true ; llwhkrigqwwzlpdgybyr ++ ; } return false ; }

line_index: 812
bug_before_refactoring: public static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; } <s> public static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; } <s> Fix the chat and remove PayloadType enum  Fix the chat (bugs in getters @TransportLayer class) Delete enum class PayloadType  instead use static finals in Payload.java Clean up shortenDatagramPacket method
bug_after_refactoring: public static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; } <s> public static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; } <s> Fix the chat and remove PayloadType enum  Fix the chat (bugs in getters @TransportLayer class) Delete enum class PayloadType  instead use static finals in Payload.java Clean up shortenDatagramPacket method
fix_before_refactoring: private static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; }
fix_after_refactoring: private static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; }
√ fix_prediction_before: private static int getReceiverID ( byte [] datagramContents ) { int start = Packet.RECEIVER_LENGTH ; int end = start + ( Packet.RECEIVER_LENGTH ) ; byte [] receiverIdArray = new byte [ Packet.RECEIVER_LENGTH ] ; receiverIdArray = java.util.Arrays . copyOfRange ( datagramContents , start , end ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( receiverIdArray ) ; int receiverID = receiverIdByteBuffer . getInt () ; return receiverID ; }
√ fix_prediction_after: private static int getReceiverID ( byte [] datagramContents ) { int ezhwzfjsapvuiekmnrsp = Packet.RECEIVER_LENGTH ; int lortbmrnpzfhlkwiqjml = ezhwzfjsapvuiekmnrsp + ( Packet.RECEIVER_LENGTH ) ; byte [] ybmgbkqywyvaeizxzuac = new byte [ Packet.RECEIVER_LENGTH ] ; ybmgbkqywyvaeizxzuac = java.util.Arrays . copyOfRange ( datagramContents , ezhwzfjsapvuiekmnrsp , lortbmrnpzfhlkwiqjml ) ; java.nio.ByteBuffer receiverIdByteBuffer = java.nio.ByteBuffer . wrap ( ybmgbkqywyvaeizxzuac ) ; int kobeuyatduszgkvefimx = receiverIdByteBuffer . getInt () ; return kobeuyatduszgkvefimx ; }

line_index: 818
bug_before_refactoring: if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; } <s> @ java.lang.Override public boolean apply ( @ javax.annotation.Nullable com.gmi.nordborglab.browser.shared.proxy.TraitProxy input ) { if ( input == null ) return true ; boolean isNotFound = true ; for ( com.gmi.nordborglab.browser.shared.proxy.AlleleAssayProxy alleleAssay : input . getObsUnit () . getStock () . getPassport () . getAlleleAssays () ) { if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; } } return isNotFound ; } <s> Fix some bugs regarding the iterator and out of bounds errors
bug_after_refactoring: if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; } <s> @ java.lang.Override public boolean apply ( @ javax.annotation.Nullable com.gmi.nordborglab.browser.shared.proxy.TraitProxy input ) { if ( input == null ) return true ; boolean isNotFound = true ; for ( com.gmi.nordborglab.browser.shared.proxy.AlleleAssayProxy alleleAssay : input . getObsUnit () . getStock () . getPassport () . getAlleleAssays () ) { if ( ( alleleAssay . getId () ) == ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; } } return isNotFound ; } <s> Fix some bugs regarding the iterator and out of bounds errors
fix_before_refactoring: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; }
fix_after_refactoring: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; }
√ fix_prediction_before: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; }
√ fix_prediction_after: if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { ruwhymtbtmywgmvvbcin = false ; break; }

line_index: 821
bug_before_refactoring: if ( highestSlot <= 9 ) { return 9 ; } else if ( highestSlot < 18 ) { return 18 ; } else if ( highestSlot < 27 ) { return 27 ; } else if ( highestSlot < 36 ) { return 36 ; } else if ( highestSlot < 45 ) { return 45 ; } else { return 45 ; } <s> public int getInventorySize () { int highestSlot = getHighestSlot () ; if ( highestSlot <= 9 ) { return 9 ; } else if ( highestSlot < 18 ) { return 18 ; } else if ( highestSlot < 27 ) { return 27 ; } else if ( highestSlot < 36 ) { return 36 ; } else if ( highestSlot < 45 ) { return 45 ; } else { return 45 ; } } <s> Bug fix  update version number
bug_after_refactoring: if ( jmpvhbluzxrtgkufvqlu <= 9 ) { return 9 ; } else if ( jmpvhbluzxrtgkufvqlu < 18 ) { return 18 ; } else if ( jmpvhbluzxrtgkufvqlu < 27 ) { return 27 ; } else if ( jmpvhbluzxrtgkufvqlu < 36 ) { return 36 ; } else if ( jmpvhbluzxrtgkufvqlu < 45 ) { return 45 ; } else { return 45 ; } <s> public int getInventorySize () { int highestSlot = getHighestSlot () ; if ( jmpvhbluzxrtgkufvqlu <= 9 ) { return 9 ; } else if ( jmpvhbluzxrtgkufvqlu < 18 ) { return 18 ; } else if ( jmpvhbluzxrtgkufvqlu < 27 ) { return 27 ; } else if ( jmpvhbluzxrtgkufvqlu < 36 ) { return 36 ; } else if ( jmpvhbluzxrtgkufvqlu < 45 ) { return 45 ; } else { return 45 ; } } <s> Bug fix  update version number
fix_before_refactoring: if ( highestSlot < 9 ) { return 9 ; } else if ( highestSlot < 18 ) { return 18 ; } else if ( highestSlot < 27 ) { return 27 ; } else if ( highestSlot < 36 ) { return 36 ; } else if ( highestSlot < 45 ) { return 45 ; } else { return 45 ; }
fix_after_refactoring: if ( jmpvhbluzxrtgkufvqlu < 9 ) { return 9 ; } else if ( jmpvhbluzxrtgkufvqlu < 18 ) { return 18 ; } else if ( jmpvhbluzxrtgkufvqlu < 27 ) { return 27 ; } else if ( jmpvhbluzxrtgkufvqlu < 36 ) { return 36 ; } else if ( jmpvhbluzxrtgkufvqlu < 45 ) { return 45 ; } else { return 45 ; }
√ fix_prediction_before: if ( highestSlot < 9 ) { return 9 ; } else if ( highestSlot < 18 ) { return 18 ; } else if ( highestSlot < 27 ) { return 27 ; } else if ( highestSlot < 36 ) { return 36 ; } else if ( highestSlot < 45 ) { return 45 ; } else { return 45 ; }
√ fix_prediction_after: if ( jmpvhbluzxrtgkufvqlu < 9 ) { return 9 ; } else if ( jmpvhbluzxrtgkufvqlu < 18 ) { return 18 ; } else if ( jmpvhbluzxrtgkufvqlu < 27 ) { return 27 ; } else if ( jmpvhbluzxrtgkufvqlu < 36 ) { return 36 ; } else if ( jmpvhbluzxrtgkufvqlu < 45 ) { return 45 ; } else { return 45 ; }

line_index: 823
bug_before_refactoring: { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; } <s> public org.avuna.httpd.util.unixsocket.UnixSocket accept ( ) throws java.io.IOException { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; } <s> Fixed unix sockets  problem was freeing stack memory.
bug_after_refactoring: { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; } <s> public org.avuna.httpd.util.unixsocket.UnixSocket accept ( ) throws java.io.IOException { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; } <s> Fixed unix sockets  problem was freeing stack memory.
fix_before_refactoring: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; }
fix_after_refactoring: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; }
√ fix_prediction_before: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; }
√ fix_prediction_after: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; }

line_index: 845
bug_before_refactoring: { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } long stoptime = java.lang.System . currentTimeMillis () ; } <s> public static void phaseThree ( UndirectedGraph < java.lang.Integer , java.lang.Integer > graph , java.util.List < Graph.Vertex < java.lang.Integer > > lowDegreeVertices ) { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } long stoptime = java.lang.System . currentTimeMillis () ; } <s> Fixed bug in detect diamond phase 4 caused by the use of hash set
bug_after_refactoring: { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } long jvbjtbdfgrlouxumrukr = java.lang.System . currentTimeMillis () ; } <s> public static void phaseThree ( UndirectedGraph < java.lang.Integer , java.lang.Integer > graph , java.util.List < Graph.Vertex < java.lang.Integer > > lowDegreeVertices ) { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } long jvbjtbdfgrlouxumrukr = java.lang.System . currentTimeMillis () ; } <s> Fixed bug in detect diamond phase 4 caused by the use of hash set
fix_before_refactoring: { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } }
fix_after_refactoring: { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } }
√ fix_prediction_before: { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } }
√ fix_prediction_after: { for ( Graph.Vertex < java.lang.Integer > v : lowDegreeVertices ) { graph . removeVertex ( graph . getVertexWithElement ( v . getElement () ) ) ; } }

line_index: 853
bug_before_refactoring: { result = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; result ++ ; return result ; } <s> public int getGID () { int result = - 1 ; try { result = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "gid" ) ; return result ; } catch ( java.lang.NumberFormatException ex ) { nationbuilder.lib.Logging.Log . writeInfo ( "gid attribute fetch failed, trying id attribute" ) ; } try { result = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; result ++ ; return result ; } catch ( java.lang.NumberFormatException ex ) { nationbuilder.lib.Logging.Log . writeError ( "Parsing of the Tile GID attribute failed" ) ; return result ; } } <s> NB-16: fixed the problems with the resources not being correctly filled  results in that every visible tile can be claimed
bug_after_refactoring: { ynsnhzvqiququqivpaip = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; ynsnhzvqiququqivpaip ++ ; return ynsnhzvqiququqivpaip ; } <s> public int getGID () { int result = - 1 ; try { result = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "gid" ) ; return result ; } catch ( java.lang.NumberFormatException ex ) { nationbuilder.lib.Logging.Log . writeInfo ( "gid attribute fetch failed, trying id attribute" ) ; } try { ynsnhzvqiququqivpaip = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; ynsnhzvqiququqivpaip ++ ; return ynsnhzvqiququqivpaip ; } catch ( java.lang.NumberFormatException ex ) { nationbuilder.lib.Logging.Log . writeError ( "Parsing of the Tile GID attribute failed" ) ; return result ; } } <s> NB-16: fixed the problems with the resources not being correctly filled  results in that every visible tile can be claimed
fix_before_refactoring: { result = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; return result ; }
fix_after_refactoring: { ynsnhzvqiququqivpaip = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; return ynsnhzvqiququqivpaip ; }
√ fix_prediction_before: { result = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; return result ; }
√ fix_prediction_after: { ynsnhzvqiququqivpaip = nationbuilder.lib.data.map.xml.XmlHelper . getInt ( this . element , "id" ) ; return ynsnhzvqiququqivpaip ; }

line_index: 859
bug_before_refactoring: private void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> private void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> Merge pull request #23 from tkomiya24/cleanup  Fixes issue 22
bug_after_refactoring: private void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> private void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> Merge pull request #23 from tkomiya24/cleanup  Fixes issue 22
fix_before_refactoring: public void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } }
fix_after_refactoring: public void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } }
√ fix_prediction_before: public void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } }
√ fix_prediction_after: public void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } }

line_index: 862
bug_before_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version , true ) <s> public org.apache.cassandra.db.RowIndexEntry < org.apache.cassandra.io.sstable.IndexInfo > deserializeForCache ( org.apache.cassandra.io.util.DataInputPlus in ) throws java.io.IOException { assert version . storeRows () ; long position = in . readUnsignedVInt () ; switch ( in . readByte () ) { case org.apache.cassandra.db.RowIndexEntry.CACHE_NOT_INDEXED : return new org.apache.cassandra.db.RowIndexEntry <> ( position ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED : return new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version , true ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED_SHALLOW : return new org.apache.cassandra.db.RowIndexEntry.ShallowIndexedEntry ( position , in , idxInfoSerializer ) ; default: throw new java.lang.AssertionError () ; } } <s> fix regression (by bug)
bug_after_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version , true ) <s> public org.apache.cassandra.db.RowIndexEntry < org.apache.cassandra.io.sstable.IndexInfo > deserializeForCache ( org.apache.cassandra.io.util.DataInputPlus in ) throws java.io.IOException { assert version . storeRows () ; long position = in . readUnsignedVInt () ; switch ( in . readByte () ) { case org.apache.cassandra.db.RowIndexEntry.CACHE_NOT_INDEXED : return new org.apache.cassandra.db.RowIndexEntry <> ( position ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED : return new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version , true ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED_SHALLOW : return new org.apache.cassandra.db.RowIndexEntry.ShallowIndexedEntry ( position , in , idxInfoSerializer ) ; default: throw new java.lang.AssertionError () ; } } <s> fix regression (by bug)
fix_before_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version )
fix_after_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version )
√ fix_prediction_before: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version )
√ fix_prediction_after: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version )

line_index: 867
bug_before_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } logic . editTask ( taskID , date ) ; return true ; } <s> private boolean editTask ( java.lang.String rawInput ) { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } logic . editTask ( taskID , date ) ; return true ; } <s> fix edit bug
bug_after_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } logic . editTask ( trljrsqruedhnnydmuku , date ) ; return true ; } <s> private boolean editTask ( java.lang.String rawInput ) { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } logic . editTask ( trljrsqruedhnnydmuku , date ) ; return true ; } <s> fix edit bug
fix_before_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } return logic . editTask ( taskID , date ) ; }
fix_after_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } return logic . editTask ( trljrsqruedhnnydmuku , date ) ; }
√ fix_prediction_before: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } return logic . editTask ( taskID , date ) ; }
√ fix_prediction_after: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } return logic . editTask ( trljrsqruedhnnydmuku , date ) ; }

line_index: 878
bug_before_refactoring: public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; } <s> public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; } <s> Fixed bugs in the methods "add()"  "subtract()" and "compareTo()".
bug_after_refactoring: public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; } <s> public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; } <s> Fixed bugs in the methods "add()"  "subtract()" and "compareTo()".
fix_before_refactoring: public de.marsetex.lab2.task3.RationalNumber add ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; }
fix_after_refactoring: public de.marsetex.lab2.task3.RationalNumber add ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; }
√ fix_prediction_before: public de.marsetex.lab2.task3.RationalNumber add ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; }
√ fix_prediction_after: public de.marsetex.lab2.task3.RationalNumber add ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; }

line_index: 881
bug_before_refactoring: float minSpread = 9999 ; <s> java.util.ArrayList < personal.vinay.bigdata.PrepData.Record > setMinSpread ( java.util.ArrayList < personal.vinay.bigdata.PrepData.Record > records ) { float minSpread = 9999 ; for ( personal.vinay.bigdata.PrepData.Record record : records ) { if ( ( ( record . getBidPrice () ) - ( record . getAskPrice () ) ) < minSpread ) { minSpread = ( record . getBidPrice () ) - ( record . getAskPrice () ) ; } } for ( personal.vinay.bigdata.PrepData.Record record : records ) { record . setMinSpread ( minSpread ) ; } return records ; } <s> fixed few bugs
bug_after_refactoring: float nvmzhamtblwpqtzcbida = 9999 ; <s> java.util.ArrayList < personal.vinay.bigdata.PrepData.Record > setMinSpread ( java.util.ArrayList < personal.vinay.bigdata.PrepData.Record > records ) { float nvmzhamtblwpqtzcbida = 9999 ; for ( personal.vinay.bigdata.PrepData.Record record : records ) { if ( ( ( record . getBidPrice () ) - ( record . getAskPrice () ) ) < minSpread ) { minSpread = ( record . getBidPrice () ) - ( record . getAskPrice () ) ; } } for ( personal.vinay.bigdata.PrepData.Record record : records ) { record . setMinSpread ( minSpread ) ; } return records ; } <s> fixed few bugs
fix_before_refactoring: double minSpread = 9999 ;
fix_after_refactoring: double nvmzhamtblwpqtzcbida = 9999 ;
√ fix_prediction_before: double minSpread = 9999 ;
√ fix_prediction_after: double nvmzhamtblwpqtzcbida = 9999 ;


line_index: 100
bug_before_refactoring: private java.math.BigInteger getNum ( int k , cz.tomkren.fishtron.types.Type t_NF ) { if ( opts . isCachingUsed () ) { return cache . getNum ( k , t_NF ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomkren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( k , t_NF , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } } <s> private java.math.BigInteger getNum ( int k , cz.tomkren.fishtron.types.Type t_NF ) { if ( opts . isCachingUsed () ) { return cache . getNum ( k , t_NF ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomkren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( k , t_NF , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } } <s> ugen bugfix in subs packing  different nvi may occure
bug_after_refactoring: private java.math.BigInteger getNum ( int ghganskeoenlcdcvblft , cz.tomghganskeoenlcdcvblftren.fishtron.types.Type fibwofixoghownwvmzjt ) { if ( opts . isCachingUsed () ) { return cache . getNum ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomghganskeoenlcdcvblftren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } } <s> private java.math.BigInteger getNum ( int ghganskeoenlcdcvblft , cz.tomghganskeoenlcdcvblftren.fishtron.types.Type fibwofixoghownwvmzjt ) { if ( opts . isCachingUsed () ) { return cache . getNum ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomghganskeoenlcdcvblftren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } } <s> ugen bugfix in subs packing  different nvi may occure
fix_before_refactoring: public java.math.BigInteger getNum ( int k , cz.tomkren.fishtron.types.Type t_NF ) { if ( opts . isCachingUsed () ) { return cache . getNum ( k , t_NF ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomkren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( k , t_NF , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } }
fix_after_refactoring: public java.math.BigInteger getNum ( int ghganskeoenlcdcvblft , cz.tomghganskeoenlcdcvblftren.fishtron.types.Type fibwofixoghownwvmzjt ) { if ( opts . isCachingUsed () ) { return cache . getNum ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomghganskeoenlcdcvblftren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } }
√ fix_prediction_before: public java.math.BigInteger getNum ( int k , cz.tomkren.fishtron.types.Type t_NF ) { if ( opts . isCachingUsed () ) { return cache . getNum ( k , t_NF ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomkren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( k , t_NF , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } }
√ fix_prediction_after: public java.math.BigInteger getNum ( int ghganskeoenlcdcvblft , cz.tomghganskeoenlcdcvblftren.fishtron.types.Type fibwofixoghownwvmzjt ) { if ( opts . isCachingUsed () ) { return cache . getNum ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt ) ; } else { java.math.BigInteger sum = java.math.BigInteger.ZERO ; for ( cz.tomghganskeoenlcdcvblftren.fishtron.ugen.data.SubsRes subsRes : subs_compute ( ghganskeoenlcdcvblft , fibwofixoghownwvmzjt , 0 ) ) { sum = sum . add ( subsRes . getNum () ) ; } return sum ; } }

line_index: 167
bug_before_refactoring: public com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long issueId ) { if ( getCurrentIssue ( issueId ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( issueId ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; } <s> public com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long issueId ) { if ( getCurrentIssue ( issueId ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( issueId ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; } <s> fix issueComments UI  refactor code
bug_after_refactoring: public com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long pxihouwhuhxcqrjkjonf ) { if ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; } <s> public com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long pxihouwhuhxcqrjkjonf ) { if ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; } <s> fix issueComments UI  refactor code
fix_before_refactoring: private com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long issueId ) { if ( getCurrentIssue ( issueId ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( issueId ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; }
fix_after_refactoring: private com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long pxihouwhuhxcqrjkjonf ) { if ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; }
√ fix_prediction_before: private com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long issueId ) { if ( getCurrentIssue ( issueId ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( issueId ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; }
√ fix_prediction_after: private com.softserverinc.edu.entities.WorkLog getNewWorkLog ( java.lang.Long pxihouwhuhxcqrjkjonf ) { if ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) . getAssignee () . equals ( workLogSecurityService . getActiveUser () ) ) { com.softserverinc.edu.entities.WorkLog workLog = new com.softserverinc.edu.entities.WorkLog () ; workLog . setIssue ( getCurrentIssue ( pxihouwhuhxcqrjkjonf ) ) ; workLog . setUser ( workLogSecurityService . getActiveUser () ) ; return workLog ; } return null ; }

line_index: 210
bug_before_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
bug_after_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > zjaiubpzvzepqmaiyfju ) { int score = 0 ; for ( int i = 0 ; i < ( zjaiubpzvzepqmaiyfju . size () ) ; i ++ ) { score += zjaiubpzvzepqmaiyfju . get ( i ) . getPair () . getScore () ; } return score ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > zjaiubpzvzepqmaiyfju ) { int score = 0 ; for ( int i = 0 ; i < ( zjaiubpzvzepqmaiyfju . size () ) ; i ++ ) { score += zjaiubpzvzepqmaiyfju . get ( i ) . getPair () . getScore () ; } return score ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
fix_before_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
fix_after_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > zjaiubpzvzepqmaiyfju ) { int score = 0 ; for ( int i = 0 ; i < ( zjaiubpzvzepqmaiyfju . size () ) ; i ++ ) { score += zjaiubpzvzepqmaiyfju . get ( i ) . getPair () . getScore () ; } return score ; }
√ fix_prediction_before: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
√ fix_prediction_after: public static int calculateScore ( java.util.ArrayList < PairTime > zjaiubpzvzepqmaiyfju ) { int score = 0 ; for ( int i = 0 ; i < ( zjaiubpzvzepqmaiyfju . size () ) ; i ++ ) { score += zjaiubpzvzepqmaiyfju . get ( i ) . getPair () . getScore () ; } return score ; }

line_index: 329
bug_before_refactoring: private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document document ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( document ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = document . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; if ( child != null ) { entity . addChild ( child ) ; } } return entity ; } <s> private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document document ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( document ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = document . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; if ( child != null ) { entity . addChild ( child ) ; } } return entity ; } <s> Bug fixes from ACE.
bug_after_refactoring: private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document bixbfmfahiysrkpkjmfp ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( bixbfmfahiysrkpkjmfp ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = bixbfmfahiysrkpkjmfp . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; if ( child != null ) { entity . addChild ( child ) ; } } return entity ; } <s> private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document bixbfmfahiysrkpkjmfp ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( bixbfmfahiysrkpkjmfp ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = bixbfmfahiysrkpkjmfp . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; if ( child != null ) { entity . addChild ( child ) ; } } return entity ; } <s> Bug fixes from ACE.
fix_before_refactoring: private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document document ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( document ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = document . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; entity . addChild ( child ) ; } return entity ; }
fix_after_refactoring: private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document bixbfmfahiysrkpkjmfp ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( bixbfmfahiysrkpkjmfp ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = bixbfmfahiysrkpkjmfp . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; entity . addChild ( child ) ; } return entity ; }
√ fix_prediction_before: private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document document ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( document ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = document . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; entity . addChild ( child ) ; } return entity ; }
√ fix_prediction_after: private au.com.mutopia.acs.models.c3ml.C3mlEntity buildEntity ( de.micromata.opengis.kml.v_2_2_0.Document bixbfmfahiysrkpkjmfp ) throws au.com.mutopia.acs.exceptions.ConversionException { au.com.mutopia.acs.models.c3ml.C3mlEntity entity = createEntity ( bixbfmfahiysrkpkjmfp ) ; java.util.List < de.micromata.opengis.kml.v_2_2_0.Feature > features = bixbfmfahiysrkpkjmfp . getFeature () ; for ( de.micromata.opengis.kml.v_2_2_0.Feature feature : features ) { au.com.mutopia.acs.models.c3ml.C3mlEntity child = buildEntity ( feature ) ; entity . addChild ( child ) ; } return entity ; }

line_index: 390
bug_before_refactoring: private void showWarningToUser ( android.os.Message msg ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( msg.obj ) ) ) ; startActivity ( intent ) ; } <s> private void showWarningToUser ( android.os.Message msg ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( msg.obj ) ) ) ; startActivity ( intent ) ; } <s> [test] add tests and [minor] fixed some small bugs
bug_after_refactoring: private void showWarningToUser ( android.os.Message gfgfbhpfgtjxyzkjzgac ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( gfgfbhpfgtjxyzkjzgac.obj ) ) ) ; startActivity ( intent ) ; } <s> private void showWarningToUser ( android.os.Message gfgfbhpfgtjxyzkjzgac ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( gfgfbhpfgtjxyzkjzgac.obj ) ) ) ; startActivity ( intent ) ; } <s> [test] add tests and [minor] fixed some small bugs
fix_before_refactoring: public void showWarningToUser ( android.os.Message msg ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( msg.obj ) ) ) ; startActivity ( intent ) ; }
fix_after_refactoring: public void showWarningToUser ( android.os.Message gfgfbhpfgtjxyzkjzgac ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( gfgfbhpfgtjxyzkjzgac.obj ) ) ) ; startActivity ( intent ) ; }
√ fix_prediction_before: public void showWarningToUser ( android.os.Message msg ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( msg.obj ) ) ) ; startActivity ( intent ) ; }
√ fix_prediction_after: public void showWarningToUser ( android.os.Message gfgfbhpfgtjxyzkjzgac ) { android.content.Intent intent = new android.content.Intent ( this , com.juliansparber.vpnMITM.UserAlertDialog . class ) ; intent . addFlags ( ( ( ( android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT ) ) ) ; intent . putExtra ( UserAlertDialog.PAYLOAD , ( ( java.lang.String [] ) ( gfgfbhpfgtjxyzkjzgac.obj ) ) ) ; startActivity ( intent ) ; }

line_index: 416
bug_before_refactoring: public int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } <s> public int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } <s> Fixed recent history updated bug
bug_after_refactoring: public int findHistoryRecord ( java.lang.String exokdefudtejzgbvasnn ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.exokdefudtejzgbvasnn ) == exokdefudtejzgbvasnn ) { return i + 1 ; } } return 0 ; } <s> public int findHistoryRecord ( java.lang.String exokdefudtejzgbvasnn ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.exokdefudtejzgbvasnn ) == exokdefudtejzgbvasnn ) { return i + 1 ; } } return 0 ; } <s> Fixed recent history updated bug
fix_before_refactoring: private int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; }
fix_after_refactoring: private int findHistoryRecord ( java.lang.String exokdefudtejzgbvasnn ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.exokdefudtejzgbvasnn ) == exokdefudtejzgbvasnn ) { return i + 1 ; } } return 0 ; }
√ fix_prediction_before: private int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; }
√ fix_prediction_after: private int findHistoryRecord ( java.lang.String exokdefudtejzgbvasnn ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.exokdefudtejzgbvasnn ) == exokdefudtejzgbvasnn ) { return i + 1 ; } } return 0 ; }

line_index: 582
bug_before_refactoring: private static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; } <s> private static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; } <s> Fixing a bug (validate time stamp  check for future data)
bug_after_refactoring: private static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; } <s> private static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; } <s> Fixing a bug (validate time stamp  check for future data)
fix_before_refactoring: public static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; }
fix_after_refactoring: public static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; }
√ fix_prediction_before: public static boolean validatePriority ( java.lang.String priority ) { if ( priority == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( priority ) ) return true ; } return false ; }
√ fix_prediction_after: public static boolean validatePriority ( java.lang.String tnjfpfipdakqfgxototh ) { if ( tnjfpfipdakqfgxototh == null ) { return false ; } for ( model.map.Priority p : model.map.Priority . values () ) { if ( p . toString () . equals ( tnjfpfipdakqfgxototh ) ) return true ; } return false ; }

line_index: 588
bug_before_refactoring: public static void deleteTimer ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> public static void deleteTimer ( final java.lang.String name ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
bug_after_refactoring: public static void deleteTimer ( final java.lang.String xovopqorauaqkrhfzcxx ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( xovopqorauaqkrhfzcxx ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> public static void deleteTimer ( final java.lang.String xovopqorauaqkrhfzcxx ) { synchronized ( com.sb.elsinore.LaunchControl.timerLock ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( xovopqorauaqkrhfzcxx ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } } <s> Fix creating and deleting PIDs. Remove synchronization. Fix a temp parse bug
fix_before_refactoring: public static void deleteTimer ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }
fix_after_refactoring: public static void deleteTimer ( final java.lang.String xovopqorauaqkrhfzcxx ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( xovopqorauaqkrhfzcxx ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }
√ fix_prediction_before: public static void deleteTimer ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }
√ fix_prediction_after: public static void deleteTimer ( final java.lang.String xovopqorauaqkrhfzcxx ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( xovopqorauaqkrhfzcxx ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } }

line_index: 644
bug_before_refactoring: public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
bug_after_refactoring: public int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> public int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
fix_before_refactoring: private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; }
fix_after_refactoring: private int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; }
√ fix_prediction_before: private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; }
√ fix_prediction_after: private int getPlayerForLine ( final int zuvpkorkgytfcsoiidnx , final java.lang.String icjsujrajvdmzzobzczg ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( zuvpkorkgytfcsoiidnx ) ) ; i ++ ) { if ( ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) ) != null ) && ( ( board . getFigure ( zuvpkorkgytfcsoiidnx , i ) . toString () ) == icjsujrajvdmzzobzczg ) ) { playerRowCount ++ ; } } return playerRowCount ; }


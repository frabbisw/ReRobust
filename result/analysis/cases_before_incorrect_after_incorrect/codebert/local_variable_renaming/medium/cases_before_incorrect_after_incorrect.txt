line_index: 1
bug_before_refactoring: protected boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean found = matcher . find () ; if ( found ) { textPane . setSelectionStart ( matcher . start () ) ; textPane . setSelectionEnd ( matcher . end () ) ; } return found ; } <s> protected boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean found = matcher . find () ; if ( found ) { textPane . setSelectionStart ( matcher . start () ) ; textPane . setSelectionEnd ( matcher . end () ) ; } return found ; } <s> Bug fix  fix1: Wrong selection of find text fix2: Document change not updating on read file
bug_after_refactoring: protected boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean czsdntpxojzbfvfrplke = matcher . find () ; if ( czsdntpxojzbfvfrplke ) { textPane . setSelectionStart ( matcher . start () ) ; textPane . setSelectionEnd ( matcher . end () ) ; } return czsdntpxojzbfvfrplke ; } <s> protected boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean czsdntpxojzbfvfrplke = matcher . find () ; if ( czsdntpxojzbfvfrplke ) { textPane . setSelectionStart ( matcher . start () ) ; textPane . setSelectionEnd ( matcher . end () ) ; } return czsdntpxojzbfvfrplke ; } <s> Bug fix  fix1: Wrong selection of find text fix2: Document change not updating on read file
fix_before_refactoring: public boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean found = matcher . find () ; if ( found ) textPane . select ( matcher . start () , matcher . end () ) ; return found ; }
fix_after_refactoring: public boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean czsdntpxojzbfvfrplke = matcher . find () ; if ( czsdntpxojzbfvfrplke ) textPane . select ( matcher . start () , matcher . end () ) ; return czsdntpxojzbfvfrplke ; }
× fix_prediction_before: protected boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean found = matcher . find () ; if ( found ) { textPane . setSelectionStart ( matcher . start () ) ; textPane . setSelectionEnd ( matcher . end () ) ; } return found ; }
× fix_prediction_after: protected boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean czsdntpxojzbfvfrplke = matcher . find () ; if ( czsdntpxojzbfvfrplke ) { textPane . setSelectionStart ( matcher . start () ) ; textPane . setSelectionEnd ( matcher . end () ) ; } return czsdntpxojzbfvfrplke ; }

line_index: 2
bug_before_refactoring: if ( ( ( _transactions ) != null ) && ( ! ( _transactions . hasNext () ) ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int quantity = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , quantity , payment ) ; } <s> public csc668assignment1.Transaction readNextTransaction () { if ( ( ( _transactions ) != null ) && ( ! ( _transactions . hasNext () ) ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int quantity = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , quantity , payment ) ; } } <s> Fixed logic Error in UserInterface error handling
bug_after_refactoring: if ( ( ( _transactions ) != null ) && ( ! ( _transactions . hasNext () ) ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int btnrhjxpjyjwymisquyd = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , btnrhjxpjyjwymisquyd , payment ) ; } <s> public csc668assignment1.Transaction readNextTransaction () { if ( ( ( _transactions ) != null ) && ( ! ( _transactions . hasNext () ) ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int btnrhjxpjyjwymisquyd = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , btnrhjxpjyjwymisquyd , payment ) ; } } <s> Fixed logic Error in UserInterface error handling
fix_before_refactoring: if ( ( ( _transactions ) == null ) || ( ! ( _transactions . hasNext () ) ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int quantity = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , quantity , payment ) ; }
fix_after_refactoring: if ( ( ( _transactions ) == null ) || ( ! ( _transactions . hasNext () ) ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int btnrhjxpjyjwymisquyd = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , btnrhjxpjyjwymisquyd , payment ) ; }
× fix_prediction_before: if ( ! ( _transactions . hasNext () ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int quantity = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , quantity , payment ) ; }
× fix_prediction_after: if ( ! ( _transactions . hasNext () ) ) return null ; else { java.lang.String name = _transactions . getName () ; java.lang.String upc = _transactions . getUPC () ; int btnrhjxpjyjwymisquyd = _transactions . getQuantity () ; csc668assignment1.Payments.Payment payment = _transactions . getPayment () ; return new csc668assignment1.Transaction ( name , upc , btnrhjxpjyjwymisquyd , payment ) ; }

line_index: 4
bug_before_refactoring: if ( ( start != ( - 1 ) ) || ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; <s> public int parseRaceNumber () { int start = this . name . indexOf ( "_" ) ; int stop = this . name . indexOf ( "_" , ( start + 1 ) ) ; if ( ( start != ( - 1 ) ) || ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; } <s> Get Year from XML input file rather than hard-coding Fix event name parsing bug Tweak XML parsing for eventor
bug_after_refactoring: if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) || ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; <s> public int parseRaceNumber () { int start = this . name . indexOf ( "_" ) ; int stop = this . name . indexOf ( "_" , ( start + 1 ) ) ; if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) || ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ; } <s> Get Year from XML input file rather than hard-coding Fix event name parsing bug Tweak XML parsing for eventor
fix_before_refactoring: if ( ( start != ( - 1 ) ) && ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ;
fix_after_refactoring: if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) && ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 1 ;
× fix_prediction_before: if ( ( start != ( - 1 ) ) && ( stop != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( start + 1 ) , stop ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 0 ;
× fix_prediction_after: if ( ( xgqtncdxoinkdrqzgitv != ( - 1 ) ) && ( iwustnlzswhpnretdvee != ( - 1 ) ) ) { java.lang.String sRaceNumber = this . name . substring ( ( xgqtncdxoinkdrqzgitv + 1 ) , iwustnlzswhpnretdvee ) ; this . raceNumber = java.lang.Integer . parseInt ( sRaceNumber ) ; return this . raceNumber ; } else return 0 ;

line_index: 5
bug_before_refactoring: if ( firstByte != ( - 1 ) ) { final int size = com.google.protobuf.CodedInputStream . readRawVarint32 ( firstByte , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , size ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( size ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; } <s> public static void mergeDelimitedFrom ( com.google.protobuf.Message.Builder builder , java.io.InputStream in ) throws java.io.IOException { final int firstByte = in . read () ; if ( firstByte != ( - 1 ) ) { final int size = com.google.protobuf.CodedInputStream . readRawVarint32 ( firstByte , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , size ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( size ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; } } <s> Revert "Fix the warnings in Checkstyle and FindBugs brought in by merging"  This reverts commit 89d04094626abebf279e9f64d597a7085bfc8fcf.
bug_after_refactoring: if ( bwwvibbqpsnfcmpmkfyx != ( - 1 ) ) { final int mjkyupxccjfqhnjzgymb = com.google.protobuf.CodedInputStream . readRawVarint32 ( bwwvibbqpsnfcmpmkfyx , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , mjkyupxccjfqhnjzgymb ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( mjkyupxccjfqhnjzgymb ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; } <s> public static void mergeDelimitedFrom ( com.google.protobuf.Message.Builder builder , java.io.InputStream in ) throws java.io.IOException { final int firstByte = in . read () ; if ( bwwvibbqpsnfcmpmkfyx != ( - 1 ) ) { final int mjkyupxccjfqhnjzgymb = com.google.protobuf.CodedInputStream . readRawVarint32 ( bwwvibbqpsnfcmpmkfyx , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , mjkyupxccjfqhnjzgymb ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( mjkyupxccjfqhnjzgymb ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; } } <s> Revert "Fix the warnings in Checkstyle and FindBugs brought in by merging"  This reverts commit 89d04094626abebf279e9f64d597a7085bfc8fcf.
fix_before_refactoring: if ( firstByte == ( - 1 ) ) {} else { final int size = com.google.protobuf.CodedInputStream . readRawVarint32 ( firstByte , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , size ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( size ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; }
fix_after_refactoring: if ( bwwvibbqpsnfcmpmkfyx == ( - 1 ) ) {} else { final int mjkyupxccjfqhnjzgymb = com.google.protobuf.CodedInputStream . readRawVarint32 ( bwwvibbqpsnfcmpmkfyx , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , mjkyupxccjfqhnjzgymb ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( mjkyupxccjfqhnjzgymb ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; }
× fix_prediction_before: if ( firstByte != ( - 1 ) ) { final int size = com.google.protobuf.CodedInputStream . readRawVarint32 ( firstByte , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , size ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( size ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; }
× fix_prediction_after: if ( ( bwwvibbqpsnfcmpmkfyx != ( - 1 ) ) && ( bwwvibbqpsnfcmpmkfyx != ( - 1 ) ) ) { final int mjkyupxccjfqhnjzgymb = com.google.protobuf.CodedInputStream . readRawVarint32 ( bwwvibbqpsnfcmpmkfyx , in ) ; final java.io.InputStream limitedInput = new org.apache.hadoop.hbase.io.LimitInputStream ( in , mjkyupxccjfqhnjzgymb ) ; final com.google.protobuf.CodedInputStream codedInput = com.google.protobuf.CodedInputStream . newInstance ( limitedInput ) ; codedInput . setSizeLimit ( mjkyupxccjfqhnjzgymb ) ; builder . mergeFrom ( codedInput ) ; codedInput . checkLastTagWas ( 0 ) ; }

line_index: 6
bug_before_refactoring: { byte [] body = request . getBody () ; if ( body != null ) { connection . setDoOutput ( true ) ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( body ) ; out . close () ; } } <s> private static void addBodyIfExists ( java.net.HttpURLConnection connection , com.android.volley.Request < ? > request ) throws com.android.volley.AuthFailureError , java.io.IOException { byte [] body = request . getBody () ; if ( body != null ) { connection . setDoOutput ( true ) ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( body ) ; out . close () ; } } <s> fix the bug losting ContentType without Body
bug_after_refactoring: { byte [] kgaqubqbjctovpkcggef = request . getBody () ; if ( kgaqubqbjctovpkcggef != null ) { connection . setDoOutput ( true ) ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( kgaqubqbjctovpkcggef ) ; out . close () ; } } <s> private static void addBodyIfExists ( java.net.HttpURLConnection connection , com.android.volley.Request < ? > request ) throws com.android.volley.AuthFailureError , java.io.IOException { byte [] kgaqubqbjctovpkcggef = request . getBody () ; if ( kgaqubqbjctovpkcggef != null ) { connection . setDoOutput ( true ) ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( kgaqubqbjctovpkcggef ) ; out . close () ; } } <s> fix the bug losting ContentType without Body
fix_before_refactoring: { byte [] body = request . getBody () ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; if ( body != null ) { connection . setDoOutput ( true ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( body ) ; out . close () ; } }
fix_after_refactoring: { byte [] kgaqubqbjctovpkcggef = request . getBody () ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; if ( kgaqubqbjctovpkcggef != null ) { connection . setDoOutput ( true ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( kgaqubqbjctovpkcggef ) ; out . close () ; } }
× fix_prediction_before: { if ( request == null ) { return; } byte [] body = request . getBody () ; if ( body != null ) { connection . setDoOutput ( true ) ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( body ) ; out . close () ; } }
× fix_prediction_after: { byte [] kgaqubqbjctovpkcggef = request . getBody () ; if ( kgaqubqbjctovpkcggef != null ) { connection . setDoOutput ( true ) ; connection . addRequestProperty ( com.android.volley.toolbox.HurlStack.HEADER_CONTENT_TYPE , request . getBodyContentType () ) ; java.io.DataOutputStream out = new java.io.DataOutputStream ( connection . getOutputStream () ) ; out . write ( kgaqubqbjctovpkcggef ) ; out . close () ; } }

line_index: 7
bug_before_refactoring: public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> Distributed: fixed issue with timeouts
bug_after_refactoring: public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int tbaojmqavdchsxhfrpsw = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != tbaojmqavdchsxhfrpsw ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int tbaojmqavdchsxhfrpsw = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != tbaojmqavdchsxhfrpsw ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } <s> Distributed: fixed issue with timeouts
fix_before_refactoring: protected java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }
fix_after_refactoring: protected java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int tbaojmqavdchsxhfrpsw = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != tbaojmqavdchsxhfrpsw ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }
× fix_prediction_before: private java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }
× fix_prediction_after: public java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int tbaojmqavdchsxhfrpsw = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != tbaojmqavdchsxhfrpsw ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; }

line_index: 8
bug_before_refactoring: for ( int i = ( ( bytestream.length ) - 1 ) * 8 ; i > 0 ; i -- ) { int byte_offset = i / 8 ; int bit_offset = i % 8 ; byte valByte = bytestream [ byte_offset ] ; int valInt = ( valByte > > ( 8 - ( bit_offset + 1 ) ) ) & 1 ; if ( valInt == 1 ) { trailingBitOffSet = i ; break; } } <s> public void rbsp_trailing_bits () { for ( int i = ( ( bytestream.length ) - 1 ) * 8 ; i > 0 ; i -- ) { int byte_offset = i / 8 ; int bit_offset = i % 8 ; byte valByte = bytestream [ byte_offset ] ; int valInt = ( valByte > > ( 8 - ( bit_offset + 1 ) ) ) & 1 ; if ( valInt == 1 ) { trailingBitOffSet = i ; break; } } } <s> bug fix and sub mb pred implementation
bug_after_refactoring: for ( int i = ( ( bytestream.length ) - 1 ) * 8 ; i > 0 ; i -- ) { int dpgwedibhduulsxpmqkv = i / 8 ; int kuuybqdebignqhykqbjq = i % 8 ; byte huloloteyfelnvcwowbv = bytestream [ dpgwedibhduulsxpmqkv ] ; int xwwhidjhkqtrhempruce = ( huloloteyfelnvcwowbv > > ( 8 - ( kuuybqdebignqhykqbjq + 1 ) ) ) & 1 ; if ( xwwhidjhkqtrhempruce == 1 ) { trailingBitOffSet = i ; break; } } <s> public void rbsp_trailing_bits () { for ( int i = ( ( bytestream.length ) - 1 ) * 8 ; i > 0 ; i -- ) { int dpgwedibhduulsxpmqkv = i / 8 ; int kuuybqdebignqhykqbjq = i % 8 ; byte huloloteyfelnvcwowbv = bytestream [ dpgwedibhduulsxpmqkv ] ; int xwwhidjhkqtrhempruce = ( huloloteyfelnvcwowbv > > ( 8 - ( kuuybqdebignqhykqbjq + 1 ) ) ) & 1 ; if ( xwwhidjhkqtrhempruce == 1 ) { trailingBitOffSet = i ; break; } } } <s> bug fix and sub mb pred implementation
fix_before_refactoring: for ( int i = ( ( bytestream.length ) * 8 ) - 1 ; i >= 0 ; i -- ) { int byte_offset = i / 8 ; int bit_offset = i % 8 ; byte valByte = bytestream [ byte_offset ] ; int valInt = ( valByte > > ( 8 - ( bit_offset + 1 ) ) ) & 1 ; if ( valInt == 1 ) { trailingBitOffSet = i ; break; } }
fix_after_refactoring: for ( int i = ( ( bytestream.length ) * 8 ) - 1 ; i >= 0 ; i -- ) { int dpgwedibhduulsxpmqkv = i / 8 ; int kuuybqdebignqhykqbjq = i % 8 ; byte huloloteyfelnvcwowbv = bytestream [ dpgwedibhduulsxpmqkv ] ; int xwwhidjhkqtrhempruce = ( huloloteyfelnvcwowbv > > ( 8 - ( kuuybqdebignqhykqbjq + 1 ) ) ) & 1 ; if ( xwwhidjhkqtrhempruce == 1 ) { trailingBitOffSet = i ; break; } }
× fix_prediction_before: for ( int i = ( bytestream.length ) - 1 ; i >= 0 ; i -- ) { int byte_offset = i / 8 ; int bit_offset = i % 8 ; byte valByte = bytestream [ byte_offset ] ; int valInt = ( valByte > > ( 8 - ( bit_offset + 1 ) ) ) & 1 ; if ( valInt == 1 ) { trailingBitOffSet = i ; break; } }
× fix_prediction_after: for ( int i = ( bytestream.length ) - 1 ; i >= 0 ; i -- ) { int dpgwedibhduulsxpmqkv = i / 8 ; int kuuybqdebignqhykqbjq = i % 8 ; byte huloloteyfelnvcwowbv = bytestream [ dpgwedibhduulsxpmqkv ] ; int xwwhidjhkqtrhempruce = ( huloloteyfelnvcwowbv > > ( 8 - ( kuuybqdebignqhykqbjq + 1 ) ) ) & 1 ; if ( xwwhidjhkqtrhempruce == 1 ) { trailingBitOffSet = i ; break; } }

line_index: 9
bug_before_refactoring: switch ( c ) { case ' ' : continue; case ',' : case ')' : return i + 1 ; default: argument . append ( c ) ; } <s> private static int argument ( char [] array , int cursor , java.lang.StringBuilder argument ) { for ( int i = cursor ; i < ( array.length ) ; i ++ ) { char c = array [ i ] ; switch ( c ) { case ' ' : continue; case ',' : case ')' : return i + 1 ; default: argument . append ( c ) ; } } return array.length ; } <s> Fixed bug in query arguments containing spaces
bug_after_refactoring: switch ( hwxntovkgypfuncflfwk ) { case ' ' : continue; case ',' : case ')' : return i + 1 ; default: argument . append ( hwxntovkgypfuncflfwk ) ; } <s> private static int argument ( char [] array , int cursor , java.lang.StringBuilder argument ) { for ( int i = cursor ; i < ( array.length ) ; i ++ ) { char c = array [ i ] ; switch ( hwxntovkgypfuncflfwk ) { case ' ' : continue; case ',' : case ')' : return i + 1 ; default: argument . append ( hwxntovkgypfuncflfwk ) ; } } return array.length ; } <s> Fixed bug in query arguments containing spaces
fix_before_refactoring: switch ( c ) { case ',' : case ')' : return i + 1 ; case ' ' : if ( ( argument . length () ) == 0 ) continue; default: argument . append ( c ) ; }
fix_after_refactoring: switch ( hwxntovkgypfuncflfwk ) { case ',' : case ')' : return i + 1 ; case ' ' : if ( ( argument . length () ) == 0 ) continue; default: argument . append ( hwxntovkgypfuncflfwk ) ; }
× fix_prediction_before: switch ( c ) { case ' ' : continue; case ',' : case ')' : return i + 1 ; default: argument . append ( c ) ; }
× fix_prediction_after: switch ( hwxntovkgypfuncflfwk ) { case ' ' : continue; case ',' : case ')' : return i ; default: argument . append ( hwxntovkgypfuncflfwk ) ; }

line_index: 10
bug_before_refactoring: if ( ( proposedBillCycleDate < billingCycleDay ) && ( billingCycleDay <= lastDayOfMonth ) ) { proposedBillCycleDate = billingCycleDay ; } <s> public static org.joda.time.LocalDate alignProposedBillCycleDate ( final org.joda.time.LocalDate proposedDate , final int billingCycleDay ) { final int lastDayOfMonth = proposedDate . dayOfMonth () . getMaximumValue () ; int proposedBillCycleDate = proposedDate . getDayOfMonth () ; if ( ( proposedBillCycleDate < billingCycleDay ) && ( billingCycleDay <= lastDayOfMonth ) ) { proposedBillCycleDate = billingCycleDay ; } return new org.joda.time.LocalDate ( proposedDate . getYear () , proposedDate . getMonthOfYear () , proposedBillCycleDate , proposedDate . getChronology () ) ; } <s> Fix invoicing issue when BCD is larger than end of month (special scenario with February). See #127
bug_after_refactoring: if ( ( hhyckbqcxrdhpjnoanad < billingCycleDay ) && ( billingCycleDay <= kiglokcbwsupqalxogwa ) ) { hhyckbqcxrdhpjnoanad = billingCycleDay ; } <s> public static org.joda.time.LocalDate alignProposedBillCycleDate ( final org.joda.time.LocalDate proposedDate , final int billingCycleDay ) { final int lastDayOfMonth = proposedDate . dayOfMonth () . getMaximumValue () ; int proposedBillCycleDate = proposedDate . getDayOfMonth () ; if ( ( hhyckbqcxrdhpjnoanad < billingCycleDay ) && ( billingCycleDay <= kiglokcbwsupqalxogwa ) ) { hhyckbqcxrdhpjnoanad = billingCycleDay ; } return new org.joda.time.LocalDate ( proposedDate . getYear () , proposedDate . getMonthOfYear () , proposedBillCycleDate , proposedDate . getChronology () ) ; } <s> Fix invoicing issue when BCD is larger than end of month (special scenario with February). See #127
fix_before_refactoring: if ( proposedBillCycleDate < billingCycleDay ) { if ( billingCycleDay <= lastDayOfMonth ) { proposedBillCycleDate = billingCycleDay ; } else { proposedBillCycleDate = lastDayOfMonth ; } }
fix_after_refactoring: if ( hhyckbqcxrdhpjnoanad < billingCycleDay ) { if ( billingCycleDay <= kiglokcbwsupqalxogwa ) { hhyckbqcxrdhpjnoanad = billingCycleDay ; } else { hhyckbqcxrdhpjnoanad = kiglokcbwsupqalxogwa ; } }
× fix_prediction_before: if ( ( proposedBillCycleDate < billingCycleDay ) && ( billingCycleDay <= lastDayOfMonth ) ) { proposedBillCycleDate = billingCycleDay ; }
× fix_prediction_after: if ( ( hhyckbqcxrdhpjnoanad < billingCycleDay ) && ( billingCycleDay <= kiglokcbwsupqalxogwa ) ) { hhyckbqcxrdhpjnoanad = billingCycleDay ; }

line_index: 11
bug_before_refactoring: if ( timeLeft >= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return timeLeft ; } <s> private long checkQueryTimeout () { long timeLeft = timeoutAt - ( java.lang.System . currentTimeMillis () ) ; if ( timeLeft >= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return timeLeft ; } } <s> fix timeout check bug in DirectDruidClient (#4287)
bug_after_refactoring: if ( zbfrcsujeyegutrkfouu >= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return zbfrcsujeyegutrkfouu ; } <s> private long checkQueryTimeout () { long timeLeft = timeoutAt - ( java.lang.System . currentTimeMillis () ) ; if ( zbfrcsujeyegutrkfouu >= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return zbfrcsujeyegutrkfouu ; } } <s> fix timeout check bug in DirectDruidClient (#4287)
fix_before_refactoring: if ( timeLeft <= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return timeLeft ; }
fix_after_refactoring: if ( zbfrcsujeyegutrkfouu <= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return zbfrcsujeyegutrkfouu ; }
× fix_prediction_before: if ( timeLeft >= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return timeLeft ; }
× fix_prediction_after: if ( zbfrcsujeyegutrkfouu >= 0 ) { java.lang.String msg = io.druid.common.utils.StringUtils . safeFormat ( "Query[%s] url[%s] timed out." , query . getId () , url ) ; setupResponseReadFailure ( msg , null ) ; throw new io.druid.java.util.common.RE ( msg ) ; } else { return zbfrcsujeyegutrkfouu ; }

line_index: 12
bug_before_refactoring: { super . restoreFromBundle ( bundle ) ; int [] values = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PRESSES ) ; for ( int i = 0 ; i < ( values.length ) ; i ++ ) presses . add ( values [ i ] ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PARTIALTIME ) ; } <s> @ java.lang.Override public void restoreFromBundle ( com.watabou.utils.Bundle bundle ) { super . restoreFromBundle ( bundle ) ; int [] values = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PRESSES ) ; for ( int i = 0 ; i < ( values.length ) ; i ++ ) presses . add ( values [ i ] ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PARTIALTIME ) ; } <s> v0.2.3e: fixed a bug where Time Stasis would sometimes not drop invisibility.
bug_after_refactoring: { super . restoreFromBundle ( bundle ) ; int [] dizkzxvtqjvetglvyorj = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PRESSES ) ; for ( int i = 0 ; i < ( dizkzxvtqjvetglvyorj.length ) ; i ++ ) presses . add ( dizkzxvtqjvetglvyorj [ i ] ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PARTIALTIME ) ; } <s> @ java.lang.Override public void restoreFromBundle ( com.watabou.utils.Bundle bundle ) { super . restoreFromBundle ( bundle ) ; int [] dizkzxvtqjvetglvyorj = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PRESSES ) ; for ( int i = 0 ; i < ( dizkzxvtqjvetglvyorj.length ) ; i ++ ) presses . add ( dizkzxvtqjvetglvyorj [ i ] ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PARTIALTIME ) ; } <s> v0.2.3e: fixed a bug where Time Stasis would sometimes not drop invisibility.
fix_before_refactoring: { super . restoreFromBundle ( bundle ) ; int [] values = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PRESSES ) ; for ( int value : values ) presses . add ( value ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PARTIALTIME ) ; }
fix_after_refactoring: { super . restoreFromBundle ( bundle ) ; int [] dizkzxvtqjvetglvyorj = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PRESSES ) ; for ( int value : dizkzxvtqjvetglvyorj ) presses . add ( value ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass.timeFreeze.PARTIALTIME ) ; }
× fix_prediction_before: { super . restoreFromBundle ( bundle ) ; int [] values = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeeperHourglass.timeFreeze.PRESSES ) ; for ( int i = 0 ; i < ( values.length ) ; i ++ ) presses . add ( values [ i ] ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeeperHourglass.timeFreeze.PARTIALTIME ) ; }
× fix_prediction_after: { super . restoreFromBundle ( bundle ) ; int [] dizkzxvtqjvetglvyorj = bundle . getIntArray ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeeperHourglass.timeFreeze.PRESSES ) ; for ( int i = 0 ; i < ( dizkzxvtqjvetglvyorj.length ) ; i ++ ) presses . add ( dizkzxvtqjvetglvyorj [ i ] ) ; partialTime = bundle . getFloat ( com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeeperHourglass.timeFreeze.PARTIALTIME ) ; }

line_index: 14
bug_before_refactoring: { org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int installmentsNumber = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int invoicesNumber = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( invoicesNumber == 1 ) && ( installmentsNumber == 0 ) ) { receiptsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } } <s> public synchronized void calculateReceiptsVisibility ( org.iabako.client.ui.form.business.sale.SalePaymentsForm salePaymentsForm ) { org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int installmentsNumber = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int invoicesNumber = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( invoicesNumber == 1 ) && ( installmentsNumber == 0 ) ) { receiptsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } } <s> Bug fix => Don't show Receipts if invoiceTable has not been calculated yet
bug_after_refactoring: { org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int mkdhqfjsbihvfrfkistx = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int eluzfdqocrbogbjmtrtt = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( eluzfdqocrbogbjmtrtt == 1 ) && ( mkdhqfjsbihvfrfkistx == 0 ) ) { receiptsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } } <s> public synchronized void calculateReceiptsVisibility ( org.iabako.client.ui.form.business.sale.SalePaymentsForm salePaymentsForm ) { org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int mkdhqfjsbihvfrfkistx = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int eluzfdqocrbogbjmtrtt = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( eluzfdqocrbogbjmtrtt == 1 ) && ( mkdhqfjsbihvfrfkistx == 0 ) ) { receiptsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } } <s> Bug fix => Don't show Receipts if invoiceTable has not been calculated yet
fix_before_refactoring: { if ( ( invoiceTable ) == null ) { return; } org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int installmentsNumber = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int invoicesNumber = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( invoicesNumber == 1 ) && ( installmentsNumber == 0 ) ) { receiptsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } }
fix_after_refactoring: { if ( ( invoiceTable ) == null ) { return; } org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int mkdhqfjsbihvfrfkistx = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int eluzfdqocrbogbjmtrtt = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( eluzfdqocrbogbjmtrtt == 1 ) && ( mkdhqfjsbihvfrfkistx == 0 ) ) { receiptsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } }
× fix_prediction_before: { org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int installmentsNumber = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int invoicesNumber = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( invoicesNumber == 1 ) && ( installmentsNumber == 0 ) ) { transactionsPanel . setVisible ( false ) ; } else { transactionsPanel . setVisible ( true ) ; } }
× fix_prediction_after: { org.iabako.client.ui.layout.widget.payment.PaymentTable installmentsTable = salePaymentsForm . getInstallmentTable () ; int mkdhqfjsbihvfrfkistx = ( installmentsTable != null ) ? installmentsTable.queryDefinitionDTO . getCountTotal () : 0 ; int eluzfdqocrbogbjmtrtt = ( ( invoiceTable ) != null ) ? invoiceTable.queryDefinitionDTO . getCountTotal () : 0 ; if ( ( eluzfdqocrbogbjmtrtt == 1 ) && ( mkdhqfjsbihvfrfkistx == 0 ) ) { transactionsPanel . setVisible ( false ) ; } else { receiptsPanel . setVisible ( true ) ; } }

line_index: 15
bug_before_refactoring: field [ x ] [ y ] = - 2 <s> private void AddFruit () { boolean bFlag = true ; while ( bFlag ) { int x = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByX ) ) ) ; int y = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByY ) ) ) ; if ( ( field [ x ] [ y ] ) == 0 ) { bFlag = false ; field [ x ] [ y ] = - 2 ; } } } <s> fix bugs
bug_after_refactoring: field [ qvyirgsbbxsgujuzzgrn ] [ bxbtorbjeoiclvalnkrl ] = - 2 <s> private void AddFruit () { boolean bFlag = true ; while ( bFlag ) { int x = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByX ) ) ) ; int y = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByY ) ) ) ; if ( ( field [ x ] [ y ] ) == 0 ) { bFlag = false ; field [ qvyirgsbbxsgujuzzgrn ] [ bxbtorbjeoiclvalnkrl ] = - 2 ; } } } <s> fix bugs
fix_before_refactoring: field [ x ] [ y ] = 2
fix_after_refactoring: field [ qvyirgsbbxsgujuzzgrn ] [ bxbtorbjeoiclvalnkrl ] = 2
× fix_prediction_before: field [ x ] [ y ] = 0
× fix_prediction_after: field [ qvyirgsbbxsgujuzzgrn ] [ bxbtorbjeoiclvalnkrl ] = - 1

line_index: 16
bug_before_refactoring: { final int arg1 = 123 ; final double arg2 = 3.14 ; ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer arg1 , java.lang.Double arg2 ) { return ( arg1 . toString () ) + ( arg2 . toString () ) ; } } ; org.junit.Assert . assertEquals ( concat . apply ( arg1 , arg2 ) , "1233.14" ) ; } <s> @ org.junit.Test public void testBasicApply () { final int arg1 = 123 ; final double arg2 = 3.14 ; ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer arg1 , java.lang.Double arg2 ) { return ( arg1 . toString () ) + ( arg2 . toString () ) ; } } ; org.junit.Assert . assertEquals ( concat . apply ( arg1 , arg2 ) , "1233.14" ) ; } <s> bugs fixed
bug_after_refactoring: { final int czpghdyeytcntegynvgr = 123 ; final double mqlgxumothooxeudgtbh = 3.14 ; ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer czpghdyeytcntegynvgr , java.lang.Double mqlgxumothooxeudgtbh ) { return ( czpghdyeytcntegynvgr . toString () ) + ( mqlgxumothooxeudgtbh . toString () ) ; } } ; org.junit.Assert . assertEquals ( concat . apply ( czpghdyeytcntegynvgr , mqlgxumothooxeudgtbh ) , "1233.14" ) ; } <s> @ org.junit.Test public void testBasicApply () { final int czpghdyeytcntegynvgr = 123 ; final double mqlgxumothooxeudgtbh = 3.14 ; ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer czpghdyeytcntegynvgr , java.lang.Double mqlgxumothooxeudgtbh ) { return ( czpghdyeytcntegynvgr . toString () ) + ( mqlgxumothooxeudgtbh . toString () ) ; } } ; org.junit.Assert . assertEquals ( concat . apply ( czpghdyeytcntegynvgr , mqlgxumothooxeudgtbh ) , "1233.14" ) ; } <s> bugs fixed
fix_before_refactoring: { ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer arg1 , java.lang.Double arg2 ) { return ( arg1 . toString () ) + ( arg2 . toString () ) ; } } ; org.junit.Assert . assertEquals ( "1233.14" , concat . apply ( 123 , 3.14 ) ) ; }
fix_after_refactoring: { ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer czpghdyeytcntegynvgr , java.lang.Double mqlgxumothooxeudgtbh ) { return ( czpghdyeytcntegynvgr . toString () ) + ( mqlgxumothooxeudgtbh . toString () ) ; } } ; org.junit.Assert . assertEquals ( "1233.14" , concat . apply ( 123 , 3.14 ) ) ; }
× fix_prediction_before: { ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer arg1 , java.lang.Double arg2 ) { return ( arg1 . toString () ) + ( arg2 . toString () ) ; } } ; org.junit.Assert . assertEquals ( "1233.14" , "1233.14" ) ; }
× fix_prediction_after: { ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > concat = new ru.spbau.mit.Function2 < java.lang.Integer , java.lang.Double , java.lang.String > () { @ java.lang.Override public java.lang.String apply ( java.lang.Integer czpghdyeytcntegynvgr , java.lang.Double mqlgxumothooxeudgtbh ) { return ( czpghdyeytcntegynvgr . toString () ) + ( mqlgxumothooxeudgtbh . toString () ) ; } } ; org.junit.Assert . assertEquals ( concat . apply ( czpghdyeytcntegynvgr , mqlgxumothooxeudgtbh ) , "1233.14" ) ; }

line_index: 17
bug_before_refactoring: if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) != 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; isValid = false ; } <s> private boolean isValidDigitFields () { boolean isValid = true ; if ( com.zhour.utils.Utility . isValueNullOrEmpty ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () ) ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Please write code" ) ; isValid = false ; } else if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) != 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; isValid = false ; } return isValid ; } <s> Fixed alien car issue
bug_after_refactoring: if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) != 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; eruahzwprrqlcezaqkyg = false ; } <s> private boolean isValidDigitFields () { boolean isValid = true ; if ( com.zhour.utils.Utility . isValueNullOrEmpty ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () ) ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Please write code" ) ; isValid = false ; } else if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) != 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; eruahzwprrqlcezaqkyg = false ; } return isValid ; } <s> Fixed alien car issue
fix_before_refactoring: if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) < 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; isValid = false ; }
fix_after_refactoring: if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) < 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; eruahzwprrqlcezaqkyg = false ; }
× fix_prediction_before: if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) != 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; isValid = false ; }
× fix_prediction_after: if ( ! ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . isEmpty () ) ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; eruahzwprrqlcezaqkyg = false ; }

line_index: 19
bug_before_refactoring: new com.anwesome.games.dataindicationbutton.RectF ( ( - r ) , ( - r ) , r , r ) <s> private void drawWifi ( com.anwesome.games.dataindicationbutton.Canvas canvas , com.anwesome.games.dataindicationbutton.Paint paint ) { float r = ( radius ) / 60 ; canvas . drawCircle ( 0 , 0 , r , paint ) ; for ( int i = 1 ; i <= 3 ; i ++ ) { float newR = r * ( i * 10 ) ; canvas . drawArc ( new com.anwesome.games.dataindicationbutton.RectF ( ( - r ) , ( - r ) , r , r ) , 240 , 60 , false , paint ) ; } } <s> fixing animation issue starting at an angle of 90
bug_after_refactoring: new com.anwesome.games.dataindicationbutton.RectF ( ( - yphfkvajkaizhvfjywku ) , ( - yphfkvajkaizhvfjywku ) , yphfkvajkaizhvfjywku , yphfkvajkaizhvfjywku ) <s> private void drawWifi ( com.anwesome.games.dataindicationbutton.Canvas canvas , com.anwesome.games.dataindicationbutton.Paint paint ) { float r = ( radius ) / 60 ; canvas . drawCircle ( 0 , 0 , r , paint ) ; for ( int i = 1 ; i <= 3 ; i ++ ) { float newR = r * ( i * 10 ) ; canvas . drawArc ( new com.anwesome.games.dataindicationbutton.RectF ( ( - yphfkvajkaizhvfjywku ) , ( - yphfkvajkaizhvfjywku ) , yphfkvajkaizhvfjywku , yphfkvajkaizhvfjywku ) , 240 , 60 , false , paint ) ; } } <s> fixing animation issue starting at an angle of 90
fix_before_refactoring: new com.anwesome.games.dataindicationbutton.RectF ( ( - newR ) , ( - newR ) , newR , newR )
fix_after_refactoring: new com.anwesome.games.dataindicationbutton.RectF ( ( - newR ) , ( - newR ) , newR , newR )
× fix_prediction_before: new com.anwesome.games.dataindicationbutton.RectF ( ( - r ) , ( - r ) , r , r )
× fix_prediction_after: new com.anwesome.games.dataindicationbutton.RectF ( 0 , yphfkvajkaizhvfjywku )

line_index: 20
bug_before_refactoring: { java.util.Calendar cal = new java.util.GregorianCalendar () ; int max = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < max ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; } <s> public java.util.List < java.lang.Integer > getDaysFromThisMonth ( int month , int year ) { java.util.Calendar cal = new java.util.GregorianCalendar () ; int max = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < max ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; } <s> Fixed problem with days per months. Months do not have 31 days all anymore
bug_after_refactoring: { java.util.Calendar cal = new java.util.GregorianCalendar () ; int mitwzxoudvlufpksxczx = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < mitwzxoudvlufpksxczx ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; } <s> public java.util.List < java.lang.Integer > getDaysFromThisMonth ( int month , int year ) { java.util.Calendar cal = new java.util.GregorianCalendar () ; int mitwzxoudvlufpksxczx = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < mitwzxoudvlufpksxczx ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; } <s> Fixed problem with days per months. Months do not have 31 days all anymore
fix_before_refactoring: { java.util.Calendar cal = new java.util.GregorianCalendar () ; cal . set ( year , month , 1 ) ; int max = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.lang.System.out . println ( max ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < max ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; }
fix_after_refactoring: { java.util.Calendar cal = new java.util.GregorianCalendar () ; cal . set ( year , month , 1 ) ; int mitwzxoudvlufpksxczx = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.lang.System.out . println ( mitwzxoudvlufpksxczx ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < mitwzxoudvlufpksxczx ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; }
× fix_prediction_before: { java.util.Calendar cal = new java.util.GregorianCalendar () ; int max = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < max ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; }
× fix_prediction_after: { java.util.Calendar cal = new java.util.GregorianCalendar () ; int mitwzxoudvlufpksxczx = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; return daysFromThisMonth ; }

line_index: 21
bug_before_refactoring: return count == value ; <s> public static boolean checkPlayersTiles ( java.lang.String board , int player , int value , int numOfValues ) { java.lang.String tiles = game.manger.SaveTheIslandGame.Board . getPlayersTiles ( player , board ) ; int count = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( ( java.lang.Integer . parseInt ( tiles . substring ( i , ( i + 1 ) ) ) ) == value ) { count ++ ; } } return count == value ; } <s> wrote some more unit tests and fixed some bugs they found
bug_after_refactoring: return igegfflrunjpqgeuusfi == value ; <s> public static boolean checkPlayersTiles ( java.lang.String board , int player , int value , int numOfValues ) { java.lang.String tiles = game.manger.SaveTheIslandGame.Board . getPlayersTiles ( player , board ) ; int count = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( ( java.lang.Integer . parseInt ( tiles . substring ( i , ( i + 1 ) ) ) ) == value ) { count ++ ; } } return igegfflrunjpqgeuusfi == value ; } <s> wrote some more unit tests and fixed some bugs they found
fix_before_refactoring: return count >= numOfValues ;
fix_after_refactoring: return igegfflrunjpqgeuusfi >= numOfValues ;
× fix_prediction_before: return count . equals ( value ) ;
× fix_prediction_after: return value ;

line_index: 22
bug_before_refactoring: distance = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( x * x ) + ( y * y ) ) ) ) ) * ( player . getScale () ) <s> public double getNumSteps ( android.graphics.Point p1 , android.graphics.Point p2 , int stepSize ) { int x = ( p2.x ) - ( p1.x ) ; int y = ( p2.y ) - ( p1.y ) ; double distance = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( x * x ) + ( y * y ) ) ) ) ) * ( player . getScale () ) ; android.util.Log . i ( "Distance between p1/p2" , ( "" + distance ) ) ; return distance / stepSize ; } <s> fixed compile error and scaling
bug_after_refactoring: pfnynjsujdfkfkprcqoc = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( abmaibhgfuuhdpyydeko * abmaibhgfuuhdpyydeko ) + ( aagapddyebqaplntysha * aagapddyebqaplntysha ) ) ) ) ) * ( player . getScale () ) <s> public double getNumSteps ( android.graphics.Point p1 , android.graphics.Point p2 , int stepSize ) { int x = ( p2.x ) - ( p1.x ) ; int y = ( p2.y ) - ( p1.y ) ; double pfnynjsujdfkfkprcqoc = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( abmaibhgfuuhdpyydeko * abmaibhgfuuhdpyydeko ) + ( aagapddyebqaplntysha * aagapddyebqaplntysha ) ) ) ) ) * ( player . getScale () ) ; android.util.Log . i ( "Distance between p1/p2" , ( "" + distance ) ) ; return distance / stepSize ; } <s> fixed compile error and scaling
fix_before_refactoring: distance = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( x * x ) + ( y * y ) ) ) ) ) / ( player . getScale () )
fix_after_refactoring: pfnynjsujdfkfkprcqoc = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( abmaibhgfuuhdpyydeko * abmaibhgfuuhdpyydeko ) + ( aagapddyebqaplntysha * aagapddyebqaplntysha ) ) ) ) ) / ( player . getScale () )
× fix_prediction_before: distance = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( x * x ) + ( y * y ) ) ) ) ) * ( player . getScale () )
× fix_prediction_after: pfnynjsujdfkfkprcqoc = ( java.lang.Math . abs ( java.lang.Math . sqrt ( ( ( abmaibhgfuuhdpyydeko * abmaibhgfuuhdpyydeko ) + ( aagapddyebqaplntysha * aagapddyebqaplntysha ) ) ) ) ) * ( player . getScale () )

line_index: 23
bug_before_refactoring: { byte [] old = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; int pos = _position ; java.lang.System . arraycopy ( old , 0 , _buffer , 0 , pos ) ; _encoder . init ( _buffer , pos , ( ( _buffer.length ) * 2 ) ) ; } <s> private void grow () { byte [] old = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; int pos = _position ; java.lang.System . arraycopy ( old , 0 , _buffer , 0 , pos ) ; _encoder . init ( _buffer , pos , ( ( _buffer.length ) * 2 ) ) ; } <s> Bug fixes
bug_after_refactoring: { byte [] sucdvjoyoccckapkmekt = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; int ichbdsaeamvqdxkpphzw = _position ; java.lang.System . arraycopy ( sucdvjoyoccckapkmekt , 0 , _buffer , 0 , ichbdsaeamvqdxkpphzw ) ; _encoder . init ( _buffer , ichbdsaeamvqdxkpphzw , ( ( _buffer.length ) * 2 ) ) ; } <s> private void grow () { byte [] sucdvjoyoccckapkmekt = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; int ichbdsaeamvqdxkpphzw = _position ; java.lang.System . arraycopy ( sucdvjoyoccckapkmekt , 0 , _buffer , 0 , ichbdsaeamvqdxkpphzw ) ; _encoder . init ( _buffer , ichbdsaeamvqdxkpphzw , ( ( _buffer.length ) * 2 ) ) ; } <s> Bug fixes
fix_before_refactoring: { byte [] old = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; java.lang.System . arraycopy ( old , 0 , _buffer , 0 , _position ) ; _encoder . init ( _buffer , _position , ( ( _buffer.length ) * 2 ) ) ; }
fix_after_refactoring: { byte [] sucdvjoyoccckapkmekt = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; java.lang.System . arraycopy ( sucdvjoyoccckapkmekt , 0 , _buffer , 0 , _position ) ; _encoder . init ( _buffer , _position , ( ( _buffer.length ) * 2 ) ) ; }
× fix_prediction_before: { byte [] old = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; int pos = _position ; java.lang.System . arraycopy ( old , 0 , _buffer , 0 , pos ) ; _encoder . init ( _buffer , pos , ( ( _buffer.length ) * 2 ) ) ; }
× fix_prediction_after: { byte [] sucdvjoyoccckapkmekt = _buffer ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; int ichbdsaeamvqdxkpphzw = _position ; _buffer = new byte [ ( _buffer.length ) * 2 ] ; java.lang.System . arraycopy ( sucdvjoyoccckapkmekt , 0 , _buffer , 0 , ichbdsaeamvqdxkpphzw ) ; _encoder . init ( _buffer , ichbdsaeamvqdxkpphzw , ( ( _buffer.length ) * 2 ) ) ; }

line_index: 25
bug_before_refactoring: rotateViewGravity = ( ( android.view.Gravity.CENTER_VERTICAL ) | ( android.view.Gravity.RIGHT ) ) | ( android.view.Gravity.TOP ) <s> private void initRotateView () { if ( ( mRotateView ) != null ) { return; } mRotateView = new android.widget.ImageView ( getContext () ) ; mRotateView . setImageResource ( R.drawable.ic_rotate ) ; mRotateView . setBackgroundResource ( R.drawable.stretch_shape_background ) ; mRotateView . setOnTouchListener ( createRotateListener () ) ; final int rotateViewGravity = ( ( android.view.Gravity.CENTER_VERTICAL ) | ( android.view.Gravity.RIGHT ) ) | ( android.view.Gravity.TOP ) ; final net.yazeed44.resizableviewlibrary.LayoutParams rotateViewLayoutParams = new net.yazeed44.resizableviewlibrary.LayoutParams ( ViewGroup.LayoutParams.WRAP_CONTENT , ViewGroup.LayoutParams.WRAP_CONTENT , rotateViewGravity ) ; addView ( mRotateView , rotateViewLayoutParams ) ; } <s> Implemented rotation view .. still there's some bugs that need to fix
bug_after_refactoring: mbmqttjuajjgoejgcnzx = ( ( android.view.Gravity.CENTER_VERTICAL ) | ( android.view.Gravity.RIGHT ) ) | ( android.view.Gravity.TOP ) <s> private void initRotateView () { if ( ( mRotateView ) != null ) { return; } mRotateView = new android.widget.ImageView ( getContext () ) ; mRotateView . setImageResource ( R.drawable.ic_rotate ) ; mRotateView . setBackgroundResource ( R.drawable.stretch_shape_background ) ; mRotateView . setOnTouchListener ( createRotateListener () ) ; final int mbmqttjuajjgoejgcnzx = ( ( android.view.Gravity.CENTER_VERTICAL ) | ( android.view.Gravity.RIGHT ) ) | ( android.view.Gravity.TOP ) ; final net.yazeed44.resizableviewlibrary.LayoutParams rotateViewLayoutParams = new net.yazeed44.resizableviewlibrary.LayoutParams ( ViewGroup.LayoutParams.WRAP_CONTENT , ViewGroup.LayoutParams.WRAP_CONTENT , rotateViewGravity ) ; addView ( mRotateView , rotateViewLayoutParams ) ; } <s> Implemented rotation view .. still there's some bugs that need to fix
fix_before_refactoring: rotateViewGravity = ( android.view.Gravity.RIGHT ) | ( android.view.Gravity.TOP )
fix_after_refactoring: mbmqttjuajjgoejgcnzx = ( android.view.Gravity.RIGHT ) | ( android.view.Gravity.TOP )
× fix_prediction_before: rotateViewGravity = ( ( android.view.Gravity.CENTER_VERTICAL ) | ( android.view.Gravity.RIGHT ) ) | ( android.view.Gravity.TOP )
× fix_prediction_after: mbmqttjuajjgoejgcnzx = ( ( android.view.Gravity.CENTER_VERTICAL ) | ( android.view.Gravity.RIGHT ) ) | ( android.view.Gravity.TOP )

line_index: 26
bug_before_refactoring: { double radius = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = radius * ( java.lang.Math . sin ( winkel ) ) ; this . y = radius * ( java.lang.Math . cos ( winkel ) ) ; } <s> public void rotate ( double winkel ) { double radius = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = radius * ( java.lang.Math . sin ( winkel ) ) ; this . y = radius * ( java.lang.Math . cos ( winkel ) ) ; } <s> bugfix
bug_after_refactoring: { double nmeyptamctizpsblcdbr = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = nmeyptamctizpsblcdbr * ( java.lang.Math . sin ( winkel ) ) ; this . y = nmeyptamctizpsblcdbr * ( java.lang.Math . cos ( winkel ) ) ; } <s> public void rotate ( double winkel ) { double nmeyptamctizpsblcdbr = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = nmeyptamctizpsblcdbr * ( java.lang.Math . sin ( winkel ) ) ; this . y = nmeyptamctizpsblcdbr * ( java.lang.Math . cos ( winkel ) ) ; } <s> bugfix
fix_before_refactoring: { double radius = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = radius * ( java.lang.Math . cos ( winkel ) ) ; this . y = radius * ( java.lang.Math . sin ( winkel ) ) ; }
fix_after_refactoring: { double nmeyptamctizpsblcdbr = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = nmeyptamctizpsblcdbr * ( java.lang.Math . cos ( winkel ) ) ; this . y = nmeyptamctizpsblcdbr * ( java.lang.Math . sin ( winkel ) ) ; }
× fix_prediction_before: { double radius = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = radius * ( java.lang.Math . sin ( winkel ) ) ; this . y = radius * ( java.lang.Math . cos ( winkel ) ) ; }
× fix_prediction_after: { double nmeyptamctizpsblcdbr = java.lang.Math . sqrt ( ( ( ( x ) * ( x ) ) + ( ( y ) * ( y ) ) ) ) ; this . x = nmeyptamctizpsblcdbr * ( java.lang.Math . sin ( winkel ) ) ; this . y = nmeyptamctizpsblcdbr * ( java.lang.Math . cos ( winkel ) ) ; }

line_index: 27
bug_before_refactoring: public static void printResult ( double [] [] reuslt ) { int histWidth = reuslt.length ; int histHeight = reuslt [ 0 ] . length ; for ( int i = 0 ; i < histWidth ; i ++ ) { java.lang.System.out . println ( "" ) ; for ( int j = 0 ; j < histHeight ; j ++ ) { java.lang.System.out . print ( ( ( reuslt [ i ] [ j ] ) + " " ) ) ; } } } <s> public static void printResult ( double [] [] reuslt ) { int histWidth = reuslt.length ; int histHeight = reuslt [ 0 ] . length ; for ( int i = 0 ; i < histWidth ; i ++ ) { java.lang.System.out . println ( "" ) ; for ( int j = 0 ; j < histHeight ; j ++ ) { java.lang.System.out . print ( ( ( reuslt [ i ] [ j ] ) + " " ) ) ; } } } <s> Working on bug fixing the simulation
bug_after_refactoring: public static void printResult ( double [] [] reuslt ) { int ifruimsrbgmxlbzjlmll = reuslt.length ; int ozsoogmyozjbupgquuat = reuslt [ 0 ] . length ; for ( int i = 0 ; i < ifruimsrbgmxlbzjlmll ; i ++ ) { java.lang.System.out . println ( "" ) ; for ( int j = 0 ; j < ozsoogmyozjbupgquuat ; j ++ ) { java.lang.System.out . print ( ( ( reuslt [ i ] [ j ] ) + " " ) ) ; } } } <s> public static void printResult ( double [] [] reuslt ) { int ifruimsrbgmxlbzjlmll = reuslt.length ; int ozsoogmyozjbupgquuat = reuslt [ 0 ] . length ; for ( int i = 0 ; i < ifruimsrbgmxlbzjlmll ; i ++ ) { java.lang.System.out . println ( "" ) ; for ( int j = 0 ; j < ozsoogmyozjbupgquuat ; j ++ ) { java.lang.System.out . print ( ( ( reuslt [ i ] [ j ] ) + " " ) ) ; } } } <s> Working on bug fixing the simulation
fix_before_refactoring: public static void printResult ( double [] result ) { java.lang.System.out . println ( "" ) ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { java.lang.System.out . print ( ( ( result [ i ] ) + " " ) ) ; } }
fix_after_refactoring: public static void printResult ( double [] result ) { java.lang.System.out . println ( "" ) ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { java.lang.System.out . print ( ( ( result [ i ] ) + " " ) ) ; } }
× fix_prediction_before: public static void printResult ( double [] [] reuslt ) { int histWidth = reuslt.length ; int histHeight = reuslt [ 0 ] . length ; for ( int i = 0 ; i < histWidth ; i ++ ) { java.lang.System.out . println ( "" ) ; for ( int j = 0 ; j < histHeight ; j ++ ) { java.lang.System.out . print ( ( ( reuslt [ i ] [ j ] ) + " " ) ) ; } } }
× fix_prediction_after: public static void printResult ( double [] [] reuslt ) { int ifruimsrbgmxlbzjlmll = reuslt.length ; int ozsoogmyozjbupgquuat = reuslt [ 0 ] . length ; for ( int i = 0 ; i < ifruimsrbgmxlbzjlmll ; i ++ ) { java.lang.System.out . println ( "" ) ; for ( int j = 0 ; j < ozsoogmyozjbupgquuat ; j ++ ) { java.lang.System.out . print ( ( ( reuslt [ i ] [ j ] ) + " " ) ) ; } } }

line_index: 28
bug_before_refactoring: { double nextApproximation = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { nextApproximation = nextApproximation * x ; } this . approximation = ( this . lastApproximation ) + nextApproximation ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } } <s> public void geometricSeriesApproximation ( double x ) { double nextApproximation = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { nextApproximation = nextApproximation * x ; } this . approximation = ( this . lastApproximation ) + nextApproximation ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } } <s> fixed the bug where steps++; line was missing
bug_after_refactoring: { double icozlhtjfyzkdwqrmxph = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { icozlhtjfyzkdwqrmxph = icozlhtjfyzkdwqrmxph * x ; } this . approximation = ( this . lastApproximation ) + icozlhtjfyzkdwqrmxph ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } } <s> public void geometricSeriesApproximation ( double x ) { double icozlhtjfyzkdwqrmxph = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { icozlhtjfyzkdwqrmxph = icozlhtjfyzkdwqrmxph * x ; } this . approximation = ( this . lastApproximation ) + icozlhtjfyzkdwqrmxph ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } } <s> fixed the bug where steps++; line was missing
fix_before_refactoring: { double nextApproximation = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { nextApproximation = nextApproximation * x ; } this . approximation = ( this . lastApproximation ) + nextApproximation ; ( this . steps ) ++ ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } }
fix_after_refactoring: { double icozlhtjfyzkdwqrmxph = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { icozlhtjfyzkdwqrmxph = icozlhtjfyzkdwqrmxph * x ; } this . approximation = ( this . lastApproximation ) + icozlhtjfyzkdwqrmxph ; ( this . steps ) ++ ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } }
× fix_prediction_before: { double nextApproximation = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { nextApproximation = nextApproximation * x ; } this . approximation = ( this . lastApproximation ) + nextApproximation ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } }
× fix_prediction_after: { double icozlhtjfyzkdwqrmxph = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { icozlhtjfyzkdwqrmxph = icozlhtjfyzkdwqrmxph * x ; } this . approximation = ( this . lastApproximation ) + icozlhtjfyzkdwqrmxph ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } }

line_index: 29
bug_before_refactoring: { int n_skipped = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; } while ( ( current ) == ',' ) { skipWhiteSpace () ; skipInner () ; if ( ( ++ n_skipped ) == n_skip ) { break; } } return n_skipped ; } <s> private int skip ( int n_skip ) throws java.io.IOException { int n_skipped = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; } while ( ( current ) == ',' ) { skipWhiteSpace () ; skipInner () ; if ( ( ++ n_skipped ) == n_skip ) { break; } } return n_skipped ; } <s> Fix bug whereby skipping less than all entries of a collection from within a factory request skipped one entry too many.
bug_after_refactoring: { int vdvqifdifijgebecwpda = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; } while ( ( current ) == ',' ) { skipWhiteSpace () ; skipInner () ; if ( ( ++ vdvqifdifijgebecwpda ) == n_skip ) { break; } } return vdvqifdifijgebecwpda ; } <s> private int skip ( int n_skip ) throws java.io.IOException { int vdvqifdifijgebecwpda = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; } while ( ( current ) == ',' ) { skipWhiteSpace () ; skipInner () ; if ( ( ++ vdvqifdifijgebecwpda ) == n_skip ) { break; } } return vdvqifdifijgebecwpda ; } <s> Fix bug whereby skipping less than all entries of a collection from within a factory request skipped one entry too many.
fix_before_refactoring: { int n_skipped = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; n_skipped = 1 ; } while ( ( ( current ) == ',' ) && ( ( n_skipped ++ ) != n_skip ) ) { skipWhiteSpace () ; skipInner () ; } return n_skipped ; }
fix_after_refactoring: { int vdvqifdifijgebecwpda = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; vdvqifdifijgebecwpda = 1 ; } while ( ( ( current ) == ',' ) && ( ( vdvqifdifijgebecwpda ++ ) != n_skip ) ) { skipWhiteSpace () ; skipInner () ; } return vdvqifdifijgebecwpda ; }
× fix_prediction_before: { int n_skipped = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; } while ( ( current ) == ',' ) { skipWhiteSpace () ; if ( ( ++ n_skipped ) == n_skip ) { break; } } return n_skipped ; }
× fix_prediction_after: { int vdvqifdifijgebecwpda = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; } while ( ( current ) == ',' ) { skipWhiteSpace () ; skipInner () ; if ( ( ++ vdvqifdifijgebecwpda ) == n_skip ) { break; } } return vdvqifdifijgebecwpda ; }

line_index: 30
bug_before_refactoring: { int length = java.lang.Integer . parseInt ( arg [ 0 ] ) ; int width = java.lang.Integer . parseInt ( arg [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( length , width ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n/n" , myRectangle.length , myRectangle.width , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; } <s> public static void main ( java.lang.String [] args ) { int length = java.lang.Integer . parseInt ( arg [ 0 ] ) ; int width = java.lang.Integer . parseInt ( arg [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( length , width ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n/n" , myRectangle.length , myRectangle.width , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; } <s> fixed issues
bug_after_refactoring: { int lwxpqsoqpwdsqoqqvsev = java.lang.Integer . parseInt ( arg [ 0 ] ) ; int dyzqbnruzrlgeimbfwlz = java.lang.Integer . parseInt ( arg [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( lwxpqsoqpwdsqoqqvsev , dyzqbnruzrlgeimbfwlz ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n/n" , myRectangle.lwxpqsoqpwdsqoqqvsev , myRectangle.dyzqbnruzrlgeimbfwlz , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; } <s> public static void main ( java.lang.String [] args ) { int lwxpqsoqpwdsqoqqvsev = java.lang.Integer . parseInt ( arg [ 0 ] ) ; int dyzqbnruzrlgeimbfwlz = java.lang.Integer . parseInt ( arg [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( lwxpqsoqpwdsqoqqvsev , dyzqbnruzrlgeimbfwlz ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n/n" , myRectangle.lwxpqsoqpwdsqoqqvsev , myRectangle.dyzqbnruzrlgeimbfwlz , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; } <s> fixed issues
fix_before_refactoring: { int length = java.lang.Integer . parseInt ( args [ 0 ] ) ; int width = java.lang.Integer . parseInt ( args [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( length , width ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n/n" , myRectangle.length , myRectangle.width , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; }
fix_after_refactoring: { int lwxpqsoqpwdsqoqqvsev = java.lang.Integer . parseInt ( args [ 0 ] ) ; int dyzqbnruzrlgeimbfwlz = java.lang.Integer . parseInt ( args [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( lwxpqsoqpwdsqoqqvsev , dyzqbnruzrlgeimbfwlz ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n/n" , myRectangle.lwxpqsoqpwdsqoqqvsev , myRectangle.dyzqbnruzrlgeimbfwlz , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; }
× fix_prediction_before: { int length = java.lang.Integer . parseInt ( arg [ 0 ] ) ; int width = java.lang.Integer . parseInt ( arg [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( length , width ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/nPerimeter: %d/nArea: %d/n" , myRectangle.width , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; }
× fix_prediction_after: { int lwxpqsoqpwdsqoqqvsev = java.lang.Integer . parseInt ( arg [ 0 ] ) ; int dyzqbnruzrlgeimbfwlz = java.lang.Integer . parseInt ( arg [ 1 ] ) ; Rectangle myRectangle = new Rectangle ( lwxpqsoqpwdsqoqqvsev , dyzqbnruzrlgeimbfwlz ) ; java.lang.String output = java.lang.String . format ( "*** Your Rectangle ***\n\nLength: %d\nWidth: %d/nArea: %d/n" , myRectangle.lwxpqsoqpwdsqoqqvsev , myRectangle.dyzqbnruzrlgeimbfwlz , myRectangle . getPerimeter () , myRectangle . getArea () ) ; java.lang.System.out . println ( output ) ; }

line_index: 31
bug_before_refactoring: spectrumStrategy . excute ( spectrum , sampleRate ) <s> public int [] getOutput ( short [] pcm , int sampleRate ) { if ( pcm == null ) return null ; double [] spectrum = getSpectrum ( pcm ) ; final int amount = 100 ; int [] s = spectrumStrategy . excute ( spectrum , sampleRate ) ; for ( int i = 0 ; i < ( s.length ) ; i ++ ) { s [ i ] = ( ( int ) ( ( spectrum [ i ] ) / 1000 ) ) ; } return s ; } <s> bug fix
bug_after_refactoring: spectrumStrategy . excute ( louyxgfbmduatmuuezas , sampleRate ) <s> public int [] getOutput ( short [] pcm , int sampleRate ) { if ( pcm == null ) return null ; double [] spectrum = getSpectrum ( pcm ) ; final int amount = 100 ; int [] s = spectrumStrategy . excute ( louyxgfbmduatmuuezas , sampleRate ) ; for ( int i = 0 ; i < ( s.length ) ; i ++ ) { s [ i ] = ( ( int ) ( ( spectrum [ i ] ) / 1000 ) ) ; } return s ; } <s> bug fix
fix_before_refactoring: spectrumStrategy . execute ( spectrum , sampleRate )
fix_after_refactoring: spectrumStrategy . execute ( louyxgfbmduatmuuezas , sampleRate )
× fix_prediction_before: spectrumStrategy . excute ( spectrum , sampleRate )
× fix_prediction_after: spectrumStrategy . excute ( menuRate , 0 )

line_index: 32
bug_before_refactoring: if ( activeDownloadsList [ mapID ] ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return startOption ; } <s> @ java.lang.Override public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { int startOption = START_NOT_STICKY ; if ( intent == null ) { return startOption ; } int mapID = intent . getIntExtra ( appConstants.DOWNLOAD_INTENT_NAME , 0 ) ; if ( activeDownloadsList [ mapID ] ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return startOption ; } activeDownloadsList [ mapID ] = true ; downloadMap ( mapID ) ; return startOption ; } <s> Shahul: Fixed download status initialization issue.
bug_after_refactoring: if ( activeDownloadsList [ mjxyjjplxpuqwqbglaxw ] ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return zgoppkrirolvragnoyyc ; } <s> @ java.lang.Override public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { int startOption = START_NOT_STICKY ; if ( intent == null ) { return startOption ; } int mapID = intent . getIntExtra ( appConstants.DOWNLOAD_INTENT_NAME , 0 ) ; if ( activeDownloadsList [ mjxyjjplxpuqwqbglaxw ] ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return zgoppkrirolvragnoyyc ; } activeDownloadsList [ mapID ] = true ; downloadMap ( mapID ) ; return startOption ; } <s> Shahul: Fixed download status initialization issue.
fix_before_refactoring: if ( ( ( activeDownloadsList [ mapID ] ) != null ) && ( activeDownloadsList [ mapID ] ) ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return startOption ; }
fix_after_refactoring: if ( ( ( activeDownloadsList [ mjxyjjplxpuqwqbglaxw ] ) != null ) && ( activeDownloadsList [ mjxyjjplxpuqwqbglaxw ] ) ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return zgoppkrirolvragnoyyc ; }
× fix_prediction_before: if ( ! ( activeDownloadsList [ mapID ] ) ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return startOption ; }
× fix_prediction_after: if ( ! ( activeDownloadsList . get ( mjxyjjplxpuqwqbglaxw ] ) ) ) { com.noveogroup.android.log.Log . d ( "Duplicate download request for the same map type" ) ; return zgoppkrirolvragnoyyc ; }

line_index: 33
bug_before_refactoring: { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long delay = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; sendPrayAlarm ( idx , prayId , prayName , delay ) ; } <s> private void evaluateNotification ( int idx , java.lang.String prayId , java.lang.String prayName , java.util.Date date ) { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long delay = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; sendPrayAlarm ( idx , prayId , prayName , delay ) ; } <s> Fix error in notification area
bug_after_refactoring: { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long nrnjbzorwrlczrfngnct = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; sendPrayAlarm ( idx , prayId , prayName , nrnjbzorwrlczrfngnct ) ; } <s> private void evaluateNotification ( int idx , java.lang.String prayId , java.lang.String prayName , java.util.Date date ) { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long nrnjbzorwrlczrfngnct = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; sendPrayAlarm ( idx , prayId , prayName , nrnjbzorwrlczrfngnct ) ; } <s> Fix error in notification area
fix_before_refactoring: { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long delay = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; if ( delay > 0 ) { sendPrayAlarm ( idx , prayId , prayName , delay ) ; } }
fix_after_refactoring: { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long nrnjbzorwrlczrfngnct = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; if ( nrnjbzorwrlczrfngnct > 0 ) { sendPrayAlarm ( idx , prayId , prayName , nrnjbzorwrlczrfngnct ) ; } }
× fix_prediction_before: { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long delay = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; sendPrayAlarm ( idx , wishId , prayerName , delay ) ; }
× fix_prediction_after: { cancelNotification ( idx ) ; cancelNotification ( ( idx + 10 ) ) ; long nrnjbzorwrlczrfngnct = ( date . getTime () ) - ( new java.util.Date () . getTime () ) ; sendPrayAlarm ( idx , prayId , prayName , nrnjbzorwrlczrfngnct ) ; }

line_index: 34
bug_before_refactoring: randomFloat - 0.5F <s> public void reset ( com.studiau.amazinggravity.Ship ship ) { float randomFloat = random . nextFloat () ; radius = ( com.studiau.amazinggravity.ExhaustParticle.BASE_RADIUS ) + ( randomFloat * ( com.studiau.amazinggravity.ExhaustParticle.MAX_ADDITIONAL_RADIUS ) ) ; locationX = ship . getExhaustLocationX () ; locationY = ship . getExhaustLocationY () ; speedX = ( ( randomFloat - 0.5F ) * 2 ) * ( com.studiau.amazinggravity.ExhaustParticle.BASE_SPEEDX ) ; speedY = ( com.studiau.amazinggravity.ExhaustParticle.BASE_SPEEDY ) + ( randomFloat * ( com.studiau.amazinggravity.ExhaustParticle.MAX_ADDITIONAL_SPEEDY ) ) ; } <s> fixed some exhaust particle bugs
bug_after_refactoring: vrjmuptzzoywdlxppsoj - 0.5F <s> public void reset ( com.studiau.amazinggravity.Ship ship ) { float randomFloat = random . nextFloat () ; radius = ( com.studiau.amazinggravity.ExhaustParticle.BASE_RADIUS ) + ( randomFloat * ( com.studiau.amazinggravity.ExhaustParticle.MAX_ADDITIONAL_RADIUS ) ) ; locationX = ship . getExhaustLocationX () ; locationY = ship . getExhaustLocationY () ; speedX = ( ( vrjmuptzzoywdlxppsoj - 0.5F ) * 2 ) * ( com.studiau.amazinggravity.ExhaustParticle.BASE_SPEEDX ) ; speedY = ( com.studiau.amazinggravity.ExhaustParticle.BASE_SPEEDY ) + ( randomFloat * ( com.studiau.amazinggravity.ExhaustParticle.MAX_ADDITIONAL_SPEEDY ) ) ; } <s> fixed some exhaust particle bugs
fix_before_refactoring: ( random . nextFloat () ) - 0.5F
fix_after_refactoring: ( random . nextFloat () ) - 0.5F
× fix_prediction_before: randomFloat - 1.5F
× fix_prediction_after: vrjmuptzzoywdlxppsoj - 0.5F

line_index: 35
bug_before_refactoring: for ( int i = index - ( side ) ; i < ( index + ( side ) ) ; i ++ ) { retArr [ j ] = array [ i ] ; j ++ ; } <s> private float [] cutArray ( int index ) { float [] retArr = new float [ filterSize ] ; int j = 0 ; for ( int i = index - ( side ) ; i < ( index + ( side ) ) ; i ++ ) { retArr [ j ] = array [ i ] ; j ++ ; } return retArr ; } <s> fixed out by one error  seemingly working parallelisation
bug_after_refactoring: for ( int i = index - ( side ) ; i < ( index + ( side ) ) ; i ++ ) { wzbaedbhlagvngtsjrqi [ ahlmzlddupaplqezsijj ] = array [ i ] ; ahlmzlddupaplqezsijj ++ ; } <s> private float [] cutArray ( int index ) { float [] retArr = new float [ filterSize ] ; int j = 0 ; for ( int i = index - ( side ) ; i < ( index + ( side ) ) ; i ++ ) { wzbaedbhlagvngtsjrqi [ ahlmzlddupaplqezsijj ] = array [ i ] ; ahlmzlddupaplqezsijj ++ ; } return retArr ; } <s> fixed out by one error  seemingly working parallelisation
fix_before_refactoring: for ( int i = index - ( side ) ; i <= ( index + ( side ) ) ; i ++ ) { retArr [ j ] = array [ i ] ; j ++ ; }
fix_after_refactoring: for ( int i = index - ( side ) ; i <= ( index + ( side ) ) ; i ++ ) { wzbaedbhlagvngtsjrqi [ ahlmzlddupaplqezsijj ] = array [ i ] ; ahlmzlddupaplqezsijj ++ ; }
× fix_prediction_before: for ( int i = index - ( side ) ; j < ( index - ( side ) ) ; j ++ ) { retArr [ j ] = array [ i ] ; j ++ ; }
× fix_prediction_after: for ( int i = index - ( side ) ; j < ( index - ( side ) ) ; j ++ ) { wzbaedbhlagvngtsjrqi [ ahlmzlddupaplqezsijj ] = array [ i ] ; ahlmzlddupaplqezsijj ++ ; }

line_index: 36
bug_before_refactoring: for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i ++ ) { if ( this . glasses [ i ] . isActive () ) break; else score ++ ; } <s> public int getPlayer1Score () { int score = 0 ; for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i ++ ) { if ( this . glasses [ i ] . isActive () ) break; else score ++ ; } return score ; } <s> BUGFIX: Player 1 score calculation would cause exception
bug_after_refactoring: for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i ++ ) { if ( this . glasses [ i ] . isActive () ) break; else ourtdkugepoxpxgpcfhz ++ ; } <s> public int getPlayer1Score () { int score = 0 ; for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i ++ ) { if ( this . glasses [ i ] . isActive () ) break; else ourtdkugepoxpxgpcfhz ++ ; } return score ; } <s> BUGFIX: Player 1 score calculation would cause exception
fix_before_refactoring: for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i -- ) { if ( this . glasses [ i ] . isActive () ) break; else score ++ ; }
fix_after_refactoring: for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i -- ) { if ( this . glasses [ i ] . isActive () ) break; else ourtdkugepoxpxgpcfhz ++ ; }
× fix_prediction_before: for ( int i = ( this . scissors . length ) - 1 ; i <= ( ( this . scissors . length ) / 2 ) ; i ++ ) { if ( this . scissors [ i ] . isActive () ) break; else score ++ ; }
× fix_prediction_after: for ( int i = ( this . scissors . length ) - 1 ; i <= ( ( this . scanners . length ) / 2 ) ; i ++ ) { if ( this . scissors [ i ] . isActive () ) break; else ourtdkugepoxpxgpcfhz ++ ; }

line_index: 37
bug_before_refactoring: { java.util.Random rand = new java.util.Random () ; int randNum = rand . nextInt ( emptyTiles.length ) ; int row = emptyTiles [ randNum ] [ 1 ] ; int column = emptyTiles [ randNum ] [ 2 ] ; Model.board [ row ] [ column ] = newValue () ; } <s> private void addNewLogicalTile () { int [] [] emptyTiles = getEmptyTiles () ; if ( ( emptyTiles.length ) > 0 ) { java.util.Random rand = new java.util.Random () ; int randNum = rand . nextInt ( emptyTiles.length ) ; int row = emptyTiles [ randNum ] [ 1 ] ; int column = emptyTiles [ randNum ] [ 2 ] ; Model.board [ row ] [ column ] = newValue () ; } } <s> fixed small bug
bug_after_refactoring: { java.util.Random rand = new java.util.Random () ; int xpvbdaqseeomyzkluyhg = rand . nextInt ( tsoyfudmtevhmwybhivj.length ) ; int phgfhtjopkhorrogegmf = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 1 ] ; int iiwsekfipbmjaqvjkwhy = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 2 ] ; Model.board [ phgfhtjopkhorrogegmf ] [ iiwsekfipbmjaqvjkwhy ] = newValue () ; } <s> private void addNewLogicalTile () { int [] [] emptyTiles = getEmptyTiles () ; if ( ( emptyTiles.length ) > 0 ) { java.util.Random rand = new java.util.Random () ; int xpvbdaqseeomyzkluyhg = rand . nextInt ( tsoyfudmtevhmwybhivj.length ) ; int phgfhtjopkhorrogegmf = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 1 ] ; int iiwsekfipbmjaqvjkwhy = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 2 ] ; Model.board [ phgfhtjopkhorrogegmf ] [ iiwsekfipbmjaqvjkwhy ] = newValue () ; } } <s> fixed small bug
fix_before_refactoring: { java.util.Random rand = new java.util.Random () ; int randNum = rand . nextInt ( emptyTiles.length ) ; int row = emptyTiles [ randNum ] [ 0 ] ; int column = emptyTiles [ randNum ] [ 1 ] ; Model.board [ row ] [ column ] = newValue () ; }
fix_after_refactoring: { java.util.Random rand = new java.util.Random () ; int xpvbdaqseeomyzkluyhg = rand . nextInt ( tsoyfudmtevhmwybhivj.length ) ; int phgfhtjopkhorrogegmf = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 0 ] ; int iiwsekfipbmjaqvjkwhy = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 1 ] ; Model.board [ phgfhtjopkhorrogegmf ] [ iiwsekfipbmjaqvjkwhy ] = newValue () ; }
× fix_prediction_before: { java.util.Random rand = new java.util.Random () ; int randNum = rand . nextInt ( emptyTiles.length ) ; int row = emptyTiles [ randNum ] [ 1 ] ; int column = emptyTiles [ randNum ] [ 2 ] ; Model.board [ row ] [ column ] = newValue () ; }
× fix_prediction_after: { java.util.Random rand = new java.util.Random () ; int xpvbdaqseeomyzkluyhg = java.lang.System.out . println ( tsoyfudmtevhmwybhivj.length ) ; int phgfhtjopkhorrogegmf = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 1 ] ; int iiwsekfipbmjaqvjkwhy = tsoyfudmtevhmwybhivj [ xpvbdaqseeomyzkluyhg ] [ 2 ] ; Model.board [ phgfhtjopkhorrogegmf ] [ iiwsekfipbmjaqvjkwhy ] = newValue () ; }

line_index: 38
bug_before_refactoring: { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; pstmt . close () ; if ( rs . next () ) result = true ; } <s> public boolean judgeUserExist ( java.lang.String name ) { java.lang.String sql = ( "select * from User where NAME='" + name ) + "'" ; boolean result = false ; try { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; pstmt . close () ; if ( rs . next () ) result = true ; } catch ( java.lang.Exception ex ) { ex . printStackTrace () ; } return result ; } <s> Fix some bugs of Database
bug_after_refactoring: { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; pstmt . close () ; if ( rs . next () ) zeyfqgpmxjejgvbecstm = true ; } <s> public boolean judgeUserExist ( java.lang.String name ) { java.lang.String sql = ( "select * from User where NAME='" + name ) + "'" ; boolean result = false ; try { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; pstmt . close () ; if ( rs . next () ) zeyfqgpmxjejgvbecstm = true ; } catch ( java.lang.Exception ex ) { ex . printStackTrace () ; } return result ; } <s> Fix some bugs of Database
fix_before_refactoring: { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; if ( rs . next () ) result = true ; pstmt . close () ; }
fix_after_refactoring: { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; if ( rs . next () ) zeyfqgpmxjejgvbecstm = true ; pstmt . close () ; }
× fix_prediction_before: { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; if ( rs . next () ) result = true ; }
× fix_prediction_after: { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; if ( rs . next () ) zmt . close () ; }

line_index: 40
bug_before_refactoring: { int index = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) index += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int indexToAssign = index ; mAddBtn . setOnClickListener ( new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , indexToAssign ) ; } } ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int index = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) index += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int indexToAssign = index ; mAddBtn . setOnClickListener ( new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , indexToAssign ) ; } } ) ; } <s> miniBugs fixed
bug_after_refactoring: { int xewqdwlcrkxqyeliouos = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) xewqdwlcrkxqyeliouos += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int ywgtkmkdaddqactxcmmo = xewqdwlcrkxqyeliouos ; mAddBtn . setOnClickListener ( new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , ywgtkmkdaddqactxcmmo ) ; } } ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int xewqdwlcrkxqyeliouos = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) xewqdwlcrkxqyeliouos += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int ywgtkmkdaddqactxcmmo = xewqdwlcrkxqyeliouos ; mAddBtn . setOnClickListener ( new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , ywgtkmkdaddqactxcmmo ) ; } } ) ; } <s> miniBugs fixed
fix_before_refactoring: { int index = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) index += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int indexToAssign = index ; uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , indexToAssign ) ; }
fix_after_refactoring: { int xewqdwlcrkxqyeliouos = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) xewqdwlcrkxqyeliouos += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int ywgtkmkdaddqactxcmmo = xewqdwlcrkxqyeliouos ; uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , ywgtkmkdaddqactxcmmo ) ; }
× fix_prediction_before: { int index = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) index += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; mAddBtn . setOnClickListener ( new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , indexToAssign ) ; } } ) ; }
× fix_prediction_after: { int xewqdwlcrkxqyelaouos = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) xewqdwlcrkxqyelaouos += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int ywgtkmkdaddqactxcmmo = xewqdwlcrkxqyeliouos ; mAddBtn . setOnClickListener ( new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , ywgtkmkdaddqactxcmmo ) ; } } ) ; }

line_index: 41
bug_before_refactoring: { int attr = a . getIndex ( i ) ; switch ( attr ) { case R.styleable.ColorButton_jr_color : mColor = a . getColor ( attr , 0 ) ; colorify () ; break; } } <s> private void processAttributes ( android.content.Context context , android.util.AttributeSet attrs ) { android.content.res.TypedArray a = context . obtainStyledAttributes ( attrs , R.styleable.ColorButton ) ; final int N = a . getIndexCount () ; for ( int i = 0 ; i < N ; ++ i ) { int attr = a . getIndex ( i ) ; switch ( attr ) { case R.styleable.ColorButton_jr_color : mColor = a . getColor ( attr , 0 ) ; colorify () ; break; } } a . recycle () ; } <s> Android 5 support  bug fixes and new feature.
bug_after_refactoring: { int vxewlionysoqqjysbpvm = a . getIndex ( i ) ; switch ( vxewlionysoqqjysbpvm ) { case R.styleable.ColorButton_jr_color : mColor = a . getColor ( vxewlionysoqqjysbpvm , 0 ) ; colorify () ; break; } } <s> private void processAttributes ( android.content.Context context , android.util.AttributeSet attrs ) { android.content.res.TypedArray a = context . obtainStyledAttributes ( attrs , R.styleable.ColorButton ) ; final int N = a . getIndexCount () ; for ( int i = 0 ; i < N ; ++ i ) { int vxewlionysoqqjysbpvm = a . getIndex ( i ) ; switch ( vxewlionysoqqjysbpvm ) { case R.styleable.ColorButton_jr_color : mColor = a . getColor ( vxewlionysoqqjysbpvm , 0 ) ; colorify () ; break; } } a . recycle () ; } <s> Android 5 support  bug fixes and new feature.
fix_before_refactoring: { int attr = a . getIndex ( i ) ; if ( attr == ( R.styleable.ColorButton_jr_color ) ) { mColor = a . getColor ( attr , 0 ) ; colorify () ; break; } }
fix_after_refactoring: { int vxewlionysoqqjysbpvm = a . getIndex ( i ) ; if ( vxewlionysoqqjysbpvm == ( R.styleable.ColorButton_jr_color ) ) { mColor = a . getColor ( vxewlionysoqqjysbpvm , 0 ) ; colorify () ; break; } }
× fix_prediction_before: { int attr = a . getIndex ( i ) ; switch ( attr ) { case R.styleable.ColorButton_jr_color : mColor = a . getColor ( attr , 0 ) ; colorify () ; break; } }
× fix_prediction_after: { int vxewlionysoqqjysbpvm = a . getIndex ( i ) ; switch ( vxewlionysoqqjysbpvm ) { case R.styleable.ColorButton_jr_color : mColor = a . getColor ( vxewlionysoqqjysbpvm , 0 ) ; colorify () ; break; } }

line_index: 42
bug_before_refactoring: { int [] hashes = getHashes ( key ) ; for ( int hash : hashes ) { if ( store . getBit ( ( hash % ( capacity ) ) ) ) { return true ; } } return false ; } <s> public boolean contains ( java.lang.String key ) { int [] hashes = getHashes ( key ) ; for ( int hash : hashes ) { if ( store . getBit ( ( hash % ( capacity ) ) ) ) { return true ; } } return false ; } <s> Add test  fix bugs
bug_after_refactoring: { int [] dzjyzephxywroqwydiog = getHashes ( key ) ; for ( int hash : dzjyzephxywroqwydiog ) { if ( store . getBit ( ( hash % ( capacity ) ) ) ) { return true ; } } return false ; } <s> public boolean contains ( java.lang.String key ) { int [] dzjyzephxywroqwydiog = getHashes ( key ) ; for ( int hash : dzjyzephxywroqwydiog ) { if ( store . getBit ( ( hash % ( capacity ) ) ) ) { return true ; } } return false ; } <s> Add test  fix bugs
fix_before_refactoring: { int [] hashes = getHashes ( key ) ; for ( int hash : hashes ) { if ( ! ( store . getBit ( ( hash % ( capacity ) ) ) ) ) { return false ; } } return true ; }
fix_after_refactoring: { int [] dzjyzephxywroqwydiog = getHashes ( key ) ; for ( int hash : dzjyzephxywroqwydiog ) { if ( ! ( store . getBit ( ( hash % ( capacity ) ) ) ) ) { return false ; } } return true ; }
× fix_prediction_before: { int [] hashes = getHashes ( key ) ; for ( int hash : hashes ) { if ( store . getBit ( ( hash % ( capacity ) ) ) ) { return true ; } } return false ; }
× fix_prediction_after: { int [] dzjyzephxywroqwydiog = getHashes ( key ) ; if ( ( dzjyzephxywroqwydiog ) == null ) { return false ; } for ( int hash : dzjyzephxywroqwydiog ) { if ( store . getBit ( ( hash % ( capacity ) ) ) ) { return true ; } } return false ; }

line_index: 43
bug_before_refactoring: { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; int start = improviseStartSlot ; originalGenerate ( lickgen , start , improviseEndSlot ) ; } <s> private void handleAutoImprov ( int slotInPlayback ) { int gap = lickgenFrame . getGap () ; if ( ( lickgenFrame . getRecurrent () ) && ( slotInPlayback >= ( ( stopPlaybackAtSlot ) - gap ) ) ) { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; int start = improviseStartSlot ; originalGenerate ( lickgen , start , improviseEndSlot ) ; } } <s> Fixed bug wherein using Active Trading would mess up things for subsequent Passive Trading  by causing MidiRecorder to reset the target MelodyPart. The needed modification is the first line of improviseContinuously which sets active trading off.
bug_after_refactoring: { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; int ijqysxmygiopgidwvnpd = improviseStartSlot ; originalGenerate ( lickgen , ijqysxmygiopgidwvnpd , improviseEndSlot ) ; } <s> private void handleAutoImprov ( int slotInPlayback ) { int gap = lickgenFrame . getGap () ; if ( ( lickgenFrame . getRecurrent () ) && ( slotInPlayback >= ( ( stopPlaybackAtSlot ) - gap ) ) ) { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; int ijqysxmygiopgidwvnpd = improviseStartSlot ; originalGenerate ( lickgen , ijqysxmygiopgidwvnpd , improviseEndSlot ) ; } } <s> Fixed bug wherein using Active Trading would mess up things for subsequent Passive Trading  by causing MidiRecorder to reset the target MelodyPart. The needed modification is the first line of improviseContinuously which sets active trading off.
fix_before_refactoring: { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; originalGenerate ( lickgen , improviseStartSlot , improviseEndSlot ) ; }
fix_after_refactoring: { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; originalGenerate ( lickgen , improviseStartSlot , improviseEndSlot ) ; }
× fix_prediction_before: { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; int start = improviseStartSlot ; originalGenerate ( lickgen , start , improviseEndSlot ) ; }
× fix_prediction_after: { ( recurrentIteration ) ++ ; setFirstChorus ( false ) ; setStatus ( ( "Chorus " + ( recurrentIteration ) ) ) ; int ijqysxmygiopgidwvnpd = improviseStartSlot ; originalGenerate ( lickgen , ijqysxmygiopgidwvnpd , improviseEndSlot ) ; }

line_index: 44
bug_before_refactoring: @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int ctrlMod = ( java.awt.event.MouseWheelEvent.CTRL_MASK ) | ( java.awt.event.MouseWheelEvent.CTRL_DOWN_MASK ) ; int modifier = e . getModifiers () ; boolean ctrlDown = ( modifier & ctrlMod ) != 0 ; if ( ctrlDown ) { int sign = e . getWheelRotation () ; if ( sign < 0 ) { this . cam_zoom_increase () ; return; } if ( sign > 0 ) { this . cam_zoom_decrease () ; return; } } } <s> @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int ctrlMod = ( java.awt.event.MouseWheelEvent.CTRL_MASK ) | ( java.awt.event.MouseWheelEvent.CTRL_DOWN_MASK ) ; int modifier = e . getModifiers () ; boolean ctrlDown = ( modifier & ctrlMod ) != 0 ; if ( ctrlDown ) { int sign = e . getWheelRotation () ; if ( sign < 0 ) { this . cam_zoom_increase () ; return; } if ( sign > 0 ) { this . cam_zoom_decrease () ; return; } } } <s> fixed history bug
bug_after_refactoring: @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int zgphddqoqfyochvisghn = ( java.awt.event.MouseWheelEvent.CTRL_MASK ) | ( java.awt.event.MouseWheelEvent.CTRL_DOWN_MASK ) ; int fnqpmwgrynpkxkhhpxkh = e . getModifiers () ; boolean bgkibcxqqdkpgkwywftz = ( fnqpmwgrynpkxkhhpxkh & zgphddqoqfyochvisghn ) != 0 ; if ( bgkibcxqqdkpgkwywftz ) { int dkmioagdgshvfplwhgqz = e . getWheelRotation () ; if ( dkmioagdgshvfplwhgqz < 0 ) { this . cam_zoom_increase () ; return; } if ( dkmioagdgshvfplwhgqz > 0 ) { this . cam_zoom_decrease () ; return; } } } <s> @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int zgphddqoqfyochvisghn = ( java.awt.event.MouseWheelEvent.CTRL_MASK ) | ( java.awt.event.MouseWheelEvent.CTRL_DOWN_MASK ) ; int fnqpmwgrynpkxkhhpxkh = e . getModifiers () ; boolean bgkibcxqqdkpgkwywftz = ( fnqpmwgrynpkxkhhpxkh & zgphddqoqfyochvisghn ) != 0 ; if ( bgkibcxqqdkpgkwywftz ) { int dkmioagdgshvfplwhgqz = e . getWheelRotation () ; if ( dkmioagdgshvfplwhgqz < 0 ) { this . cam_zoom_increase () ; return; } if ( dkmioagdgshvfplwhgqz > 0 ) { this . cam_zoom_decrease () ; return; } } } <s> fixed history bug
fix_before_refactoring: @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int sign = e . getWheelRotation () ; if ( sign < 0 ) { this . cam_zoom_increase () ; return; } if ( sign > 0 ) { this . cam_zoom_decrease () ; return; } }
fix_after_refactoring: @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int dkmioagdgshvfplwhgqz = e . getWheelRotation () ; if ( dkmioagdgshvfplwhgqz < 0 ) { this . cam_zoom_increase () ; return; } if ( dkmioagdgshvfplwhgqz > 0 ) { this . cam_zoom_decrease () ; return; } }
× fix_prediction_before: @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int ctrlMod = ( java.awt.event.MouseWheelEvent.CTRL_MASK ) | ( java.awt.event.MouseWheelEvent.CTRL_DOWN_MASK ) ; int modifier = e . getModifiers () ; boolean ctrlDown = ( modifier & ctrlMod ) != 0 ; if ( ctrlDown ) { int sign = e . getWheelRotation () ; if ( sign < 0 ) { cam_zoom_increase () ; return; } if ( sign > 0 ) { this . cam_zoom_decrease () ; return; } } }
× fix_prediction_after: @ java.lang.Override public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e ) { int zgphddqoqfyochvisghn = ( java.awt.event.MouseWheelEvent.CTRL_MASK ) | ( java.awt.event.MouseWheelEvent.CTRL_DOWN_MASK ) ; int fnqpmwgrynpkxkhhpxkh = e . getModifiers () ; boolean bgkibcxqqdkpgkwywftz = ( fnqpmwgrynpkxkhhpxkh & zgphddqoqfyochvisghn ) != 0 ; if ( bgkibcxqqdkpgkwywftz ) { int dkmioagdgshvfplwhgqz = e . getWheelRotation () ; if ( dkmioagdgshvfplwhgqz < 0 ) { this . cam_zoom_increase () ; return; } } if ( dkmioagdgshvfplwhgqz > 0 ) { this . cam_zoom_dec

line_index: 45
bug_before_refactoring: { android.util.Log . d ( LOG_TAG , "Uploading picture on web server." ) ; org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; org.json.JSONArray jArr = new org.json.JSONArray () ; byte [] pictureData = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( pictureData , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; } <s> public void uploadPicture ( com.pervasive.sth.network.Media mediaFile ) throws java.lang.Exception { android.util.Log . d ( LOG_TAG , "Uploading picture on web server." ) ; org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; org.json.JSONArray jArr = new org.json.JSONArray () ; byte [] pictureData = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( pictureData , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; } <s> Fixed hunter buttons bug and removed unused variables
bug_after_refactoring: { android.util.Log . d ( LOG_TAG , "Uploading picture on web server." ) ; org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; org.json.JSONArray jArr = new org.json.JSONArray () ; byte [] mzcamckkfkdvafmhptyd = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( mzcamckkfkdvafmhptyd , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; } <s> public void uploadPicture ( com.pervasive.sth.network.Media mediaFile ) throws java.lang.Exception { android.util.Log . d ( LOG_TAG , "Uploading picture on web server." ) ; org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; org.json.JSONArray jArr = new org.json.JSONArray () ; byte [] mzcamckkfkdvafmhptyd = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( mzcamckkfkdvafmhptyd , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; } <s> Fixed hunter buttons bug and removed unused variables
fix_before_refactoring: { android.util.Log . d ( LOG_TAG , "Uploading picture on web server." ) ; org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; byte [] pictureData = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( pictureData , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; }
fix_after_refactoring: { android.util.Log . d ( LOG_TAG , "Uploading picture on web server." ) ; org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; byte [] mzcamckkfkdvafmhptyd = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( mzcamckkfkdvafmhptyd , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; }
× fix_prediction_before: { org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; org.json.JSONArray jArr = new org.json.JSONArray () ; byte [] pictureData = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( pictureData , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; }
× fix_prediction_after: { org.json.JSONObject jsonPicture = new org.json.JSONObject () ; jsonPicture . put ( "PIC_NAME" , mediaFile . getMediaName () ) ; org.json.JSONArray jArr = new org.json.JSONArray () ; byte [] mzcamckkfkdvafmhptyd = mediaFile . getData () ; java.lang.String encodedData = android.util.Base64 . encodeToString ( mzcamckkfkdvafmhptyd , Base64.DEFAULT ) ; jsonPicture . put ( "PIC_DATA" , encodedData ) ; pictureClient . executePost ( jsonPicture . toString () ) ; }

line_index: 46
bug_before_refactoring: { boolean in = false ; in = areaLeftX < ( pos.x ) ; in = ( pos.x ) < areaRightX ; in = areaUpY < ( pos.y ) ; in = ( pos.y ) < areaDownY ; return in ; } <s> public boolean isPointInArea ( java.awt.Point pos , int areaLeftX , int areaRightX , int areaUpY , int areaDownY ) { boolean in = false ; in = areaLeftX < ( pos.x ) ; in = ( pos.x ) < areaRightX ; in = areaUpY < ( pos.y ) ; in = ( pos.y ) < areaDownY ; return in ; } <s> Fixed bug. Integrate all position x y area checks to AND
bug_after_refactoring: { boolean hrufcqxajqhrjbdkzyhc = false ; hrufcqxajqhrjbdkzyhc = areaLeftX < ( pos.x ) ; hrufcqxajqhrjbdkzyhc = ( pos.x ) < areaRightX ; hrufcqxajqhrjbdkzyhc = areaUpY < ( pos.y ) ; hrufcqxajqhrjbdkzyhc = ( pos.y ) < areaDownY ; return hrufcqxajqhrjbdkzyhc ; } <s> public boolean isPointInArea ( java.awt.Point pos , int areaLeftX , int areaRightX , int areaUpY , int areaDownY ) { boolean hrufcqxajqhrjbdkzyhc = false ; hrufcqxajqhrjbdkzyhc = areaLeftX < ( pos.x ) ; hrufcqxajqhrjbdkzyhc = ( pos.x ) < areaRightX ; hrufcqxajqhrjbdkzyhc = areaUpY < ( pos.y ) ; hrufcqxajqhrjbdkzyhc = ( pos.y ) < areaDownY ; return hrufcqxajqhrjbdkzyhc ; } <s> Fixed bug. Integrate all position x y area checks to AND
fix_before_refactoring: { return ( ( ( areaLeftX < ( pos.x ) ) && ( ( pos.x ) < areaRightX ) ) && ( areaUpY < ( pos.y ) ) ) && ( ( pos.y ) < areaDownY ) ; }
fix_after_refactoring: { return ( ( ( areaLeftX < ( pos.x ) ) && ( ( pos.x ) < areaRightX ) ) && ( areaUpY < ( pos.y ) ) ) && ( ( pos.y ) < areaDownY ) ; }
× fix_prediction_before: { boolean in = false ; in = areaLeftX < ( pos.x ) ; in = ( pos.x ) < areaRightX ; in = ( pos.x ) < areaRightX ; in = ( pos.y ) < areaDownY ; return in ; }
× fix_prediction_after: { boolean hrufcqxajqhrjbdkzyhc = false ; hrufcqxajqhrjbdkzyhc = areaLeftX < ( pos.x ) ; hrufcqxajqhrjbdkzyhc = ( pos.x ) < areaRightX ; hrufcqxajqhrjbdkzyhc = ( pos.y ) < areaDownY ; return hrufcqxajqhrjbdkzyhc ; }

line_index: 47
bug_before_refactoring: copyAction ( db , a . getId () , newActionId , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , true ) <s> public void onClick ( android.content.DialogInterface dialog , int id ) { int newActionId = com.ha81dn.webausleser.backend.DatabaseHandler . getNewId ( db , "actions" ) ; copyAction ( db , a . getId () , newActionId , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , true ) ; com.ha81dn.webausleser.MainActivity.appActionMode . finish () ; db . close () ; com.ha81dn.webausleser.MainActivity . displaySection ( activity , "SOURCE" , idShow , null , newActionId ) ; } <s> copy and move bugfixes
bug_after_refactoring: copyAction ( db , a . getId () , pinohusijmhawwynvdqu , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , true ) <s> public void onClick ( android.content.DialogInterface dialog , int id ) { int newActionId = com.ha81dn.webausleser.backend.DatabaseHandler . getNewId ( db , "actions" ) ; copyAction ( db , a . getId () , pinohusijmhawwynvdqu , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , true ) ; com.ha81dn.webausleser.MainActivity.appActionMode . finish () ; db . close () ; com.ha81dn.webausleser.MainActivity . displaySection ( activity , "SOURCE" , idShow , null , newActionId ) ; } <s> copy and move bugfixes
fix_before_refactoring: copyAction ( db , a . getId () , newActionId , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , false )
fix_after_refactoring: copyAction ( db , a . getId () , pinohusijmhawwynvdqu , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , false )
× fix_prediction_before: copyAction ( db , a . getId () , newActionId , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , true )
× fix_prediction_after: copyAction ( db , a . getId () , pinohusijmhawmundvdqu , sortNr , com.ha81dn.webausleser.backend.DatabaseHandler . getUniqueCopiedActionName ( activity , db , input . getText () . toString () . trim () , com.ha81dn.webausleser.MainActivity.sourceId ) , idShow , false )

line_index: 48
bug_before_refactoring: { if ( ! ( active ) ) return; consumeEvent () ; if ( ( state ) == ( itdelatrisu.opsu.user.UserSelectOverlay.State.CREATE_USER ) ) return; int diff = newy - oldy ; if ( diff != 0 ) scrolling . dragged ( ( - diff ) ) ; } <s> @ java.lang.Override public void mouseDragged ( int oldx , int oldy , int newx , int newy ) { if ( ! ( active ) ) return; consumeEvent () ; if ( ( state ) == ( itdelatrisu.opsu.user.UserSelectOverlay.State.CREATE_USER ) ) return; int diff = newy - oldy ; if ( diff != 0 ) scrolling . dragged ( ( - diff ) ) ; } <s> Fix user selection screens for more than one page of users and icons. - Made the icon area scrollable. - Fixed a bug where users near the top weren't clickable when scrolled down.  Reorganized parts of the code to make it easier to follow.  Signed-off-by: Jeffrey Han <itdelatrisu@gmail.com>
bug_after_refactoring: { if ( ! ( active ) ) return; consumeEvent () ; if ( ( state ) == ( itdelatrisu.opsu.user.UserSelectOverlay.State.CREATE_USER ) ) return; int hzvawnrxfoshepvthzmn = newy - oldy ; if ( hzvawnrxfoshepvthzmn != 0 ) scrolling . dragged ( ( - hzvawnrxfoshepvthzmn ) ) ; } <s> @ java.lang.Override public void mouseDragged ( int oldx , int oldy , int newx , int newy ) { if ( ! ( active ) ) return; consumeEvent () ; if ( ( state ) == ( itdelatrisu.opsu.user.UserSelectOverlay.State.CREATE_USER ) ) return; int hzvawnrxfoshepvthzmn = newy - oldy ; if ( hzvawnrxfoshepvthzmn != 0 ) scrolling . dragged ( ( - hzvawnrxfoshepvthzmn ) ) ; } <s> Fix user selection screens for more than one page of users and icons. - Made the icon area scrollable. - Fixed a bug where users near the top weren't clickable when scrolled down.  Reorganized parts of the code to make it easier to follow.  Signed-off-by: Jeffrey Han <itdelatrisu@gmail.com>
fix_before_refactoring: { if ( ! ( active ) ) return; consumeEvent () ; int diff = newy - oldy ; if ( diff != 0 ) scrolling . dragged ( ( - diff ) ) ; }
fix_after_refactoring: { if ( ! ( active ) ) return; consumeEvent () ; int hzvawnrxfoshepvthzmn = newy - oldy ; if ( hzvawnrxfoshepvthzmn != 0 ) scrolling . dragged ( ( - hzvawnrxfoshepvthzmn ) ) ; }
× fix_prediction_before: { if ( ! ( active ) ) return; consumeEvent () ; if ( ( state ) == ( itdelatrisu.opsu.user.UserSelectOverlay.State.CREATE_USER ) ) return; int diff = newy - oldy ; if ( diff != 0 ) scrolling . dragged ( ( - diff ) ) ; }
× fix_prediction_after: { if ( ! ( active ) ) return; consumeEvent () ; if ( ( state ) == ( itdelatrisu.opsu.user.UserSelectOverlay.State.CREATE_USER ) ) return; int hzvawnrxfoshepvthzmn = newy - oldy ; if ( hzvawnrxfoshepvthzmn != 0 ) scrolling . dragged ( ( - hzvawnrxfoshepvthzmn ) ) ; }

line_index: 49
bug_before_refactoring: { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long startTimestamp = java.lang.System . currentTimeMillis () ; message . setTopic ( java.lang.String . valueOf ( configProperties . getTopic () ) ) ; producer . sendOneway ( message ) ; long costTime = ( java.lang.System . currentTimeMillis () ) - startTimestamp ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + costTime ) + " ms" ) ) ; return null ; } <s> public cn.com.hellowood.rocketmq.util.SendResult sendOneWayMessage ( cn.com.hellowood.rocketmq.util.Message message ) { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long startTimestamp = java.lang.System . currentTimeMillis () ; message . setTopic ( java.lang.String . valueOf ( configProperties . getTopic () ) ) ; producer . sendOneway ( message ) ; long costTime = ( java.lang.System . currentTimeMillis () ) - startTimestamp ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + costTime ) + " ms" ) ) ; return null ; } <s> :bug:Fixed issue of topic setting
bug_after_refactoring: { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long elcaprkuntfnfesbvpsw = java.lang.System . currentTimeMillis () ; message . setTopic ( java.lang.String . valueOf ( configProperties . getTopic () ) ) ; producer . sendOneway ( message ) ; long fdglqqvprbcwajusvljj = ( java.lang.System . currentTimeMillis () ) - elcaprkuntfnfesbvpsw ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + fdglqqvprbcwajusvljj ) + " ms" ) ) ; return null ; } <s> public cn.com.hellowood.rocketmq.util.SendResult sendOneWayMessage ( cn.com.hellowood.rocketmq.util.Message message ) { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long elcaprkuntfnfesbvpsw = java.lang.System . currentTimeMillis () ; message . setTopic ( java.lang.String . valueOf ( configProperties . getTopic () ) ) ; producer . sendOneway ( message ) ; long fdglqqvprbcwajusvljj = ( java.lang.System . currentTimeMillis () ) - elcaprkuntfnfesbvpsw ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + fdglqqvprbcwajusvljj ) + " ms" ) ) ; return null ; } <s> :bug:Fixed issue of topic setting
fix_before_refactoring: { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long startTimestamp = java.lang.System . currentTimeMillis () ; producer . sendOneway ( message ) ; long costTime = ( java.lang.System . currentTimeMillis () ) - startTimestamp ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + costTime ) + " ms" ) ) ; return null ; }
fix_after_refactoring: { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long elcaprkuntfnfesbvpsw = java.lang.System . currentTimeMillis () ; producer . sendOneway ( message ) ; long fdglqqvprbcwajusvljj = ( java.lang.System . currentTimeMillis () ) - elcaprkuntfnfesbvpsw ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + fdglqqvprbcwajusvljj ) + " ms" ) ) ; return null ; }
× fix_prediction_before: { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long startTimestamp = java.lang.System . currentTimeMillis () ; message . setTopic ( java.lang.String . valueOf ( configProperties . getTopic () ) ) ; producer . sendOneway ( message ) ; long costTime = ( java.lang.System . currentTimeMillis () ) - startTimestamp ; cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( ( ( "MQ completed send ONE_WAY message in " + costTime ) + " ms" ) ) ; return null ; }
× fix_prediction_after: { cn.com.hellowood.rocketmq.util.ProducerHelper.logger . info ( "MQ start send ONE_WAY message " ) ; long elcaprkuntfnfesbvpsw = java.lang.System . currentTimeMillis () ; message . setTopic ( java.lang.String . valueOf ( configProperties . getTopic () ) ) ; producer . sendOneway ( message ) ; long fdglqqvprbcwajusvljj = ( java.lang.System . currentTimeMillis () ) - elcaprkuntfnfesbvpsw ; return null ; }

line_index: 50
bug_before_refactoring: { java.lang.String newID = "-400" ; com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int oldID = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( oldID , name , street , city , state , zip ) ; return; } <s> public synchronized void syncNewDriver ( java.lang.String name , java.lang.String street , java.lang.String city , java.lang.String state , java.lang.String zip ) { java.lang.String newID = "-400" ; com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int oldID = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( oldID , name , street , city , state , zip ) ; return; } <s> some bug fixes with sending passes
bug_after_refactoring: { java.lang.String newID = "-400" ; com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int fotknacxrvofkrjqjayx = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( fotknacxrvofkrjqjayx , name , street , city , state , zip ) ; return; } <s> public synchronized void syncNewDriver ( java.lang.String name , java.lang.String street , java.lang.String city , java.lang.String state , java.lang.String zip ) { java.lang.String newID = "-400" ; com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int fotknacxrvofkrjqjayx = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( fotknacxrvofkrjqjayx , name , street , city , state , zip ) ; return; } <s> some bug fixes with sending passes
fix_before_refactoring: { com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int oldID = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( oldID , name , street , city , state , zip ) ; return; }
fix_after_refactoring: { com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int fotknacxrvofkrjqjayx = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( fotknacxrvofkrjqjayx , name , street , city , state , zip ) ; return; }
× fix_prediction_before: { java.lang.String newID = "-400" ; com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int oldID = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( oldID , name , street , city , state , zip ) ; return; }
× fix_prediction_after: { java.lang.String newID = "-400" ; com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver sendInfoDriver = new com.example.android.rowanparkingpass.Networking.SendInfo.SendInfoDriver () ; org.json.JSONObject json ; int fotknacxrvofkrjqjayx = db . addDriver ( name , street , city , arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . valueOf ( arrayOfStates [ java.lang.Integer . parseInt ( state ) ] . name () ) . toString () , zip ) ; sendInfoDriver . addDriver ( fotknacxrvofkrjqjayx , name , street , city , state , zip ) ; return; }

line_index: 51
bug_before_refactoring: ( index > movesAmount ) ? index - movesAmount : index <s> private com.github.com.ricardobaumann.jankenpon.Player.MOVE getMove ( int index ) { com.github.com.ricardobaumann.jankenpon.Player.MOVE [] moves = com.github.com.ricardobaumann.jankenpon.Player.MOVE . values () ; int movesAmount = moves.length ; int moveIndex = ( index > movesAmount ) ? index - movesAmount : index ; return moves [ ( moveIndex - 1 ) ] ; } <s> bug fix
bug_after_refactoring: ( index > ywyxhqybdkbjjnvbsnyk ) ? index - ywyxhqybdkbjjnvbsnyk : index <s> private com.github.com.ricardobaumann.jankenpon.Player.MOVE getMove ( int index ) { com.github.com.ricardobaumann.jankenpon.Player.MOVE [] moves = com.github.com.ricardobaumann.jankenpon.Player.MOVE . values () ; int movesAmount = moves.length ; int moveIndex = ( index > ywyxhqybdkbjjnvbsnyk ) ? index - ywyxhqybdkbjjnvbsnyk : index ; return moves [ ( moveIndex - 1 ) ] ; } <s> bug fix
fix_before_refactoring: ( index > movesAmount ) ? index / movesAmount : index
fix_after_refactoring: ( index > ywyxhqybdkbjjnvbsnyk ) ? index / ywyxhqybdkbjjnvbsnyk : index
× fix_prediction_before: ( index > movesAmount ) ? index - movesAmount : ( index - movesAmount ) - 1
× fix_prediction_after: ( index > ywyxhqybdkbjjnvbsnyk ) ? index - ywyxhqybdkbjjnvbsnyk : index

line_index: 52
bug_before_refactoring: mes = java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) ) <s> public void setDataTermino ( java.lang.String dataTermino ) { int dia = java.lang.Integer . parseInt ( dataTermino . substring ( 0 , 2 ) ) ; int mes = java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) ) ; int ano = java.lang.Integer . parseInt ( dataTermino . substring ( 6 ) ) ; java.util.Calendar c = java.util.Calendar . getInstance () ; c . set ( ano , mes , dia ) ; this . dataTermino = c ; } <s> bugfix: mes 12 virava mes 00
bug_after_refactoring: idrjwqhnhjbuoktuiyov = java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) ) <s> public void setDataTermino ( java.lang.String dataTermino ) { int dia = java.lang.Integer . parseInt ( dataTermino . substring ( 0 , 2 ) ) ; int idrjwqhnhjbuoktuiyov = java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) ) ; int ano = java.lang.Integer . parseInt ( dataTermino . substring ( 6 ) ) ; java.util.Calendar c = java.util.Calendar . getInstance () ; c . set ( ano , mes , dia ) ; this . dataTermino = c ; } <s> bugfix: mes 12 virava mes 00
fix_before_refactoring: mes = ( java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) ) ) - 1
fix_after_refactoring: idrjwqhnhjbuoktuiyov = ( java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) ) ) - 1
× fix_prediction_before: mes = java.lang.Integer . parseInt ( dataTermino . substring ( 3 , 5 ) )
× fix_prediction_after: idrjwqhnhjbuoktuiyov = java.lang.Long . parseLong ( dataTermino . substring ( 3 , 5 ) )

line_index: 53
bug_before_refactoring: { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; int newMove = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; return i . getDirections () . get ( newMove ) ; } <s> private me.ihaq.pacman.menu.Game.FACING newDirection () { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; int newMove = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; return i . getDirections () . get ( newMove ) ; } <s> Version 1.7.9  + Fixed bugs - Need to fix AI
bug_after_refactoring: { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; int ojevyyldbjqlqtfcgjyt = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; return i . getDirections () . get ( ojevyyldbjqlqtfcgjyt ) ; } <s> private me.ihaq.pacman.menu.Game.FACING newDirection () { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; int ojevyyldbjqlqtfcgjyt = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; return i . getDirections () . get ( ojevyyldbjqlqtfcgjyt ) ; } <s> Version 1.7.9  + Fixed bugs - Need to fix AI
fix_before_refactoring: { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; int newMove = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; java.lang.System.out . println ( i . getDirections () . get ( newMove ) ) ; return i . getDirections () . get ( newMove ) ; }
fix_after_refactoring: { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; int ojevyyldbjqlqtfcgjyt = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; java.lang.System.out . println ( i . getDirections () . get ( ojevyyldbjqlqtfcgjyt ) ) ; return i . getDirections () . get ( ojevyyldbjqlqtfcgjyt ) ; }
× fix_prediction_before: { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; if ( ( i . getDirections () . size () ) == 0 ) { return null ; } int newMove = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; return i . getDirections () . get ( newMove ) ; }
× fix_prediction_after: { me.ihaq.pacman.utils.Intersection i = getCollidingIntersection () ; if ( ( i . getDirections () . size () ) > 0 ) { int ojevyyldbjqlqtfcgjyt = new java.util.Random () . nextInt ( ( ( i . getDirections () . size () ) - 1 ) ) ; return i . getDirections () . get ( ojevyyldbjqlqtfcgjyt ) ; } return null ; }

line_index: 54
bug_before_refactoring: { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean containsItests = false ; while ( ( deps . iterator () . hasNext () ) && ( ! containsItests ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( deps . iterator () . next () ) ) ; containsItests |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return containsItests ; } <s> private boolean projectHasItestsDependency () { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean containsItests = false ; while ( ( deps . iterator () . hasNext () ) && ( ! containsItests ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( deps . iterator () . next () ) ) ; containsItests |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return containsItests ; } <s> Stupid bug Fixing.
bug_after_refactoring: { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean vafgnlynvhnetsvtorar = false ; while ( ( deps . iterator () . hasNext () ) && ( ! vafgnlynvhnetsvtorar ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( deps . iterator () . next () ) ) ; vafgnlynvhnetsvtorar |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return vafgnlynvhnetsvtorar ; } <s> private boolean projectHasItestsDependency () { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean vafgnlynvhnetsvtorar = false ; while ( ( deps . iterator () . hasNext () ) && ( ! vafgnlynvhnetsvtorar ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( deps . iterator () . next () ) ) ; vafgnlynvhnetsvtorar |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return vafgnlynvhnetsvtorar ; } <s> Stupid bug Fixing.
fix_before_refactoring: { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean containsItests = false ; java.util.Iterator i = deps . iterator () ; while ( ( i . hasNext () ) && ( ! containsItests ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( i . next () ) ) ; containsItests |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return containsItests ; }
fix_after_refactoring: { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean vafgnlynvhnetsvtorar = false ; java.util.Iterator i = deps . iterator () ; while ( ( i . hasNext () ) && ( ! vafgnlynvhnetsvtorar ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( i . next () ) ) ; vafgnlynvhnetsvtorar |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return vafgnlynvhnetsvtorar ; }
× fix_prediction_before: { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean containsItests = false ; while ( ( deps . iterator () . hasNext () ) && ( ! containsItests ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( deps . iterator () . next () ) ) ; containsItests |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return containsItests ; }
× fix_prediction_after: { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean vafgnlynvhnetsvtorar = false ; while ( ( deps . iterator () . hasNext () ) && ( ! vafgnlynvhnetsvtorar ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( deps . iterator () . next () ) ) ; vafgnlynvhnetsvtorar |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return vafgnlynvhnetsvtorar ; }

line_index: 55
bug_before_refactoring: private void checkMinutesSinceLastAction () { if ( ( stateMachine . getCurrent () . getPomosDone () ) > 0 ) { int localMinutesSinceLastAction = getMinutesSinceLastAction () ; if ( localMinutesSinceLastAction > ( minutesSinceLastAction ) ) { minutesSinceLastAction = localMinutesSinceLastAction ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } } } <s> private void checkMinutesSinceLastAction () { if ( ( stateMachine . getCurrent () . getPomosDone () ) > 0 ) { int localMinutesSinceLastAction = getMinutesSinceLastAction () ; if ( localMinutesSinceLastAction > ( minutesSinceLastAction ) ) { minutesSinceLastAction = localMinutesSinceLastAction ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } } } <s> Fixed auto-reset bug.
bug_after_refactoring: private void checkMinutesSinceLastAction () { if ( ( stateMachine . getCurrent () . getPomosDone () ) > 0 ) { int mywukgxbooifmgvtonlg = getMinutesSinceLastAction () ; if ( mywukgxbooifmgvtonlg > ( minutesSinceLastAction ) ) { minutesSinceLastAction = mywukgxbooifmgvtonlg ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } } } <s> private void checkMinutesSinceLastAction () { if ( ( stateMachine . getCurrent () . getPomosDone () ) > 0 ) { int mywukgxbooifmgvtonlg = getMinutesSinceLastAction () ; if ( mywukgxbooifmgvtonlg > ( minutesSinceLastAction ) ) { minutesSinceLastAction = mywukgxbooifmgvtonlg ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } } } <s> Fixed auto-reset bug.
fix_before_refactoring: private void checkMinutesSinceLastAction () { int localMinutesSinceLastAction = getMinutesSinceLastAction () ; if ( localMinutesSinceLastAction > ( minutesSinceLastAction ) ) { minutesSinceLastAction = localMinutesSinceLastAction ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } }
fix_after_refactoring: private void checkMinutesSinceLastAction () { int mywukgxbooifmgvtonlg = getMinutesSinceLastAction () ; if ( mywukgxbooifmgvtonlg > ( minutesSinceLastAction ) ) { minutesSinceLastAction = mywukgxbooifmgvtonlg ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } }
× fix_prediction_before: private void checkMinutesSinceLastAction () { if ( ( stateMachine . getCurrent () . getPomosDone () ) > 0 ) { int localMinutesSinceLastAction = getMinutesSinceLastAction () ; if ( localMinutesSinceLastAction > ( minutesSinceLastAction ) ) { minutesSinceLastAction = localMinutesSinceLastAction ; } if ( ( minutesSinceLastAction ) >= ( settings . getIdleTime () ) ) { stateMachine . reset () ; } } }
× fix_prediction_after: private void checkMinutesSinceLastAction () { if ( ( stateMachine . getCurrent () . getPomosDone () ) > 0 ) { int mywukgxbooifmgvtonlg = getMinutesSinceLastAction () ; if ( mywukgxbooifmgvtonlg > ( minutesSinceLastAction ) ) { minutesSinceLastAction = mywukgxbooifmgvtonlg ; } if ( ( minutesSinceLastAction ) > ( settings . getIdleTime () ) ) { stateMachine . reset () ; } } }

line_index: 56
bug_before_refactoring: { double [] l = new double [] { 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 , 5 } ; Matrix m = new Matrix ( 3 , 3 , l ) ; java.lang.System.out . println ( m . multiply ( m . inverse () ) ) ; } <s> public static void main ( java.lang.String [] args ) { double [] l = new double [] { 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 , 5 } ; Matrix m = new Matrix ( 3 , 3 , l ) ; java.lang.System.out . println ( m . multiply ( m . inverse () ) ) ; } <s> fixed a small issue with 1x1 matrices
bug_after_refactoring: { double [] alojgrsfgtvspyhdcqpg = new double [] { 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 , 5 } ; Matrix m = new Matrix ( 3 , 3 , alojgrsfgtvspyhdcqpg ) ; java.lang.System.out . println ( m . multiply ( m . inverse () ) ) ; } <s> public static void main ( java.lang.String [] args ) { double [] alojgrsfgtvspyhdcqpg = new double [] { 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 , 5 } ; Matrix m = new Matrix ( 3 , 3 , alojgrsfgtvspyhdcqpg ) ; java.lang.System.out . println ( m . multiply ( m . inverse () ) ) ; } <s> fixed a small issue with 1x1 matrices
fix_before_refactoring: { double [] l = new double [] { 1 , 2 , 3 , 4 } ; Matrix m = new Matrix ( 2 , 2 , l ) ; java.lang.System.out . println ( m . inverse () . multiply ( m ) ) ; }
fix_after_refactoring: { double [] alojgrsfgtvspyhdcqpg = new double [] { 1 , 2 , 3 , 4 } ; Matrix m = new Matrix ( 2 , 2 , alojgrsfgtvspyhdcqpg ) ; java.lang.System.out . println ( m . inverse () . multiply ( m ) ) ; }
× fix_prediction_before: { double [] l = new double [] { 1 , 4 , 1 , 5 } ; Matrix m = new Matrix ( 3 , 3 , 5 ) ; java.lang.System.out . println ( m . multiply ( m . inverse () ) ) ; }
× fix_prediction_after: { double [] alojgrsfgtvspyhdcqpg = new double [] { 3 , 1 , 4 , 1 , 5 } ; Matrix m = new Matrix ( 3 , 3 , alojgrsfgtvspyhdcqpg ) ; java.lang.System.out . println ( m . multiply ( m . inverse () ) ) ; }

line_index: 57
bug_before_refactoring: { alreadyExist = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) alreadyExist = true ; } if ( ! alreadyExist ) tracks . add ( new Track ( station1 , station2 ) ) ; } <s> private void initTracks () { tracks = new java.util.ArrayList < Track > () ; boolean alreadyExist ; for ( TrainStation station1 : Control.stations ) { for ( TrainStation station2 : Control.stations ) { alreadyExist = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) alreadyExist = true ; } if ( ! alreadyExist ) tracks . add ( new Track ( station1 , station2 ) ) ; } } } <s> Fixed some bugs  created initial tests
bug_after_refactoring: { hggaqmwdierukmdqesqw = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) hggaqmwdierukmdqesqw = true ; } if ( ! hggaqmwdierukmdqesqw ) tracks . add ( new Track ( station1 , station2 ) ) ; } <s> private void initTracks () { tracks = new java.util.ArrayList < Track > () ; boolean alreadyExist ; for ( TrainStation station1 : Control.stations ) { for ( TrainStation station2 : Control.stations ) { hggaqmwdierukmdqesqw = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) hggaqmwdierukmdqesqw = true ; } if ( ! hggaqmwdierukmdqesqw ) tracks . add ( new Track ( station1 , station2 ) ) ; } } } <s> Fixed some bugs  created initial tests
fix_before_refactoring: { if ( station1 . equals ( station2 ) ) continue; alreadyExist = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) alreadyExist = true ; } if ( ! alreadyExist ) tracks . add ( new Track ( station1 , station2 ) ) ; }
fix_after_refactoring: { if ( station1 . equals ( station2 ) ) continue; hggaqmwdierukmdqesqw = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) hggaqmwdierukmdqesqw = true ; } if ( ! hggaqmwdierukmdqesqw ) tracks . add ( new Track ( station1 , station2 ) ) ; }
× fix_prediction_before: { alreadyExist = false ; tracks . add ( new Track ( station1 , station2 ) ) ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) alreadyExist = true ; } }
× fix_prediction_after: { hggaqmwdierukmdqesqw = false ; for ( Track track : tracks ) { if ( track . compareTrack ( station1 , station2 ) ) hggaqmwdierukmdqesqw = true ; } if ( ! hggaqmwdierukmdqesqw ) tracks . add ( new Track ( station1 , station2 ) ) ; }

line_index: 58
bug_before_refactoring: { boolean gameIsActive = true ; boolean humanTurn = false ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } } <s> public void playGame () { boolean gameIsActive = true ; boolean humanTurn = false ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } } <s> Fixed bug within Pass functionality
bug_after_refactoring: { boolean kanhonaqeoevpouzdhmm = true ; boolean jhloqehgmxgvhfnejwcg = false ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } } <s> public void playGame () { boolean kanhonaqeoevpouzdhmm = true ; boolean jhloqehgmxgvhfnejwcg = false ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } } <s> Fixed bug within Pass functionality
fix_before_refactoring: { boolean gameIsActive = true ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } }
fix_after_refactoring: { boolean kanhonaqeoevpouzdhmm = true ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } kanhonaqeoevpouzdhmm = false ; } }
× fix_prediction_before: { boolean gameIsActive = true ; boolean humanTurn = false ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } } gameIsActive = false ; }
× fix_prediction_after: { boolean kanhonaqeoevpouzdhmm = true ; boolean jhloqehgmxgvhfnejwcg = false ; while ( kanhonaqeoevpouzdhmm ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } } kanhonaqeoevpouzdhmm = false ; }

line_index: 59
bug_before_refactoring: out . write ( buffer , 0 , readlen ) <s> public com.sproutigy.commons.binary.BinaryBuilder append ( java.io.InputStream inputStream ) throws com.sproutigy.commons.binary.BinaryException { try { byte [] buffer = new byte [ 4 * 1024 ] ; int readlen ; while ( ( readlen = inputStream . read ( buffer ) ) != ( Binary.EOF ) ) { out . write ( buffer , 0 , readlen ) ; } } catch ( java.io.IOException e ) { throw new com.sproutigy.commons.binary.BinaryException ( e ) ; } return this ; } <s> - BinaryBuilderFactory class - Charsets utility class - use of Charset class in API as a priority instead of charset names - close() and finalize() of BinaryBuilder now cleanups data - removed methods for operating on UTF-16 and UTF-32 to prevent big/little endian problems (need to use methods accepting charset) - BinaryBuilder length() and temp file bugfix when appending InputStream
bug_after_refactoring: out . write ( wgwhpfgjrxpfmrnpzygs , 0 , fnmypclkqkkgrvjexogt ) <s> public com.sproutigy.commons.binary.BinaryBuilder append ( java.io.InputStream inputStream ) throws com.sproutigy.commons.binary.BinaryException { try { byte [] buffer = new byte [ 4 * 1024 ] ; int readlen ; while ( ( readlen = inputStream . read ( buffer ) ) != ( Binary.EOF ) ) { out . write ( wgwhpfgjrxpfmrnpzygs , 0 , fnmypclkqkkgrvjexogt ) ; } } catch ( java.io.IOException e ) { throw new com.sproutigy.commons.binary.BinaryException ( e ) ; } return this ; } <s> - BinaryBuilderFactory class - Charsets utility class - use of Charset class in API as a priority instead of charset names - close() and finalize() of BinaryBuilder now cleanups data - removed methods for operating on UTF-16 and UTF-32 to prevent big/little endian problems (need to use methods accepting charset) - BinaryBuilder length() and temp file bugfix when appending InputStream
fix_before_refactoring: append ( buffer , 0 , readlen )
fix_after_refactoring: append ( wgwhpfgjrxpfmrnpzygs , 0 , fnmypclkqkkgrvjexogt )
× fix_prediction_before: out . write ( buffer , 0 , readlen )
× fix_prediction_after: out . write ( buffer , 0 , fnmypclkqkkgrvjexogt )

line_index: 60
bug_before_refactoring: new java.lang.Character ( levels [ 0 ] , levels [ 7 ] , levels [ 1 ] , levels [ 3 ] , levels [ 5 ] , levels [ 4 ] , levels [ 6 ] , levels [ 9 ] , levels [ 8 ] , levels [ 2 ] ) <s> public static java.lang.Character loadCharacter ( int Id ) { com.tda367.infinityrun.Utils.LoadCharacter loader = new com.tda367.infinityrun.Utils.LoadCharacter ( Id ) ; int [] levels = loader . getSaveData () ; java.lang.Character loadedCharacter = new java.lang.Character ( levels [ 0 ] , levels [ 7 ] , levels [ 1 ] , levels [ 3 ] , levels [ 5 ] , levels [ 4 ] , levels [ 6 ] , levels [ 9 ] , levels [ 8 ] , levels [ 2 ] ) ; loadedCharacter . setCharacterID ( Id ) ; return loadedCharacter ; } <s> fixed save order - now uses linkedhashmap (this was the big issue  hashmap randomizes content)
bug_after_refactoring: new java.lang.Character ( hroceuqupjyjfnmdyghz [ 0 ] , hroceuqupjyjfnmdyghz [ 7 ] , hroceuqupjyjfnmdyghz [ 1 ] , hroceuqupjyjfnmdyghz [ 3 ] , hroceuqupjyjfnmdyghz [ 5 ] , hroceuqupjyjfnmdyghz [ 4 ] , hroceuqupjyjfnmdyghz [ 6 ] , hroceuqupjyjfnmdyghz [ 9 ] , hroceuqupjyjfnmdyghz [ 8 ] , hroceuqupjyjfnmdyghz [ 2 ] ) <s> public static java.lang.Character loadCharacter ( int Id ) { com.tda367.infinityrun.Utils.LoadCharacter loader = new com.tda367.infinityrun.Utils.LoadCharacter ( Id ) ; int [] levels = loader . getSaveData () ; java.lang.Character loadedCharacter = new java.lang.Character ( hroceuqupjyjfnmdyghz [ 0 ] , hroceuqupjyjfnmdyghz [ 7 ] , hroceuqupjyjfnmdyghz [ 1 ] , hroceuqupjyjfnmdyghz [ 3 ] , hroceuqupjyjfnmdyghz [ 5 ] , hroceuqupjyjfnmdyghz [ 4 ] , hroceuqupjyjfnmdyghz [ 6 ] , hroceuqupjyjfnmdyghz [ 9 ] , hroceuqupjyjfnmdyghz [ 8 ] , hroceuqupjyjfnmdyghz [ 2 ] ) ; loadedCharacter . setCharacterID ( Id ) ; return loadedCharacter ; } <s> fixed save order - now uses linkedhashmap (this was the big issue  hashmap randomizes content)
fix_before_refactoring: new java.lang.Character ( levels [ 0 ] , levels [ 1 ] , levels [ 2 ] , levels [ 3 ] , levels [ 3 ] , levels [ 5 ] , levels [ 6 ] , levels [ 7 ] , levels [ 8 ] , levels [ 9 ] )
fix_after_refactoring: new java.lang.Character ( hroceuqupjyjfnmdyghz [ 0 ] , hroceuqupjyjfnmdyghz [ 1 ] , hroceuqupjyjfnmdyghz [ 2 ] , hroceuqupjyjfnmdyghz [ 3 ] , hroceuqupjyjfnmdyghz [ 3 ] , hroceuqupjyjfnmdyghz [ 5 ] , hroceuqupjyjfnmdyghz [ 6 ] , hroceuqupjyjfnmdyghz [ 7 ] , hroceuqupjyjfnmdyghz [ 8 ] , hroceuqupjyjfnmdyghz [ 9 ] )
× fix_prediction_before: new java.lang.Character ( 0 , levels [ 0 ] , levels [ 7 ] , levels [ 1 ] , levels [ 3 ] , levels [ 5 ] , levels [ 4 ] , levels [ 9 ] , levels [ 8 ] , levels [ 2 ] )
× fix_prediction_after: new java.lang.Character ( hroceuqupjyjfnmdyghz [ 0 ] , hroceuqupjyjfnmdyghz [ 7 ] , hroceuqupjyjfnmdyghz [ 1 ] , hroceuqupjyjfnmdyghz [ 3 ] , hroceuqupjyjfnmdyghz [ 5 ] , hroceuqupjyjfnmdyghz [ 4 ] , hroceuqupjyjfnmdyghz [ 9 ] , hroceuqupjyjfnmdyghz [ 8 ] , hroceuqupjyjfnmdyghz [ 2 ] )

line_index: 61
bug_before_refactoring: if ( exchange > 100 ) { double total = quantity / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; } else if ( exchange < 100 ) { double total = quantity * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; } <s> private static long convertToUsDollar ( long quantity , long exchange ) { if ( exchange > 100 ) { double total = quantity / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; } else if ( exchange < 100 ) { double total = quantity * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; } return quantity ; } <s> Fixed aggregious error part 2
bug_after_refactoring: if ( exchange > 100 ) { double rbqfeaquxswbraqblcoc = quantity / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; } else if ( exchange < 100 ) { double rbqfeaquxswbraqblcoc = quantity * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; } <s> private static long convertToUsDollar ( long quantity , long exchange ) { if ( exchange > 100 ) { double rbqfeaquxswbraqblcoc = quantity / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; } else if ( exchange < 100 ) { double rbqfeaquxswbraqblcoc = quantity * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; } return quantity ; } <s> Fixed aggregious error part 2
fix_before_refactoring: if ( exchange > 100 ) { double total = ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( quantity ) ) / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; } else if ( exchange < 100 ) { double total = ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( quantity ) ) * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; }
fix_after_refactoring: if ( exchange > 100 ) { double rbqfeaquxswbraqblcoc = ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( quantity ) ) / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; } else if ( exchange < 100 ) { double rbqfeaquxswbraqblcoc = ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( quantity ) ) * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; }
× fix_prediction_before: if ( exchange >= 100 ) { double total = quantity / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; } else if ( exchange < 100 ) { double total = quantity * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( total ) ; }
× fix_prediction_after: if ( exchange >= 100 ) { double rbqfeaquxswbraqblcoc = quantity / ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; } else if ( exchange < 100 ) { double rbqfeaquxswbraqblcoc = quantity * ( io.zipcoder.aaronlong.wutangfinancial.Money . downHandleDoubles ( exchange ) ) ; return io.zipcoder.aaronlong.wutangfinancial.Money . upHandleDoubles ( rbqfeaquxswbraqblcoc ) ; }

line_index: 63
bug_before_refactoring: @ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; android.content.ComponentName stockWidget = new android.content.ComponentName ( context , com.richarddapice.stockhawk.widget.StockWidgetProvider . class ) ; int [] appWidgetIds = appWidgetManager . getAppWidgetIds ( stockWidget ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( appWidgetIds , R.id.stock_list ) ; } } <s> @ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; android.content.ComponentName stockWidget = new android.content.ComponentName ( context , com.richarddapice.stockhawk.widget.StockWidgetProvider . class ) ; int [] appWidgetIds = appWidgetManager . getAppWidgetIds ( stockWidget ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( appWidgetIds , R.id.stock_list ) ; } } <s> Fixed issue with Android Manifest intent action being incorrect.
bug_after_refactoring: @ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; android.content.ComponentName stockWidget = new android.content.ComponentName ( context , com.richarddapice.stockhawk.widget.StockWidgetProvider . class ) ; int [] jzpzeyteovrjjbotsvnh = appWidgetManager . getAppWidgetIds ( stockWidget ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( jzpzeyteovrjjbotsvnh , R.id.stock_list ) ; } } <s> @ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; android.content.ComponentName stockWidget = new android.content.ComponentName ( context , com.richarddapice.stockhawk.widget.StockWidgetProvider . class ) ; int [] jzpzeyteovrjjbotsvnh = appWidgetManager . getAppWidgetIds ( stockWidget ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( jzpzeyteovrjjbotsvnh , R.id.stock_list ) ; } } <s> Fixed issue with Android Manifest intent action being incorrect.
fix_before_refactoring: @ java.lang.Override public void onReceive ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; int [] appWidgetIds = appWidgetManager . getAppWidgetIds ( new android.content.ComponentName ( context , getClass () ) ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( appWidgetIds , R.id.stock_list ) ; } }
fix_after_refactoring: @ java.lang.Override public void onReceive ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; int [] jzpzeyteovrjjbotsvnh = appWidgetManager . getAppWidgetIds ( new android.content.ComponentName ( context , getClass () ) ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( jzpzeyteovrjjbotsvnh , R.id.stock_list ) ; } }
× fix_prediction_before: @ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJobJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; android.content.ComponentName stockWidget = new android.content.ComponentName ( context , com.richarddapice.stockhawk.widget.StockWidgetProvider . class ) ; int [] appWidgetIds = appWidgetManager . getAppWidgetIds ( stockWidget ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( appWidgetIds , R.id.stock_list ) ; } }
× fix_prediction_after: @ java.lang.Override public void onReceive ( android.content.Context context , android.content.Intent intent ) { super . onReceive ( context , intent ) ; timber.log.Timber . d ( "Intent Received" ) ; if ( QuoteSyncJob.ACTION_DATA_UPDATED . equals ( intent . getAction () ) ) { android.appwidget.AppWidgetManager appWidgetManager = android.appwidget.AppWidgetManager . getInstance ( context ) ; android.content.ComponentName stockWidget = new android.content.ComponentName ( context , com.richarddapice.stockhawk.widget.StockWidgetProvider . class ) ; int [] jzpzeyteovrjjbotsvnh = appWidgetManager . getAppWidgetIds ( stockWidget ) ; appWidgetManager . notifyAppWidgetViewDataChanged ( jzpzeyteovrjjbotsvnh , R.id.stock_list ) ; } }

line_index: 64
bug_before_refactoring: { int layout ; switch ( viewType ) { case VIEW_TYPE_HEADER : layout = R.layout.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : layout = R.layout.item_personal_project ; break; default: layout = R.layout.item_personal_project ; break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( layout , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; } <s> @ java.lang.Override public com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH onCreateViewHolder ( android.view.ViewGroup parent , int viewType ) { int layout ; switch ( viewType ) { case VIEW_TYPE_HEADER : layout = R.layout.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : layout = R.layout.item_personal_project ; break; default: layout = R.layout.item_personal_project ; break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( layout , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; } <s> [BugFix]Add personal delete project and animation  [Solution Description]     N/A [Other Info]     N/A
bug_after_refactoring: { int beuqttnyilxkvxnqlzat ; switch ( viewType ) { case VIEW_TYPE_HEADER : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; default: beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( beuqttnyilxkvxnqlzat , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; } <s> @ java.lang.Override public com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH onCreateViewHolder ( android.view.ViewGroup parent , int viewType ) { int beuqttnyilxkvxnqlzat ; switch ( viewType ) { case VIEW_TYPE_HEADER : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; default: beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( beuqttnyilxkvxnqlzat , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; } <s> [BugFix]Add personal delete project and animation  [Solution Description]     N/A [Other Info]     N/A
fix_before_refactoring: { int layout = 0 ; switch ( viewType ) { case VIEW_TYPE_HEADER : layout = R.layout.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : layout = R.layout.item_personal_project ; break; default: break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( layout , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; }
fix_after_refactoring: { int beuqttnyilxkvxnqlzat = 0 ; switch ( viewType ) { case VIEW_TYPE_HEADER : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; default: break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( beuqttnyilxkvxnqlzat , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; }
× fix_prediction_before: { int layout ; switch ( viewType ) { case VIEW_TYPE_HEADER : layout = R.layout.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : layout = R.layout.item_personal_project ; break; default: layout = R.layout.item_personal_project ; break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( layout , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; }
× fix_prediction_after: { int beuqttnyilxkvxnqlzat ; switch ( viewType ) { case VIEW_TYPE_HEADER : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_persoanl_project_header ; break; case VIEW_TYPE_ITEM : beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; default: beuqttnyilxkvxnqlzat = R.beuqttnyilxkvxnqlzat.item_personal_project ; break; } android.view.View v = android.view.LayoutInflater . from ( parent . getContext () ) . inflate ( beuqttnyilxkvxnqlzat , parent , false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v , this ) ; }

line_index: 65
bug_before_refactoring: { final int prime = 31 ; int hashCode = 1 ; hashCode = ( prime * hashCode ) + ( ( children ) == null ? 0 : children . hashCode () ) ; hashCode = ( prime * hashCode ) + ( ( data ) == null ? 0 : data . hashCode () ) ; hashCode = ( prime * hashCode ) + ( ( parent ) == null ? 0 : parent . hashCode () ) ; return hashCode ; } <s> @ java.lang.Override public int hashCode () { final int prime = 31 ; int hashCode = 1 ; hashCode = ( prime * hashCode ) + ( ( children ) == null ? 0 : children . hashCode () ) ; hashCode = ( prime * hashCode ) + ( ( data ) == null ? 0 : data . hashCode () ) ; hashCode = ( prime * hashCode ) + ( ( parent ) == null ? 0 : parent . hashCode () ) ; return hashCode ; } <s> Fix #401 StackOverflowError in equals/hashCode of AbstractTreeModel
bug_after_refactoring: { final int iaxpgymclzqnflwuhcfm = 31 ; int crpifesxoigljfcmikze = 1 ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( children ) == null ? 0 : children . crpifesxoigljfcmikze () ) ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( data ) == null ? 0 : data . crpifesxoigljfcmikze () ) ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( parent ) == null ? 0 : parent . crpifesxoigljfcmikze () ) ; return crpifesxoigljfcmikze ; } <s> @ java.lang.Override public int hashCode () { final int iaxpgymclzqnflwuhcfm = 31 ; int crpifesxoigljfcmikze = 1 ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( children ) == null ? 0 : children . crpifesxoigljfcmikze () ) ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( data ) == null ? 0 : data . crpifesxoigljfcmikze () ) ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( parent ) == null ? 0 : parent . crpifesxoigljfcmikze () ) ; return crpifesxoigljfcmikze ; } <s> Fix #401 StackOverflowError in equals/hashCode of AbstractTreeModel
fix_before_refactoring: { final int prime = 31 ; int hashCode = 1 ; hashCode = ( prime * hashCode ) + ( ( data ) == null ? 0 : data . hashCode () ) ; hashCode = ( prime * hashCode ) + ( ( children ) == null ? 0 : children . hashCode () ) ; return hashCode ; }
fix_after_refactoring: { final int iaxpgymclzqnflwuhcfm = 31 ; int crpifesxoigljfcmikze = 1 ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( data ) == null ? 0 : data . crpifesxoigljfcmikze () ) ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( children ) == null ? 0 : children . crpifesxoigljfcmikze () ) ; return crpifesxoigljfcmikze ; }
× fix_prediction_before: { final int prime = 31 ; int hashCode = 1 ; hashCode = ( prime * hashCode ) + ( ( children ) == null ? 0 : children . hashCode () ) ; hashCode = ( prime * hashCode ) + ( ( data ) == null ? 0 : data . hashCode () ) ; return hashCode ; }
× fix_prediction_after: { final int iaxpgymclzqnflwuhcfm = 31 ; int crpifesxoigljfcmikze = 1 ; crpifesxoigljfcmikze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( children ) == null ? 0 : children . crpifesxoigljfcmikze () ) ; crpifesxoigljfcmze = ( iaxpgymclzqnflwuhcfm * crpifesxoigljfcmikze ) + ( ( data ) == null ? 0 : data . crpifesxoigljfcmikze () ) ; return crpifesxoigljfcmikze () ; }

line_index: 67
bug_before_refactoring: { if ( list . isEmpty () ) { return 0 ; } int index = getNextOperatorToCalculate () ; if ( index > 0 ) { us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( index ) ) ) ; us.team.awesome.calculator.math.CalculationList _list = operator . calculate ( index , list ) ; return calculate ( _list ) ; } else { return ( ( us.team.awesome.calculator.math.CalculationNumber ) ( list . getFirst () ) ) . getValue () ; } } <s> private double calculate ( us.team.awesome.calculator.math.CalculationList list ) throws us.team.awesome.calculator.util.MathException { if ( list . isEmpty () ) { return 0 ; } int index = getNextOperatorToCalculate () ; if ( index > 0 ) { us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( index ) ) ) ; us.team.awesome.calculator.math.CalculationList _list = operator . calculate ( index , list ) ; return calculate ( _list ) ; } else { return ( ( us.team.awesome.calculator.math.CalculationNumber ) ( list . getFirst () ) ) . getValue () ; } } <s> fixed calculation bug
bug_after_refactoring: { if ( list . isEmpty () ) { return 0 ; } int emaszqvqxdaxriakqgrl = getNextOperatorToCalculate () ; if ( emaszqvqxdaxriakqgrl > 0 ) { us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( emaszqvqxdaxriakqgrl ) ) ) ; us.team.awesome.calculator.math.CalculationList _list = operator . calculate ( emaszqvqxdaxriakqgrl , list ) ; return calculate ( _list ) ; } else { return ( ( us.team.awesome.calculator.math.CalculationNumber ) ( list . getFirst () ) ) . getValue () ; } } <s> private double calculate ( us.team.awesome.calculator.math.CalculationList list ) throws us.team.awesome.calculator.util.MathException { if ( list . isEmpty () ) { return 0 ; } int emaszqvqxdaxriakqgrl = getNextOperatorToCalculate () ; if ( emaszqvqxdaxriakqgrl > 0 ) { us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( emaszqvqxdaxriakqgrl ) ) ) ; us.team.awesome.calculator.math.CalculationList _list = operator . calculate ( emaszqvqxdaxriakqgrl , list ) ; return calculate ( _list ) ; } else { return ( ( us.team.awesome.calculator.math.CalculationNumber ) ( list . getFirst () ) ) . getValue () ; } } <s> fixed calculation bug
fix_before_refactoring: { if ( list . isEmpty () ) { return 0 ; } int index = getNextOperatorToCalculate ( list ) ; if ( index > 0 ) { us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( index ) ) ) ; list = operator . calculate ( index , list ) ; return calculate ( list ) ; } else { return ( ( us.team.awesome.calculator.math.CalculationNumber ) ( list . getFirst () ) ) . getValue () ; } }
fix_after_refactoring: { if ( list . isEmpty () ) { return 0 ; } int emaszqvqxdaxriakqgrl = getNextOperatorToCalculate ( list ) ; if ( emaszqvqxdaxriakqgrl > 0 ) { us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( emaszqvqxdaxriakqgrl ) ) ) ; list = operator . calculate ( emaszqvqxdaxriakqgrl , list ) ; return calculate ( list ) ; } else { return ( ( us.team.awesome.calculator.math.CalculationNumber ) ( list . getFirst () ) ) . getValue () ; } }
× fix_prediction_before: { if ( list . isEmpty () ) { return 0 ; } int index = getNextOperatorToCalculate () ; us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( index ) ) ) ; us.team.awesome.calculator.math.CalculationList _list = operator . calculate ( index , list ) ; return calculate ( _list ) ; }
× fix_prediction_after: { if ( list . isEmpty () ) { return 0 ; } int emaszqvqxdaxriakqgrl = getNextOperatorToCalculate () ; us.team.awesome.calculator.math.CalculationOperator operator = ( ( us.team.awesome.calculator.math.CalculationOperator ) ( list . get ( emaszqvqxdaxriakqgrl ) ) ) ; us.team.awesome.calculator.math.CalculationList _list = operator . calculate ( emaszqvqxdaxriakqgrl , list ) ; return calculate ( _list ) ; }

line_index: 68
bug_before_refactoring: { java.lang.String splitString = product . getProductId () . split ( "/" ) ; int splitProductId = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( largest = splitProductId ) { largest = splitProductId ; } } <s> public int getNewProductIdByCategory ( java.lang.String categoryId ) { java.util.ArrayList < sg.edu.nus.iss.universitysouvenirstore.Product > p = this . getProductListByCategory ( categoryId ) ; int largest = 0 ; for ( sg.edu.nus.iss.universitysouvenirstore.Product product : p ) { java.lang.String splitString = product . getProductId () . split ( "/" ) ; int splitProductId = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( largest = splitProductId ) { largest = splitProductId ; } } return largest + 1 ; } <s> Fixed Category Error
bug_after_refactoring: { java.lang.String splitString = product . getProductId () . split ( "/" ) ; int zeabzvmwvskdoeqpmlgc = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( semyybpniiqomktzcrcx = zeabzvmwvskdoeqpmlgc ) { semyybpniiqomktzcrcx = zeabzvmwvskdoeqpmlgc ; } } <s> public int getNewProductIdByCategory ( java.lang.String categoryId ) { java.util.ArrayList < sg.edu.nus.iss.universitysouvenirstore.Product > p = this . getProductListByCategory ( categoryId ) ; int largest = 0 ; for ( sg.edu.nus.iss.universitysouvenirstore.Product product : p ) { java.lang.String splitString = product . getProductId () . split ( "/" ) ; int zeabzvmwvskdoeqpmlgc = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( semyybpniiqomktzcrcx = zeabzvmwvskdoeqpmlgc ) { semyybpniiqomktzcrcx = zeabzvmwvskdoeqpmlgc ; } } return largest + 1 ; } <s> Fixed Category Error
fix_before_refactoring: { java.lang.String [] splitString = product . getProductId () . split ( "/" ) ; int splitProductId = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( largest <= splitProductId ) { largest = splitProductId ; } }
fix_after_refactoring: { java.lang.String [] splitString = product . getProductId () . split ( "/" ) ; int zeabzvmwvskdoeqpmlgc = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( semyybpniiqomktzcrcx <= zeabzvmwvskdoeqpmlgc ) { semyybpniiqomktzcrcx = zeabzvmwvskdoeqpmlgc ; } }
× fix_prediction_before: { java.lang.String splitString = product . getProductId () . split ( "/" ) ; int splitProductId = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( largest = splitProductId ) { largest = splitProductId ; } }
× fix_prediction_after: { java.lang.String splitString = product . getProductId () . split ( "/" ) ; int zeabzvmwvskdoeqpmlgc = java.lang.Integer . parseInt ( splitString [ 1 ] ) ; if ( semyybpniiqomktzcrcx = zeabzvmwvskdoeqpmlgc ; }

line_index: 69
bug_before_refactoring: { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean isDiff = isAI ; this . isAI = isAI ; if ( isDiff && ( this . gameInProgress () ) ) this . takeTurn ( this . currentGame ) ; } <s> public void setIsAI ( boolean isAI ) { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean isDiff = isAI ; this . isAI = isAI ; if ( isDiff && ( this . gameInProgress () ) ) this . takeTurn ( this . currentGame ) ; } <s> Fixed some minor logic errors
bug_after_refactoring: { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean exbklioqgffjmqexxxou = isAI ; this . isAI = isAI ; if ( exbklioqgffjmqexxxou && ( this . gameInProgress () ) ) this . takeTurn ( this . currentGame ) ; } <s> public void setIsAI ( boolean isAI ) { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean exbklioqgffjmqexxxou = isAI ; this . isAI = isAI ; if ( exbklioqgffjmqexxxou && ( this . gameInProgress () ) ) this . takeTurn ( this . currentGame ) ; } <s> Fixed some minor logic errors
fix_before_refactoring: { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean isDiff = isAI ^ ( this . isAI ) ; this . isAI = isAI ; if ( isDiff && ( this . gameInProgress () ) ) { this . takeTurn ( this . currentGame ) ; } }
fix_after_refactoring: { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean exbklioqgffjmqexxxou = isAI ^ ( this . isAI ) ; this . isAI = isAI ; if ( exbklioqgffjmqexxxou && ( this . gameInProgress () ) ) { this . takeTurn ( this . currentGame ) ; } }
× fix_prediction_before: { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean isDiff = isAI ; this . isAI = isAI ; if ( isDiff && ( this . gameInProgress () ) ) this . takeTurn ( this . currentGame ) ; }
× fix_prediction_after: { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean exbklioqgffjmqexxxou = isAI ; this . isAI = isAI ; if ( exbklioqgffjmqexxxou && ( this . gameInProgress () ) ) this . takeTurn ( this . currentGame ) ; }

line_index: 70
bug_before_refactoring: { int index = 0 ; final int qLen = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; while ( ( index + ( seqSize ) ) < qLen ) { blocks . add ( query . substring ( index , ( index + ( seqSize ) ) ) ) ; index += window ; } return blocks ; } <s> protected java.util.List < java.lang.String > splitQueryString ( java.lang.String query ) { int index = 0 ; final int qLen = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; while ( ( index + ( seqSize ) ) < qLen ) { blocks . add ( query . substring ( index , ( index + ( seqSize ) ) ) ) ; index += window ; } return blocks ; } <s> Added a debug experiment  custom constructor for TrieEntry + some fixes
bug_after_refactoring: { int feedtxmhjzqmvhqwizse = 0 ; final int asgbhlbdlpitvhkulhir = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; while ( ( feedtxmhjzqmvhqwizse + ( seqSize ) ) < asgbhlbdlpitvhkulhir ) { blocks . add ( query . substring ( feedtxmhjzqmvhqwizse , ( feedtxmhjzqmvhqwizse + ( seqSize ) ) ) ) ; feedtxmhjzqmvhqwizse += window ; } return blocks ; } <s> protected java.util.List < java.lang.String > splitQueryString ( java.lang.String query ) { int feedtxmhjzqmvhqwizse = 0 ; final int asgbhlbdlpitvhkulhir = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; while ( ( feedtxmhjzqmvhqwizse + ( seqSize ) ) < asgbhlbdlpitvhkulhir ) { blocks . add ( query . substring ( feedtxmhjzqmvhqwizse , ( feedtxmhjzqmvhqwizse + ( seqSize ) ) ) ) ; feedtxmhjzqmvhqwizse += window ; } return blocks ; } <s> Added a debug experiment  custom constructor for TrieEntry + some fixes
fix_before_refactoring: { final int qLen = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; for ( int index = 0 ; ( index + ( seqSize ) ) < qLen ; index += window ) { blocks . add ( query . substring ( index , ( index + ( seqSize ) ) ) ) ; } return blocks ; }
fix_after_refactoring: { final int asgbhlbdlpitvhkulhir = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; for ( int feedtxmhjzqmvhqwizse = 0 ; ( feedtxmhjzqmvhqwizse + ( seqSize ) ) < asgbhlbdlpitvhkulhir ; feedtxmhjzqmvhqwizse += window ) { blocks . add ( query . substring ( feedtxmhjzqmvhqwizse , ( feedtxmhjzqmvhqwizse + ( seqSize ) ) ) ) ; } return blocks ; }
× fix_prediction_before: { int index = 0 ; final int qLen = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; while ( ( index + ( seqSize ) ) < qLen ) { blocks . add ( query . substring ( index , ( index + ( seqSize ) ) ) ) ; index += window ; } return blocks ; }
× fix_prediction_after: { java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; while ( ( feedtxmhjzqmvhqwizse + ( seqSize ) ) < asgbhlbdlpitvhkulhir ) { blocks . add ( query . substring ( feedtxmhjzqmvhqwizse , ( feedtxmhjzqmvhqwizse + ( seqSize ) ) ) ) ; feedtxmhjzqmvhqwizse += window ; } return blocks ; }

line_index: 71
bug_before_refactoring: java.lang.Math . sqrt ( ( result / ( inputVector . keySet () . size () ) ) ) <s> private double vectorNorm ( java.util.HashMap < java.lang.String , java.lang.Double > inputVector ) { double result = 0.0 ; for ( java.lang.String key : inputVector . keySet () ) { double temp = inputVector . get ( key ) ; result += temp * temp ; } return java.lang.Math . sqrt ( ( result / ( inputVector . keySet () . size () ) ) ) ; } <s> Fixed bug in norm. Pretty stable
bug_after_refactoring: java.lang.Math . sqrt ( ( lcmbkwphqobmcaufpwpn / ( inputVector . keySet () . size () ) ) ) <s> private double vectorNorm ( java.util.HashMap < java.lang.String , java.lang.Double > inputVector ) { double result = 0.0 ; for ( java.lang.String key : inputVector . keySet () ) { double temp = inputVector . get ( key ) ; result += temp * temp ; } return java.lang.Math . sqrt ( ( lcmbkwphqobmcaufpwpn / ( inputVector . keySet () . size () ) ) ) ; } <s> Fixed bug in norm. Pretty stable
fix_before_refactoring: java.lang.Math . sqrt ( result )
fix_after_refactoring: java.lang.Math . sqrt ( lcmbkwphqobmcaufpwpn )
× fix_prediction_before: java.lang.Math . sqrt ( ( result / ( inputVector . keySet () . size () ) ) )
× fix_prediction_after: java.lang.Math . sqrt ( ( lcmbkwphqobmcaufpwpn / ( inputVector . keySet () . size () ) ) )

line_index: 72
bug_before_refactoring: for ( org.jasr.currentcy.domain.Sample sample1 : snapshots ) { boolean result = false ; for ( org.jasr.currentcy.domain.Sample sample2 : samples ) { result = result || ( sample1 . equals ( sample2 ) ) ; } if ( ! result ) changes . add ( sample1 ) ; } <s> private void changes ( java.util.List < org.jasr.currentcy.domain.Sample > changes , java.util.List < org.jasr.currentcy.domain.Sample > samples , org.jasr.currentcy.domain.Currencies currency ) { java.util.List < org.jasr.currentcy.domain.Sample > snapshots = samplerDAO . getSnapshot ( currency ) ; for ( org.jasr.currentcy.domain.Sample sample1 : snapshots ) { boolean result = false ; for ( org.jasr.currentcy.domain.Sample sample2 : samples ) { result = result || ( sample1 . equals ( sample2 ) ) ; } if ( ! result ) changes . add ( sample1 ) ; } } <s> fixed bug that makes the system send updates for the changed exchange several times (misplaced while loop). Fixed bug that makes the system send the previous value for the changed exchange rather than the current value.
bug_after_refactoring: for ( org.jasr.currentcy.domain.Sample sample1 : snapshots ) { boolean itoqfbwdodbetxpuwmwe = false ; for ( org.jasr.currentcy.domain.Sample sample2 : samples ) { itoqfbwdodbetxpuwmwe = itoqfbwdodbetxpuwmwe || ( sample1 . equals ( sample2 ) ) ; } if ( ! itoqfbwdodbetxpuwmwe ) changes . add ( sample1 ) ; } <s> private void changes ( java.util.List < org.jasr.currentcy.domain.Sample > changes , java.util.List < org.jasr.currentcy.domain.Sample > samples , org.jasr.currentcy.domain.Currencies currency ) { java.util.List < org.jasr.currentcy.domain.Sample > snapshots = samplerDAO . getSnapshot ( currency ) ; for ( org.jasr.currentcy.domain.Sample sample1 : snapshots ) { boolean itoqfbwdodbetxpuwmwe = false ; for ( org.jasr.currentcy.domain.Sample sample2 : samples ) { itoqfbwdodbetxpuwmwe = itoqfbwdodbetxpuwmwe || ( sample1 . equals ( sample2 ) ) ; } if ( ! itoqfbwdodbetxpuwmwe ) changes . add ( sample1 ) ; } } <s> fixed bug that makes the system send updates for the changed exchange several times (misplaced while loop). Fixed bug that makes the system send the previous value for the changed exchange rather than the current value.
fix_before_refactoring: for ( org.jasr.currentcy.domain.Sample sample1 : samples ) { boolean result = false ; for ( org.jasr.currentcy.domain.Sample sample2 : snapshots ) { result = result || ( sample1 . equals ( sample2 ) ) ; } if ( ! result ) { changes . add ( sample1 ) ; } }
fix_after_refactoring: for ( org.jasr.currentcy.domain.Sample sample1 : samples ) { boolean itoqfbwdodbetxpuwmwe = false ; for ( org.jasr.currentcy.domain.Sample sample2 : snapshots ) { itoqfbwdodbetxpuwmwe = itoqfbwdodbetxpuwmwe || ( sample1 . equals ( sample2 ) ) ; } if ( ! itoqfbwdodbetxpuwmwe ) { changes . add ( sample1 ) ; } }
× fix_prediction_before: for ( org.jasr.currentcy.domain.Sample sample1 : snapshots ) { if ( ! result ) { boolean result = false ; for ( org.jasr.currentcy.domain.Sample sample2 : samples ) { result = result || ( sample1 . equals ( sample2 ) ) ; } if ( ! result ) changes . add ( sample1 ) ; } }
× fix_prediction_after: for ( org.jasr.currentcy.domain.Sample sample1 : snapshots ) { if ( ( samples != null ) && ( ! itoqfbwdodbetxpuwmwe ) ) { boolean itoqfbwdodbetxpuwmwe = false ; for ( org.jasr.currentcy.domain.Sample sample2 : samples ) { itoqfbwdodbetxpuwmwe = itoqfbwdodbetxpuwmwe || ( sample1 . equals ( sample2 ) ) ; } if ( ! itoqfbwdodbetxpuwmwe ) changes . add ( sample1 ) ; } }

line_index: 73
bug_before_refactoring: private final void drawGrid ( android.graphics.Canvas canvas , int offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { int itimeso = i * offset ; canvas . drawLine ( 0 , itimeso , min , itimeso , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( itimeso , 0 , itimeso , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } } <s> private final void drawGrid ( android.graphics.Canvas canvas , int offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { int itimeso = i * offset ; canvas . drawLine ( 0 , itimeso , min , itimeso , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( itimeso , 0 , itimeso , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } } <s> Changed to float precision in drawmethods Enabled anti-aliasing for some Paint (bombs specifically) Fixed a rounding error for detecting touched row/column
bug_after_refactoring: private final void drawGrid ( android.graphics.Canvas canvas , int offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { int lybupbpgkfmdceqnozgu = i * offset ; canvas . drawLine ( 0 , lybupbpgkfmdceqnozgu , min , lybupbpgkfmdceqnozgu , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( lybupbpgkfmdceqnozgu , 0 , lybupbpgkfmdceqnozgu , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } } <s> private final void drawGrid ( android.graphics.Canvas canvas , int offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { int lybupbpgkfmdceqnozgu = i * offset ; canvas . drawLine ( 0 , lybupbpgkfmdceqnozgu , min , lybupbpgkfmdceqnozgu , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( lybupbpgkfmdceqnozgu , 0 , lybupbpgkfmdceqnozgu , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } } <s> Changed to float precision in drawmethods Enabled anti-aliasing for some Paint (bombs specifically) Fixed a rounding error for detecting touched row/column
fix_before_refactoring: private final void drawGrid ( android.graphics.Canvas canvas , float offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { float itimeso = i * offset ; canvas . drawLine ( 0 , itimeso , min , itimeso , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( itimeso , 0 , itimeso , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } canvas . drawLine ( ( min - 1 ) , 0 , ( min - 1 ) , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; }
fix_after_refactoring: private final void drawGrid ( android.graphics.Canvas canvas , float offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { float lybupbpgkfmdceqnozgu = i * offset ; canvas . drawLine ( 0 , lybupbpgkfmdceqnozgu , min , lybupbpgkfmdceqnozgu , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( lybupbpgkfmdceqnozgu , 0 , lybupbpgkfmdceqnozgu , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } canvas . drawLine ( ( min - 1 ) , 0 , ( min - 1 ) , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; }
× fix_prediction_before: private final void drawGrid ( android.graphics.Canvas canvas , int offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { int itimeso = i * offset ; canvas . drawLine ( 0 , itimeso , min , itimeso , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( itimeso , 0 , itimeso , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } }
× fix_prediction_after: private final void drawGrid ( android.graphics.Canvas canvas , int offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { int lybupbpgkfmdceqnozgu = i * offset ; canvas . drawLine ( 0 , lybupbpgkfmdceqnozgu , min , lybupbpgkfmdceqnozgu , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( lybupbpgkfmdceqnozgu , 0 , lybupbpgkfmdceqnozgu , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } }

line_index: 74
bug_before_refactoring: pointsToAdd = ( ( ( ( int ) ( 10 ) ) * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) ) <s> public void markCompleted () { this . completed = true ; int pointsToAdd = ( ( ( ( int ) ( 10 ) ) * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) ) ; User currentUser = User . findUser ( this . user_id ) ; int oldExp = currentUser . getUserExperience () ; currentUser . updateUserExperience ( ( oldExp + pointsToAdd ) ) ; } <s> attempt to fix the type casting issue in the pointsToAdd line
bug_after_refactoring: sjrlqikgmuswaluvkpne = ( ( ( ( int ) ( 10 ) ) * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) ) <s> public void markCompleted () { this . completed = true ; int sjrlqikgmuswaluvkpne = ( ( ( ( int ) ( 10 ) ) * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) ) ; User currentUser = User . findUser ( this . user_id ) ; int oldExp = currentUser . getUserExperience () ; currentUser . updateUserExperience ( ( oldExp + pointsToAdd ) ) ; } <s> attempt to fix the type casting issue in the pointsToAdd line
fix_before_refactoring: pointsToAdd = ( ( int ) ( ( ( 10 * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) ) ) )
fix_after_refactoring: sjrlqikgmuswaluvkpne = ( ( int ) ( ( ( 10 * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) ) ) )
× fix_prediction_before: pointsToAdd = ( ( ( int ) ( 10 ) ) * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] ) ) * ( calculateEstimatedTimeMultiplier ( this . estimated_time ) )
× fix_prediction_after: sjrlqikgmuswaluvkpne = ( ( ( int ) ( 10 ) ) * ( Task.POINT_RANGE [ ( ( this . importance ) - 1 ) ] ) ) * ( Task.POINT_RANGE [ ( ( this . difficulty ) - 1 ) ] )

line_index: 75
bug_before_refactoring: { result [ i ] = null ; } <s> private void resize () { java.lang.Integer [] result = new java.lang.Integer [ ( stack.length ) * 2 ] ; int i ; for ( i = 0 ; i < ( stack.length ) ; i ++ ) { result [ i ] = stack [ i ] ; } while ( i < ( result.length ) ) { result [ i ] = null ; } stack = result ; } <s> Fixed infinite loop bug in IntegerStack.resize().
bug_after_refactoring: { result [ fpvdtdpwkbvugjdsoabn ] = null ; } <s> private void resize () { java.lang.Integer [] result = new java.lang.Integer [ ( stack.length ) * 2 ] ; int i ; for ( i = 0 ; i < ( stack.length ) ; i ++ ) { result [ i ] = stack [ i ] ; } while ( i < ( result.length ) ) { result [ fpvdtdpwkbvugjdsoabn ] = null ; } stack = result ; } <s> Fixed infinite loop bug in IntegerStack.resize().
fix_before_refactoring: { result [ i ] = null ; i ++ ; }
fix_after_refactoring: { result [ fpvdtdpwkbvugjdsoabn ] = null ; fpvdtdpwkbvugjdsoabn ++ ; }
× fix_prediction_before: { result [ i ] = null ; break; }
× fix_prediction_after: { result [ fpvdtdpwkbvugjdsoabn ] = null ; break; }

line_index: 76
bug_before_refactoring: { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; int innerClassIndex = type . indexOf ( '$' ) ; if ( innerClassIndex > 0 ) { type = type . substring ( 0 , innerClassIndex ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; } <s> @ java.lang.Override public java.lang.String getPath ( org.eclipse.debug.core.model.IBreakpoint breakpoint ) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; int innerClassIndex = type . indexOf ( '$' ) ; if ( innerClassIndex > 0 ) { type = type . substring ( 0 , innerClassIndex ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; } <s> Fix an error reported in the SDBG newsgroup
bug_after_refactoring: { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; int iadecjufclvaszsizgxi = type . indexOf ( '$' ) ; if ( iadecjufclvaszsizgxi > 0 ) { type = type . substring ( 0 , iadecjufclvaszsizgxi ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; } <s> @ java.lang.Override public java.lang.String getPath ( org.eclipse.debug.core.model.IBreakpoint breakpoint ) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; int iadecjufclvaszsizgxi = type . indexOf ( '$' ) ; if ( iadecjufclvaszsizgxi > 0 ) { type = type . substring ( 0 , iadecjufclvaszsizgxi ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; } <s> Fix an error reported in the SDBG newsgroup
fix_before_refactoring: { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; if ( type != null ) { int innerClassIndex = type . indexOf ( '$' ) ; if ( innerClassIndex > 0 ) { type = type . substring ( 0 , innerClassIndex ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; } else { return null ; } }
fix_after_refactoring: { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; if ( type != null ) { int iadecjufclvaszsizgxi = type . indexOf ( '$' ) ; if ( iadecjufclvaszsizgxi > 0 ) { type = type . substring ( 0 , iadecjufclvaszsizgxi ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; } else { return null ; } }
× fix_prediction_before: { org.eclipse.jdt.debug.core.IJavaBreakpoint bp = ( ( org.eclipse.jdt.debug.core.IJavaBreakpoint ) ( breakpoint ) ) ; java.lang.String type = bp . getTypeName () ; int innerClassIndex = type . indexOf ( '$' ) ; if ( innerClassIndex > 0 ) { type = type . substring ( 0 , innerClassIndex ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; }
× fix_prediction_after: { java.lang.String type = bp . getTypeName () ; int iadecjufclvaszsizgxi = type . indexOf ( '$' ) ; if ( iadecjufclvaszsizgxi > 0 ) { type = type . substring ( 0 , iadecjufclvaszsizgxi ) ; } return ( type . replace ( '.' , '/' ) ) + ".java" ; }

line_index: 77
bug_before_refactoring: { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; int layoutID = R.layout.list_item ; connectToJSON ( "?sort_by=it_no" ) ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , layoutID , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; } <s> @ java.lang.Override public void onActivityCreated ( android.os.Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; int layoutID = R.layout.list_item ; connectToJSON ( "?sort_by=it_no" ) ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , layoutID , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; } <s> Fixed issues with json thread not catching up with main thread
bug_after_refactoring: { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; int lsqsfyjielspufctoyyd = R.layout.list_item ; connectToJSON ( "?sort_by=it_no" ) ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , lsqsfyjielspufctoyyd , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; } <s> @ java.lang.Override public void onActivityCreated ( android.os.Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; int lsqsfyjielspufctoyyd = R.layout.list_item ; connectToJSON ( "?sort_by=it_no" ) ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , lsqsfyjielspufctoyyd , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; } <s> Fixed issues with json thread not catching up with main thread
fix_before_refactoring: { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; connectToJSON ( "?sort_by=it_no" ) ; int layoutID = R.layout.list_item ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , layoutID , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; }
fix_after_refactoring: { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; connectToJSON ( "?sort_by=it_no" ) ; int lsqsfyjielspufctoyyd = R.layout.list_item ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , lsqsfyjielspufctoyyd , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; }
× fix_prediction_before: { super . onActivityCreated ( savedInstanceState ) ; android.widget.ListView myListView = ( ( android.widget.ListView ) ( getActivity () . findViewById ( R.id.equipmentList ) ) ) ; int layoutID = R.layout.list_item ; connectToJSON ( "?sort_by=it_no" ) ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , layoutID , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; }
× fix_prediction_after: { super . onActivityCreated ( savedInstanceState ) ; int lsqsfyjielspufctoyyd = R.layout.list_item ; connectToJSON ( "?sort_by=it_no" ) ; myAdapterInstance = new com.example.jim.myapplication.EquipmentAdapter ( getActivity () , lsqsfyjielspufctoyyd , equipmentList ) ; myListView . setAdapter ( myAdapterInstance ) ; }

line_index: 78
bug_before_refactoring: { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int page = 1 ; do { keys = client . getAvailableKeys ( page ) ; availableKeys . addAll ( keys . getKeys () ) ; page += 1 ; } while ( ( keys . getMeta () . getTotal () ) > page ) ; return availableKeys ; } <s> static java.util.List < com.myjeeva.digitalocean.pojo.Key > getAvailableKeys ( java.lang.String authToken ) throws com.myjeeva.digitalocean.exception.DigitalOceanException , com.myjeeva.digitalocean.exception.RequestUnsuccessfulException { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int page = 1 ; do { keys = client . getAvailableKeys ( page ) ; availableKeys . addAll ( keys . getKeys () ) ; page += 1 ; } while ( ( keys . getMeta () . getTotal () ) > page ) ; return availableKeys ; } <s> Fixed paging issue (#23)  With the plugin using newer version of Digital Ocean API library  it started listing duplicate entries for droplet Regions  Images  SSH keys and other. This was caused by the paging code of the plugin.
bug_after_refactoring: { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int mutezdwwyqkpncsifolw = 1 ; do { keys = client . getAvailableKeys ( mutezdwwyqkpncsifolw ) ; availableKeys . addAll ( keys . getKeys () ) ; mutezdwwyqkpncsifolw += 1 ; } while ( ( keys . getMeta () . getTotal () ) > mutezdwwyqkpncsifolw ) ; return availableKeys ; } <s> static java.util.List < com.myjeeva.digitalocean.pojo.Key > getAvailableKeys ( java.lang.String authToken ) throws com.myjeeva.digitalocean.exception.DigitalOceanException , com.myjeeva.digitalocean.exception.RequestUnsuccessfulException { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int mutezdwwyqkpncsifolw = 1 ; do { keys = client . getAvailableKeys ( mutezdwwyqkpncsifolw ) ; availableKeys . addAll ( keys . getKeys () ) ; mutezdwwyqkpncsifolw += 1 ; } while ( ( keys . getMeta () . getTotal () ) > mutezdwwyqkpncsifolw ) ; return availableKeys ; } <s> Fixed paging issue (#23)  With the plugin using newer version of Digital Ocean API library  it started listing duplicate entries for droplet Regions  Images  SSH keys and other. This was caused by the paging code of the plugin.
fix_before_refactoring: { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int page = 0 ; do { page += 1 ; keys = client . getAvailableKeys ( page ) ; availableKeys . addAll ( keys . getKeys () ) ; } while ( ( keys . getMeta () . getTotal () ) > ( availableKeys . size () ) ) ; return availableKeys ; }
fix_after_refactoring: { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int mutezdwwyqkpncsifolw = 0 ; do { mutezdwwyqkpncsifolw += 1 ; keys = client . getAvailableKeys ( mutezdwwyqkpncsifolw ) ; availableKeys . addAll ( keys . getKeys () ) ; } while ( ( keys . getMeta () . getTotal () ) > ( availableKeys . size () ) ) ; return availableKeys ; }
× fix_prediction_before: { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int page = 0 ; do { keys = client . getAvailableKeys ( page ) ; availableKeys . addAll ( keys . getKeys () ) ; page += 1 ; } while ( ( keys . getMeta () . getTotal () ) > page ) ; return availableKeys ; }
× fix_prediction_after: { com.myjeeva.digitalocean.impl.DigitalOceanClient client = new com.myjeeva.digitalocean.impl.DigitalOceanClient ( authToken ) ; java.util.List < com.myjeeva.digitalocean.pojo.Key > availableKeys = new java.util.ArrayList < com.myjeeva.digitalocean.pojo.Key > () ; com.myjeeva.digitalocean.pojo.Keys keys ; int mutezdwwyqkpncsifolw = 1 ; do { keys = client . getAvailableKeys ( mutezdwwyqkpncsifolw ) ; availableKeys . addAll ( keys . getKeys () ) ; mutezdwwyqkpncsifolw += 1 ; } while ( ( keys . getMeta () . getTotal () ) > mutezdwwyqkpncsifolw ) ; return availableKeys ; }

line_index: 79
bug_before_refactoring: if ( args [ 0 ] . equals ( "-" ) ) for ( java.lang.String arg : args ) sum += java.lang.Integer . valueOf ( arg ) ; <s> private static int addArguments ( java.lang.String [] args ) { int sum = 0 ; if ( ( args.length ) < 1 ) return 0 ; else if ( args [ 0 ] . equals ( "-" ) ) for ( java.lang.String arg : args ) sum += java.lang.Integer . valueOf ( arg ) ; return sum ; } <s> Bugfix in addArguments  Made a logical error in the new experimental changes where argument 0  the "-"  was treated as a param. This is now fixed.
bug_after_refactoring: if ( args [ 0 ] . equals ( "-" ) ) for ( java.lang.String arg : args ) rglpdhkyfjxkawpnrcli += java.lang.Integer . valueOf ( arg ) ; <s> private static int addArguments ( java.lang.String [] args ) { int sum = 0 ; if ( ( args.length ) < 1 ) return 0 ; else if ( args [ 0 ] . equals ( "-" ) ) for ( java.lang.String arg : args ) rglpdhkyfjxkawpnrcli += java.lang.Integer . valueOf ( arg ) ; return sum ; } <s> Bugfix in addArguments  Made a logical error in the new experimental changes where argument 0  the "-"  was treated as a param. This is now fixed.
fix_before_refactoring: if ( args [ 0 ] . equals ( "-" ) ) for ( int i = 1 ; i < ( args.length ) ; i ++ ) sum -= java.lang.Integer . valueOf ( args [ i ] ) ; else for ( java.lang.String arg : args ) sum += java.lang.Integer . valueOf ( arg ) ;
fix_after_refactoring: if ( args [ 0 ] . equals ( "-" ) ) for ( int i = 1 ; i < ( args.length ) ; i ++ ) rglpdhkyfjxkawpnrcli -= java.lang.Integer . valueOf ( args [ i ] ) ; else for ( java.lang.String arg : args ) rglpdhkyfjxkawpnrcli += java.lang.Integer . valueOf ( arg ) ;
× fix_prediction_before: if ( ( args.length ) > 0 ) for ( java.lang.String arg : args ) sum += java.lang.Integer . valueOf ( arg ) ;
× fix_prediction_after: if ( ( args [ 0 ] ) != null ) for ( java.lang.String arg : args ) rglpdhkyfjxkawpnrcli += java.lang.Integer . valueOf ( arg ) ;

line_index: 80
bug_before_refactoring: { Interpolation interpolation = new Interpolation () ; double second = interpolation . secondOrder () ; double third = interpolation . thirdOrder () ; double error = third - second ; java.lang.System.out . println ( ( "Second order value : " + second ) ) ; java.lang.System.out . println ( ( "Third order value : " + third ) ) ; java.lang.System.out . println ( ( "Error : " + error ) ) ; } <s> public static void main ( java.lang.String [] args ) { Interpolation interpolation = new Interpolation () ; double second = interpolation . secondOrder () ; double third = interpolation . thirdOrder () ; double error = third - second ; java.lang.System.out . println ( ( "Second order value : " + second ) ) ; java.lang.System.out . println ( ( "Third order value : " + third ) ) ; java.lang.System.out . println ( ( "Error : " + error ) ) ; } <s> fixed some error
bug_after_refactoring: { Interpolation interpolation = new Interpolation () ; double gwztjctvrsqxxzxqpkpn = interpolation . secondOrder () ; double szrixswadneaxdasgmzg = interpolation . thirdOrder () ; double lxisnatnmpoghytmqlqw = szrixswadneaxdasgmzg - gwztjctvrsqxxzxqpkpn ; java.lang.System.out . println ( ( "Second order value : " + gwztjctvrsqxxzxqpkpn ) ) ; java.lang.System.out . println ( ( "Third order value : " + szrixswadneaxdasgmzg ) ) ; java.lang.System.out . println ( ( "Error : " + lxisnatnmpoghytmqlqw ) ) ; } <s> public static void main ( java.lang.String [] args ) { Interpolation interpolation = new Interpolation () ; double gwztjctvrsqxxzxqpkpn = interpolation . secondOrder () ; double szrixswadneaxdasgmzg = interpolation . thirdOrder () ; double lxisnatnmpoghytmqlqw = szrixswadneaxdasgmzg - gwztjctvrsqxxzxqpkpn ; java.lang.System.out . println ( ( "Second order value : " + gwztjctvrsqxxzxqpkpn ) ) ; java.lang.System.out . println ( ( "Third order value : " + szrixswadneaxdasgmzg ) ) ; java.lang.System.out . println ( ( "Error : " + lxisnatnmpoghytmqlqw ) ) ; } <s> fixed some error
fix_before_refactoring: { Interpolation interpolation = new Interpolation () ; double second = interpolation . secondOrder () ; double third = interpolation . thirdOrder () ; java.lang.System.out . println ( ( "Second order value : " + second ) ) ; java.lang.System.out . println ( ( "Third order value : " + third ) ) ; double error = ( ( double ) ( third ) ) - second ; java.lang.System.out . println ( ( "Error : " + error ) ) ; }
fix_after_refactoring: { Interpolation interpolation = new Interpolation () ; double gwztjctvrsqxxzxqpkpn = interpolation . secondOrder () ; double szrixswadneaxdasgmzg = interpolation . thirdOrder () ; java.lang.System.out . println ( ( "Second order value : " + gwztjctvrsqxxzxqpkpn ) ) ; java.lang.System.out . println ( ( "Third order value : " + szrixswadneaxdasgmzg ) ) ; double lxisnatnmpoghytmqlqw = ( ( double ) ( szrixswadneaxdasgmzg ) ) - gwztjctvrsqxxzxqpkpn ; java.lang.System.out . println ( ( "Error : " + lxisnatnmpoghytmqlqw ) ) ; }
× fix_prediction_before: { Interpolation interpolation = new Interpolation () ; double second = interpolation . secondOrder () ; double third = interpolation . thirdOrder () ; double error = third - second ; java.lang.System.out . println ( ( "Second order value : " + second ) ) ; java.lang.System.out . println ( ( "Third order value : " + third ) ) ; java.lang.System.out . println ( ( "Error : " + error ) ) ; }
× fix_prediction_after: { Interpolation interpolation = new Interpolation () ; double gwztjctvrsqxxzxqpkpn = interpolation . secondOrder () ; double szrixswadneaxdasgmzg = interpolation . thirdOrder () ; double lxisnatnmpoghytmqlqw = szrixswadneaxdasgmzg - gwztjctvrsqxxzxqpkpn ; java.lang.System.out . println ( ( "Second order value : " + gwztjctvrsqxxzxqpkpn ) ) ; java.lang.System.out . println ( ( "Third order value : " + szrixswadneaxdasgmzg ) ) ; java.lang.System.out . println ( ( "Error : " + lxisnatnmpoghytmqlqw ) ) ; }

line_index: 81
bug_before_refactoring: ( pixelCount [ top ] [ left ] ) - ( pixelCount [ bottom ] [ right ] ) <s> public int getRangePixelCount ( android.graphics.Rect range ) { int top = range.top ; int bottom = range.bottom ; int left = range.left ; int right = range.right ; return ( pixelCount [ top ] [ left ] ) - ( pixelCount [ bottom ] [ right ] ) ; } <s> Fixed several bugs  but still left more bugs to be fixed!!!
bug_after_refactoring: ( pixelCount [ tawlzsegwdotuyjtahas ] [ bstbtztqwzdkwrbncfxu ] ) - ( pixelCount [ rstpjhdasihljholukdt ] [ pwjjvsvbpoftzueudaan ] ) <s> public int getRangePixelCount ( android.graphics.Rect range ) { int top = range.top ; int bottom = range.bottom ; int left = range.left ; int right = range.right ; return ( pixelCount [ tawlzsegwdotuyjtahas ] [ bstbtztqwzdkwrbncfxu ] ) - ( pixelCount [ rstpjhdasihljholukdt ] [ pwjjvsvbpoftzueudaan ] ) ; } <s> Fixed several bugs  but still left more bugs to be fixed!!!
fix_before_refactoring: ( pixelCount . get ( bottom , right ) ) - ( pixelCount . get ( top , left ) )
fix_after_refactoring: ( pixelCount . get ( rstpjhdasihljholukdt , pwjjvsvbpoftzueudaan ) ) - ( pixelCount . get ( tawlzsegwdotuyjtahas , bstbtztqwzdkwrbncfxu ) )
× fix_prediction_before: ( pixelCount [ top ] [ left ] ) - ( pixelCount [ top ] [ right ] )
× fix_prediction_after: ( pixelCount [ tawlzsegwdotuyjtahas ] [ bstbtztqwzdkwrbncfxu ] ) - ( pixelCount [ rstpjhdasihljholukdt ] [ pwjjvsvbpoftzueudaan ] )

line_index: 82
bug_before_refactoring: for ( int i = 1 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) > ( arr [ maxIndex ] ) ) { maxIndex = i ; } } <s> private int maxIndex ( int [] arr ) { int maxIndex = 0 ; for ( int i = 1 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) > ( arr [ maxIndex ] ) ) { maxIndex = i ; } } return maxIndex ; } <s> fixed bug in monster and got switching strategies working: Breadcrums to Random  and Random to Breadcrumbs when necessary
bug_after_refactoring: for ( int i = 1 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) > ( arr [ hntfwjfakkaxbkupuqhz ] ) ) { hntfwjfakkaxbkupuqhz = i ; } } <s> private int maxIndex ( int [] arr ) { int maxIndex = 0 ; for ( int i = 1 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) > ( arr [ hntfwjfakkaxbkupuqhz ] ) ) { hntfwjfakkaxbkupuqhz = i ; } } return maxIndex ; } <s> fixed bug in monster and got switching strategies working: Breadcrums to Random  and Random to Breadcrumbs when necessary
fix_before_refactoring: for ( int i = 0 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) >= ( arr [ maxIndex ] ) ) { maxIndex = i ; } }
fix_after_refactoring: for ( int i = 0 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) >= ( arr [ hntfwjfakkaxbkupuqhz ] ) ) { hntfwjfakkaxbkupuqhz = i ; } }
× fix_prediction_before: for ( int i = 1 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) > ( arr [ maxIndex ] ) ) { maxIndex = i ; } }
× fix_prediction_after: for ( int i = 1 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) > ( arr [ hntfwjfakkaxbkupuqhz ] ) ) { return i ; } }

line_index: 85
bug_before_refactoring: counter = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () ) <s> public int countEventsAtLocation ( java.lang.String id ) { int counter = - 1 ; java.lang.String request = handlers.HttpHandler . eventCounter ( id ) ; try { counter = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } catch ( java.util.concurrent.ExecutionException e ) { e . printStackTrace () ; } return counter ; } <s> fixed bugs in placeevent
bug_after_refactoring: qedzynkpnfcgakkvwtpu = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () ) <s> public int countEventsAtLocation ( java.lang.String id ) { int counter = - 1 ; java.lang.String request = handlers.HttpHandler . eventCounter ( id ) ; try { qedzynkpnfcgakkvwtpu = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } catch ( java.util.concurrent.ExecutionException e ) { e . printStackTrace () ; } return counter ; } <s> fixed bugs in placeevent
fix_before_refactoring: counter = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () . trim () )
fix_after_refactoring: qedzynkpnfcgakkvwtpu = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () . trim () )
× fix_prediction_before: counter = java.lang.Integer . parseInt ( new handlers.HttpTask () . execute ( "GET" , request ) . get () )
× fix_prediction_after: qedzynkpnfcgakkvwtpu = ( new handlers.HttpTask () . execute ( "GET" , request ) . get () ) - 1

line_index: 86
bug_before_refactoring: core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.inspectorPanel , ( ! open ) ) <s> public emerald.portal.JourneyBuilder clickMessageBoxActionMenu () { boolean open = false ; if ( core.Actions . find ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.mbActionMenu ) ) { open = true ; } core.Actions . click ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.btnMessageActionMenu ) ; core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.inspectorPanel , ( ! open ) ) ; return this ; } <s> fixed an issue in JourneyBuilder class with triggerbox paths added workaround for long loading spinner when clicking the Test button fixed a locator issue with an action menu wait
bug_after_refactoring: core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.inspectorPanel , ( ! cdvlatuhhubsospcaphy ) ) <s> public emerald.portal.JourneyBuilder clickMessageBoxActionMenu () { boolean open = false ; if ( core.Actions . find ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.mbActionMenu ) ) { open = true ; } core.Actions . click ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.btnMessageActionMenu ) ; core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.inspectorPanel , ( ! cdvlatuhhubsospcaphy ) ) ; return this ; } <s> fixed an issue in JourneyBuilder class with triggerbox paths added workaround for long loading spinner when clicking the Test button fixed a locator issue with an action menu wait
fix_before_refactoring: core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.mbActionMenu , ( ! open ) )
fix_after_refactoring: core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.mbActionMenu , ( ! cdvlatuhhubsospcaphy ) )
× fix_prediction_before: core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.inspectorPanel , true )
× fix_prediction_after: core.Wait . wait ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.inspectorPanel , ( ! cdvlatuhhubsospcaphy ) )

line_index: 87
bug_before_refactoring: { boolean followTerrain = isFollowTerrain () ; setFollowTerrain ( false ) ; super . render ( dc ) ; setFollowTerrain ( followTerrain ) ; } <s> @ java.lang.Override public void render ( gov.nasa.worldwind.render.DrawContext dc ) { try { super . render ( dc ) ; } catch ( java.lang.NullPointerException e ) { boolean followTerrain = isFollowTerrain () ; setFollowTerrain ( false ) ; super . render ( dc ) ; setFollowTerrain ( followTerrain ) ; } } <s> Fixed sector polyline rendering errors when sector is outside -90 -180 to 90 180
bug_after_refactoring: { boolean uzvtumuqcvcclgvwoqdj = isFollowTerrain () ; setFollowTerrain ( false ) ; super . render ( dc ) ; setFollowTerrain ( uzvtumuqcvcclgvwoqdj ) ; } <s> @ java.lang.Override public void render ( gov.nasa.worldwind.render.DrawContext dc ) { try { super . render ( dc ) ; } catch ( java.lang.NullPointerException e ) { boolean uzvtumuqcvcclgvwoqdj = isFollowTerrain () ; setFollowTerrain ( false ) ; super . render ( dc ) ; setFollowTerrain ( uzvtumuqcvcclgvwoqdj ) ; } } <s> Fixed sector polyline rendering errors when sector is outside -90 -180 to 90 180
fix_before_refactoring: { boolean followTerrain = isFollowTerrain () ; try { setFollowTerrain ( false ) ; super . render ( dc ) ; } finally { setFollowTerrain ( followTerrain ) ; } }
fix_after_refactoring: { boolean uzvtumuqcvcclgvwoqdj = isFollowTerrain () ; try { setFollowTerrain ( false ) ; super . render ( dc ) ; } finally { setFollowTerrain ( uzvtumuqcvcclgvwoqdj ) ; } }
× fix_prediction_before: { setFollowTerrain ( false ) ; super . render ( dc ) ; setFollowTerrain ( isFollowTerrain () ) ; }
× fix_prediction_after: { boolean uzvtumuqcvcclgvwoqdj = isFollowTerrain () ; setFollowTerrain ( false ) ; super . render ( dc ) ; }

line_index: 88
bug_before_refactoring: public double distance ( geogebra.common.kernel.geos.GeoPoint2 p ) { double distance = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { geogebra.common.kernel.geos.GeoElement geo = ( ( geogebra.common.kernel.geos.GeoElement ) ( geoList . get ( i ) ) ) ; double d = geo . distance ( p ) ; if ( d < distance ) { distance = d ; } } return distance ; } <s> public double distance ( geogebra.common.kernel.geos.GeoPoint2 p ) { double distance = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { geogebra.common.kernel.geos.GeoElement geo = ( ( geogebra.common.kernel.geos.GeoElement ) ( geoList . get ( i ) ) ) ; double d = geo . distance ( p ) ; if ( d < distance ) { distance = d ; } } return distance ; } <s> bugfix (HSV for GeoList)  git-svn-id: http://www.geogebra.org/svn/trunk/geogebra@14992 23ce0884-8a58-47d3-bc5c-ddf1cd5b9f9e
bug_after_refactoring: public double irpclyechjdivliyvsui ( geogebra.common.kernel.geos.GeoPoint2 p ) { double irpclyechjdivliyvsui = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { geogebra.common.kernel.geos.GeoElement geo = ( ( geogebra.common.kernel.geos.GeoElement ) ( geoList . get ( i ) ) ) ; double ecrtmuaqcmvgoepjnwhg = geo . irpclyechjdivliyvsui ( p ) ; if ( ecrtmuaqcmvgoepjnwhg < irpclyechjdivliyvsui ) { irpclyechjdivliyvsui = ecrtmuaqcmvgoepjnwhg ; } } return irpclyechjdivliyvsui ; } <s> public double irpclyechjdivliyvsui ( geogebra.common.kernel.geos.GeoPoint2 p ) { double irpclyechjdivliyvsui = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { geogebra.common.kernel.geos.GeoElement geo = ( ( geogebra.common.kernel.geos.GeoElement ) ( geoList . get ( i ) ) ) ; double ecrtmuaqcmvgoepjnwhg = geo . irpclyechjdivliyvsui ( p ) ; if ( ecrtmuaqcmvgoepjnwhg < irpclyechjdivliyvsui ) { irpclyechjdivliyvsui = ecrtmuaqcmvgoepjnwhg ; } } return irpclyechjdivliyvsui ; } <s> bugfix (HSV for GeoList)  git-svn-id: http://www.geogebra.org/svn/trunk/geogebra@14992 23ce0884-8a58-47d3-bc5c-ddf1cd5b9f9e
fix_before_refactoring: @ java.lang.Override public double distance ( final geogebra.common.kernel.geos.GeoPoint2 p ) { double distance = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { final geogebra.common.kernel.geos.GeoElement geo = geoList . get ( i ) ; final double d = geo . distance ( p ) ; if ( d < distance ) { distance = d ; } } return distance ; }
fix_after_refactoring: @ java.lang.Override public double irpclyechjdivliyvsui ( final geogebra.common.kernel.geos.GeoPoint2 p ) { double irpclyechjdivliyvsui = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { final geogebra.common.kernel.geos.GeoElement geo = geoList . get ( i ) ; final double ecrtmuaqcmvgoepjnwhg = geo . irpclyechjdivliyvsui ( p ) ; if ( ecrtmuaqcmvgoepjnwhg < irpclyechjdivliyvsui ) { irpclyechjdivliyvsui = ecrtmuaqcmvgoepjnwhg ; } } return irpclyechjdivliyvsui ; }
× fix_prediction_before: public double distance ( final geogebra.common.kernel.geos.GeoPoint2 p ) { final double distance = java.lang.Double.POSITIVE_INFINITY ; for ( final int i = 0 ; i < ( geoList . size () ) ; i ++ ) { final geogebra.common.kernel.geos.GeoElement geo = geoList . get ( i ) ; double d = geo . distance ( p ) ; if ( d < distance ) { distance = d ; } } return distance ; }
× fix_prediction_after: public double irpclyechjdivliyvsui ( final geogebra.common.kernel.geos.GeoPoint2 p ) { double irpclyechjdivliyvsui = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { final geogebra.common.kernel.geos.GeoElement geo = geo . irpclyechjdivliyvsui ( p ) ; if ( ecrtmuaqcmvgoepjnwhg < irpclyechjdivliyvsui ) { irpclyechjdivliyvsui = ecrtmuaqcmvgoepjnwhg ; } } return irpclyechjdivliyvsui ; }

line_index: 90
bug_before_refactoring: com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) ) <s> @ org.junit.Test @ com.hp.autonomy.frontend.selenium.framework.logging.ResolvedBug ( value = "FIND-93" ) public void testNoResults () { final com.autonomy.abc.selenium.find.results.ListView results = findService . search ( "thissearchwillalmostcertainlyreturnnoresults" ) ; new org.openqa.selenium.support.ui.WebDriverWait ( getDriver () , 60L ) . withMessage ( "No results message should appear" ) . until ( org.openqa.selenium.support.ui.ExpectedConditions . textToBePresentInElement ( results . resultsDiv () , "No results found" ) ) ; findPage . scrollToBottom () ; final int occurrences = org.apache.commons.lang3.StringUtils . countMatches ( results . resultsDiv () . getText () , "results found" ) ; com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) ) ; } <s> [FIND-719  FIND-1122] Marked ActiveBugs as resolved in ITs.  [rev: ivo.miller]
bug_after_refactoring: com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) ) <s> @ org.junit.Test @ com.hp.autonomy.frontend.selenium.framework.logging.ResolvedBug ( value = "FIND-93" ) public void testNoResults () { final com.autonomy.abc.selenium.find.results.ListView results = findService . search ( "thissearchwillalmostcertainlyreturnnoresults" ) ; new org.openqa.selenium.support.ui.WebDriverWait ( getDriver () , 60L ) . withMessage ( "No results message should appear" ) . until ( org.openqa.selenium.support.ui.ExpectedConditions . textToBePresentInElement ( results . resultsDiv () , "No results found" ) ) ; findPage . scrollToBottom () ; final int occurrences = org.apache.commons.lang3.StringUtils . countMatches ( results . resultsDiv () . getText () , "results found" ) ; com.hp.autonomy.frontend.selenium.framework.state.TestStateAssert . verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) ) ; } <s> [FIND-719  FIND-1122] Marked ActiveBugs as resolved in ITs.  [rev: ivo.miller]
fix_before_refactoring: verifyThat ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) )
fix_after_refactoring: verifyThat ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) )
× fix_prediction_before: verify ( "Only one message showing at the bottom of search results" , occurrences , org.hamcrest.core.Is . is ( 1 ) )
× fix_prediction_after: verify ( "Only one message showing at the bottom of search results" , agizvcxofjgcwblpftys , org.hamcrest.core.Is . is ( 1 ) )

line_index: 92
bug_before_refactoring: { java.lang.String creditsEarned = client . getServer () . getCreditEarnedOnCurrentSession () ; int charToRemove = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( creditsEarned != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= charToRemove ; i ++ ) { java.lang.System.out . print ( " " ) ; } } <s> private void updateLine () { java.lang.String creditsEarned = client . getServer () . getCreditEarnedOnCurrentSession () ; int charToRemove = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( creditsEarned != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= charToRemove ; i ++ ) { java.lang.System.out . print ( " " ) ; } } <s> Bugfix:  You get credits by either rendering successfully a frame or by sending and error when it failed so no need to request an update of credits everytime the line is updated (specially on status update...)
bug_after_refactoring: { java.lang.String creditsEarned = client . getServer () . getCreditEarnedOnCurrentSession () ; int kmmsinhkdzcrnwvkhwwt = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( creditsEarned != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= kmmsinhkdzcrnwvkhwwt ; i ++ ) { java.lang.System.out . print ( " " ) ; } } <s> private void updateLine () { java.lang.String creditsEarned = client . getServer () . getCreditEarnedOnCurrentSession () ; int kmmsinhkdzcrnwvkhwwt = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( creditsEarned != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= kmmsinhkdzcrnwvkhwwt ; i ++ ) { java.lang.System.out . print ( " " ) ; } } <s> Bugfix:  You get credits by either rendering successfully a frame or by sending and error when it failed so no need to request an update of credits everytime the line is updated (specially on status update...)
fix_before_refactoring: { int charToRemove = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( ( creditsEarned ) != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= charToRemove ; i ++ ) { java.lang.System.out . print ( " " ) ; } }
fix_after_refactoring: { int kmmsinhkdzcrnwvkhwwt = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( ( creditsEarned ) != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= kmmsinhkdzcrnwvkhwwt ; i ++ ) { java.lang.System.out . print ( " " ) ; } }
× fix_prediction_before: { java.lang.String creditsEarned = client . getServer () . getCreditEarnedOnCurrentSession () ; int charToRemove = line . length () ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d creditsearned: %s | %s" , rendered , remaining , ( creditsEarned != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= charToRemove ; i ++ ) { java.lang.System.out . print ( " " ) ; } }
× fix_prediction_after: { java.lang.String creditsEarned = client . getServer () . getCreditEarnedOnCurrentSession () ; int kmmsinhkdzcrnwvkhwwt = line . length () ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d creditsearned: %s | %s" , rendered , remaining , ( creditsEarned != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= kmmsinhkdzcrnwvkhwwt ; i ++ ) { java.lang.System.out . print ( " " ) ; } }

line_index: 93
bug_before_refactoring: { int currentIndex = index ; org.bucaojit.filter.Slot currentSlot = set . get ( currentIndex ) ; int foundIndex = - 1 ; int runStart = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; runStart = findRunStart ( currentIndex ) ; return checkQuotient ( runStart , remainder ) ; } <s> public int lookup ( int index , short remainder ) { int currentIndex = index ; org.bucaojit.filter.Slot currentSlot = set . get ( currentIndex ) ; int foundIndex = - 1 ; int runStart = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; runStart = findRunStart ( currentIndex ) ; return checkQuotient ( runStart , remainder ) ; } <s> working version  added tests  bug fixes
bug_after_refactoring: { int sqlmytlwqvrqwksldnzg = index ; org.bucaojit.filter.Slot currentSlot = set . get ( sqlmytlwqvrqwksldnzg ) ; int voxdbqtrnsognyjhcdjc = - 1 ; int zxntlxetzjxavhngshil = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; zxntlxetzjxavhngshil = findRunStart ( sqlmytlwqvrqwksldnzg ) ; return checkQuotient ( zxntlxetzjxavhngshil , remainder ) ; } <s> public int lookup ( int index , short remainder ) { int sqlmytlwqvrqwksldnzg = index ; org.bucaojit.filter.Slot currentSlot = set . get ( sqlmytlwqvrqwksldnzg ) ; int voxdbqtrnsognyjhcdjc = - 1 ; int zxntlxetzjxavhngshil = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; zxntlxetzjxavhngshil = findRunStart ( sqlmytlwqvrqwksldnzg ) ; return checkQuotient ( zxntlxetzjxavhngshil , remainder ) ; } <s> working version  added tests  bug fixes
fix_before_refactoring: { int currentIndex = index ; org.bucaojit.filter.Slot currentSlot = set . get ( currentIndex ) ; int runStart = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; runStart = findRunStart ( currentIndex ) ; return checkQuotient ( runStart , remainder ) ; }
fix_after_refactoring: { int sqlmytlwqvrqwksldnzg = index ; org.bucaojit.filter.Slot currentSlot = set . get ( sqlmytlwqvrqwksldnzg ) ; int zxntlxetzjxavhngshil = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; zxntlxetzjxavhngshil = findRunStart ( sqlmytlwqvrqwksldnzg ) ; return checkQuotient ( zxntlxetzjxavhngshil , remainder ) ; }
× fix_prediction_before: { org.bucaojit.filter.Slot currentSlot = set . get ( currentIndex ) ; int foundIndex = - 1 ; int runStart = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; runStart = findRunStart ( currentIndex ) ; return checkQuotient ( runStart , remainder ) ; }
× fix_prediction_after: { org.bucaojit.filter.Slot currentSlot = set . get ( sqlmytlwqvrqwksldnzg ) ; int voxdbqtrnsognyjhcdjc = - 1 ; int zxntlxetzjxavhngshil = 0 ; if ( currentSlot . getMetadata () . isClear () ) return - 1 ; zxntlxetzjxavhngshil = findRunStart ( sqlmytlwqvrqwksldnzg ) ; return checkQuotient ( zxntlxetzjxavhngshil , remainder ) ; }

line_index: 94
bug_before_refactoring: if ( c == '\n' ) { java.lang.String output = buffer ; buffer = "" ; return output . split ( "\t" ) ; } else buffer += c ; <s> public java.lang.String [] getPacket ( ) throws java.io.IOException { while ( input . ready () ) { char c = ( ( char ) ( input . read () ) ) ; if ( c == '\n' ) { java.lang.String output = buffer ; buffer = "" ; return output . split ( "\t" ) ; } else buffer += c ; } return null ; } <s> Complete re-inspection of MP code  fixing some of the most obvious issues
bug_after_refactoring: if ( odltvhppubvpisoffncl == '\n' ) { java.lang.String output = buffer ; buffer = "" ; return output . split ( "\t" ) ; } else buffer += odltvhppubvpisoffncl ; <s> public java.lang.String [] getPacket ( ) throws java.io.IOException { while ( input . ready () ) { char c = ( ( char ) ( input . read () ) ) ; if ( odltvhppubvpisoffncl == '\n' ) { java.lang.String output = buffer ; buffer = "" ; return output . split ( "\t" ) ; } else buffer += odltvhppubvpisoffncl ; } return null ; } <s> Complete re-inspection of MP code  fixing some of the most obvious issues
fix_before_refactoring: if ( c == '\n' ) { java.lang.String output = buffer . toString () ; buffer = new java.lang.StringBuilder () ; return output . split ( "\t" ) ; } else buffer . append ( c ) ;
fix_after_refactoring: if ( odltvhppubvpisoffncl == '\n' ) { java.lang.String output = buffer . toString () ; buffer = new java.lang.StringBuilder () ; return output . split ( "\t" ) ; } else buffer . append ( odltvhppubvpisoffncl ) ;
× fix_prediction_before: if ( ( char ) == '\n' ) { java.lang.String output = buffer ; buffer = "" ; return output . split ( "\t" ) ; } else buffer += c ;
× fix_prediction_after: if ( odltvhppubvpisoffncl == '\n' ) { java.lang.String output = buffer ; buffer = "" ; return output . split ( "\t" ) ; } else buffer += odltvhppubvpisoffncl ;

line_index: 95
bug_before_refactoring: @ java.lang.Override public void onBackPressed () { int currentPos = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( currentPos ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } } <s> @ java.lang.Override public void onBackPressed () { int currentPos = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( currentPos ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } } <s> Fixed back pressed bug
bug_after_refactoring: @ java.lang.Override public void onBackPressed () { int xjwngxykhxqjsluqqkpd = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( xjwngxykhxqjsluqqkpd ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } } <s> @ java.lang.Override public void onBackPressed () { int xjwngxykhxqjsluqqkpd = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( xjwngxykhxqjsluqqkpd ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } } <s> Fixed back pressed bug
fix_before_refactoring: @ java.lang.Override public boolean onBackPressed () { int currentPos = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( currentPos ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { return ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } return false ; }
fix_after_refactoring: @ java.lang.Override public boolean onBackPressed () { int xjwngxykhxqjsluqqkpd = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( xjwngxykhxqjsluqqkpd ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { return ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } return false ; }
× fix_prediction_before: @ java.lang.Override public void onBackPressed () { if ( ( mViewPager ) != null ) { int currentPos = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( currentPos ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } } }
× fix_prediction_after: @ java.lang.Override public void onBackPressed () { if ( ( mViewPager ) != null ) { int xjwngxykhxqjsluqqkpd = mViewPager . getCurrentItem () ; java.lang.String tag = mSectionsPagerAdapter . getFragmentTag ( xjwngxykhxqjsluqqkpd ) ; if ( tag != null ) { android.support.v4.app.Fragment currentFragment = getChildFragmentManager () . findFragmentByTag ( tag ) ; if ( currentFragment instanceof tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) { ( ( tw.edu.ntust.et.mit.jonkermalacca.MainActivity.OnBackPressedListener ) ( currentFragment ) ) . onBackPressed () ; } } } }

line_index: 97
bug_before_refactoring: { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; int quantity = ( ( int ) ( ( chemical.mols ) * ( properties . getMoleculesPerMole () ) ) ) ; reactor . createEntities ( species , quantity ) ; } <s> private void initializeModel ( ) throws java.io.IOException { java.util.List < edu.mtu.parser.ChemicalDto > chemicals = edu.mtu.parser.Parser . parseChemicals ( properties . getChemicalsFileName () ) ; edu.mtu.catalog.ReactionRegistry registry = edu.mtu.catalog.ReactionRegistry . getInstance () ; edu.mtu.Reactor.Reactor reactor = edu.mtu.Reactor.Reactor . getInstance () ; for ( edu.mtu.parser.ChemicalDto chemical : chemicals ) { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; int quantity = ( ( int ) ( ( chemical.mols ) * ( properties . getMoleculesPerMole () ) ) ) ; reactor . createEntities ( species , quantity ) ; } } <s> Minor bug fix.
bug_after_refactoring: { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; int qnsslvmiinmytpmwwwsj = ( ( int ) ( ( chemical.mols ) * ( properties . getMoleculesPerMole () ) ) ) ; reactor . createEntities ( species , qnsslvmiinmytpmwwwsj ) ; } <s> private void initializeModel ( ) throws java.io.IOException { java.util.List < edu.mtu.parser.ChemicalDto > chemicals = edu.mtu.parser.Parser . parseChemicals ( properties . getChemicalsFileName () ) ; edu.mtu.catalog.ReactionRegistry registry = edu.mtu.catalog.ReactionRegistry . getInstance () ; edu.mtu.Reactor.Reactor reactor = edu.mtu.Reactor.Reactor . getInstance () ; for ( edu.mtu.parser.ChemicalDto chemical : chemicals ) { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; int qnsslvmiinmytpmwwwsj = ( ( int ) ( ( chemical.mols ) * ( properties . getMoleculesPerMole () ) ) ) ; reactor . createEntities ( species , qnsslvmiinmytpmwwwsj ) ; } } <s> Minor bug fix.
fix_before_refactoring: { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; reactor . createEntities ( species , chemical.mols ) ; }
fix_after_refactoring: { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; reactor . createEntities ( species , chemical.mols ) ; }
× fix_prediction_before: { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; int quantity = ( ( int ) ( ( chemical.mols ) * ( properties . getMoleculesPerMole () ) ) ) ; reactor . createEntities ( species , quantity ) ; }
× fix_prediction_after: { edu.mtu.compound.Species species = registry . getSpecies ( chemical.formula ) ; int qnsslvmiinmytpmwwwsj = ( ( int ) ( ( chemical.mols ) * ( properties . getMoleculesPerMole () ) ) ) ; reactor . createEntities ( species , qnsslvmiinmytpmwwwsj ) ; }

line_index: 98
bug_before_refactoring: { str = str . replaceAll ( "\\$" , "" ) ; int registerNumber = java.lang.Integer . parseInt ( str ) ; return isRegisterFloat [ registerNumber ] ; } <s> private boolean isFloat ( java.lang.String str ) { if ( str . contains ( "$" ) ) { str = str . replaceAll ( "\\$" , "" ) ; int registerNumber = java.lang.Integer . parseInt ( str ) ; return isRegisterFloat [ registerNumber ] ; } else { return ( ( str . contains ( "." ) ) || ( str . startsWith ( "_f" ) ) ) || ( str . endsWith ( "_float" ) ) ; } } <s> all registers but t0  t1  t2 get used in basic block allocation. fixed bug where registers would lose int/float info
bug_after_refactoring: { str = str . replaceAll ( "\\$" , "" ) ; int dverpubaxmkekgthkayc = java.lang.Integer . parseInt ( str ) ; return isRegisterFloat [ dverpubaxmkekgthkayc ] ; } <s> private boolean isFloat ( java.lang.String str ) { if ( str . contains ( "$" ) ) { str = str . replaceAll ( "\\$" , "" ) ; int dverpubaxmkekgthkayc = java.lang.Integer . parseInt ( str ) ; return isRegisterFloat [ dverpubaxmkekgthkayc ] ; } else { return ( ( str . contains ( "." ) ) || ( str . startsWith ( "_f" ) ) ) || ( str . endsWith ( "_float" ) ) ; } } <s> all registers but t0  t1  t2 get used in basic block allocation. fixed bug where registers would lose int/float info
fix_before_refactoring: { return isRegisterFloat . get ( str ) ; }
fix_after_refactoring: { return isRegisterFloat . get ( str ) ; }
× fix_prediction_before: { int registerNumber = java.lang.Integer . parseInt ( str ) ; return isRegisterFloat [ registerNumber ] ; }
× fix_prediction_after: { str = str . replaceAll ( "\\$" , "" ) ; int dverpubaxmkekgthkayc = java.lang.Integer . parseInt ( str ) ; return isRegisterFloat [ dverpubaxmkekgthkayc ] ; }

line_index: 99
bug_before_refactoring: new workSQL.Employee ( hold , "" , "" , "" ) <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int hold = 0 ; newEmployee = new workSQL.Employee ( hold , "" , "" , "" ) ; workSQL.EmployeeDetailDialog addD = new workSQL.EmployeeDetailDialog ( thisFrame , thisFrame , "Add a new employee" , true , newEmployee ) ; addD.updateButton . setEnabled ( false ) ; addD.deleteButton . setEnabled ( false ) ; addD.employeeNumberField . setEnabled ( false ) ; addD . setVisible ( true ) ; } <s> Some errors have been fixed but lots of work left to do inorder to configure it with the final database.
bug_after_refactoring: new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" ) <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int hold = 0 ; newEmployee = new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" ) ; workSQL.EmployeeDetailDialog addD = new workSQL.EmployeeDetailDialog ( thisFrame , thisFrame , "Add a new employee" , true , newEmployee ) ; addD.updateButton . setEnabled ( false ) ; addD.deleteButton . setEnabled ( false ) ; addD.employeeNumberField . setEnabled ( false ) ; addD . setVisible ( true ) ; } <s> Some errors have been fixed but lots of work left to do inorder to configure it with the final database.
fix_before_refactoring: new workSQL.Employee ( hold , "" , "" , "" , "" )
fix_after_refactoring: new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" , "" )
× fix_prediction_before: new workSQL.Employee ( hold , "" , "" , "" )
× fix_prediction_after: new workSQL.Employee ( kvjcucfcidbpfwupcbxb , "" , "" , "" )

line_index: 100
bug_before_refactoring: { byte [] buffer = this . socket . readPacket () ; byte buff = buffer [ ( ( buffer.length ) - 1 ) ] ; byte [] bytes = new byte [] { ( ( byte ) ( buff ) ) } ; if ( bytes == ( org.itxtech.synapseapi.network.synlib.ServerConnection.MAGIC_BYTES ) ) { if ( ( buffer.length ) > 4 ) {} } return buffer ; } <s> public byte [] readPacket () { byte [] buffer = this . socket . readPacket () ; byte buff = buffer [ ( ( buffer.length ) - 1 ) ] ; byte [] bytes = new byte [] { ( ( byte ) ( buff ) ) } ; if ( bytes == ( org.itxtech.synapseapi.network.synlib.ServerConnection.MAGIC_BYTES ) ) { if ( ( buffer.length ) > 4 ) {} } return buffer ; } <s> fix some bugs
bug_after_refactoring: { byte [] yacwdvnmjenpytyhkxty = this . socket . readPacket () ; byte ybfdjpchifmwflqbmiyy = yacwdvnmjenpytyhkxty [ ( ( yacwdvnmjenpytyhkxty.length ) - 1 ) ] ; byte [] fwbsqpjfgdvezmqtelhz = new byte [] { ( ( byte ) ( ybfdjpchifmwflqbmiyy ) ) } ; if ( fwbsqpjfgdvezmqtelhz == ( org.itxtech.synapseapi.network.synlib.ServerConnection.MAGIC_BYTES ) ) { if ( ( yacwdvnmjenpytyhkxty.length ) > 4 ) {} } return yacwdvnmjenpytyhkxty ; } <s> public byte [] readPacket () { byte [] yacwdvnmjenpytyhkxty = this . socket . readPacket () ; byte ybfdjpchifmwflqbmiyy = yacwdvnmjenpytyhkxty [ ( ( yacwdvnmjenpytyhkxty.length ) - 1 ) ] ; byte [] fwbsqpjfgdvezmqtelhz = new byte [] { ( ( byte ) ( ybfdjpchifmwflqbmiyy ) ) } ; if ( fwbsqpjfgdvezmqtelhz == ( org.itxtech.synapseapi.network.synlib.ServerConnection.MAGIC_BYTES ) ) { if ( ( yacwdvnmjenpytyhkxty.length ) > 4 ) {} } return yacwdvnmjenpytyhkxty ; } <s> fix some bugs
fix_before_refactoring: { byte [] buff = new byte [] {} ; byte [] buffer = this . socket . readPacket () ; byte [] bytes = new byte [] { ( ( byte ) ( buffer [ ( ( buffer.length ) - 1 ) ] ) ) } ; if ( bytes == ( org.itxtech.synapseapi.network.synlib.ServerConnection.MAGIC_BYTES ) ) { if ( ( buffer.length ) > 4 ) {} } return buff ; }
fix_after_refactoring: { byte [] ybfdjpchifmwflqbmiyy = new byte [] {} ; byte [] yacwdvnmjenpytyhkxty = this . socket . readPacket () ; byte [] fwbsqpjfgdvezmqtelhz = new byte [] { ( ( byte ) ( yacwdvnmjenpytyhkxty [ ( ( yacwdvnmjenpytyhkxty.length ) - 1 ) ] ) ) } ; if ( fwbsqpjfgdvezmqtelhz == ( org.itxtech.synapseapi.network.synlib.ServerConnection.MAGIC_BYTES ) ) { if ( ( yacwdvnmjenpytyhkxty.length ) > 4 ) {} } return ybfdjpchifmwflqbmiyy ; }
× fix_prediction_before: { byte [] buffer = this . socket . readPacket () ; byte buff = buffer [ ( ( buffer.length ) - 1 ) ] ; byte [] bytes = new byte [] { ( ( byte ) ( buff ) ) } ; return buffer ; }
× fix_prediction_after: { byte [] yacwdvnmjenpytyhkxty = this . socket . readPacket () ; byte ybfdjpchifmwflqbmiyy = yacwdvnmjenpytyhkxty [ ( ( yacwdvnmjenpytyhkxty.length ) - 1 ) ] ; byte [] fwbsqpjfgdvezmqtelhz = new byte [] { ( ( byte ) ( ybfdjpchifmwflqbmiyy ) ) } ; return yacwdvnmjenpytyhkxty ; }

line_index: 101
bug_before_refactoring: { int characterId = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( characterId , eventType ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int characterId = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( characterId , eventType ) ; } <s> Fixed persistence issues after adding and removing characters from an encounter
bug_after_refactoring: { int txtdmvwkjdqliaezmham = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( txtdmvwkjdqliaezmham , eventType ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int txtdmvwkjdqliaezmham = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( txtdmvwkjdqliaezmham , eventType ) ; } <s> Fixed persistence issues after adding and removing characters from an encounter
fix_before_refactoring: { int position = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( position , eventType ) ; }
fix_after_refactoring: { int position = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( position , eventType ) ; }
× fix_prediction_before: { int characterId = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( characterId , eventType ) ; }
× fix_prediction_after: { int txtdmvwkjdqliaezmham = ( ( java.lang.Integer ) ( v . getTag () ) ) ; me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType eventType ; if ( ( v . getId () ) == ( R.id.ib_hp_minus_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.DECREASE_HEALTH ; } else if ( ( v . getId () ) == ( R.id.ib_hp_add_select ) ) { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.INCREASE_HEALTH ; } else { eventType = me.colinhowes.rollinitiative.CombatAdapter.CombatClickListener.EventType.ITEM_CLICK ; } clickListener . onCombatClick ( txtdmvwkjdqliaezmham , eventType ) ; }

line_index: 102
bug_before_refactoring: { int id = java.lang.Integer . parseInt ( movieIdChosen ) ; movieController . returnMovie ( id , panel , scroll ) ; rentalInfoController . returnMovie ( id , clientSelected . getId () ) ; } <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( movieIdChosen ) != null ) { int id = java.lang.Integer . parseInt ( movieIdChosen ) ; movieController . returnMovie ( id , panel , scroll ) ; rentalInfoController . returnMovie ( id , clientSelected . getId () ) ; } } <s> fixed rental and return duplicate response bug
bug_after_refactoring: { int yyrnboxqgoxogrzxpqeg = java.lang.Integer . parseInt ( movieIdChosen ) ; movieController . returnMovie ( yyrnboxqgoxogrzxpqeg , panel , scroll ) ; rentalInfoController . returnMovie ( yyrnboxqgoxogrzxpqeg , clientSelected . getId () ) ; } <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( movieIdChosen ) != null ) { int yyrnboxqgoxogrzxpqeg = java.lang.Integer . parseInt ( movieIdChosen ) ; movieController . returnMovie ( yyrnboxqgoxogrzxpqeg , panel , scroll ) ; rentalInfoController . returnMovie ( yyrnboxqgoxogrzxpqeg , clientSelected . getId () ) ; } } <s> fixed rental and return duplicate response bug
fix_before_refactoring: { int id = java.lang.Integer . parseInt ( movieIdChosen ) ; rentalInfoController . returnMovie ( id , clientSelected . getId () ) ; movieController . returnMovie ( id , panel , scroll ) ; }
fix_after_refactoring: { int yyrnboxqgoxogrzxpqeg = java.lang.Integer . parseInt ( movieIdChosen ) ; rentalInfoController . returnMovie ( yyrnboxqgoxogrzxpqeg , clientSelected . getId () ) ; movieController . returnMovie ( yyrnboxqgoxogrzxpqeg , panel , scroll ) ; }
× fix_prediction_before: { int id = java.lang.Integer . parseInt ( movieIdChosen ) ; movieController . returnMovie ( id , panel , scroll ) ; rentalInfoController . returnMovie ( id , clientSelected . getId () ) ; }
× fix_prediction_after: { int yyrnboxqgoxogrzxpqeg = java.lang.Integer . parseInt ( movieIdChosen ) ; movieController . returnMovie ( yyrnboxqgoxogrzxpqeg , panel , scroll ) ; rentalInfoController . returnMovie ( yyrnboxqgoxogrzxpqeg , clientSelected . getId () ) ; }

line_index: 104
bug_before_refactoring: @ pt.webdetails.cfr.GET @ pt.webdetails.cfr.Path ( value = "/createFolder" ) public void createFolder ( @ javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest request , @ javax.ws.rs.core.Context javax.servlet.http.HttpServletResponse response ) throws java.lang.Exception { java.lang.String path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( getParameter ( "path" , request ) ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean createResult = getRepository () . createFolder ( path ) ; writeMessage ( new org.json.JSONObject () . put ( "result" , createResult ) . toString () , response . getOutputStream () ) ; } <s> @ pt.webdetails.cfr.GET @ pt.webdetails.cfr.Path ( value = "/createFolder" ) public void createFolder ( @ javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest request , @ javax.ws.rs.core.Context javax.servlet.http.HttpServletResponse response ) throws java.lang.Exception { java.lang.String path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( getParameter ( "path" , request ) ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean createResult = getRepository () . createFolder ( path ) ; writeMessage ( new org.json.JSONObject () . put ( "result" , createResult ) . toString () , response . getOutputStream () ) ; } <s> Merge pull request #21 from jvelasques/wip  [cfr] - Refactoring CfrApi a bit  fixing an IE8 issue on download and op...
bug_after_refactoring: @ pt.webdetails.cfr.GET @ pt.webdetails.cfr.Path ( value = "/createFolder" ) public void createFolder ( @ javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest request , @ javax.ws.rs.core.Context javax.servlet.http.HttpServletResponse response ) throws java.lang.Exception { java.lang.String path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( getParameter ( "path" , request ) ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean hmdxalgtimjrkewfpelt = getRepository () . createFolder ( path ) ; writeMessage ( new org.json.JSONObject () . put ( "result" , hmdxalgtimjrkewfpelt ) . toString () , response . getOutputStream () ) ; } <s> @ pt.webdetails.cfr.GET @ pt.webdetails.cfr.Path ( value = "/createFolder" ) public void createFolder ( @ javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest request , @ javax.ws.rs.core.Context javax.servlet.http.HttpServletResponse response ) throws java.lang.Exception { java.lang.String path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( getParameter ( "path" , request ) ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean hmdxalgtimjrkewfpelt = getRepository () . createFolder ( path ) ; writeMessage ( new org.json.JSONObject () . put ( "result" , hmdxalgtimjrkewfpelt ) . toString () , response . getOutputStream () ) ; } <s> Merge pull request #21 from jvelasques/wip  [cfr] - Refactoring CfrApi a bit  fixing an IE8 issue on download and op...
fix_before_refactoring: @ javax.ws.rs.GET @ javax.ws.rs.Path ( value = "/createFolder" ) @ javax.ws.rs.Produces ( value = pt.webdetails.cpf.utils.MimeTypes.JSON ) public java.lang.String createFolder ( @ javax.ws.rs.QueryParam ( value = pt.webdetails.cfr.CfrApi.MethodParams.PATH ) java.lang.String path ) throws java.lang.Exception { path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( path ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean createResult = getRepository () . createFolder ( path ) ; return new org.json.JSONObject () . put ( "result" , createResult ) . toString () ; }
fix_after_refactoring: @ javax.ws.rs.GET @ javax.ws.rs.Path ( value = "/createFolder" ) @ javax.ws.rs.Produces ( value = pt.webdetails.cpf.utils.MimeTypes.JSON ) public java.lang.String createFolder ( @ javax.ws.rs.QueryParam ( value = pt.webdetails.cfr.CfrApi.MethodParams.PATH ) java.lang.String path ) throws java.lang.Exception { path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( path ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean hmdxalgtimjrkewfpelt = getRepository () . createFolder ( path ) ; return new org.json.JSONObject () . put ( "result" , hmdxalgtimjrkewfpelt ) . toString () ; }
× fix_prediction_before: @ pt.webdetails.cfr.GET @ pt.webdetails.cfr.Path ( value = "/createFolder" ) public void createFolder ( @ javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest request , @ javax.ws.rs.core.Context javax.servlet.http.HttpServletResponse response ) throws java.lang.Exception { java.lang.String path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( getParameter ( "path" , request ) ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean createResult = getRepository () . createFolder ( path ) ; writeMessage ( new org.json.JSONObject () . put ( "result" , createResult ) . toString () , response . getOutputStream () ) ; }
× fix_prediction_after: @ pt.webdetails.cfr.GET @ pt.webdetails.cfr.Path ( value = "/createFolder" ) public void createFolder ( @ javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest request , @ javax.ws.rs.core.Context javax.servlet.http.HttpServletResponse response ) throws java.lang.Exception { java.lang.String path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( getParameter ( "path" , request ) ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean hmdxalgtimjrkewfpelt = getRepository () . createFolder ( path ) ; writeMessage ( new org.json.JSONObject () . put ( "result" , hmdxalgtimjrkewfpelt ) . toString () , response . getOutputStream () ) ; }

line_index: 105
bug_before_refactoring: { int nc = flagConnectedComponents () ; Graph [] comps = new Graph [ nc ] ; for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; } <s> public Graph [] getConnectedComponents () { int nc = flagConnectedComponents () ; Graph [] comps = new Graph [ nc ] ; for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; } <s> graph debug  added linear solver
bug_after_refactoring: { int zpnkndnozwtfvzpgwiwc = flagConnectedComponents () ; Graph [] comps = new Graph [ zpnkndnozwtfvzpgwiwc ] ; for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; } <s> public Graph [] getConnectedComponents () { int zpnkndnozwtfvzpgwiwc = flagConnectedComponents () ; Graph [] comps = new Graph [ zpnkndnozwtfvzpgwiwc ] ; for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; } <s> graph debug  added linear solver
fix_before_refactoring: { int nc = flagConnectedComponents () ; Graph [] comps = new Graph [ nc ] ; for ( int i = 0 ; i < nc ; i ++ ) { comps [ i ] = new Graph () ; } for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; }
fix_after_refactoring: { int zpnkndnozwtfvzpgwiwc = flagConnectedComponents () ; Graph [] comps = new Graph [ zpnkndnozwtfvzpgwiwc ] ; for ( int i = 0 ; i < zpnkndnozwtfvzpgwiwc ; i ++ ) { comps [ i ] = new Graph () ; } for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; }
× fix_prediction_before: { int nc = flagConnectedComponents () ; Graph [] comps = new Graph [ nc ] ; for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; }
× fix_prediction_after: { int zpnkndnozwtfvzpgwiwc = flagConnectedComponents () ; Graph [] comps = new Graph [ zpnkndnozwtfvzpgwiwc ] ; for ( Graph.Node n : nodes ) { comps [ ( ( int ) ( n.flag ) ) ] . nodes . add ( n ) ; } return comps ; }

line_index: 106
bug_before_refactoring: { int start = 0 ; int end = ( haystack.length ) - 1 ; while ( start <= end ) { int midpoint = ( start + end ) / 2 ; int test = haystack [ midpoint ] ; if ( test == needle ) { return midpoint ; } else if ( test < needle ) { start = midpoint + 1 ; } else { end = midpoint - 1 ; } } return - 1 ; } <s> private static int findValue ( int needle , java.lang.Integer [] haystack ) { int start = 0 ; int end = ( haystack.length ) - 1 ; while ( start <= end ) { int midpoint = ( start + end ) / 2 ; int test = haystack [ midpoint ] ; if ( test == needle ) { return midpoint ; } else if ( test < needle ) { start = midpoint + 1 ; } else { end = midpoint - 1 ; } } return - 1 ; } <s> Fixed some issue with findValue.
bug_after_refactoring: { int mvtygwxbsacpaisocswh = 0 ; int hlocnexskairykltzzee = ( haystack.length ) - 1 ; while ( mvtygwxbsacpaisocswh <= hlocnexskairykltzzee ) { int vfgnqrjwrdjytyhcnuef = ( mvtygwxbsacpaisocswh + hlocnexskairykltzzee ) / 2 ; int qupiexjfiajhlgyrompw = haystack [ vfgnqrjwrdjytyhcnuef ] ; if ( qupiexjfiajhlgyrompw == needle ) { return vfgnqrjwrdjytyhcnuef ; } else if ( qupiexjfiajhlgyrompw < needle ) { mvtygwxbsacpaisocswh = vfgnqrjwrdjytyhcnuef + 1 ; } else { hlocnexskairykltzzee = vfgnqrjwrdjytyhcnuef - 1 ; } } return - 1 ; } <s> private static int findValue ( int needle , java.lang.Integer [] haystack ) { int mvtygwxbsacpaisocswh = 0 ; int hlocnexskairykltzzee = ( haystack.length ) - 1 ; while ( mvtygwxbsacpaisocswh <= hlocnexskairykltzzee ) { int vfgnqrjwrdjytyhcnuef = ( mvtygwxbsacpaisocswh + hlocnexskairykltzzee ) / 2 ; int qupiexjfiajhlgyrompw = haystack [ vfgnqrjwrdjytyhcnuef ] ; if ( qupiexjfiajhlgyrompw == needle ) { return vfgnqrjwrdjytyhcnuef ; } else if ( qupiexjfiajhlgyrompw < needle ) { mvtygwxbsacpaisocswh = vfgnqrjwrdjytyhcnuef + 1 ; } else { hlocnexskairykltzzee = vfgnqrjwrdjytyhcnuef - 1 ; } } return - 1 ; } <s> Fixed some issue with findValue.
fix_before_refactoring: { int start = 0 ; int end = haystack.length ; while ( start < end ) { int midpoint = ( start + end ) / 2 ; int test = haystack [ midpoint ] ; if ( test == needle ) { return midpoint ; } else if ( test < needle ) { start = midpoint + 1 ; } else { end = midpoint ; } } return - 1 ; }
fix_after_refactoring: { int mvtygwxbsacpaisocswh = 0 ; int hlocnexskairykltzzee = haystack.length ; while ( mvtygwxbsacpaisocswh < hlocnexskairykltzzee ) { int vfgnqrjwrdjytyhcnuef = ( mvtygwxbsacpaisocswh + hlocnexskairykltzzee ) / 2 ; int qupiexjfiajhlgyrompw = haystack [ vfgnqrjwrdjytyhcnuef ] ; if ( qupiexjfiajhlgyrompw == needle ) { return vfgnqrjwrdjytyhcnuef ; } else if ( qupiexjfiajhlgyrompw < needle ) { mvtygwxbsacpaisocswh = vfgnqrjwrdjytyhcnuef + 1 ; } else { hlocnexskairykltzzee = vfgnqrjwrdjytyhcnuef ; } } return - 1 ; }
× fix_prediction_before: { int start = 0 ; int end = ( haystack.length ) - 1 ; while ( start <= end ) { int midpoint = ( start + end ) / 2 ; int test = haystack [ midpoint ] ; if ( test == needle ) { return midpoint ; } else if ( test < needle ) { start = midpoint + 1 ; } else { end = midpoint - 1 ; } } return - 1 ; }
× fix_prediction_after: { int mvtygwxbsacpaisocswh = 0 ; int hlocnexskairykltzzee = ( haystack.length ) - 1 ; while ( mvtygwxbsacpaisocswh <= hlocnexskairykltzzee ) { int vfgnqrjwrdjytyhcnuef = ( mvtygwxbsacpaisocswh + hlocnexskairykltzzee ) / 2 ; int qupiexjfiajhlgyrompw = haystack [ vfgnqrjwrdjytyhcnuef ] ; if ( qupiexjfiajhlgyrompw < needle ) { mvtygwxbsacpaisocswh = vfgnqrjwrdjytyhcnuef + 1 ; } else { hlocnexskairykltzzbltzzee = vfgnqrwxbsacpaisocswh = vfgnqrjwrdjytyhcnuef + 1 ; } } else { hlocnexskairykltzzee = vf

line_index: 107
bug_before_refactoring: for ( int i = count - 1 ; i >= 0 ; i -- ) { totalSize += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( i / ( ( float ) ( count ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; } <s> protected java.lang.Long doInBackground ( com.androidexpansion.filedownloader.DownloadExtraAssets [] remoteLocalResources ) { int count = remoteLocalResources.length ; long totalSize = 0 ; for ( int i = count - 1 ; i >= 0 ; i -- ) { totalSize += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( i / ( ( float ) ( count ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; } return totalSize ; } <s> fixing plugin errors
bug_after_refactoring: for ( int i = jxolovuzpopmhtbsqrpn - 1 ; i >= 0 ; i -- ) { ackgvmnygsqwasxekikg += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( i / ( ( float ) ( jxolovuzpopmhtbsqrpn ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; } <s> protected java.lang.Long doInBackground ( com.androidexpansion.filedownloader.DownloadExtraAssets [] remoteLocalResources ) { int count = remoteLocalResources.length ; long totalSize = 0 ; for ( int i = jxolovuzpopmhtbsqrpn - 1 ; i >= 0 ; i -- ) { ackgvmnygsqwasxekikg += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( i / ( ( float ) ( jxolovuzpopmhtbsqrpn ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; } return totalSize ; } <s> fixing plugin errors
fix_before_refactoring: for ( int i = 0 ; i < count ; i ++ ) { totalSize += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( ( i + 1 ) / ( ( float ) ( count ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; }
fix_after_refactoring: for ( int i = 0 ; i < jxolovuzpopmhtbsqrpn ; i ++ ) { ackgvmnygsqwasxekikg += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( ( i + 1 ) / ( ( float ) ( jxolovuzpopmhtbsqrpn ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; }
× fix_prediction_before: for ( int i = count - 1 ; i >= 0 ; i -- ) { totalSize += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( i / ( ( float ) ( count ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; }
× fix_prediction_after: for ( int i = jxolovuzpopmhtbsqrpn - 1 ; i >= 0 ; i -- ) { ackgvmnygsqwasxekikg += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( i / ( ( float ) ( jxolovuzpopmhtbsqrpn ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; }

line_index: 108
bug_before_refactoring: isVertical = a == ( FlowLayout.VERTICAL ) <s> @ org.junit.Test public void testHGapVGapAccessors () { com.github.bordertech.wcomponents.layout.FlowLayout flow ; boolean isVertical ; for ( com.github.bordertech.wcomponents.layout.FlowLayout.Alignment a : FlowLayout.Alignment . values () ) { isVertical = a == ( FlowLayout.VERTICAL ) ; flow = new com.github.bordertech.wcomponents.layout.FlowLayout ( a , com.github.bordertech.wcomponents.layout.FlowLayout_Test.GAP ) ; org.junit.Assert . assertEquals ( "Incorrect vertical gap" , ( isVertical ? com.github.bordertech.wcomponents.layout.FlowLayout_Test.GAP : 0 ) , flow . getVgap () ) ; org.junit.Assert . assertEquals ( "incorrect horizontal gap" , ( isVertical ? 0 : com.github.bordertech.wcomponents.layout.FlowLayout_Test.GAP ) , flow . getHgap () ) ; } } <s> Codacy issues  Fixed various issues identified by Codacy.
bug_after_refactoring: eimbuhjwptfjapmubizf = a == ( FlowLayout.VERTICAL ) <s> @ org.junit.Test public void testHGapVGapAccessors () { com.github.bordertech.wcomponents.layout.FlowLayout flow ; boolean isVertical ; for ( com.github.bordertech.wcomponents.layout.FlowLayout.Alignment a : FlowLayout.Alignment . values () ) { eimbuhjwptfjapmubizf = a == ( FlowLayout.VERTICAL ) ; flow = new com.github.bordertech.wcomponents.layout.FlowLayout ( a , com.github.bordertech.wcomponents.layout.FlowLayout_Test.GAP ) ; org.junit.Assert . assertEquals ( "Incorrect vertical gap" , ( isVertical ? com.github.bordertech.wcomponents.layout.FlowLayout_Test.GAP : 0 ) , flow . getVgap () ) ; org.junit.Assert . assertEquals ( "incorrect horizontal gap" , ( isVertical ? 0 : com.github.bordertech.wcomponents.layout.FlowLayout_Test.GAP ) , flow . getHgap () ) ; } } <s> Codacy issues  Fixed various issues identified by Codacy.
fix_before_refactoring: isVertical = FlowLayout.VERTICAL . equals ( a )
fix_after_refactoring: eimbuhjwptfjapmubizf = FlowLayout.VERTICAL . equals ( a )
× fix_prediction_before: isVertical = a . equals ( FlowLayout.VERTICAL )
× fix_prediction_after: eimbuhjwptfjapmubizf = a . equals ( FlowLayout.VERTICAL )

line_index: 109
bug_before_refactoring: for ( java.lang.String port : portsS ) { portsS [ ( i ++ ) ] = validatePortExposure ( port ) ; } <s> private void addPorts ( java.lang.StringBuilder b ) { if ( ( ports . size () ) > 0 ) { java.lang.String [] portsS = new java.lang.String [ ports . size () ] ; int i = 0 ; for ( java.lang.String port : portsS ) { portsS [ ( i ++ ) ] = validatePortExposure ( port ) ; } DockerFileKeyword.EXPOSE . addTo ( b , portsS ) ; } } <s> Fixed silly bug in ports expose for Dockerfile  See also #610  Signed-off-by: Roland Huß <roland@ro14nd.de>
bug_after_refactoring: for ( java.lang.String port : portsS ) { portsS [ ( mhadapmzzzpxmehnwucv ++ ) ] = validatePortExposure ( port ) ; } <s> private void addPorts ( java.lang.StringBuilder b ) { if ( ( ports . size () ) > 0 ) { java.lang.String [] portsS = new java.lang.String [ ports . size () ] ; int i = 0 ; for ( java.lang.String port : portsS ) { portsS [ ( mhadapmzzzpxmehnwucv ++ ) ] = validatePortExposure ( port ) ; } DockerFileKeyword.EXPOSE . addTo ( b , portsS ) ; } } <s> Fixed silly bug in ports expose for Dockerfile  See also #610  Signed-off-by: Roland Huß <roland@ro14nd.de>
fix_before_refactoring: for ( java.lang.String port : ports ) { portsS [ ( i ++ ) ] = validatePortExposure ( port ) ; }
fix_after_refactoring: for ( java.lang.String port : ports ) { portsS [ ( mhadapmzzzpxmehnwucv ++ ) ] = validatePortExposure ( port ) ; }
× fix_prediction_before: for ( java.lang.String port : portsS ) { portsS [ i ] = validatePortExposure ( port ) ; }
× fix_prediction_after: for ( java.lang.String port : portsS ) { portsS [ i ] = validatePortExposure ( port ) ; i ++ ; }

line_index: 110
bug_before_refactoring: countOfAliveWolves >= ( countOfAliveCitizens - 1 ) <s> public boolean hasGameEnded () { int countOfAliveWolves = 0 ; int countOfAliveCitizens = 0 ; for ( com.raibaz.lupus.game.Player p : g . getPlayers () ) { if ( p . isAlive () ) { if ( ( p . getRole () ) == ( PlayerRole.WOLF ) ) { countOfAliveWolves ++ ; } else { countOfAliveCitizens ++ ; } } } return ( countOfAliveWolves == 0 ) || ( countOfAliveWolves >= ( countOfAliveCitizens - 1 ) ) ; } <s> Couple bugfixes and some UI improvements
bug_after_refactoring: xustwpxnzpqhmeeaxgzc >= ( xdavywnhmknxjdyblppc - 1 ) <s> public boolean hasGameEnded () { int countOfAliveWolves = 0 ; int countOfAliveCitizens = 0 ; for ( com.raibaz.lupus.game.Player p : g . getPlayers () ) { if ( p . isAlive () ) { if ( ( p . getRole () ) == ( PlayerRole.WOLF ) ) { countOfAliveWolves ++ ; } else { countOfAliveCitizens ++ ; } } } return ( countOfAliveWolves == 0 ) || ( xustwpxnzpqhmeeaxgzc >= ( xdavywnhmknxjdyblppc - 1 ) ) ; } <s> Couple bugfixes and some UI improvements
fix_before_refactoring: countOfAliveWolves >= countOfAliveCitizens
fix_after_refactoring: xustwpxnzpqhmeeaxgzc >= xdavywnhmknxjdyblppc
× fix_prediction_before: countOfAliveWolves >= ( countOfAliveCampions - 1 )
× fix_prediction_after: ( xdavywnhmknxjdyblppc ) >= ( xdavywnhmknxjdyblppc )

line_index: 111
bug_before_refactoring: { int sum = 0 ; char [] imei = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) sum = sum + ( imei [ i ] ) ; return 16384 + sum ; } <s> int convertSImeiToID ( java.lang.String text ) { int sum = 0 ; char [] imei = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) sum = sum + ( imei [ i ] ) ; return 16384 + sum ; } <s> Fix bug when the device does not have IMEI.
bug_after_refactoring: { int frghsdvpiyujnwlccwyk = 0 ; char [] gcqaeccmiywvwycggtgk = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) frghsdvpiyujnwlccwyk = frghsdvpiyujnwlccwyk + ( gcqaeccmiywvwycggtgk [ i ] ) ; return 16384 + frghsdvpiyujnwlccwyk ; } <s> int convertSImeiToID ( java.lang.String text ) { int frghsdvpiyujnwlccwyk = 0 ; char [] gcqaeccmiywvwycggtgk = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) frghsdvpiyujnwlccwyk = frghsdvpiyujnwlccwyk + ( gcqaeccmiywvwycggtgk [ i ] ) ; return 16384 + frghsdvpiyujnwlccwyk ; } <s> Fix bug when the device does not have IMEI.
fix_before_refactoring: { if ( text == null ) text = java.util.Calendar . getInstance () . getTime () . toString () ; int sum = 0 ; char [] imei = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) sum = sum + ( imei [ i ] ) ; return 16384 + sum ; }
fix_after_refactoring: { if ( text == null ) text = java.util.Calendar . getInstance () . getTime () . toString () ; int frghsdvpiyujnwlccwyk = 0 ; char [] gcqaeccmiywvwycggtgk = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) frghsdvpiyujnwlccwyk = frghsdvpiyujnwlccwyk + ( gcqaeccmiywvwycggtgk [ i ] ) ; return 16384 + frghsdvpiyujnwlccwyk ; }
× fix_prediction_before: { int sum = 0 ; char [] imei = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) sum = sum + ( imei [ i ] ) ; return 16384 + sum ; }
× fix_prediction_after: { int frghsdvpiyujnwlccwyk = 0 ; char [] gcqaeccmiywvwycggtgk = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) frghsdvpiyujnwlccwyk = frghsdvpiyujnwlccwyk + ( gcqaeccmiywvwycggtgk [ i ] ) ; return 16384 + frghsdvpiyujnwlccwyk ; }

line_index: 112
bug_before_refactoring: if ( ( topDistance < 0 ) && ( topDistance > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( topDistance > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; } <s> private void initHeaderViewToRefresh ( int deltaY ) { int topDistance = UpdateHeadViewMarginTop ( deltaY ) ; if ( ( topDistance < 0 ) && ( topDistance > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( topDistance > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; } } <s> fix bugs
bug_after_refactoring: if ( ( ovvqtdsnahsrugqnpvye < 0 ) && ( ovvqtdsnahsrugqnpvye > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( ovvqtdsnahsrugqnpvye > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; } <s> private void initHeaderViewToRefresh ( int deltaY ) { int topDistance = UpdateHeadViewMarginTop ( deltaY ) ; if ( ( ovvqtdsnahsrugqnpvye < 0 ) && ( ovvqtdsnahsrugqnpvye > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( ovvqtdsnahsrugqnpvye > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; } } <s> fix bugs
fix_before_refactoring: if ( ( topDistance < 0 ) && ( topDistance > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh ( deltaY ) ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( topDistance > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh ( deltaY ) ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; }
fix_after_refactoring: if ( ( ovvqtdsnahsrugqnpvye < 0 ) && ( ovvqtdsnahsrugqnpvye > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh ( deltaY ) ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( ovvqtdsnahsrugqnpvye > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh ( deltaY ) ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; }
× fix_prediction_before: if ( ( topDistance < 0 ) && ( topDistance > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( topDistance > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; }
× fix_prediction_after: if ( ( ovvqtdsnahsrugqnpvye < 0 ) && ( ovvqtdsnahsrugqnpvye > ( - ( headViewHeight ) ) ) ) { mBaseHeaderAdapter . pullViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.PULL_TO_REFRESH ; } else if ( ( ovvqtdsnahsrugqnpvye > 0 ) && ( ( mHeaderState ) != ( com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ) ) ) { mBaseHeaderAdapter . releaseViewToRefresh () ; mHeaderState = com.sak.ultilviewlib.UltimateRefreshView.RELEASE_TO_REFRESH ; }

line_index: 113
bug_before_refactoring: { double [] orgLimits = ( ( double [] ) ( limits . clone () ) ) ; double [] l = f1 . getLimits () ; assertTrue ( "Wrong limits" , l . equals ( limits ) ) ; l [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( ! ( l . equals ( orgLimits ) ) ) ) ; } <s> public void test_getLimits () { double [] orgLimits = ( ( double [] ) ( limits . clone () ) ) ; double [] l = f1 . getLimits () ; assertTrue ( "Wrong limits" , l . equals ( limits ) ) ; l [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( ! ( l . equals ( orgLimits ) ) ) ) ; } <s> Fix use of Object.equals() to compare arrays.  Use == for object identity  Arrays.equals() for value equality.  Bug: 28189207 Change-Id: I3dcae7f5714e5ab7216b255de376a9c3030f94b8
bug_after_refactoring: { double [] wwzplwomkbrgqjghkxwi = ( ( double [] ) ( limits . clone () ) ) ; double [] thpzausffyqoekzxkfky = f1 . getLimits () ; assertTrue ( "Wrong limits" , thpzausffyqoekzxkfky . equals ( limits ) ) ; thpzausffyqoekzxkfky [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( ! ( thpzausffyqoekzxkfky . equals ( wwzplwomkbrgqjghkxwi ) ) ) ) ; } <s> public void test_getLimits () { double [] wwzplwomkbrgqjghkxwi = ( ( double [] ) ( limits . clone () ) ) ; double [] thpzausffyqoekzxkfky = f1 . getLimits () ; assertTrue ( "Wrong limits" , thpzausffyqoekzxkfky . equals ( limits ) ) ; thpzausffyqoekzxkfky [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( ! ( thpzausffyqoekzxkfky . equals ( wwzplwomkbrgqjghkxwi ) ) ) ) ; } <s> Fix use of Object.equals() to compare arrays.  Use == for object identity  Arrays.equals() for value equality.  Bug: 28189207 Change-Id: I3dcae7f5714e5ab7216b255de376a9c3030f94b8
fix_before_refactoring: { double [] orgLimits = ( ( double [] ) ( limits . clone () ) ) ; double [] l = f1 . getLimits () ; assertTrue ( "Wrong limits" , ( l == ( limits ) ) ) ; l [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( l != orgLimits ) ) ; }
fix_after_refactoring: { double [] wwzplwomkbrgqjghkxwi = ( ( double [] ) ( limits . clone () ) ) ; double [] thpzausffyqoekzxkfky = f1 . getLimits () ; assertTrue ( "Wrong limits" , ( thpzausffyqoekzxkfky == ( limits ) ) ) ; thpzausffyqoekzxkfky [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( thpzausffyqoekzxkfky != wwzplwomkbrgqjghkxwi ) ) ; }
× fix_prediction_before: { double [] orgLimits = ( ( double [] ) ( limits . clone () ) ) ; double [] l = f1 . getLimits () ; assertTrue ( "Wrong limits" , l . equals ( limits ) ) ; l [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( ! ( l . equals ( orgLimits ) ) ) ) ; }
× fix_prediction_after: { double [] wwzplwomkbrgqjghkxwi = ( ( double [] ) ( limits . clone () ) ) ; double [] thpzausffyqoekzxkfky = f1 . getLimits () ; assertTrue ( "Wrong limits" , thpzausffyqoekzxkfky . equals ( limits ) ) ; thpzausffyqoekzxkfky [ 0 ] = 3.14527 ; assertTrue ( "Limits copied" , ( ! ( thpzausffyqoekzxkfky . equals ( wwzplwomkbrgqjghkxwi ) ) ) ) ; }

line_index: 114
bug_before_refactoring: { int currentIndex = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( currentIndex < index ) ) { ++ currentIndex ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; } <s> private pl.sdacaemy.data.structures.impl.ForwardList.Node getItemNode ( int index ) throws java.lang.IndexOutOfBoundsException { int currentIndex = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( currentIndex < index ) ) { ++ currentIndex ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; } <s> Fix bug in ForwardList::getItemNode
bug_after_refactoring: { int vklmoxofcjcmteadqwiq = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( vklmoxofcjcmteadqwiq < index ) ) { ++ vklmoxofcjcmteadqwiq ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; } <s> private pl.sdacaemy.data.structures.impl.ForwardList.Node getItemNode ( int index ) throws java.lang.IndexOutOfBoundsException { int vklmoxofcjcmteadqwiq = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( vklmoxofcjcmteadqwiq < index ) ) { ++ vklmoxofcjcmteadqwiq ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; } <s> Fix bug in ForwardList::getItemNode
fix_before_refactoring: { if ( index == 0 ) { if ( ( head ) == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return head ; } int currentIndex = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( currentIndex < index ) ) { ++ currentIndex ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; }
fix_after_refactoring: { if ( index == 0 ) { if ( ( head ) == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return head ; } int vklmoxofcjcmteadqwiq = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( vklmoxofcjcmteadqwiq < index ) ) { ++ vklmoxofcjcmteadqwiq ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; }
× fix_prediction_before: { pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( currentIndex < index ) ) { ++ currentIndex ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; }
× fix_prediction_after: { int vklmoxofcjcmteadqwiq = 0 ; while ( ( ( currentNode.next ) != null ) && ( vklmoxofcjcmteadqwiq < index ) ) { ++ vklmoxofcjcmteadqwiq ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; }

line_index: 115
bug_before_refactoring: { android.graphics.Bitmap banner = getBanner ( tvdbid ) ; show . setBanner ( banner ) ; java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( tvdbid ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } } <s> @ java.lang.Override protected com.rastating.droidbeard.entities.TVShow doInBackground ( java.lang.Long . . . longs ) { long tvdbid = longs [ 0 ] ; com.rastating.droidbeard.entities.TVShow show = getTVShow ( tvdbid ) ; if ( show != null ) { android.graphics.Bitmap banner = getBanner ( tvdbid ) ; show . setBanner ( banner ) ; java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( tvdbid ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } } return show ; } <s> Fixed untrusted SSL issues and address format issue
bug_after_refactoring: { android.graphics.Bitmap banner = getBanner ( emwfjkgzhdnjvinumyla ) ; show . setBanner ( banner ) ; java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( emwfjkgzhdnjvinumyla ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } } <s> @ java.lang.Override protected com.rastating.droidbeard.entities.TVShow doInBackground ( java.lang.Long . . . longs ) { long tvdbid = longs [ 0 ] ; com.rastating.droidbeard.entities.TVShow show = getTVShow ( tvdbid ) ; if ( show != null ) { android.graphics.Bitmap banner = getBanner ( emwfjkgzhdnjvinumyla ) ; show . setBanner ( banner ) ; java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( emwfjkgzhdnjvinumyla ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } } return show ; } <s> Fixed untrusted SSL issues and address format issue
fix_before_refactoring: { java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( tvdbid ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } }
fix_after_refactoring: { java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( emwfjkgzhdnjvinumyla ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } }
× fix_prediction_before: { show . setBanner ( banner ) ; java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( tvdbid ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } }
× fix_prediction_after: { show . setBanner ( banner ) ; java.util.List < com.rastating.droidbeard.entities.Season > seasons = getSeasons ( emwfjkgzhdnjvinumyla ) ; if ( seasons != null ) { java.util.Collections . sort ( seasons , new com.rastating.droidbeard.comparators.SeasonComparator () ) ; java.util.Collections . reverse ( seasons ) ; show . setSeasons ( seasons ) ; } }

line_index: 116
bug_before_refactoring: private static boolean isAllASCII ( java.lang.String input ) { boolean isASCII = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int c = input . charAt ( i ) ; if ( c > 127 ) { isASCII = false ; break; } } return isASCII ; } <s> private static boolean isAllASCII ( java.lang.String input ) { boolean isASCII = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int c = input . charAt ( i ) ; if ( c > 127 ) { isASCII = false ; break; } } return isASCII ; } <s> 17: AbstractUnit unable to parse prefix-less units (such as "V" or "s")   Task-Url: https://github.com/unitsofmeasurement/si-units/issues/issues/issue/17
bug_after_refactoring: private static boolean isAllASCII ( java.lang.String input ) { boolean fnewyfdknpwsltgwpkhb = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int xnworhcbmesfkmejjkrv = input . charAt ( i ) ; if ( xnworhcbmesfkmejjkrv > 127 ) { fnewyfdknpwsltgwpkhb = false ; break; } } return fnewyfdknpwsltgwpkhb ; } <s> private static boolean isAllASCII ( java.lang.String input ) { boolean fnewyfdknpwsltgwpkhb = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int xnworhcbmesfkmejjkrv = input . charAt ( i ) ; if ( xnworhcbmesfkmejjkrv > 127 ) { fnewyfdknpwsltgwpkhb = false ; break; } } return fnewyfdknpwsltgwpkhb ; } <s> 17: AbstractUnit unable to parse prefix-less units (such as "V" or "s")   Task-Url: https://github.com/unitsofmeasurement/si-units/issues/issues/issue/17
fix_before_refactoring: protected static boolean isAllASCII ( java.lang.String input ) { boolean isASCII = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int c = input . charAt ( i ) ; if ( c > 127 ) { isASCII = false ; break; } } return isASCII ; }
fix_after_refactoring: protected static boolean isAllASCII ( java.lang.String input ) { boolean fnewyfdknpwsltgwpkhb = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int xnworhcbmesfkmejjkrv = input . charAt ( i ) ; if ( xnworhcbmesfkmejjkrv > 127 ) { fnewyfdknpwsltgwpkhb = false ; break; } } return fnewyfdknpwsltgwpkhb ; }
× fix_prediction_before: public static boolean isAllASCII ( java.lang.String input ) { boolean isASCII = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int c = input . charAt ( i ) ; if ( c > 127 ) { return false ; } } return isASCII ; }
× fix_prediction_after: public static boolean isAllASCII ( java.lang.String input ) { boolean fnewyfdknpwsltgwpkhb = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int xnworhcbmesfkmejjkrv = input . charAt ( i ) ; if ( xnworhcbmesfkmejjkrv > 127 ) { fnewyfdknpwsltgwpkhb = false ; break; } } return fnewyfdknpwsltgwpkhb ; }

line_index: 117
bug_before_refactoring: ( matchFound = false ) <s> public boolean isState ( java.lang.String input ) { boolean matchFound = false ; int i = 0 ; while ( ( matchFound = false ) && ( i < ( states.length ) ) ) { if ( states [ i ] . equalsIgnoreCase ( input ) ) { matchFound = true ; } i ++ ; } return matchFound ; } <s> Added ArrayList functionality to transaction string checker output and overrode binarySearch() to work with Items. Fixed other misc. bugs.
bug_after_refactoring: ( kwkoaqmighohefplsbxu = false ) <s> public boolean isState ( java.lang.String input ) { boolean matchFound = false ; int i = 0 ; while ( ( kwkoaqmighohefplsbxu = false ) && ( i < ( states.length ) ) ) { if ( states [ i ] . equalsIgnoreCase ( input ) ) { matchFound = true ; } i ++ ; } return matchFound ; } <s> Added ArrayList functionality to transaction string checker output and overrode binarySearch() to work with Items. Fixed other misc. bugs.
fix_before_refactoring: ( matchFound == false )
fix_after_refactoring: ( kwkoaqmighohefplsbxu == false )
× fix_prediction_before: ( matchFound )
× fix_prediction_after: ( kwkoaqmighohefplsbxu = true )

line_index: 118
bug_before_refactoring: @ java.lang.Override public com.buginc.java.math.geometry.Vector cnt () { com.buginc.java.math.geometry.Vector center = new com.buginc.java.math.geometry.Vector ( 0 , 0 ) ; int i = outline . size () ; for ( com.buginc.java.math.geometry.Vector vector : outline ) { center = center . add ( vector . inc ( i ) ) ; -- i ; } return center . dec ( outline . size () ) ; } <s> @ java.lang.Override public com.buginc.java.math.geometry.Vector cnt () { com.buginc.java.math.geometry.Vector center = new com.buginc.java.math.geometry.Vector ( 0 , 0 ) ; int i = outline . size () ; for ( com.buginc.java.math.geometry.Vector vector : outline ) { center = center . add ( vector . inc ( i ) ) ; -- i ; } return center . dec ( outline . size () ) ; } <s> Fixed: bugs in rtt Added: some builders
bug_after_refactoring: @ java.lang.Override public com.buginc.java.math.geometry.Vector cnt () { com.buginc.java.math.geometry.Vector center = new com.buginc.java.math.geometry.Vector ( 0 , 0 ) ; int dgerqviygonlvoxzvedf = outline . size () ; for ( com.buginc.java.math.geometry.Vector vector : outline ) { center = center . add ( vector . inc ( dgerqviygonlvoxzvedf ) ) ; -- dgerqviygonlvoxzvedf ; } return center . dec ( outline . size () ) ; } <s> @ java.lang.Override public com.buginc.java.math.geometry.Vector cnt () { com.buginc.java.math.geometry.Vector center = new com.buginc.java.math.geometry.Vector ( 0 , 0 ) ; int dgerqviygonlvoxzvedf = outline . size () ; for ( com.buginc.java.math.geometry.Vector vector : outline ) { center = center . add ( vector . inc ( dgerqviygonlvoxzvedf ) ) ; -- dgerqviygonlvoxzvedf ; } return center . dec ( outline . size () ) ; } <s> Fixed: bugs in rtt Added: some builders
fix_before_refactoring: @ java.lang.Override public java.util.Vector cnt () { java.util.Vector center = new java.util.Vector ( 0 , 0 ) ; int i = outline . size () ; for ( java.util.Vector vector : outline ) { center = center . add ( vector . inc ( i ) ) ; -- i ; } return center . dec ( outline . size () ) ; }
fix_after_refactoring: @ java.lang.Override public java.util.Vector cnt () { java.util.Vector center = new java.util.Vector ( 0 , 0 ) ; int dgerqviygonlvoxzvedf = outline . size () ; for ( java.util.Vector vector : outline ) { center = center . add ( vector . inc ( dgerqviygonlvoxzvedf ) ) ; -- dgerqviygonlvoxzvedf ; } return center . dec ( outline . size () ) ; }
× fix_prediction_before: @ java.lang.Override public java.util.Vector cnt () { java.util.Vector center = new java.util.ArrayList () ; int i = outline . size () ; for ( java.math.geometry.Vector vector : outline ) { center = center . add ( vector . inc ( i ) ) ; -- i ; } return center . dec ( outline . size () ) ; }
× fix_prediction_after: @ java.lang.Override public java.util.Vector cnt () { java.util.Vector center = new java.util.ArrayList () ; int dgerqviygonlvoxzvedf = outline . size () ; for ( java.util.Vector vector : outline ) { center = center . add ( vector . inc ( dgerqviygonlvoxzvedf ) ) ; -- dgerqviygonlvoxzvedf ; } return center . dec ( outline . size () ) ; }

line_index: 119
bug_before_refactoring: { int touchProgress = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; touchProgress = ( touchProgress < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; touchProgress = ( touchProgress > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; if ( ! ( mDragging ) ) touchProgress = ( touchProgress == ( com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE ) ) ? 0 : touchProgress ; return touchProgress ; } <s> private int getProgressForAngle ( double angle ) { int touchProgress = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; touchProgress = ( touchProgress < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; touchProgress = ( touchProgress > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; if ( ! ( mDragging ) ) touchProgress = ( touchProgress == ( com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE ) ) ? 0 : touchProgress ; return touchProgress ; } <s> fix snapping to 0 bug
bug_after_refactoring: { int erqudgzdlexacgzowivx = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; if ( ! ( mDragging ) ) erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx == ( com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE ) ) ? 0 : erqudgzdlexacgzowivx ; return erqudgzdlexacgzowivx ; } <s> private int getProgressForAngle ( double angle ) { int erqudgzdlexacgzowivx = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; if ( ! ( mDragging ) ) erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx == ( com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE ) ) ? 0 : erqudgzdlexacgzowivx ; return erqudgzdlexacgzowivx ; } <s> fix snapping to 0 bug
fix_before_refactoring: { int touchProgress = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; if ( mDragging ) { touchProgress = ( touchProgress < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; touchProgress = ( touchProgress > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; return touchProgress ; } else return - 1 ; }
fix_after_refactoring: { int erqudgzdlexacgzowivx = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; if ( mDragging ) { erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; return erqudgzdlexacgzowivx ; } else return - 1 ; }
× fix_prediction_before: { int touchProgress = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; touchProgress = ( touchProgress < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; touchProgress = ( touchProgress > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : touchProgress ; touchProgress = ( touchProgress == ( com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE ) ) ? 0 : touchProgress ; return touchProgress ; }
× fix_prediction_after: { int erqudgzdlexacgzowivx = ( ( int ) ( java.lang.Math . round ( ( ( valuePerDegree () ) * angle ) ) ) ) ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx < 0 ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; erqudgzdlexacgzowivx = ( erqudgzdlexacgzowivx > ( mMax ) ) ? com.triggertrap.seekarc.SeekArc.INVALID_PROGRESS_VALUE : erqudgzdlexacgzowivx ; return erqudgzdlexacgzowivx ; }

line_index: 120
bug_before_refactoring: for ( int i = 0 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , menor ) ) > 1 ) { menor = razoes [ i ] ; indice = i ; } } } <s> private int menorDentreAs ( double [] razoes ) { double menor = razoes [ 0 ] ; int indice = 0 ; for ( int i = 0 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , menor ) ) > 1 ) { menor = razoes [ i ] ; indice = i ; } } } return indice ; } <s> Bugfixes no método simplex
bug_after_refactoring: for ( int i = 0 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , wplfoeoizmlgwtrgnstp ) ) > 1 ) { wplfoeoizmlgwtrgnstp = razoes [ i ] ; tkqijtrxpkvmzuukcdbl = i ; } } } <s> private int menorDentreAs ( double [] razoes ) { double menor = razoes [ 0 ] ; int indice = 0 ; for ( int i = 0 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , wplfoeoizmlgwtrgnstp ) ) > 1 ) { wplfoeoizmlgwtrgnstp = razoes [ i ] ; tkqijtrxpkvmzuukcdbl = i ; } } } return indice ; } <s> Bugfixes no método simplex
fix_before_refactoring: for ( int i = 1 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , menor ) ) < 0 ) { menor = razoes [ i ] ; indice = i ; } } }
fix_after_refactoring: for ( int i = 1 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , wplfoeoizmlgwtrgnstp ) ) < 0 ) { wplfoeoizmlgwtrgnstp = razoes [ i ] ; tkqijtrxpkvmzuukcdbl = i ; } } }
× fix_prediction_before: for ( int i = 0 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , menor ) ) > 1 ) { menor = razoes [ i ] ; indice = i ; } } }
× fix_prediction_after: for ( int i = 0 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , wplfoeoizmlgwtrgnstp ) ) > 1 ) { wplfoeoizmlgwtrgnstp = razoes [ i ] ; tkqijtrxpkvmzuukcdbl = i ; } } }

line_index: 121
bug_before_refactoring: colP = point - ( rowP * ( dim ) ) <s> private int getManhattan ( int row , int col , int point ) { if ( point == 0 ) return 0 ; int rowP = point / ( dim ) ; int colP = point - ( rowP * ( dim ) ) ; return ( java.lang.Math . abs ( ( row - rowP ) ) ) + ( java.lang.Math . abs ( ( col - colP ) ) ) ; } <s> 8puzzle bug fix
bug_after_refactoring: ozqhyyrangnbewlwsabo = point - ( kbcmwmmhecseoxyevxnq * ( dim ) ) <s> private int getManhattan ( int row , int col , int point ) { if ( point == 0 ) return 0 ; int rowP = point / ( dim ) ; int ozqhyyrangnbewlwsabo = point - ( kbcmwmmhecseoxyevxnq * ( dim ) ) ; return ( java.lang.Math . abs ( ( row - rowP ) ) ) + ( java.lang.Math . abs ( ( col - colP ) ) ) ; } <s> 8puzzle bug fix
fix_before_refactoring: colP = ( point - ( rowP * ( dim ) ) ) - 1
fix_after_refactoring: ozqhyyrangnbewlwsabo = ( point - ( kbcmwmmhecseoxyevxnq * ( dim ) ) ) - 1
× fix_prediction_before: colP = ( point - ( rowP * ( dim ) ) ) / ( dim )
× fix_prediction_after: ozqhyyrangnbewlwsabo = point - ( kbcmwmmhecseoxyevxnq * ( dim ) )

line_index: 122
bug_before_refactoring: { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; if ( ( scanStartRow ) != null ) { if ( ! ( consumingEntries . isEmpty () ) ) { byte [] floorKey = consumingEntries . floorKey ( scanStartRow ) ; if ( floorKey != null ) { updateStartRow ( floorKey ) ; } } else { updateStartRow ( scanStartRow ) ; } } return result ; } <s> @ java.lang.Override public co.cask.cdap.data2.queue.DequeueResult < byte [] > dequeue ( int maxBatchSize ) throws java.io.IOException { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; if ( ( scanStartRow ) != null ) { if ( ! ( consumingEntries . isEmpty () ) ) { byte [] floorKey = consumingEntries . floorKey ( scanStartRow ) ; if ( floorKey != null ) { updateStartRow ( floorKey ) ; } } else { updateStartRow ( scanStartRow ) ; } } return result ; } <s> (CDAP-1893) Fix a bug introduced when converting HBase queue state store to dataset
bug_after_refactoring: { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; if ( ( scanStartRow ) != null ) { if ( ! ( consumingEntries . isEmpty () ) ) { byte [] vszsekxlasmmdudsnugp = consumingEntries . vszsekxlasmmdudsnugp ( scanStartRow ) ; if ( vszsekxlasmmdudsnugp != null ) { updateStartRow ( vszsekxlasmmdudsnugp ) ; } } else { updateStartRow ( scanStartRow ) ; } } return result ; } <s> @ java.lang.Override public co.cask.cdap.data2.queue.DequeueResult < byte [] > dequeue ( int maxBatchSize ) throws java.io.IOException { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; if ( ( scanStartRow ) != null ) { if ( ! ( consumingEntries . isEmpty () ) ) { byte [] vszsekxlasmmdudsnugp = consumingEntries . vszsekxlasmmdudsnugp ( scanStartRow ) ; if ( vszsekxlasmmdudsnugp != null ) { updateStartRow ( vszsekxlasmmdudsnugp ) ; } } else { updateStartRow ( scanStartRow ) ; } } return result ; } <s> (CDAP-1893) Fix a bug introduced when converting HBase queue state store to dataset
fix_before_refactoring: { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; byte [] floorKey = consumingEntries . floorKey ( scanStartRow ) ; updateStartRow ( ( floorKey == null ? scanStartRow : floorKey ) ) ; return result ; }
fix_after_refactoring: { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; byte [] vszsekxlasmmdudsnugp = consumingEntries . vszsekxlasmmdudsnugp ( scanStartRow ) ; updateStartRow ( ( vszsekxlasmmdudsnugp == null ? scanStartRow : vszsekxlasmmdudsnugp ) ) ; return result ; }
× fix_prediction_before: { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; if ( ( scanStartRow ) != null ) { if ( ! ( consumingEntries . isEmpty () ) ) { byte [] floorKey = consumingEntries . floorKey ( scanStartRow ) ; if ( floorKey != null ) { updateStartRow ( floorKey ) ; } } else { updateStartRow ( scanStartRow ) ; } } return result ; }
× fix_prediction_after: { co.cask.cdap.data2.queue.DequeueResult < byte [] > result = performDequeue ( maxBatchSize ) ; if ( ( scanStartRow ) != null ) { if ( ! ( consumingEntries . isEmpty () ) ) { byte [] vszsekxlasmmdudsnugp = consumingEntries . vszsekxlasmmdudsnugp ( scanStartRow ) ; if ( vszsekxlasmmdudsnugp != null ) { updateStartRow ( vszsekxlasmmdudsnugp ) ; } } else { updateStartRow ( scanStartRow ) ; } } return result ; }

line_index: 123
bug_before_refactoring: currentY = maxY - 1 <s> public void computeSegments () { int maxX = ( graph . dimX () ) - 1 ; int maxY = ( graph . dimY () ) - 1 ; for ( int currentY = maxY - 1 ; currentY >= 0 ; currentY -- ) { currentWindow = sbr.Range . TwoDimensionalRange ( 0 , maxX , currentY , maxY ) ; computeSegmentsInRange () ; for ( sbr.Segment seg : segments ) assert ! ( seg . getLinks () . isEmpty () ) ; } } <s> Fix 1x1 Noc unit test  A 1x1 NoC has the same start/terminal vertice. Also  the error when catching left/right vertices was fixed. Commit:Fix TaskNumber:#48
bug_after_refactoring: currentY = lqaogcpijbvsszccxesd - 1 <s> public void computeSegments () { int maxX = ( graph . dimX () ) - 1 ; int maxY = ( graph . dimY () ) - 1 ; for ( int currentY = lqaogcpijbvsszccxesd - 1 ; currentY >= 0 ; currentY -- ) { currentWindow = sbr.Range . TwoDimensionalRange ( 0 , maxX , currentY , maxY ) ; computeSegmentsInRange () ; for ( sbr.Segment seg : segments ) assert ! ( seg . getLinks () . isEmpty () ) ; } } <s> Fix 1x1 Noc unit test  A 1x1 NoC has the same start/terminal vertice. Also  the error when catching left/right vertices was fixed. Commit:Fix TaskNumber:#48
fix_before_refactoring: currentY = maxY
fix_after_refactoring: currentY = lqaogcpijbvsszccxesd
× fix_prediction_before: currentY
× fix_prediction_after: currentY = lqaogcpijbvsszccxesd - 1

line_index: 124
bug_before_refactoring: private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p , boolean orientX ) { if ( node == null ) return false ; int cmp = KdTree . compare ( p , node.p , orientX ) ; if ( cmp < 0 ) return contains ( node.lb , p , ( ! orientX ) ) ; else if ( cmp > 0 ) return contains ( node.rt , p , ( ! orientX ) ) ; else return node.p . equals ( p ) ; } <s> private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p , boolean orientX ) { if ( node == null ) return false ; int cmp = KdTree . compare ( p , node.p , orientX ) ; if ( cmp < 0 ) return contains ( node.lb , p , ( ! orientX ) ) ; else if ( cmp > 0 ) return contains ( node.rt , p , ( ! orientX ) ) ; else return node.p . equals ( p ) ; } <s> Bug fixes
bug_after_refactoring: private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p , boolean orientX ) { if ( node == null ) return false ; int mhtydumsohzwvuymmpks = KdTree . compare ( p , node.p , orientX ) ; if ( mhtydumsohzwvuymmpks < 0 ) return contains ( node.lb , p , ( ! orientX ) ) ; else if ( mhtydumsohzwvuymmpks > 0 ) return contains ( node.rt , p , ( ! orientX ) ) ; else return node.p . equals ( p ) ; } <s> private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p , boolean orientX ) { if ( node == null ) return false ; int mhtydumsohzwvuymmpks = KdTree . compare ( p , node.p , orientX ) ; if ( mhtydumsohzwvuymmpks < 0 ) return contains ( node.lb , p , ( ! orientX ) ) ; else if ( mhtydumsohzwvuymmpks > 0 ) return contains ( node.rt , p , ( ! orientX ) ) ; else return node.p . equals ( p ) ; } <s> Bug fixes
fix_before_refactoring: private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p ) { if ( node == null ) return false ; int cmp = KdTree . compare ( p , node ) ; if ( cmp < 0 ) return contains ( node.lb , p ) ; else if ( cmp > 0 ) return contains ( node.rt , p ) ; else return node.p . equals ( p ) ; }
fix_after_refactoring: private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p ) { if ( node == null ) return false ; int mhtydumsohzwvuymmpks = KdTree . compare ( p , node ) ; if ( mhtydumsohzwvuymmpks < 0 ) return contains ( node.lb , p ) ; else if ( mhtydumsohzwvuymmpks > 0 ) return contains ( node.rt , p ) ; else return node.p . equals ( p ) ; }
× fix_prediction_before: private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p ) { if ( node == null ) return false ; int cmp = KdTree . compare ( p , node.p ) ; if ( cmp < 0 ) return contains ( node.lb , p ) ; else if ( cmp > 0 ) return contains ( node.rt , p , ( ! orientX ) ) ; else return node.p . equals ( p ) ; }
× fix_prediction_after: private boolean contains ( KdTree.Node node , edu.princeton.cs.algs4.Point2D p ) { if ( node == null ) return false ; int mhtydumsohzwvuymmpks = KdTree . compare ( p , node.p , orientX ) ; if ( mhtydumsohzwvuymmpks < 0 ) return contains ( node.lb , p ) ; else if ( mhtydumsohzwvuymmpks > 0 ) return contains ( node.rt , p ) ; else return node.p . equals ( p ) ; }

line_index: 127
bug_before_refactoring: { int status = com.liferay.portal.kernel.util.ParamUtil . getInteger ( actionRequest , "status" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "status" , java.lang.String . valueOf ( status ) ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; } <s> @ java.lang.Override public void processAction ( javax.portlet.PortletConfig portletConfig , javax.portlet.ActionRequest actionRequest , javax.portlet.ActionResponse actionResponse ) throws java.lang.Exception { int status = com.liferay.portal.kernel.util.ParamUtil . getInteger ( actionRequest , "status" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "status" , java.lang.String . valueOf ( status ) ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; } <s> Merge remote-tracking branch 'origin/rc-1.4-alpha-issue-fix' into rc-1.4-alpha-issue-fix
bug_after_refactoring: { int ihregjvcgmbaspxacopu = com.liferay.portal.kernel.util.ParamUtil . getInteger ( actionRequest , "ihregjvcgmbaspxacopu" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "ihregjvcgmbaspxacopu" , java.lang.String . valueOf ( ihregjvcgmbaspxacopu ) ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; } <s> @ java.lang.Override public void processAction ( javax.portlet.PortletConfig portletConfig , javax.portlet.ActionRequest actionRequest , javax.portlet.ActionResponse actionResponse ) throws java.lang.Exception { int ihregjvcgmbaspxacopu = com.liferay.portal.kernel.util.ParamUtil . getInteger ( actionRequest , "ihregjvcgmbaspxacopu" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "ihregjvcgmbaspxacopu" , java.lang.String . valueOf ( ihregjvcgmbaspxacopu ) ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; } <s> Merge remote-tracking branch 'origin/rc-1.4-alpha-issue-fix' into rc-1.4-alpha-issue-fix
fix_before_refactoring: { java.lang.String status = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "status" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "status" , status ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; }
fix_after_refactoring: { java.lang.String ihregjvcgmbaspxacopu = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "ihregjvcgmbaspxacopu" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "ihregjvcgmbaspxacopu" , ihregjvcgmbaspxacopu ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; }
× fix_prediction_before: { int status = com.liferay.portal.kernel.util.ParamUtil . getInteger ( actionRequest , "status" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "status" , java.lang.String . valueOf ( status ) ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; }
× fix_prediction_after: { int ihregjvcgmbaspxacopu = com.liferay.portal.kernel.util.ParamUtil . getInteger ( actionRequest , "ihregjvcgmbaspxacopu" ) ; java.lang.String portletResource = com.liferay.portal.kernel.util.ParamUtil . getString ( actionRequest , "portletResource" ) ; javax.portlet.PortletPreferences preferences = com.liferay.portlet.PortletPreferencesFactoryUtil . getPortletSetup ( actionRequest , portletResource ) ; preferences . setValue ( "ihregjvcgmbaspxacopu" , java.lang.String . valueOf ( ihregjvcgmbaspxacopu ) ) ; preferences . store () ; com.liferay.portal.kernel.servlet.SessionMessages . add ( actionRequest , "potlet-config-saved" ) ; }

line_index: 128
bug_before_refactoring: if ( resource != null ) { exists = resource . getResourceSet () . getURIConverter () . exists ( resource . getURI () , null ) ; } <s> @ java.lang.Override public boolean exists () { boolean exists = super . exists () ; if ( ! exists ) { org.eclipse.emf.ecore.EObject input = getInput ( false ) ; if ( input != null ) { org.eclipse.emf.ecore.resource.Resource resource = input . eResource () ; if ( resource != null ) { exists = resource . getResourceSet () . getURIConverter () . exists ( resource . getURI () , null ) ; } } } return exists ; } <s> [471456] Fix NPE on SessionEditorInput.exists()  - Fix potential NPE on SessionEditorInput.exists() when Resource has not ResourceSet. This can occurs for example with metamodel resource.  Bug: 471456 Change-Id: I6242312937b9fffd1f6190ed1a283b09d2e3ec46 Signed-off-by: Esteban Dugueperoux <esteban.dugueperoux@obeo.fr>
bug_after_refactoring: if ( resource != null ) { iyetfzarjylxmhhpnlov = resource . getResourceSet () . getURIConverter () . iyetfzarjylxmhhpnlov ( resource . getURI () , null ) ; } <s> @ java.lang.Override public boolean exists () { boolean exists = super . exists () ; if ( ! exists ) { org.eclipse.emf.ecore.EObject input = getInput ( false ) ; if ( input != null ) { org.eclipse.emf.ecore.resource.Resource resource = input . eResource () ; if ( resource != null ) { iyetfzarjylxmhhpnlov = resource . getResourceSet () . getURIConverter () . iyetfzarjylxmhhpnlov ( resource . getURI () , null ) ; } } } return exists ; } <s> [471456] Fix NPE on SessionEditorInput.exists()  - Fix potential NPE on SessionEditorInput.exists() when Resource has not ResourceSet. This can occurs for example with metamodel resource.  Bug: 471456 Change-Id: I6242312937b9fffd1f6190ed1a283b09d2e3ec46 Signed-off-by: Esteban Dugueperoux <esteban.dugueperoux@obeo.fr>
fix_before_refactoring: if ( ( resource != null ) && ( ( resource . getResourceSet () ) != null ) ) { exists = resource . getResourceSet () . getURIConverter () . exists ( resource . getURI () , null ) ; }
fix_after_refactoring: if ( ( resource != null ) && ( ( resource . getResourceSet () ) != null ) ) { iyetfzarjylxmhhpnlov = resource . getResourceSet () . getURIConverter () . iyetfzarjylxmhhpnlov ( resource . getURI () , null ) ; }
× fix_prediction_before: if ( ( resource != null ) && exists ) { exists = resource . getResourceSet () . getURIConverter () . exists ( resource . getURI () , null ) ; }
× fix_prediction_after: if ( ( resource != null ) && ( ! ( resource . getResourceSet () . isEmpty () ) ) ) { iyetfzarjylxmhhpnlov = resource . getResourceSet () . getURIConverter () . iyetfzarjylxmhhpnlov ( resource . getURI () , null ) ; }

line_index: 129
bug_before_refactoring: public float getDesiredZoomLevel ( int level ) { float zoom = 13.0F ; switch ( level ) { case 1 : zoom = 13.0F ; break; case 2 : zoom = 13.5F ; break; case 3 : zoom = 14.0F ; break; case 4 : zoom = 14.5F ; break; case 5 : zoom = 15.0F ; break; } return zoom ; } <s> public float getDesiredZoomLevel ( int level ) { float zoom = 13.0F ; switch ( level ) { case 1 : zoom = 13.0F ; break; case 2 : zoom = 13.5F ; break; case 3 : zoom = 14.0F ; break; case 4 : zoom = 14.5F ; break; case 5 : zoom = 15.0F ; break; } return zoom ; } <s> EWOK-87 #code-review BUGFIX #comment  zoomFitAll custom zoom value is converted to the closest available in our possible zoom levels
bug_after_refactoring: public float getDesiredZoomLevel ( int level ) { float qxbpeajbfiwzbwwknnpb = 13.0F ; switch ( level ) { case 1 : qxbpeajbfiwzbwwknnpb = 13.0F ; break; case 2 : qxbpeajbfiwzbwwknnpb = 13.5F ; break; case 3 : qxbpeajbfiwzbwwknnpb = 14.0F ; break; case 4 : qxbpeajbfiwzbwwknnpb = 14.5F ; break; case 5 : qxbpeajbfiwzbwwknnpb = 15.0F ; break; } return qxbpeajbfiwzbwwknnpb ; } <s> public float getDesiredZoomLevel ( int level ) { float qxbpeajbfiwzbwwknnpb = 13.0F ; switch ( level ) { case 1 : qxbpeajbfiwzbwwknnpb = 13.0F ; break; case 2 : qxbpeajbfiwzbwwknnpb = 13.5F ; break; case 3 : qxbpeajbfiwzbwwknnpb = 14.0F ; break; case 4 : qxbpeajbfiwzbwwknnpb = 14.5F ; break; case 5 : qxbpeajbfiwzbwwknnpb = 15.0F ; break; } return qxbpeajbfiwzbwwknnpb ; } <s> EWOK-87 #code-review BUGFIX #comment  zoomFitAll custom zoom value is converted to the closest available in our possible zoom levels
fix_before_refactoring: private float getDesiredZoomLevel ( int level ) { float zoom = 13.0F ; switch ( level ) { case 1 : zoom = 13.0F ; break; case 2 : zoom = 13.5F ; break; case 3 : zoom = 14.0F ; break; case 4 : zoom = 14.5F ; break; case 5 : zoom = 15.0F ; break; } return zoom ; }
fix_after_refactoring: private float getDesiredZoomLevel ( int level ) { float qxbpeajbfiwzbwwknnpb = 13.0F ; switch ( level ) { case 1 : qxbpeajbfiwzbwwknnpb = 13.0F ; break; case 2 : qxbpeajbfiwzbwwknnpb = 13.5F ; break; case 3 : qxbpeajbfiwzbwwknnpb = 14.0F ; break; case 4 : qxbpeajbfiwzbwwknnpb = 14.5F ; break; case 5 : qxbpeajbfiwzbwwknnpb = 15.0F ; break; } return qxbpeajbfiwzbwwknnpb ; }
× fix_prediction_before: public float getDesiredZoomLevel ( int level ) { float zoom = 13.0F ; switch ( level ) { case 1 : zoom = 13.0F ; break; case 2 : zoom = 13.5F ; break; case 3 : zoom = 14.0F ; break; case 4 : zoom = 14.5F ; break; case 5 : zoom = 15.0F ; break; } return zoom ; }
× fix_prediction_after: public float getDesiredZoomLevel ( int level ) { float qxbpeajbfiwzbwwknnpb = 13.0F ; switch ( level ) { case 1 : qxbpeajbfiwzbwwknnpb = 13.0F ; break; case 2 : qxbpeajbfiwzbwwknnpb = 13.5F ; break; case 3 : qxbpeajbfiwzbwwknnpb = 14.0F ; break; case 4 : qxbpeajbfiwzbwwknnpb = 14.5F ; break; case 5 : qxbpeajbfiwzbwwknnpb = 15.0F ; break; } return qxbpeajbfiwzbwwknnpb ; }

line_index: 130
bug_before_refactoring: { int i = - 1 ; while ( ( ++ i ) < ( str . length () ) ) { char c = str . charAt ( i ) ; if ( ( c < '0' ) || ( c > '9' ) ) { return false ; } } return true ; } <s> public static boolean isInteger ( java.lang.String str ) { int i = - 1 ; while ( ( ++ i ) < ( str . length () ) ) { char c = str . charAt ( i ) ; if ( ( c < '0' ) || ( c > '9' ) ) { return false ; } } return true ; } <s> Fixed a bug in ChatCommandRunnable
bug_after_refactoring: { int xgswtkjcjnplifjjuzct = - 1 ; while ( ( ++ xgswtkjcjnplifjjuzct ) < ( str . length () ) ) { char kzrnfdqcdmxwoslauvzi = str . charAt ( xgswtkjcjnplifjjuzct ) ; if ( ( kzrnfdqcdmxwoslauvzi < '0' ) || ( kzrnfdqcdmxwoslauvzi > '9' ) ) { return false ; } } return true ; } <s> public static boolean isInteger ( java.lang.String str ) { int xgswtkjcjnplifjjuzct = - 1 ; while ( ( ++ xgswtkjcjnplifjjuzct ) < ( str . length () ) ) { char kzrnfdqcdmxwoslauvzi = str . charAt ( xgswtkjcjnplifjjuzct ) ; if ( ( kzrnfdqcdmxwoslauvzi < '0' ) || ( kzrnfdqcdmxwoslauvzi > '9' ) ) { return false ; } } return true ; } <s> Fixed a bug in ChatCommandRunnable
fix_before_refactoring: { if ( ( str . length () ) == 0 ) { return false ; } int i = - 1 ; while ( ( ++ i ) < ( str . length () ) ) { char c = str . charAt ( i ) ; if ( ( c < '0' ) || ( c > '9' ) ) { return false ; } } return true ; }
fix_after_refactoring: { if ( ( str . length () ) == 0 ) { return false ; } int xgswtkjcjnplifjjuzct = - 1 ; while ( ( ++ xgswtkjcjnplifjjuzct ) < ( str . length () ) ) { char kzrnfdqcdmxwoslauvzi = str . charAt ( xgswtkjcjnplifjjuzct ) ; if ( ( kzrnfdqcdmxwoslauvzi < '0' ) || ( kzrnfdqcdmxwoslauvzi > '9' ) ) { return false ; } } return true ; }
× fix_prediction_before: { int i = - 1 ; while ( ( ++ i ) < ( str . length () ) ) { char c = str . charAt ( i ) ; if ( ( c < '0' ) || ( c > '9' ) ) { return false ; } } return true ; }
× fix_prediction_after: { int xgswtkjcjnplifjjuzct = - 1 ; while ( ( ++ xgswtkjcjnplifjjuzct ) < ( str . length () ) ) { char kzrnfdqcdmxwoslauvzi = str . charAt ( xgswtkjcjnplifjjuzct ) ; if ( ( kzrnfdqcdmxwoslauvzi < '0' ) || ( kzrnfdqcdmxwoslauvzi > '9' ) ) { return false ; } } return true ; }

line_index: 131
bug_before_refactoring: { int scoreFirst = arg0 . getScore () ; int scoreSecond = arg1 . getScore () ; if ( scoreFirst == scoreSecond ) return 0 ; else if ( scoreFirst > scoreSecond ) return 1 ; return - 1 ; } <s> @ java.lang.Override public int compare ( ge.edu.freeuni.sdp.xo.achiev.FakeDBObject arg0 , ge.edu.freeuni.sdp.xo.achiev.FakeDBObject arg1 ) { int scoreFirst = arg0 . getScore () ; int scoreSecond = arg1 . getScore () ; if ( scoreFirst == scoreSecond ) return 0 ; else if ( scoreFirst > scoreSecond ) return 1 ; return - 1 ; } <s> bug fix
bug_after_refactoring: { int fzeajrmftnwxdovvszhj = arg0 . getScore () ; int nzkbnuareshzkmehapnu = arg1 . getScore () ; if ( fzeajrmftnwxdovvszhj == nzkbnuareshzkmehapnu ) return 0 ; else if ( fzeajrmftnwxdovvszhj > nzkbnuareshzkmehapnu ) return 1 ; return - 1 ; } <s> @ java.lang.Override public int compare ( ge.edu.freeuni.sdp.xo.achiev.FakeDBObject arg0 , ge.edu.freeuni.sdp.xo.achiev.FakeDBObject arg1 ) { int fzeajrmftnwxdovvszhj = arg0 . getScore () ; int nzkbnuareshzkmehapnu = arg1 . getScore () ; if ( fzeajrmftnwxdovvszhj == nzkbnuareshzkmehapnu ) return 0 ; else if ( fzeajrmftnwxdovvszhj > nzkbnuareshzkmehapnu ) return 1 ; return - 1 ; } <s> bug fix
fix_before_refactoring: { int scoreFirst = arg0 . getScore () ; int scoreSecond = arg1 . getScore () ; if ( scoreFirst == scoreSecond ) return 0 ; else if ( scoreFirst > scoreSecond ) return - 1 ; return 1 ; }
fix_after_refactoring: { int fzeajrmftnwxdovvszhj = arg0 . getScore () ; int nzkbnuareshzkmehapnu = arg1 . getScore () ; if ( fzeajrmftnwxdovvszhj == nzkbnuareshzkmehapnu ) return 0 ; else if ( fzeajrmftnwxdovvszhj > nzkbnuareshzkmehapnu ) return - 1 ; return 1 ; }
× fix_prediction_before: { int scoreFirst = arg0 . getScore () ; int scoreSecond = arg1 . getScore () ; if ( scoreFirst == scoreSecond ) return 0 ; else if ( scoreFirst > scoreSecond ) return - 1 ; return - 1 ; }
× fix_prediction_after: { int fzeajrmftnwxdovvszhj = arg0 . getScore () ; int nzkbnuareshzkmehapnu = arg1 . getScore () ; if ( fzeajrmftnwxdxdovvszhj > nzkbnuareshzkmehapnu ) return 0 ; else if ( fzeajrmftnwxdovvszhj > nzkbnuareshzkmehapnu ) return - 1 ; return - 1 ; }

line_index: 132
bug_before_refactoring: { long difference = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; int diffDays = ( ( int ) ( difference ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; return diffDays ; } <s> public static int differenceInDays ( java.util.Date firstDate , java.util.Date secondDate ) { long difference = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; int diffDays = ( ( int ) ( difference ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; return diffDays ; } <s> fixed date search bug
bug_after_refactoring: { long wzmbxgkejvppvbimmvte = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; int dnunyefgewmwvjdblmtr = ( ( int ) ( wzmbxgkejvppvbimmvte ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; return dnunyefgewmwvjdblmtr ; } <s> public static int differenceInDays ( java.util.Date firstDate , java.util.Date secondDate ) { long wzmbxgkejvppvbimmvte = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; int dnunyefgewmwvjdblmtr = ( ( int ) ( wzmbxgkejvppvbimmvte ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; return dnunyefgewmwvjdblmtr ; } <s> fixed date search bug
fix_before_refactoring: { long difference = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; return ( ( int ) ( difference ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; }
fix_after_refactoring: { long wzmbxgkejvppvbimmvte = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; return ( ( int ) ( wzmbxgkejvppvbimmvte ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; }
× fix_prediction_before: { long difference = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; int diffDays = ( ( int ) ( difference ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; return diffDays ; }
× fix_prediction_after: { long wzmbxgkejvppvbimmvte = ( firstDate . getTime () ) - ( secondDate . getTime () ) ; int dnunyefgewmwvjdblmtr = ( ( int ) ( wzmbxgkejvppvbimmvte ) ) / ( ( ( 24 * 60 ) * 60 ) * 1000 ) ; return dnunyefgewmwvjdblmtr ; }

line_index: 133
bug_before_refactoring: @ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean isEqual = false ; try { isEqual = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return isEqual ; } <s> @ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean isEqual = false ; try { isEqual = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return isEqual ; } <s> [LDSS-4] fix more sonar issues
bug_after_refactoring: @ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean dzbqysdfarypihddyevw = false ; try { dzbqysdfarypihddyevw = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return dzbqysdfarypihddyevw ; } <s> @ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean dzbqysdfarypihddyevw = false ; try { dzbqysdfarypihddyevw = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return dzbqysdfarypihddyevw ; } <s> [LDSS-4] fix more sonar issues
fix_before_refactoring: @ java.lang.Override public boolean equals ( java.lang.Object obj ) throws java.lang.NullPointerException { boolean isEqual = false ; if ( obj != null ) { isEqual = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } return isEqual ; }
fix_after_refactoring: @ java.lang.Override public boolean equals ( java.lang.Object obj ) throws java.lang.NullPointerException { boolean dzbqysdfarypihddyevw = false ; if ( obj != null ) { dzbqysdfarypihddyevw = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } return dzbqysdfarypihddyevw ; }
× fix_prediction_before: @ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean isEqual = false ; if ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) { return java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ; } return isEqual ; }
× fix_prediction_after: @ java.lang.Override public boolean equals ( java.lang.Object obj ) { boolean dzbqysdfarypihddyevw = false ; if ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) { dzbqysdfarypihddyevw = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } return dzbqysdfarypihddyevw ; }

line_index: 134
bug_before_refactoring: getSupportFragmentManager () . beginTransaction () . replace ( id , fragment ) . addToBackStack ( "Book Detail" ) <s> @ java.lang.Override public void onItemSelected ( java.lang.String ean ) { android.os.Bundle args = new android.os.Bundle () ; args . putString ( BookDetail.EAN_KEY , ean ) ; it.jaschke.alexandria.BookDetail fragment = new it.jaschke.alexandria.BookDetail () ; fragment . setArguments ( args ) ; int id = R.id.container ; if ( ( findViewById ( R.id.right_container ) ) != null ) { id = R.id.right_container ; } getSupportFragmentManager () . beginTransaction () . replace ( id , fragment ) . addToBackStack ( "Book Detail" ) . commit () ; } <s> Errors in tablet landscape fixed
bug_after_refactoring: getSupportFragmentManager () . beginTransaction () . replace ( yusjwxognxlkvoxkvvch , fragment ) . addToBackStack ( "Book Detail" ) <s> @ java.lang.Override public void onItemSelected ( java.lang.String ean ) { android.os.Bundle args = new android.os.Bundle () ; args . putString ( BookDetail.EAN_KEY , ean ) ; it.jaschke.alexandria.BookDetail fragment = new it.jaschke.alexandria.BookDetail () ; fragment . setArguments ( args ) ; int id = R.id.container ; if ( ( findViewById ( R.id.right_container ) ) != null ) { id = R.id.right_container ; } getSupportFragmentManager () . beginTransaction () . replace ( yusjwxognxlkvoxkvvch , fragment ) . addToBackStack ( "Book Detail" ) . commit () ; } <s> Errors in tablet landscape fixed
fix_before_refactoring: getSupportFragmentManager () . beginTransaction () . replace ( id , fragment ) . addToBackStack ( null )
fix_after_refactoring: getSupportFragmentManager () . beginTransaction () . replace ( yusjwxognxlkvoxkvvch , fragment ) . addToBackStack ( null )
× fix_prediction_before: getSupportFragmentManager () . beginTransaction () . replace ( id , fragment ) . commit ()
× fix_prediction_after: getSupportFragmentManager () . beginTransaction () . replace ( yusjwxognxlkvoxkvvch , fragment ) . commit ()

line_index: 135
bug_before_refactoring: { org.terrier.matching.ResultSet rs = srq . getResultSet () ; int [] docIds = rs . getDocids () ; double [] scores = rs . getScores () ; for ( int i = 0 ; i < ( docIds.length ) ; i ++ ) { if ( ( docIds [ i ] ) == documentId ) { return scores [ i ] ; } } return 0 ; } <s> private static double getScoreForDocumentId ( int documentId , org.terrier.querying.SearchRequest srq ) { org.terrier.matching.ResultSet rs = srq . getResultSet () ; int [] docIds = rs . getDocids () ; double [] scores = rs . getScores () ; for ( int i = 0 ; i < ( docIds.length ) ; i ++ ) { if ( ( docIds [ i ] ) == documentId ) { return scores [ i ] ; } } return 0 ; } <s> Bug fixes in XQUAD
bug_after_refactoring: { org.terrier.matching.ResultSet rs = srq . getResultSet () ; int [] aaginvmexstgrycilwgf = rs . getDocids () ; double [] bfdwxifksyxdtwzxkznx = rs . getScores () ; for ( int i = 0 ; i < ( aaginvmexstgrycilwgf.length ) ; i ++ ) { if ( ( aaginvmexstgrycilwgf [ i ] ) == documentId ) { return bfdwxifksyxdtwzxkznx [ i ] ; } } return 0 ; } <s> private static double getScoreForDocumentId ( int documentId , org.terrier.querying.SearchRequest srq ) { org.terrier.matching.ResultSet rs = srq . getResultSet () ; int [] aaginvmexstgrycilwgf = rs . getDocids () ; double [] bfdwxifksyxdtwzxkznx = rs . getScores () ; for ( int i = 0 ; i < ( aaginvmexstgrycilwgf.length ) ; i ++ ) { if ( ( aaginvmexstgrycilwgf [ i ] ) == documentId ) { return bfdwxifksyxdtwzxkznx [ i ] ; } } return 0 ; } <s> Bug fixes in XQUAD
fix_before_refactoring: { org.terrier.matching.ResultSet rs = srq . getResultSet () ; if ( rs == null ) { return 0 ; } int [] docIds = rs . getDocids () ; double [] scores = rs . getScores () ; for ( int i = 0 ; i < ( docIds.length ) ; i ++ ) { if ( ( docIds [ i ] ) == documentId ) { return scores [ i ] ; } } return 0 ; }
fix_after_refactoring: { org.terrier.matching.ResultSet rs = srq . getResultSet () ; if ( rs == null ) { return 0 ; } int [] aaginvmexstgrycilwgf = rs . getDocids () ; double [] bfdwxifksyxdtwzxkznx = rs . getScores () ; for ( int i = 0 ; i < ( aaginvmexstgrycilwgf.length ) ; i ++ ) { if ( ( aaginvmexstgrycilwgf [ i ] ) == documentId ) { return bfdwxifksyxdtwzxkznx [ i ] ; } } return 0 ; }
× fix_prediction_before: { org.terrier.matching.ResultSet rs = srq . getResultSet () ; int [] docIds = rs . getDocids () ; double [] scores = rs . getScores () ; for ( int i = 0 ; i < ( docIds.length ) ; i ++ ) { if ( ( docIds [ i ] ) == documentId ) { return scores [ i ] ; } } return 0 ; }
× fix_prediction_after: { org.terrier.matching.ResultSet rs = srq . getResultSet () ; int [] aaginvmexstgrycilwgf = rs . getDocids () ; double [] bfdwxifksyxdtwzxkznx = rs . getScores () ; for ( int i = 0 ; i < ( aaginvmexstgrycilwgf.length ) ; i ++ ) { if ( ( aaginvmexstgrycilwgf [ i ] ) == documentId ) { return bfdwxifksyxdtwzxkznx [ i ] ; } } return 0 ; }

line_index: 136
bug_before_refactoring: { int markerPosition = markers . indexOf ( marker ) ; if ( markerPosition == ( selectedPosition ) ) return true ; selectMarker ( markerPosition ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( markerPosition ) ; } else { listener . onLegMarkerPressedAtIndex ( markerPosition ) ; } } return true ; } <s> @ java.lang.Override public boolean onMarkerClick ( com.google.android.gms.maps.model.Marker marker ) { int markerPosition = markers . indexOf ( marker ) ; if ( markerPosition == ( selectedPosition ) ) return true ; selectMarker ( markerPosition ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( markerPosition ) ; } else { listener . onLegMarkerPressedAtIndex ( markerPosition ) ; } } return true ; } <s> Bug fixes
bug_after_refactoring: { int izuubahywwcproextiom = markers . indexOf ( marker ) ; if ( izuubahywwcproextiom == ( selectedPosition ) ) return true ; selectMarker ( izuubahywwcproextiom ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } else { listener . onLegMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } } return true ; } <s> @ java.lang.Override public boolean onMarkerClick ( com.google.android.gms.maps.model.Marker marker ) { int izuubahywwcproextiom = markers . indexOf ( marker ) ; if ( izuubahywwcproextiom == ( selectedPosition ) ) return true ; selectMarker ( izuubahywwcproextiom ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } else { listener . onLegMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } } return true ; } <s> Bug fixes
fix_before_refactoring: { int markerPosition = markers . indexOf ( marker ) ; selectMarker ( markerPosition ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( markerPosition ) ; } else { listener . onLegMarkerPressedAtIndex ( markerPosition ) ; } } return true ; }
fix_after_refactoring: { int izuubahywwcproextiom = markers . indexOf ( marker ) ; selectMarker ( izuubahywwcproextiom ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } else { listener . onLegMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } } return true ; }
× fix_prediction_before: { int markerPosition = markers . indexOf ( marker ) ; if ( markerPosition == ( selectedPosition ) ) return true ; selectMarker ( markerPosition ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( markerPosition ) ; } else { listener . onLegMarkerPressedAtIndex ( markerPosition ) ; } } return true ; }
× fix_prediction_after: { int izuubahywwcproextiom = markers . indexOf ( marker ) ; if ( izuubahywwcproextiom == ( selectedPosition ) ) return true ; selectMarker ( izuubahywwcproextiom ) ; if ( ( listener ) != null ) { if ( isZoomed () ) { listener . onActivityMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } else { listener . onLegMarkerPressedAtIndex ( izuubahywwcproextiom ) ; } } return true ; }

line_index: 137
bug_before_refactoring: public void analyze () { boolean error = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { error = true ; } } } if ( error ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } } <s> public void analyze () { boolean error = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { error = true ; } } } if ( error ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } } <s> bug fixed DebugVM and empty repetition check
bug_after_refactoring: public void analyze () { boolean eodhotxlcnkcadqkayjx = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { eodhotxlcnkcadqkayjx = true ; } } } if ( eodhotxlcnkcadqkayjx ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } } <s> public void analyze () { boolean eodhotxlcnkcadqkayjx = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { eodhotxlcnkcadqkayjx = true ; } } } if ( eodhotxlcnkcadqkayjx ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } } <s> bug fixed DebugVM and empty repetition check
fix_before_refactoring: public void analyze () { boolean error = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { error = true ; } } if ( error ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } }
fix_after_refactoring: public void analyze () { boolean eodhotxlcnkcadqkayjx = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { eodhotxlcnkcadqkayjx = true ; } } if ( eodhotxlcnkcadqkayjx ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } }
× fix_prediction_before: public void analyze () { boolean error = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { error = true ; } } } if ( error ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } }
× fix_prediction_after: private void analyze () { boolean eodhotxlcnkcadqkayjx = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { eodhotxlcnkcadqkayjx = true ; } } } if ( eodhotxlcnkcadqkayjx ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } }

line_index: 138
bug_before_refactoring: { if ( isOpen () ) return true ; boolean open ; open = camera . open ( cameraIndex ) ; if ( open ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return open ; } <s> @ java.lang.Override public synchronized boolean open () { if ( isOpen () ) return true ; boolean open ; open = camera . open ( cameraIndex ) ; if ( open ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return open ; } <s> Fix Findbugs findings
bug_after_refactoring: { if ( isOpen () ) return true ; boolean owkwrcivhqboxmatmtcs ; owkwrcivhqboxmatmtcs = camera . owkwrcivhqboxmatmtcs ( cameraIndex ) ; if ( owkwrcivhqboxmatmtcs ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return owkwrcivhqboxmatmtcs ; } <s> @ java.lang.Override public synchronized boolean open () { if ( isOpen () ) return true ; boolean owkwrcivhqboxmatmtcs ; owkwrcivhqboxmatmtcs = camera . owkwrcivhqboxmatmtcs ( cameraIndex ) ; if ( owkwrcivhqboxmatmtcs ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return owkwrcivhqboxmatmtcs ; } <s> Fix Findbugs findings
fix_before_refactoring: { if ( isOpen () ) return true ; final boolean open = camera . open ( cameraIndex ) ; if ( open ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return open ; }
fix_after_refactoring: { if ( isOpen () ) return true ; final boolean owkwrcivhqboxmatmtcs = camera . owkwrcivhqboxmatmtcs ( cameraIndex ) ; if ( owkwrcivhqboxmatmtcs ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return owkwrcivhqboxmatmtcs ; }
× fix_prediction_before: { if ( isOpen () ) return true ; boolean open ; open = camera . open ( cameraIndex ) ; if ( open ) { camera . set ( 5 , 60 ) ; } com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; return open ; }
× fix_prediction_after: { boolean owkwrcivhqboxmatmtcs ; owkwrcivhqboxmatmtcs = camera . owkwrcivhqboxmatmtcs ( cameraIndex ) ; if ( owkwrcivhqboxmatmtcs ) { camera . set ( 5 , 60 ) ; com.shootoff.camera.CameraFactory . openCamerasAdd ( this ) ; } return owkwrcivhqboxmatmtcs ; }

line_index: 139
bug_before_refactoring: if ( isFavorite ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp , null ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp , null ) ) ; } <s> @ java.lang.Override public boolean onCreateOptionsMenu ( android.view.Menu menu ) { getMenuInflater () . inflate ( R.menu.menu_gastro_activity , menu ) ; android.view.MenuItem item = menu . findItem ( R.id.action_add_favorite ) ; boolean isFavorite = org.berlin_vegan.bvapp.GastroLocations . containsFavorite ( mGastroLocation . getId () ) ; if ( isFavorite ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp , null ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp , null ) ) ; } return true ; } <s> fix no such method error: getDrawable  The call to 'public Drawable getDrawable (int id  Resources.Theme theme)' requires API level 21 (current min is 15). This results in a stack trace on devices running API level < 21.
bug_after_refactoring: if ( cgymdvimfumhkprwdfmv ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp , null ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp , null ) ) ; } <s> @ java.lang.Override public boolean onCreateOptionsMenu ( android.view.Menu menu ) { getMenuInflater () . inflate ( R.menu.menu_gastro_activity , menu ) ; android.view.MenuItem item = menu . findItem ( R.id.action_add_favorite ) ; boolean isFavorite = org.berlin_vegan.bvapp.GastroLocations . containsFavorite ( mGastroLocation . getId () ) ; if ( cgymdvimfumhkprwdfmv ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp , null ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp , null ) ) ; } return true ; } <s> fix no such method error: getDrawable  The call to 'public Drawable getDrawable (int id  Resources.Theme theme)' requires API level 21 (current min is 15). This results in a stack trace on devices running API level < 21.
fix_before_refactoring: if ( isFavorite ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp ) ) ; }
fix_after_refactoring: if ( cgymdvimfumhkprwdfmv ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp ) ) ; }
× fix_prediction_before: if ( isFavorite ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp , null ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp , null ) ) ; }
× fix_prediction_after: if ( cgymdvimfumhkprwdfmv ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp , null ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp , null ) ) ; }

line_index: 140
bug_before_refactoring: { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long id = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( id ) ; matches . add ( match ) ; } return matches ; } <s> @ java.lang.Override public java.util.List < de.dhbw.persistence.Match > getMatches () { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long id = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( id ) ; matches . add ( match ) ; } return matches ; } <s> Bugfixes
bug_after_refactoring: { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long iqbhtjewhsbhjtrjvipf = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( iqbhtjewhsbhjtrjvipf ) ; matches . add ( match ) ; } return matches ; } <s> @ java.lang.Override public java.util.List < de.dhbw.persistence.Match > getMatches () { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long iqbhtjewhsbhjtrjvipf = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( iqbhtjewhsbhjtrjvipf ) ; matches . add ( match ) ; } return matches ; } <s> Bugfixes
fix_before_refactoring: { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; if ( this . matches . isEmpty () ) { return matches ; } for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long id = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( id ) ; matches . add ( match ) ; } return matches ; }
fix_after_refactoring: { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; if ( this . matches . isEmpty () ) { return matches ; } for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long iqbhtjewhsbhjtrjvipf = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( iqbhtjewhsbhjtrjvipf ) ; matches . add ( match ) ; } return matches ; }
× fix_prediction_before: { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; if ( ( this . matches . length () ) > 0 ) { for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long id = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( id ) ; matches . add ( match ) ; } } return matches ; }
× fix_prediction_after: { java.util.List < de.dhbw.persistence.Match > matches = new java.util.ArrayList <> () ; if ( ( matchId ) != null ) { for ( java.lang.String matchId : this . matches . split ( ";" ) ) { long iqbhthsbhjtrjvipf = java.lang.Long . parseLong ( matchId ) ; de.dhbw.persistence.Match match = DependecyKnowItAll.matchRepository . getMatchById ( iqbhtjewhsbhjtrjvipf ) ; matches . add ( match ) ; } } return matches ; }

line_index: 144
bug_before_refactoring: { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> Fix bug in fragment for use getActivity()
bug_after_refactoring: { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } <s> Fix bug in fragment for use getActivity()
fix_before_refactoring: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; }
fix_after_refactoring: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; }
× fix_prediction_before: { super . onSaveInstanceState ( outState ) ; if ( ir.blog.microc.movie.Temp.DEBUG_MODE ) android.widget.Toast . makeText ( this , "onSaveInstanceState" , Toast.LENGTH_SHORT ) . show () ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int position = linearLayoutManager . findFirstVisibleItemPosition () ; if ( position != linearLayoutManager . findFirstVisibleItemPosition () ) { outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , position ) ; } if ( ( outState ) != null ) { outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } }
× fix_prediction_after: { super . onSaveInstanceState ( outState ) ; android.support.v7.widget.LinearLayoutManager linearLayoutManager = ( ( android.support.v7.widget.LinearLayoutManager ) ( mRecyclerView . getLayoutManager () ) ) ; int njwtsnvfisivauvdrktz = linearLayoutManager . findFirstVisibleItemPosition () ; outState . putInt ( ir.blog.microc.movie.activities.MainActivity.FIRST_VISIBLE_ITEM_KEY , njwtsnvfisivauvdrktz ) ; if ( ( movieList ) != null ) { outState . putParcelableArrayList ( ir.blog.microc.movie.activities.MainActivity.MOVIE_DATA_PARCELABLE , ( ( java.util.ArrayList < ? extends android.os.Parcelable > ) ( movieList ) ) ) ; } }

line_index: 145
bug_before_refactoring: public synchronized void removePlayer ( CardGame.User user ) { int removeID = 999 ; int index = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { removeID = index ; } index ++ ; } players . remove ( removeID ) ; } <s> public synchronized void removePlayer ( CardGame.User user ) { int removeID = 999 ; int index = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { removeID = index ; } index ++ ; } players . remove ( removeID ) ; } <s> Added GameLobbyTest and fixed bugs in GameLobby (changed some type of methods from void to boolean) [TBC]
bug_after_refactoring: public synchronized void removePlayer ( CardGame.User user ) { int ihutpkoaznafshzxikuq = 999 ; int owirnizrfwlygomujfhb = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { ihutpkoaznafshzxikuq = owirnizrfwlygomujfhb ; } owirnizrfwlygomujfhb ++ ; } players . remove ( ihutpkoaznafshzxikuq ) ; } <s> public synchronized void removePlayer ( CardGame.User user ) { int ihutpkoaznafshzxikuq = 999 ; int owirnizrfwlygomujfhb = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { ihutpkoaznafshzxikuq = owirnizrfwlygomujfhb ; } owirnizrfwlygomujfhb ++ ; } players . remove ( ihutpkoaznafshzxikuq ) ; } <s> Added GameLobbyTest and fixed bugs in GameLobby (changed some type of methods from void to boolean) [TBC]
fix_before_refactoring: public synchronized boolean removePlayer ( CardGame.User user ) { int removeID = - 1 ; int index = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { removeID = index ; } index ++ ; } if ( removeID != ( - 1 ) ) { players . remove ( removeID ) ; return true ; } else { return false ; } }
fix_after_refactoring: public synchronized boolean removePlayer ( CardGame.User user ) { int ihutpkoaznafshzxikuq = - 1 ; int owirnizrfwlygomujfhb = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { ihutpkoaznafshzxikuq = owirnizrfwlygomujfhb ; } owirnizrfwlygomujfhb ++ ; } if ( ihutpkoaznafshzxikuq != ( - 1 ) ) { players . remove ( ihutpkoaznafshzxikuq ) ; return true ; } else { return false ; } }
× fix_prediction_before: public synchronized void removePlayer ( CardGame.User user ) { int removeID = 999 ; int index = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { removeID = index ; } index ++ ; } players . remove ( removeID ) ; }
× fix_prediction_after: public synchronized void removePlayer ( CardGame.User user ) { int ihutpkoaznafshzxikuq = 999 ; int owirnizrfwlygomujfhb = 0 ; for ( CardGame.GameEngine.Player player : players ) { if ( player . getUsername () . equals ( user . getUserName () ) ) { ihutpkoaznafshzxikuq = owirnizrfwlygomujfhb ; } owirnizrfwlygomujfhb ++ ; } players . remove ( ihutpkoaznafshzxikuq ) ; }

line_index: 146
bug_before_refactoring: { boolean isValid = true ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { break; } isValid = false ; } return isValid ; } <s> private boolean isPolicyCombinationValid ( java.lang.String . . . policyNames ) { boolean isValid = true ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { break; } isValid = false ; } return isValid ; } <s> Fixed a bug from the previous commit
bug_after_refactoring: { boolean epdkcjihvftibplkwlgk = true ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { break; } epdkcjihvftibplkwlgk = false ; } return epdkcjihvftibplkwlgk ; } <s> private boolean isPolicyCombinationValid ( java.lang.String . . . policyNames ) { boolean epdkcjihvftibplkwlgk = true ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { break; } epdkcjihvftibplkwlgk = false ; } return epdkcjihvftibplkwlgk ; } <s> Fixed a bug from the previous commit
fix_before_refactoring: { boolean isValid = false ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { isValid = true ; break; } } return isValid ; }
fix_after_refactoring: { boolean epdkcjihvftibplkwlgk = false ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { epdkcjihvftibplkwlgk = true ; break; } } return epdkcjihvftibplkwlgk ; }
× fix_prediction_before: { boolean isValid = true ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { return true ; } } return isValid ; }
× fix_prediction_after: { boolean epdkcjihvftibplkwlgk = true ; java.lang.String firstPolicyName = policyNames [ 0 ] ; for ( java.lang.String policyName : policyNames ) { if ( ! ( policyName . equals ( firstPolicyName ) ) ) { break; } } return ! ( epdkcjihvftibplkwlgk = false ; }

line_index: 149
bug_before_refactoring: @ org.junit.Test public void testKeyByColumnIterator () { int count = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; count ++ ; } org.junit.Assert . assertEquals ( 1 , count ) ; } <s> @ org.junit.Test public void testKeyByColumnIterator () { int count = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; count ++ ; } org.junit.Assert . assertEquals ( 1 , count ) ; } <s> Fixing Occurrence update persistence when higher taxa canonicals dont change but their keys. Fixes https://github.com/gbif/portal-feedback/issues/136
bug_after_refactoring: @ org.junit.Test public void testKeyByColumnIterator () { int izlsvifiifcosshhsxkx = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; izlsvifiifcosshhsxkx ++ ; } org.junit.Assert . assertEquals ( 1 , izlsvifiifcosshhsxkx ) ; } <s> @ org.junit.Test public void testKeyByColumnIterator () { int izlsvifiifcosshhsxkx = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; izlsvifiifcosshhsxkx ++ ; } org.junit.Assert . assertEquals ( 1 , izlsvifiifcosshhsxkx ) ; } <s> Fixing Occurrence update persistence when higher taxa canonicals dont change but their keys. Fixes https://github.com/gbif/portal-feedback/issues/136
fix_before_refactoring: @ org.gbif.occurrence.persistence.Test public void testKeyByColumnIterator () { int count = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; count ++ ; } assertEquals ( 1 , count ) ; }
fix_after_refactoring: @ org.gbif.occurrence.persistence.Test public void testKeyByColumnIterator () { int izlsvifiifcosshhsxkx = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; izlsvifiifcosshhsxkx ++ ; } assertEquals ( 1 , izlsvifiifcosshhsxkx ) ; }
× fix_prediction_before: @ org.junit.Test public void testKeyByColumnIterator () { int count = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; count ++ ; } org.junit.Assert . assertEquals ( 0 , count ) ; }
× fix_prediction_after: @ org.junit.Test public void testKeyByColumnIterator ( ) { int izlsvifiifcosshhsxkx = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; izlsvifiifcosshhsxkx ++ ; } org.junit.Assert . assertEquals ( 0 , izlsvifiifcosshhsxkx ) ; }

line_index: 150
bug_before_refactoring: { if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; double deltaH = java.lang.Math . round ( currentNode.pre.nodeText . getLayoutBounds () . getHeight () ) ; CurrentPosY += deltaH ; } } <s> void CurrentPosUpdate () { if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; double deltaH = java.lang.Math . round ( currentNode.pre.nodeText . getLayoutBounds () . getHeight () ) ; CurrentPosY += deltaH ; } } <s> fix several bugs such as press two enter and one delete  the cursor postion has problem; Font size changing also leads to cursor postion problem.
bug_after_refactoring: { if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; double rayiixftsnptbenkkxvn = java.lang.Math . round ( currentNode.pre.nodeText . getLayoutBounds () . getHeight () ) ; CurrentPosY += rayiixftsnptbenkkxvn ; } } <s> void CurrentPosUpdate () { if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; double rayiixftsnptbenkkxvn = java.lang.Math . round ( currentNode.pre.nodeText . getLayoutBounds () . getHeight () ) ; CurrentPosY += rayiixftsnptbenkkxvn ; } } <s> fix several bugs such as press two enter and one delete  the cursor postion has problem; Font size changing also leads to cursor postion problem.
fix_before_refactoring: { if ( this . isEmpty () ) { CurrentPosX = sg.util.FastLinkedList.MARGIN ; CurrentPosY = 0 ; } else if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; } }
fix_after_refactoring: { if ( this . isEmpty () ) { CurrentPosX = sg.util.FastLinkedList.MARGIN ; CurrentPosY = 0 ; } else if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; } }
× fix_prediction_before: { if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; double deltaH = java.lang.Math . round ( currentNode.pre.nodeText . getLayoutBounds () . getHeight () ) ; CurrentPosY += deltaH ; } }
× fix_prediction_after: { if ( ! ( currentNode.nodeText . getText () . equals ( "\n" ) ) ) { CurrentPosX = ( currentNode.nodeText . getX () ) + ( java.lang.Math . round ( currentNode.nodeText . getLayoutBounds () . getWidth () ) ) ; CurrentPosY = currentNode.nodeText . getY () ; } else { CurrentPosX = sg.util.FastLinkedList.MARGIN ; double rayiixftsnptbenkkxvn = java.lang.Math . round ( currentNode.pre.nodeText . getLayoutBounds () . getHeight () ) ; CurrentPosY += rayiixftsnptbenkkxvn ; } }

line_index: 151
bug_before_refactoring: ( java.lang.Math . log ( ( e / vm ) ) ) + ( ( vm - k ) * ( java.lang.Math . log ( ( 1.0 - ( e / vm ) ) ) ) ) <s> private double getPriorForStructure ( int numParents ) { double e = getStructurePrior () ; int k = numParents ; int vm = ( data.length ) - 1 ; return ( java.lang.Math . log ( ( e / vm ) ) ) + ( ( vm - k ) * ( java.lang.Math . log ( ( 1.0 - ( e / vm ) ) ) ) ) ; } <s> Fixed a problem in BDeu score with Greg's structure prior.
bug_after_refactoring: ( java.lang.Math . log ( ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) + ( ( lutqrheasizrdtohwvpa - bnzuvawchlhezdxkjwjx ) * ( java.lang.Math . log ( ( 1.0 - ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) ) ) <s> private double getPriorForStructure ( int numParents ) { double e = getStructurePrior () ; int k = numParents ; int vm = ( data.length ) - 1 ; return ( java.lang.Math . log ( ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) + ( ( lutqrheasizrdtohwvpa - bnzuvawchlhezdxkjwjx ) * ( java.lang.Math . log ( ( 1.0 - ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) ) ) ; } <s> Fixed a problem in BDeu score with Greg's structure prior.
fix_before_refactoring: ( k * ( java.lang.Math . log ( ( e / vm ) ) ) ) + ( ( vm - k ) * ( java.lang.Math . log ( ( 1.0 - ( e / vm ) ) ) ) )
fix_after_refactoring: ( bnzuvawchlhezdxkjwjx * ( java.lang.Math . log ( ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) ) + ( ( lutqrheasizrdtohwvpa - bnzuvawchlhezdxkjwjx ) * ( java.lang.Math . log ( ( 1.0 - ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) ) )
× fix_prediction_before: ( java.lang.Math . log ( ( e / vm ) ) ) + ( ( vm - k ) * ( java.lang.Math . log ( ( 1.0 - ( e / vm ) ) ) ) )
× fix_prediction_after: ( java.lang.Math . log ( ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) + ( ( lutqrheasizrdtohwvpa - bnzuvawchlhezdxkjwjx ) * ( java.lang.Math . log ( ( 1.0 - ( hztdamsmzggwzddkxayj / lutqrheasizrdtohwvpa ) ) ) ) )

line_index: 152
bug_before_refactoring: private static int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int lineCount = net.masterthought.dlanguage.highlighting.annotation.external.CompileCheck . getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= lineCount ) { line = lineCount - 1 ; } return line ; } <s> private static int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int lineCount = net.masterthought.dlanguage.highlighting.annotation.external.CompileCheck . getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= lineCount ) { line = lineCount - 1 ; } return line ; } <s> Merge pull request #212 from mbierlee/feat/fixerrorhightlighting  Fix DUB-based error highlighting
bug_after_refactoring: private static int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int sywhbimrllcrosoncmig = net.masterthought.dlanguage.highlighting.annotation.external.CompileCheck . getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= sywhbimrllcrosoncmig ) { line = sywhbimrllcrosoncmig - 1 ; } return line ; } <s> private static int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int sywhbimrllcrosoncmig = net.masterthought.dlanguage.highlighting.annotation.external.CompileCheck . getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= sywhbimrllcrosoncmig ) { line = sywhbimrllcrosoncmig - 1 ; } return line ; } <s> Merge pull request #212 from mbierlee/feat/fixerrorhightlighting  Fix DUB-based error highlighting
fix_before_refactoring: private int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int lineCount = getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= lineCount ) { line = lineCount - 1 ; } return line ; }
fix_after_refactoring: private int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int sywhbimrllcrosoncmig = getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= sywhbimrllcrosoncmig ) { line = sywhbimrllcrosoncmig - 1 ; } return line ; }
× fix_prediction_before: public static int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int lineCount = net.masterthought.dlanguage.highlighting.annotation.external.CompileCheck . getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= lineCount ) { line = lineCount - 1 ; } return line ; }
× fix_prediction_after: public static int getValidLineNumber ( int line , com.intellij.openapi.editor.Document document ) { int sywhbimrllcrosoncmig = net.masterthought.dlanguage.highlighting.annotation.external.CompileCheck . getDocumentLineCount ( document ) ; line = line - 1 ; if ( line <= 0 ) { line = 1 ; } else if ( line >= sywhbimrllcrosoncmig ) { line = sywhbimrllcrosoncmig - 1 ; } return line ; }

line_index: 153
bug_before_refactoring: if ( ( listToSetBottomOf . size () ) < 10 ) { listBottom = listToSetBottomOf . size () ; } else { listBottom = listTopPos + 11 ; } <s> private int setListBottom ( java.util.List listToSetBottomOf , int listTopPos ) { int listBottom = 0 ; if ( ( listToSetBottomOf . size () ) > 0 ) { if ( ( listToSetBottomOf . size () ) < 10 ) { listBottom = listToSetBottomOf . size () ; } else { listBottom = listTopPos + 11 ; } } return listBottom ; } <s> Fixed bug with displaying multiple ant brains and ant worlds.
bug_after_refactoring: if ( ( listToSetBottomOf . size () ) < 10 ) { xrhxdcqzrxvswdpfdhue = listToSetBottomOf . size () ; } else { xrhxdcqzrxvswdpfdhue = listTopPos + 11 ; } <s> private int setListBottom ( java.util.List listToSetBottomOf , int listTopPos ) { int listBottom = 0 ; if ( ( listToSetBottomOf . size () ) > 0 ) { if ( ( listToSetBottomOf . size () ) < 10 ) { xrhxdcqzrxvswdpfdhue = listToSetBottomOf . size () ; } else { xrhxdcqzrxvswdpfdhue = listTopPos + 11 ; } } return listBottom ; } <s> Fixed bug with displaying multiple ant brains and ant worlds.
fix_before_refactoring: if ( ( listToSetBottomOf . size () ) < 11 ) { listBottom = listToSetBottomOf . size () ; } else { listBottom = listTopPos + 10 ; }
fix_after_refactoring: if ( ( listToSetBottomOf . size () ) < 11 ) { xrhxdcqzrxvswdpfdhue = listToSetBottomOf . size () ; } else { xrhxdcqzrxvswdpfdhue = listTopPos + 10 ; }
× fix_prediction_before: if ( ( listToSetBottomOf . size () ) < 10 ) { listBottom = listToSetBottomOf . size () ; } else { listBottom = listTopPos + 11 ; }
× fix_prediction_after: if ( ( listToSetBottomOf . size () ) < 10 ) { xrhxdcqzrxvswdpfdhue = listToSetBottomOf . size () ; } else { xrhxdcqzrxvswdpfdhue = listTopPos + 11 ; }

line_index: 154
bug_before_refactoring: { int choice = 0 ; int chosenPokemon ; do { chosenPokemon = 0 ; printStarterPokemon () ; chosenPokemon = getChosen () ; java.lang.System.out . println ( "Do you choose him?" ) ; java.lang.System.out . println ( "[1]Yes [2]No" ) ; choice = main.ConsoleRenderer.input . nextInt () ; if ( choice == 2 ) { chooseOnePokemon () ; } else if ( choice != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( choice != 1 ) ; main.Player . choosePokemon ( chosenPokemon ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; } <s> @ java.lang.Override public void chooseOnePokemon () { int choice = 0 ; int chosenPokemon ; do { chosenPokemon = 0 ; printStarterPokemon () ; chosenPokemon = getChosen () ; java.lang.System.out . println ( "Do you choose him?" ) ; java.lang.System.out . println ( "[1]Yes      [2]No" ) ; choice = main.ConsoleRenderer.input . nextInt () ; if ( choice == 2 ) { chooseOnePokemon () ; } else if ( choice != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( choice != 1 ) ; main.Player . choosePokemon ( chosenPokemon ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; } <s> fixed a bug with choosing the pokemon
bug_after_refactoring: { int ghpcqopillzwdpsewidk = 0 ; int ehvsgjjytjtdnsgyklsg ; do { ehvsgjjytjtdnsgyklsg = 0 ; printStarterPokemon () ; ehvsgjjytjtdnsgyklsg = getChosen () ; java.lang.System.out . println ( "Do you choose him?" ) ; java.lang.System.out . println ( "[1]Yes [2]No" ) ; ghpcqopillzwdpsewidk = main.ConsoleRenderer.input . nextInt () ; if ( ghpcqopillzwdpsewidk == 2 ) { chooseOnePokemon () ; } else if ( ghpcqopillzwdpsewidk != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( ghpcqopillzwdpsewidk != 1 ) ; main.Player . choosePokemon ( ehvsgjjytjtdnsgyklsg ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; } <s> @ java.lang.Override public void chooseOnePokemon () { int choice = 0 ; int chosenPokemon ; do { chosenPokemon = 0 ; printStarterPokemon () ; chosenPokemon = getChosen () ; java.lang.System.out . println ( "Do you choose him?" ) ; java.lang.System.out . println ( "[1]Yes      [2]No" ) ; choice = main.ConsoleRenderer.input . nextInt () ; if ( choice == 2 ) { chooseOnePokemon () ; } else if ( choice != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( choice != 1 ) ; main.Player . choosePokemon ( chosenPokemon ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; } <s> fixed a bug with choosing the pokemon
fix_before_refactoring: { int choice = 0 ; int chosenPokemon = 0 ; do { chosenPokemon = 0 ; printStarterPokemon () ; chosenPokemon = getChosen () ; java.lang.System.out . println ( "Do you choose him?" ) ; java.lang.System.out . println ( "[1]Yes      [2]No" ) ; choice = main.ConsoleRenderer.input . nextInt () ; if ( choice == 2 ) { chooseOnePokemon () ; break; } else if ( choice != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( choice != 1 ) ; main.Player . choosePokemon ( chosenPokemon ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; }
fix_after_refactoring: { int ghpcqopillzwdpsewidk = 0 ; int ehvsgjjytjtdnsgyklsg = 0 ; do { ehvsgjjytjtdnsgyklsg = 0 ; printStarterPokemon () ; ehvsgjjytjtdnsgyklsg = getChosen () ; java.lang.System.out . println ( "Do you choose him?" ) ; java.lang.System.out . println ( "[1]Yes      [2]No" ) ; ghpcqopillzwdpsewidk = main.ConsoleRenderer.input . nextInt () ; if ( ghpcqopillzwdpsewidk == 2 ) { chooseOnePokemon () ; break; } else if ( ghpcqopillzwdpsewidk != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( ghpcqopillzwdpsewidk != 1 ) ; main.Player . choosePokemon ( ehvsgjjytjtdnsgyklsg ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; }
× fix_prediction_before: { int choice = 0 ; int chosenPokemon ; do { chosenPokemon = 0 ; printStarterPokemon () ; chosenPokemon = getChosen () ; java.lang.System.out . println ( "Do you choose men?" ) ; java.lang.System.out . println ( "[1]Yes [2]No" ) ; choice = main.ConsoleRenderer.input . nextInt () ; if ( choice == 2 ) { chooseOnePokemon () ; } else if ( choice != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( choice != 1 ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; }
× fix_prediction_after: { int ghpcqopillzwdpsewidk = 0 ; do { ehvsgjjytjtdnsgyklsg = 0 ; printStarterPokemon () ; ehvsgjjytjtdnsgyklsg = getChosen () ; java.lang.System.out . println ( "Do you choose men?" ) ; java.lang.System.out . println ( "[1]Yes [2]No" ) ; ghpcqopillzwdpsewidk = main.ConsoleRenderer.input . nextInt () ; if ( ghpcqopillzwdpsewidk == 2 ) { chooseOnePokemon () ; } else if ( ghpcqopillzwdpsewidk != 1 ) { java.lang.System.out . println ( "Choose Yes or No!" ) ; } } while ( ghpcqopillzwdpsewidk != 1 ) ; main.Player . choosePokemon ( ehvsgjjytjtdnsgyklsg ) ; java.lang.System.out . println ( "Successufully added a pokemon" ) ; }

line_index: 155
bug_before_refactoring: res = 0 <s> public static double normalizeValue ( final double input , final double avg , final double std ) { double res = 0 ; if ( std != 0 ) { res = ( input - avg ) / std ; } else { res = 0 ; } return res ; } <s> bug fix on gaussian
bug_after_refactoring: wgqmchnmlmembtlkfhyy = 0 <s> public static double normalizeValue ( final double input , final double avg , final double std ) { double wgqmchnmlmembtlkfhyy = 0 ; if ( std != 0 ) { res = ( input - avg ) / std ; } else { wgqmchnmlmembtlkfhyy = 0 ; } return res ; } <s> bug fix on gaussian
fix_before_refactoring: res
fix_after_refactoring: wgqmchnmlmembtlkfhyy
× fix_prediction_before: res = 0.0
× fix_prediction_after: wgqmchnmlmembtlkfhyy = - 0.0

line_index: 157
bug_before_refactoring: private void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } } <s> private void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } } <s> Model- Bug fixes and new functionality added
bug_after_refactoring: private void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } } <s> private void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } } <s> Model- Bug fixes and new functionality added
fix_before_refactoring: public void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } }
fix_after_refactoring: public void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } }
× fix_prediction_before: public void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syrowd.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syrowd.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } }
× fix_prediction_after: private void shuffleDeck () { int ekznamthupswspknrqwh = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { ekznamthupswspknrqwh = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ ekznamthupswspknrqwh ] ; cards [ ekznamthupswspknrqwh ] = temp ; } }

line_index: 158
bug_before_refactoring: if ( ( mRunnables ) == null ) { mRunnables = new java.util.ArrayList <> () ; int count = getItemCount () ; for ( int i = 0 ; i < count ; i ++ ) { mRunnables . add ( null ) ; } } <s> @ java.lang.Override public void onAttachedToRecyclerView ( android.support.v7.widget.RecyclerView recyclerView ) { if ( ( mRunnables ) == null ) { mRunnables = new java.util.ArrayList <> () ; int count = getItemCount () ; for ( int i = 0 ; i < count ; i ++ ) { mRunnables . add ( null ) ; } } registerAdapterDataObserver ( new com.tr4android.recyclerviewslideitem.SwipeAdapter.SwipeAdapterDataObserver () ) ; } <s> Fix bug in onItemRangeMoved method of SwipeAdapter  * Fix bug in onItemRangeMoved method of SwipeAdapter * Prevent synchronization on a non-final field
bug_after_refactoring: if ( ( mRunnables ) == null ) { mRunnables = new java.util.ArrayList <> () ; int rputsbjajznibondqxum = getItemCount () ; for ( int i = 0 ; i < rputsbjajznibondqxum ; i ++ ) { mRunnables . add ( null ) ; } } <s> @ java.lang.Override public void onAttachedToRecyclerView ( android.support.v7.widget.RecyclerView recyclerView ) { if ( ( mRunnables ) == null ) { mRunnables = new java.util.ArrayList <> () ; int rputsbjajznibondqxum = getItemCount () ; for ( int i = 0 ; i < rputsbjajznibondqxum ; i ++ ) { mRunnables . add ( null ) ; } } registerAdapterDataObserver ( new com.tr4android.recyclerviewslideitem.SwipeAdapter.SwipeAdapterDataObserver () ) ; } <s> Fix bug in onItemRangeMoved method of SwipeAdapter  * Fix bug in onItemRangeMoved method of SwipeAdapter * Prevent synchronization on a non-final field
fix_before_refactoring: if ( ( mRunnables . size () ) == 0 ) { int count = getItemCount () ; for ( int i = 0 ; i < count ; i ++ ) { mRunnables . add ( null ) ; } }
fix_after_refactoring: if ( ( mRunnables . size () ) == 0 ) { int rputsbjajznibondqxum = getItemCount () ; for ( int i = 0 ; i < rputsbjajznibondqxum ; i ++ ) { mRunnables . add ( null ) ; } }
× fix_prediction_before: if ( ( mRunnables ) == null ) { mRunnables = new java.util.ArrayList <> () ; int count = getItemCount () ; for ( int i = 0 ; i < count ; i ++ ) { mRunnables . add ( null ) ; } }
× fix_prediction_after: if ( ( mRunnables ) == null ) { mRunnables = new java.util.ArrayList <> () ; int rputsbjajznibondqxum = getItemCount () ; for ( int i = 0 ; i < rputsbjajznibondqxum ; i ++ ) { mRunnables . add ( null ) ; } }

line_index: 159
bug_before_refactoring: while ( ( array [ iterator ] ) == null ) { iterator -- ; } <s> public Person retrieve () { int iterator = ( array.length ) - 1 ; while ( ( array [ iterator ] ) == null ) { iterator -- ; } Person retrieved = array [ iterator ] ; array [ iterator ] = null ; return retrieved ; } <s> Bug fix to deal with retrieve call on empty array.
bug_after_refactoring: while ( ( array [ xmnkqmobcwjdmwdlbgvu ] ) == null ) { xmnkqmobcwjdmwdlbgvu -- ; } <s> public Person retrieve () { int iterator = ( array.length ) - 1 ; while ( ( array [ xmnkqmobcwjdmwdlbgvu ] ) == null ) { xmnkqmobcwjdmwdlbgvu -- ; } Person retrieved = array [ iterator ] ; array [ iterator ] = null ; return retrieved ; } <s> Bug fix to deal with retrieve call on empty array.
fix_before_refactoring: while ( ( iterator > 0 ) && ( ( array [ iterator ] ) == null ) ) { iterator -- ; }
fix_after_refactoring: while ( ( xmnkqmobcwjdmwdlbgvu > 0 ) && ( ( array [ xmnkqmobcwjdmwdlbgvu ] ) == null ) ) { xmnkqmobcwjdmwdlbgvu -- ; }
× fix_prediction_before: while ( ( array [ iterator ] ) == null ) { iterator -- ; }
× fix_prediction_after: while ( ( array [ xmnkqmobcwjdmwdlbgvu ] ) == null ) { xmnkqmobcwjdmwdlbgvu -- ; }

line_index: 160
bug_before_refactoring: public void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; ch.ethz.asl.dancebots.danceboteditor.model.DanceSequence < T > selectedDanceSequence = mDanceSequences . get ( danceSequenceID ) ; int danceSequenceLength = selectedDanceSequence . getLength () ; int startIdx = selectedDanceSequence . getStartElement () . getBeatPosition () ; int endIdx = startIdx + danceSequenceLength ; resetElements ( startIdx , endIdx ) ; mDanceSequences . remove ( danceSequenceID ) ; } <s> public void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; ch.ethz.asl.dancebots.danceboteditor.model.DanceSequence < T > selectedDanceSequence = mDanceSequences . get ( danceSequenceID ) ; int danceSequenceLength = selectedDanceSequence . getLength () ; int startIdx = selectedDanceSequence . getStartElement () . getBeatPosition () ; int endIdx = startIdx + danceSequenceLength ; resetElements ( startIdx , endIdx ) ; mDanceSequences . remove ( danceSequenceID ) ; } <s> Bug fix: remove dance sequence now correctly implemented
bug_after_refactoring: public void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; ch.ethz.asl.dancebots.danceboteditor.model.DanceSequence < T > selectedDanceSequence = mDanceSequences . get ( danceSequenceID ) ; int mtbwwtbdrassomqszmso = selectedDanceSequence . getLength () ; int xyrugkegjmvhwrspdmgy = selectedDanceSequence . getStartElement () . getBeatPosition () ; int kwapkugucbcbzgoiqhbc = xyrugkegjmvhwrspdmgy + mtbwwtbdrassomqszmso ; resetElements ( xyrugkegjmvhwrspdmgy , kwapkugucbcbzgoiqhbc ) ; mDanceSequences . remove ( danceSequenceID ) ; } <s> public void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; ch.ethz.asl.dancebots.danceboteditor.model.DanceSequence < T > selectedDanceSequence = mDanceSequences . get ( danceSequenceID ) ; int mtbwwtbdrassomqszmso = selectedDanceSequence . getLength () ; int xyrugkegjmvhwrspdmgy = selectedDanceSequence . getStartElement () . getBeatPosition () ; int kwapkugucbcbzgoiqhbc = xyrugkegjmvhwrspdmgy + mtbwwtbdrassomqszmso ; resetElements ( xyrugkegjmvhwrspdmgy , kwapkugucbcbzgoiqhbc ) ; mDanceSequences . remove ( danceSequenceID ) ; } <s> Bug fix: remove dance sequence now correctly implemented
fix_before_refactoring: public void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; removeDanceSequence ( danceSequenceID , selectedBeatElem . getBeatPosition () , ( ( selectedBeatElem . getBeatPosition () ) + ( mDanceSequences . get ( danceSequenceID ) . getLength () ) ) ) ; }
fix_after_refactoring: public void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; removeDanceSequence ( danceSequenceID , selectedBeatElem . getBeatPosition () , ( ( selectedBeatElem . getBeatPosition () ) + ( mDanceSequences . get ( danceSequenceID ) . getLength () ) ) ) ; }
× fix_prediction_before: private void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; ch.ethz.asl.dancebots.danceboteditor.model.DanceSequence < T > selectedDanceSequence = mDanceSequences . get ( danceSequenceID ) ; int danceSequenceLength = selectedDanceSequence . getLength () ; int startIdx = selectedDanceSequence . getStartElement () . getBeatPosition () ; int endIdx = startIdx + danceSequenceLength ; resetElements ( startIdx , endIdx ) ; mDanceSequences . remove ( danceSequenceID ) ; }
× fix_prediction_after: private void removeDanceSequence ( T selectedBeatElem ) { java.util.UUID danceSequenceID = selectedBeatElem . getDanceSequenceId () ; ch.ethz.asl.dancebots.danceboteditor.model.DanceSequence < T > selectedDanceSequence = mDanceSequences . get ( danceSequenceID ) ; int mtbwwtbdrassomqszmso = selectedDanceSequence . getLength () ; int xyrugkegjmvhwrspdmgy = selectedDanceSequence . getStartElement () . getBeatPosition () ; int kwapkugucbcbzgoiqhbc = xyrugkegjmvhwrspdmgy + mtbwwtbdrassomqszmso ; resetElements ( xyrugkegjmvhwrspdmgy , kwapkugucbcbzgoiqhbc ) ; mDanceSequences . remove ( danceSequenceID ) ; }

line_index: 161
bug_before_refactoring: { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int index = GamePanel.RANDOM . nextInt ( com.gamesbykevin.breakout.ball.Balls.Key . values () . length ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = com.gamesbykevin.breakout.ball.Balls.Key . values () [ index ] ; this . keys . remove ( index ) ; return tmp ; } <s> private com.gamesbykevin.breakout.ball.Balls.Key getRandomKey () { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int index = GamePanel.RANDOM . nextInt ( com.gamesbykevin.breakout.ball.Balls.Key . values () . length ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = com.gamesbykevin.breakout.ball.Balls.Key . values () [ index ] ; this . keys . remove ( index ) ; return tmp ; } <s> Found array index out of bounds error and resolved when choosing a random animation for the ball
bug_after_refactoring: { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int dbkwknqxvuzcdwldkdkk = GamePanel.RANDOM . nextInt ( com.gamesbykevin.breakout.ball.Balls.Key . values () . length ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = com.gamesbykevin.breakout.ball.Balls.Key . values () [ dbkwknqxvuzcdwldkdkk ] ; this . keys . remove ( dbkwknqxvuzcdwldkdkk ) ; return tmp ; } <s> private com.gamesbykevin.breakout.ball.Balls.Key getRandomKey () { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int dbkwknqxvuzcdwldkdkk = GamePanel.RANDOM . nextInt ( com.gamesbykevin.breakout.ball.Balls.Key . values () . length ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = com.gamesbykevin.breakout.ball.Balls.Key . values () [ dbkwknqxvuzcdwldkdkk ] ; this . keys . remove ( dbkwknqxvuzcdwldkdkk ) ; return tmp ; } <s> Found array index out of bounds error and resolved when choosing a random animation for the ball
fix_before_refactoring: { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int index = GamePanel.RANDOM . nextInt ( this . keys . size () ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = this . keys . get ( index ) ; this . keys . remove ( index ) ; return tmp ; }
fix_after_refactoring: { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int dbkwknqxvuzcdwldkdkk = GamePanel.RANDOM . nextInt ( this . keys . size () ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = this . keys . get ( dbkwknqxvuzcdwldkdkk ) ; this . keys . remove ( dbkwknqxvuzcdwldkdkk ) ; return tmp ; }
× fix_prediction_before: { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int index = GamePanel.RANDOM . nextInt ( com.gamesbykevin.breakout.ball.Balls.Key . values () . length ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = com.gamesbykevin.breakout.ball.Balls.Key . values () [ index ] ; this . keys . remove ( index ) ; return tmp ; }
× fix_prediction_after: { if ( this . keys . isEmpty () ) { for ( com.gamesbykevin.breakout.ball.Balls.Key key : com.gamesbykevin.breakout.ball.Balls.Key . values () ) { if ( key == ( com.gamesbykevin.breakout.ball.Balls.Key.Red ) ) continue; this . keys . add ( key ) ; } } final int dbkwknqxvuzcdwldkdkk = GamePanel.RANDOM . nextInt ( com.gamesbykevin.breakout.ball.Balls.Key . values () . length ) ; final com.gamesbykevin.breakout.ball.Balls.Key tmp = com.gamesbykevin.breakout.ball.Balls.Key . values () [ dbkwknqxvuzcdwldkdkk ] ; this . keys . remove ( dbkwknqxvuzcdwldkdkk ) ; return tmp ; }

line_index: 162
bug_before_refactoring: stdv = 1.0 / ( java.lang.Math . sqrt ( ( ( ( grads.dims [ 1 ] ) * ( weights.dims [ 2 ] ) ) * ( weights.dims [ 3 ] ) ) ) ) <s> public double rand () { double stdv = 1.0 / ( java.lang.Math . sqrt ( ( ( ( grads.dims [ 1 ] ) * ( weights.dims [ 2 ] ) ) * ( weights.dims [ 3 ] ) ) ) ) ; double stdv2 = stdv * 2 ; return ( ( java.lang.Math . random () ) * stdv2 ) - stdv ; } <s> Fixed a bug introduced with ArrayDouble
bug_after_refactoring: alvlyqpuxkrjyfgmnleu = 1.0 / ( java.lang.Math . sqrt ( ( ( ( grads.dims [ 1 ] ) * ( weights.dims [ 2 ] ) ) * ( weights.dims [ 3 ] ) ) ) ) <s> public double rand () { double alvlyqpuxkrjyfgmnleu = 1.0 / ( java.lang.Math . sqrt ( ( ( ( grads.dims [ 1 ] ) * ( weights.dims [ 2 ] ) ) * ( weights.dims [ 3 ] ) ) ) ) ; double stdv2 = stdv * 2 ; return ( ( java.lang.Math . random () ) * stdv2 ) - stdv ; } <s> Fixed a bug introduced with ArrayDouble
fix_before_refactoring: stdv = 1.0 / ( java.lang.Math . sqrt ( ( ( grads.dims [ 1 ] ) * ( grads.dims [ 2 ] ) ) ) )
fix_after_refactoring: alvlyqpuxkrjyfgmnleu = 1.0 / ( java.lang.Math . sqrt ( ( ( grads.dims [ 1 ] ) * ( grads.dims [ 2 ] ) ) ) )
× fix_prediction_before: stdv = ( ( double ) ( java.lang.Math . sqrt ( ( ( ( grads.dims [ 1 ] ) * ( weights.dims [ 2 ] ) ) * ( weights.dims [ 3 ] ) ) ) )
× fix_prediction_after: alvlyqpuxkrjyfgmnleu = 1.0 / ( java.lang.Math . sqrt ( ( ( ( grads.dims [ 1 ] ) * ( weights.dims [ 2 ] ) ) * ( weights.dims [ 3 ] ) ) ) )

line_index: 163
bug_before_refactoring: public void updateNFCData () { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] fp = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( fp ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( fp ) ; } <s> public void updateNFCData () { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] fp = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( fp ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( fp ) ; } <s> -Removed unneeded Throwable in doNfcInBackground method. -Fixed a crash in containsKeys method with null fingerprints -Fixed a crash in updateNFCData method with null fingerprints. -Wizard activity does not crash anymore when using a nfc card and correctly reports yubi key errors.
bug_after_refactoring: public void updateNFCData () { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] bguuepavqythqzrnfxdc = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( bguuepavqythqzrnfxdc ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( bguuepavqythqzrnfxdc ) ; } <s> public void updateNFCData () { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] bguuepavqythqzrnfxdc = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( bguuepavqythqzrnfxdc ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( bguuepavqythqzrnfxdc ) ; } <s> -Removed unneeded Throwable in doNfcInBackground method. -Fixed a crash in containsKeys method with null fingerprints -Fixed a crash in updateNFCData method with null fingerprints. -Wizard activity does not crash anymore when using a nfc card and correctly reports yubi key errors.
fix_before_refactoring: public void updateNFCData () { if ( ( mNfcFingerprints ) != null ) { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] fp = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( fp ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( fp ) ; } }
fix_after_refactoring: public void updateNFCData () { if ( ( mNfcFingerprints ) != null ) { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] bguuepavqythqzrnfxdc = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( bguuepavqythqzrnfxdc ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( bguuepavqythqzrnfxdc ) ; } }
× fix_prediction_before: private void updateNFCData () { if ( ( mNfcFingerprint ) != null ) { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] fp = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( fp ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( fp ) ; } }
× fix_prediction_after: private void updateNFCData () { if ( ( mNfcFingerprint ) != null ) { mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( mNfcFingerprints ) ; byte [] bguuepavqythqzrnfxdc = new byte [ 20 ] ; java.nio.ByteBuffer . wrap ( bguuepavqythqzrnfxdc ) . put ( mNfcFingerprints , 0 , 20 ) ; mNfcFingerprint = org.sufficientlysecure.keychain.ui.util.KeyFormattingUtils . convertFingerprintToHex ( bguuepavqythqzrnfxdc ) ; } }

line_index: 164
bug_before_refactoring: @ java.lang.Override public double curve ( double t ) { double amount = ( this . amount ) * 1.525 ; if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( amount + 1 ) * t ) - amount ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( amount + 1 ) * t ) + amount ) ) + 2 ) ; } <s> @ java.lang.Override public double curve ( double t ) { double amount = ( this . amount ) * 1.525 ; if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( amount + 1 ) * t ) - amount ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( amount + 1 ) * t ) + amount ) ) + 2 ) ; } <s> some bugfix
bug_after_refactoring: @ java.lang.Override public double curve ( double t ) { double rzmqcawyjifyusoecryh = ( this . rzmqcawyjifyusoecryh ) * 1.525 ; if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( rzmqcawyjifyusoecryh + 1 ) * t ) - rzmqcawyjifyusoecryh ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( rzmqcawyjifyusoecryh + 1 ) * t ) + rzmqcawyjifyusoecryh ) ) + 2 ) ; } <s> @ java.lang.Override public double curve ( double t ) { double rzmqcawyjifyusoecryh = ( this . rzmqcawyjifyusoecryh ) * 1.525 ; if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( rzmqcawyjifyusoecryh + 1 ) * t ) - rzmqcawyjifyusoecryh ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( rzmqcawyjifyusoecryh + 1 ) * t ) + rzmqcawyjifyusoecryh ) ) + 2 ) ; } <s> some bugfix
fix_before_refactoring: @ java.lang.Override public double curve ( double t ) { if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( ( amount ) + 1 ) * t ) - ( amount ) ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( ( amount ) + 1 ) * t ) + ( amount ) ) ) + 2 ) ; }
fix_after_refactoring: @ java.lang.Override public double curve ( double t ) { if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( ( rzmqcawyjifyusoecryh ) + 1 ) * t ) - ( rzmqcawyjifyusoecryh ) ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( ( rzmqcawyjifyusoecryh ) + 1 ) * t ) + ( rzmqcawyjifyusoecryh ) ) ) + 2 ) ; }
× fix_prediction_before: @ java.lang.Override public double curve ( double t ) { double amount = ( this . amount ) * 1.525 ; if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( amount + 1 ) * t ) - amount ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( amount + 1 ) * t ) + amount ) ) + 2 ) ; }
× fix_prediction_after: @ java.lang.Override public double curve ( double t ) { double rzmqcawyjifyusoecryh = ( this . rzmqcawyjifyusoecryh ) * 1.525 ; if ( ( t *= 2 ) < 1 ) { return 0.5 * ( ( t * t ) * ( ( ( rzmqcawyjifyusoecryh + 1 ) * t ) - rzmqcawyjifyusoecryh ) ) ; } return 0.5 * ( ( ( ( t -= 2 ) * t ) * ( ( ( rzmqcawyjifyusoecryh + 1 ) * t ) + rzmqcawyjifyusoecryh ) ) + 2 ) ; }

line_index: 165
bug_before_refactoring: { float [] result = tableColumnWidth . clone () ; for ( int i = 0 ; i < ( result.length ) ; ++ i ) { result [ i ] += com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ; } return result ; } <s> private static float [] toEffectiveTableColumnWidth ( float [] tableColumnWidth ) { float [] result = tableColumnWidth . clone () ; for ( int i = 0 ; i < ( result.length ) ; ++ i ) { result [ i ] += com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ; } return result ; } <s> Fix autoport issues
bug_after_refactoring: { float [] vmjorwjfkzlloovrfnxb = tableColumnWidth . clone () ; for ( int i = 0 ; i < ( vmjorwjfkzlloovrfnxb.length ) ; ++ i ) { vmjorwjfkzlloovrfnxb [ i ] += com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ; } return vmjorwjfkzlloovrfnxb ; } <s> private static float [] toEffectiveTableColumnWidth ( float [] tableColumnWidth ) { float [] vmjorwjfkzlloovrfnxb = tableColumnWidth . clone () ; for ( int i = 0 ; i < ( vmjorwjfkzlloovrfnxb.length ) ; ++ i ) { vmjorwjfkzlloovrfnxb [ i ] += com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ; } return vmjorwjfkzlloovrfnxb ; } <s> Fix autoport issues
fix_before_refactoring: { float [] result = new float [ tableColumnWidth.length ] ; for ( int i = 0 ; i < ( result.length ) ; ++ i ) { result [ i ] = ( tableColumnWidth [ i ] ) + ( com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ) ; } return result ; }
fix_after_refactoring: { float [] vmjorwjfkzlloovrfnxb = new float [ tableColumnWidth.length ] ; for ( int i = 0 ; i < ( vmjorwjfkzlloovrfnxb.length ) ; ++ i ) { vmjorwjfkzlloovrfnxb [ i ] = ( tableColumnWidth [ i ] ) + ( com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ) ; } return vmjorwjfkzlloovrfnxb ; }
× fix_prediction_before: { float [] result = tableColumnWidth . clone () ; for ( int i = 0 ; i < ( result.length ) ; ++ i ) { result [ i ] += com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ; } return result ; }
× fix_prediction_after: { float [] vmjorwjfkzlloovrfnxb = tableColumnWidth . clone () ; for ( int i = 0 ; i < ( vmjorwjfkzlloovrfnxb.length ) ; ++ i ) { vmjorwjfkzlloovrfnxb [ i ] += com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ; } return vmjorwjfkzlloovrfnxb ; }

line_index: 166
bug_before_refactoring: private void setStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } <s> private void setStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } <s> Refactoring . Bug fixing.
bug_after_refactoring: private void setStyle ( int style ) { try { boolean fwwzjlcyagjnvuushwch = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! fwwzjlcyagjnvuushwch ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } <s> private void setStyle ( int style ) { try { boolean fwwzjlcyagjnvuushwch = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! fwwzjlcyagjnvuushwch ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } <s> Refactoring . Bug fixing.
fix_before_refactoring: private void setMapStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } }
fix_after_refactoring: private void setMapStyle ( int style ) { try { boolean fwwzjlcyagjnvuushwch = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! fwwzjlcyagjnvuushwch ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } }
× fix_prediction_before: public void setStyle ( int style ) { try { mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } }
× fix_prediction_after: public void setStyle ( int style ) { try { boolean fwwzjlcyagjnvuushwch = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! fwwzjlcyagjnvuushwch ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } }

line_index: 167
bug_before_refactoring: { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean success = validateData ( user , pass1 , pass2 ) ; if ( ! success ) { success = validateData ( user , pass1 , pass2 ) ; } java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } <s> private void sendBtnActionPerformed ( java.awt.event.ActionEvent evt ) { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean success = validateData ( user , pass1 , pass2 ) ; if ( ! success ) { success = validateData ( user , pass1 , pass2 ) ; } java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } <s> Clean Up and BugFixing  cleaned up some of the createAccount code. More work needs to be done before creating an account properly works.
bug_after_refactoring: { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; if ( ! wjgpwgpjssutokyptfwt ) { wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; } java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } <s> private void sendBtnActionPerformed ( java.awt.event.ActionEvent evt ) { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; if ( ! wjgpwgpjssutokyptfwt ) { wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; } java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } <s> Clean Up and BugFixing  cleaned up some of the createAccount code. More work needs to be done before creating an account properly works.
fix_before_refactoring: { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean success = validateData ( user , pass1 , pass2 ) ; if ( ! success ) { success = validateData ( user , pass1 , pass2 ) ; } else { java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } }
fix_after_refactoring: { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; if ( ! wjgpwgpjssutokyptfwt ) { wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; } else { java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } }
× fix_prediction_before: { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean success = validateData ( user , pass1 , pass2 ) ; if ( ! success ) { success = validateData ( user , pass1 , pass2 ) ; } java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; }
× fix_prediction_after: { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; if ( ! wjgpwgpjssutokyptfwt ) { wjgpwgpjssutokyptfwt = validateData ( user , pass1 , pass2 ) ; } java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; }

line_index: 170
bug_before_refactoring: ( diff * diff ) / ( array.length ) <s> public static float variance ( final float [] array , final int offset , final int length ) { final float mean = com.tagtraum.jipes.math.Floats . arithmeticMean ( array , offset , length ) ; double sum = 0 ; for ( int i = offset ; i < ( offset + length ) ; i ++ ) { final float diff = ( array [ i ] ) - mean ; sum += ( diff * diff ) / ( array.length ) ; } return ( ( float ) ( sum ) ) ; } <s> New computation methods (median  ...). Fixed bug in arithmeticMean method.
bug_after_refactoring: ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / ( array.length ) <s> public static float variance ( final float [] array , final int offset , final int length ) { final float mean = com.tagtraum.jipes.math.Floats . arithmeticMean ( array , offset , length ) ; double sum = 0 ; for ( int i = offset ; i < ( offset + length ) ; i ++ ) { final float diff = ( array [ i ] ) - mean ; sum += ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / ( array.length ) ; } return ( ( float ) ( sum ) ) ; } <s> New computation methods (median  ...). Fixed bug in arithmeticMean method.
fix_before_refactoring: ( diff * diff ) / length
fix_after_refactoring: ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / length
× fix_prediction_before: ( - length ) / ( array.length )
× fix_prediction_after: ( zxjlrqnzopujplvntgha * zxjlrqnzopujplvntgha ) / ( array.length )

line_index: 171
bug_before_refactoring: { int time = params [ 0 ] ; while ( time > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} time -- ; android.util.Log . d ( "asdf" , ( " " + time ) ) ; } publishProgress () ; return null ; } <s> @ java.lang.Override protected java.lang.Void doInBackground ( java.lang.Integer . . . params ) { int time = params [ 0 ] ; while ( time > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} time -- ; android.util.Log . d ( "asdf" , ( " " + time ) ) ; } publishProgress () ; return null ; } <s> - added new item to menu  which allows to hide "add" button  in the top of ToDoList; - solved problems with current updating of visible information
bug_after_refactoring: { int sgbfcurflkvywblqmdbh = params [ 0 ] ; while ( sgbfcurflkvywblqmdbh > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} sgbfcurflkvywblqmdbh -- ; android.util.Log . d ( "asdf" , ( " " + sgbfcurflkvywblqmdbh ) ) ; } publishProgress () ; return null ; } <s> @ java.lang.Override protected java.lang.Void doInBackground ( java.lang.Integer . . . params ) { int sgbfcurflkvywblqmdbh = params [ 0 ] ; while ( sgbfcurflkvywblqmdbh > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} sgbfcurflkvywblqmdbh -- ; android.util.Log . d ( "asdf" , ( " " + sgbfcurflkvywblqmdbh ) ) ; } publishProgress () ; return null ; } <s> - added new item to menu  which allows to hide "add" button  in the top of ToDoList; - solved problems with current updating of visible information
fix_before_refactoring: { int time = ( params [ 0 ] ) + 1 ; while ( time > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} time -- ; } publishProgress () ; return null ; }
fix_after_refactoring: { int sgbfcurflkvywblqmdbh = ( params [ 0 ] ) + 1 ; while ( sgbfcurflkvywblqmdbh > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} sgbfcurflkvywblqmdbh -- ; } publishProgress () ; return null ; }
× fix_prediction_before: { int time = params [ 0 ] ; while ( time > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} time -- ; android.util.Log . d ( "asdf" , ( " " + time ) ) ; } publishProgress () ; return null ; }
× fix_prediction_after: { int sgbfcurflkvywblqmdbh = params [ 0 ] ; while ( sgbfcurflkvywblqmdbh > 0 ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) {} sgbfcurflkvywblqmdbh -- ; android.util.Log . d ( "asdf" , ( " " + sgbfcurflkvywblqmdbh ) ) ; } return null ; }

line_index: 172
bug_before_refactoring: { byte [] array = dbHandler . retrieveByteArrayFromDb () ; android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( array ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } <s> private void showSavedProfilePicture () { byte [] array = dbHandler . retrieveByteArrayFromDb () ; android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( array ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } <s> found bugs in viewing profile picture in app  need to fix
bug_after_refactoring: { byte [] mjdxhhovtyzdybewraer = dbHandler . retrieveByteArrayFromDb () ; android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( mjdxhhovtyzdybewraer ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } <s> private void showSavedProfilePicture () { byte [] mjdxhhovtyzdybewraer = dbHandler . retrieveByteArrayFromDb () ; android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( mjdxhhovtyzdybewraer ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } <s> found bugs in viewing profile picture in app  need to fix
fix_before_refactoring: { byte [] array = dbHandler . retrieveByteArrayFromDb () ; if ( array == null ) { profilePic . setImageResource ( defaultPic ) ; } else { android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( array ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } }
fix_after_refactoring: { byte [] mjdxhhovtyzdybewraer = dbHandler . retrieveByteArrayFromDb () ; if ( mjdxhhovtyzdybewraer == null ) { profilePic . setImageResource ( defaultPic ) ; } else { android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( mjdxhhovtyzdybewraer ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } }
× fix_prediction_before: { byte [] array = dbHandler . retrieveByteArrayFromDb () ; if ( array != null ) { android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( array ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } }
× fix_prediction_after: { byte [] mjdxhhovtyzdybewraer = dbHandler . retrieveByteArrayFromDb () ; if ( ( mjdxhhovtyzdybewraer ) != null ) { android.graphics.Bitmap bitmap = convertByteArrayToBitmap ( mjdxhhovtyzdybewraer ) ; if ( bitmap == null ) { profilePic . setImageResource ( defaultPic ) ; } else { profilePic . setImageBitmap ( bitmap ) ; bitmap . recycle () ; } } }

line_index: 174
bug_before_refactoring: if ( currentIndex < ( usedListModel . size () ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( currentIndex + 1 ) , selectedPres ) ; } <s> @ java.lang.Override public void mouseClicked ( java.awt.event.MouseEvent e ) { hu.gehorvath.lampsv.core.Preset selectedPres = jlUsedPresets . getSelectedValue () ; int currentIndex = usedListModel . indexOf ( selectedPres ) ; if ( currentIndex < ( usedListModel . size () ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( currentIndex + 1 ) , selectedPres ) ; } } <s> bugfixes
bug_after_refactoring: if ( gvwlkvrpaqyzbtkbhtfq < ( usedListModel . size () ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( gvwlkvrpaqyzbtkbhtfq + 1 ) , selectedPres ) ; } <s> @ java.lang.Override public void mouseClicked ( java.awt.event.MouseEvent e ) { hu.gehorvath.lampsv.core.Preset selectedPres = jlUsedPresets . getSelectedValue () ; int currentIndex = usedListModel . indexOf ( selectedPres ) ; if ( gvwlkvrpaqyzbtkbhtfq < ( usedListModel . size () ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( gvwlkvrpaqyzbtkbhtfq + 1 ) , selectedPres ) ; } } <s> bugfixes
fix_before_refactoring: if ( currentIndex < ( ( usedListModel . size () ) - 1 ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( currentIndex + 1 ) , selectedPres ) ; }
fix_after_refactoring: if ( gvwlkvrpaqyzbtkbhtfq < ( ( usedListModel . size () ) - 1 ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( gvwlkvrpaqyzbtkbhtfq + 1 ) , selectedPres ) ; }
× fix_prediction_before: if ( currentIndex < ( usedListModel . size () ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( currentIndex + 1 ) , selectedPres ) ; }
× fix_prediction_after: if ( gvwlkvrpaqyzbtkbhtfq <= ( usedListModel . size () ) ) { usedListModel . removeElement ( selectedPres ) ; usedListModel . add ( ( gvwlkvrpaqyzbtkbhtfq + 1 ) , selectedPres ) ; }

line_index: 175
bug_before_refactoring: boolean conditionIsTrue ( utilties.models.Game game ) { int data1 = getData ( this . data1 , game ) ; int data2 = getData ( this . data2 , game ) ; switch ( this . operator ) { case LESS_THAN : return data1 < data2 ; case GREATER_THAN : return data1 > data2 ; case LESS_THAN_OR_EQUAL_TO : return data1 <= data2 ; case GREATER_THAN_OR_EQUAL_TO : return data1 >= data2 ; case EQUALS : return data1 == data2 ; default: return false ; } } <s> boolean conditionIsTrue ( utilties.models.Game game ) { int data1 = getData ( this . data1 , game ) ; int data2 = getData ( this . data2 , game ) ; switch ( this . operator ) { case LESS_THAN : return data1 < data2 ; case GREATER_THAN : return data1 > data2 ; case LESS_THAN_OR_EQUAL_TO : return data1 <= data2 ; case GREATER_THAN_OR_EQUAL_TO : return data1 >= data2 ; case EQUALS : return data1 == data2 ; default: return false ; } } <s> Fixed bug in check class where CUP is making comparisons using player data
bug_after_refactoring: boolean conditionIsTrue ( utilties.models.Game game ) { int oqlpuamkelhysygrpvgv = getData ( this . oqlpuamkelhysygrpvgv , game ) ; int hrwvkefooqxlyydnftwt = getData ( this . hrwvkefooqxlyydnftwt , game ) ; switch ( this . operator ) { case LESS_THAN : return oqlpuamkelhysygrpvgv < hrwvkefooqxlyydnftwt ; case GREATER_THAN : return oqlpuamkelhysygrpvgv > hrwvkefooqxlyydnftwt ; case LESS_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv <= hrwvkefooqxlyydnftwt ; case GREATER_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv >= hrwvkefooqxlyydnftwt ; case EQUALS : return oqlpuamkelhysygrpvgv == hrwvkefooqxlyydnftwt ; default: return false ; } } <s> boolean conditionIsTrue ( utilties.models.Game game ) { int oqlpuamkelhysygrpvgv = getData ( this . oqlpuamkelhysygrpvgv , game ) ; int hrwvkefooqxlyydnftwt = getData ( this . hrwvkefooqxlyydnftwt , game ) ; switch ( this . operator ) { case LESS_THAN : return oqlpuamkelhysygrpvgv < hrwvkefooqxlyydnftwt ; case GREATER_THAN : return oqlpuamkelhysygrpvgv > hrwvkefooqxlyydnftwt ; case LESS_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv <= hrwvkefooqxlyydnftwt ; case GREATER_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv >= hrwvkefooqxlyydnftwt ; case EQUALS : return oqlpuamkelhysygrpvgv == hrwvkefooqxlyydnftwt ; default: return false ; } } <s> Fixed bug in check class where CUP is making comparisons using player data
fix_before_refactoring: boolean conditionIsTrue ( utilties.models.Game game , int id ) { int data1 = getData ( this . data1 , game , id ) ; int data2 = getData ( this . data2 , game , id ) ; switch ( this . operator ) { case LESS_THAN : return data1 < data2 ; case GREATER_THAN : return data1 > data2 ; case LESS_THAN_OR_EQUAL_TO : return data1 <= data2 ; case GREATER_THAN_OR_EQUAL_TO : return data1 >= data2 ; case EQUALS : return data1 == data2 ; default: return false ; } }
fix_after_refactoring: boolean conditionIsTrue ( utilties.models.Game game , int id ) { int oqlpuamkelhysygrpvgv = getData ( this . oqlpuamkelhysygrpvgv , game , id ) ; int hrwvkefooqxlyydnftwt = getData ( this . hrwvkefooqxlyydnftwt , game , id ) ; switch ( this . operator ) { case LESS_THAN : return oqlpuamkelhysygrpvgv < hrwvkefooqxlyydnftwt ; case GREATER_THAN : return oqlpuamkelhysygrpvgv > hrwvkefooqxlyydnftwt ; case LESS_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv <= hrwvkefooqxlyydnftwt ; case GREATER_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv >= hrwvkefooqxlyydnftwt ; case EQUALS : return oqlpuamkelhysygrpvgv == hrwvkefooqxlyydnftwt ; default: return false ; } }
× fix_prediction_before: boolean conditionIsTrue ( utilties.models.Game game ) { int data1 = getData ( this . data1 , game ) ; int data2 = getData ( this . data2 , game ) ; switch ( this . operator ) { case LESS_THAN : return data1 < data2 ; case GREATER_THAN : return data1 > data2 ; case LESS_THAN_OR_EQUAL_TO : return data1 <= data2 ; case GREATER_THAN_OR_EQUAL_TO : return data1 >= data2 ; case EQUALS : return data1 == data2 ; default: return false ; } }
× fix_prediction_after: boolean conditionIsTrue ( utilties.models.Game game ) { int oqlpuamkelhysygrpvgv = getData ( this . oqlpuamkelhysygrpvgv , game ) ; int hrwvkefooqxlyydnftwt = getData ( this . hrwvkefooqxlyydnftwt , game ) ; switch ( this . operator ) { case LESS_THAN : return oqlpuamkelhysygrpvgv < hrwvkefooqxlyydnftwt ; case GREATER_THAN : return oqlpuamkelhysygrpvgv > hrwvkefooqxlyydnftwt ; case LESS_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv <= hrwvkefooqxlyydnftwt ; case GREATER_THAN_OR_EQUAL_TO : return oqlpuamkelhysygrpvgv >= hrwvkefooqxlyydnftwt ; case EQUALS : return oqlpuam

line_index: 176
bug_before_refactoring: { this . table = content ; this . setContent ( content ) ; int l = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( l ) ; this . setMaxHeight ( l ) ; this . setPrefHeight ( l ) ; } <s> public void setTable ( javafx.scene.control.TableView < com.eiko.back.table.CellValue > content ) { this . table = content ; this . setContent ( content ) ; int l = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( l ) ; this . setMaxHeight ( l ) ; this . setPrefHeight ( l ) ; } <s> Deleted unneeded code  fixed logical error with appointment updates.
bug_after_refactoring: { this . table = content ; this . setContent ( content ) ; int udttkdyxnsxhdxbsuukb = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( udttkdyxnsxhdxbsuukb ) ; this . setMaxHeight ( udttkdyxnsxhdxbsuukb ) ; this . setPrefHeight ( udttkdyxnsxhdxbsuukb ) ; } <s> public void setTable ( javafx.scene.control.TableView < com.eiko.back.table.CellValue > content ) { this . table = content ; this . setContent ( content ) ; int udttkdyxnsxhdxbsuukb = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( udttkdyxnsxhdxbsuukb ) ; this . setMaxHeight ( udttkdyxnsxhdxbsuukb ) ; this . setPrefHeight ( udttkdyxnsxhdxbsuukb ) ; } <s> Deleted unneeded code  fixed logical error with appointment updates.
fix_before_refactoring: { this . table = content ; this . setContent ( content ) ; if ( ( table ) == null ) return; int l = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( l ) ; this . setMaxHeight ( l ) ; this . setPrefHeight ( l ) ; }
fix_after_refactoring: { this . table = content ; this . setContent ( content ) ; if ( ( table ) == nuludttkdyxnsxhdxbsuukb ) return; int udttkdyxnsxhdxbsuukb = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( udttkdyxnsxhdxbsuukb ) ; this . setMaxHeight ( udttkdyxnsxhdxbsuukb ) ; this . setPrefHeight ( udttkdyxnsxhdxbsuukb ) ; }
× fix_prediction_before: { this . table = content ; this . setContent ( content ) ; int l = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( l ) ; this . setMaxHeight ( l ) ; this . setPrefHeight ( l ) ; }
× fix_prediction_after: { this . table = content ; this . setContent ( content ) ; int udttkdyxnsxhdxbsuukb = ( ( table . getItems () . size () ) + 1 ) * 40 ; this . setMinHeight ( udttkdyxnsxhdxbsuukb ) ; this . setMaxHeight ( udttkdyxnsxhdxbsuukb ) ; this . setPrefHeight ( udttkdyxnsxhdxbsuukb ) ; }

line_index: 177
bug_before_refactoring: start = mNachoTextView . getText () . toString () . indexOf ( communication ) <s> private void addChip ( java.lang.String communication ) { if ( ( mNachoTextView ) != null ) { mNachoTextView . append ( communication ) ; int start = mNachoTextView . getText () . toString () . indexOf ( communication ) ; int last = mNachoTextView . getText () . length () ; mNachoTextView . chipify ( start , last ) ; } else android.util.Log . e ( mx.com.quiin.contactpicker.ui.ContactPickerFragment.TAG , "mNachoTextView is null" ) ; } <s> ! Fixed issue when adding chip.
bug_after_refactoring: lwttzrhnroxespiueavc = mNachoTextView . getText () . toString () . indexOf ( communication ) <s> private void addChip ( java.lang.String communication ) { if ( ( mNachoTextView ) != null ) { mNachoTextView . append ( communication ) ; int lwttzrhnroxespiueavc = mNachoTextView . getText () . toString () . indexOf ( communication ) ; int last = mNachoTextView . getText () . length () ; mNachoTextView . chipify ( start , last ) ; } else android.util.Log . e ( mx.com.quiin.contactpicker.ui.ContactPickerFragment.TAG , "mNachoTextView is null" ) ; } <s> ! Fixed issue when adding chip.
fix_before_refactoring: start = ( mNachoTextView . getText () . length () ) - ( communication . length () )
fix_after_refactoring: lwttzrhnroxespiueavc = ( mNachoTextView . getText () . length () ) - ( communication . length () )
× fix_prediction_before: start = mNachoTextView . getText () . toString () . indexOf ( communication )
× fix_prediction_after: lwttzrhnroxespiueavc = mNachoTextView . getText () . toString () . indexOf ( communication )

line_index: 178
bug_before_refactoring: { java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] barcodeToInt = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { barcodeToInt [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return barcodeToInt ; } <s> public static int [] barcodeToIntArray ( java.lang.String barcode ) { java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] barcodeToInt = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { barcodeToInt [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return barcodeToInt ; } <s> Fixed bug for getting region code from UPC_A barcode Added method for getting the check digit Added method for getting regional code with 0 if it size < 3 Update gradle version
bug_after_refactoring: { java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] znhonupwdyfidivcdnde = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { znhonupwdyfidivcdnde [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return znhonupwdyfidivcdnde ; } <s> public static int [] barcodeToIntArray ( java.lang.String barcode ) { java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] znhonupwdyfidivcdnde = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { znhonupwdyfidivcdnde [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return znhonupwdyfidivcdnde ; } <s> Fixed bug for getting region code from UPC_A barcode Added method for getting the check digit Added method for getting regional code with 0 if it size < 3 Update gradle version
fix_before_refactoring: { if ( barcode == null ) { return new int [ 0 ] ; } java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] barcodeToInt = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { barcodeToInt [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return barcodeToInt ; }
fix_after_refactoring: { if ( barcode == null ) { return new int [ 0 ] ; } java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] znhonupwdyfidivcdnde = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { znhonupwdyfidivcdnde [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return znhonupwdyfidivcdnde ; }
× fix_prediction_before: { java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] barcodeToInt = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { barcodeToInt [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return barcodeToInt ; }
× fix_prediction_after: { java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] znhonupwdyfidivcdnde = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { znhonupwdyfidivcdnde [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return znhonupwdyfidivcdnde ; }

line_index: 179
bug_before_refactoring: { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int mapSize = gndData . getMapSize () ; engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( ( mapSize == 0 ? 0 : gndContent . getSize () ) ) ; if ( mapSize > 0 ) out.iterator . putNextContentPacket ( gndData . getContentPacket () ) ; out.iterator . trimPacket () ; return out ; } <s> public engine.network.packet.Packet getContentPacket () { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int mapSize = gndData . getMapSize () ; engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( ( mapSize == 0 ? 0 : gndContent . getSize () ) ) ; if ( mapSize > 0 ) out.iterator . putNextContentPacket ( gndData . getContentPacket () ) ; out.iterator . trimPacket () ; return out ; } <s> Fixes issue in active buff content packet making GND content twice.
bug_after_refactoring: { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int tqavmobpbyuykaxkthpv = gndData . getMapSize () ; engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( ( tqavmobpbyuykaxkthpv == 0 ? 0 : gndContent . getSize () ) ) ; if ( tqavmobpbyuykaxkthpv > 0 ) out.iterator . putNextContentPacket ( gndData . getContentPacket () ) ; out.iterator . trimPacket () ; return out ; } <s> public engine.network.packet.Packet getContentPacket () { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int tqavmobpbyuykaxkthpv = gndData . getMapSize () ; engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( ( tqavmobpbyuykaxkthpv == 0 ? 0 : gndContent . getSize () ) ) ; if ( tqavmobpbyuykaxkthpv > 0 ) out.iterator . putNextContentPacket ( gndData . getContentPacket () ) ; out.iterator . trimPacket () ; return out ; } <s> Fixes issue in active buff content packet making GND content twice.
fix_before_refactoring: { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int mapSize = gndData . getMapSize () ; if ( mapSize == 0 ) { out.iterator . putNextShortUnsigned ( 0 ) ; } else { engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( gndContent . getSize () ) ; out.iterator . putNextContentPacket ( gndContent ) ; } out.iterator . trimPacket () ; return out ; }
fix_after_refactoring: { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int tqavmobpbyuykaxkthpv = gndData . getMapSize () ; if ( tqavmobpbyuykaxkthpv == 0 ) { out.iterator . putNextShortUnsigned ( 0 ) ; } else { engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( gndContent . getSize () ) ; out.iterator . putNextContentPacket ( gndContent ) ; } out.iterator . trimPacket () ; return out ; }
× fix_prediction_before: { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int mapSize = gndData . getMapSize () ; engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextShortUnsigned ( ( mapSize == 0 ? 0 : gndContent . getSize () ) ) ; if ( mapSize > 0 ) out.iterator . putNextContentPacket ( gndData . getContentPacket () ) ; out.iterator . trimPacket () ; return out ; }
× fix_prediction_after: { engine.network.packet.Packet out = engine.network.packet.Packet . getNewContentPacket ( Packet.MAX_PACKET_SIZE ) ; out.iterator . putNextShortUnsigned ( buff . getID () ) ; out.iterator . putNextInt ( getDurationLeft () ) ; int tqavmobpbyuykaxkthpv = gndData . getMapSize () ; engine.network.packet.Packet gndContent = gndData . getContentPacket () ; out.iterator . putNextContentPacket ( gndData . getContentPacket () ) ; out.iterator . trimPacket () ; return out ; }

line_index: 180
bug_before_refactoring: short ct = 1 ; <s> public static void addTable ( br.com.mvbos.mymer.el.TableElement te , java.lang.StringBuilder sb ) { br.com.mvbos.mymer.sync.Differ.entityToScript . setMode ( IEntityToScript.Mode.PLAIN ) ; br.com.mvbos.mymer.sync.Differ.entityToScript . addTable ( te , sb ) ; short ct = 1 ; for ( br.com.mvbos.mymer.xml.field.Field f : te . getFields () ) { br.com.mvbos.mymer.sync.Differ.entityToScript . addField ( te , f , ( ct ++ ) , sb ) ; } } <s> Revert "Bug fix"  This reverts commit 8b136ce6229b5f592e1b385898e5f57571389ec7.
bug_after_refactoring: short asyhrdxrctantntcugkc = 1 ; <s> public static void addTable ( br.com.mvbos.mymer.el.TableElement te , java.lang.StringBuilder sb ) { br.com.mvbos.mymer.sync.Differ.entityToScript . setMode ( IEntityToScript.Mode.PLAIN ) ; br.com.mvbos.mymer.sync.Differ.entityToScript . addTable ( te , sb ) ; short asyhrdxrctantntcugkc = 1 ; for ( br.com.mvbos.mymer.xml.field.Field f : te . getFields () ) { br.com.mvbos.mymer.sync.Differ.entityToScript . addField ( te , f , ( ct ++ ) , sb ) ; } } <s> Revert "Bug fix"  This reverts commit 8b136ce6229b5f592e1b385898e5f57571389ec7.
fix_before_refactoring: int ct = 1 ;
fix_after_refactoring: int asyhrdxrctantntcugkc = 1 ;
× fix_prediction_before: short ct = 1 ;
× fix_prediction_after: short asyhrdxrctantntcugkc = 1 ;

line_index: 181
bug_before_refactoring: private org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int idx = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( idx , d . getMetrics () . toArray () ) ; idx += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret ) . getCovarianceMatrix () ; } <s> private org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int idx = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( idx , d . getMetrics () . toArray () ) ; idx += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret ) . getCovarianceMatrix () ; } <s> Refactoring of MCD combination code  tests and bug fixes. Parallel implementation now _completely_ agrees with default method
bug_after_refactoring: private org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int qfnotfnluufesljlvjcr = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( qfnotfnluufesljlvjcr , d . getMetrics () . toArray () ) ; qfnotfnluufesljlvjcr += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret ) . getCovarianceMatrix () ; } <s> private org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int qfnotfnluufesljlvjcr = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( qfnotfnluufesljlvjcr , d . getMetrics () . toArray () ) ; qfnotfnluufesljlvjcr += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret ) . getCovarianceMatrix () ; } <s> Refactoring of MCD combination code  tests and bug fixes. Parallel implementation now _completely_ agrees with default method
fix_before_refactoring: public org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int idx = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( idx , d . getMetrics () . toArray () ) ; idx += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret , false ) . getCovarianceMatrix () ; }
fix_after_refactoring: public org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int qfnotfnluufesljlvjcr = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( qfnotfnluufesljlvjcr , d . getMetrics () . toArray () ) ; qfnotfnluufesljlvjcr += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret , false ) . getCovarianceMatrix () ; }
× fix_prediction_before: public org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int idx = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( idx , d . getMetrics () . toArray () ) ; idx += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret ) . getCovarianceMatrix () ; }
× fix_prediction_after: private org.apache.commons.math3.linear.RealMatrix getCovariance ( java.util.List < ? extends macrobase.datamodel.HasMetrics > data ) { org.apache.commons.math3.linear.RealMatrix ret = new org.apache.commons.math3.linear.Array2DRowRealMatrix ( data . size () , p ) ; int qfnotfnluufesljlvjcr = 0 ; for ( macrobase.datamodel.HasMetrics d : data ) { ret . setRow ( qfnotfnluufesljlvjcr , d . getMetrics () . toArray () ) ; qfnotfnluufesljlvjcr += 1 ; } return new org.apache.commons.math3.stat.correlation.Covariance ( ret ) . getCovarianceMatrix () ; }

line_index: 183
bug_before_refactoring: { double tmppr = 0.0 ; double alpha = context . getConfiguration () . getDouble ( "alpha" , 0.85 ) ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { tmppr += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( ( tmppr * alpha ) ) ) ; context . write ( title , pr ) ; } <s> public void reduce ( org.apache.hadoop.io.Text key , java.lang.Iterable < org.apache.hadoop.io.DoubleWritable > values , cloudCompu.PageRankMr.Context context ) throws java.io.IOException , java.lang.InterruptedException { double tmppr = 0.0 ; double alpha = context . getConfiguration () . getDouble ( "alpha" , 0.85 ) ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { tmppr += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( ( tmppr * alpha ) ) ) ; context . write ( title , pr ) ; } <s> Fix comput error
bug_after_refactoring: { double kcyctizcitootiswtkll = 0.0 ; double shnglaxlhtsewxjeffck = context . getConfiguration () . getDouble ( "shnglaxlhtsewxjeffck" , 0.85 ) ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { kcyctizcitootiswtkll += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( ( kcyctizcitootiswtkll * shnglaxlhtsewxjeffck ) ) ) ; context . write ( title , pr ) ; } <s> public void reduce ( org.apache.hadoop.io.Text key , java.lang.Iterable < org.apache.hadoop.io.DoubleWritable > values , cloudCompu.PageRankMr.Context context ) throws java.io.IOException , java.lang.InterruptedException { double kcyctizcitootiswtkll = 0.0 ; double shnglaxlhtsewxjeffck = context . getConfiguration () . getDouble ( "shnglaxlhtsewxjeffck" , 0.85 ) ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { kcyctizcitootiswtkll += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( ( kcyctizcitootiswtkll * shnglaxlhtsewxjeffck ) ) ) ; context . write ( title , pr ) ; } <s> Fix comput error
fix_before_refactoring: { double tmppr = 0.0 ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { tmppr += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( tmppr ) ) ; context . write ( title , pr ) ; }
fix_after_refactoring: { double kcyctizcitootiswtkll = 0.0 ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { kcyctizcitootiswtkll += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( kcyctizcitootiswtkll ) ) ; context . write ( title , pr ) ; }
× fix_prediction_before: { double tmppr = 0.0 ; double alpha = context . getConfiguration () . getDouble ( "alpha" , 0.85 ) ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { tmppr += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( ( tmppr * alpha ) ) ) ; context . write ( title , pr ) ; }
× fix_prediction_after: { double kcyctizcitootiswtkll = 0.0 ; double shnglaxlhtsewxjeffck = context . getConfiguration () . getDouble ( "shnglaxlhtsewxjeffck" , 0.85 ) ; for ( org.apache.hadoop.io.DoubleWritable val : values ) { kcyctizcitootiswtkll += val . get () ; } title . set ( "Sum" ) ; pr . set ( java.lang.String . valueOf ( ( kcyctizcitootiswtkll * shnglaxlhtsewxjeffck ) ) ) ; context . write ( title , pr ) ; }

line_index: 188
bug_before_refactoring: @ java.lang.Override @ java.lang.SuppressWarnings ( value = "unchecked" ) public V get ( ) throws java.io.IOException { synchronized ( monkey ) { long ai = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( ai > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( ai ) ) ] ) ) ; } return null ; } } <s> @ java.lang.Override @ java.lang.SuppressWarnings ( value = "unchecked" ) public V get ( ) throws java.io.IOException { synchronized ( monkey ) { long ai = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( ai > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( ai ) ) ] ) ) ; } return null ; } } <s> fixed null filer and monkey issues in TxKeyObjectStore.
bug_after_refactoring: @ java.lang.Override @ java.lang.SuppressWarnings ( value = "unchecked" ) public V get ( ) throws java.io.IOException { synchronized ( monkey ) { long xzndnbarnexsvvblqije = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( xzndnbarnexsvvblqije > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( xzndnbarnexsvvblqije ) ) ] ) ) ; } return null ; } } <s> @ java.lang.Override @ java.lang.SuppressWarnings ( value = "unchecked" ) public V get ( ) throws java.io.IOException { synchronized ( monkey ) { long xzndnbarnexsvvblqije = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( xzndnbarnexsvvblqije > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( xzndnbarnexsvvblqije ) ) ] ) ) ; } return null ; } } <s> fixed null filer and monkey issues in TxKeyObjectStore.
fix_before_refactoring: @ java.lang.Override @ java.lang.SuppressWarnings ( value = "unchecked" ) public V get ( ) throws java.io.IOException { if ( ( monkey != null ) && ( filer != null ) ) { synchronized ( monkey ) { long ai = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( ai > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( ai ) ) ] ) ) ; } } } return null ; }
fix_after_refactoring: @ java.lang.Override @ java.lang.SuppressWarnings ( value = "unchecked" ) public V get ( ) throws java.io.IOException { if ( ( monkey != null ) && ( filer != null ) ) { synchronized ( monkey ) { long xzndnbarnexsvvblqije = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( xzndnbarnexsvvblqije > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( xzndnbarnexsvvblqije ) ) ] ) ) ; } } } return null ; }
× fix_prediction_before: @ java.lang.Override public V get ( ) throws java.io.IOException { long ai = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( ai > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( ai ) ) ] ) ) ; } return null ; }
× fix_prediction_after: @ java.lang.Override public V get ( ) throws java.io.IOException { synchronized ( monkey ) { long xzndnbarnexsvvblqije = MapStore.INSTANCE . get ( filer , monkey , keyBytes ) ; if ( xzndnbarnexsvvblqije > ( - 1 ) ) { return ( ( V ) ( values [ ( ( int ) ( xzndnbarnexsvvblqije ) ) ] ) ) ; } return null ; } }

line_index: 189
bug_before_refactoring: public long [] getMembersList () { java.lang.String [] list = this . members . split ( "," ) ; long [] memberLists = new long [ list.length ] ; for ( int i = 0 ; i < ( memberLists.length ) ; i ++ ) memberLists [ i ] = java.lang.Long . parseLong ( list [ i ] ) ; return memberLists ; } <s> public long [] getMembersList () { java.lang.String [] list = this . members . split ( "," ) ; long [] memberLists = new long [ list.length ] ; for ( int i = 0 ; i < ( memberLists.length ) ; i ++ ) memberLists [ i ] = java.lang.Long . parseLong ( list [ i ] ) ; return memberLists ; } <s> fixed bug about remove the last member in the team
bug_after_refactoring: public long [] getMembersList () { java.lang.String [] list = this . members . split ( "," ) ; long [] jbrirlejlpjjevozukkm = new long [ list.length ] ; for ( int i = 0 ; i < ( jbrirlejlpjjevozukkm.length ) ; i ++ ) jbrirlejlpjjevozukkm [ i ] = java.lang.Long . parseLong ( list [ i ] ) ; return jbrirlejlpjjevozukkm ; } <s> public long [] getMembersList () { java.lang.String [] list = this . members . split ( "," ) ; long [] jbrirlejlpjjevozukkm = new long [ list.length ] ; for ( int i = 0 ; i < ( jbrirlejlpjjevozukkm.length ) ; i ++ ) jbrirlejlpjjevozukkm [ i ] = java.lang.Long . parseLong ( list [ i ] ) ; return jbrirlejlpjjevozukkm ; } <s> fixed bug about remove the last member in the team
fix_before_refactoring: public java.util.List < java.lang.Long > getMembersList () { java.util.List < java.lang.Long > memberLists = new java.util.ArrayList < java.lang.Long > () ; if ( ( this . members . length () ) <= 0 ) return memberLists ; java.lang.String [] list = this . members . split ( "," ) ; for ( int i = 0 ; i < ( list.length ) ; i ++ ) memberLists . add ( java.lang.Long . parseLong ( list [ i ] ) ) ; return memberLists ; }
fix_after_refactoring: public java.util.List < java.lang.Long > getMembersList () { java.util.List < java.lang.Long > jbrirlejlpjjevozukkm = new java.util.ArrayList < java.lang.Long > () ; if ( ( this . members . length () ) <= 0 ) return jbrirlejlpjjevozukkm ; java.lang.String [] list = this . members . split ( "," ) ; for ( int i = 0 ; i < ( list.length ) ; i ++ ) jbrirlejlpjjevozukkm . add ( java.lang.Long . parseLong ( list [ i ] ) ) ; return jbrirlejlpjjevozukkm ; }
× fix_prediction_before: private long [] getMembersList () { java.lang.String [] list = this . members . split ( "," ) ; long [] memberLists = new long [ list.length ] ; for ( int i = 0 ; i < ( memberLists.length ) ; i ++ ) memberLists [ i ] = java.lang.Long . parseLong ( list [ i ] ) ; return memberLists ; }
× fix_prediction_after: private long [] getMembersList () { java.lang.String [] list = this . members . split ( "," ) ; long [] jbrirlejlpjjevozukkm = new long [ list.length ] ; for ( int i = 0 ; i < ( jbrirlejlpjjevozukkm.length ) ; i ++ ) jbrirlejlpjjevozukkm [ i ] = java.lang.Long . parseLong ( list [ i ] ) ; return jbrirlejlpjjevozukkm ; }

line_index: 191
bug_before_refactoring: { java.util.Random rand = new java.util.Random () ; int top = ( max - min ) + 1 ; if ( top <= 0 ) { top = 1 ; } int randomInt = ( rand . nextInt ( top ) ) + min ; return randomInt ; } <s> static int randNum ( int min , int max ) { java.util.Random rand = new java.util.Random () ; int top = ( max - min ) + 1 ; if ( top <= 0 ) { top = 1 ; } int randomInt = ( rand . nextInt ( top ) ) + min ; return randomInt ; } <s> Bug Fixes
bug_after_refactoring: { java.util.Random rand = new java.util.Random () ; int qacnipgjxxtwyyrfdkoe = ( max - min ) + 1 ; if ( qacnipgjxxtwyyrfdkoe <= 0 ) { qacnipgjxxtwyyrfdkoe = 1 ; } int ybckiqwbaxdizkvkoekk = ( rand . nextInt ( qacnipgjxxtwyyrfdkoe ) ) + min ; return ybckiqwbaxdizkvkoekk ; } <s> static int randNum ( int min , int max ) { java.util.Random rand = new java.util.Random () ; int qacnipgjxxtwyyrfdkoe = ( max - min ) + 1 ; if ( qacnipgjxxtwyyrfdkoe <= 0 ) { qacnipgjxxtwyyrfdkoe = 1 ; } int ybckiqwbaxdizkvkoekk = ( rand . nextInt ( qacnipgjxxtwyyrfdkoe ) ) + min ; return ybckiqwbaxdizkvkoekk ; } <s> Bug Fixes
fix_before_refactoring: { java.util.Random rand = new java.util.Random () ; if ( min > max ) { min = 0 ; max = 0 ; } int top = ( max - min ) + 1 ; if ( top <= 0 ) { top = 1 ; } int randomInt = ( rand . nextInt ( top ) ) + min ; return randomInt ; }
fix_after_refactoring: { java.util.Random rand = new java.util.Random () ; if ( min > max ) { min = 0 ; max = 0 ; } int qacnipgjxxtwyyrfdkoe = ( max - min ) + 1 ; if ( qacnipgjxxtwyyrfdkoe <= 0 ) { qacnipgjxxtwyyrfdkoe = 1 ; } int ybckiqwbaxdizkvkoekk = ( rand . nextInt ( qacnipgjxxtwyyrfdkoe ) ) + min ; return ybckiqwbaxdizkvkoekk ; }
× fix_prediction_before: { java.util.Random rand = new java.util.Random () ; int top = ( max - min ) + 1 ; if ( top <= 0 ) { top = 1 ; } int randomInt = ( rand . nextInt ( top ) ) + min ; return randomInt ; }
× fix_prediction_after: { java.util.Random rand = new java.util.Random () ; int qacnipgjxxtwyyrfdkoe = ( max - min ) + 1 ; if ( qacnipgjxxtwyyrfdkoe <= 0 ) { qacnipgjxxtwyyrfdkoe = 1 ; } return ( rand . nextInt ( qacnipgjxxtwyyrfdkoe ) ) + min ; }

line_index: 192
bug_before_refactoring: { int classifiedPositive = 0 ; int classifiedNegative = 0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { classifiedPositive += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; classifiedNegative += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( classifiedPositive > classifiedNegative ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; } <s> private ch.bfh.bti7535.w2016.data.Document test ( ch.bfh.bti7535.w2016.data.Document document ) { int classifiedPositive = 0 ; int classifiedNegative = 0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { classifiedPositive += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; classifiedNegative += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( classifiedPositive > classifiedNegative ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; } <s> Fixes calculation error which was appeared because of wrong data types. Optimizes Feature content
bug_after_refactoring: { int bwujetltljuskbhtmstl = 0 ; int rbmdyvtxqkxnzisyknpx = 0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { bwujetltljuskbhtmstl += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; rbmdyvtxqkxnzisyknpx += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( bwujetltljuskbhtmstl > rbmdyvtxqkxnzisyknpx ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; } <s> private ch.bfh.bti7535.w2016.data.Document test ( ch.bfh.bti7535.w2016.data.Document document ) { int bwujetltljuskbhtmstl = 0 ; int rbmdyvtxqkxnzisyknpx = 0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { bwujetltljuskbhtmstl += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; rbmdyvtxqkxnzisyknpx += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( bwujetltljuskbhtmstl > rbmdyvtxqkxnzisyknpx ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; } <s> Fixes calculation error which was appeared because of wrong data types. Optimizes Feature content
fix_before_refactoring: { double classifiedPositive = 0.0 ; double classifiedNegative = 0.0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { classifiedPositive += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; classifiedNegative += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( classifiedPositive > classifiedNegative ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; }
fix_after_refactoring: { double bwujetltljuskbhtmstl = 0.0 ; double rbmdyvtxqkxnzisyknpx = 0.0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { bwujetltljuskbhtmstl += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; rbmdyvtxqkxnzisyknpx += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( bwujetltljuskbhtmstl > rbmdyvtxqkxnzisyknpx ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; }
× fix_prediction_before: { int classifiedPositive = 0 ; int classifiedNegative = 0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { classifiedPositive += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; classifiedNegative += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( classifiedPositive > classifiedNegative ? ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; }
× fix_prediction_after: { int bwujetltljuskbhtmstl = 0 ; int rbmdyvtxqkxnzisyknpx = 0 ; for ( ch.bfh.bti7535.w2016.algorithm.features.AbstractFeature feature : featurePipeline ) { bwujetltljuskbhtmstl += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_POSITIVE ) ; rbmdyvtxqkxnzisyknpx += calcProbabilityTimesOccurrence ( feature , Classification.SENTIMENT_NEGATIVE ) ; } document . setTestResult ( ( bwujetltljuskb7535.w2016.data.Classification.SENTIMENT_POSITIVE : ch.bfh.bti7535.w2016.data.Classification.SENTIMENT_NEGATIVE ) ) ; return document ; }

line_index: 193
bug_before_refactoring: { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] cached = loadFromCache ( id ) ; if ( cached != null ) { return cached ; } } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG ) ; } <s> @ javax.annotation.Nonnull private byte [] loadFromServerFirst ( java.lang.String id ) { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] cached = loadFromCache ( id ) ; if ( cached != null ) { return cached ; } } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG ) ; } <s> Fix batch authentication error message
bug_after_refactoring: { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] oyuuwyafkitzjpiderwg = loadFromCache ( id ) ; if ( oyuuwyafkitzjpiderwg != null ) { return oyuuwyafkitzjpiderwg ; } } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG ) ; } <s> @ javax.annotation.Nonnull private byte [] loadFromServerFirst ( java.lang.String id ) { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] oyuuwyafkitzjpiderwg = loadFromCache ( id ) ; if ( oyuuwyafkitzjpiderwg != null ) { return oyuuwyafkitzjpiderwg ; } } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG ) ; } <s> Fix batch authentication error message
fix_before_refactoring: { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] cached = loadFromCache ( id ) ; if ( cached != null ) { return cached ; } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG , serverException ) ; } }
fix_after_refactoring: { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] oyuuwyafkitzjpiderwg = loadFromCache ( id ) ; if ( oyuuwyafkitzjpiderwg != null ) { return oyuuwyafkitzjpiderwg ; } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG , serverException ) ; } }
× fix_prediction_before: { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] cached = loadFromCache ( id ) ; if ( cached != null ) { return cached ; } } return null ; }
× fix_prediction_after: { try { return loadFromServer ( id ) ; } catch ( java.lang.Exception serverException ) { if ( ( serverException . getCause () ) instanceof org.sonar.api.utils.HttpDownloader.HttpException ) { throw serverException ; } byte [] oyuuwyafkitzjpiderwg = loadFromCache ( id ) ; if ( oyuuwyafkitzjpiderwg != null ) { return oyuuwyafkitzjpiderwg ; } } throw new java.lang.IllegalStateException ( org.sonar.batch.bootstrap.WSLoader.FAIL_MSG ) ; }

line_index: 194
bug_before_refactoring: { if ( event . getValueIsAdjusting () ) { return; } int [] selectedRows = table . getSelectedRows () ; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( selectedRows [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; } <s> public void valueChanged ( javax.swing.event.ListSelectionEvent event ) { if ( event . getValueIsAdjusting () ) { return; } int [] selectedRows = table . getSelectedRows () ; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( selectedRows [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; } <s> keypointPannel bug fixed
bug_after_refactoring: { if ( event . getValueIsAdjusting () ) { return; } int [] tsrmefkcxqvsuxxidrqj = table . getSelectedRows () ; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( tsrmefkcxqvsuxxidrqj [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; } <s> public void valueChanged ( javax.swing.event.ListSelectionEvent event ) { if ( event . getValueIsAdjusting () ) { return; } int [] tsrmefkcxqvsuxxidrqj = table . getSelectedRows () ; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( tsrmefkcxqvsuxxidrqj [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; } <s> keypointPannel bug fixed
fix_before_refactoring: { if ( event . getValueIsAdjusting () ) { return; } int [] selectedRows = table . getSelectedRows () ; if ( ( selectedRows.length ) == 0 ) return; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( selectedRows [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; }
fix_after_refactoring: { if ( event . getValueIsAdjusting () ) { return; } int [] tsrmefkcxqvsuxxidrqj = table . getSelectedRows () ; if ( ( tsrmefkcxqvsuxxidrqj.length ) == 0 ) return; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( tsrmefkcxqvsuxxidrqj [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; }
× fix_prediction_before: { if ( event . getValueIsAdjusting () ) { return; } int [] selectedRows = table . getSelectedRows () ; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( selectedRows [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; if ( ( mainFrame ) != null ) { mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; } }
× fix_prediction_after: { if ( event . getValueIsAdjusting () ) { return; } int [] tsrmefkcxqvsuxxidrqj = table . getSelectedRows () ; java.lang.String id = ( ( java.lang.String ) ( table . getValueAt ( tsrmefkcxqvsuxxidrqj [ 0 ] , 0 ) ) ) ; java.lang.Double xPosition = eventDataIDPositionMap . get ( id . trim () ) ; if ( ( mainFrame ) != null ) { mainFrame . getGraph () . showEventVerticalPosition ( xPosition ) ; } }

line_index: 195
bug_before_refactoring: { double pricePerFifthMile = 0.5 ; double totalFare = 0.0 ; double overTwoPassengerCharge = 2.0 ; double dropOffCharge = 2.5 ; double distance = 10.5 ; int numberOfPassengers = 5 ; if ( numberOfPassengers > 2 ) { totalFare = overTwoPassengerCharge * ( numberOfPassengers - 2 ) ; } totalFare += dropOffCharge + ( distance * pricePerFifthMile ) ; assertEquals ( 13.75 , totalFare , 0.1 ) ; } <s> @ dataClasses.Test public void testCalculateFare () { double pricePerFifthMile = 0.5 ; double totalFare = 0.0 ; double overTwoPassengerCharge = 2.0 ; double dropOffCharge = 2.5 ; double distance = 10.5 ; int numberOfPassengers = 5 ; if ( numberOfPassengers > 2 ) { totalFare = overTwoPassengerCharge * ( numberOfPassengers - 2 ) ; } totalFare += dropOffCharge + ( distance * pricePerFifthMile ) ; assertEquals ( 13.75 , totalFare , 0.1 ) ; } <s> //Fixed minor issue in test class
bug_after_refactoring: { double xjzpximytrtopavxwmag = 0.5 ; double lyniwqjqwkexixexaszy = 0.0 ; double hkvgveajzypgmkjtjyag = 2.0 ; double hrjmroaoasuzzlbzaatg = 2.5 ; double bvcfdxisndsdfexoslwh = 10.5 ; int cjegbvmnqluvrqoxpusn = 5 ; if ( cjegbvmnqluvrqoxpusn > 2 ) { lyniwqjqwkexixexaszy = hkvgveajzypgmkjtjyag * ( cjegbvmnqluvrqoxpusn - 2 ) ; } lyniwqjqwkexixexaszy += hrjmroaoasuzzlbzaatg + ( bvcfdxisndsdfexoslwh * xjzpximytrtopavxwmag ) ; assertEquals ( 13.75 , lyniwqjqwkexixexaszy , 0.1 ) ; } <s> @ dataClasses.Test public void testCalculateFare () { double xjzpximytrtopavxwmag = 0.5 ; double lyniwqjqwkexixexaszy = 0.0 ; double hkvgveajzypgmkjtjyag = 2.0 ; double hrjmroaoasuzzlbzaatg = 2.5 ; double bvcfdxisndsdfexoslwh = 10.5 ; int cjegbvmnqluvrqoxpusn = 5 ; if ( cjegbvmnqluvrqoxpusn > 2 ) { lyniwqjqwkexixexaszy = hkvgveajzypgmkjtjyag * ( cjegbvmnqluvrqoxpusn - 2 ) ; } lyniwqjqwkexixexaszy += hrjmroaoasuzzlbzaatg + ( bvcfdxisndsdfexoslwh * xjzpximytrtopavxwmag ) ; assertEquals ( 13.75 , lyniwqjqwkexixexaszy , 0.1 ) ; } <s> //Fixed minor issue in test class
fix_before_refactoring: { double pricePerFifthMile = 0.5 ; double totalFare = 0.0 ; double overTwoPassengerCharge = 2.0 ; double dropOffCharge = 2.5 ; double distance = 10.5 ; int numberOfPassengers = 5 ; if ( numberOfPassengers > 2 ) { totalFare = overTwoPassengerCharge * ( numberOfPassengers - 2 ) ; } totalFare += dropOffCharge ; totalFare += distance * pricePerFifthMile ; assertEquals ( 13.75 , totalFare , 0.1 ) ; }
fix_after_refactoring: { double xjzpximytrtopavxwmag = 0.5 ; double lyniwqjqwkexixexaszy = 0.0 ; double hkvgveajzypgmkjtjyag = 2.0 ; double hrjmroaoasuzzlbzaatg = 2.5 ; double bvcfdxisndsdfexoslwh = 10.5 ; int cjegbvmnqluvrqoxpusn = 5 ; if ( cjegbvmnqluvrqoxpusn > 2 ) { lyniwqjqwkexixexaszy = hkvgveajzypgmkjtjyag * ( cjegbvmnqluvrqoxpusn - 2 ) ; } lyniwqjqwkexixexaszy += hrjmroaoasuzzlbzaatg ; lyniwqjqwkexixexaszy += bvcfdxisndsdfexoslwh * xjzpximytrtopavxwmag ; assertEquals ( 13.75 , lyniwqjqwkexixexaszy , 0.1 ) ; }
× fix_prediction_before: { double pricePerFifthMile = 0.5 ; double totalFare = 0.0 ; double overTwoPassengerCharge = 2.0 ; double dropOffCharge = 2.5 ; double distance = 10.5 ; int numberOfPassengers = 5 ; if ( numberOfPassengers > 2 ) { totalFare = overTwoPassengerCharge * ( numberOfPassengers - 2 ) ; } totalFare += dropOffCharge + ( distance * pricePerFifthMile ) ; assertEquals ( 13.75 , totalFare , 0.1 ) ; }
× fix_prediction_after: { double xjzpximytrtopavxwmag = 0.5 ; double Lyniwqjqwkexixexaszy = 0.0 ; double hkvgveajzypgmkjtjyag = 2.0 ; double hrjmroaoasuzzlbzaatg = 2.5 ; double bvcfdxisndsdfexoslwh = 10.5 ; int cjegbvmnqluvrqoxpusn = 5 ; if ( cjegbvmnqluvrqoxpusn > 2 ) { lyniwqjqwkexixexaszy = hkvgveajzypgmkjtjyag * ( cjegbvmnqluvrqoxpusn - 2 ) ; } finally { heniwqjqwkexixexaszy += hrjmroaoasuzzlbzaatg + ( bvcfdxisndsdfexoslwh * xjzpximytrtopavxwmag ) ; } assertEquals ( 13.75 , Lyniwqjqwkexixexaszy

line_index: 196
bug_before_refactoring: { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; boolean success = parseScheduleJSON () ; } <s> public void onPostExecute ( java.lang.String result ) { if ( ( result != null ) && ( ! ( result . equals ( "" ) ) ) ) { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; boolean success = parseScheduleJSON () ; } } <s> Lots of comments  bug fix for captions
bug_after_refactoring: { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; boolean kvhvfshklkzavurnyhjv = parseScheduleJSON () ; } <s> public void onPostExecute ( java.lang.String result ) { if ( ( result != null ) && ( ! ( result . equals ( "" ) ) ) ) { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; boolean kvhvfshklkzavurnyhjv = parseScheduleJSON () ; } } <s> Lots of comments  bug fix for captions
fix_before_refactoring: { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; parseScheduleJSON () ; }
fix_after_refactoring: { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; parseScheduleJSON () ; }
× fix_prediction_before: { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; }
× fix_prediction_after: { java.lang.String campusChar = com.ihwapp.android.model.Curriculum . getCampusChar ( campus ) ; android.content.SharedPreferences prefs = com.ihwapp.android.model.Curriculum.ctx . getSharedPreferences ( ( ( year ) + campusChar ) , Context.MODE_PRIVATE ) ; prefs . edit () . putString ( "scheduleJSON" , result ) . commit () ; }

line_index: 198
bug_before_refactoring: private void initBlocks ( android.content.Context context ) { for ( int i = 0 ; i < ( ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) * ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ) ; i ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; int yPos = 0 ; if ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) == 0 ) { block . setYPosition ( ( yPos ++ ) ) ; } block . setXPosition ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) ) ; blocks . add ( block ) ; } } <s> private void initBlocks ( android.content.Context context ) { for ( int i = 0 ; i < ( ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) * ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ) ; i ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; int yPos = 0 ; if ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) == 0 ) { block . setYPosition ( ( yPos ++ ) ) ; } block . setXPosition ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) ) ; blocks . add ( block ) ; } } <s> Needed to fix typo errors from previous merge. Aswell as fixed drawing tile error
bug_after_refactoring: private void initBlocks ( android.content.Context context ) { for ( int i = 0 ; i < ( ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) * ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ) ; i ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; int dqsoyrtjxruhnemojdyg = 0 ; if ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) == 0 ) { block . setYPosition ( ( dqsoyrtjxruhnemojdyg ++ ) ) ; } block . setXPosition ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) ) ; blocks . add ( block ) ; } } <s> private void initBlocks ( android.content.Context context ) { for ( int i = 0 ; i < ( ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) * ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ) ; i ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; int dqsoyrtjxruhnemojdyg = 0 ; if ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) == 0 ) { block . setYPosition ( ( dqsoyrtjxruhnemojdyg ++ ) ) ; } block . setXPosition ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) ) ; blocks . add ( block ) ; } } <s> Needed to fix typo errors from previous merge. Aswell as fixed drawing tile error
fix_before_refactoring: private void initBlocks ( android.content.Context context ) { for ( int x = 0 ; x <= ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ; x ++ ) { for ( int y = 0 ; y < ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ; y ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; block . setXPosition ( x ) ; block . setYPosition ( y ) ; blocks . add ( block ) ; } } }
fix_after_refactoring: private void initBlocks ( android.content.Context context ) { for ( int x = 0 ; x <= ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ; x ++ ) { for ( int y = 0 ; y < ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ; y ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; block . setXPosition ( x ) ; block . setYPosition ( y ) ; blocks . add ( block ) ; } } }
× fix_prediction_before: private void initBlocks ( android.content.Context context ) { for ( int i = 0 ; i < ( ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) * ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ) ; i ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; int yPos = 0 ; if ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) == 0 ) { block . setYPosition ( ( yPos + 1 ) ) ; } block . setXPosition ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) ) ; blocks . add ( block ) ; } }
× fix_prediction_after: private void initBlocks ( android.content.Context context ) { for ( int i = 0 ; i < ( ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) * ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ) ; i ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; int dqsoyrtjxruhnemojdyg = 0 ; if ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) == 0 ) { block . setYPosition ( ( dqsoyrtjxruhnemojdyg ++ ) ) ; } block . setXPosition ( ( i % ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ) ) ; blocks . add ( block ) ; } }

line_index: 199
bug_before_refactoring: if ( ( ( _bytes.length ) + offset ) < byteCount ) { byte [] newBytes = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , newBytes , 0 , _bytes.length ) ; _bytes = newBytes ; } <s> public int read ( java.io.InputStream in , int offset , int byteCount ) throws java.io.IOException { if ( ( ( _bytes.length ) + offset ) < byteCount ) { byte [] newBytes = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , newBytes , 0 , _bytes.length ) ; _bytes = newBytes ; } _size = in . read ( _bytes , offset , byteCount ) ; return _size ; } <s> Fix bug in resizing buffer
bug_after_refactoring: if ( ( ( _bytes.length ) + offset ) < byteCount ) { byte [] nblurnpovqdwcycprjco = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , nblurnpovqdwcycprjco , 0 , _bytes.length ) ; _bytes = nblurnpovqdwcycprjco ; } <s> public int read ( java.io.InputStream in , int offset , int byteCount ) throws java.io.IOException { if ( ( ( _bytes.length ) + offset ) < byteCount ) { byte [] nblurnpovqdwcycprjco = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , nblurnpovqdwcycprjco , 0 , _bytes.length ) ; _bytes = nblurnpovqdwcycprjco ; } _size = in . read ( _bytes , offset , byteCount ) ; return _size ; } <s> Fix bug in resizing buffer
fix_before_refactoring: if ( ( offset + byteCount ) > ( _bytes.length ) ) { byte [] newBytes = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , newBytes , 0 , _bytes.length ) ; _bytes = newBytes ; }
fix_after_refactoring: if ( ( offset + byteCount ) > ( _bytes.length ) ) { byte [] nblurnpovqdwcycprjco = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , nblurnpovqdwcycprjco , 0 , _bytes.length ) ; _bytes = nblurnpovqdwcycprjco ; }
× fix_prediction_before: if ( ( ( _bytes.length ) + offset ) < byteCount ) { byte [] newBytes = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , newBytes , 0 , _bytes.length ) ; _bytes = newBytes ; }
× fix_prediction_after: if ( ( ( _bytes.length ) + offset ) < byteCount ) { byte [] nblurnpovqdwcycprjco = new byte [ byteCount + offset ] ; java.lang.System . arraycopy ( _bytes , 0 , nblurnpovqdwcycprjco , 0 , _bytes.length ) ; _bytes = nblurnpovqdwcycprjco ; }

line_index: 200
bug_before_refactoring: { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; long nodeCount = reporter . getCounter ( NodeCounters.NODE_COUNTER ) . getValue () ; info . setRank ( ( 1.0 / ( ( double ) ( nodeCount ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; } <s> public void reduce ( org.apache.hadoop.io.Text inputKey , java.util.Iterator < org.apache.hadoop.io.Text > inputVals , org.apache.hadoop.mapred.OutputCollector < org.apache.hadoop.io.Text , slmt.courses.cp.hw3.step1.PageInfo > outputCollector , org.apache.hadoop.mapred.Reporter reporter ) throws java.io.IOException { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; long nodeCount = reporter . getCounter ( NodeCounters.NODE_COUNTER ) . getValue () ; info . setRank ( ( 1.0 / ( ( double ) ( nodeCount ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; } <s> Fix a bug in step 1
bug_after_refactoring: { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; long ilhuraecrtbfesmayqqf = reporter . getCounter ( NodeCounters.NODE_COUNTER ) . getValue () ; info . setRank ( ( 1.0 / ( ( double ) ( ilhuraecrtbfesmayqqf ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; } <s> public void reduce ( org.apache.hadoop.io.Text inputKey , java.util.Iterator < org.apache.hadoop.io.Text > inputVals , org.apache.hadoop.mapred.OutputCollector < org.apache.hadoop.io.Text , slmt.courses.cp.hw3.step1.PageInfo > outputCollector , org.apache.hadoop.mapred.Reporter reporter ) throws java.io.IOException { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; long ilhuraecrtbfesmayqqf = reporter . getCounter ( NodeCounters.NODE_COUNTER ) . getValue () ; info . setRank ( ( 1.0 / ( ( double ) ( ilhuraecrtbfesmayqqf ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; } <s> Fix a bug in step 1
fix_before_refactoring: { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; info . setRank ( ( 1 / ( ( double ) ( nodeCount ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; }
fix_after_refactoring: { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; info . setRank ( ( 1 / ( ( double ) ( ilhuraecrtbfesmayqqf ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; }
× fix_prediction_before: { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; long nodeCount = reporter . getCounter ( NodeCounters.NODE_COUNTER ) . getValue () ; info . setRank ( ( 1.0 / ( ( double ) ( nodeCount ) ) ) ) ; info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; }
× fix_prediction_after: { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; long ilhuraecrtbfesmayqqf = reporter . getCounter ( NodeCounters.NODE_COUNTER ) . getValue () ; info . setRank ( ( 1.0 / ( ( double ) ( ilhuraecrtbfesmayqqf ) ) ) ) ; info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; }

line_index: 201
bug_before_refactoring: { final long start = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; java.lang.System.out . println ( ( ( "Took " + ( ( java.lang.System . currentTimeMillis () ) - start ) ) + " ms." ) ) ; return list ; } <s> public java.util.List < org.todss.model.IntakeMoment > test ( org.todss.algorithm.AlgorithmContext context ) { final long start = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; java.lang.System.out . println ( ( ( "Took " + ( ( java.lang.System . currentTimeMillis () ) - start ) ) + " ms." ) ) ; return list ; } <s> Fix a bug where the costs were not calculated right and add tests from Serkan.
bug_after_refactoring: { final long hxjaznjcpqxrqrnzkmzy = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; java.lang.System.out . println ( ( ( "Took " + ( ( java.lang.System . currentTimeMillis () ) - hxjaznjcpqxrqrnzkmzy ) ) + " ms." ) ) ; return list ; } <s> public java.util.List < org.todss.model.IntakeMoment > test ( org.todss.algorithm.AlgorithmContext context ) { final long hxjaznjcpqxrqrnzkmzy = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; java.lang.System.out . println ( ( ( "Took " + ( ( java.lang.System . currentTimeMillis () ) - hxjaznjcpqxrqrnzkmzy ) ) + " ms." ) ) ; return list ; } <s> Fix a bug where the costs were not calculated right and add tests from Serkan.
fix_before_refactoring: { final long start = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; java.lang.System.out . println ( ( ( "Took " + ( ( java.lang.System . currentTimeMillis () ) - start ) ) + " ms." ) ) ; assert ( list != null ) && ( ( list . size () ) > 0 ) ; return list ; }
fix_after_refactoring: { final long hxjaznjcpqxrqrnzkmzy = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; java.lang.System.out . println ( ( ( "Took " + ( ( java.lang.System . currentTimeMillis () ) - hxjaznjcpqxrqrnzkmzy ) ) + " ms." ) ) ; assert ( list != null ) && ( ( list . size () ) > 0 ) ; return list ; }
× fix_prediction_before: { final long start = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; return list ; }
× fix_prediction_after: { final long hxjaznjcpqxrqrnzkmzy = java.lang.System . currentTimeMillis () ; final java.util.List < org.todss.model.IntakeMoment > list = org.todss.algorithm.SmartAlgorithm . run ( context ) ; return list ; }

line_index: 202
bug_before_refactoring: @ org.junit.Test public void testInstallGroup () { java.lang.String inport = "2" ; int vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity1 ) ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity2 ) ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; } <s> @ org.junit.Test public void testInstallGroup () { java.lang.String inport = "2" ; int vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity1 ) ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity2 ) ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; } <s> MdSalUtilTest no longer extends @deprecated AbstractDataBrokerTest  use new AbstractConcurrentDataBrokerTest instead - and fix MDSALManager  Bug: 7538 Change-Id: Iaad38472581f7271f894650f255bda0c6a48aae8 Signed-off-by: Michael Vorburger <vorburger@redhat.com>
bug_after_refactoring: @ org.junit.Test public void testInstallGroup () { java.lang.String inport = "2" ; int cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity1 ) ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity2 ) ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; } <s> @ org.junit.Test public void testInstallGroup () { java.lang.String inport = "2" ; int cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity1 ) ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity2 ) ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; } <s> MdSalUtilTest no longer extends @deprecated AbstractDataBrokerTest  use new AbstractConcurrentDataBrokerTest instead - and fix MDSALManager  Bug: 7538 Change-Id: Iaad38472581f7271f894650f255bda0c6a48aae8 Signed-off-by: Michael Vorburger <vorburger@redhat.com>
fix_before_refactoring: @ org.junit.Test public void testInstallGroup ( ) throws java.lang.Exception { java.lang.String inport = "2" ; int vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity1 ) . get () ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity2 ) . get () ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; }
fix_after_refactoring: @ org.junit.Test public void testInstallGroup ( ) throws java.lang.Exception { java.lang.String inport = "2" ; int cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity1 ) . get () ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity2 ) . get () ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; }
× fix_prediction_before: @ org.junit.Test public void testInstallGroup ( ) throws java.lang.Exception { java.lang.String inport = "2" ; int vlanid = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , vlanid ) ; mdSalMgr . installGroup ( grpEntity1 ) . get () ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; mdSalMgr . installGroup ( grpEntity2 ) ; org.junit.Assert . assertEquals ( 2 , grpFwder . getDataChgCount () ) ; }
× fix_prediction_after: @ org.junit.Test public void testInstallGroup ( ) throws java.lang.Exception { java.lang.String inport = "2" ; int cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity1 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity1 ) . get () ; org.junit.Assert . assertEquals ( 1 , grpFwder . getDataChgCount () ) ; inport = "3" ; cmowvufluibjlgewthbo = 100 ; org.opendaylight.genius.mdsalutil.GroupEntity grpEntity2 = createGroupEntity ( org.opendaylight.genius.test.MdSalUtilTest.Nodeid , inport , cmowvufluibjlgewthbo ) ; mdSalMgr . installGroup ( grpEntity2 ) ; org.junit

line_index: 203
bug_before_refactoring: public int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int result = this . lists . size () ; this . lists . add ( result , list ) ; return result ; } <s> public int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int result = this . lists . size () ; this . lists . add ( result , list ) ; return result ; } <s> bugfix for empty iam map
bug_after_refactoring: public int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int wymbbklamwsoxqwxcceq = this . lists . size () ; this . lists . add ( wymbbklamwsoxqwxcceq , list ) ; return wymbbklamwsoxqwxcceq ; } <s> public int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int wymbbklamwsoxqwxcceq = this . lists . size () ; this . lists . add ( wymbbklamwsoxqwxcceq , list ) ; return wymbbklamwsoxqwxcceq ; } <s> bugfix for empty iam map
fix_before_refactoring: protected int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int result = this . lists . size () ; this . lists . add ( result , list ) ; return result ; }
fix_after_refactoring: protected int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int wymbbklamwsoxqwxcceq = this . lists . size () ; this . lists . add ( wymbbklamwsoxqwxcceq , list ) ; return wymbbklamwsoxqwxcceq ; }
× fix_prediction_before: public int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int result = this . lists . size () ; this . lists . add ( result , list ) ; return result ; }
× fix_prediction_after: public int put ( final bee.creative.iam.IAMEncoder.IAMBaseListEncoder list ) throws java.lang.NullPointerException { if ( list == null ) throw new java.lang.NullPointerException () ; final int wymbbklamwsoxqwxcceq = this . lists . size () ; this . lists . add ( wymbbklamwsoxqwxcceq , list ) ; return wymbbklamwsoxqwxcceq ; }

line_index: 204
bug_before_refactoring: { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( ( emitted > 0 ) && ( origin != null ) ) { long r = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( r <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } <s> private void requestMoreAfterEmission ( int emitted ) { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( ( emitted > 0 ) && ( origin != null ) ) { long r = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( r <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } <s> Merge pull request #2788 from zsxwing/publish-no-subscriber  Fix the bug that 'publish' will cache items when no subscriber
bug_after_refactoring: { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( ( emitted > 0 ) && ( origin != null ) ) { long siijhhmfavoskhaqnxnk = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( siijhhmfavoskhaqnxnk <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } <s> private void requestMoreAfterEmission ( int emitted ) { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( ( emitted > 0 ) && ( origin != null ) ) { long siijhhmfavoskhaqnxnk = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( siijhhmfavoskhaqnxnk <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } <s> Merge pull request #2788 from zsxwing/publish-no-subscriber  Fix the bug that 'publish' will cache items when no subscriber
fix_before_refactoring: { if ( emitted > 0 ) { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( origin != null ) { long r = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( r <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } }
fix_after_refactoring: { if ( emitted > 0 ) { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( origin != null ) { long siijhhmfavoskhaqnxnk = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( siijhhmfavoskhaqnxnk <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } }
× fix_prediction_before: { if ( ( state ) == null ) { return; } rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( ( emitted > 0 ) && ( origin != null ) ) { long r = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( r <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } }
× fix_prediction_after: { if ( ( emitted > 0 ) && ( origin != null ) ) { rx.internal.operators.OperatorPublish.OriginSubscriber < T > origin = state . getOrigin () ; if ( ( emitted > 0 ) && ( origin != null ) ) { long siijhhmfavoskhaqnxnk = origin.originOutstanding . addAndGet ( ( - emitted ) ) ; if ( siijhhmfavoskhaqnxnk <= ( origin.THRESHOLD ) ) { origin . requestMore ( ( ( rx.internal.util.RxRingBuffer.SIZE ) - ( origin.THRESHOLD ) ) ) ; } } } }

line_index: 205
bug_before_refactoring: { int x = getSprite () . getX () ; int y = getSprite () . getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( x , ( y + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } } <s> public void jump () { int x = getSprite () . getX () ; int y = getSprite () . getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( x , ( y + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } } <s> Bug Fix (Scrolling)  New bug: Grunt is reversing direction constantly
bug_after_refactoring: { int cqwsfkoxckvipjbtkuaf = getSprite () . getX () ; int sqyyjklregzfenkgkwtq = getSprite () . getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( cqwsfkoxckvipjbtkuaf , ( sqyyjklregzfenkgkwtq + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } } <s> public void jump () { int cqwsfkoxckvipjbtkuaf = getSprite () . getX () ; int sqyyjklregzfenkgkwtq = getSprite () . getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( cqwsfkoxckvipjbtkuaf , ( sqyyjklregzfenkgkwtq + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } } <s> Bug Fix (Scrolling)  New bug: Grunt is reversing direction constantly
fix_before_refactoring: { int x = getX () ; int y = getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( x , ( y + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } }
fix_after_refactoring: { int cqwsfkoxckvipjbtkuaf = getX () ; int sqyyjklregzfenkgkwtq = getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( cqwsfkoxckvipjbtkuaf , ( sqyyjklregzfenkgkwtq + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } }
× fix_prediction_before: { int x = getSprite () . getX () ; int y = getSprite () . getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( x , ( y + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } }
× fix_prediction_after: { int cqwsfkoxckvipjbtkuaf = getSprite () . getX () ; int sqyyjklregzfenkgkwtq = getSprite () . getY () ; gravity () ; if ( ( ( ySpeed ) == 0 ) && ( checkCollision ( cqwsfkoxckvipjbtkuaf , ( sqyyjklregzfenkgkwtq + 2 ) , Main.level . getConstructs () ) ) ) { ySpeed = - ( environment.Constants.JUMP_HEIGHT ) ; } }

line_index: 208
bug_before_refactoring: java.lang.Math . ceil ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * tempmod ) ) <s> private double productionDeut ( int lvl ) { double tempmod = 1.44 - ( 0.004 * ( Versorgung [ 11 ] ) ) ; return java.lang.Math . ceil ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * tempmod ) ) ; } <s> fixed issue with rounding for displayed daily production added editable currency conversion bit of tidying up account and planet class; using ProductionAndCostsHelper  Signed-off-by: Lilith <LilithOG@web.de>
bug_after_refactoring: java.lang.Math . ceil ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * skakndgwaqjxsoicosky ) ) <s> private double productionDeut ( int lvl ) { double tempmod = 1.44 - ( 0.004 * ( Versorgung [ 11 ] ) ) ; return java.lang.Math . ceil ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * skakndgwaqjxsoicosky ) ) ; } <s> fixed issue with rounding for displayed daily production added editable currency conversion bit of tidying up account and planet class; using ProductionAndCostsHelper  Signed-off-by: Lilith <LilithOG@web.de>
fix_before_refactoring: java.lang.Math . round ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * tempmod ) )
fix_after_refactoring: java.lang.Math . round ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * skakndgwaqjxsoicosky ) )
× fix_prediction_before: java.lang.Math . ceil ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * tempmod ) )
× fix_prediction_after: java.lang.Math . ceil ( ( ( ( ( ( double ) ( 10 ) ) * lvl ) * ( java.lang.Math . pow ( 1.1 , lvl ) ) ) * skakndgwaqjxsoicosky ) )

line_index: 209
bug_before_refactoring: result = ( 255 - ( result * ( - 1 ) ) ) - 1 <s> public boolean subtractFromRegistry ( int registryIndex , byte value ) { boolean borrow = false ; int result = ( ( chip8 . getRegisters () [ registryIndex ] ) & 255 ) - ( value & 255 ) ; if ( result < 0 ) { borrow = true ; result = ( 255 - ( result * ( - 1 ) ) ) - 1 ; } chip8 . getRegisters () [ registryIndex ] = ( ( byte ) ( result ) ) ; return borrow ; } <s> Added some more tests and fixed a bug in substractFromRegistry
bug_after_refactoring: kxfnnwkeneiwplgdgskd = ( 255 - ( kxfnnwkeneiwplgdgskd * ( - 1 ) ) ) - 1 <s> public boolean subtractFromRegistry ( int registryIndex , byte value ) { boolean borrow = false ; int result = ( ( chip8 . getRegisters () [ registryIndex ] ) & 255 ) - ( value & 255 ) ; if ( result < 0 ) { borrow = true ; kxfnnwkeneiwplgdgskd = ( 255 - ( kxfnnwkeneiwplgdgskd * ( - 1 ) ) ) - 1 ; } chip8 . getRegisters () [ registryIndex ] = ( ( byte ) ( result ) ) ; return borrow ; } <s> Added some more tests and fixed a bug in substractFromRegistry
fix_before_refactoring: result = ( 255 - ( result * ( - 1 ) ) ) + 1
fix_after_refactoring: kxfnnwkeneiwplgdgskd = ( 255 - ( kxfnnwkeneiwplgdgskd * ( - 1 ) ) ) + 1
× fix_prediction_before: result = 255 - ( result * ( - 1 ) )
× fix_prediction_after: kxfnnwkeneiwplgdgskd = 255 - ( kxfnnwkeneiwplgdgskd * ( - 1 ) )

line_index: 212
bug_before_refactoring: { alignment [ t ] = alignment [ ( t + 1 ) ] ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; eLost . removeOneFrame ( frames [ t ] ) ; float vLost = eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; eGain . updateOneFrame ( frames [ t ] ) ; float vGain = eGain . getVar () ; globalVar += vGain - vLost ; } <s> private void moveLeft ( int t ) { alignment [ t ] = alignment [ ( t + 1 ) ] ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; eLost . removeOneFrame ( frames [ t ] ) ; float vLost = eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; eGain . updateOneFrame ( frames [ t ] ) ; float vGain = eGain . getVar () ; globalVar += vGain - vLost ; } <s> bugfix: en fait  ca ne decroit pas toujours
bug_after_refactoring: { alignment [ t ] = alignment [ ( t + 1 ) ] ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; eLost . removeOneFrame ( frames [ t ] ) ; float gmxkiovsdnvdnhoxspgg = eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; eGain . updateOneFrame ( frames [ t ] ) ; float bvoapcqhlgjyakpgewok = eGain . getVar () ; globalVar += bvoapcqhlgjyakpgewok - gmxkiovsdnvdnhoxspgg ; } <s> private void moveLeft ( int t ) { alignment [ t ] = alignment [ ( t + 1 ) ] ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; eLost . removeOneFrame ( frames [ t ] ) ; float gmxkiovsdnvdnhoxspgg = eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; eGain . updateOneFrame ( frames [ t ] ) ; float bvoapcqhlgjyakpgewok = eGain . getVar () ; globalVar += bvoapcqhlgjyakpgewok - gmxkiovsdnvdnhoxspgg ; } <s> bugfix: en fait  ca ne decroit pas toujours
fix_before_refactoring: { fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; globalVar -= eLost . getVar () ; eLost . removeOneFrame ( frames [ t ] ) ; globalVar += eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; globalVar -= eGain . getVar () ; eGain . updateOneFrame ( frames [ t ] ) ; globalVar += eGain . getVar () ; alignment [ t ] = alignment [ ( t + 1 ) ] ; }
fix_after_refactoring: { fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; globalVar -= eLost . getVar () ; eLost . removeOneFrame ( frames [ t ] ) ; globalVar += eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; globalVar -= eGain . getVar () ; eGain . updateOneFrame ( frames [ t ] ) ; globalVar += eGain . getVar () ; alignment [ t ] = alignment [ ( t + 1 ) ] ; }
× fix_prediction_before: { alignment [ t ] = alignment [ ( t + 1 ) ] ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; eLost . removeOneFrame ( frames [ t ] ) ; float vLost = eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; eGain . updateOneFrame ( frames [ t ] ) ; float vGain = eGain . getVar () ; globalVar += vGain - vLost ; }
× fix_prediction_after: { alignment [ t ] = alignment [ ( t + 1 ) ] ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eLost = alignment [ t ] ; eLost . removeOneFrame ( frames [ t ] ) ; float gmxkiovsdnhoxspgg = eLost . getVar () ; fr.loria.synalp.jtransxps.XPMInimizeVars.EtatHMM eGain = alignment [ ( t + 1 ) ] ; eGain . updateOneFrame ( frames [ t ] ) ; fvoapcqhlgjyakpgewok = eGain . getVar () ; globalVar += bvoapcqhlgjyakpgewok - gmxkiovsdnvdnhoxspgg ; }

line_index: 213
bug_before_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int currentIndex = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; setTitle ( MyAdapter.monstersNameList [ currentIndex ] ) ; mViewPager . setCurrentItem ( currentIndex ) ; } <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int currentIndex = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; setTitle ( MyAdapter.monstersNameList [ currentIndex ] ) ; mViewPager . setCurrentItem ( currentIndex ) ; } <s> Removed Monster Name in ActionBar (easy problem fix)
bug_after_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int papzpzplnytfdaqylwpw = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; setTitle ( MyAdapter.monstersNameList [ papzpzplnytfdaqylwpw ] ) ; mViewPager . setCurrentItem ( papzpzplnytfdaqylwpw ) ; } <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int papzpzplnytfdaqylwpw = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; setTitle ( MyAdapter.monstersNameList [ papzpzplnytfdaqylwpw ] ) ; mViewPager . setCurrentItem ( papzpzplnytfdaqylwpw ) ; } <s> Removed Monster Name in ActionBar (easy problem fix)
fix_before_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int currentIndex = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; mViewPager . setCurrentItem ( currentIndex ) ; }
fix_after_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesofmightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int papzpzplnytfdaqylwpw = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; mViewPager . setCurrentItem ( papzpzplnytfdaqylwpw ) ; }
× fix_prediction_before: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; isEmpty () ; be.heroesof mightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesof mightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; int currentIndex = getIntent () . getIntExtra ( "monsterNameIndex" , 0 ) ; setTitle ( MyAdapter.monstersNameList [ currentIndex ] ) ; mViewPager . setCurrentItem ( currentIndex ) ; }
× fix_prediction_after: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.view_pager ) ; be.heroesof mightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter mSectionsPagerAdapter = new be.heroesof mightandmagic.www.monsterandcie.ViewPagerActivity.SectionsPagerAdapter ( getSupportFragmentManager () ) ; android.support.v4.view.ViewPager mViewPager = ( ( android.support.v4.view.ViewPager ) ( findViewById ( R.id.pager ) ) ) ; mViewPager . setAdapter ( mSectionsPagerAdapter ) ; setTitle ( MyAdapter.monstersNameList [ papzpzplnytfdaqylwpw ] ) ; mViewPager . setCurrentItem ( papzpzplnytfdaqylwpw ) ; }

line_index: 214
bug_before_refactoring: { final boolean asyncSupported = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( asyncSupported ) ; } } <s> @ java.lang.Override public void handle ( org.eclipse.jetty.server.Request baseRequest , javax.servlet.ServletRequest request , javax.servlet.ServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { final boolean asyncSupported = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( asyncSupported ) ; } } <s> Upgraded to Jetty 9.3.8.v20160314  This is a bugfix release. The Release notes are here: https://github.com/eclipse/jetty.project/blob/jetty-9.3.x/VERSION.txt
bug_after_refactoring: { final boolean ioudkrsgurhfwcmopmwj = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( ioudkrsgurhfwcmopmwj ) ; } } <s> @ java.lang.Override public void handle ( org.eclipse.jetty.server.Request baseRequest , javax.servlet.ServletRequest request , javax.servlet.ServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { final boolean ioudkrsgurhfwcmopmwj = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( ioudkrsgurhfwcmopmwj ) ; } } <s> Upgraded to Jetty 9.3.8.v20160314  This is a bugfix release. The Release notes are here: https://github.com/eclipse/jetty.project/blob/jetty-9.3.x/VERSION.txt
fix_before_refactoring: { final boolean asyncSupported = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false , null ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( asyncSupported , null ) ; } }
fix_after_refactoring: { final boolean ioudkrsgurhfwcmopmwj = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false , null ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( ioudkrsgurhfwcmopmwj , null ) ; } }
× fix_prediction_before: { final boolean asyncSupported = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( asyncSupported ) ; } }
× fix_prediction_after: { final boolean ioudkrsgurhfwcmopmwj = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false ) ; } servlet . service ( request , response ) ; }

line_index: 215
bug_before_refactoring: read = this . read ( temp , ( size - skipped ) ) <s> @ java.lang.Override public int skip ( int size ) throws java.io.IOException { byte [] temp = new byte [ java.lang.Math . min ( org.verapdf.cos.filters.BF_BUFFER_SIZE , size ) ] ; int skipped = 0 ; while ( skipped != size ) { int read = this . read ( temp , ( size - skipped ) ) ; if ( read == ( - 1 ) ) { return skipped ; } else { skipped += read ; } } return skipped ; } <s> Merge pull request #91 from shem-sergey/filter-skip-branch  Fixed bug.
bug_after_refactoring: xfxampshoqblzkcszhlu = this . xfxampshoqblzkcszhlu ( zpobzxaiokzjfcahslud , ( size - jrftdmgmspgpuwkdzumx ) ) <s> @ java.lang.Override public int skip ( int size ) throws java.io.IOException { byte [] temp = new byte [ java.lang.Math . min ( org.verapdf.cos.filters.BF_BUFFER_SIZE , size ) ] ; int skipped = 0 ; while ( skipped != size ) { int xfxampshoqblzkcszhlu = this . xfxampshoqblzkcszhlu ( zpobzxaiokzjfcahslud , ( size - jrftdmgmspgpuwkdzumx ) ) ; if ( read == ( - 1 ) ) { return skipped ; } else { skipped += read ; } } return skipped ; } <s> Merge pull request #91 from shem-sergey/filter-skip-branch  Fixed bug.
fix_before_refactoring: read = this . read ( temp , java.lang.Math . min ( ( size - skipped ) , org.verapdf.cos.filters.BF_BUFFER_SIZE ) )
fix_after_refactoring: xfxampshoqblzkcszhlu = this . xfxampshoqblzkcszhlu ( zpobzxaiokzjfcahslud , java.lang.Math . min ( ( size - jrftdmgmspgpuwkdzumx ) , org.verapdf.cos.filters.BF_BUFFER_SIZE ) )
× fix_prediction_before: read = this . read ( temp , size )
× fix_prediction_after: xfxampshoqblzkcszhlu = this . xfxampshoqblzkcszhlu ( zpobzxaiokzjfcahslud , size )

line_index: 216
bug_before_refactoring: y = 35 <s> @ java.lang.Override public android.graphics.Bitmap transform ( android.graphics.Bitmap source ) { int y = 35 ; int x = 0 ; android.graphics.Bitmap result = android.graphics.Bitmap . createBitmap ( source , x , y , source . getWidth () , ( ( ( source . getHeight () ) * 3 ) / 5 ) ) ; if ( result != source ) { source . recycle () ; } return result ; } <s> fixed errors
bug_after_refactoring: qdflkgglnyixqjznvmuf = 35 <s> @ java.lang.Override public android.graphics.Bitmap transform ( android.graphics.Bitmap source ) { int qdflkgglnyixqjznvmuf = 35 ; int x = 0 ; android.graphics.Bitmap result = android.graphics.Bitmap . createBitmap ( source , x , y , source . getWidth () , ( ( ( source . getHeight () ) * 3 ) / 5 ) ) ; if ( result != source ) { source . recycle () ; } return result ; } <s> fixed errors
fix_before_refactoring: y = ( source . getHeight () ) / 5
fix_after_refactoring: qdflkgglnyixqjznvmuf = ( source . getHeight () ) / 5
× fix_prediction_before: y = 3
× fix_prediction_after: qdflkgglnyixqjznvmuf = 35

line_index: 217
bug_before_refactoring: { byte [] ret = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { ret [ i ] = iterator . next () . byteValue () ; } return ret ; } <s> protected byte [] convertBytes ( java.util.ArrayList < java.lang.Integer > list ) { byte [] ret = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { ret [ i ] = iterator . next () . byteValue () ; } return ret ; } <s> fix android bug
bug_after_refactoring: { byte [] hvyrulzmhmeizrrbgglb = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( hvyrulzmhmeizrrbgglb.length ) ; i ++ ) { hvyrulzmhmeizrrbgglb [ i ] = iterator . next () . byteValue () ; } return hvyrulzmhmeizrrbgglb ; } <s> protected byte [] convertBytes ( java.util.ArrayList < java.lang.Integer > list ) { byte [] hvyrulzmhmeizrrbgglb = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( hvyrulzmhmeizrrbgglb.length ) ; i ++ ) { hvyrulzmhmeizrrbgglb [ i ] = iterator . next () . byteValue () ; } return hvyrulzmhmeizrrbgglb ; } <s> fix android bug
fix_before_refactoring: { if ( list == null ) return null ; byte [] ret = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { ret [ i ] = iterator . next () . byteValue () ; } return ret ; }
fix_after_refactoring: { if ( list == null ) return null ; byte [] hvyrulzmhmeizrrbgglb = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( hvyrulzmhmeizrrbgglb.length ) ; i ++ ) { hvyrulzmhmeizrrbgglb [ i ] = iterator . next () . byteValue () ; } return hvyrulzmhmeizrrbgglb ; }
× fix_prediction_before: { byte [] ret = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { ret [ i ] = iterator . next () . byteValue () ; } return ret ; }
× fix_prediction_after: { if ( list == null ) { return null ; } byte [] hvyrulzmhmeizrrbgglb = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( hvyrulzmhmeizrrbgglblb.length ) ; i ++ ) { hvyrulzmhmeizrrbgglb [ i ] = iterator . next () . byteValue () ; } return hvyrulzmhmeizrrbgglblb ; }

line_index: 220
bug_before_refactoring: if ( ( this . expires ) == 0 ) { needsRefresh = false ; } else { long now = java.lang.System . currentTimeMillis () ; long tokenDuration = now - ( this . lastRefresh ) ; needsRefresh = tokenDuration >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; } <s> public boolean needsRefresh () { boolean needsRefresh ; this . refreshLock . readLock () . lock () ; if ( ( this . expires ) == 0 ) { needsRefresh = false ; } else { long now = java.lang.System . currentTimeMillis () ; long tokenDuration = now - ( this . lastRefresh ) ; needsRefresh = tokenDuration >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; } this . refreshLock . readLock () . unlock () ; return needsRefresh ; } <s> Added a listener to BoxAPIConnection  The BoxAPIConnection object now supports BoxAPIConnectionListeners which enable the listener to listen to refresh event  style issues resolved  Trailing spaces removed  Style check issues resolved
bug_after_refactoring: if ( ( this . expires ) == 0 ) { qbtavszsnlfwspcywmum = false ; } else { long orhshkccbwmuoufquilz = java.lang.System . currentTimeMillis () ; long oiszeoxjtbeopcrexfxv = orhshkccbwmuoufquilz - ( this . lastRefresh ) ; qbtavszsnlfwspcywmum = oiszeoxjtbeopcrexfxv >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; } <s> public boolean needsRefresh () { boolean needsRefresh ; this . refreshLock . readLock () . lock () ; if ( ( this . expires ) == 0 ) { qbtavszsnlfwspcywmum = false ; } else { long orhshkccbwmuoufquilz = java.lang.System . currentTimeMillis () ; long oiszeoxjtbeopcrexfxv = orhshkccbwmuoufquilz - ( this . lastRefresh ) ; qbtavszsnlfwspcywmum = oiszeoxjtbeopcrexfxv >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; } this . refreshLock . readLock () . unlock () ; return needsRefresh ; } <s> Added a listener to BoxAPIConnection  The BoxAPIConnection object now supports BoxAPIConnectionListeners which enable the listener to listen to refresh event  style issues resolved  Trailing spaces removed  Style check issues resolved
fix_before_refactoring: if ( ( this . expires ) < 0 ) { needsRefresh = false ; } else { long now = java.lang.System . currentTimeMillis () ; long tokenDuration = now - ( this . lastRefresh ) ; needsRefresh = tokenDuration >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; }
fix_after_refactoring: if ( ( this . expires ) < 0 ) { qbtavszsnlfwspcywmum = false ; } else { long orhshkccbwmuoufquilz = java.lang.System . currentTimeMillis () ; long oiszeoxjtbeopcrexfxv = orhshkccbwmuoufquilz - ( this . lastRefresh ) ; qbtavszsnlfwspcywmum = oiszeoxjtbeopcrexfxv >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; }
× fix_prediction_before: if ( ( this . expires ) == 0 ) { needsRefresh = false ; } else { long now = java.lang.System . currentTimeMillis () ; long tokenDuration = now - ( this . lastRefresh ) ; needsRefresh = tokenDuration >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; }
× fix_prediction_after: if ( ( this . expires ) == 0 ) { qbtavszsnlfwspcywmum = false ; } else { long orhshkccbwmuoufquilz = java.lang.System . currentTimeMillis () ; long oiszeoxjtbeopcrexfxv = orhshkccbwmuoufquilz - ( this . lastRefresh ) ; qbtavszsnlfwspcywmum = oiszeoxjtbeopcrexfxv >= ( ( this . expires ) - ( com.box.sdk.BoxAPIConnection.REFRESH_EPSILON ) ) ; }

line_index: 221
bug_before_refactoring: { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int addChildCount = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( addChildCount ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { addChildCount += addChildNodes ( treeNode , ( startIndex + addChildCount ) ) ; } } pNode . toggle () ; return addChildCount ; } <s> private int addChildNodes ( tellh.com.recyclertreeview_lib.TreeNode pNode , int startIndex ) { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int addChildCount = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( addChildCount ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { addChildCount += addChildNodes ( treeNode , ( startIndex + addChildCount ) ) ; } } pNode . toggle () ; return addChildCount ; } <s> fix the bug about adapter.ifCollapseChildWhileCollapseParent(true)
bug_after_refactoring: { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int yhgwhwhpjwwcwdfyiquv = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( yhgwhwhpjwwcwdfyiquv ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { yhgwhwhpjwwcwdfyiquv += addChildNodes ( treeNode , ( startIndex + yhgwhwhpjwwcwdfyiquv ) ) ; } } pNode . toggle () ; return yhgwhwhpjwwcwdfyiquv ; } <s> private int addChildNodes ( tellh.com.recyclertreeview_lib.TreeNode pNode , int startIndex ) { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int yhgwhwhpjwwcwdfyiquv = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( yhgwhwhpjwwcwdfyiquv ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { yhgwhwhpjwwcwdfyiquv += addChildNodes ( treeNode , ( startIndex + yhgwhwhpjwwcwdfyiquv ) ) ; } } pNode . toggle () ; return yhgwhwhpjwwcwdfyiquv ; } <s> fix the bug about adapter.ifCollapseChildWhileCollapseParent(true)
fix_before_refactoring: { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int addChildCount = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( addChildCount ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { addChildCount += addChildNodes ( treeNode , ( startIndex + addChildCount ) ) ; } } if ( ! ( pNode . isExpand () ) ) pNode . toggle () ; return addChildCount ; }
fix_after_refactoring: { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int yhgwhwhpjwwcwdfyiquv = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( yhgwhwhpjwwcwdfyiquv ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { yhgwhwhpjwwcwdfyiquv += addChildNodes ( treeNode , ( startIndex + yhgwhwhpjwwcwdfyiquv ) ) ; } } if ( ! ( pNode . isExpand () ) ) pNode . toggle () ; return yhgwhwhpjwwcwdfyiquv ; }
× fix_prediction_before: { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int addChildCount = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( addChildCount ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { addChildCount += addChildNodes ( treeNode , ( startIndex + addChildCount ) ) ; } } return addChildCount ; }
× fix_prediction_after: { java.util.List < tellh.com.recyclertreeview_lib.TreeNode > childList = pNode . getChildList () ; int yhgwhwhpjwwcwdfyiquv = 0 ; for ( tellh.com.recyclertreeview_lib.TreeNode treeNode : childList ) { displayNodes . add ( ( startIndex + ( yhgwhwhpjwwcwdfyiquv ++ ) ) , treeNode ) ; if ( treeNode . isExpand () ) { yhgwhwhpjwwcwdfyiquv += addChildNodes ( treeNode , ( startIndex + yhgwhwhpjwwcwdfyiquv ) ) ; } } return yhgwhwhpjwwcwdfyiquv ; }

line_index: 223
bug_before_refactoring: switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.GONE ) ; loadReportingFormSelfFragment () ; if ( ( getActivity () ) instanceof com.unfpa.safepal.report.ReportingActivity ) { ( ( com.unfpa.safepal.report.ReportingActivity ) ( getActivity () ) ) . updateNextButtonToSubmit () ; } break; case R.id.wsgh_someoneelse_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; } <s> @ java.lang.Override public void onClick ( android.view.View view ) { boolean checked = ( ( android.widget.RadioButton ) ( view ) ) . isChecked () ; switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.GONE ) ; loadReportingFormSelfFragment () ; if ( ( getActivity () ) instanceof com.unfpa.safepal.report.ReportingActivity ) { ( ( com.unfpa.safepal.report.ReportingActivity ) ( getActivity () ) ) . updateNextButtonToSubmit () ; } break; case R.id.wsgh_someoneelse_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; } } <s> Fixed the disappearing fragment on Android 6  However there are still issues requesting location on Android M
bug_after_refactoring: switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.GONE ) ; loadReportingFormSelfFragment () ; if ( ( getActivity () ) instanceof com.unfpa.safepal.report.ReportingActivity ) { ( ( com.unfpa.safepal.report.ReportingActivity ) ( getActivity () ) ) . updateNextButtonToSubmit () ; } break; case R.id.wsgh_someoneelse_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; } <s> @ java.lang.Override public void onClick ( android.view.View view ) { boolean checked = ( ( android.widget.RadioButton ) ( view ) ) . isChecked () ; switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.GONE ) ; loadReportingFormSelfFragment () ; if ( ( getActivity () ) instanceof com.unfpa.safepal.report.ReportingActivity ) { ( ( com.unfpa.safepal.report.ReportingActivity ) ( getActivity () ) ) . updateNextButtonToSubmit () ; } break; case R.id.wsgh_someoneelse_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; } } <s> Fixed the disappearing fragment on Android 6  However there are still issues requesting location on Android M
fix_before_refactoring: switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.GONE ) ; break; case R.id.wsgh_someoneelse_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; }
fix_after_refactoring: switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.GONE ) ; break; case R.id.wsgh_someoneelse_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; }
× fix_prediction_before: switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.GONE ) ; loadReportingFormSelfFragment () ; if ( ( getActivity () ) instanceof com.unfpa.safepal.report.ReportingActivity ) { ( ( com.unfpa.safepal.report.ReportingActivity ) ( getActivity () ) ) . updateNextButtonToSubmit () ; } break; case R.id.wsgh_someoneelse_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; }
× fix_prediction_after: switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.GONE ) ; loadReportingFormSelfFragment () ; if ( ( getActivity () ) instanceof com.unfpa.safepal.report.ReportingActivity ) { ( ( com.unfpa.safepal.report.ReportingActivity ) ( getActivity () ) ) . updateNextButtonToSubmit () ; } break; case R.id.wsgh_someoneelse_rb : if ( ezsycclmeiwwacsoufkw ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; }

line_index: 224
bug_before_refactoring: private static java.lang.String getRequiredSpaces ( java.lang.String message ) { java.lang.String res = "" ; final java.lang.String reference = "#########################################################################" ; int requiredSpaces = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < requiredSpaces ; i ++ ) { res = res + " " ; } return res ; } <s> private static java.lang.String getRequiredSpaces ( java.lang.String message ) { java.lang.String res = "" ; final java.lang.String reference = "#########################################################################" ; int requiredSpaces = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < requiredSpaces ; i ++ ) { res = res + " " ; } return res ; } <s> #17 Fixed bug with non-dynamic reference when calculating the required spaces
bug_after_refactoring: private static java.lang.String getRequiredSpaces ( java.lang.String message ) { java.lang.String res = "" ; final java.lang.String reference = "#########################################################################" ; int iedmicbukyzsysjpfdtg = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < iedmicbukyzsysjpfdtg ; i ++ ) { res = res + " " ; } return res ; } <s> private static java.lang.String getRequiredSpaces ( java.lang.String message ) { java.lang.String res = "" ; final java.lang.String reference = "#########################################################################" ; int iedmicbukyzsysjpfdtg = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < iedmicbukyzsysjpfdtg ; i ++ ) { res = res + " " ; } return res ; } <s> #17 Fixed bug with non-dynamic reference when calculating the required spaces
fix_before_refactoring: private static java.lang.String getRequiredSpaces ( java.lang.String reference , java.lang.String message ) { java.lang.String res = "" ; int requiredSpaces = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < requiredSpaces ; i ++ ) { res = res + " " ; } return res ; }
fix_after_refactoring: private static java.lang.String getRequiredSpaces ( java.lang.String reference , java.lang.String message ) { java.lang.String res = "" ; int iedmicbukyzsysjpfdtg = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < iedmicbukyzsysjpfdtg ; i ++ ) { res = res + " " ; } return res ; }
× fix_prediction_before: public static java.lang.String getRequiredSpaces ( java.lang.String message ) { java.lang.String res = "" ; final java.lang.String reference = "#########################################################################" ; int requiredSpaces = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < requiredSpaces ; i ++ ) { res = res + " " ; } return res ; }
× fix_prediction_after: public static java.lang.String getRequiredSpaces ( java.lang.String message ) { java.lang.String res = "" ; final java.lang.String reference = "#########################################################################" ; int iedmicbukyzsysjpfdtg = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < iedmicbukyzsysjpfdtg ; i ++ ) { res = res + " " ; } return res ; }

line_index: 225
bug_before_refactoring: { int size = java.lang.Integer . parseInt ( message ) ; byte [] buffer = new byte [ size + 1 ] ; for ( int i = 0 ; i < size ; ++ i ) buffer [ i ] = 'p' ; buffer [ size ] = 0 ; byte [] encodedBufer = org.apache.commons.codec.binary.Base64 . encodeBase64 ( buffer ) ; java.lang.String result = new java.lang.String ( encodedBufer ) ; postMessage ( instanceId , result ) ; } <s> @ java.lang.Override public void onMessage ( int instanceId , java.lang.String message ) { int size = java.lang.Integer . parseInt ( message ) ; byte [] buffer = new byte [ size + 1 ] ; for ( int i = 0 ; i < size ; ++ i ) buffer [ i ] = 'p' ; buffer [ size ] = 0 ; byte [] encodedBufer = org.apache.commons.codec.binary.Base64 . encodeBase64 ( buffer ) ; java.lang.String result = new java.lang.String ( encodedBufer ) ; postMessage ( instanceId , result ) ; } <s> Fix the message length issue
bug_after_refactoring: { int xyradsdmjammazselqjh = java.lang.Integer . parseInt ( message ) ; byte [] dkhswcznwnwbrthuivmb = new byte [ xyradsdmjammazselqjh + 1 ] ; for ( int i = 0 ; i < xyradsdmjammazselqjh ; ++ i ) dkhswcznwnwbrthuivmb [ i ] = 'p' ; dkhswcznwnwbrthuivmb [ xyradsdmjammazselqjh ] = 0 ; byte [] mfsgwrokeubopyxsyjsy = org.apache.commons.codec.binary.Base64 . encodeBase64 ( dkhswcznwnwbrthuivmb ) ; java.lang.String result = new java.lang.String ( mfsgwrokeubopyxsyjsy ) ; postMessage ( instanceId , result ) ; } <s> @ java.lang.Override public void onMessage ( int instanceId , java.lang.String message ) { int xyradsdmjammazselqjh = java.lang.Integer . parseInt ( message ) ; byte [] dkhswcznwnwbrthuivmb = new byte [ xyradsdmjammazselqjh + 1 ] ; for ( int i = 0 ; i < xyradsdmjammazselqjh ; ++ i ) dkhswcznwnwbrthuivmb [ i ] = 'p' ; dkhswcznwnwbrthuivmb [ xyradsdmjammazselqjh ] = 0 ; byte [] mfsgwrokeubopyxsyjsy = org.apache.commons.codec.binary.Base64 . encodeBase64 ( dkhswcznwnwbrthuivmb ) ; java.lang.String result = new java.lang.String ( mfsgwrokeubopyxsyjsy ) ; postMessage ( instanceId , result ) ; } <s> Fix the message length issue
fix_before_refactoring: { int size = java.lang.Integer . parseInt ( message ) ; byte [] buffer = new byte [ size ] ; for ( int i = 0 ; i < size ; ++ i ) buffer [ i ] = 'p' ; java.lang.String result = new java.lang.String ( buffer ) ; postMessage ( instanceId , result ) ; }
fix_after_refactoring: { int xyradsdmjammazselqjh = java.lang.Integer . parseInt ( message ) ; byte [] dkhswcznwnwbrthuivmb = new byte [ xyradsdmjammazselqjh ] ; for ( int i = 0 ; i < xyradsdmjammazselqjh ; ++ i ) dkhswcznwnwbrthuivmb [ i ] = 'p' ; java.lang.String result = new java.lang.String ( dkhswcznwnwbrthuivmb ) ; postMessage ( instanceId , result ) ; }
× fix_prediction_before: { int size = java.lang.Integer . parseInt ( message ) ; byte [] buffer = new byte [ size + 1 ] ; for ( int i = 0 ; i < size ; ++ i ) buffer [ i ] = 'p' ; buffer [ size ] = 0 ; byte [] encodedBufer = org.apache.commons.codec.binary.Base64 . encodeBase64 ( buffer ) ; java.lang.String result = new java.lang.String ( encodedBufer ) ; postMessage ( instanceId , result ) ; }
× fix_prediction_after: { byte [] dkhswcznwnwbrthuivmb = new byte [ xyradsdmjammazselqjh + 1 ] ; for ( int i = 0 ; i < xyradsdmjammazselqjh + 1 ) dkhswcznwnwbrthuivmb [ i ] = 'p' ; dkhswcznwnwbrthuivmb [ xyradsdmjammazselqjh ] = 0 ; byte [] mfsgwrokeubopyxsyjsy = org.apache.commons.codec.binary.Base64 . encodeBase64 ( dkhswcznwnwbrthuivmb ) ; java.lang.String result = new java.lang.String ( mfsgwrokeubopyxsyjsy ) ; postMessage ( instanceId , result ) ; }

line_index: 226
bug_before_refactoring: set [ root_q ] = root_q <s> public void union ( int p , int q ) { int root_p = find ( p ) ; int root_q = find ( q ) ; if ( ( rank [ root_p ] ) > ( rank [ root_q ] ) ) { set [ root_q ] = root_q ; } else { set [ root_p ] = root_q ; if ( ( rank [ root_p ] ) == ( rank [ root_q ] ) ) { ( rank [ root_q ] ) ++ ; } } } <s> minor bug fix
bug_after_refactoring: set [ giqigzfeyfssvzmpkjut ] = giqigzfeyfssvzmpkjut <s> public void union ( int p , int q ) { int root_p = find ( p ) ; int root_q = find ( q ) ; if ( ( rank [ root_p ] ) > ( rank [ root_q ] ) ) { set [ giqigzfeyfssvzmpkjut ] = giqigzfeyfssvzmpkjut ; } else { set [ root_p ] = root_q ; if ( ( rank [ root_p ] ) == ( rank [ root_q ] ) ) { ( rank [ root_q ] ) ++ ; } } } <s> minor bug fix
fix_before_refactoring: set [ root_q ] = root_p
fix_after_refactoring: set [ giqigzfeyfssvzmpkjut ] = root_p
× fix_prediction_before: set [ root_q ] = root_q
× fix_prediction_after: set [ root_q ] = null

line_index: 227
bug_before_refactoring: { int index = table . getSelectedRow () ; if ( index == ( - 1 ) ) { index = 0 ; } table . clearSelection () ; if ( ( ++ index ) > ( ( table . getRowCount () ) - 1 ) ) { index = 0 ; } index = table . convertRowIndexToView ( index ) ; table . addRowSelectionInterval ( index , index ) ; } <s> public static void selectNextTableRow ( javax.swing.JTable table ) { int index = table . getSelectedRow () ; if ( index == ( - 1 ) ) { index = 0 ; } table . clearSelection () ; if ( ( ++ index ) > ( ( table . getRowCount () ) - 1 ) ) { index = 0 ; } index = table . convertRowIndexToView ( index ) ; table . addRowSelectionInterval ( index , index ) ; } <s> Fixes a bug where the new position and next would not respect table view sorting.
bug_after_refactoring: { int lcbsuishfvruybcepzwi = table . getSelectedRow () ; if ( lcbsuishfvruybcepzwi == ( - 1 ) ) { lcbsuishfvruybcepzwi = 0 ; } table . clearSelection () ; if ( ( ++ lcbsuishfvruybcepzwi ) > ( ( table . getRowCount () ) - 1 ) ) { lcbsuishfvruybcepzwi = 0 ; } lcbsuishfvruybcepzwi = table . convertRowIndexToView ( lcbsuishfvruybcepzwi ) ; table . addRowSelectionInterval ( lcbsuishfvruybcepzwi , lcbsuishfvruybcepzwi ) ; } <s> public static void selectNextTableRow ( javax.swing.JTable table ) { int lcbsuishfvruybcepzwi = table . getSelectedRow () ; if ( lcbsuishfvruybcepzwi == ( - 1 ) ) { lcbsuishfvruybcepzwi = 0 ; } table . clearSelection () ; if ( ( ++ lcbsuishfvruybcepzwi ) > ( ( table . getRowCount () ) - 1 ) ) { lcbsuishfvruybcepzwi = 0 ; } lcbsuishfvruybcepzwi = table . convertRowIndexToView ( lcbsuishfvruybcepzwi ) ; table . addRowSelectionInterval ( lcbsuishfvruybcepzwi , lcbsuishfvruybcepzwi ) ; } <s> Fixes a bug where the new position and next would not respect table view sorting.
fix_before_refactoring: { int index = table . getSelectedRow () ; if ( index == ( - 1 ) ) { index = 0 ; } table . clearSelection () ; if ( ( ++ index ) > ( ( table . getRowCount () ) - 1 ) ) { index = 0 ; } table . addRowSelectionInterval ( index , index ) ; }
fix_after_refactoring: { int lcbsuishfvruybcepzwi = table . getSelectedRow () ; if ( lcbsuishfvruybcepzwi == ( - 1 ) ) { lcbsuishfvruybcepzwi = 0 ; } table . clearSelection () ; if ( ( ++ lcbsuishfvruybcepzwi ) > ( ( table . getRowCount () ) - 1 ) ) { lcbsuishfvruybcepzwi = 0 ; } table . addRowSelectionInterval ( lcbsuishfvruybcepzwi , lcbsuishfvruybcepzwi ) ; }
× fix_prediction_before: { int index = table . getSelectedRow () ; if ( index == ( - 1 ) ) { index = 0 ; } table . clearSelection () ; if ( ( ++ index ) > ( ( table . getRowCount () ) - 1 ) ) { index = 0 ; } index = table . convertRowIndexToView ( index ) ; table . addRowSelectionInterval ( index , index ) ; }
× fix_prediction_after: { int lcbsvgfvruybcepzwi = table . getSelectedRow () ; if ( lcbsassadorfvruybcepzwi == ( - 1 ) ) { lcbsassadorfvruybcepzwi = 0 ; } table . clearSelection () ; if ( ( ++ lcbsbnbfvruybcepzwi ) > ( ( table . getRowCount () ) - 1 ) ) { lcbsynamfruybcepzwi = 0 ; } lcbsassadorfvruybcepzwi = table . convertRowIndexToView ( lcbsuezfvruybcepzwi ) ; }

line_index: 231
bug_before_refactoring: { final double variance = ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( getMsg1UniqueMsgIdMean () ) * ( getMsg1UniqueMsgIdMean () ) ) ) ; return variance ; return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) * ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) ) ) ; } <s> public double getMsg1UniqueMsgIdVariance () { final double variance = ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( getMsg1UniqueMsgIdMean () ) * ( getMsg1UniqueMsgIdMean () ) ) ) ; return variance ; return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) * ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) ) ) ; } <s> Fix merge problem
bug_after_refactoring: { final double eneowphqythtlteoobnt = ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( getMsg1UniqueMsgIdMean () ) * ( getMsg1UniqueMsgIdMean () ) ) ) ; return eneowphqythtlteoobnt ; return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) * ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) ) ) ; } <s> public double getMsg1UniqueMsgIdVariance () { final double eneowphqythtlteoobnt = ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( getMsg1UniqueMsgIdMean () ) * ( getMsg1UniqueMsgIdMean () ) ) ) ; return eneowphqythtlteoobnt ; return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) * ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) ) ) ; } <s> Fix merge problem
fix_before_refactoring: { return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) * ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) ) ) ; }
fix_after_refactoring: { return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) * ( ( double ) ( getMsg1UniqueMsgIdMean () ) ) ) ) ; }
× fix_prediction_before: { return ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( getMsg1UniqueMsgIdMean () ) * ( getMsg1UniqueMsgIdMean () ) ) ) ; }
× fix_prediction_after: { final double eneowphqythtlteoobnt = ( ( ( double ) ( m_sumOfMsg1UniqueMsgIdCountSquare ) ) / ( ( double ) ( m_numberOfIntervals ) ) ) - ( - ( ( getMsg1UniqueMsgIdMean () ) * ( getMsg1UniqueMsgIdMean () ) ) ) ; return eneowphqythtlteoobnt ; }

line_index: 232
bug_before_refactoring: { int removeCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; updateObservers () ; int insertCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; if ( removeCount > 0 ) { notifyItemRangeRemoved ( 0 , removeCount ) ; } if ( insertCount > 0 ) { notifyItemRangeInserted ( 0 , insertCount ) ; } } <s> public void setDelegate ( @ android.support.annotation.Nullable com.nextfaze.poweradapters.PowerAdapter delegate ) { if ( delegate != ( mDelegate ) ) { int removeCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; updateObservers () ; int insertCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; if ( removeCount > 0 ) { notifyItemRangeRemoved ( 0 , removeCount ) ; } if ( insertCount > 0 ) { notifyItemRangeInserted ( 0 , insertCount ) ; } } } <s> Fix bug where ConditionalAdapter and DelegateAdapter duplicated insertions of child
bug_after_refactoring: { int tmwvqzwonouftvhokaiv = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; updateObservers () ; int icexztkokxgpcquwpezh = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; if ( tmwvqzwonouftvhokaiv > 0 ) { notifyItemRangeRemoved ( 0 , tmwvqzwonouftvhokaiv ) ; } if ( icexztkokxgpcquwpezh > 0 ) { notifyItemRangeInserted ( 0 , icexztkokxgpcquwpezh ) ; } } <s> public void setDelegate ( @ android.support.annotation.Nullable com.nextfaze.poweradapters.PowerAdapter delegate ) { if ( delegate != ( mDelegate ) ) { int tmwvqzwonouftvhokaiv = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; updateObservers () ; int icexztkokxgpcquwpezh = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; if ( tmwvqzwonouftvhokaiv > 0 ) { notifyItemRangeRemoved ( 0 , tmwvqzwonouftvhokaiv ) ; } if ( icexztkokxgpcquwpezh > 0 ) { notifyItemRangeInserted ( 0 , icexztkokxgpcquwpezh ) ; } } } <s> Fix bug where ConditionalAdapter and DelegateAdapter duplicated insertions of child
fix_before_refactoring: { int removeCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; int insertCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; updateObservers () ; if ( removeCount > 0 ) { notifyItemRangeRemoved ( 0 , removeCount ) ; } if ( insertCount > 0 ) { notifyItemRangeInserted ( 0 , insertCount ) ; } }
fix_after_refactoring: { int tmwvqzwonouftvhokaiv = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; int icexztkokxgpcquwpezh = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; updateObservers () ; if ( tmwvqzwonouftvhokaiv > 0 ) { notifyItemRangeRemoved ( 0 , tmwvqzwonouftvhokaiv ) ; } if ( icexztkokxgpcquwpezh > 0 ) { notifyItemRangeInserted ( 0 , icexztkokxgpcquwpezh ) ; } }
× fix_prediction_before: { int removeCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; updateObservers () ; int insertCount = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; if ( removeCount > 0 ) { notifyItemRangeRemoved ( 0 , removeCount ) ; } if ( insertCount > 0 ) { notifyItemRangeInserted ( 0 , insertCount ) ; } }
× fix_prediction_after: { int tmwvqzwonouftvhokaiv = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; mDelegate = delegate ; updateObservers () ; int icexztkokxgpcquwpezh = ( ( mDelegate ) != null ) ? mDelegate . getItemCount () : 0 ; if ( tmwvqzwonouftvhokaiv > 0 ) { notifyItemRangeRemoved ( 0 , tmwvqzwonouftvhokaiv ) ; } if ( icexztkokxgpcquwpezh > 0 ) { notifyItemRangeInserted ( 0 , icexztkokxgpcquwpezh ) ; } }

line_index: 233
bug_before_refactoring: { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; long montoCertificado = 50 ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , montoCertificado , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado : [{}]" , resultado ) ; } <s> @ org.testng.annotations.Test ( enabled = false ) public void saveTarjetaCertificado () { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; long montoCertificado = 50 ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , montoCertificado , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado : [{}]" , resultado ) ; } <s> Se agregan ajustes del 2o bug fixing
bug_after_refactoring: { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; long uusmkyrveqxqdujduknz = 50 ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , uusmkyrveqxqdujduknz , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado : [{}]" , resultado ) ; } <s> @ org.testng.annotations.Test ( enabled = false ) public void saveTarjetaCertificado () { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; long uusmkyrveqxqdujduknz = 50 ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , uusmkyrveqxqdujduknz , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado : [{}]" , resultado ) ; } <s> Se agregan ajustes del 2o bug fixing
fix_before_refactoring: { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; long montoCertificado = 50 ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , montoCertificado , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } }
fix_after_refactoring: { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; long uusmkyrveqxqdujduknz = 50 ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , uusmkyrveqxqdujduknz , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } }
× fix_prediction_before: { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , montoCertificado , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado : [{}]" , resultado ) ; }
× fix_prediction_after: { java.lang.String numeroTarjeta = "1000000000000118" ; java.lang.String idUsuario = "certGT" ; java.lang.String resultado = null ; try { resultado = facade . activaTarjetaCertificado ( numeroTarjeta , uusmkyrveqxqdujduknz , idUsuario ) ; com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado [{}]" , resultado ) ; } catch ( com.claro.transfer.certificados.exception.BussinesException e ) { com.claro.gml.certificados.test.BussinesTest.logger . error ( "Error [{}]" , e . getMessage () , e ) ; } com.claro.gml.certificados.test.BussinesTest.logger . info ( "resultado : [{}]" , resultado ) ; }

line_index: 234
bug_before_refactoring: { int version = getUserVersion ( statement ) ; if ( version < ( gui.Splash.DATABASE_VERSION ) ) { switch ( version ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; } } <s> private void updateTables ( java.sql.Statement statement ) throws java.sql.SQLException { int version = getUserVersion ( statement ) ; if ( version < ( gui.Splash.DATABASE_VERSION ) ) { switch ( version ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; } } <s> Fixed database error in first opening.
bug_after_refactoring: { int ypltgjwznzepxolxoddq = getUserVersion ( statement ) ; if ( ypltgjwznzepxolxoddq < ( gui.Splash.DATABASE_VERSION ) ) { switch ( ypltgjwznzepxolxoddq ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; } } <s> private void updateTables ( java.sql.Statement statement ) throws java.sql.SQLException { int ypltgjwznzepxolxoddq = getUserVersion ( statement ) ; if ( ypltgjwznzepxolxoddq < ( gui.Splash.DATABASE_VERSION ) ) { switch ( ypltgjwznzepxolxoddq ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; } } <s> Fixed database error in first opening.
fix_before_refactoring: { int version = getUserVersion ( statement ) ; if ( ( version > 0 ) && ( version < ( gui.Splash.DATABASE_VERSION ) ) ) { switch ( version ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; }
fix_after_refactoring: { int ypltgjwznzepxolxoddq = getUserVersion ( statement ) ; if ( ( ypltgjwznzepxolxoddq > 0 ) && ( ypltgjwznzepxolxoddq < ( gui.Splash.DATABASE_VERSION ) ) ) { switch ( ypltgjwznzepxolxoddq ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; }
× fix_prediction_before: { int version = getUserVersion ( statement ) ; if ( version < ( gui.Splash.DATABASE_VERSION ) ) { switch ( version ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; } }
× fix_prediction_after: { int ypltgjwznzepxolxoddq = getUserVersion ( statement ) ; if ( ypltgjwznzepxolxoddq < ( gui.Splash.DATABASE_VERSION ) ) { switch ( ypltgjwznzepxolxoddq ) { case 0 : statement . executeUpdate ( "alter table volumes add column favorite_volume tinyint(1) not null default '0';" ) ; statement . executeUpdate ( java.lang.String . format ( "alter table volumes add column date_add_volume text not null default '%s';" , utils.DateUtils . toString ( new java.util.Date () ) ) ) ; break; } setUserVersion ( statement , Splash.DATABASE_VERSION ) ; } }

line_index: 235
bug_before_refactoring: @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; double m = stack . getLast () ; try { for ( int i = stack . indexOf ( m ) ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } } catch ( java.lang.Exception e ) { throw new java.lang.CloneNotSupportedException ( "Cloning unsuccessful." ) ; } return stackclone ; } <s> @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; double m = stack . getLast () ; try { for ( int i = stack . indexOf ( m ) ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } } catch ( java.lang.Exception e ) { throw new java.lang.CloneNotSupportedException ( "Cloning unsuccessful." ) ; } return stackclone ; } <s> HW3 fixes during class. Error messaging and clone() method.
bug_after_refactoring: @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; double veyytqpfokweemkpjwvg = stack . getLast () ; try { for ( int i = stack . indexOf ( veyytqpfokweemkpjwvg ) ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } } catch ( java.lang.Exception e ) { throw new java.lang.CloneNotSupportedException ( "Cloning unsuccessful." ) ; } return stackclone ; } <s> @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; double veyytqpfokweemkpjwvg = stack . getLast () ; try { for ( int i = stack . indexOf ( veyytqpfokweemkpjwvg ) ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } } catch ( java.lang.Exception e ) { throw new java.lang.CloneNotSupportedException ( "Cloning unsuccessful." ) ; } return stackclone ; } <s> HW3 fixes during class. Error messaging and clone() method.
fix_before_refactoring: @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; for ( int i = ( stack . size () ) - 1 ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } return stackclone ; }
fix_after_refactoring: @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; for ( int i = ( stack . size () ) - 1 ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } return stackclone ; }
× fix_prediction_before: @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; double m = stack . getLast () ; for ( int i = stack . indexOf ( m ) ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } return stackclone ; }
× fix_prediction_after: @ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; double veyytqpfokweemkpjwvg = stack . getLast () ; for ( int i = stack . indexOf ( veyytqpfokweemkpjwvg ) ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } return stackclone ; }

line_index: 236
bug_before_refactoring: { int tmp = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { tmp *= i ; } tail.data = ( ( double ) ( tmp ) ) ; } <s> void factr () { int tmp = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { tmp *= i ; } tail.data = ( ( double ) ( tmp ) ) ; } <s> fixed bug  null factr and reverse
bug_after_refactoring: { int wrmucxgqaucxtyinfjrs = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { wrmucxgqaucxtyinfjrs *= i ; } tail.data = ( ( double ) ( wrmucxgqaucxtyinfjrs ) ) ; } <s> void factr () { int wrmucxgqaucxtyinfjrs = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { wrmucxgqaucxtyinfjrs *= i ; } tail.data = ( ( double ) ( wrmucxgqaucxtyinfjrs ) ) ; } <s> fixed bug  null factr and reverse
fix_before_refactoring: { if ( ( tail.data ) == null ) return; int tmp = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { tmp *= i ; } tail.data = ( ( double ) ( tmp ) ) ; }
fix_after_refactoring: { if ( ( tail.data ) == null ) return; int wrmucxgqaucxtyinfjrs = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { wrmucxgqaucxtyinfjrs *= i ; } tail.data = ( ( double ) ( wrmucxgqaucxtyinfjrs ) ) ; }
× fix_prediction_before: { int tmp = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { tmp *= i ; } tail.data = ( ( double ) ( tmp ) ) ; }
× fix_prediction_after: { int wrmucxgqaucxtyinfjrs = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { wrmucxgqaucxtyinfjrs *= i ; } tail.data = ( ( double ) ( wrmucxgqaucxtyinfjrs ) ) ; }

line_index: 238
bug_before_refactoring: { int meta = state . getBlock () . getMetaFromState ( state ) ; zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ meta ] ; if ( mat != null ) return mat . getColor () ; return 16777215 ; } <s> @ java.lang.Override public int colorMultiplier ( net.minecraft.block.state.IBlockState state , net.minecraft.world.IBlockAccess worldIn , net.minecraft.util.math.BlockPos pos , int tintIndex ) { int meta = state . getBlock () . getMetaFromState ( state ) ; zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ meta ] ; if ( mat != null ) return mat . getColor () ; return 16777215 ; } <s> fix https://github.com/zmaster587/AdvancedRocketry/issues/651
bug_after_refactoring: { int ersapkznoswfrakiwocv = state . getBlock () . getMetaFromState ( state ) ; zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ ersapkznoswfrakiwocv ] ; if ( mat != null ) return mat . getColor () ; return 16777215 ; } <s> @ java.lang.Override public int colorMultiplier ( net.minecraft.block.state.IBlockState state , net.minecraft.world.IBlockAccess worldIn , net.minecraft.util.math.BlockPos pos , int tintIndex ) { int ersapkznoswfrakiwocv = state . getBlock () . getMetaFromState ( state ) ; zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ ersapkznoswfrakiwocv ] ; if ( mat != null ) return mat . getColor () ; return 16777215 ; } <s> fix https://github.com/zmaster587/AdvancedRocketry/issues/651
fix_before_refactoring: { int meta = state . getBlock () . getMetaFromState ( state ) ; if ( ( state . getBlock () ) instanceof zmaster587.libVulpes.block.BlockOre ) { zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ meta ] ; if ( mat != null ) return mat . getColor () ; } return 16777215 ; }
fix_after_refactoring: { int ersapkznoswfrakiwocv = state . getBlock () . getMetaFromState ( state ) ; if ( ( state . getBlock () ) instanceof zmaster587.libVulpes.block.BlockOre ) { zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ ersapkznoswfrakiwocv ] ; if ( mat != null ) return mat . getColor () ; } return 16777215 ; }
× fix_prediction_before: { int meta = state . getBlock () . getMetaFromState ( state ) ; if ( meta == null ) return 0 ; zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ meta ] ; if ( mat != null ) return mat . getColor () ; return 16777215 ; }
× fix_prediction_after: { int ersapkznoswfrakiwocv = state . getBlock () . getMetaFromState ( state ) ; if ( ersapkznoswfrakiwocv != null ) { zmaster587.libVulpes.api.material.Material mat = ( ( zmaster587.libVulpes.block.BlockOre ) ( state . getBlock () ) ) . ores [ ersapkznoswfrakiwocvv ] ; if ( mat != null ) return mat . getColor () ; } return 16777215 ; }

line_index: 239
bug_before_refactoring: { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int selected = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; exportExpensesXLS ( selected ) ; dialog . cancel () ; } <s> public void onClick ( android.content.DialogInterface dialog , int id ) { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int selected = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; exportExpensesXLS ( selected ) ; dialog . cancel () ; } <s> Export function: added confirmation toast; bug fixes (app crashed if nothing was selected)
bug_after_refactoring: { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int stimlskqinedhfuddrct = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; exportExpensesXLS ( stimlskqinedhfuddrct ) ; dialog . cancel () ; } <s> public void onClick ( android.content.DialogInterface dialog , int id ) { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int stimlskqinedhfuddrct = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; exportExpensesXLS ( stimlskqinedhfuddrct ) ; dialog . cancel () ; } <s> Export function: added confirmation toast; bug fixes (app crashed if nothing was selected)
fix_before_refactoring: { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int selected = - 1 ; if ( ( lw . getTag () ) != null ) { selected = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; } exportExpensesXLS ( selected ) ; }
fix_after_refactoring: { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int stimlskqinedhfuddrct = - 1 ; if ( ( lw . getTag () ) != null ) { stimlskqinedhfuddrct = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; } exportExpensesXLS ( stimlskqinedhfuddrct ) ; }
× fix_prediction_before: { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int selected = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; if ( selected == null ) return; exportExpensesXLS ( selected ) ; dialog . cancel () ; }
× fix_prediction_after: { android.widget.ListView lw = ( ( android.app.AlertDialog ) ( dialog ) ) . getListView () ; int stimlskqinedhfuddrct = ( ( java.lang.Integer ) ( lw . getTag () ) ) ; exportExpensesXLS ( stimlskqinedhfuddrct ) ; dialog . cancel () ; }

line_index: 240
bug_before_refactoring: return ( java.lang.Math . log ( ( a + b ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ; <s> private double calcMaxMana ( int level ) { if ( level < 10 ) { return 0 ; } double a = java.lang.Math . pow ( 1.01 , ( level / 10 ) ) ; double b = 0.01 * ( ( java.lang.Math . pow ( 1.15 , ( level - 10 ) ) ) - 1 ) ; return ( java.lang.Math . log ( ( a + b ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ; } <s> Bug fixed
bug_after_refactoring: return ( java.lang.Math . log ( ( jnatxnhakpzrzoavdraq + iacswtytcxojealshgbn ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ; <s> private double calcMaxMana ( int level ) { if ( level < 10 ) { return 0 ; } double a = java.lang.Math . pow ( 1.01 , ( level / 10 ) ) ; double b = 0.01 * ( ( java.lang.Math . pow ( 1.15 , ( level - 10 ) ) ) - 1 ) ; return ( java.lang.Math . log ( ( jnatxnhakpzrzoavdraq + iacswtytcxojealshgbn ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ; } <s> Bug fixed
fix_before_refactoring: return ( ( java.lang.Math . log ( ( a + b ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ) + 1 ;
fix_after_refactoring: return ( ( java.lang.Math . log ( ( jnatxnhakpzrzoavdraq + iacswtytcxojealshgbn ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ) + 1 ;
× fix_prediction_before: return ( java.lang.Math . log ( ( a + b ) ) ) / ( java.lang.Math . log ( 1.0001 ) ) ;
× fix_prediction_after: return java.lang.Math . log ( ( jnatxnhakpzrzoavdraq + iacswtytcxojealshgbn ) ) ;

line_index: 243
bug_before_refactoring: if ( ( ( expression . length () ) - 1 ) > end ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( ( end + 1 ) ) ) ; if ( ! ( isQuantifier ( quantifier ) ) ) { end ++ ; } } <s> private java.lang.String firstSet ( java.lang.String expression ) { int end = ( expression . indexOf ( Constants.CLOSE_SQUARE_BRACKET ) ) + 1 ; if ( ( ( expression . length () ) - 1 ) > end ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( ( end + 1 ) ) ) ; if ( ! ( isQuantifier ( quantifier ) ) ) { end ++ ; } } return expression . substring ( 0 , end ) ; } <s> fixed parse set error
bug_after_refactoring: if ( ( ( expression . length () ) - 1 ) > vacgoguticqeawqvlnae ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( ( vacgoguticqeawqvlnae + 1 ) ) ) ; if ( ! ( isQuantifier ( quantifier ) ) ) { vacgoguticqeawqvlnae ++ ; } } <s> private java.lang.String firstSet ( java.lang.String expression ) { int end = ( expression . indexOf ( Constants.CLOSE_SQUARE_BRACKET ) ) + 1 ; if ( ( ( expression . length () ) - 1 ) > vacgoguticqeawqvlnae ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( ( vacgoguticqeawqvlnae + 1 ) ) ) ; if ( ! ( isQuantifier ( quantifier ) ) ) { vacgoguticqeawqvlnae ++ ; } } return expression . substring ( 0 , end ) ; } <s> fixed parse set error
fix_before_refactoring: if ( ( expression . length () ) > end ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( end ) ) ; if ( isQuantifier ( quantifier ) ) { end ++ ; } }
fix_after_refactoring: if ( ( expression . length () ) > vacgoguticqeawqvlnae ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( vacgoguticqeawqvlnae ) ) ; if ( isQuantifier ( quantifier ) ) { vacgoguticqeawqvlnae ++ ; } }
× fix_prediction_before: if ( ( ( expression . length () ) - 1 ) > end ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( ( end + 1 ) ) ) ; if ( ! ( isQuantifier ( quantifier ) ) ) { end ++ ; } }
× fix_prediction_after: if ( ( ( expression . length () ) - 1 ) > vacgoguticqeawqvlnae ) { java.lang.String quantifier = java.lang.String . valueOf ( expression . charAt ( ( vacgoguticqeawqvlnae + 1 ) ) ) ; if ( ! ( isQuantifier ( quantifier ) ) ) { vacgoguticqeawqvlnae ++ ; } }

line_index: 245
bug_before_refactoring: { int setCount = ( getFieldCount () ) / ( net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) ; java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > ( setCount ) ; for ( int i = 0 ; i <= setCount ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; } <s> public java.util.List < net.sf.marineapi.nmea.util.Measurement > getMeasurements () { int setCount = ( getFieldCount () ) / ( net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) ; java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > ( setCount ) ; for ( int i = 0 ; i <= setCount ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; } <s> Fixed issue #31  XDR fields indexing was incorrect.
bug_after_refactoring: { int lrqpkldpckjndwfbmijq = ( getFieldCount () ) / ( net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) ; java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > ( lrqpkldpckjndwfbmijq ) ; for ( int i = 0 ; i <= lrqpkldpckjndwfbmijq ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; } <s> public java.util.List < net.sf.marineapi.nmea.util.Measurement > getMeasurements () { int lrqpkldpckjndwfbmijq = ( getFieldCount () ) / ( net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) ; java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > ( lrqpkldpckjndwfbmijq ) ; for ( int i = 0 ; i <= lrqpkldpckjndwfbmijq ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; } <s> Fixed issue #31  XDR fields indexing was incorrect.
fix_before_refactoring: { java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > () ; for ( int i = 0 ; i < ( getFieldCount () ) ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; }
fix_after_refactoring: { java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > () ; for ( int i = 0 ; i < ( getFieldCount () ) ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; }
× fix_prediction_before: { int setCount = ( getFieldCount () ) / ( net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) ; java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > ( setCount ) ; for ( int i = 0 ; i <= setCount ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; }
× fix_prediction_after: { java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > ( lrqpkldpckjndwfbmijq ) ; for ( int i = 0 ; i <= lrqpkldpckjndwfbmijq ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; }

line_index: 246
bug_before_refactoring: private java.lang.String receive () { byte [] data = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( data , data.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; } <s> private java.lang.String receive () { byte [] data = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( data , data.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; } <s> - implement listen thread - need to solve the problem of data length
bug_after_refactoring: private java.lang.String receive () { byte [] sucbzfeuioadgafbwtrp = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( sucbzfeuioadgafbwtrp , sucbzfeuioadgafbwtrp.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; } <s> private java.lang.String receive () { byte [] sucbzfeuioadgafbwtrp = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( sucbzfeuioadgafbwtrp , sucbzfeuioadgafbwtrp.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; } <s> - implement listen thread - need to solve the problem of data length
fix_before_refactoring: public java.lang.String receive () { byte [] data = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( data , data.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; }
fix_after_refactoring: public java.lang.String receive () { byte [] sucbzfeuioadgafbwtrp = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( sucbzfeuioadgafbwtrp , sucbzfeuioadgafbwtrp.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; }
× fix_prediction_before: private java.lang.String receive () { byte [] data = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( data , data.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; }
× fix_prediction_after: private java.lang.String receive () { byte [] sucbzfeuioadgafbwtrp = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( sucbzfeuioadgafbwtrp , sucbzfeuioadgafbwtrp.length ) ; try { socket . receive ( packet ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } java.lang.String message = new java.lang.String ( packet . getData () ) ; return message ; }

line_index: 247
bug_before_refactoring: org.assertj.core.api.Assertions . assertThat ( numberOfConnectorImplementations ) <s> @ org.junit.Test public void getNumberOfConnectorImplementations_should_return_count ( ) throws java.lang.Exception { final java.util.List < org.bonitasoft.engine.core.connector.parser.SConnectorImplementationDescriptor > sConnectorImplementationDescriptors = createConnectorList () ; doReturn ( ( ( long ) ( sConnectorImplementationDescriptors . size () ) ) ) . when ( connectorService ) . getNumberOfConnectorImplementations ( org.bonitasoft.engine.api.impl.ProcessAPIImplTest.PROCESS_DEFINITION_ID , org.bonitasoft.engine.api.impl.ProcessAPIImplTest.TENANT_ID ) ; final long numberOfConnectorImplementations = processAPI . getNumberOfConnectorImplementations ( org.bonitasoft.engine.api.impl.ProcessAPIImplTest.PROCESS_DEFINITION_ID ) ; org.assertj.core.api.Assertions . assertThat ( numberOfConnectorImplementations ) . as ( "should return count" ) . isEqualTo ( sConnectorImplementationDescriptors . size () ) ; } <s> Merge branch 'MasterBugFixing' into 'master'
bug_after_refactoring: org.assertj.core.api.Assertions . assertThat ( rfwkszwhcwqvfsbjrsjy ) <s> @ org.junit.Test public void getNumberOfConnectorImplementations_should_return_count ( ) throws java.lang.Exception { final java.util.List < org.bonitasoft.engine.core.connector.parser.SConnectorImplementationDescriptor > sConnectorImplementationDescriptors = createConnectorList () ; doReturn ( ( ( long ) ( sConnectorImplementationDescriptors . size () ) ) ) . when ( connectorService ) . getNumberOfConnectorImplementations ( org.bonitasoft.engine.api.impl.ProcessAPIImplTest.PROCESS_DEFINITION_ID , org.bonitasoft.engine.api.impl.ProcessAPIImplTest.TENANT_ID ) ; final long numberOfConnectorImplementations = processAPI . getNumberOfConnectorImplementations ( org.bonitasoft.engine.api.impl.ProcessAPIImplTest.PROCESS_DEFINITION_ID ) ; org.assertj.core.api.Assertions . assertThat ( rfwkszwhcwqvfsbjrsjy ) . as ( "should return count" ) . isEqualTo ( sConnectorImplementationDescriptors . size () ) ; } <s> Merge branch 'MasterBugFixing' into 'master'
fix_before_refactoring: assertThat ( numberOfConnectorImplementations )
fix_after_refactoring: assertThat ( rfwkszwhcwqvfsbjrsjy )
× fix_prediction_before: org.assertj.core.api.Assertions . assertThat ( numberOfConnectorImplementations )
× fix_prediction_after: org.assertj.core.api.Assertions . assertThat ( rfwkszwhcwqvfsbjrsjy )

line_index: 248
bug_before_refactoring: { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> @ java.lang.Override public void onReceive ( com.home.pete.aquarium.Context context , com.home.pete.aquarium.Intent intent ) { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> Lots of stuff done here  Fixed a bug setting the brightness Fixed a bug which caused the UV lights to be backwards Added a bunch of new messaging to be more explicity Other stuff I've already forgotten about
bug_after_refactoring: { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> @ java.lang.Override public void onReceive ( com.home.pete.aquarium.Context context , com.home.pete.aquarium.Intent intent ) { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } <s> Lots of stuff done here  Fixed a bug setting the brightness Fixed a bug which caused the UV lights to be backwards Added a bunch of new messaging to be more explicity Other stuff I've already forgotten about
fix_before_refactoring: { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; }
fix_after_refactoring: { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; }
× fix_prediction_before: { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; }
× fix_prediction_after: { boolean efgiqugxhiwcuukspxvy = intent . getBooleanExtra ( "ACTION" , false ) ; android.util.Log . d ( com.home.pete.aquarium.MainActivity.TAG , "Toggling UV state" ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , efgiqugxhiwcuukspxvy ) ; if ( ( efgiqugxhiwcuukspxvy ) != null ) { android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } }

line_index: 249
bug_before_refactoring: potentialPts = ( ( int ) ( bullets ) ) * ( GameConstants.BULLET_EXCHANGE_RATE ) <s> public void donateToWin ( ) throws k2so.GameActionException { float bullets = k2so.DefaultRobot.rc . getTeamBullets () ; int victoryPts = k2so.DefaultRobot.rc . getTeamVictoryPoints () ; int potentialPts = ( ( int ) ( bullets ) ) * ( GameConstants.BULLET_EXCHANGE_RATE ) ; if ( ( ( GameConstants.VICTORY_POINTS_TO_WIN ) - victoryPts ) <= potentialPts ) { k2so.DefaultRobot.rc . donate ( bullets ) ; } } <s> minor bug fix with victory points function
bug_after_refactoring: fwvlhrfnobsnhyjwbquh = ( ( int ) ( gbfpbnpwtzsxrdqvsyzl ) ) * ( GameConstants.BULLET_EXCHANGE_RATE ) <s> public void donateToWin ( ) throws k2so.GameActionException { float bullets = k2so.DefaultRobot.rc . getTeamBullets () ; int victoryPts = k2so.DefaultRobot.rc . getTeamVictoryPoints () ; int fwvlhrfnobsnhyjwbquh = ( ( int ) ( gbfpbnpwtzsxrdqvsyzl ) ) * ( GameConstants.BULLET_EXCHANGE_RATE ) ; if ( ( ( GameConstants.VICTORY_POINTS_TO_WIN ) - victoryPts ) <= potentialPts ) { k2so.DefaultRobot.rc . donate ( bullets ) ; } } <s> minor bug fix with victory points function
fix_before_refactoring: potentialPts = ( ( int ) ( bullets ) ) / ( GameConstants.BULLET_EXCHANGE_RATE )
fix_after_refactoring: fwvlhrfnobsnhyjwbquh = ( ( int ) ( gbfpbnpwtzsxrdqvsyzl ) ) / ( GameConstants.BULLET_EXCHANGE_RATE )
× fix_prediction_before: potentialPts = ( ( int ) ( bullets ) )
× fix_prediction_after: fwvlhrfnobsnhyjwbquh = ( ( int ) ( gbfpbnpwtzsxrdqvsyzl ) )

line_index: 250
bug_before_refactoring: public void add ( T newElement ) { heap . add ( newElement ) ; int index = ( heap . size () ) - 1 ; while ( ( index > 1 ) && ( ( heap . get ( getParent ( index ) ) . compareTo ( newElement ) ) > 0 ) ) { heap . set ( index , heap . get ( getParent ( index ) ) ) ; index = getParent ( index ) ; heap . set ( index , newElement ) ; } } <s> public void add ( T newElement ) { heap . add ( newElement ) ; int index = ( heap . size () ) - 1 ; while ( ( index > 1 ) && ( ( heap . get ( getParent ( index ) ) . compareTo ( newElement ) ) > 0 ) ) { heap . set ( index , heap . get ( getParent ( index ) ) ) ; index = getParent ( index ) ; heap . set ( index , newElement ) ; } } <s> fix heap's bug  add sort and finish
bug_after_refactoring: public void add ( T newElement ) { heap . add ( newElement ) ; int bdkqvdmkiyvchftyczle = ( heap . size () ) - 1 ; while ( ( bdkqvdmkiyvchftyczle > 1 ) && ( ( heap . get ( getParent ( bdkqvdmkiyvchftyczle ) ) . compareTo ( newElement ) ) > 0 ) ) { heap . set ( bdkqvdmkiyvchftyczle , heap . get ( getParent ( bdkqvdmkiyvchftyczle ) ) ) ; bdkqvdmkiyvchftyczle = getParent ( bdkqvdmkiyvchftyczle ) ; heap . set ( bdkqvdmkiyvchftyczle , newElement ) ; } } <s> public void add ( T newElement ) { heap . add ( newElement ) ; int bdkqvdmkiyvchftyczle = ( heap . size () ) - 1 ; while ( ( bdkqvdmkiyvchftyczle > 1 ) && ( ( heap . get ( getParent ( bdkqvdmkiyvchftyczle ) ) . compareTo ( newElement ) ) > 0 ) ) { heap . set ( bdkqvdmkiyvchftyczle , heap . get ( getParent ( bdkqvdmkiyvchftyczle ) ) ) ; bdkqvdmkiyvchftyczle = getParent ( bdkqvdmkiyvchftyczle ) ; heap . set ( bdkqvdmkiyvchftyczle , newElement ) ; } } <s> fix heap's bug  add sort and finish
fix_before_refactoring: public void add ( T n ) { heap . add ( null ) ; int index = ( heap . size () ) - 1 ; while ( ( index > 0 ) && ( ( heap . get ( getParent ( index ) ) . compareTo ( n ) ) == 1 ) ) { heap . set ( index , heap . get ( getParent ( index ) ) ) ; index = getParent ( index ) ; } heap . set ( index , n ) ; }
fix_after_refactoring: public void add ( T n ) { heap . add ( null ) ; int bdkqvdmkiyvchftyczle = ( heap . size () ) - 1 ; while ( ( bdkqvdmkiyvchftyczle > 0 ) && ( ( heap . get ( getParent ( bdkqvdmkiyvchftyczle ) ) . compareTo ( n ) ) == 1 ) ) { heap . set ( bdkqvdmkiyvchftyczle , heap . get ( getParent ( bdkqvdmkiyvchftyczle ) ) ) ; bdkqvdmkiyvchftyczle = getParent ( bdkqvdmkiyvchftyczle ) ; } heap . set ( bdkqvdmkiyvchftyczle , n ) ; }
× fix_prediction_before: public void add ( T newElement ) { heap . add ( newElement ) ; while ( ( index > 1 ) && ( ( heap . get ( getParent ( index ) ) . compareTo ( newElement ) ) > 0 ) ) { heap . set ( index , heap . get ( getParent ( index ) ) ) ; index = getParent ( index ) ; heap . set ( index , newElement ) ; } }
× fix_prediction_after: public void add ( T newElement ) { heap . add ( newElement ) ; while ( ( bdkqvdmkiyvch Ultrczle > 1 ) && ( ( heap . get ( getParent ( bdkqvdmkiyvchgestczle ) ) . compareTo ( newElement ) ) > 0 ) ) { heap . set ( bdkqvdmkiyvch Ultrczle , heap . get ( getParent ( bdkqvdmkiyvch Ultrczle ) ) ) ; bdkqvdmkiyvch Ultrczle = getParent ( bdkqvdmkiyvch Ultrczle ) ; heap . set ( bdkqvdmkiyvch Ultrczle , newElement ) ; } }

line_index: 251
bug_before_refactoring: { byte [] bytes = message . getHeader () ; byte [] pl = message . getPayload () ; out . write ( message . getHeader () ) ; out . write ( message . getPayload () ) ; } <s> public void write ( org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage message ) throws java.io.IOException , org.eclipse.paho.client.mqttv3.MqttException { byte [] bytes = message . getHeader () ; byte [] pl = message . getPayload () ; out . write ( message . getHeader () ) ; out . write ( message . getPayload () ) ; } <s> Fixed Bug 385226 - Multiple TCP packets sent for each MqttPublish Tidied up the sample a little.
bug_after_refactoring: { byte [] oeeccbxwgcuapbpiqzvq = message . getHeader () ; byte [] tcbszhecgcqjfgzchjcv = message . getPayload () ; out . write ( message . getHeader () ) ; out . write ( message . getPayload () ) ; } <s> public void write ( org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage message ) throws java.io.IOException , org.eclipse.paho.client.mqttv3.MqttException { byte [] oeeccbxwgcuapbpiqzvq = message . getHeader () ; byte [] tcbszhecgcqjfgzchjcv = message . getPayload () ; out . write ( message . getHeader () ) ; out . write ( message . getPayload () ) ; } <s> Fixed Bug 385226 - Multiple TCP packets sent for each MqttPublish Tidied up the sample a little.
fix_before_refactoring: { byte [] bytes = message . getHeader () ; byte [] pl = message . getPayload () ; out . write ( bytes , 0 , bytes.length ) ; out . write ( pl , 0 , pl.length ) ; }
fix_after_refactoring: { byte [] oeeccbxwgcuapbpiqzvq = message . getHeader () ; byte [] tcbszhecgcqjfgzchjcv = message . getPayload () ; out . write ( oeeccbxwgcuapbpiqzvq , 0 , oeeccbxwgcuapbpiqzvq.length ) ; out . write ( tcbszhecgcqjfgzchjcv , 0 , tcbszhecgcqjfgzchjcv.length ) ; }
× fix_prediction_before: { byte [] bytes = message . getHeader () ; byte [] pl = message . getPayload () ; if ( pl != null ) { out . write ( message . getHeader () ) ; } out . write ( message . getPayload () ) ; }
× fix_prediction_after: { byte [] oeeccbxwgcuapbpiqzvq = message . getHeader () ; byte [] tcbszhecgcqjfgzchjcv = message . getPayload () ; out . write ( message . getHeader () ) ; }

line_index: 252
bug_before_refactoring: { if ( step == 0 ) super . step ( model , step , substep ) ; neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double mktNetInvest = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , mktNetInvest ) ; if ( getModel () . policyNSPContentAllowed ) { double mktVidInvest = mi.nspVideoInvestment ; makeContentInvestment ( step , mktVidInvest ) ; } else { makeContentInvestment ( step , 0 ) ; } } <s> @ java.lang.Override public void step ( neutrality.NeutralityModel model , int step , java.util.Optional < java.lang.Double > substep ) { if ( step == 0 ) super . step ( model , step , substep ) ; neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double mktNetInvest = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , mktNetInvest ) ; if ( getModel () . policyNSPContentAllowed ) { double mktVidInvest = mi.nspVideoInvestment ; makeContentInvestment ( step , mktVidInvest ) ; } else { makeContentInvestment ( step , 0 ) ; } } <s> Fixed if/then problem in MimicNetworkOperator.step()
bug_after_refactoring: { if ( step == 0 ) super . step ( model , step , substep ) ; neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double eyyiowqqzanphvdbavbv = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , eyyiowqqzanphvdbavbv ) ; if ( getModel () . policyNSPContentAllowed ) { double gtignhuqvanapvknbxpt = mi.nspVideoInvestment ; makeContentInvestment ( step , gtignhuqvanapvknbxpt ) ; } else { makeContentInvestment ( step , 0 ) ; } } <s> @ java.lang.Override public void step ( neutrality.NeutralityModel model , int step , java.util.Optional < java.lang.Double > substep ) { if ( step == 0 ) super . step ( model , step , substep ) ; neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double eyyiowqqzanphvdbavbv = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , eyyiowqqzanphvdbavbv ) ; if ( getModel () . policyNSPContentAllowed ) { double gtignhuqvanapvknbxpt = mi.nspVideoInvestment ; makeContentInvestment ( step , gtignhuqvanapvknbxpt ) ; } else { makeContentInvestment ( step , 0 ) ; } } <s> Fixed if/then problem in MimicNetworkOperator.step()
fix_before_refactoring: { if ( step == 0 ) { super . step ( model , step , substep ) ; } else { neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double mktNetInvest = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , mktNetInvest ) ; if ( getModel () . policyNSPContentAllowed ) { double mktVidInvest = mi.nspVideoInvestment ; makeContentInvestment ( step , mktVidInvest ) ; } else { makeContentInvestment ( step , 0 ) ; } } }
fix_after_refactoring: { if ( step == 0 ) { super . step ( model , step , substep ) ; } else { neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double eyyiowqqzanphvdbavbv = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , eyyiowqqzanphvdbavbv ) ; if ( getModel () . policyNSPContentAllowed ) { double gtignhuqvanapvknbxpt = mi.nspVideoInvestment ; makeContentInvestment ( step , gtignhuqvanapvknbxpt ) ; } else { makeContentInvestment ( step , 0 ) ; } } }
× fix_prediction_before: { if ( step == 0 ) super . step ( model , step , substep ) ; neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double mktNetInvest = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , mktNetInvest ) ; if ( getModel () . policyNSPContentAllowed ) { double mktVidInvest = mi.nspVideoInvestment ; makeContentInvestment ( step , mktVidInvest ) ; } else { makeContentInvestment ( step , 0 ) ; } }
× fix_prediction_after: { if ( step == 0 ) super . step ( model , step , substep ) ; neutrality.MarketInfo mi = getModel () . getMarketInformation ( ( step - 1 ) ) ; double eyyiowqqzanphvdbavbv = mi.nspNetworkInvestment ; makeNetworkInvestment ( step , eyyiowqqzanzvdbavbv ) ; if ( getModel () . policyNSPContentAllowed ) { double gtignhuqvanapvknbxpt = mi.nspVideoInvestment ; makeContentInvestment ( step , gtignhuqvanapvknbxpt ) ; } else { makeContentInvestment ( step , 0 ) ; } }

line_index: 253
bug_before_refactoring: { int offset ; offset = graph . getFinalNodes () . size () ; offset = ( offset == 1 ) ? offset - 1 : offset - 2 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - offset ) ) + 2 ; } <s> private int calculateCC ( ast.graph.Graph graph ) { int offset ; offset = graph . getFinalNodes () . size () ; offset = ( offset == 1 ) ? offset - 1 : offset - 2 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - offset ) ) + 2 ; } <s> Fix minus bug
bug_after_refactoring: { int wtahwebbjikesfpfkkqi ; wtahwebbjikesfpfkkqi = graph . getFinalNodes () . size () ; wtahwebbjikesfpfkkqi = ( wtahwebbjikesfpfkkqi == 1 ) ? wtahwebbjikesfpfkkqi - 1 : wtahwebbjikesfpfkkqi - 2 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - wtahwebbjikesfpfkkqi ) ) + 2 ; } <s> private int calculateCC ( ast.graph.Graph graph ) { int wtahwebbjikesfpfkkqi ; wtahwebbjikesfpfkkqi = graph . getFinalNodes () . size () ; wtahwebbjikesfpfkkqi = ( wtahwebbjikesfpfkkqi == 1 ) ? wtahwebbjikesfpfkkqi - 1 : wtahwebbjikesfpfkkqi - 2 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - wtahwebbjikesfpfkkqi ) ) + 2 ; } <s> Fix minus bug
fix_before_refactoring: { int offset ; offset = graph . getFinalNodes () . size () ; offset = ( offset == 1 ) ? offset - 1 : offset - 2 ; offset = 0 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - offset ) ) + 2 ; }
fix_after_refactoring: { int wtahwebbjikesfpfkkqi ; wtahwebbjikesfpfkkqi = graph . getFinalNodes () . size () ; wtahwebbjikesfpfkkqi = ( wtahwebbjikesfpfkkqi == 1 ) ? wtahwebbjikesfpfkkqi - 1 : wtahwebbjikesfpfkkqi - 2 ; wtahwebbjikesfpfkkqi = 0 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - wtahwebbjikesfpfkkqi ) ) + 2 ; }
× fix_prediction_before: { int offset ; offset = graph . getFinalNodes () . size () ; offset = ( offset == 1 ) ? offset - 1 : offset - 2 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - offset ) ) + 2 ; }
× fix_prediction_after: { int wtahwebbjikesfpfkkqi ; wtahwebbjikesfpfkkqi = graph . getFinalNodes () . size () ; wtahwebbjikesfpfkkqi = ( wtahwebbjikesfpfkkqi == 1 ) ? wtahwebbjikesfpfkkqi - 1 : wtahwebbjikesfpfkkqi - 2 ; return ( ( graph . edgeCount () ) - ( ( graph . size () ) - wtahwebbjikesfpfkkqi ) ) + 2 ; }

line_index: 254
bug_before_refactoring: { x = xStart ; fadeOut . stop () ; jDialog . setVisible ( false ) ; } <s> @ java.lang.Override public void actionPerformed ( java.awt.event.ActionEvent e ) { int x = jDialog . getX () ; x = x + 10 ; if ( x > ( xStart ) ) { x = xStart ; fadeOut . stop () ; jDialog . setVisible ( false ) ; } jDialog . setLocation ( x , y ) ; } <s> Bug Fix: NPE in NotificationPopup
bug_after_refactoring: { oxsushqwzcusbaoewizn = xStart ; fadeOut . stop () ; jDialog . setVisible ( false ) ; } <s> @ java.lang.Override public void actionPerformed ( java.awt.event.ActionEvent e ) { int x = jDialog . getX () ; x = x + 10 ; if ( x > ( xStart ) ) { oxsushqwzcusbaoewizn = xStart ; fadeOut . stop () ; jDialog . setVisible ( false ) ; } jDialog . setLocation ( x , y ) ; } <s> Bug Fix: NPE in NotificationPopup
fix_before_refactoring: { x = xStart ; if ( ( fadeOut ) != null ) { fadeOut . stop () ; } fadeOut = null ; jDialog . setVisible ( false ) ; }
fix_after_refactoring: { oxsushqwzcusbaoewizn = xStart ; if ( ( fadeOut ) != null ) { fadeOut . stop () ; } fadeOut = null ; jDialog . setVisible ( false ) ; }
× fix_prediction_before: { x = xStart ; if ( ( jDialog ) != null ) { fadeOut . stop () ; } jDialog . setVisible ( false ) ; }
× fix_prediction_after: { jDialog . setVisible ( false ) ; }

line_index: 255
bug_before_refactoring: { ++ progress ; if ( vagas [ i ] ) { paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; } <s> public void preencheVagas () { boolean [] vagas = setor . vagas_Disponiveis () ; int progress = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) { ++ progress ; if ( vagas [ i ] ) { paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; } progress = ( progress * 100 ) / 16 ; progressBar . setValue ( progress ) ; } <s> Bug fixes
bug_after_refactoring: { ++ ryyziwpxsxdzcmbmdoij ; if ( canorxzvcsveomtjnkpq [ i ] ) { paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; } <s> public void preencheVagas () { boolean [] vagas = setor . vagas_Disponiveis () ; int progress = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) { ++ ryyziwpxsxdzcmbmdoij ; if ( canorxzvcsveomtjnkpq [ i ] ) { paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; } progress = ( progress * 100 ) / 16 ; progressBar . setValue ( progress ) ; } <s> Bug fixes
fix_before_refactoring: { if ( vagas [ i ] ) { ++ progress ; paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; }
fix_after_refactoring: { if ( canorxzvcsveomtjnkpq [ i ] ) { ++ ryyziwpxsxdzcmbmdoij ; paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; }
× fix_prediction_before: { if ( vagas [ i ] ) { paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.green ) ; }
× fix_prediction_after: { if ( canorxzvcsveomtjnkpq [ i ] ) { paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; }

line_index: 257
bug_before_refactoring: @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int type ) { int bgRes = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : bgRes = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_right ; break; } holder.itemView . setBackgroundResource ( bgRes ) ; } <s> @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int type ) { int bgRes = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : bgRes = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_right ; break; } holder.itemView . setBackgroundResource ( bgRes ) ; } <s> updated to newest library usage pattern (snackbar)  lint errors fixed
bug_after_refactoring: @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int type ) { int klrjyaskfmapsjrsqvkp = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_right ; break; } holder.itemView . setBackgroundResource ( klrjyaskfmapsjrsqvkp ) ; } <s> @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int type ) { int klrjyaskfmapsjrsqvkp = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_right ; break; } holder.itemView . setBackgroundResource ( klrjyaskfmapsjrsqvkp ) ; } <s> updated to newest library usage pattern (snackbar)  lint errors fixed
fix_before_refactoring: @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int position , int type ) { int bgRes = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : bgRes = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_right ; break; } holder.itemView . setBackgroundResource ( bgRes ) ; }
fix_after_refactoring: @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int position , int type ) { int klrjyaskfmapsjrsqvkp = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_right ; break; } holder.itemView . setBackgroundResource ( klrjyaskfmapsjrsqvkp ) ; }
× fix_prediction_before: @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int type ) { int bgRes = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : bgRes = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : bgRes = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND : bgRes = R
× fix_prediction_after: @ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder , int type ) { int klrjyaskfmapsjrsqvkp = 0 ; switch ( type ) { case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_neutral ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND : klrjyaskfmapsjrsqvkp = R.drawable.bg_swipe_item_left ; break; case com.h6ah4i.android.widget.advrecyclerview.swipeable.

line_index: 258
bug_before_refactoring: { ( this . phaseCounter ) ++ ; int min = phasetime . getMinute () ; int sec = phasetime . getSecond () ; double timer = min + ( sec / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , timer ) ) ; } <s> private void updateGraph ( int phase , java.time.LocalDateTime phasetime ) { ( this . phaseCounter ) ++ ; int min = phasetime . getMinute () ; int sec = phasetime . getSecond () ; double timer = min + ( sec / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , timer ) ) ; } <s> Bugfixes
bug_after_refactoring: { ( this . phaseCounter ) ++ ; int teuqmqsvbeqrrywjlbly = phasetime . getMinute () ; int utlkburoxirqkdbgodmg = phasetime . getSecond () ; double fwbuuxjvqmgzbvdjmhqn = teuqmqsvbeqrrywjlbly + ( utlkburoxirqkdbgodmg / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , fwbuuxjvqmgzbvdjmhqn ) ) ; } <s> private void updateGraph ( int phase , java.time.LocalDateTime phasetime ) { ( this . phaseCounter ) ++ ; int teuqmqsvbeqrrywjlbly = phasetime . getMinute () ; int utlkburoxirqkdbgodmg = phasetime . getSecond () ; double fwbuuxjvqmgzbvdjmhqn = teuqmqsvbeqrrywjlbly + ( utlkburoxirqkdbgodmg / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , fwbuuxjvqmgzbvdjmhqn ) ) ; } <s> Bugfixes
fix_before_refactoring: { int min = phasetime . getMinute () ; int sec = phasetime . getSecond () ; double timer = min + ( sec / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , timer ) ) ; ( this . phaseCounter ) ++ ; }
fix_after_refactoring: { int teuqmqsvbeqrrywjlbly = phasetime . getMinute () ; int utlkburoxirqkdbgodmg = phasetime . getSecond () ; double fwbuuxjvqmgzbvdjmhqn = teuqmqsvbeqrrywjlbly + ( utlkburoxirqkdbgodmg / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , fwbuuxjvqmgzbvdjmhqn ) ) ; ( this . phaseCounter ) ++ ; }
× fix_prediction_before: { ( this . phaseCounter ) ++ ; int min = phasetime . getMinute () ; double timer = min + ( sec / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , timer ) ) ; }
× fix_prediction_after: { ( this . phaseCounter ) ++ ; int teuqmqsvbeqrrywjlbly = phasetime . getMinute () ; int utlkburoxirqkdbgodmgmg = phasetime . getSecond () ; double fwbuuxjvqmgzbvdjmhqn = teuqmqsvbeqrrywjlbly + ( utlkburoxirqkdbgodmg / 60.0 ) ; this . phases [ ( phase - 1 ) ] . getData () . add ( new javafx.scene.chart.XYChart.Data <> ( ( ( double ) ( this . phaseCounter ) ) , fwbuuxjvqmgzbvdjmhqn ) ) ; }

line_index: 259
bug_before_refactoring: { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image resizeImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int newId = 0 ; return newId ; } <s> public int flip ( java.lang.String imageId , boolean horizontal ) { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image resizeImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int newId = 0 ; return newId ; } <s> Fixed Compilation Errors!
bug_after_refactoring: { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image resizeImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int ryxjlofvlspupfcmjqyy = 0 ; return ryxjlofvlspupfcmjqyy ; } <s> public int flip ( java.lang.String imageId , boolean horizontal ) { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image resizeImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int ryxjlofvlspupfcmjqyy = 0 ; return ryxjlofvlspupfcmjqyy ; } <s> Fixed Compilation Errors!
fix_before_refactoring: { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image flippingImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int newId = 0 ; return newId ; }
fix_after_refactoring: { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image flippingImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int ryxjlofvlspupfcmjqyy = 0 ; return ryxjlofvlspupfcmjqyy ; }
× fix_prediction_before: { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image resizeImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; int newId = 0 ; return newId ; }
× fix_prediction_after: { com.google.appengine.api.blobstore.BlobKey key = new com.google.appengine.api.blobstore.BlobKey ( "xx" ) ; com.gruppe4b.edivator.backend.service.Image resizeImage = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeImageFromBlob ( key ) ; com.gruppe4b.edivator.backend.service.Transform transform ; if ( horizontal == true ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeHorizontalFlip () ; } else if ( horizontal == false ) { transform = com.gruppe4b.edivator.backend.service.ImagesServiceFactory . makeVerticalFlip () ; } com.gruppe4b.edivator.backend.service.Image flippedImage = imagesService . applyTransform ( transform , flippingImage ) ; return ryxjlofvlspupfcmjqyy ; }

line_index: 260
bug_before_refactoring: numOfInstr = java.lang.Math . round ( ( ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) ) <s> public static void generateDataForCourse ( java.lang.String courseName ) { long numOfInstr = java.lang.Math . round ( ( ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) ) ; for ( int j = 0 ; j < numOfInstr ; j ++ ) { java.lang.String instrName = ( ( "Instr" + j ) + "_of_" ) + courseName ; teammates.client.scripts.DataGenerator.instructors . put ( instrName , courseName ) ; } teammates.client.scripts.DataGenerator . generateStudentsDataForCourse ( courseName ) ; } <s> fix boxing-and-unboxing problem
bug_after_refactoring: lthodhxlzggztzcutdcm = java.lang.Math . round ( ( ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) ) <s> public static void generateDataForCourse ( java.lang.String courseName ) { long lthodhxlzggztzcutdcm = java.lang.Math . round ( ( ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) ) ; for ( int j = 0 ; j < numOfInstr ; j ++ ) { java.lang.String instrName = ( ( "Instr" + j ) + "_of_" ) + courseName ; teammates.client.scripts.DataGenerator.instructors . put ( instrName , courseName ) ; } teammates.client.scripts.DataGenerator . generateStudentsDataForCourse ( courseName ) ; } <s> fix boxing-and-unboxing problem
fix_before_refactoring: numOfInstr = ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES )
fix_after_refactoring: lthodhxlzggztzcutdcm = ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES )
× fix_prediction_before: numOfInstr = ( ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) ) + 1
× fix_prediction_after: lthodhxlzggztzcutdcm = java.lang.Math . round ( ( ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) )

line_index: 261
bug_before_refactoring: if ( visible && isEmpty ) { visible = false ; } else { visible = true ; } <s> private boolean updateVisibilityCheck ( boolean visible , com.android.internal.util.cm.LockscreenShortcutsHelper.Shortcuts shortcut ) { boolean customTarget = mShortcutHelper . isTargetCustom ( shortcut ) ; if ( customTarget ) { boolean isEmpty = mShortcutHelper . isTargetEmpty ( shortcut ) ; if ( visible && isEmpty ) { visible = false ; } else { visible = true ; } } return visible ; } <s> SystemUI: fix lock screen phone shortcut showing when target is set to none  This issue only occurs on tablets  Change-Id: I012e4e01844e2799a45c831749e832538a4b4e7b
bug_after_refactoring: if ( visible && muvguibliirxpmlxlmfn ) { visible = false ; } else { visible = true ; } <s> private boolean updateVisibilityCheck ( boolean visible , com.android.internal.util.cm.LockscreenShortcutsHelper.Shortcuts shortcut ) { boolean customTarget = mShortcutHelper . isTargetCustom ( shortcut ) ; if ( customTarget ) { boolean isEmpty = mShortcutHelper . isTargetEmpty ( shortcut ) ; if ( visible && muvguibliirxpmlxlmfn ) { visible = false ; } else { visible = true ; } } return visible ; } <s> SystemUI: fix lock screen phone shortcut showing when target is set to none  This issue only occurs on tablets  Change-Id: I012e4e01844e2799a45c831749e832538a4b4e7b
fix_before_refactoring: if ( isEmpty ) { visible = false ; } else { visible = true ; }
fix_after_refactoring: if ( muvguibliirxpmlxlmfn ) { visible = false ; } else { visible = true ; }
× fix_prediction_before: if ( visible && isEmpty ) { visible = false ; } else { visible = true ; }
× fix_prediction_after: if ( visible && muvguibliirxpmlxlmfn ) { visible = false ; } else { visible = true ; }

line_index: 262
bug_before_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } } <s> @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; } } <s> fix bugs
bug_after_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; } } <s> @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; } } <s> fix bugs
fix_before_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( translationX ) ; }
fix_after_refactoring: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( positionOffset + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; }
× fix_prediction_before: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float translationX = ( mTabWidth ) * ( ( positionOffset + position ) ) ; setTranslationX ( translationX ) ; } }
× fix_prediction_after: @ java.lang.Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( position > 0 ) { if ( ( mTabWidth ) == 0 ) { mTabWidth = ( mViewPager . getWidth () ) / ( mViewPager . getAdapter () . getCount () ) ; } float bthnyfaociytxrukvbxq = ( mTabWidth ) * ( ( positionOffset + position ) + position ) ; setTranslationX ( bthnyfaociytxrukvbxq ) ; } }

line_index: 263
bug_before_refactoring: { super . writeTo ( out ) ; int numJobs = toKill . size () ; out . writeVInt ( numJobs ) ; for ( int i = 0 ; i < numJobs ; i ++ ) { java.util.UUID job = toKill . get ( i ) ; out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } } <s> @ java.lang.Override public void writeTo ( org.elasticsearch.common.io.stream.StreamOutput out ) throws java.io.IOException { super . writeTo ( out ) ; int numJobs = toKill . size () ; out . writeVInt ( numJobs ) ; for ( int i = 0 ; i < numJobs ; i ++ ) { java.util.UUID job = toKill . get ( i ) ; out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } } <s> fixup! Fix: Kill existing jobs before retry to prevent JobAlreadyExists errors
bug_after_refactoring: { super . writeTo ( out ) ; int mzhdzdnlijysamzgbame = toKill . size () ; out . writeVInt ( mzhdzdnlijysamzgbame ) ; for ( int i = 0 ; i < mzhdzdnlijysamzgbame ; i ++ ) { java.util.UUID job = toKill . get ( i ) ; out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } } <s> @ java.lang.Override public void writeTo ( org.elasticsearch.common.io.stream.StreamOutput out ) throws java.io.IOException { super . writeTo ( out ) ; int mzhdzdnlijysamzgbame = toKill . size () ; out . writeVInt ( mzhdzdnlijysamzgbame ) ; for ( int i = 0 ; i < mzhdzdnlijysamzgbame ; i ++ ) { java.util.UUID job = toKill . get ( i ) ; out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } } <s> fixup! Fix: Kill existing jobs before retry to prevent JobAlreadyExists errors
fix_before_refactoring: { super . writeTo ( out ) ; int numJobs = toKill . size () ; out . writeVInt ( numJobs ) ; for ( java.util.UUID job : toKill ) { out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } }
fix_after_refactoring: { super . writeTo ( out ) ; int mzhdzdnlijysamzgbame = toKill . size () ; out . writeVInt ( mzhdzdnlijysamzgbame ) ; for ( java.util.UUID job : toKill ) { out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } }
× fix_prediction_before: { super . writeTo ( out ) ; int numJobs = toKill . size () ; out . writeVInt ( numJobs ) ; for ( int i = 0 ; i < numJobs ; i ++ ) { java.util.UUID job = toKill . get ( i ) ; out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } }
× fix_prediction_after: { super . writeTo ( out ) ; out . writeVInt ( mzhdzdnlijysamzgbame ) ; for ( int i = 0 ; i < mzhdzdnlijysamzgbame ; i ++ ) { java.util.UUID job = toKill . get ( i ) ; out . writeLong ( job . getMostSignificantBits () ) ; out . writeLong ( job . getLeastSignificantBits () ) ; } }

line_index: 264
bug_before_refactoring: { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> @ java.lang.Override public void run () { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> bug fix - bug with run thread NPE in ProgressBarFragment
bug_after_refactoring: { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> @ java.lang.Override public void run () { getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; } <s> bug fix - bug with run thread NPE in ProgressBarFragment
fix_before_refactoring: { if ( ( getActivity () ) == null ) return; getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }
fix_after_refactoring: { if ( ( getActivity () ) == null ) return; getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }
× fix_prediction_before: { if ( ( getActivity () ) == null ) { return; } getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int i = bnp . getProgress () ; if ( i < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }
× fix_prediction_after: { if ( ( getActivity () ) == null ) { return; } getActivity () . runOnUiThread ( new java.lang.Runnable () { @ java.lang.Override public void run () { int eoqfvuuzxlgxpjunxjpy = bnp . getProgress () ; if ( eoqfvuuzxlgxpjunxjpy < count ) { bnp . incrementProgressBy ( 1 ) ; } } } ) ; }

line_index: 265
bug_before_refactoring: { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean expResult = true ; boolean result = instance . validarCampos ( username , password ) ; assertEquals ( expResult , result ) ; fail ( "The test case is a prototype." ) ; } <s> @ org.junit.Test public void testValidarCampos () { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean expResult = true ; boolean result = instance . validarCampos ( username , password ) ; assertEquals ( expResult , result ) ; fail ( "The test case is a prototype." ) ; } <s> Bug fixes
bug_after_refactoring: { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean jmichxwpkiqzunwbkjjl = true ; boolean dfahhgxgorlgsgxxcsti = instance . validarCampos ( username , password ) ; assertEquals ( jmichxwpkiqzunwbkjjl , dfahhgxgorlgsgxxcsti ) ; fail ( "The test case is a prototype." ) ; } <s> @ org.junit.Test public void testValidarCampos () { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean jmichxwpkiqzunwbkjjl = true ; boolean dfahhgxgorlgsgxxcsti = instance . validarCampos ( username , password ) ; assertEquals ( jmichxwpkiqzunwbkjjl , dfahhgxgorlgsgxxcsti ) ; fail ( "The test case is a prototype." ) ; } <s> Bug fixes
fix_before_refactoring: { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean expResult = false ; boolean result = instance . validarCampos ( username , password ) ; assertEquals ( expResult , result ) ; }
fix_after_refactoring: { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean jmichxwpkiqzunwbkjjl = false ; boolean dfahhgxgorlgsgxxcsti = instance . validarCampos ( username , password ) ; assertEquals ( jmichxwpkiqzunwbkjjl , dfahhgxgorlgsgxxcsti ) ; }
× fix_prediction_before: { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean expResult = true ; boolean result = instance . validarCampos ( username , password ) ; assertEquals ( expResult , result ) ; fail ( "The test case is a prototype." ) ; }
× fix_prediction_after: { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean jmichxwpkiqzunwbkjjl = true ; boolean dfahhgxgorlgsgxxcsti = instance . validarCampos ( username , password ) ; assertEquals ( jmichxwpkiqzunwbkjjl , dfahhgxgorlgsgxxcsti ) ; fail ( "The test case is a prototype." ) ; }

line_index: 266
bug_before_refactoring: { recreateDB () ; android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long personId = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( personId ) ) ; person.uploaded = false ; db . close () ; } <s> public void insertPerson ( org.rhok.linguist.code.entity.Person person ) { recreateDB () ; android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long personId = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( personId ) ) ; person.uploaded = false ; db . close () ; } <s> fixed minor bugs
bug_after_refactoring: { recreateDB () ; android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long zeqjmabjaiawpuluebok = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( zeqjmabjaiawpuluebok ) ) ; person.uploaded = false ; db . close () ; } <s> public void insertPerson ( org.rhok.linguist.code.entity.Person person ) { recreateDB () ; android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long zeqjmabjaiawpuluebok = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( zeqjmabjaiawpuluebok ) ) ; person.uploaded = false ; db . close () ; } <s> fixed minor bugs
fix_before_refactoring: { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long personId = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( personId ) ) ; person.uploaded = false ; db . close () ; }
fix_after_refactoring: { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long zeqjmabjaiawpuluebok = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( zeqjmabjaiawpuluebok ) ) ; person.uploaded = false ; db . close () ; }
× fix_prediction_before: { recreateDB () ; android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long personId = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( personId ) ) ; person.uploaded = false ; db . close () ; }
× fix_prediction_after: { recreateDB () ; android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues values = getDbValues ( person ) ; long zeqjmabjaiawpuluebok = db . insert ( org.rhok.linguist.code.DatabaseHelper.PERSON_TABLE_NAME , null , values ) ; person.personid = ( ( int ) ( zeqjmabjaiawpuluebok ) ) ; person.uploaded = false ; db . close () ; }

line_index: 267
bug_before_refactoring: if ( index > ( - 1 ) ) { this . end = java.lang.Math . max ( this . start , index ) ; } <s> public com.jsing.common.string.StringTrimmer getBeforeNext ( java.lang.String stringToSearch ) { if ( ( this . string ) == null ) return this ; int index = getIndex ( stringToSearch ) ; if ( index > ( - 1 ) ) { this . end = java.lang.Math . max ( this . start , index ) ; } return this ; } <s> fixed bug in getBeforeLast
bug_after_refactoring: if ( yxnafsxkwdkptemiyfpz > ( - 1 ) ) { this . end = java.lang.Math . max ( this . start , yxnafsxkwdkptemiyfpz ) ; } <s> public com.jsing.common.string.StringTrimmer getBeforeNext ( java.lang.String stringToSearch ) { if ( ( this . string ) == null ) return this ; int index = getIndex ( stringToSearch ) ; if ( yxnafsxkwdkptemiyfpz > ( - 1 ) ) { this . end = java.lang.Math . max ( this . start , yxnafsxkwdkptemiyfpz ) ; } return this ; } <s> fixed bug in getBeforeLast
fix_before_refactoring: if ( ( index > ( - 1 ) ) && ( index < ( this . end ) ) ) { this . end = java.lang.Math . max ( this . start , index ) ; }
fix_after_refactoring: if ( ( yxnafsxkwdkptemiyfpz > ( - 1 ) ) && ( yxnafsxkwdkptemiyfpz < ( this . end ) ) ) { this . end = java.lang.Math . max ( this . start , yxnafsxkwdkptemiyfpz ) ; }
× fix_prediction_before: if ( index > ( - 1 ) ) { this . end = java.lang.Math . max ( this . start , index ) ; }
× fix_prediction_after: if ( yxnafsxkwdkptemiyfpz > ( - 1 ) ) { this . end = java.lang.Math . max ( this . start , yxnafsxkwdkptemiyfpz ) ; }

line_index: 268
bug_before_refactoring: { int count = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return count ; count ++ ; } return count ; } <s> private java.lang.Integer compareBits ( java.lang.String a , java.lang.String b ) { int count = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return count ; count ++ ; } return count ; } <s> fixed bug
bug_after_refactoring: { int nsbkfkmdxnodpnozpcdm = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return nsbkfkmdxnodpnozpcdm ; nsbkfkmdxnodpnozpcdm ++ ; } return nsbkfkmdxnodpnozpcdm ; } <s> private java.lang.Integer compareBits ( java.lang.String a , java.lang.String b ) { int nsbkfkmdxnodpnozpcdm = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return nsbkfkmdxnodpnozpcdm ; nsbkfkmdxnodpnozpcdm ++ ; } return nsbkfkmdxnodpnozpcdm ; } <s> fixed bug
fix_before_refactoring: { java.lang.System.out . println ( b ) ; int count = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return count ; count ++ ; } return count ; }
fix_after_refactoring: { java.lang.System.out . println ( b ) ; int nsbkfkmdxnodpnozpcdm = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return nsbkfkmdxnodpnozpcdm ; nsbkfkmdxnodpnozpcdm ++ ; } return nsbkfkmdxnodpnozpcdm ; }
× fix_prediction_before: { int count = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return count ; count ++ ; } return count ; }
× fix_prediction_after: { int nsbkfkmdxnodpnozpcdm = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return nsbkfkmdxnodpnozpcdm ; nsbkfkmdxnodpnozpcdm ++ ; } return nsbkfkmdxnodpnozpcdm ; }

line_index: 269
bug_before_refactoring: { int from = edge . from () ; if ( ! ( edges . containsKey ( from ) ) ) { edges . put ( from , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( from ) ; outgoingEdges . add ( edge ) ; } <s> public void addEdge ( diagraph.DirectedEdge edge ) { int from = edge . from () ; if ( ! ( edges . containsKey ( from ) ) ) { edges . put ( from , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( from ) ; outgoingEdges . add ( edge ) ; } <s> Fixed some issues in updating the residual graph after augmenting along a negative cycle. Implemented better version of a negative cycle detection  which picks cheapest edges. However  it still does not detect all cycles.
bug_after_refactoring: { int dxodvlqfgolltjwtcrko = edge . dxodvlqfgolltjwtcrko () ; if ( ! ( edges . containsKey ( dxodvlqfgolltjwtcrko ) ) ) { edges . put ( dxodvlqfgolltjwtcrko , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( dxodvlqfgolltjwtcrko ) ; outgoingEdges . add ( edge ) ; } <s> public void addEdge ( diagraph.DirectedEdge edge ) { int dxodvlqfgolltjwtcrko = edge . dxodvlqfgolltjwtcrko () ; if ( ! ( edges . containsKey ( dxodvlqfgolltjwtcrko ) ) ) { edges . put ( dxodvlqfgolltjwtcrko , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( dxodvlqfgolltjwtcrko ) ; outgoingEdges . add ( edge ) ; } <s> Fixed some issues in updating the residual graph after augmenting along a negative cycle. Implemented better version of a negative cycle detection  which picks cheapest edges. However  it still does not detect all cycles.
fix_before_refactoring: { nodes . add ( edge . from () ) ; nodes . add ( edge . to () ) ; int from = edge . from () ; if ( ! ( edges . containsKey ( from ) ) ) { edges . put ( from , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( from ) ; outgoingEdges . add ( edge ) ; }
fix_after_refactoring: { nodes . add ( edge . dxodvlqfgolltjwtcrko () ) ; nodes . add ( edge . to () ) ; int dxodvlqfgolltjwtcrko = edge . dxodvlqfgolltjwtcrko () ; if ( ! ( edges . containsKey ( dxodvlqfgolltjwtcrko ) ) ) { edges . put ( dxodvlqfgolltjwtcrko , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( dxodvlqfgolltjwtcrko ) ; outgoingEdges . add ( edge ) ; }
× fix_prediction_before: { int from = edge . from () ; if ( ! ( edges . containsKey ( from ) ) ) { edges . put ( from , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( from ) ; outgoingEdges . add ( edge ) ; }
× fix_prediction_after: { int dxodvlqfgolltjwtcrko = edge . dxodvlqfgolltjwtcrko () ; if ( ! ( edges . containsKey ( dxodvlqfgolltjwtcrko ) ) ) { edges . put ( dxodvlqfgolltjwtcrko , new java.util.HashSet <> () ) ; } java.util.Set < diagraph.DirectedEdge > outgoingEdges = edges . get ( dxodvlqfgolltjwtcrko ) ; outgoingEdges . add ( edge ) ; }

line_index: 270
bug_before_refactoring: { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] encVal = cipher . doFinal ( data . getBytes () ) ; java.lang.String encryptedValue = java.util.Base64 . getEncoder () . encodeToString ( encVal ) ; java.lang.System.out . println ( encryptedValue ) ; } <s> public static void main ( java.lang.String [] args ) throws java.lang.Exception { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] encVal = cipher . doFinal ( data . getBytes () ) ; java.lang.String encryptedValue = java.util.Base64 . getEncoder () . encodeToString ( encVal ) ; java.lang.System.out . println ( encryptedValue ) ; } <s> Notification offline issue fixed
bug_after_refactoring: { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] cifoppvgcqnvhzzgewka = cipher . doFinal ( data . getBytes () ) ; java.lang.String encryptedValue = java.util.Base64 . getEncoder () . encodeToString ( cifoppvgcqnvhzzgewka ) ; java.lang.System.out . println ( encryptedValue ) ; } <s> public static void main ( java.lang.String [] args ) throws java.lang.Exception { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] cifoppvgcqnvhzzgewka = cipher . doFinal ( data . getBytes () ) ; java.lang.String encryptedValue = java.util.Base64 . getEncoder () . encodeToString ( cifoppvgcqnvhzzgewka ) ; java.lang.System.out . println ( encryptedValue ) ; } <s> Notification offline issue fixed
fix_before_refactoring: { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] encVal = cipher . doFinal ( data . getBytes () ) ; }
fix_after_refactoring: { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] cifoppvgcqnvhzzgewka = cipher . doFinal ( data . getBytes () ) ; }
× fix_prediction_before: { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] encVal = cipher . doFinal ( data . getBytes () ) ; java.lang.String encryptedValue = java.util.Base64 . getEncoder () . encodeToString ( encVal ) ; java.lang.System.out . println ( encryptedValue ) ; }
× fix_prediction_after: { java.lang.String alg = "AES" ; java.lang.String key = "TheBestSecreteKe" ; java.security.Key key2 = new javax.crypto.spec.SecretKeySpec ( key . getBytes () , alg ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher . getInstance ( alg ) ; cipher . init ( javax.crypto.Cipher.ENCRYPT_MODE , key2 ) ; java.lang.String data = "TestString" ; byte [] cifoppvgcqnvhzzgewka = cipher . doFinal ( data . getBytes () ) ; java.lang.String encryptedValue = java.util.Base64 . getEncoder () . encodeToString ( cifoppvgcqnvhzzgewka ) ; java.lang.System.out . println ( encryptedValue ) ; }

line_index: 271
bug_before_refactoring: { double avg = org.dynami.core.utils.StatUtils . avg ( series ) ; double sum = 0 ; for ( java.lang.Double d : series ) { sum += java.lang.Math . pow ( ( d - avg ) , 2 ) ; } return java.lang.Math . sqrt ( ( ( sum / ( series . size () ) ) - 1 ) ) ; } <s> public static double std ( org.dynami.core.data.Series series ) { double avg = org.dynami.core.utils.StatUtils . avg ( series ) ; double sum = 0 ; for ( java.lang.Double d : series ) { sum += java.lang.Math . pow ( ( d - avg ) , 2 ) ; } return java.lang.Math . sqrt ( ( ( sum / ( series . size () ) ) - 1 ) ) ; } <s> Bug fixing and Minor improvements  Moved CloseToCloseVolatilityEngine from Runtime to Core CArray circular array with few statistic functions embedded Fixed ClosedPosition percent return calculation
bug_after_refactoring: { double boxxtmrdrnoftiljepgg = org.dynami.core.utils.StatUtils . boxxtmrdrnoftiljepgg ( series ) ; double kzrvjfxlilwbmedzaafu = 0 ; for ( java.lang.Double d : series ) { kzrvjfxlilwbmedzaafu += java.lang.Math . pow ( ( d - boxxtmrdrnoftiljepgg ) , 2 ) ; } return java.lang.Math . sqrt ( ( ( kzrvjfxlilwbmedzaafu / ( series . size () ) ) - 1 ) ) ; } <s> public static double std ( org.dynami.core.data.Series series ) { double boxxtmrdrnoftiljepgg = org.dynami.core.utils.StatUtils . boxxtmrdrnoftiljepgg ( series ) ; double kzrvjfxlilwbmedzaafu = 0 ; for ( java.lang.Double d : series ) { kzrvjfxlilwbmedzaafu += java.lang.Math . pow ( ( d - boxxtmrdrnoftiljepgg ) , 2 ) ; } return java.lang.Math . sqrt ( ( ( kzrvjfxlilwbmedzaafu / ( series . size () ) ) - 1 ) ) ; } <s> Bug fixing and Minor improvements  Moved CloseToCloseVolatilityEngine from Runtime to Core CArray circular array with few statistic functions embedded Fixed ClosedPosition percent return calculation
fix_before_refactoring: { double avg = org.dynami.core.utils.StatUtils . avg ( series ) ; double sum = 0 ; for ( double d : series ) { sum += java.lang.Math . pow ( ( d - avg ) , 2 ) ; } return java.lang.Math . sqrt ( ( sum / ( ( series . size () ) - 1.0 ) ) ) ; }
fix_after_refactoring: { double boxxtmrdrnoftiljepgg = org.dynami.core.utils.StatUtils . boxxtmrdrnoftiljepgg ( series ) ; double kzrvjfxlilwbmedzaafu = 0 ; for ( double d : series ) { kzrvjfxlilwbmedzaafu += java.lang.Math . pow ( ( d - boxxtmrdrnoftiljepgg ) , 2 ) ; } return java.lang.Math . sqrt ( ( kzrvjfxlilwbmedzaafu / ( ( series . size () ) - 1.0 ) ) ) ; }
× fix_prediction_before: { double avg = org.dynami.core.utils.StatUtils . avg ( series ) ; double sum = 0 ; for ( java.lang.Double d : series ) { sum += java.lang.Math . pow ( ( d - avg ) , 2 ) ; } return java.lang.Math . sqrt ( ( ( sum / ( series . size () ) ) - 1 ) ) ; }
× fix_prediction_after: { double boxxtmrdrnoftiljepgg = org.dynami.core.utils.StatUtils . boxxtmrdrnoftiljepgg ( series ) ; double kzrvjfxlilwbmedzaafu = 0 ; for ( java.lang.Double d : series ) { kzrvjfxlilwbmedzaafu += java.lang.Math . pow ( ( d - boxxtmrdrnoftiljepgg ) , 2 ) ; } return java.lang.Math . sqrt ( ( ( kzrvjfxlilwbmedzaafu / ( series . size () ) ) - 1 ) ) ; }

line_index: 272
bug_before_refactoring: { java.lang.String temp = java.lang.Integer . toHexString ( number ) ; int length = temp . length () ; for ( int i = 0 ; i < ( 4 - length ) ; i ++ ) temp += "0" + temp ; return temp ; } <s> private java.lang.String toBinaryString ( int number ) { java.lang.String temp = java.lang.Integer . toHexString ( number ) ; int length = temp . length () ; for ( int i = 0 ; i < ( 4 - length ) ; i ++ ) temp += "0" + temp ; return temp ; } <s> fix performance issues
bug_after_refactoring: { java.lang.String temp = java.lang.Integer . toHexString ( number ) ; int bkcbcvrydrqslbwvshxz = temp . bkcbcvrydrqslbwvshxz () ; for ( int i = 0 ; i < ( 4 - bkcbcvrydrqslbwvshxz ) ; i ++ ) temp += "0" + temp ; return temp ; } <s> private java.lang.String toBinaryString ( int number ) { java.lang.String temp = java.lang.Integer . toHexString ( number ) ; int bkcbcvrydrqslbwvshxz = temp . bkcbcvrydrqslbwvshxz () ; for ( int i = 0 ; i < ( 4 - bkcbcvrydrqslbwvshxz ) ; i ++ ) temp += "0" + temp ; return temp ; } <s> fix performance issues
fix_before_refactoring: { java.lang.StringBuilder temp = new java.lang.StringBuilder ( java.lang.Integer . toHexString ( number ) ) ; int length = temp . length () ; for ( int i = 0 ; i < ( 4 - length ) ; i ++ ) temp . append ( "0" ) . append ( temp ) ; return temp . toString () ; }
fix_after_refactoring: { java.lang.StringBuilder temp = new java.lang.StringBuilder ( java.lang.Integer . toHexString ( number ) ) ; int bkcbcvrydrqslbwvshxz = temp . bkcbcvrydrqslbwvshxz () ; for ( int i = 0 ; i < ( 4 - bkcbcvrydrqslbwvshxz ) ; i ++ ) temp . append ( "0" ) . append ( temp ) ; return temp . toString () ; }
× fix_prediction_before: { java.lang.String temp = java.lang.Integer . toHexString ( number ) ; if ( number < 4 ) { return temp ; } int length = temp . length () ; for ( int i = 0 ; i < ( 4 - length ) ; i ++ ) { temp += "0" + temp ; } return temp ; }
× fix_prediction_after: { java.lang.String temp = java.lang.Integer . toHexString ( number ) ; int bkcbcvrydrqslbwvshxz = temp . bkcbcvrydrqslbwvshxz () ; for ( int i = 0 ; i < ( 4 - bkcbcvrydrqslbwvshxz () ) ; i ++ ) temp += "0" + temp ; return temp ; }

line_index: 273
bug_before_refactoring: public void run () { if ( ! ( args . isNull ( 0 ) ) ) { java.lang.String inputMode_s = args . get ( 0 ) ; int inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode . equals ( "pan" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode . equals ( "resize" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( inputMode_i ) ; } else { callbackContext . error ( "No arguments found" ) ; } callbackContext . success () ; } <s> public void run () { if ( ! ( args . isNull ( 0 ) ) ) { java.lang.String inputMode_s = args . get ( 0 ) ; int inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode . equals ( "pan" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode . equals ( "resize" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( inputMode_i ) ; } else { callbackContext . error ( "No arguments found" ) ; } callbackContext . success () ; } <s> Updated java file  Fixed errors
bug_after_refactoring: public void run () { if ( ! ( args . isNull ( 0 ) ) ) { java.lang.String inputMode_s = args . get ( 0 ) ; int dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode . equals ( "pan" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode . equals ( "resize" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( dpfmjpdchchzteotxbha ) ; } else { callbackContext . error ( "No arguments found" ) ; } callbackContext . success () ; } <s> public void run () { if ( ! ( args . isNull ( 0 ) ) ) { java.lang.String inputMode_s = args . get ( 0 ) ; int dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode . equals ( "pan" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode . equals ( "resize" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( dpfmjpdchchzteotxbha ) ; } else { callbackContext . error ( "No arguments found" ) ; } callbackContext . success () ; } <s> Updated java file  Fixed errors
fix_before_refactoring: public void run () { int inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode_s . equals ( "pan" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode_s . equals ( "resize" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( inputMode_i ) ; callbackContext . success () ; }
fix_after_refactoring: public void run () { int dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode_s . equals ( "pan" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode_s . equals ( "resize" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( dpfmjpdchchzteotxbha ) ; callbackContext . success () ; }
× fix_prediction_before: public void run () { if ( ! ( args . isNull ( 0 ) ) ) { java.lang.String inputMode_s = args . get ( 0 ) ; int inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode . equals ( "pan" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode . equals ( "resize" ) ) { inputMode_i = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( inputMode_i ) ; } else { callbackContext . error ( "No arguments found" ) ; callbackContext . success () ; } }
× fix_prediction_after: public void run () { if ( ! ( args . isNull ( 0 ) ) ) { java.lang.String inputMode_s = args . get ( 0 ) ; int dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING ; if ( inputMode . equals ( "pan" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN ; } else if ( inputMode . equals ( "resize" ) ) { dpfmjpdchchzteotxbha = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE ; } cordova . getActivity () . getWindow () . setSoftInputMode ( dpfmjpdchchzteotxbha ) ; callbackContext . success () ; } }

line_index: 274
bug_before_refactoring: { int idxInRow = 0 ; int startVertex = row * numInRow ; int currVertex = startVertex ; while ( idxInRow < numInRow ) { addFace ( currVertex , ( currVertex + 1 ) , ( ( currVertex + numInRow ) + 1 ) , ( currVertex + numInRow ) ) ; currVertex ++ ; idxInRow ++ ; } } <s> private void addRow ( int row , int numInRow ) { int idxInRow = 0 ; int startVertex = row * numInRow ; int currVertex = startVertex ; while ( idxInRow < numInRow ) { addFace ( currVertex , ( currVertex + 1 ) , ( ( currVertex + numInRow ) + 1 ) , ( currVertex + numInRow ) ) ; currVertex ++ ; idxInRow ++ ; } } <s> resolved errors in obj write for photo face  commented out base sides to isolate issues
bug_after_refactoring: { int rkhgvolsotbpqvsxbnao = 0 ; int htfcnlomcpufsyxumhdc = row * numInRow ; int efukrfxduffrtuilrcvf = htfcnlomcpufsyxumhdc ; while ( rkhgvolsotbpqvsxbnao < numInRow ) { addFace ( efukrfxduffrtuilrcvf , ( efukrfxduffrtuilrcvf + 1 ) , ( ( efukrfxduffrtuilrcvf + numInRow ) + 1 ) , ( efukrfxduffrtuilrcvf + numInRow ) ) ; efukrfxduffrtuilrcvf ++ ; rkhgvolsotbpqvsxbnao ++ ; } } <s> private void addRow ( int row , int numInRow ) { int rkhgvolsotbpqvsxbnao = 0 ; int htfcnlomcpufsyxumhdc = row * numInRow ; int efukrfxduffrtuilrcvf = htfcnlomcpufsyxumhdc ; while ( rkhgvolsotbpqvsxbnao < numInRow ) { addFace ( efukrfxduffrtuilrcvf , ( efukrfxduffrtuilrcvf + 1 ) , ( ( efukrfxduffrtuilrcvf + numInRow ) + 1 ) , ( efukrfxduffrtuilrcvf + numInRow ) ) ; efukrfxduffrtuilrcvf ++ ; rkhgvolsotbpqvsxbnao ++ ; } } <s> resolved errors in obj write for photo face  commented out base sides to isolate issues
fix_before_refactoring: { int idxInRow = 0 ; int startVertex = ( row * numInRow ) + 1 ; int currVertex = startVertex ; while ( idxInRow < ( numInRow - 1 ) ) { addFace ( currVertex , ( currVertex + 1 ) , ( currVertex + numInRow ) ) ; addFace ( ( currVertex + 1 ) , ( ( currVertex + numInRow ) + 1 ) , ( currVertex + numInRow ) ) ; currVertex ++ ; idxInRow ++ ; } }
fix_after_refactoring: { int rkhgvolsotbpqvsxbnao = 0 ; int htfcnlomcpufsyxumhdc = ( row * numInRow ) + 1 ; int efukrfxduffrtuilrcvf = htfcnlomcpufsyxumhdc ; while ( rkhgvolsotbpqvsxbnao < ( numInRow - 1 ) ) { addFace ( efukrfxduffrtuilrcvf , ( efukrfxduffrtuilrcvf + 1 ) , ( efukrfxduffrtuilrcvf + numInRow ) ) ; addFace ( ( efukrfxduffrtuilrcvf + 1 ) , ( ( efukrfxduffrtuilrcvf + numInRow ) + 1 ) , ( efukrfxduffrtuilrcvf + numInRow ) ) ; efukrfxduffrtuilrcvf ++ ; rkhgvolsotbpqvsxbnao ++ ; } }
× fix_prediction_before: { int idxInRow = 0 ; int startVertex = row * numInRow ; int currVertex = startVertex ; while ( idxInRow < numInRow ) { addFace ( currVertex , ( currVertex + 1 ) , ( ( currVertex + numInRow ) + 1 ) , ( currVertex + numInRow ) ) ; currVertex ++ ; idxInRow ++ ; } }
× fix_prediction_after: { int rkhgvolsotbpqvsxbnao = 0 ; int htfcnlomcpufsyxumhdc = row * numInRow ; int efukrfxduffrtuilrcvf = htfcnlomcpufsyxumhdc ; while ( rkhgvolsotbpqvsxbnao < numInRow ) { addFace ( efukrfxduffrtuilrcvf , ( efukrfxduffrtuilrcvf + 1 ) , ( ( efukrfxduffrtuilrcvf + numInRow ) + 1 ) , ( efukrfxduffrtuilrcvf + numInRow ) ) ; efukrfxduffrtuilrcvf ++ ; } }

line_index: 275
bug_before_refactoring: { removeIndex ( record ) ; mapDataStore . remove ( key , now ) ; } <s> @ java.lang.Override public boolean delete ( com.hazelcast.nio.serialization.Data key ) { checkIfLoaded () ; final long now = getNow () ; final com.hazelcast.map.impl.record.Record record = getRecordOrNull ( key , now , false ) ; if ( record == null ) { removeIndex ( record ) ; mapDataStore . remove ( key , now ) ; } else { return ( removeRecord ( key , record , now ) ) != null ; } return false ; } <s> Findbugs Issues Fixed  The removeIndex() is not called when current record is null.
bug_after_refactoring: { removeIndex ( record ) ; mapDataStore . remove ( key , bffqfdoajzfhcyivdlnb ) ; } <s> @ java.lang.Override public boolean delete ( com.hazelcast.nio.serialization.Data key ) { checkIfLoaded () ; final long now = getNow () ; final com.hazelcast.map.impl.record.Record record = getRecordOrNull ( key , now , false ) ; if ( record == null ) { removeIndex ( record ) ; mapDataStore . remove ( key , bffqfdoajzfhcyivdlnb ) ; } else { return ( removeRecord ( key , record , now ) ) != null ; } return false ; } <s> Findbugs Issues Fixed  The removeIndex() is not called when current record is null.
fix_before_refactoring: { mapDataStore . remove ( key , now ) ; }
fix_after_refactoring: { mapDataStore . remove ( key , bffqfdoajzfhcyivdlnb ) ; }
× fix_prediction_before: { removeIndex ( record ) ; if ( record != null ) { mapDataStore . remove ( key , now ) ; } }
× fix_prediction_after: { removeIndex ( record ) ; removeIndex ( record ) ; }

line_index: 276
bug_before_refactoring: { double discount = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { discount = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { discount = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } return discount ; } <s> private static double getPassangerDiscount ( ooptraining.Passanger p ) { double discount = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { discount = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { discount = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } return discount ; } <s> bugfix
bug_after_refactoring: { double nccwteyvljkypxrpmroq = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } return nccwteyvljkypxrpmroq ; } <s> private static double getPassangerDiscount ( ooptraining.Passanger p ) { double nccwteyvljkypxrpmroq = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } return nccwteyvljkypxrpmroq ; } <s> bugfix
fix_before_refactoring: { double discount = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { discount = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { discount = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } return discount ; }
fix_after_refactoring: { double nccwteyvljkypxrpmroq = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } return nccwteyvljkypxrpmroq ; }
× fix_prediction_before: { double discount = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { discount = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { discount = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } return discount ; }
× fix_prediction_after: { double nccwteyvljkypxrpmroq = 1.0 ; if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.SILVER_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.SILVER_DISCOUNT ; } else if ( ( p . getMiles () ) > ( ooptraining.DiscountCalculator.GOLD_LIMIT ) ) { nccwteyvljkypxrpmroq = ooptraining.DiscountCalculator.GOLD_DISCOUNT ; } return nccwteyvljkypxrpmroq ; }

line_index: 277
bug_before_refactoring: protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { long organizationId = com.liferay.portal.kernel.util.GetterUtil . getLong ( portletPreferences . getValue ( "organizationId" , null ) ) ; if ( organizationId > 0 ) { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "organizationId" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; } return portletPreferences ; } <s> protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { long organizationId = com.liferay.portal.kernel.util.GetterUtil . getLong ( portletPreferences . getValue ( "organizationId" , null ) ) ; if ( organizationId > 0 ) { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "organizationId" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; } return portletPreferences ; } <s> LPS-70801 Fix bug ion recent bloggers portlet preferences processing
bug_after_refactoring: protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { long ncrcxleuodbswueozmdc = com.liferay.portal.kernel.util.GetterUtil . getLong ( portletPreferences . getValue ( "ncrcxleuodbswueozmdc" , null ) ) ; if ( ncrcxleuodbswueozmdc > 0 ) { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "ncrcxleuodbswueozmdc" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; } return portletPreferences ; } <s> protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { long ncrcxleuodbswueozmdc = com.liferay.portal.kernel.util.GetterUtil . getLong ( portletPreferences . getValue ( "ncrcxleuodbswueozmdc" , null ) ) ; if ( ncrcxleuodbswueozmdc > 0 ) { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "ncrcxleuodbswueozmdc" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; } return portletPreferences ; } <s> LPS-70801 Fix bug ion recent bloggers portlet preferences processing
fix_before_refactoring: protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "organizationId" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; return portletPreferences ; }
fix_after_refactoring: protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "ncrcxleuodbswueozmdc" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; return portletPreferences ; }
× fix_prediction_before: protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { long organizationId = com.liferay.portal.kernel.util.GetterUtil . getLong ( portletPreferences . getValue ( "organizationId" , null ) ) ; if ( organizationId > 0 ) { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "organizationId" , com.liferay.portal.kernel.model.Organization . class , companyGroup . getGroupId () ) ; } return portletPreferences ; }
× fix_prediction_after: protected javax.portlet.PortletPreferences updateImportPortletPreferences ( com.liferay.exportimport.kernel.lar.PortletDataContext portletDataContext , javax.portlet.PortletPreferences portletPreferences ) throws java.lang.Exception { long ncrcxleuodbswueozmdc = com.liferay.portal.kernel.util.GetterUtil . getLong ( portletPreferences . getValue ( "ncrcxleuodbswueozmdc" , null ) ) ; if ( ncrcxleuodbswueozmdc > 0 ) { com.liferay.portal.kernel.model.Company company = _companyLocalService . getCompanyById ( portletDataContext . getCompanyId () ) ; com.liferay.portal.kernel.model.Group companyGroup = company . getGroup () ; updateImportPortletPreferencesClassPKs ( portletDataContext , portletPreferences , "ncrcxleuodbswueozmdc" , com.liferay.portal.kernel.model.Organ

line_index: 278
bug_before_refactoring: public void addItem ( item.Item i ) { item.Item item = i . clone () ; if ( i.isStackable ) { int loc = findShopItemLoc ( i ) ; if ( loc >= 0 ) { items . get ( loc ) . count += i.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } } <s> public void addItem ( item.Item i ) { item.Item item = i . clone () ; if ( i.isStackable ) { int loc = findShopItemLoc ( i ) ; if ( loc >= 0 ) { items . get ( loc ) . count += i.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } } <s> Fix bug where adding items to a shop changes the count of the template item
bug_after_refactoring: public void addItem ( item.Item i ) { item.Item item = i . clone () ; if ( i.isStackable ) { int wuhjbwzpsmfvjzfjaflu = findShopItemLoc ( i ) ; if ( wuhjbwzpsmfvjzfjaflu >= 0 ) { items . get ( wuhjbwzpsmfvjzfjaflu ) . count += i.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } } <s> public void addItem ( item.Item i ) { item.Item item = i . clone () ; if ( i.isStackable ) { int wuhjbwzpsmfvjzfjaflu = findShopItemLoc ( i ) ; if ( wuhjbwzpsmfvjzfjaflu >= 0 ) { items . get ( wuhjbwzpsmfvjzfjaflu ) . count += i.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } } <s> Fix bug where adding items to a shop changes the count of the template item
fix_before_refactoring: public void addItem ( item.Item i , int count ) { item.Item item = i . clone () ; if ( count != ( - 1 ) ) { item.count = count ; } if ( i.isStackable ) { int loc = findShopItemLoc ( i ) ; if ( loc >= 0 ) { items . get ( loc ) . count += item.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } }
fix_after_refactoring: public void addItem ( item.Item i , int count ) { item.Item item = i . clone () ; if ( count != ( - 1 ) ) { item.count = count ; } if ( i.isStackable ) { int wuhjbwzpsmfvjzfjaflu = findShopItemLoc ( i ) ; if ( wuhjbwzpsmfvjzfjaflu >= 0 ) { items . get ( wuhjbwzpsmfvjzfjaflu ) . count += item.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } }
× fix_prediction_before: public void addItem ( item.Item i ) { item.Item item = i . clone () ; if ( i.isStackable ) { int loc = findShopItemLoc ( i ) ; if ( loc >= 0 ) { items . get ( loc ) . count += i.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } }
× fix_prediction_after: public void addItem ( item.Item i ) { item.Item item = i . clone () ; if ( i.isStackable ) { int wuhjbwzpsmfvjzfjaflu = findShopItemLoc ( i ) ; if ( wuhjbwzpsmfvjzfjaflu >= 0 ) { items . get ( wuhjbwzpsmfvjzfjaflu ) . count += i.count ; } else { items . add ( item ) ; } } else { items . add ( item ) ; } }

line_index: 279
bug_before_refactoring: { if ( ( reservation . getRoomType () ) == "L" ) { totalBalance = + 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { totalBalance = + 80 ; } } <s> public int getTotalBalance () { int totalBalance = 0 ; for ( Reservation reservation : this . reservations ) { if ( ( reservation . getRoomType () ) == "L" ) { totalBalance = + 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { totalBalance = + 80 ; } } return totalBalance ; } <s> Fixed adding problem
bug_after_refactoring: { if ( ( reservation . getRoomType () ) == "L" ) { jatlyzgmoabrxyeuofly = + 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { jatlyzgmoabrxyeuofly = + 80 ; } } <s> public int getTotalBalance () { int totalBalance = 0 ; for ( Reservation reservation : this . reservations ) { if ( ( reservation . getRoomType () ) == "L" ) { jatlyzgmoabrxyeuofly = + 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { jatlyzgmoabrxyeuofly = + 80 ; } } return totalBalance ; } <s> Fixed adding problem
fix_before_refactoring: { if ( ( reservation . getRoomType () ) == "L" ) { totalBalance += 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { totalBalance += 80 ; } }
fix_after_refactoring: { if ( ( reservation . getRoomType () ) == "L" ) { jatlyzgmoabrxyeuofly += 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { jatlyzgmoabrxyeuofly += 80 ; } }
× fix_prediction_before: { if ( reservation . getRoomType () . equals ( "L" ) ) { totalBalance = + 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { totalBalance = + 80 ; } }
× fix_prediction_after: { if ( reservation . getRoomType () . equals ( "L" ) ) { jatlyzgmoabrxyeuofly = + 200 ; } if ( ( reservation . getRoomType () ) == "E" ) { jatlyzgmoabrxyeuofly = + 80 ; } }

line_index: 280
bug_before_refactoring: if ( x > width ) { x = width ; } <s> private void setValueContrained ( int x ) { x = x - ( this . getAbsoluteLeft () ) ; int width = sliderWidget . getOffsetWidth () ; if ( x < 0 ) { x = 0 ; } if ( x > width ) { x = width ; } int componentValue = ( x * ( max ) ) / width ; setValue ( componentValue , true , false ) ; sliderWidget . setPos ( x ) ; } <s> FIXES ISSUE 71
bug_after_refactoring: if ( x > hfpmkipudpzzcwhuaink ) { x = hfpmkipudpzzcwhuaink ; } <s> private void setValueContrained ( int x ) { x = x - ( this . getAbsoluteLeft () ) ; int width = sliderWidget . getOffsetWidth () ; if ( x < 0 ) { x = 0 ; } if ( x > hfpmkipudpzzcwhuaink ) { x = hfpmkipudpzzcwhuaink ; } int componentValue = ( x * ( max ) ) / width ; setValue ( componentValue , true , false ) ; sliderWidget . setPos ( x ) ; } <s> FIXES ISSUE 71
fix_before_refactoring: if ( x > ( width - 1 ) ) { x = width - 1 ; }
fix_after_refactoring: if ( x > ( hfpmkipudpzzcwhuaink - 1 ) ) { x = hfpmkipudpzzcwhuaink - 1 ; }
× fix_prediction_before: if ( x < width ) { x = width ; }
× fix_prediction_after: if ( x < hfpmkipudpzzcwhuaink ) { x = hfpmkipudpzzcwhuaink ; }

line_index: 281
bug_before_refactoring: { java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int num = java.lang.Integer.MIN_VALUE ; try { num = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( num ) ; } } <s> private void setZeroValues ( java.lang.String values ) { java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int num = java.lang.Integer.MIN_VALUE ; try { num = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( num ) ; } } <s> fixed realtime issues
bug_after_refactoring: { java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int fcehucmvitrywemzycwt = java.lang.Integer.MIN_VALUE ; try { fcehucmvitrywemzycwt = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( fcehucmvitrywemzycwt ) ; } } <s> private void setZeroValues ( java.lang.String values ) { java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int fcehucmvitrywemzycwt = java.lang.Integer.MIN_VALUE ; try { fcehucmvitrywemzycwt = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( fcehucmvitrywemzycwt ) ; } } <s> fixed realtime issues
fix_before_refactoring: { zeroValues = new java.util.ArrayList < java.lang.Integer > () ; java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int num = java.lang.Integer.MIN_VALUE ; try { num = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( num ) ; } }
fix_after_refactoring: { zeroValues = new java.util.ArrayList < java.lang.Integer > () ; java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int fcehucmvitrywemzycwt = java.lang.Integer.MIN_VALUE ; try { fcehucmvitrywemzycwt = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( fcehucmvitrywemzycwt ) ; } }
× fix_prediction_before: { if ( values == null ) { return; } java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int num = java.lang.Integer . parseInt ( sr [ i ] ) ; } return; }
× fix_prediction_after: { java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int fcehucmvitrywemzycwt = java.lang.Integer . parseInt ( sr [ i ] ) ; } return; }

line_index: 282
bug_before_refactoring: @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull final java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.Object id ) { final int numberOfRowsUpdated = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( java.lang.String . valueOf ( id ) ) . build () , contentValues ) ; return numberOfRowsUpdated > 0 ? com.pushtorefresh.storio.sqlitedb.operation.put.PutResult . newUpdateResult ( numberOfRowsUpdated , table ) : insert ( storIOSQLiteDb , contentValues , table ) ; } <s> @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull final java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.Object id ) { final int numberOfRowsUpdated = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( java.lang.String . valueOf ( id ) ) . build () , contentValues ) ; return numberOfRowsUpdated > 0 ? com.pushtorefresh.storio.sqlitedb.operation.put.PutResult . newUpdateResult ( numberOfRowsUpdated , table ) : insert ( storIOSQLiteDb , contentValues , table ) ; } <s> Merge pull request #187 from pushtorefresh/issue-175  Improve DefaultPutResolver work with id as Object
bug_after_refactoring: @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull final java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.Object id ) { final int yjrkwvmiiuyysgloiznu = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( java.lang.String . valueOf ( id ) ) . build () , contentValues ) ; return yjrkwvmiiuyysgloiznu > 0 ? com.pushtorefresh.storio.sqlitedb.operation.put.PutResult . newUpdateResult ( yjrkwvmiiuyysgloiznu , table ) : insert ( storIOSQLiteDb , contentValues , table ) ; } <s> @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull final java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.Object id ) { final int yjrkwvmiiuyysgloiznu = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( java.lang.String . valueOf ( id ) ) . build () , contentValues ) ; return yjrkwvmiiuyysgloiznu > 0 ? com.pushtorefresh.storio.sqlitedb.operation.put.PutResult . newUpdateResult ( yjrkwvmiiuyysgloiznu , table ) : insert ( storIOSQLiteDb , contentValues , table ) ; } <s> Merge pull request #187 from pushtorefresh/issue-175  Improve DefaultPutResolver work with id as Object
fix_before_refactoring: @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.String id ) { final int numberOfRowsUpdated = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( id ) . build () , contentValues ) ; return numberOfRowsUpdated > 0 ? com.pushtorefresh.storio.sqlitedb.operation.put.PutResult . newUpdateResult ( numberOfRowsUpdated , table ) : insert ( storIOSQLiteDb , contentValues , table ) ; }
fix_after_refactoring: @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.String id ) { final int yjrkwvmiiuyysgloiznu = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( id ) . build () , contentValues ) ; return yjrkwvmiiuyysgloiznu > 0 ? com.pushtorefresh.storio.sqlitedb.operation.put.PutResult . newUpdateResult ( yjrkwvmiiuyysgloiznu , table ) : insert ( storIOSQLiteDb , contentValues , table ) ; }
× fix_prediction_before: private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull final java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.Object id ) { final int numberOfRowsUpdated = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( ( idFieldName + "=?" ) ) . whereArgs ( java.lang.String . valueOf ( id ) ) . build () , contentValues ) ; return numberOfRowsUpdated ; }
× fix_prediction_after: @ android.support.annotation.NonNull private com.pushtorefresh.storio.sqlitedb.operation.put.PutResult updateOrInsert ( @ android.support.annotation.NonNull com.pushtorefresh.storio.sqlitedb.StorIOSQLiteDb storIOSQLiteDb , @ android.support.annotation.NonNull android.content.ContentValues contentValues , @ android.support.annotation.NonNull java.lang.String table , @ android.support.annotation.NonNull final java.lang.String idFieldName , @ android.support.annotation.NonNull java.lang.Object id ) { final int yjrkwvmiiuyysgloiznu = storIOSQLiteDb . internal () . update ( new com.pushtorefresh.storio.sqlitedb.query.UpdateQuery.Builder () . table ( table ) . where ( ( idFieldName + "=?" ) ) . whereArgs ( java.lang.String . valueOf ( id ) ) . build () , contentValues ) ; return yjrkwvmiiuyysgloiznu >

line_index: 285
bug_before_refactoring: public static void main ( java.lang.String [] args ) throws java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int port = 3356 ; while ( true ) { try { sconn = new java.net.ServerSocket ( port ) ; conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } } <s> public static void main ( java.lang.String [] args ) throws java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int port = 3356 ; while ( true ) { try { sconn = new java.net.ServerSocket ( port ) ; conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } } <s> Fixing bugs
bug_after_refactoring: public static void main ( java.lang.String [] args ) throws java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int arlzisfbldxlypkvvqtt = 3356 ; while ( true ) { try { sconn = new java.net.ServerSocket ( arlzisfbldxlypkvvqtt ) ; conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } } <s> public static void main ( java.lang.String [] args ) throws java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int arlzisfbldxlypkvvqtt = 3356 ; while ( true ) { try { sconn = new java.net.ServerSocket ( arlzisfbldxlypkvvqtt ) ; conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } } <s> Fixing bugs
fix_before_refactoring: public static void main ( java.lang.String [] args ) throws java.io.IOException , java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int port = 3356 ; sconn = new java.net.ServerSocket ( port ) ; while ( true ) { try { conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } }
fix_after_refactoring: public static void main ( java.lang.String [] args ) throws java.io.IOException , java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int arlzisfbldxlypkvvqtt = 3356 ; sconn = new java.net.ServerSocket ( arlzisfbldxlypkvvqtt ) ; while ( true ) { try { conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } }
× fix_prediction_before: { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int port = 3356 ; while ( true ) { try { sconn = new java.net.ServerSocket ( port ) ; conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } }
× fix_prediction_after: { static void main ( java.lang.String [] args ) throws java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int arlzisfbldxlypkvvqtt = 3356 ; while ( true ) { try { sconn = new java.net.ServerSocket ( arlzisfbldxlypkvvqtt ) ; conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } }

line_index: 286
bug_before_refactoring: return ( ( this . height ) - r ) - 1 ; <s> private int columnHeight ( int column ) { int r = 0 ; for ( ; ( r < ( this . height ) ) && ( ( this . grid [ column ] [ r ] . isEmpty () ) || ( this . grid [ column ] [ r ] . isShape () ) ) ; r ++ ) ; return ( ( this . height ) - r ) - 1 ; } <s> (v48) New improved algorithm with wells counting  -fixed error in column counting that made it return negative numbers -introduced well counting -changed weight values
bug_after_refactoring: return ( ( this . height ) - bvcotezooljqxxxivqix ) - 1 ; <s> private int columnHeight ( int column ) { int r = 0 ; for ( ; ( r < ( this . height ) ) && ( ( this . grid [ column ] [ r ] . isEmpty () ) || ( this . grid [ column ] [ r ] . isShape () ) ) ; r ++ ) ; return ( ( this . height ) - bvcotezooljqxxxivqix ) - 1 ; } <s> (v48) New improved algorithm with wells counting  -fixed error in column counting that made it return negative numbers -introduced well counting -changed weight values
fix_before_refactoring: return ( this . height ) - r ;
fix_after_refactoring: return ( this . height ) - bvcotezooljqxxxivqix ;
× fix_prediction_before: return ( this . height ) - ( r - 1 ) ;
× fix_prediction_after: return ( this . height ) - ( this . height ) ;

line_index: 287
bug_before_refactoring: { int result = getDateFrom () . hashCode () ; result = ( 31 * result ) + ( getUser () . hashCode () ) ; result = ( 31 * result ) + ( getBookInstance () . hashCode () ) ; return result ; } <s> @ java.lang.Override public int hashCode () { int result = getDateFrom () . hashCode () ; result = ( 31 * result ) + ( getUser () . hashCode () ) ; result = ( 31 * result ) + ( getBookInstance () . hashCode () ) ; return result ; } <s> Fixed the problem with creating and updating of loans.
bug_after_refactoring: { int hhzlwlhopuffnfafnwrv = getDateFrom () . hashCode () ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( getUser () . hashCode () ) ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( getBookInstance () . hashCode () ) ; return hhzlwlhopuffnfafnwrv ; } <s> @ java.lang.Override public int hashCode () { int hhzlwlhopuffnfafnwrv = getDateFrom () . hashCode () ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( getUser () . hashCode () ) ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( getBookInstance () . hashCode () ) ; return hhzlwlhopuffnfafnwrv ; } <s> Fixed the problem with creating and updating of loans.
fix_before_refactoring: { int result = ( ( getDateFrom () ) != null ) ? getDateFrom () . hashCode () : 0 ; result = ( 31 * result ) + ( ( getUser () ) != null ? getUser () . hashCode () : 0 ) ; result = ( 31 * result ) + ( ( getBookInstance () ) != null ? getBookInstance () . hashCode () : 0 ) ; return result ; }
fix_after_refactoring: { int hhzlwlhopuffnfafnwrv = ( ( getDateFrom () ) != null ) ? getDateFrom () . hashCode () : 0 ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( ( getUser () ) != null ? getUser () . hashCode () : 0 ) ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( ( getBookInstance () ) != null ? getBookInstance () . hashCode () : 0 ) ; return hhzlwlhopuffnfafnwrv ; }
× fix_prediction_before: { int result = getDateFrom () . hashCode () ; result = ( 31 * result ) + ( getUser () . hashCode () ) ; result = ( 31 * result ) + ( getBookInstance () . hashCode () ) ; return result ; }
× fix_prediction_after: { int hhzlwlhopuffnfafnwrv = getDateFrom () . hashCode () ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( getUser () . hashCode () ) ; hhzlwlhopuffnfafnwrv = ( 31 * hhzlwlhopuffnfafnwrv ) + ( getBookInstance () . hashCode () ) ; return hhzlwlhopuffnfafnwrv ; }

line_index: 288
bug_before_refactoring: public synchronized java.lang.String getSpeed ( long size ) { long t2 = java.lang.System . currentTimeMillis () ; long t = t2 - ( t1 ) ; t1 = t2 ; if ( t == 0 ) return "MAX" ; sum += size ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / t ) , ( ( sum ) / ( t2 - ( t0 ) ) ) , sum ) ; } <s> public synchronized java.lang.String getSpeed ( long size ) { long t2 = java.lang.System . currentTimeMillis () ; long t = t2 - ( t1 ) ; t1 = t2 ; if ( t == 0 ) return "MAX" ; sum += size ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / t ) , ( ( sum ) / ( t2 - ( t0 ) ) ) , sum ) ; } <s> fixbug : stats of source missed some bytes
bug_after_refactoring: public synchronized java.lang.String getSpeed ( long size ) { long ehenttaxvxubazskvami = java.lang.System . currentTimeMillis () ; long npuetujgdnqoeirfxonr = ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t1 ) ; t1 = ehenttaxvxubazskvami ; if ( npuetujgdnqoeirfxonr == 0 ) return "MAX" ; sum += size ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / npuetujgdnqoeirfxonr ) , ( ( sum ) / ( ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t0 ) ) ) , sum ) ; } <s> public synchronized java.lang.String getSpeed ( long size ) { long ehenttaxvxubazskvami = java.lang.System . currentTimeMillis () ; long npuetujgdnqoeirfxonr = ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t1 ) ; t1 = ehenttaxvxubazskvami ; if ( npuetujgdnqoeirfxonr == 0 ) return "MAX" ; sum += size ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / npuetujgdnqoeirfxonr ) , ( ( sum ) / ( ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t0 ) ) ) , sum ) ; } <s> fixbug : stats of source missed some bytes
fix_before_refactoring: public java.lang.String getSpeed ( long size ) { synchronized ( this ) { sum += size ; } long t2 = java.lang.System . currentTimeMillis () ; long t = t2 - ( t1 ) ; t1 = t2 ; if ( t == 0 ) return "MAX" ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / t ) , ( ( sum ) / ( t2 - ( t0 ) ) ) , sum ) ; }
fix_after_refactoring: public java.lang.String getSpeed ( long size ) { synchronized ( this ) { sum += size ; } long ehenttaxvxubazskvami = java.lang.System . currentTimeMillis () ; long npuetujgdnqoeirfxonr = ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t1 ) ; t1 = ehenttaxvxubazskvami ; if ( npuetujgdnqoeirfxonr == 0 ) return "MAX" ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / npuetujgdnqoeirfxonr ) , ( ( sum ) / ( ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t0 ) ) ) , sum ) ; }
× fix_prediction_before: private synchronized java.lang.String getSpeed ( long size ) { long t2 = java.lang.System . currentTimeMillis () ; long t = t2 - ( t1 ) ; t1 = t2 ; if ( t == 0 ) return "MAX" ; sum += size ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( size / t ) , ( ( sum ) / ( t2 - ( t0 ) ) ) , sum ) ; }
× fix_prediction_after: private synchronized java.lang.String getSpeed ( long size ) { long ehenttaxvxubazskvami = java.lang.System . currentTimeMillis () ; long npuetujgdnqoeirfxonr = ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t1 ) ; t1 = ehenttaxvxubazskvami ; if ( npuetujgdnqoeirfxonr == 0 ) return "MAX" ; sum += size ; return java.lang.String . format ( "%,dKB/s avg. %,dKB/s, sum=%,dbytes" , ( ( sum ) / ( ehennpuetujgdnqoeirfxonrtaxvxubazskvami - ( t0 ) ) ) , sum ) ; }

line_index: 289
bug_before_refactoring: id = time * ( TcpReplicator.TIMESTAMP_FACTOR ) <s> long nextUniqueTransaction ( long time ) { long id = time * ( TcpReplicator.TIMESTAMP_FACTOR ) ; for ( ; ; ) { long old = transactionID . get () ; if ( old >= id ) id = old + 1 ; if ( transactionID . compareAndSet ( old , id ) ) break; } return id ; } <s> CE-14 fixed transaction id issue
bug_after_refactoring: geepzugxxhcogrcntuut = time * ( TcpReplicator.TIMESTAMP_FACTOR ) <s> long nextUniqueTransaction ( long time ) { long geepzugxxhcogrcntuut = time * ( TcpReplicator.TIMESTAMP_FACTOR ) ; for ( ; ; ) { long old = transactionID . get () ; if ( old >= id ) id = old + 1 ; if ( transactionID . compareAndSet ( old , id ) ) break; } return id ; } <s> CE-14 fixed transaction id issue
fix_before_refactoring: id = time
fix_after_refactoring: geepzugxxhcogrcntuut = time
× fix_prediction_before: id = ( time * ( TcpReplicator.TIMESTAMP_FACTOR ) ) + 1
× fix_prediction_after: geepzugxxhcogrcntuut = ( time * ( TcpReplicator.TIMESTAMP_FACTOR ) ) * ( - 1 )

line_index: 290
bug_before_refactoring: { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } long result = 0 ; while ( result == 0 ) { result = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return result ; } <s> public java.lang.Long next () { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } long result = 0 ; while ( result == 0 ) { result = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return result ; } <s> Bug fix in iterator  added a method to find puzzles at max depth.
bug_after_refactoring: { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } long lslnamslpquaxnzcjman = 0 ; while ( lslnamslpquaxnzcjman == 0 ) { lslnamslpquaxnzcjman = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return lslnamslpquaxnzcjman ; } <s> public java.lang.Long next () { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } long lslnamslpquaxnzcjman = 0 ; while ( lslnamslpquaxnzcjman == 0 ) { lslnamslpquaxnzcjman = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return lslnamslpquaxnzcjman ; } <s> Bug fix in iterator  added a method to find puzzles at max depth.
fix_before_refactoring: { long result = 0 ; while ( result == 0 ) { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } result = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return result ; }
fix_after_refactoring: { long lslnamslpquaxnzcjman = 0 ; while ( lslnamslpquaxnzcjman == 0 ) { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } lslnamslpquaxnzcjman = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return lslnamslpquaxnzcjman ; }
× fix_prediction_before: { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } long result = 0 ; while ( result == 0 ) { result = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return result ; }
× fix_prediction_after: { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } long lslnamslpquaxcjman = 0 ; while ( lslnamslpquaxnzcjman == 0 ) { lslnamslpquaxcjman = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return lslnamslpquaxnzcjman ; }

line_index: 291
bug_before_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
bug_after_refactoring: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; } <s> private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; } <s> Added Hungarian unit tests and fixed a minor line matrix bug
fix_before_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
fix_after_refactoring: public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; }
× fix_prediction_before: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; }
× fix_prediction_after: private static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int qiyemvxxwlukvencrhaw = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { qiyemvxxwlukvencrhaw += pairTimes . get ( i ) . getPair () . getScore () ; } return qiyemvxxwlukvencrhaw ; }

line_index: 292
bug_before_refactoring: static int minimaxDecision ( State state ) { int action = 0 ; int v = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int temp = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( temp > v ) { action = a ; } } return action ; } <s> static int minimaxDecision ( State state ) { int action = 0 ; int v = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int temp = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( temp > v ) { action = a ; } } return action ; } <s> Fixed minimax bug  added State(state) constructor
bug_after_refactoring: static int minimaxDecision ( State state ) { int qvjosbkcvnloofxwcbtm = 0 ; int qiskfamkdpdajhsvxrgf = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int wqvogzkbmhfvzzxdkirh = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( wqvogzkbmhfvzzxdkirh > qiskfamkdpdajhsvxrgf ) { qvjosbkcvnloofxwcbtm = a ; } } return qvjosbkcvnloofxwcbtm ; } <s> static int minimaxDecision ( State state ) { int qvjosbkcvnloofxwcbtm = 0 ; int qiskfamkdpdajhsvxrgf = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int wqvogzkbmhfvzzxdkirh = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( wqvogzkbmhfvzzxdkirh > qiskfamkdpdajhsvxrgf ) { qvjosbkcvnloofxwcbtm = a ; } } return qvjosbkcvnloofxwcbtm ; } <s> Fixed minimax bug  added State(state) constructor
fix_before_refactoring: public static int minimaxDecision ( State state ) { int action = 0 ; int v = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int temp = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( temp > v ) { v = temp ; action = a ; } } return action ; }
fix_after_refactoring: public static int minimaxDecision ( State state ) { int qvjosbkcvnloofxwcbtm = 0 ; int qiskfamkdpdajhsvxrgf = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int wqvogzkbmhfvzzxdkirh = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( wqvogzkbmhfvzzxdkirh > qiskfamkdpdajhsvxrgf ) { qiskfamkdpdajhsvxrgf = wqvogzkbmhfvzzxdkirh ; qvjosbkcvnloofxwcbtm = a ; } } return qvjosbkcvnloofxwcbtm ; }
× fix_prediction_before: static int minimaxDecision ( State state ) { int action = 0 ; int v = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int temp = Minimax . minValue ( minimax . result ( state , a ) ) ; if ( temp > v ) { action = a ; } } return action ; }
× fix_prediction_after: static int minimaxDecision ( State state ) { int qvjosbkcvnloofxwcbtm = 0 ; int qiskfamkdpdajhsvxrgf = - ( Minimax.MAX_NUMBER ) ; for ( int a : Minimax . actions ( state ) ) { int wqvogzkbmhfvzzxdkirh = Minimax . minValue ( Minimax . result ( state , a ) ) ; if ( wqvogzkbmhfvzzxdkirh > qiskfamkdpdajhsvxrgf ) { qvjosbkcvnloofxwcbtm = a ; } } return qvjosbkcvnloofxwcbtm ; }

line_index: 293
bug_before_refactoring: if ( index != ( - 1 ) ) { long time = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( index ) . timeWeight ) ) ) ; return new org.joda.time.Duration ( time ) ; } <s> public org.joda.time.Duration getEstimatedTime ( @ android.support.annotation.NonNull org.cook_e.data.Step s ) { org.cook_e.data.Objects . requireNonNull ( s , "step must not be null" ) ; int index = searchStep ( s . hashCode () ) ; if ( index != ( - 1 ) ) { long time = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( index ) . timeWeight ) ) ) ; return new org.joda.time.Duration ( time ) ; } return s . getTime () . toDuration () ; } <s> Bug fix
bug_after_refactoring: if ( flpvbfuxwwzwcwtxjsxg != ( - 1 ) ) { long orzjuemixeuffpugybll = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( flpvbfuxwwzwcwtxjsxg ) . timeWeight ) ) ) ; return new org.joda.orzjuemixeuffpugybll.Duration ( orzjuemixeuffpugybll ) ; } <s> public org.joda.time.Duration getEstimatedTime ( @ android.support.annotation.NonNull org.cook_e.data.Step s ) { org.cook_e.data.Objects . requireNonNull ( s , "step must not be null" ) ; int index = searchStep ( s . hashCode () ) ; if ( flpvbfuxwwzwcwtxjsxg != ( - 1 ) ) { long orzjuemixeuffpugybll = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( flpvbfuxwwzwcwtxjsxg ) . timeWeight ) ) ) ; return new org.joda.orzjuemixeuffpugybll.Duration ( orzjuemixeuffpugybll ) ; } return s . getTime () . toDuration () ; } <s> Bug fix
fix_before_refactoring: if ( index >= 0 ) { long time = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( index ) . timeWeight ) ) ) ; return new org.joda.time.Duration ( time ) ; }
fix_after_refactoring: if ( flpvbfuxwwzwcwtxjsxg >= 0 ) { long orzjuemixeuffpugybll = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( flpvbfuxwwzwcwtxjsxg ) . timeWeight ) ) ) ; return new org.joda.orzjuemixeuffpugybll.Duration ( orzjuemixeuffpugybll ) ; }
× fix_prediction_before: if ( index > ( - 1 ) ) { long time = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( index ) . timeWeight ) ) ) ; return new org.joda.time.Duration ( time ) ; }
× fix_prediction_after: if ( ( flpvbfuxwwzwcwtxjsxg != ( - 1 ) ) && ( flpvbfuxwwzwcwtxjsxg != ( - 1 ) ) ) { long orzjuemixeuffpugybll = ( ( long ) ( ( s . getTime () . getMillis () ) * ( org.cook_e.data.TimeLearner.weightList . get ( flpvbfuxwwzwcwtxjsxg ) . timeWeight ) ) ) ; return new org.joda.orzjuemixeuffpugybll.Duration ( orzjuemixeuffpugybll ) ; }

line_index: 296
bug_before_refactoring: { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean userRemovedFromHDFSPolicy = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean userRemovedFromYarnPolicy = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 1 ] , groupName , accountName ) ; return userRemovedFromYarnPolicy && userRemovedFromHDFSPolicy ; } <s> @ java.lang.Override public boolean removeUserFromResourcePermission ( java.lang.String policyId , java.lang.String groupName , java.lang.String accountName ) { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean userRemovedFromHDFSPolicy = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean userRemovedFromYarnPolicy = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 1 ] , groupName , accountName ) ; return userRemovedFromYarnPolicy && userRemovedFromHDFSPolicy ; } <s> Fix issue #5:https://github.com/asiainfoLDP/datafoundry_servicebroker_ocdp/issues/5
bug_after_refactoring: { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean homcazgljwhoxbusemok = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean nsoiojlgswvdpaccdufb = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 1 ] , groupName , accountName ) ; return nsoiojlgswvdpaccdufb && homcazgljwhoxbusemok ; } <s> @ java.lang.Override public boolean removeUserFromResourcePermission ( java.lang.String policyId , java.lang.String groupName , java.lang.String accountName ) { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean homcazgljwhoxbusemok = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean nsoiojlgswvdpaccdufb = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 1 ] , groupName , accountName ) ; return nsoiojlgswvdpaccdufb && homcazgljwhoxbusemok ; } <s> Fix issue #5:https://github.com/asiainfoLDP/datafoundry_servicebroker_ocdp/issues/5
fix_before_refactoring: { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean userRemovedFromYarnPolicy = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean userRemovedFromHDFSPolicy = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 1 ] , groupName , accountName ) ; return userRemovedFromYarnPolicy && userRemovedFromHDFSPolicy ; }
fix_after_refactoring: { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean nsoiojlgswvdpaccdufb = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean homcazgljwhoxbusemok = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 1 ] , groupName , accountName ) ; return nsoiojlgswvdpaccdufb && homcazgljwhoxbusemok ; }
× fix_prediction_before: { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean userRemovedFromHDFSPolicy = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean userRemovedFromYarnPolicy = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 1 ] , groupName , accountName ) ; return userRemovedFromYarnPolicy && userRemovedFromHDFSPolicy ; }
× fix_prediction_after: { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean homcazgljwhoxbusemok = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean nsoiojlgswvdpaccdufb = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 1 ] , groupName , accountName ) ; return nsoiojlgswvdpaccdufb && homcazgljwhoxbusemok ; }

line_index: 297
bug_before_refactoring: public int xToPixel ( double x , mesquite.lib.MesquiteChart chart ) { tempNum . setValue ( x ) ; int fieldWidth = chart . getFieldWidth () ; int margin = chart . getMargin () ; return ( margin + ( tempNum . setWithinBounds ( minX , maxX , ( ( fieldWidth - ( 2 * margin ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelBase () ) ; } <s> public int xToPixel ( double x , mesquite.lib.MesquiteChart chart ) { tempNum . setValue ( x ) ; int fieldWidth = chart . getFieldWidth () ; int margin = chart . getMargin () ; return ( margin + ( tempNum . setWithinBounds ( minX , maxX , ( ( fieldWidth - ( 2 * margin ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelBase () ) ; } <s> Fixed threading drawing bug in Histograms.
bug_after_refactoring: public int xToPixel ( double x , mesquite.lib.MesquiteChart chart ) { tempNum . setValue ( x ) ; int oiolnrbltfqpjkgmcokz = chart . getFieldWidth () ; int frwxlpdcubvbihwubqie = chart . getMargin () ; return ( frwxlpdcubvbihwubqie + ( tempNum . setWithinBounds ( minX , maxX , ( ( oiolnrbltfqpjkgmcokz - ( 2 * frwxlpdcubvbihwubqie ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelBase () ) ; } <s> public int xToPixel ( double x , mesquite.lib.MesquiteChart chart ) { tempNum . setValue ( x ) ; int oiolnrbltfqpjkgmcokz = chart . getFieldWidth () ; int frwxlpdcubvbihwubqie = chart . getMargin () ; return ( frwxlpdcubvbihwubqie + ( tempNum . setWithinBounds ( minX , maxX , ( ( oiolnrbltfqpjkgmcokz - ( 2 * frwxlpdcubvbihwubqie ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelBase () ) ; } <s> Fixed threading drawing bug in Histograms.
fix_before_refactoring: public synchronized int xToPixel ( double x , mesquite.lib.MesquiteChart chart ) { tempNum . setValue ( x ) ; int fieldWidth = chart . getFieldWidth () ; int margin = chart . getMargin () ; int value = ( margin + ( tempNum . setWithinBounds ( minX , maxX , ( ( fieldWidth - ( 2 * margin ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelBase () ) ; return value ; }
fix_after_refactoring: public synchronized int xToPixel ( double x , mesquite.lib.MesquiteChart chart ) { tempNum . setValue ( x ) ; int oiolnrbltfqpjkgmcokz = chart . getFieldWidth () ; int frwxlpdcubvbihwubqie = chart . getMargin () ; int value = ( frwxlpdcubvbihwubqie + ( tempNum . setWithinBounds ( minX , maxX , ( ( oiolnrbltfqpjkgmcokz - ( 2 * frwxlpdcubvbihwubqie ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelBase () ) ; return value ; }
× fix_prediction_before: public double xToPixel ( double x , mesretched.lib.MesretchedChart chart ) { tempNum . setValue ( x ) ; int fieldWidth = chart . getFieldWidth () ; int margin = chart . getMargin () ; return ( margin + ( tempNum . setWithinBounds ( minX , maxX , ( ( fieldWidth - ( 2 * margin ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelsBase () ) ; }
× fix_prediction_after: public int xToPixel ( double x , mesnil.lib.MesretchedChart chart ) { tempNum . setValue ( x ) ; int oiolnrbltfqpjkgmcokz = chart . getFieldWidth () ; int frwxlpdcubvbihwubqie = chart . getMargin () ; return ( frwxlpdcubvbihwubqie + ( tempNum . setWithinBounds ( minX , maxX , ( ( oiolnrbltfqpjkgmcokz - ( 2 * frwxlpdcubvbihwubqie ) ) - ( markerWidth ) ) ) ) ) - ( chart . getXPixelsBase () ) ; }

line_index: 298
bug_before_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; resetPieces () ; } <s> public void handleResetButtonAction ( javafx.event.ActionEvent event ) throws java.io.IOException { java.lang.System.out . println ( "reseting level" ) ; int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; resetPieces () ; } <s> Bug Fixes: Fixed lightning level overlapping bug  To Do: Need someone to go through piececolors and make sure they aren't too light
bug_after_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int kniojqueghtgytspocnr ; try { kniojqueghtgytspocnr = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetBoard ( kniojqueghtgytspocnr ) ; resetFields ( kniojqueghtgytspocnr ) ; resetPieces () ; } <s> public void handleResetButtonAction ( javafx.event.ActionEvent event ) throws java.io.IOException { java.lang.System.out . println ( "reseting level" ) ; int kniojqueghtgytspocnr ; try { kniojqueghtgytspocnr = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetBoard ( kniojqueghtgytspocnr ) ; resetFields ( kniojqueghtgytspocnr ) ; resetPieces () ; } <s> Bug Fixes: Fixed lightning level overlapping bug  To Do: Need someone to go through piececolors and make sure they aren't too light
fix_before_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; }
fix_after_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int kniojqueghtgytspocnr ; try { kniojqueghtgytspocnr = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( kniojqueghtgytspocnr ) ; resetFields ( kniojqueghtgytspocnr ) ; }
× fix_prediction_before: { int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; resetPieces () ; }
× fix_prediction_after: { int kniojqueghtgytspocnr ; try { kniojqueghtgytspocnr = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetBoard ( kniojqueghtgytspocnr ) ; resetFields ( kniojqueghtgytspocnr ) ; resetPieces () ; }

line_index: 299
bug_before_refactoring: @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { if ( volume <= 0.0 ) { com.connectsdk.core.Util . postSuccess ( listener , null ) ; } else { float newVolume = ( ( float ) ( volume - 0.01 ) ) ; if ( newVolume < 0.0 ) newVolume = ( ( float ) ( 0.0 ) ) ; setVolume ( newVolume , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; } } <s> @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { if ( volume <= 0.0 ) { com.connectsdk.core.Util . postSuccess ( listener , null ) ; } else { float newVolume = ( ( float ) ( volume - 0.01 ) ) ; if ( newVolume < 0.0 ) newVolume = ( ( float ) ( 0.0 ) ) ; setVolume ( newVolume , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; } } <s> fix chromecast issues.  Signed-off-by: Jianmin Zhou <jianmin.zhou@acadine.com>
bug_after_refactoring: @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { if ( volume <= 0.0 ) { com.connectsdk.core.Util . postSuccess ( listener , null ) ; } else { float qkfiqqallxetghtorecu = ( ( float ) ( volume - 0.01 ) ) ; if ( qkfiqqallxetghtorecu < 0.0 ) qkfiqqallxetghtorecu = ( ( float ) ( 0.0 ) ) ; setVolume ( qkfiqqallxetghtorecu , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; } } <s> @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { if ( volume <= 0.0 ) { com.connectsdk.core.Util . postSuccess ( listener , null ) ; } else { float qkfiqqallxetghtorecu = ( ( float ) ( volume - 0.01 ) ) ; if ( qkfiqqallxetghtorecu < 0.0 ) qkfiqqallxetghtorecu = ( ( float ) ( 0.0 ) ) ; setVolume ( qkfiqqallxetghtorecu , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; } } <s> fix chromecast issues.  Signed-off-by: Jianmin Zhou <jianmin.zhou@acadine.com>
fix_before_refactoring: @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { if ( volume >= 1.0 ) { com.connectsdk.core.Util . postSuccess ( listener , null ) ; } else { float newVolume = ( ( float ) ( volume + 0.01 ) ) ; if ( newVolume > 1.0 ) newVolume = ( ( float ) ( 1.0 ) ) ; setVolume ( newVolume , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; } }
fix_after_refactoring: @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { if ( volume >= 1.0 ) { com.connectsdk.core.Util . postSuccess ( listener , null ) ; } else { float qkfiqqallxetghtorecu = ( ( float ) ( volume + 0.01 ) ) ; if ( qkfiqqallxetghtorecu > 1.0 ) qkfiqqallxetghtorecu = ( ( float ) ( 1.0 ) ) ; setVolume ( qkfiqqallxetghtorecu , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; } }
× fix_prediction_before: public void onSuccess ( final java.lang.Float volume ) { float newVolume = ( ( float ) ( volume - 0.01 ) ) ; if ( newVolume < 0.0 ) { newVolume = ( ( float ) ( volume - 0.01 ) ) ; setVolume ( newVolume , listener ) ; } }
× fix_prediction_after: @ java.lang.Override public void onSuccess ( final java.lang.Float volume ) { float qkfiqqallxetghtorecu = ( ( float ) ( volume - 0.01 ) ) ; if ( qkfiqqallxetghtorecu < 0.0 ) qkfiqqallxetghtorecu = ( ( float ) ( 0.0 ) ) ; setVolume ( qkfiqqallxetghtorecu , listener ) ; com.connectsdk.core.Util . postSuccess ( listener , null ) ; }

line_index: 300
bug_before_refactoring: @ java.lang.Override public boolean checkImpl ( wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { for ( wjtoth.cyclicstablematching.Matching matching : matchings ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { continue; } boolean isInternallyBlocked = mathcingPS . isInternallyBlocked () ; if ( isInternallyBlocked ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } } return false ; } <s> @ java.lang.Override public boolean checkImpl ( wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { for ( wjtoth.cyclicstablematching.Matching matching : matchings ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { continue; } boolean isInternallyBlocked = mathcingPS . isInternallyBlocked () ; if ( isInternallyBlocked ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } } return false ; } <s> Hopeful bugfixing
bug_after_refactoring: @ java.lang.Override public boolean checkImpl ( wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { for ( wjtoth.cyclicstablematching.Matching matching : matchings ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { continue; } boolean agrpdulgindgthhxtudt = mathcingPS . agrpdulgindgthhxtudt () ; if ( agrpdulgindgthhxtudt ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } } return false ; } <s> @ java.lang.Override public boolean checkImpl ( wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { for ( wjtoth.cyclicstablematching.Matching matching : matchings ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { continue; } boolean agrpdulgindgthhxtudt = mathcingPS . agrpdulgindgthhxtudt () ; if ( agrpdulgindgthhxtudt ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } } return false ; } <s> Hopeful bugfixing
fix_before_refactoring: public boolean checkImpl ( wjtoth.cyclicstablematching.Matching matching , wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { return false ; } boolean isInternallyBlocked = mathcingPS . isInternallyBlocked () ; if ( isInternallyBlocked ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } return false ; }
fix_after_refactoring: public boolean checkImpl ( wjtoth.cyclicstablematching.Matching matching , wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { return false ; } boolean agrpdulgindgthhxtudt = mathcingPS . agrpdulgindgthhxtudt () ; if ( agrpdulgindgthhxtudt ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } return false ; }
× fix_prediction_before: @ java.lang.Override public boolean checkImpl ( wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { for ( wjtoth.cyclicstablematching.Matching matching : matchings ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { continue; } boolean isInternallyBlocked = mathcingPS . isInternallyBlocked () ; if ( isInternallyBlocked ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } } return false ; }
× fix_prediction_after: @ java.lang.Override public boolean checkImpl ( wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { for ( wjtoth.cyclicstablematching.Matching matching : matchings ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { continue; } boolean agrpdulgindgthhxtudt = mathcingPS . agrpdulgindgthhxtudt () ; if ( agrpdulgindgthhxtudt ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } } return false ; }

line_index: 301
bug_before_refactoring: s += str . charAt ( str . charAt ( ( ( len - 1 ) - i ) ) ) <s> private java.lang.String _revert ( java.lang.String str ) { java.lang.String s = "" ; int len = str . length () ; for ( int i = 0 ; i < len ; i ++ ) { s += str . charAt ( str . charAt ( ( ( len - 1 ) - i ) ) ) ; } return s ; } <s> fix response message type issue
bug_after_refactoring: s += str . charAt ( str . charAt ( ( ( zqinivkegxczrnnesmlu - 1 ) - i ) ) ) <s> private java.lang.String _revert ( java.lang.String str ) { java.lang.String s = "" ; int len = str . length () ; for ( int i = 0 ; i < len ; i ++ ) { s += str . charAt ( str . charAt ( ( ( zqinivkegxczrnnesmlu - 1 ) - i ) ) ) ; } return s ; } <s> fix response message type issue
fix_before_refactoring: s += str . charAt ( ( ( len - 1 ) - i ) )
fix_after_refactoring: s += str . charAt ( ( ( zqinivkegxczrnnesmlu - 1 ) - i ) )
× fix_prediction_before: s += ( str . charAt ( ( ( len - 1 ) - i ) ) ) + "\n"
× fix_prediction_after: s += ( str . charAt ( ( ( zqinivkegxczrnnesmlu - 1 ) - i ) ) - 1 ) + ( str . charAt ( ( ( zqinivkegxczrnnesmlu - i ) - i ) ) )

line_index: 302
bug_before_refactoring: SoFTlib.Helper . words ( input , 1 , index , 1 ) <s> public java.lang.String runNode ( java.lang.String input ) throws SoFTlib.SoFTException { int index = de.unidue.stud.maha.Main . getInputIndex ( myChar () ) ; int zahl = java.lang.Integer . valueOf ( SoFTlib.Helper . words ( input , 1 , index , 1 ) ) ; java.lang.String maskierer = de.unidue.stud.maha.Main . getMaskierer () ; form ( 'e' , zahl ) . send ( maskierer ) ; return "0" ; } <s> fixed bug
bug_after_refactoring: SoFTlib.Helper . words ( input , 1 , mdxiwvtsuddfsaalsimj , 1 ) <s> public java.lang.String runNode ( java.lang.String input ) throws SoFTlib.SoFTException { int index = de.unidue.stud.maha.Main . getInputIndex ( myChar () ) ; int zahl = java.lang.Integer . valueOf ( SoFTlib.Helper . words ( input , 1 , mdxiwvtsuddfsaalsimj , 1 ) ) ; java.lang.String maskierer = de.unidue.stud.maha.Main . getMaskierer () ; form ( 'e' , zahl ) . send ( maskierer ) ; return "0" ; } <s> fixed bug
fix_before_refactoring: SoFTlib.Helper . words ( input , 1 , index , index )
fix_after_refactoring: SoFTlib.Helper . words ( input , 1 , mdxiwvtsuddfsaalsimj , mdxiwvtsuddfsaalsimj )
× fix_prediction_before: SoFTlib.Helper . words ( input , index , 1 )
× fix_prediction_after: SoFTlib.Helper . words ( input , index , mdxiwvtsuddfsaalsimj , 0 )

line_index: 303
bug_before_refactoring: public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int key = 0 ; for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { listOfCoordinates . put ( key , new int [] { x , y } ) ; key ++ ; } } return listOfCoordinates ; } <s> public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int key = 0 ; for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { listOfCoordinates . put ( key , new int [] { x , y } ) ; key ++ ; } } return listOfCoordinates ; } <s> fixed x y problem and setting of moves
bug_after_refactoring: public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int awfgkowkzxubabuywlkl = 0 ; for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { listOfCoordinates . put ( awfgkowkzxubabuywlkl , new int [] { x , y } ) ; awfgkowkzxubabuywlkl ++ ; } } return listOfCoordinates ; } <s> public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int awfgkowkzxubabuywlkl = 0 ; for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { listOfCoordinates . put ( awfgkowkzxubabuywlkl , new int [] { x , y } ) ; awfgkowkzxubabuywlkl ++ ; } } return listOfCoordinates ; } <s> fixed x y problem and setting of moves
fix_before_refactoring: public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int key = 0 ; for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { listOfCoordinates . put ( key , new int [] { x , y } ) ; key ++ ; } } return listOfCoordinates ; }
fix_after_refactoring: public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int awfgkowkzxubabuywlkl = 0 ; for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { listOfCoordinates . put ( awfgkowkzxubabuywlkl , new int [] { x , y } ) ; awfgkowkzxubabuywlkl ++ ; } } return listOfCoordinates ; }
× fix_prediction_before: public java.util.Map < java.lang.Integer , java.util.List < java.lang.Integer > > getListOfCoordinates () { java.util.List < java.lang.Integer > listOfCoordinates = new java.util.HashMap <> () ; int key = 0 ; for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { listOfCoordinates . put ( key , new int [] { x , y } ) ; key ++ ; } } return listOfCoordinates ; }
× fix_prediction_after: private java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int awfgkowkzxubabuywlkl = 0 ; for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { listOfCoordinates . put ( awfgkowkzxubabuywlkl , new int [] { x , y } ) ; awfgkowkzxubabuywlkl ++ ; } } return listOfCoordinates ; }

line_index: 304
bug_before_refactoring: ordinal = ( ( long ) ( java.lang.Math . ceil ( ( ( ( cumulativeProbability * card ) + min ) - 1 ) ) ) ) <s> @ java.lang.Override public T invertedCumulativeProbability ( double cumulativeProbability ) { com.google.common.base.Preconditions . checkArgument ( ( ( 0 < cumulativeProbability ) && ( cumulativeProbability <= 1.0 ) ) ) ; long card = domain . cardinality () ; long min = domain . ordinal ( domain . min () ) ; long ordinal = ( ( long ) ( java.lang.Math . ceil ( ( ( ( cumulativeProbability * card ) + min ) - 1 ) ) ) ) ; return domain . value ( ordinal ) ; } <s> Fix rounding error in UniformDistribution.
bug_after_refactoring: wizgngyhkyhshkgluogc = ( ( long ) ( java.lang.Math . ceil ( ( ( ( cumulativeProbability * ozftfxlxvcedhgmiapac ) + hzbmzszxbqnbxqsmqtei ) - 1 ) ) ) ) <s> @ java.lang.Override public T invertedCumulativeProbability ( double cumulativeProbability ) { com.google.common.base.Preconditions . checkArgument ( ( ( 0 < cumulativeProbability ) && ( cumulativeProbability <= 1.0 ) ) ) ; long card = domain . cardinality () ; long min = domain . ordinal ( domain . min () ) ; long wizgngyhkyhshkgluogc = ( ( long ) ( java.lang.Math . ceil ( ( ( ( cumulativeProbability * ozftfxlxvcedhgmiapac ) + hzbmzszxbqnbxqsmqtei ) - 1 ) ) ) ) ; return domain . value ( ordinal ) ; } <s> Fix rounding error in UniformDistribution.
fix_before_refactoring: ordinal = ( ( ( long ) ( java.lang.Math . ceil ( ( cumulativeProbability * card ) ) ) ) + min ) - 1
fix_after_refactoring: wizgngyhkyhshkgluogc = ( ( ( long ) ( java.lang.Math . ceil ( ( cumulativeProbability * ozftfxlxvcedhgmiapac ) ) ) ) + hzbmzszxbqnbxqsmqtei ) - 1
× fix_prediction_before: ordinal = ( ( long ) ( java.lang.Math . ceil ( ( ( ( cumulativeProbability * card ) + min ) - 1 ) ) ) )
× fix_prediction_after: wizgngyhkyhshkgluogc = ( ( long ) ( java.lang.Math . ceil ( ( ( ( cumulativeProbability * ozftfxlxvcedhgmiapac ) + hzbmzszxbqnbxqsmqtei ) - 1 ) ) )

line_index: 306
bug_before_refactoring: { int index = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , index ) ; codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; } <s> private void selectConversation ( javafx.scene.input.MouseEvent e ) { int index = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , index ) ; codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; } <s> Resolved issue of empty cell click
bug_after_refactoring: { int thvuezuipntqdgwwwqqd = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , thvuezuipntqdgwwwqqd ) ; codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; } <s> private void selectConversation ( javafx.scene.input.MouseEvent e ) { int thvuezuipntqdgwwwqqd = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , thvuezuipntqdgwwwqqd ) ; codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; } <s> Resolved issue of empty cell click
fix_before_refactoring: { int index = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , index ) ; if ( selectedConvo != null ) { codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; } }
fix_after_refactoring: { int thvuezuipntqdgwwwqqd = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , thvuezuipntqdgwwwqqd ) ; if ( selectedConvo != null ) { codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; } }
× fix_prediction_before: { int index = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , index ) ; codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; }
× fix_prediction_after: { int thvuezuipntqdgwwwqqd = conversations . getSelectionModel () . getSelectedIndex () ; java.lang.String data = conversations . getSelectionModel () . getSelectedItem () ; codeu.chat.common.ConversationSummary selectedConvo = lookupByTitle ( data , thvuezuipntqdgwwwqqd ) ; codeu.chat.client.simplegui.ChatGuiFX.clientContext.conversation . setCurrent ( selectedConvo ) ; updateCurrentConversation ( selectedConvo ) ; }

line_index: 307
bug_before_refactoring: private void init ( com.shinav.mathapp.db.pojo.CutsceneLine cutsceneLine ) { this . cutsceneLine = cutsceneLine ; com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int layout = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( layout , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; } <s> private void init ( com.shinav.mathapp.db.pojo.CutsceneLine cutsceneLine ) { this . cutsceneLine = cutsceneLine ; com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int layout = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( layout , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; } <s> [#92189736] Fix cutscene duplication bug by using one bus instance per conversation and clear the cutscene when leaving the activity.
bug_after_refactoring: private void init ( com.shinav.mathapp.db.pojo.CutsceneLine cutsceneLine ) { this . cutsceneLine = cutsceneLine ; com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int odpqumgvpcjpwsrkeepu = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( odpqumgvpcjpwsrkeepu , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; } <s> private void init ( com.shinav.mathapp.db.pojo.CutsceneLine cutsceneLine ) { this . cutsceneLine = cutsceneLine ; com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int odpqumgvpcjpwsrkeepu = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( odpqumgvpcjpwsrkeepu , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; } <s> [#92189736] Fix cutscene duplication bug by using one bus instance per conversation and clear the cutscene when leaving the activity.
fix_before_refactoring: private void init () { com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int layout = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( layout , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; }
fix_after_refactoring: private void init () { com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int odpqumgvpcjpwsrkeepu = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( odpqumgvpcjpwsrkeepu , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; }
× fix_prediction_before: private void init ( com.shinav.mathapp.db.pojo.CutsceneLine cutsceneLine ) { this . cutsceneLine = cutsceneLine ; com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int layout = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( layout , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; }
× fix_prediction_after: private void init ( com.shinav.mathapp.db.pojo.CutsceneLine cutsceneLine ) { this . cutsceneLine = cutsceneLine ; com.shinav.mathapp.injection.component.Injector . getViewComponent ( this . getContext () ) . inject ( this ) ; int odpqumgvpcjpwsrkeepu = getLayout ( cutsceneLine ) ; android.view.View view = inflate ( odpqumgvpcjpwsrkeepu , this , false ) ; holder = new com.shinav.mathapp.cutscene.CutsceneLineView.ViewHolder ( view ) ; loadCharacterImage ( cutsceneLine ) ; holder.line_value . setVisibility ( com.shinav.mathapp.cutscene.INVISIBLE ) ; addView ( view ) ; }

line_index: 308
bug_before_refactoring: ( ( server.config.properties . contains ( "c10tArgs" ) ) && ( maxAge > ( lastRun ) ) ) && ( ( server . numPlayers () ) > 0 ) <s> private boolean needsRun () { long maxAge = ( java.lang.System . currentTimeMillis () ) - ( ( simpleserver.thread.AutoRun.MILLISECONDS_PER_MINUTE ) * ( server.config.properties . getInt ( "c10tMins" ) ) ) ; return ( ( server.config.properties . contains ( "c10tArgs" ) ) && ( maxAge > ( lastRun ) ) ) && ( ( server . numPlayers () ) > 0 ) ; } <s> Added untracked files Fixed possible bug
bug_after_refactoring: ( ( server.config.properties . contains ( "c10tArgs" ) ) && ( jucbqnzzccfpvfqkxgyf > ( lastRun ) ) ) && ( ( server . numPlayers () ) > 0 ) <s> private boolean needsRun () { long maxAge = ( java.lang.System . currentTimeMillis () ) - ( ( simpleserver.thread.AutoRun.MILLISECONDS_PER_MINUTE ) * ( server.config.properties . getInt ( "c10tMins" ) ) ) ; return ( ( server.config.properties . contains ( "c10tArgs" ) ) && ( jucbqnzzccfpvfqkxgyf > ( lastRun ) ) ) && ( ( server . numPlayers () ) > 0 ) ; } <s> Added untracked files Fixed possible bug
fix_before_refactoring: ( ( server.config.properties . get ( "c10tArgs" ) . length () ) > 0 ) && ( maxAge > ( lastRun ) )
fix_after_refactoring: ( ( server.config.properties . get ( "c10tArgs" ) . length () ) > 0 ) && ( jucbqnzzccfpvfqkxgyf > ( lastRun ) )
× fix_prediction_before: ( ( server.config.properties . contains ( "c10tArgs" ) ) && ( maxAge > ( lastRun ) ) ) && ( ( server . numPlayers () ) > 0 )
× fix_prediction_after: ( ( server.config.properties . contains ( "c10tArgs" ) ) && ( jucbqnzzccfpvfqkxgyf > ( lastRun ) ) ) && ( ( server . numPlayers () ) > 0 )

line_index: 309
bug_before_refactoring: max = ( ( _scroll . getMaximum () ) - ( _scroll . getMinimum () ) ) - 1 <s> private void handlePaint () { if ( ! ( _updateThumb ) ) return; final org.eclipse.swt.graphics.Rectangle rect = _table . getVisibleScrollableCells () ; final int max = ( ( _scroll . getMaximum () ) - ( _scroll . getMinimum () ) ) - 1 ; final int tWidth = java.lang.Math . min ( java.lang.Math . max ( 1 , rect.width ) , max ) ; _scroll . setThumb ( tWidth ) ; _scroll . setEnabled ( ( tWidth != max ) ) ; } <s> Fixed scrolling issue with TimeSeriesTable sparkline where couldn't scroll to see last column.
bug_after_refactoring: veaoqhkzcsgjaqcummhk = ( ( _scroll . getMaximum () ) - ( _scroll . getMinimum () ) ) - 1 <s> private void handlePaint () { if ( ! ( _updateThumb ) ) return; final org.eclipse.swt.graphics.Rectangle rect = _table . getVisibleScrollableCells () ; final int veaoqhkzcsgjaqcummhk = ( ( _scroll . getMaximum () ) - ( _scroll . getMinimum () ) ) - 1 ; final int tWidth = java.lang.Math . min ( java.lang.Math . max ( 1 , rect.width ) , max ) ; _scroll . setThumb ( tWidth ) ; _scroll . setEnabled ( ( tWidth != max ) ) ; } <s> Fixed scrolling issue with TimeSeriesTable sparkline where couldn't scroll to see last column.
fix_before_refactoring: max = ( ( _scroll . getMaximum () ) - ( _scroll . getMinimum () ) ) + 1
fix_after_refactoring: veaoqhkzcsgjaqcummhk = ( ( _scroll . getMaximum () ) - ( _scroll . getMinimum () ) ) + 1
× fix_prediction_before: max = ( _scroll . getMaximum () ) - ( _scroll . getMinimum () )
× fix_prediction_after: veaoqhkzcsgjaqcummhk = ( _scroll . getMaximum () ) - ( _scroll . getMinimum () )

line_index: 310
bug_before_refactoring: { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] fileData = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( fileData ) ; sCore = new edu.berkeley.cs.succinct.buffers.SuccinctBuffer ( fileData , 3 ) ; } <s> public void setUp ( ) throws java.lang.Exception { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] fileData = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( fileData ) ; sCore = new edu.berkeley.cs.succinct.buffers.SuccinctBuffer ( fileData , 3 ) ; } <s> Fixed bug in test
bug_after_refactoring: { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] zbnzwtqatatjnomqrmbv = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( zbnzwtqatatjnomqrmbv ) ; sCore = new edu.berkeley.cs.succinct.buffers.SuccinctBuffer ( zbnzwtqatatjnomqrmbv , 3 ) ; } <s> public void setUp ( ) throws java.lang.Exception { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] zbnzwtqatatjnomqrmbv = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( zbnzwtqatatjnomqrmbv ) ; sCore = new edu.berkeley.cs.succinct.buffers.SuccinctBuffer ( zbnzwtqatatjnomqrmbv , 3 ) ; } <s> Fixed bug in test
fix_before_refactoring: { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] fileData = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( fileData ) ; }
fix_after_refactoring: { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] zbnzwtqatatjnomqrmbv = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( zbnzwtqatatjnomqrmbv ) ; }
× fix_prediction_before: { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] fileData = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( fileData ) ; sCore = new edu.berkeley.cs.succinct.buffers.SuccinctBuffer ( fileData , 3 ) ; }
× fix_prediction_after: { super . setUp () ; java.io.File inputFile = new java.io.File ( testFileRaw ) ; byte [] zbnzwtqatatjnomqrmbv = new byte [ ( ( int ) ( inputFile . length () ) ) ] ; java.io.DataInputStream dis = new java.io.DataInputStream ( new java.io.FileInputStream ( inputFile ) ) ; dis . readFully ( zbnzwtqatatjnomqrmbv ) ; sCore = new edu.berkeley.cs.succinct.buffers.SuccinctBuffer ( zbnzwtqatatjnomqrmbv , 3 ) ; }

line_index: 311
bug_before_refactoring: public void markPhaseTable2 () { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int phase = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( phase , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } } <s> public void markPhaseTable2 () { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int phase = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( phase , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } } <s> MCRecipe bug fix
bug_after_refactoring: public void markPhaseTable2 () { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int ubbheakvznaeyohfitii = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( ubbheakvznaeyohfitii , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } } <s> public void markPhaseTable2 () { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int ubbheakvznaeyohfitii = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( ubbheakvznaeyohfitii , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } } <s> MCRecipe bug fix
fix_before_refactoring: private void markPhaseTable2 () { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int phase = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( phase , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } }
fix_after_refactoring: private void markPhaseTable2 () { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int ubbheakvznaeyohfitii = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( ubbheakvznaeyohfitii , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } }
× fix_prediction_before: private void markPhaseTable2 () { if ( ( mCRecipe.jTableSequnece1 ) != null ) { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int phase = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnce1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( phase , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce2 ) ; } } }
× fix_prediction_after: private void markPhaseTable2 () { if ( ( mCRecipe.jTableSequnce1 ) != null ) { java.lang.String command = forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnece1 , "Command Name" ) ; if ( command == null ) { return; } if ( command . equals ( "ADD PHASE" ) ) { int ubbheakvznaeyohfitii = ( ( int ) ( java.lang.Double . parseDouble ( forall.HelpA . getValueSelectedRow ( mCRecipe.jTableSequnce1 , "Cmd Parameter" ) ) ) ) ; java.util.LinkedList < java.lang.Integer > list = getRowsWithGivenPhase ( ubbheakvznaeyohfitii , mCRecipe.jTableSequnce2 ) ; paint_selected_rows_a ( list , mCRecipe.jTableSequnce2 , java.awt.Color.LIGHT_GRAY ) ; } else { unpaintAllRows_a ( mCRecipe.jTableSequnce

line_index: 312
bug_before_refactoring: { boolean horizontal = ( checkWinHorizontal ( xTurn , column ) ) >= 4 ; boolean vertical = ( checkWinVertical ( xTurn , column ) ) >= 4 ; boolean diagonal = ( checkWinDiagonal ( xTurn , column ) ) >= 4 ; return ( horizontal || vertical ) || diagonal ; } <s> public boolean checkWin ( boolean xTurn , int column ) { boolean horizontal = ( checkWinHorizontal ( xTurn , column ) ) >= 4 ; boolean vertical = ( checkWinVertical ( xTurn , column ) ) >= 4 ; boolean diagonal = ( checkWinDiagonal ( xTurn , column ) ) >= 4 ; return ( horizontal || vertical ) || diagonal ; } <s> BugFixes for AI
bug_after_refactoring: { boolean cedtwaniskutzikxmpyw = ( checkWinHorizontal ( xTurn , column ) ) >= 4 ; boolean wefsggtpklbwttbcrxff = ( checkWinVertical ( xTurn , column ) ) >= 4 ; boolean qcmhekjffbdabzznygtf = ( checkWinDiagonal ( xTurn , column ) ) >= 4 ; return ( cedtwaniskutzikxmpyw || wefsggtpklbwttbcrxff ) || qcmhekjffbdabzznygtf ; } <s> public boolean checkWin ( boolean xTurn , int column ) { boolean cedtwaniskutzikxmpyw = ( checkWinHorizontal ( xTurn , column ) ) >= 4 ; boolean wefsggtpklbwttbcrxff = ( checkWinVertical ( xTurn , column ) ) >= 4 ; boolean qcmhekjffbdabzznygtf = ( checkWinDiagonal ( xTurn , column ) ) >= 4 ; return ( cedtwaniskutzikxmpyw || wefsggtpklbwttbcrxff ) || qcmhekjffbdabzznygtf ; } <s> BugFixes for AI
fix_before_refactoring: { boolean horizontal = ( checkWinHorizontal ( xTurn , column ) ) > 4 ; boolean vertical = ( checkWinVertical ( xTurn , column ) ) > 4 ; boolean diagonal = ( checkWinDiagonal ( xTurn , column ) ) > 4 ; return ( horizontal || vertical ) || diagonal ; }
fix_after_refactoring: { boolean cedtwaniskutzikxmpyw = ( checkWinHorizontal ( xTurn , column ) ) > 4 ; boolean wefsggtpklbwttbcrxff = ( checkWinVertical ( xTurn , column ) ) > 4 ; boolean qcmhekjffbdabzznygtf = ( checkWinDiagonal ( xTurn , column ) ) > 4 ; return ( cedtwaniskutzikxmpyw || wefsggtpklbwttbcrxff ) || qcmhekjffbdabzznygtf ; }
× fix_prediction_before: { boolean horizontal = ( checkWinHorizontal ( xTurn , column ) ) >= 4 ; boolean vertical = ( checkWinVertical ( xTurn , column ) ) >= 4 ; boolean diagonal = ( checkWinDiagonal ( xTurn , column ) ) >= 4 ; return ( horizontal || vertical ) || diagonal ; }
× fix_prediction_after: { boolean cedtwaniskutzikxmpyw = ( checkWinHorizontal ( xTurn , column ) ) >= 4 ; boolean wefsggtpklbwttbcrxff = ( checkWinVertical ( xTurn , column ) ) >= 4 ; boolean qcmhekjffbdabzznygtf = ( checkWinDiagonal ( xTurn , column ) ) >= 4 ; return ( cedtwaniskutzikxmpyw || wefsggtpklbwttbcrxff ) || qcmhekjffbdabzznygtf ; }

line_index: 313
bug_before_refactoring: { int bits = 4 ; int [] ids = new int [] { 6 , 9 } ; int firstId = 3 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( ids.length ) ; for ( int id : ids ) { e . add ( id ) ; } java.util.Collections . sort ( e ) ; ChordNetwork net = new ChordNetwork ( bits , firstId ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; } <s> public static void main ( java.lang.String [] args ) { int bits = 4 ; int [] ids = new int [] { 6 , 9 } ; int firstId = 3 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( ids.length ) ; for ( int id : ids ) { e . add ( id ) ; } java.util.Collections . sort ( e ) ; ChordNetwork net = new ChordNetwork ( bits , firstId ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; } <s> fixed and debugged adding nodes
bug_after_refactoring: { int mkjfojmbokbmxlkbjeoj = 4 ; int [] rnyryfylzknthkvqfjlp = new int [] { 6 , 9 } ; int eafdicyfzspzgeuvdawy = 3 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( rnyryfylzknthkvqfjlp.length ) ; for ( int id : rnyryfylzknthkvqfjlp ) { e . add ( id ) ; } java.util.Collections . sort ( e ) ; ChordNetwork net = new ChordNetwork ( mkjfojmbokbmxlkbjeoj , eafdicyfzspzgeuvdawy ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; } <s> public static void main ( java.lang.String [] args ) { int mkjfojmbokbmxlkbjeoj = 4 ; int [] rnyryfylzknthkvqfjlp = new int [] { 6 , 9 } ; int eafdicyfzspzgeuvdawy = 3 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( rnyryfylzknthkvqfjlp.length ) ; for ( int id : rnyryfylzknthkvqfjlp ) { e . add ( id ) ; } java.util.Collections . sort ( e ) ; ChordNetwork net = new ChordNetwork ( mkjfojmbokbmxlkbjeoj , eafdicyfzspzgeuvdawy ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; } <s> fixed and debugged adding nodes
fix_before_refactoring: { int bits = 3 ; int [] ids = new int [] { 3 , 6 , 1 } ; int firstId = 0 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( ids.length ) ; for ( int id : ids ) { e . add ( id ) ; } ChordNetwork net = new ChordNetwork ( bits , firstId ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; }
fix_after_refactoring: { int mkjfojmbokbmxlkbjeoj = 3 ; int [] rnyryfylzknthkvqfjlp = new int [] { 3 , 6 , 1 } ; int eafdicyfzspzgeuvdawy = 0 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( rnyryfylzknthkvqfjlp.length ) ; for ( int id : rnyryfylzknthkvqfjlp ) { e . add ( id ) ; } ChordNetwork net = new ChordNetwork ( mkjfojmbokbmxlkbjeoj , eafdicyfzspzgeuvdawy ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; }
× fix_prediction_before: { int bits = 4 ; int [] ids = new int [] { 6 , 9 } ; int firstId = 3 ; java.util.Collections . sort ( e ) ; ChordNetwork net = new ChordNetwork ( bits , firstId ) ; java.lang.System.out . println ( net ) ; }
× fix_prediction_after: { int mkjfojmbokbmxlkbjeoj = 4 ; int [] rnyryfylzknthkvqfjlp = new int [] { 6 , 9 } ; int eafdicyfzspzgeuvdawy = 3 ; java.util.ArrayList < java.lang.Integer > e = new java.util.ArrayList <> ( rnyryfylzknthkvqfjlp ) ; for ( int id : rnyryfylzknthkvqfjlp ) { e . add ( id ) ; } java.util.Collections . sort ( e ) ; ChordNetwork net = new ChordNetwork ( mkjfojmbokbmxlkbjeoj , eafdicyfzgeuvdawy ) ; net . addNodes ( e ) ; java.lang.System.out . println ( net ) ; }

line_index: 314
bug_before_refactoring: { boolean update = alwaysRedraw ; if ( bracketsPairsTouched ) { update |= updateSurroundingPairsToPaint ( _caretOffset ) ; update |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) update |= updateSingleBrackets () ; if ( hintsTouched ) update |= updateHints () ; if ( update ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } } <s> private void rebuild ( boolean bracketsPairsTouched , boolean singleBracketsTouched , boolean hintsTouched , boolean alwaysRedraw ) { boolean update = alwaysRedraw ; if ( bracketsPairsTouched ) { update |= updateSurroundingPairsToPaint ( _caretOffset ) ; update |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) update |= updateSingleBrackets () ; if ( hintsTouched ) update |= updateHints () ; if ( update ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } } <s> Fixed some issues
bug_after_refactoring: { boolean ftyiyvbdtcarvaofwpur = alwaysRedraw ; if ( bracketsPairsTouched ) { ftyiyvbdtcarvaofwpur |= updateSurroundingPairsToPaint ( _caretOffset ) ; ftyiyvbdtcarvaofwpur |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) ftyiyvbdtcarvaofwpur |= updateSingleBrackets () ; if ( hintsTouched ) ftyiyvbdtcarvaofwpur |= updateHints () ; if ( ftyiyvbdtcarvaofwpur ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } } <s> private void rebuild ( boolean bracketsPairsTouched , boolean singleBracketsTouched , boolean hintsTouched , boolean alwaysRedraw ) { boolean ftyiyvbdtcarvaofwpur = alwaysRedraw ; if ( bracketsPairsTouched ) { ftyiyvbdtcarvaofwpur |= updateSurroundingPairsToPaint ( _caretOffset ) ; ftyiyvbdtcarvaofwpur |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) ftyiyvbdtcarvaofwpur |= updateSingleBrackets () ; if ( hintsTouched ) ftyiyvbdtcarvaofwpur |= updateHints () ; if ( ftyiyvbdtcarvaofwpur ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } } <s> Fixed some issues
fix_before_refactoring: { boolean update = alwaysRedraw ; if ( bracketsPairsTouched ) { update |= updateSurroundingPairsToPaint ( _caretOffset ) ; update |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) update |= updateSingleBrackets () ; update |= updateHints () ; if ( update ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } }
fix_after_refactoring: { boolean ftyiyvbdtcarvaofwpur = alwaysRedraw ; if ( bracketsPairsTouched ) { ftyiyvbdtcarvaofwpur |= updateSurroundingPairsToPaint ( _caretOffset ) ; ftyiyvbdtcarvaofwpur |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) ftyiyvbdtcarvaofwpur |= updateSingleBrackets () ; ftyiyvbdtcarvaofwpur |= updateHints () ; if ( ftyiyvbdtcarvaofwpur ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } }
× fix_prediction_before: { boolean update = alwaysRedraw ; if (acketsPairsTouched ) { update |= updateSurroundingPairsToPaint ( _caretOffset ) ; update |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) update |= updateSingleBrackets () ; if ( hintsTouched ) update |= updateHints () ; if ( update ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } }
× fix_prediction_after: { boolean ftyiyvbdtcarvaofwpur = alwaysRedraw ; if (acketsPairsTouched ) { ftyiyvbdtcarvaofwpur |= updateSurroundingPairsToPaint ( _caretOffset ) ; ftyiyvbdtcarvaofwpur |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) ftyiyvbdtcarvaofwpur |= updateSingleBrackets () ; if ( hintsTouched ) ftyiyvbdtcarvaofwpur |= updateHints () ; if ( ftyiyvbdtcarvaofwpur ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } }

line_index: 315
bug_before_refactoring: { this . wahrscheinlichkeit () ; if ( ( this . wahrscheinlichkeit () ) == true ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( schaden * 2 ) ) ; } else schaden = schaden / 2 ; } <s> @ java.lang.Override public void angreifen ( pkg.Charakter gegner ) { int schaden = random . getRandom ( 15 , 25 ) ; if ( ( this . getSpezialfaehigkeit () ) == true ) { this . wahrscheinlichkeit () ; if ( ( this . wahrscheinlichkeit () ) == true ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( schaden * 2 ) ) ; } else schaden = schaden / 2 ; } super . angreifen ( gegner ) ; gegner . schadenNehmen ( schaden ) ; } <s> Small bug fixes and code optimization
bug_after_refactoring: { this . wahrscheinlichkeit () ; if ( ( this . wahrscheinlichkeit () ) == true ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( dvjrdgaizaovbfoiwbys * 2 ) ) ; } else dvjrdgaizaovbfoiwbys = dvjrdgaizaovbfoiwbys / 2 ; } <s> @ java.lang.Override public void angreifen ( pkg.Charakter gegner ) { int schaden = random . getRandom ( 15 , 25 ) ; if ( ( this . getSpezialfaehigkeit () ) == true ) { this . wahrscheinlichkeit () ; if ( ( this . wahrscheinlichkeit () ) == true ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( dvjrdgaizaovbfoiwbys * 2 ) ) ; } else dvjrdgaizaovbfoiwbys = dvjrdgaizaovbfoiwbys / 2 ; } super . angreifen ( gegner ) ; gegner . schadenNehmen ( schaden ) ; } <s> Small bug fixes and code optimization
fix_before_refactoring: { if ( this . wahrscheinlichkeit () ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( schaden * 2 ) ) ; } else schaden = schaden / 2 ; }
fix_after_refactoring: { if ( this . wahrscheinlichkeit () ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( dvjrdgaizaovbfoiwbys * 2 ) ) ; } else dvjrdgaizaovbfoiwbys = dvjrdgaizaovbfoiwbys / 2 ; }
× fix_prediction_before: { if ( ( this . wahrscheinlichkeit () ) == true ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( schaden * 2 ) ) ; } else schaden = schaden / 2 ; }
× fix_prediction_after: { if ( ( this . wahrscheinlichkeit () ) == true ) { java.lang.System.out . println ( "Erfolgreich!" ) ; this . schadenNehmen ( ( dvjrdgaizaovbfoiwbys * 2 ) ) ; } else dvjrdgaizaovbfoiwbys = dvjrdgaizaovbfoiwbys / 2 ; }

line_index: 316
bug_before_refactoring: if ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) { float scalePercentage = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , scalePercentage , 1.0F ) ; } } <s> private void scaleWallsY ( float multiplier ) { com.badlogic.gdx.math.collision.BoundingBox bounds = new com.badlogic.gdx.math.collision.BoundingBox () ; backWall . calculateBoundingBox ( bounds ) . mul ( backWall.transform ) ; if ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) { float scalePercentage = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , scalePercentage , 1.0F ) ; } } } <s> added minimum size on computation box. fix bug on room setup when reached minimum dimension.
bug_after_refactoring: if ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) { float plfrkdgldbxudtletfws = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , plfrkdgldbxudtletfws , 1.0F ) ; } } <s> private void scaleWallsY ( float multiplier ) { com.badlogic.gdx.math.collision.BoundingBox bounds = new com.badlogic.gdx.math.collision.BoundingBox () ; backWall . calculateBoundingBox ( bounds ) . mul ( backWall.transform ) ; if ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) { float plfrkdgldbxudtletfws = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , plfrkdgldbxudtletfws , 1.0F ) ; } } } <s> added minimum size on computation box. fix bug on room setup when reached minimum dimension.
fix_before_refactoring: if ( ( multiplier > 0 ) || ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) ) { float scalePercentage = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , scalePercentage , 1.0F ) ; } }
fix_after_refactoring: if ( ( multiplier > 0 ) || ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) ) { float plfrkdgldbxudtletfws = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , plfrkdgldbxudtletfws , 1.0F ) ; } }
× fix_prediction_before: if ( ( bounds . getHeight () ) > ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) { float scalePercentage = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , scalePercentage , 1.0F ) ; } }
× fix_prediction_after: if ( ( bounds . getHeight () ) >= ( com.ggwp.interiordesigner.object.Room.MINIMUM_DIMENSION ) ) { float plfrkdgldbxudtletfws = 1.0F + ( ( ( com.ggwp.interiordesigner.object.Room.SCALE_AMOUNT ) / ( bounds . getHeight () ) ) * multiplier ) ; for ( com.ggwp.interiordesigner.object.Wall wall : getWalls () ) { wall.transform . scale ( 1.0F , plfrkdgldbxudtletfws , 1.0F ) ; } }

line_index: 317
bug_before_refactoring: { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; boolean sunk = false ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "sunk" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; } <s> public java.lang.String mark ( int pos ) { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; boolean sunk = false ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "sunk" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; } <s> More major fixes  Fixed AI ship placement algorithm Fixed ship placement error checking Improved board visuals Improved code readability Removed unused imports
bug_after_refactoring: { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; boolean wkrvyijpdzterrnxvsto = false ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "wkrvyijpdzterrnxvsto" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; } <s> public java.lang.String mark ( int pos ) { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; boolean wkrvyijpdzterrnxvsto = false ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "wkrvyijpdzterrnxvsto" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; } <s> More major fixes  Fixed AI ship placement algorithm Fixed ship placement error checking Improved board visuals Improved code readability Removed unused imports
fix_before_refactoring: { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "sunk" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; }
fix_after_refactoring: { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "wkrvyijpdzterrnxvsto" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; }
× fix_prediction_before: { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; boolean sunk = false ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "sunk" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; }
× fix_prediction_after: { if ( ( yourField . at ( pos ) ) == '~' ) { return "missed!\n" ; } java.lang.String hitstr = "" ; boolean wkrvyijpdzterrnxvsto = false ; hitstr = yourField . addHit ( pos ) ; if ( hitstr . contains ( "wkrvyijpdzterrnxvsto" ) ) ( this . shipsDestroyed ) ++ ; return hitstr ; }

line_index: 318
bug_before_refactoring: if ( ( contact . getNumber () ) == tel ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } else if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } <s> private int addNumber () { java.lang.System.out . print ( "Enter contact phone number: " ) ; int tel ; while ( true ) { tel = validateNumber () ; Contact contact = getbyNumber ( tel ) ; if ( ( contact . getNumber () ) == tel ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } else if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } break; } return tel ; } <s> Solved the null pointer exception problem and started implementing the last two methods
bug_after_refactoring: if ( ( contact . getNumber () ) == tzsdmyptexevmtemdihd ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } else if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } <s> private int addNumber () { java.lang.System.out . print ( "Enter contact phone number: " ) ; int tel ; while ( true ) { tel = validateNumber () ; Contact contact = getbyNumber ( tel ) ; if ( ( contact . getNumber () ) == tzsdmyptexevmtemdihd ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } else if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } break; } return tel ; } <s> Solved the null pointer exception problem and started implementing the last two methods
fix_before_refactoring: if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } else if ( ( contact . getNumber () ) == tel ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; }
fix_after_refactoring: if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } else if ( ( contact . getNumber () ) == tzsdmyptexevmtemdihd ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; }
× fix_prediction_before: if ( tel . getNumber () . equals ( tel ) ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } else if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; }
× fix_prediction_after: if ( contact . getNumber () . equals ( tzsdmyptexevmtemdihd ) ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } else if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; }

line_index: 319
bug_before_refactoring: { final java.util.Calendar c = java.util.Calendar . getInstance () ; int hour = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int minute = c . get ( java.util.Calendar.MINUTE ) ; hourOfDay = "" ; return new android.app.TimePickerDialog ( getActivity () , this , hour , minute , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; } <s> @ java.lang.Override public android.app.Dialog onCreateDialog ( android.os.Bundle savedInstanceState ) { final java.util.Calendar c = java.util.Calendar . getInstance () ; int hour = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int minute = c . get ( java.util.Calendar.MINUTE ) ; hourOfDay = "" ; return new android.app.TimePickerDialog ( getActivity () , this , hour , minute , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; } <s> fixing calendar bugs
bug_after_refactoring: { final java.util.Calendar c = java.util.Calendar . getInstance () ; int umqnblhryqddkuaqnnfv = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int kkwdbxougybzdxnouzgo = c . get ( java.util.Calendar.MINUTE ) ; hourOfDay = "" ; return new android.app.TimePickerDialog ( getActivity () , this , umqnblhryqddkuaqnnfv , kkwdbxougybzdxnouzgo , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; } <s> @ java.lang.Override public android.app.Dialog onCreateDialog ( android.os.Bundle savedInstanceState ) { final java.util.Calendar c = java.util.Calendar . getInstance () ; int umqnblhryqddkuaqnnfv = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int kkwdbxougybzdxnouzgo = c . get ( java.util.Calendar.MINUTE ) ; hourOfDay = "" ; return new android.app.TimePickerDialog ( getActivity () , this , umqnblhryqddkuaqnnfv , kkwdbxougybzdxnouzgo , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; } <s> fixing calendar bugs
fix_before_refactoring: { final java.util.Calendar c = java.util.Calendar . getInstance () ; int hour = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int minute = c . get ( java.util.Calendar.MINUTE ) ; return new android.app.TimePickerDialog ( getActivity () , this , hour , minute , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; }
fix_after_refactoring: { final java.util.Calendar c = java.util.Calendar . getInstance () ; int umqnblhryqddkuaqnnfv = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int kkwdbxougybzdxnouzgo = c . get ( java.util.Calendar.MINUTE ) ; return new android.app.TimePickerDialog ( getActivity () , this , umqnblhryqddkuaqnnfv , kkwdbxougybzdxnouzgo , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; }
× fix_prediction_before: { final java.util.Calendar c = java.util.Calendar . getInstance () ; int hour = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int minute = c . get ( java.util.Calendar.MINUTE ) ; hourOfDay = "" ; return new android.app.TimePickerDialog ( getActivity () , this , hour , minute , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; }
× fix_prediction_after: { final java.util.Calendar c = java.util.Calendar . getInstance () ; int umqnblhryqddkuaqnnfv = c . get ( java.util.Calendar.HOUR_OF_DAY ) ; int kkwdbxougybzdxnouzgo = c . get ( java.util.Calendar.MINUTE ) ; hourOfDay = "" ; return new android.app.TimePickerDialog ( getActivity () , this , umqnblhryqddkuaqnnfv , kkwdbxougybzdxnouzgo , android.text.format.DateFormat . is24HourFormat ( getActivity () ) ) ; }

line_index: 320
bug_before_refactoring: { for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int tokenIndex = suffix_array [ i ] ; lcp_interval_array [ tokenIndex ] = interval ; } } <s> private eu.interedition.collatex.dekker.LCP_Interval [] construct_LCP_interval_array () { eu.interedition.collatex.dekker.LCP_Interval [] lcp_interval_array = new eu.interedition.collatex.dekker.LCP_Interval [ token_array . size () ] ; for ( eu.interedition.collatex.dekker.LCP_Interval interval : lcp_intervals ) { for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int tokenIndex = suffix_array [ i ] ; lcp_interval_array [ tokenIndex ] = interval ; } } return lcp_interval_array ; } <s> Two bug fixes: 1. deal with tokens that do not have a LCP interval associated with them. 2. The wrong next vertex was set on the decision nodes because of a +1 error.
bug_after_refactoring: { for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int fdwrxznuzfzhdlbpddjf = suffix_array [ i ] ; lcp_interval_array [ fdwrxznuzfzhdlbpddjf ] = interval ; } } <s> private eu.interedition.collatex.dekker.LCP_Interval [] construct_LCP_interval_array () { eu.interedition.collatex.dekker.LCP_Interval [] lcp_interval_array = new eu.interedition.collatex.dekker.LCP_Interval [ token_array . size () ] ; for ( eu.interedition.collatex.dekker.LCP_Interval interval : lcp_intervals ) { for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int fdwrxznuzfzhdlbpddjf = suffix_array [ i ] ; lcp_interval_array [ fdwrxznuzfzhdlbpddjf ] = interval ; } } return lcp_interval_array ; } <s> Two bug fixes: 1. deal with tokens that do not have a LCP interval associated with them. 2. The wrong next vertex was set on the decision nodes because of a +1 error.
fix_before_refactoring: { if ( ( interval.length ) == 0 ) { continue; } for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int tokenIndex = suffix_array [ i ] ; lcp_interval_array [ tokenIndex ] = interval ; } }
fix_after_refactoring: { if ( ( interval.length ) == 0 ) { continue; } for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int fdwrxznuzfzhdlbpddjf = suffix_array [ i ] ; lcp_interval_array [ fdwrxznuzfzhdlbpddjf ] = interval ; } }
× fix_prediction_before: { for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int tokenIndex = suffix_array [ i ] ; lcp_interval_array [ tokenIndex ] = interval ; } }
× fix_prediction_after: { for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int fdwrxznuzfzhdlbpddjf = suffix_array [ i ] ; lcp_interval_array [ fdwrxznuzfzhdlbpddjf ] = interval ; } }

line_index: 321
bug_before_refactoring: { int selectedIdentity = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> public static int getSelectedIdentityId () { int selectedIdentity = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> Meine Bewerbungen Bugfixes
bug_after_refactoring: { int ucwmvmmurjekrmywjxlk = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> public static int getSelectedIdentityId () { int ucwmvmmurjekrmywjxlk = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; } <s> Meine Bewerbungen Bugfixes
fix_before_refactoring: { if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; }
fix_after_refactoring: { if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ; } return 0 ; }
× fix_prediction_before: { int selectedIdentity = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.unternehmen . getId () ;
× fix_prediction_after: { int ucwmvmmurjektSS17wjxlk = de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ; if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 0 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.person . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 1 ) { return de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.team . getId () ; } else if ( ( de.hdm.itProjektSS17.client.gui.IdentityMarketChoice.ownOrgUnits . getSelectedIndex () ) == 2 ) { return de.hdm.itProjektSS17.client.gui.Identity

line_index: 322
bug_before_refactoring: { gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean a = battleEnd () ; if ( a == true ) { onPlayerWin () ; } if ( a == false ) { onPlayerLose () ; GameOn = false ; } } } <s> public void RunGame () { while ( true ) { gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean a = battleEnd () ; if ( a == true ) { onPlayerWin () ; } if ( a == false ) { onPlayerLose () ; GameOn = false ; } } } } <s> Fix + Cleanup  Cleaned some more this. statements Fixed an issue where GameOn stayed false and game looped and ended continually.
bug_after_refactoring: { gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean omdzmgmscgvcyqnwexzg = battleEnd () ; if ( omdzmgmscgvcyqnwexzg == true ) { onPlayerWin () ; } if ( omdzmgmscgvcyqnwexzg == false ) { onPlayerLose () ; GameOn = false ; } } } <s> public void RunGame () { while ( true ) { gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean omdzmgmscgvcyqnwexzg = battleEnd () ; if ( omdzmgmscgvcyqnwexzg == true ) { onPlayerWin () ; } if ( omdzmgmscgvcyqnwexzg == false ) { onPlayerLose () ; GameOn = false ; } } } } <s> Fix + Cleanup  Cleaned some more this. statements Fixed an issue where GameOn stayed false and game looped and ended continually.
fix_before_refactoring: { GameOn = true ; gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean a = battleEnd () ; if ( a == true ) { onPlayerWin () ; } if ( a == false ) { onPlayerLose () ; GameOn = false ; } } }
fix_after_refactoring: { GameOn = true ; gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean omdzmgmscgvcyqnwexzg = battleEnd () ; if ( omdzmgmscgvcyqnwexzg == true ) { onPlayerWin () ; } if ( omdzmgmscgvcyqnwexzg == false ) { onPlayerLose () ; GameOn = false ; } } }
× fix_prediction_before: { gameStart () ; battleStart () ; boolean a = battleEnd () ; if ( a == true ) { onPlayerWin () ; } if ( a == false ) { onPlayerLose () ; GameOn = false ; } }
× fix_prediction_after: { gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean omdzmgmscgvcyqnwexzg = battleEnd () ; if ( omdzmgmscgvcyqnwexzg == true ) { onPlayerWin () ; } if ( omdzmgmscgvcyqnwexzg == false ) { onPlayerLose () ; GameOn = false ; } } }

line_index: 323
bug_before_refactoring: { int i = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( i ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.FileWriter ( ( path + "edb.pl" ) ) , true ) ; prologWriter . println ( buf ) ; prologWriter . flush () ; prologWriter . close () ; } <s> public void generateExtensionalDB ( java.lang.String path ) throws java.lang.Exception { int i = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( i ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.FileWriter ( ( path + "edb.pl" ) ) , true ) ; prologWriter . println ( buf ) ; prologWriter . flush () ; prologWriter . close () ; } <s> Fixing bugs and automizing
bug_after_refactoring: { int bxvkgcikcbpauutjklew = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( bxvkgcikcbpauutjklew ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.FileWriter ( ( path + "edb.pl" ) ) , true ) ; prologWriter . println ( buf ) ; prologWriter . flush () ; prologWriter . close () ; } <s> public void generateExtensionalDB ( java.lang.String path ) throws java.lang.Exception { int bxvkgcikcbpauutjklew = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( bxvkgcikcbpauutjklew ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.FileWriter ( ( path + "edb.pl" ) ) , true ) ; prologWriter . println ( buf ) ; prologWriter . flush () ; prologWriter . close () ; } <s> Fixing bugs and automizing
fix_before_refactoring: { int i = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( i ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.File ( ( path + "edb.pl" ) ) ) ; prologWriter . println ( buf ) ; prologWriter . close () ; }
fix_after_refactoring: { int bxvkgcikcbpauutjklew = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( bxvkgcikcbpauutjklew ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.File ( ( path + "edb.pl" ) ) ) ; prologWriter . println ( buf ) ; prologWriter . close () ; }
× fix_prediction_before: { int i = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( i ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.FileWriter ( ( path + "edb.pl" ) ) , true ) ; prologWriter . println ( buf ) ; prologWriter . flush () ; prologWriter . close () ; }
× fix_prediction_after: { int bxvkgcikcbpauutjklew = 1 ; java.lang.StringBuilder buf = new java.lang.StringBuilder () ; for ( java.io.File file : files ) { buf . append ( factsFromFiles ( file , ( bxvkgcikcbpauutjklew ++ ) ) ) ; } java.io.PrintWriter prologWriter = new java.io.PrintWriter ( new java.io.FileWriter ( ( path + "edb.pl" ) ) , true ) ; prologWriter . println ( buf ) ; prologWriter . flush () ; prologWriter . close () ; }

line_index: 324
bug_before_refactoring: { boolean result ; try { org.diachron.detection.utils.MCDUtils mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; mcd . terminate () ; } catch ( java.lang.Exception ex ) { return ex ; } return null ; } <s> private java.lang.Exception updateChangesOntologies ( java.lang.String datasetUri , java.lang.String ccName ) { boolean result ; try { org.diachron.detection.utils.MCDUtils mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; mcd . terminate () ; } catch ( java.lang.Exception ex ) { return ex ; } return null ; } <s> Merge pull request #5 from olgavrou/master  Fixed issue with connections not being correctly closed  and therefor…
bug_after_refactoring: { boolean xvzjtqhpnbzpmcudskkj ; try { org.diachron.detection.utils.MCDUtils mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; mcd . terminate () ; } catch ( java.lang.Exception ex ) { return ex ; } return null ; } <s> private java.lang.Exception updateChangesOntologies ( java.lang.String datasetUri , java.lang.String ccName ) { boolean xvzjtqhpnbzpmcudskkj ; try { org.diachron.detection.utils.MCDUtils mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; mcd . terminate () ; } catch ( java.lang.Exception ex ) { return ex ; } return null ; } <s> Merge pull request #5 from olgavrou/master  Fixed issue with connections not being correctly closed  and therefor…
fix_before_refactoring: { boolean result ; org.diachron.detection.utils.MCDUtils mcd = null ; try { mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; } catch ( java.lang.Exception ex ) { return ex ; } finally { if ( mcd != null ) { mcd . terminate () ; } } return null ; }
fix_after_refactoring: { boolean xvzjtqhpnbzpmcudskkj ; org.diachron.detection.utils.MCDUtils mcd = null ; try { mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; } catch ( java.lang.Exception ex ) { return ex ; } finally { if ( mcd != null ) { mcd . terminate () ; } } return null ; }
× fix_prediction_before: { try { org.diachron.detection.utils.MCDUtils mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; mcd . terminate () ; } catch ( java.lang.Exception ex ) { return ex ; } return null ; }
× fix_prediction_after: { boolean xvzjtqhpnbzpmcudskkj ; try { org.diachron.detection.utils.MCDUtils mcd = new org.diachron.detection.utils.MCDUtils ( propertiesManager . getProperties () , datasetUri , true ) ; mcd . deleteCCWithLessPriority ( ccName ) ; mcd . detectDatasets ( true ) ; mcd . terminate () ; } catch ( java.lang.Exception ex ) { return ex ; } return null ; }

line_index: 325
bug_before_refactoring: { result = match ( nodes , org ) ; } <s> private boolean match ( java.util.Map < java.lang.Integer , org.naturn.java8.pattern.PatternDemo.Node > nodes , java.util.List < java.lang.String [] > orgs ) { boolean result = false ; for ( java.lang.String [] org : orgs ) { result = match ( nodes , org ) ; } return result ; } <s> fixed pattern demo bug.
bug_after_refactoring: { wfkvwhjgcgmxcyhyqvsm = match ( nodes , org ) ; } <s> private boolean match ( java.util.Map < java.lang.Integer , org.naturn.java8.pattern.PatternDemo.Node > nodes , java.util.List < java.lang.String [] > orgs ) { boolean result = false ; for ( java.lang.String [] org : orgs ) { wfkvwhjgcgmxcyhyqvsm = match ( nodes , org ) ; } return result ; } <s> fixed pattern demo bug.
fix_before_refactoring: { result = match ( nodes , org ) ; if ( result ) { break; } }
fix_after_refactoring: { wfkvwhjgcgmxcyhyqvsm = match ( nodes , org ) ; if ( wfkvwhjgcgmxcyhyqvsm ) { break; } }
× fix_prediction_before: { result = match ( nodes , org ) ; break; }
× fix_prediction_after: { wfkvwhjgcgmxcyhyqvsm = match ( nodes , org ) ; break; }

line_index: 327
bug_before_refactoring: public int hash ( V value ) { int hash = 0 ; switch ( hashFunction ) { case "additiveHash" : hash = additiveHash ( value ) ; break; case "rotationalHash" : hash = rotationalHash ( value ) ; break; default: java.lang.System.out . println ( "Error when setting hash function - given hash function not found." ) ; java.lang.System . exit ( 0 ) ; } return hash ; } <s> public int hash ( V value ) { int hash = 0 ; switch ( hashFunction ) { case "additiveHash" : hash = additiveHash ( value ) ; break; case "rotationalHash" : hash = rotationalHash ( value ) ; break; default: java.lang.System.out . println ( "Error when setting hash function - given hash function not found." ) ; java.lang.System . exit ( 0 ) ; } return hash ; } <s> Errors and Hash Selection  Fixed a typo in HashTable.size() which would cause a StackOverFlowError. Changed method of hash function selection in constructor to int rather than a String (0 is additive  1 is rotational) Added more JavaDoc placeholders Added a print statement in the demo class to test hash functions.
bug_after_refactoring: public int rqcdhagudaxyzrggwrly ( V value ) { int rqcdhagudaxyzrggwrly = 0 ; switch ( hashFunction ) { case "additiveHash" : rqcdhagudaxyzrggwrly = additiveHash ( value ) ; break; case "rotationalHash" : rqcdhagudaxyzrggwrly = rotationalHash ( value ) ; break; default: java.lang.System.out . println ( "Error when setting rqcdhagudaxyzrggwrly function - given rqcdhagudaxyzrggwrly function not found." ) ; java.lang.System . exit ( 0 ) ; } return rqcdhagudaxyzrggwrly ; } <s> public int rqcdhagudaxyzrggwrly ( V value ) { int rqcdhagudaxyzrggwrly = 0 ; switch ( hashFunction ) { case "additiveHash" : rqcdhagudaxyzrggwrly = additiveHash ( value ) ; break; case "rotationalHash" : rqcdhagudaxyzrggwrly = rotationalHash ( value ) ; break; default: java.lang.System.out . println ( "Error when setting rqcdhagudaxyzrggwrly function - given rqcdhagudaxyzrggwrly function not found." ) ; java.lang.System . exit ( 0 ) ; } return rqcdhagudaxyzrggwrly ; } <s> Errors and Hash Selection  Fixed a typo in HashTable.size() which would cause a StackOverFlowError. Changed method of hash function selection in constructor to int rather than a String (0 is additive  1 is rotational) Added more JavaDoc placeholders Added a print statement in the demo class to test hash functions.
fix_before_refactoring: public int hash ( String key ) { int hash = 0 ; switch ( hashFunction ) { case 0 : hash = additiveHash ( key ) ; break; case 1 : hash = rotationalHash ( key ) ; break; default: java.lang.System.out . println ( "Error when setting hash function - given hash function not found." ) ; java.lang.System . exit ( 0 ) ; } return hash ; }
fix_after_refactoring: public int rqcdhagudaxyzrggwrly ( String key ) { int rqcdhagudaxyzrggwrly = 0 ; switch ( hashFunction ) { case 0 : rqcdhagudaxyzrggwrly = additiveHash ( key ) ; break; case 1 : rqcdhagudaxyzrggwrly = rotationalHash ( key ) ; break; default: java.lang.System.out . println ( "Error when setting rqcdhagudaxyzrggwrly function - given rqcdhagudaxyzrggwrly function not found." ) ; java.lang.System . exit ( 0 ) ; } return rqcdhagudaxyzrggwrly ; }
× fix_prediction_before: public int hash ( V value ) { int hash = 0 ; switch ( hashFunction ) { case "additiveHash" : hash = additiveHash ( value ) ; break; case "rotationalHash" : hash = rotationalHash ( value ) ; break; default: java.lang.System.out . println ( "Error when setting hash function - given hash function not found." ) ; java.lang.System . exit ( 0 ) ; } return hash ; }
× fix_prediction_after: public int rqcdhagudaxyzrggwrly ( V value ) { int rqcdhagudaxyzrggwrly = 0 ; switch ( hashFunction ) { case "additiveHash" : rqcdhagudaxyzrggwrly = additiveHash ( value ) ; break; case "rotationalHash" : rqcdhagudaxyzrggwrly = rotationalHash ( value ) ; break; default: java.lang.System.out . println ( "Error when setting rqcdhagudaxyzrggwrly function - given rqcdhagudaxyzrggwrly function not found." ) ; java.lang.System . exit ( 0 ) ; } return rqcdhagudaxyzrggwrly ; }

line_index: 328
bug_before_refactoring: if ( value > ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; } <s> public long getTimeBucketAndAdjustBoundaries ( long value ) { if ( value < ( start ) ) { return - 1 ; } long diffFromStart = value - ( fixedStart ) ; long key = diffFromStart / ( bucketSpanMillis ) ; if ( value > ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; } return key ; } <s> APEXMALHAR-2299 TimeBasedDedupOperator. Fixing edge case bug in time bucket assignment
bug_after_refactoring: if ( value > ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; } <s> public long getTimeBucketAndAdjustBoundaries ( long value ) { if ( value < ( start ) ) { return - 1 ; } long diffFromStart = value - ( fixedStart ) ; long key = diffFromStart / ( bucketSpanMillis ) ; if ( value > ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; } return key ; } <s> APEXMALHAR-2299 TimeBasedDedupOperator. Fixing edge case bug in time bucket assignment
fix_before_refactoring: if ( value >= ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; }
fix_after_refactoring: if ( value >= ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; }
× fix_prediction_before: if ( value > ( end ) ) { long diffInBuckets = ( value - ( end ) ) / ( bucketSpanMillis ) ; long move = ( diffInBuckets + 1 ) * ( bucketSpanMillis ) ; start += move ; end += move ; triggerPurge = true ; lowestPurgeableTimeBucket += diffInBuckets ; }
× fix_prediction_after: if ( value > ( end ) ) { long dvvtoubmibvlrqbxbjdy = ( value - ( end ) ) / ( bucketSpanMillis ) ; long ipkzscnpgfkwzdtnjbgs = ( dvvtoubmibvlrqbxbjdy + 1 ) * ( bucketSpanMillis ) ; start += ipkzscnpgfkwzdtnjbgs ; end += ipkzscnpgfkwzdtnjbgs ; triggerPurge = true ; lowestPurgeableTimeBucket += dvvtoubmibvlrqbxbjdy ; }

line_index: 329
bug_before_refactoring: { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; } <s> private static cs155.core.Color3D calculateDiffuse ( cs155.core.Point3D n , cs155.core.Color3D matColor , cs155.core.Color3D lightColor , cs155.core.Point3D lightVec ) { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; } <s> Fixed Kahlil's debug bug
bug_after_refactoring: { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; } <s> private static cs155.core.Color3D calculateDiffuse ( cs155.core.Point3D n , cs155.core.Color3D matColor , cs155.core.Color3D lightColor , cs155.core.Point3D lightVec ) { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; } <s> Fixed Kahlil's debug bug
fix_before_refactoring: { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; }
fix_after_refactoring: { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; }
× fix_prediction_before: { cs155.core.Color3D localDiffuse ; double diffuseIntensity = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( diffuseIntensity ) ; return localDiffuse ; }
× fix_prediction_after: { cs155.core.Color3D localDiffuse ; double skypzhsusqnrmdnmqjao = cs155.core.Light3D . diffuse ( lightVec , n ) ; matColor = Color3D.WHITE ; localDiffuse = matColor . times ( lightColor ) . scale ( skypzhsusqnrmdnmqjao ) ; return localDiffuse ; }

line_index: 330
bug_before_refactoring: if ( ( score1 ) < ( score2 ) ) s = score2 ; else s = score1 ; <s> public int overallScore () { int s ; if ( ( score1 ) < ( score2 ) ) s = score2 ; else s = score1 ; if ( s > ( score3 ) ) s = score3 ; s = ( ( ( score1 ) + ( score2 ) ) + ( score3 ) ) - s ; return s ; } <s> Completed test suite  fixed bugs  documented problems
bug_after_refactoring: if ( ( score1 ) < ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ; <s> public int overallScore () { int s ; if ( ( score1 ) < ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ; if ( s > ( score3 ) ) s = score3 ; s = ( ( ( score1 ) + ( score2 ) ) + ( score3 ) ) - s ; return s ; } <s> Completed test suite  fixed bugs  documented problems
fix_before_refactoring: if ( ( score1 ) > ( score2 ) ) s = score2 ; else s = score1 ;
fix_after_refactoring: if ( ( score1 ) > ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ;
× fix_prediction_before: if ( ( score1 ) < ( score2 ) ) s = score2 ; else s = score1 ;
× fix_prediction_after: if ( ( score1 ) < ( score2 ) ) wnjggvehnutefbupcddb = score2 ; else wnjggvehnutefbupcddb = score1 ;

line_index: 332
bug_before_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.support.v7.widget.Toolbar toolbar = ( ( android.support.v7.widget.Toolbar ) ( findViewById ( R.id.toolbar ) ) ) ; setSupportActionBar ( toolbar ) ; android.content.Intent dishInent = getIntent () ; int dish_id = dishInent . getIntExtra ( "dish_id" , 1 ) ; fetchDishFromServer ( dish_id ) ; getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ; } <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.support.v7.widget.Toolbar toolbar = ( ( android.support.v7.widget.Toolbar ) ( findViewById ( R.id.toolbar ) ) ) ; setSupportActionBar ( toolbar ) ; android.content.Intent dishInent = getIntent () ; int dish_id = dishInent . getIntExtra ( "dish_id" , 1 ) ; fetchDishFromServer ( dish_id ) ; getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ; } <s> Fix a bug
bug_after_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.support.v7.widget.Toolbar toolbar = ( ( android.support.v7.widget.Toolbar ) ( findViewById ( R.id.toolbar ) ) ) ; setSupportActionBar ( toolbar ) ; android.content.Intent dishInent = getIntent () ; int lcyrhdhhygzowbjvqgbc = dishInent . getIntExtra ( "lcyrhdhhygzowbjvqgbc" , 1 ) ; fetchDishFromServer ( lcyrhdhhygzowbjvqgbc ) ; getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ; } <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.support.v7.widget.Toolbar toolbar = ( ( android.support.v7.widget.Toolbar ) ( findViewById ( R.id.toolbar ) ) ) ; setSupportActionBar ( toolbar ) ; android.content.Intent dishInent = getIntent () ; int lcyrhdhhygzowbjvqgbc = dishInent . getIntExtra ( "lcyrhdhhygzowbjvqgbc" , 1 ) ; fetchDishFromServer ( lcyrhdhhygzowbjvqgbc ) ; getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ; } <s> Fix a bug
fix_before_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.support.v7.widget.Toolbar toolbar = ( ( android.support.v7.widget.Toolbar ) ( findViewById ( R.id.toolbar ) ) ) ; setSupportActionBar ( toolbar ) ; android.content.Intent dishInent = getIntent () ; int dish_id = dishInent . getIntExtra ( "dish_id" , 1 ) ; context = this ; fetchDishFromServer ( dish_id ) ; getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ; }
fix_after_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.support.v7.widget.Toolbar toolbar = ( ( android.support.v7.widget.Toolbar ) ( findViewById ( R.id.toolbar ) ) ) ; setSupportActionBar ( toolbar ) ; android.content.Intent dishInent = getIntent () ; int lcyrhdhhygzowbjvqgbc = dishInent . getIntExtra ( "lcyrhdhhygzowbjvqgbc" , 1 ) ; context = this ; fetchDishFromServer ( lcyrhdhhygzowbjvqgbc ) ; getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ; }
× fix_prediction_before: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.content.Intent dishInent = getIntent () ; int dish_id = dishInent . getIntExtra ( "dish_id" , 1 ) ; fetchDishFromServer ( dish_id ) ; }
× fix_prediction_after: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_dish_detail ) ; android.content.Intent dishInent = getIntent () ; int lcyrhdhhygzowbjvqgbc = dishInent . getIntExtra ( "lcyrhdhhygzowbjvqgbc" , 1 ) ; fetchDishFromServer ( lcyrhdhhygzowbjvqgbc ) ; }

line_index: 333
bug_before_refactoring: if ( ( ( nextEntry.numberOfSuccessors ) == 1 ) && notLastLetter ) { next . set ( idx , null ) ; } else { isLastLetter = false ; } <s> ru.spbau.mit.StringSetImpl.StringSetEntry removeEntry ( char letter , boolean notLastLetter ) { ( numberOfSuccessors ) -- ; int idx = getIndex ( letter ) ; ru.spbau.mit.StringSetImpl.StringSetEntry nextEntry = next . get ( idx ) ; if ( ( ( nextEntry.numberOfSuccessors ) == 1 ) && notLastLetter ) { next . set ( idx , null ) ; } else { isLastLetter = false ; } return nextEntry ; } <s> fixed remove bug
bug_after_refactoring: if ( ( ( nextEntry.numberOfSuccessors ) == 1 ) && notLastLetter ) { next . set ( mmspcddpusymyxydvqcn , null ) ; } else { isLastLetter = false ; } <s> ru.spbau.mit.StringSetImpl.StringSetEntry removeEntry ( char letter , boolean notLastLetter ) { ( numberOfSuccessors ) -- ; int idx = getIndex ( letter ) ; ru.spbau.mit.StringSetImpl.StringSetEntry nextEntry = next . get ( idx ) ; if ( ( ( nextEntry.numberOfSuccessors ) == 1 ) && notLastLetter ) { next . set ( mmspcddpusymyxydvqcn , null ) ; } else { isLastLetter = false ; } return nextEntry ; } <s> fixed remove bug
fix_before_refactoring: if ( ( ( nextEntry.numberOfSuccessors ) == 1 ) && notLastLetter ) { next . set ( idx , null ) ; }
fix_after_refactoring: if ( ( ( nextEntry.numberOfSuccessors ) == 1 ) && notLastLetter ) { next . set ( mmspcddpusymyxydvqcn , null ) ; }
× fix_prediction_before: if ( notLastLetter ) { next . set ( idx , null ) ; } else { isLastLetter = false ; }
× fix_prediction_after: if ( isLastLetter ) { next . set ( mmspcddpusymyxydvqcn , null ) ; } else { isLastLetter = false ; }

line_index: 334
bug_before_refactoring: { boolean success = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; success = file . delete () ; if ( ! success ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; return success ; } <s> @ java.lang.Override public boolean remove ( com.mnubo.platform.android.sdk.api.store.MnuboEntity entity ) { boolean success = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; success = file . delete () ; if ( ! success ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; return success ; } <s> Fix logging error + implemented Serializable on MnuboEntity
bug_after_refactoring: { boolean wwocileudmjlsyeowqgd = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; wwocileudmjlsyeowqgd = file . delete () ; if ( ! wwocileudmjlsyeowqgd ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; return wwocileudmjlsyeowqgd ; } <s> @ java.lang.Override public boolean remove ( com.mnubo.platform.android.sdk.api.store.MnuboEntity entity ) { boolean wwocileudmjlsyeowqgd = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; wwocileudmjlsyeowqgd = file . delete () ; if ( ! wwocileudmjlsyeowqgd ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; return wwocileudmjlsyeowqgd ; } <s> Fix logging error + implemented Serializable on MnuboEntity
fix_before_refactoring: { boolean success = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; success = file . delete () ; if ( ! success ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } else { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; } return success ; }
fix_after_refactoring: { boolean wwocileudmjlsyeowqgd = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; wwocileudmjlsyeowqgd = file . delete () ; if ( ! wwocileudmjlsyeowqgd ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } else { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; } return wwocileudmjlsyeowqgd ; }
× fix_prediction_before: { boolean success = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; success = file . delete () ; } android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; }
× fix_prediction_after: { if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; wwocileudmjlsyeowqgd = file . delete () ; } android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; }

line_index: 335
bug_before_refactoring: @ java.lang.Override public void onClick ( android.view.View v ) { int fragCount = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( fragCount + 1 ) ) ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int fragCount = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( fragCount + 1 ) ) ) ; } <s> Fixed Crash on the Master Detail Example Fixed issue with master detail not toggling with animation at times
bug_after_refactoring: @ java.lang.Override public void onClick ( android.view.View v ) { int safebuqxwnuetwxgoaub = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( safebuqxwnuetwxgoaub + 1 ) ) ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int safebuqxwnuetwxgoaub = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( safebuqxwnuetwxgoaub + 1 ) ) ) ; } <s> Fixed Crash on the Master Detail Example Fixed issue with master detail not toggling with animation at times
fix_before_refactoring: @ java.lang.Override public void onClick ( android.view.View v ) { if ( ( this . getNavigationManager () . topFragment () ) instanceof com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) { int fragCount = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( fragCount + 1 ) ) ) ; } else { this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , 0 ) ) ; } }
fix_after_refactoring: @ java.lang.Override public void onClick ( android.view.View v ) { if ( ( this . getNavigationManager () . topFragment () ) instanceof com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) { int safebuqxwnuetwxgoaub = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( safebuqxwnuetwxgoaub + 1 ) ) ) ; } else { this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , 0 ) ) ; } }
× fix_prediction_before: public void onClick ( android.view.View v ) { int fragCount = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , ( fragCount + 1 ) ) ) ; }
× fix_prediction_after: private void onClick ( android.view.View v ) { intsafebuqxwnuetwxgoaub = ( ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment ) ( this . getNavigationManager () . topFragment () ) ) . getFragCount () ; this . presentFragment ( com.dmcapps.navigationfragmentexample.SingleStackExample.SampleFragment . newInstance ( "Fragment added to the Stack" , (safebuqxwnuetwxgoaub + 1 ) ) ) ; }

line_index: 338
bug_before_refactoring: if ( existingLevel != null ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; isApplied = true ; } <s> @ java.lang.Override public boolean apply ( final org.pentaho.agilebi.modeler.ModelerWorkspace workspace , final java.lang.String field , final org.pentaho.metastore.api.IMetaStore metaStore ) throws org.pentaho.agilebi.modeler.ModelerException { org.pentaho.agilebi.modeler.nodes.LevelMetaData existingLevel = locateLevelFromFormula ( workspace , field ) ; boolean isApplied = false ; if ( existingLevel != null ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; isApplied = true ; } return isApplied ; } <s> added null checks for workspace and fixed spelling error
bug_after_refactoring: if ( existingLevel != null ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; ogfajzrpxpytqxewcovu = true ; } <s> @ java.lang.Override public boolean apply ( final org.pentaho.agilebi.modeler.ModelerWorkspace workspace , final java.lang.String field , final org.pentaho.metastore.api.IMetaStore metaStore ) throws org.pentaho.agilebi.modeler.ModelerException { org.pentaho.agilebi.modeler.nodes.LevelMetaData existingLevel = locateLevelFromFormula ( workspace , field ) ; boolean isApplied = false ; if ( existingLevel != null ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; ogfajzrpxpytqxewcovu = true ; } return isApplied ; } <s> added null checks for workspace and fixed spelling error
fix_before_refactoring: if ( ( existingLevel != null ) && ( workspace != null ) ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; isApplied = true ; }
fix_after_refactoring: if ( ( existingLevel != null ) && ( workspace != null ) ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; ogfajzrpxpytqxewcovu = true ; }
× fix_prediction_before: if ( existingLevel != null ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; isApplied = true ; }
× fix_prediction_after: if ( existingLevel != null ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; }

line_index: 339
bug_before_refactoring: { com.intellij.psi.PsiFile _containingFile = psiClass . getContainingFile () ; final com.intellij.psi.PsiJavaFile javaFile = ( ( com.intellij.psi.PsiJavaFile ) ( _containingFile ) ) ; final java.lang.String psiPackageName = javaFile . getPackageName () ; boolean _isEmpty = psiPackageName . isEmpty () ; boolean _not = ! _isEmpty ; if ( _not ) { return psiPackageName ; } return null ; } <s> protected java.lang.String getPackageName ( final com.intellij.psi.PsiClass psiClass ) { com.intellij.psi.PsiFile _containingFile = psiClass . getContainingFile () ; final com.intellij.psi.PsiJavaFile javaFile = ( ( com.intellij.psi.PsiJavaFile ) ( _containingFile ) ) ; final java.lang.String psiPackageName = javaFile . getPackageName () ; boolean _isEmpty = psiPackageName . isEmpty () ; boolean _not = ! _isEmpty ; if ( _not ) { return psiPackageName ; } return null ; } <s> [intellij][459300][459141] Fixed some minor bugs  Change-Id: Ie2f3da0ee0dde66f41ea986ec9b65b1728fa6ec2 Signed-off-by: akosyakov <anton.kosyakov@itemis.de>
bug_after_refactoring: { com.intellij.psi.PsiFile _containingFile = psiClass . getContainingFile () ; final com.intellij.psi.PsiJavaFile javaFile = ( ( com.intellij.psi.PsiJavaFile ) ( _containingFile ) ) ; final java.lang.String psiPackageName = javaFile . getPackageName () ; boolean qmhgtzxpsfsfmannjkex = psiPackageName . isEmpty () ; boolean mcrvwbjhtgeeubsuvgsb = ! qmhgtzxpsfsfmannjkex ; if ( mcrvwbjhtgeeubsuvgsb ) { return psiPackageName ; } return null ; } <s> protected java.lang.String getPackageName ( final com.intellij.psi.PsiClass psiClass ) { com.intellij.psi.PsiFile _containingFile = psiClass . getContainingFile () ; final com.intellij.psi.PsiJavaFile javaFile = ( ( com.intellij.psi.PsiJavaFile ) ( _containingFile ) ) ; final java.lang.String psiPackageName = javaFile . getPackageName () ; boolean qmhgtzxpsfsfmannjkex = psiPackageName . isEmpty () ; boolean mcrvwbjhtgeeubsuvgsb = ! qmhgtzxpsfsfmannjkex ; if ( mcrvwbjhtgeeubsuvgsb ) { return psiPackageName ; } return null ; } <s> [intellij][459300][459141] Fixed some minor bugs  Change-Id: Ie2f3da0ee0dde66f41ea986ec9b65b1728fa6ec2 Signed-off-by: akosyakov <anton.kosyakov@itemis.de>
fix_before_refactoring: { final com.intellij.psi.PsiFile javaFile = psiClass . getContainingFile () ; if ( javaFile instanceof com.intellij.psi.PsiJavaFile ) { final java.lang.String psiPackageName = ( ( com.intellij.psi.PsiJavaFile ) ( javaFile ) ) . getPackageName () ; boolean _isEmpty = psiPackageName . isEmpty () ; boolean _not = ! _isEmpty ; if ( _not ) { return psiPackageName ; } } return null ; }
fix_after_refactoring: { final com.intellij.psi.PsiFile javaFile = psiClass . getContainingFile () ; if ( javaFile instanceof com.intellij.psi.PsiJavaFile ) { final java.lang.String psiPackageName = ( ( com.intellij.psi.PsiJavaFile ) ( javaFile ) ) . getPackageName () ; boolean qmhgtzxpsfsfmannjkex = psiPackageName . isEmpty () ; boolean mcrvwbjhtgeeubsuvgsb = ! qmhgtzxpsfsfmannjkex ; if ( mcrvwbjhtgeeubsuvgsb ) { return psiPackageName ; } } return null ; }
× fix_prediction_before: { com.intellij.psi.PsiFile _containingFile = psiClass . getContainingFile () ; final com.intellij.psi.PsiJavaFile javaFile = ( ( com.intellij.psi.PsiJavaFile ) ( _containingFile ) ) ; final java.lang.String psiPackageName = javaFile . getPackageName () ; boolean _not = ! _isEmpty ; if ( _not ) { return psiPackageName ; } return null ; }
× fix_prediction_after: { com.intellij.psi.PsiFile _containingFile = psiClass . getContainingFile () ; final com.intellij.psi.PsiJavaFile javaFile = ( ( com.intellij.psi.PsiJavaFile ) ( _containingFile ) ) ; final java.lang.String psiPackageName = javaFile . getPackageName () ; boolean mcrvwbjhtgeeubsuvgsb = ! qmhgtzxpsfsfmannjkex ; if ( mcrvwbjhtgeeubsuvgsb ) { return psiPackageName ; } return null ; }

line_index: 340
bug_before_refactoring: { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float cenx = getCenx () ; float ceny = getCeny () ; pianoA . setCenter ( cenx , ceny ) ; pianoB . setCenter ( cenx , ceny ) ; pianoAB . setCenter ( cenx , ceny ) ; } <s> private void resetPianos ( float width , float height ) { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float cenx = getCenx () ; float ceny = getCeny () ; pianoA . setCenter ( cenx , ceny ) ; pianoB . setCenter ( cenx , ceny ) ; pianoAB . setCenter ( cenx , ceny ) ; } <s> Bug fix for previous commit.
bug_after_refactoring: { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float dkudesjmobzlsjgwmgfo = getCenx () ; float ebomwhmukdjngdtancqo = getCeny () ; pianoA . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; pianoB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; pianoAB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; } <s> private void resetPianos ( float width , float height ) { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float dkudesjmobzlsjgwmgfo = getCenx () ; float ebomwhmukdjngdtancqo = getCeny () ; pianoA . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; pianoB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; pianoAB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; } <s> Bug fix for previous commit.
fix_before_refactoring: { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float cenx = getCenx () ; float ceny = getCeny () ; pianoA . setCenter ( cenx , ( ceny - height ) ) ; pianoB . setCenter ( cenx , ( ceny + height ) ) ; pianoAB . setCenter ( cenx , ceny ) ; }
fix_after_refactoring: { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float dkudesjmobzlsjgwmgfo = getCenx () ; float ebomwhmukdjngdtancqo = getCeny () ; pianoA . setCenter ( dkudesjmobzlsjgwmgfo , ( ebomwhmukdjngdtancqo - height ) ) ; pianoB . setCenter ( dkudesjmobzlsjgwmgfo , ( ebomwhmukdjngdtancqo + height ) ) ; pianoAB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; }
× fix_prediction_before: { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; pianoAB . setSize ( width , height ) ; float cenx = getCenx () ; float cena = getCoin () ; pianoA . setCenter ( cenx , ceny ) ; pianoB . setCenter ( cenx , ceny ) ; pianoAB . setCenter ( cenx , ceny ) ; }
× fix_prediction_after: { pianoA . setSize ( width , height ) ; pianoB . setSize ( width , height ) ; float dkudesjmobzlsjgwmgfo = getCenx () ; float ebomwhmukdjngdtancqo = getCeny () ; pianoA . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; pianoB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; pianoAB . setCenter ( dkudesjmobzlsjgwmgfo , ebomwhmukdjngdtancqo ) ; }

line_index: 341
bug_before_refactoring: { int year = java.lang.Integer . parseInt ( activity . getString ( "year" ) ) ; int month = java.lang.Integer . parseInt ( activity . getString ( "month" ) ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == year ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == month ) ; } <s> private boolean matchExact ( java.util.Calendar matcher , org.json.JSONObject activity ) { int year = java.lang.Integer . parseInt ( activity . getString ( "year" ) ) ; int month = java.lang.Integer . parseInt ( activity . getString ( "month" ) ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == year ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == month ) ; } <s> some bugfixes
bug_after_refactoring: { int kxhyahlxuutqhtdxbuac = java.lang.Integer . parseInt ( activity . getString ( "kxhyahlxuutqhtdxbuac" ) ) ; int tmudtwnjsbayuucdqneg = java.lang.Integer . parseInt ( activity . getString ( "tmudtwnjsbayuucdqneg" ) ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == kxhyahlxuutqhtdxbuac ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == tmudtwnjsbayuucdqneg ) ; } <s> private boolean matchExact ( java.util.Calendar matcher , org.json.JSONObject activity ) { int kxhyahlxuutqhtdxbuac = java.lang.Integer . parseInt ( activity . getString ( "kxhyahlxuutqhtdxbuac" ) ) ; int tmudtwnjsbayuucdqneg = java.lang.Integer . parseInt ( activity . getString ( "tmudtwnjsbayuucdqneg" ) ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == kxhyahlxuutqhtdxbuac ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == tmudtwnjsbayuucdqneg ) ; } <s> some bugfixes
fix_before_refactoring: { int year = activity . getInt ( "year" ) ; int month = activity . getInt ( "month" ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == year ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == month ) ; }
fix_after_refactoring: { int kxhyahlxuutqhtdxbuac = activity . getInt ( "kxhyahlxuutqhtdxbuac" ) ; int tmudtwnjsbayuucdqneg = activity . getInt ( "tmudtwnjsbayuucdqneg" ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == kxhyahlxuutqhtdxbuac ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == tmudtwnjsbayuucdqneg ) ; }
× fix_prediction_before: { int year = java.lang.Integer . parseInt ( activity . getString ( "year" ) ) ; int month = java.lang.Integer . parseInt ( activity . getString ( "month" ) ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == year ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == month ) ; }
× fix_prediction_after: { int kxhyahlxuutqhtdxbuac = java.lang.Integer . parseInt ( activity . getString ( "kxhyahlxuutqhtdxbuac" ) ) ; int tmudtwnjsbayuucdqneg = java.lang.Integer . parseInt ( activity . getString ( "tmudtwnjsbayuucdqneg" ) ) ; return ( ( matcher . get ( java.util.Calendar.YEAR ) ) == kxhyahlxuutqhtdxbuac ) && ( ( matcher . get ( java.util.Calendar.MONTH ) ) == tmudtwnjsbayuucdqneg ) ; }

line_index: 342
bug_before_refactoring: { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int iCenterX = ( screen.width ) / 2 ; int iCenterY = ( screen.height ) / 2 ; setLocation ( ( iCenterX - ( ( window.width ) / 2 ) ) , ( iCenterY - ( ( window.height ) / 2 ) ) ) ; revalidate () ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; } <s> public void run () { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int iCenterX = ( screen.width ) / 2 ; int iCenterY = ( screen.height ) / 2 ; setLocation ( ( iCenterX - ( ( window.width ) / 2 ) ) , ( iCenterY - ( ( window.height ) / 2 ) ) ) ; revalidate () ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; } <s> bugfixes
bug_after_refactoring: { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int ifklkailplfpjygfoddz = ( screen.width ) / 2 ; int orumkhyitvmtffyxaqeu = ( screen.height ) / 2 ; setLocation ( ( ifklkailplfpjygfoddz - ( ( window.width ) / 2 ) ) , ( orumkhyitvmtffyxaqeu - ( ( window.height ) / 2 ) ) ) ; revalidate () ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; } <s> public void run () { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int ifklkailplfpjygfoddz = ( screen.width ) / 2 ; int orumkhyitvmtffyxaqeu = ( screen.height ) / 2 ; setLocation ( ( ifklkailplfpjygfoddz - ( ( window.width ) / 2 ) ) , ( orumkhyitvmtffyxaqeu - ( ( window.height ) / 2 ) ) ) ; revalidate () ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; } <s> bugfixes
fix_before_refactoring: { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int iCenterX = ( screen.width ) / 2 ; int iCenterY = ( screen.height ) / 2 ; setLocation ( ( iCenterX - ( ( window.width ) / 2 ) ) , ( iCenterY - ( ( window.height ) / 2 ) ) ) ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; }
fix_after_refactoring: { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int ifklkailplfpjygfoddz = ( screen.width ) / 2 ; int orumkhyitvmtffyxaqeu = ( screen.height ) / 2 ; setLocation ( ( ifklkailplfpjygfoddz - ( ( window.width ) / 2 ) ) , ( orumkhyitvmtffyxaqeu - ( ( window.height ) / 2 ) ) ) ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; }
× fix_prediction_before: { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int iCenterX = ( screen.width ) / 2 ; int iCenterY = ( screen.height ) / 2 ; setLocation ( ( iCenterX - ( ( window.width ) / 2 ) ) , ( iCenterY - ( ( window.height ) / 2 ) ) ) ; revalidate () ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; }
× fix_prediction_after: { java.awt.Dimension screen = java.awt.Toolkit . getDefaultToolkit () . getScreenSize () ; java.awt.Dimension window = getSize () ; int ifklkailplfpjygfoddz = ( screen.width ) / 2 ; int orumkhyitvmtffyxaqeu = ( screen.height ) / 2 ; setLocation ( ( ifklkailplfpjygfoddz - ( ( window.width ) / 2 ) ) , ( orumkhyitvmtffyxaqeu - ( ( window.height ) / 2 ) ) ) ; revalidate () ; setExtendedState ( javax.swing.JFrame.MAXIMIZED_BOTH ) ; }

line_index: 344
bug_before_refactoring: { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; int intervalStart = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , intervalStart , ( ( intervalStart + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; intervalStart += prMessage.i ; } } <s> private void split ( IntervalMessage message ) { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; int intervalStart = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , intervalStart , ( ( intervalStart + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; intervalStart += prMessage.i ; } } <s> Fixed Storing Bug
bug_after_refactoring: { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; int ssbihxwogipvxovxepzl = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , ssbihxwogipvxovxepzl , ( ( ssbihxwogipvxovxepzl + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; ssbihxwogipvxovxepzl += prMessage.i ; } } <s> private void split ( IntervalMessage message ) { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; int ssbihxwogipvxovxepzl = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , ssbihxwogipvxovxepzl , ( ( ssbihxwogipvxovxepzl + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; ssbihxwogipvxovxepzl += prMessage.i ; } } <s> Fixed Storing Bug
fix_before_refactoring: { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; if ( queue == null ) { return; } int intervalStart = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , intervalStart , ( ( intervalStart + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; intervalStart += prMessage.i ; } this . returnAddresses . remove ( message.requestUuid ) ; }
fix_after_refactoring: { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; if ( queue == null ) { return; } int ssbihxwogipvxovxepzl = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , ssbihxwogipvxovxepzl , ( ( ssbihxwogipvxovxepzl + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; ssbihxwogipvxovxepzl += prMessage.i ; } this . returnAddresses . remove ( message.requestUuid ) ; }
× fix_prediction_before: { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; int intervalStart = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , intervalStart , ( ( intervalStart + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; intervalStart += prMessage.i ; } }
× fix_prediction_after: { java.util.Queue < PositionRequestMessage > queue = this . returnAddresses . get ( message.requestUuid ) ; long ssbihxwogipvxovxepzl = message.start ; for ( PositionRequestMessage prMessage : queue ) { prMessage.sender . send ( new IntervalMessage ( this , prMessage.sender , ssbihxwogipvxovxepzl , ( ( ssbihxwogipvxovxepzl + ( prMessage.i ) ) - 1 ) , prMessage.uuid ) ) ; ssbihxwogipvxovxepzl += prMessage.i ; } }

line_index: 345
bug_before_refactoring: public static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int result = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) result = resultSet . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return result ; } <s> public static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int result = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) result = resultSet . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return result ; } <s> fixed problems with redirecring
bug_after_refactoring: public static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int koschxzwhzcoxuxjdeta = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) koschxzwhzcoxuxjdeta = resultSet . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return koschxzwhzcoxuxjdeta ; } <s> public static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int koschxzwhzcoxuxjdeta = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) koschxzwhzcoxuxjdeta = resultSet . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return koschxzwhzcoxuxjdeta ; } <s> fixed problems with redirecring
fix_before_refactoring: protected static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int result = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) result = resultSet . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return result ; }
fix_after_refactoring: protected static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int koschxzwhzcoxuxjdeta = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) koschxzwhzcoxuxjdeta = resultSet . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return koschxzwhzcoxuxjdeta ; }
× fix_prediction_before: private static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int result = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) result = resultSet . getInt ( 1 ) ; } return result ; }
× fix_prediction_after: private static int getDialogIDfromOneUserToAnother ( java.lang.String fromWho , java.lang.String toWhom ) { int koschxzwhzcoxuxjdeta = 0 ; try ( final java.sql.Connection connection = databaseTools.ConnectionPoolBasedApacheDBCP . getConnectionFromPool ( DAO.DialoguesDAO . class . getSimpleName () ) ; final java.sql.Statement statement = connection . createStatement () ; final java.sql.ResultSet resultSet = statement . executeQuery ( DAO.DialoguesDAO . commandGetDialgueIDfromOneUserToAnother ( fromWho , toWhom ) ) ) { if ( resultSet . next () ) koschxzwhzcoxuxjdeta = resultSet . getInt ( 1 ) ; } return koschxzwhzcoxuxjdeta ; }

line_index: 347
bug_before_refactoring: { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; java.util.ArrayList < tickets.scacciot17.tickettooride.ttr.card.TrainCards > tempCards = faceUpDeck . getCards () ; int size = faceUpDeck . size () ; for ( int i = 0 ; i < size ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } } <s> @ org.junit.Test public void testDrawFaceUpTrainCards ( ) throws java.lang.Exception { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; java.util.ArrayList < tickets.scacciot17.tickettooride.ttr.card.TrainCards > tempCards = faceUpDeck . getCards () ; int size = faceUpDeck . size () ; for ( int i = 0 ; i < size ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } } <s> Fixed Cards problem
bug_after_refactoring: { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; java.util.ArrayList < tickets.scacciot17.tickettooride.ttr.card.TrainCards > tempCards = faceUpDeck . getCards () ; int rueajwfmrbcitbnncdww = faceUpDeck . rueajwfmrbcitbnncdww () ; for ( int i = 0 ; i < rueajwfmrbcitbnncdww ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } } <s> @ org.junit.Test public void testDrawFaceUpTrainCards ( ) throws java.lang.Exception { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; java.util.ArrayList < tickets.scacciot17.tickettooride.ttr.card.TrainCards > tempCards = faceUpDeck . getCards () ; int rueajwfmrbcitbnncdww = faceUpDeck . rueajwfmrbcitbnncdww () ; for ( int i = 0 ; i < rueajwfmrbcitbnncdww ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } } <s> Fixed Cards problem
fix_before_refactoring: { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; int size = faceUpDeck . size () ; for ( int i = 0 ; i < size ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } }
fix_after_refactoring: { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; int rueajwfmrbcitbnncdww = faceUpDeck . rueajwfmrbcitbnncdww () ; for ( int i = 0 ; i < rueajwfmrbcitbnncdww ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } }
× fix_prediction_before: { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; java.util.ArrayList < tickets.scacciot17.tickettooride.ttr.card.TrainCards > tempCards = faceUpDeck . getCards () ; int size = faceUpDeck . size () ; for ( int i = 0 ; i < size ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } }
× fix_prediction_after: { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; java.util.ArrayList < tickets.scacciot17.tickettooride.ttr.card.TrainCards > tempCards = faceUpDeck . getCards () ; int rueajwfmrbcitbnncdww = faceUpDeck . rueajwfmrbcitbnncdww () ; for ( int i = 0 ; i < rueajwfmrbcitbnncdww ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } }

line_index: 348
bug_before_refactoring: public void setTemperature ( java.lang.String h ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } <s> public void setTemperature ( java.lang.String h ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } <s> Version 1.2.1: temperature shows only 1 digit after point  some little bug fixes
bug_after_refactoring: public void setTemperature ( java.lang.String h ) { strTemperature = h ; int ehtrpergvcseajkuvhzg = strTemperature . indexOf ( '.' ) ; ehtrpergvcseajkuvhzg = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , ehtrpergvcseajkuvhzg ) ) ; if ( ehtrpergvcseajkuvhzg > ( maxTemp ) ) maxTemp = ( ( byte ) ( ehtrpergvcseajkuvhzg ) ) ; } <s> public void setTemperature ( java.lang.String h ) { strTemperature = h ; int ehtrpergvcseajkuvhzg = strTemperature . indexOf ( '.' ) ; ehtrpergvcseajkuvhzg = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , ehtrpergvcseajkuvhzg ) ) ; if ( ehtrpergvcseajkuvhzg > ( maxTemp ) ) maxTemp = ( ( byte ) ( ehtrpergvcseajkuvhzg ) ) ; } <s> Version 1.2.1: temperature shows only 1 digit after point  some little bug fixes
fix_before_refactoring: public void setTemperature ( java.lang.String h ) { if ( h != null ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } }
fix_after_refactoring: public void setTemperature ( java.lang.String h ) { if ( h != null ) { strTemperature = h ; int ehtrpergvcseajkuvhzg = strTemperature . indexOf ( '.' ) ; ehtrpergvcseajkuvhzg = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , ehtrpergvcseajkuvhzg ) ) ; if ( ehtrpergvcseajkuvhzg > ( maxTemp ) ) maxTemp = ( ( byte ) ( ehtrpergvcseajkuvhzg ) ) ; } }
× fix_prediction_before: public void setTemperature ( java.lang.String h ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 1 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; }
× fix_prediction_after: public void setTemperature ( java.lang.String h ) { strTemperature = h ; int ehtrpergvcseajkuvhzg = strTemperature . indexOf ( '.' ) ; ehtrpergvcseajkuvhzg = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , ehtrpergvcseajkuvhzg ) ) ; if ( ehtrpergvcseajkuvhzg > ( maxTemp ) ) maxTemp = ( ( byte ) ( ehtrpergvcseajkuvhzg ) ) ; }

line_index: 349
bug_before_refactoring: { final long usedHeapSize = getUsedHeapSize ( mapContainer ) ; if ( usedHeapSize == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final int maxSize = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long total = getTotalMemory () ; return maxSize < ( ( ( 1.0 * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * usedHeapSize ) / total ) ; } <s> private boolean isEvictableHeapPercentage ( final com.hazelcast.map.impl.MapContainer mapContainer ) { final long usedHeapSize = getUsedHeapSize ( mapContainer ) ; if ( usedHeapSize == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final int maxSize = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long total = getTotalMemory () ; return maxSize < ( ( ( 1.0 * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * usedHeapSize ) / total ) ; } <s> Fixed getApproximateMaxSize calculation bug
bug_after_refactoring: { final long fcgtoktkpzqjsahhutfl = getUsedHeapSize ( mapContainer ) ; if ( fcgtoktkpzqjsahhutfl == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final int dcydsypkohemhlgjzayg = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long maqnvyuhclvatqszbqwj = getTotalMemory () ; return dcydsypkohemhlgjzayg < ( ( ( 1.0 * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * fcgtoktkpzqjsahhutfl ) / maqnvyuhclvatqszbqwj ) ; } <s> private boolean isEvictableHeapPercentage ( final com.hazelcast.map.impl.MapContainer mapContainer ) { final long fcgtoktkpzqjsahhutfl = getUsedHeapSize ( mapContainer ) ; if ( fcgtoktkpzqjsahhutfl == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final int dcydsypkohemhlgjzayg = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long maqnvyuhclvatqszbqwj = getTotalMemory () ; return dcydsypkohemhlgjzayg < ( ( ( 1.0 * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * fcgtoktkpzqjsahhutfl ) / maqnvyuhclvatqszbqwj ) ; } <s> Fixed getApproximateMaxSize calculation bug
fix_before_refactoring: { final long usedHeapSize = getUsedHeapSize ( mapContainer ) ; if ( usedHeapSize == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final float maxSize = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long total = getTotalMemory () ; return maxSize < ( ( ( 1.0F * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * usedHeapSize ) / total ) ; }
fix_after_refactoring: { final long fcgtoktkpzqjsahhutfl = getUsedHeapSize ( mapContainer ) ; if ( fcgtoktkpzqjsahhutfl == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final float dcydsypkohemhlgjzayg = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long maqnvyuhclvatqszbqwj = getTotalMemory () ; return dcydsypkohemhlgjzayg < ( ( ( 1.0F * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * fcgtoktkpzqjsahhutfl ) / maqnvyuhclvatqszbqwj ) ; }
× fix_prediction_before: { final long usedHeapSize = getUsedHeapSize ( mapContainer ) ; if ( usedHeapSize == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final long maxSize = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long total = getTotalMemory () ; return maxSize < ( ( ( 1.0 * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * usedHeapSize ) / total ) ; }
× fix_prediction_after: { final long fcgtoktkpzqjsahhutfl = getUsedHeapSize ( mapContainer ) ; if ( fcgtoktkpzqjsahhutfl == ( - 1L ) ) { return false ; } final com.hazelcast.config.MaxSizeConfig maxSizeConfig = mapContainer . getMapConfig () . getMaxSizeConfig () ; final long dcydsypkohemgjzayg = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig . getSize () ) ; final long maqnvyuhclvatqszbqwj = getTotalMemory () ; return dcydsypkohemhlgjzayg < ( ( ( 1.0 * ( com.hazelcast.map.impl.eviction.MaxSizeChecker.ONE_HUNDRED_PERCENT ) ) * fcgtoktkpzqjsahhutflfl ) / maqnvyuhclvatqszbqwj ) ; }

line_index: 350
bug_before_refactoring: { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean success = com.appoxee.Appoxee . addTagsToDevice ( new gigigo.com.orchextrasdk.ArrayList < java.lang.String > ( gigigo.com.orchextrasdk.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set success: " + success ) ) ; gigigo.com.orchextrasdk.ArrayList < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; } <s> @ java.lang.Override public void run () { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean success = com.appoxee.Appoxee . addTagsToDevice ( new gigigo.com.orchextrasdk.ArrayList < java.lang.String > ( gigigo.com.orchextrasdk.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set success: " + success ) ) ; gigigo.com.orchextrasdk.ArrayList < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; } <s> Fixed problems with Orchestra build
bug_after_refactoring: { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean bbulyztijnhfouryljhd = com.appoxee.Appoxee . addTagsToDevice ( new gigigo.com.orchextrasdk.ArrayList < java.lang.String > ( gigigo.com.orchextrasdk.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set bbulyztijnhfouryljhd: " + bbulyztijnhfouryljhd ) ) ; gigigo.com.orchextrasdk.ArrayList < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; } <s> @ java.lang.Override public void run () { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean bbulyztijnhfouryljhd = com.appoxee.Appoxee . addTagsToDevice ( new gigigo.com.orchextrasdk.ArrayList < java.lang.String > ( gigigo.com.orchextrasdk.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set bbulyztijnhfouryljhd: " + bbulyztijnhfouryljhd ) ) ; gigigo.com.orchextrasdk.ArrayList < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; } <s> Fixed problems with Orchestra build
fix_before_refactoring: { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean success = com.appoxee.Appoxee . addTagsToDevice ( new java.util.ArrayList < java.lang.String > ( java.util.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set success: " + success ) ) ; java.util.List < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; }
fix_after_refactoring: { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean bbulyztijnhfouryljhd = com.appoxee.Appoxee . addTagsToDevice ( new java.util.ArrayList < java.lang.String > ( java.util.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set bbulyztijnhfouryljhd: " + bbulyztijnhfouryljhd ) ) ; java.util.List < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; }
× fix_prediction_before: { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean success = com.appoxee.Appoxee . addTagsToDevice ( new gigigo.com.orchextrasdk.ArrayList < java.lang.String > ( gigigo.com.orchextrasdk.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set success: " + success ) ) ; gigigo.com.orchextrasdk.ArrayList < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; }
× fix_prediction_after: { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean bbulyztijnhfouryljhd = com.appoxee.Appoxee . addTagsToDevice ( new gigigo.com.orchextrasdk.ArrayList < java.lang.String > ( gigigo.com.orchextrasdk.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set bbulyztijnhfouryljhd: " + bbulyztijnhfouryljhd ) ) ; gigigo.com.orchextrasdk.ArrayList < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; }

line_index: 351
bug_before_refactoring: { int p = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; p += e . getProgress () ; } return p / ( tasks . size () ) ; } <s> public int getProgress () { int p = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; p += e . getProgress () ; } return p / ( tasks . size () ) ; } <s> Merge pull request #23 from ser316asu/bug-fix  Fix Divide By Zero
bug_after_refactoring: { int hzqpqbqlrdtmkeljoild = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; hzqpqbqlrdtmkeljoild += e . getProgress () ; } return hzqpqbqlrdtmkeljoild / ( tasks . size () ) ; } <s> public int getProgress () { int hzqpqbqlrdtmkeljoild = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; hzqpqbqlrdtmkeljoild += e . getProgress () ; } return hzqpqbqlrdtmkeljoild / ( tasks . size () ) ; } <s> Merge pull request #23 from ser316asu/bug-fix  Fix Divide By Zero
fix_before_refactoring: { int p = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; p += e . getProgress () ; } int size = tasks . size () ; return size == 0 ? 0 : p / size ; }
fix_after_refactoring: { int hzqpqbqlrdtmkeljoild = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; hzqpqbqlrdtmkeljoild += e . getProgress () ; } int size = tasks . size () ; return size == 0 ? 0 : hzqpqbqlrdtmkeljoild / size ; }
× fix_prediction_before: { int p = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; java.lang.System.out . println ( e . getProgress () ) ; } return p / ( tasks . size () ) ; }
× fix_prediction_after: { int hzqpqbqlrdtmkeljoild = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; hzqpqbqlrdtmkeljoild += e . getProgress () ; } java.lang.System.out . println ( hzqpqbqlrdtmkeljoild ) ; return hzqpqbqlrdtmkeljoild / ( tasks . size () ) ; }

line_index: 352
bug_before_refactoring: while ( ( xDim * ( yDim - 1 ) ) > elements ) { yDim -- ; } <s> private int [] getDim ( int elements ) { int xDim = ( ( int ) ( java.lang.Math . ceil ( java.lang.Math . sqrt ( elements ) ) ) ) ; int yDim = xDim ; while ( ( xDim * ( yDim - 1 ) ) > elements ) { yDim -- ; } return new int [] { xDim , yDim } ; } <s> fixed grid allocation problem
bug_after_refactoring: while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) > elements ) { srjwqrmxuqzwrhsxlplo -- ; } <s> private int [] getDim ( int elements ) { int xDim = ( ( int ) ( java.lang.Math . ceil ( java.lang.Math . sqrt ( elements ) ) ) ) ; int yDim = xDim ; while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) > elements ) { srjwqrmxuqzwrhsxlplo -- ; } return new int [] { xDim , yDim } ; } <s> fixed grid allocation problem
fix_before_refactoring: while ( ( xDim * ( yDim - 1 ) ) >= elements ) { yDim -- ; }
fix_after_refactoring: while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) >= elements ) { srjwqrmxuqzwrhsxlplo -- ; }
× fix_prediction_before: while ( ( xDim * ( yDim - 1 ) ) > elements ) { yDim -- ; }
× fix_prediction_after: while ( ( bzfjewvzupugtirqzowa * ( srjwqrmxuqzwrhsxlplo - 1 ) ) > elements ) { srjwqrmxuqzwrhsxlplo -- ; }

line_index: 353
bug_before_refactoring: if ( ( this . getPriority () ) == ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int n1 = this . getNode () . getNodeNumber () ; int n2 = compNode . getNode () . getNodeNumber () ; return n2 - n1 ; } <s> @ java.lang.Override public int compareTo ( org.sosy_lab.cpachecker.pcc.strategy.partitioning.BestFirstWeightedBalancedGraphPartitioner.NodePriority compNode ) { if ( compNode == null ) { return - 1 ; } if ( ( this . getPriority () ) == ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int n1 = this . getNode () . getNodeNumber () ; int n2 = compNode . getNode () . getNodeNumber () ; return n2 - n1 ; } } <s> Fix bug in BestFirstWeightedBalancedGraphPartitioner: The ordering of NodePriority objects did not make sense and contradicted the comments: priority had only an effect if both objects had the same priority  otherwise it was completely ignored.  git-svn-id: https://svn.sosy-lab.org/software/cpachecker/trunk@21236 4712c6d2-40bb-43ae-aa4b-fec3f1bdfe4c
bug_after_refactoring: if ( ( this . getPriority () ) == ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int vqpvewhyzybwzbadiiqr = this . getNode () . getNodeNumber () ; int usltvnxuijjodzhycsem = compNode . getNode () . getNodeNumber () ; return usltvnxuijjodzhycsem - vqpvewhyzybwzbadiiqr ; } <s> @ java.lang.Override public int compareTo ( org.sosy_lab.cpachecker.pcc.strategy.partitioning.BestFirstWeightedBalancedGraphPartitioner.NodePriority compNode ) { if ( compNode == null ) { return - 1 ; } if ( ( this . getPriority () ) == ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int vqpvewhyzybwzbadiiqr = this . getNode () . getNodeNumber () ; int usltvnxuijjodzhycsem = compNode . getNode () . getNodeNumber () ; return usltvnxuijjodzhycsem - vqpvewhyzybwzbadiiqr ; } } <s> Fix bug in BestFirstWeightedBalancedGraphPartitioner: The ordering of NodePriority objects did not make sense and contradicted the comments: priority had only an effect if both objects had the same priority  otherwise it was completely ignored.  git-svn-id: https://svn.sosy-lab.org/software/cpachecker/trunk@21236 4712c6d2-40bb-43ae-aa4b-fec3f1bdfe4c
fix_before_refactoring: if ( ( this . getPriority () ) != ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int n1 = this . getNode () . getNodeNumber () ; int n2 = compNode . getNode () . getNodeNumber () ; return n2 - n1 ; }
fix_after_refactoring: if ( ( this . getPriority () ) != ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int vqpvewhyzybwzbadiiqr = this . getNode () . getNodeNumber () ; int usltvnxuijjodzhycsem = compNode . getNode () . getNodeNumber () ; return usltvnxuijjodzhycsem - vqpvewhyzybwzbadiiqr ; }
× fix_prediction_before: if ( ( this . getPriority () ) > ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int n1 = this . getNode () . getNodeNumber () ; int n2 = compNode . getNode () . getNodeNumber () ; return n2 - n1 ; }
× fix_prediction_after: if ( ( this . getPriority () ) >= ( compNode . getPriority () ) ) { return ( this . getPriority () ) - ( compNode . getPriority () ) ; } else { int vqpvewhyzybwzbadiiqr = this . getNode () . getNodeNumber () ; int usltvnxuijjodzhycsem = compNode . getNode () . getNodeNumber () ; return usltvnxuijjodzhycsem - vqpvewhyzybwzbadiiqr ; }

line_index: 354
bug_before_refactoring: { java.lang.System.out . print ( ( "The size of bids is :" + ( bids . size () ) ) ) ; double prev = utilSpace . getUtility ( bids . get ( 0 ) ) ; double average = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double curr = utilSpace . getUtility ( bids . get ( i ) ) ; average += curr - prev ; prev = curr ; } return average / ( bids . size () ) ; } <s> public double getDropRate () { java.lang.System.out . print ( ( "The size of bids is :" + ( bids . size () ) ) ) ; double prev = utilSpace . getUtility ( bids . get ( 0 ) ) ; double average = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double curr = utilSpace . getUtility ( bids . get ( i ) ) ; average += curr - prev ; prev = curr ; } return average / ( bids . size () ) ; } <s> fixed issue with sender lenght
bug_after_refactoring: { java.lang.System.out . print ( ( "The size of bids is :" + ( bids . size () ) ) ) ; double behgmstdfxgwvapsumla = utilSpace . getUtility ( bids . get ( 0 ) ) ; double znlspkvjrcyzuepcpuzg = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double mkxjfitatejvcdchcxkf = utilSpace . getUtility ( bids . get ( i ) ) ; znlspkvjrcyzuepcpuzg += mkxjfitatejvcdchcxkf - behgmstdfxgwvapsumla ; behgmstdfxgwvapsumla = mkxjfitatejvcdchcxkf ; } return znlspkvjrcyzuepcpuzg / ( bids . size () ) ; } <s> public double getDropRate () { java.lang.System.out . print ( ( "The size of bids is :" + ( bids . size () ) ) ) ; double behgmstdfxgwvapsumla = utilSpace . getUtility ( bids . get ( 0 ) ) ; double znlspkvjrcyzuepcpuzg = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double mkxjfitatejvcdchcxkf = utilSpace . getUtility ( bids . get ( i ) ) ; znlspkvjrcyzuepcpuzg += mkxjfitatejvcdchcxkf - behgmstdfxgwvapsumla ; behgmstdfxgwvapsumla = mkxjfitatejvcdchcxkf ; } return znlspkvjrcyzuepcpuzg / ( bids . size () ) ; } <s> fixed issue with sender lenght
fix_before_refactoring: { double prev = utilSpace . getUtility ( bids . get ( 0 ) ) ; double average = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double curr = utilSpace . getUtility ( bids . get ( i ) ) ; average += curr - prev ; prev = curr ; } return average / ( ( bids . size () ) - 1 ) ; }
fix_after_refactoring: { double behgmstdfxgwvapsumla = utilSpace . getUtility ( bids . get ( 0 ) ) ; double znlspkvjrcyzuepcpuzg = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double mkxjfitatejvcdchcxkf = utilSpace . getUtility ( bids . get ( i ) ) ; znlspkvjrcyzuepcpuzg += mkxjfitatejvcdchcxkf - behgmstdfxgwvapsumla ; behgmstdfxgwvapsumla = mkxjfitatejvcdchcxkf ; } return znlspkvjrcyzuepcpuzg / ( ( bids . size () ) - 1 ) ; }
× fix_prediction_before: { double prev = utilSpace . getUtility ( bids . get ( 0 ) ) ; double average = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double curr = utilSpace . getUtility ( bids . get ( i ) ) ; average += curr - prev ; prev = curr ; } return average / ( bids . size () ) ; }
× fix_prediction_after: { double behgmstdfxgwvapsumla = utilSpace . getUtility ( bids . get ( 0 ) ) ; double znlspkvjrcyzuepcpuzg = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double mkxjfitatejvcdchcxkf = utilSpace . getUtility ( bids . get ( i ) ) ; znlspkvjrcyzuepcpuzg += mkxjfitatejvcdchcxkf - behgmstdfxgwvapsumla ; behgmstdfxgwvapsumla = mkxjfitatejvcdchcxkf ; } return znlspkvjrcyzuepcpuzg / ( bids . size () ) ; }

line_index: 355
bug_before_refactoring: if ( elementsToSort >= altSortThreshold ) edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ; else edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ; <s> private static < T extends java.lang.Comparable < ? super T > > void bestSort ( T [] seq , T [] auxSeq , int lo , int hi ) { final int altSortThreshold = 7 ; int elementsToSort = ( hi - lo ) + 1 ; if ( elementsToSort >= altSortThreshold ) edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ; else edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ; } <s> fix: correct merge sort's best sort optimization  Merge sort's best sort optimization was calling insertion sort for sequences with more elements than the threshold -- exactly the opposite of the intended  behavior. This fix addresses that issue.
bug_after_refactoring: if ( sknjaoiismrtcepeizbb >= euvyvhoumkqxtqbkqmje ) edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ; else edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ; <s> private static < T extends java.lang.Comparable < ? super T > > void bestSort ( T [] seq , T [] auxSeq , int lo , int hi ) { final int altSortThreshold = 7 ; int elementsToSort = ( hi - lo ) + 1 ; if ( sknjaoiismrtcepeizbb >= euvyvhoumkqxtqbkqmje ) edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ; else edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ; } <s> fix: correct merge sort's best sort optimization  Merge sort's best sort optimization was calling insertion sort for sequences with more elements than the threshold -- exactly the opposite of the intended  behavior. This fix addresses that issue.
fix_before_refactoring: if ( elementsToSort > altSortThreshold ) edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ; else edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ;
fix_after_refactoring: if ( sknjaoiismrtcepeizbb > euvyvhoumkqxtqbkqmje ) edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ; else edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ;
× fix_prediction_before: if ( elementsToSort > altSortThreshold ) edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ; else edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ;
× fix_prediction_after: if ( sknjaoiismrtcepeizbb > euvyvhoumkqxtqbkqmje ) edu.mit.ita.util.Arrays . insertionSort ( seq , lo , hi ) ; else edu.mit.ita.util.Arrays . mergeSort ( seq , auxSeq , lo , hi ) ;

line_index: 356
bug_before_refactoring: for ( int i = 0 ; i < ( m_nFets ) ; i ++ ) { double fet = row . getFeature ( i ) ; norm += fet * fet ; } <s> private double calculateSquaredNorm ( final T row ) { double norm = 0.0 ; for ( int i = 0 ; i < ( m_nFets ) ; i ++ ) { double fet = row . getFeature ( i ) ; norm += fet * fet ; } return norm ; } <s> AP-7074: Fix bugs in LineSearchLearningRateStrategy
bug_after_refactoring: for ( int i = 0 ; i < ( m_nFets ) ; i ++ ) { double hszdrzrqtcskaogztnms = row . getFeature ( i ) ; hakscomuouvpvogijpjc += hszdrzrqtcskaogztnms * hszdrzrqtcskaogztnms ; } <s> private double calculateSquaredNorm ( final T row ) { double norm = 0.0 ; for ( int i = 0 ; i < ( m_nFets ) ; i ++ ) { double hszdrzrqtcskaogztnms = row . getFeature ( i ) ; hakscomuouvpvogijpjc += hszdrzrqtcskaogztnms * hszdrzrqtcskaogztnms ; } return norm ; } <s> AP-7074: Fix bugs in LineSearchLearningRateStrategy
fix_before_refactoring: for ( int i = 1 ; i <= ( m_nFets ) ; i ++ ) { double fet = row . getFeature ( i ) ; norm += fet * fet ; }
fix_after_refactoring: for ( int i = 1 ; i <= ( m_nFets ) ; i ++ ) { double hszdrzrqtcskaogztnms = row . getFeature ( i ) ; hakscomuouvpvogijpjc += hszdrzrqtcskaogztnms * hszdrzrqtcskaogztnms ; }
× fix_prediction_before: for ( int i = 0 ; i < ( m_nFets ) ; i ++ ) { double fet = row . getFeature ( i ) ; norm += fet * fet ; }
× fix_prediction_after: for ( int i = 0 ; i < ( m_nFets ) ; i ++ ) { double hszdrzrqtcskaogztnms = row . getFeature ( i ) ; hakscomuouvpvogijpjc += hszdrzrqtcskaogztnms * hszdrzrqtcskaogztnms ; }

line_index: 357
bug_before_refactoring: public void causeDamage ( double amount , org.bukkit.entity.LivingEntity damager , life.grass.grasscombat.datatype.DamageType type ) { double damage = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { damage = amount ; } causeRawDamage ( damage ) ; } <s> public void causeDamage ( double amount , org.bukkit.entity.LivingEntity damager , life.grass.grasscombat.datatype.DamageType type ) { double damage = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { damage = amount ; } causeRawDamage ( damage ) ; } <s> [fix] arrow damage bug
bug_after_refactoring: public void causeDamage ( double amount , org.bukkit.entity.LivingEntity damager , life.grass.grasscombat.datatype.DamageType type ) { double cfockzjatyneoknsfjeq = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { cfockzjatyneoknsfjeq = amount ; } causeRawDamage ( cfockzjatyneoknsfjeq ) ; } <s> public void causeDamage ( double amount , org.bukkit.entity.LivingEntity damager , life.grass.grasscombat.datatype.DamageType type ) { double cfockzjatyneoknsfjeq = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { cfockzjatyneoknsfjeq = amount ; } causeRawDamage ( cfockzjatyneoknsfjeq ) ; } <s> [fix] arrow damage bug
fix_before_refactoring: public void causeDamage ( double amount , life.grass.grasscombat.datatype.DamageType type ) { double damage = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { damage = amount ; } causeRawDamage ( damage ) ; }
fix_after_refactoring: public void causeDamage ( double amount , life.grass.grasscombat.datatype.DamageType type ) { double cfockzjatyneoknsfjeq = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { cfockzjatyneoknsfjeq = amount ; } causeRawDamage ( cfockzjatyneoknsfjeq ) ; }
× fix_prediction_before: public void causeDamage ( double amount , org.bukkit.entity.LivingEntity damager , life.grass.grasscombat.datatype.DamageType type ) { double damage = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { damage = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { damage = amount ; } causeRawDamage ( damage ) ; }
× fix_prediction_after: public void causeDamage ( double amount , org.bukkit.entity.LivingEntity damager , life.grass.grasscombat.datatype.DamageType type ) { double cfockzjatyneoknsfjeq = 0.0 ; if ( type . equals ( DamageType.BASIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else if ( type . equals ( DamageType.MAGIC_DAMAGE ) ) { cfockzjatyneoknsfjeq = life.grass.grasscombat.utils.DamageUtil . getDefencedDamage ( amount , getArmorData ( ArmorDataType.MAGIC_DEFENCE ) , getArmorData ( ArmorDataType.PROTECTION ) ) ; } else { cfockzjatyneoknsfjeq = amount ; } causeRawDamage ( cfockzjatyneoknsfjeq ) ; }

line_index: 358
bug_before_refactoring: public java.lang.String getExtension ( final java.io.File f ) { if ( f != null ) { java.lang.String filename = f . getName () ; int i = filename . lastIndexOf ( '.' ) ; if ( ( i > 0 ) && ( i < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( i + 1 ) ) . toLowerCase () ; } } return null ; } <s> public java.lang.String getExtension ( final java.io.File f ) { if ( f != null ) { java.lang.String filename = f . getName () ; int i = filename . lastIndexOf ( '.' ) ; if ( ( i > 0 ) && ( i < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( i + 1 ) ) . toLowerCase () ; } } return null ; } <s> Use native file select dialog (java.awt.FileDialog) where possible. FileDialog doesn't support multiple file selection until 1.7 and we're still stuck at 1.6 until windowing issues are resolved. Support FilenameFilter in ExampleFileFilter; remove unused selectSingleFile method
bug_after_refactoring: public java.lang.String getExtension ( final java.io.File f ) { if ( f != null ) { java.lang.String filename = f . getName () ; int yvkyczbhkaempoartffu = filename . lastIndexOf ( '.' ) ; if ( ( yvkyczbhkaempoartffu > 0 ) && ( yvkyczbhkaempoartffu < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( yvkyczbhkaempoartffu + 1 ) ) . toLowerCase () ; } } return null ; } <s> public java.lang.String getExtension ( final java.io.File f ) { if ( f != null ) { java.lang.String filename = f . getName () ; int yvkyczbhkaempoartffu = filename . lastIndexOf ( '.' ) ; if ( ( yvkyczbhkaempoartffu > 0 ) && ( yvkyczbhkaempoartffu < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( yvkyczbhkaempoartffu + 1 ) ) . toLowerCase () ; } } return null ; } <s> Use native file select dialog (java.awt.FileDialog) where possible. FileDialog doesn't support multiple file selection until 1.7 and we're still stuck at 1.6 until windowing issues are resolved. Support FilenameFilter in ExampleFileFilter; remove unused selectSingleFile method
fix_before_refactoring: private java.lang.String getExtension ( final java.lang.String filename ) { final int i = filename . lastIndexOf ( '.' ) ; if ( ( i > 0 ) && ( i < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( i + 1 ) ) . toLowerCase () ; } return null ; }
fix_after_refactoring: private java.lang.String getExtension ( final java.lang.String filename ) { final int yvkyczbhkaempoartffu = filename . lastIndexOf ( '.' ) ; if ( ( yvkyczbhkaempoartffu > 0 ) && ( yvkyczbhkaempoartffu < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( yvkyczbhkaempoartffu + 1 ) ) . toLowerCase () ; } return null ; }
× fix_prediction_before: private java.lang.String getExtension ( final java.io.File f ) { if ( f != null ) { java.lang.String filename = f . getName () ; int i = filename . lastIndexOf ( '.' ) ; if ( ( i > 0 ) && ( i < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( i + 1 ) ) . toLowerCase () ; } } return null ; }
× fix_prediction_after: public java.lang.String getExtension ( final java.io.File f ) { if ( f != null ) { java.lang.String filename = f . getName () ; int yvkyczbhkaempoartffu = filename . lastIndexOf ( '.' ) ; if ( ( yvkyczbhkaempoartffu > 0 ) && ( yvkyczbhkaempoartffu < ( ( filename . length () ) - 1 ) ) ) { return filename . substring ( ( yvkyczbhkaempoartffu + 1 ) ) . toLowerCase () ; } } return null ; }

line_index: 359
bug_before_refactoring: { int indice = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; if ( indice == ( - 1 ) ) { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } else { inventaire . elementAt ( poche ) . contenu . elementAt ( indice ) . ajoutQte ( qte ) ; } } <s> public void add ( int poche , pokemon.modele.Objet obj , int qte ) { int indice = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; if ( indice == ( - 1 ) ) { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } else { inventaire . elementAt ( poche ) . contenu . elementAt ( indice ) . ajoutQte ( qte ) ; } } <s> bugfix Ajout d'objets dans l'inventaire
bug_after_refactoring: { int miyxpjhqblfqfuivgsfb = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; if ( miyxpjhqblfqfuivgsfb == ( - 1 ) ) { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } else { inventaire . elementAt ( poche ) . contenu . elementAt ( miyxpjhqblfqfuivgsfb ) . ajoutQte ( qte ) ; } } <s> public void add ( int poche , pokemon.modele.Objet obj , int qte ) { int miyxpjhqblfqfuivgsfb = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; if ( miyxpjhqblfqfuivgsfb == ( - 1 ) ) { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } else { inventaire . elementAt ( poche ) . contenu . elementAt ( miyxpjhqblfqfuivgsfb ) . ajoutQte ( qte ) ; } } <s> bugfix Ajout d'objets dans l'inventaire
fix_before_refactoring: { if ( inventaire . elementAt ( poche ) . contains ( obj ) ) { int indice = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; inventaire . elementAt ( poche ) . contenu . elementAt ( indice ) . ajoutQte ( qte ) ; } else { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } }
fix_after_refactoring: { if ( inventaire . elementAt ( poche ) . contains ( obj ) ) { int miyxpjhqblfqfuivgsfb = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; inventaire . elementAt ( poche ) . contenu . elementAt ( miyxpjhqblfqfuivgsfb ) . ajoutQte ( qte ) ; } else { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } }
× fix_prediction_before: { int indice = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; if ( indice == ( - 1 ) ) { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } else { inventaire . elementAt ( poche ) . contenu . elementAt ( indice ) . ajoutQte ( qte ) ; } }
× fix_prediction_after: { int miyxpjhqblfqfuivgsfb = inventaire . elementAt ( poche ) . indiceOf ( obj ) ; if ( miyxpjhqblfqfuivgsfb == ( - 1 ) ) { inventaire . elementAt ( poche ) . add ( new pokemon.modele.UniteStockage < pokemon.modele.Objet > ( obj , qte ) ) ; } else { inventaire . elementAt ( poche ) . contenu . elementAt ( miyxpjhqblfqfuivgsfb ) . ajoutQte ( qte ) ; } }

line_index: 360
bug_before_refactoring: android.util.Log . i ( logMessage , ( trapNumber + "" ) ) <s> private void generateTraps ( int limit ) { int amountOfButtons = 10 ; int trapNumber = newRandomNumberBetween ( amountOfButtons ) ; java.lang.String logMessage = getResources () . getString ( R.string.log_trap_id ) ; int amountOfTraps = 3 ; for ( int i = 0 ; i < amountOfTraps ; i ++ ) { while ( traps . contains ( trapNumber ) ) { trapNumber = newRandomNumberBetween ( amountOfButtons ) ; } android.util.Log . i ( logMessage , ( trapNumber + "" ) ) ; traps . add ( trapNumber ) ; } } <s> Solved several FindBugs issues
bug_after_refactoring: android.util.Log . i ( logMessage , ( gdvjgerfydfhvwrqmpna + "" ) ) <s> private void generateTraps ( int limit ) { int amountOfButtons = 10 ; int trapNumber = newRandomNumberBetween ( amountOfButtons ) ; java.lang.String logMessage = getResources () . getString ( R.string.log_trap_id ) ; int amountOfTraps = 3 ; for ( int i = 0 ; i < amountOfTraps ; i ++ ) { while ( traps . contains ( trapNumber ) ) { trapNumber = newRandomNumberBetween ( amountOfButtons ) ; } android.util.Log . i ( logMessage , ( gdvjgerfydfhvwrqmpna + "" ) ) ; traps . add ( trapNumber ) ; } } <s> Solved several FindBugs issues
fix_before_refactoring: android.util.Log . i ( logMessage , java.lang.Integer . toString ( trapNumber ) )
fix_after_refactoring: android.util.Log . i ( logMessage , java.lang.Integer . toString ( gdvjgerfydfhvwrqmpna ) )
× fix_prediction_before: android.util.Log . i ( logMessage , trapNumber )
× fix_prediction_after: android.util.Log . i ( logMessage , ( gdvjgerfydfhvwrqmpna + "" ) )

line_index: 363
bug_before_refactoring: { float result = data [ getIndex ] ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; return result ; } <s> public java.lang.Float get () { if ( ( getIndex ) == ( putIndex ) ) { return null ; } else { float result = data [ getIndex ] ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; return result ; } } <s> bugfixes
bug_after_refactoring: { float gagdzcpokxguyxrbnlhc = data [ getIndex ] ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; return gagdzcpokxguyxrbnlhc ; } <s> public java.lang.Float get () { if ( ( getIndex ) == ( putIndex ) ) { return null ; } else { float gagdzcpokxguyxrbnlhc = data [ getIndex ] ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; return gagdzcpokxguyxrbnlhc ; } } <s> bugfixes
fix_before_refactoring: { getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; float result = data [ getIndex ] ; return result ; }
fix_after_refactoring: { getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; float gagdzcpokxguyxrbnlhc = data [ getIndex ] ; return gagdzcpokxguyxrbnlhc ; }
× fix_prediction_before: { float result = data [ getIndex ] ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; return result ; }
× fix_prediction_after: { float gagdzcpokxguyxrbnlhc = data [ getIndex ] ; getIndex = ( ( getIndex ) + 1 ) % ( capacity ) ; return gagdzcpokxguyxrbnlhc ; }

line_index: 365
bug_before_refactoring: private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { if ( languageMap . containsKey ( languageName ) ) { int languageRepeatedInThisHour = languageMap . get ( languageName ) ; int languageRepeatedInTenMins = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( languageRepeatedInTenMins + languageRepeatedInThisHour ) ) ; } } } <s> private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { if ( languageMap . containsKey ( languageName ) ) { int languageRepeatedInThisHour = languageMap . get ( languageName ) ; int languageRepeatedInTenMins = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( languageRepeatedInTenMins + languageRepeatedInThisHour ) ) ; } } } <s> fix bug in merging langiageMaps
bug_after_refactoring: private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { if ( languageMap . containsKey ( languageName ) ) { int yvwsjkjbydqyppfntkkz = languageMap . get ( languageName ) ; int dxgzoirugsaechpdtxzw = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( dxgzoirugsaechpdtxzw + yvwsjkjbydqyppfntkkz ) ) ; } } } <s> private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { if ( languageMap . containsKey ( languageName ) ) { int yvwsjkjbydqyppfntkkz = languageMap . get ( languageName ) ; int dxgzoirugsaechpdtxzw = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( dxgzoirugsaechpdtxzw + yvwsjkjbydqyppfntkkz ) ) ; } } } <s> fix bug in merging langiageMaps
fix_before_refactoring: private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { int languageRepeatedInThisHour = 0 ; int languageRepeatedInTenMins ; if ( languageMap . containsKey ( languageName ) ) { languageRepeatedInThisHour = languageMap . get ( languageName ) ; } languageRepeatedInTenMins = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( languageRepeatedInTenMins + languageRepeatedInThisHour ) ) ; } }
fix_after_refactoring: private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { int yvwsjkjbydqyppfntkkz = 0 ; int dxgzoirugsaechpdtxzw ; if ( languageMap . containsKey ( languageName ) ) { yvwsjkjbydqyppfntkkz = languageMap . get ( languageName ) ; } dxgzoirugsaechpdtxzw = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( dxgzoirugsaechpdtxzw + yvwsjkjbydqyppfntkkz ) ) ; } }
× fix_prediction_before: private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { if ( languageMap . containsKey ( languageName ) ) { int languageRepeatedInThisHour = languageMap . get ( languageName ) ; int languageRepeatedInTenMins = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( languageRepeatedInTenMins + languageRepeatedInThisHour ) ) ; } } }
× fix_prediction_after: private void mergeLanguageMap ( java.util.concurrent.ConcurrentHashMap < java.lang.String , java.lang.Integer > tenMinLanguageMap ) { for ( java.lang.String languageName : tenMinLanguageMap . keySet () ) { if ( languageMap . containsKey ( languageName ) ) { int yvwsjkjbydqyppfntkkz = languageMap . get ( languageName ) ; int dxgzoirugsaechpdtxzw = tenMinLanguageMap . get ( languageName ) ; languageMap . put ( languageName , ( dxgzoirugsaechpdtxzw + yvwsjkjbydqyppfntkkz ) ) ; } } }

line_index: 367
bug_before_refactoring: public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } <s> Fix  Fixed a bug where first layout wasn't laid correctly
bug_after_refactoring: public void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; } <s> public void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; } <s> Fix  Fixed a bug where first layout wasn't laid correctly
fix_before_refactoring: private void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; }
fix_after_refactoring: private void toggle ( boolean toggle ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; }
× fix_prediction_before: public void toggle ( boolean toggle ) { int color ; if ( toggle ) { color = mActiveColor ; } else { color = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.color.defaultNotActiveCircle , null ) ; mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , color ) ; } }
× fix_prediction_after: public void toggle ( boolean toggle ) { if ( ! ( mActiveColor . isEmpty () ) ) { int bhstoazatvohurnpsfei ; if ( toggle ) { bhstoazatvohurnpsfei = mActiveColor ; } else { bhstoazatvohurnpsfei = android.support.v4.content.res.ResourcesCompat . getColor ( getResources () , R.bhstoazatvohurnpsfei.defaultNotActiveCircle , null ) ; } mDrawable . setStroke ( ( ( getMeasuredHeight () ) / 30 ) , bhstoazatvohurnpsfei ) ; } }

line_index: 368
bug_before_refactoring: { android.database.Cursor cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } int count = 0 ; if ( cursor . moveToFirst () ) count = cursor . getInt ( 1 ) ; closeCursor ( cursor ) ; return count ; } <s> int count ( ) throws java.lang.IllegalAccessException { android.database.Cursor cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } int count = 0 ; if ( cursor . moveToFirst () ) count = cursor . getInt ( 1 ) ; closeCursor ( cursor ) ; return count ; } <s> fixing bugs
bug_after_refactoring: { android.database.Cursor cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } int zfrvulcrqlaonvoonyis = 0 ; if ( cursor . moveToFirst () ) zfrvulcrqlaonvoonyis = cursor . getInt ( 1 ) ; closeCursor ( cursor ) ; return zfrvulcrqlaonvoonyis ; } <s> int count ( ) throws java.lang.IllegalAccessException { android.database.Cursor cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } int zfrvulcrqlaonvoonyis = 0 ; if ( cursor . moveToFirst () ) zfrvulcrqlaonvoonyis = cursor . getInt ( 1 ) ; closeCursor ( cursor ) ; return zfrvulcrqlaonvoonyis ; } <s> fixing bugs
fix_before_refactoring: { android.database.Cursor cursor = null ; int count = 0 ; try { cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } if ( cursor . moveToFirst () ) count = cursor . getInt ( 1 ) ; } finally { closeCursor ( cursor ) ; } return count ; }
fix_after_refactoring: { android.database.Cursor cursor = null ; int zfrvulcrqlaonvoonyis = 0 ; try { cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } if ( cursor . moveToFirst () ) zfrvulcrqlaonvoonyis = cursor . getInt ( 1 ) ; } finally { closeCursor ( cursor ) ; } return zfrvulcrqlaonvoonyis ; }
× fix_prediction_before: { android.database.Cursor cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } int count = 0 ; if ( cursor . moveToFirst () ) count = cursor . getInt ( 1 ) ; return count ; }
× fix_prediction_after: { android.database.Cursor cursor = buildCount () ; if ( cursor == null ) { throw new java.lang.IllegalAccessException ( "result has been cosumed, please do a query again." ) ; } int zfrvulcrqlaonvoonyis = 0 ; if ( cursor . moveToFirst () ) zfrvulcrqlaonvoonyis = cursor . getInt ( 1 ) ; closeCursor ( cursor ) ; return zfrvulcrqlaonvoonyis ; }

line_index: 369
bug_before_refactoring: duration = 100 <s> @ java.lang.Override public void performancesChanged ( java.lang.String connId , int exchangesCompleted ) { long duration = 100 ; final org.talend.core.model.process.IConnection conn = traceConnectionsManager . finConnectionByUniqueName ( connId ) ; final org.talend.core.model.runprocess.data.PerformanceData perfData = new org.talend.core.model.runprocess.data.PerformanceData ( ( ( ( ( connId + "|" ) + exchangesCompleted ) + "|" ) + duration ) ) ; processPerformances ( ( ( ( ( connId + "|" ) + exchangesCompleted ) + "|" ) + duration ) , perfData , conn ) ; startTime = java.lang.System . currentTimeMillis () ; } <s> TESB-19381: Fixed JMX connection number calculate problem
bug_after_refactoring: qyolbaqnfxmdwkxjrdrv = 100 <s> @ java.lang.Override public void performancesChanged ( java.lang.String connId , int exchangesCompleted ) { long qyolbaqnfxmdwkxjrdrv = 100 ; final org.talend.core.model.process.IConnection conn = traceConnectionsManager . finConnectionByUniqueName ( connId ) ; final org.talend.core.model.runprocess.data.PerformanceData perfData = new org.talend.core.model.runprocess.data.PerformanceData ( ( ( ( ( connId + "|" ) + exchangesCompleted ) + "|" ) + duration ) ) ; processPerformances ( ( ( ( ( connId + "|" ) + exchangesCompleted ) + "|" ) + duration ) , perfData , conn ) ; startTime = java.lang.System . currentTimeMillis () ; } <s> TESB-19381: Fixed JMX connection number calculate problem
fix_before_refactoring: duration = ( java.lang.System . currentTimeMillis () ) - ( startTime )
fix_after_refactoring: qyolbaqnfxmdwkxjrdrv = ( java.lang.System . currentTimeMillis () ) - ( startTime )
× fix_prediction_before: duration = 0
× fix_prediction_after: qyolbaqnfxmdwkxjrdrv = 100

line_index: 370
bug_before_refactoring: { this . port = port ; try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] receiveData = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( receiveData ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } } <s> public void start ( int port ) { this . port = port ; try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] receiveData = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( receiveData ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } } <s> BIG update  -you can stop and start multiple times (before was stopped once and restart) -ui fixes -you can set port -you can only run 1 server at a time -I can't find any bugs so far!
bug_after_refactoring: { this . port = port ; try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] ttuhcgsuzljkokmaetrf = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( ttuhcgsuzljkokmaetrf ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } } <s> public void start ( int port ) { this . port = port ; try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] ttuhcgsuzljkokmaetrf = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( ttuhcgsuzljkokmaetrf ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } } <s> BIG update  -you can stop and start multiple times (before was stopped once and restart) -ui fixes -you can set port -you can only run 1 server at a time -I can't find any bugs so far!
fix_before_refactoring: { this . port = port ; if ( ! ( on ) ) { try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] receiveData = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( receiveData ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } } }
fix_after_refactoring: { this . port = port ; if ( ! ( on ) ) { try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] ttuhcgsuzljkokmaetrf = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( ttuhcgsuzljkokmaetrf ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } } }
× fix_prediction_before: { try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] receiveData = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( receiveData ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } }
× fix_prediction_after: { try { serverSocket = new java.net.DatagramSocket ( port ) ; byte [] ttuhcgsuzljkokmaetrf = new byte [ 1024 ] ; java.lang.System.out . println ( ( "Starting on port " + port ) ) ; on = true ; run ( ttuhcgsuzljkokmaetrf ) ; } catch ( java.net.SocketException e ) { e . printStackTrace () ; } }

line_index: 371
bug_before_refactoring: { initServletContextObject () ; com.tu.accountingview.model.GroupActVO groupactVO = new com.tu.accountingview.model.GroupActVO () ; int oneactId = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; groupactVO = accountingviewBean . doGetAllValidateDetails ( oneactId ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , oneactId ) ; return "ShowValidateDetails" ; } <s> public java.lang.String doshowValidateDetails () { initServletContextObject () ; com.tu.accountingview.model.GroupActVO groupactVO = new com.tu.accountingview.model.GroupActVO () ; int oneactId = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; groupactVO = accountingviewBean . doGetAllValidateDetails ( oneactId ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , oneactId ) ; return "ShowValidateDetails" ; } <s> Fix SONAR issues
bug_after_refactoring: { initServletContextObject () ; com.tu.accountingview.model.GroupActVO groupactVO = new com.tu.accountingview.model.GroupActVO () ; int cytlpspuprzbxxxyzjfb = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; groupactVO = accountingviewBean . doGetAllValidateDetails ( cytlpspuprzbxxxyzjfb ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , cytlpspuprzbxxxyzjfb ) ; return "ShowValidateDetails" ; } <s> public java.lang.String doshowValidateDetails () { initServletContextObject () ; com.tu.accountingview.model.GroupActVO groupactVO = new com.tu.accountingview.model.GroupActVO () ; int cytlpspuprzbxxxyzjfb = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; groupactVO = accountingviewBean . doGetAllValidateDetails ( cytlpspuprzbxxxyzjfb ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , cytlpspuprzbxxxyzjfb ) ; return "ShowValidateDetails" ; } <s> Fix SONAR issues
fix_before_refactoring: { initServletContextObject () ; int oneactId = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; com.tu.accountingview.model.GroupActVO groupactVO = accountingviewBean . doGetAllValidateDetails ( oneactId ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , oneactId ) ; return "ShowValidateDetails" ; }
fix_after_refactoring: { initServletContextObject () ; int cytlpspuprzbxxxyzjfb = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; com.tu.accountingview.model.GroupActVO groupactVO = accountingviewBean . doGetAllValidateDetails ( cytlpspuprzbxxxyzjfb ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , cytlpspuprzbxxxyzjfb ) ; return "ShowValidateDetails" ; }
× fix_prediction_before: { com.tu.accountingview.model.GroupActVO groupactVO = new com.tu.accountingview.model.GroupActVO () ; int oneactId = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; groupactVO = accountingviewBean . doGetAllValidateDetails ( oneactId ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , oneactId ) ; return "ShowValidateDetails" ; }
× fix_prediction_after: { initServletContextObject () ; com.tu.accountingview.model.GroupActVO groupactVO = new com.tu.accountingview.model.GroupActVO () ; int cytlpspuprzbxxxyzjfb = java.lang.Integer . parseInt ( request . getParameter ( "actId" ) ) ; groupactVO = accountingviewBean . doGetAllValidateDetails ( cytlpspuprzbxxxyzjfb ) ; request . setAttribute ( "act" , groupactVO ) ; request . setAttribute ( "actId" , cytlpspuprzbxxxyzjfb ) ; return "ShowValidateDetails" ; }

line_index: 372
bug_before_refactoring: if ( firstPos >= 0 ) { return postsIds . get ( mGridView . getFirstVisiblePosition () ) ; } else { return 0 ; } <s> public int getLastPosition () { if ( ( ( mGridView ) == null ) || ( ( postsIds ) == null ) ) { return 0 ; } int firstPos = mGridView . getFirstVisiblePosition () ; if ( firstPos >= 0 ) { return postsIds . get ( mGridView . getFirstVisiblePosition () ) ; } else { return 0 ; } } <s> Critical bug fix for production  Fixed bug which causes crash during startup.
bug_after_refactoring: if ( dbwtpdubpyltmtbjphwr >= 0 ) { return postsIds . get ( mGridView . getFirstVisiblePosition () ) ; } else { return 0 ; } <s> public int getLastPosition () { if ( ( ( mGridView ) == null ) || ( ( postsIds ) == null ) ) { return 0 ; } int firstPos = mGridView . getFirstVisiblePosition () ; if ( dbwtpdubpyltmtbjphwr >= 0 ) { return postsIds . get ( mGridView . getFirstVisiblePosition () ) ; } else { return 0 ; } } <s> Critical bug fix for production  Fixed bug which causes crash during startup.
fix_before_refactoring: if ( ( firstPos >= 0 ) && ( firstPos < ( postsIds . size () ) ) ) { return postsIds . get ( firstPos ) ; } else { return 0 ; }
fix_after_refactoring: if ( ( dbwtpdubpyltmtbjphwr >= 0 ) && ( dbwtpdubpyltmtbjphwr < ( postsIds . size () ) ) ) { return postsIds . get ( dbwtpdubpyltmtbjphwr ) ; } else { return 0 ; }
× fix_prediction_before: if ( firstPos >= 0 ) { return postsIds . get ( mGridView . getFirstVisiblePosition () ) ; } else { return 0 ; }
× fix_prediction_after: if ( dbwtpdubpyltmtbjphwr >= 0 ) { return postsIds . get ( mGridView . getFirstVisiblePosition () ) ; } else { return 0 ; }

line_index: 373
bug_before_refactoring: for ( ; i < ( ( start + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) - 1 ) ; i ++ ) { if ( ( courses [ i ] ) != null ) { return false ; } } <s> private boolean isRowEmpty ( int startingPosition ) { int i = startingPosition ; while ( i >= 0 ) { if ( ( i % ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) == 0 ) break; i -- ; } int start = i ; for ( ; i < ( ( start + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) - 1 ) ; i ++ ) { if ( ( courses [ i ] ) != null ) { return false ; } } return true ; } <s> bug fix
bug_after_refactoring: for ( ; vuvvcddgpdfdpxspyuie < ( ( bpgfibshtyffdaofjlny + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) - 1 ) ; vuvvcddgpdfdpxspyuie ++ ) { if ( ( courses [ vuvvcddgpdfdpxspyuie ] ) != null ) { return false ; } } <s> private boolean isRowEmpty ( int startingPosition ) { int i = startingPosition ; while ( i >= 0 ) { if ( ( i % ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) == 0 ) break; i -- ; } int start = i ; for ( ; vuvvcddgpdfdpxspyuie < ( ( bpgfibshtyffdaofjlny + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) - 1 ) ; vuvvcddgpdfdpxspyuie ++ ) { if ( ( courses [ vuvvcddgpdfdpxspyuie ] ) != null ) { return false ; } } return true ; } <s> bug fix
fix_before_refactoring: for ( ; i < ( start + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) ; i ++ ) { if ( ( courses [ i ] ) != null ) { return false ; } }
fix_after_refactoring: for ( ; vuvvcddgpdfdpxspyuie < ( bpgfibshtyffdaofjlny + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) ; vuvvcddgpdfdpxspyuie ++ ) { if ( ( courses [ vuvvcddgpdfdpxspyuie ] ) != null ) { return false ; } }
× fix_prediction_before: for ( ; i < ( ( start + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) - 1 ) ; i ++ ) { if ( ( courses [ i ] ) != null ) { return false ; } }
× fix_prediction_after: for ( ; vuvvcddgpdfdpxspyuie < ( ( bpgfibshtyffdaofjlny + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) - 1 ) ; vuvvcddgpdfdpxspyuie ++ ) { if ( ( courses [ vuvvcddgpdfdpxspyuie ] ) != null ) { return false ; } }

line_index: 374
bug_before_refactoring: private static org.jfree.data.xy.XYSeriesCollection createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int nRows = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < nRows ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; return seriesCollection ; } <s> private static org.jfree.data.xy.XYSeriesCollection createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int nRows = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < nRows ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; return seriesCollection ; } <s> Code cleanup. Fixes bugs in MultiTimestepRegression chart.
bug_after_refactoring: private static org.jfree.data.xy.XYSeriesCollection createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int jursgzfibqqfwlasdfgn = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < jursgzfibqqfwlasdfgn ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; return seriesCollection ; } <s> private static org.jfree.data.xy.XYSeriesCollection createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int jursgzfibqqfwlasdfgn = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < jursgzfibqqfwlasdfgn ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; return seriesCollection ; } <s> Code cleanup. Fixes bugs in MultiTimestepRegression chart.
fix_before_refactoring: private static void createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int nRows = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < nRows ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; }
fix_after_refactoring: private static void createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int jursgzfibqqfwlasdfgn = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < jursgzfibqqfwlasdfgn ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; }
× fix_prediction_before: private static org.jfree.data.xy.XYSeriesCollection createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < nRows ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; return seriesCollection ; }
× fix_prediction_after: private static org.jfree.data.xy.XYSeriesCollection createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < jursgzfibqqfwlasdfgn ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; return seriesCollection ; }

line_index: 375
bug_before_refactoring: { flag = false ; foo . set ( x , y ) ; } <s> private void addPlayer ( int id , int x , int y ) { boolean flag = true ; for ( player.Player foo : players ) { if ( ( foo . getID () ) == id ) { flag = false ; foo . set ( x , y ) ; } } if ( flag ) { players . add ( new player.Player ( id ) ) ; } } <s> optimize client map generation  fix issues with changing rooms
bug_after_refactoring: { lilpfymhzafxsymxizgm = false ; foo . set ( x , y ) ; } <s> private void addPlayer ( int id , int x , int y ) { boolean flag = true ; for ( player.Player foo : players ) { if ( ( foo . getID () ) == id ) { lilpfymhzafxsymxizgm = false ; foo . set ( x , y ) ; } } if ( flag ) { players . add ( new player.Player ( id ) ) ; } } <s> optimize client map generation  fix issues with changing rooms
fix_before_refactoring: { flag = false ; foo . set ( x , y ) ; break; }
fix_after_refactoring: { lilpfymhzafxsymxizgm = false ; foo . set ( x , y ) ; break; }
× fix_prediction_before: { flag = false ; foo . set ( x , y ) ; }
× fix_prediction_after: { foo . set ( x , y ) ; }

line_index: 377
bug_before_refactoring: ( bs < 0 ) ? - bs : bs <s> public double getTravelTimeAfter ( final double time ) { final int bs = departures . binarySearch ( time ) ; final int index = ( bs < 0 ) ? - bs : bs ; final double tt = ( arrivals . get ( index ) ) - ( departures . get ( index ) ) ; assert tt >= 0 ; return tt ; } <s> test and fix  + solve problem when getting score before next trip realized
bug_after_refactoring: ( wawvkntaiyquwvkfkgzy < 0 ) ? - wawvkntaiyquwvkfkgzy : wawvkntaiyquwvkfkgzy <s> public double getTravelTimeAfter ( final double time ) { final int bs = departures . binarySearch ( time ) ; final int index = ( wawvkntaiyquwvkfkgzy < 0 ) ? - wawvkntaiyquwvkfkgzy : wawvkntaiyquwvkfkgzy ; final double tt = ( arrivals . get ( index ) ) - ( departures . get ( index ) ) ; assert tt >= 0 ; return tt ; } <s> test and fix  + solve problem when getting score before next trip realized
fix_before_refactoring: ( bs < 0 ) ? ( - bs ) - 1 : bs
fix_after_refactoring: ( wawvkntaiyquwvkfkgzy < 0 ) ? ( - wawvkntaiyquwvkfkgzy ) - 1 : wawvkntaiyquwvkfkgzy
× fix_prediction_before: ( bs < 0 ) ? bs : bs
× fix_prediction_after: ( wawvkntaiyquwvkfkgzy < 0 ) ? - wawvkntaiyquwvkfkgzy : wawvkntaiyquwvkfkgzy

line_index: 381
bug_before_refactoring: if ( ( ! preEndGame ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; } <s> public void letAImove () { int pushMousePointingColumn = mousePointingcolumn ; boolean preEndGame = gameController . isFinish () ; if ( ( mousePointingcolumn = gameController . getAITurn () ) < 0 ) { mousePointingcolumn = pushMousePointingColumn ; return; } if ( ( ! preEndGame ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; } } <s> Fixed a bug where AI can make its move when the game is finished
bug_after_refactoring: if ( ( ! htgycvkyjpakzzpiskri ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; } <s> public void letAImove () { int pushMousePointingColumn = mousePointingcolumn ; boolean preEndGame = gameController . isFinish () ; if ( ( mousePointingcolumn = gameController . getAITurn () ) < 0 ) { mousePointingcolumn = pushMousePointingColumn ; return; } if ( ( ! htgycvkyjpakzzpiskri ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; } } <s> Fixed a bug where AI can make its move when the game is finished
fix_before_refactoring: if ( ( ! preEndGame ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; mousePointingcolumn = pushMousePointingColumn ; } else { return; }
fix_after_refactoring: if ( ( ! htgycvkyjpakzzpiskri ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; mousePointingcolumn = pushMousePointingColumn ; } else { return; }
× fix_prediction_before: if ( ( ! preEndGame ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; }
× fix_prediction_after: if ( ( ! htgycvkyjpakzzpiskri ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; }

line_index: 383
bug_before_refactoring: private void setToolbarColor ( android.support.v7.graphics.Palette palette ) { int defaultDarkColor = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( defaultDarkColor ) ) ; } } <s> private void setToolbarColor ( android.support.v7.graphics.Palette palette ) { int defaultDarkColor = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( defaultDarkColor ) ) ; } } <s> bug fix and border color change
bug_after_refactoring: private void setToolbarColor ( android.support.v7.graphics.Palette palette ) { int hjsuabrqddmkcwmnszip = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( hjsuabrqddmkcwmnszip ) ) ; } } <s> private void setToolbarColor ( android.support.v7.graphics.Palette palette ) { int hjsuabrqddmkcwmnszip = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( hjsuabrqddmkcwmnszip ) ) ; } } <s> bug fix and border color change
fix_before_refactoring: private void setStatusBarColor ( android.support.v7.graphics.Palette palette ) { int defaultDarkColor = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( defaultDarkColor ) ) ; } }
fix_after_refactoring: private void setStatusBarColor ( android.support.v7.graphics.Palette palette ) { int hjsuabrqddmkcwmnszip = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( hjsuabrqddmkcwmnszip ) ) ; } }
× fix_prediction_before: private void setToolbarColor ( android.support.v7.graphics.Palette palette ) { int defaultDarkColor = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( defaultDarkColor ) ) ; } }
× fix_prediction_after: private void setToolbarColor ( android.support.v7.graphics.Palette palette ) { int hjsuabrqddmkcwmnszip = android.support.v4.content.ContextCompat . getColor ( getApplicationContext () , R.color.colorPrimaryDark ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { android.view.Window window = getWindow () ; window . addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window . setStatusBarColor ( palette . getDarkVibrantColor ( hjsuabrqddmkcwmnszip ) ) ; } }

line_index: 384
bug_before_refactoring: { int idx = ( base ) + ( columns . simpleIdx ( column ) ) ; if ( idx < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; data . setCell ( idx , value , info ) ; } <s> public void addCell ( org.apache.cassandra.config.ColumnDefinition column , java.nio.ByteBuffer value , org.apache.cassandra.db.rows.LivenessInfo info ) { int idx = ( base ) + ( columns . simpleIdx ( column ) ) ; if ( idx < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; data . setCell ( idx , value , info ) ; } <s> fix 8099 bug
bug_after_refactoring: { int bjrnzcqfmxzrxappgqsc = ( base ) + ( columns . simpleIdx ( column ) ) ; if ( bjrnzcqfmxzrxappgqsc < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; data . setCell ( bjrnzcqfmxzrxappgqsc , value , info ) ; } <s> public void addCell ( org.apache.cassandra.config.ColumnDefinition column , java.nio.ByteBuffer value , org.apache.cassandra.db.rows.LivenessInfo info ) { int bjrnzcqfmxzrxappgqsc = ( base ) + ( columns . simpleIdx ( column ) ) ; if ( bjrnzcqfmxzrxappgqsc < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; data . setCell ( bjrnzcqfmxzrxappgqsc , value , info ) ; } <s> fix 8099 bug
fix_before_refactoring: { int idx = columns . simpleIdx ( column ) ; if ( idx < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; idx += base ; data . setCell ( idx , value , info ) ; }
fix_after_refactoring: { int bjrnzcqfmxzrxappgqsc = columns . simpleIdx ( column ) ; if ( bjrnzcqfmxzrxappgqsc < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; bjrnzcqfmxzrxappgqsc += base ; data . setCell ( bjrnzcqfmxzrxappgqsc , value , info ) ; }
× fix_prediction_before: { int idx = ( base ) + ( columns . simpleIdx ( column ) ) ; if ( idx < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; data . setCell ( idx , value , info ) ; }
× fix_prediction_after: { int bjrnzcqfmxzrxappgqsc = ( base ) + ( columns . simpleIdx ( column ) ) ; if ( bjrnzcqfmxzrxappgqsc < 0 ) throw new java.lang.RuntimeException ( ( ( ( "Cannot find column " + ( column.name ) ) + " in " ) + ( columns ) ) ) ; data . setCell ( bjrnzcqfmxzrxappgqsc , value , info ) ; }

line_index: 385
bug_before_refactoring: { if ( c == '#' ) { processComment () ; } else if ( c == '\n' ) { ( lineNumber ) ++ ; } } <s> protected int skipWSC ( ) throws java.io.IOException , org.openrdf.rio.RDFHandlerException { int c = readCodePoint () ; while ( ( org.openrdf.rio.turtle.TurtleUtil . isWhitespace ( c ) ) || ( c == '#' ) ) { if ( c == '#' ) { processComment () ; } else if ( c == '\n' ) { ( lineNumber ) ++ ; } } unread ( c ) ; return c ; } <s> SES-2172 fixed bug in skipWSC introduced by backport merge
bug_after_refactoring: { if ( aochjvsaoixjfpknizsf == '#' ) { processComment () ; } else if ( aochjvsaoixjfpknizsf == '\n' ) { ( lineNumber ) ++ ; } } <s> protected int skipWSC ( ) throws java.io.IOException , org.openrdf.rio.RDFHandlerException { int c = readCodePoint () ; while ( ( org.openrdf.rio.turtle.TurtleUtil . isWhitespace ( c ) ) || ( c == '#' ) ) { if ( aochjvsaoixjfpknizsf == '#' ) { processComment () ; } else if ( aochjvsaoixjfpknizsf == '\n' ) { ( lineNumber ) ++ ; } } unread ( c ) ; return c ; } <s> SES-2172 fixed bug in skipWSC introduced by backport merge
fix_before_refactoring: { if ( c == '#' ) { processComment () ; } else if ( c == '\n' ) { ( lineNumber ) ++ ; } c = readCodePoint () ; }
fix_after_refactoring: { if ( aochjvsaoixjfpknizsf == '#' ) { processComment () ; } else if ( aochjvsaoixjfpknizsf == '\n' ) { ( lineNumber ) ++ ; } aochjvsaoixjfpknizsf = readCodePoint () ; }
× fix_prediction_before: { if ( c == '#' ) { processComment () ; } else if ( c == '\n' ) { ( lineNumber ) ++ ; } }
× fix_prediction_after: { if ( aochjvsaoixjfpknizsf == '#' ) { processComment () ; } else if ( aochjvsaoixjfpknizsf == '\n' ) { ( lineNumber ) ++ ; } }

line_index: 386
bug_before_refactoring: imageService . getLacDataForGene ( acc , topLevelMa , overview , model ) <s> @ org.springframework.web.bind.annotation.RequestMapping ( value = "/impcImages/laczimages/{acc}/{topLevelMa}" ) public java.lang.String laczImages ( @ org.springframework.web.bind.annotation.PathVariable java.lang.String acc , @ org.springframework.web.bind.annotation.PathVariable java.lang.String topLevelMa , org.springframework.ui.Model model ) throws java.io.IOException , java.net.URISyntaxException , org.apache.solr.client.solrj.SolrServerException { java.lang.System.out . println ( "calling laczImages web page" ) ; addGeneSymbolToPage ( acc , model ) ; boolean overview = false ; imageService . getLacDataForGene ( acc , topLevelMa , overview , model ) ; return "laczImages" ; } <s> Merge branch 'master' of https://github.com/mpi2/PhenotypeArchive  # By jwgwarren # Via jwgwarren * 'master' of https://github.com/mpi2/PhenotypeArchive:   minor edit of expression column header   fixed bug with not expressed not working   some specimen stats and icons for the adult expression table   Beginings of a expression overview table - stats no icons
bug_after_refactoring: imageService . getLacDataForGene ( acc , topLevelMa , dbsrpdggfvsxgtnwivzl , model ) <s> @ org.springframework.web.bind.annotation.RequestMapping ( value = "/impcImages/laczimages/{acc}/{topLevelMa}" ) public java.lang.String laczImages ( @ org.springframework.web.bind.annotation.PathVariable java.lang.String acc , @ org.springframework.web.bind.annotation.PathVariable java.lang.String topLevelMa , org.springframework.ui.Model model ) throws java.io.IOException , java.net.URISyntaxException , org.apache.solr.client.solrj.SolrServerException { java.lang.System.out . println ( "calling laczImages web page" ) ; addGeneSymbolToPage ( acc , model ) ; boolean overview = false ; imageService . getLacDataForGene ( acc , topLevelMa , dbsrpdggfvsxgtnwivzl , model ) ; return "laczImages" ; } <s> Merge branch 'master' of https://github.com/mpi2/PhenotypeArchive  # By jwgwarren # Via jwgwarren * 'master' of https://github.com/mpi2/PhenotypeArchive:   minor edit of expression column header   fixed bug with not expressed not working   some specimen stats and icons for the adult expression table   Beginings of a expression overview table - stats no icons
fix_before_refactoring: imageService . getLacDataForGene ( acc , topLevelMa , overview , false , model )
fix_after_refactoring: imageService . getLacDataForGene ( acc , topLevelMa , dbsrpdggfvsxgtnwivzl , false , model )
× fix_prediction_before: imageService . getLacDataForGene ( acc , topLevelMa , overview , model )
× fix_prediction_after: imageService . getLacDataForGene ( acc , topLevelMa , dbsrpdggfvsxgtnwivzl , model )

line_index: 388
bug_before_refactoring: for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive . getEntries () ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { useBoot14Layout = true ; break; } } <s> public java.net.URLClassLoader createClassLoader () { boolean useBoot14Layout = false ; for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive . getEntries () ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { useBoot14Layout = true ; break; } } org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.ClassLoaderExposingLauncher launcher = ( useBoot14Layout ) ? new org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.Boot14ClassLoaderExposingLauncher () : new org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.Boot13ClassLoaderExposingLauncher () ; return launcher . createClassLoader () ; } <s> Upgrade to boot 1.4  Fixes spring-cloud/spring-cloud-dataflow/issues/887
bug_after_refactoring: for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive . getEntries () ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { ymjgktelxzipdltkzwns = true ; break; } } <s> public java.net.URLClassLoader createClassLoader () { boolean useBoot14Layout = false ; for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive . getEntries () ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { ymjgktelxzipdltkzwns = true ; break; } } org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.ClassLoaderExposingLauncher launcher = ( useBoot14Layout ) ? new org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.Boot14ClassLoaderExposingLauncher () : new org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.Boot13ClassLoaderExposingLauncher () ; return launcher . createClassLoader () ; } <s> Upgrade to boot 1.4  Fixes spring-cloud/spring-cloud-dataflow/issues/887
fix_before_refactoring: for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { useBoot14Layout = true ; break; } }
fix_after_refactoring: for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { ymjgktelxzipdltkzwns = true ; break; } }
× fix_prediction_before: for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive . getEntries () ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { useBoot14Layout = true ; break; } }
× fix_prediction_after: for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive . getEntries () ) { if ( ( entry . getName () ) != null ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { ymjgktelxzipdltkzwns = true ; break; } } }

line_index: 390
bug_before_refactoring: { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int uploadLimit = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( uploadLimit != 0 ) { org.edagarli.framework.helper.UploadHelper.servletFileUpload . setFileSizeMax ( ( ( uploadLimit * 1024 ) * 1024 ) ) ; } } <s> public static void init ( javax.servlet.ServletContext servletContext ) { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int uploadLimit = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( uploadLimit != 0 ) { org.edagarli.framework.helper.UploadHelper.servletFileUpload . setFileSizeMax ( ( ( uploadLimit * 1024 ) * 1024 ) ) ; } } <s> fix  #2 #3 bugs
bug_after_refactoring: { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int yzuhjyghnhdkordvtwpi = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( yzuhjyghnhdkordvtwpi != 0 ) { org.edagarli.framework.helper.UploadHelper.servletFileUpload . setFileSizeMax ( ( ( yzuhjyghnhdkordvtwpi * 1024 ) * 1024 ) ) ; } } <s> public static void init ( javax.servlet.ServletContext servletContext ) { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int yzuhjyghnhdkordvtwpi = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( yzuhjyghnhdkordvtwpi != 0 ) { org.edagarli.framework.helper.UploadHelper.servletFileUpload . setFileSizeMax ( ( ( yzuhjyghnhdkordvtwpi * 1024 ) * 1024 ) ) ; } } <s> fix  #2 #3 bugs
fix_before_refactoring: { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int uploadLimit = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( uploadLimit != 0 ) { org.edagarli.framework.helper.UploadHelper.servletFileUpload . setFileSizeMax ( ( ( uploadLimit * 1024 ) * 1024 ) ) ; } }
fix_after_refactoring: { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int yzuhjyghnhdkordvtwpi = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( yzuhjyghnhdkordvtwpi != 0 ) { org.edagarli.framework.helper.UploadHelper.servletFileUpload . setFileSizeMax ( ( ( yzuhjyghnhdkordvtwpi * 1024 ) * 1024 ) ) ; } }
× fix_prediction_before: { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int uploadLimit = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( uploadLimit != 0 ) { org.edagarli.framework
× fix_prediction_after: { java.io.File repository = ( ( java.io.File ) ( servletContext . getAttribute ( "javax.servlet.context.tempdir" ) ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; org.edagarli.framework.helper.UploadHelper.servletFileUpload = new org.apache.commons.fileupload.servlet.ServletFileUpload ( new org.apache.commons.fileupload.disk.DiskFileItemFactory ( org.apache.commons.fileupload.disk.DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD , repository ) ) ; int yzuhjyghnhdkordvtwpi = org.edagarli.framework.helper.ConfigHelper . getAppUploadLimit () ; if ( yz

line_index: 391
bug_before_refactoring: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + state ) ) ; return state ; } <s> public int logoutUser ( java.lang.String username ) { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + state ) ) ; return state ; } <s> bugFix
bug_after_refactoring: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + rrgxhocehqdcfcyndheo ) ) ; return rrgxhocehqdcfcyndheo ; } <s> public int logoutUser ( java.lang.String username ) { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } java.lang.System.out . println ( ( ( "[Server][Service]" + "RETURN LOGOUT = " ) + rrgxhocehqdcfcyndheo ) ) ; return rrgxhocehqdcfcyndheo ; } <s> bugFix
fix_before_refactoring: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } return state ; }
fix_after_refactoring: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 1 ; } else { rrgxhocehqdcfcyndheo = 0 ; } return rrgxhocehqdcfcyndheo ; }
× fix_prediction_before: { int state ; boolean userExist ; boolean active ; userExist = database . usernameExist ( username ) ; active = database . getActive ( username ) ; if ( userExist && active ) { database . userActive ( username , false ) ; state = 1 ; } else { state = 0 ; } return 0 ; }
× fix_prediction_after: { int rrgxhocehqdcfcyndheo ; boolean tkwwhgjdsbwwbqahalub ; boolean iggydaqjachcebjovppb ; tkwwhgjdsbwwbqahalub = database . usernameExist ( username ) ; iggydaqjachcebjovppb = database . getActive ( username ) ; if ( tkwwhgjdsbwwbqahalub && iggydaqjachcebjovppb ) { database . userActive ( username , false ) ; rrgxhocehqdcfcyndheo = 0 ; } else { rrgxhocehqdcfcyndheo = 0 ; } return rrgxhocehqdcfcyndheo ; }

line_index: 392
bug_before_refactoring: { hans . setLocationArray () ; java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { isAlive = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } } <s> public static void main ( java.lang.String [] args ) { SimpleDotCom hans = new SimpleDotCom () ; ReadyBakeInput inny = new ReadyBakeInput () ; boolean isAlive = true ; java.lang.System.out . println ( "Hans the dotcom yet lives. Make him run! Enter numbers 0-6 to hit him. 3 consecutive hits will kill him. " ) ; while ( isAlive == true ) { hans . setLocationArray () ; java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { isAlive = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } } } <s> Adding in library functionality to fix bugs. not working as of yet
bug_after_refactoring: { hans . setLocationArray () ; java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { vvcoznwjtwdtuftbcqmd = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } } <s> public static void main ( java.lang.String [] args ) { SimpleDotCom hans = new SimpleDotCom () ; ReadyBakeInput inny = new ReadyBakeInput () ; boolean isAlive = true ; java.lang.System.out . println ( "Hans the dotcom yet lives. Make him run! Enter numbers 0-6 to hit him. 3 consecutive hits will kill him. " ) ; while ( isAlive == true ) { hans . setLocationArray () ; java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { vvcoznwjtwdtuftbcqmd = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } } } <s> Adding in library functionality to fix bugs. not working as of yet
fix_before_refactoring: { java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { isAlive = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } }
fix_after_refactoring: { java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { vvcoznwjtwdtuftbcqmd = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } }
× fix_prediction_before: { hans . setLocationArray () ; java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; if ( result == "kill" ) { isAlive = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } }
× fix_prediction_after: { hans . setLocationArray () ; java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; if ( result == "kill" ) { vvcoznwjtwdtuftbcqmd = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } }

line_index: 393
bug_before_refactoring: { int expectedSum = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; int realSum = 0 ; for ( int i : A ) { realSum += i ; } return expectedSum - realSum ; } <s> public int solution ( int [] A ) { int expectedSum = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; int realSum = 0 ; for ( int i : A ) { realSum += i ; } return expectedSum - realSum ; } <s> fixed problem with long numbers
bug_after_refactoring: { int gdqsxocjwqysphboiskg = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; int rmquwyhlayxayvgbhdxr = 0 ; for ( int i : A ) { rmquwyhlayxayvgbhdxr += i ; } return gdqsxocjwqysphboiskg - rmquwyhlayxayvgbhdxr ; } <s> public int solution ( int [] A ) { int gdqsxocjwqysphboiskg = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; int rmquwyhlayxayvgbhdxr = 0 ; for ( int i : A ) { rmquwyhlayxayvgbhdxr += i ; } return gdqsxocjwqysphboiskg - rmquwyhlayxayvgbhdxr ; } <s> fixed problem with long numbers
fix_before_refactoring: { long expectedSum = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; long realSum = 0 ; for ( int i : A ) { realSum = realSum + ( new java.lang.Long ( i ) ) ; } return new java.lang.Long ( ( expectedSum - realSum ) ) . intValue () ; }
fix_after_refactoring: { long gdqsxocjwqysphboiskg = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; long rmquwyhlayxayvgbhdxr = 0 ; for ( int i : A ) { rmquwyhlayxayvgbhdxr = rmquwyhlayxayvgbhdxr + ( new java.lang.Long ( i ) ) ; } return new java.lang.Long ( ( gdqsxocjwqysphboiskg - rmquwyhlayxayvgbhdxr ) ) . intValue () ; }
× fix_prediction_before: { int expectedSum = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; int realSum = 0 ; for ( int i = 0 ; i < ( ( A.length ) - 1 ) ; i ++ ) { realSum += i ; } return actualSum - realSum ; }
× fix_prediction_after: { int gdqsxocjwqysphboiskg = ( ( ( A.length ) + 1 ) * ( ( A.length ) + 2 ) ) / 2 ; int rmquwyhlayxayvgbhdxr = 0 ; for ( int i = 0 ; i < ( A.length ) ; i ++ ) { rmquwyhlayxayvgbhdxr += i ; } return gdqsxocjwqysphboiskg - rmquwyhlayxayvgbhdxr ; }

line_index: 394
bug_before_refactoring: { int tempPos = ( pos ) + 1 ; if ( ( tempPos + 1 ) >= ( input . length () ) ) return false ; char c = input . charAt ( tempPos ) ; while ( isWhitespace () ) { ++ tempPos ; if ( tempPos >= ( input . length () ) ) return false ; c = input . charAt ( tempPos ) ; } return c == expectedChar ; } <s> public boolean isLookaheadIgnoreWhitespace ( char expectedChar ) { int tempPos = ( pos ) + 1 ; if ( ( tempPos + 1 ) >= ( input . length () ) ) return false ; char c = input . charAt ( tempPos ) ; while ( isWhitespace () ) { ++ tempPos ; if ( tempPos >= ( input . length () ) ) return false ; c = input . charAt ( tempPos ) ; } return c == expectedChar ; } <s> BUG FIX we did not check local c variable instead we check global c variable
bug_after_refactoring: { int uogvttaldgbgaatgehhj = ( pos ) + 1 ; if ( ( uogvttaldgbgaatgehhj + 1 ) >= ( input . length () ) ) return false ; char ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; while ( isWhitespace () ) { ++ uogvttaldgbgaatgehhj ; if ( uogvttaldgbgaatgehhj >= ( input . length () ) ) return false ; ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; } return ukpygbqohbpusbpmubux == expectedChar ; } <s> public boolean isLookaheadIgnoreWhitespace ( char expectedChar ) { int uogvttaldgbgaatgehhj = ( pos ) + 1 ; if ( ( uogvttaldgbgaatgehhj + 1 ) >= ( input . length () ) ) return false ; char ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; while ( isWhitespace () ) { ++ uogvttaldgbgaatgehhj ; if ( uogvttaldgbgaatgehhj >= ( input . length () ) ) return false ; ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; } return ukpygbqohbpusbpmubux == expectedChar ; } <s> BUG FIX we did not check local c variable instead we check global c variable
fix_before_refactoring: { int tempPos = ( pos ) + 1 ; if ( tempPos >= ( input . length () ) ) return false ; char c = input . charAt ( tempPos ) ; while ( isWhitespace ( c ) ) { ++ tempPos ; if ( tempPos >= ( input . length () ) ) return false ; c = input . charAt ( tempPos ) ; } return c == expectedChar ; }
fix_after_refactoring: { int uogvttaldgbgaatgehhj = ( pos ) + 1 ; if ( uogvttaldgbgaatgehhj >= ( input . length () ) ) return false ; char ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; while ( isWhitespace ( ukpygbqohbpusbpmubux ) ) { ++ uogvttaldgbgaatgehhj ; if ( uogvttaldgbgaatgehhj >= ( input . length () ) ) return false ; ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; } return ukpygbqohbpusbpmubux == expectedChar ; }
× fix_prediction_before: { int tempPos = ( pos ) + 1 ; if ( ( tempPos + 1 ) >= ( input . length () ) ) return false ; char c = input . charAt ( tempPos ) ; while ( isWhitespace () ) { ++ tempPos ; if ( tempPos >= ( input . length () ) ) return false ; c = input . charAt ( tempPos ) ; } return c == expectedChar ; }
× fix_prediction_after: { int uogvttaldgbgaatgehhj = ( pos ) + 1 ; if ( ( uogvttaldgbgaatgehhj + 1 ) >= ( input . length () ) ) return false ; char ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; while ( isWhitespace () ) { ++ uogvttaldgbgaatgehhj ; if ( uogvttaldgbgaatgehhj >= ( input . length () ) ) return false ; ukpygbqohbpusbpmubux = input . charAt ( uogvttaldgbgaatgehhj ) ; } return ukpygbqohbpusbpmubux == expectedChar ; }

line_index: 395
bug_before_refactoring: { rows [ i ] = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; } <s> private void mathButton_ActionPerformed ( java.awt.event.ActionEvent evt ) { int [] rows = new int [ mainTable_ . getRowCount () ] ; for ( int i = 0 ; i < ( rows.length ) ; i ++ ) { rows [ i ] = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; } edu.valelab.gaussianfit.MathForm mf = new edu.valelab.gaussianfit.MathForm ( edu.valelab.gaussianfit.DataCollectionForm.studio_ . getUserProfile () , rows , rows ) ; mf . setVisible ( true ) ; } <s> Gaussian: Fix bug in Math Form. COntinue to refactor RowData to Builder pattern.
bug_after_refactoring: { xlapamqgakwnmesuwigx [ i ] = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; } <s> private void mathButton_ActionPerformed ( java.awt.event.ActionEvent evt ) { int [] rows = new int [ mainTable_ . getRowCount () ] ; for ( int i = 0 ; i < ( rows.length ) ; i ++ ) { xlapamqgakwnmesuwigx [ i ] = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; } edu.valelab.gaussianfit.MathForm mf = new edu.valelab.gaussianfit.MathForm ( edu.valelab.gaussianfit.DataCollectionForm.studio_ . getUserProfile () , rows , rows ) ; mf . setVisible ( true ) ; } <s> Gaussian: Fix bug in Math Form. COntinue to refactor RowData to Builder pattern.
fix_before_refactoring: { java.lang.Integer j = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; rows [ i ] = j ; }
fix_after_refactoring: { java.lang.Integer j = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; xlapamqgakwnmesuwigx [ i ] = j ; }
× fix_prediction_before: { rows [ i ] = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; break; }
× fix_prediction_after: { xlapamqgakwnmesuwigx [ i ] = ( ( java.lang.Integer ) ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ; }

line_index: 396
bug_before_refactoring: private void insertOrder ( Simulator.Order order ) { long price = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( price ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( price ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( price , entries ) ; } } <s> private void insertOrder ( Simulator.Order order ) { long price = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( price ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( price ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( price , entries ) ; } } <s> fix bug in OrderBook  simple TestOrderBook
bug_after_refactoring: private void insertOrder ( Simulator.Order order ) { long ugpfpfpkybglejwjidlm = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( ugpfpfpkybglejwjidlm ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( ugpfpfpkybglejwjidlm ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( ugpfpfpkybglejwjidlm , entries ) ; } } <s> private void insertOrder ( Simulator.Order order ) { long ugpfpfpkybglejwjidlm = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( ugpfpfpkybglejwjidlm ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( ugpfpfpkybglejwjidlm ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( ugpfpfpkybglejwjidlm , entries ) ; } } <s> fix bug in OrderBook  simple TestOrderBook
fix_before_refactoring: public void insertOrder ( Simulator.Order order ) { long price = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( price ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( price ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( price , entries ) ; } }
fix_after_refactoring: public void insertOrder ( Simulator.Order order ) { long ugpfpfpkybglejwjidlm = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( ugpfpfpkybglejwjidlm ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( ugpfpfpkybglejwjidlm ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( ugpfpfpkybglejwjidlm , entries ) ; } }
× fix_prediction_before: private void insertOrder ( Simulator.Order order ) { long price = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( price ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( price ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( price , entries ) ; } }
× fix_prediction_after: private void insertOrder ( Simulator.Order order ) { long ugpfpfpkybglejwjidlm = order . getPrice () ; java.util.TreeMap < java.lang.Long , java.util.LinkedList < Simulator.Order > > sideBook = getSideBook ( order . getSide () ) ; if ( sideBook . containsKey ( ugpfpfpkybglejwjidlm ) ) { java.util.LinkedList < Simulator.Order > entries = sideBook . get ( ugpfpfpkybglejwjidlm ) ; entries . add ( order ) ; } else { java.util.LinkedList < Simulator.Order > entries = new java.util.LinkedList () ; entries . add ( order ) ; sideBook . put ( ugpfpfpkybglejwjidlm , entries ) ; } }

line_index: 397
bug_before_refactoring: { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( index ) . getFuture () ) ; countThreadFutureList . remove ( index ) ; } index ++ ; } <s> @ java.lang.Override public void stopVideoTimeCountingThread ( java.lang.String roomId ) { java.util.Iterator < com.benlinus92.synchronize.model.FutureHolder > it = countThreadFutureList . iterator () ; int index = 0 ; while ( it . hasNext () ) { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( index ) . getFuture () ) ; countThreadFutureList . remove ( index ) ; } index ++ ; } } <s> Fix bug with ArrayOutOfBoundsException
bug_after_refactoring: { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( rdxmytznpxptouwbbfdj ) . getFuture () ) ; countThreadFutureList . remove ( rdxmytznpxptouwbbfdj ) ; } rdxmytznpxptouwbbfdj ++ ; } <s> @ java.lang.Override public void stopVideoTimeCountingThread ( java.lang.String roomId ) { java.util.Iterator < com.benlinus92.synchronize.model.FutureHolder > it = countThreadFutureList . iterator () ; int index = 0 ; while ( it . hasNext () ) { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( rdxmytznpxptouwbbfdj ) . getFuture () ) ; countThreadFutureList . remove ( rdxmytznpxptouwbbfdj ) ; } rdxmytznpxptouwbbfdj ++ ; } } <s> Fix bug with ArrayOutOfBoundsException
fix_before_refactoring: { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( index ) . getFuture () ) ; countThreadFutureList . remove ( index ) ; } else index ++ ; }
fix_after_refactoring: { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( rdxmytznpxptouwbbfdj ) . getFuture () ) ; countThreadFutureList . remove ( rdxmytznpxptouwbbfdj ) ; } else rdxmytznpxptouwbbfdj ++ ; }
× fix_prediction_before: { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( index ) . getFuture () ) ; countThreadFutureList . remove ( index ) ; } index ++ ; }
× fix_prediction_after: { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( rdxmytznpxptouwbbfdj ) . getFuture () ) ; countThreadFutureList . remove ( rdxmytznpxptouwbbfdj ) ; } }

line_index: 398
bug_before_refactoring: void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) { boolean isOpenMessageRoaming ; try { org.json.JSONObject params = data . getJSONObject ( 0 ) ; isOpenMessageRoaming = params . getBoolean ( "isOpenMessageRoaming" ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; cn.jiguang.cordova.im.JMessageUtils . handleResult ( cn.jiguang.cordova.im.JMessagePlugin.ERR_CODE_PARAMETER , cn.jiguang.cordova.im.JMessagePlugin.ERR_MSG_PARAMETER , callback ) ; return; } cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , isOpenMessageRoaming ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin.mCallback = callback ; } <s> void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) { boolean isOpenMessageRoaming ; try { org.json.JSONObject params = data . getJSONObject ( 0 ) ; isOpenMessageRoaming = params . getBoolean ( "isOpenMessageRoaming" ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; cn.jiguang.cordova.im.JMessageUtils . handleResult ( cn.jiguang.cordova.im.JMessagePlugin.ERR_CODE_PARAMETER , cn.jiguang.cordova.im.JMessagePlugin.ERR_MSG_PARAMETER , callback ) ; return; } cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , isOpenMessageRoaming ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin.mCallback = callback ; } <s> Fix bug of getUserInfo
bug_after_refactoring: void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) { boolean jnsfudecouqaecybkccn ; try { org.json.JSONObject params = data . getJSONObject ( 0 ) ; jnsfudecouqaecybkccn = params . getBoolean ( "jnsfudecouqaecybkccn" ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; cn.jiguang.cordova.im.JMessageUtils . handleResult ( cn.jiguang.cordova.im.JMessagePlugin.ERR_CODE_PARAMETER , cn.jiguang.cordova.im.JMessagePlugin.ERR_MSG_PARAMETER , callback ) ; return; } cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , jnsfudecouqaecybkccn ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin.mCallback = callback ; } <s> void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) { boolean jnsfudecouqaecybkccn ; try { org.json.JSONObject params = data . getJSONObject ( 0 ) ; jnsfudecouqaecybkccn = params . getBoolean ( "jnsfudecouqaecybkccn" ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; cn.jiguang.cordova.im.JMessageUtils . handleResult ( cn.jiguang.cordova.im.JMessagePlugin.ERR_CODE_PARAMETER , cn.jiguang.cordova.im.JMessagePlugin.ERR_MSG_PARAMETER , callback ) ; return; } cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , jnsfudecouqaecybkccn ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin.mCallback = callback ; } <s> Fix bug of getUserInfo
fix_before_refactoring: void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) throws org.json.JSONException { org.json.JSONObject params = data . getJSONObject ( 0 ) ; boolean isOpenMessageRoaming = params . getBoolean ( "isOpenMessageRoaming" ) ; cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , isOpenMessageRoaming ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin.mCallback = callback ; }
fix_after_refactoring: void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) throws org.json.JSONException { org.json.JSONObject params = data . getJSONObject ( 0 ) ; boolean jnsfudecouqaecybkccn = params . getBoolean ( "jnsfudecouqaecybkccn" ) ; cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , jnsfudecouqaecybkccn ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin.mCallback = callback ; }
× fix_prediction_before: void init ( org.json.JSONArray data , org.apache.cordova.CallbackContext callback ) { boolean isOpenMessageRoaming ; try { org.json.JSONObject params = data . getJSONObject ( 0 ) . isOpenMessageRoaming = params . getBoolean ( "isOpenMessageRoaming" ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; cn.jiguang.cordova.im.JMessageUtils . handleResult ( cn.jiguang.cordova.im.JMessagePlugin.ERR_CODE_PARAMETER , cn.jiguang.cordova.im.JMessagePlugin.ERR_MSG_PARAMETER , callback ) ; return; } cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , isOpenMessageRoaming ) ; cn.jpush.im.android.api.JMessageClient . registerEventReceiver ( this ) ; cn.jiguang.cordova.im.JMessagePlugin = mCallback ;
× fix_prediction_after: void init ( org.json.JSONArray data ) { boolean jnsfudecouqaecybkccn ; try { org.json.JSONObject params = data . getJSONObject ( 0 ) ; jnsfudecouqaecybkccn = params . getBoolean ( "jnsfudecouqaecybkccn" ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; cn.jiguang.cordova.im.JMessageUtils . handleResult ( cn.jiguang.cordova.im.JMessagePlugin.ERR_CODE_PARAMETER , cn.jiguang.cordova.im.JMessagePlugin.ERR_MSG_PARAMETER , callback ) ; return; } cn.jpush.im.android.api.JMessageClient . init ( mCordovaActivity . getApplicationContext () , jnsfudecouqaecybccn ) ; cn.jpush.im.android.api.JMessageClient . init ( mCordova

line_index: 399
bug_before_refactoring: out . write ( buffer , 0 , com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ) <s> public static void exportResource ( java.lang.String resourceName , java.nio.file.Path destination ) throws java.io.IOException { try ( java.io.InputStream in = com.github.checkstyle.FilesystemUtils . class . getResourceAsStream ( resourceName ) ; java.io.OutputStream out = java.nio.file.Files . newOutputStream ( destination ) ) { int readBytes ; final byte [] buffer = new byte [ com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ] ; while ( ( readBytes = in . read ( buffer ) ) > 0 ) { out . write ( buffer , 0 , com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ) ; } } } <s> patch-diff-report-tool: fixed possible overflow issue in resource copy (#84)
bug_after_refactoring: out . write ( yvbdmynbjxyczwhjythf , 0 , com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ) <s> public static void exportResource ( java.lang.String resourceName , java.nio.file.Path destination ) throws java.io.IOException { try ( java.io.InputStream in = com.github.checkstyle.FilesystemUtils . class . getResourceAsStream ( resourceName ) ; java.io.OutputStream out = java.nio.file.Files . newOutputStream ( destination ) ) { int readBytes ; final byte [] buffer = new byte [ com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ] ; while ( ( readBytes = in . read ( buffer ) ) > 0 ) { out . write ( yvbdmynbjxyczwhjythf , 0 , com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ) ; } } } <s> patch-diff-report-tool: fixed possible overflow issue in resource copy (#84)
fix_before_refactoring: out . write ( buffer , 0 , readBytes )
fix_after_refactoring: out . write ( yvbdmynbjxyczwhjythf , 0 , readBytes )
× fix_prediction_before: out . write ( buffer , 0 , com.github.checkstyle.FilesystemUtils.BUFFER_SIZE )
× fix_prediction_after: out . write ( yvbdmynbjxyczwhjythf , 0 , com.github.checkstyle.FilesystemUtils.BUFFER_SIZE )

line_index: 400
bug_before_refactoring: sf = 1 / ( bv.radius ) <s> public void centerModel ( org.gearvrf.GVRSceneObject model ) { org.gearvrf.GVRSceneObject.BoundingVolume bv = model . getBoundingVolume () ; float sf = 1 / ( bv.radius ) ; model . getTransform () . setScale ( sf , sf , sf ) ; bv = model . getBoundingVolume () ; model . getTransform () . setPosition ( ( - ( bv.center.x ) ) , ( - ( bv.center.y ) ) , ( ( - ( bv.center.z ) ) - ( 1.5F * ( bv.radius ) ) ) ) ; } <s> fixed issues with asset event handler
bug_after_refactoring: hhflmpwtxjdcfqmmmyir = 1 / ( bv.radius ) <s> public void centerModel ( org.gearvrf.GVRSceneObject model ) { org.gearvrf.GVRSceneObject.BoundingVolume bv = model . getBoundingVolume () ; float hhflmpwtxjdcfqmmmyir = 1 / ( bv.radius ) ; model . getTransform () . setScale ( sf , sf , sf ) ; bv = model . getBoundingVolume () ; model . getTransform () . setPosition ( ( - ( bv.center.x ) ) , ( - ( bv.center.y ) ) , ( ( - ( bv.center.z ) ) - ( 1.5F * ( bv.radius ) ) ) ) ; } <s> fixed issues with asset event handler
fix_before_refactoring: sf = 1
fix_after_refactoring: hhflmpwtxjdcfqmmmyir = 1
× fix_prediction_before: sf = 1.0F
× fix_prediction_after: hhflmpwtxjdcfqmmmyir = 1.0 / ( bv.radius )

line_index: 401
bug_before_refactoring: private void pushUp () { int i = size () ; while ( ( i > 1 ) && ( ( compare2 ( heap . get ( i ) , heap . get ( ( i / 2 ) ) ) ) > 0 ) ) { swap ( i , ( i / 2 ) ) ; i /= 2 ; } } <s> private void pushUp () { int i = size () ; while ( ( i > 1 ) && ( ( compare2 ( heap . get ( i ) , heap . get ( ( i / 2 ) ) ) ) > 0 ) ) { swap ( i , ( i / 2 ) ) ; i /= 2 ; } } <s> FIXED A MINOR BUG WITH PUSHUP AND PUSHDOWN... PLEASE DON'T MARK THIS LATE FOR TWO CHANGED LINES OF CODE  MR. K :) (I spoke to you in class about it)
bug_after_refactoring: private void pushUp () { int gnpelrazihieknrbbekn = size () ; while ( ( gnpelrazihieknrbbekn > 1 ) && ( ( compare2 ( heap . get ( gnpelrazihieknrbbekn ) , heap . get ( ( gnpelrazihieknrbbekn / 2 ) ) ) ) > 0 ) ) { swap ( gnpelrazihieknrbbekn , ( gnpelrazihieknrbbekn / 2 ) ) ; gnpelrazihieknrbbekn /= 2 ; } } <s> private void pushUp () { int gnpelrazihieknrbbekn = size () ; while ( ( gnpelrazihieknrbbekn > 1 ) && ( ( compare2 ( heap . get ( gnpelrazihieknrbbekn ) , heap . get ( ( gnpelrazihieknrbbekn / 2 ) ) ) ) > 0 ) ) { swap ( gnpelrazihieknrbbekn , ( gnpelrazihieknrbbekn / 2 ) ) ; gnpelrazihieknrbbekn /= 2 ; } } <s> FIXED A MINOR BUG WITH PUSHUP AND PUSHDOWN... PLEASE DON'T MARK THIS LATE FOR TWO CHANGED LINES OF CODE  MR. K :) (I spoke to you in class about it)
fix_before_refactoring: private void pushUp ( int i ) { while ( ( i > 1 ) && ( ( compare2 ( heap . get ( i ) , heap . get ( ( i / 2 ) ) ) ) > 0 ) ) { swap ( i , ( i / 2 ) ) ; i /= 2 ; } }
fix_after_refactoring: private void pushUp ( int gnpelrazihieknrbbekn ) { while ( ( gnpelrazihieknrbbekn > 1 ) && ( ( compare2 ( heap . get ( gnpelrazihieknrbbekn ) , heap . get ( ( gnpelrazihieknrbbekn / 2 ) ) ) ) > 0 ) ) { swap ( gnpelrazihieknrbbekn , ( gnpelrazihieknrbbekn / 2 ) ) ; gnpelrazihieknrbbekn /= 2 ; } }
× fix_prediction_before: private void pushUp () { int i = size () ; while ( ( i > 1 ) && ( ( compare2 ( heap . get ( i ) , heap . get ( ( i / 2 ) ) ) ) > 0 ) ) { swap ( i , ( i / 2 ) ) ; i /= 2 ; } }
× fix_prediction_after: private void pushUp () { int gnpelrazihieknrbbekn = size () ; while ( ( gnpelrazihieknrbbekn > 1 ) && ( ( compare2 ( heap . get ( gnpelrazihieknrbbekn ) , heap . get ( ( gnpelrazihieknrbbekn / 2 ) ) ) ) > 0 ) ) { swap ( gnpelrazihieknrbbekn , ( gnpelrazihieknrbbekn / 2 ) ) ; gnpelrazihieknrbbekn /= 2 ; } }

line_index: 403
bug_before_refactoring: { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean isConnected = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; boolean isWiFi = ( activeNetwork . getType () ) == ( android.net.ConnectivityManager.TYPE_WIFI ) ; if ( isConnected || isWiFi ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } } <s> @ java.lang.Override protected void onPreExecute () { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean isConnected = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; boolean isWiFi = ( activeNetwork . getType () ) == ( android.net.ConnectivityManager.TYPE_WIFI ) ; if ( isConnected || isWiFi ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } } <s> Fixed the bug for wifi connectivity
bug_after_refactoring: { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean qgdhkbgrhpobwdxhesjz = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; boolean wooeeklwmzymuegxbkpw = ( activeNetwork . getType () ) == ( android.net.ConnectivityManager.TYPE_WIFI ) ; if ( qgdhkbgrhpobwdxhesjz || wooeeklwmzymuegxbkpw ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } } <s> @ java.lang.Override protected void onPreExecute () { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean qgdhkbgrhpobwdxhesjz = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; boolean wooeeklwmzymuegxbkpw = ( activeNetwork . getType () ) == ( android.net.ConnectivityManager.TYPE_WIFI ) ; if ( qgdhkbgrhpobwdxhesjz || wooeeklwmzymuegxbkpw ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } } <s> Fixed the bug for wifi connectivity
fix_before_refactoring: { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean isConnected = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; if ( isConnected ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } }
fix_after_refactoring: { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean qgdhkbgrhpobwdxhesjz = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; if ( qgdhkbgrhpobwdxhesjz ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } }
× fix_prediction_before: { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean isConnected = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; boolean isWiFi = ( activeNetwork . getType () ) == ( android.net.ConnectivityManager.TYPE_WIFI ) ; if ( isConnected || isWiFi ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } }
× fix_prediction_after: { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean qgdhkbgrhpobwdxhesjz = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; boolean Wooeeklwmzymuegxbkpw = ( activeNetwork . getType () ) == ( android.net.ConnectivityManager.TYPE_WIFI ) ; showProgressDialogue () ; }

line_index: 404
bug_before_refactoring: if ( adjust > 0 ) indentLevel += getPrefs () . getIndentationSize () ; else if ( adjust < 0 ) indentLevel = indentLevel - ( getPrefs () . getIndentationSize () ) ; <s> private int simpleComputeNextLineIndentLevel ( int indentLevel , java.util.List < groovyjarjarantlr.Token > tokens ) { int adjust = getOpenVersusCloseBalance ( tokens ) ; if ( adjust > 0 ) indentLevel += getPrefs () . getIndentationSize () ; else if ( adjust < 0 ) indentLevel = indentLevel - ( getPrefs () . getIndentationSize () ) ; return indentLevel ; } <s> Fix for issue #239: enter key after braceless if should cause indent
bug_after_refactoring: if ( tleipihhxmwnvzmrxmrl > 0 ) indentLevel += getPrefs () . getIndentationSize () ; else if ( tleipihhxmwnvzmrxmrl < 0 ) indentLevel = indentLevel - ( getPrefs () . getIndentationSize () ) ; <s> private int simpleComputeNextLineIndentLevel ( int indentLevel , java.util.List < groovyjarjarantlr.Token > tokens ) { int adjust = getOpenVersusCloseBalance ( tokens ) ; if ( tleipihhxmwnvzmrxmrl > 0 ) indentLevel += getPrefs () . getIndentationSize () ; else if ( tleipihhxmwnvzmrxmrl < 0 ) indentLevel = indentLevel - ( getPrefs () . getIndentationSize () ) ; return indentLevel ; } <s> Fix for issue #239: enter key after braceless if should cause indent
fix_before_refactoring: if ( adjust > 0 ) { indentLevel += getPrefs () . getIndentationSize () ; } else if ( adjust < 0 ) { indentLevel -= getPrefs () . getIndentationSize () ; }
fix_after_refactoring: if ( tleipihhxmwnvzmrxmrl > 0 ) { indentLevel += getPrefs () . getIndentationSize () ; } else if ( tleipihhxmwnvzmrxmrl < 0 ) { indentLevel -= getPrefs () . getIndentationSize () ; }
× fix_prediction_before: if ( adjust >= 0 ) indentLevel += getPrefs () . getIndentationSize () ; else if ( adjust < 0 ) indentLevel = indentLevel - ( getPrefs () . getIndentationSize () ) ;
× fix_prediction_after: if ( tleipihhxmwnvzmrxmrl > 0 ) indentLevel += getPrefs () . getIndentationSize () ; else if ( tleipihhxmwnvzmrxmrl < 0 ) indentLevel = indentLevel - ( getPrefs () . getIndentationSize () ) ;

line_index: 405
bug_before_refactoring: { java.lang.String rID = "1" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double initial_x = oUsr . getX () ; double initial_y = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == initial_x ) && ( ( oUsr . getY () ) == initial_y ) ) ) ; } <s> @ org.junit.Test ( timeout = 1000 ) public void randomMovement () { java.lang.String rID = "1" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double initial_x = oUsr . getX () ; double initial_y = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == initial_x ) && ( ( oUsr . getY () ) == initial_y ) ) ) ; } <s> resolved build errors
bug_after_refactoring: { java.lang.String rID = "1" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double yvlghsfhtmwycsmzdzij = oUsr . getX () ; double apswtfdmhmpnxpijpeza = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == yvlghsfhtmwycsmzdzij ) && ( ( oUsr . getY () ) == apswtfdmhmpnxpijpeza ) ) ) ; } <s> @ org.junit.Test ( timeout = 1000 ) public void randomMovement () { java.lang.String rID = "1" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double yvlghsfhtmwycsmzdzij = oUsr . getX () ; double apswtfdmhmpnxpijpeza = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == yvlghsfhtmwycsmzdzij ) && ( ( oUsr . getY () ) == apswtfdmhmpnxpijpeza ) ) ) ; } <s> resolved build errors
fix_before_refactoring: { java.lang.String rID = "1" ; java.lang.String bID = "0" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double initial_x = oUsr . getX () ; double initial_y = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == initial_x ) && ( ( oUsr . getY () ) == initial_y ) ) ) ; }
fix_after_refactoring: { java.lang.String rID = "1" ; java.lang.String bID = "0" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double yvlghsfhtmwycsmzdzij = oUsr . getX () ; double apswtfdmhmpnxpijpeza = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == yvlghsfhtmwycsmzdzij ) && ( ( oUsr . getY () ) == apswtfdmhmpnxpijpeza ) ) ) ; }
× fix_prediction_before: { java.lang.String rID = "1" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double initial_x = oUsr . getX () ; double initial_y = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == initial_x ) && ( ( oUsr . getY () ) == initial_y ) ) ) ; }
× fix_prediction_after: { java.lang.String rID = "1" ; edu.vt.ece5574.agents.User oUsr = new edu.vt.ece5574.agents.User ( sim , rID , bID , true , 1 , 1 ) ; sim . addAgent ( oUsr ) ; double yvlghsfhtmwycsmzdzij = oUsr . getX () ; double apswtfdmhmpnxpijpeza = oUsr . getY () ; oUsr . createRandomMovement ( sim ) ; assertFalse ( ( ( ( oUsr . getX () ) == yvlghsfhtmwycsmzdzijpeza = oUsr . getY () ) == apswtfdmhmpnxpijpeza ) ) ) ; }

line_index: 407
bug_before_refactoring: { int count = this . getCount () ; if ( count == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double s = 0.0 ; double avg = this . getAverage () ; for ( double data : this . dataList ) { s += ( data - avg ) * ( data - avg ) ; } return ( java.lang.Math . sqrt ( ( s / count ) ) ) / avg ; } <s> public double getCoefficientOfVariation () { int count = this . getCount () ; if ( count == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double s = 0.0 ; double avg = this . getAverage () ; for ( double data : this . dataList ) { s += ( data - avg ) * ( data - avg ) ; } return ( java.lang.Math . sqrt ( ( s / count ) ) ) / avg ; } <s> Fix error handling bugs
bug_after_refactoring: { int huiwtllxmyapizredwqy = this . getCount () ; if ( huiwtllxmyapizredwqy == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double kutgvcwhsqzjwdougdao = 0.0 ; double riyazcgzurikerrxluey = this . getAverage () ; for ( double data : this . dataList ) { kutgvcwhsqzjwdougdao += ( data - riyazcgzurikerrxluey ) * ( data - riyazcgzurikerrxluey ) ; } return ( java.lang.Math . sqrt ( ( kutgvcwhsqzjwdougdao / huiwtllxmyapizredwqy ) ) ) / riyazcgzurikerrxluey ; } <s> public double getCoefficientOfVariation () { int huiwtllxmyapizredwqy = this . getCount () ; if ( huiwtllxmyapizredwqy == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double kutgvcwhsqzjwdougdao = 0.0 ; double riyazcgzurikerrxluey = this . getAverage () ; for ( double data : this . dataList ) { kutgvcwhsqzjwdougdao += ( data - riyazcgzurikerrxluey ) * ( data - riyazcgzurikerrxluey ) ; } return ( java.lang.Math . sqrt ( ( kutgvcwhsqzjwdougdao / huiwtllxmyapizredwqy ) ) ) / riyazcgzurikerrxluey ; } <s> Fix error handling bugs
fix_before_refactoring: { int count = this . getCount () ; if ( count == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double s = 0.0 ; double avg = this . getAverage () ; if ( avg == 0.0 ) { return 0.0 ; } for ( double data : this . dataList ) { s += ( data - avg ) * ( data - avg ) ; } return ( java.lang.Math . sqrt ( ( s / count ) ) ) / avg ; }
fix_after_refactoring: { int huiwtllxmyapizredwqy = this . getCount () ; if ( huiwtllxmyapizredwqy == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double kutgvcwhsqzjwdougdao = 0.0 ; double riyazcgzurikerrxluey = this . getAverage () ; if ( riyazcgzurikerrxluey == 0.0 ) { return 0.0 ; } for ( double data : this . dataList ) { kutgvcwhsqzjwdougdao += ( data - riyazcgzurikerrxluey ) * ( data - riyazcgzurikerrxluey ) ; } return ( java.lang.Math . sqrt ( ( kutgvcwhsqzjwdougdao / huiwtllxmyapizredwqy ) ) ) / riyazcgzurikerrxluey ; }
× fix_prediction_before: { int count = this . getCount () ; if ( count == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double s = 0.0 ; double avg = this . getAverage () ; for ( double data : this . dataList ) { s += ( data - avg ) * ( data - avg ) ; } return ( java.lang.Math . sqrt ( ( s / count ) ) ) / avg ; }
× fix_prediction_after: { int huiwtllxmyapizredwqy = this . getCount () ; if ( huiwtllxmyapizredwqy == 0 ) { throw new cfvbaibai.cardfantasy.CardFantasyRuntimeException ( "Cannot get square deviation on empty data set." ) ; } double kutgvcwhsqzjwdougdao = 0.0 ; double riyazcgzurikerrxluey = this . getAverage () ; for ( double data : this . dataList ) { kutgvcwhsqzjwdougdao += ( data - riyazcgzurikerrxluey ) * ( data - riyazcgzurikerrxluey ) ; } return ( java.lang.Math . sqrt ( ( kutgvcwhsqzjwdougdao / huiwtllxmyapizredwqy ) ) ) / riyazcgzurikerrxluey ; }

line_index: 408
bug_before_refactoring: { digilib.image.ImageJobDescription.logger . debug ( "get_scaleQual()" ) ; int qual = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) qual = 0 ; else if ( hasOption ( "q1" ) ) qual = 1 ; else if ( hasOption ( "q2" ) ) qual = 2 ; return qual ; } <s> public int getScaleQual () { digilib.image.ImageJobDescription.logger . debug ( "get_scaleQual()" ) ; int qual = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) qual = 0 ; else if ( hasOption ( "q1" ) ) qual = 1 ; else if ( hasOption ( "q2" ) ) qual = 2 ; return qual ; } <s> fixed black-last-pixel bug by rounding up scale factor in ImageLoaderDocuImage.scale(). added comments and formatting.  --HG-- branch : new_scaling
bug_after_refactoring: { digilib.image.ImageJobDescription.logger . debug ( "get_scaleQual()" ) ; int gvzibkulivqryamzdxzm = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) gvzibkulivqryamzdxzm = 0 ; else if ( hasOption ( "q1" ) ) gvzibkulivqryamzdxzm = 1 ; else if ( hasOption ( "q2" ) ) gvzibkulivqryamzdxzm = 2 ; return gvzibkulivqryamzdxzm ; } <s> public int getScaleQual () { digilib.image.ImageJobDescription.logger . debug ( "get_scaleQual()" ) ; int gvzibkulivqryamzdxzm = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) gvzibkulivqryamzdxzm = 0 ; else if ( hasOption ( "q1" ) ) gvzibkulivqryamzdxzm = 1 ; else if ( hasOption ( "q2" ) ) gvzibkulivqryamzdxzm = 2 ; return gvzibkulivqryamzdxzm ; } <s> fixed black-last-pixel bug by rounding up scale factor in ImageLoaderDocuImage.scale(). added comments and formatting.  --HG-- branch : new_scaling
fix_before_refactoring: { int qual = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) qual = 0 ; else if ( hasOption ( "q1" ) ) qual = 1 ; else if ( hasOption ( "q2" ) ) qual = 2 ; return qual ; }
fix_after_refactoring: { int gvzibkulivqryamzdxzm = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) gvzibkulivqryamzdxzm = 0 ; else if ( hasOption ( "q1" ) ) gvzibkulivqryamzdxzm = 1 ; else if ( hasOption ( "q2" ) ) gvzibkulivqryamzdxzm = 2 ; return gvzibkulivqryamzdxzm ; }
× fix_prediction_before: { digilib.image.ImageJobDescription.logger . debug ( "get_scaleQual()" ) ; int qual = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) qual = 0 ; else if ( hasOption ( "q1" ) ) qual = 1 ; else if ( hasOption ( "q2" ) ) qual = 2 ; return qual ; }
× fix_prediction_after: { digilib.image.ImageJobDescription.logger . debug ( "get_scaleQual()" ) ; int gvzibkulivqryamzdxzm = dlConfig . getAsInt ( "default-quality" ) ; if ( hasOption ( "q0" ) ) gvzibkulivqryamzdxzm = 0 ; else if ( hasOption ( "q1" ) ) gvzibkulivqryamzdxzm = 1 ; else if ( hasOption ( "q2" ) ) gvzibkulivqryamzdxzm = 2 ; return gvzibkulivqryamzdxzm ; }

line_index: 410
bug_before_refactoring: if ( bclosed ) { try { connect () ; } catch ( java.sql.SQLException e ) { if ( ( ( m_c ) == null ) || ( m_c . isClosed () ) ) { connect () ; } } } <s> private void ensureConnection ( ) throws java.sql.SQLException { boolean bclosed ; try { bclosed = ( ( m_c ) == null ) || ( m_c . isClosed () ) ; } catch ( java.sql.SQLException e ) { bclosed = true ; } if ( bclosed ) { try { connect () ; } catch ( java.sql.SQLException e ) { if ( ( ( m_c ) == null ) || ( m_c . isClosed () ) ) { connect () ; } } } } <s> Bugfix: Revert reconnect attempt fix - does not always work
bug_after_refactoring: if ( sgnraikdhptreudzbsnq ) { try { connect () ; } catch ( java.sql.SQLException e ) { if ( ( ( m_c ) == null ) || ( m_c . isClosed () ) ) { connect () ; } } } <s> private void ensureConnection ( ) throws java.sql.SQLException { boolean bclosed ; try { bclosed = ( ( m_c ) == null ) || ( m_c . isClosed () ) ; } catch ( java.sql.SQLException e ) { bclosed = true ; } if ( sgnraikdhptreudzbsnq ) { try { connect () ; } catch ( java.sql.SQLException e ) { if ( ( ( m_c ) == null ) || ( m_c . isClosed () ) ) { connect () ; } } } } <s> Bugfix: Revert reconnect attempt fix - does not always work
fix_before_refactoring: if ( bclosed ) { connect () ; }
fix_after_refactoring: if ( sgnraikdhptreudzbsnq ) { connect () ; }
× fix_prediction_before: if ( ! ( bclosed ) ) { try { connect () ; } catch ( java.sql.SQLException e ) { if ( ( ( m_c ) == null ) || ( m_c . isClosed () ) ) { connect () ; } } }
× fix_prediction_after: if ( ! ( sgnraikdhptreudzbsnq ) ) { try { connect () ; } catch ( java.sql.SQLException e ) { if ( ( ( m_c ) == null ) || ( m_c . isClosed () ) ) { connect () ; } } }

line_index: 411
bug_before_refactoring: { int index = 1 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( index ++ ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + index ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } } <s> protected void fillValues ( java.util.List < java.lang.Object > valueList , java.lang.String sql , java.sql.PreparedStatement stmt ) { int index = 1 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( index ++ ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + index ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } } <s> Merge pull request #53 from scireum/fak/fixIndexInError  Fixes index in fillValues error
bug_after_refactoring: { int amjfdaullziuablqzhlf = 1 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( amjfdaullziuablqzhlf ++ ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + amjfdaullziuablqzhlf ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } } <s> protected void fillValues ( java.util.List < java.lang.Object > valueList , java.lang.String sql , java.sql.PreparedStatement stmt ) { int amjfdaullziuablqzhlf = 1 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( amjfdaullziuablqzhlf ++ ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + amjfdaullziuablqzhlf ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } } <s> Merge pull request #53 from scireum/fak/fixIndexInError  Fixes index in fillValues error
fix_before_refactoring: { int index = 0 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( ++ index ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + index ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } }
fix_after_refactoring: { int amjfdaullziuablqzhlf = 0 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( ++ amjfdaullziuablqzhlf ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + amjfdaullziuablqzhlf ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } }
× fix_prediction_before: { int index = 1 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( index ++ ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + index ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } }
× fix_prediction_after: { int amjfdaullziuablqzhlf = 1 ; for ( java.lang.Object o : valueList ) { try { stmt . setObject ( ( amjfdaullziuablqzhlf ++ ) , o ) ; } catch ( java.lang.Exception e ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( ( e . getMessage () ) + " - Index: " ) + amjfdaullziuablqzhlf ) + ", Value: " ) + o ) + ", Query: " ) + sql ) , e ) ; } } }

line_index: 412
bug_before_refactoring: end = java.lang.Math . min ( ( ( lessBooks . size () ) + itemsPerPage ) , books . size () ) <s> private void showMoreBooks ( int itemsPerPage ) { int start = lessBooks . size () ; int end = java.lang.Math . min ( ( ( lessBooks . size () ) + itemsPerPage ) , books . size () ) ; for ( int i = start ; i < end ; i ++ ) { lessBooks . add ( books . get ( i ) ) ; } } <s> Fixed a weird bug showing loading animation on books without a cover
bug_after_refactoring: kodpseqreeoubjutvsdt = java.lang.Math . min ( ( ( lessBooks . size () ) + itemsPerPage ) , books . size () ) <s> private void showMoreBooks ( int itemsPerPage ) { int start = lessBooks . size () ; int kodpseqreeoubjutvsdt = java.lang.Math . min ( ( ( lessBooks . size () ) + itemsPerPage ) , books . size () ) ; for ( int i = start ; i < end ; i ++ ) { lessBooks . add ( books . get ( i ) ) ; } } <s> Fixed a weird bug showing loading animation on books without a cover
fix_before_refactoring: end = start + itemsPerPage
fix_after_refactoring: kodpseqreeoubjutvsdt = start + itemsPerPage
× fix_prediction_before: end = ( ( lessBooks . size () ) - itemsPerPage ) - 1
× fix_prediction_after: kodpseqreeoubjutvsdt = ( ( java.lang.Math . min ( ( ( lessBooks . size () ) + itemsPerPage ) , books . size () ) ) - 1

line_index: 413
bug_before_refactoring: { char [] password = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; final java.lang.String passwordStr = reader . readLine ( '*' ) ; password = passwordStr . toCharArray () ; password = null ; java.lang.System . gc () ; return password ; } <s> @ java.lang.Override public char [] getPassword ( ) throws java.io.IOException { char [] password = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; final java.lang.String passwordStr = reader . readLine ( '*' ) ; password = passwordStr . toCharArray () ; password = null ; java.lang.System . gc () ; return password ; } <s> Fixed a bug in the JLinePasswordPrompt where it always returned null.
bug_after_refactoring: { char [] xnkzvjbevzxfoidmiexi = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; final java.lang.String passwordStr = reader . readLine ( '*' ) ; xnkzvjbevzxfoidmiexi = passwordStr . toCharArray () ; xnkzvjbevzxfoidmiexi = null ; java.lang.System . gc () ; return xnkzvjbevzxfoidmiexi ; } <s> @ java.lang.Override public char [] getPassword ( ) throws java.io.IOException { char [] xnkzvjbevzxfoidmiexi = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; final java.lang.String passwordStr = reader . readLine ( '*' ) ; xnkzvjbevzxfoidmiexi = passwordStr . toCharArray () ; xnkzvjbevzxfoidmiexi = null ; java.lang.System . gc () ; return xnkzvjbevzxfoidmiexi ; } <s> Fixed a bug in the JLinePasswordPrompt where it always returned null.
fix_before_refactoring: { char [] password = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; java.lang.String passwordStr = reader . readLine ( '*' ) ; password = passwordStr . toCharArray () ; passwordStr = null ; java.lang.System . gc () ; return password ; }
fix_after_refactoring: { char [] xnkzvjbevzxfoidmiexi = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; java.lang.String passwordStr = reader . readLine ( '*' ) ; xnkzvjbevzxfoidmiexi = passwordStr . toCharArray () ; passwordStr = null ; java.lang.System . gc () ; return xnkzvjbevzxfoidmiexi ; }
× fix_prediction_before: { char [] password = new char [ 0 ] ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; final java.lang.String passwordStr = reader . readLine ( '*' ) ; password = passwordStr . toCharArray () ; password = null ; java.lang.System . gc () ; return password ; }
× fix_prediction_after: { char [] xnkzvjbevzxfoidmiexi = new char [ 0 ] ; java.lang.System.out . print ( "Password: " ) ; final jline.console.ConsoleReader reader = new jline.console.ConsoleReader () ; final java.lang.String passwordStr = reader . readLine ( '*' ) ; xnkzvjbevzxfoidmiexi = passwordStr . toCharArray () ; xnkzvjbevzxfoidmiexi = null ; java.lang.System . gc () ; return xnkzvjbevzxfoidmiexi ; }

line_index: 414
bug_before_refactoring: private boolean isOwnProfile ( javax.faces.context.FacesContext fctx , java.lang.String role ) { boolean ownProfile = true ; if ( ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) && ( ! ( role . equals ( "SYSTEM_ADMINISTRATOR" ) ) ) ) { int userID = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "userID" ) ) ; if ( ( sessionUser . getUserID () ) != userID ) { ownProfile = false ; } } return ownProfile ; } <s> private boolean isOwnProfile ( javax.faces.context.FacesContext fctx , java.lang.String role ) { boolean ownProfile = true ; if ( ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) && ( ! ( role . equals ( "SYSTEM_ADMINISTRATOR" ) ) ) ) { int userID = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "userID" ) ) ; if ( ( sessionUser . getUserID () ) != userID ) { ownProfile = false ; } } return ownProfile ; } <s> Update BugFix
bug_after_refactoring: private boolean isOwnProfile ( javax.faces.context.FacesContext fctx , java.lang.String role ) { boolean uvnuurhzdppsskuysryz = true ; if ( ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) && ( ! ( role . equals ( "SYSTEM_ADMINISTRATOR" ) ) ) ) { int pwlnwkfiviapmzaurkfg = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "pwlnwkfiviapmzaurkfg" ) ) ; if ( ( sessionUser . getUserID () ) != pwlnwkfiviapmzaurkfg ) { uvnuurhzdppsskuysryz = false ; } } return uvnuurhzdppsskuysryz ; } <s> private boolean isOwnProfile ( javax.faces.context.FacesContext fctx , java.lang.String role ) { boolean uvnuurhzdppsskuysryz = true ; if ( ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) && ( ! ( role . equals ( "SYSTEM_ADMINISTRATOR" ) ) ) ) { int pwlnwkfiviapmzaurkfg = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "pwlnwkfiviapmzaurkfg" ) ) ; if ( ( sessionUser . getUserID () ) != pwlnwkfiviapmzaurkfg ) { uvnuurhzdppsskuysryz = false ; } } return uvnuurhzdppsskuysryz ; } <s> Update BugFix
fix_before_refactoring: private boolean isOwnProfile ( javax.faces.context.FacesContext fctx ) { if ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) { int userID = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "userID" ) ) ; if ( ( sessionUser . getUserID () ) == userID ) { return true ; } } return false ; }
fix_after_refactoring: private boolean isOwnProfile ( javax.faces.context.FacesContext fctx ) { if ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) { int pwlnwkfiviapmzaurkfg = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "pwlnwkfiviapmzaurkfg" ) ) ; if ( ( sessionUser . getUserID () ) == pwlnwkfiviapmzaurkfg ) { return true ; } } return false ; }
× fix_prediction_before: public boolean isOwnProfile ( javax.faces.context.FacesContext fctx , java.lang.String role ) { boolean ownProfile = true ; if ( ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) && ( ! ( role . equals ( "SYSTEM_ADMINISTRATOR" ) ) ) ) { int userID = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "userID" ) ) ; if ( ( sessionUser . getUserID () ) != userID ) { ownProfile = false ; } } return ownProfile ; }
× fix_prediction_after: public boolean isOwnProfile ( javax.faces.context.FacesContext fctx , java.lang.String role ) { boolean uvnuurhzdppsskuysryz = true ; if ( ( fctx . getViewRoot () . getViewId () . endsWith ( "profile.xhtml" ) ) && ( ! ( role . equals ( "SYSTEM_ADMINISTRATOR" ) ) ) ) { int pwlnwkfiviapmzaurkfg = java.lang.Integer . parseInt ( javax.faces.context.FacesContext . getCurrentInstance () . getExternalContext () . getRequestParameterMap () . get ( "pwlnwkfiviapmzaurkfg" ) ) ; if ( ( sessionUser . getUserID () ) != pwlnwkfiviapmzaurkfg ) { uvnuurhzdppsskuysryz = false ; } } return uvnuurhzdppsskuysryz ; }

line_index: 415
bug_before_refactoring: { float oldValue = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , oldValue , minValue , maxValue , false ) ; } } <s> private void changeValue ( boolean add ) { float oldValue = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , oldValue , minValue , maxValue , false ) ; } } <s> Fix percentage adjust bug
bug_after_refactoring: { float wastcbaenmyigkfflpfj = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , wastcbaenmyigkfflpfj , minValue , maxValue , false ) ; } } <s> private void changeValue ( boolean add ) { float wastcbaenmyigkfflpfj = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , wastcbaenmyigkfflpfj , minValue , maxValue , false ) ; } } <s> Fix percentage adjust bug
fix_before_refactoring: { oldValue = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , oldValue , minValue , maxValue , false ) ; } }
fix_after_refactoring: { wastcbaenmyigkfflpfj = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , wastcbaenmyigkfflpfj , minValue , maxValue , false ) ; } }
× fix_prediction_before: { float oldValue = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) - ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , oldValue , minValue , maxValue , false ) ; } }
× fix_prediction_after: { float wastcbaenmyigkfflpfj = value ; if ( add ) { value = java.lang.Math . min ( maxValue , ( ( value ) + ( step ) ) ) ; } else { value = java.lang.Math . max ( minValue , ( ( value ) - ( step ) ) ) ; } if ( ( onValueChangedListener ) != null ) { onValueChangedListener . onValueChanged ( this , value , wastcbaenmyigkfflpfj , minValue , maxValue , false ) ; } }

line_index: 416
bug_before_refactoring: { java.util.Random rand = new java.util.Random () ; int comPick = ( rand . nextInt ( 3 ) ) + 1 ; if ( comPick == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( comPick == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( comPick == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } com.bleh.Main . play () ; } <s> public static void comChoiceS () { java.util.Random rand = new java.util.Random () ; int comPick = ( rand . nextInt ( 3 ) ) + 1 ; if ( comPick == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( comPick == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( comPick == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } com.bleh.Main . play () ; } <s> fixed 'quit' issue
bug_after_refactoring: { java.util.Random rand = new java.util.Random () ; int hzhxswhjwvannmxqoilp = ( rand . nextInt ( 3 ) ) + 1 ; if ( hzhxswhjwvannmxqoilp == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( hzhxswhjwvannmxqoilp == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( hzhxswhjwvannmxqoilp == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } com.bleh.Main . play () ; } <s> public static void comChoiceS () { java.util.Random rand = new java.util.Random () ; int hzhxswhjwvannmxqoilp = ( rand . nextInt ( 3 ) ) + 1 ; if ( hzhxswhjwvannmxqoilp == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( hzhxswhjwvannmxqoilp == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( hzhxswhjwvannmxqoilp == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } com.bleh.Main . play () ; } <s> fixed 'quit' issue
fix_before_refactoring: { java.util.Random rand = new java.util.Random () ; int comPick = ( rand . nextInt ( 3 ) ) + 1 ; if ( comPick == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( comPick == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( comPick == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } }
fix_after_refactoring: { java.util.Random rand = new java.util.Random () ; int hzhxswhjwvannmxqoilp = ( rand . nextInt ( 3 ) ) + 1 ; if ( hzhxswhjwvannmxqoilp == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( hzhxswhjwvannmxqoilp == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( hzhxswhjwvannmxqoilp == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } }
× fix_prediction_before: { java.util.Random rand = new java.util.Random () ; int comPick = ( rand . nextInt ( 3 ) ) + 1 ; if ( comPick == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( comPick == 2 ) { java.lang.System.out . println ( "I chosepaper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( comPick == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } com.bleh.Main . play () ; }
× fix_prediction_after: { java.util.Random rand = new java.util.Random () ; int hzhxswhjwvannmxqoilp = ( rand . nextInt ( 3 ) ) + 1 ; if ( hzhxswhjwvannmxqoilp == 1 ) { java.lang.System.out . println ( "I chose rock and you chose scissors...I win :p" ) ; com.bleh.Main . resultsL () ; } else if ( hzhxswhjwvannmxqoilp == 2 ) { java.lang.System.out . println ( "I chose paper and you chose scissors...I guess you win :(" ) ; com.bleh.Main . resultsW () ; } else if ( hzhxswhjwvannmxqoilp == 3 ) { java.lang.System.out . println ( "I chose scissors and you chose scissors...We tied :/" ) ; com.bleh.Main . resultsT () ; } com.bleh.Main . play () ; }

line_index: 418
bug_before_refactoring: { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int count = GuiMain.index . getTermCount () ; java.lang.String vocab = "Index Dictionary: \n" ; for ( java.lang.String s : dictionary ) { vocab += s + "\n" ; } vocab += "Index Term Count: " + count ; return vocab ; } <s> private static java.lang.String getVocab () { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int count = GuiMain.index . getTermCount () ; java.lang.String vocab = "Index Dictionary: \n" ; for ( java.lang.String s : dictionary ) { vocab += s + "\n" ; } vocab += "Index Term Count: " + count ; return vocab ; } <s> Fixed bug when whitespaces are added in index resulting in queries with special characters to return documents ex. :)
bug_after_refactoring: { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int bgqotlgejgcqbmbhmyun = GuiMain.index . getTermCount () ; java.lang.String vocab = "Index Dictionary: \n" ; for ( java.lang.String s : dictionary ) { vocab += s + "\n" ; } vocab += "Index Term Count: " + bgqotlgejgcqbmbhmyun ; return vocab ; } <s> private static java.lang.String getVocab () { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int bgqotlgejgcqbmbhmyun = GuiMain.index . getTermCount () ; java.lang.String vocab = "Index Dictionary: \n" ; for ( java.lang.String s : dictionary ) { vocab += s + "\n" ; } vocab += "Index Term Count: " + bgqotlgejgcqbmbhmyun ; return vocab ; } <s> Fixed bug when whitespaces are added in index resulting in queries with special characters to return documents ex. :)
fix_before_refactoring: { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int count = GuiMain.index . getTermCount () ; java.lang.StringBuffer vocab = new java.lang.StringBuffer ( "Index Dictionary: \n" ) ; for ( java.lang.String s : dictionary ) { vocab . append ( ( s + "\n" ) ) ; } vocab . append ( ( "Index Term Count: " + count ) ) ; return vocab . toString () ; }
fix_after_refactoring: { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int bgqotlgejgcqbmbhmyun = GuiMain.index . getTermCount () ; java.lang.StringBuffer vocab = new java.lang.StringBuffer ( "Index Dictionary: \n" ) ; for ( java.lang.String s : dictionary ) { vocab . append ( ( s + "\n" ) ) ; } vocab . append ( ( "Index Term Count: " + bgqotlgejgcqbmbhmyun ) ) ; return vocab . toString () ; }
× fix_prediction_before: { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int count = GuiMain.index . getTermCount () ; java.lang.String vocab = "Index Dictionary: \n" ; for ( java.lang.String s : dictionary ) { vocab += s + "\n" ; } vocab += "Index Term Count: " + count ; return vocab ; }
× fix_prediction_after: { java.lang.String [] dictionary = GuiMain.index . getDictionary () ; int bgqotlgejgcqbmbhmyun = GuiMain.index . getTermCount () ; java.lang.String vocab = "Index Dictionary: \n" ; for ( java.lang.String s : dictionary ) { vocab += s + "\n" ; } vocab += "Index Term Count: " + bgqotlgejgcqbmbhmyun ; return vocab ; }

line_index: 419
bug_before_refactoring: java.lang.System.out . println ( "\nPlease select the note you want to vote for (0-7):" ) <s> public void vote ( ) throws java.lang.ClassNotFoundException , java.sql.SQLException { java.lang.System.out . println ( "\nPlease select the note you want to vote for (0-7):" ) ; int vote = scan . nextInt () ; if ( ( vote <= 7 ) && ( vote > 0 ) ) { java.lang.System.out . println ( "Attempting vote registration." ) ; registerVote ( vote ) ; } else { java.lang.System.out . println ( "Select a note between 0 and 7." ) ; vote () ; } } <s> Fixed database issues
bug_after_refactoring: java.lang.System.out . println ( "\nPlease select the note you want to xqzjivhvhmphvecjthcl for (0-7):" ) <s> public void vote ( ) throws java.lang.ClassNotFoundException , java.sql.SQLException { java.lang.System.out . println ( "\nPlease select the note you want to xqzjivhvhmphvecjthcl for (0-7):" ) ; int vote = scan . nextInt () ; if ( ( vote <= 7 ) && ( vote > 0 ) ) { java.lang.System.out . println ( "Attempting vote registration." ) ; registerVote ( vote ) ; } else { java.lang.System.out . println ( "Select a note between 0 and 7." ) ; vote () ; } } <s> Fixed database issues
fix_before_refactoring: java.lang.System.out . print ( "\nPlease select the note you want to vote for (0-7):" )
fix_after_refactoring: java.lang.System.out . print ( "\nPlease select the note you want to xqzjivhvhmphvecjthcl for (0-7):" )
× fix_prediction_before: java.lang.System.out . println ( "\nPlease select the note you want to vote for (0-7):" )
× fix_prediction_after: java.lang.System.out . println ( "\nPlease select the note you want to xqzjivhvhmphvecjthcl for (0-7):" )

line_index: 420
bug_before_refactoring: if ( j . isDoorway () ) { ++ door ; } <s> @ org.junit.Test public void numDoors () { int door = 0 ; for ( clueGame.BoardCell [] i : tests.clueBoardTests.board . getBoard () ) { for ( clueGame.BoardCell j : i ) { if ( j . isDoorway () ) { ++ door ; } } } assertEquals ( tests.clueBoardTests.NUM_DOORS , door ) ; } <s> Fixed an error
bug_after_refactoring: if ( j . isDoorway () ) { ++ dtbxanwtkvwbdcftlmaw ; } <s> @ org.junit.Test public void numDoors () { int door = 0 ; for ( clueGame.BoardCell [] i : tests.clueBoardTests.board . getBoard () ) { for ( clueGame.BoardCell j : i ) { if ( j . isDoorway () ) { ++ dtbxanwtkvwbdcftlmaw ; } } } assertEquals ( tests.clueBoardTests.NUM_DOORS , door ) ; } <s> Fixed an error
fix_before_refactoring: if ( ( j != null ) && ( j . isDoorway () ) ) { ++ door ; }
fix_after_refactoring: if ( ( j != null ) && ( j . isDoorway () ) ) { ++ dtbxanwtkvwbdcftlmaw ; }
× fix_prediction_before: if ( j . isDoorway () ) { ++ door ; }
× fix_prediction_after: if ( j . isDoorway () ) { ++ dtbxanwtkvwbdcftlmaw ; }

line_index: 421
bug_before_refactoring: index = ( randomNumber ) % ( conflicts . size () ) <s> private metaopt.Operation chooseOpToSchedule ( java.util.ArrayList < metaopt.Operation > conflicts ) { int index = ( randomNumber ) % ( conflicts . size () ) ; for ( metaopt.Operation op : schedulable ) { if ( conflicts . get ( index ) . equals ( op ) ) { schedulable . remove ( op ) ; return op ; } } return null ; } <s> Index problem fixed.
bug_after_refactoring: sskhvdslfgocvcanmnud = ( randomNumber ) % ( conflicts . size () ) <s> private metaopt.Operation chooseOpToSchedule ( java.util.ArrayList < metaopt.Operation > conflicts ) { int sskhvdslfgocvcanmnud = ( randomNumber ) % ( conflicts . size () ) ; for ( metaopt.Operation op : schedulable ) { if ( conflicts . get ( index ) . equals ( op ) ) { schedulable . remove ( op ) ; return op ; } } return null ; } <s> Index problem fixed.
fix_before_refactoring: index = java.lang.Math . abs ( ( ( randomNumber ) % ( conflicts . size () ) ) )
fix_after_refactoring: sskhvdslfgocvcanmnud = java.lang.Math . abs ( ( ( randomNumber ) % ( conflicts . size () ) ) )
× fix_prediction_before: index = ( randomNumber ) % ( conflicts . size () )
× fix_prediction_after: sskhvdslfgocvcanmnud = ( randomNumber ) % ( conflicts . size () )

line_index: 422
bug_before_refactoring: { difference = - ( computerBuilders ) ; computerBuilders = 0 ; } <s> public int adjustComputerBuilders ( int amount ) { int difference = amount ; if ( ( ( computerBuilders ) < ( java.lang.Math . abs ( difference ) ) ) && ( amount < 0 ) ) { difference = - ( computerBuilders ) ; computerBuilders = 0 ; } else { computerBuilders += amount ; } if ( difference != 0 ) gi . setComputerBuildersLabelChangeText ( difference ) ; return difference ; } <s> Moved CardActions Around  Adding Subtract Method  Fixed Lots of Card Action Bugs
bug_after_refactoring: { qvyqozrnjoryvaktabjz = - ( computerBuilders ) ; computerBuilders = 0 ; } <s> public int adjustComputerBuilders ( int amount ) { int difference = amount ; if ( ( ( computerBuilders ) < ( java.lang.Math . abs ( difference ) ) ) && ( amount < 0 ) ) { qvyqozrnjoryvaktabjz = - ( computerBuilders ) ; computerBuilders = 0 ; } else { computerBuilders += amount ; } if ( difference != 0 ) gi . setComputerBuildersLabelChangeText ( difference ) ; return difference ; } <s> Moved CardActions Around  Adding Subtract Method  Fixed Lots of Card Action Bugs
fix_before_refactoring: { difference = ( - ( computerBuilders ) ) + 1 ; computerBuilders = 1 ; }
fix_after_refactoring: { qvyqozrnjoryvaktabjz = ( - ( computerBuilders ) ) + 1 ; computerBuilders = 1 ; }
× fix_prediction_before: { difference = - ( computerBuilders ) ; computerBuilders = 0 ; break; }
× fix_prediction_after: { qvyqozrnjoryvaktabjz = - ( computerBuilders ) ; computerBuilders = 0 ; }

line_index: 423
bug_before_refactoring: if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( y ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else if ( ( java.lang.Math . abs ( y ) ) > ( k_minJoystickValue ) ) { startMotor () ; m_mainMotor . set ( y ) ; } <s> public void manualCtl () { double y = m_liftStick . getY ( GenericHID.Hand.kLeft ) ; m_robot.logger . debug ( ( "manualCtl:" + y ) ) ; if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( y ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else if ( ( java.lang.Math . abs ( y ) ) > ( k_minJoystickValue ) ) { startMotor () ; m_mainMotor . set ( y ) ; } } <s> Bugfixes resulting from production of tutorial / slides.
bug_after_refactoring: if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else if ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) > ( k_minJoystickValue ) ) { startMotor () ; m_mainMotor . set ( yxukxwvfwqamadwyxtpz ) ; } <s> public void manualCtl () { double y = m_liftStick . getY ( GenericHID.Hand.kLeft ) ; m_robot.logger . debug ( ( "manualCtl:" + y ) ) ; if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else if ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) > ( k_minJoystickValue ) ) { startMotor () ; m_mainMotor . set ( yxukxwvfwqamadwyxtpz ) ; } } <s> Bugfixes resulting from production of tutorial / slides.
fix_before_refactoring: if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( y ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else { startMotor () ; m_mainMotor . set ( y ) ; }
fix_after_refactoring: if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else { startMotor () ; m_mainMotor . set ( yxukxwvfwqamadwyxtpz ) ; }
× fix_prediction_before: if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( y ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else if ( ( java.lang.Math . abs ( y ) ) > ( k_minJoystickValue ) ) { startMotor () ; m_mainMotor . set ( y ) ; }
× fix_prediction_after: if ( ( isAnyLimitSwitchClosed () ) || ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) < ( k_minJoystickValue ) ) ) { stopMotor () ; } else if ( ( java.lang.Math . abs ( yxukxwvfwqamadwyxtpz ) ) > ( k_minJoystickValue ) ) { startMotor () ; m_mainMotor . set ( yxukxwvfwqamadwyxtpz ) ; }

line_index: 424
bug_before_refactoring: { java.lang.String s = e . toString () ; int i = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( i == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; e . printStackTrace () ; } <s> public static void logShortError ( java.lang.Exception e , int lines ) { java.lang.String s = e . toString () ; int i = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( i == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; e . printStackTrace () ; } <s> Fix logging errors  -short log not working -double printing stack trace
bug_after_refactoring: { java.lang.String s = e . toString () ; int guhqtvkltbnhuealpcpg = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( guhqtvkltbnhuealpcpg == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; e . printStackTrace () ; } <s> public static void logShortError ( java.lang.Exception e , int lines ) { java.lang.String s = e . toString () ; int guhqtvkltbnhuealpcpg = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( guhqtvkltbnhuealpcpg == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; e . printStackTrace () ; } <s> Fix logging errors  -short log not working -double printing stack trace
fix_before_refactoring: { java.lang.String s = e . toString () ; int i = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( i == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; i ++ ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; }
fix_after_refactoring: { java.lang.String s = e . toString () ; int guhqtvkltbnhuealpcpg = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( guhqtvkltbnhuealpcpg == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; guhqtvkltbnhuealpcpg ++ ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; }
× fix_prediction_before: { java.lang.String s = e . toString () ; int i = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( i == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; } global.record.Log . log ( "ERROR" , s ) ; e . printStackTrace () ; }
× fix_prediction_after: { java.lang.String s = e . toString () ; int guhqtvkltbnhuealpcpg = 0 ; for ( java.lang.StackTraceElement er : e . getStackTrace () ) { if ( guhqtvkltbnhuealpcpg == lines ) { break; } s += "\n\tat " + ( er . toString () ) ; } e . printStackTrace () ; global.record.Log . log ( "ERROR" , s ) ; e . printStackTrace () ; }

line_index: 425
bug_before_refactoring: { int fromPosition = mItems . indexOf ( item ) ; java.util.Collections . swap ( mItems , fromPosition , toPosition ) ; com.github.gfranks.dynamiccard.adapter.DynamicCardAdapter . notifyItemMoved ( fromPosition , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , fromPosition , toPosition ) ; } } <s> public final void moveItem ( T item , int toPosition ) { int fromPosition = mItems . indexOf ( item ) ; java.util.Collections . swap ( mItems , fromPosition , toPosition ) ; com.github.gfranks.dynamiccard.adapter.DynamicCardAdapter . notifyItemMoved ( fromPosition , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , fromPosition , toPosition ) ; } } <s> Fixing bug when moving an item to very top or bottom and other items would get shifted
bug_after_refactoring: { int zkkeyqarpanaqdrzpjwx = mItems . indexOf ( item ) ; java.util.Collections . swap ( mItems , zkkeyqarpanaqdrzpjwx , toPosition ) ; com.github.gfranks.dynamiccard.adapter.DynamicCardAdapter . notifyItemMoved ( zkkeyqarpanaqdrzpjwx , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , zkkeyqarpanaqdrzpjwx , toPosition ) ; } } <s> public final void moveItem ( T item , int toPosition ) { int zkkeyqarpanaqdrzpjwx = mItems . indexOf ( item ) ; java.util.Collections . swap ( mItems , zkkeyqarpanaqdrzpjwx , toPosition ) ; com.github.gfranks.dynamiccard.adapter.DynamicCardAdapter . notifyItemMoved ( zkkeyqarpanaqdrzpjwx , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , zkkeyqarpanaqdrzpjwx , toPosition ) ; } } <s> Fixing bug when moving an item to very top or bottom and other items would get shifted
fix_before_refactoring: { int fromPosition = mItems . indexOf ( item ) ; mItems . remove ( fromPosition ) ; mItems . add ( toPosition , item ) ; com.github.gfranks.dynamiccard.adapter.DynamicCardAdapter . notifyItemMoved ( fromPosition , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , fromPosition , toPosition ) ; } }
fix_after_refactoring: { int zkkeyqarpanaqdrzpjwx = mItems . indexOf ( item ) ; mItems . remove ( zkkeyqarpanaqdrzpjwx ) ; mItems . add ( toPosition , item ) ; com.github.gfranks.dynamiccard.adapter.DynamicCardAdapter . notifyItemMoved ( zkkeyqarpanaqdrzpjwx , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , zkkeyqarpanaqdrzpjwx , toPosition ) ; } }
× fix_prediction_before: { int fromPosition = mItems . indexOf ( item ) ; java.util.Collections . swap ( mItems , fromPosition , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , fromPosition , toPosition ) ; } }
× fix_prediction_after: { int zkkeyqarpanaqdrzpjwx = mItems . indexOf ( item ) ; java.util.Collections . swap ( mItems , zkkeyqarpanaqdrzpjwx , toPosition ) ; if ( ( mCallback ) != null ) { mCallback . onDynamicCardPositionChanged ( this , zkkeyqarpanaqdrzpjwx , toPosition ) ; } }

line_index: 426
bug_before_refactoring: { os . writeLong ( timestamp ) ; os . write ( stringBytes.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; os . write ( ycord ) ; } <s> public void send ( java.io.DataOutputStream os ) { byte [] stringBytes = playerid . getBytes () ; try { os . writeLong ( timestamp ) ; os . write ( stringBytes.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; os . write ( ycord ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } <s> Fixed bug in MessageHandler
bug_after_refactoring: { os . writeLong ( timestamp ) ; os . write ( rwsediicjxfbhlxhmybw.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; os . write ( ycord ) ; } <s> public void send ( java.io.DataOutputStream os ) { byte [] stringBytes = playerid . getBytes () ; try { os . writeLong ( timestamp ) ; os . write ( rwsediicjxfbhlxhmybw.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; os . write ( ycord ) ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } <s> Fixed bug in MessageHandler
fix_before_refactoring: { os . writeLong ( timestamp ) ; os . write ( stringBytes.length ) ; os . write ( stringBytes , 0 , stringBytes.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; os . write ( ycord ) ; }
fix_after_refactoring: { os . writeLong ( timestamp ) ; os . write ( rwsediicjxfbhlxhmybw.length ) ; os . write ( rwsediicjxfbhlxhmybw , 0 , rwsediicjxfbhlxhmybw.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; os . write ( ycord ) ; }
× fix_prediction_before: { os . writeLong ( timestamp ) ; os . write ( stringBytes.length ) ; os . writeInt ( command ) ; os . writeInt ( xcord ) ; }
× fix_prediction_after: { os . writeLong ( timestamp ) ; os . write ( rwsediicjxfbhlxhmybw.length ) ; if ( ( command ) != null ) { os . writeInt ( command ) ; os . writeInt ( xcord ) ; } os . write ( ycord ) ; }

line_index: 427
bug_before_refactoring: void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { int range = r - l ; if ( range > 0 ) { int m = l + ( range / 2 ) ; mergeSort ( a , p , c , l , m ) ; mergeSort ( a , p , c , ( m + 1 ) , r ) ; merge ( a , p , c , l , r ) ; } } <s> void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { int range = r - l ; if ( range > 0 ) { int m = l + ( range / 2 ) ; mergeSort ( a , p , c , l , m ) ; mergeSort ( a , p , c , ( m + 1 ) , r ) ; merge ( a , p , c , l , r ) ; } } <s> resolved the Time Limit Exceeded problem by reducing space of temp array for 315. Count of Smaller Numbers After Self
bug_after_refactoring: void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { int cfcdqiwythuarskohrrc = r - l ; if ( cfcdqiwythuarskohrrc > 0 ) { int dpnjtpyzrjawrfndjcfu = l + ( cfcdqiwythuarskohrrc / 2 ) ; mergeSort ( a , p , c , l , dpnjtpyzrjawrfndjcfu ) ; mergeSort ( a , p , c , ( dpnjtpyzrjawrfndjcfu + 1 ) , r ) ; merge ( a , p , c , l , r ) ; } } <s> void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { int cfcdqiwythuarskohrrc = r - l ; if ( cfcdqiwythuarskohrrc > 0 ) { int dpnjtpyzrjawrfndjcfu = l + ( cfcdqiwythuarskohrrc / 2 ) ; mergeSort ( a , p , c , l , dpnjtpyzrjawrfndjcfu ) ; mergeSort ( a , p , c , ( dpnjtpyzrjawrfndjcfu + 1 ) , r ) ; merge ( a , p , c , l , r ) ; } } <s> resolved the Time Limit Exceeded problem by reducing space of temp array for 315. Count of Smaller Numbers After Self
fix_before_refactoring: void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { if ( l >= r ) { return; } int m = ( l + r ) / 2 ; mergeSort ( a , p , c , l , m ) ; mergeSort ( a , p , c , ( m + 1 ) , r ) ; merge ( a , p , c , l , m , r ) ; }
fix_after_refactoring: void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { if ( l >= r ) { return; } int dpnjtpyzrjawrfndjcfu = ( l + r ) / 2 ; mergeSort ( a , p , c , l , dpnjtpyzrjawrfndjcfu ) ; mergeSort ( a , p , c , ( dpnjtpyzrjawrfndjcfu + 1 ) , r ) ; merge ( a , p , c , l , dpnjtpyzrjawrfndjcfu , r ) ; }
× fix_prediction_before: void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { int range = r - l ; if ( range > 0 ) { int m = l + ( range / 2 ) ; mergeSort ( a , p , c , l , m ) ; mergeSort ( a , p , c , ( m + 1 ) , r ) ; merge ( a , p , c , l , r ) ; } }
× fix_prediction_after: void mergeSort ( int [] a , int [] p , int [] c , int l , int r ) { int cfcdqiwythuarskohrrc = r - l ; if ( cfcdqiwythuarskohrrc > 0 ) { int dpnjtpyzrjawrfndjcfu = l + ( cfcdqiwythuarskohrrc / 2 ) ; mergeSort ( a , p , c , l , dpnjtpyzrjawrfndjcfu ) ; mergeSort ( a , p , c , ( dpnjtpyzrjawrfndjcfu + 1 ) , r ) ; merge ( a , p , c , l , r ) ; } }

line_index: 428
bug_before_refactoring: { final int takeFlags = ( data . getFlags () ) & ( ( android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION ) | ( android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION ) ) ; getContentResolver () . takePersistableUriPermission ( data . getData () , takeFlags ) ; fileEditText . setText ( data . getDataString () ) ; } <s> @ java.lang.Override protected void onActivityResult ( int requestCode , int resultCode , android.content.Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( requestCode == ( felixwiemuth.lincal.ui.AddCalendarActivity.RESULT_CODE_SELECT_FILE ) ) { if ( data != null ) { final int takeFlags = ( data . getFlags () ) & ( ( android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION ) | ( android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION ) ) ; getContentResolver () . takePersistableUriPermission ( data . getData () , takeFlags ) ; fileEditText . setText ( data . getDataString () ) ; } } } <s> solved lint error by decomposing statement
bug_after_refactoring: { final int cgxjlwupvikksigtshqt = ( data . getFlags () ) & ( ( android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION ) | ( android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION ) ) ; getContentResolver () . takePersistableUriPermission ( data . getData () , cgxjlwupvikksigtshqt ) ; fileEditText . setText ( data . getDataString () ) ; } <s> @ java.lang.Override protected void onActivityResult ( int requestCode , int resultCode , android.content.Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( requestCode == ( felixwiemuth.lincal.ui.AddCalendarActivity.RESULT_CODE_SELECT_FILE ) ) { if ( data != null ) { final int cgxjlwupvikksigtshqt = ( data . getFlags () ) & ( ( android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION ) | ( android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION ) ) ; getContentResolver () . takePersistableUriPermission ( data . getData () , cgxjlwupvikksigtshqt ) ; fileEditText . setText ( data . getDataString () ) ; } } } <s> solved lint error by decomposing statement
fix_before_refactoring: { int takeFlags = data . getFlags () ; takeFlags &= ( android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION ) | ( android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION ) ; getContentResolver () . takePersistableUriPermission ( data . getData () , takeFlags ) ; fileEditText . setText ( data . getDataString () ) ; }
fix_after_refactoring: { int cgxjlwupvikksigtshqt = data . getFlags () ; cgxjlwupvikksigtshqt &= ( android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION ) | ( android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION ) ; getContentResolver () . takePersistableUriPermission ( data . getData () , cgxjlwupvikksigtshqt ) ; fileEditText . setText ( data . getDataString () ) ; }
× fix_prediction_before: { getContentResolver () . takePersistableUriPermission ( data . getData () , takeFlags ) ; fileEditText . setText ( data . getDataString () ) ; }
× fix_prediction_after: { getContentResolver () . takePersistableUriPermission ( data . getData () , cgxjlwupvikksigtshqt ) ; fileEditText . setText ( data . getDataString () ) ; }

line_index: 429
bug_before_refactoring: return org.roda.wui.common.client.tools.Humanize . readableFileSize ( totalSize ) ; <s> @ java.lang.Override public java.lang.String getValue () { java.util.List < org.roda.core.data.v2.TransferredResource > items = display . getVisibleItems () ; if ( ( items . size () ) == 0 ) { return "" ; } else { long totalSize = 0 ; for ( org.roda.core.data.v2.TransferredResource item : items ) { totalSize += item . getSize () ; } return org.roda.wui.common.client.tools.Humanize . readableFileSize ( totalSize ) ; } } <s> fixing folder monitor empty folder bug  removed size from directory in transfer  changed internal auth filter to use login and about resolver constants
bug_after_refactoring: return org.roda.wui.common.client.tools.Humanize . readableFileSize ( ujagqfbqabosuyjxbugf ) ; <s> @ java.lang.Override public java.lang.String getValue () { java.util.List < org.roda.core.data.v2.TransferredResource > items = display . getVisibleItems () ; if ( ( items . size () ) == 0 ) { return "" ; } else { long totalSize = 0 ; for ( org.roda.core.data.v2.TransferredResource item : items ) { totalSize += item . getSize () ; } return org.roda.wui.common.client.tools.Humanize . readableFileSize ( ujagqfbqabosuyjxbugf ) ; } } <s> fixing folder monitor empty folder bug  removed size from directory in transfer  changed internal auth filter to use login and about resolver constants
fix_before_refactoring: return totalSize > 0 ? org.roda.wui.common.client.tools.Humanize . readableFileSize ( totalSize ) : "" ;
fix_after_refactoring: return ujagqfbqabosuyjxbugf > 0 ? org.roda.wui.common.client.tools.Humanize . readableFileSize ( ujagqfbqabosuyjxbugf ) : "" ;
× fix_prediction_before: return "" ;
× fix_prediction_after: return ujagqfbqabosuyjxbugf ;

line_index: 430
bug_before_refactoring: if ( ( o instanceof java.lang.Integer ) || ( o instanceof java.lang.Integer ) ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int index = n . intValue () ; return ( ( index > 0 ) && ( index < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( index ) ) ; } <s> @ java.lang.Override public boolean contains ( java.lang.Object o ) { if ( ( o instanceof java.lang.Integer ) || ( o instanceof java.lang.Integer ) ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int index = n . intValue () ; return ( ( index > 0 ) && ( index < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( index ) ) ; } return false ; } <s> Fixing issue in MultipleSelectionModelBase where a boolean test was being duplicated needlessly.
bug_after_refactoring: if ( ( o instanceof java.lang.Integer ) || ( o instanceof java.lang.Integer ) ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int dfzvxrnpvdkecukyluxp = n . intValue () ; return ( ( dfzvxrnpvdkecukyluxp > 0 ) && ( dfzvxrnpvdkecukyluxp < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( dfzvxrnpvdkecukyluxp ) ) ; } <s> @ java.lang.Override public boolean contains ( java.lang.Object o ) { if ( ( o instanceof java.lang.Integer ) || ( o instanceof java.lang.Integer ) ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int dfzvxrnpvdkecukyluxp = n . intValue () ; return ( ( dfzvxrnpvdkecukyluxp > 0 ) && ( dfzvxrnpvdkecukyluxp < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( dfzvxrnpvdkecukyluxp ) ) ; } return false ; } <s> Fixing issue in MultipleSelectionModelBase where a boolean test was being duplicated needlessly.
fix_before_refactoring: if ( o instanceof java.lang.Number ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int index = n . intValue () ; return ( ( index > 0 ) && ( index < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( index ) ) ; }
fix_after_refactoring: if ( o instanceof java.lang.Number ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int dfzvxrnpvdkecukyluxp = n . intValue () ; return ( ( dfzvxrnpvdkecukyluxp > 0 ) && ( dfzvxrnpvdkecukyluxp < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( dfzvxrnpvdkecukyluxp ) ) ; }
× fix_prediction_before: if ( ( o instanceof java.lang.Integer ) || ( o instanceof java.lang.Integer ) ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int index = n . intValue () ; return ( ( index > 0 ) && ( index < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( index ) ) ; }
× fix_prediction_after: if ( ( o instanceof java.lang.Integer ) || ( o instanceof java.lang.Integer ) ) { java.lang.Number n = ( ( java.lang.Number ) ( o ) ) ; int dfzvxrnpvdkecukyluxp = n . intValue () ; return ( ( dfzvxrnpvdkecukyluxp > 0 ) && ( dfzvxrnpvdkecukyluxp < ( selectedIndices . length () ) ) ) && ( selectedIndices . get ( dfzvxrnpvdkecukyluxp ) ) ; }

line_index: 431
bug_before_refactoring: private void renderTime ( final long milliseconds ) { final long seconds = ( milliseconds / 1000 ) % 60 ; final long minute = ( milliseconds / 60000 ) % 60 ; final long hour = ( milliseconds / 3600000 ) % 24 ; final long day = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , day , hour , minute , seconds ) ; setText ( text ) ; } <s> private void renderTime ( final long milliseconds ) { final long seconds = ( milliseconds / 1000 ) % 60 ; final long minute = ( milliseconds / 60000 ) % 60 ; final long hour = ( milliseconds / 3600000 ) % 24 ; final long day = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , day , hour , minute , seconds ) ; setText ( text ) ; } <s> bug fixes
bug_after_refactoring: private void renderTime ( final long milliseconds ) { final long upwcjdlvchpwygzmkzco = ( milliseconds / 1000 ) % 60 ; final long rihjerqrtwkrxpcvcpgk = ( milliseconds / 60000 ) % 60 ; final long fblezxwinisvjaykeshl = ( milliseconds / 3600000 ) % 24 ; final long iadkelocvyrrhpxriscw = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , iadkelocvyrrhpxriscw , fblezxwinisvjaykeshl , rihjerqrtwkrxpcvcpgk , upwcjdlvchpwygzmkzco ) ; setText ( text ) ; } <s> private void renderTime ( final long milliseconds ) { final long upwcjdlvchpwygzmkzco = ( milliseconds / 1000 ) % 60 ; final long rihjerqrtwkrxpcvcpgk = ( milliseconds / 60000 ) % 60 ; final long fblezxwinisvjaykeshl = ( milliseconds / 3600000 ) % 24 ; final long iadkelocvyrrhpxriscw = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , iadkelocvyrrhpxriscw , fblezxwinisvjaykeshl , rihjerqrtwkrxpcvcpgk , upwcjdlvchpwygzmkzco ) ; setText ( text ) ; } <s> bug fixes
fix_before_refactoring: public void renderTime ( final long milliseconds ) { final long seconds = ( milliseconds / 1000 ) % 60 ; final long minute = ( milliseconds / 60000 ) % 60 ; final long hour = ( milliseconds / 3600000 ) % 24 ; final long day = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , day , hour , minute , seconds ) ; setText ( text ) ; }
fix_after_refactoring: public void renderTime ( final long milliseconds ) { final long upwcjdlvchpwygzmkzco = ( milliseconds / 1000 ) % 60 ; final long rihjerqrtwkrxpcvcpgk = ( milliseconds / 60000 ) % 60 ; final long fblezxwinisvjaykeshl = ( milliseconds / 3600000 ) % 24 ; final long iadkelocvyrrhpxriscw = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , iadkelocvyrrhpxriscw , fblezxwinisvjaykeshl , rihjerqrtwkrxpcvcpgk , upwcjdlvchpwygzmkzco ) ; setText ( text ) ; }
× fix_prediction_before: private void renderTime ( final long milliseconds ) { final long seconds = ( milliseconds / 1000 ) % 60 ; final long minute = ( milliseconds / 60000 ) % 60 ; final long hour = ( milliseconds / 3600000 ) % 24 ; final long day = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , day , hour , minute , seconds ) ; setText ( text ) ; }
× fix_prediction_after: private void renderTime ( final long milliseconds ) { final long upwcjdlvchpwygzmkzco = ( milliseconds / 1000 ) % 60 ; final long rihjerqrtwkrxpcvcpgk = ( milliseconds / 60000 ) % 60 ; final long fblezxwinisvjaykeshl = ( milliseconds / 3600000 ) % 24 ; final long iadkelocvyrrhpxriscw = milliseconds / 86400000 ; final java.lang.String text = java.lang.String . format ( mTimeFormat , iadkelocvyrrhpxriscw , fblezxwinisvjaykeshl , rihjerqrtwkrxpcvcpgk , upwcjdlvchpwygzmkzco ) ; setText ( text ) ; }

line_index: 432
bug_before_refactoring: private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float realScale = checkRealScale ( scale ) ; if ( realScale == 1.0F ) { if ( ( mZoomListener ) != null ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; } return false ; } zoomAnimated ( byGesture , realScale , centerX , centerY , shouldCallback ) ; return true ; } <s> private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float realScale = checkRealScale ( scale ) ; if ( realScale == 1.0F ) { if ( ( mZoomListener ) != null ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; } return false ; } zoomAnimated ( byGesture , realScale , centerX , centerY , shouldCallback ) ; return true ; } <s> Update OnTouchGestureListener. Fix a bug on fling event when the view is not draggable.
bug_after_refactoring: private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float dkdibwpwazjwjcyozemo = checkRealScale ( scale ) ; if ( dkdibwpwazjwjcyozemo == 1.0F ) { if ( ( mZoomListener ) != null ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; } return false ; } zoomAnimated ( byGesture , dkdibwpwazjwjcyozemo , centerX , centerY , shouldCallback ) ; return true ; } <s> private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float dkdibwpwazjwjcyozemo = checkRealScale ( scale ) ; if ( dkdibwpwazjwjcyozemo == 1.0F ) { if ( ( mZoomListener ) != null ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; } return false ; } zoomAnimated ( byGesture , dkdibwpwazjwjcyozemo , centerX , centerY , shouldCallback ) ; return true ; } <s> Update OnTouchGestureListener. Fix a bug on fling event when the view is not draggable.
fix_before_refactoring: private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float realScale = checkRealScale ( scale ) ; if ( realScale == 1.0F ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; return false ; } zoomAnimated ( byGesture , realScale , centerX , centerY , shouldCallback ) ; return true ; }
fix_after_refactoring: private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float dkdibwpwazjwjcyozemo = checkRealScale ( scale ) ; if ( dkdibwpwazjwjcyozemo == 1.0F ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; return false ; } zoomAnimated ( byGesture , dkdibwpwazjwjcyozemo , centerX , centerY , shouldCallback ) ; return true ; }
× fix_prediction_before: private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float realScale = checkRealScale ( scale ) ; if ( realScale == 1.0F ) { if ( ( mZoomListener ) != null ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; } return false ; } zoomAnimated ( byGesture , realScale , centerX , centerY , shouldCallback ) ; return true ; }
× fix_prediction_after: private boolean private boolean privatePerformZoom ( boolean byGesture , float scale , int centerX , int centerY , boolean shouldCallback ) { float dkdibwpwazjwjcyozemo = checkRealScale ( scale ) ; if ( ( mZoomListener ) != null ) { fitTranslate () ; mZoomListener . onZoomEnd ( byGesture , 1 , centerX , centerY ) ; } return false ; }

line_index: 433
bug_before_refactoring: { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; int value = inputStream . read () ; result.atNewLine = isNewLine ( value ) ; while ( ( value = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( value ) ) { ( result.lineNumber ) -- ; } } return result ; } <s> private hudson.plugins.timestamper.annotator.ConsoleLogParser.Result parseFromFinish ( java.io.InputStream inputStream ) throws java.io.IOException { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; int value = inputStream . read () ; result.atNewLine = isNewLine ( value ) ; while ( ( value = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( value ) ) { ( result.lineNumber ) -- ; } } return result ; } <s> Fix off-by-one error in TimestampsReader.getAbs  Unlikely to cause problems when running Jenkins  but it made it more difficult to write the unit tests.
bug_after_refactoring: { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; int isxocktlvwvjxufmgbmn = inputStream . read () ; result.atNewLine = isNewLine ( isxocktlvwvjxufmgbmn ) ; while ( ( isxocktlvwvjxufmgbmn = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( isxocktlvwvjxufmgbmn ) ) { ( result.lineNumber ) -- ; } } return result ; } <s> private hudson.plugins.timestamper.annotator.ConsoleLogParser.Result parseFromFinish ( java.io.InputStream inputStream ) throws java.io.IOException { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; int isxocktlvwvjxufmgbmn = inputStream . read () ; result.atNewLine = isNewLine ( isxocktlvwvjxufmgbmn ) ; while ( ( isxocktlvwvjxufmgbmn = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( isxocktlvwvjxufmgbmn ) ) { ( result.lineNumber ) -- ; } } return result ; } <s> Fix off-by-one error in TimestampsReader.getAbs  Unlikely to cause problems when running Jenkins  but it made it more difficult to write the unit tests.
fix_before_refactoring: { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; result.lineNumber = - 1 ; int value = inputStream . read () ; result.atNewLine = isNewLine ( value ) ; while ( ( value = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( value ) ) { ( result.lineNumber ) -- ; } } return result ; }
fix_after_refactoring: { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; result.lineNumber = - 1 ; int isxocktlvwvjxufmgbmn = inputStream . read () ; result.atNewLine = isNewLine ( isxocktlvwvjxufmgbmn ) ; while ( ( isxocktlvwvjxufmgbmn = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( isxocktlvwvjxufmgbmn ) ) { ( result.lineNumber ) -- ; } } return result ; }
× fix_prediction_before: { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; int value = inputStream . read () ; result.atNewLine = isNewLine ( value ) ; while ( ( value = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( value ) ) { ( result.lineNumber ) -- ; } } return result ; }
× fix_prediction_after: { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; int isxocktlvwvjxufmgbmn = inputStream . read () ; result.atNewLine = isNewLine ( isxocktlvwvjxufmgbmn ) ; while ( ( isxocktlvwvjxufmgbmn = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( isxocktlvwvjxufmgbmn ) ) { ( result.lineNumber ) -- ; } } return result ; }

line_index: 434
bug_before_refactoring: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "usesAttributes: " + tagName ) + ":" ) + usesAttributes ) ) ; return usesAttributes ; } <s> @ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "usesAttributes: " + tagName ) + ":" ) + usesAttributes ) ) ; return usesAttributes ; } <s> https://github.com/cflint/CFLint/issues/261  fixed the semi checking. and cleanup some sysouts
bug_after_refactoring: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsdnmrqinf: " + tagName ) + ":" ) + qbbujtkijiqsdnmrqinf ) ) ; return qbbujtkijiqsdnmrqinf ; } <s> @ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; java.lang.System.out . println ( ( ( ( "qbbujtkijiqsdnmrqinf: " + tagName ) + ":" ) + qbbujtkijiqsdnmrqinf ) ) ; return qbbujtkijiqsdnmrqinf ; } <s> https://github.com/cflint/CFLint/issues/261  fixed the semi checking. and cleanup some sysouts
fix_before_refactoring: { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; }
fix_after_refactoring: { tagName = tagName . toLowerCase () ; boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return qbbujtkijiqsdnmrqinf ; }
× fix_prediction_before: { boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; }
× fix_prediction_after: { boolean qbbujtkijiqsdnmrqinf = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return qbbujtkijiqsdnmrqinf ; }

line_index: 435
bug_before_refactoring: { java.util.Random rand = new java.util.Random () ; int monsterCurrentHp = enemy . getHp () ; int r = rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ; if ( r <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( monsterCurrentHp - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; } <s> public int attack ( edu.cis232.gwasos.resources.Combat enemy ) { java.util.Random rand = new java.util.Random () ; int monsterCurrentHp = enemy . getHp () ; int r = rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ; if ( r <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( monsterCurrentHp - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; } <s> Merge pull request #9 from David-Mc/testing  Fixed Monster Stepping on Player Bug
bug_after_refactoring: { java.util.Random rand = new java.util.Random () ; int gqtxsjbnykaakpxdcfly = enemy . getHp () ; int xhdvbmhmlpdtjqmwgjfv = rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ; if ( xhdvbmhmlpdtjqmwgjfv <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( gqtxsjbnykaakpxdcfly - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; } <s> public int attack ( edu.cis232.gwasos.resources.Combat enemy ) { java.util.Random rand = new java.util.Random () ; int gqtxsjbnykaakpxdcfly = enemy . getHp () ; int xhdvbmhmlpdtjqmwgjfv = rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ; if ( xhdvbmhmlpdtjqmwgjfv <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( gqtxsjbnykaakpxdcfly - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; } <s> Merge pull request #9 from David-Mc/testing  Fixed Monster Stepping on Player Bug
fix_before_refactoring: { java.util.Random rand = new java.util.Random () ; int monsterCurrentHp = enemy . getHp () ; if ( ( rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ) <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( monsterCurrentHp - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; }
fix_after_refactoring: { java.util.Random rand = new java.util.Random () ; int gqtxsjbnykaakpxdcfly = enemy . getHp () ; if ( ( rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ) <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( gqtxsjbnykaakpxdcfly - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; }
× fix_prediction_before: { if ( enemy . equals ( enemy . getAgility () ) ) { return 0 ; } java.util.Random rand = new java.util.Random () ; int monsterCurrentHp = enemy . getHp () ; int r = rand . nextInt ( ( ( 5 + ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ; if ( r <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( monsterCurrentHp - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; }
× fix_prediction_after: { if ( enemy == null ) { return 0 ; } java.util.Random rand = new java.util.Random () ; int gqtxsjbnykaakpxdcfly = enemy . getHp () ; int xhdvbmhmlpdtjqmwgjfv = rand . nextInt ( ( ( 5 - ( enemy . getAgility () ) ) - ( getAgility () ) ) ) ; if ( xhdvbmhmlpdtjqmwgjfv <= 3 ) { setMissed ( false ) ; enemy . damage ( power ) ; setPreviousAttackDamage ( ( gqtxsjbnykaakpxdcfly - ( enemy . getHp () ) ) ) ; } else { setMissed ( true ) ; } return previousAttackDamage ; }

line_index: 437
bug_before_refactoring: if ( z <= ( zMin ) ) zMin = z ; <s> public double getMinZ () { if ( ! ( java.lang.Double . isNaN ( zMin ) ) ) return zMin ; for ( int i = 0 ; i < ( getXyz () [ 0 ] . length ) ; i ++ ) { final double z = getXyz ( 0 , i , 2 ) ; if ( z <= ( zMin ) ) zMin = z ; } return zMin ; } <s> Fix bug  Исправил ошибку  которая была вызвана отсутствием проверки значения при сравнении на NaN. Ошибка влияла на результат.
bug_after_refactoring: if ( ejmslvpilcdiwsppxkgp <= ( zMin ) ) zMin = ejmslvpilcdiwsppxkgp ; <s> public double getMinZ () { if ( ! ( java.lang.Double . isNaN ( zMin ) ) ) return zMin ; for ( int i = 0 ; i < ( getXyz () [ 0 ] . length ) ; i ++ ) { final double z = getXyz ( 0 , i , 2 ) ; if ( ejmslvpilcdiwsppxkgp <= ( zMin ) ) zMin = ejmslvpilcdiwsppxkgp ; } return zMin ; } <s> Fix bug  Исправил ошибку  которая была вызвана отсутствием проверки значения при сравнении на NaN. Ошибка влияла на результат.
fix_before_refactoring: if ( ( z <= ( zMin ) ) || ( java.lang.Double . isNaN ( zMin ) ) ) zMin = z ;
fix_after_refactoring: if ( ( ejmslvpilcdiwsppxkgp <= ( zMin ) ) || ( java.lang.Double . isNaN ( zMin ) ) ) zMin = ejmslvpilcdiwsppxkgp ;
× fix_prediction_before: if ( java.lang.Double . isNaN ( zMin ) ) zMin = z ;
× fix_prediction_after: if ( ejmslvpilcdiwsppxkgp < ( zMin ) ) zMin = ejmslvpilcdiwsppxkgp ;

line_index: 438
bug_before_refactoring: { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int r = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; this . close () ; java.lang.System.out . println ( ( "Rows affected: " + r ) ) ; } <s> protected void insert ( java.lang.String table , java.util.HashMap < java.lang.String , java.lang.String > values ) throws java.lang.Exception { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int r = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; this . close () ; java.lang.System.out . println ( ( "Rows affected: " + r ) ) ; } <s> Connection bug fixed  Determines correctly when the connection is closed when needed to open and so. Aditionally  the connection is closed when the Statement Update is done. For the querying  the connection is maintained open to keep the ResultSet values.
bug_after_refactoring: { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int vhilteqkhxcbusbwutrf = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; this . close () ; java.lang.System.out . println ( ( "Rows affected: " + vhilteqkhxcbusbwutrf ) ) ; } <s> protected void insert ( java.lang.String table , java.util.HashMap < java.lang.String , java.lang.String > values ) throws java.lang.Exception { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int vhilteqkhxcbusbwutrf = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; this . close () ; java.lang.System.out . println ( ( "Rows affected: " + vhilteqkhxcbusbwutrf ) ) ; } <s> Connection bug fixed  Determines correctly when the connection is closed when needed to open and so. Aditionally  the connection is closed when the Statement Update is done. For the querying  the connection is maintained open to keep the ResultSet values.
fix_before_refactoring: { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int r = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; }
fix_after_refactoring: { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int vhilteqkhxcbusbwutrf = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; }
× fix_prediction_before: { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int r = ( ( int ) ( this . executeStatement ( ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; }
× fix_prediction_after: { if ( table == null ) throw new java.lang.Exception ( "El nombre de la tabla no puede estar vacío" ) ; java.lang.String insertBody = putBody ( values ) ; int vhilteqkhxcbusbwutrf = ( ( int ) ( this . executeStatement ( ( ( ( ( "INSERT INTO " + table ) + " SET " ) + insertBody ) + ";" ) , true ) ) ) ; this . close () ; }

line_index: 439
bug_before_refactoring: { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int zoom = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( zoom ) ; return zoom ; } else { throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; } } <s> @ java.lang.Override public int getCurrentZoom () { try { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int zoom = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( zoom ) ; return zoom ; } else { throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; return lastKnown . getZoom () ; } } <s> Merge pull request #82 from TH3steven/bugFix  ApplicationSettings and LiveCameraConnectionTest with PowerMock tests
bug_after_refactoring: { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int ewnvbsmouxwpvmdzqyft = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( ewnvbsmouxwpvmdzqyft ) ; return ewnvbsmouxwpvmdzqyft ; } else { throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; } } <s> @ java.lang.Override public int getCurrentZoom () { try { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int ewnvbsmouxwpvmdzqyft = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( ewnvbsmouxwpvmdzqyft ) ; return ewnvbsmouxwpvmdzqyft ; } else { throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; return lastKnown . getZoom () ; } } <s> Merge pull request #82 from TH3steven/bugFix  ApplicationSettings and LiveCameraConnectionTest with PowerMock tests
fix_before_refactoring: { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int zoom = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( zoom ) ; return zoom ; } throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; }
fix_after_refactoring: { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int ewnvbsmouxwpvmdzqyft = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( ewnvbsmouxwpvmdzqyft ) ; return ewnvbsmouxwpvmdzqyft ; } throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; }
× fix_prediction_before: { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int zoom = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( zoom ) ; return zoom ; } else { throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; } }
× fix_prediction_after: { java.lang.String zoomRes = sendRequest ( buildPanTiltHeadControlURL ( "%23GZ" ) ) ; if ( zoomRes . startsWith ( "gz" ) ) { int ewnvbsmouxwpvmdzqyft = java.lang.Integer . parseInt ( zoomRes . substring ( 2 , 5 ) , 16 ) ; lastKnown . setZoom ( ewnvbsmouxwpvmdzqyft ) ; return ewnvbsmouxwpvmdzqyft ; } else { throw new java.io.IOException ( ( ( errorString ) + zoomRes ) ) ; } }

line_index: 440
bug_before_refactoring: int planeSize = loci.formats.FormatTools . getPlaneSize ( this ) ; <s> @ java.lang.Override public byte [] openBytes ( int no , byte [] buf , int x , int y , int w , int h ) throws java.io.IOException , loci.formats.FormatException { loci.formats.FormatTools . checkPlaneParameters ( this , no , buf.length , x , y , w , h ) ; int planeSize = loci.formats.FormatTools . getPlaneSize ( this ) ; pixelFile . seek ( ( ( pixelOffset ) + ( no * planeSize ) ) ) ; readPlane ( pixelFile , x , y , w , h , buf ) ; return buf ; } <s> merge develop -Dorg -Sno-error: PR 2345 (Fixes crash when loading large .nii files)
bug_after_refactoring: int jdpygddalayogalbpgvs = loci.formats.FormatTools . getPlaneSize ( this ) ; <s> @ java.lang.Override public byte [] openBytes ( int no , byte [] buf , int x , int y , int w , int h ) throws java.io.IOException , loci.formats.FormatException { loci.formats.FormatTools . checkPlaneParameters ( this , no , buf.length , x , y , w , h ) ; int jdpygddalayogalbpgvs = loci.formats.FormatTools . getPlaneSize ( this ) ; pixelFile . seek ( ( ( pixelOffset ) + ( no * planeSize ) ) ) ; readPlane ( pixelFile , x , y , w , h , buf ) ; return buf ; } <s> merge develop -Dorg -Sno-error: PR 2345 (Fixes crash when loading large .nii files)
fix_before_refactoring: long planeSize = loci.formats.FormatTools . getPlaneSize ( this ) ;
fix_after_refactoring: long jdpygddalayogalbpgvs = loci.formats.FormatTools . getPlaneSize ( this ) ;
× fix_prediction_before: int planeSize += loci.formats.FormatTools . getPlaneSize ( this ) ;
× fix_prediction_after: int jdpygddalayogalbpgvs = loci.formats.FormatTools . getPlaneSize ( this ) ;

line_index: 441
bug_before_refactoring: getSlotFromIndex ( index ) <s> @ java.lang.Override public net.minecraft.item.ItemStack insertItem ( int slot , net.minecraft.item.ItemStack stack , boolean simulate ) { int index = getIndexForSlot ( slot ) ; net.minecraftforge.items.IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; slot = getSlotFromIndex ( index ) ; return handler . insertItem ( slot , stack , simulate ) ; } <s> Merge pull request #2539 from bonii-xx/bugfix  Fix CombinedInvWrapper accessing incorrect slots
bug_after_refactoring: getSlotFromIndex ( ysgljyuatzqmlavwfeco ) <s> @ java.lang.Override public net.minecraft.item.ItemStack insertItem ( int slot , net.minecraft.item.ItemStack stack , boolean simulate ) { int index = getIndexForSlot ( slot ) ; net.minecraftforge.items.IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; slot = getSlotFromIndex ( ysgljyuatzqmlavwfeco ) ; return handler . insertItem ( slot , stack , simulate ) ; } <s> Merge pull request #2539 from bonii-xx/bugfix  Fix CombinedInvWrapper accessing incorrect slots
fix_before_refactoring: getSlotFromIndex ( slot , index )
fix_after_refactoring: getSlotFromIndex ( slot , ysgljyuatzqmlavwfeco )
× fix_prediction_before: getSlotFromIndex ( slot , stack )
× fix_prediction_after: getSlotFromIndex ( ysgljyuatzqmlavwfeco )

line_index: 442
bug_before_refactoring: noise . noise2 ( ( ( scale * curFrequency ) * x ) , ( ( scale * curFrequency ) * y ) ) <s> private float getNoise ( float x , float y , mapChooser.PerlinNoiseGenerator noise , float scale ) { float n = 0 ; float weight = 1 ; float curFrequency = 1 ; for ( int i = 0 ; i < ( frequencies ) ; i ++ ) { n += weight * ( noise . noise2 ( ( ( scale * curFrequency ) * x ) , ( ( scale * curFrequency ) * y ) ) ) ; weight /= 2 ; curFrequency += 2 ; } return n ; } <s> Fixed bug that wouldn't allow moving around map to function properly.
bug_after_refactoring: noise . noise2 ( ( ( scale * socawakffvozyqbfgtej ) * x ) , ( ( scale * socawakffvozyqbfgtej ) * y ) ) <s> private float getNoise ( float x , float y , mapChooser.PerlinNoiseGenerator noise , float scale ) { float n = 0 ; float weight = 1 ; float curFrequency = 1 ; for ( int i = 0 ; i < ( frequencies ) ; i ++ ) { n += weight * ( noise . noise2 ( ( ( scale * socawakffvozyqbfgtej ) * x ) , ( ( scale * socawakffvozyqbfgtej ) * y ) ) ) ; weight /= 2 ; curFrequency += 2 ; } return n ; } <s> Fixed bug that wouldn't allow moving around map to function properly.
fix_before_refactoring: noise . noise2 ( ( curFrequency * x ) , ( curFrequency * y ) )
fix_after_refactoring: noise . noise2 ( ( socawakffvozyqbfgtej * x ) , ( socawakffvozyqbfgtej * y ) )
× fix_prediction_before: noise . noise2 ( ( ( scale * curFrequency ) * x ) , ( ( scale * curFrequency ) * y ) - scale )
× fix_prediction_after: noise . noise2 ( ( ( scale * socawakffvozyqbfgtej ) * x ) , ( ( scale * socawakffvozyqbfgtej ) * y ) )

line_index: 443
bug_before_refactoring: return ( vBFS . distTo ( common ) ) + ( wBFS . distTo ( common ) ) ; <s> public int length ( int v , int w ) { if ( v == w ) { return 0 ; } int common = ancestor ( v , w ) ; if ( common == ( - 1 ) ) { return - 1 ; } edu.princeton.cs.algs4.BreadthFirstDirectedPaths vBFS = new edu.princeton.cs.algs4.BreadthFirstDirectedPaths ( G , v ) ; edu.princeton.cs.algs4.BreadthFirstDirectedPaths wBFS = new edu.princeton.cs.algs4.BreadthFirstDirectedPaths ( G , w ) ; return ( vBFS . distTo ( common ) ) + ( wBFS . distTo ( common ) ) ; } <s> Fix double count error in length method of SAP.
bug_after_refactoring: return ( vBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) + ( wBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) ; <s> public int length ( int v , int w ) { if ( v == w ) { return 0 ; } int common = ancestor ( v , w ) ; if ( common == ( - 1 ) ) { return - 1 ; } edu.princeton.cs.algs4.BreadthFirstDirectedPaths vBFS = new edu.princeton.cs.algs4.BreadthFirstDirectedPaths ( G , v ) ; edu.princeton.cs.algs4.BreadthFirstDirectedPaths wBFS = new edu.princeton.cs.algs4.BreadthFirstDirectedPaths ( G , w ) ; return ( vBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) + ( wBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) ; } <s> Fix double count error in length method of SAP.
fix_before_refactoring: return ( ( vBFS . distTo ( common ) ) + ( wBFS . distTo ( common ) ) ) - 1 ;
fix_after_refactoring: return ( ( vBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) + ( wBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) ) - 1 ;
× fix_prediction_before: return ( vBFS . distTo ( common ) ) - ( wBFS . distTo ( common ) ) ;
× fix_prediction_after: return ( vBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) - ( wBFS . distTo ( hjaqyokqhobdhysxhgsb ) ) ;

line_index: 444
bug_before_refactoring: { int id = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = id ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; return id ; } <s> protected int createNewEntry ( java.io.File f ) { int id = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = id ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; return id ; } <s> Fixed a small saving bug
bug_after_refactoring: { int jhbpczuxizmpyhsuybub = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = jhbpczuxizmpyhsuybub ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; return jhbpczuxizmpyhsuybub ; } <s> protected int createNewEntry ( java.io.File f ) { int jhbpczuxizmpyhsuybub = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = jhbpczuxizmpyhsuybub ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; return jhbpczuxizmpyhsuybub ; } <s> Fixed a small saving bug
fix_before_refactoring: { int id = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = id ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; list . add ( file ) ; return id ; }
fix_after_refactoring: { int jhbpczuxizmpyhsuybub = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = jhbpczuxizmpyhsuybub ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; list . add ( file ) ; return jhbpczuxizmpyhsuybub ; }
× fix_prediction_before: { int id = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = id ; if ( file != null ) { file.path = f . getPath () ; file.timestamp = f . lastModified () ; file.references = 1 ; } return id ; }
× fix_prediction_after: { int jhbpczuxizmpyhsuybub = getNextFreeFileID () ; de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile file = new de.tremoneck.timemachine.storage.ReferenceStorage.ReferenceFile () ; file.ID = jhbpczuxizmpyhsuybub ; file.path = f . getPath () ; file.timestamp = f . lastModified () ; return jhbpczuxizmpyhsuybub ; }

line_index: 445
bug_before_refactoring: { mSurfaceTexture . updateTexImage () ; float [] matrix = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( matrix ) ; mEffect . setTextureTransformMatrix ( matrix ) ; int textureId = mEffect . draw ( mSurfaceTextureId ) ; mRendererScreen . draw ( textureId , mCubeBuffer , mTextureBuffer ) ; if ( ( mEncoder ) != null ) { start = java.lang.System . currentTimeMillis () ; mHandler . sendEmptyMessage ( 0 ) ; } return 0 ; } <s> protected int draw () { mSurfaceTexture . updateTexImage () ; float [] matrix = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( matrix ) ; mEffect . setTextureTransformMatrix ( matrix ) ; int textureId = mEffect . draw ( mSurfaceTextureId ) ; mRendererScreen . draw ( textureId , mCubeBuffer , mTextureBuffer ) ; if ( ( mEncoder ) != null ) { start = java.lang.System . currentTimeMillis () ; mHandler . sendEmptyMessage ( 0 ) ; } return 0 ; } <s> fix bug
bug_after_refactoring: { mSurfaceTexture . updateTexImage () ; float [] yxntmdyjzotgvkmiuemr = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; mEffect . setTextureTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; int uteqbyajddbfregthrus = mEffect . draw ( mSurfaceTextureId ) ; mRendererScreen . draw ( uteqbyajddbfregthrus , mCubeBuffer , mTextureBuffer ) ; if ( ( mEncoder ) != null ) { start = java.lang.System . currentTimeMillis () ; mHandler . sendEmptyMessage ( 0 ) ; } return 0 ; } <s> protected int draw () { mSurfaceTexture . updateTexImage () ; float [] yxntmdyjzotgvkmiuemr = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; mEffect . setTextureTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; int uteqbyajddbfregthrus = mEffect . draw ( mSurfaceTextureId ) ; mRendererScreen . draw ( uteqbyajddbfregthrus , mCubeBuffer , mTextureBuffer ) ; if ( ( mEncoder ) != null ) { start = java.lang.System . currentTimeMillis () ; mHandler . sendEmptyMessage ( 0 ) ; } return 0 ; } <s> fix bug
fix_before_refactoring: { mSurfaceTexture . updateTexImage () ; float [] matrix = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( matrix ) ; mEffect . setTextureTransformMatrix ( matrix ) ; int textureId = mEffect . draw ( mSurfaceTextureId ) ; if ( ( mEncoder ) != null ) { start = java.lang.System . currentTimeMillis () ; mHandler . sendEmptyMessage ( 0 ) ; } mRendererScreen . draw ( textureId , mCubeBuffer , mTextureBuffer ) ; return 0 ; }
fix_after_refactoring: { mSurfaceTexture . updateTexImage () ; float [] yxntmdyjzotgvkmiuemr = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; mEffect . setTextureTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; int uteqbyajddbfregthrus = mEffect . draw ( mSurfaceTextureId ) ; if ( ( mEncoder ) != null ) { start = java.lang.System . currentTimeMillis () ; mHandler . sendEmptyMessage ( 0 ) ; } mRendererScreen . draw ( uteqbyajddbfregthrus , mCubeBuffer , mTextureBuffer ) ; return 0 ; }
× fix_prediction_before: { mSurfaceTexture . updateTexImage () ; float [] matrix = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( matrix ) ; mEffect . setTextureTransformMatrix ( matrix ) ; int textureId = mEffect . draw ( mSurfaceTextureId ) ; mRendererScreen . draw ( textureId , mCubeBuffer , mTextureBuffer ) ; return 0 ; }
× fix_prediction_after: { mSurfaceTexture . updateTexImage () ; float [] yxntmdyjzotgvkmiuemr = new float [ 16 ] ; mSurfaceTexture . getTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; mEffect . setTextureTransformMatrix ( yxntmdyjzotgvkmiuemr ) ; int uteqbyajddbfregthrus = mEffect . draw ( mSurfaceTextureId ) ; mRendererScreen . draw ( uteqbyajddbfregthrus , mCubeBuffer , mTextureBuffer ) ; return 0 ; }

line_index: 446
bug_before_refactoring: if ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) { for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { result ++ ; } } } <s> public int getTeamLinks ( org.bukkit.scoreboard.Team team ) { int result = 0 ; if ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) { for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { result ++ ; } } } return result ; } <s> Fixed bug with linking. Enemy link function was NPE if there were no links. Newbie bug...
bug_after_refactoring: if ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) { for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { qjmmhbgwwzxuohogshkr ++ ; } } } <s> public int getTeamLinks ( org.bukkit.scoreboard.Team team ) { int result = 0 ; if ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) { for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { qjmmhbgwwzxuohogshkr ++ ; } } } return result ; } <s> Fixed bug with linking. Enemy link function was NPE if there were no links. Newbie bug...
fix_before_refactoring: if ( ( ( getGameMgr () . getGame ( team ) ) != null ) && ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) ) { for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { result ++ ; } } }
fix_after_refactoring: if ( ( ( getGameMgr () . getGame ( team ) ) != null ) && ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) ) { for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { qjmmhbgwwzxuohogshkr ++ ; } } }
× fix_prediction_before: if ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) { result ++ ; for ( com.wasteofplastic.beaconz.BeaconLink pair : beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { result ++ ; } } }
× fix_prediction_after: if ( beaconLinks . containsKey ( getGameMgr () . getGame ( team ) ) ) { result = new com.wasteofplastic.beaconz.BeaconLink pair ( beaconLinks . get ( getGameMgr () . getGame ( team ) ) ) { if ( pair . getOwner () . equals ( team ) ) { qjmmhbgwwzxuohogshkr ++ ; } } }

line_index: 447
bug_before_refactoring: private double stdDev ( java.util.ArrayList < java.lang.Double > array ) { double mean = mean ( array ) ; double sumOfDiffToMeanSq = 0 ; double length = array . size () ; for ( double i : array ) { double diffToMeanSq = java.lang.Math . pow ( ( i - mean ) , 2 ) ; sumOfDiffToMeanSq += diffToMeanSq ; } double meanOfDiffs = sumOfDiffToMeanSq / length ; return java.lang.Math . sqrt ( meanOfDiffs ) ; } <s> private double stdDev ( java.util.ArrayList < java.lang.Double > array ) { double mean = mean ( array ) ; double sumOfDiffToMeanSq = 0 ; double length = array . size () ; for ( double i : array ) { double diffToMeanSq = java.lang.Math . pow ( ( i - mean ) , 2 ) ; sumOfDiffToMeanSq += diffToMeanSq ; } double meanOfDiffs = sumOfDiffToMeanSq / length ; return java.lang.Math . sqrt ( meanOfDiffs ) ; } <s> Buttons for collection data created  fixed bug in data collection
bug_after_refactoring: private double stdDev ( java.util.ArrayList < java.lang.Double > array ) { double kilfkakdeareevstgxqt = kilfkakdeareevstgxqt ( array ) ; double axcftltpyygskgkiisiu = 0 ; double gpcjgyvelxqyaondoehp = array . size () ; for ( double i : array ) { double fspsxoslxghcbieohodp = java.lang.Math . pow ( ( i - kilfkakdeareevstgxqt ) , 2 ) ; axcftltpyygskgkiisiu += fspsxoslxghcbieohodp ; } double dmjuchnwafaqgnerjjka = axcftltpyygskgkiisiu / gpcjgyvelxqyaondoehp ; return java.lang.Math . sqrt ( dmjuchnwafaqgnerjjka ) ; } <s> private double stdDev ( java.util.ArrayList < java.lang.Double > array ) { double kilfkakdeareevstgxqt = kilfkakdeareevstgxqt ( array ) ; double axcftltpyygskgkiisiu = 0 ; double gpcjgyvelxqyaondoehp = array . size () ; for ( double i : array ) { double fspsxoslxghcbieohodp = java.lang.Math . pow ( ( i - kilfkakdeareevstgxqt ) , 2 ) ; axcftltpyygskgkiisiu += fspsxoslxghcbieohodp ; } double dmjuchnwafaqgnerjjka = axcftltpyygskgkiisiu / gpcjgyvelxqyaondoehp ; return java.lang.Math . sqrt ( dmjuchnwafaqgnerjjka ) ; } <s> Buttons for collection data created  fixed bug in data collection
fix_before_refactoring: private double stdDev ( java.util.LinkedList < java.lang.Double > list ) { double mean = mean ( list ) ; double sumOfDiffToMeanSq = 0 ; double length = list . size () ; for ( double i : list ) { double diffToMeanSq = java.lang.Math . pow ( ( i - mean ) , 2 ) ; sumOfDiffToMeanSq += diffToMeanSq ; } double meanOfDiffs = sumOfDiffToMeanSq / length ; return java.lang.Math . sqrt ( meanOfDiffs ) ; }
fix_after_refactoring: private double stdDev ( java.util.LinkedList < java.lang.Double > list ) { double kilfkakdeareevstgxqt = kilfkakdeareevstgxqt ( list ) ; double axcftltpyygskgkiisiu = 0 ; double gpcjgyvelxqyaondoehp = list . size () ; for ( double i : list ) { double fspsxoslxghcbieohodp = java.lang.Math . pow ( ( i - kilfkakdeareevstgxqt ) , 2 ) ; axcftltpyygskgkiisiu += fspsxoslxghcbieohodp ; } double dmjuchnwafaqgnerjjka = axcftltpyygskgkiisiu / gpcjgyvelxqyaondoehp ; return java.lang.Math . sqrt ( dmjuchnwafaqgnerjjka ) ; }
× fix_prediction_before: public static double stdDev ( java.util.ArrayList < java.lang.Double > array ) { double mean = mean ( array ) ; double sumOfDiffToMeanSq = 0 ; double length = array . size () ; for ( double i : array ) { double diffToMeanSq = java.lang.Math . pow ( ( i - mean ) , 2 ) ; sumOfDiffToMeanSq += diffToMeanSq ; } return java.lang.Math . sqrt ( meanOfDiffs ) ; }
× fix_prediction_after: public double stdDev ( double [] array ) { double kilfkakdeareevstgxqt = kilfkakdeareevstgxqt ( array ) ; double axcftltpyygskgkiisiu = 0 ; double gpcjgyvelxqyaondoehp = array . size () ; for ( double i : array ) { double fspsxoslxghcbieohodp = java.lang.Math . pow ( ( i - kilfkakdeareevstgxqt ) , 2 ) ; axcftltpyygskgkiisiu += fspsxoslxghcbieohodp ; } double dmjuchnwafaqgnerjjka = axcftltpyygskgkiisiu / gpcjgyvelxqyaondoehp ; return java.lang.Math . sqrt ( dmjuchnwafaqgnerjjka ) ; }

line_index: 449
bug_before_refactoring: new android.widget.SimpleCursorAdapter ( activity . getApplicationContext () , themed_item , cursor , dataColumns , viewIDs ) <s> private android.widget.SimpleCursorAdapter getThemedAdapter ( android.database.Cursor cursor ) { java.lang.String [] dataColumns = new java.lang.String [] { NotePad.Notes.COLUMN_NAME_TITLE , NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE } ; int [] viewIDs = new int [] { R.id.itemTitle , R.id.itemDate } ; int themed_item ; if ( FragmentLayout.lightTheme ) themed_item = R.layout.noteslist_item_light ; else themed_item = R.layout.noteslist_item_dark ; android.widget.SimpleCursorAdapter adapter = new android.widget.SimpleCursorAdapter ( activity . getApplicationContext () , themed_item , cursor , dataColumns , viewIDs ) ; return adapter ; } <s> List item theme bug fixed. Never use getApplicationContext()!!!!!
bug_after_refactoring: new android.widget.SimpleCursorAdapter ( activity . getApplicationContext () , zxrgtojvmsjxueofigbl , cursor , dataColumns , mqxtyajkktmcnyojyazk ) <s> private android.widget.SimpleCursorAdapter getThemedAdapter ( android.database.Cursor cursor ) { java.lang.String [] dataColumns = new java.lang.String [] { NotePad.Notes.COLUMN_NAME_TITLE , NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE } ; int [] viewIDs = new int [] { R.id.itemTitle , R.id.itemDate } ; int themed_item ; if ( FragmentLayout.lightTheme ) themed_item = R.layout.noteslist_item_light ; else themed_item = R.layout.noteslist_item_dark ; android.widget.SimpleCursorAdapter adapter = new android.widget.SimpleCursorAdapter ( activity . getApplicationContext () , zxrgtojvmsjxueofigbl , cursor , dataColumns , mqxtyajkktmcnyojyazk ) ; return adapter ; } <s> List item theme bug fixed. Never use getApplicationContext()!!!!!
fix_before_refactoring: new android.widget.SimpleCursorAdapter ( activity , themed_item , cursor , dataColumns , viewIDs )
fix_after_refactoring: new android.widget.SimpleCursorAdapter ( activity , zxrgtojvmsjxueofigbl , cursor , dataColumns , mqxtyajkktmcnyojyazk )
× fix_prediction_before: new android.widget.SimpleCursorAdapter ( activity . getApplicationContext () , themed_item , cursor , dataColumns , viewIDs )
× fix_prediction_after: new android.widget.SimpleCursorAdapter ( activity . getApplicationContext () , zxrgtojvmsjxueofigbl , cursor , dataColumns , mqxtyajkktmcnyojyazk )

line_index: 450
bug_before_refactoring: { double latitude ; double longitude ; java.lang.String title ; int type_id ; values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; } <s> public void fillMap () { double latitude ; double longitude ; java.lang.String title ; int type_id ; values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; } <s> Merge pull request #37 from ITsvetkoFF/feature/show_problem  Show problem fragment  rotation exception temporary fix.
bug_after_refactoring: { double waylcrnbuujqyyhknepn ; double tcrsjwxiamaljaahbcrb ; java.lang.String title ; int qhdrfljnqifafpguarbz ; values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; } <s> public void fillMap () { double waylcrnbuujqyyhknepn ; double tcrsjwxiamaljaahbcrb ; java.lang.String title ; int qhdrfljnqifafpguarbz ; values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; } <s> Merge pull request #37 from ITsvetkoFF/feature/show_problem  Show problem fragment  rotation exception temporary fix.
fix_before_refactoring: { values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; }
fix_after_refactoring: { values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; }
× fix_prediction_before: { double latitude ; double longitude ; java.lang.String title ; int type_id ; values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; }
× fix_prediction_after: { double waylcrnbuujqyyhknepn ; java.lang.String title ; int qhdrfljnqifafpguarbz ; values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } setUpClusterer () ; }

line_index: 451
bug_before_refactoring: @ java.lang.Override public void onResponse ( retrofit2.Call < com.namclu.android.deputyscheduler.models.ShiftResponse > call , retrofit2.Response < com.namclu.android.deputyscheduler.models.ShiftResponse > response ) { int statusCode = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () . getShifts () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; } <s> @ java.lang.Override public void onResponse ( retrofit2.Call < com.namclu.android.deputyscheduler.models.ShiftResponse > call , retrofit2.Response < com.namclu.android.deputyscheduler.models.ShiftResponse > response ) { int statusCode = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () . getShifts () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; } <s> 3 Fix runtime error  - App displays GET /shift data from API call
bug_after_refactoring: @ java.lang.Override public void onResponse ( retrofit2.Call < com.namclu.android.deputyscheduler.models.ShiftResponse > call , retrofit2.Response < com.namclu.android.deputyscheduler.models.ShiftResponse > response ) { int awndyvzdntnmisuflrhp = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () . getShifts () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; } <s> @ java.lang.Override public void onResponse ( retrofit2.Call < com.namclu.android.deputyscheduler.models.ShiftResponse > call , retrofit2.Response < com.namclu.android.deputyscheduler.models.ShiftResponse > response ) { int awndyvzdntnmisuflrhp = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () . getShifts () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; } <s> 3 Fix runtime error  - App displays GET /shift data from API call
fix_before_refactoring: @ java.lang.Override public void onResponse ( retrofit2.Call < java.util.List < com.namclu.android.deputyscheduler.models.Shift > > call , retrofit2.Response < java.util.List < com.namclu.android.deputyscheduler.models.Shift > > response ) { int statusCode = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; }
fix_after_refactoring: @ java.lang.Override public void onResponse ( retrofit2.Call < java.util.List < com.namclu.android.deputyscheduler.models.Shift > > call , retrofit2.Response < java.util.List < com.namclu.android.deputyscheduler.models.Shift > > response ) { int awndyvzdntnmisuflrhp = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; }
× fix_prediction_before: @ java.lang.Override public void onResponse ( retrofit2.Response < com.namclu.android.deputyscheduler.models.ShiftResponse > response ) { int statusCode = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () . getShifts () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; }
× fix_prediction_after: @ java.lang.Override public void onResponse ( retrofit2.Response < com.namclu.android.deputyscheduler.models.ShiftResponse > response ) { int awndyvzdntnmisuflrhp = response . code () ; java.util.List < com.namclu.android.deputyscheduler.models.Shift > shifts = response . body () . getShifts () ; recyclerView . setAdapter ( new com.namclu.android.deputyscheduler.adapters.ShiftAdapter ( shifts ) ) ; }

line_index: 452
bug_before_refactoring: resultCount = stmt . executeUpdate ( query ) ; <s> public void assignForm ( int govid , sample.ApplicationData unAssignedForm ) throws java.sql.SQLException { int resultCount ; stmt = conn . createStatement () ; java.lang.String query = ( ( ( "UPDATE FORM SET FORM.STATUS = 'ASSIGNED', FORM.GOVID = " + govid ) + " WHERE TTBID = '" ) + ( unAssignedForm . getTtbID () ) ) + "'" ; resultCount = stmt . executeUpdate ( query ) ; } <s> Fixed Bug
bug_after_refactoring: mxppjwglkogaqxibndbh = stmt . executeUpdate ( query ) ; <s> public void assignForm ( int govid , sample.ApplicationData unAssignedForm ) throws java.sql.SQLException { int resultCount ; stmt = conn . createStatement () ; java.lang.String query = ( ( ( "UPDATE FORM SET FORM.STATUS = 'ASSIGNED', FORM.GOVID = " + govid ) + " WHERE TTBID = '" ) + ( unAssignedForm . getTtbID () ) ) + "'" ; mxppjwglkogaqxibndbh = stmt . executeUpdate ( query ) ; } <s> Fixed Bug
fix_before_refactoring: stmt . executeUpdate ( query ) ;
fix_after_refactoring: stmt . executeUpdate ( query ) ;
× fix_prediction_before: resultCount += stmt . executeUpdate ( query ) ;
× fix_prediction_after: java.lang.System.out . println ( stmt . executeUpdate ( query ) ) ;

line_index: 453
bug_before_refactoring: private long _daysLate ( com.born2go.lazzybee.db.Card card ) { long due ; long now = com.born2go.lazzybee.algorithms.Utils . intNow () ; if ( ( card . getQueue () ) == ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) due = card . getDue () ; else due = now ; long diff_day = ( now - due ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , diff_day ) ; } <s> private long _daysLate ( com.born2go.lazzybee.db.Card card ) { long due ; long now = com.born2go.lazzybee.algorithms.Utils . intNow () ; if ( ( card . getQueue () ) == ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) due = card . getDue () ; else due = now ; long diff_day = ( now - due ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , diff_day ) ; } <s> Merge pull request #16 from vutamhoan/master  Refactor CardSched  fix 1 small bug  add more Test case
bug_after_refactoring: private long _daysLate ( com.born2go.lazzybee.db.Card card ) { long kgmydekhmrueuvlzctgg ; long bxwwiohkexidiwkcewpk = com.born2go.lazzybee.algorithms.Utils . intNow () ; if ( ( card . getQueue () ) == ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) kgmydekhmrueuvlzctgg = card . getDue () ; else kgmydekhmrueuvlzctgg = bxwwiohkexidiwkcewpk ; long kkfctnpuyqyuzcymaxwl = ( bxwwiohkexidiwkcewpk - kgmydekhmrueuvlzctgg ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , kkfctnpuyqyuzcymaxwl ) ; } <s> private long _daysLate ( com.born2go.lazzybee.db.Card card ) { long kgmydekhmrueuvlzctgg ; long bxwwiohkexidiwkcewpk = com.born2go.lazzybee.algorithms.Utils . intNow () ; if ( ( card . getQueue () ) == ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) kgmydekhmrueuvlzctgg = card . getDue () ; else kgmydekhmrueuvlzctgg = bxwwiohkexidiwkcewpk ; long kkfctnpuyqyuzcymaxwl = ( bxwwiohkexidiwkcewpk - kgmydekhmrueuvlzctgg ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , kkfctnpuyqyuzcymaxwl ) ; } <s> Merge pull request #16 from vutamhoan/master  Refactor CardSched  fix 1 small bug  add more Test case
fix_before_refactoring: protected long _daysLate ( com.born2go.lazzybee.db.Card card ) { if ( ( card . getQueue () ) != ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) return 0 ; long due = card . getDue () ; long now = com.born2go.lazzybee.algorithms.Utils . intNow () ; long diff_day = ( now - due ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , diff_day ) ; }
fix_after_refactoring: protected long _daysLate ( com.born2go.lazzybee.db.Card card ) { if ( ( card . getQueue () ) != ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) return 0 ; long kgmydekhmrueuvlzctgg = card . getDue () ; long bxwwiohkexidiwkcewpk = com.born2go.lazzybee.algorithms.Utils . intNow () ; long kkfctnpuyqyuzcymaxwl = ( bxwwiohkexidiwkcewpk - kgmydekhmrueuvlzctgg ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , kkfctnpuyqyuzcymaxwl ) ; }
× fix_prediction_before: private long _daysLate ( com.born2go.lazzybee.db.Card card ) { long due ; long now = com.born2go.lazzybee.algorithms.Utils . intNow () ; if ( ( card . getQueue () ) == ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) due = card . getDue () ; else due = now ; long diff_day = ( now - due ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , diff_day ) ; }
× fix_prediction_after: private long _daysLate ( com.born2go.lazzybee.db.Card card ) { long kgmydekhmrueuvlzctgg ; long bxwwiohkexidiwkcewpk = com.born2go.lazzybee.algorithms.Utils . intNow () ; if ( ( card . getQueue () ) == ( com.born2go.lazzybee.db.Card.QUEUE_REV2 ) ) kgmydekhmrueuvlzctgg = card . getDue () ; else kgmydekhmrueuvlzctgg = bxwwiohkexidiwkcewpk ; long kkfctnpuyqyuzcymaxwl = ( bxwwiohkexidiwkcewpk - kgmydekhmrueuvlzctgg ) / ( com.born2go.lazzybee.algorithms.CardSched.SECONDS_PERDAY ) ; return java.lang.Math . max ( 0 , kkfctnpuyqyuzcymaxwl ) ; }

line_index: 455
bug_before_refactoring: public char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] output = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { if ( i < ( ( output.length ) / 2 ) ) { output [ i ] = creat1.chrom [ i ] ; } else { output [ i ] = creat2.chrom [ i ] ; } } return output ; } <s> public char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] output = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { if ( i < ( ( output.length ) / 2 ) ) { output [ i ] = creat1.chrom [ i ] ; } else { output [ i ] = creat2.chrom [ i ] ; } } return output ; } <s> Fixed small bugs working on mutation bug
bug_after_refactoring: public char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] tglyxxixpkcqqmrlbqos = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( tglyxxixpkcqqmrlbqos.length ) ; i ++ ) { if ( i < ( ( tglyxxixpkcqqmrlbqos.length ) / 2 ) ) { tglyxxixpkcqqmrlbqos [ i ] = creat1.chrom [ i ] ; } else { tglyxxixpkcqqmrlbqos [ i ] = creat2.chrom [ i ] ; } } return tglyxxixpkcqqmrlbqos ; } <s> public char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] tglyxxixpkcqqmrlbqos = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( tglyxxixpkcqqmrlbqos.length ) ; i ++ ) { if ( i < ( ( tglyxxixpkcqqmrlbqos.length ) / 2 ) ) { tglyxxixpkcqqmrlbqos [ i ] = creat1.chrom [ i ] ; } else { tglyxxixpkcqqmrlbqos [ i ] = creat2.chrom [ i ] ; } } return tglyxxixpkcqqmrlbqos ; } <s> Fixed small bugs working on mutation bug
fix_before_refactoring: public static char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] output = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { if ( i < ( ( output.length ) / 2 ) ) { output [ i ] = creat1.chrom [ i ] ; } else { output [ i ] = creat2.chrom [ i ] ; } } return output ; }
fix_after_refactoring: public static char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] tglyxxixpkcqqmrlbqos = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( tglyxxixpkcqqmrlbqos.length ) ; i ++ ) { if ( i < ( ( tglyxxixpkcqqmrlbqos.length ) / 2 ) ) { tglyxxixpkcqqmrlbqos [ i ] = creat1.chrom [ i ] ; } else { tglyxxixpkcqqmrlbqos [ i ] = creat2.chrom [ i ] ; } } return tglyxxixpkcqqmrlbqos ; }
× fix_prediction_before: public char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] output = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { if ( i < ( ( output.length ) / 2 ) ) { output [ i ] = creat1.chrom [ i ] ; } else { output [ i ] = creat2.chrom [ i ] ; } } return output ; }
× fix_prediction_after: public char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] tglyxxixpkcqqmrlbqos = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( tglyxxixpkcqqmrlbqos.length ) ; i ++ ) { if ( i < ( ( tglyxxixpkcqqmrlbqos.length ) / 2 ) ) { tglyxxixpkcqqmrlbqos [ i ] = creat1.chrom [ i ] ; } else { tglyxxixpkcqqmrlbqos [ i ] = creat2.chrom [ i ] ; } } return tglyxxixpkcqqmrlbqos ; }

line_index: 456
bug_before_refactoring: { int count = swipeListView . getAdapter () . getCount () ; for ( int i = opened . size () ; i <= count ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } } <s> public void resetItems () { if ( ( swipeListView . getAdapter () ) != null ) { int count = swipeListView . getAdapter () . getCount () ; for ( int i = opened . size () ; i <= count ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } } } <s> Remove nineoldandroids  fix position returned by listeners  update build  small bug fixes
bug_after_refactoring: { int wekfpdevjtbbcurcbker = swipeListView . getAdapter () . getCount () ; for ( int i = opened . size () ; i <= wekfpdevjtbbcurcbker ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } } <s> public void resetItems () { if ( ( swipeListView . getAdapter () ) != null ) { int wekfpdevjtbbcurcbker = swipeListView . getAdapter () . getCount () ; for ( int i = opened . size () ; i <= wekfpdevjtbbcurcbker ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } } } <s> Remove nineoldandroids  fix position returned by listeners  update build  small bug fixes
fix_before_refactoring: { int count = swipeListView . getAdapter () . getCount () ; int size = opened . size () ; for ( int i = size ; i < count ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } }
fix_after_refactoring: { int wekfpdevjtbbcurcbker = swipeListView . getAdapter () . getCount () ; int size = opened . size () ; for ( int i = size ; i < wekfpdevjtbbcurcbker ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } }
× fix_prediction_before: { for ( int i = ( swipeListView . getAdapter () ) != null ; i <= count ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } }
× fix_prediction_after: { int wekfpdevjtbbcurcbker = swipeListView . getAdapter () . getCount () ; for ( int i = opened . size () ; i <= wekfpdevjtbbcurcbker ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } }

line_index: 457
bug_before_refactoring: { double wRatio = ( 1 * ( this . width ) ) / width ; double hRatio = ( 1 * ( this . height ) ) / height ; return hRatio < wRatio ? new ui.Resizer.Size ( ( ( int ) ( width * hRatio ) ) , ( ( int ) ( height * hRatio ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * wRatio ) ) , ( ( int ) ( height * wRatio ) ) ) ; } <s> public ui.Resizer.Size resize ( int width , int height ) { double wRatio = ( 1 * ( this . width ) ) / width ; double hRatio = ( 1 * ( this . height ) ) / height ; return hRatio < wRatio ? new ui.Resizer.Size ( ( ( int ) ( width * hRatio ) ) , ( ( int ) ( height * hRatio ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * wRatio ) ) , ( ( int ) ( height * wRatio ) ) ) ; } <s> Bug solved.
bug_after_refactoring: { double sabgiatvnwuiskkjrrja = ( 1 * ( this . width ) ) / width ; double citaacynboohwlaemgvd = ( 1 * ( this . height ) ) / height ; return citaacynboohwlaemgvd < sabgiatvnwuiskkjrrja ? new ui.Resizer.Size ( ( ( int ) ( width * citaacynboohwlaemgvd ) ) , ( ( int ) ( height * citaacynboohwlaemgvd ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * sabgiatvnwuiskkjrrja ) ) , ( ( int ) ( height * sabgiatvnwuiskkjrrja ) ) ) ; } <s> public ui.Resizer.Size resize ( int width , int height ) { double sabgiatvnwuiskkjrrja = ( 1 * ( this . width ) ) / width ; double citaacynboohwlaemgvd = ( 1 * ( this . height ) ) / height ; return citaacynboohwlaemgvd < sabgiatvnwuiskkjrrja ? new ui.Resizer.Size ( ( ( int ) ( width * citaacynboohwlaemgvd ) ) , ( ( int ) ( height * citaacynboohwlaemgvd ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * sabgiatvnwuiskkjrrja ) ) , ( ( int ) ( height * sabgiatvnwuiskkjrrja ) ) ) ; } <s> Bug solved.
fix_before_refactoring: { double wRatio = ( 1.0 * ( this . width ) ) / width ; double hRatio = ( 1.0 * ( this . height ) ) / height ; return hRatio < wRatio ? new ui.Resizer.Size ( ( ( int ) ( width * hRatio ) ) , ( ( int ) ( height * hRatio ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * wRatio ) ) , ( ( int ) ( height * wRatio ) ) ) ; }
fix_after_refactoring: { double sabgiatvnwuiskkjrrja = ( 1.0 * ( this . width ) ) / width ; double citaacynboohwlaemgvd = ( 1.0 * ( this . height ) ) / height ; return citaacynboohwlaemgvd < sabgiatvnwuiskkjrrja ? new ui.Resizer.Size ( ( ( int ) ( width * citaacynboohwlaemgvd ) ) , ( ( int ) ( height * citaacynboohwlaemgvd ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * sabgiatvnwuiskkjrrja ) ) , ( ( int ) ( height * sabgiatvnwuiskkjrrja ) ) ) ; }
× fix_prediction_before: { double wRatio = ( 1 * ( this . width ) ) / width ; double hRatio = ( 1 * ( this . height ) ) / height ; return hRatio < wRatio ? new ui.Resizer.Size ( ( ( int ) ( width * hRatio ) ) , ( ( int ) ( height * hRatio ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * wRatio ) ) , ( ( int ) ( height * wRatio ) ) ) ; }
× fix_prediction_after: { double citaacynboohwlaemgvd = ( 1 * ( this . width ) ) / width ; double citaacynboohwlaemgvd = ( 1 * ( this . height ) ) / height ; return citaacyacynboohwlaemgvd < sabgiatvnwuiskkjrrja ? new ui.Resizer.Size ( ( ( int ) ( width * citaacynboohwlaemgvd ) ) , ( ( int ) ( height * citaacynboohwlaemgvd ) ) ) : new ui.Resizer.Size ( ( ( int ) ( width * sabgiatvnwuiskkjrrja ) ) , ( ( int ) ( height * sabgiatvnwuiskkjrrja ) ) ) ; }

line_index: 458
bug_before_refactoring: switch ( choice ) { case 'P' : this . startPickUpTNT () ; break; case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; } <s> @ java.lang.Override public boolean doAction ( java.lang.String value ) { char choice = value . toUpperCase () . charAt ( 0 ) ; switch ( choice ) { case 'P' : this . startPickUpTNT () ; break; case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; } return false ; } <s> Finished implementing TNT.  Resolved issue #6
bug_after_refactoring: switch ( gnssfhejjejamipjwtxx ) { case 'P' : this . startPickUpTNT () ; break; case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; } <s> @ java.lang.Override public boolean doAction ( java.lang.String value ) { char choice = value . toUpperCase () . charAt ( 0 ) ; switch ( gnssfhejjejamipjwtxx ) { case 'P' : this . startPickUpTNT () ; break; case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; } return false ; } <s> Finished implementing TNT.  Resolved issue #6
fix_before_refactoring: switch ( choice ) { case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; }
fix_after_refactoring: switch ( gnssfhejjejamipjwtxx ) { case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; }
× fix_prediction_before: switch ( choice ) { case 'P' : this . startPickUpTNT () ; break; case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; }
× fix_prediction_after: switch ( gnssfhejjejamipjwtxx ) { case 'P' : this . startPickUpTNT () ; break; case 'D' : this . startDropTNT () ; break; case 'U' : this . startUseTNT () ; break; case 'B' : return true ; default: this . console . println ( "\n*** Invalid selection*** Try again" ) ; break; }

line_index: 459
bug_before_refactoring: @ java.lang.Override public void run () { try { int readCount = socketChannel . read ( input ) ; java.lang.System.out . println ( ( "Read count: " + readCount ) ) ; if ( readCount > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( readCount ) ) ; } selectionKey . attach ( new com.flyer.netty.reactor.third.ThirdHandler.Sender () ) ; selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } <s> @ java.lang.Override public void run () { try { int readCount = socketChannel . read ( input ) ; java.lang.System.out . println ( ( "Read count: " + readCount ) ) ; if ( readCount > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( readCount ) ) ; } selectionKey . attach ( new com.flyer.netty.reactor.third.ThirdHandler.Sender () ) ; selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } <s> Fix the function bug
bug_after_refactoring: @ java.lang.Override public void run () { try { int uiqjsdshxaxxdoalbqhz = socketChannel . read ( input ) ; java.lang.System.out . println ( ( "Read count: " + uiqjsdshxaxxdoalbqhz ) ) ; if ( uiqjsdshxaxxdoalbqhz > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( uiqjsdshxaxxdoalbqhz ) ) ; } selectionKey . attach ( new com.flyer.netty.reactor.third.ThirdHandler.Sender () ) ; selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } <s> @ java.lang.Override public void run () { try { int uiqjsdshxaxxdoalbqhz = socketChannel . read ( input ) ; java.lang.System.out . println ( ( "Read count: " + uiqjsdshxaxxdoalbqhz ) ) ; if ( uiqjsdshxaxxdoalbqhz > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( uiqjsdshxaxxdoalbqhz ) ) ; } selectionKey . attach ( new com.flyer.netty.reactor.third.ThirdHandler.Sender () ) ; selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } <s> Fix the function bug
fix_before_refactoring: private void read ( ) throws java.io.IOException { int readCount = socketChannel . read ( input ) ; java.lang.System.out . println ( ( "Read count: " + readCount ) ) ; if ( readCount > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( readCount ) ) ; } selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; }
fix_after_refactoring: private void read ( ) throws java.io.IOException { int uiqjsdshxaxxdoalbqhz = socketChannel . read ( input ) ; java.lang.System.out . println ( ( "Read count: " + uiqjsdshxaxxdoalbqhz ) ) ; if ( uiqjsdshxaxxdoalbqhz > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( uiqjsdshxaxxdoalbqhz ) ) ; } selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; }
× fix_prediction_before: @ java.lang.Override public void run () { try { int readCount = socketChannel . read ( input ) ; if ( readCount > 0 ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( readCount ) ) ; } selectionKey . attach ( new com.flyer.netty.reactor.third.ThirdHandler.Sender () ) ; selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } }
× fix_prediction_after: @ java.lang.Override public void run () { while ( true ) { state = com.flyer.netty.reactor.third.ThirdHandler.PROCESSING ; com.flyer.netty.reactor.third.ThirdHandler.pool . submit ( new com.flyer.netty.reactor.third.ThirdHandler.Processor ( uiqjsdshxaxxdoalbqhz ) ) ; } selectionKey . attach ( new com.flyer.netty.reactor.third.ThirdHandler.Sender () ) ; selectionKey . interestOps ( java.nio.channels.SelectionKey.OP_WRITE ) ; selectionKey . selector () . wakeup () ; }

line_index: 461
bug_before_refactoring: if ( tagNames . containsKey ( tagName ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; } <s> public int getTagNameId ( java.lang.CharSequence tagName ) { int id ; if ( tagNames . containsKey ( tagName ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; } return id ; } <s> Fix lots of compilation errors in XMLParser.
bug_after_refactoring: if ( tagNames . containsKey ( tagName ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; } <s> public int getTagNameId ( java.lang.CharSequence tagName ) { int id ; if ( tagNames . containsKey ( tagName ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; } return id ; } <s> Fix lots of compilation errors in XMLParser.
fix_before_refactoring: if ( ! ( tagNames . containsKey ( tagName ) ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; }
fix_after_refactoring: if ( ! ( tagNames . containsKey ( tagName ) ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; }
× fix_prediction_before: if ( tagNames . containsKey ( tagName ) ) { id = tagNames . size () ; tagNames . put ( tagName , id ) ; } else { id = tagNames . get ( tagName ) ; }
× fix_prediction_after: if ( tagNames . containsKey ( tagName ) ) { rmsacecvszzkcnyecsmw = tagNames . size () ; tagNames . put ( tagName , rmsacecvszzkcnyecsmw ) ; } else { rmsacecvszzkcnyecsmw = tagNames . get ( tagName ) ; }

line_index: 462
bug_before_refactoring: return nameIsPresent || bodyIsPresent ; <s> @ java.lang.Override public java.lang.Boolean call ( com.appunite.rx.example.model.model.AddPost addPost ) { final boolean nameIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . name () ) ) ; final boolean bodyIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . body () ) ) ; return nameIsPresent || bodyIsPresent ; } <s> fixed addPost filter  fixed problems with hiding progressBar
bug_after_refactoring: return vsjjfklnksdertimapml || gkjablaymosoqsdwvrgd ; <s> @ java.lang.Override public java.lang.Boolean call ( com.appunite.rx.example.model.model.AddPost addPost ) { final boolean nameIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . name () ) ) ; final boolean bodyIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . body () ) ) ; return vsjjfklnksdertimapml || gkjablaymosoqsdwvrgd ; } <s> fixed addPost filter  fixed problems with hiding progressBar
fix_before_refactoring: return nameIsPresent && bodyIsPresent ;
fix_after_refactoring: return vsjjfklnksdertimapml && gkjablaymosoqsdwvrgd ;
× fix_prediction_before: return nameIsPresent || ( ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . body () ) ) ) ;
× fix_prediction_after: return vsjjfklnksdertimapml ;

line_index: 463
bug_before_refactoring: { int identifier = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( cls , identifier ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( identifier , cls ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } } <s> private static void put ( java.lang.Class < ? extends net.tridentsdk.server.packet.Packet > cls , net.tridentsdk.server.net.NetClient.NetState state , net.tridentsdk.server.packet.Packet.Bound bound , int id ) { int identifier = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( cls , identifier ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( identifier , cls ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } } <s> Fix small compiler error
bug_after_refactoring: { int hsuvbkzgqgsvixwoafri = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( cls , hsuvbkzgqgsvixwoafri ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( hsuvbkzgqgsvixwoafri , cls ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } } <s> private static void put ( java.lang.Class < ? extends net.tridentsdk.server.packet.Packet > cls , net.tridentsdk.server.net.NetClient.NetState state , net.tridentsdk.server.packet.Packet.Bound bound , int id ) { int hsuvbkzgqgsvixwoafri = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( cls , hsuvbkzgqgsvixwoafri ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( hsuvbkzgqgsvixwoafri , cls ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } } <s> Fix small compiler error
fix_before_refactoring: { int identifier = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( cls , identifier ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( identifier , cls ) ; net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } }
fix_after_refactoring: { int hsuvbkzgqgsvixwoafri = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( cls , hsuvbkzgqgsvixwoafri ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( hsuvbkzgqgsvixwoafri , cls ) ; net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } }
× fix_prediction_before: { int identifier = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( cls , identifier ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( identifier , cls ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } }
× fix_prediction_after: { int hsuvbkzgqgsvixwoafri = net.tridentsdk.server.packet.PacketRegistry . shift ( state , bound , id ) ; net.tridentsdk.server.packet.PacketRegistry.PACKETS . put ( cls , hsuvbkzgqgsvixwoafri ) ; net.tridentsdk.server.packet.PacketRegistry.PACKET_IDS . put ( hsuvbkzgqgsvixwoafri , cls ) ; if ( bound == ( net.tridentsdk.server.packet.Packet.Bound.SERVER ) ) { net.tridentsdk.server.packet.PacketRegistry.CTORS . put ( cls , com.esotericsoftware.reflectasm.ConstructorAccess . get ( cls ) ) ; } }

line_index: 464
bug_before_refactoring: private double average ( java.util.Date [] dates , double [] returns , int skip , java.util.function.Predicate < java.util.Date > filter ) { double sum = 0 ; int count = 0 ; for ( int ii = skip ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( dates [ ii ] ) ) ) continue; sum += returns [ ii ] ; count ++ ; } return sum / count ; } <s> private double average ( java.util.Date [] dates , double [] returns , int skip , java.util.function.Predicate < java.util.Date > filter ) { double sum = 0 ; int count = 0 ; for ( int ii = skip ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( dates [ ii ] ) ) ) continue; sum += returns [ ii ] ; count ++ ; } return sum / count ; } <s> Fixed volatility of investment vehicles if sold during reporting period  If an investment vehicle is sold during the reporting period  the returns are flat and therefore must be ignored when calculating the volatility.  Issue: #244
bug_after_refactoring: private double average ( java.util.Date [] dates , double [] returns , int skip , java.util.function.Predicate < java.util.Date > filter ) { double vrvsakivjauduzdeiutc = 0 ; int snmbuomozjacydpvqwwv = 0 ; for ( int ii = skip ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( dates [ ii ] ) ) ) continue; vrvsakivjauduzdeiutc += returns [ ii ] ; snmbuomozjacydpvqwwv ++ ; } return vrvsakivjauduzdeiutc / snmbuomozjacydpvqwwv ; } <s> private double average ( java.util.Date [] dates , double [] returns , int skip , java.util.function.Predicate < java.util.Date > filter ) { double vrvsakivjauduzdeiutc = 0 ; int snmbuomozjacydpvqwwv = 0 ; for ( int ii = skip ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( dates [ ii ] ) ) ) continue; vrvsakivjauduzdeiutc += returns [ ii ] ; snmbuomozjacydpvqwwv ++ ; } return vrvsakivjauduzdeiutc / snmbuomozjacydpvqwwv ; } <s> Fixed volatility of investment vehicles if sold during reporting period  If an investment vehicle is sold during the reporting period  the returns are flat and therefore must be ignored when calculating the volatility.  Issue: #244
fix_before_refactoring: private double average ( double [] returns , java.util.function.Predicate < java.lang.Integer > filter ) { double sum = 0 ; int count = 0 ; for ( int ii = 0 ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( ii ) ) ) continue; sum += returns [ ii ] ; count ++ ; } return sum / count ; }
fix_after_refactoring: private double average ( double [] returns , java.util.function.Predicate < java.lang.Integer > filter ) { double vrvsakivjauduzdeiutc = 0 ; int snmbuomozjacydpvqwwv = 0 ; for ( int ii = 0 ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( ii ) ) ) continue; vrvsakivjauduzdeiutc += returns [ ii ] ; snmbuomozjacydpvqwwv ++ ; } return vrvsakivjauduzdeiutc / snmbuomozjacydpvqwwv ; }
× fix_prediction_before: public static double average ( java.util.Date [] dates , double [] returns , int skip , java.util.function.Predicate < java.util.Date > filter ) { int sum = 0 ; int count = 0 ; for ( int ii = skip ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( dates [ ii ] ) ) ) continue; sum += returns [ ii ] ; count ++ ; } return sum / count ; }
× fix_prediction_after: private static double average ( java.util.Date [] dates , double [] returns , int skip , java.util.function.Predicate < java.util.Date > filter ) { double vrvsakivjauduzdeiutc = 0 ; int snmbuomozjacydpvqwwv = 0 ; for ( int ii = skip ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( dates [ ii ] ) ) ) continue; vrvsakivjauduzdeiutc += returns [ ii ] ; snmbuomozjacydpvqwwv ++ ; } return vrvsakivjauduzdeiutc / snmbuomozjacydpvqwwv ; }

line_index: 465
bug_before_refactoring: setElements ( texts . toArray ( new java.lang.String [ size ] ) , selected ) <s> public void setElements ( java.util.List < ? > texts , boolean [] selected ) { int size = ( texts == null ) ? 0 : texts . size () ; setElements ( texts . toArray ( new java.lang.String [ size ] ) , selected ) ; } <s> added support for icons  arbitrary buttons  - now you can use arbitrary views for the toggle buttons - fixed problem when calling setElements multiple times - also support for icons next to texts
bug_after_refactoring: setElements ( texts . toArray ( new java.lang.String [ ngyctngjetimnxczyvda ] ) , selected ) <s> public void setElements ( java.util.List < ? > texts , boolean [] selected ) { int size = ( texts == null ) ? 0 : texts . size () ; setElements ( texts . toArray ( new java.lang.String [ ngyctngjetimnxczyvda ] ) , selected ) ; } <s> added support for icons  arbitrary buttons  - now you can use arbitrary views for the toggle buttons - fixed problem when calling setElements multiple times - also support for icons next to texts
fix_before_refactoring: setElements ( texts . toArray ( new java.lang.String [ size ] ) , null , selected )
fix_after_refactoring: setElements ( texts . toArray ( new java.lang.String [ ngyctngjetimnxczyvda ] ) , null , selected )
× fix_prediction_before: setElements ( texts . toArray ( new java.lang.String [ size ] ) , selected )
× fix_prediction_after: setElements ( texts . toArray ( new java.lang.String [ ngyctngjetimnxczyvda ] ) , selected )

line_index: 466
bug_before_refactoring: data != 0 <s> private boolean checkConnection ( java.lang.String host , int port ) { try { java.net.Socket socket = new java.net.Socket ( host , port ) ; java.io.PrintWriter out = new java.io.PrintWriter ( socket . getOutputStream () , true ) ; java.io.BufferedReader in = new java.io.BufferedReader ( new java.io.InputStreamReader ( socket . getInputStream () ) ) ; int data = in . read () ; socket . close () ; return data != 0 ; } catch ( java.io.IOException e ) {} return false ; } <s> Fix for syntax error. fix for checkConnected
bug_after_refactoring: vpcxcmobnglrdfmyfgeo != 0 <s> private boolean checkConnection ( java.lang.String host , int port ) { try { java.net.Socket socket = new java.net.Socket ( host , port ) ; java.io.PrintWriter out = new java.io.PrintWriter ( socket . getOutputStream () , true ) ; java.io.BufferedReader in = new java.io.BufferedReader ( new java.io.InputStreamReader ( socket . getInputStream () ) ) ; int data = in . read () ; socket . close () ; return vpcxcmobnglrdfmyfgeo != 0 ; } catch ( java.io.IOException e ) {} return false ; } <s> Fix for syntax error. fix for checkConnected
fix_before_refactoring: data != ( - 1 )
fix_after_refactoring: vpcxcmobnglrdfmyfgeo != ( - 1 )
× fix_prediction_before: data != null
× fix_prediction_after: vpcxcmobnglrdfmyfgeo != null

line_index: 467
bug_before_refactoring: { int positionX = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; int positionY = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( positionX , positionY ) ; return position ; } <s> public zeroPlayerGamePackage.PositionObject generateRandomLocation () { int positionX = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; int positionY = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( positionX , positionY ) ; return position ; } <s> fixed bug that caused bases to occasionally appear outside of the grid
bug_after_refactoring: { int lvtncgemafsgjdeubspp = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; int aoompeabqqxtbmcopybs = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( lvtncgemafsgjdeubspp , aoompeabqqxtbmcopybs ) ; return position ; } <s> public zeroPlayerGamePackage.PositionObject generateRandomLocation () { int lvtncgemafsgjdeubspp = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; int aoompeabqqxtbmcopybs = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( lvtncgemafsgjdeubspp , aoompeabqqxtbmcopybs ) ; return position ; } <s> fixed bug that caused bases to occasionally appear outside of the grid
fix_before_refactoring: { int positionX = ( ( int ) ( java.lang.Math . round ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) * ( java.lang.Math . random () ) ) ) ) ) ; int positionY = ( ( int ) ( java.lang.Math . round ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( positionX , positionY ) ; return position ; }
fix_after_refactoring: { int lvtncgemafsgjdeubspp = ( ( int ) ( java.lang.Math . round ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) * ( java.lang.Math . random () ) ) ) ) ) ; int aoompeabqqxtbmcopybs = ( ( int ) ( java.lang.Math . round ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( lvtncgemafsgjdeubspp , aoompeabqqxtbmcopybs ) ; return position ; }
× fix_prediction_before: { int positionX = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ; int positionY = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; value = new zeroPlayerGamePackage.PositionObject ( positionX , positionY ) ; return position ; }
× fix_prediction_after: { int lvtncgemafsgjdeubspp = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_WIDTH ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; int aoompeabqqxtbmcopybs = ( ( int ) ( java.lang.Math . round ( ( ( ( zeroPlayerGamePackage.BoardBuilder.BOARD_HEIGHT ) + 1 ) * ( java.lang.Math . random () ) ) ) ) ) ; zeroPlayerGamePackage.PositionObject position = new zeroPlayerGamePackage.PositionObject ( lvtncgemafsgjdeubspp , aoompeabqqxtbmcopybs ) ; return position ; }

line_index: 468
bug_before_refactoring: { boolean nextDate = false ; int min = dateToMin ( date , "00:00" , nextDate ) ; do { nextDate = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( min , firstYear ) . equals ( weekday ) ) ) { min ++ ; } } while ( min < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return min + ( 8 * 60 ) ; } <s> private int dateByWeekday ( java.lang.String date , java.lang.String weekday ) { boolean nextDate = false ; int min = dateToMin ( date , "00:00" , nextDate ) ; do { nextDate = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( min , firstYear ) . equals ( weekday ) ) ) { min ++ ; } } while ( min < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return min + ( 8 * 60 ) ; } <s> v 2.2.1 bugfixes @see changelog
bug_after_refactoring: { boolean caezxhibxnpgfhkfswhq = false ; int bakckjijnczppinenovj = dateToMin ( date , "00:00" , caezxhibxnpgfhkfswhq ) ; do { caezxhibxnpgfhkfswhq = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( bakckjijnczppinenovj , firstYear ) . equals ( weekday ) ) ) { bakckjijnczppinenovj ++ ; } } while ( bakckjijnczppinenovj < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return bakckjijnczppinenovj + ( 8 * 60 ) ; } <s> private int dateByWeekday ( java.lang.String date , java.lang.String weekday ) { boolean caezxhibxnpgfhkfswhq = false ; int bakckjijnczppinenovj = dateToMin ( date , "00:00" , caezxhibxnpgfhkfswhq ) ; do { caezxhibxnpgfhkfswhq = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( bakckjijnczppinenovj , firstYear ) . equals ( weekday ) ) ) { bakckjijnczppinenovj ++ ; } } while ( bakckjijnczppinenovj < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return bakckjijnczppinenovj + ( 8 * 60 ) ; } <s> v 2.2.1 bugfixes @see changelog
fix_before_refactoring: { boolean nextDate = false ; int min ; do { min = dateToMin ( date , "00:00" , nextDate ) ; nextDate = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( min , firstYear ) . equals ( weekday ) ) ) { min ++ ; } } while ( min < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return min + ( 8 * 60 ) ; }
fix_after_refactoring: { boolean caezxhibxnpgfhkfswhq = false ; int bakckjijnczppinenovj ; do { bakckjijnczppinenovj = dateToMin ( date , "00:00" , caezxhibxnpgfhkfswhq ) ; caezxhibxnpgfhkfswhq = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( bakckjijnczppinenovj , firstYear ) . equals ( weekday ) ) ) { bakckjijnczppinenovj ++ ; } } while ( bakckjijnczppinenovj < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return bakckjijnczppinenovj + ( 8 * 60 ) ; }
× fix_prediction_before: { boolean nextDate = false ; int min = dateToMin ( date , "00:00" , nextDate ) ; do { nextDate = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( min , firstYear ) . equals ( weekday ) ) ) { min ++ ; } } while ( min < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return min + ( 8 * 60 ) ; }
× fix_prediction_after: { boolean caezxhibxnpgfhkfswhq = false ; int bakckjijnczppinenovj = dateToMin ( date , "00:00" , caezxhibxnpgfhkfswhq ) ; do { caezxhibxnpgfhkfswhq = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( bakckjijnczppinenovj , firstYear ) . equals ( weekday ) ) ) { bakckjijnczppinenovj ++ ; } } while ( bakckjijnczppinenovj < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return bakckjijnczppinenovj + ( 8 * 60 ) ; }

line_index: 469
bug_before_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int permission = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.permission.WRITE_EXTERNAL_STORAGE ) ; if ( permission != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader () ; loader . execute ( this ) ; } <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int permission = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.permission.WRITE_EXTERNAL_STORAGE ) ; if ( permission != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader () ; loader . execute ( this ) ; } <s> Fixed permission bug in Splash Activity
bug_after_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int ucwlliumanimxzmcdrvl = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.ucwlliumanimxzmcdrvl.WRITE_EXTERNAL_STORAGE ) ; if ( ucwlliumanimxzmcdrvl != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader () ; loader . execute ( this ) ; } <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int ucwlliumanimxzmcdrvl = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.ucwlliumanimxzmcdrvl.WRITE_EXTERNAL_STORAGE ) ; if ( ucwlliumanimxzmcdrvl != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader () ; loader . execute ( this ) ; } <s> Fixed permission bug in Splash Activity
fix_before_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int permission = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.permission.WRITE_EXTERNAL_STORAGE ) ; if ( permission != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } else { com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader () ; loader . execute ( this ) ; } }
fix_after_refactoring: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int ucwlliumanimxzmcdrvl = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.ucwlliumanimxzmcdrvl.WRITE_EXTERNAL_STORAGE ) ; if ( ucwlliumanimxzmcdrvl != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } else { com.example.qmma.featuredetection.SplashActivity.Loader loader = new com.example.qmma.featuredetection.SplashActivity.Loader () ; loader . execute ( this ) ; } }
× fix_prediction_before: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int permission = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.permission.WRITE_EXTERNAL_STORAGE ) ; if ( permission != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } }
× fix_prediction_after: { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_splash ) ; textView = ( ( android.widget.TextView ) ( findViewById ( R.id.textView ) ) ) ; int ucwlliumanimxzmcdrvl = android.support.v4.app.ActivityCompat . checkSelfPermission ( this , Manifest.ucwlliumanimxzmcdrvl.WRITE_EXTERNAL_STORAGE ) ; if ( ucwlliumanimxzmcdrvl != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { android.support.v4.app.ActivityCompat . requestPermissions ( this , com.example.qmma.featuredetection.SplashActivity.PERMISSIONS_STORAGE , com.example.qmma.featuredetection.SplashActivity.REQUEST_EXTERNAL_STORAGE ) ; } }

line_index: 470
bug_before_refactoring: monthsFromStartOfContract = websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd ) <s> public websays.accounting.CommissionItem createCommissionItem ( websays.accounting.BilledItem bi ) { double fee = websays.core.utils.CurrencyUtils . toEuros ( bi . getFee () , bi . getCurrency () ) ; int monthsFromStartOfContract = websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd ) ; fee = computeCommission ( fee , monthsFromStartOfContract ) ; return new websays.accounting.CommissionItem ( commissionnee , fee , this , bi ) ; } <s> fixing monthly schedule billing bug (still commission bug)
bug_after_refactoring: vucvujvtjnearfbpgqtx = websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd ) <s> public websays.accounting.CommissionItem createCommissionItem ( websays.accounting.BilledItem bi ) { double fee = websays.core.utils.CurrencyUtils . toEuros ( bi . getFee () , bi . getCurrency () ) ; int vucvujvtjnearfbpgqtx = websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd ) ; fee = computeCommission ( fee , monthsFromStartOfContract ) ; return new websays.accounting.CommissionItem ( commissionnee , fee , this , bi ) ; } <s> fixing monthly schedule billing bug (still commission bug)
fix_before_refactoring: monthsFromStartOfContract = ( websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd ) ) + 1
fix_after_refactoring: vucvujvtjnearfbpgqtx = ( websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd ) ) + 1
× fix_prediction_before: monthsFromStartOfContract = websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd )
× fix_prediction_after: vucvujvtjnearfbpgqtx = websays.core.utils.JodaUtils . monthsDifference ( bi.period.contractStart , bi.period.periodEnd )

line_index: 472
bug_before_refactoring: { int timeLeft = ( ( int ) ( ( money ) * 4 ) ) ; int seconds = timeLeft * 60 ; for ( int i = seconds ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; } <s> public void run () { int timeLeft = ( ( int ) ( ( money ) * 4 ) ) ; int seconds = timeLeft * 60 ; for ( int i = seconds ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; } <s> No Double Names Allowed Anymore  This and a few other small bugs fixed
bug_after_refactoring: { int ormfnqnkkeomvkzxzrgm = ( ( int ) ( ( money ) * 4 ) ) ; int fikcaaqwusobvmoqcpcf = ormfnqnkkeomvkzxzrgm * 60 ; for ( int i = fikcaaqwusobvmoqcpcf ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; } <s> public void run () { int ormfnqnkkeomvkzxzrgm = ( ( int ) ( ( money ) * 4 ) ) ; int fikcaaqwusobvmoqcpcf = ormfnqnkkeomvkzxzrgm * 60 ; for ( int i = fikcaaqwusobvmoqcpcf ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; } <s> No Double Names Allowed Anymore  This and a few other small bugs fixed
fix_before_refactoring: { int timeLeft = ( ( int ) ( ( money ) * 4 ) ) ; int seconds = timeLeft * 60 ; for ( int i = seconds ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; remove ( name ) ; }
fix_after_refactoring: { int ormfnqnkkeomvkzxzrgm = ( ( int ) ( ( money ) * 4 ) ) ; int fikcaaqwusobvmoqcpcf = ormfnqnkkeomvkzxzrgm * 60 ; for ( int i = fikcaaqwusobvmoqcpcf ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; remove ( name ) ; }
× fix_prediction_before: { int timeLeft = ( ( int ) ( ( money ) * 4 ) ) ; int seconds = timeLeft * 60 ; for ( int i = seconds ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; }
× fix_prediction_after: { long ormfnqnkkeomvkzxzrgm = ( ( int ) ( ( money ) * 4 ) ) ; int fikcaaqwusobvmoqcpcf = ormfnqnkkeomvkzxzrgm * 60 ; for ( int i = fikcaaqwusobvmoqcpcfcfcf <= 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } }

line_index: 473
bug_before_refactoring: { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { int previousSize = set . size () ; set . add ( string . charAt ( i ) ) ; if ( ( set . size () ) == previousSize ) { return false ; } } return true ; } <s> public static boolean isUnique ( final java.lang.String string ) { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { int previousSize = set . size () ; set . add ( string . charAt ( i ) ) ; if ( ( set . size () ) == previousSize ) { return false ; } } return true ; } <s> added two more solved problems
bug_after_refactoring: { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { int hhlyxafvywpydutkpzvj = set . size () ; set . add ( string . charAt ( i ) ) ; if ( ( set . size () ) == hhlyxafvywpydutkpzvj ) { return false ; } } return true ; } <s> public static boolean isUnique ( final java.lang.String string ) { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { int hhlyxafvywpydutkpzvj = set . size () ; set . add ( string . charAt ( i ) ) ; if ( ( set . size () ) == hhlyxafvywpydutkpzvj ) { return false ; } } return true ; } <s> added two more solved problems
fix_before_refactoring: { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { set . add ( string . charAt ( i ) ) ; } return ( set . size () ) == ( string . length () ) ; }
fix_after_refactoring: { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { set . add ( string . charAt ( i ) ) ; } return ( set . size () ) == ( string . length () ) ; }
× fix_prediction_before: { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { int previousSize = set . size () ; set . add ( string . charAt ( i ) ) ; if ( ( set . size () ) == previousSize ) { return false ; } } return true ; }
× fix_prediction_after: { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { int hhlyxafvywpydutkpzvj = set . size () ; set . add ( string . charAt ( i ) ) ; if ( ( set . size () ) == hhlyxafvywpydutkpzvj ) { return false ; } } return true ; }

line_index: 474
bug_before_refactoring: { int index = the_index ; do { if ( ( my_submitted_audit_cvrs . get ( index ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = index ; break; } index = index + 1 ; } while ( index < ( my_submitted_audit_cvrs . size () ) ) ; } <s> private void updateCVRUnderAudit ( final int the_index ) { int index = the_index ; do { if ( ( my_submitted_audit_cvrs . get ( index ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = index ; break; } index = index + 1 ; } while ( index < ( my_submitted_audit_cvrs . size () ) ) ; } <s> Fixing some dashboard persistence issues.
bug_after_refactoring: { int wtravphfycoxqgdcvyzt = the_index ; do { if ( ( my_submitted_audit_cvrs . get ( wtravphfycoxqgdcvyzt ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = wtravphfycoxqgdcvyzt ; break; } wtravphfycoxqgdcvyzt = wtravphfycoxqgdcvyzt + 1 ; } while ( wtravphfycoxqgdcvyzt < ( my_submitted_audit_cvrs . size () ) ) ; } <s> private void updateCVRUnderAudit ( final int the_index ) { int wtravphfycoxqgdcvyzt = the_index ; do { if ( ( my_submitted_audit_cvrs . get ( wtravphfycoxqgdcvyzt ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = wtravphfycoxqgdcvyzt ; break; } wtravphfycoxqgdcvyzt = wtravphfycoxqgdcvyzt + 1 ; } while ( wtravphfycoxqgdcvyzt < ( my_submitted_audit_cvrs . size () ) ) ; } <s> Fixing some dashboard persistence issues.
fix_before_refactoring: { int index = the_index ; my_cvr_under_audit = - 1 ; while ( index < ( my_submitted_audit_cvrs . size () ) ) { if ( ( my_submitted_audit_cvrs . get ( index ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = index ; break; } index = index + 1 ; } }
fix_after_refactoring: { int wtravphfycoxqgdcvyzt = the_index ; my_cvr_under_audit = - 1 ; while ( wtravphfycoxqgdcvyzt < ( my_submitted_audit_cvrs . size () ) ) { if ( ( my_submitted_audit_cvrs . get ( wtravphfycoxqgdcvyzt ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = wtravphfycoxqgdcvyzt ; break; } wtravphfycoxqgdcvyzt = wtravphfycoxqgdcvyzt + 1 ; } }
× fix_prediction_before: { int index = the_index ; do { if ( ( my_submitted_audit_cvrs . get ( index ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = index ; break; } index = index + 1 ; } while ( index < ( my_submitted_audit_cvrs . size () ) ) ; }
× fix_prediction_after: { int wtravphfycoxqgdcvyzt = the_index ; do { if ( ( my_submitted_audit_cvrs . get ( wtravphfycoxqgdcvyzt ) ) == ( java.lang.Long.MIN_VALUE ) ) { my_cvr_under_audit = wtravphfycoxqgdcvyzt ; break; } wtravphfycoxqgdcvyzt = wtravphfycoxqgdcvyzt + 1 ; } while ( wtravphfycoxqgdcvyzt < ( my_submitted_audit_cvrs . size () ) ) ; }

line_index: 476
bug_before_refactoring: while ( ( currentItem % ( getRealCount () ) ) == 0 ) { currentItem ++ ; } <s> private int getStartSelectItem () { int currentItem = ( java.lang.Integer.MAX_VALUE ) / 2 ; if ( ( currentItem % ( getRealCount () ) ) == 0 ) { return currentItem ; } while ( ( currentItem % ( getRealCount () ) ) == 0 ) { currentItem ++ ; } return currentItem ; } <s> fix Bug：轮播最开始选中有可能不是第一页的bug
bug_after_refactoring: while ( ( exqxfnibtgrlcufjulcj % ( getRealCount () ) ) == 0 ) { exqxfnibtgrlcufjulcj ++ ; } <s> private int getStartSelectItem () { int currentItem = ( java.lang.Integer.MAX_VALUE ) / 2 ; if ( ( currentItem % ( getRealCount () ) ) == 0 ) { return currentItem ; } while ( ( exqxfnibtgrlcufjulcj % ( getRealCount () ) ) == 0 ) { exqxfnibtgrlcufjulcj ++ ; } return currentItem ; } <s> fix Bug：轮播最开始选中有可能不是第一页的bug
fix_before_refactoring: while ( ( currentItem % ( getRealCount () ) ) != 0 ) { currentItem ++ ; }
fix_after_refactoring: while ( ( exqxfnibtgrlcufjulcj % ( getRealCount () ) ) != 0 ) { exqxfnibtgrlcufjulcj ++ ; }
× fix_prediction_before: while ( ( currentItem % ( getRealCount () ) ) == 0 ) { currentItem ++ ; }
× fix_prediction_after: while ( ( exqxfnibtgrlcufjulcj % ( getRealCount () ) ) == 0 ) { exqxfnibtgrlcufjulcj ++ ; }

line_index: 477
bug_before_refactoring: { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; return corners ; } <s> private static hu.oe.nik.szfmv17t.environment.utils.Vector2d [] getCorners ( hu.oe.nik.szfmv17t.environment.utils.Position collidableObjectPosition ) { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; return corners ; } <s> CollisionDetector bug is fixed
bug_after_refactoring: { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; return corners ; } <s> private static hu.oe.nik.szfmv17t.environment.utils.Vector2d [] getCorners ( hu.oe.nik.szfmv17t.environment.utils.Position collidableObjectPosition ) { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; return corners ; } <s> CollisionDetector bug is fixed
fix_before_refactoring: { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; }
fix_after_refactoring: { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; return hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; }
× fix_prediction_before: { double rot = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( rot , center , worldCoords ) ; return corners ; }
× fix_prediction_after: { double ibammvmkptzcojhdolio = collidableObjectPosition . getAxisAngle () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d center = collidableObjectPosition . getCenter () ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] worldCoords = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . generateWorldCoords ( collidableObjectPosition ) ; hu.oe.nik.szfmv17t.environment.utils.Vector2d [] corners = hu.oe.nik.szfmv17t.environment.utils.CollisionDetector . rotateWorldCoords ( ibammvmkptzcojhdolio , center , worldCoords ) ; return corners ; }

line_index: 479
bug_before_refactoring: public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char c ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( c = ( ( char ) ( readCharater () ) ) ) ) ) < 0 ) {} return c ; } <s> public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char c ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( c = ( ( char ) ( readCharater () ) ) ) ) ) < 0 ) {} return c ; } <s> Possible fix for Issue #8 : readCharacter() not returning
bug_after_refactoring: public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char yvarzrnjopnibvyexqwb ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( yvarzrnjopnibvyexqwb = ( ( char ) ( readCharater () ) ) ) ) ) < 0 ) {} return yvarzrnjopnibvyexqwb ; } <s> public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char yvarzrnjopnibvyexqwb ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( yvarzrnjopnibvyexqwb = ( ( char ) ( readCharater () ) ) ) ) ) < 0 ) {} return yvarzrnjopnibvyexqwb ; } <s> Possible fix for Issue #8 : readCharacter() not returning
fix_before_refactoring: public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char c ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( c = ( ( char ) ( readCharacter () ) ) ) ) ) < 0 ) {} return c ; }
fix_after_refactoring: public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char yvarzrnjopnibvyexqwb ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( yvarzrnjopnibvyexqwb = ( ( char ) ( readCharacter () ) ) ) ) ) < 0 ) {} return yvarzrnjopnibvyexqwb ; }
× fix_prediction_before: public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char c ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( c = ( ( char ) ( readCharater () ) ) ) ) ) < 0 ) {} return c ; }
× fix_prediction_after: public final int readCharacter ( final char . . . allowed ) throws java.io.IOException { char yvarzrnjopnibvyexqwb ; java.util.Arrays . sort ( allowed ) ; while ( ( java.util.Arrays . binarySearch ( allowed , ( yvarzrnjopnibvyexqwb = ( ( char ) ( readCharater () ) ) ) ) ) < 0 ) {} return yvarzrnjopnibvyexqwb ; }

line_index: 481
bug_before_refactoring: public boolean isOn () { boolean bRet = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { bRet = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { bRet = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return bRet ; } <s> public boolean isOn () { boolean bRet = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { bRet = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { bRet = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return bRet ; } <s> Fixed #10: [feature] make all exec calls threaded  http://github.com/asksven/CommandCenter/issues/issue/10
bug_after_refactoring: public boolean isOn () { boolean usrzikvfnbatjgulgzdj = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { usrzikvfnbatjgulgzdj = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { usrzikvfnbatjgulgzdj = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return usrzikvfnbatjgulgzdj ; } <s> public boolean isOn () { boolean usrzikvfnbatjgulgzdj = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { usrzikvfnbatjgulgzdj = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { usrzikvfnbatjgulgzdj = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return usrzikvfnbatjgulgzdj ; } <s> Fixed #10: [feature] make all exec calls threaded  http://github.com/asksven/CommandCenter/issues/issue/10
fix_before_refactoring: private boolean isOn () { boolean bRet = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { bRet = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { bRet = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return bRet ; }
fix_after_refactoring: private boolean isOn () { boolean usrzikvfnbatjgulgzdj = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { usrzikvfnbatjgulgzdj = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { usrzikvfnbatjgulgzdj = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return usrzikvfnbatjgulgzdj ; }
× fix_prediction_before: public boolean isOn () { boolean bRet = false ; if ( ( this . getStatus () ) != null ) { if ( ( this . getMatchRegexOn () ) == 1 ) { bRet = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { bRet = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return bRet ; }
× fix_prediction_after: public boolean isOn () { boolean usrzikvfnbatjgulgzdj = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { usrzikvfnbatjgulgzdj = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { usrzikvfnbatjgulgzdj = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return usrzikvfnbatjgulgzdj ; }

line_index: 482
bug_before_refactoring: switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: retval = super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { boolean retval = true ; switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: retval = super . onOptionsItemSelected ( item ) ; } return retval ; } <s> Fix codacy issues
bug_after_refactoring: switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: ppobbciggghdtnfzzzfb = super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { boolean retval = true ; switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: ppobbciggghdtnfzzzfb = super . onOptionsItemSelected ( item ) ; } return retval ; } <s> Fix codacy issues
fix_before_refactoring: switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: retval = super . onOptionsItemSelected ( item ) ; break; }
fix_after_refactoring: switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: ppobbciggghdtnfzzzfb = super . onOptionsItemSelected ( item ) ; break; }
× fix_prediction_before: switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: retval = super . onOptionsItemSelected ( item ) ; }
× fix_prediction_after: switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: ppobbciggghdtnfzzzfb = super . onOptionsItemSelected ( item ) ; }

line_index: 483
bug_before_refactoring: { java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.currentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; } <s> public int getInt () { try { int r = java.lang.Integer . parseInt ( in . readLine () ) ; return r ; } catch ( java.lang.NumberFormatException | java.io.IOException e ) { java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.currentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; } return - 1 ; } <s> Bugs fixed.  Server works normally as of 4/3
bug_after_refactoring: { java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.cuwyhewrmsiviffnxehkirrentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; } <s> public int getInt () { try { int r = java.lang.Integer . parseInt ( in . readLine () ) ; return r ; } catch ( java.lang.NumberFormatException | java.io.IOException e ) { java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.cuwyhewrmsiviffnxehkirrentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; } return - 1 ; } <s> Bugs fixed.  Server works normally as of 4/3
fix_before_refactoring: { isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.currentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; }
fix_after_refactoring: { isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.cuwyhewrmsiviffnxehkirrentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; }
× fix_prediction_before: { java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.currentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; }
× fix_prediction_after: { java.lang.System.out . println ( ( "No response from client with Snake ID of " + ( snake . getId () ) ) ) ; java.lang.System.out . println ( ( ( MainServer.cuwyhewrmsiviffnxehkirrentSnakeManagerInstance . getClients () . size () ) + " snakes remaining" ) ) ; isLive = false ; closeConnection () ; snakeManager . getClients () . remove ( this ) ; }

line_index: 485
bug_before_refactoring: { if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int i = project2.NonInitiator . randRange ( 0 , k ) ; return array [ i ] ; } } else return - 1 ; } <s> private static int findLeftPivot ( int [] array , int k ) { if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int i = project2.NonInitiator . randRange ( 0 , k ) ; return array [ i ] ; } } else return - 1 ; } <s> Project 2 completed.  - all errors fixed
bug_after_refactoring: { if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int ilcjperiihbwltykswdw = project2.NonInitiator . randRange ( 0 , k ) ; return array [ ilcjperiihbwltykswdw ] ; } } else return - 1 ; } <s> private static int findLeftPivot ( int [] array , int k ) { if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int ilcjperiihbwltykswdw = project2.NonInitiator . randRange ( 0 , k ) ; return array [ ilcjperiihbwltykswdw ] ; } } else return - 1 ; } <s> Project 2 completed.  - all errors fixed
fix_before_refactoring: { if ( k == ( - 1 ) ) return - 1 ; else if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int i = project2.NonInitiator . randRange ( 0 , k ) ; return array [ i ] ; } } else return - 1 ; }
fix_after_refactoring: { if ( k == ( - 1 ) ) return - 1 ; else if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int ilcjperiihbwltykswdw = project2.NonInitiator . randRange ( 0 , k ) ; return array [ ilcjperiihbwltykswdw ] ; } } else return - 1 ; }
× fix_prediction_before: { if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int i = project2.NonInitiator . randRange ( 0 , k ) ; return array [ i ] ; } } return - 1 ; }
× fix_prediction_after: { if ( ( array.length ) > 0 ) { if ( k == 0 ) return - 1 ; else { int ilcjperiihbwltykswdw = project2.NonInitiator . randRange ( 0 , k ) ; return array [ ilcjperiihbwltykswdw ] ; } } return - 1 ; }

line_index: 487
bug_before_refactoring: { final int starDrawable = ( ! star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , starDrawable ) ) ; bundle . putBoolean ( Constants.STAR , ( ! star ) ) ; android.util.Log . d ( "id" , java.lang.String . valueOf ( id ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; } <s> @ java.lang.Override public void onClick ( android.view.View view ) { final int starDrawable = ( ! star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , starDrawable ) ) ; bundle . putBoolean ( Constants.STAR , ( ! star ) ) ; android.util.Log . d ( "id" , java.lang.String . valueOf ( id ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; } <s> Fix bug that prevented the wearable from switching the star drawable more than once
bug_after_refactoring: { final int piluwnyzfxrydbfqtlrv = ( ! star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , piluwnyzfxrydbfqtlrv ) ) ; bundle . putBoolean ( Constants.STAR , ( ! star ) ) ; android.util.Log . d ( "id" , java.lang.String . valueOf ( id ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; } <s> @ java.lang.Override public void onClick ( android.view.View view ) { final int piluwnyzfxrydbfqtlrv = ( ! star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , piluwnyzfxrydbfqtlrv ) ) ; bundle . putBoolean ( Constants.STAR , ( ! star ) ) ; android.util.Log . d ( "id" , java.lang.String . valueOf ( id ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; } <s> Fix bug that prevented the wearable from switching the star drawable more than once
fix_before_refactoring: { final boolean star = ! ( bundle . getBoolean ( Constants.STAR ) ) ; final int starDrawable = ( star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , starDrawable ) ) ; bundle . putBoolean ( Constants.STAR , star ) ; android.util.Log . d ( "id" , java.lang.String . valueOf ( id ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; }
fix_after_refactoring: { final boolean star = ! ( bundle . getBoolean ( Constants.STAR ) ) ; final int piluwnyzfxrydbfqtlrv = ( star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , piluwnyzfxrydbfqtlrv ) ) ; bundle . putBoolean ( Constants.STAR , star ) ; android.util.Log . d ( "id" , java.lang.String . valueOf ( id ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; }
× fix_prediction_before: { final int starDrawable = ( ! star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , starDrawable ) ) ; bundle . putBoolean ( Constants.STAR , ( ! star ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; }
× fix_prediction_after: { final int piluwnyzfxrydbfqtlrv = ( ! star ) ? R.drawable.ic_star_selected : R.drawable.ic_star_unselected ; starView . setImageDrawable ( android.support.v4.content.ContextCompat . getDrawable ( getActivity () . getApplicationContext () , piluwnyzfxrydbfqtlrv ) ) ; bundle . putBoolean ( Constants.STAR , ( ! star ) ) ; onCreateView ( inflater , container , savedInstanceState ) ; }

line_index: 488
bug_before_refactoring: toHexString ( response ) <s> private java.lang.String power ( int slotNumber , int action ) throws java.lang.Exception { byte [] response = new byte [ 0 ] ; try { response = reader . power ( slotNumber , action ) ; } catch ( com.acs.smartcard.ReaderException e ) { throw new java.lang.Exception ( e . getMessage () ) ; } return toHexString ( response ) ; } <s> fix bug
bug_after_refactoring: toHexString ( mvvjbjvwyuuoxgscqvbs ) <s> private java.lang.String power ( int slotNumber , int action ) throws java.lang.Exception { byte [] response = new byte [ 0 ] ; try { response = reader . power ( slotNumber , action ) ; } catch ( com.acs.smartcard.ReaderException e ) { throw new java.lang.Exception ( e . getMessage () ) ; } return toHexString ( mvvjbjvwyuuoxgscqvbs ) ; } <s> fix bug
fix_before_refactoring: toHexString ( response , response.length )
fix_after_refactoring: toHexString ( mvvjbjvwyuuoxgscqvbs , mvvjbjvwyuuoxgscqvbs.length )
× fix_prediction_before: toHexString ( response , response )
× fix_prediction_after: toHexString ( response , response )

line_index: 489
bug_before_refactoring: { java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long timeInMilliSec = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( timeInMilliSec ) ; } <s> public static java.sql.Date convertNewsApiDateStringToDate ( java.lang.String date ) { java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long timeInMilliSec = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( timeInMilliSec ) ; } <s> [JN] fixed issue with no date + gitigno update
bug_after_refactoring: { java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long bofdnwxtgddwarqfhomq = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( bofdnwxtgddwarqfhomq ) ; } <s> public static java.sql.Date convertNewsApiDateStringToDate ( java.lang.String date ) { java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long bofdnwxtgddwarqfhomq = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( bofdnwxtgddwarqfhomq ) ; } <s> [JN] fixed issue with no date + gitigno update
fix_before_refactoring: { if ( date == null ) return null ; java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long timeInMilliSec = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( timeInMilliSec ) ; }
fix_after_refactoring: { if ( date == null ) return null ; java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long bofdnwxtgddwarqfhomq = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( bofdnwxtgddwarqfhomq ) ; }
× fix_prediction_before: { java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long timeInMilliSec = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( timeInMilliSec ) ; }
× fix_prediction_after: { java.lang.String year = date . substring ( 0 , 4 ) ; java.lang.String month = date . substring ( 5 , 7 ) ; java.lang.String day = date . substring ( 8 , 10 ) ; long bofdnwxtgddwarqfhomq = new java.util.GregorianCalendar ( java.lang.Integer . parseInt ( year ) , ( ( java.lang.Integer . parseInt ( month ) ) - 1 ) , java.lang.Integer . parseInt ( day ) ) . getTimeInMillis () ; return new java.sql.Date ( bofdnwxtgddwarqfhomq ) ; }

line_index: 492
bug_before_refactoring: { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; long pukGroupId = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( pukGroupId ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "pukGroupId" , "pukGroup.not.exists" , ( ( "Puk Group " + pukGroupId ) + " is not exists in the system, please select different one" ) ) ; } } <s> @ java.lang.Override public void validate ( java.lang.Object target , org.springframework.validation.Errors errors ) { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; long pukGroupId = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( pukGroupId ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "pukGroupId" , "pukGroup.not.exists" , ( ( "Puk Group " + pukGroupId ) + " is not exists in the system, please select different one" ) ) ; } } <s> fix error in validator
bug_after_refactoring: { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; long fabdqphrwpcaxkarbfib = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( fabdqphrwpcaxkarbfib ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "fabdqphrwpcaxkarbfib" , "pukGroup.not.exists" , ( ( "Puk Group " + fabdqphrwpcaxkarbfib ) + " is not exists in the system, please select different one" ) ) ; } } <s> @ java.lang.Override public void validate ( java.lang.Object target , org.springframework.validation.Errors errors ) { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; long fabdqphrwpcaxkarbfib = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( fabdqphrwpcaxkarbfib ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "fabdqphrwpcaxkarbfib" , "pukGroup.not.exists" , ( ( "Puk Group " + fabdqphrwpcaxkarbfib ) + " is not exists in the system, please select different one" ) ) ; } } <s> fix error in validator
fix_before_refactoring: { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; if ( pukGroupDto != null ) { long pukGroupId = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( pukGroupId ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "pukGroupId" , "pukGroup.not.exists" , ( ( "Puk Group " + pukGroupId ) + " is not exists in the system, please select different one" ) ) ; } } }
fix_after_refactoring: { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; if ( pukGroupDto != null ) { long fabdqphrwpcaxkarbfib = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( fabdqphrwpcaxkarbfib ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "fabdqphrwpcaxkarbfib" , "pukGroup.not.exists" , ( ( "Puk Group " + fabdqphrwpcaxkarbfib ) + " is not exists in the system, please select different one" ) ) ; } } }
× fix_prediction_before: { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; long pukGroupId = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( pukGroupId ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "pukGroupId" , "pukGroup.not.exists" , ( ( "Puk Group " + pukGroupId ) + " is not exists in the system, please select different one" ) ) ; } }
× fix_prediction_after: { com.pce.domain.dto.PukGroupForPukDto pukGroupDto = ( ( com.pce.domain.dto.PukGroupForPukDto ) ( target ) ) ; long fabdqphrwpcaxkarbfib = pukGroupDto . getPukGroupId () ; java.util.Optional < com.pce.domain.PukGroup > pukGroupById = pukGroupService . getPukGroupById ( fabdqphrwpcaxkarbfib ) ; if ( ! ( pukGroupById . isPresent () ) ) { errors . rejectValue ( "fabdqphrwpcaxkarbfib" , "pukGroup.not.exists" , ( ( "Puk Group " + fabdqphrwpcaxkarbfib ) + " is not exists in the system, please select different one" ) ) ; } }

line_index: 493
bug_before_refactoring: { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; sign = - 1 ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , sign ) ; double [] temp1 = cafe.analysis.cafe.analysis.FFT . get_theta () ; return temp1 ; } <s> public double [] getPhaseTable () { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; sign = - 1 ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , sign ) ; double [] temp1 = cafe.analysis.cafe.analysis.FFT . get_theta () ; return temp1 ; } <s> bugfixes & cleaning
bug_after_refactoring: { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; sign = - 1 ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , sign ) ; double [] vwhzcvsehklzqgnxdcni = cafe.analysis.cafe.analysis.FFT . get_theta () ; return vwhzcvsehklzqgnxdcni ; } <s> public double [] getPhaseTable () { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; sign = - 1 ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , sign ) ; double [] vwhzcvsehklzqgnxdcni = cafe.analysis.cafe.analysis.FFT . get_theta () ; return vwhzcvsehklzqgnxdcni ; } <s> bugfixes & cleaning
fix_before_refactoring: { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , ( - 1 ) ) ; double [] temp1 = cafe.analysis.cafe.analysis.FFT . get_theta () ; return temp1 ; }
fix_after_refactoring: { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , ( - 1 ) ) ; double [] vwhzcvsehklzqgnxdcni = cafe.analysis.cafe.analysis.FFT . get_theta () ; return vwhzcvsehklzqgnxdcni ; }
× fix_prediction_before: { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; sign = - 1 ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , sign ) ; return temp1 ; }
× fix_prediction_after: { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; sign = - 1 ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , sign ) ; return vwhzcvsehklzqgnxdcni ; }

line_index: 495
bug_before_refactoring: private void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int languageToTest = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( languageToTest != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( languageToTest + 1 ) ) ; } } } <s> private void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int languageToTest = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( languageToTest != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( languageToTest + 1 ) ) ; } } } <s> Merge pull request #23 from tkomiya24/cleanup  Fixes issue 22
bug_after_refactoring: private void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int uxkfgdezvqldjttzoodx = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( uxkfgdezvqldjttzoodx != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( uxkfgdezvqldjttzoodx + 1 ) ) ; } } } <s> private void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int uxkfgdezvqldjttzoodx = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( uxkfgdezvqldjttzoodx != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( uxkfgdezvqldjttzoodx + 1 ) ) ; } } } <s> Merge pull request #23 from tkomiya24/cleanup  Fixes issue 22
fix_before_refactoring: public void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int languageToTest = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( languageToTest != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( languageToTest + 1 ) ) ; } } }
fix_after_refactoring: public void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int uxkfgdezvqldjttzoodx = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( uxkfgdezvqldjttzoodx != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( uxkfgdezvqldjttzoodx + 1 ) ) ; } } }
× fix_prediction_before: private void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int languageToTest = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( languageToTest != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( languageToTest + 1 ) ) ; } } }
× fix_prediction_after: private void startTestMenuItemAction () { if ( ( mainView . getCurrentlySelectedVocabList () ) == null ) { reportNoVocabListSelectedError () ; } else { java.lang.Object [] options = new java.lang.Object [] { com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 1 ] , com.tkomiya.models.Vocab.SUPPORTED_LANGUAGES [ 2 ] } ; int uxkfgdezvqldjttzoodx = mainView . showOptionDialog ( "Which language would you like to test?" , "Please enter option" , options , Vocab.KOREAN ) ; if ( uxkfgdezvqldjttzoodx != ( javax.swing.JOptionPane.CANCEL_OPTION ) ) { new com.tkomiya.views.TypedTest ( mainView . getCurrentlySelectedVocabList () , ( uxkfgdezvqldjttzoodx + 1 ) ) ; } } }

line_index: 496
bug_before_refactoring: public static int S ( double t ) { int count = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( count != ( - 1 ) ) { return count ; } else { double lt = t - ( SIRModel.DT ) ; int newCount = ( ( int ) ( ( SIRModel . S ( lt ) ) + ( SIRModel . dS ( t ) ) ) ) ; SIRModel.S_HIST . add ( newCount ) ; return newCount ; } } <s> public static int S ( double t ) { int count = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( count != ( - 1 ) ) { return count ; } else { double lt = t - ( SIRModel.DT ) ; int newCount = ( ( int ) ( ( SIRModel . S ( lt ) ) + ( SIRModel . dS ( t ) ) ) ) ; SIRModel.S_HIST . add ( newCount ) ; return newCount ; } } <s> Fix SIR Model error
bug_after_refactoring: public static int S ( double t ) { int badldepamjkfndpteilt = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( badldepamjkfndpteilt != ( - 1 ) ) { return badldepamjkfndpteilt ; } else { double wnoqdgjtkozoqyvabasv = t - ( SIRModel.DT ) ; int bsaftudndtxojjgjdqsw = ( ( int ) ( ( SIRModel . S ( wnoqdgjtkozoqyvabasv ) ) + ( SIRModel . dS ( t ) ) ) ) ; SIRModel.S_HIST . add ( bsaftudndtxojjgjdqsw ) ; return bsaftudndtxojjgjdqsw ; } } <s> public static int S ( double t ) { int badldepamjkfndpteilt = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( badldepamjkfndpteilt != ( - 1 ) ) { return badldepamjkfndpteilt ; } else { double wnoqdgjtkozoqyvabasv = t - ( SIRModel.DT ) ; int bsaftudndtxojjgjdqsw = ( ( int ) ( ( SIRModel . S ( wnoqdgjtkozoqyvabasv ) ) + ( SIRModel . dS ( t ) ) ) ) ; SIRModel.S_HIST . add ( bsaftudndtxojjgjdqsw ) ; return bsaftudndtxojjgjdqsw ; } } <s> Fix SIR Model error
fix_before_refactoring: public static double S ( double t ) { double count = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( count >= 0 ) { return count ; } else { double lt = t - ( SIRModel.DT ) ; double newCount = ( SIRModel . S ( lt ) ) + ( SIRModel . dS ( t ) ) ; SIRModel.S_HIST . add ( newCount ) ; return newCount ; } }
fix_after_refactoring: public static double S ( double t ) { double badldepamjkfndpteilt = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( badldepamjkfndpteilt >= 0 ) { return badldepamjkfndpteilt ; } else { double wnoqdgjtkozoqyvabasv = t - ( SIRModel.DT ) ; double bsaftudndtxojjgjdqsw = ( SIRModel . S ( wnoqdgjtkozoqyvabasv ) ) + ( SIRModel . dS ( t ) ) ; SIRModel.S_HIST . add ( bsaftudndtxojjgjdqsw ) ; return bsaftudndtxojjgjdqsw ; } }
× fix_prediction_before: public static int S ( double t ) { int count = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( count != ( - 1 ) ) { return count ; } else { double lt = t - ( SIRModel.DT ) ; int newCount = ( ( int ) ( ( SIRModel . S ( lt ) ) + ( SIRModel . dS ( t ) ) ) ) ; SIRModel.S_HIST . add ( newCount ) ; return newCount ; } }
× fix_prediction_after: public static int S ( double t ) { int badldepamjkfndpteilt = SIRModel . getRecord ( SIRModel.S_HIST , t ) ; if ( badldepamjkfndpteilt != ( - 1 ) ) { return badldepamjkfndpteilt ; } else { double wnoqdgjtkozoqyvabasv = t - ( SIRModel.DT ) ; int bsaftudndtxojjgjdqsw = ( ( int ) ( ( SIRModel . S ( wnoqdgjtkozoqyvabasv ) ) + ( SIRModel . dS ( t ) ) ) ) ; SIRModel.S_HIST . add ( bsaftudndtxojjgjdqsw ) ; return bsaftudndtxojjgjdqsw ; } }

line_index: 497
bug_before_refactoring: for ( int i = 0 ; ( i < ( Config.WORLD_ROWS ) ) && ( ! done ) ; i ++ ) { done = GameOfLife . initializeCustomRow ( input , i , world ) ; } <s> public static void initializeCustomWorld ( java.util.Scanner input , boolean [] [] world ) { boolean done = false ; GameOfLife . clearWorld ( world ) ; java.lang.System.out . printf ( "Enter a pattern using %c for alive and %c as dead cells.\n" , Config.ALIVE , Config.DEAD ) ; java.lang.System.out . println ( "To end the pattern, type END on its own line." ) ; for ( int i = 0 ; ( i < ( Config.WORLD_ROWS ) ) && ( ! done ) ; i ++ ) { done = GameOfLife . initializeCustomRow ( input , i , world ) ; } } <s> fix bug where we need to accept more rows than are allowed
bug_after_refactoring: for ( int i = 0 ; ( i < ( Config.WORLD_ROWS ) ) && ( ! mmtxmoepfypsdtmnzoch ) ; i ++ ) { mmtxmoepfypsdtmnzoch = GameOfLife . initializeCustomRow ( input , i , world ) ; } <s> public static void initializeCustomWorld ( java.util.Scanner input , boolean [] [] world ) { boolean done = false ; GameOfLife . clearWorld ( world ) ; java.lang.System.out . printf ( "Enter a pattern using %c for alive and %c as dead cells.\n" , Config.ALIVE , Config.DEAD ) ; java.lang.System.out . println ( "To end the pattern, type END on its own line." ) ; for ( int i = 0 ; ( i < ( Config.WORLD_ROWS ) ) && ( ! mmtxmoepfypsdtmnzoch ) ; i ++ ) { mmtxmoepfypsdtmnzoch = GameOfLife . initializeCustomRow ( input , i , world ) ; } } <s> fix bug where we need to accept more rows than are allowed
fix_before_refactoring: for ( int i = 0 ; ! done ; i ++ ) { done = GameOfLife . initializeCustomRow ( input , i , world ) ; }
fix_after_refactoring: for ( int i = 0 ; ! mmtxmoepfypsdtmnzoch ; i ++ ) { mmtxmoepfypsdtmnzoch = GameOfLife . initializeCustomRow ( input , i , world ) ; }
× fix_prediction_before: for ( int i = 0 ; ( i < ( Config.WORLD_ROWS ) ) && ( ! done ) ; i ++ ) { done = GameOfLife . initializeCustomRow ( input , i , world ) ; }
× fix_prediction_after: for ( int i = 0 ; ( i < ( Config.WORLD_ROWS ) ) && ( ! mmtxmoepfypsdtmnzoch ) ; i ++ ) { mmtxmoepfypsdtmnzoch = GameOfLife . initializeCustomRow ( input , i , world ) ; }

line_index: 498
bug_before_refactoring: @ java.lang.Override protected void initiateAutomaticSync () { long lastAutoSync = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - lastAutoSync ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; } <s> @ java.lang.Override protected void initiateAutomaticSync () { long lastAutoSync = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - lastAutoSync ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; } <s> Fixed a bunch of bugs with behavior when creating new lists
bug_after_refactoring: @ java.lang.Override protected void initiateAutomaticSync () { long sbrpmrzifduhzasffsjo = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - sbrpmrzifduhzasffsjo ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; } <s> @ java.lang.Override protected void initiateAutomaticSync () { long sbrpmrzifduhzasffsjo = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - sbrpmrzifduhzasffsjo ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; } <s> Fixed a bunch of bugs with behavior when creating new lists
fix_before_refactoring: @ java.lang.Override protected void initiateAutomaticSync () { if ( ( tagData ) != null ) { long lastAutoSync = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - lastAutoSync ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; } }
fix_after_refactoring: @ java.lang.Override protected void initiateAutomaticSync () { if ( ( tagData ) != null ) { long sbrpmrzifduhzasffsjo = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - sbrpmrzifduhzasffsjo ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; } }
× fix_prediction_before: @ java.lang.Override protected void initiateAutomaticSync () { long lastAutoSync = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - lastAutoSync ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; }
× fix_prediction_after: @ java.lang.Override protected void initiateAutomaticSync () { long sbrpmrzifduhzasffsjo = com.todoroo.andlib.utility.Preferences . getLong ( ( ( com.todoroo.astrid.actfm.TagViewActivity.LAST_FETCH_KEY ) + ( tagData . getId () ) ) , 0 ) ; if ( ( ( com.todoroo.andlib.utility.DateUtilities . now () ) - sbrpmrzifduhzasffsjo ) > ( com.todoroo.andlib.utility.DateUtilities.ONE_HOUR ) ) refreshData ( false ) ; }

line_index: 499
bug_before_refactoring: { ret += ( visit ( ctx . small_stmt ( i ) ) ) + "\n" ; } <s> @ java.lang.Override public java.lang.String visitSimple_stmt ( lessa.ExprParser.Simple_stmtContext ctx ) { java.lang.System.out . println ( "simple_stmt -> small_stmt (';' small_stmt)* ';' " ) ; java.lang.String ret = ( visit ( ctx . small_stmt ( 0 ) ) ) + "\n" ; int i = 1 ; while ( ( ctx . small_stmt ( i ) ) != null ) { ret += ( visit ( ctx . small_stmt ( i ) ) ) + "\n" ; } return ret ; } <s> Add import and del statement. Fix infinite while loop bugs...
bug_after_refactoring: { ret += ( visit ( ctx . small_stmt ( ucjekbgwivlybxzenszv ) ) ) + "\n" ; } <s> @ java.lang.Override public java.lang.String visitSimple_stmt ( lessa.ExprParser.Simple_stmtContext ctx ) { java.lang.System.out . println ( "simple_stmt -> small_stmt (';' small_stmt)* ';' " ) ; java.lang.String ret = ( visit ( ctx . small_stmt ( 0 ) ) ) + "\n" ; int i = 1 ; while ( ( ctx . small_stmt ( i ) ) != null ) { ret += ( visit ( ctx . small_stmt ( ucjekbgwivlybxzenszv ) ) ) + "\n" ; } return ret ; } <s> Add import and del statement. Fix infinite while loop bugs...
fix_before_refactoring: { ret += ( visit ( ctx . small_stmt ( i ) ) ) + "\n" ; i ++ ; }
fix_after_refactoring: { ret += ( visit ( ctx . small_stmt ( ucjekbgwivlybxzenszv ) ) ) + "\n" ; ucjekbgwivlybxzenszv ++ ; }
× fix_prediction_before: { ret += ( ctx . small_stmt ( i ) ) + "\n" ; i ++ ; }
× fix_prediction_after: { ret += ( visit ( ctx . small_stmt ( ucjekbgwivlybxzenszv ) ) ) + "\n" ; i ++ ; }

line_index: 500
bug_before_refactoring: { final boolean isBrowserAvailable = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( isBrowserAvailable ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! isBrowserAvailable ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; } <s> private void updateUI_2_Dashboard () { final boolean isBrowserAvailable = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( isBrowserAvailable ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! isBrowserAvailable ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; } <s> -fixed NPE  -fixed charset problem -removed dash
bug_after_refactoring: { final boolean aldxtinepmaczimldqox = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( aldxtinepmaczimldqox ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! aldxtinepmaczimldqox ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; } <s> private void updateUI_2_Dashboard () { final boolean aldxtinepmaczimldqox = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( aldxtinepmaczimldqox ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! aldxtinepmaczimldqox ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; } <s> -fixed NPE  -fixed charset problem -removed dash
fix_before_refactoring: { if ( ( _dashboard_PageBook ) == null ) { return; } final boolean isBrowserAvailable = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( isBrowserAvailable ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! isBrowserAvailable ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; }
fix_after_refactoring: { if ( ( _dashboard_PageBook ) == null ) { return; } final boolean aldxtinepmaczimldqox = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( aldxtinepmaczimldqox ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! aldxtinepmaczimldqox ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; }
× fix_prediction_before: { final boolean isBrowserAvailable = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( isBrowserAvailable ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! isBrowserAvailable ) { return; } _dashboard_PageBook . showPage ( ( isBrowserAvailable ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; _browser . setText ( html ) ; }
× fix_prediction_after: { final boolean aldxtinepmaczimldqox = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( aldxtxtinepmaczimldqox ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! aldxtinepmaczimldqox ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; }

line_index: 501
bug_before_refactoring: if ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) { count ++ ; } <s> public int hamming () { int count = 0 ; for ( int i = 0 ; i < ( N ) ; i ++ ) { for ( int j = 0 ; j < ( N ) ; j ++ ) { if ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) { count ++ ; } } } return count ; } <s> Fix bugs: 1. The wrong hamming & manhattan 2. The wrong string format 3. The unfinished compareTo() method
bug_after_refactoring: if ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) { qadlghnmcedjbxberwfr ++ ; } <s> public int hamming () { int count = 0 ; for ( int i = 0 ; i < ( N ) ; i ++ ) { for ( int j = 0 ; j < ( N ) ; j ++ ) { if ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) { qadlghnmcedjbxberwfr ++ ; } } } return count ; } <s> Fix bugs: 1. The wrong hamming & manhattan 2. The wrong string format 3. The unfinished compareTo() method
fix_before_refactoring: if ( ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) && ( ( pieces [ i ] [ j ] ) != 0 ) ) { count ++ ; }
fix_after_refactoring: if ( ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) && ( ( pieces [ i ] [ j ] ) != 0 ) ) { qadlghnmcedjbxberwfr ++ ; }
× fix_prediction_before: if ( ! ( pieces [ i ] [ j ] . equals ( goalValueAt ( i , j ) ) ) ) { count ++ ; }
× fix_prediction_after: if ( ! ( pieces [ i ] [ j ] . equals ( goalValueAt ( i , j ) ) ) ) { qadlghnmcedjbxberwfr ++ ; }

line_index: 503
bug_before_refactoring: { byte b ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { b = value . byteAt ( i ) ; if ( ( b & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != b ) { return false ; } } return true ; } <s> private final boolean is7BitClean ( org.forgerock.opendj.ldap.ByteSequence value ) { byte b ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { b = value . byteAt ( i ) ; if ( ( b & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != b ) { return false ; } } return true ; } <s> Code  review: Matthew Swift  SevenBitCleanPlugin.java: In doLDIFImport()  fixed a bug.  git-svn-id: https://svn.forgerock.org/opendj/trunk@12680 41b1ffd8-f28e-4786-ab96-9950f0a78031
bug_after_refactoring: { byte zjqkreoeptwlkznfyfyf ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { zjqkreoeptwlkznfyfyf = value . byteAt ( i ) ; if ( ( zjqkreoeptwlkznfyfyf & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != zjqkreoeptwlkznfyfyf ) { return false ; } } return true ; } <s> private final boolean is7BitClean ( org.forgerock.opendj.ldap.ByteSequence value ) { byte zjqkreoeptwlkznfyfyf ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { zjqkreoeptwlkznfyfyf = value . byteAt ( i ) ; if ( ( zjqkreoeptwlkznfyfyf & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != zjqkreoeptwlkznfyfyf ) { return false ; } } return true ; } <s> Code  review: Matthew Swift  SevenBitCleanPlugin.java: In doLDIFImport()  fixed a bug.  git-svn-id: https://svn.forgerock.org/opendj/trunk@12680 41b1ffd8-f28e-4786-ab96-9950f0a78031
fix_before_refactoring: { for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { byte b = value . byteAt ( i ) ; if ( ( b & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != b ) { return false ; } } return true ; }
fix_after_refactoring: { for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { byte zjqkreoeptwlkznfyfyf = value . byteAt ( i ) ; if ( ( zjqkreoeptwlkznfyfyf & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != zjqkreoeptwlkznfyfyf ) { return false ; } } return true ; }
× fix_prediction_before: { byte b ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { value = value . byteAt ( i ) ; if ( ( b & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != b ) { return false ; } } return true ; }
× fix_prediction_after: { byte zjqkreoeptwlkznfyfyf ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { zjqkreoeptwlkznfyfyfyf = value . byteAt ( i ) ; if ( ( zjqkreoeptwlkznfyfyf & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != zjqkreoeptwlkznfyfyf ) { return true ; } } return false ; }

line_index: 504
bug_before_refactoring: { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean result = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return result ; } <s> @ java.lang.Override protected java.lang.Boolean doInBackground ( java.lang.String . . . params ) { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean result = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return result ; } <s> bug fix on evacuation
bug_after_refactoring: { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean ybuxgrachmjeuwecwqmw = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return ybuxgrachmjeuwecwqmw ; } <s> @ java.lang.Override protected java.lang.Boolean doInBackground ( java.lang.String . . . params ) { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean ybuxgrachmjeuwecwqmw = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return ybuxgrachmjeuwecwqmw ; } <s> bug fix on evacuation
fix_before_refactoring: { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean result ; result = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return result ; }
fix_after_refactoring: { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean ybuxgrachmjeuwecwqmw ; ybuxgrachmjeuwecwqmw = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return ybuxgrachmjeuwecwqmw ; }
× fix_prediction_before: { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean result = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return result ; }
× fix_prediction_after: { com.mongodb.MongoClientURI mongoUri = new com.mongodb.MongoClientURI ( tasks.CallEvacuationTask.DBAdress ) ; com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient ( mongoUri ) ; com.mongodb.client.MongoDatabase db = mongoClient . getDatabase ( mongoUri . getDatabase () ) ; com.mongodb.client.MongoCollection < com.mongodb.BasicDBObject > dbCollection = db . getCollection ( tasks.CallEvacuationTask.collectionName , com.mongodb.BasicDBObject . class ) ; boolean ybuxgrachmjeuwecwqmw = updateEvac ( dbCollection , params [ 1 ] , params [ 0 ] ) ; return ybuxgrachmjeuwecwqmw ; }

line_index: 506
bug_before_refactoring: { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; final java.lang.String extension = getFileExtensions () [ 0 ] ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( ( fullBundleName + '_' ) + languageCode ) + extension ; final boolean missing = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( missing ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } } <s> private void checkExistenceOfRequiredTranslations ( java.util.Set < java.io.File > filesInResourceBundle ) { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; final java.lang.String extension = getFileExtensions () [ 0 ] ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( ( fullBundleName + '_' ) + languageCode ) + extension ; final boolean missing = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( missing ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } } <s> Issue #2251: Fix wrong support for resources with language  country  variant
bug_after_refactoring: { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; final java.lang.String extension = getFileExtensions () [ 0 ] ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( ( fullBundleName + '_' ) + languageCode ) + extension ; final boolean afbjpeahjoeljkurxcbi = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( afbjpeahjoeljkurxcbi ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } } <s> private void checkExistenceOfRequiredTranslations ( java.util.Set < java.io.File > filesInResourceBundle ) { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; final java.lang.String extension = getFileExtensions () [ 0 ] ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( ( fullBundleName + '_' ) + languageCode ) + extension ; final boolean afbjpeahjoeljkurxcbi = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( afbjpeahjoeljkurxcbi ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } } <s> Issue #2251: Fix wrong support for resources with language  country  variant
fix_before_refactoring: { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( fullBundleName + '_' ) + languageCode ; final boolean missing = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( missing ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } }
fix_after_refactoring: { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( fullBundleName + '_' ) + languageCode ; final boolean afbjpeahjoeljkurxcbi = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( afbjpeahjoeljkurxcbi ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } }
× fix_prediction_before: { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; final java.lang.String extension = getFileExtensions () [ 0 ] ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( ( fullBundleName + '_' ) + languageCode ) + extension ; final boolean missing = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( missing ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } }
× fix_prediction_after: { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; final java.lang.String extension = getFileExtensions () [ 0 ] ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( ( fullBundleName + '_' ) + languageCode ) + extension ; final boolean afbjpeahjoeljkurxcbi = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( afbjpeahjoeljkurxcbi ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } }

line_index: 507
bug_before_refactoring: public void register ( org.bukkit.entity.Player player ) { int toLevel = this . _model . getDonationLevel ( 0 ) ; se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = getOrAddPlayerInfo ( player ) ; playerInfo . demoteOrPromote ( toLevel ) ; this . _knownPlayers . put ( player , playerInfo ) ; player . sendMessage ( java.lang.String . format ( "You are currently at perk level %d." , ( toLevel + 1 ) ) ) ; } <s> public void register ( org.bukkit.entity.Player player ) { int toLevel = this . _model . getDonationLevel ( 0 ) ; se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = getOrAddPlayerInfo ( player ) ; playerInfo . demoteOrPromote ( toLevel ) ; this . _knownPlayers . put ( player , playerInfo ) ; player . sendMessage ( java.lang.String . format ( "You are currently at perk level %d." , ( toLevel + 1 ) ) ) ; } <s> Fixed a number of bugs.
bug_after_refactoring: public void register ( org.bukkit.entity.Player player ) { int wkqflmzspzzxvuvcxani = this . _model . getDonationLevel ( 0 ) ; se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = getOrAddPlayerInfo ( player ) ; playerInfo . demoteOrPromote ( wkqflmzspzzxvuvcxani ) ; this . _knownPlayers . put ( player , playerInfo ) ; player . sendMessage ( java.lang.String . format ( "You are currently at perk level %d." , ( wkqflmzspzzxvuvcxani + 1 ) ) ) ; } <s> public void register ( org.bukkit.entity.Player player ) { int wkqflmzspzzxvuvcxani = this . _model . getDonationLevel ( 0 ) ; se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = getOrAddPlayerInfo ( player ) ; playerInfo . demoteOrPromote ( wkqflmzspzzxvuvcxani ) ; this . _knownPlayers . put ( player , playerInfo ) ; player . sendMessage ( java.lang.String . format ( "You are currently at perk level %d." , ( wkqflmzspzzxvuvcxani + 1 ) ) ) ; } <s> Fixed a number of bugs.
fix_before_refactoring: private se.fredsfursten.donationboardplugin.PlayerInfo getOrAddPlayerInfo ( org.bukkit.entity.Player player ) { se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = this . _knownPlayers . get ( player ) ; if ( playerInfo == null ) { playerInfo = new se.fredsfursten.donationboardplugin.PlayerInfo ( player ) ; this . _knownPlayers . put ( player , playerInfo ) ; int toLevel = this . _model . getDonationLevel ( 0 ) ; playerInfo . demoteOrPromote ( toLevel ) ; } return playerInfo ; }
fix_after_refactoring: private se.fredsfursten.donationboardplugin.PlayerInfo getOrAddPlayerInfo ( org.bukkit.entity.Player player ) { se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = this . _knownPlayers . get ( player ) ; if ( playerInfo == null ) { playerInfo = new se.fredsfursten.donationboardplugin.PlayerInfo ( player ) ; this . _knownPlayers . put ( player , playerInfo ) ; int wkqflmzspzzxvuvcxani = this . _model . getDonationLevel ( 0 ) ; playerInfo . demoteOrPromote ( wkqflmzspzzxvuvcxani ) ; } return playerInfo ; }
× fix_prediction_before: public void register ( org.bukkit.entity.Player player ) { int toLevel = this . _model . getDonationLevel ( 0 ) ; se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = getOrAddPlayerInfo ( player ) ; playerInfo . demoteOrPromote ( toLevel ) ; this . _knownPlayers . put ( player , playerInfo ) ; player . sendMessage ( java.lang.String . format ( "You are currently atirk level %d." , ( toLevel + 1 ) ) ) ; }
× fix_prediction_after: public void register ( org.bukkit.entity.Player player ) { int wkqflmzspzzxvuvcxani = this . _model . getDonationLevel ( 0 ) ; se.fredsfursten.donationboardplugin.PlayerInfo playerInfo = getOrAddPlayerInfo ( player ) ; playerInfo . demoteOrPromote ( wkqflmzspzzxvuvcxani ) ; this . _knownPlayers . put ( player , playerInfo ) ; player . sendMessage ( java.lang.String . format ( "You are currently atirk level %d." , ( wkqflmzspzzxvuvcxani + 1 ) ) ) ; }

line_index: 508
bug_before_refactoring: private data.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] meanPoint = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] /= dataSet . size () ; } return new data.Vector ( meanPoint ) ; } <s> private data.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] meanPoint = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] /= dataSet . size () ; } return new data.Vector ( meanPoint ) ; } <s> Fix bug  improve stability.
bug_after_refactoring: private data.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] ezqceohglplkgnwnypce = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] /= dataSet . size () ; } return new data.Vector ( ezqceohglplkgnwnypce ) ; } <s> private data.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] ezqceohglplkgnwnypce = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] /= dataSet . size () ; } return new data.Vector ( ezqceohglplkgnwnypce ) ; } <s> Fix bug  improve stability.
fix_before_refactoring: private java.util.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] meanPoint = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] /= dataSet . size () ; } return new java.util.Vector ( meanPoint ) ; }
fix_after_refactoring: private java.util.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] ezqceohglplkgnwnypce = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] /= dataSet . size () ; } return new java.util.Vector ( ezqceohglplkgnwnypce ) ; }
× fix_prediction_before: private data.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] meanPoint = new double [ argumentsCount ] ; for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] += data . getValueAt ( i ) ; } return new data.Vector ( meanPoint ) ; }
× fix_prediction_after: private data.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] ezqceohglplkgnwnypce = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { ezqceohglplkgnwnypce [ i ] /= dataSet . size () ; } return new data.Vector ( ezqceohglplkgnwnypce ) ; }

line_index: 509
bug_before_refactoring: { int [] dims = getNumberPair ( "Please enter the new dimensions?" ) ; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( dims [ 0 ] , dims [ 1 ] ) ; } } <s> @ java.lang.Override public void onTriggered () { if ( ( tilemap ) != null ) { int [] dims = getNumberPair ( "Please enter the new dimensions?" ) ; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( dims [ 0 ] , dims [ 1 ] ) ; } } } <s> Control scheme changes (moving around modifiers and such). Also fixed a bug with cancelling on the resize button.
bug_after_refactoring: { int [] bxsxakdigfoucwezzens = getNumberPair ( "Please enter the new dimensions?" ) ; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( bxsxakdigfoucwezzens [ 0 ] , bxsxakdigfoucwezzens [ 1 ] ) ; } } <s> @ java.lang.Override public void onTriggered () { if ( ( tilemap ) != null ) { int [] bxsxakdigfoucwezzens = getNumberPair ( "Please enter the new dimensions?" ) ; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( bxsxakdigfoucwezzens [ 0 ] , bxsxakdigfoucwezzens [ 1 ] ) ; } } } <s> Control scheme changes (moving around modifiers and such). Also fixed a bug with cancelling on the resize button.
fix_before_refactoring: { int [] dims = getNumberPair ( "Please enter the new dimensions?" ) ; if ( dims == null ) return; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( dims [ 0 ] , dims [ 1 ] ) ; } }
fix_after_refactoring: { int [] bxsxakdigfoucwezzens = getNumberPair ( "Please enter the new dimensions?" ) ; if ( bxsxakdigfoucwezzens == null ) return; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( bxsxakdigfoucwezzens [ 0 ] , bxsxakdigfoucwezzens [ 1 ] ) ; } }
× fix_prediction_before: { int [] dims = getNumberPair ( "Please enter the new dimensions?" ) ; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( dims [ 0 ] , dims [ 1 ] ) ; } }
× fix_prediction_after: { int [] bxsxakdigfoucwezzens = getNumberPair ( "Please enter the new dimensions?" ) ; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( bxsxakdigfoucwezzens [ 0 ] , bxsxakdigfoucwezzens [ 1 ] ) ; } }

line_index: 510
bug_before_refactoring: { double score = 0 ; double intensity = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { score = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , score , intensity ) ; depScoreMap . put ( node , sNode ) ; return sNode ; } <s> protected sentimentAnalysis.ScoreNode getNode ( edu.emory.clir.clearnlp.dependency.DEPNode node , java.util.Map < java.lang.String , java.lang.Double > map ) { double score = 0 ; double intensity = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { score = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , score , intensity ) ; depScoreMap . put ( node , sNode ) ; return sNode ; } <s> Bugfix 66% accuracy
bug_after_refactoring: { double wifzbxpnsuofwulijevd = 0 ; double drwccprnyjyiqocjtmyj = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { wifzbxpnsuofwulijevd = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , wifzbxpnsuofwulijevd , drwccprnyjyiqocjtmyj ) ; depScoreMap . put ( node , sNode ) ; return sNode ; } <s> protected sentimentAnalysis.ScoreNode getNode ( edu.emory.clir.clearnlp.dependency.DEPNode node , java.util.Map < java.lang.String , java.lang.Double > map ) { double wifzbxpnsuofwulijevd = 0 ; double drwccprnyjyiqocjtmyj = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { wifzbxpnsuofwulijevd = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , wifzbxpnsuofwulijevd , drwccprnyjyiqocjtmyj ) ; depScoreMap . put ( node , sNode ) ; return sNode ; } <s> Bugfix 66% accuracy
fix_before_refactoring: { double score = 0 ; double intensity = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { score = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , score , intensity ) ; return sNode ; }
fix_after_refactoring: { double wifzbxpnsuofwulijevd = 0 ; double drwccprnyjyiqocjtmyj = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { wifzbxpnsuofwulijevd = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , wifzbxpnsuofwulijevd , drwccprnyjyiqocjtmyj ) ; return sNode ; }
× fix_prediction_before: { double score = 0 ; double intensity = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { score = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , score , intensity ) ; depScoreMap . put ( node , sNode ) ; return sNode ; }
× fix_prediction_after: { double wifzbxpnsuofwulijevd = 0 ; double drwccprnyjyiqocjtmyj = getIntensity ( node ) ; if ( map . containsKey ( node . getLemma () ) ) { wifzbxpnsuofwulijevd = map . get ( node . getLemma () ) ; } sentimentAnalysis.ScoreNode sNode = new sentimentAnalysis.ScoreNode ( node . getLemma () , wifzbxpnsuofwulijd , drwccprnyjyiqocjtmyj ) ; depScoreMap . put ( node , sNode ) ; return sNode ; }

line_index: 511
bug_before_refactoring: { int selected = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( selected == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( selected == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } alloc . setLevel ( radioGroupLevelSelection ) ; filterAndRefresh () ; } <s> @ java.lang.Override public void onCheckedChanged ( android.widget.RadioGroup group , int checkedId ) { int selected = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( selected == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( selected == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } alloc . setLevel ( radioGroupLevelSelection ) ; filterAndRefresh () ; } <s> more features and bug fixes
bug_after_refactoring: { int ljczkjaybelivmqziwtb = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } alloc . setLevel ( radioGroupLevelSelection ) ; filterAndRefresh () ; } <s> @ java.lang.Override public void onCheckedChanged ( android.widget.RadioGroup group , int checkedId ) { int ljczkjaybelivmqziwtb = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } alloc . setLevel ( radioGroupLevelSelection ) ; filterAndRefresh () ; } <s> more features and bug fixes
fix_before_refactoring: { int selected = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( selected == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( selected == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } filterAndRefresh ( radioGroupLevelSelection ) ; }
fix_after_refactoring: { int ljczkjaybelivmqziwtb = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } filterAndRefresh ( radioGroupLevelSelection ) ; }
× fix_prediction_before: { int selected = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( selected == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( selected == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 2 ; } else { filterAndRefresh () ; } }
× fix_prediction_after: { int ljczkjaybelivmqziwtb = ( ( android.widget.RadioGroup ) ( findViewById ( R.id.createMatchRadioGroupLevel ) ) ) . getCheckedRadioButtonId () ; if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonJunior ) ) { radioGroupLevelSelection = 1 ; } else if ( ljczkjaybelivmqziwtb == ( R.id.createMatchRadioButtonSenior ) ) { radioGroupLevelSelection = 2 ; } filterAndRefresh () ; }

line_index: 512
bug_before_refactoring: private int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( ( playerNumber ) == 1 ) { if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int ind = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ ind ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; } else { getOptimalResultForBoardPosition ( board , 2 ) ; } return optimalMoveFromBoardPosition . get ( boardAsString ) ; } <s> private int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( ( playerNumber ) == 1 ) { if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int ind = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ ind ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; } else { getOptimalResultForBoardPosition ( board , 2 ) ; } return optimalMoveFromBoardPosition . get ( boardAsString ) ; } <s> fixed bug occured for refactoring
bug_after_refactoring: private int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( ( playerNumber ) == 1 ) { if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int eewsivgzqvcpgerarogy = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ eewsivgzqvcpgerarogy ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; } else { getOptimalResultForBoardPosition ( board , 2 ) ; } return optimalMoveFromBoardPosition . get ( boardAsString ) ; } <s> private int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( ( playerNumber ) == 1 ) { if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int eewsivgzqvcpgerarogy = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ eewsivgzqvcpgerarogy ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; } else { getOptimalResultForBoardPosition ( board , 2 ) ; } return optimalMoveFromBoardPosition . get ( boardAsString ) ; } <s> fixed bug occured for refactoring
fix_before_refactoring: private int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int ind = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ ind ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; return optimalMoveFromBoardPosition . get ( boardAsString ) ; }
fix_after_refactoring: private int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int eewsivgzqvcpgerarogy = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ eewsivgzqvcpgerarogy ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; return optimalMoveFromBoardPosition . get ( boardAsString ) ; }
× fix_prediction_before: public int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( ( playerNumber ) == 1 ) { if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int ind = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ ind ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; } else { getOptimalResultForBoardPosition ( board , 2 ) ; } return optimalMoveFromBoardPosition . get ( boardAsString ) ; }
× fix_prediction_after: protected int getMove ( com.rijul.game.core.Board board ) { java.lang.String boardAsString = getBoardAsString ( board ) ; if ( ( playerNumber ) == 1 ) { if ( boardAsString . equals ( com.rijul.game.app.player.impl.Bot.INITIAL_BOARD ) ) { int eewsivgzqvcpgerarogy = random . nextInt ( com.rijul.game.app.player.impl.Bot.INITIAL_MOVES.length ) ; return com.rijul.game.app.player.impl.Bot.INITIAL_MOVES [ eewsivgzcpcpgerarogy ] ; } getOptimalResultForBoardPosition ( board , 1 ) ; } else { getOptimalResultForBoardPosition ( board , 2 ) ; } return optimalMoveFromBoardPosition . get ( boardAsString ) ; }

line_index: 513
bug_before_refactoring: int bonus = 0 ; <s> @ java.lang.Override public void calculateRedpacksPrize ( cn.wisdom.lottery.dao.vo.Lottery lottery ) { if ( cn.wisdom.lottery.common.utils.CollectionUtils . isNotEmpty ( lottery . getRedpacks () ) ) { int totalBonus = lottery . getPeriods () . get ( 0 ) . getPrizeBonus () ; int bonus = 0 ; for ( cn.wisdom.lottery.dao.vo.LotteryRedpack lotteryRedpack : lottery . getRedpacks () ) { bonus = ( totalBonus * ( lotteryRedpack . getRate () ) ) / 100 ; lotteryRedpack . setPrizeBonus ( bonus ) ; } } } <s> prize task bugfix
bug_after_refactoring: int tuibzlsppcakjrgzmyjk = 0 ; <s> @ java.lang.Override public void calculateRedpacksPrize ( cn.wisdom.lottery.dao.vo.Lottery lottery ) { if ( cn.wisdom.lottery.common.utils.CollectionUtils . isNotEmpty ( lottery . getRedpacks () ) ) { int totalBonus = lottery . getPeriods () . get ( 0 ) . getPrizeBonus () ; int tuibzlsppcakjrgzmyjk = 0 ; for ( cn.wisdom.lottery.dao.vo.LotteryRedpack lotteryRedpack : lottery . getRedpacks () ) { bonus = ( totalBonus * ( lotteryRedpack . getRate () ) ) / 100 ; lotteryRedpack . setPrizeBonus ( bonus ) ; } } } <s> prize task bugfix
fix_before_refactoring: float bonus = 0 ;
fix_after_refactoring: float tuibzlsppcakjrgzmyjk = 0 ;
× fix_prediction_before: double bonus = 0 ;
× fix_prediction_after: double tuibzlsppcakjrgzmyjk = 0 ;

line_index: 514
bug_before_refactoring: ( rpNonVplexSourceVolume || addJournalVolume ) || notAlreadyInTaskList <s> private boolean isTaskRequired ( com.emc.storageos.db.client.model.Volume rpVolume , com.emc.storageos.volumecontroller.impl.utils.VirtualPoolCapabilityValuesWrapper capabilities , boolean vplex , com.emc.storageos.model.TaskList taskList ) { boolean rpNonVplexSourceVolume = ( Volume.PersonalityTypes.SOURCE . name () . equals ( rpVolume . getPersonality () ) ) && ( ! vplex ) ; boolean addJournalVolume = capabilities . getAddJournalCapacity () ; boolean notAlreadyInTaskList = ( com.emc.storageos.api.service.impl.placement.StorageScheduler . getPrecreatedVolume ( _dbClient , taskList , rpVolume . getLabel () ) ) == null ; boolean createTask = ( rpNonVplexSourceVolume || addJournalVolume ) || notAlreadyInTaskList ; return createTask ; } <s> COP-16743: Fixed an issue with createTask boolean for RP.
bug_after_refactoring: ( hgcheuhfemwjxjkrdmwj || xhyzojsbrglzolirnuah ) || qmfdnpgzixiopbndvywp <s> private boolean isTaskRequired ( com.emc.storageos.db.client.model.Volume rpVolume , com.emc.storageos.volumecontroller.impl.utils.VirtualPoolCapabilityValuesWrapper capabilities , boolean vplex , com.emc.storageos.model.TaskList taskList ) { boolean rpNonVplexSourceVolume = ( Volume.PersonalityTypes.SOURCE . name () . equals ( rpVolume . getPersonality () ) ) && ( ! vplex ) ; boolean addJournalVolume = capabilities . getAddJournalCapacity () ; boolean notAlreadyInTaskList = ( com.emc.storageos.api.service.impl.placement.StorageScheduler . getPrecreatedVolume ( _dbClient , taskList , rpVolume . getLabel () ) ) == null ; boolean createTask = ( hgcheuhfemwjxjkrdmwj || xhyzojsbrglzolirnuah ) || qmfdnpgzixiopbndvywp ; return createTask ; } <s> COP-16743: Fixed an issue with createTask boolean for RP.
fix_before_refactoring: addJournalVolume || ( rpNonVplexSourceVolume && notAlreadyInTaskList )
fix_after_refactoring: xhyzojsbrglzolirnuah || ( hgcheuhfemwjxjkrdmwj && qmfdnpgzixiopbndvywp )
× fix_prediction_before: ( rpNonVplexSourceVolume || addJournalVolume ) || notAlreadyInTaskList
× fix_prediction_after: ( hgcheuhfemwjxjkrdmwj || xhyzojsbrglzolirnuah ) || qmfdnpgzixiopbndvywp

line_index: 515
bug_before_refactoring: { int newLength = 0 ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { newLength += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { newLength += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { newLength = record . getLength () ; } this . length = newLength + ( net.decix.jipfix.header.SetHeader.HEADERLENGTH ) ; } <s> private void updateLength () { int newLength = 0 ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { newLength += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { newLength += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { newLength = record . getLength () ; } this . length = newLength + ( net.decix.jipfix.header.SetHeader.HEADERLENGTH ) ; } <s> fixed bug in updateLength of the SetHeader class
bug_after_refactoring: { int shcefwwfqjlbtgxadjsg = 0 ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { shcefwwfqjlbtgxadjsg += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { shcefwwfqjlbtgxadjsg += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { shcefwwfqjlbtgxadjsg = record . getLength () ; } this . length = shcefwwfqjlbtgxadjsg + ( net.decix.jipfix.header.SetHeader.HEADERLENGTH ) ; } <s> private void updateLength () { int shcefwwfqjlbtgxadjsg = 0 ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { shcefwwfqjlbtgxadjsg += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { shcefwwfqjlbtgxadjsg += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { shcefwwfqjlbtgxadjsg = record . getLength () ; } this . length = shcefwwfqjlbtgxadjsg + ( net.decix.jipfix.header.SetHeader.HEADERLENGTH ) ; } <s> fixed bug in updateLength of the SetHeader class
fix_before_refactoring: { int newLength = net.decix.jipfix.header.SetHeader.HEADERLENGTH ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { newLength += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { newLength += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { newLength += record . getLength () ; } this . length = newLength ; }
fix_after_refactoring: { int shcefwwfqjlbtgxadjsg = net.decix.jipfix.header.SetHeader.HEADERLENGTH ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { shcefwwfqjlbtgxadjsg += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { shcefwwfqjlbtgxadjsg += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { shcefwwfqjlbtgxadjsg += record . getLength () ; } this . length = shcefwwfqjlbtgxadjsg ; }
× fix_prediction_before: { int newLength = 0 ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { newLength += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { newLength += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { newLength = record . getLength () ; } this . length = newLength + ( net.decix.jipfix.header.SetHeader.HEADERLENGTH ) ; }
× fix_prediction_after: { int shcefwwfqjlbtgxadjsg = 0 ; for ( net.decix.jipfix.header.TemplateRecord template : templateRecords ) { shcefwwfqjlbtgxadjsg += template . getLength () ; } for ( net.decix.jipfix.header.OptionTemplateRecord optionTemplate : optionTemplateRecords ) { shcefwwfqjlbtgxadjsg += optionTemplate . getLength () ; } for ( net.decix.jipfix.header.DataRecord record : dataRecords ) { shcefwwfqjlbtgxadjsg = record . getLength () ; } this . length = shcefwwfqjlbtgxadjsg + ( net.decix.jipfix.header.SetHeader.HEADERLENGTH ) ; }

line_index: 517
bug_before_refactoring: { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; io.cattle.platform.servicediscovery.deployment.ServiceDeploymentPlanner planner = deploymentPlannerFactory . createServiceDeploymentPlanner ( services , units , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean needToReconcile = needToReconcile ( services , units , planner ) ; if ( ! needToReconcile ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units , planner ) ; } <s> @ java.lang.Override public void doWithLockNoResult () { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; io.cattle.platform.servicediscovery.deployment.ServiceDeploymentPlanner planner = deploymentPlannerFactory . createServiceDeploymentPlanner ( services , units , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean needToReconcile = needToReconcile ( services , units , planner ) ; if ( ! needToReconcile ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units , planner ) ; } <s> Fixed the bug in sidekick service reconcile  * recreate the entire unit if one of the instance is missing * create deployment plan after removing bad units
bug_after_refactoring: { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; io.cattle.platform.servicediscovery.deployment.ServiceDeploymentPlanner planner = deploymentPlannerFactory . createServiceDeploymentPlanner ( services , units , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean vsnhstejubdyowgngaam = vsnhstejubdyowgngaam ( services , units , planner ) ; if ( ! vsnhstejubdyowgngaam ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units , planner ) ; } <s> @ java.lang.Override public void doWithLockNoResult () { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; io.cattle.platform.servicediscovery.deployment.ServiceDeploymentPlanner planner = deploymentPlannerFactory . createServiceDeploymentPlanner ( services , units , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean vsnhstejubdyowgngaam = vsnhstejubdyowgngaam ( services , units , planner ) ; if ( ! vsnhstejubdyowgngaam ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units , planner ) ; } <s> Fixed the bug in sidekick service reconcile  * recreate the entire unit if one of the instance is missing * create deployment plan after removing bad units
fix_before_refactoring: { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean needToReconcile = needToReconcile ( services , units ) ; if ( ! needToReconcile ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units ) ; }
fix_after_refactoring: { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean vsnhstejubdyowgngaam = vsnhstejubdyowgngaam ( services , units ) ; if ( ! vsnhstejubdyowgngaam ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units ) ; }
× fix_prediction_before: { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; io.cattle.platform.servicediscovery.deployment.ServiceDeploymentPlanner planner = deploymentPlannerFactory . createServiceDeploymentPlanner ( services , units , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; if ( ! needToReconcile ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units , planner ) ; }
× fix_prediction_after: { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; io.cattle.platform.servicediscovery.deployment.ServiceDeploymentPlanner planner = deploymentPlannerFactory . createServiceDeploymentPlanner ( services , units , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean vsnhstejubdyowgngaam = vsnhstejubdyowgngaam ( services , units , planner ) ; if ( ! vsnhstejubdyowgngaam ) { return; } activateDeploymentUnits ( services , units , planner ) ; }

line_index: 518
bug_before_refactoring: { if ( currentFragment instanceof org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) { ( ( org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) ( currentFragment ) ) . onConfigurationReplaced () ; } mConfigScreenId = configScreenId ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( configScreenId ) ) . commit () ; } <s> private void handleIntent ( android.content.Intent intent ) { final int configScreenId = intent . getIntExtra ( org.droidplanner.android.activities.ConfigurationActivity.EXTRA_CONFIG_SCREEN_ID , mConfigScreenId ) ; final android.support.v4.app.Fragment currentFragment = getCurrentFragment () ; if ( ( currentFragment == null ) || ( ( getIdForFragment ( currentFragment ) ) != configScreenId ) ) { if ( currentFragment instanceof org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) { ( ( org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) ( currentFragment ) ) . onConfigurationReplaced () ; } mConfigScreenId = configScreenId ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( configScreenId ) ) . commit () ; } } <s> Fix remaining issues with state transition while doing compass calibration
bug_after_refactoring: { if ( currentFragment instanceof org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) { ( ( org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) ( currentFragment ) ) . onConfigurationReplaced () ; } mConfigScreenId = zobkrxsbveuregbakhna ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( zobkrxsbveuregbakhna ) ) . commit () ; } <s> private void handleIntent ( android.content.Intent intent ) { final int configScreenId = intent . getIntExtra ( org.droidplanner.android.activities.ConfigurationActivity.EXTRA_CONFIG_SCREEN_ID , mConfigScreenId ) ; final android.support.v4.app.Fragment currentFragment = getCurrentFragment () ; if ( ( currentFragment == null ) || ( ( getIdForFragment ( currentFragment ) ) != configScreenId ) ) { if ( currentFragment instanceof org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) { ( ( org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) ( currentFragment ) ) . onConfigurationReplaced () ; } mConfigScreenId = zobkrxsbveuregbakhna ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( zobkrxsbveuregbakhna ) ) . commit () ; } } <s> Fix remaining issues with state transition while doing compass calibration
fix_before_refactoring: { mConfigScreenId = configScreenId ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( configScreenId ) ) . commit () ; }
fix_after_refactoring: { mConfigScreenId = zobkrxsbveuregbakhna ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( zobkrxsbveuregbakhna ) ) . commit () ; }
× fix_prediction_before: { if ( currentFragment instanceof org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) { ( ( org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) ( currentFragment ) ) . onConfigurationReplaced () ; } mConfigScreenId = configScreenId ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( configScreenId ) ) . commit () ; }
× fix_prediction_after: { if ( currentFragment instanceof org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) { ( ( org.droidplanner.android.activities.ConfigurationActivity.ConfigurationScreen ) ( currentFragment ) ) . onConfigurationReplaced () ; } mConfigScreenId = zobkrxsbveuregbakhna ; getSupportFragmentManager () . beginTransaction () . replace ( R.id.configuration_screen , getFragmentForId ( zobkrxsbveuregbakhna ) ) . commit () ; }

line_index: 519
bug_before_refactoring: { char letter = 'a' ; int a ; final int MIN = 65 ; final int MAX = 122 ; final int STOPLINE1 = 85 ; final int STOPLINE2 = 122 ; for ( a = MIN ; a <= MAX ; a ++ ) letter = ( ( char ) ( a ) ) ; java.lang.System.out . print ( ( " " + letter ) ) ; if ( ( a == STOPLINE1 ) || ( a == STOPLINE2 ) ) java.lang.System.out . println () ; java.lang.System.out . println ( "\nEnd of application" ) ; } <s> public static void main ( java.lang.String [] args ) { char letter = 'a' ; int a ; final int MIN = 65 ; final int MAX = 122 ; final int STOPLINE1 = 85 ; final int STOPLINE2 = 122 ; for ( a = MIN ; a <= MAX ; a ++ ) letter = ( ( char ) ( a ) ) ; java.lang.System.out . print ( ( "  " + letter ) ) ; if ( ( a == STOPLINE1 ) || ( a == STOPLINE2 ) ) java.lang.System.out . println () ; java.lang.System.out . println ( "\nEnd of application" ) ; } <s> Fixed Logic errors
bug_after_refactoring: { char bajdyweolujtpcuhirzd = 'segdskditbsgqaugiqhp' ; int segdskditbsgqaugiqhp ; final int psxlbzybzqgkzbkiutet = 65 ; final int fkfaawoacteluejkdvdk = 122 ; final int xerqcfdhltrbyzjwtyle = 85 ; final int iqabdtooxjyoxjgtlnsn = 122 ; for ( segdskditbsgqaugiqhp = psxlbzybzqgkzbkiutet ; segdskditbsgqaugiqhp <= fkfaawoacteluejkdvdk ; segdskditbsgqaugiqhp ++ ) bajdyweolujtpcuhirzd = ( ( char ) ( segdskditbsgqaugiqhp ) ) ; java.lang.System.out . print ( ( " " + bajdyweolujtpcuhirzd ) ) ; if ( ( segdskditbsgqaugiqhp == xerqcfdhltrbyzjwtyle ) || ( segdskditbsgqaugiqhp == iqabdtooxjyoxjgtlnsn ) ) java.lang.System.out . println () ; java.lang.System.out . println ( "\nEnd of application" ) ; } <s> public static void main ( java.lang.String [] args ) { char letter = 'a' ; int a ; final int MIN = 65 ; final int MAX = 122 ; final int STOPLINE1 = 85 ; final int STOPLINE2 = 122 ; for ( a = MIN ; a <= MAX ; a ++ ) letter = ( ( char ) ( a ) ) ; java.lang.System.out . print ( ( "  " + letter ) ) ; if ( ( a == STOPLINE1 ) || ( a == STOPLINE2 ) ) java.lang.System.out . println () ; java.lang.System.out . println ( "\nEnd of application" ) ; } <s> Fixed Logic errors
fix_before_refactoring: { char letter ; int a ; final int MIN = 65 ; final int MAX = 122 ; final int STOPLINE1 = 85 ; final int STOPLINE2 = 122 ; for ( a = MIN ; a <= MAX ; a ++ ) { letter = ( ( char ) ( a ) ) ; java.lang.System.out . print ( ( "  " + letter ) ) ; if ( ( a == STOPLINE1 ) || ( a == STOPLINE2 ) ) java.lang.System.out . println () ; } java.lang.System.out . println ( "\nEnd of application" ) ; }
fix_after_refactoring: { char bajdyweolujtpcuhirzd ; int segdskditbsgqaugiqhp ; final int psxlbzybzqgkzbkiutet = 65 ; final int fkfaawoacteluejkdvdk = 122 ; final int xerqcfdhltrbyzjwtyle = 85 ; final int iqabdtooxjyoxjgtlnsn = 122 ; for ( segdskditbsgqaugiqhp = psxlbzybzqgkzbkiutet ; segdskditbsgqaugiqhp <= fkfaawoacteluejkdvdk ; segdskditbsgqaugiqhp ++ ) { bajdyweolujtpcuhirzd = ( ( char ) ( segdskditbsgqaugiqhp ) ) ; java.lang.System.out . print ( ( "  " + bajdyweolujtpcuhirzd ) ) ; if ( ( segdskditbsgqaugiqhp == xerqcfdhltrbyzjwtyle ) || ( segdskditbsgqaugiqhp == iqabdtooxjyoxjgtlnsn ) ) java.lang.System.out . println () ; } java.lang.System.out . println ( "\nEnd of application" ) ; }
× fix_prediction_before: { char letter = 'a' ; int a ; final int MIN = 65 ; final int MAX = 122 ; final int STOPLINE1 = 85 ; final int STOPLINE2 = 122 ; for ( a = MIN ; a <= MAX ; a ++ ) { letter = ( ( char ) ( a ) ) ; java.lang.System.out . print ( ( "  " + letter ) ) ; if ( ( a == STOPLINE1 ) || ( a == STOPLINE2 ) ) java.lang.System.out . println () ; } java.lang.System.out . println ( "\nEnd of application" ) ; }
× fix_prediction_after: { char bajdyweolujtpcuhirzd = 'segdskditbsgqaugiqhp' ; int segdskditbsgqaugiqhp ; final int psxlbzybzqgkzbkiutet = 65 ; final int fkfaawoacteluejkdvdk = 122 ; final int xerqcfdhltrbyzjwtyle = 85 ; final int iqabdtooxjyoxjgtlnsn = 122 ; for ( segdskditbsgqaugiqhp = psxlbzybzqgkzbkiutet ; segdskditbsgqaugiqhp <= fkfaawoacteluejkdvdk ; segdskditbsgqaugiqhp ++ ) bajdyweolujtpcuhirzd = ( ( char ) ( segdskditbsgqaugiqhp ) ) ; java.lang.System.out . print ( ( " " + bajdyweolujtpcuhirzd ) ) ; }

line_index: 520
bug_before_refactoring: @ java.lang.Override public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] cbuf = new char [ 1024 ] ; int length = - 1 ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( length = reader . read ( cbuf ) ) != ( - 1 ) ) { strBuffer . append ( cbuf , 0 , length ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; } <s> @ java.lang.Override public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] cbuf = new char [ 1024 ] ; int length = - 1 ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( length = reader . read ( cbuf ) ) != ( - 1 ) ) { strBuffer . append ( cbuf , 0 , length ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; } <s> Fixing code analysis warnings and errors.
bug_after_refactoring: @ java.lang.Override public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] dfrwgftruzqgbnkbvpaa = new char [ 1024 ] ; int beznrdjwfroenpnngqpc = - 1 ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( beznrdjwfroenpnngqpc = reader . read ( dfrwgftruzqgbnkbvpaa ) ) != ( - 1 ) ) { strBuffer . append ( dfrwgftruzqgbnkbvpaa , 0 , beznrdjwfroenpnngqpc ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; } <s> @ java.lang.Override public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] dfrwgftruzqgbnkbvpaa = new char [ 1024 ] ; int beznrdjwfroenpnngqpc = - 1 ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( beznrdjwfroenpnngqpc = reader . read ( dfrwgftruzqgbnkbvpaa ) ) != ( - 1 ) ) { strBuffer . append ( dfrwgftruzqgbnkbvpaa , 0 , beznrdjwfroenpnngqpc ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; } <s> Fixing code analysis warnings and errors.
fix_before_refactoring: public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] cbuf = new char [ 1024 ] ; int length ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( length = reader . read ( cbuf ) ) != ( - 1 ) ) { strBuffer . append ( cbuf , 0 , length ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; }
fix_after_refactoring: public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] dfrwgftruzqgbnkbvpaa = new char [ 1024 ] ; int beznrdjwfroenpnngqpc ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( beznrdjwfroenpnngqpc = reader . read ( dfrwgftruzqgbnkbvpaa ) ) != ( - 1 ) ) { strBuffer . append ( dfrwgftruzqgbnkbvpaa , 0 , beznrdjwfroenpnngqpc ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; }
× fix_prediction_before: @ java.lang.Override public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] cbuf = new char [ 1024 ] ; int length = - 1 ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( length = reader . read ( cbuf ) ) != ( - 1 ) ) { strBuffer . append ( cbuf , 0 , length ) ; } return parse ( strSource ) ; }
× fix_prediction_after: @ java.lang.Override public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] dfrwgftruzqgbnkbvpaa = new char [ 1024 ] ; int beznrdjwfroenpnngqpc = - 1 ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( beznrdjwfrobnkbvpaa ) == ( - 1 ) ) { strBuffer . append ( dfrwgftruzqgbnkbvpaa , 0 , beznrdjwfroenpnngqpc ) ; } strSource = strBuffer . toString () ; return parse ( strSource ) ; }

line_index: 521
bug_before_refactoring: configChanged = ( this . propsHashCode ) != currentConfigHash <s> @ java.lang.Override public boolean configChanged () { int currentConfigHash = this . configProps . hashCode () ; boolean configChanged = ( this . propsHashCode ) != currentConfigHash ; if ( configChanged && ( net.jawr.web.resource.bundle.factory.PropsConfigPropertiesSource.LOGGER . isDebugEnabled () ) ) net.jawr.web.resource.bundle.factory.PropsConfigPropertiesSource.LOGGER . debug ( "Changes in configuration properties file detected." ) ; this . propsHashCode = currentConfigHash ; return configChanged ; } <s> Fix issues with child bundles being included instead of parent bundle because parent bundleId was being used. Ensure config change event doesn't occur on first check of configChanged. Stop listeners and watchers and create anew after config change to ensure the bundlesHandler is consistent between the resource watcher and the rebuilding of dirty bundles in JawrRequestHandler
bug_after_refactoring: ysfcbujjlxwlodsrdtco = ( this . propsHashCode ) != vmayeoayxcenvosdasau <s> @ java.lang.Override public boolean configChanged () { int currentConfigHash = this . configProps . hashCode () ; boolean ysfcbujjlxwlodsrdtco = ( this . propsHashCode ) != vmayeoayxcenvosdasau ; if ( configChanged && ( net.jawr.web.resource.bundle.factory.PropsConfigPropertiesSource.LOGGER . isDebugEnabled () ) ) net.jawr.web.resource.bundle.factory.PropsConfigPropertiesSource.LOGGER . debug ( "Changes in configuration properties file detected." ) ; this . propsHashCode = currentConfigHash ; return configChanged ; } <s> Fix issues with child bundles being included instead of parent bundle because parent bundleId was being used. Ensure config change event doesn't occur on first check of configChanged. Stop listeners and watchers and create anew after config change to ensure the bundlesHandler is consistent between the resource watcher and the rebuilding of dirty bundles in JawrRequestHandler
fix_before_refactoring: configChanged = ( ( propsHashCode ) != null ) && ( ( this . propsHashCode ) != currentConfigHash )
fix_after_refactoring: ysfcbujjlxwlodsrdtco = ( ( propsHashCode ) != null ) && ( ( this . propsHashCode ) != vmayeoayxcenvosdasau )
× fix_prediction_before: configChanged = ! ( this . propsHashCode . equals ( currentConfigHash ) )
× fix_prediction_after: ysfcbujjlxwlodsrdtco = ! ( this . propsHashCode . equals ( vmayeoayxcenvosdasau ) )

line_index: 522
bug_before_refactoring: { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.lang.System.out . println ( query ) ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; status = rs . next () ; } <s> private boolean isValideEmail ( java.lang.String email ) { java.sql.Statement stmt ; boolean status = false ; java.sql.Connection con = null ; try { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.lang.System.out . println ( query ) ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; status = rs . next () ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return status ; } <s> Bug Fixes and Enhancements  Disable accountt fund transfer button Throw Exception on invalid login user can not transfer funds to self
bug_after_refactoring: { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.lang.System.out . println ( query ) ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; chckowpayczyppxkolje = rs . next () ; } <s> private boolean isValideEmail ( java.lang.String email ) { java.sql.Statement stmt ; boolean status = false ; java.sql.Connection con = null ; try { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.lang.System.out . println ( query ) ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; chckowpayczyppxkolje = rs . next () ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return status ; } <s> Bug Fixes and Enhancements  Disable accountt fund transfer button Throw Exception on invalid login user can not transfer funds to self
fix_before_refactoring: { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; status = rs . next () ; }
fix_after_refactoring: { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; chckowpayczyppxkolje = rs . next () ; }
× fix_prediction_before: { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; status = rs . next () ; }
× fix_prediction_after: { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; chckowpayczyppxkolje = rs . next () ; }

line_index: 523
bug_before_refactoring: { int [] stamp = new int [ 1 ] ; V value = lock . get ( stamp ) ; return lock . compareAndSet ( expected , expected , stamp [ 0 ] , ( ( stamp [ 0 ] ) + 2 ) ) ; } <s> public boolean tryReadLockWithCondition ( V expected ) { int [] stamp = new int [ 1 ] ; V value = lock . get ( stamp ) ; return lock . compareAndSet ( expected , expected , stamp [ 0 ] , ( ( stamp [ 0 ] ) + 2 ) ) ; } <s> Bug fixes to Concurrency Optimal BST
bug_after_refactoring: { int [] ahzpwywztgbfvkrnmrsg = new int [ 1 ] ; V value = lock . get ( ahzpwywztgbfvkrnmrsg ) ; return lock . compareAndSet ( expected , expected , ahzpwywztgbfvkrnmrsg [ 0 ] , ( ( ahzpwywztgbfvkrnmrsg [ 0 ] ) + 2 ) ) ; } <s> public boolean tryReadLockWithCondition ( V expected ) { int [] ahzpwywztgbfvkrnmrsg = new int [ 1 ] ; V value = lock . get ( ahzpwywztgbfvkrnmrsg ) ; return lock . compareAndSet ( expected , expected , ahzpwywztgbfvkrnmrsg [ 0 ] , ( ( ahzpwywztgbfvkrnmrsg [ 0 ] ) + 2 ) ) ; } <s> Bug fixes to Concurrency Optimal BST
fix_before_refactoring: { int [] stamp = new int [ 1 ] ; V value ; do { value = lock . get ( stamp ) ; if ( ( expected != value ) && ( ( value == null ) || ( ! ( expected . equals ( value ) ) ) ) ) { return false ; } } while ( lock . compareAndSet ( value , value , stamp [ 0 ] , ( ( stamp [ 0 ] ) + 2 ) ) ) ; return true ; }
fix_after_refactoring: { int [] ahzpwywztgbfvkrnmrsg = new int [ 1 ] ; V value ; do { value = lock . get ( ahzpwywztgbfvkrnmrsg ) ; if ( ( expected != value ) && ( ( value == null ) || ( ! ( expected . equals ( value ) ) ) ) ) { return false ; } } while ( lock . compareAndSet ( value , value , ahzpwywztgbfvkrnmrsg [ 0 ] , ( ( ahzpwywztgbfvkrnmrsg [ 0 ] ) + 2 ) ) ) ; return true ; }
× fix_prediction_before: { int [] stamp = new int [ 1 ] ; V value = lock . get ( stamp ) ; V value = lock . get ( stamp ) ; return lock . compareAndSet ( expected , expected , stamp [ 0 ] , ( ( stamp [ 0 ] ) + 2 ) ) ; }
× fix_prediction_after: { int [] ahzpwywztgbfvkrnmrsg = new int [ 1 ] ; V value = lock . get ( ahzpwywztgbfvkrnmrsg ) ; if ( expected == null ) return false ; return lock . compareAndSet ( expected , expected , ahzpwywztgbfvkrnmrsg [ 0 ] , ( ( ahzpwywztgbfvkrnmrsg [ 0 ] ) + 2 ) ) ; }

line_index: 525
bug_before_refactoring: { int hash = 7 ; hash = ( 53 * hash ) + ( java.util.Objects . hashCode ( this . topLeft ) ) ; hash = ( 53 * hash ) + ( java.util.Objects . hashCode ( this . bottomRight ) ) ; return hash ; } <s> @ java.lang.Override public int hashCode () { int hash = 7 ; hash = ( 53 * hash ) + ( java.util.Objects . hashCode ( this . topLeft ) ) ; hash = ( 53 * hash ) + ( java.util.Objects . hashCode ( this . bottomRight ) ) ; return hash ; } <s> Fix compatibility errors with JDK 6.  LatLngBounds and Bounds model used java.util.Objects class  which isn't part of JDK 6. Downgraded servlet-api version to 2.5  because 3.1.0 requires at least JDK 7.
bug_after_refactoring: { int aguwtllaacleohksqxge = 7 ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( java.util.Objects . hashCode ( this . topLeft ) ) ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( java.util.Objects . hashCode ( this . bottomRight ) ) ; return aguwtllaacleohksqxge ; } <s> @ java.lang.Override public int hashCode () { int aguwtllaacleohksqxge = 7 ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( java.util.Objects . hashCode ( this . topLeft ) ) ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( java.util.Objects . hashCode ( this . bottomRight ) ) ; return aguwtllaacleohksqxge ; } <s> Fix compatibility errors with JDK 6.  LatLngBounds and Bounds model used java.util.Objects class  which isn't part of JDK 6. Downgraded servlet-api version to 2.5  because 3.1.0 requires at least JDK 7.
fix_before_refactoring: { int hash = 7 ; hash = ( 53 * hash ) + ( this . topLeft . hashCode () ) ; hash = ( 53 * hash ) + ( this . bottomRight . hashCode () ) ; return hash ; }
fix_after_refactoring: { int aguwtllaacleohksqxge = 7 ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( this . topLeft . hashCode () ) ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( this . bottomRight . hashCode () ) ; return aguwtllaacleohksqxge ; }
× fix_prediction_before: { int hash = 7 ; hash = ( 53 * hash ) + ( java.util.Objects . hashCode ( this . topLeft ) ) ; return ( ( 53 * hash ) + ( java.util.Objects . hashCode ( this . bottomRight ) ) ) > 0 ; }
× fix_prediction_after: { int aguwtllaacleohksqxge = 7 ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( java.util.Objects . hashCode ( this . topLeft ) ) ; aguwtllaacleohksqxge = ( 53 * aguwtllaacleohksqxge ) + ( java.util.Objects . hashCode ( this . bottomRight ) ) ; return aguwtllaacleohksqxge ; }

line_index: 526
bug_before_refactoring: { int NextTestItemL = 0 ; boolean NeedTest = false ; do { NextTestItemL = CurrentTestItem + 1 ; not_end_test_all = ( NextTestItem ) != ( end_test_item ) ; if ( not_end_test_all ) { NeedTest = fec_test_items_order [ NextTestItem ] . test ; } else { return - 1 ; } } while ( ! NeedTest ) ; return NextTestItemL ; } <s> private int find_next_test_item ( int CurrentTestItem ) { int NextTestItemL = 0 ; boolean NeedTest = false ; do { NextTestItemL = CurrentTestItem + 1 ; not_end_test_all = ( NextTestItem ) != ( end_test_item ) ; if ( not_end_test_all ) { NeedTest = fec_test_items_order [ NextTestItem ] . test ; } else { return - 1 ; } } while ( ! NeedTest ) ; return NextTestItemL ; } <s> 1. Fixed test all issue.
bug_after_refactoring: { int hzdsrwvfdbrlosqyjqrw = 0 ; boolean vktdxcesichmuffrfrkx = false ; do { hzdsrwvfdbrlosqyjqrw = CurrentTestItem + 1 ; not_end_test_all = ( NextTestItem ) != ( end_test_item ) ; if ( not_end_test_all ) { vktdxcesichmuffrfrkx = fec_test_items_order [ NextTestItem ] . test ; } else { return - 1 ; } } while ( ! vktdxcesichmuffrfrkx ) ; return hzdsrwvfdbrlosqyjqrw ; } <s> private int find_next_test_item ( int CurrentTestItem ) { int hzdsrwvfdbrlosqyjqrw = 0 ; boolean vktdxcesichmuffrfrkx = false ; do { hzdsrwvfdbrlosqyjqrw = CurrentTestItem + 1 ; not_end_test_all = ( NextTestItem ) != ( end_test_item ) ; if ( not_end_test_all ) { vktdxcesichmuffrfrkx = fec_test_items_order [ NextTestItem ] . test ; } else { return - 1 ; } } while ( ! vktdxcesichmuffrfrkx ) ; return hzdsrwvfdbrlosqyjqrw ; } <s> 1. Fixed test all issue.
fix_before_refactoring: { int NextTestItemL = 0 ; boolean NeedTest = false ; NextTestItemL = CurrentTestItem + 1 ; do { not_end_test_all = NextTestItemL != ( end_test_item ) ; if ( not_end_test_all ) { NeedTest = fec_test_items_order [ NextTestItemL ] . test ; if ( NeedTest ) { break; } else { NextTestItemL ++ ; } } else { return - 1 ; } } while ( ! NeedTest ) ; return NextTestItemL ; }
fix_after_refactoring: { int hzdsrwvfdbrlosqyjqrw = 0 ; boolean vktdxcesichmuffrfrkx = false ; hzdsrwvfdbrlosqyjqrw = CurrentTestItem + 1 ; do { not_end_test_all = hzdsrwvfdbrlosqyjqrw != ( end_test_item ) ; if ( not_end_test_all ) { vktdxcesichmuffrfrkx = fec_test_items_order [ hzdsrwvfdbrlosqyjqrw ] . test ; if ( vktdxcesichmuffrfrkx ) { break; } else { hzdsrwvfdbrlosqyjqrw ++ ; } } else { return - 1 ; } } while ( ! vktdxcesichmuffrfrkx ) ; return hzdsrwvfdbrlosqyjqrw ; }
× fix_prediction_before: { int NextTestItemL = 0 ; boolean NeedTest = false ; do { nextTestItemL = CurrentTestItem + 1 ; not_end_test_all = ( nextTestItem ) != ( end_test_item ) ; if ( not_end_test_all ) { NeedTest = fec_test_items_order [ NextTestItem ] . test ; } else { return - 1 ; } } while ( ! NeedTest ) ; return NextTestItemL ; }
× fix_prediction_after: { int hzdsrwvfdbrlosqyjqrw = 0 ; boolean vktdxcesichmuffrfrkx = false ; while ( ! ( vktdxcesichmuffrfrkx ) ) { hzdsrwvfdbrlosqyjqrw = CurrentTestItem + 1 ; not_end_test_all = ( nextTestItem ) != ( end_test_item ) ; if ( not_end_test_all ) { vktdxcesichmuffrfrkx = fec_test_items_order [ NextTestItem ] . test ; } else { return - 1 ; } } return hzdsrwvfdbrlosqyjqrw ; }

line_index: 527
bug_before_refactoring: ( int ) ( ( key . get () ) / intervalLength ) <s> @ java.lang.Override public int getPartition ( org.apache.hadoop.io.LongWritable key , org.apache.hadoop.io.LongWritable value , int numberOfPartition ) { try { hbase.query1.HBaseRowKeyPartitioner . fillFirstAndLastID () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } long intervalLength = ( ( hbase.query1.HBaseRowKeyPartitioner.lastArticleId ) - ( hbase.query1.HBaseRowKeyPartitioner.firstArticleId ) ) / numberOfPartition ; return ( ( int ) ( ( key . get () ) / intervalLength ) ) ; } <s> Tiny bug fix in partitioners
bug_after_refactoring: ( int ) ( ( key . get () ) / tzywvnoowtccqrnhhbzv ) <s> @ java.lang.Override public int getPartition ( org.apache.hadoop.io.LongWritable key , org.apache.hadoop.io.LongWritable value , int numberOfPartition ) { try { hbase.query1.HBaseRowKeyPartitioner . fillFirstAndLastID () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } long intervalLength = ( ( hbase.query1.HBaseRowKeyPartitioner.lastArticleId ) - ( hbase.query1.HBaseRowKeyPartitioner.firstArticleId ) ) / numberOfPartition ; return ( ( int ) ( ( key . get () ) / tzywvnoowtccqrnhhbzv ) ) ; } <s> Tiny bug fix in partitioners
fix_before_refactoring: ( int ) ( ( ( key . get () ) - ( hbase.query1.HBaseRowKeyPartitioner.firstArticleId ) ) / intervalLength )
fix_after_refactoring: ( int ) ( ( ( key . get () ) - ( hbase.query1.HBaseRowKeyPartitioner.firstArticleId ) ) / tzywvnoowtccqrnhhbzv )
× fix_prediction_before: ( int ) ( java.lang.Math . round ( ( ( key . get () ) / intervalLength ) ) )
× fix_prediction_after: ( int ) ( java.lang.Math . round ( ( key . get () ) / tzywvnoowtccqrnhhbzv ) )

line_index: 528
bug_before_refactoring: protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; } <s> protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; } <s> fix bug for test salary
bug_after_refactoring: protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; } <s> protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; } <s> fix bug for test salary
fix_before_refactoring: public java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; }
fix_after_refactoring: public java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; }
× fix_prediction_before: protected java.lang.Object invoke ( java.lang.Object arg ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int arg1 = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int arg2 = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int arg3 = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( arg1 , arg2 , arg3 ) ; }
× fix_prediction_after: protected java.lang.Object invoke ( java.lang.Object args ) throws java.lang.Exception { java.lang.String [] argdata = ( ( java.lang.String [] ) ( args ) ) ; int hrhhurwncsgvlcdfntaf = java.lang.Integer . valueOf ( argdata [ 0 ] ) ; int nsefnizwkkakqxhhiavk = java.lang.Integer . valueOf ( argdata [ 1 ] ) ; int jrnxwckipwxhcnyakxui = java.lang.Integer . valueOf ( argdata [ 2 ] ) ; return source.CalculateSalary . calculateSalary ( hrhhhhurwncsgvlcdfntaf , nsefnizwkkakqxhhiavk , jrnxwckipwxhcnyakxui ) ; }

line_index: 529
bug_before_refactoring: { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; positionUs = ( chunkSource . isLive () ) ? 0 : positionUs ; long currentPositionUs = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( currentPositionUs == positionUs ) { return; } seekToInternal ( positionUs ) ; } <s> @ java.lang.Override public void seekToUs ( long positionUs ) { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; positionUs = ( chunkSource . isLive () ) ? 0 : positionUs ; long currentPositionUs = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( currentPositionUs == positionUs ) { return; } seekToInternal ( positionUs ) ; } <s> fix merge problem
bug_after_refactoring: { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; positionUs = ( chunkSource . isLive () ) ? 0 : positionUs ; long xrzflmmtlgiitrzrohlf = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( xrzflmmtlgiitrzrohlf == positionUs ) { return; } seekToInternal ( positionUs ) ; } <s> @ java.lang.Override public void seekToUs ( long positionUs ) { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; positionUs = ( chunkSource . isLive () ) ? 0 : positionUs ; long xrzflmmtlgiitrzrohlf = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( xrzflmmtlgiitrzrohlf == positionUs ) { return; } seekToInternal ( positionUs ) ; } <s> fix merge problem
fix_before_refactoring: { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; long currentPositionUs = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( currentPositionUs == positionUs ) { return; } seekToInternal ( positionUs ) ; }
fix_after_refactoring: { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; long xrzflmmtlgiitrzrohlf = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( xrzflmmtlgiitrzrohlf == positionUs ) { return; } seekToInternal ( positionUs ) ; }
× fix_prediction_before: { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; positionUs = ( chunkSource . isLive () ) ? 0 : positionUs ; long currentPositionUs = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( currentPositionUs == positionUs ) { return; } seekToInternal ( positionUs ) ; }
× fix_prediction_after: { com.google.android.exoplayer.util.Assertions . checkState ( prepared ) ; com.google.android.exoplayer.util.Assertions . checkState ( ( ( enabledTrackCount ) > 0 ) ) ; positionUs = ( chunkSource . isLive () ) ? 0 : positionUs ; long xrzflmmtlgiitrzrohlf = ( isPendingReset () ) ? pendingResetPositionUs : downstreamPositionUs ; downstreamPositionUs = positionUs ; lastSeekPositionUs = positionUs ; if ( xrzflmmtlgiitrzrohlf == positionUs ) { return; } seekToInternal ( positionUs ) ; }

line_index: 530
bug_before_refactoring: protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; } <s> protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; } <s> Clear PMD issues  and fix members visibility.
bug_after_refactoring: protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; } <s> protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; } <s> Clear PMD issues  and fix members visibility.
fix_before_refactoring: private android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; }
fix_after_refactoring: private android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; }
× fix_prediction_before: protected android.graphics.Bitmap setBitmapSize ( float iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float s = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * s ) ) , ( ( int ) ( ( bitmap . getHeight () ) * s ) ) , true ) ; return bitmap ; }
× fix_prediction_after: protected android.graphics.Bitmap setBitmapSize ( int iconId , int w ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getContext () . getResources () , iconId ) ; float jmkizoybmvfggzdcveak = ( w * 1.0F ) / ( bitmap . getWidth () ) ; bitmap = android.graphics.Bitmap . createScaledBitmap ( bitmap , ( ( int ) ( ( bitmap . getWidth () ) * jmkizoybmvfggzdcveak ) ) , ( ( int ) ( ( bitmap . getHeight () ) * jmkizoybmvfggzdcveak ) ) , true ) ; return bitmap ; }

line_index: 531
bug_before_refactoring: for ( final boolean checkedItem : checkedItems ) if ( checkedItem ) this . templateModel . addExcludeCol ( ( i ++ ) ) ; <s> private void excludeCols ( final boolean [] checkedItems ) { int i = 1 ; assert null != checkedItems ; assert null != ( this . templateModel ) ; for ( final boolean checkedItem : checkedItems ) if ( checkedItem ) this . templateModel . addExcludeCol ( ( i ++ ) ) ; } <s> ExcludeAlertDialog: Changed superclass from InternalItemsAlertDialog to AlertDialog. ExcludeAlertDialog: Fixed bugs in excludeRows() and excludeCols().
bug_after_refactoring: for ( final boolean checkedItem : checkedItems ) if ( checkedItem ) this . templateModel . addExcludeCol ( ( orajkjtltcqpvreidfrq ++ ) ) ; <s> private void excludeCols ( final boolean [] checkedItems ) { int i = 1 ; assert null != checkedItems ; assert null != ( this . templateModel ) ; for ( final boolean checkedItem : checkedItems ) if ( checkedItem ) this . templateModel . addExcludeCol ( ( orajkjtltcqpvreidfrq ++ ) ) ; } <s> ExcludeAlertDialog: Changed superclass from InternalItemsAlertDialog to AlertDialog. ExcludeAlertDialog: Fixed bugs in excludeRows() and excludeCols().
fix_before_refactoring: for ( final boolean checkedItem : checkedItems ) { if ( checkedItem ) this . templateModel . addExcludeCol ( i ) ; i ++ ; }
fix_after_refactoring: for ( final boolean checkedItem : checkedItems ) { if ( checkedItem ) this . templateModel . addExcludeCol ( orajkjtltcqpvreidfrq ) ; orajkjtltcqpvreidfrq ++ ; }
× fix_prediction_before: for ( final boolean checkedItem : checkedItems ) if ( checkedItem ) this . templateModel . addExcludeCol ( ( i ++ ) ) ;
× fix_prediction_after: for ( final boolean checkedItem : checkedItems ) if ( checkedItem ) this . templateModel . addExcludeCol ( ( orajkjtltcqpvreidfrq ++ ) ) ;

line_index: 532
bug_before_refactoring: { boolean thrown = false ; java.lang.String result = null ; try { result = this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { thrown = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! thrown ) ) ; org.assertj.core.api.Assertions . assertThat ( result . equals ( "def" ) ) ; } <s> @ org.junit.Test public void testFound ( ) throws java.lang.Exception { boolean thrown = false ; java.lang.String result = null ; try { result = this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { thrown = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! thrown ) ) ; org.assertj.core.api.Assertions . assertThat ( result . equals ( "def" ) ) ; } <s> after fixing the bug
bug_after_refactoring: { boolean eifmoaqtpmnmtwoidxih = false ; java.lang.String result = null ; try { result = this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { eifmoaqtpmnmtwoidxih = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! eifmoaqtpmnmtwoidxih ) ) ; org.assertj.core.api.Assertions . assertThat ( result . equals ( "def" ) ) ; } <s> @ org.junit.Test public void testFound ( ) throws java.lang.Exception { boolean eifmoaqtpmnmtwoidxih = false ; java.lang.String result = null ; try { result = this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { eifmoaqtpmnmtwoidxih = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! eifmoaqtpmnmtwoidxih ) ) ; org.assertj.core.api.Assertions . assertThat ( result . equals ( "def" ) ) ; } <s> after fixing the bug
fix_before_refactoring: { boolean thrown = false ; java.lang.String result = null ; try { this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { thrown = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! thrown ) ) ; }
fix_after_refactoring: { boolean eifmoaqtpmnmtwoidxih = false ; java.lang.String result = null ; try { this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { eifmoaqtpmnmtwoidxih = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! eifmoaqtpmnmtwoidxih ) ) ; }
× fix_prediction_before: { boolean thrown = false ; java.lang.String result = null ; try { result = this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { thrown = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! thrown ) ) ; org.assertj.core.api.Assertions . assertThat ( result . equals ( "def" ) ) ; }
× fix_prediction_after: { boolean eifmoaqtpmnmtwoidxih = false ; java.lang.String result = null ; try { result = this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { eifmoaqtpmnmtwoidxih = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! eifmoaqtpmnmtwoidxih ) ) ; org.assertj.core.api.Assertions . assertThat ( result . equals ( "def" ) ) ; }

line_index: 533
bug_before_refactoring: { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; } <s> public com.epam.indigo.IndigoObject exactMatch ( com.epam.indigo.IndigoObject obj1 , com.epam.indigo.IndigoObject obj2 , java.lang.String flags ) { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; } <s> api: attempt to fix setSessionId/operation issue
bug_after_refactoring: { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; } <s> public com.epam.indigo.IndigoObject exactMatch ( com.epam.indigo.IndigoObject obj1 , com.epam.indigo.IndigoObject obj2 , java.lang.String flags ) { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; } <s> api: attempt to fix setSessionId/operation issue
fix_before_refactoring: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; setSessionID () ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; }
fix_after_refactoring: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; setSessionID () ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; }
× fix_prediction_before: { if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int match = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( match == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , match , parent ) ; }
× fix_prediction_after: { setSessionID () ; if ( flags == null ) flags = "" ; com.epam.indigo.IndigoObject [] parent = new com.epam.indigo.IndigoObject [] { obj1 , obj2 } ; int efgwdkkqqqfxdfdamiye = com.epam.indigo.Indigo . checkResult ( this , parent , com.epam.indigo.Indigo._lib . indigoExactMatch ( obj1.self , obj2.self , flags ) ) ; if ( efgwdkkqqqfxdfdamiye == 0 ) return null ; return new com.epam.indigo.IndigoObject ( this , efgwdkkqqqfxdfdamiye , parent ) ; }

line_index: 534
bug_before_refactoring: { super . onScrollStateChanged ( recyclerView , newState ) ; int initialItemCount = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int totalItemCount = mGridLayoutManager . getItemCount () ; int lastVisisbleItemPosition = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; mInfiniteScrollListener . loadMoreData ( initialItemCount , totalItemCount , lastVisisbleItemPosition ) ; } <s> @ java.lang.Override public void onScrollStateChanged ( android.support.v7.widget.RecyclerView recyclerView , int newState ) { super . onScrollStateChanged ( recyclerView , newState ) ; int initialItemCount = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int totalItemCount = mGridLayoutManager . getItemCount () ; int lastVisisbleItemPosition = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; mInfiniteScrollListener . loadMoreData ( initialItemCount , totalItemCount , lastVisisbleItemPosition ) ; } <s> Infinit scroll bug fix
bug_after_refactoring: { super . onScrollStateChanged ( recyclerView , newState ) ; int xzaqmgbzcxadrqlnrewe = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int peahehnkwchajgsnqhoy = mGridLayoutManager . getItemCount () ; int pxckmlabwxnjzkyuimfm = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; mInfiniteScrollListener . loadMoreData ( xzaqmgbzcxadrqlnrewe , peahehnkwchajgsnqhoy , pxckmlabwxnjzkyuimfm ) ; } <s> @ java.lang.Override public void onScrollStateChanged ( android.support.v7.widget.RecyclerView recyclerView , int newState ) { super . onScrollStateChanged ( recyclerView , newState ) ; int xzaqmgbzcxadrqlnrewe = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int peahehnkwchajgsnqhoy = mGridLayoutManager . getItemCount () ; int pxckmlabwxnjzkyuimfm = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; mInfiniteScrollListener . loadMoreData ( xzaqmgbzcxadrqlnrewe , peahehnkwchajgsnqhoy , pxckmlabwxnjzkyuimfm ) ; } <s> Infinit scroll bug fix
fix_before_refactoring: { super . onScrollStateChanged ( recyclerView , newState ) ; int initialItemCount = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int totalItemCount = mGridLayoutManager . getItemCount () ; int lastVisisbleItemPosition = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; if ( ( ( totalItemCount - 1 ) == lastVisisbleItemPosition ) && ( initialItemCount > 0 ) ) { mInfiniteScrollListener . loadMoreData () ; } }
fix_after_refactoring: { super . onScrollStateChanged ( recyclerView , newState ) ; int xzaqmgbzcxadrqlnrewe = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int peahehnkwchajgsnqhoy = mGridLayoutManager . getItemCount () ; int pxckmlabwxnjzkyuimfm = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; if ( ( ( peahehnkwchajgsnqhoy - 1 ) == pxckmlabwxnjzkyuimfm ) && ( xzaqmgbzcxadrqlnrewe > 0 ) ) { mInfiniteScrollListener . loadMoreData () ; } }
× fix_prediction_before: { super . onScrollStateChanged ( recyclerView , newState ) ; int initialItemCount = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int totalItemCount = mGridLayoutManager . getItemCount () ; int lastVisisbleItemPosition = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; if ( ( mInfiniteScrollListener ) != null ) { mInfiniteScrollListener . loadMoreData ( initialItemCount , totalItemCount , lastVisisbleItemPosition ) ; } }
× fix_prediction_after: { super . onScrollStateChanged ( recyclerView , newState ) ; int xzaqmgbzcxadrqlnrewe = mGridLayoutManager . findFirstCompletelyVisibleItemPosition () ; int peahehnkwchajgsnqhoy = mGridLayoutManager . getItemCount () ; int pxckmlabwxnjzkyuimfm = mGridLayoutManager . findLastCompletelyVisibleItemPosition () ; mInfiniteScrollListener . loadMoreData ( xzaqmgbzcxadrqlnrewe , peahehnkwchajgsnqhoy , pxckmlabwxnjzkyuimfm ) ; }

line_index: 535
bug_before_refactoring: { if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; int x = e . getX () ; int y = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , x , y ) ) { target . add ( go ) ; go . selected () ; } } repaint () ; } } <s> @ java.lang.Override public void mouseReleased ( java.awt.event.MouseEvent e ) { if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; int x = e . getX () ; int y = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , x , y ) ) { target . add ( go ) ; go . selected () ; } } repaint () ; } } <s> fixed some bug
bug_after_refactoring: { if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; int ikimprihagcsthpuutxf = e . getX () ; int vamriiaegwywuydwrduf = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , ikimprihagcsthpuutxf , vamriiaegwywuydwrduf ) ) { target . add ( go ) ; go . selected () ; } } repaint () ; } } <s> @ java.lang.Override public void mouseReleased ( java.awt.event.MouseEvent e ) { if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; int ikimprihagcsthpuutxf = e . getX () ; int vamriiaegwywuydwrduf = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , ikimprihagcsthpuutxf , vamriiaegwywuydwrduf ) ) { target . add ( go ) ; go . selected () ; } } repaint () ; } } <s> fixed some bug
fix_before_refactoring: { int x ; int y ; if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; x = e . getX () ; y = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , x , y ) ) { target . add ( go ) ; go . selected () ; } } repaint () ; } }
fix_after_refactoring: { int ikimprihagcsthpuutxf ; int vamriiaegwywuydwrduf ; if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; ikimprihagcsthpuutxf = e . getX () ; vamriiaegwywuydwrduf = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , ikimprihagcsthpuutxf , vamriiaegwywuydwrduf ) ) { target . add ( go ) ; go . selected () ; } } repaint () ; } }
× fix_prediction_before: { if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; int x = e . getX () ; int y = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , x , y ) ) { target . add ( go ) ; go . selected () ; } } } repaint () ; }
× fix_prediction_after: { if ( ( drag ) && ( ! ( move ) ) ) { deselectAll () ; target . clear () ; int ikimprihagcsthpuutxf = e . getX () ; int vamriiaegwywuydwrduf = e . getY () ; for ( main.GObject go : gObjects ) { if ( go . covered ( eX , eY , ikimprihagcsthpuutxf , vamriiaegwywuydwrduf ) ) { target . add ( go ) ; go . selected () ; } } } repaint () ; }

line_index: 536
bug_before_refactoring: Hex word = memory [ i ] ; <s> private Hex getWord ( Hex index ) { int i = index . toInt () ; if ( ( i > ( ( Simpletron.MEMORY_SIZE ) - 1 ) ) || ( i < 0 ) ) fatalError ( "*** index out of bounds ***" ) ; Hex word = memory [ i ] ; if ( ( ( word . compareTo ( Simpletron.MAX_WORD ) ) > 0 ) || ( ( word . compareTo ( Simpletron.MIN_WORD ) ) < 0 ) ) { fatalError ( "*** overflow occured ***" ) ; } return word ; } <s> fixed bugs with shallow copying of variable resulting in errors.
bug_after_refactoring: Hex word = memory [ luvfyemuywzkmdgesvvi ] ; <s> private Hex getWord ( Hex index ) { int i = index . toInt () ; if ( ( i > ( ( Simpletron.MEMORY_SIZE ) - 1 ) ) || ( i < 0 ) ) fatalError ( "*** index out of bounds ***" ) ; Hex word = memory [ luvfyemuywzkmdgesvvi ] ; if ( ( ( word . compareTo ( Simpletron.MAX_WORD ) ) > 0 ) || ( ( word . compareTo ( Simpletron.MIN_WORD ) ) < 0 ) ) { fatalError ( "*** overflow occured ***" ) ; } return word ; } <s> fixed bugs with shallow copying of variable resulting in errors.
fix_before_refactoring: Hex word = new Hex ( memory [ i ] ) ;
fix_after_refactoring: Hex word = new Hex ( memory [ luvfyemuywzkmdgesvvi ] ) ;
× fix_prediction_before: Hex word = memory [ i ] ;
× fix_prediction_after: Hex word = memory [ luvfyemuywzkmdgesvvi ] ;

line_index: 537
bug_before_refactoring: index > 0 ? index : ( questionAdapter . getCount () ) - 1 <s> @ java.lang.Override public void onClick ( android.view.View view ) { switch ( view . getId () ) { case R.id.previous_button : int index = ( questionPager . getCurrentItem () ) - 1 ; questionPager . setCurrentItem ( ( index > 0 ? index : ( questionAdapter . getCount () ) - 1 ) ) ; break; case R.id.next_button : questionPager . setCurrentItem ( ( ( ( questionPager . getCurrentItem () ) + 1 ) % ( questionAdapter . getCount () ) ) ) ; break; } } <s> Bugfix TriviaActivity.java
bug_after_refactoring: uoqacpvwwcsaijzjerho > 0 ? uoqacpvwwcsaijzjerho : ( questionAdapter . getCount () ) - 1 <s> @ java.lang.Override public void onClick ( android.view.View view ) { switch ( view . getId () ) { case R.id.previous_button : int index = ( questionPager . getCurrentItem () ) - 1 ; questionPager . setCurrentItem ( ( uoqacpvwwcsaijzjerho > 0 ? uoqacpvwwcsaijzjerho : ( questionAdapter . getCount () ) - 1 ) ) ; break; case R.id.next_button : questionPager . setCurrentItem ( ( ( ( questionPager . getCurrentItem () ) + 1 ) % ( questionAdapter . getCount () ) ) ) ; break; } } <s> Bugfix TriviaActivity.java
fix_before_refactoring: index >= 0 ? index : ( questionAdapter . getCount () ) - 1
fix_after_refactoring: uoqacpvwwcsaijzjerho >= 0 ? uoqacpvwwcsaijzjerho : ( questionAdapter . getCount () ) - 1
× fix_prediction_before: index > 0 ? index : ( questionAdapter . getCount () ) - 1
× fix_prediction_after: uoqacpvwwcsaijzjerho > 0 ? uoqacpvwwcsaijzjerho : ( questionAdapter . getCount () ) - 1

line_index: 539
bug_before_refactoring: { oldSum = sum ; n += 1 ; sum += 1.0 / n ; if ( ( n % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; } } <s> public static float harmonic () { float oldSum = 0.0F ; float sum = 1.0F ; int n = 1 ; while ( oldSum < sum ) { oldSum = sum ; n += 1 ; sum += 1.0 / n ; if ( ( n % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; } } java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; return sum ; } <s> bug fixed
bug_after_refactoring: { fhfmqxotjiyrokifbcvb = kpbnpyjhczrpdaaxmkth ; fquwahklvgcjczpaiaqb += 1 ; kpbnpyjhczrpdaaxmkth += 1.0 / fquwahklvgcjczpaiaqb ; if ( ( fquwahklvgcjczpaiaqb % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "fquwahklvgcjczpaiaqb = " + fquwahklvgcjczpaiaqb ) + ", kpbnpyjhczrpdaaxmkth = " ) + kpbnpyjhczrpdaaxmkth ) ) ; } } <s> public static float harmonic () { float oldSum = 0.0F ; float sum = 1.0F ; int n = 1 ; while ( oldSum < sum ) { fhfmqxotjiyrokifbcvb = kpbnpyjhczrpdaaxmkth ; fquwahklvgcjczpaiaqb += 1 ; kpbnpyjhczrpdaaxmkth += 1.0 / fquwahklvgcjczpaiaqb ; if ( ( fquwahklvgcjczpaiaqb % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "fquwahklvgcjczpaiaqb = " + fquwahklvgcjczpaiaqb ) + ", kpbnpyjhczrpdaaxmkth = " ) + kpbnpyjhczrpdaaxmkth ) ) ; } } java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; return sum ; } <s> bug fixed
fix_before_refactoring: { oldSum = sum ; sum += 1.0F / n ; n += 1 ; if ( ( n % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; } }
fix_after_refactoring: { fhfmqxotjiyrokifbcvb = kpbnpyjhczrpdaaxmkth ; kpbnpyjhczrpdaaxmkth += 1.0F / fquwahklvgcjczpaiaqb ; fquwahklvgcjczpaiaqb += 1 ; if ( ( fquwahklvgcjczpaiaqb % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "fquwahklvgcjczpaiaqb = " + fquwahklvgcjczpaiaqb ) + ", kpbnpyjhczrpdaaxmkth = " ) + kpbnpyjhczrpdaaxmkth ) ) ; } }
× fix_prediction_before: { oldSum = sum ; n += 1 ; sum += 1.0 / n ; if ( ( n % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; } }
× fix_prediction_after: { fhfmqxotjiyrokifbcvb = kpbnpyjhczrpdaaxmkth ; fquwahklvgcjczrpdaaxmkth += 1.0 / fquwahklvgcjczpaiaqb ; if ( ( fquwahklvgcjczpaiaqb % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "fquwahklvgcjczpaiaqb = " + fquwahklvgcjczpaiaqb ) + ", kpbnpyjhczrpdaaxmkth = " ) + kpbnpyjhczrpdaaxmkth ) ) ; } }

line_index: 540
bug_before_refactoring: void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( this . includeRequestTime ) { if ( requestTime > 0 ) { final long sec = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long ms = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( sec ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , sec , ms ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } } } <s> void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( this . includeRequestTime ) { if ( requestTime > 0 ) { final long sec = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long ms = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( sec ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , sec , ms ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } } } <s> Fixes issue after code review.
bug_after_refactoring: void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( this . includeRequestTime ) { if ( requestTime > 0 ) { final long syiafzhdnjxepocwches = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long amxnsscahlzmeijpdate = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( syiafzhdnjxepocwches ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , syiafzhdnjxepocwches , amxnsscahlzmeijpdate ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } } } <s> void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( this . includeRequestTime ) { if ( requestTime > 0 ) { final long syiafzhdnjxepocwches = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long amxnsscahlzmeijpdate = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( syiafzhdnjxepocwches ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , syiafzhdnjxepocwches , amxnsscahlzmeijpdate ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } } } <s> Fixes issue after code review.
fix_before_refactoring: protected void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( ( this . includeRequestTime ) && ( requestTime > 0 ) ) { final long sec = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long ms = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( sec ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , sec , ms ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } }
fix_after_refactoring: protected void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( ( this . includeRequestTime ) && ( requestTime > 0 ) ) { final long syiafzhdnjxepocwches = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long amxnsscahlzmeijpdate = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( syiafzhdnjxepocwches ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , syiafzhdnjxepocwches , amxnsscahlzmeijpdate ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } }
× fix_prediction_before: void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( this . includeRequestTime ) { final long sec = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long ms = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( sec ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , sec , ms ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } }
× fix_prediction_after: void addRequestTime ( long requestTime , java.util.Map < java.lang.String , java.lang.Object > map ) { if ( includeRequestTime ) { final long syiafzhdnjxepocwches = java.util.concurrent.TimeUnit.MILLISECONDS . toSeconds ( requestTime ) ; final long amxnsscahlzmeijpdate = java.util.concurrent.TimeUnit.MILLISECONDS . toMillis ( ( requestTime - ( java.util.concurrent.TimeUnit.SECONDS . toMillis ( syiafzhdnjxepocwches ) ) ) ) ; java.lang.String time = java.lang.String . format ( "%01d.%03d" , syiafzhdnjxepocwches , amxnsscahlzmeijpdate ) ; if ( time != null ) { map . put ( ch.qos.logback.contrib.json.access.JsonLayout.REQUESTTIME_ATTR_NAME , time ) ; } } }

line_index: 542
bug_before_refactoring: { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float newy = v * ( ( getHeight () ) - ( h . getHeight () ) ) ; float y = ( - newy ) + ( getY () ) ; h . setPosition ( h . getX () , ( ( getY () ) + ( - y ) ) ) ; } <s> public void setValue ( float v ) { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float newy = v * ( ( getHeight () ) - ( h . getHeight () ) ) ; float y = ( - newy ) + ( getY () ) ; h . setPosition ( h . getX () , ( ( getY () ) + ( - y ) ) ) ; } <s> Fixed an issue where when you clicked outside from the handle to try to scroll up or down.
bug_after_refactoring: { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float nsmkojeyfzbhxlwmdlyx = v * ( ( getHeight () ) - ( h . getHeight () ) ) ; float ykihswfuprcdvqgbqvol = ( - nsmkojeyfzbhxlwmdlyx ) + ( getY () ) ; h . setPosition ( h . getX () , ( ( getY () ) + ( - ykihswfuprcdvqgbqvol ) ) ) ; } <s> public void setValue ( float v ) { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float nsmkojeyfzbhxlwmdlyx = v * ( ( getHeight () ) - ( h . getHeight () ) ) ; float ykihswfuprcdvqgbqvol = ( - nsmkojeyfzbhxlwmdlyx ) + ( getY () ) ; h . setPosition ( h . getX () , ( ( getY () ) + ( - ykihswfuprcdvqgbqvol ) ) ) ; } <s> Fixed an issue where when you clicked outside from the handle to try to scroll up or down.
fix_before_refactoring: { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float newy = ( getY () ) + ( v * ( ( getHeight () ) - ( h . getHeight () ) ) ) ; h . setPosition ( h . getX () , newy ) ; }
fix_after_refactoring: { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float nsmkojeyfzbhxlwmdlyx = ( getY () ) + ( v * ( ( getHeight () ) - ( h . getHeight () ) ) ) ; h . setPosition ( h . getX () , nsmkojeyfzbhxlwmdlyx ) ; }
× fix_prediction_before: { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float newy = v * ( ( getHeight () ) - ( h . getHeight () ) ) ; float y = ( - newy ) + ( getY () ) ; h . setPosition ( h . getX () , ( ( getY () ) + ( - y ) ) ) ; }
× fix_prediction_after: { if ( v < 0 ) v = 0 ; else if ( v > 1 ) v = 1 ; float ykihswfuprcdvqgbqvol = ( - nsmkojeyfzbhxlwmdlyx ) + ( getY () ) ; h . setPosition ( h . getX () , ( ( getY () ) + ( - ykihswfuprcdvqgbqvol ) ) ) ; }

line_index: 543
bug_before_refactoring: private int getDepth ( java.lang.String line ) { int depth = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { depth ++ ; } else { break; } } return depth ; } <s> private int getDepth ( java.lang.String line ) { int depth = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { depth ++ ; } else { break; } } return depth ; } <s> Made getDepth() externally accessible Fixed packaging for windows to use wildcard instead of full classpath (windows has a problem with long classpaths...)
bug_after_refactoring: private int getDepth ( java.lang.String line ) { int paajfcbqhrzcoefkyvud = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { paajfcbqhrzcoefkyvud ++ ; } else { break; } } return paajfcbqhrzcoefkyvud ; } <s> private int getDepth ( java.lang.String line ) { int paajfcbqhrzcoefkyvud = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { paajfcbqhrzcoefkyvud ++ ; } else { break; } } return paajfcbqhrzcoefkyvud ; } <s> Made getDepth() externally accessible Fixed packaging for windows to use wildcard instead of full classpath (windows has a problem with long classpaths...)
fix_before_refactoring: public static int getDepth ( java.lang.String line ) { int depth = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { depth ++ ; } else { break; } } return depth ; }
fix_after_refactoring: public static int getDepth ( java.lang.String line ) { int paajfcbqhrzcoefkyvud = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { paajfcbqhrzcoefkyvud ++ ; } else { break; } } return paajfcbqhrzcoefkyvud ; }
× fix_prediction_before: public int getDepth ( java.lang.String line ) { int depth = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { depth ++ ; } else { break; } } return depth ; }
× fix_prediction_after: public int getDepth ( java.lang.String line ) { int paajfcbqhrzcoefkyvud = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { paajfcbqhrzcoefkyvud ++ ; } else { break; } } return paajfcbqhrzcoefkyvud ; }

line_index: 544
bug_before_refactoring: new java.awt.geom.Point2D.Float ( maxVolume , 1.0F ) <s> @ java.lang.Override public void dataUpdated ( java.lang.Integer i ) { float maxVolume = java.lang.Math . min ( dataManager . getGlobalMaxVolumeValue () , 1000 ) ; transferFunction . setMaxOrdinates ( new java.awt.geom.Point2D.Float ( maxVolume , 1.0F ) ) ; float lowestDataPoint = dataManager . getGlobalLowestVolumeValue () ; transferFunction . resetColors () ; transferFunction . setColor ( new java.awt.geom.Point2D.Float ( ( ( maxVolume / ( dataManager . getGlobalMaxVolumeValue () ) ) * lowestDataPoint ) , 0.001F ) , transferFunction . getColors () . firstEntry () . getValue () ) ; } <s> fixed advanced panel bug. Shows now the correct data value
bug_after_refactoring: new java.awt.geom.Point2D.Float ( utgxeeewuvfxeyqwmsyh , 1.0F ) <s> @ java.lang.Override public void dataUpdated ( java.lang.Integer i ) { float maxVolume = java.lang.Math . min ( dataManager . getGlobalMaxVolumeValue () , 1000 ) ; transferFunction . setMaxOrdinates ( new java.awt.geom.Point2D.Float ( utgxeeewuvfxeyqwmsyh , 1.0F ) ) ; float lowestDataPoint = dataManager . getGlobalLowestVolumeValue () ; transferFunction . resetColors () ; transferFunction . setColor ( new java.awt.geom.Point2D.Float ( ( ( maxVolume / ( dataManager . getGlobalMaxVolumeValue () ) ) * lowestDataPoint ) , 0.001F ) , transferFunction . getColors () . firstEntry () . getValue () ) ; } <s> fixed advanced panel bug. Shows now the correct data value
fix_before_refactoring: new java.awt.geom.Point2D.Float ( dataManager . getGlobalMaxVolumeValue () , 1.0F )
fix_after_refactoring: new java.awt.geom.Point2D.Float ( dataManager . getGlobalMaxVolumeValue () , 1.0F )
× fix_prediction_before: new java.awt.geom.Point2D.Float ( maxVolume , 0.001F )
× fix_prediction_after: new java.awt.geom.Point2D.Float ( utgxeeewuvfxeyqwmsyh , 0.0F )

line_index: 546
bug_before_refactoring: { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean rc ; rc = this . connectBlocking () ; if ( ! rc ) { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; } <s> private void initStreamAudioToServer ( ) throws java.lang.Exception { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean rc ; rc = this . connectBlocking () ; if ( ! rc ) { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; } <s> Merge pull request #20 from mihui/master  Library upgrade and bug fixes
bug_after_refactoring: { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean avjrultiaeulogiftdfd ; avjrultiaeulogiftdfd = this . connectBlocking () ; if ( ! avjrultiaeulogiftdfd ) { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; } <s> private void initStreamAudioToServer ( ) throws java.lang.Exception { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean avjrultiaeulogiftdfd ; avjrultiaeulogiftdfd = this . connectBlocking () ; if ( ! avjrultiaeulogiftdfd ) { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; } <s> Merge pull request #20 from mihui/master  Library upgrade and bug fixes
fix_before_refactoring: { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean rc ; rc = this . connectBlocking () ; if ( rc ) { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; } else { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } }
fix_after_refactoring: { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean avjrultiaeulogiftdfd ; avjrultiaeulogiftdfd = this . connectBlocking () ; if ( avjrultiaeulogiftdfd ) { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; } else { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } }
× fix_prediction_before: { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean rc ; rc = this . connectBlocking () ; if ( ! rc ) { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connected" ) ; this . sendSpeechHeader () ; }
× fix_prediction_after: { android.util.Log . d ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connecting..." ) ; this . encoder . initEncoderWithUploader ( this ) ; if ( this . sConfig . isSSL ) this . trustServer () ; boolean avjrultiaeulogiftdfd ; avjrultiaeulogiftdfd = this . connectBlocking () ; if ( ! avjrultiaeulogiftdfd ) { android.util.Log . e ( com.ibm.watson.developer_cloud.android.speech_to_text.v1.audio.WebSocketUploader.TAG , "Connection failed!" ) ; this . uploadPrepared = false ; throw new java.lang.Exception ( "Connection failed!" ) ; } this . sendSpeechHeader () ; }

line_index: 547
bug_before_refactoring: public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { com.lmax.disruptor.RingBuffer < com.dtstack.logstash.assembly.disruptor.MapEvent > ringBuffer = disruptor . getRingBuffer () ; long sequence = ringBuffer . next () ; try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( sequence ) ; if ( ( event != null ) && ( ( event . size () ) > 0 ) ) mapEvent . setEvent ( event ) ; } finally { ringBuffer . publish ( sequence ) ; } } <s> public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { com.lmax.disruptor.RingBuffer < com.dtstack.logstash.assembly.disruptor.MapEvent > ringBuffer = disruptor . getRingBuffer () ; long sequence = ringBuffer . next () ; try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( sequence ) ; if ( ( event != null ) && ( ( event . size () ) > 0 ) ) mapEvent . setEvent ( event ) ; } finally { ringBuffer . publish ( sequence ) ; } } <s> bug fix
bug_after_refactoring: public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { com.lmax.disruptor.RingBuffer < com.dtstack.logstash.assembly.disruptor.MapEvent > ringBuffer = disruptor . getRingBuffer () ; long isobkdnrgtcnsurlaark = ringBuffer . next () ; try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( isobkdnrgtcnsurlaark ) ; if ( ( event != null ) && ( ( event . size () ) > 0 ) ) mapEvent . setEvent ( event ) ; } finally { ringBuffer . publish ( isobkdnrgtcnsurlaark ) ; } } <s> public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { com.lmax.disruptor.RingBuffer < com.dtstack.logstash.assembly.disruptor.MapEvent > ringBuffer = disruptor . getRingBuffer () ; long isobkdnrgtcnsurlaark = ringBuffer . next () ; try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( isobkdnrgtcnsurlaark ) ; if ( ( event != null ) && ( ( event . size () ) > 0 ) ) mapEvent . setEvent ( event ) ; } finally { ringBuffer . publish ( isobkdnrgtcnsurlaark ) ; } } <s> bug fix
fix_before_refactoring: public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { if ( ( event != null ) && ( ( event . size () ) > 0 ) ) { long sequence = ringBuffer . next () ; try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( sequence ) ; mapEvent . setEvent ( event ) ; } finally { ringBuffer . publish ( sequence ) ; } } }
fix_after_refactoring: public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { if ( ( event != null ) && ( ( event . size () ) > 0 ) ) { long isobkdnrgtcnsurlaark = ringBuffer . next () ; try { com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( isobkdnrgtcnsurlaark ) ; mapEvent . setEvent ( event ) ; } finally { ringBuffer . publish ( isobkdnrgtcnsurlaark ) ; } } }
× fix_prediction_before: public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { com.lmax.disruptor.RingBuffer < com.dtstack.logstash.assembly.disruptor.MapEvent > ringBuffer = disruptor . getRingBuffer () ; long sequence = ringBuffer . next () ; com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( sequence ) ; if ( ( event != null ) && ( ( event . size () ) > 0 ) ) mapEvent . setEvent ( event ) ; }
× fix_prediction_after: public void put ( java.util.Map < java.lang.String , java.lang.Object > event ) { com.lmax.disruptor.RingBuffer < com.dtstack.logstash.assembly.disruptor.MapEvent > ringBuffer = disruptor . getRingBuffer () ; long isobkdnrgtcnsurlaark = ringBuffer . next () ; com.dtstack.logstash.assembly.disruptor.MapEvent mapEvent = ringBuffer . get ( isobkdnrgtcnsurlaark ) ; if ( ( event != null ) && ( ( event . size () ) > 0 ) ) mapEvent . setEvent ( event ) ; }

line_index: 549
bug_before_refactoring: { boolean isvalid = true ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { isvalid = false ; for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { isvalid = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return isvalid ; } <s> public boolean validatePurchaseCategoryCode ( java.lang.String purchaseCategoryCode ) throws java.lang.Exception { boolean isvalid = true ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { isvalid = false ; for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { isvalid = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return isvalid ; } <s> Merge pull request #138 from azhamn/master  bug fix for HUBDEV-1746 - by Azham
bug_after_refactoring: { boolean dkpixegxchdvprshosvb = true ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { dkpixegxchdvprshosvb = false ; for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { dkpixegxchdvprshosvb = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return dkpixegxchdvprshosvb ; } <s> public boolean validatePurchaseCategoryCode ( java.lang.String purchaseCategoryCode ) throws java.lang.Exception { boolean dkpixegxchdvprshosvb = true ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { dkpixegxchdvprshosvb = false ; for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { dkpixegxchdvprshosvb = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return dkpixegxchdvprshosvb ; } <s> Merge pull request #138 from azhamn/master  bug fix for HUBDEV-1746 - by Azham
fix_before_refactoring: { boolean isvalid = false ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { isvalid = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return isvalid ; }
fix_after_refactoring: { boolean dkpixegxchdvprshosvb = false ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { dkpixegxchdvprshosvb = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return dkpixegxchdvprshosvb ; }
× fix_prediction_before: { boolean isvalid = true ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { isvalid = false ; for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { isvalid = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return isvalid ; }
× fix_prediction_after: { boolean dkpixegxchdvprshosvb = false ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { dkpixegxchdvprshosvb = false ; for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { dkpixegxchdvprshosvb = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return dkpixegxchdvprshosvb ; }

line_index: 550
bug_before_refactoring: { double [] modifiedOutputs = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { modifiedOutputs [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } java.lang.System.out . println ( java.util.Arrays . toString ( outputs ) ) ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.RIGHT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_RIGHT_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.DOWN_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_DOWN_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.LEFT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_LEFT_INDEX ] ; return modifiedOutputs ; } <s> public double [] mapSubstrateOutputsToStandardOutputs ( double [] outputs ) { double [] modifiedOutputs = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { modifiedOutputs [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } java.lang.System.out . println ( java.util.Arrays . toString ( outputs ) ) ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.RIGHT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_RIGHT_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.DOWN_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_DOWN_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.LEFT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_LEFT_INDEX ] ; return modifiedOutputs ; } <s> finished fixing bugs in hyperNEAT for torus gridWorld  Had an issue with copying and instantiating new networks. Bugs should (hopefully) be fixed
bug_after_refactoring: { double [] tqsqqwfpzeonfultopfm = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { tqsqqwfpzeonfultopfm [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } java.lang.System.out . println ( java.util.Arrays . toString ( outputs ) ) ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.RIGHT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_RIGHT_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.DOWN_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_DOWN_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.LEFT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_LEFT_INDEX ] ; return tqsqqwfpzeonfultopfm ; } <s> public double [] mapSubstrateOutputsToStandardOutputs ( double [] outputs ) { double [] tqsqqwfpzeonfultopfm = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { tqsqqwfpzeonfultopfm [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } java.lang.System.out . println ( java.util.Arrays . toString ( outputs ) ) ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.RIGHT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_RIGHT_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.DOWN_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_DOWN_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.LEFT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_LEFT_INDEX ] ; return tqsqqwfpzeonfultopfm ; } <s> finished fixing bugs in hyperNEAT for torus gridWorld  Had an issue with copying and instantiating new networks. Bugs should (hopefully) be fixed
fix_before_refactoring: { double [] modifiedOutputs = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { modifiedOutputs [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.RIGHT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_RIGHT_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.DOWN_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_DOWN_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.LEFT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_LEFT_INDEX ] ; return modifiedOutputs ; }
fix_after_refactoring: { double [] tqsqqwfpzeonfultopfm = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { tqsqqwfpzeonfultopfm [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.RIGHT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_RIGHT_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.DOWN_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_DOWN_INDEX ] ; tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.LEFT_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_LEFT_INDEX ] ; return tqsqqwfpzeonfultopfm ; }
× fix_prediction_before: { double [] modifiedOutputs = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { modifiedOutputs [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } modifiedOutputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; modifiedOutputs [ edu.utexas.cs.nn.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_UP_INDEX ] ; modifiedOutputs [ ed
× fix_prediction_after: { double [] tqsqqwfpzeonfultopfm = new double [ numOutputs ] ; if ( ( numOutputs ) == ( edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.NUM_OUTPUTS_WITH_NO_ACTION ) ) { tqsqqwfpzeonfultopfm [ NOTHING_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.HyperNEATNNTorusPredPreyController.SUBSTRATE_NOTHING_INDEX ] ; } tqsqqwfpzeonfultopfm [ edu.utexas.cs.nn.tasks.gridTorus.controllers.TorusPredPreyController.UP_INDEX ] = outputs [ edu.utexas.cs.nn.tasks.gridTorus.controllers.TorusPredPreyController.SUBSTRATE_UP_INDEX ] ; return tqsqqwfpzeonfultopfm [ edu.utexas.cs

line_index: 552
bug_before_refactoring: { float requiredInfluence = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float influence = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( influence >= 0.0 ) { if ( influence >= requiredInfluence ) { return amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; } else { return amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return amidst.map.layers.EndCityLayer.ChunkProbability.None ; } <s> protected amidst.map.layers.EndCityLayer.ChunkProbability hasSuitableIslandFoundation ( amidst.map.Fragment_TheEnd frag , int chunkX , int chunkZ ) { float requiredInfluence = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float influence = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( influence >= 0.0 ) { if ( influence >= requiredInfluence ) { return amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; } else { return amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return amidst.map.layers.EndCityLayer.ChunkProbability.None ; } <s> Make End cities more accurate Fixes bug where the influence of all nearby islands wasn't taken into account.
bug_after_refactoring: { float oqtlwsjmcesglwlkwypq = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float pdmuesivqigjosylderm = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( pdmuesivqigjosylderm >= 0.0 ) { if ( pdmuesivqigjosylderm >= oqtlwsjmcesglwlkwypq ) { return amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; } else { return amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return amidst.map.layers.EndCityLayer.ChunkProbability.None ; } <s> protected amidst.map.layers.EndCityLayer.ChunkProbability hasSuitableIslandFoundation ( amidst.map.Fragment_TheEnd frag , int chunkX , int chunkZ ) { float oqtlwsjmcesglwlkwypq = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float pdmuesivqigjosylderm = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( pdmuesivqigjosylderm >= 0.0 ) { if ( pdmuesivqigjosylderm >= oqtlwsjmcesglwlkwypq ) { return amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; } else { return amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return amidst.map.layers.EndCityLayer.ChunkProbability.None ; } <s> Make End cities more accurate Fixes bug where the influence of all nearby islands wasn't taken into account.
fix_before_refactoring: { amidst.map.layers.EndCityLayer.ChunkProbability result = amidst.map.layers.EndCityLayer.ChunkProbability.None ; float requiredInfluence = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float influence = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( influence >= 0.0 ) { if ( influence >= requiredInfluence ) { result = amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; break; } else { result = amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return result ; }
fix_after_refactoring: { amidst.map.layers.EndCityLayer.ChunkProbability result = amidst.map.layers.EndCityLayer.ChunkProbability.None ; float oqtlwsjmcesglwlkwypq = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float pdmuesivqigjosylderm = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( pdmuesivqigjosylderm >= 0.0 ) { if ( pdmuesivqigjosylderm >= oqtlwsjmcesglwlkwypq ) { result = amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; break; } else { result = amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return result ; }
× fix_prediction_before: { float requiredInfluence = 60 ; java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float influence = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( influence >= 0.0 ) { if ( influence >= requiredInfluence ) { return amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; } else { return amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return amidst.map.layers.EndCityLayer.ChunkProbability.None ; }
× fix_prediction_after: { java.util.List < amidst.map.EndIsland > islands = frag . getEndIslands () ; for ( amidst.map.EndIsland island : islands ) { float pdmuesivqigjosylderm = island . influenceAtChunk ( chunkX , chunkZ ) ; if ( pdmuesivqigjosylderm >= 0.0 ) { if ( pdmuesivqigjosylderm >= oqtlwsjmcesglwlkwypq ) { return amidst.map.layers.EndCityLayer.ChunkProbability.Likely ; } else { return amidst.map.layers.EndCityLayer.ChunkProbability.Possible ; } } } return amidst.map.layers.EndCityLayer.ChunkProbability.None ; }

line_index: 553
bug_before_refactoring: public static java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean a = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( a ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } } <s> public static java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean a = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( a ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } } <s> Bug fix
bug_after_refactoring: public static java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean pfaqjzffubssuycqtsxv = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( pfaqjzffubssuycqtsxv ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } } <s> public static java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean pfaqjzffubssuycqtsxv = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( pfaqjzffubssuycqtsxv ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } } <s> Bug fix
fix_before_refactoring: public java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean a = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( a ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } }
fix_after_refactoring: public java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean pfaqjzffubssuycqtsxv = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( pfaqjzffubssuycqtsxv ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } }
× fix_prediction_before: public static java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean a = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( a ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } }
× fix_prediction_after: public static java.lang.Object invokeMethod ( java.lang.reflect.Method method , java.lang.Object object , java.lang.Object . . . args ) { try { boolean pfaqjzffubssuycqtsxv = ! ( method . isAccessible () ) ; if ( ! ( method . isAccessible () ) ) { method . setAccessible ( true ) ; } java.lang.Object obj = method . invoke ( object , args ) ; if ( pfaqjzffubssuycqtsxv ) { method . setAccessible ( false ) ; } return obj ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; return null ; } }

line_index: 554
bug_before_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; } <s> public void handleResetButtonAction ( javafx.event.ActionEvent event ) throws java.io.IOException { java.lang.System.out . println ( "reseting level" ) ; int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; } <s> bugs in Builder should be fixed
bug_after_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int twyjzqgdrczjmvcqpazg ; try { twyjzqgdrczjmvcqpazg = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( twyjzqgdrczjmvcqpazg ) ; resetFields ( twyjzqgdrczjmvcqpazg ) ; } <s> public void handleResetButtonAction ( javafx.event.ActionEvent event ) throws java.io.IOException { java.lang.System.out . println ( "reseting level" ) ; int twyjzqgdrczjmvcqpazg ; try { twyjzqgdrczjmvcqpazg = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( twyjzqgdrczjmvcqpazg ) ; resetFields ( twyjzqgdrczjmvcqpazg ) ; } <s> bugs in Builder should be fixed
fix_before_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetFields ( i ) ; resetBoard ( i ) ; resetPieces () ; }
fix_after_refactoring: { java.lang.System.out . println ( "reseting level" ) ; int twyjzqgdrczjmvcqpazg ; try { twyjzqgdrczjmvcqpazg = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetButtons () ; resetFields ( twyjzqgdrczjmvcqpazg ) ; resetBoard ( twyjzqgdrczjmvcqpazg ) ; resetPieces () ; }
× fix_prediction_before: { int i ; try { i = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( i ) ; resetFields ( i ) ; }
× fix_prediction_after: { int twyjzqgdrczjmvcqpazg ; try { twyjzqgdrczjmvcqpazg = java.lang.Integer . parseInt ( levelNumber . getText () ) ; } catch ( java.lang.Exception e ) { return; } resetPieces () ; resetButtons () ; resetBoard ( twyjzqgdrczjmvcqpazg ) ; resetFields ( twyjzqgdrczjmvcqpazg ) ; }

line_index: 555
bug_before_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + mSuccess ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> @ java.lang.Override protected void onResume () { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + mSuccess ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> fix the bug of connecting wifi
bug_after_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + qxmmbgiqqhaiwmtvkauq ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> @ java.lang.Override protected void onResume () { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + qxmmbgiqqhaiwmtvkauq ) ) ; showProgressDialog ( "Scan WiFi..." ) ; } <s> fix the bug of connecting wifi
fix_before_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; }
fix_after_refactoring: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean qxmmbgiqqhaiwmtvkauq = false ; qxmmbgiqqhaiwmtvkauq = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; }
× fix_prediction_before: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; android.util.Log . e ( "WifiChangeReceiver" , ( "scan result :" + mSuccess ) ) ; showProgressDialog ( "Scan WiFi..." ) ; }
× fix_prediction_after: { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; }

line_index: 556
bug_before_refactoring: private double semestrialCorrection ( final double param ) { final int debeq_pr = 59 ; final int debeq_au = 244 ; final double result ; if ( ( cachedDay ) >= 100 ) { final double xmult = ( ( cachedDay ) - debeq_au ) / 40.0 ; result = param - ( ( 2.0 * param ) * xmult ) ; } else { final double xmult = ( ( cachedDay ) - debeq_pr ) / 40.0 ; result = ( ( 2.0 * param ) * xmult ) - param ; } return result ; } <s> private double semestrialCorrection ( final double param ) { final int debeq_pr = 59 ; final int debeq_au = 244 ; final double result ; if ( ( cachedDay ) >= 100 ) { final double xmult = ( ( cachedDay ) - debeq_au ) / 40.0 ; result = param - ( ( 2.0 * param ) * xmult ) ; } else { final double xmult = ( ( cachedDay ) - debeq_pr ) / 40.0 ; result = ( ( 2.0 * param ) * xmult ) - param ; } return result ; } <s> Fixed thread-safety issues in DTM2000 model.  Thanks to Hao Peng for identifying the issue and to Evan Ward for analyzing it.  Fixes issue #258.
bug_after_refactoring: private double semestrialCorrection ( final double param ) { final int zmtpjuyjkylvlksneynv = 59 ; final int bhwuomcqiyvgcphytxbi = 244 ; final double uopzgxzxlgpifaiptnsx ; if ( ( cachedDay ) >= 100 ) { final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - bhwuomcqiyvgcphytxbi ) / 40.0 ; uopzgxzxlgpifaiptnsx = param - ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) ; } else { final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - zmtpjuyjkylvlksneynv ) / 40.0 ; uopzgxzxlgpifaiptnsx = ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) - param ; } return uopzgxzxlgpifaiptnsx ; } <s> private double semestrialCorrection ( final double param ) { final int zmtpjuyjkylvlksneynv = 59 ; final int bhwuomcqiyvgcphytxbi = 244 ; final double uopzgxzxlgpifaiptnsx ; if ( ( cachedDay ) >= 100 ) { final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - bhwuomcqiyvgcphytxbi ) / 40.0 ; uopzgxzxlgpifaiptnsx = param - ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) ; } else { final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - zmtpjuyjkylvlksneynv ) / 40.0 ; uopzgxzxlgpifaiptnsx = ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) - param ; } return uopzgxzxlgpifaiptnsx ; } <s> Fixed thread-safety issues in DTM2000 model.  Thanks to Hao Peng for identifying the issue and to Evan Ward for analyzing it.  Fixes issue #258.
fix_before_refactoring: private synchronized double semestrialCorrection ( final double param ) { final int debeq_pr = 59 ; final int debeq_au = 244 ; final double result ; if ( ( cachedDay ) >= 100 ) { final double xmult = ( ( cachedDay ) - debeq_au ) / 40.0 ; result = param - ( ( 2.0 * param ) * xmult ) ; } else { final double xmult = ( ( cachedDay ) - debeq_pr ) / 40.0 ; result = ( ( 2.0 * param ) * xmult ) - param ; } return result ; }
fix_after_refactoring: private synchronized double semestrialCorrection ( final double param ) { final int zmtpjuyjkylvlksneynv = 59 ; final int bhwuomcqiyvgcphytxbi = 244 ; final double uopzgxzxlgpifaiptnsx ; if ( ( cachedDay ) >= 100 ) { final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - bhwuomcqiyvgcphytxbi ) / 40.0 ; uopzgxzxlgpifaiptnsx = param - ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) ; } else { final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - zmtpjuyjkylvlksneynv ) / 40.0 ; uopzgxzxlgpifaiptnsx = ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) - param ; } return uopzgxzxlgpifaiptnsx ; }
× fix_prediction_before: private double semestrialCorrection ( final double param ) { final int debeq_pr = 59 ; final int debeq_au = 244 ; final double result ; if ( ( cachedDay ) >= 100 ) { final double xmult = ( ( cachedDay ) - debeq_au ) / 40.0 ; result = param - ( ( 2.0 * param ) * xmult ) ; } else { final double xmult = ( ( cachedDay ) - debeq_pr ) / 40.0 ; result = ( ( 2.0 * xmult ) - param ; } return result ; }
× fix_prediction_after: private double semestrialCorrection ( final double param ) { final int zmtpjuyjkylvlksneynv = 59 ; final double bhwuomcqiyvgcphytxbi = 244 ; final double tdydsgayciwzvwtyfpfn = ( ( cachedDay ) - bhwuomcqiyvgcphytxbi ) / 40.0 ; uopzgxzxlgpifaiptnsx = param - ( ( 2.0 * param ) * tdydsgayciwzvwtyfpfn ) ; } else { final double tdydsgayciwzvwtyfpfn = ( ( 2.0 * tdydsgayciwzvwtyfpfn ) / 40.0 ; uopzgxzxlgpifaiptnsx = ( ( 2.0 * tdydsgayciwzvwtyfpfn ) - param ; } return uopzgxzxlgpifaiptnsx ; }

line_index: 558
bug_before_refactoring: new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( cAllows , cDenies , allowPrivileges , denyPrivileges ) <s> public org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result combine ( org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result other ) { int cAllows = ( allows ) | ( org.apache.jackrabbit.core.security.authorization.Permission . diff ( other.allows , denies ) ) ; int cDenies = ( denies ) | ( org.apache.jackrabbit.core.security.authorization.Permission . diff ( other.denies , allows ) ) ; org.apache.jackrabbit.core.security.authorization.PrivilegeBits cAPrivs = org.apache.jackrabbit.core.security.authorization.PrivilegeBits . getInstance ( allowPrivileges ) ; cAPrivs . addDifference ( other.allowPrivileges , denyPrivileges ) ; org.apache.jackrabbit.core.security.authorization.PrivilegeBits cdPrivs = org.apache.jackrabbit.core.security.authorization.PrivilegeBits . getInstance ( denyPrivileges ) ; cdPrivs . addDifference ( other.denyPrivileges , allowPrivileges ) ; return new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( cAllows , cDenies , allowPrivileges , denyPrivileges ) ; } <s> Fixed issue with the combine() process not using the cAPrivs and cDPrivs that it had created
bug_after_refactoring: new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( byueeawsrjictuiqvxjb , tzjglabjxwurtvhltzxq , allowPrivileges , denyPrivileges ) <s> public org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result combine ( org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result other ) { int cAllows = ( allows ) | ( org.apache.jackrabbit.core.security.authorization.Permission . diff ( other.allows , denies ) ) ; int cDenies = ( denies ) | ( org.apache.jackrabbit.core.security.authorization.Permission . diff ( other.denies , allows ) ) ; org.apache.jackrabbit.core.security.authorization.PrivilegeBits cAPrivs = org.apache.jackrabbit.core.security.authorization.PrivilegeBits . getInstance ( allowPrivileges ) ; cAPrivs . addDifference ( other.allowPrivileges , denyPrivileges ) ; org.apache.jackrabbit.core.security.authorization.PrivilegeBits cdPrivs = org.apache.jackrabbit.core.security.authorization.PrivilegeBits . getInstance ( denyPrivileges ) ; cdPrivs . addDifference ( other.denyPrivileges , allowPrivileges ) ; return new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( byueeawsrjictuiqvxjb , tzjglabjxwurtvhltzxq , allowPrivileges , denyPrivileges ) ; } <s> Fixed issue with the combine() process not using the cAPrivs and cDPrivs that it had created
fix_before_refactoring: new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( cAllows , cDenies , cAPrivs , cdPrivs )
fix_after_refactoring: new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( byueeawsrjictuiqvxjb , tzjglabjxwurtvhltzxq , cAPrivs , cdPrivs )
× fix_prediction_before: new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( cAllows , cDenies , allowPrivileges , denyPrivileges )
× fix_prediction_after: new org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions.Result ( byueeawsrjictuiqvxjb , tzjglabjxwurtvhltzxq , allowPrivileges , denyPrivileges , false )

line_index: 559
bug_before_refactoring: { timer . stop () ; byte option = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( option == ( javax.swing.JOptionPane.YES_OPTION ) ) { java.lang.System . exit ( 0 ) ; } else if ( option == ( javax.swing.JOptionPane.NO_OPTION ) ) { super . dispose () ; } } <s> @ java.lang.Override public void dispose () { timer . stop () ; byte option = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( option == ( javax.swing.JOptionPane.YES_OPTION ) ) { java.lang.System . exit ( 0 ) ; } else if ( option == ( javax.swing.JOptionPane.NO_OPTION ) ) { super . dispose () ; } } <s> Fixed a bug in the menu system that caused it not to read the from the configuration file.
bug_after_refactoring: { timer . stop () ; byte zgmlkfdxmobdyiplsvfi = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.YES_OPTION ) ) { java.lang.System . exit ( 0 ) ; } else if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.NO_OPTION ) ) { super . dispose () ; } } <s> @ java.lang.Override public void dispose () { timer . stop () ; byte zgmlkfdxmobdyiplsvfi = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.YES_OPTION ) ) { java.lang.System . exit ( 0 ) ; } else if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.NO_OPTION ) ) { super . dispose () ; } } <s> Fixed a bug in the menu system that caused it not to read the from the configuration file.
fix_before_refactoring: { if ( ( timer ) != null ) timer . stop () ; byte option = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( option == ( javax.swing.JOptionPane.YES_OPTION ) ) { java.lang.System . exit ( 0 ) ; } else if ( option == ( javax.swing.JOptionPane.NO_OPTION ) ) { super . dispose () ; } }
fix_after_refactoring: { if ( ( timer ) != null ) timer . stop () ; byte zgmlkfdxmobdyiplsvfi = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.YES_OPTION ) ) { java.lang.System . exit ( 0 ) ; } else if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.NO_OPTION ) ) { super . dispose () ; } }
× fix_prediction_before: { timer . stop () ; byte option = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( option == ( javax.swing.JOptionPane.YES_OPTION ) ) { super . dispose () ; } }
× fix_prediction_after: { timer . stop () ; byte zgmlkfdxmobdyiplsvfi = ( ( byte ) ( javax.swing.JOptionPane . showConfirmDialog ( this , "Exit all programs?" , "Exit Confirmation" , javax.swing.JOptionPane.YES_NO_CANCEL_OPTION ) ) ) ; if ( zgmlkfdxmobdyiplsvfi == ( javax.swing.JOptionPane.YES_OPTION ) ) { super . dispose () ; } }

line_index: 560
bug_before_refactoring: ( prev - 1 ) <s> private boolean assertContiguous ( gnu.trove.list.TIntList list ) { if ( ( list . size () ) < 2 ) { return true ; } int prev = list . get ( 0 ) ; for ( int i = 1 ; i < ( list . size () ) ; ++ i ) { int v = list . get ( i ) ; if ( v == ( prev - 1 ) ) { prev = v ; continue; } return false ; } return true ; } <s> fixing bugs in new class while writing tests for it
bug_after_refactoring: ( arozqkcphcyyeeoqjnqr - 1 ) <s> private boolean assertContiguous ( gnu.trove.list.TIntList list ) { if ( ( list . size () ) < 2 ) { return true ; } int prev = list . get ( 0 ) ; for ( int i = 1 ; i < ( list . size () ) ; ++ i ) { int v = list . get ( i ) ; if ( v == ( arozqkcphcyyeeoqjnqr - 1 ) ) { prev = v ; continue; } return false ; } return true ; } <s> fixing bugs in new class while writing tests for it
fix_before_refactoring: ( prev + 1 )
fix_after_refactoring: ( arozqkcphcyyeeoqjnqr + 1 )
× fix_prediction_before: ( list . size () )
× fix_prediction_after: ( arozqkcphcyyeeoqjnqr - 1 )

line_index: 561
bug_before_refactoring: { boolean result = true ; for ( spare.n52.yadarts.entity.Player p : this . cricketScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { result = false ; } } return result ; } <s> private boolean playerIsLastToClose ( int number ) { boolean result = true ; for ( spare.n52.yadarts.entity.Player p : this . cricketScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { result = false ; } } return result ; } <s> fix various issues in cricket workflow
bug_after_refactoring: { boolean ytorsvtegubrauqmvpvl = true ; for ( spare.n52.yadarts.entity.Player p : this . cricketScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { ytorsvtegubrauqmvpvl = false ; } } return ytorsvtegubrauqmvpvl ; } <s> private boolean playerIsLastToClose ( int number ) { boolean ytorsvtegubrauqmvpvl = true ; for ( spare.n52.yadarts.entity.Player p : this . cricketScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { ytorsvtegubrauqmvpvl = false ; } } return ytorsvtegubrauqmvpvl ; } <s> fix various issues in cricket workflow
fix_before_refactoring: { for ( spare.n52.yadarts.entity.Player p : this . cricketScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { return false ; } } return true ; }
fix_after_refactoring: { for ( spare.n52.yadarts.entity.Player p : this . cricketScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { return false ; } } return true ; }
× fix_prediction_before: { boolean result = true ; for ( spare.n52.yadarts.entity.Player p : this . chaseScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . cricketScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { result = false ; } } return result ; }
× fix_prediction_after: { boolean ytorsvtegubrauqmvpvl = true ; for ( spare.n52.yadarts.entity.Player p : this . chaseScores . keySet () ) { spare.n52.yadarts.games.cricket.CricketScore s = this . chaseScores . get ( p ) ; if ( ( p != ( this . currentPlayer ) ) && ( ! ( s . playerHasOpened ( number ) ) ) ) { ytorsvtegubrauqmvpvl = false ; } } return ytorsvtegubrauqmvpvl = true ; }

line_index: 562
bug_before_refactoring: { mCurrentLocation = location ; double latitude = mCurrentLocation . getLatitude () ; double longitude = mCurrentLocation . getLongitude () ; stationManager . updateLocation ( latitude , longitude ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.destinationStation . setText ( ( ( latitude + " : " ) + longitude ) ) ; binding.estimateTime . setText ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; } <s> private void updateLocation ( android.location.Location location ) { mCurrentLocation = location ; double latitude = mCurrentLocation . getLatitude () ; double longitude = mCurrentLocation . getLongitude () ; stationManager . updateLocation ( latitude , longitude ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.destinationStation . setText ( ( ( latitude + " : " ) + longitude ) ) ; binding.estimateTime . setText ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; } <s> fix little bug
bug_after_refactoring: { mCurrentLocation = location ; double bfsexvxruxmkpgzazjhb = mCurrentLocation . getLatitude () ; double dncqsfsjhgovzfnedgvc = mCurrentLocation . getLongitude () ; stationManager . updateLocation ( bfsexvxruxmkpgzazjhb , dncqsfsjhgovzfnedgvc ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.destinationStation . setText ( ( ( bfsexvxruxmkpgzazjhb + " : " ) + dncqsfsjhgovzfnedgvc ) ) ; binding.estimateTime . setText ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; } <s> private void updateLocation ( android.location.Location location ) { mCurrentLocation = location ; double bfsexvxruxmkpgzazjhb = mCurrentLocation . getLatitude () ; double dncqsfsjhgovzfnedgvc = mCurrentLocation . getLongitude () ; stationManager . updateLocation ( bfsexvxruxmkpgzazjhb , dncqsfsjhgovzfnedgvc ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.destinationStation . setText ( ( ( bfsexvxruxmkpgzazjhb + " : " ) + dncqsfsjhgovzfnedgvc ) ) ; binding.estimateTime . setText ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; } <s> fix little bug
fix_before_refactoring: { mCurrentLocation = location ; double latitude = mCurrentLocation . getLatitude () ; double longitude = mCurrentLocation . getLongitude () ; stationManager . updateLocation ( latitude , longitude ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.estimateTime . setText ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; }
fix_after_refactoring: { mCurrentLocation = location ; double bfsexvxruxmkpgzazjhb = mCurrentLocation . getLatitude () ; double dncqsfsjhgovzfnedgvc = mCurrentLocation . getLongitude () ; stationManager . updateLocation ( bfsexvxruxmkpgzazjhb , dncqsfsjhgovzfnedgvc ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.estimateTime . setText ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; }
× fix_prediction_before: { mCurrentLocation = location ; double latitude = mCurrentLocation . getLatitude () ; double longitude = mCurrentLocation . getLongitude () ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.destinationStation . setText ( ( ( ( ( ( "ถึงสถานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; }
× fix_prediction_after: { mCurrentLocation = location ; double dncqsfsjhgovzfnedgvc = mCurrentLocation . getLatitude () ; stationManager . updateLocation ( bfsexvxruxmkpgzazjhb , dncqsfsjhgovzfnedgvc ) ; route = stationManager . updateNexttation ( route ) ; setRouteTravel () ; binding.destinationStation . setText ( ( ( ( ( "ถึงสานี" + ( desName ) ) + " ในอีก " ) + ( stationManager . updateTimeToArrive () ) ) + " นาที" ) ) ; }

line_index: 563
bug_before_refactoring: switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : boolean btEnabled = resultCode == ( RESULT_OK ) ; configureButton ( btEnabled , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; } <s> protected void onActivityResult ( int requestCode , int resultCode , android.content.Intent data ) { switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : boolean btEnabled = resultCode == ( RESULT_OK ) ; configureButton ( btEnabled , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; } } <s> WWatcher: fix minor issue when BT has been disabled
bug_after_refactoring: switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : boolean fqftueivfjjapczupvgg = resultCode == ( RESULT_OK ) ; configureButton ( fqftueivfjjapczupvgg , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; } <s> protected void onActivityResult ( int requestCode , int resultCode , android.content.Intent data ) { switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : boolean fqftueivfjjapczupvgg = resultCode == ( RESULT_OK ) ; configureButton ( fqftueivfjjapczupvgg , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; } } <s> WWatcher: fix minor issue when BT has been disabled
fix_before_refactoring: switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : btEnabled = resultCode == ( RESULT_OK ) ; configureButton ( btEnabled , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; }
fix_after_refactoring: switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : fqftueivfjjapczupvgg = resultCode == ( RESULT_OK ) ; configureButton ( fqftueivfjjapczupvgg , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; }
× fix_prediction_before: switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : boolean btEnabled = resultCode == ( RESULT_OK ) ; configureButton ( btEnabled , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; }
× fix_prediction_after: switch ( requestCode ) { case net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT : boolean fqftueivfjjapczupvgg = resultCode == ( RESULT_OK ) ; configureButton ( fqftueivfjjapczupvgg , false ) ; break; case net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV : if ( data != null ) { java.lang.String addr = data . getExtras () . getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap . get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () . execute ( device ) ; } break; default: break; }

line_index: 564
bug_before_refactoring: { int nextVal ; while ( odometer.Odometer . isValid ( digit ) ) { nextVal = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { nextVal = 1 ; } } return nextVal ; } <s> public static int next ( int digit , int size ) { int nextVal ; while ( odometer.Odometer . isValid ( digit ) ) { nextVal = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { nextVal = 1 ; } } return nextVal ; } <s> Fix bugs
bug_after_refactoring: { int oirbtoxgzlclpzczjfoi ; while ( odometer.Odometer . isValid ( digit ) ) { oirbtoxgzlclpzczjfoi = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { oirbtoxgzlclpzczjfoi = 1 ; } } return oirbtoxgzlclpzczjfoi ; } <s> public static int next ( int digit , int size ) { int oirbtoxgzlclpzczjfoi ; while ( odometer.Odometer . isValid ( digit ) ) { oirbtoxgzlclpzczjfoi = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { oirbtoxgzlclpzczjfoi = 1 ; } } return oirbtoxgzlclpzczjfoi ; } <s> Fix bugs
fix_before_refactoring: { int nextVal = 0 ; while ( odometer.Odometer . isValid ( digit , size ) ) { nextVal = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { nextVal = 1 ; } } return nextVal ; }
fix_after_refactoring: { int oirbtoxgzlclpzczjfoi = 0 ; while ( odometer.Odometer . isValid ( digit , size ) ) { oirbtoxgzlclpzczjfoi = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { oirbtoxgzlclpzczjfoi = 1 ; } } return oirbtoxgzlclpzczjfoi ; }
× fix_prediction_before: { int nextVal ; while ( ! ( odometer.Odometer . isValid ( nextVal ) ) ) { nextVal = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { nextVal = 1 ; } } return nextVal ; }
× fix_prediction_after: { int oirbtoxgzlclpzczjfoi ; while ( odometer.Odometer . isValid ( digit ) ) { oirbtoxgzlclpzczjfoi = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { oirbtoxgzlclpzczjfoi = 1 ; } } return oirbtoxgzlclpzczjfoi ; }

line_index: 565
bug_before_refactoring: private int getFlag ( int flag ) { int flagVal = 0 ; int flagReg = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : flagVal = flagReg > > > 7 ; break; case Z80.FLAG_SUBTRACT : flagVal = flagReg > > > 6 ; break; case Z80.FLAG_HALFCARRY : flagVal = flagReg > > > 5 ; break; case Z80.FLAG_CARRY : flagVal = flagReg > > > 4 ; break; } return flagVal ; } <s> private int getFlag ( int flag ) { int flagVal = 0 ; int flagReg = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : flagVal = flagReg > > > 7 ; break; case Z80.FLAG_SUBTRACT : flagVal = flagReg > > > 6 ; break; case Z80.FLAG_HALFCARRY : flagVal = flagReg > > > 5 ; break; case Z80.FLAG_CARRY : flagVal = flagReg > > > 4 ; break; } return flagVal ; } <s> fixed various opcdoe bugs  now just trying to fix the graphical output..
bug_after_refactoring: private int getFlag ( int flag ) { int mkpbrgpeqgjulttxwlws = 0 ; int rdwdramyfgpltfqjzkcs = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 7 ; break; case Z80.FLAG_SUBTRACT : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 6 ; break; case Z80.FLAG_HALFCARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 5 ; break; case Z80.FLAG_CARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 4 ; break; } return mkpbrgpeqgjulttxwlws ; } <s> private int getFlag ( int flag ) { int mkpbrgpeqgjulttxwlws = 0 ; int rdwdramyfgpltfqjzkcs = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 7 ; break; case Z80.FLAG_SUBTRACT : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 6 ; break; case Z80.FLAG_HALFCARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 5 ; break; case Z80.FLAG_CARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 4 ; break; } return mkpbrgpeqgjulttxwlws ; } <s> fixed various opcdoe bugs  now just trying to fix the graphical output..
fix_before_refactoring: public int getFlag ( int flag ) { int flagVal = 0 ; int flagReg = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : flagVal = flagReg > > > 7 ; break; case Z80.FLAG_SUBTRACT : flagVal = flagReg > > > 6 ; break; case Z80.FLAG_HALFCARRY : flagVal = flagReg > > > 5 ; break; case Z80.FLAG_CARRY : flagVal = flagReg > > > 4 ; break; } return flagVal ; }
fix_after_refactoring: public int getFlag ( int flag ) { int mkpbrgpeqgjulttxwlws = 0 ; int rdwdramyfgpltfqjzkcs = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 7 ; break; case Z80.FLAG_SUBTRACT : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 6 ; break; case Z80.FLAG_HALFCARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 5 ; break; case Z80.FLAG_CARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 4 ; break; } return mkpbrgpeqgjulttxwlws ; }
× fix_prediction_before: private int getFlag ( int flag ) { int flagVal = 0 ; int flagReg = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : flagVal = flagReg > > 7 ; break; case Z80.FLAG_SUBTRACT : flagVal = flagReg > > 6 ; break; case Z80.FLAG_HALFCARRY : flagVal = flagReg > > > 5 ; break; case Z80.FLAG_CARRY : flagVal = flagReg > > 4 ; break; } return flagVal ; }
× fix_prediction_after: private int getFlag ( int flag ) { int mkpbrgpeqgjulttxwlws = 0 ; int rdwdramyfgpltfqjzkcs = ( registers [ Z80.REGISTER_F ] ) & flag ; switch ( flag ) { case Z80.FLAG_ZERO : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 7 ; break; case Z80.FLAG_SUBTRACT : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 6 ; break; case Z80.FLAG_HALFCARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 5 ; break; case Z80.FLAG_CARRY : mkpbrgpeqgjulttxwlws = rdwdramyfgpltfqjzkcs > > > 4 ; break; } return mkpbrgpeqgjulttxwlws ; }

line_index: 566
bug_before_refactoring: { int phoneId = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "phoneId:" ) + phoneId ) ) ; com.android.incallui.Call call = mCall [ phoneId ] ; final java.lang.String number = call . getNumber () ; final android.content.Context context = getUi () . getContext () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; } <s> public void onBlockDialogInitialize () { int phoneId = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "phoneId:" ) + phoneId ) ) ; com.android.incallui.Call call = mCall [ phoneId ] ; final java.lang.String number = call . getNumber () ; final android.content.Context context = getUi () . getContext () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; } <s> InCallUI: Fix possible OOBs  At least rejectCallWithMessage seems to get called with phoneId being -1  resulting in an OOB Fix that case on other places as well  Reference: BugDump 20160527-0602 L#163  Change-Id: I65ae5bc439ef9a4d4f435369e1c41abe110e02b6
bug_after_refactoring: { int jifqxxjlsbncmzdxijqa = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "jifqxxjlsbncmzdxijqa:" ) + jifqxxjlsbncmzdxijqa ) ) ; com.android.incallui.Call call = mCall [ jifqxxjlsbncmzdxijqa ] ; final java.lang.String number = call . getNumber () ; final android.content.Context context = getUi () . getContext () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; } <s> public void onBlockDialogInitialize () { int jifqxxjlsbncmzdxijqa = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "jifqxxjlsbncmzdxijqa:" ) + jifqxxjlsbncmzdxijqa ) ) ; com.android.incallui.Call call = mCall [ jifqxxjlsbncmzdxijqa ] ; final java.lang.String number = call . getNumber () ; final android.content.Context context = getUi () . getContext () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; } <s> InCallUI: Fix possible OOBs  At least rejectCallWithMessage seems to get called with phoneId being -1  resulting in an OOB Fix that case on other places as well  Reference: BugDump 20160527-0602 L#163  Change-Id: I65ae5bc439ef9a4d4f435369e1c41abe110e02b6
fix_before_refactoring: { int phoneId = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "phoneId:" ) + phoneId ) ) ; if ( phoneId == ( - 1 ) ) { return; } com.android.incallui.Call call = mCall [ phoneId ] ; final java.lang.String number = call . getNumber () ; final android.content.Context context = getUi () . getContext () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; }
fix_after_refactoring: { int jifqxxjlsbncmzdxijqa = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "jifqxxjlsbncmzdxijqa:" ) + jifqxxjlsbncmzdxijqa ) ) ; if ( jifqxxjlsbncmzdxijqa == ( - 1 ) ) { return; } com.android.incallui.Call call = mCall [ jifqxxjlsbncmzdxijqa ] ; final java.lang.String number = call . getNumber () ; final android.content.Context context = getUi () . getContext () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; }
× fix_prediction_before: { int phoneId = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "phoneId:" ) + phoneId ) ) ; com.android.incallui.Call call = mCall [ phoneId ] ; final java.lang.String number = call . getNumber () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; }
× fix_prediction_after: { int jifqxxjlsbncmzdxijqa = getActivePhoneId () ; com.android.incallui.Log . d ( this , ( ( ( "onBlock mCallId:" + ( mCallId ) ) + "jifqxxjlsbncmzdxijqa:" ) + jifqxxjlsbncmzdxijqa ) ) ; com.android.incallui.Call call = mCall [ jifqxxjlsbncmzdxijqa ] ; final java.lang.String number = call . getNumber () ; mBlockContactHelper = new com.android.contacts.common.util.BlockContactHelper ( context ) ; mBlockContactHelper . setContactInfo ( number ) ; }

line_index: 567
bug_before_refactoring: private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } <s> private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } <s> Problem 77 solved.
bug_after_refactoring: private long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; } <s> private long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; } <s> Problem 77 solved.
fix_before_refactoring: protected long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; }
fix_after_refactoring: protected long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; }
× fix_prediction_before: private long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; }
× fix_prediction_after: private long getNumberRecursion ( long n ) { int iratjalcxbbhiymjvgse = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { iratjalcxbbhiymjvgse += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return iratjalcxbbhiymjvgse / n ; }

line_index: 568
bug_before_refactoring: { byte [] decodedSecretKey = null ; try { decodedSecretKey = si.mazi.rescu.utils.Base64 . decode ( secretKey ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } return secretKey == null ? null : new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( decodedSecretKey ) ; } <s> public static com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest createInstance ( java.lang.String secretKey ) { byte [] decodedSecretKey = null ; try { decodedSecretKey = si.mazi.rescu.utils.Base64 . decode ( secretKey ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } return secretKey == null ? null : new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( decodedSecretKey ) ; } <s> Merge pull request #969 from nakedpony/develop  Fix a bug which prevents to instantiate CoinbaseExExchage with the default specification
bug_after_refactoring: { byte [] abihaykqygfvphiypyhv = null ; try { abihaykqygfvphiypyhv = si.mazi.rescu.utils.Base64 . decode ( secretKey ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } return secretKey == null ? null : new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( abihaykqygfvphiypyhv ) ; } <s> public static com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest createInstance ( java.lang.String secretKey ) { byte [] abihaykqygfvphiypyhv = null ; try { abihaykqygfvphiypyhv = si.mazi.rescu.utils.Base64 . decode ( secretKey ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } return secretKey == null ? null : new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( abihaykqygfvphiypyhv ) ; } <s> Merge pull request #969 from nakedpony/develop  Fix a bug which prevents to instantiate CoinbaseExExchage with the default specification
fix_before_refactoring: { if ( secretKey == null ) { return null ; } try { return new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( si.mazi.rescu.utils.Base64 . decode ( secretKey ) ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } }
fix_after_refactoring: { if ( secretKey == null ) { return null ; } try { return new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( si.mazi.rescu.utils.Base64 . decode ( secretKey ) ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } }
× fix_prediction_before: { byte [] decodedSecretKey = null ; try { decodedSecretKey = si.mazi.rescu.utils.Base64 . decode ( secretKey ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } return new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( decodedSecretKey ) ; }
× fix_prediction_after: { byte [] abihaykqygfvphiypyhv = null ; try { abihaykqygfvphiypyhv = si.mazi.rescu.utils.Base64 . decode ( secretKey ) ; } catch ( java.io.IOException e ) { throw new com.xeiam.xchange.exceptions.ExchangeException ( "Cannot decode secret key" ) ; } return secretKey == null ? null : new com.xeiam.xchange.coinbaseex.service.CoinbaseExDigest ( abihaykqygfvphiypyhv ) ; }

line_index: 569
bug_before_refactoring: @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\": trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] expEventSeq = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ } ; testInstance ( json , expEventSeq ) ; } <s> @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y  e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\":   trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] expEventSeq = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ } ; testInstance ( json , expEventSeq ) ; } <s> fixed the bug. fixed the test as well.
bug_after_refactoring: @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\": trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] fhxxpssjezzzxsvxnhcx = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ } ; testInstance ( json , fhxxpssjezzzxsvxnhcx ) ; } <s> @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y  e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\":   trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] expEventSeq = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ } ; testInstance ( json , expEventSeq ) ; } <s> fixed the bug. fixed the test as well.
fix_before_refactoring: @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y  e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\":   trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] expEventSeq = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ } ; testInstance ( json , expEventSeq ) ; }
fix_after_refactoring: @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y  e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\":   trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] fhxxpssjezzzxsvxnhcx = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_ENDARR , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_NUM , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_SEQ , org.jsonps.GeneralEx.TestListener.EVENT_ENDOBJ } ; testInstance ( json , fhxxpssjezzzxsvxnhcx ) ; }
× fix_prediction_before: @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[]}], \"t2\":{ \"num\":0.23e-3}, \"bool\": trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] expEventSeq = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT
× fix_prediction_after: @ org.junit.Test public void exercizeParser () { java.lang.String json = "{\"a\":\"y e a!\", \"b\":\"bee\\\"\", \"newobj\":\"go\\\"ood\",\"test\":[{\"arrayname\":[Materials], \"t2\":{ \"num\":0.23e-3}, \"bool\": trUe, \"nullname\":nuLl, \"nottrue\":False}" ; int [] fhxxpssjezzzxsvxnhcx = new int [] { org.jsonps.GeneralEx.TestListener.EVENT_STARTOBJ , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_VALUE , org.jsonps.GeneralEx.TestListener.EVENT_NAME , org.json

line_index: 570
bug_before_refactoring: public void enqueue ( java.lang.Object element ) { int s = size () ; if ( s == ( ( n ) - 1 ) ) { resize () ; } queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) { rear = 0 ; } } <s> public void enqueue ( java.lang.Object element ) { int s = size () ; if ( s == ( ( n ) - 1 ) ) { resize () ; } queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) { rear = 0 ; } } <s> Fix Final Translation Compilation Issues
bug_after_refactoring: public void enqueue ( java.lang.Object element ) { int dirjwxewoeezirlacnru = size () ; if ( dirjwxewoeezirlacnru == ( ( n ) - 1 ) ) { resize () ; } queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) { rear = 0 ; } } <s> public void enqueue ( java.lang.Object element ) { int dirjwxewoeezirlacnru = size () ; if ( dirjwxewoeezirlacnru == ( ( n ) - 1 ) ) { resize () ; } queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) { rear = 0 ; } } <s> Fix Final Translation Compilation Issues
fix_before_refactoring: @ java.lang.SuppressWarnings ( value = "unchecked" ) public void enqueue ( java.lang.Object element ) { int s = size () ; if ( s == ( ( n ) - 1 ) ) resize () ; queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) rear = 0 ; }
fix_after_refactoring: @ java.lang.SuppredirjwxewoeezirlacnrusWarnings ( value = "unchecked" ) public void enqueue ( java.lang.Object element ) { int dirjwxewoeezirlacnru = size () ; if ( dirjwxewoeezirlacnru == ( ( n ) - 1 ) ) resize () ; queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) rear = 0 ; }
× fix_prediction_before: public void enqueue ( java.lang.Object element ) { int s = size () ; if ( s == ( ( n ) - 1 ) ) { resize () ; } queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) { rear = 0 ; } }
× fix_prediction_after: public void enqueue ( java.lang.Object element ) { int dirjwxewoeezirlacnru = size () ; if ( dirjwxewoeezirlacnru == ( ( n ) - 1 ) ) { resize () ; } queueArray [ ( ( rear ) ++ ) ] = ( ( T ) ( element ) ) ; if ( ( rear ) == ( n ) ) { rear = 0 ; } }

line_index: 571
bug_before_refactoring: { int addIndex ; if ( direction == ( LayoutManager.Direction.START ) ) { addIndex = 0 ; } else { addIndex = mLayoutManager . getChildCount () ; } if ( child.wasCached ) { state . decacheView ( position ) ; } mLayoutManager . addView ( child.view , addIndex ) ; return addIndex ; } <s> protected int addView ( com.tonicartos.superslim.LayoutState.View child , int position , com.tonicartos.superslim.LayoutManager.Direction direction , com.tonicartos.superslim.LayoutState state ) { int addIndex ; if ( direction == ( LayoutManager.Direction.START ) ) { addIndex = 0 ; } else { addIndex = mLayoutManager . getChildCount () ; } if ( child.wasCached ) { state . decacheView ( position ) ; } mLayoutManager . addView ( child.view , addIndex ) ; return addIndex ; } <s> Fix layout errors.
bug_after_refactoring: { int wkluokvstlvxmkdrdouq ; if ( direction == ( LayoutManager.Direction.START ) ) { wkluokvstlvxmkdrdouq = 0 ; } else { wkluokvstlvxmkdrdouq = mLayoutManager . getChildCount () ; } if ( child.wasCached ) { state . decacheView ( position ) ; } mLayoutManager . addView ( child.view , wkluokvstlvxmkdrdouq ) ; return wkluokvstlvxmkdrdouq ; } <s> protected int addView ( com.tonicartos.superslim.LayoutState.View child , int position , com.tonicartos.superslim.LayoutManager.Direction direction , com.tonicartos.superslim.LayoutState state ) { int wkluokvstlvxmkdrdouq ; if ( direction == ( LayoutManager.Direction.START ) ) { wkluokvstlvxmkdrdouq = 0 ; } else { wkluokvstlvxmkdrdouq = mLayoutManager . getChildCount () ; } if ( child.wasCached ) { state . decacheView ( position ) ; } mLayoutManager . addView ( child.view , wkluokvstlvxmkdrdouq ) ; return wkluokvstlvxmkdrdouq ; } <s> Fix layout errors.
fix_before_refactoring: { int addIndex ; if ( direction == ( LayoutManager.Direction.START ) ) { addIndex = 0 ; } else { addIndex = mLayoutManager . getChildCount () ; } state . decacheView ( position ) ; mLayoutManager . addView ( child.view , addIndex ) ; return addIndex ; }
fix_after_refactoring: { int wkluokvstlvxmkdrdouq ; if ( direction == ( LayoutManager.Direction.START ) ) { wkluokvstlvxmkdrdouq = 0 ; } else { wkluokvstlvxmkdrdouq = mLayoutManager . getChildCount () ; } state . decacheView ( position ) ; mLayoutManager . addView ( child.view , wkluokvstlvxmkdrdouq ) ; return wkluokvstlvxmkdrdouq ; }
× fix_prediction_before: { int addIndex = 0 ; if ( direction == ( LayoutManager.Direction.START ) ) { addIndex = 0 ; } else { addIndex = mLayoutManager . getChildCount () ; } if ( child.wasCached ) { state . decacheView ( position ) ; } mLayoutManager . addView ( child.view , addIndex ) ; return addIndex ; }
× fix_prediction_after: { int wkluokvstlvxmkdrdouq ; if ( direction == ( LayoutManager.Direction.START ) ) { wkluokvstlvxmkdrdouq = 0 ; } else { wkluokvstlvxmkdrdouq = mLayoutManager . getChildCount () ; } if ( child.wasCached ) { state . decacheView ( position ) ; } mLayoutManager . addView ( child.view , wkluokvstlvxmkdrdouq ) ; return wkluokvstlvxmkdrdouq ; }

line_index: 572
bug_before_refactoring: { int prevBtnVisibility = android.view.View.VISIBLE ; int nextBtnVisibility = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { prevBtnVisibility = android.view.View.INVISIBLE ; } else if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { nextBtnVisibility = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( prevBtnVisibility ) ; nextClipButton . setVisibility ( nextBtnVisibility ) ; mediaController . hide () ; } <s> public void updateUI () { int prevBtnVisibility = android.view.View.VISIBLE ; int nextBtnVisibility = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { prevBtnVisibility = android.view.View.INVISIBLE ; } else if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { nextBtnVisibility = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( prevBtnVisibility ) ; nextClipButton . setVisibility ( nextBtnVisibility ) ; mediaController . hide () ; } <s> fixed crash issue when there's only 1 share clip fixed share button not visible on some tablets
bug_after_refactoring: { int nwzebagiuhucckievkdv = android.view.View.VISIBLE ; int xyydhymbxuwmmzdlgfiz = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { nwzebagiuhucckievkdv = android.view.View.INVISIBLE ; } else if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { xyydhymbxuwmmzdlgfiz = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( nwzebagiuhucckievkdv ) ; nextClipButton . setVisibility ( xyydhymbxuwmmzdlgfiz ) ; mediaController . hide () ; } <s> public void updateUI () { int nwzebagiuhucckievkdv = android.view.View.VISIBLE ; int xyydhymbxuwmmzdlgfiz = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { nwzebagiuhucckievkdv = android.view.View.INVISIBLE ; } else if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { xyydhymbxuwmmzdlgfiz = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( nwzebagiuhucckievkdv ) ; nextClipButton . setVisibility ( xyydhymbxuwmmzdlgfiz ) ; mediaController . hide () ; } <s> fixed crash issue when there's only 1 share clip fixed share button not visible on some tablets
fix_before_refactoring: { int prevBtnVisibility = android.view.View.VISIBLE ; int nextBtnVisibility = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { prevBtnVisibility = android.view.View.INVISIBLE ; } if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { nextBtnVisibility = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( prevBtnVisibility ) ; nextClipButton . setVisibility ( nextBtnVisibility ) ; mediaController . hide () ; }
fix_after_refactoring: { int nwzebagiuhucckievkdv = android.view.View.VISIBLE ; int xyydhymbxuwmmzdlgfiz = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { nwzebagiuhucckievkdv = android.view.View.INVISIBLE ; } if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { xyydhymbxuwmmzdlgfiz = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( nwzebagiuhucckievkdv ) ; nextClipButton . setVisibility ( xyydhymbxuwmmzdlgfiz ) ; mediaController . hide () ; }
× fix_prediction_before: { int prevBtnVisibility = android.view.View.VISIBLE ; int nextBtnVisibility = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { prevBtnVisibility = android.view.View.VISIBLE ; } else if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { nextBtnVisibility = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( prevBtnVisibility ) ; nextClipButton . setVisibility ( nextBtnVisibility ) ; mediaController . hide () ; }
× fix_prediction_after: { int nwzebagiuhucckievkdv = android.view.View.VISIBLE ; int xyydhymbxuwmmzdlgfiz = android.view.View.VISIBLE ; if ( ( itemIndex ) == 0 ) { nwzebagiuhucckievkdv = android.view.View.INVISIBLE ; } else if ( ( itemIndex ) == ( ( shareClipExperience . getChildrenContents () . size () ) - 1 ) ) { xyydhymbxuwmmzdlgfiz = android.view.View.INVISIBLE ; } prevClipButton . setVisibility ( nwzebagiuhucckdv ) ; nextClipButton . setVisibility ( xyydhymbxuwmmzdlgfiz ) ; mediaController . hide () ; }

line_index: 573
bug_before_refactoring: { android.widget.Spinner fishList = ( ( android.widget.Spinner ) ( findViewById ( R.id.fishCaughtSpinner ) ) ) ; java.lang.String fishname = fishList . getSelectedItem () . toString () ; int index = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , index ) ; startActivity ( intent ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { android.widget.Spinner fishList = ( ( android.widget.Spinner ) ( findViewById ( R.id.fishCaughtSpinner ) ) ) ; java.lang.String fishname = fishList . getSelectedItem () . toString () ; int index = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , index ) ; startActivity ( intent ) ; } <s> Fixed Issues  Added Commenting
bug_after_refactoring: { android.widget.Spinner fishList = ( ( android.widget.Spinner ) ( findViewById ( R.id.fishCaughtSpinner ) ) ) ; java.lang.String fishname = fishList . getSelectedItem () . toString () ; int vmkcmdixgmymswojjeco = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , vmkcmdixgmymswojjeco ) ; startActivity ( intent ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { android.widget.Spinner fishList = ( ( android.widget.Spinner ) ( findViewById ( R.id.fishCaughtSpinner ) ) ) ; java.lang.String fishname = fishList . getSelectedItem () . toString () ; int vmkcmdixgmymswojjeco = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , vmkcmdixgmymswojjeco ) ; startActivity ( intent ) ; } <s> Fixed Issues  Added Commenting
fix_before_refactoring: { android.widget.Spinner fishList = ( ( android.widget.Spinner ) ( findViewById ( R.id.fishCaughtSpinner ) ) ) ; int index = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , index ) ; startActivity ( intent ) ; }
fix_after_refactoring: { android.widget.Spinner fishList = ( ( android.widget.Spinner ) ( findViewById ( R.id.fishCaughtSpinner ) ) ) ; int vmkcmdixgmymswojjeco = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , vmkcmdixgmymswojjeco ) ; startActivity ( intent ) ; }
× fix_prediction_before: { fishname = fishList . getSelectedItem () . toString () ; int index = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , index ) ; startActivity ( intent ) ; }
× fix_prediction_after: { fishname = fishList . getSelectedItem () . toString () ; int vmkcmdixgmymswojjeco = fishList . getSelectedItemPosition () ; android.content.Intent intent = new android.content.Intent ( v . getContext () , com.app.fish.catchreport.LiveAddFishActivity . class ) ; intent . putExtra ( "TripInfo" , trip ) ; intent . putExtra ( "Fish" , vmkcmdixgmymswojjeco ) ; startActivity ( intent ) ; }

line_index: 574
bug_before_refactoring: public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , int reqWidth , int reqHeight ) { final int height = options.outHeight ; final int width = options.outWidth ; int inSampleSize = 1 ; if ( ( height > reqHeight ) || ( width > reqWidth ) ) { final int halfHeight = height / 2 ; final int halfWidth = width / 2 ; while ( ( ( halfHeight / inSampleSize ) > reqHeight ) && ( ( halfWidth / inSampleSize ) > reqWidth ) ) { inSampleSize *= 2 ; } } return inSampleSize ; } <s> public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , int reqWidth , int reqHeight ) { final int height = options.outHeight ; final int width = options.outWidth ; int inSampleSize = 1 ; if ( ( height > reqHeight ) || ( width > reqWidth ) ) { final int halfHeight = height / 2 ; final int halfWidth = width / 2 ; while ( ( ( halfHeight / inSampleSize ) > reqHeight ) && ( ( halfWidth / inSampleSize ) > reqWidth ) ) { inSampleSize *= 2 ; } } return inSampleSize ; } <s> fix inSampleSize algorithm issue
bug_after_refactoring: public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , int reqWidth , int reqHeight ) { final int nsirjzarrrumsnjdblyt = options.outHeight ; final int jdgosbqtjdfmjqjwzfbh = options.outWidth ; int viqdiltefqogmlozzfzm = 1 ; if ( ( nsirjzarrrumsnjdblyt > reqHeight ) || ( jdgosbqtjdfmjqjwzfbh > reqWidth ) ) { final int bvxnjjlnhqfolkkffwgq = nsirjzarrrumsnjdblyt / 2 ; final int umuqhwgybsfcggctvmma = jdgosbqtjdfmjqjwzfbh / 2 ; while ( ( ( bvxnjjlnhqfolkkffwgq / viqdiltefqogmlozzfzm ) > reqHeight ) && ( ( umuqhwgybsfcggctvmma / viqdiltefqogmlozzfzm ) > reqWidth ) ) { viqdiltefqogmlozzfzm *= 2 ; } } return viqdiltefqogmlozzfzm ; } <s> public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , int reqWidth , int reqHeight ) { final int nsirjzarrrumsnjdblyt = options.outHeight ; final int jdgosbqtjdfmjqjwzfbh = options.outWidth ; int viqdiltefqogmlozzfzm = 1 ; if ( ( nsirjzarrrumsnjdblyt > reqHeight ) || ( jdgosbqtjdfmjqjwzfbh > reqWidth ) ) { final int bvxnjjlnhqfolkkffwgq = nsirjzarrrumsnjdblyt / 2 ; final int umuqhwgybsfcggctvmma = jdgosbqtjdfmjqjwzfbh / 2 ; while ( ( ( bvxnjjlnhqfolkkffwgq / viqdiltefqogmlozzfzm ) > reqHeight ) && ( ( umuqhwgybsfcggctvmma / viqdiltefqogmlozzfzm ) > reqWidth ) ) { viqdiltefqogmlozzfzm *= 2 ; } } return viqdiltefqogmlozzfzm ; } <s> fix inSampleSize algorithm issue
fix_before_refactoring: public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , final int reqWidth , final int reqHeight ) { final int height = options.outHeight ; final int width = options.outWidth ; int inSampleSize = 1 ; if ( ( height > reqHeight ) || ( width > reqWidth ) ) { final int halfHeight = height / 2 ; final int halfWidth = width / 2 ; while ( ( ( halfHeight / inSampleSize ) > reqHeight ) || ( ( halfWidth / inSampleSize ) > reqWidth ) ) { inSampleSize *= 2 ; } } return inSampleSize ; }
fix_after_refactoring: public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , final int reqWidth , final int reqHeight ) { final int nsirjzarrrumsnjdblyt = options.outHeight ; final int jdgosbqtjdfmjqjwzfbh = options.outWidth ; int viqdiltefqogmlozzfzm = 1 ; if ( ( nsirjzarrrumsnjdblyt > reqHeight ) || ( jdgosbqtjdfmjqjwzfbh > reqWidth ) ) { final int bvxnjjlnhqfolkkffwgq = nsirjzarrrumsnjdblyt / 2 ; final int umuqhwgybsfcggctvmma = jdgosbqtjdfmjqjwzfbh / 2 ; while ( ( ( bvxnjjlnhqfolkkffwgq / viqdiltefqogmlozzfzm ) > reqHeight ) || ( ( umuqhwgybsfcggctvmma / viqdiltefqogmlozzfzm ) > reqWidth ) ) { viqdiltefqogmlozzfzm *= 2 ; } } return viqdiltefqogmlozzfzm ; }
× fix_prediction_before: public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , int reqWidth , int reqHeight ) { final int height = options.outHeight ; final int width = options.outWidth ; int inSampleSize = 1 ; if ( ( height > reqHeight ) || ( width > reqWidth ) ) { final int halfHeight = height / 2 ; final int halfWidth = width / 2 ; while ( ( ( halfHeight / inSampleSize ) > reqHeight ) && ( ( halfWidth / inSampleSize ) > reqWidth ) ) { inSampleSize *= 2 ; } } return inSampleSize ; }
× fix_prediction_after: public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , int reqWidth , int reqHeight ) { final int nsirjzarrrumsnjdblyt = options.outHeight ; final int jdgosbqtjdfmjqjwzfbh = options.outWidth ; int viqdiltefqogmlozzfzm = 1 ; if ( ( nsirjzarrSoundsnjdblyt > reqHeight ) || ( jdgosbqtjdfmjqjwzfbh > reqWidth ) ) { final int bvxnjjlnhqrouskffwgq = nsirjzarrSoundsnjdblyt / 2 ; final int umuqhwgybsfcggctvmma = jdgosbqtjdfmjqjwzfbh / 2 ; while ( ( ( bvxnjjlnhqfifkffwgq / viqdiltefqogmlozzfzm ) > reqHeight ) && ( ( umuqhwgybsfcggctvmma / viqdilte

line_index: 575
bug_before_refactoring: { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int input = 0 ; java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; do { try { input = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( input < 1 ) || ( input > 2 ) ) ; keyboard . close () ; return input ; } <s> @ java.lang.Override public int makeMove () { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int input = 0 ; java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; do { try { input = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( input < 1 ) || ( input > 2 ) ) ; keyboard . close () ; return input ; } <s> implamented runnig turns and fixed some bugs
bug_after_refactoring: { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int gmoimvdnzqdkhqjbjapd = 0 ; java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; do { try { gmoimvdnzqdkhqjbjapd = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( gmoimvdnzqdkhqjbjapd < 1 ) || ( gmoimvdnzqdkhqjbjapd > 2 ) ) ; keyboard . close () ; return gmoimvdnzqdkhqjbjapd ; } <s> @ java.lang.Override public int makeMove () { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int gmoimvdnzqdkhqjbjapd = 0 ; java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; do { try { gmoimvdnzqdkhqjbjapd = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( gmoimvdnzqdkhqjbjapd < 1 ) || ( gmoimvdnzqdkhqjbjapd > 2 ) ) ; keyboard . close () ; return gmoimvdnzqdkhqjbjapd ; } <s> implamented runnig turns and fixed some bugs
fix_before_refactoring: { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int input = 0 ; do { try { java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; input = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( input < 1 ) || ( input > 2 ) ) ; return input ; }
fix_after_refactoring: { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int gmoimvdnzqdkhqjbjapd = 0 ; do { try { java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; gmoimvdnzqdkhqjbjapd = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( gmoimvdnzqdkhqjbjapd < 1 ) || ( gmoimvdnzqdkhqjbjapd > 2 ) ) ; return gmoimvdnzqdkhqjbjapd ; }
× fix_prediction_before: { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int input = 0 ; do { input = keyboard . nextInt () ; } while ( ( input < 1 ) || ( input > 2 ) ) ; return input ; }
× fix_prediction_after: { java.util.Scanner keyboard = new java.util.Scanner ( java.lang.System.in ) ; int gmoimvdnzqdkhqjbjapd = 0 ; java.lang.System.out . println ( "Make your move (1)Hit or (2)Stay " ) ; do { try { gmoimvdnzqdkhqjbjapd = keyboard . nextInt () ; } catch ( java.util.InputMismatchException e ) {} } while ( ( gmoimvdnzqdkhqjbjapd < 1 ) || ( gmoimvdnzqdkhqjbjapd > 2 ) ) ; return gmoimvdnzqdkhqjbjapd ; }

line_index: 576
bug_before_refactoring: { col_idx [ 0 ] = 0 ; int index = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = index += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; growMaxLength ( nz_length , false ) ; nz_length = index ; } <s> public void colsum ( int [] histogram ) { col_idx [ 0 ] = 0 ; int index = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = index += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; growMaxLength ( nz_length , false ) ; nz_length = index ; } <s> fixed a bug
bug_after_refactoring: { col_idx [ 0 ] = 0 ; int wniqfnkqpiygtogbloep = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = wniqfnkqpiygtogbloep += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; growMaxLength ( nz_length , false ) ; nz_length = wniqfnkqpiygtogbloep ; } <s> public void colsum ( int [] histogram ) { col_idx [ 0 ] = 0 ; int wniqfnkqpiygtogbloep = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = wniqfnkqpiygtogbloep += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; growMaxLength ( nz_length , false ) ; nz_length = wniqfnkqpiygtogbloep ; } <s> fixed a bug
fix_before_refactoring: { col_idx [ 0 ] = 0 ; int index = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = index += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; nz_length = index ; growMaxLength ( nz_length , false ) ; }
fix_after_refactoring: { col_idx [ 0 ] = 0 ; int wniqfnkqpiygtogbloep = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = wniqfnkqpiygtogbloep += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; nz_length = wniqfnkqpiygtogbloep ; growMaxLength ( nz_length , false ) ; }
× fix_prediction_before: { col_idx [ 0 ] = 0 ; int index = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = index += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; growMaxLength ( nz_length , false ) ; nz_length = index ; }
× fix_prediction_after: { col_idx [ 0 ] = 0 ; int wniqfnkqpiygtogbloep = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = wniqfnkqpiygtogbloep += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; growMaxLength ( nz_length , false ) ; nz_length = wniqfnkqpiygtogbloep ; }

line_index: 577
bug_before_refactoring: { double d = distance ( other ) ; for ( int i = 0 ; i < 3 ; i ++ ) { double a = ( ( Constants.G ) * ( other.mass ) ) * ( ( position [ i ] ) - ( other.position [ i ] ) ) ; deltaAccel [ i ] += a / ( ( d * d ) * d ) ; } } <s> public void updateTimestepAccel ( Body other ) { double d = distance ( other ) ; for ( int i = 0 ; i < 3 ; i ++ ) { double a = ( ( Constants.G ) * ( other.mass ) ) * ( ( position [ i ] ) - ( other.position [ i ] ) ) ; deltaAccel [ i ] += a / ( ( d * d ) * d ) ; } } <s> fixing bugs in computations and added check for collisions being calculated.
bug_after_refactoring: { double urmgfdkchdcrphdvrfdx = distance ( other ) ; for ( int i = 0 ; i < 3 ; i ++ ) { double angajmtueltbwewhcbuy = ( ( Constants.G ) * ( other.mass ) ) * ( ( position [ i ] ) - ( other.position [ i ] ) ) ; deltaAccel [ i ] += angajmtueltbwewhcbuy / ( ( urmgfdkchdcrphdvrfdx * urmgfdkchdcrphdvrfdx ) * urmgfdkchdcrphdvrfdx ) ; } } <s> public void updateTimestepAccel ( Body other ) { double urmgfdkchdcrphdvrfdx = distance ( other ) ; for ( int i = 0 ; i < 3 ; i ++ ) { double angajmtueltbwewhcbuy = ( ( Constants.G ) * ( other.mass ) ) * ( ( position [ i ] ) - ( other.position [ i ] ) ) ; deltaAccel [ i ] += angajmtueltbwewhcbuy / ( ( urmgfdkchdcrphdvrfdx * urmgfdkchdcrphdvrfdx ) * urmgfdkchdcrphdvrfdx ) ; } } <s> fixing bugs in computations and added check for collisions being calculated.
fix_before_refactoring: { double d = distance ( other ) ; double sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { double a = ( ( Constants.G ) * ( other.mass ) ) * ( ( other.position [ i ] ) - ( position [ i ] ) ) ; deltaAccel [ i ] += a / ( ( d * d ) * d ) ; sum += deltaAccel [ i ] ; } }
fix_after_refactoring: { double urmgfdkchdcrphdvrfdx = distance ( other ) ; double sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { double angajmtueltbwewhcbuy = ( ( Constants.G ) * ( other.mass ) ) * ( ( other.position [ i ] ) - ( position [ i ] ) ) ; deltaAccel [ i ] += angajmtueltbwewhcbuy / ( ( urmgfdkchdcrphdvrfdx * urmgfdkchdcrphdvrfdx ) * urmgfdkchdcrphdvrfdx ) ; sum += deltaAccel [ i ] ; } }
× fix_prediction_before: { double d = distance ( other ) ; for ( int i = 0 ; i < 3 ; i ++ ) { double a = ( ( Constants.G ) * ( other.mass ) ) * ( ( position [ i ] ) - ( other.position [ i ] ) ) ; deltaAccel [ i ] += a / ( ( d * d ) * d ) ; } }
× fix_prediction_after: { double urmgfdkchdcrphdvrfdx = distance ( other ) ; for ( int i = 0 ; i < 3 ; i ++ ) { double angajmtueltbwewhcbuy = ( ( Constants.G ) * ( other.mass ) ) * ( ( position [ i ] ) - ( other.position [ i ] ) ) ; deltaAccel [ i ] += angajmtueltbwewhcbuy / ( ( urmgfdkchdcrphdvrfdx * urmgfdkchdcrphdvrfdx ) * urmgfdkchdcrphdvrfdx ) ; } }

line_index: 579
bug_before_refactoring: { double translationPower = leftJoystick . getVector () . getMagnitude () ; setTargetHeading () ; double headingError = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double rotationPower = headingDrivePid . calculate ( 0 , headingError ) ; driveSubsystem . tankDrivePowerMode ( ( translationPower + rotationPower ) , ( translationPower - rotationPower ) ) ; } <s> @ java.lang.Override public void execute () { double translationPower = leftJoystick . getVector () . getMagnitude () ; setTargetHeading () ; double headingError = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double rotationPower = headingDrivePid . calculate ( 0 , headingError ) ; driveSubsystem . tankDrivePowerMode ( ( translationPower + rotationPower ) , ( translationPower - rotationPower ) ) ; } <s> Fix test and logic errors
bug_after_refactoring: { double vnelhcfctbbdynbzmfei = leftJoystick . getVector () . getMagnitude () ; setTargetHeading () ; double trngacptregmhxdbjfid = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double vuszivlucveipvzsmidg = headingDrivePid . calculate ( 0 , trngacptregmhxdbjfid ) ; driveSubsystem . tankDrivePowerMode ( ( vnelhcfctbbdynbzmfei + vuszivlucveipvzsmidg ) , ( vnelhcfctbbdynbzmfei - vuszivlucveipvzsmidg ) ) ; } <s> @ java.lang.Override public void execute () { double vnelhcfctbbdynbzmfei = leftJoystick . getVector () . getMagnitude () ; setTargetHeading () ; double trngacptregmhxdbjfid = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double vuszivlucveipvzsmidg = headingDrivePid . calculate ( 0 , trngacptregmhxdbjfid ) ; driveSubsystem . tankDrivePowerMode ( ( vnelhcfctbbdynbzmfei + vuszivlucveipvzsmidg ) , ( vnelhcfctbbdynbzmfei - vuszivlucveipvzsmidg ) ) ; } <s> Fix test and logic errors
fix_before_refactoring: { double translationPower = leftJoystick . getVector () . getMagnitude () ; setTargetHeading () ; double headingError = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double rotationPower = - ( headingDrivePid . calculate ( 0 , headingError ) ) ; driveSubsystem . tankDrivePowerMode ( ( translationPower - rotationPower ) , ( translationPower + rotationPower ) ) ; }
fix_after_refactoring: { double vnelhcfctbbdynbzmfei = leftJoystick . getVector () . getMagnitude () ; setTargetHeading () ; double trngacptregmhxdbjfid = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double vuszivlucveipvzsmidg = - ( headingDrivePid . calculate ( 0 , trngacptregmhxdbjfid ) ) ; driveSubsystem . tankDrivePowerMode ( ( vnelhcfctbbdynbzmfei - vuszivlucveipvzsmidg ) , ( vnelhcfctbbdynbzmfei + vuszivlucveipvzsmidg ) ) ; }
× fix_prediction_before: { double translationPower = leftJoystick . getVector () . getMagnitude () ; double headingError = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double rotationPower = headingDrivePid . calculate ( 0 , headingError ) ; driveSubsystem . tankDrivePowerMode ( ( translationPower + rotationPower ) , ( translationPower - rotationPower ) ) ; }
× fix_prediction_after: { double vnelhcfctbbdynbzmfei = leftJoystick . getVector () . getMagnitude () ; double trngacptregmhxdbjfid = poseSubsystem . getCurrentHeading () . difference ( targetHeadingSupplier . getAsDouble () ) ; double vuszivlucveipvzsmidg = headingDrivePid . calculate ( 0 , trngacptregmhxdbjfidg ) ; driveSubsystem . tankDrivePowerMode ( ( vnelhcfctbbdynbzmfei + vuszivlucveipvzsmidg ) , ( vnelhcfctbbdynbzmfei - vuszivlucveipvzsmidg ) ) ; }

line_index: 580
bug_before_refactoring: { boolean newItem = ! ( this . linkedHashSet . remove ( item ) ) ; if ( newItem ) { this . linkedHashSet . add ( item ) ; } if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return newItem ; } <s> boolean add ( E item ) { boolean newItem = ! ( this . linkedHashSet . remove ( item ) ) ; if ( newItem ) { this . linkedHashSet . add ( item ) ; } if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return newItem ; } <s> Fixed duplicate event issues  and added additional test
bug_after_refactoring: { boolean ewdxssnfzuqtvhvqknte = ! ( this . linkedHashSet . remove ( item ) ) ; if ( ewdxssnfzuqtvhvqknte ) { this . linkedHashSet . add ( item ) ; } if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return ewdxssnfzuqtvhvqknte ; } <s> boolean add ( E item ) { boolean ewdxssnfzuqtvhvqknte = ! ( this . linkedHashSet . remove ( item ) ) ; if ( ewdxssnfzuqtvhvqknte ) { this . linkedHashSet . add ( item ) ; } if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return ewdxssnfzuqtvhvqknte ; } <s> Fixed duplicate event issues  and added additional test
fix_before_refactoring: { boolean newItem = ! ( this . linkedHashSet . remove ( item ) ) ; this . linkedHashSet . add ( item ) ; if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return newItem ; }
fix_after_refactoring: { boolean ewdxssnfzuqtvhvqknte = ! ( this . linkedHashSet . remove ( item ) ) ; this . linkedHashSet . add ( item ) ; if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return ewdxssnfzuqtvhvqknte ; }
× fix_prediction_before: { boolean newItem = ! ( this . linkedHashSet . remove ( item ) ) ; if ( newItem ) { this . linkedHashSet . add ( item ) ; } if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; } return newItem ; }
× fix_prediction_after: { boolean ewdxssnfzuqtvhvqknte = ! ( this . linkedHashSet . remove ( item ) ) ; if ( ewdxssnfzuqtvhvqknte ) { this . linkedHashSet . add ( item ) ; } if ( ( this . listSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; } return ewdxssnfzuqtvhvqknte ; }

line_index: 581
bug_before_refactoring: int valueToInt ( java.lang.Object value , int defaultValue ) { int reply = defaultValue ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { try { reply = java.lang.Integer . valueOf ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.NumberFormatException ex ) {} } return reply ; } <s> int valueToInt ( java.lang.Object value , int defaultValue ) { int reply = defaultValue ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { try { reply = java.lang.Integer . valueOf ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.NumberFormatException ex ) {} } return reply ; } <s> Fixed a few cosmetic issues.
bug_after_refactoring: int valueToInt ( java.lang.Object value , int defaultValue ) { int nravkeyhqpraasjjshsq = defaultValue ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { try { nravkeyhqpraasjjshsq = java.lang.Integer . valueOf ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.NumberFormatException ex ) {} } return nravkeyhqpraasjjshsq ; } <s> int valueToInt ( java.lang.Object value , int defaultValue ) { int nravkeyhqpraasjjshsq = defaultValue ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { try { nravkeyhqpraasjjshsq = java.lang.Integer . valueOf ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.NumberFormatException ex ) {} } return nravkeyhqpraasjjshsq ; } <s> Fixed a few cosmetic issues.
fix_before_refactoring: { reply = defaultValue ; }
fix_after_refactoring: { nravkeyhqpraasjjshsq = defaultValue ; }
× fix_prediction_before: int valueToInt ( java.lang.Object value , int defaultValue ) { int reply = defaultValue ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { try { reply = java.lang.Integer . valueOf ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.NumberFormatException ex ) {} } return reply ; }
× fix_prediction_after: int valueToInt ( java.lang.Object value , int defaultValue ) { int nravkeyhqpraasjjshsq = defaultValue ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { try { nravkeyhqpraasjjshsq = java.lang.Integer . valueOf ( ( ( java.lang.String ) ( value ) ) ) ; } catch ( java.lang.NumberFormatException ex ) {} } return nravkeyhqpraasjjshsq ; }

line_index: 582
bug_before_refactoring: public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean condition ; if ( expected == null ) { condition = actual == null ; } else { condition = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( message , condition ) ; } <s> public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean condition ; if ( expected == null ) { condition = actual == null ; } else { condition = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( message , condition ) ; } <s> Moved message param to last argument Added explicit check for init() call Bug-fix for assertNonNull
bug_after_refactoring: public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean rjhqssaggfznbxadwyrv ; if ( expected == null ) { rjhqssaggfznbxadwyrv = actual == null ; } else { rjhqssaggfznbxadwyrv = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( message , rjhqssaggfznbxadwyrv ) ; } <s> public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean rjhqssaggfznbxadwyrv ; if ( expected == null ) { rjhqssaggfznbxadwyrv = actual == null ; } else { rjhqssaggfznbxadwyrv = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( message , rjhqssaggfznbxadwyrv ) ; } <s> Moved message param to last argument Added explicit check for init() call Bug-fix for assertNonNull
fix_before_refactoring: public static void assertEquals ( java.lang.Object expected , java.lang.Object actual , java.lang.String message ) { boolean condition ; if ( expected == null ) { condition = actual == null ; } else { condition = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( condition , message ) ; }
fix_after_refactoring: public static void assertEquals ( java.lang.Object expected , java.lang.Object actual , java.lang.String message ) { boolean rjhqssaggfznbxadwyrv ; if ( expected == null ) { rjhqssaggfznbxadwyrv = actual == null ; } else { rjhqssaggfznbxadwyrv = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( rjhqssaggfznbxadwyrv , message ) ; }
× fix_prediction_before: public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean condition ; if ( expected == null ) { condition = actual == null ; } else { condition = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( message , condition ) ; }
× fix_prediction_after: public static void assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean rjhqssaggfznbxadwyrv ; if ( expected == null ) { rjhqssaggfznbxadwyrv = actual == null ; } else { rjhqssaggfznbxadwyrv = expected . equals ( actual ) ; } com.triangleleft.assertdialog.AssertDialog . assertTrue ( message , rjhqssaggfznbxadwyrv ) ; }

line_index: 583
bug_before_refactoring: { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; android.content.Context context = getApplicationContext () ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int duration = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( context , dialogText , duration ) . show () ; } <s> private void copyId ( java.lang.String id ) { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; android.content.Context context = getApplicationContext () ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int duration = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( context , dialogText , duration ) . show () ; } <s> Merge branch 'Android_bugfixes'
bug_after_refactoring: { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; android.content.Context context = getApplicationContext () ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int nmgochpxqpukpeothzei = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( context , dialogText , nmgochpxqpukpeothzei ) . show () ; } <s> private void copyId ( java.lang.String id ) { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; android.content.Context context = getApplicationContext () ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int nmgochpxqpukpeothzei = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( context , dialogText , nmgochpxqpukpeothzei ) . show () ; } <s> Merge branch 'Android_bugfixes'
fix_before_refactoring: { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int duration = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( this , dialogText , duration ) . show () ; }
fix_after_refactoring: { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int nmgochpxqpukpeothzei = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( this , dialogText , nmgochpxqpukpeothzei ) . show () ; }
× fix_prediction_before: { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; android.content.Context context = getApplicationContext () ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int duration = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( context , dialogText , duration ) . show () ; }
× fix_prediction_after: { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; android.content.ClipData clip = android.content.ClipData . newPlainText ( "ID" , id ) ; clipboard . setPrimaryClip ( clip ) ; android.content.Context context = getApplicationContext () ; java.lang.CharSequence dialogText = "Object id copied to clipboard" ; int nmgochpxqpukpeothzei = android.widget.Toast.LENGTH_SHORT ; android.widget.Toast . makeText ( context , dialogText , nmgochpxqpukpeothzei ) . show () ; }

line_index: 585
bug_before_refactoring: statsCount - 10 <s> public static void index () { com.google.gson.Gson gson = new com.google.gson.Gson () ; int statsCount = ( ( int ) ( controllers.DailyStat . count () ) ) ; java.util.List < controllers.DailyStat > dailyStats = controllers.DailyStat . all () . from ( ( statsCount - 10 ) ) . fetch ( 5 ) ; if ( dailyStats != null ) { render ( dailyStats ) ; } else { renderHtml ( "empty" ) ; } } <s> fix small bug
bug_after_refactoring: jojtwbtuodfaxpkbfmbp - 10 <s> public static void index () { com.google.gson.Gson gson = new com.google.gson.Gson () ; int statsCount = ( ( int ) ( controllers.DailyStat . count () ) ) ; java.util.List < controllers.DailyStat > dailyStats = controllers.DailyStat . all () . from ( ( jojtwbtuodfaxpkbfmbp - 10 ) ) . fetch ( 5 ) ; if ( dailyStats != null ) { render ( dailyStats ) ; } else { renderHtml ( "empty" ) ; } } <s> fix small bug
fix_before_refactoring: statsCount - 5
fix_after_refactoring: jojtwbtuodfaxpkbfmbp - 5
× fix_prediction_before: statsCount - 1
× fix_prediction_after: jojtwbtuodfaxpkbfmbp - statsCount

line_index: 586
bug_before_refactoring: { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean isHorizontal = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , isHorizontal ) ) ; return m ; } <s> public Move makeMove ( BoardAndRack bar ) { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean isHorizontal = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , isHorizontal ) ) ; return m ; } <s> fixed errors in isValidMove in board class
bug_after_refactoring: { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean fkoixqcboevpfpyqqaqy = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , fkoixqcboevpfpyqqaqy ) ) ; return m ; } <s> public Move makeMove ( BoardAndRack bar ) { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean fkoixqcboevpfpyqqaqy = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , fkoixqcboevpfpyqqaqy ) ) ; return m ; } <s> fixed errors in isValidMove in board class
fix_before_refactoring: { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean isHorizontal = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , isHorizontal ) ) ; java.lang.System.out . println ( m . toString () ) ; return m ; }
fix_after_refactoring: { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean fkoixqcboevpfpyqqaqy = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , fkoixqcboevpfpyqqaqy ) ) ; java.lang.System.out . println ( m . toString () ) ; return m ; }
× fix_prediction_before: { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean isHorizontal = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , isHorizontal ) ) ; return m ; }
× fix_prediction_after: { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean fkoixqcboevpfpyqqaqy = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , fkoixqcboevpfpyqqaqy ) ) ; return m ; }

line_index: 588
bug_before_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
bug_after_refactoring: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; <s> public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } <s> Update problem16.java  Simple fix
fix_before_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
fix_after_refactoring: for ( int i = 0 ; i < ( str . length () ) ; i ++ ) iuzcyaeozmjvvimhjnqq += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
× fix_prediction_before: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ;
× fix_prediction_after: for ( int i = 0 ; i < ( ( str . length () ) - 1 ) ; i ++ ) { sum = ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; }

line_index: 589
bug_before_refactoring: for ( int i = upperBound ; i < lowerBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; maxCandidate = i ; } } <s> public static int findMaxArg ( int upperBound , int lowerBound , int page ) { int maxCandidate = 0 ; java.lang.Double maxCandidateValue = 0.0 ; for ( int i = upperBound ; i < lowerBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; maxCandidate = i ; } } return maxCandidate ; } <s> Fixed logical errors with Viterbi.java
bug_after_refactoring: for ( int i = upperBound ; i < lowerBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; olqzunlapiqukdzyfwar = i ; } } <s> public static int findMaxArg ( int upperBound , int lowerBound , int page ) { int maxCandidate = 0 ; java.lang.Double maxCandidateValue = 0.0 ; for ( int i = upperBound ; i < lowerBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; olqzunlapiqukdzyfwar = i ; } } return maxCandidate ; } <s> Fixed logical errors with Viterbi.java
fix_before_refactoring: for ( int i = lowerBound ; i < upperBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; maxCandidate = i ; } }
fix_after_refactoring: for ( int i = lowerBound ; i < upperBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; olqzunlapiqukdzyfwar = i ; } }
× fix_prediction_before: for ( int i = upperBound ; i <= lowerBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; maxCandidate = i ; } }
× fix_prediction_after: for ( int i = upperBound ; i <= lowerBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; olqzunlapiqukdzyfwar = i ; } }

line_index: 590
bug_before_refactoring: { final boolean res = super . add ( elem ) ; if ( res ) try { lock . lock () ; added . signal () ; } finally { lock . unlock () ; } return res ; } <s> @ java.lang.Override public boolean add ( final E elem ) { final boolean res = super . add ( elem ) ; if ( res ) try { lock . lock () ; added . signal () ; } finally { lock . unlock () ; } return res ; } <s> -fixed starving bug in execution
bug_after_refactoring: { final boolean lwsfgisztbdzgcvvbasr = super . add ( elem ) ; if ( lwsfgisztbdzgcvvbasr ) try { lock . lock () ; added . signal () ; } finally { lock . unlock () ; } return lwsfgisztbdzgcvvbasr ; } <s> @ java.lang.Override public boolean add ( final E elem ) { final boolean lwsfgisztbdzgcvvbasr = super . add ( elem ) ; if ( lwsfgisztbdzgcvvbasr ) try { lock . lock () ; added . signal () ; } finally { lock . unlock () ; } return lwsfgisztbdzgcvvbasr ; } <s> -fixed starving bug in execution
fix_before_refactoring: { boolean res = false ; try { lock . lock () ; res = super . add ( elem ) ; if ( res ) added . signal () ; } finally { lock . unlock () ; } return res ; }
fix_after_refactoring: { boolean lwsfgisztbdzgcvvbasr = false ; try { lock . lock () ; lwsfgisztbdzgcvvbasr = super . add ( elem ) ; if ( lwsfgisztbdzgcvvbasr ) added . signal () ; } finally { lock . unlock () ; } return lwsfgisztbdzgcvvbasr ; }
× fix_prediction_before: { final boolean res = super . add ( elem ) ; if ( res ) try { lock . lock () ; added . signal () ; } finally { lock . unlock () ; } return res ; }
× fix_prediction_after: { final boolean lwsfgisztbdzgcvvbasr = super . add ( elem ) ; if ( lwsfgisztbdzgcvvbasr ) try { lock . lock () ; added . signal () ; } finally { lock . unlock () ; } return lwsfgisztbdzgcvvbasr ; }

line_index: 591
bug_before_refactoring: { boolean isAllNull = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { isAllNull = false ; } } err . reject ( "workspace_selection.required" ) ; } } <s> @ java.lang.Override public void validate ( java.lang.Object obj , org.springframework.validation.Errors err ) { boolean isAllNull = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { isAllNull = false ; } } err . reject ( "workspace_selection.required" ) ; } } <s> QUAD-60 Fixes archive workspace issue
bug_after_refactoring: { boolean wnkerfavadsysvmqcuei = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { wnkerfavadsysvmqcuei = false ; } } err . reject ( "workspace_selection.required" ) ; } } <s> @ java.lang.Override public void validate ( java.lang.Object obj , org.springframework.validation.Errors err ) { boolean wnkerfavadsysvmqcuei = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { wnkerfavadsysvmqcuei = false ; } } err . reject ( "workspace_selection.required" ) ; } } <s> QUAD-60 Fixes archive workspace issue
fix_before_refactoring: { boolean isAllNull = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { isAllNull = false ; break; } } } if ( isAllNull ) { err . reject ( "workspace_selection.required" ) ; } }
fix_after_refactoring: { boolean wnkerfavadsysvmqcuei = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { wnkerfavadsysvmqcuei = false ; break; } } } if ( wnkerfavadsysvmqcuei ) { err . reject ( "workspace_selection.required" ) ; } }
× fix_prediction_before: { boolean isAllNull = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { isAllNull = false ; } } } err . reject ( "workspace_selection.required" ) ; }
× fix_prediction_after: { edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { wnkerfavadsysvmqcuei = false ; } } } err . reject ( "workspace_selection.required" ) ; }

line_index: 592
bug_before_refactoring: if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int count = personBuffer . getCount () ; for ( int i = 0 ; i < count ; i ++ ) {} } finally { personBuffer . close () ; } } else {} <s> @ java.lang.Override public void onResult ( com.google.android.gms.plus.People.LoadPeopleResult peopleData ) { if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int count = personBuffer . getCount () ; for ( int i = 0 ; i < count ; i ++ ) {} } finally { personBuffer . close () ; } } else {} } <s> MainPage cleaning  cleaned the code in preperation to fix the Google login onResume bug. should be less memory consuming now
bug_after_refactoring: if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int vcaylvgbcwnhfduwlpps = personBuffer . getCount () ; for ( int i = 0 ; i < vcaylvgbcwnhfduwlpps ; i ++ ) {} } finally { personBuffer . close () ; } } else {} <s> @ java.lang.Override public void onResult ( com.google.android.gms.plus.People.LoadPeopleResult peopleData ) { if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int vcaylvgbcwnhfduwlpps = personBuffer . getCount () ; for ( int i = 0 ; i < vcaylvgbcwnhfduwlpps ; i ++ ) {} } finally { personBuffer . close () ; } } else {} } <s> MainPage cleaning  cleaned the code in preperation to fix the Google login onResume bug. should be less memory consuming now
fix_before_refactoring: if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int count = personBuffer . getCount () ; } finally { personBuffer . close () ; } }
fix_after_refactoring: if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int vcaylvgbcwnhfduwlpps = personBuffer . getCount () ; } finally { personBuffer . close () ; } }
× fix_prediction_before: if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int count = personBuffer . getCount () ; for ( int i = 0 ; i < count ; i ++ ) {} } finally { personBuffer . close () ; } }
× fix_prediction_after: if ( ( peopleData . getStatus () . getStatusCode () ) == ( com.google.android.gms.common.api.CommonStatusCodes.SUCCESS ) ) { com.google.android.gms.plus.model.people.PersonBuffer personBuffer = peopleData . getPersonBuffer () ; try { int vcaylvgbcwnhfduwlpps = personBuffer . getCount () ; for ( int i = 0 ; i < vcaylvgbcwnhfduwlpps ; i ++ ) {} } finally {} }

line_index: 593
bug_before_refactoring: if ( ( label > 0 ) && ( label < minMatchingLabel ) ) { minMatchingLabel = label ; } <s> private static int getMinMatchingLabel ( LabeledNeighbor [] neighbors , byte currentColorValue ) { int minMatchingLabel = java.lang.Integer.MAX_VALUE ; for ( LabeledNeighbor neighbor : neighbors ) { int label = neighbor . getLabel () ; if ( ( label > 0 ) && ( label < minMatchingLabel ) ) { minMatchingLabel = label ; } } if ( minMatchingLabel != ( java.lang.Integer.MAX_VALUE ) ) { return minMatchingLabel ; } else { return 0 ; } } <s> Fixed bug in vision code
bug_after_refactoring: if ( ( zluxltotrcsejgaqxije > 0 ) && ( zluxltotrcsejgaqxije < bhfjkxppfjqygcukacpb ) ) { bhfjkxppfjqygcukacpb = zluxltotrcsejgaqxije ; } <s> private static int getMinMatchingLabel ( LabeledNeighbor [] neighbors , byte currentColorValue ) { int minMatchingLabel = java.lang.Integer.MAX_VALUE ; for ( LabeledNeighbor neighbor : neighbors ) { int label = neighbor . getLabel () ; if ( ( zluxltotrcsejgaqxije > 0 ) && ( zluxltotrcsejgaqxije < bhfjkxppfjqygcukacpb ) ) { bhfjkxppfjqygcukacpb = zluxltotrcsejgaqxije ; } } if ( minMatchingLabel != ( java.lang.Integer.MAX_VALUE ) ) { return minMatchingLabel ; } else { return 0 ; } } <s> Fixed bug in vision code
fix_before_refactoring: if ( ( ( label > 0 ) && ( label < minMatchingLabel ) ) && ( currentColorValue == ( neighbor . getColor () ) ) ) { minMatchingLabel = label ; }
fix_after_refactoring: if ( ( ( zluxltotrcsejgaqxije > 0 ) && ( zluxltotrcsejgaqxije < bhfjkxppfjqygcukacpb ) ) && ( currentColorValue == ( neighbor . getColor () ) ) ) { bhfjkxppfjqygcukacpb = zluxltotrcsejgaqxije ; }
× fix_prediction_before: if ( label >= 0 ) { minMatchingLabel = label ; }
× fix_prediction_after: if ( ( zluxltotrcsejgaqxije > 0 ) || ( zluxltotrcsejgaqxije < bhfjkxppfjqygcukacpb ) ) { bhfjkxppfjqygcukacpb = zluxltotrcsejgaqxije ; }

line_index: 594
bug_before_refactoring: { super . onDestroy () ; for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int result = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , result ) ; } } <s> @ java.lang.Override protected void onDestroy () { super . onDestroy () ; for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int result = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , result ) ; } } <s> Fix bug where app crash on rotation when viewing system permission dialog.
bug_after_refactoring: { super . onDestroy () ; for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int vywalkuszkedrwjqxsuh = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , vywalkuszkedrwjqxsuh ) ; } } <s> @ java.lang.Override protected void onDestroy () { super . onDestroy () ; for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int vywalkuszkedrwjqxsuh = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , vywalkuszkedrwjqxsuh ) ; } } <s> Fix bug where app crash on rotation when viewing system permission dialog.
fix_before_refactoring: { super . onDestroy () ; if ( ( mReceivedPermissions ) == null ) { return; } for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int result = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , result ) ; } }
fix_after_refactoring: { super . onDestroy () ; if ( ( mReceivedPermissions ) == null ) { return; } for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int vywalkuszkedrwjqxsuh = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , vywalkuszkedrwjqxsuh ) ; } }
× fix_prediction_before: { super . onDestroy () ; for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int result = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , result ) ; } }
× fix_prediction_after: { super . onDestroy () ; for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int vywalkuszkedrwjqxsuh = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , vywalkuszkedrwjqxsuh ) ; } }

line_index: 595
bug_before_refactoring: if ( t > 10000 ) { t -= 10000 ; type ++ ; } <s> @ java.lang.Override public r48.RubyIO targetToBound ( r48.RubyIO target ) { long t = target.fixnumVal ; long type = 0 ; if ( t > 10000 ) { t -= 10000 ; type ++ ; } r48.RubyIO base = new r48.RubyIO () ; base.arrVal = new r48.RubyIO [ 2 ] ; base.type = '[' ; base.arrVal [ 0 ] = new r48.RubyIO () . setFX ( type ) ; base.arrVal [ 1 ] = new r48.RubyIO () . setFX ( t ) ; return base ; } <s> Fix small editing issues with PPP values
bug_after_refactoring: if ( znithxqdopxksvbmcziq > 10000 ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; } <s> @ java.lang.Override public r48.RubyIO targetToBound ( r48.RubyIO target ) { long t = target.fixnumVal ; long type = 0 ; if ( znithxqdopxksvbmcziq > 10000 ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; } r48.RubyIO base = new r48.RubyIO () ; base.arrVal = new r48.RubyIO [ 2 ] ; base.type = '[' ; base.arrVal [ 0 ] = new r48.RubyIO () . setFX ( type ) ; base.arrVal [ 1 ] = new r48.RubyIO () . setFX ( t ) ; return base ; } <s> Fix small editing issues with PPP values
fix_before_refactoring: if ( t >= 10000 ) { t -= 10000 ; type ++ ; }
fix_after_refactoring: if ( znithxqdopxksvbmcziq >= 10000 ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; }
× fix_prediction_before: if ( t < 10000 ) { t -= 10000 ; }
× fix_prediction_after: if ( ( znithxqdopxksvbmcziq >= 10000 ) && ( znithxqdopxksvbmcziq <= 10000 ) ) { znithxqdopxksvbmcziq -= 10000 ; gzilnpdfnymammfqxhkm ++ ; }

line_index: 596
bug_before_refactoring: int n ; <s> public static void main ( java.lang.String [] args ) { java.util.Scanner scanIn = new java.util.Scanner ( java.lang.System.in ) ; int n ; java.lang.System.out . print ( "Nhap so n: " ) ; n = scanIn . nextInt () ; java.lang.System.out . print ( ( ( ( "Tong cac so chan nho hon " + n ) + " la:" ) + ( tinhtongdemo.TinhTongDemo . TinhTong ( n ) ) ) ) ; } <s> Bai Tap Tuan 3  Fix bugs
bug_after_refactoring: int atcmusoaobnucloeeklj ; <s> public static void main ( java.lang.String [] args ) { java.util.Scanner scanIn = new java.util.Scanner ( java.lang.System.in ) ; int atcmusoaobnucloeeklj ; java.lang.System.out . print ( "Nhap so n: " ) ; n = scanIn . nextInt () ; java.lang.System.out . print ( ( ( ( "Tong cac so chan nho hon " + n ) + " la:" ) + ( tinhtongdemo.TinhTongDemo . TinhTong ( n ) ) ) ) ; } <s> Bai Tap Tuan 3  Fix bugs
fix_before_refactoring: long n ;
fix_after_refactoring: long atcmusoaobnucloeeklj ;
× fix_prediction_before: java.lang.Long n = scanIn . nextLong () ;
× fix_prediction_after: java.lang.String atcmusoaobnucloeeklj ;

line_index: 597
bug_before_refactoring: { int fragLen = negValue - posValue ; if ( ( fragLen > 0 ) && ( fragLen <= 2000 ) ) { ( getCounts () [ ( fragLen - 1 ) ] ) ++ ; } } <s> public void calculateFragLen () { java.util.Collections . sort ( getPosTags () ) ; for ( int posValue : getPosTags () ) { java.util.Set < java.lang.Integer > subList = getNegTags () . subSet ( posValue , ( posValue + 5000 ) ) ; for ( int negValue : subList ) { int fragLen = negValue - posValue ; if ( ( fragLen > 0 ) && ( fragLen <= 2000 ) ) { ( getCounts () [ ( fragLen - 1 ) ] ) ++ ; } } } } <s> fixed error with null pointer and -1 frag lengths
bug_after_refactoring: { int twffqezataecrsjnqpic = negValue - posValue ; if ( ( twffqezataecrsjnqpic > 0 ) && ( twffqezataecrsjnqpic <= 2000 ) ) { ( getCounts () [ ( twffqezataecrsjnqpic - 1 ) ] ) ++ ; } } <s> public void calculateFragLen () { java.util.Collections . sort ( getPosTags () ) ; for ( int posValue : getPosTags () ) { java.util.Set < java.lang.Integer > subList = getNegTags () . subSet ( posValue , ( posValue + 5000 ) ) ; for ( int negValue : subList ) { int twffqezataecrsjnqpic = negValue - posValue ; if ( ( twffqezataecrsjnqpic > 0 ) && ( twffqezataecrsjnqpic <= 2000 ) ) { ( getCounts () [ ( twffqezataecrsjnqpic - 1 ) ] ) ++ ; } } } } <s> fixed error with null pointer and -1 frag lengths
fix_before_refactoring: { fragLen = negValue - posValue ; if ( ( ( fragLen ) > 0 ) && ( ( fragLen ) <= 2000 ) ) { ( getCounts () [ ( ( fragLen ) - 1 ) ] ) ++ ; } }
fix_after_refactoring: { twffqezataecrsjnqpic = negValue - posValue ; if ( ( ( twffqezataecrsjnqpic ) > 0 ) && ( ( twffqezataecrsjnqpic ) <= 2000 ) ) { ( getCounts () [ ( ( twffqezataecrsjnqpic ) - 1 ) ] ) ++ ; } }
× fix_prediction_before: { int fragLen = negValue - posValue ; if ( ( fragLen > 0 ) && ( fragLen <= 2000 ) ) { ( getCounts () [ ( fragLen - 1 ) ] ) ++ ; } }
× fix_prediction_after: { int twffqezataecrsjnqpic = negValue - posValue ; if ( ( twffqezataecrsjnqpic > 0 ) && ( twffqezataecrsjnqpic <= 2000 ) ) { ( getCounts () [ ( twffqezataecrsjnqpic - 1 ) ] ) ++ ; } }

line_index: 598
bug_before_refactoring: { double inches ; double meters ; counter = 0 ; for ( inches = 1 ; inches <= 144 ; inches ++ ) meters = inches / 39.37 ; java.lang.System.out . println ( ( ( ( inches + "inches is " ) + meters ) + "meters." ) ) ; ( counter ) ++ ; if ( ( counter ) == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } <s> public static void main ( java.lang.String [] args ) { double inches ; double meters ; counter = 0 ; for ( inches = 1 ; inches <= 144 ; inches ++ ) meters = inches / 39.37 ; java.lang.System.out . println ( ( ( ( inches + "inches is " ) + meters ) + "meters." ) ) ; ( counter ) ++ ; if ( ( counter ) == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } <s> fixed errors
bug_after_refactoring: { double dsoolfyfqnjdiceuvrcu ; double tcktvhounlwugcdsvwnc ; counter = 0 ; for ( dsoolfyfqnjdiceuvrcu = 1 ; dsoolfyfqnjdiceuvrcu <= 144 ; dsoolfyfqnjdiceuvrcu ++ ) tcktvhounlwugcdsvwnc = dsoolfyfqnjdiceuvrcu / 39.37 ; java.lang.System.out . println ( ( ( ( dsoolfyfqnjdiceuvrcu + "dsoolfyfqnjdiceuvrcu is " ) + tcktvhounlwugcdsvwnc ) + "tcktvhounlwugcdsvwnc." ) ) ; ( counter ) ++ ; if ( ( counter ) == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } <s> public static void main ( java.lang.String [] args ) { double dsoolfyfqnjdiceuvrcu ; double tcktvhounlwugcdsvwnc ; counter = 0 ; for ( dsoolfyfqnjdiceuvrcu = 1 ; dsoolfyfqnjdiceuvrcu <= 144 ; dsoolfyfqnjdiceuvrcu ++ ) tcktvhounlwugcdsvwnc = dsoolfyfqnjdiceuvrcu / 39.37 ; java.lang.System.out . println ( ( ( ( dsoolfyfqnjdiceuvrcu + "dsoolfyfqnjdiceuvrcu is " ) + tcktvhounlwugcdsvwnc ) + "tcktvhounlwugcdsvwnc." ) ) ; ( counter ) ++ ; if ( ( counter ) == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } <s> fixed errors
fix_before_refactoring: { double inches ; double meters ; int counter ; counter = 0 ; for ( inches = 1 ; inches <= 144 ; inches ++ ) { meters = inches / 39.37 ; java.lang.System.out . println ( ( ( ( inches + "inches is " ) + meters ) + "meters." ) ) ; counter ++ ; if ( counter == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } }
fix_after_refactoring: { double dsoolfyfqnjdiceuvrcu ; double tcktvhounlwugcdsvwnc ; int counter ; counter = 0 ; for ( dsoolfyfqnjdiceuvrcu = 1 ; dsoolfyfqnjdiceuvrcu <= 144 ; dsoolfyfqnjdiceuvrcu ++ ) { tcktvhounlwugcdsvwnc = dsoolfyfqnjdiceuvrcu / 39.37 ; java.lang.System.out . println ( ( ( ( dsoolfyfqnjdiceuvrcu + "dsoolfyfqnjdiceuvrcu is " ) + tcktvhounlwugcdsvwnc ) + "tcktvhounlwugcdsvwnc." ) ) ; counter ++ ; if ( counter == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } }
× fix_prediction_before: { double inches ; double meters ; counter = 0 ; for ( inches = 1 ; inches <= 144 ; inches ++ ) meters = inches / 39.37 ; java.lang.System.out . println ( ( ( ( inches + " inches is " ) + meters ) + "meters." ) ) ; ( counter ) ++ ; if ( ( counter ) == 12 ) { java.lang.System.out . println () ; counter = 0 ; } }
× fix_prediction_after: { double dsoolfyfqnjdiceuvrcu ; double tcktvhounlwugcdsvwnc ; counter = 0 ; for ( dsoolfyfqnjdiceuvrcu = 1 ; dsoolfyfqnjdiceuvrcu <= 144 ; dsoolfyfqnjdiceuvrcu ++ ) tcktvhounlwugcdsvwnc = dsoolfyfqnjdiceuvrcu / 39.37 ; java.lang.System.out . println ( ( ( ( dsoolfyfqnjdiceuvrcu + "dsoolfyfqnjdiceuvrcu is " ) + tcktvhounlwugcdsvwnc ) + "tcktvhounlwugcdsvwnc." ) ) ; ( counter ) ++ ; if ( ( counter ) == 12 ) { java.lang.System.out . println () ; counter = 0 ; } }

line_index: 599
bug_before_refactoring: { Common.Message listMsg ; java.lang.String content = "" ; for ( Common.User item : this . usersList ) { int i = 0 ; if ( i == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } i ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; } <s> public Common.Message toMessage () { Common.Message listMsg ; java.lang.String content = "" ; for ( Common.User item : this . usersList ) { int i = 0 ; if ( i == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } i ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; } <s> USERS LIST FIX COMMIT  the problem was with the toMessage method where it always made the content contain the newst username because of a counter i variable being initialized with 0 at the start of the loop
bug_after_refactoring: { Common.Message listMsg ; java.lang.String content = "" ; for ( Common.User item : this . usersList ) { int chgzmtkcwizrodqybmhs = 0 ; if ( chgzmtkcwizrodqybmhs == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } chgzmtkcwizrodqybmhs ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; } <s> public Common.Message toMessage () { Common.Message listMsg ; java.lang.String content = "" ; for ( Common.User item : this . usersList ) { int chgzmtkcwizrodqybmhs = 0 ; if ( chgzmtkcwizrodqybmhs == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } chgzmtkcwizrodqybmhs ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; } <s> USERS LIST FIX COMMIT  the problem was with the toMessage method where it always made the content contain the newst username because of a counter i variable being initialized with 0 at the start of the loop
fix_before_refactoring: { Common.Message listMsg ; java.lang.String content = "" ; int i = 0 ; for ( Common.User item : this . usersList ) { if ( i == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } i ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; }
fix_after_refactoring: { Common.Message listMsg ; java.lang.String content = "" ; int chgzmtkcwizrodqybmhs = 0 ; for ( Common.User item : this . usersList ) { if ( chgzmtkcwizrodqybmhs == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } chgzmtkcwizrodqybmhs ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; }
× fix_prediction_before: { Common.Message listMsg ; java.lang.String content = "" ; for ( Common.User item : this . usersList ) { int i = 0 ; if ( i == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } i ++ ; } listMsg = new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; return listMsg ; }
× fix_prediction_after: { Common.Message listMsg ; java.lang.String content = "" ; for ( Common.User item : this . usersList ) { int chgzmtkcwizrodqybmhs = 0 ; if ( chgzmtkcwizrodqybmhs == 0 ) { content = item . getUsername () ; } else { content = ( content + " " ) + ( item . getUsername () ) ; } chgzmtkcwizrodqybmhs ++ ; } return new Common.Message ( content , new Common.User ( "Server" ) , MessageType.DATA ) ; }

line_index: 600
bug_before_refactoring: size = chartView.data . get ( 0 ) . size () <s> protected java.util.ArrayList < java.lang.String > getLabelsFromData () { int size = chartView.data . get ( 0 ) . size () ; java.util.ArrayList < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( size ) ; for ( int i = 0 ; i < size ; i ++ ) result . add ( chartView.data . get ( 0 ) . getLabel ( i ) ) ; return result ; } <s> fix issue with library
bug_after_refactoring: gbzslrffqyxfhhvnbmxn = chartView.data . get ( 0 ) . gbzslrffqyxfhhvnbmxn () <s> protected java.util.ArrayList < java.lang.String > getLabelsFromData () { int gbzslrffqyxfhhvnbmxn = chartView.data . get ( 0 ) . gbzslrffqyxfhhvnbmxn () ; java.util.ArrayList < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( size ) ; for ( int i = 0 ; i < size ; i ++ ) result . add ( chartView.data . get ( 0 ) . getLabel ( i ) ) ; return result ; } <s> fix issue with library
fix_before_refactoring: size = ( ( chartView.data . size () ) > 0 ) ? chartView.data . get ( 0 ) . size () : 0
fix_after_refactoring: gbzslrffqyxfhhvnbmxn = ( ( chartView.data . gbzslrffqyxfhhvnbmxn () ) > 0 ) ? chartView.data . get ( 0 ) . gbzslrffqyxfhhvnbmxn () : 0
× fix_prediction_before: size = ( chartView.data . size () ) - 1
× fix_prediction_after: gbzslrffqyxfhhvnbmxn = new java.util.ArrayList < java.lang.String > ( chartView.data . get ( 0 ) . gbzslrffqyxfhhvnbmxn () )

line_index: 601
bug_before_refactoring: org.junit.Assert . assertEquals ( numberOfSequencesToGenerate , sgenLarger . getTotalSequencesIterated () ) ; <s> @ org.junit.Test public void getTotalSequencesIterated ( ) throws java.lang.Exception { randoop.generation.exhaustive.SequenceGenerator < java.lang.String > sgenLarger = new randoop.generation.exhaustive.SequenceGenerator ( largerSet ) ; long beforeIterateLarger = sgenLarger . getTotalSequencesIterated () . longValue () ; int numberOfSequencesToGenerate = 13 ; for ( int i = 0 ; i < numberOfSequencesToGenerate ; i ++ ) { sgenLarger . next () ; } org.junit.Assert . assertEquals ( 0 , beforeIterateLarger ) ; org.junit.Assert . assertEquals ( numberOfSequencesToGenerate , sgenLarger . getTotalSequencesIterated () ) ; } <s> - Fixed a bug in the generation resumption when the size to be resumed is different from the number of elements in the set.
bug_after_refactoring: org.junit.Assert . assertEquals ( uvgspktqqhnmruqjdqmp , sgenLarger . getTotalSequencesIterated () ) ; <s> @ org.junit.Test public void getTotalSequencesIterated ( ) throws java.lang.Exception { randoop.generation.exhaustive.SequenceGenerator < java.lang.String > sgenLarger = new randoop.generation.exhaustive.SequenceGenerator ( largerSet ) ; long beforeIterateLarger = sgenLarger . getTotalSequencesIterated () . longValue () ; int numberOfSequencesToGenerate = 13 ; for ( int i = 0 ; i < numberOfSequencesToGenerate ; i ++ ) { sgenLarger . next () ; } org.junit.Assert . assertEquals ( 0 , beforeIterateLarger ) ; org.junit.Assert . assertEquals ( uvgspktqqhnmruqjdqmp , sgenLarger . getTotalSequencesIterated () ) ; } <s> - Fixed a bug in the generation resumption when the size to be resumed is different from the number of elements in the set.
fix_before_refactoring: org.junit.Assert . assertEquals ( numberOfSequencesToGenerate , sgenLarger . getTotalSequencesIterated () . intValue () ) ;
fix_after_refactoring: org.junit.Assert . assertEquals ( uvgspktqqhnmruqjdqmp , sgenLarger . getTotalSequencesIterated () . intValue () ) ;
× fix_prediction_before: org.junit.Assert . assertEquals ( numberOfSequencesToGenerate , sgenLarger . getTotalSequencesIterated () ) ;
× fix_prediction_after: org.junit.Assert . assertEquals ( uvgspktqqhnmruqjdqmp , sgenLarger . getTotalSequencesIterated () ) ;

line_index: 602
bug_before_refactoring: { boolean doneReading = readPage () ; if ( doneReading ) { return true ; } doneReading = processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ; if ( doneReading ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; doneReading = checkVectorCapacityReached () ; if ( doneReading ) { return true ; } return false ; } <s> public boolean determineSize ( long recordsReadInCurrentPass , java.lang.Integer lengthVarFieldsInCurrentRecord ) throws java.io.IOException { boolean doneReading = readPage () ; if ( doneReading ) { return true ; } doneReading = processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ; if ( doneReading ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; doneReading = checkVectorCapacityReached () ; if ( doneReading ) { return true ; } return false ; } <s> DRILL-5266: Parquet returns low-density batches  Fixes one glaring problem related to bit/byte confusion.  Includes a few clean-up items found along the way.
bug_after_refactoring: { boolean aclycpadabrxkrjiuxwr = readPage () ; if ( aclycpadabrxkrjiuxwr ) { return true ; } aclycpadabrxkrjiuxwr = processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ; if ( aclycpadabrxkrjiuxwr ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; aclycpadabrxkrjiuxwr = checkVectorCapacityReached () ; if ( aclycpadabrxkrjiuxwr ) { return true ; } return false ; } <s> public boolean determineSize ( long recordsReadInCurrentPass , java.lang.Integer lengthVarFieldsInCurrentRecord ) throws java.io.IOException { boolean aclycpadabrxkrjiuxwr = readPage () ; if ( aclycpadabrxkrjiuxwr ) { return true ; } aclycpadabrxkrjiuxwr = processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ; if ( aclycpadabrxkrjiuxwr ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; aclycpadabrxkrjiuxwr = checkVectorCapacityReached () ; if ( aclycpadabrxkrjiuxwr ) { return true ; } return false ; } <s> DRILL-5266: Parquet returns low-density batches  Fixes one glaring problem related to bit/byte confusion.  Includes a few clean-up items found along the way.
fix_before_refactoring: { if ( readPage () ) { return true ; } if ( processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; return checkVectorCapacityReached () ; }
fix_after_refactoring: { if ( readPage () ) { return true ; } if ( processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; return checkVectorCapacityReached () ; }
× fix_prediction_before: { boolean doneReading = readPage () ; if ( doneReading ) { return true ; } doneReading = processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ; if ( doneReading ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; doneReading = checkVectorCapacityReached () ; if ( doneReading ) { return true ; } return false ; }
× fix_prediction_after: { boolean aclycpadabrxkrjiuxwr = readPage () ; if ( aclycpadabrxkrjiuxwr ) { return true ; } aclycpadabrxkrjiuxwr = processPageData ( ( ( int ) ( recordsReadInCurrentPass ) ) ) ; if ( aclycpadabrxkrjiuxwr ) { return true ; } lengthVarFieldsInCurrentRecord = - 1 ; aclycpadabrxkrjiuxwr = checkVectorCapacityReached () ; if ( aclycpadabrxkrjiuxwr ) { return true ; } return false ; }

line_index: 603
bug_before_refactoring: { int sourceNodeCount = sourceNodes . size () ; if ( ( ( sourceNodes ) != null ) && ( index < sourceNodeCount ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int sinkIndex = ( ( sourceNodes ) == null ) ? index : index - sourceNodeCount ; return sinkNodes . get ( sinkIndex ) ; } throw new java.lang.IndexOutOfBoundsException () ; } <s> @ java.lang.Override public N getNodeAt ( int index ) { int sourceNodeCount = sourceNodes . size () ; if ( ( ( sourceNodes ) != null ) && ( index < sourceNodeCount ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int sinkIndex = ( ( sourceNodes ) == null ) ? index : index - sourceNodeCount ; return sinkNodes . get ( sinkIndex ) ; } throw new java.lang.IndexOutOfBoundsException () ; } <s> Fixes for issues introduced in cleanup
bug_after_refactoring: { int gzzthxrqodjkkkhxcvll = sourceNodes . size () ; if ( ( ( sourceNodes ) != null ) && ( index < gzzthxrqodjkkkhxcvll ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int oygwzsybhspejpgtniuh = ( ( sourceNodes ) == null ) ? index : index - gzzthxrqodjkkkhxcvll ; return sinkNodes . get ( oygwzsybhspejpgtniuh ) ; } throw new java.lang.IndexOutOfBoundsException () ; } <s> @ java.lang.Override public N getNodeAt ( int index ) { int gzzthxrqodjkkkhxcvll = sourceNodes . size () ; if ( ( ( sourceNodes ) != null ) && ( index < gzzthxrqodjkkkhxcvll ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int oygwzsybhspejpgtniuh = ( ( sourceNodes ) == null ) ? index : index - gzzthxrqodjkkkhxcvll ; return sinkNodes . get ( oygwzsybhspejpgtniuh ) ; } throw new java.lang.IndexOutOfBoundsException () ; } <s> Fixes for issues introduced in cleanup
fix_before_refactoring: { if ( ( ( sourceNodes ) != null ) && ( index < ( sourceNodes . size () ) ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int sinkIndex = ( ( sourceNodes ) == null ) ? index : index - ( sourceNodes . size () ) ; return sinkNodes . get ( sinkIndex ) ; } throw new java.lang.IndexOutOfBoundsException () ; }
fix_after_refactoring: { if ( ( ( sourceNodes ) != null ) && ( index < ( sourceNodes . size () ) ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int oygwzsybhspejpgtniuh = ( ( sourceNodes ) == null ) ? index : index - ( sourceNodes . size () ) ; return sinkNodes . get ( oygwzsybhspejpgtniuh ) ; } throw new java.lang.IndexOutOfBoundsException () ; }
× fix_prediction_before: { int sourceNodeCount = sourceNodes . size () ; if ( ( ( sourceNodes ) != null ) && ( index < sourceNodeCount ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int sinkIndex = ( ( sourceNodes ) == null ) ? index : index - sourceNodeCount ; return sinkNodes . get ( sinkIndex ) ; } throw new java.lang.IndexOutOfBoundsException () ; }
× fix_prediction_after: { int gzzthxrqodjkkkhxcvll = sourceNodes . size () ; if ( ( ( sourceNodes ) != null ) && ( index < gzzthxrqodjkkkhxcvll ) ) { return sourceNodes . get ( index ) ; } if ( ( sinkNodes ) != null ) { int oygwzsybhspejpgtniuh = ( ( sourceNodes ) == null ) ? index : index - gzzthxrqodjkkkhxcvll ; return sinkNodes . get ( oygwzsybhspejpgtniuh ) ; } throw new java.lang.IndexOutOfBoundsException () ; }

line_index: 605
bug_before_refactoring: if ( ( args.length ) != 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } <s> public static void main ( java.lang.String [] args ) { if ( ( args.length ) != 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } } <s> Fix error
bug_after_refactoring: if ( ( args.length ) != 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } <s> public static void main ( java.lang.String [] args ) { if ( ( args.length ) != 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; } } <s> Fix error
fix_before_refactoring: if ( ( args.length ) == 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }
fix_after_refactoring: if ( ( args.length ) == 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }
× fix_prediction_before: if ( ( args.length ) != 1 ) { try { int starWarsSequence = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + starWarsSequence ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }
× fix_prediction_after: if ( ( args.length ) != 1 ) { try { int hwasckqycgitkxswhwpr = java.lang.Integer . parseInt ( args [ 0 ] ) ; java.lang.System.out . println ( ( "Star Wars sequance: " + hwasckqycgitkxswhwpr ) ) ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.err . println ( ( ( "Argument" + ( args [ 0 ] ) ) + " must be an integer." ) ) ; java.lang.System . exit ( 2 ) ; } } else { java.lang.System.err . println ( "There must be exactly 1 argument." ) ; java.lang.System . exit ( 1 ) ; }

line_index: 606
bug_before_refactoring: { int id = item . getItemId () ; switch ( id ) { case android.R.id.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; } if ( id == ( R.id.action_settings ) ) { return true ; } return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item . getItemId () ; switch ( id ) { case android.R.id.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; } if ( id == ( R.id.action_settings ) ) { return true ; } return super . onOptionsItemSelected ( item ) ; } <s> fixed several bugs including back button issue
bug_after_refactoring: { int heswcxnpvnbqzkcoejhp = item . getItemId () ; switch ( heswcxnpvnbqzkcoejhp ) { case android.R.heswcxnpvnbqzkcoejhp.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; } if ( heswcxnpvnbqzkcoejhp == ( R.heswcxnpvnbqzkcoejhp.action_settings ) ) { return true ; } return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int heswcxnpvnbqzkcoejhp = item . getItemId () ; switch ( heswcxnpvnbqzkcoejhp ) { case android.R.heswcxnpvnbqzkcoejhp.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; } if ( heswcxnpvnbqzkcoejhp == ( R.heswcxnpvnbqzkcoejhp.action_settings ) ) { return true ; } return super . onOptionsItemSelected ( item ) ; } <s> fixed several bugs including back button issue
fix_before_refactoring: { int id = item . getItemId () ; switch ( id ) { case android.R.id.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; case R.id.action_settings : return true ; } return super . onOptionsItemSelected ( item ) ; }
fix_after_refactoring: { int heswcxnpvnbqzkcoejhp = item . getItemId () ; switch ( heswcxnpvnbqzkcoejhp ) { case android.R.heswcxnpvnbqzkcoejhp.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; case R.heswcxnpvnbqzkcoejhp.action_settings : return true ; } return super . onOptionsItemSelected ( item ) ; }
× fix_prediction_before: { int id = item . getItemId () ; switch ( id ) { case android.R.id.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
× fix_prediction_after: { switch ( heswcxnpvnbqzkcoejhp ) { case android.R.heswcxnpvnbqzkcoejhp.home : android.util.Log . d ( "hi" , android.support.v4.app.NavUtils . getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils . navigateUpFromSameTask ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }

line_index: 607
bug_before_refactoring: { int r = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ) ) ; int c = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ) ) ; return zones [ ( ( r * ( cols ) ) + c ) ] ; } <s> public org.matsim.contrib.zone.Zone getZone ( org.matsim.contrib.zone.Coord coord ) { int r = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ) ) ; int c = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ) ) ; return zones [ ( ( r * ( cols ) ) + c ) ] ; } <s> bugfix in calculating zone idx from coords
bug_after_refactoring: { int rqqhhxzakoxyqabzebwk = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ) ) ; int bhahdeonsbrwieivymhz = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ) ) ; return zones [ ( ( rqqhhxzakoxyqabzebwk * ( cols ) ) + bhahdeonsbrwieivymhz ) ] ; } <s> public org.matsim.contrib.zone.Zone getZone ( org.matsim.contrib.zone.Coord coord ) { int rqqhhxzakoxyqabzebwk = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ) ) ; int bhahdeonsbrwieivymhz = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ) ) ; return zones [ ( ( rqqhhxzakoxyqabzebwk * ( cols ) ) + bhahdeonsbrwieivymhz ) ] ; } <s> bugfix in calculating zone idx from coords
fix_before_refactoring: { int r = ( ( int ) ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ; int c = ( ( int ) ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ; return zones [ ( ( r * ( cols ) ) + c ) ] ; }
fix_after_refactoring: { int rqqhhxzakoxyqabzebwk = ( ( int ) ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ; int bhahdeonsbrwieivymhz = ( ( int ) ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ; return zones [ ( ( rqqhhxzakoxyqabzebwk * ( cols ) ) + bhahdeonsbrwieivymhz ) ] ; }
× fix_prediction_before: { int r = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ) ) ; int c = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ) ) ; return zones [ ( ( r * ( cols ) ) + c ) ] ; }
× fix_prediction_after: { int rqqhhxzakoxyqabzebwk = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( minY ) ) / ( cellSize ) ) ) ) ) ; int bhahdeonsbrwieivymhz = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( minX ) ) / ( cellSize ) ) ) ) ) ; return zones [ ( ( rqqhhxzakoxyqabzebwk * ( cols ) ) + bhahdeonsbrieivymhz ) ] ; }

line_index: 608
bug_before_refactoring: { int n = contexts . size () ; for ( n -= 1 ; n >= 0 ; n -- ) { MiniJavaVar findRes = contexts . get ( n ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } java.lang.System.err . printf ( "Runtime Error: identifier %s not found.\n" , varName ) ; return MiniJavaVar . makeVoid () ; } <s> public MiniJavaVar findVar ( java.lang.String varName ) { int n = contexts . size () ; for ( n -= 1 ; n >= 0 ; n -- ) { MiniJavaVar findRes = contexts . get ( n ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } java.lang.System.err . printf ( "Runtime Error: identifier %s not found.\n" , varName ) ; return MiniJavaVar . makeVoid () ; } <s> fix some bugs
bug_after_refactoring: { int muficjfrybmwpvqvyjws = contexts . size () ; for ( muficjfrybmwpvqvyjws -= 1 ; muficjfrybmwpvqvyjws >= 0 ; muficjfrybmwpvqvyjws -- ) { MiniJavaVar findRes = contexts . get ( muficjfrybmwpvqvyjws ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } java.lang.System.err . printf ( "Runtime Error: identifier %s not found.\muficjfrybmwpvqvyjws" , varName ) ; return MiniJavaVar . makeVoid () ; } <s> public MiniJavaVar findVar ( java.lang.String varName ) { int muficjfrybmwpvqvyjws = contexts . size () ; for ( muficjfrybmwpvqvyjws -= 1 ; muficjfrybmwpvqvyjws >= 0 ; muficjfrybmwpvqvyjws -- ) { MiniJavaVar findRes = contexts . get ( muficjfrybmwpvqvyjws ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } java.lang.System.err . printf ( "Runtime Error: identifier %s not found.\muficjfrybmwpvqvyjws" , varName ) ; return MiniJavaVar . makeVoid () ; } <s> fix some bugs
fix_before_refactoring: { int n = contexts . size () ; for ( n -= 1 ; n >= 0 ; n -- ) { MiniJavaVar findRes = contexts . get ( n ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } return null ; }
fix_after_refactoring: { int muficjfrybmwpvqvyjws = contexts . size () ; for ( muficjfrybmwpvqvyjws -= 1 ; muficjfrybmwpvqvyjws >= 0 ; muficjfrybmwpvqvyjws -- ) { MiniJavaVar findRes = contexts . get ( muficjfrybmwpvqvyjws ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } return null ; }
× fix_prediction_before: { int n = contexts . size () ; for ( n -= 1 ; n >= 0 ; n -- ) { MiniJavaVar findRes = contexts . get ( n ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } return MiniJavaVar . makeVoid () ; }
× fix_prediction_after: { int muficjfrybmwpvqvyjws = contexts . size () ; for ( muficjfrybmwpvqvyjws -= 1 ; muficjfrybmwpvqvyjws >= 0 ; muficjfrybmwpvqvyjws -- ) { MiniJavaVar findRes = contexts . get ( muficjfrybmwpvqvyjws ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } return MiniJavaVar . makeVoid () ; }

line_index: 609
bug_before_refactoring: int privacy = requestObject . getInt ( "privacy" ) ; <s> @ java.lang.Override public org.boxfox.dms.utilities.json.EasyJsonObject action ( org.boxfox.dms.utilities.actions.support.Sender sender , int command , org.boxfox.dms.utilities.json.EasyJsonObject requestObject ) throws java.sql.SQLException { java.lang.String title = requestObject . getString ( "title" ) ; java.lang.String content = requestObject . getString ( "question_content" ) ; java.lang.String writer = requestObject . getString ( "writer" ) ; int privacy = requestObject . getInt ( "privacy" ) ; int status = database . executeUpdate ( "INSERT INTO qna(title, question_content, question_date, writer, privacy) VALUES('" , title , "', '" , content , "', now(), '" , writer , "', " , privacy , ")" ) ; responseObject . put ( "status" , status ) ; return responseObject ; } <s> Fixed upload qna question's privacy insert error
bug_after_refactoring: int wjijnzivqporfuuinely = requestObject . getInt ( "wjijnzivqporfuuinely" ) ; <s> @ java.lang.Override public org.boxfox.dms.utilities.json.EasyJsonObject action ( org.boxfox.dms.utilities.actions.support.Sender sender , int command , org.boxfox.dms.utilities.json.EasyJsonObject requestObject ) throws java.sql.SQLException { java.lang.String title = requestObject . getString ( "title" ) ; java.lang.String content = requestObject . getString ( "question_content" ) ; java.lang.String writer = requestObject . getString ( "writer" ) ; int wjijnzivqporfuuinely = requestObject . getInt ( "wjijnzivqporfuuinely" ) ; int status = database . executeUpdate ( "INSERT INTO qna(title, question_content, question_date, writer, privacy) VALUES('" , title , "', '" , content , "', now(), '" , writer , "', " , privacy , ")" ) ; responseObject . put ( "status" , status ) ; return responseObject ; } <s> Fixed upload qna question's privacy insert error
fix_before_refactoring: boolean privacy = requestObject . getBoolean ( "privacy" ) ;
fix_after_refactoring: boolean wjijnzivqporfuuinely = requestObject . getBoolean ( "wjijnzivqporfuuinely" ) ;
× fix_prediction_before: java.lang.String privacy = requestObject . getString ( "privacy" ) ;
× fix_prediction_after: long wjijnzivqporfuuinely = requestObject . getInt ( "wjijnzivqporfuuinely" ) ;

line_index: 610
bug_before_refactoring: { float randomVelx = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; float randomVely = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( ( ( emitterDetails.positionX ) - 10 ) , emitterDetails.positionY , randomVelx , randomVely , level ) ; } <s> public com.dumbpug.crossbowknight.particles.Particle generate ( com.dumbpug.crossbowknight.particles.EmitterDetails emitterDetails ) { float randomVelx = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; float randomVely = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( ( ( emitterDetails.positionX ) - 10 ) , emitterDetails.positionY , randomVelx , randomVely , level ) ; } <s> Added world box visualiser to dev HUD to see the physics bodies of entities. Fixed issue where explosion particles would spawn within static blocks (it seems).
bug_after_refactoring: { float hbixgqxzqhikxulkymbd = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; float hujgtkmxbukplqnmzvsj = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( ( ( emitterDetails.positionX ) - 10 ) , emitterDetails.positionY , hbixgqxzqhikxulkymbd , hujgtkmxbukplqnmzvsj , level ) ; } <s> public com.dumbpug.crossbowknight.particles.Particle generate ( com.dumbpug.crossbowknight.particles.EmitterDetails emitterDetails ) { float hbixgqxzqhikxulkymbd = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; float hujgtkmxbukplqnmzvsj = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( ( ( emitterDetails.positionX ) - 10 ) , emitterDetails.positionY , hbixgqxzqhikxulkymbd , hujgtkmxbukplqnmzvsj , level ) ; } <s> Added world box visualiser to dev HUD to see the physics bodies of entities. Fixed issue where explosion particles would spawn within static blocks (it seems).
fix_before_refactoring: { float randomVelx = ( ( random . nextFloat () ) * 2.0F ) - 1.0F ; float randomVely = ( ( random . nextFloat () ) * 2.0F ) - 1.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( emitterDetails.positionX , emitterDetails.positionY , randomVelx , randomVely , level ) ; }
fix_after_refactoring: { float hbixgqxzqhikxulkymbd = ( ( random . nextFloat () ) * 2.0F ) - 1.0F ; float hujgtkmxbukplqnmzvsj = ( ( random . nextFloat () ) * 2.0F ) - 1.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( emitterDetails.positionX , emitterDetails.positionY , hbixgqxzqhikxulkymbd , hujgtkmxbukplqnmzvsj , level ) ; }
× fix_prediction_before: { float randomVelx = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; float randomVely = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( ( ( emitterDetails.positionX ) - 10 ) , emitterDetails.positionY , randomVelx , randomVely , level ) ; }
× fix_prediction_after: { float hbixgqxzqhikxulkymbd = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; float hujgtkmxbukplqnmzvsj = ( ( random . nextFloat () ) * 4.0F ) - 2.0F ; return new com.dumbpug.crossbowknight.particles.ExplosionParticle ( ( ( emitterDetails.positionX ) - 10 ) , emitterDetails.positionY , hbixgqxzqhikxulkymbd , hujgtkmxbukplqnmzvsj , level ) ; }

line_index: 611
bug_before_refactoring: return maxEggGroupID ; <s> public int getMaxEggGroupID () { android.database.Cursor cursor = database . query ( EGG_GROUPS_TABLE , null , null , null , null , null , null ) ; cursor . moveToLast () ; int maxEggGroupID = cursor . getInt ( cursor . getColumnIndex ( EGG_GROUP_ID ) ) ; if ( PRINT_DEBUG ) android.util.Log . v ( "Database Access" , ( "Max eggGroupID is: " + ( java.lang.String . valueOf ( maxEggGroupID ) ) ) ) ; cursor . close () ; return maxEggGroupID ; } <s> issue-#21-AdvancedSearch:  - Fixed a bug where filters weren't reset after pressing back - Fixed a bug where eggGroupID started at 1  when it starts at 0 in DB
bug_after_refactoring: return nyrssuilsxwkgtoskfhy ; <s> public int getMaxEggGroupID () { android.database.Cursor cursor = database . query ( EGG_GROUPS_TABLE , null , null , null , null , null , null ) ; cursor . moveToLast () ; int maxEggGroupID = cursor . getInt ( cursor . getColumnIndex ( EGG_GROUP_ID ) ) ; if ( PRINT_DEBUG ) android.util.Log . v ( "Database Access" , ( "Max eggGroupID is: " + ( java.lang.String . valueOf ( maxEggGroupID ) ) ) ) ; cursor . close () ; return nyrssuilsxwkgtoskfhy ; } <s> issue-#21-AdvancedSearch:  - Fixed a bug where filters weren't reset after pressing back - Fixed a bug where eggGroupID started at 1  when it starts at 0 in DB
fix_before_refactoring: return maxEggGroupID + 1 ;
fix_after_refactoring: return nyrssuilsxwkgtoskfhy + 1 ;
× fix_prediction_before: return maxEggGroupID ;
× fix_prediction_after: return - 1 ;

line_index: 612
bug_before_refactoring: actualHours = weekday <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; int weekday = 5 ; int weekend = 9 ; int optimalHours = 7 * 8 ; int actualHours = weekday ; actualHours = actualHours + ( weekend * 2 ) ; int solution = optimalHours - actualHours ; display ( solution ) ; } <s> Fixed the logical error
bug_after_refactoring: linvdmaarrhtuunhudey = qzmkvlhunpcohxymnidm <s> @ java.lang.Override protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity_main ) ; int weekday = 5 ; int weekend = 9 ; int optimalHours = 7 * 8 ; int linvdmaarrhtuunhudey = qzmkvlhunpcohxymnidm ; actualHours = actualHours + ( weekend * 2 ) ; int solution = optimalHours - actualHours ; display ( solution ) ; } <s> Fixed the logical error
fix_before_refactoring: actualHours = weekday * 5
fix_after_refactoring: linvdmaarrhtuunhudey = qzmkvlhunpcohxymnidm * 5
× fix_prediction_before: actualHours = weekday
× fix_prediction_after: linvdmaarrhtuunhudey = qzmkvlhunpcohxymnidm

line_index: 613
bug_before_refactoring: { int viewHolderPosition = viewHolder . getAdapterPosition () ; mModel . removeChild ( viewHolderPosition ) ; mSetsAdapter . notifyItemRemoved ( viewHolderPosition ) ; mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; mItemRemovedSnackbar . show () ; } <s> @ java.lang.Override public void onSwiped ( android.support.v7.widget.RecyclerView.ViewHolder viewHolder ) { int viewHolderPosition = viewHolder . getAdapterPosition () ; mModel . removeChild ( viewHolderPosition ) ; mSetsAdapter . notifyItemRemoved ( viewHolderPosition ) ; mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; mItemRemovedSnackbar . show () ; } <s> Program activities refactor and fix bug in program training with model
bug_after_refactoring: { int nnkvfeoecqnfawhabveo = viewHolder . getAdapterPosition () ; mModel . removeChild ( nnkvfeoecqnfawhabveo ) ; mSetsAdapter . notifyItemRemoved ( nnkvfeoecqnfawhabveo ) ; mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; mItemRemovedSnackbar . show () ; } <s> @ java.lang.Override public void onSwiped ( android.support.v7.widget.RecyclerView.ViewHolder viewHolder ) { int nnkvfeoecqnfawhabveo = viewHolder . getAdapterPosition () ; mModel . removeChild ( nnkvfeoecqnfawhabveo ) ; mSetsAdapter . notifyItemRemoved ( nnkvfeoecqnfawhabveo ) ; mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; mItemRemovedSnackbar . show () ; } <s> Program activities refactor and fix bug in program training with model
fix_before_refactoring: { mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; mItemRemovedSnackbar . show () ; }
fix_after_refactoring: { mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; mItemRemovedSnackbar . show () ; }
× fix_prediction_before: { mModel . removeChild ( viewHolderPosition ) ; mSetsAdapter . notifyItemRemoved ( viewHolderPosition ) ; mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; }
× fix_prediction_after: { int nnkvfeoecqnfawhabveo = viewHolder . getAdapterPosition () ; mModel . removeChild ( nnkvfeoecqnfawhabveo ) ; mSetsAdapter . notifyItemRemoved ( nnkvfeoecqnfawhabveo ) ; mItemRemovedSnackbar = android.support.design.widget.Snackbar . make ( mSetsView , R.string.program_exercise_activity_set_deleted_message , Snackbar.LENGTH_INDEFINITE ) ; mItemRemovedSnackbar . setAction ( R.string.cancel_button_text , new android.view.View.OnClickListener () { @ java.lang.Override public void onClick ( android.view.View v ) { mSetsAdapter . notifyItemInserted ( mModel . restoreLastRemoved () ) ; } } ) ; }

line_index: 614
bug_before_refactoring: { int dicSize = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , dicSize ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , dicSize ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , dicSize ) ; } <s> public static void generate ( java.lang.String bugVecFilePath , java.lang.String codeVecFilePath , java.lang.String simMatFilePath ) throws java.lang.Exception { int dicSize = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , dicSize ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , dicSize ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , dicSize ) ; } <s> bug fixes
bug_after_refactoring: { int wmbtroxyuewxwyqjwiph = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , wmbtroxyuewxwyqjwiph ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , wmbtroxyuewxwyqjwiph ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , wmbtroxyuewxwyqjwiph ) ; } <s> public static void generate ( java.lang.String bugVecFilePath , java.lang.String codeVecFilePath , java.lang.String simMatFilePath ) throws java.lang.Exception { int wmbtroxyuewxwyqjwiph = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , wmbtroxyuewxwyqjwiph ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , wmbtroxyuewxwyqjwiph ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , wmbtroxyuewxwyqjwiph ) ; } <s> bug fixes
fix_before_refactoring: { int dicSize = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , dicSize ) ; java.lang.System.out . println ( bugVecList . size () ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , dicSize ) ; java.lang.System.out . println ( codeVecList . size () ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , dicSize ) ; }
fix_after_refactoring: { int wmbtroxyuewxwyqjwiph = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , wmbtroxyuewxwyqjwiph ) ; java.lang.System.out . println ( bugVecList . size () ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , wmbtroxyuewxwyqjwiph ) ; java.lang.System.out . println ( codeVecList . size () ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , wmbtroxyuewxwyqjwiph ) ; }
× fix_prediction_before: { int dicSize = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , dicSize ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( codeVecFilePath , dicSize ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , dicSize ) ; }
× fix_prediction_after: { int wmbtroxyuewxwyqjwiph = config.Config . getInstance () . getDicSize () ; java.util.HashMap < java.lang.String , Jama.Matrix > bugVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , wmbtroxyuewxwyqjwiph ) ; java.util.HashMap < java.lang.String , Jama.Matrix > codeVecList = utils.MatrixUtil . loadVectors ( bugVecFilePath , wmbtroxyuewxwyqjwiph ) ; utils.MatrixUtil . exportSimilarityMatrix ( bugVecList , codeVecList , simMatFilePath , wmbtroxyuewxwyqjwiph ) ; }

line_index: 615
bug_before_refactoring: { double ret = 1 / ( real.length ) ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ret += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ret ) ; } <s> public static double rootMeansSquaredError ( double [] real , double [] predicted ) { double ret = 1 / ( real.length ) ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ret += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ret ) ; } <s> Fix bugs in MathUtils  The previous implementations of rootMeansSquaredError() and adjustedrSquared() were incorrect.  This is exactly the same as Canova/#110 and Canova/#111. Devs should consider removing MathUtils from either Canova or deeplearning4j.
bug_after_refactoring: { double ppcqipvfnpzsrwfjqjoy = 1 / ( real.length ) ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ppcqipvfnpzsrwfjqjoy += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ppcqipvfnpzsrwfjqjoy ) ; } <s> public static double rootMeansSquaredError ( double [] real , double [] predicted ) { double ppcqipvfnpzsrwfjqjoy = 1 / ( real.length ) ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ppcqipvfnpzsrwfjqjoy += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ppcqipvfnpzsrwfjqjoy ) ; } <s> Fix bugs in MathUtils  The previous implementations of rootMeansSquaredError() and adjustedrSquared() were incorrect.  This is exactly the same as Canova/#110 and Canova/#111. Devs should consider removing MathUtils from either Canova or deeplearning4j.
fix_before_refactoring: { double ret = 0.0 ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ret += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ( ret / ( real.length ) ) ) ; }
fix_after_refactoring: { double ppcqipvfnpzsrwfjqjoy = 0.0 ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ppcqipvfnpzsrwfjqjoy += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ( ppcqipvfnpzsrwfjqjoy / ( real.length ) ) ) ; }
× fix_prediction_before: { double ret = 1 / ( real.length ) ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ret += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ret ) ; }
× fix_prediction_after: { double ppcqipvfnpzsrwfjqjoy = 1 / ( real.length ) ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ppcqipvfnpzsrwfjqjoy += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ppcqipvfnpzsrwfjqjoy ) ; }

line_index: 616
bug_before_refactoring: { int i = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) i ++ ; if ( c == '}' ) i -- ; } return ( i >= 0 ) && ( i == 0 ) ; } <s> private boolean bracketsBalanced ( java.lang.String input ) { int i = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) i ++ ; if ( c == '}' ) i -- ; } return ( i >= 0 ) && ( i == 0 ) ; } <s> fixed unbalanced bracket error
bug_after_refactoring: { int fsszufdtracisaxdxoat = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) fsszufdtracisaxdxoat ++ ; if ( c == '}' ) fsszufdtracisaxdxoat -- ; } return ( fsszufdtracisaxdxoat >= 0 ) && ( fsszufdtracisaxdxoat == 0 ) ; } <s> private boolean bracketsBalanced ( java.lang.String input ) { int fsszufdtracisaxdxoat = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) fsszufdtracisaxdxoat ++ ; if ( c == '}' ) fsszufdtracisaxdxoat -- ; } return ( fsszufdtracisaxdxoat >= 0 ) && ( fsszufdtracisaxdxoat == 0 ) ; } <s> fixed unbalanced bracket error
fix_before_refactoring: { int i = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) i ++ ; if ( c == '}' ) i -- ; if ( i < 0 ) return false ; } return i == 0 ; }
fix_after_refactoring: { int fsszufdtracisaxdxoat = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) fsszufdtracisaxdxoat ++ ; if ( c == '}' ) fsszufdtracisaxdxoat -- ; if ( fsszufdtracisaxdxoat < 0 ) return false ; } return fsszufdtracisaxdxoat == 0 ; }
× fix_prediction_before: { int i = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) i ++ ; if ( c == '}' ) i -- ; } return ( i >= 0 ) && ( i == 0 ) ; }
× fix_prediction_after: { int fsszufdtracisaxdxoat = 0 ; for ( char c : input . toCharArray () ) { if ( c == '{' ) fsszufdtracisaxdxoat ++ ; if ( c == '}' ) fsszufdtracisaxdx -- ; } return ( fsszufdtracisaxdxoat >= 0 ) && ( fsszufdtracisaxdxoat == 0 ) ; }

line_index: 617
bug_before_refactoring: { if ( camera == null ) return; float step = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( step , ( step * ( camera . getParameters () . getExposureCompensation () ) ) ) ; } <s> @ java.lang.Override public void onPreviewFrame ( byte [] data , android.hardware.Camera camera ) { if ( camera == null ) return; float step = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( step , ( step * ( camera . getParameters () . getExposureCompensation () ) ) ) ; } <s> [#45] Logging exposure values. [strip-test-bugfixes branch]
bug_after_refactoring: { if ( camera == null ) return; float posmhrseobofubwwoofe = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( posmhrseobofubwwoofe , ( posmhrseobofubwwoofe * ( camera . getParameters () . getExposureCompensation () ) ) ) ; } <s> @ java.lang.Override public void onPreviewFrame ( byte [] data , android.hardware.Camera camera ) { if ( camera == null ) return; float posmhrseobofubwwoofe = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( posmhrseobofubwwoofe , ( posmhrseobofubwwoofe * ( camera . getParameters () . getExposureCompensation () ) ) ) ; } <s> [#45] Logging exposure values. [strip-test-bugfixes branch]
fix_before_refactoring: { if ( camera == null ) return; step = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( step , ( ( step ) * ( camera . getParameters () . getExposureCompensation () ) ) ) ; }
fix_after_refactoring: { if ( camera == null ) return; posmhrseobofubwwoofe = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( posmhrseobofubwwoofe , ( ( posmhrseobofubwwoofe ) * ( camera . getParameters () . getExposureCompensation () ) ) ) ; }
× fix_prediction_before: { if ( camera == null ) return; float step = camera . getParameters () . getExposureCompensationStep () ; if ( step < 0 ) return; EV = java.lang.Math . max ( step , ( step * ( camera . getParameters () . getExposureCompensation () ) ) ) ; }
× fix_prediction_after: { if ( camera == null ) return; float posmhrseobofubwwoofe = camera . getParameters () . getExposureCompensationStep () ; EV = java.lang.Math . max ( posmhrseobofubwwoofe , ( posmhrseobofubwwoofe * ( camera . getParameters () . getExposureCompensation () ) ) ) ; }

line_index: 618
bug_before_refactoring: { if ( low > high ) return list ; int pos = partition ( list , low , high ) ; quicksort ( list , low , ( pos - 1 ) ) ; quicksort ( list , ( pos + 1 ) , high ) ; } <s> private int [] quicksort ( int [] list , int low , int high ) { if ( low > high ) return list ; int pos = partition ( list , low , high ) ; quicksort ( list , low , ( pos - 1 ) ) ; quicksort ( list , ( pos + 1 ) , high ) ; } <s> Fixed a couple bugs on QuickSort:   - Reduce number of checks of low and high by 1   - actually return the list that's been sorted   - Fixed function header   - No random range function in Java   - Instead of having two pointers  just have one and grow the low end
bug_after_refactoring: { if ( low > high ) return list ; int uqwcxznjgmlwbthzvsho = partition ( list , low , high ) ; quicksort ( list , low , ( uqwcxznjgmlwbthzvsho - 1 ) ) ; quicksort ( list , ( uqwcxznjgmlwbthzvsho + 1 ) , high ) ; } <s> private int [] quicksort ( int [] list , int low , int high ) { if ( low > high ) return list ; int uqwcxznjgmlwbthzvsho = partition ( list , low , high ) ; quicksort ( list , low , ( uqwcxznjgmlwbthzvsho - 1 ) ) ; quicksort ( list , ( uqwcxznjgmlwbthzvsho + 1 ) , high ) ; } <s> Fixed a couple bugs on QuickSort:   - Reduce number of checks of low and high by 1   - actually return the list that's been sorted   - Fixed function header   - No random range function in Java   - Instead of having two pointers  just have one and grow the low end
fix_before_refactoring: { if ( low >= high ) return list ; int pos = partition ( list , low , high ) ; quicksort ( list , low , ( pos - 1 ) ) ; quicksort ( list , ( pos + 1 ) , high ) ; return list ; }
fix_after_refactoring: { if ( low >= high ) return list ; int uqwcxznjgmlwbthzvsho = partition ( list , low , high ) ; quicksort ( list , low , ( uqwcxznjgmlwbthzvsho - 1 ) ) ; quicksort ( list , ( uqwcxznjgmlwbthzvsho + 1 ) , high ) ; return list ; }
× fix_prediction_before: { if ( low > high ) return list ; int pos = partition ( list , low , high ) ; quicksort ( list , low , ( pos - 1 ) ) ; quicksort ( list , ( pos + 1 ) , high ) ; }
× fix_prediction_after: { if ( low > high ) return list ; int uqwcxznjgmlwbthzvsho = partition ( list , low , high ) ; quicksort ( list , low , ( uqwcxznjgmlwbthzvsho - 1 ) ) ; quicksort ( list , ( uqwcxznjgmlwbthzvsho + 1 ) , high ) ; }

line_index: 619
bug_before_refactoring: { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int pageIndex = getPageIndex ( session , requestQuery , allSearchResults , request ) ; return setAttributes ( session , requestQuery , pageIndex , allSearchResults ) ; } <s> @ org.springframework.web.bind.annotation.RequestMapping ( value = "/search" , method = org.springframework.web.bind.annotation.RequestMethod.GET ) public org.springframework.web.servlet.ModelAndView doGet ( javax.servlet.http.HttpServletRequest request ) { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int pageIndex = getPageIndex ( session , requestQuery , allSearchResults , request ) ; return setAttributes ( session , requestQuery , pageIndex , allSearchResults ) ; } <s> fixing index error
bug_after_refactoring: { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int otcvtyljkdrmngynwpom = getPageIndex ( session , requestQuery , allSearchResults , request ) ; return setAttributes ( session , requestQuery , otcvtyljkdrmngynwpom , allSearchResults ) ; } <s> @ org.springframework.web.bind.annotation.RequestMapping ( value = "/search" , method = org.springframework.web.bind.annotation.RequestMethod.GET ) public org.springframework.web.servlet.ModelAndView doGet ( javax.servlet.http.HttpServletRequest request ) { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int otcvtyljkdrmngynwpom = getPageIndex ( session , requestQuery , allSearchResults , request ) ; return setAttributes ( session , requestQuery , otcvtyljkdrmngynwpom , allSearchResults ) ; } <s> fixing index error
fix_before_refactoring: { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int pageIndex = getPageIndex ( session , requestQuery , allSearchResults , request ) ; if ( pageIndex > ( ( allSearchResults . size () ) - 1 ) ) { pageIndex = ( allSearchResults . size () ) - 1 ; } return setAttributes ( session , requestQuery , pageIndex , allSearchResults ) ; }
fix_after_refactoring: { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int otcvtyljkdrmngynwpom = getPageIndex ( session , requestQuery , allSearchResults , request ) ; if ( otcvtyljkdrmngynwpom > ( ( allSearchResults . size () ) - 1 ) ) { otcvtyljkdrmngynwpom = ( allSearchResults . size () ) - 1 ; } return setAttributes ( session , requestQuery , otcvtyljkdrmngynwpom , allSearchResults ) ; }
× fix_prediction_before: { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; int pageIndex = getPageIndex ( session , requestQuery , allSearchResults , request ) ; return setAttributes ( session , requestQuery , pageIndex , allSearchResults ) ; }
× fix_prediction_after: { javax.servlet.http.HttpSession session = request . getSession () ; java.lang.String requestQuery = request . getParameter ( "search" ) ; java.util.List < kawahara.models.SearchModel > allSearchResults = searchService . getSearchResults ( requestQuery ) ; return setAttributes ( session , requestQuery , otcvtyljkdrmngynwpom , allSearchResults ) ; }

line_index: 621
bug_before_refactoring: { light = section . spreadSkylightDownwards ( x , z , light ) ; } <s> private void spreadSkylightDownwards ( int x , int z ) { final int highestBlock = getHighestBlock ( x , z ) ; final int sectionY = highestBlock / ( Section.SECTION_HEIGHT ) ; byte light = World.DEFAULT_SKY_LIGHT ; for ( int y = sectionY ; y >= 0 ; -- y ) { final net.morbz.minecraft.world.Section section = sections [ sectionY ] ; if ( section != null ) { light = section . spreadSkylightDownwards ( x , z , light ) ; } } } <s> Fixed issue with some block being in shadow
bug_after_refactoring: { tpakjoftlmpxtlgicatg = section . spreadSkylightDownwards ( x , z , tpakjoftlmpxtlgicatg ) ; } <s> private void spreadSkylightDownwards ( int x , int z ) { final int highestBlock = getHighestBlock ( x , z ) ; final int sectionY = highestBlock / ( Section.SECTION_HEIGHT ) ; byte light = World.DEFAULT_SKY_LIGHT ; for ( int y = sectionY ; y >= 0 ; -- y ) { final net.morbz.minecraft.world.Section section = sections [ sectionY ] ; if ( section != null ) { tpakjoftlmpxtlgicatg = section . spreadSkylightDownwards ( x , z , tpakjoftlmpxtlgicatg ) ; } } } <s> Fixed issue with some block being in shadow
fix_before_refactoring: { light = section . spreadSkylightDownwards ( x , z , light ) ; if ( light == 0 ) { break; } }
fix_after_refactoring: { tpakjoftlmpxtlgicatg = section . spreadSkylightDownwards ( x , z , tpakjoftlmpxtlgicatg ) ; if ( tpakjoftlmpxtlgicatg == 0 ) { break; } }
× fix_prediction_before: { light = section . spreadSkylightDownwards ( x , z , light ) ; break; }
× fix_prediction_after: { tpakjoftlmpxtlgicatg = section . spreadSkylightDownwards ( x , z , tpakjoftlmpxtlgicatg ) ; }

line_index: 622
bug_before_refactoring: if ( ( containsFilter && containsIgnore ) || ( ( ! containsFilter ) && ( ! containsIgnore ) ) ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( containsFilter && ( ! containsIgnore ) ) { return line + "\n" ; } <s> java.lang.String add ( de.hk.wfh.rs.FilterContext filterContext , java.lang.String line ) { boolean containsFilter = containsPattern ( line , filterContext . getFilterList () ) ; boolean containsIgnore = containsPattern ( line , filterContext . getIgnoreList () ) ; if ( ( containsFilter && containsIgnore ) || ( ( ! containsFilter ) && ( ! containsIgnore ) ) ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( containsFilter && ( ! containsIgnore ) ) { return line + "\n" ; } return "\n" ; } <s> serveral bugfixes
bug_after_refactoring: if ( ( xgefagqpgujdrbfamxuw && ngbmldxhqihinyzukeww ) || ( ( ! xgefagqpgujdrbfamxuw ) && ( ! ngbmldxhqihinyzukeww ) ) ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( xgefagqpgujdrbfamxuw && ( ! ngbmldxhqihinyzukeww ) ) { return line + "\n" ; } <s> java.lang.String add ( de.hk.wfh.rs.FilterContext filterContext , java.lang.String line ) { boolean containsFilter = containsPattern ( line , filterContext . getFilterList () ) ; boolean containsIgnore = containsPattern ( line , filterContext . getIgnoreList () ) ; if ( ( xgefagqpgujdrbfamxuw && ngbmldxhqihinyzukeww ) || ( ( ! xgefagqpgujdrbfamxuw ) && ( ! ngbmldxhqihinyzukeww ) ) ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( xgefagqpgujdrbfamxuw && ( ! ngbmldxhqihinyzukeww ) ) { return line + "\n" ; } return "\n" ; } <s> serveral bugfixes
fix_before_refactoring: if ( containsFilter && containsIgnore ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( containsFilter && ( ! containsIgnore ) ) { return line + "\n" ; }
fix_after_refactoring: if ( xgefagqpgujdrbfamxuw && ngbmldxhqihinyzukeww ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( xgefagqpgujdrbfamxuw && ( ! ngbmldxhqihinyzukeww ) ) { return line + "\n" ; }
× fix_prediction_before: if ( ( containsFilter && containsIgnore ) || ( ( ! containsFilter ) && ( ! containsIgnore ) ) ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; }
× fix_prediction_after: if ( ( xgefagqpgujdrbfamxuw && ngbmldxhqihinyzukeww ) || ( ( ! xgefagqpgujdrbfamxuw ) && ( ! ngbmldxhqihinyzukeww ) ) ) { return ( "<-ignore-filter conflict -> " + line ) + "\n" ; } else if ( xgefagqpgujdrbfamxuw && ( ! ngbmldxhqihinyzukeww ) ) { return line + "\n" ; }

line_index: 623
bug_before_refactoring: private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] copy = copyReverseArray ( original , i ) ; list . add ( copy ) ; } try { java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; } catch ( com.alphatica.genotick.data.NoDataForTimePointException ex ) { return com.alphatica.genotick.genotick.RobotData . createEmptyData ( name ) ; } } <s> private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] copy = copyReverseArray ( original , i ) ; list . add ( copy ) ; } try { java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; } catch ( com.alphatica.genotick.data.NoDataForTimePointException ex ) { return com.alphatica.genotick.genotick.RobotData . createEmptyData ( name ) ; } } <s> Fixed problem when getting predictions for last time point
bug_after_refactoring: private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] tgomcsrebonlybchqlvb = copyReverseArray ( original , i ) ; list . add ( tgomcsrebonlybchqlvb ) ; } try { java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; } catch ( com.alphatica.genotick.data.NoDataForTimePointException ex ) { return com.alphatica.genotick.genotick.RobotData . createEmptyData ( name ) ; } } <s> private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] tgomcsrebonlybchqlvb = copyReverseArray ( original , i ) ; list . add ( tgomcsrebonlybchqlvb ) ; } try { java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; } catch ( com.alphatica.genotick.data.NoDataForTimePointException ex ) { return com.alphatica.genotick.genotick.RobotData . createEmptyData ( name ) ; } } <s> Fixed problem when getting predictions for last time point
fix_before_refactoring: private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] copy = copyReverseArray ( original , i ) ; list . add ( copy ) ; } java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; }
fix_after_refactoring: private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] tgomcsrebonlybchqlvb = copyReverseArray ( original , i ) ; list . add ( tgomcsrebonlybchqlvb ) ; } java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; }
× fix_prediction_before: private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] copy = copyReverseArray ( original , i ) ; list . add ( copy ) ; } try { java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; } catch ( com.alphatica.genotick.data.NoDataForTimePointException ex ) { return com.alphatica.genotick.genotick.RobotData . createEmptyData ( name ) ; } }
× fix_prediction_after: private com.alphatica.genotick.genotick.RobotData createDataUpToTimePoint ( int i ) { java.util.List < double [] > list = new java.util.ArrayList <> () ; for ( double [] original : values ) { double [] tgomcsrebonlybchqlvb = copyReverseArray ( original , i ) ; list . add ( tgomcsrebonlybchqlvb ) ; } try { java.lang.Double futureChange = calculateFutureChange ( timePoints [ i ] ) ; return com.alphatica.genotick.genotick.RobotData . createData ( list , name , futureChange ) ; } catch ( com.alphatica.genotick.data.NoDataForTimePointException ex ) { return com.alphatica.genotick.genotick.RobotData . createEmptyData ( name ) ; } }

line_index: 625
bug_before_refactoring: private void synchronizeFounders () { mLastSyncTime = java.lang.System . currentTimeMillis () ; int maxVersion = maxFounderVersion () ; int serverMaxVersion = 0 ; serverMaxVersion = syncDeletedFounders ( serverMaxVersion ) ; serverMaxVersion = syncNewFounders ( serverMaxVersion ) ; serverMaxVersion = syncDirtyFounders ( serverMaxVersion ) ; syncServerFounderUpdates ( maxVersion , serverMaxVersion ) ; } <s> private void synchronizeFounders () { mLastSyncTime = java.lang.System . currentTimeMillis () ; int maxVersion = maxFounderVersion () ; int serverMaxVersion = 0 ; serverMaxVersion = syncDeletedFounders ( serverMaxVersion ) ; serverMaxVersion = syncNewFounders ( serverMaxVersion ) ; serverMaxVersion = syncDirtyFounders ( serverMaxVersion ) ; syncServerFounderUpdates ( maxVersion , serverMaxVersion ) ; } <s> Cleaned up the SyncService and made the notification display only when we receive new data from the server. Refactored some fields to go into the content provider instead of the sync service. Deleted code to generate sample database content. Fixed non-return bug in postContent() on HttpHelper.
bug_after_refactoring: private void synchronizeFounders () { mLastSyncTime = java.lang.System . currentTimeMillis () ; int esszpexnwbjbxctboacs = maxFounderVersion () ; int djqrkeisgosolwbbqkgg = 0 ; djqrkeisgosolwbbqkgg = syncDeletedFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncNewFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncDirtyFounders ( djqrkeisgosolwbbqkgg ) ; syncServerFounderUpdates ( esszpexnwbjbxctboacs , djqrkeisgosolwbbqkgg ) ; } <s> private void synchronizeFounders () { mLastSyncTime = java.lang.System . currentTimeMillis () ; int esszpexnwbjbxctboacs = maxFounderVersion () ; int djqrkeisgosolwbbqkgg = 0 ; djqrkeisgosolwbbqkgg = syncDeletedFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncNewFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncDirtyFounders ( djqrkeisgosolwbbqkgg ) ; syncServerFounderUpdates ( esszpexnwbjbxctboacs , djqrkeisgosolwbbqkgg ) ; } <s> Cleaned up the SyncService and made the notification display only when we receive new data from the server. Refactored some fields to go into the content provider instead of the sync service. Deleted code to generate sample database content. Fixed non-return bug in postContent() on HttpHelper.
fix_before_refactoring: private boolean synchronizeFounders () { mLastSyncTime = java.lang.System . currentTimeMillis () ; int maxVersion = maxFounderVersion () ; int serverMaxVersion = 0 ; serverMaxVersion = syncDeletedFounders ( serverMaxVersion ) ; serverMaxVersion = syncNewFounders ( serverMaxVersion ) ; serverMaxVersion = syncDirtyFounders ( serverMaxVersion ) ; return syncServerFounderUpdates ( maxVersion , serverMaxVersion ) ; }
fix_after_refactoring: private boolean synchronizeFounders () { mLastSyncTime = java.lang.System . currentTimeMillis () ; int esszpexnwbjbxctboacs = maxFounderVersion () ; int djqrkeisgosolwbbqkgg = 0 ; djqrkeisgosolwbbqkgg = syncDeletedFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncNewFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncDirtyFounders ( djqrkeisgosolwbbqkgg ) ; return syncServerFounderUpdates ( esszpexnwbjbxctboacs , djqrkeisgosolwbbqkgg ) ; }
× fix_prediction_before: private void synchronizeFounders () { if ( ( mLastSyncTime ) == null ) { mLastSyncTime = java.lang.System . currentTimeMillis () ; int maxVersion = maxFounderVersion () ; int serverMaxVersion = 0 ; serverMaxVersion = syncDeletedFounders ( serverMaxVersion ) ; serverMaxVersion = syncNewFounders ( serverMaxVersion ) ; serverMaxVersion = syncDirtyFounders ( serverMaxVersion ) ; syncServerFounderUpdates ( maxVersion , serverMaxVersion ) ; } }
× fix_prediction_after: private void synchronizeFounders () { if ( ( mLastSyncTime ) == null ) { mLastSyncTime = java.lang.System . currentTimeMillis () ; int esszpexnwbjbxctboacs = maxFounderVersion () ; int djqrkeisgosolwbbqkgg = 0 ; djqrkeisgosolwbbqkgg = syncDeletedFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncNewFounders ( djqrkeisgosolwbbqkgg ) ; djqrkeisgosolwbbqkgg = syncDirtyFounders ( djqrkeisgosolwbbqkgg ) ; syncServerFounderUpdates ( esszpexnwbjbxctboacs , djqrkeisgosolwbbqkgg ) ; } }

line_index: 626
bug_before_refactoring: { int id = view . getId () ; android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } } <s> public void toggleEventInvite ( android.view.View view ) { int id = view . getId () ; android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } } <s> more progress with invite friends dialog (smoother UX  adding list items  fixing bugs)
bug_after_refactoring: { int pgzxdjqrniflkfxyfmlu = view . getId () ; android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } } <s> public void toggleEventInvite ( android.view.View view ) { int pgzxdjqrniflkfxyfmlu = view . getId () ; android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } } <s> more progress with invite friends dialog (smoother UX  adding list items  fixing bugs)
fix_before_refactoring: { android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } }
fix_after_refactoring: { android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . d ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } }
× fix_prediction_before: { int id = view . getId () ; android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( ! ( chkFriend . isChecked () ) ) { android.util.Log . i ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . i ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } }
× fix_prediction_after: { int pgzxdjqrniflkfxyfmlu = view . getId () ; android.widget.CheckBox chkFriend = ( ( android.widget.CheckBox ) ( view ) ) ; if ( chkFriend . isChecked () ) { android.util.Log . i ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Added to invite list" ) ; } else { android.util.Log . i ( com.sarahrobinson.finalyearproject.activities.MainActivity.TAG , "Removed from invite list" ) ; } }

line_index: 627
bug_before_refactoring: { double energyLeft = robotSnapshot . getEnergy () ; int playerId = robotSnapshot . getTeamIndex () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; double gunDamage = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double ramDamage = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , playerId , energyLeft , ramDamage , gunDamage ) ; } <s> private com.hutgroup.robocode.server.RoundResult toRoundResult ( int roundId , com.hutgroup.robocode.server.IRobotSnapshot robotSnapshot ) { double energyLeft = robotSnapshot . getEnergy () ; int playerId = robotSnapshot . getTeamIndex () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; double gunDamage = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double ramDamage = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , playerId , energyLeft , ramDamage , gunDamage ) ; } <s> Bugfix
bug_after_refactoring: { double sfptttwqpookthaffnaa = robotSnapshot . getEnergy () ; int lsmmctzgwitseqoorexu = robotSnapshot . getTeamIndex () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; double qmjkrewafdakwzlqnfjf = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double epzjmnjypljbahvciiot = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , lsmmctzgwitseqoorexu , sfptttwqpookthaffnaa , epzjmnjypljbahvciiot , qmjkrewafdakwzlqnfjf ) ; } <s> private com.hutgroup.robocode.server.RoundResult toRoundResult ( int roundId , com.hutgroup.robocode.server.IRobotSnapshot robotSnapshot ) { double sfptttwqpookthaffnaa = robotSnapshot . getEnergy () ; int lsmmctzgwitseqoorexu = robotSnapshot . getTeamIndex () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; double qmjkrewafdakwzlqnfjf = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double epzjmnjypljbahvciiot = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , lsmmctzgwitseqoorexu , sfptttwqpookthaffnaa , epzjmnjypljbahvciiot , qmjkrewafdakwzlqnfjf ) ; } <s> Bugfix
fix_before_refactoring: { double energyLeft = robotSnapshot . getEnergy () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; java.lang.String playerId = robotSnapshot . getName () ; double gunDamage = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double ramDamage = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , playerId , energyLeft , ramDamage , gunDamage ) ; }
fix_after_refactoring: { double sfptttwqpookthaffnaa = robotSnapshot . getEnergy () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; java.lang.String lsmmctzgwitseqoorexu = robotSnapshot . getName () ; double qmjkrewafdakwzlqnfjf = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double epzjmnjypljbahvciiot = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , lsmmctzgwitseqoorexu , sfptttwqpookthaffnaa , epzjmnjypljbahvciiot , qmjkrewafdakwzlqnfjf ) ; }
× fix_prediction_before: { double energyLeft = robotSnapshot . getEnergy () ; int playerId = robotSnapshot . getTeamIndex () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; double gunDamage = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double ramDamage = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , playerId , energyLeft , ramDamage , gunDamage ) ; }
× fix_prediction_after: { double sfptzgwitseqoorexu = robotSnapshot . getEnergy () ; com.hutgroup.robocode.server.IScoreSnapshot snapshot = robotSnapshot . getScoreSnapshot () ; double qmjkrewafdakwzlqnfjf = ( snapshot . getCurrentBulletDamageScore () ) + ( snapshot . getCurrentBulletKillBonus () ) ; double epzjmnjypljbahvciiot = ( snapshot . getCurrentRammingDamageScore () ) + ( snapshot . getCurrentRammingKillBonus () ) ; return new com.hutgroup.robocode.server.RoundResult ( roundId , lsmmctzgwitseqoorexu , epzzjmnjypljbahvciiot , qmjkrewafdakwzlqnfjf ) ; }

line_index: 629
bug_before_refactoring: { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int index = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( index ) ) { temp = temp . getNode ( index ) ; } else { return null ; } } return temp ; } <s> public spell.INode find ( java.lang.String word ) { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int index = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( index ) ) { temp = temp . getNode ( index ) ; } else { return null ; } } return temp ; } <s> bug fix to alt tran
bug_after_refactoring: { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int yfztwijtfjqljnxoxswf = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( yfztwijtfjqljnxoxswf ) ) { temp = temp . getNode ( yfztwijtfjqljnxoxswf ) ; } else { return null ; } } return temp ; } <s> public spell.INode find ( java.lang.String word ) { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int yfztwijtfjqljnxoxswf = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( yfztwijtfjqljnxoxswf ) ) { temp = temp . getNode ( yfztwijtfjqljnxoxswf ) ; } else { return null ; } } return temp ; } <s> bug fix to alt tran
fix_before_refactoring: { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int index = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( index ) ) { temp = temp . getNode ( index ) ; } else { return null ; } } if ( ( temp . getValue () ) > 0 ) { return temp ; } return null ; }
fix_after_refactoring: { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int yfztwijtfjqljnxoxswf = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( yfztwijtfjqljnxoxswf ) ) { temp = temp . getNode ( yfztwijtfjqljnxoxswf ) ; } else { return null ; } } if ( ( temp . getValue () ) > 0 ) { return temp ; } return null ; }
× fix_prediction_before: { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int index = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( index ) ) { temp = temp . getNode ( index ) ; } else { return temp ; } } return temp ; }
× fix_prediction_after: { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int yfztwijtfjqljnxoxswf = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( yfztwijtfjqljnxoxswf ) ) { temp = temp . getNode ( yfztwijtfjqljnxoxswf ) ; break; } } return temp ; }

line_index: 630
bug_before_refactoring: { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; final int start = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( start ) ) { logChildError ( lineNum , start , indentLevel ) ; } } <s> private void checkLineIndent ( int lineNum , com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel indentLevel ) { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; final int start = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( start ) ) { logChildError ( lineNum , start , indentLevel ) ; } } <s> Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check
bug_after_refactoring: { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; final int fjxmecrxfxcupsomuxvx = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( fjxmecrxfxcupsomuxvx ) ) { logChildError ( lineNum , fjxmecrxfxcupsomuxvx , indentLevel ) ; } } <s> private void checkLineIndent ( int lineNum , com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel indentLevel ) { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; final int fjxmecrxfxcupsomuxvx = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( fjxmecrxfxcupsomuxvx ) ) { logChildError ( lineNum , fjxmecrxfxcupsomuxvx , indentLevel ) ; } } <s> Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check
fix_before_refactoring: { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; if ( ! ( line . isEmpty () ) ) { final int start = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( start ) ) { logChildError ( lineNum , start , indentLevel ) ; } } }
fix_after_refactoring: { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; if ( ! ( line . isEmpty () ) ) { final int fjxmecrxfxcupsomuxvx = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( fjxmecrxfxcupsomuxvx ) ) { logChildError ( lineNum , fjxmecrxfxcupsomuxvx , indentLevel ) ; } } }
× fix_prediction_before: { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; final int start = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( start ) ) { logChildError ( lineNum , start , indentLevel ) ; } }
× fix_prediction_after: { final java.lang.String line = indentCheck . getLine ( ( lineNum - 1 ) ) ; final int fjxmecrxfxcupsomuxvx = getLineStart ( line ) ; if ( indentLevel . isGreaterThan ( fjxmecrxfxcupsomuxvx ) ) { logChildError ( lineNum , fjxmecrxfxcupsomuxvx , indentLevel ) ; } }

line_index: 632
bug_before_refactoring: { presenter . displayItemsAsMenuOptions ( menuOptions ) ; com.twu.biblioteca.Option optionSelected ; do { int userInput = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( userInput - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; } <s> public void mainMenu () { presenter . displayItemsAsMenuOptions ( menuOptions ) ; com.twu.biblioteca.Option optionSelected ; do { int userInput = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( userInput - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; } <s> modified main to try app  fixed discovered bug
bug_after_refactoring: { presenter . displayItemsAsMenuOptions ( menuOptions ) ; com.twu.biblioteca.Option optionSelected ; do { int mianwnovxpfobdqdizvr = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( mianwnovxpfobdqdizvr - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; } <s> public void mainMenu () { presenter . displayItemsAsMenuOptions ( menuOptions ) ; com.twu.biblioteca.Option optionSelected ; do { int mianwnovxpfobdqdizvr = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( mianwnovxpfobdqdizvr - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; } <s> modified main to try app  fixed discovered bug
fix_before_refactoring: { com.twu.biblioteca.Option optionSelected ; do { presenter . displayItemsAsMenuOptions ( menuOptions ) ; int userInput = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( userInput - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; }
fix_after_refactoring: { com.twu.biblioteca.Option optionSelected ; do { presenter . displayItemsAsMenuOptions ( menuOptions ) ; int mianwnovxpfobdqdizvr = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( mianwnovxpfobdqdizvr - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; }
× fix_prediction_before: { com.twu.biblioteca.Option optionSelected = false ; do { int userInput = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( userInput - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; }
× fix_prediction_after: { com.twu.biblioteca.Option optionSelected = null ; do { int mianwnovxpfobdqdizvr = presenter . getUserInput ( menuOptions . size () ) ; optionSelected = menuOptions . get ( ( mianwnovxpfobdqdizvr - 1 ) ) ; optionSelected . onSelect () ; } while ( ! ( optionSelected instanceof com.twu.biblioteca.QuitOption ) ) ; }

line_index: 633
bug_before_refactoring: if ( isStalemateForPlayer && isStalemateForOpponent ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; } <s> public org.mapeditor.core.Map nextTurn () { if ( ! ( isGameOver () ) ) { boolean isStalemateForPlayer = isStalemateTurnForPlayer ( utilties.models.Game.PLAYER_ID ) ; boolean isStalemateForOpponent = isStalemateTurnForPlayer ( utilties.models.Game.OPPONENT_ID ) ; if ( isStalemateForPlayer && isStalemateForOpponent ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; } ( this . _numberOfTurnsCompleted ) ++ ; } return this . _entityMap . getMap () ; } <s> Merge pull request #140 from j3kstrum/command-bug-fixes  Command bug fixes / Stalemate condition modifications
bug_after_refactoring: if ( icaubquwhojwuzmxcrpc && vqwuqbnzdzablrlyfxqh ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; } <s> public org.mapeditor.core.Map nextTurn () { if ( ! ( isGameOver () ) ) { boolean isStalemateForPlayer = isStalemateTurnForPlayer ( utilties.models.Game.PLAYER_ID ) ; boolean isStalemateForOpponent = isStalemateTurnForPlayer ( utilties.models.Game.OPPONENT_ID ) ; if ( icaubquwhojwuzmxcrpc && vqwuqbnzdzablrlyfxqh ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; } ( this . _numberOfTurnsCompleted ) ++ ; } return this . _entityMap . getMap () ; } <s> Merge pull request #140 from j3kstrum/command-bug-fixes  Command bug fixes / Stalemate condition modifications
fix_before_refactoring: if ( isStalemateForPlayer || isStalemateForOpponent ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; }
fix_after_refactoring: if ( icaubquwhojwuzmxcrpc || vqwuqbnzdzablrlyfxqh ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; }
× fix_prediction_before: if ( isStalemateForPlayer && isStalemateForOpponent ) { _isStalemate = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; }
× fix_prediction_after: if ( icaubquwhojwuzmxcrpc && vqwuqbnzdzablrlyfxqh ) { _isStalemate = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; }

line_index: 634
bug_before_refactoring: private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId , int hierarchyTimeout ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long startTime = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , hierarchyTimeout ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - startTime ) ) + " ms" ) ) ; } return result ; } <s> private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId , int hierarchyTimeout ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long startTime = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , hierarchyTimeout ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - startTime ) ) + " ms" ) ) ; } return result ; } <s> Fix errors when no hierarchytimeout parameter is specified
bug_after_refactoring: private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId , int hierarchyTimeout ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long cylmobnkhntvkkccwmgx = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , hierarchyTimeout ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - cylmobnkhntvkkccwmgx ) ) + " ms" ) ) ; } return result ; } <s> private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId , int hierarchyTimeout ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long cylmobnkhntvkkccwmgx = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , hierarchyTimeout ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - cylmobnkhntvkkccwmgx ) ) + " ms" ) ) ; } return result ; } <s> Fix errors when no hierarchytimeout parameter is specified
fix_before_refactoring: private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId , java.lang.Integer hierarchyTimeout ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long startTime = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , ( hierarchyTimeout == null ? 0 : hierarchyTimeout ) ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - startTime ) ) + " ms" ) ) ; } return result ; }
fix_after_refactoring: private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId , java.lang.Integer hierarchyTimeout ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long cylmobnkhntvkkccwmgx = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , ( hierarchyTimeout == null ? 0 : hierarchyTimeout ) ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - cylmobnkhntvkkccwmgx ) ) + " ms" ) ) ; } return result ; }
× fix_prediction_before: private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long startTime = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , hierarchyTimeout ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took " + ( ( java.lang.System . currentTimeMillis () ) - startTime ) ) + " ms" ) ) ; } return eu.
× fix_prediction_after: private eu.europeana.corelib.definitions.edm.beans.FullBean retrieveRecord ( java.lang.String europeanaId ) throws eu.europeana.corelib.edm.exceptions.MongoDBException , eu.europeana.corelib.edm.exceptions.MongoRuntimeException , eu.europeana.corelib.neo4j.exception.Neo4JException { long cylmobnkhntvkkccwmgx = java.lang.System . currentTimeMillis () ; eu.europeana.corelib.neo4j.exception.Neo4JException { eu.europeana.corelib.definitions.edm.beans.FullBean result = searchService . findById ( europeanaId , false , hierarchyTimeout ) ; if ( eu.europeana.api2.v2.web.controller.ObjectController.LOG . isDebugEnabled () ) { eu.europeana.api2.v2.web.controller.ObjectController.LOG . debug ( ( ( "SearchService findByID took

line_index: 635
bug_before_refactoring: { int [] numbers = new int [] { 23 , 76 , 5 , 32 , 2 , 8 , 4 , 9 , 6 } ; for ( int num : numbers ) { tree . insert ( num ) ; } int key = 2 ; assertEquals ( 2 , tree . search ( key ) ) ; int key2 = 2234 ; assertEquals ( 0 , tree . search ( key2 ) ) ; } <s> @ org.junit.Test public void testSearch () { int [] numbers = new int [] { 23 , 76 , 5 , 32 , 2 , 8 , 4 , 9 , 6 } ; for ( int num : numbers ) { tree . insert ( num ) ; } int key = 2 ; assertEquals ( 2 , tree . search ( key ) ) ; int key2 = 2234 ; assertEquals ( 0 , tree . search ( key2 ) ) ; } <s> Bug fixed
bug_after_refactoring: { int [] cfmgtwyattkiugzenyrb = new int [] { 23 , 76 , 5 , 32 , 2 , 8 , 4 , 9 , 6 } ; for ( int num : cfmgtwyattkiugzenyrb ) { tree . insert ( num ) ; } int dpsbpbngbbqvoeiwxqwj = 2 ; assertEquals ( 2 , tree . search ( dpsbpbngbbqvoeiwxqwj ) ) ; int mfpummqxjayhuuofsrip = 2234 ; assertEquals ( 0 , tree . search ( mfpummqxjayhuuofsrip ) ) ; } <s> @ org.junit.Test public void testSearch () { int [] cfmgtwyattkiugzenyrb = new int [] { 23 , 76 , 5 , 32 , 2 , 8 , 4 , 9 , 6 } ; for ( int num : cfmgtwyattkiugzenyrb ) { tree . insert ( num ) ; } int dpsbpbngbbqvoeiwxqwj = 2 ; assertEquals ( 2 , tree . search ( dpsbpbngbbqvoeiwxqwj ) ) ; int mfpummqxjayhuuofsrip = 2234 ; assertEquals ( 0 , tree . search ( mfpummqxjayhuuofsrip ) ) ; } <s> Bug fixed
fix_before_refactoring: { for ( int num : numbers ) { tree . insert ( num ) ; } int key = 2 ; assertEquals ( 2 , tree . search ( key ) ) ; int key2 = 2234 ; assertEquals ( 0 , tree . search ( key2 ) ) ; }
fix_after_refactoring: { for ( int num : cfmgtwyattkiugzenyrb ) { tree . insert ( num ) ; } int dpsbpbngbbqvoeiwxqwj = 2 ; assertEquals ( 2 , tree . search ( dpsbpbngbbqvoeiwxqwj ) ) ; int mfpummqxjayhuuofsrip = 2234 ; assertEquals ( 0 , tree . search ( mfpummqxjayhuuofsrip ) ) ; }
× fix_prediction_before: { int [] numbers = new int [] { 23 , 76 , 5 , 32 , 2 , 8 , 4 , 9 , 6 } ; int key = 2 ; assertEquals ( 2 , tree . search ( key ) ) ; int key = 2 ; assertEquals ( 0 , tree . search ( key2 ) ) ; }
× fix_prediction_after: { int [] cfmgtwyattyattkiugzenyrb = new int [] { 23 , 76 , 5 , 32 , 8 , 4 , 9 , 6 } ; for ( int num : cfmgtwyattkiugzenyrb ) { tree . insert ( num ) ; } int dpsbpbngbbqvoeiwxqwj = 2 ; assertEquals ( 2 , tree . search ( dpsbpbngbbqvoeiwxqwj ) ) ; int mfpummqxjayhuuofsrip = 2234 ; assertEquals ( 0 , tree . search ( mfpummqxjayhuuofsrip ) ) ; }

line_index: 636
bug_before_refactoring: public static void main ( java.lang.String [] args ) { int [] play = new int [] { 4 , 8 , 5 , 2 , 3 , 5 , 1 , 6 , 4 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( play , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; } <s> public static void main ( java.lang.String [] args ) { int [] play = new int [] { 4 , 8 , 5 , 2 , 3 , 5 , 1 , 6 , 4 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( play , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; } <s> Fixed bug.  Fixed logic bug where my algorithm would crash or go into an infinite recursion causing stack over flow error. Now it doesn't crash what so ever.
bug_after_refactoring: public static void main ( java.lang.String [] args ) { int [] vvjvndxszkophawnjtnc = new int [] { 4 , 8 , 5 , 2 , 3 , 5 , 1 , 6 , 4 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( vvjvndxszkophawnjtnc , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; } <s> public static void main ( java.lang.String [] args ) { int [] vvjvndxszkophawnjtnc = new int [] { 4 , 8 , 5 , 2 , 3 , 5 , 1 , 6 , 4 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( vvjvndxszkophawnjtnc , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; } <s> Fixed bug.  Fixed logic bug where my algorithm would crash or go into an infinite recursion causing stack over flow error. Now it doesn't crash what so ever.
fix_before_refactoring: public static void main ( java.lang.String [] args ) { int [] play = new int [] { 5 , 8 , 2 , 3 , 1 , 5 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( play , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; }
fix_after_refactoring: public static void main ( java.lang.String [] args ) { int [] vvjvndxszkophawnjtnc = new int [] { 5 , 8 , 2 , 3 , 1 , 5 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( vvjvndxszkophawnjtnc , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; }
× fix_prediction_before: public static void main ( java.lang.String [] args ) { int [] play = new int [] { 4 , 8 , 5 , 2 , 3 , 5 , 1 , 6 , 4 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( play , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; }
× fix_prediction_after: public static void main ( java.lang.String [] args ) { int [] vvjvndxszkophawnjtnc = new int [] { 4 , 8 , 5 , 2 , 3 , 5 , 1 , 6 , 4 , 0 } ; java.lang.System.out . println ( RightWingGame . solveGameRecursively ( vvjvndxszkophawnjtnc , RightWingGame.DEFAULT_VALUE , RightWingGame.DEFAULT_VALUE ) ) ; }

line_index: 637
bug_before_refactoring: if ( ( shouldShowAppodealAdBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) < position ) ) count ++ ; <s> private int getCardsCountBeforeCurrentPosition ( int position ) { int count = 0 ; if ( ( shouldShowAppodealAdBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) < position ) ) count ++ ; if ( ( shouldShowAsBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.AS_BANNER_POSITION ) < position ) ) count ++ ; return count ; } <s> Appodeal (#25)  * add appodeal  * add few projects for appodeal feature. Now you can remove appodeal from your project.  * remove appodeal/travelpayouts keys  * add aviasales ads  * pull request fixes  * dependencies fixes  *  – fix ad banner position  – fix select airport issues  – add timer to places loader
bug_after_refactoring: if ( ( shouldShowAppodealAdBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) < position ) ) bfhzghopzzubzfftmcdv ++ ; <s> private int getCardsCountBeforeCurrentPosition ( int position ) { int count = 0 ; if ( ( shouldShowAppodealAdBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) < position ) ) bfhzghopzzubzfftmcdv ++ ; if ( ( shouldShowAsBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.AS_BANNER_POSITION ) < position ) ) count ++ ; return count ; } <s> Appodeal (#25)  * add appodeal  * add few projects for appodeal feature. Now you can remove appodeal from your project.  * remove appodeal/travelpayouts keys  * add aviasales ads  * pull request fixes  * dependencies fixes  *  – fix ad banner position  – fix select airport issues  – add timer to places loader
fix_before_refactoring: if ( ( shouldShowAppodealAdBanner ) && ( ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) + ( shouldShowAsBanner ? 1 : 0 ) ) < position ) ) { count ++ ; }
fix_after_refactoring: if ( ( shouldShowAppodealAdBanner ) && ( ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) + ( shouldShowAsBanner ? 1 : 0 ) ) < position ) ) { bfhzghopzzubzfftmcdv ++ ; }
× fix_prediction_before: if ( ( shouldShowAppodealAdBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) < position ) ) count ++ ;
× fix_prediction_after: if ( ( shouldShowAppodealAdBanner ) && ( ( ru.aviasales.template.ui.adapter.AdAdapter.APPODEAL_BANNER_POSITION ) < position ) ) bfhzghopzzubzfftmcdv ++ ;

line_index: 640
bug_before_refactoring: { int leftDeep = deep ( root.left ) ; int rightDeep = deep ( root.right ) ; if ( leftDeep == rightDeep ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , leftDeep ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , rightDeep ) ) ) + ( countNodes ( root.left ) ) ; } <s> public int countNodes ( hou.forwz.Leetcode.structure.TreeNode root ) { int leftDeep = deep ( root.left ) ; int rightDeep = deep ( root.right ) ; if ( leftDeep == rightDeep ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , leftDeep ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , rightDeep ) ) ) + ( countNodes ( root.left ) ) ; } <s> fix bug 2016年09月15日02:14:32
bug_after_refactoring: { int dfzfotmohkkfsidunkfc = deep ( root.left ) ; int uslihdbzrinwxdpycjqd = deep ( root.right ) ; if ( dfzfotmohkkfsidunkfc == uslihdbzrinwxdpycjqd ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , dfzfotmohkkfsidunkfc ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , uslihdbzrinwxdpycjqd ) ) ) + ( countNodes ( root.left ) ) ; } <s> public int countNodes ( hou.forwz.Leetcode.structure.TreeNode root ) { int dfzfotmohkkfsidunkfc = deep ( root.left ) ; int uslihdbzrinwxdpycjqd = deep ( root.right ) ; if ( dfzfotmohkkfsidunkfc == uslihdbzrinwxdpycjqd ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , dfzfotmohkkfsidunkfc ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , uslihdbzrinwxdpycjqd ) ) ) + ( countNodes ( root.left ) ) ; } <s> fix bug 2016年09月15日02:14:32
fix_before_refactoring: { if ( root == null ) return 0 ; int leftDeep = deep ( root.left ) ; int rightDeep = deep ( root.right ) ; if ( leftDeep == rightDeep ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , leftDeep ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , rightDeep ) ) ) + ( countNodes ( root.left ) ) ; }
fix_after_refactoring: { if ( root == null ) return 0 ; int dfzfotmohkkfsidunkfc = deep ( root.left ) ; int uslihdbzrinwxdpycjqd = deep ( root.right ) ; if ( dfzfotmohkkfsidunkfc == uslihdbzrinwxdpycjqd ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , dfzfotmohkkfsidunkfc ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , uslihdbzrinwxdpycjqd ) ) ) + ( countNodes ( root.left ) ) ; }
× fix_prediction_before: { int leftDeep = deep ( root.left ) ; int rightDeep = deep ( root.right ) ; if ( leftDeep == rightDeep ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , leftDeep ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , rightDeep ) ) ) + ( countNodes ( root.left ) ) ; }
× fix_prediction_after: { int dfzfotmohkkfsidunkfc = deep ( root.left ) ; int uslihdbzrinwxdpycjqd = deep ( root.right ) ; if ( dfzfotmohkkfsidunkfc == uslihdbzrinwxdpycjqd ) { return ( ( int ) ( ( java.lang.Math . pow ( 2 , dfzfotmohkkfsidunkfc ) ) + ( countNodes ( root.right ) ) ) ) ; } else return ( ( int ) ( java.lang.Math . pow ( 2 , uslihdbzrinwxdpycjqd ) ) ) + ( countNodes ( root.left ) ) ; }

line_index: 642
bug_before_refactoring: sleepTime = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ select ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) ) <s> private static synchronized void sleep () { int select = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.mAutoId . getAndAdd ( 1 ) ) % ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS.length ) ; int sleepTime = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ select ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) ) ; if ( sleepTime > 0 ) { try { java.lang.Thread . sleep ( sleepTime ) ; } catch ( java.lang.InterruptedException ignore ) {} } } <s> fix a bug in BleWriteCharacterisitcNoResponsePacketOperation2.java
bug_after_refactoring: yudtyvlzjbyvlvlysdjf = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ jfrzufbtxfuqrfrevums ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) ) <s> private static synchronized void sleep () { int select = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.mAutoId . getAndAdd ( 1 ) ) % ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS.length ) ; int yudtyvlzjbyvlvlysdjf = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ jfrzufbtxfuqrfrevums ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) ) ; if ( sleepTime > 0 ) { try { java.lang.Thread . sleep ( sleepTime ) ; } catch ( java.lang.InterruptedException ignore ) {} } } <s> fix a bug in BleWriteCharacterisitcNoResponsePacketOperation2.java
fix_before_refactoring: sleepTime = ( ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) == 0 ) ? 0 : ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ select ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) )
fix_after_refactoring: yudtyvlzjbyvlvlysdjf = ( ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) == 0 ) ? 0 : ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ jfrzufbtxfuqrfrevums ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) )
× fix_prediction_before: sleepTime = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ select ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) )
× fix_prediction_after: yudtyvlzjbyvlvlysdjf = ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.PACKET_INTERVALS [ jfrzufbtxfuqrfrevums ] ) - ( ( int ) ( ( java.lang.System . currentTimeMillis () ) - ( com.afunx.ble.blelitelib.operation.BleWriteCharacterisitcNoResponsePacketOperation2.lastTimestamp ) ) )

line_index: 644
bug_before_refactoring: { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; double maxZoom = 15.5 ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( maxZoom ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } } <s> @ java.lang.Override public void onMapReady ( com.google.android.gms.maps.GoogleMap googleMap ) { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; double maxZoom = 15.5 ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( maxZoom ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } } <s> Fixed the problem of having multiple markers visible on map when choosing different destinations.
bug_after_refactoring: { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; double qubncznqgkxgtfzygqgd = 15.5 ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( qubncznqgkxgtfzygqgd ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } } <s> @ java.lang.Override public void onMapReady ( com.google.android.gms.maps.GoogleMap googleMap ) { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; double qubncznqgkxgtfzygqgd = 15.5 ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( qubncznqgkxgtfzygqgd ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } } <s> Fixed the problem of having multiple markers visible on map when choosing different destinations.
fix_before_refactoring: { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( 15.5 ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } }
fix_after_refactoring: { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( 15.5 ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } }
× fix_prediction_before: { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; double maxZoom = 15.5 ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( maxZoom ) ) ) ) ; setMyLocationEnabled () ; }
× fix_prediction_after: { mMap = googleMap ; com.google.android.gms.maps.model.LatLng loyola = new com.google.android.gms.maps.model.LatLng ( 41.998 , ( - 87.659 ) ) ; double qubncznqgkxgtfzygqgd = 15.5 ; mMap . moveCamera ( com.google.android.gms.maps.CameraUpdateFactory . newLatLngZoom ( loyola , ( ( float ) ( qubncznqgkxgtfzygqgd ) ) ) ) ; if ( checkPermissions () ) { setMyLocationEnabled () ; } }

line_index: 645
bug_before_refactoring: { assert ( addressReg ) == null ; addressUseReg = false ; long address = calAddress ( pc , this . address ) ; if ( addressUseReg ) { address += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { address += this . disp ; } com.zms.zpc.emulator.reg.Segment seg = ( ( com.zms.zpc.emulator.reg.Segment ) ( pc.cpu.regs . getReg ( instru.segBase ) ) ) ; return seg . getAddress ( address ) ; } <s> public long getMemoryAddress ( com.zms.zpc.emulator.PC pc ) { assert ( addressReg ) == null ; addressUseReg = false ; long address = calAddress ( pc , this . address ) ; if ( addressUseReg ) { address += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { address += this . disp ; } com.zms.zpc.emulator.reg.Segment seg = ( ( com.zms.zpc.emulator.reg.Segment ) ( pc.cpu.regs . getReg ( instru.segBase ) ) ) ; return seg . getAddress ( address ) ; } <s> bug fix
bug_after_refactoring: { assert ( addressReg ) == null ; addressUseReg = false ; long awutruihetxwquwlsswp = calAddress ( pc , this . awutruihetxwquwlsswp ) ; if ( addressUseReg ) { awutruihetxwquwlsswp += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { awutruihetxwquwlsswp += this . disp ; } com.zms.zpc.emulator.reg.Segment seg = ( ( com.zms.zpc.emulator.reg.Segment ) ( pc.cpu.regs . getReg ( instru.segBase ) ) ) ; return seg . getAddress ( awutruihetxwquwlsswp ) ; } <s> public long getMemoryAddress ( com.zms.zpc.emulator.PC pc ) { assert ( addressReg ) == null ; addressUseReg = false ; long awutruihetxwquwlsswp = calAddress ( pc , this . awutruihetxwquwlsswp ) ; if ( addressUseReg ) { awutruihetxwquwlsswp += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { awutruihetxwquwlsswp += this . disp ; } com.zms.zpc.emulator.reg.Segment seg = ( ( com.zms.zpc.emulator.reg.Segment ) ( pc.cpu.regs . getReg ( instru.segBase ) ) ) ; return seg . getAddress ( awutruihetxwquwlsswp ) ; } <s> bug fix
fix_before_refactoring: { assert ( addressReg ) == null ; addressUseReg = false ; long address = calAddress ( pc , this . address ) ; if ( addressUseReg ) { address += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { address += this . disp ; } return getMemoryAddress ( pc , address ) ; }
fix_after_refactoring: { assert ( addressReg ) == null ; addressUseReg = false ; long awutruihetxwquwlsswp = calAddress ( pc , this . awutruihetxwquwlsswp ) ; if ( addressUseReg ) { awutruihetxwquwlsswp += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { awutruihetxwquwlsswp += this . disp ; } return getMemoryAddress ( pc , awutruihetxwquwlsswp ) ; }
× fix_prediction_before: { assert ( addressReg ) == null ; addressUseReg = false ; long address = calAddress ( pc , this . address ) ; if ( addressUseReg ) { address += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { address += this . disp ; } com.zms.zpc.emulator.reg.Segment seg = ( ( com.zms.zpc.emulator.reg.Segment ) ( pc.cpu.regs . getReg ( instru.segBase ) ) ) ; return seg . getAddress ( address ) ; }
× fix_prediction_after: { assert ( addressReg ) == null ; addressUseReg = false ; long awutruihetxwquwlsswp = calAddress ( pc , this . awutruihetxwquwlsswp ) ; if ( addressUseReg ) { awutruihetxwquwlsswp += com.zms.zpc.execute.NumberUtils . asSigned ( this . disp , this . dispWidth ) ; } else { awutruihetxwquwlsswp += this . disp ; } com.zms.zpc.emulator.reg.Segment seg = ( ( com.zms.zpc.emulator.reg.Segment ) ( pc.cpu.regs . getReg ( instru.segBase ) ) ) ; return seg . getAddress ( awutruihetxwquwlsswp ) ; }

line_index: 646
bug_before_refactoring: { int nodeNum ; while ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } for ( semantic.Table t : parent.children ) { nodeNum = ( t . getSymbol ( 0 ) . getType () . equals ( "function name" ) ) ? 0 : 1 ; if ( t . getSymbol ( nodeNum ) . getName () . equals ( name ) ) return t ; } return null ; } <s> public semantic.Table lookupFunction ( java.lang.String name ) { int nodeNum ; while ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } for ( semantic.Table t : parent.children ) { nodeNum = ( t . getSymbol ( 0 ) . getType () . equals ( "function name" ) ) ? 0 : 1 ; if ( t . getSymbol ( nodeNum ) . getName () . equals ( name ) ) return t ; } return null ; } <s> Semantic bug fixes
bug_after_refactoring: { int bmagxyaobiztwpgaqlcf ; while ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } for ( semantic.Table t : parent.children ) { bmagxyaobiztwpgaqlcf = ( t . getSymbol ( 0 ) . getType () . equals ( "function name" ) ) ? 0 : 1 ; if ( t . getSymbol ( bmagxyaobiztwpgaqlcf ) . getName () . equals ( name ) ) return t ; } return null ; } <s> public semantic.Table lookupFunction ( java.lang.String name ) { int bmagxyaobiztwpgaqlcf ; while ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } for ( semantic.Table t : parent.children ) { bmagxyaobiztwpgaqlcf = ( t . getSymbol ( 0 ) . getType () . equals ( "function name" ) ) ? 0 : 1 ; if ( t . getSymbol ( bmagxyaobiztwpgaqlcf ) . getName () . equals ( name ) ) return t ; } return null ; } <s> Semantic bug fixes
fix_before_refactoring: { if ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } else { for ( semantic.Table t : parent.children ) { if ( t . getSymbol ( 0 ) . getName () . equals ( name ) ) return t ; } } return null ; }
fix_after_refactoring: { if ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } else { for ( semantic.Table t : parent.children ) { if ( t . getSymbol ( 0 ) . getName () . equals ( name ) ) return t ; } } return null ; }
× fix_prediction_before: { int nodeNum ; while ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } if ( ( parent.children ) == null ) return null ; for ( semantic.Table t : parent.children ) { nodeNum = ( t . getSymbol ( 0 ) . getType () . equals ( "function name" ) ) ? 0 : 1 ; if ( t . getSymbol ( nodeNum ) . getName () . equals ( name ) ) return t ; } return null ; }
× fix_prediction_after: { int bmagxyaobiztwpgaqlcf ; while ( ( parent ) != null ) { parent . lookupFunction ( name ) ; } if ( ( parent.children ) == null ) return null ; for ( semantic.Table t : parent.children ) { bmagxyaobiztwpgaqlcf = ( t . getSymbol ( 0 ) . getType () . equals ( "function name" ) ) ? 0 : 1 ; if ( t . getSymbol ( bmagxyaobiztwpgaqlcf ) . getName () . equals ( name ) ) return t ; } return null ; }

line_index: 647
bug_before_refactoring: { url.CreateLink short_link = new url.CreateLink ( this . row ) ; java.lang.String shortURL = short_link . encodeLongURL () ; long hashURL = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( hashURL , shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; } <s> private java.lang.Boolean AddShortURL () { url.CreateLink short_link = new url.CreateLink ( this . row ) ; java.lang.String shortURL = short_link . encodeLongURL () ; long hashURL = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( hashURL , shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; } <s> Update design and bug fix for user duplication checking
bug_after_refactoring: { url.CreateLink short_link = new url.CreateLink ( this . row ) ; java.lang.String shortURL = short_link . encodeLongURL () ; long rajeqwnlxmxeacjwkzbx = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( rajeqwnlxmxeacjwkzbx , shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; } <s> private java.lang.Boolean AddShortURL () { url.CreateLink short_link = new url.CreateLink ( this . row ) ; java.lang.String shortURL = short_link . encodeLongURL () ; long rajeqwnlxmxeacjwkzbx = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( rajeqwnlxmxeacjwkzbx , shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; } <s> Update design and bug fix for user duplication checking
fix_before_refactoring: { url.CreateLink short_link = new url.CreateLink ( this . row ) ; this . shortURL = short_link . encodeLongURL () ; long hashURL = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( hashURL , this . shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; }
fix_after_refactoring: { url.CreateLink short_link = new url.CreateLink ( this . row ) ; this . shortURL = short_link . encodeLongURL () ; long rajeqwnlxmxeacjwkzbx = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( rajeqwnlxmxeacjwkzbx , this . shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; }
× fix_prediction_before: { url.CreateLink short_link = new url.CreateLink ( this . row ) ; java.lang.String shortURL = short_link . encodeLongURL () ; long hashURL = short_link . getShortURLHash () ; try { this . insertFactory . insertShortLink ( hashURL , shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; }
× fix_prediction_after: { url.CreateLink short_link = new url.CreateLink ( this . row ) ; java.lang.String shortURL = short_link . encodeLongURL () ; try { this . insertFactory . insertShortLink ( rajeqwnlxmxeacjwkzbx , shortURL , this . row ) ; } catch ( java.lang.Exception e ) { helper.Loghandler . log ( ( "trying to insert the url " + ( e . toString () ) ) , "fatal" ) ; return false ; } return true ; }

line_index: 648
bug_before_refactoring: { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean clearDriver = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; synchronized ( au.com.agic.apptesting.State.THREAD_DESIRED_CAPABILITY_MAP ) { if ( clearDriver ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } } <s> @ cucumber.api.java.After public void teardown ( final cucumber.api.Scenario scenario ) { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean clearDriver = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; synchronized ( au.com.agic.apptesting.State.THREAD_DESIRED_CAPABILITY_MAP ) { if ( clearDriver ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } } <s> Fixed some bugs
bug_after_refactoring: { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean yejjlxwkslvqrbjaqnfv = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; synchronized ( au.com.agic.apptesting.State.THREAD_DESIRED_CAPABILITY_MAP ) { if ( yejjlxwkslvqrbjaqnfv ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } } <s> @ cucumber.api.java.After public void teardown ( final cucumber.api.Scenario scenario ) { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean yejjlxwkslvqrbjaqnfv = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; synchronized ( au.com.agic.apptesting.State.THREAD_DESIRED_CAPABILITY_MAP ) { if ( yejjlxwkslvqrbjaqnfv ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } } <s> Fixed some bugs
fix_before_refactoring: { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean clearDriver = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; if ( clearDriver ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } }
fix_after_refactoring: { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean yejjlxwkslvqrbjaqnfv = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; if ( yejjlxwkslvqrbjaqnfv ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } }
× fix_prediction_before: { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean clearDriver = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; synchronized ( au.com.agic.apptesting.State.THREAD_DESIRED_CAPABILITY_MAP ) { if ( clearDriver ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } }
× fix_prediction_after: { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean yejjlxwkslvqrbjaqnfv = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; synchronized ( au.com.agic.apptesting.State.THREAD_DESIRED_CAPABILITY_MAP ) { if ( yejjlxwkslvqrbjaqnfv ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } }

line_index: 649
bug_before_refactoring: public void getInterest () { int datediff = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double ratetime = java.lang.Math . pow ( ( 1 + ( rate ) ) , datediff ) ; balance = ( balance ) * ratetime ; firstdate = seconddate ; } <s> public void getInterest () { int datediff = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double ratetime = java.lang.Math . pow ( ( 1 + ( rate ) ) , datediff ) ; balance = ( balance ) * ratetime ; firstdate = seconddate ; } <s> fixed errors in calc interest
bug_after_refactoring: public void getInterest () { int stxysrhtbdlsdhxmfsmv = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double yromemwxxjdkjtjdeblj = java.lang.Math . pow ( ( 1 + ( rate ) ) , stxysrhtbdlsdhxmfsmv ) ; balance = ( balance ) * yromemwxxjdkjtjdeblj ; firstdate = seconddate ; } <s> public void getInterest () { int stxysrhtbdlsdhxmfsmv = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double yromemwxxjdkjtjdeblj = java.lang.Math . pow ( ( 1 + ( rate ) ) , stxysrhtbdlsdhxmfsmv ) ; balance = ( balance ) * yromemwxxjdkjtjdeblj ; firstdate = seconddate ; } <s> fixed errors in calc interest
fix_before_refactoring: public double getInterest () { int datediff = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double ratetime = java.lang.Math . pow ( ( 1 + ( rate ) ) , datediff ) ; balance = ( balance ) * ratetime ; firstdate = seconddate ; return balance ; }
fix_after_refactoring: public double getInterest () { int stxysrhtbdlsdhxmfsmv = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double yromemwxxjdkjtjdeblj = java.lang.Math . pow ( ( 1 + ( rate ) ) , stxysrhtbdlsdhxmfsmv ) ; balance = ( balance ) * yromemwxxjdkjtjdeblj ; firstdate = seconddate ; return balance ; }
× fix_prediction_before: public void getInterest () { int datediff = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double ratetime = java.lang.Math . pow ( ( 1 + ( rate ) ) ,ttediff ) ; balance = ( balance ) * ratetime ; firstdate = seconddate ; }
× fix_prediction_after: public void getInterest () { int stxysrhtbdlsdhxmfsmv = ( seconddate ) - ( firstdate ) ; rate = 0.05 / 365 ; double yromemwxxjdkjtjdeblj = java.lang.Math . pow ( ( 1 + ( rate ) ) , stxysrhtbdlsdhxmfsmv ) ; balance = ( balance ) * yromemwxxjdkjtjdeblj ; firstdate = seconddate ; }

line_index: 650
bug_before_refactoring: "Roba random sleep " + sleepTime <s> protected void robaRandomSleep ( int minSleepSecond , int maxSleepSecond ) { java.util.Random r = new java.util.Random () ; int sleepTime = ( minSleepSecond + ( r . nextInt ( ( maxSleepSecond - minSleepSecond ) ) ) ) * 1000 ; solo . sleep ( sleepTime ) ; android.util.Log . d ( com.crazyroba.RobaActivityInstrumentationTestCase2.TAG , ( ( "Roba random sleep " + sleepTime ) + " s" ) ) ; } <s> Update roba api & fix bug
bug_after_refactoring: "Roba random sleep " + colkovcsbtvscjbwoixg <s> protected void robaRandomSleep ( int minSleepSecond , int maxSleepSecond ) { java.util.Random r = new java.util.Random () ; int sleepTime = ( minSleepSecond + ( r . nextInt ( ( maxSleepSecond - minSleepSecond ) ) ) ) * 1000 ; solo . sleep ( sleepTime ) ; android.util.Log . d ( com.crazyroba.RobaActivityInstrumentationTestCase2.TAG , ( ( "Roba random sleep " + colkovcsbtvscjbwoixg ) + " s" ) ) ; } <s> Update roba api & fix bug
fix_before_refactoring: "Roba random sleep " + ( sleepTime / 1000 )
fix_after_refactoring: "Roba random sleep " + ( colkovcsbtvscjbwoixg / 1000 )
× fix_prediction_before: "Roba random sleep " + ( sleepTime + 1 )
× fix_prediction_after: "Roba random sleep " + ( colkovcsbtvscjbwoixg . get ( 0 ) )

line_index: 652
bug_before_refactoring: { int errWidth = ( ( pixelWidth ) == 0 ) ? 50 : pixelWidth ; int errHeight = ( ( pixelHeight ) == 0 ) ? 50 : pixelHeight ; setBitmap ( createErrorBitmap ( errWidth , errHeight ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; } <s> public synchronized void fail ( java.lang.Throwable error ) { int errWidth = ( ( pixelWidth ) == 0 ) ? 50 : pixelWidth ; int errHeight = ( ( pixelHeight ) == 0 ) ? 50 : pixelHeight ; setBitmap ( createErrorBitmap ( errWidth , errHeight ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; } <s> Sanity check image + canvas dimens.  Also fixed issue with size not being set for error image.
bug_after_refactoring: { int ghbkkdbmdrymhthoovjt = ( ( pixelWidth ) == 0 ) ? 50 : pixelWidth ; int ksuvpblcdpsmgsjifrrg = ( ( pixelHeight ) == 0 ) ? 50 : pixelHeight ; setBitmap ( createErrorBitmap ( ghbkkdbmdrymhthoovjt , ksuvpblcdpsmgsjifrrg ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; } <s> public synchronized void fail ( java.lang.Throwable error ) { int ghbkkdbmdrymhthoovjt = ( ( pixelWidth ) == 0 ) ? 50 : pixelWidth ; int ksuvpblcdpsmgsjifrrg = ( ( pixelHeight ) == 0 ) ? 50 : pixelHeight ; setBitmap ( createErrorBitmap ( ghbkkdbmdrymhthoovjt , ksuvpblcdpsmgsjifrrg ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; } <s> Sanity check image + canvas dimens.  Also fixed issue with size not being set for error image.
fix_before_refactoring: { if ( ( pixelWidth ) == 0 ) pixelWidth = 50 ; if ( ( pixelHeight ) == 0 ) pixelHeight = 50 ; setBitmap ( createErrorBitmap ( pixelWidth , pixelHeight ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; }
fix_after_refactoring: { if ( ( pixelWidth ) == 0 ) pixelWidth = 50 ; if ( ( pixelHeight ) == 0 ) pixelHeight = 50 ; setBitmap ( createErrorBitmap ( pixelWidth , pixelHeight ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; }
× fix_prediction_before: { int errWidth = ( ( pixelWidth ) == 0 ) ? 50 : pixelWidth ; int errHeight = ( ( pixelHeight ) == 0 ) ? 50 : pixelHeight ; setBitmap ( createErrorBitmap ( errWidth , errHeight ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; }
× fix_prediction_after: { int ghbkkdbmdrymhthoovjt = ( ( pixelWidth ) == 0 ) ? 0 : pixelWidth ; int ksuvpblcdpsmgsjifrrg = ( ( pixelHeight ) == 0 ) ? 50 : pixelHeight ; setBitmap ( createErrorBitmap ( ghbkkdbmdrymhthoovjt , ksuvpblcdpsmgsjifrrg ) ) ; ( ( react.RPromise < playn.core.Image > ) ( state ) ) . fail ( error ) ; }

line_index: 654
bug_before_refactoring: int [] elems = new int [] { - 76 , 45 , 66 , 3 , 234 , 54 , 33 } ; <s> @ org.junit.Test public void testSize () { Array < java.lang.Integer > list = new Array () ; int [] elems = new int [] { - 76 , 45 , 66 , 3 , 234 , 54 , 33 } ; for ( int i = 0 , sz = 1 ; i < ( elems.length ) ; i ++ , sz ++ ) { list . add ( elems [ i ] ) ; org.junit.Assert . assertEquals ( list . size () , sz ) ; } } <s> bug fixes
bug_after_refactoring: int [] afagjnwquwmytkgvnqgk = new int [] { - 76 , 45 , 66 , 3 , 234 , 54 , 33 } ; <s> @ org.junit.Test public void testSize () { Array < java.lang.Integer > list = new Array () ; int [] afagjnwquwmytkgvnqgk = new int [] { - 76 , 45 , 66 , 3 , 234 , 54 , 33 } ; for ( int i = 0 , sz = 1 ; i < ( elems.length ) ; i ++ , sz ++ ) { list . add ( elems [ i ] ) ; org.junit.Assert . assertEquals ( list . size () , sz ) ; } } <s> bug fixes
fix_before_refactoring: java.lang.Integer [] elems = new java.lang.Integer [] { - 76 , 45 , 66 , 3 , null , 54 , 33 } ;
fix_after_refactoring: java.lang.Integer [] afagjnwquwmytkgvnqgk = new java.lang.Integer [] { - 76 , 45 , 66 , 3 , null , 54 , 33 } ;
× fix_prediction_before: java.lang.Integer [] elems = new java.lang.Integer [] { - 76 , 45 , 66 , 3 , 234 , 54 , 33 } ;
× fix_prediction_after: java.lang.Integer [] afagjnwquwmytkgvnqgk = new java.lang.Integer [] { - 76 , 45 , 66 , 3 , 234 , 54 , 33 } ;

line_index: 655
bug_before_refactoring: { int secNum = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int minNum = java.lang.Integer . parseInt ( timeParts [ 1 ] ) ; int hourNum = java.lang.Integer . parseInt ( timeParts [ 0 ] ) ; oneHourTimerDelay = ( ( ( 60 - secNum ) + ( 60 * ( 10 - minNum ) ) ) + ( ( 24 - hourNum ) * 3600 ) ) * 1000 ; } <s> private void findOneHourTimerDelay ( java.lang.String [] timeParts ) { int secNum = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int minNum = java.lang.Integer . parseInt ( timeParts [ 1 ] ) ; int hourNum = java.lang.Integer . parseInt ( timeParts [ 0 ] ) ; oneHourTimerDelay = ( ( ( 60 - secNum ) + ( 60 * ( 10 - minNum ) ) ) + ( ( 24 - hourNum ) * 3600 ) ) * 1000 ; } <s> Fix minor bug. Start saving org
bug_after_refactoring: { int uxvmwsgwkjidmndbgxwz = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int domaqyfbsgfejhovwzml = java.lang.Integer . parseInt ( timeParts [ 1 ] ) ; int hlnzheqbhgivllqtwiwc = java.lang.Integer . parseInt ( timeParts [ 0 ] ) ; oneHourTimerDelay = ( ( ( 60 - uxvmwsgwkjidmndbgxwz ) + ( 60 * ( 10 - domaqyfbsgfejhovwzml ) ) ) + ( ( 24 - hlnzheqbhgivllqtwiwc ) * 3600 ) ) * 1000 ; } <s> private void findOneHourTimerDelay ( java.lang.String [] timeParts ) { int uxvmwsgwkjidmndbgxwz = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int domaqyfbsgfejhovwzml = java.lang.Integer . parseInt ( timeParts [ 1 ] ) ; int hlnzheqbhgivllqtwiwc = java.lang.Integer . parseInt ( timeParts [ 0 ] ) ; oneHourTimerDelay = ( ( ( 60 - uxvmwsgwkjidmndbgxwz ) + ( 60 * ( 10 - domaqyfbsgfejhovwzml ) ) ) + ( ( 24 - hlnzheqbhgivllqtwiwc ) * 3600 ) ) * 1000 ; } <s> Fix minor bug. Start saving org
fix_before_refactoring: { int secNum = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int minNum = ( java.lang.Integer . parseInt ( timeParts [ 1 ] ) ) % 10 ; oneHourTimerDelay = ( ( 60 - secNum ) + ( 60 * ( 60 - minNum ) ) ) * 1000 ; }
fix_after_refactoring: { int uxvmwsgwkjidmndbgxwz = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int domaqyfbsgfejhovwzml = ( java.lang.Integer . parseInt ( timeParts [ 1 ] ) ) % 10 ; oneHourTimerDelay = ( ( 60 - uxvmwsgwkjidmndbgxwz ) + ( 60 * ( 60 - domaqyfbsgfejhovwzml ) ) ) * 1000 ; }
× fix_prediction_before: { int secNum = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int minNum = java.lang.Integer . parseInt ( timeParts [ 1 ] ) ; int hourNum = java.lang.Integer . parseInt ( timeParts [ 0 ] ) ; oneHourTimerDelay = ( ( ( 60 - secNum ) + ( 60 * ( 10 - minNum ) ) ) + ( ( 24 - hourNum ) * 3600 ) ) * 1000 ; }
× fix_prediction_after: { int uxvmwsgwkjidmndbgxwz = java.lang.Integer . parseInt ( timeParts [ 2 ] ) ; int domaqyfbsgfejhovwzml = java.lang.Integer . parseInt ( timeParts [ 1 ] ) ; int hlnzheqbhgivllqtwiwc = java.lang.Integer . parseInt ( timeParts [ 0 ] ) ; oneHourTimerDelay = ( ( ( 60 - uxvmwsgwkjidmndbgxwz ) + ( 60 * ( 10 - domaqyfbsgfejhovwzml ) ) ) + ( ( 24 - hlnzheqbhgivllqtwiwc ) * 3600 ) ) * 1000 ; }

line_index: 656
bug_before_refactoring: { int check_ntype = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( check_ntype != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } java.util.List < org.msgpack.type.Value > new_path = l . remove ( 0 ) . asArrayValue () ; path = new java.util.ArrayList < java.lang.Integer > () ; for ( org.msgpack.type.Value v : new_path ) { path . add ( v . asIntegerValue () . getInt () ) ; } } <s> @ java.lang.Override public void unpackFromFrontOfList ( java.util.List < org.msgpack.type.Value > l ) { int check_ntype = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( check_ntype != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } java.util.List < org.msgpack.type.Value > new_path = l . remove ( 0 ) . asArrayValue () ; path = new java.util.ArrayList < java.lang.Integer > () ; for ( org.msgpack.type.Value v : new_path ) { path . add ( v . asIntegerValue () . getInt () ) ; } } <s> Misc bugfixes to get tree loading to work  - App now successfully loads the config tree!
bug_after_refactoring: { int wrgowravofdlegxwsfwu = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( wrgowravofdlegxwsfwu != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } java.util.List < org.msgpack.type.Value > new_path = l . remove ( 0 ) . asArrayValue () ; path = new java.util.ArrayList < java.lang.Integer > () ; for ( org.msgpack.type.Value v : new_path ) { path . add ( v . asIntegerValue () . getInt () ) ; } } <s> @ java.lang.Override public void unpackFromFrontOfList ( java.util.List < org.msgpack.type.Value > l ) { int wrgowravofdlegxwsfwu = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( wrgowravofdlegxwsfwu != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } java.util.List < org.msgpack.type.Value > new_path = l . remove ( 0 ) . asArrayValue () ; path = new java.util.ArrayList < java.lang.Integer > () ; for ( org.msgpack.type.Value v : new_path ) { path . add ( v . asIntegerValue () . getInt () ) ; } } <s> Misc bugfixes to get tree loading to work  - App now successfully loads the config tree!
fix_before_refactoring: { int check_ntype = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( check_ntype != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } path = l . remove ( 0 ) . toString () ; }
fix_after_refactoring: { int wrgowravofdlegxwsfwu = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( wrgowravofdlegxwsfwu != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } path = l . remove ( 0 ) . toString () ; }
× fix_prediction_before: { int check_ntype = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( check_ntype != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } java.util.List < org.msgpack.type.Value > new_path = l . remove ( 0 ) . asArrayValue () ; path = new java.util.ArrayList < java.lang.Integer > () ; for ( org.msgpack.type.Value v : new_path ) { path . add ( v . asIntegerValue () . getInt () ) ; } }
× fix_prediction_after: { int wrgobravofdlegxwsfwu = l . remove ( 0 ) . asIntegerValue () . getInt () ; if ( wrgowravofdlegxwsfwu != ( ntype ) ) { android.util.Log . e ( com.mooshim.mooshimeter.common.ConfigTree.TAG , "WRONG NODE TYPE" ) ; } java.util.List < org.msgpack.type.Value > new_path = l . remove ( 0 ) . asArrayValue () ; path = new java.util.ArrayList < java.lang.Integer > () ; for ( org.msgpack.type.Value v : new_path ) { path . add ( v . asIntegerValue () . getInt () ) ; } }

line_index: 657
bug_before_refactoring: { int currPlayerId = currPlayer . getCurrPlayerID () ; int potVal = currPlayer . getPot () ; int amtBetInGame = currPlayer . getCurrBetInGame () ; if ( ( amtBetInGame * 2 ) >= potVal ) currPlayer . winMoney ( potVal ) ; else currPlayer . winMoney ( ( amtBetInGame * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } currPlayer . resetRound () ; } <s> public void onWin () { int currPlayerId = currPlayer . getCurrPlayerID () ; int potVal = currPlayer . getPot () ; int amtBetInGame = currPlayer . getCurrBetInGame () ; if ( ( amtBetInGame * 2 ) >= potVal ) currPlayer . winMoney ( potVal ) ; else currPlayer . winMoney ( ( amtBetInGame * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } currPlayer . resetRound () ; } <s> Fixed some bugs
bug_after_refactoring: { int tarasszifxxicrnkrsia = currPlayer . getCurrPlayerID () ; int twwyqqivkpvpdndyetqv = currPlayer . getPot () ; int svapczoactkntkyrsylu = currPlayer . getCurrBetInGame () ; if ( ( svapczoactkntkyrsylu * 2 ) >= twwyqqivkpvpdndyetqv ) currPlayer . winMoney ( twwyqqivkpvpdndyetqv ) ; else currPlayer . winMoney ( ( svapczoactkntkyrsylu * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } currPlayer . resetRound () ; } <s> public void onWin () { int tarasszifxxicrnkrsia = currPlayer . getCurrPlayerID () ; int twwyqqivkpvpdndyetqv = currPlayer . getPot () ; int svapczoactkntkyrsylu = currPlayer . getCurrBetInGame () ; if ( ( svapczoactkntkyrsylu * 2 ) >= twwyqqivkpvpdndyetqv ) currPlayer . winMoney ( twwyqqivkpvpdndyetqv ) ; else currPlayer . winMoney ( ( svapczoactkntkyrsylu * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } currPlayer . resetRound () ; } <s> Fixed some bugs
fix_before_refactoring: { int currPlayerId = currPlayer . getCurrPlayerID () ; int potVal = currPlayer . getPot () ; int amtBetInGame = currPlayer . getCurrBetInGame () ; if ( ( amtBetInGame * 2 ) >= potVal ) currPlayer . winMoney ( potVal ) ; else currPlayer . winMoney ( ( amtBetInGame * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } }
fix_after_refactoring: { int tarasszifxxicrnkrsia = currPlayer . getCurrPlayerID () ; int twwyqqivkpvpdndyetqv = currPlayer . getPot () ; int svapczoactkntkyrsylu = currPlayer . getCurrBetInGame () ; if ( ( svapczoactkntkyrsylu * 2 ) >= twwyqqivkpvpdndyetqv ) currPlayer . winMoney ( twwyqqivkpvpdndyetqv ) ; else currPlayer . winMoney ( ( svapczoactkntkyrsylu * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } }
× fix_prediction_before: { int currPlayerId = currPlayer . getCurrPlayerID () ; int potVal = currPlayer . getPot () ; int amtBetInGame = currPlayer . getCurrBetInGame () ; if ( ( amtBetInGame * 2 ) >= potVal ) currPlayer . winMoney ( potVal ) ; else currPlayer . winMoney ( ( amtBetInGame * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } currPlayer . resetRound () ; }
× fix_prediction_after: { int tarasszifxxicrnkrsia = currPlayer . getCurrPlayerID () ; int twwyqqivkpvpdndyetqv = currPlayer . getPot () ; int svapczoactkntkyrsylu = currPlayer . getCurrBetInGame () ; if ( ( svapczoactkntkyrsylu * 2 ) >= twwyqqivkpvpdndyetqv ) currPlayer . winMoney ( twwyqqivkpvpdndyetqv ) ; else currPlayer . winMoney ( ( svapczoactkntkyrsylu * 2 ) ) ; message . setText ( "You Win!" ) ; try { java.lang.Thread . sleep ( 5000 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } currPlayer . resetRound () ; }

line_index: 658
bug_before_refactoring: { int row ; int col ; int color ; row = origSelectedBoardBlok . getRow () ; col = origSelectedBoardBlok . getColumn () ; color = origSelectedBoardBlok . getColor () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( row , col , color ) ; return newBlok ; } <s> private edu.up.cs301.blokus.Blok copySelectedBoardBlok ( edu.up.cs301.blokus.Blok origSelectedBoardBlok ) { int row ; int col ; int color ; row = origSelectedBoardBlok . getRow () ; col = origSelectedBoardBlok . getColumn () ; color = origSelectedBoardBlok . getColor () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( row , col , color ) ; return newBlok ; } <s> Fixed terrible game state bug that broke everything
bug_after_refactoring: { int kvygnujrjrnmxnxbykbf ; int jqdupodkpfqcxwhuwkxn ; int bkoqjnmbjubcgcrmqzfp ; kvygnujrjrnmxnxbykbf = origSelectedBoardBlok . getRow () ; jqdupodkpfqcxwhuwkxn = origSelectedBoardBlok . getColumn () ; bkoqjnmbjubcgcrmqzfp = origSelectedBoardBlok . getColor () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( kvygnujrjrnmxnxbykbf , jqdupodkpfqcxwhuwkxn , bkoqjnmbjubcgcrmqzfp ) ; return newBlok ; } <s> private edu.up.cs301.blokus.Blok copySelectedBoardBlok ( edu.up.cs301.blokus.Blok origSelectedBoardBlok ) { int kvygnujrjrnmxnxbykbf ; int jqdupodkpfqcxwhuwkxn ; int bkoqjnmbjubcgcrmqzfp ; kvygnujrjrnmxnxbykbf = origSelectedBoardBlok . getRow () ; jqdupodkpfqcxwhuwkxn = origSelectedBoardBlok . getColumn () ; bkoqjnmbjubcgcrmqzfp = origSelectedBoardBlok . getColor () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( kvygnujrjrnmxnxbykbf , jqdupodkpfqcxwhuwkxn , bkoqjnmbjubcgcrmqzfp ) ; return newBlok ; } <s> Fixed terrible game state bug that broke everything
fix_before_refactoring: { if ( origSelectedBoardBlok == null ) { return null ; } int row ; int col ; int color ; row = origSelectedBoardBlok . getRow () ; col = origSelectedBoardBlok . getColumn () ; color = origSelectedBoardBlok . getColor () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( row , col , color ) ; return newBlok ; }
fix_after_refactoring: { if ( origSelectedBoardBlok == null ) { return null ; } int kvygnujrjrnmxnxbykbf ; int jqdupodkpfqcxwhuwkxn ; int bkoqjnmbjubcgcrmqzfp ; kvygnujrjrnmxnxbykbf = origSelectedBoardBlok . getRow () ; jqdupodkpfqcxwhuwkxn = origSelectedBoardBlok . getColumn () ; bkoqjnmbjubcgcrmqzfp = origSelectedBoardBlok . getColor () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( kvygnujrjrnmxnxbykbf , jqdupodkpfqcxwhuwkxn , bkoqjnmbjubcgcrmqzfp ) ; return newBlok ; }
× fix_prediction_before: { int row ; int col ; int color ; row = origSelectedBoardBlok . getRow () ; col = origSelectedBoardBlok . getColumn () ; edu.up.cs301.blokus.Blok newBlok = new edu.up.cs301.blokus.Blok ( row , col , color ) ; return newBlok ; }
× fix_prediction_after: { final int kvygnujrjrnmxnxbykbf ; int jqdupodkpfqcxwhuwkxn ; int bkoqjnmbjubcgcrmqzfp ; kvygnujrjrnmxnxbykbf = origSelectedBoardBlok . getRow () ; jqdupodkpfqcxwhuwkxn = origSelectedBoardBlok . getColumn () ; bkoqjnmbjubcgcrmqzfp = origSelectedBoardBlok . getColor () ; return newBlok ; }

line_index: 659
bug_before_refactoring: { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> public static void main ( java.lang.String [] args ) { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> fix compilation error
bug_after_refactoring: { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> public static void main ( java.lang.String [] args ) { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; } <s> fix compilation error
fix_before_refactoring: { int secretNumber = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int attemps = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; }
fix_after_refactoring: { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; }
× fix_prediction_before: { java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; }
× fix_prediction_after: { int aasjtqygyejizpfjxjwz = ( ( int ) ( 1 + ( ( java.lang.Math . random () ) * 10 ) ) ) ; int xvtkzuwgwocpsdukijsz = 3 ; java.lang.System.out . println ( "Hi! I chose a number from 0 to 10 for you! Try to guess" ) ; java.lang.System.out . println ( "You have" ) ; java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; java.lang.String inpu ; }

line_index: 661
bug_before_refactoring: if ( command_type != null ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , command_param ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; } <s> @ java.lang.Override public void onDismiss ( com.example.reativos.oscar.AddParam myDialogFragment ) { java.lang.String command_type = dataStore . getString ( "type" ) ; int command_param = dataStore . getInt ( "param" ) ; if ( command_type != null ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , command_param ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; } } <s> Allow timer dialog dismissal; fixed code generation bug for empty reactions.
bug_after_refactoring: if ( command_type != null ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , onjyacqfqmuoyggspzuf ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; } <s> @ java.lang.Override public void onDismiss ( com.example.reativos.oscar.AddParam myDialogFragment ) { java.lang.String command_type = dataStore . getString ( "type" ) ; int command_param = dataStore . getInt ( "param" ) ; if ( command_type != null ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , onjyacqfqmuoyggspzuf ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; } } <s> Allow timer dialog dismissal; fixed code generation bug for empty reactions.
fix_before_refactoring: if ( ( command_type != null ) && ( ! ( command_type . isEmpty () ) ) ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , command_param ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; }
fix_after_refactoring: if ( ( command_type != null ) && ( ! ( command_type . isEmpty () ) ) ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , onjyacqfqmuoyggspzuf ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; }
× fix_prediction_before: if ( ( command_type != null ) && ( ( command_param ) != null ) ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , command_param ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; }
× fix_prediction_after: if ( command_type != null ) { com.example.reativos.oscar.Command newCommand = new com.example.reativos.oscar.Command ( command_type , onjyacqfqmuoyggspzuf ) ; commandLists . get ( currentTabTag ) . add ( newCommand ) ; adapters . get ( currentTabTag ) . notifyDataSetChanged () ; }

line_index: 662
bug_before_refactoring: { int winAns = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) return 3 ; else if ( ( BotParser.mRound ) > 5 ) winAns = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( winAns != 9 ) return winAns ; winAns = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( winAns != 9 ) return winAns ; else { int move = new java.util.Random () . nextInt ( 7 ) ; return move ; } } <s> public int makeTurn () { int winAns = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) return 3 ; else if ( ( BotParser.mRound ) > 5 ) winAns = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( winAns != 9 ) return winAns ; winAns = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( winAns != 9 ) return winAns ; else { int move = new java.util.Random () . nextInt ( 7 ) ; return move ; } } <s> Bug fixes etc. V1  First working bot. Will go for a win else block the enemy's win else random move.
bug_after_refactoring: { int rrphaxvzijxryhlvrxfc = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) return 3 ; else if ( ( BotParser.mRound ) > 5 ) rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; else { int hkbbofqtpapeopxrebho = new java.util.Random () . nextInt ( 7 ) ; return hkbbofqtpapeopxrebho ; } } <s> public int makeTurn () { int rrphaxvzijxryhlvrxfc = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) return 3 ; else if ( ( BotParser.mRound ) > 5 ) rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; else { int hkbbofqtpapeopxrebho = new java.util.Random () . nextInt ( 7 ) ; return hkbbofqtpapeopxrebho ; } } <s> Bug fixes etc. V1  First working bot. Will go for a win else block the enemy's win else random move.
fix_before_refactoring: { int winAns = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) { return 3 ; } if ( ( BotParser.mRound ) >= 3 ) { winAns = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( winAns != 9 ) return winAns ; winAns = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( winAns != 9 ) return winAns ; } int move = new java.util.Random () . nextInt ( 7 ) ; return move ; }
fix_after_refactoring: { int rrphaxvzijxryhlvrxfc = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) { return 3 ; } if ( ( BotParser.mRound ) >= 3 ) { rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; } int hkbbofqtpapeopxrebho = new java.util.Random () . nextInt ( 7 ) ; return hkbbofqtpapeopxrebho ; }
× fix_prediction_before: { int winAns = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) return 3 ; else if ( ( BotParser.mRound ) > 5 ) winAns = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( winAns != 9 ) return winAns ; winAns = BotParser.mField . checkWin ( BotParser.mBotIdE ) ; if ( winAns != 9 ) return winAns ; else { int move = new java.util.Random () . nextInt ( 7 ) ; return move ; } }
× fix_prediction_after: { int rrphaxvzijxryhlvrxfc = 9 ; if ( ( ( BotParser.mRound ) == 1 ) || ( ( BotParser.mRound ) == 2 ) ) return 3 ; else if ( ( BotParser.mRound ) > 5 ) rrphaxvzijxryhlvrxfc = BotParser.mField . checkWin ( BotParser.mBotId ) ; if ( rrphaxvzijxryhlvrxfc != 9 ) return rrphaxvzijxryhlvrxfc ; else { int hkbbofqtpapeopxrebho = new java.util.Random () . nextInt ( 7 ) ; return hkbbofqtpapeopxrebho ; } }

line_index: 663
bug_before_refactoring: { boolean debuggerEnabled = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; debuggerEnabled = debugOpt . isDebugEnabled () ; } return debuggerEnabled ; } <s> @ java.lang.SuppressWarnings ( value = "restriction" ) public static boolean isEclipseDebug () { boolean debuggerEnabled = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; debuggerEnabled = debugOpt . isDebugEnabled () ; } return debuggerEnabled ; } <s> fix for talend debugger class
bug_after_refactoring: { boolean vtcnyykuajeqdrflgelf = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; vtcnyykuajeqdrflgelf = debugOpt . isDebugEnabled () ; } return vtcnyykuajeqdrflgelf ; } <s> @ java.lang.SuppressWarnings ( value = "restriction" ) public static boolean isEclipseDebug () { boolean vtcnyykuajeqdrflgelf = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; vtcnyykuajeqdrflgelf = debugOpt . isDebugEnabled () ; } return vtcnyykuajeqdrflgelf ; } <s> fix for talend debugger class
fix_before_refactoring: { boolean debuggerEnabled = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; if ( bundleContext == null ) { return false ; } org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; debuggerEnabled = debugOpt . isDebugEnabled () ; } return debuggerEnabled ; }
fix_after_refactoring: { boolean vtcnyykuajeqdrflgelf = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; if ( bundleContext == null ) { return false ; } org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; vtcnyykuajeqdrflgelf = debugOpt . isDebugEnabled () ; } return vtcnyykuajeqdrflgelf ; }
× fix_prediction_before: { boolean debuggerEnabled = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; debuggerEnabled = debugOpt . isDebugEnabled () ; } return debugEnabled ; }
× fix_prediction_after: { boolean vtcnyykuajeqdrflgelf = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; vtcnyykuajeqdrflgelf = debugOpt . isDebugEnabled () ; } return vtcnyykuajeqdrflgelf ; }

line_index: 665
bug_before_refactoring: if ( j < ( ( n ) - 1 ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } } <s> private void connectRight ( int i , int j ) { if ( j < ( ( n ) - 1 ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } } } <s> Percolation assignment - part I & II - bug fixes
bug_after_refactoring: if ( j < ( ( n ) - 1 ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } } <s> private void connectRight ( int i , int j ) { if ( j < ( ( n ) - 1 ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } } } <s> Percolation assignment - part I & II - bug fixes
fix_before_refactoring: if ( j < ( n ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } }
fix_after_refactoring: if ( j < ( n ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } }
× fix_prediction_before: if ( j < ( ( n ) - 1 ) ) { int right = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( right ) ) { grid . union ( right , getPosition ( i , j ) ) ; } }
× fix_prediction_after: if ( j > ( n ) ) { int iubaiihsxnndpbvkjngn = getPosition ( i , ( j + 1 ) ) ; if ( isOpen ( iubaiihsxnndpbvkjngn ) ) { grid . union ( iubaiihsxnndpbvkjngn , getPosition ( i , j ) ) ; } }

line_index: 666
bug_before_refactoring: private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; } <s> private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; } <s> bug fix // sine and changes type a functions using ans might be wrong when used thus type check is re run at run time to ensure that all types are ok
bug_after_refactoring: private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; } <s> private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; } <s> bug fix // sine and changes type a functions using ans might be wrong when used thus type check is re run at run time to ensure that all types are ok
fix_before_refactoring: protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; }
fix_after_refactoring: protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; }
× fix_prediction_before: private boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; }
× fix_prediction_after: public boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ylnjdazggdzhxossrsed = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ylnjdazggdzhxossrsed ; }

line_index: 667
bug_before_refactoring: { if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( ( settingsManager . getPresetIdInRouterFragment () ) < 1 ) ) { return; } org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; boolean isInsidePublicTransport = false ; if ( ( numberOfHighSpeeds ) > 0 ) isInsidePublicTransport = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , isInsidePublicTransport ) ; } <s> public void queryPOIListUpdate () { if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( ( settingsManager . getPresetIdInRouterFragment () ) < 1 ) ) { return; } org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; boolean isInsidePublicTransport = false ; if ( ( numberOfHighSpeeds ) > 0 ) isInsidePublicTransport = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , isInsidePublicTransport ) ; } <s> Version 0.5.1 fixes a location accuracy problem
bug_after_refactoring: { if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( ( settingsManager . getPresetIdInRouterFragment () ) < 1 ) ) { return; } org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; boolean szmicfxnolghfpggwsae = false ; if ( ( numberOfHighSpeeds ) > 0 ) szmicfxnolghfpggwsae = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , szmicfxnolghfpggwsae ) ; } <s> public void queryPOIListUpdate () { if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( ( settingsManager . getPresetIdInRouterFragment () ) < 1 ) ) { return; } org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; boolean szmicfxnolghfpggwsae = false ; if ( ( numberOfHighSpeeds ) > 0 ) szmicfxnolghfpggwsae = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , szmicfxnolghfpggwsae ) ; } <s> Version 0.5.1 fixes a location accuracy problem
fix_before_refactoring: { org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( preset == null ) ) { return; } boolean isInsidePublicTransport = false ; if ( ( numberOfHighSpeeds ) > 0 ) isInsidePublicTransport = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , isInsidePublicTransport ) ; }
fix_after_refactoring: { org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( preset == null ) ) { return; } boolean szmicfxnolghfpggwsae = false ; if ( ( numberOfHighSpeeds ) > 0 ) szmicfxnolghfpggwsae = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , szmicfxnolghfpggwsae ) ; }
× fix_prediction_before: { if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( ( settingsManager . getPresetIdInRouterFragment () ) < 1 ) ) { return; } org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; boolean isInsidePublicTransport = false ; if ( ( numberOfHighSpeeds ) > 0 ) isInsidePublicTransport = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , isInsidePublicTransport ) ; }
× fix_prediction_after: { if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( ( settingsManager . getPresetIdInRouterFragment () ) < 1 ) ) { return; } org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; boolean szmicfxnolghfpggwsae = false ; if ( ( numberOfHighSpeeds ) > 0 ) szmicfxnolghfpggwsae = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , szmicfxnolghfpggwsae ) ; }

line_index: 668
bug_before_refactoring: public void computeDemoRectangle ( float viewWidth , float viewHeight ) { float centerX = viewWidth / 2 ; float centerY = viewHeight / 2 ; float deltaX = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float deltaY = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( centerX , centerY , deltaX , deltaY ) ; } <s> public void computeDemoRectangle ( float viewWidth , float viewHeight ) { float centerX = viewWidth / 2 ; float centerY = viewHeight / 2 ; float deltaX = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float deltaY = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( centerX , centerY , deltaX , deltaY ) ; } <s> bug fix: late arriving point during demonstration corrupted list in main activity
bug_after_refactoring: public void computeDemoRectangle ( float viewWidth , float viewHeight ) { float qvkpumjiaarkcyuveujz = viewWidth / 2 ; float pdlsnykucszrhykqewfu = viewHeight / 2 ; float ozkpyzdynxgirdyebhln = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float lxsvcvbdlavlwyczyigd = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( qvkpumjiaarkcyuveujz , pdlsnykucszrhykqewfu , ozkpyzdynxgirdyebhln , lxsvcvbdlavlwyczyigd ) ; } <s> public void computeDemoRectangle ( float viewWidth , float viewHeight ) { float qvkpumjiaarkcyuveujz = viewWidth / 2 ; float pdlsnykucszrhykqewfu = viewHeight / 2 ; float ozkpyzdynxgirdyebhln = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float lxsvcvbdlavlwyczyigd = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( qvkpumjiaarkcyuveujz , pdlsnykucszrhykqewfu , ozkpyzdynxgirdyebhln , lxsvcvbdlavlwyczyigd ) ; } <s> bug fix: late arriving point during demonstration corrupted list in main activity
fix_before_refactoring: public void computeDemoRectangle ( float viewWidth , float viewHeight ) { if ( ( ( demoData ) != null ) && ( ( demoData . size () ) == 0 ) ) { float centerX = viewWidth / 2 ; float centerY = viewHeight / 2 ; float deltaX = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float deltaY = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( centerX , centerY , deltaX , deltaY ) ; } }
fix_after_refactoring: public void computeDemoRectangle ( float viewWidth , float viewHeight ) { if ( ( ( demoData ) != null ) && ( ( demoData . size () ) == 0 ) ) { float qvkpumjiaarkcyuveujz = viewWidth / 2 ; float pdlsnykucszrhykqewfu = viewHeight / 2 ; float ozkpyzdynxgirdyebhln = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float lxsvcvbdlavlwyczyigd = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( qvkpumjiaarkcyuveujz , pdlsnykucszrhykqewfu , ozkpyzdynxgirdyebhln , lxsvcvbdlavlwyczyigd ) ; } }
× fix_prediction_before: public void computeDemoRectangle ( float viewWidth , float viewHeight ) { float centerX = viewWidth / 2 ; float centerY = viewHeight / 2 ; float deltaX = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float deltaY = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( centerX , centerY , deltaX , deltaY ) ; }
× fix_prediction_after: public void computeDemoRectangle ( float viewWidth , float viewHeight ) { float qvkpumjiaarkcyuveujz = viewWidth / 2 ; float pdlsnykucszrhykqewfu = viewHeight / 2 ; float ozkpyzdynxgirdyebhln = viewWidth / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; float lxsvcvbdlavlwyczyigd = viewHeight / ( ( float ) ( de.peterloos.beziersplines.utils.ControlPointsHolder.NumDemoEdges ) ) ; demoData = de.peterloos.beziersplines.utils.ControlPointsHolder . getDemoRectangle ( qvkpumjiaarkcyuveujz , pdlsnykucszrhykqewfu , ozkpyzdynxgirdyebhln , lxsvcvbdlavlwyczyigd ) ; }

line_index: 669
bug_before_refactoring: { double pY = points . get ( i ) . y ; if ( pY < minY ) { if ( ( points . get ( i ) . z ) <= 0 ) { return ( - ( TheLittleEngineThatCould.windowHeight ) ) / 2 ; } minY = pY ; } } <s> public double getMinY () { double minY = points . get ( 0 ) . y ; for ( int i = 1 ; i < ( points . size () ) ; i ++ ) { double pY = points . get ( i ) . y ; if ( pY < minY ) { if ( ( points . get ( i ) . z ) <= 0 ) { return ( - ( TheLittleEngineThatCould.windowHeight ) ) / 2 ; } minY = pY ; } } return minY ; } <s> Fixed extra pixels rendering issue
bug_after_refactoring: { double sowbfjxpoaublwquqdih = points . get ( i ) . y ; if ( sowbfjxpoaublwquqdih < pwweesqxrtgsijwhxhbl ) { if ( ( points . get ( i ) . z ) <= 0 ) { return ( - ( TheLittleEngineThatCould.windowHeight ) ) / 2 ; } pwweesqxrtgsijwhxhbl = sowbfjxpoaublwquqdih ; } } <s> public double getMinY () { double minY = points . get ( 0 ) . y ; for ( int i = 1 ; i < ( points . size () ) ; i ++ ) { double sowbfjxpoaublwquqdih = points . get ( i ) . y ; if ( sowbfjxpoaublwquqdih < pwweesqxrtgsijwhxhbl ) { if ( ( points . get ( i ) . z ) <= 0 ) { return ( - ( TheLittleEngineThatCould.windowHeight ) ) / 2 ; } pwweesqxrtgsijwhxhbl = sowbfjxpoaublwquqdih ; } } return minY ; } <s> Fixed extra pixels rendering issue
fix_before_refactoring: { double pY = points . get ( i ) . y ; if ( pY < minY ) { minY = pY ; } }
fix_after_refactoring: { double sowbfjxpoaublwquqdih = points . get ( i ) . y ; if ( sowbfjxpoaublwquqdih < pwweesqxrtgsijwhxhbl ) { pwweesqxrtgsijwhxhbl = sowbfjxpoaublwquqdih ; } }
× fix_prediction_before: { double pY = points . get ( i ) . y ; if ( pY < minY ) { if ( ( points . get ( i ) . z ) <= 0 ) { return ( - ( TheLittleEngineThatCould.windowHeight ) ) / 2 ; } minY = pY ; } }
× fix_prediction_after: { double sowbfjxpoaublwquqdih = points . get ( i ) . y ; if ( sowbfjxpoaublwquqdih < pwweesqxrtgsijwhxhbl ) { if ( ( points . get ( i ) . z ) <= 0 ) { return ( - ( TheLittleEngineThatCould.windowHeight ) ) / 2 ; } } }

line_index: 672
bug_before_refactoring: public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear ( ) throws java.lang.Exception { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int dayOfYear = now . getDayOfYear () ; int dayOfMostRecentPeriod = dayOfYear % 14 ; com.cronutils.model.time.ZonedDateTime expected = ( dayOfMostRecentPeriod == 1 ) ? now : now . plusDays ( ( 15 - dayOfMostRecentPeriod ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR ) ) ; assertEquals ( expected , executionTime . nextExecution ( now ) . get () ) ; } <s> public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear ( ) throws java.lang.Exception { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int dayOfYear = now . getDayOfYear () ; int dayOfMostRecentPeriod = dayOfYear % 14 ; com.cronutils.model.time.ZonedDateTime expected = ( dayOfMostRecentPeriod == 1 ) ? now : now . plusDays ( ( 15 - dayOfMostRecentPeriod ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR ) ) ; assertEquals ( expected , executionTime . nextExecution ( now ) . get () ) ; } <s> Merge branch 'fix-issue-184' of https://github.com/meincs/cron-utils into meincs-fix-issue-184
bug_after_refactoring: public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear ( ) throws java.lang.Exception { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int bnelwexgajfqurpmlhon = now . getDayOfYear () ; int bxzydejjzvketsgliify = bnelwexgajfqurpmlhon % 14 ; com.cronutils.model.time.ZonedDateTime expected = ( bxzydejjzvketsgliify == 1 ) ? now : now . plusDays ( ( 15 - bxzydejjzvketsgliify ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR ) ) ; assertEquals ( expected , executionTime . nextExecution ( now ) . get () ) ; } <s> public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear ( ) throws java.lang.Exception { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int bnelwexgajfqurpmlhon = now . getDayOfYear () ; int bxzydejjzvketsgliify = bnelwexgajfqurpmlhon % 14 ; com.cronutils.model.time.ZonedDateTime expected = ( bxzydejjzvketsgliify == 1 ) ? now : now . plusDays ( ( 15 - bxzydejjzvketsgliify ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR ) ) ; assertEquals ( expected , executionTime . nextExecution ( now ) . get () ) ; } <s> Merge branch 'fix-issue-184' of https://github.com/meincs/cron-utils into meincs-fix-issue-184
fix_before_refactoring: @ org.junit.Test public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear () { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int dayOfYear = now . getDayOfYear () ; int dayOfMostRecentPeriod = dayOfYear % 14 ; com.cronutils.model.time.ZonedDateTime expected = now . plusDays ( ( 15 - dayOfMostRecentPeriod ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR ) ) ; assertEquals ( expected , executionTime . nextExecution ( now ) . get () ) ; }
fix_after_refactoring: @ org.junit.Test public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear () { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int bnelwexgajfqurpmlhon = now . getDayOfYear () ; int bxzydejjzvketsgliify = bnelwexgajfqurpmlhon % 14 ; com.cronutils.model.time.ZonedDateTime expected = now . plusDays ( ( 15 - bxzydejjzvketsgliify ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR ) ) ; assertEquals ( expected , executionTime . nextExecution ( now ) . get () ) ; }
× fix_prediction_before: @ org.junit.Test public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear ( ) throws java.lang.Exception { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int dayOfYear = now . getDayOfYear () ; int dayOfMostRecentPeriod = dayOfYear % 14 ; com.cronutils.model.time.ZonedDateTime expected = ( dayOfMostRecentPeriod == 1 ) ? now . plusDays ( 14 ) : now . plusDays ( 14 ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR )
× fix_prediction_after: @ org.junit.Test public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear () { com.cronutils.model.time.ZonedDateTime now = com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest . truncateToDays ( com.cronutils.model.time.ZonedDateTime . now () ) ; int bnelwexgajfqurpmlhon = now . getDayOfYear () ; int bxzydejjzvketsgliify = bnelwexgajfqurpmlhon % 14 ; com.cronutils.model.time.ZonedDateTime expected = ( bxzydejjzvketsgliify == 1 ) ? now . plusDays ( ( 15 - bxzydejjzvketsgliify ) ) ; com.cronutils.model.time.ExecutionTime executionTime = com.cronutils.model.time.ExecutionTime . forCron ( parser . parse ( com.cronutils.model.time.ExecutionTimeQuartzWithDayDayDay

line_index: 673
bug_before_refactoring: public void ParseJSONObject () { int code = 0 ; try { code = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( code == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; } else { responseString . append ( jsonObj ) ; } } <s> public void ParseJSONObject () { int code = 0 ; try { code = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( code == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; } else { responseString . append ( jsonObj ) ; } } <s> Fixed the bugs. The server now uses end instead of write  the cache stores the correct data now and all requests should return something.
bug_after_refactoring: public void ParseJSONObject () { int gqoqdimoglqrswvwyghx = 0 ; try { gqoqdimoglqrswvwyghx = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( gqoqdimoglqrswvwyghx == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; } else { responseString . append ( jsonObj ) ; } } <s> public void ParseJSONObject () { int gqoqdimoglqrswvwyghx = 0 ; try { gqoqdimoglqrswvwyghx = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( gqoqdimoglqrswvwyghx == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; } else { responseString . append ( jsonObj ) ; } } <s> Fixed the bugs. The server now uses end instead of write  the cache stores the correct data now and all requests should return something.
fix_before_refactoring: public boolean ParseJSONObject () { int code = 0 ; try { code = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( code == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; return true ; } else { responseString . append ( jsonObj ) ; return false ; } }
fix_after_refactoring: public boolean ParseJSONObject () { int gqoqdimoglqrswvwyghx = 0 ; try { gqoqdimoglqrswvwyghx = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( gqoqdimoglqrswvwyghx == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; return true ; } else { responseString . append ( jsonObj ) ; return false ; } }
× fix_prediction_before: public void ParseJSONObject () { int code = 0 ; try { code = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( code == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; } else { responseString . append ( jsonObj ) ; } }
× fix_prediction_after: public void ParseJSONObject () { int gqoqdimoglqrswvwyghx = 0 ; try { gqoqdimoglqrswvwyghx = jsonObj . getInteger ( "cod" ) ; } catch ( java.lang.Exception e ) {} if ( gqoqdimoglqrswvwyghx == 200 ) { org.vertx.java.core.json.JsonObject newData = CreateCorrectJSONObject () ; CreateCorrectResponseString ( newData ) ; } else { responseString . append ( jsonObj ) ; } }

line_index: 674
bug_before_refactoring: return x ; <s> private int getColumn () { int x ; java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; while ( true ) { java.lang.System.out . print ( "Please enter the column number (1-10):" ) ; x = scanner . nextInt () ; if ( ( x >= 1 ) & ( x <= 10 ) ) return x ; } } <s> fixed issue with destroyer printing wrong letter  and fixed x coord being 1 higher than it should
bug_after_refactoring: return swspuenhmmnjakhdmpqi ; <s> private int getColumn () { int x ; java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; while ( true ) { java.lang.System.out . print ( "Please enter the column number (1-10):" ) ; x = scanner . nextInt () ; if ( ( x >= 1 ) & ( x <= 10 ) ) return swspuenhmmnjakhdmpqi ; } } <s> fixed issue with destroyer printing wrong letter  and fixed x coord being 1 higher than it should
fix_before_refactoring: return x - 1 ;
fix_after_refactoring: return swspuenhmmnjakhdmpqi - 1 ;
× fix_prediction_before: return 0 ;
× fix_prediction_after: return 0 ;

line_index: 675
bug_before_refactoring: subject . substring ( ( pos + 1 ) ) <s> private static java.lang.String _getParentMessageIdFromSubject ( javax.mail.Message message ) throws java.lang.Exception { if ( ( message . getSubject () ) == null ) { return null ; } java.lang.String parentMessageId = null ; java.lang.String subject = message . getSubject () ; int pos = subject . lastIndexOf ( CharPool.LESS_THAN ) ; if ( pos != ( - 1 ) ) { parentMessageId = subject . substring ( ( pos + 1 ) ) ; } return parentMessageId ; } <s> LPS-74893 Fix bug
bug_after_refactoring: subject . substring ( ( mefvixhjznirbhltkbgk + 1 ) ) <s> private static java.lang.String _getParentMessageIdFromSubject ( javax.mail.Message message ) throws java.lang.Exception { if ( ( message . getSubject () ) == null ) { return null ; } java.lang.String parentMessageId = null ; java.lang.String subject = message . getSubject () ; int pos = subject . lastIndexOf ( CharPool.LESS_THAN ) ; if ( pos != ( - 1 ) ) { parentMessageId = subject . substring ( ( mefvixhjznirbhltkbgk + 1 ) ) ; } return parentMessageId ; } <s> LPS-74893 Fix bug
fix_before_refactoring: subject . substring ( pos )
fix_after_refactoring: subject . substring ( mefvixhjznirbhltkbgk )
× fix_prediction_before: subject . substring ( ( pos + 1 ) )
× fix_prediction_after: subject . substring ( ( mefvixhjznirbhltkbgk + 1 ) )

line_index: 676
bug_before_refactoring: private void postConvert ( final short [] inPixels , final byte [] outPixels , final int begin , final int end ) { int q = begin ; for ( int p = begin ; p < end ; ) { final short f = inPixels [ ( p ++ ) ] ; outPixels [ ( q ++ ) ] = ( f <= ( - 16257 ) ) ? 0 : f >= 16256 ? - 1 : ( ( byte ) ( ( f + 16384 ) > > 7 ) ) ; } } <s> private void postConvert ( final short [] inPixels , final byte [] outPixels , final int begin , final int end ) { int q = begin ; for ( int p = begin ; p < end ; ) { final short f = inPixels [ ( p ++ ) ] ; outPixels [ ( q ++ ) ] = ( f <= ( - 16257 ) ) ? 0 : f >= 16256 ? - 1 : ( ( byte ) ( ( f + 16384 ) > > 7 ) ) ; } } <s> Bugfix: Overshoot problems with transparency in both PreAlpha and SRGB conversions
bug_after_refactoring: private void postConvert ( final short [] inPixels , final byte [] outPixels , final int begin , final int end ) { int iakyzizlbesqhmqnptcg = begin ; for ( int p = begin ; p < end ; ) { final short ofuumfnkfpqxunmsooxn = inPixels [ ( p ++ ) ] ; outPixels [ ( iakyzizlbesqhmqnptcg ++ ) ] = ( ofuumfnkfpqxunmsooxn <= ( - 16257 ) ) ? 0 : ofuumfnkfpqxunmsooxn >= 16256 ? - 1 : ( ( byte ) ( ( ofuumfnkfpqxunmsooxn + 16384 ) > > 7 ) ) ; } } <s> private void postConvert ( final short [] inPixels , final byte [] outPixels , final int begin , final int end ) { int iakyzizlbesqhmqnptcg = begin ; for ( int p = begin ; p < end ; ) { final short ofuumfnkfpqxunmsooxn = inPixels [ ( p ++ ) ] ; outPixels [ ( iakyzizlbesqhmqnptcg ++ ) ] = ( ofuumfnkfpqxunmsooxn <= ( - 16257 ) ) ? 0 : ofuumfnkfpqxunmsooxn >= 16256 ? - 1 : ( ( byte ) ( ( ofuumfnkfpqxunmsooxn + 16384 ) > > 7 ) ) ; } } <s> Bugfix: Overshoot problems with transparency in both PreAlpha and SRGB conversions
fix_before_refactoring: private void postConvert ( short [] inPixels , byte [] outPixels , int begin , int end ) { int q = begin ; int p = begin ; while ( p < end ) { short f = inPixels [ ( p ++ ) ] ; outPixels [ ( q ++ ) ] = ( f <= ( - 16257 ) ) ? 0 : f >= 16256 ? - 1 : ( ( byte ) ( ( f + 16384 ) > > 7 ) ) ; } }
fix_after_refactoring: private void postConvert ( short [] inPixels , byte [] outPixels , int begin , int end ) { int iakyzizlbesqhmqnptcg = begin ; int p = begin ; while ( p < end ) { short ofuumfnkfpqxunmsooxn = inPixels [ ( p ++ ) ] ; outPixels [ ( iakyzizlbesqhmqnptcg ++ ) ] = ( ofuumfnkfpqxunmsooxn <= ( - 16257 ) ) ? 0 : ofuumfnkfpqxunmsooxn >= 16256 ? - 1 : ( ( byte ) ( ( ofuumfnkfpqxunmsooxn + 16384 ) > > 7 ) ) ; } }
× fix_prediction_before: private void postConvert ( short [] inPixels , short [] outPixels , int begin , int end ) { int q = begin ; while ( p < end ) { final short f = inPixels [ ( p ++ ) ] ; outPixels [ ( q ++ ) ] = ( f <= ( - 16257 ) ) ? 0 : f >= 16256 ? - 1 : ( ( byte ) ( ( f + 16384 ) > > 7 ) ) ; } }
× fix_prediction_after: private void postConvert ( short [] inPixels , final byte [] outPixels , int begin , final int end ) { int iakyzizlbesqhmqnptcg = begin ; for ( int p = begin ; p < end ; ) { final short ofuumfnkfpqxunmsooxn = inPixels [ ( p ++ ) ] ; outPixels [ ( iakyzizlbesqhmqnptcg ++ ) ] = ( ofuumfnkfpqxunmsooxn <= ( - 16257 ) ) ? 0 : ofuumfnkfpqxunmsooxn >= 16256 ? - 1 : ( ( byte ) ( ( ofuumfnkfpqxunmsooxn + 16384 ) > > 7 ) ) ; } }

line_index: 678
bug_before_refactoring: { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean insideOtherTransaction = transaction . isActive () ; if ( ! insideOtherTransaction ) transaction . begin () ; contract . setUsedOptions ( optionService . loadOptionsByIds ( optionsIds ) ) ; contractDao . create ( contract ) ; if ( ! insideOtherTransaction ) transaction . commit () ; return contract ; } <s> @ java.lang.Override public com.tsystems.javaschool.db.entities.Contract addNew ( com.tsystems.javaschool.db.entities.Contract contract , java.util.List < java.lang.Integer > optionsIds ) { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean insideOtherTransaction = transaction . isActive () ; if ( ! insideOtherTransaction ) transaction . begin () ; contract . setUsedOptions ( optionService . loadOptionsByIds ( optionsIds ) ) ; contractDao . create ( contract ) ; if ( ! insideOtherTransaction ) transaction . commit () ; return contract ; } <s> Fix bugs
bug_after_refactoring: { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean ykaerwsvjydacqgfphms = transaction . isActive () ; if ( ! ykaerwsvjydacqgfphms ) transaction . begin () ; contract . setUsedOptions ( optionService . loadOptionsByIds ( optionsIds ) ) ; contractDao . create ( contract ) ; if ( ! ykaerwsvjydacqgfphms ) transaction . commit () ; return contract ; } <s> @ java.lang.Override public com.tsystems.javaschool.db.entities.Contract addNew ( com.tsystems.javaschool.db.entities.Contract contract , java.util.List < java.lang.Integer > optionsIds ) { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean ykaerwsvjydacqgfphms = transaction . isActive () ; if ( ! ykaerwsvjydacqgfphms ) transaction . begin () ; contract . setUsedOptions ( optionService . loadOptionsByIds ( optionsIds ) ) ; contractDao . create ( contract ) ; if ( ! ykaerwsvjydacqgfphms ) transaction . commit () ; return contract ; } <s> Fix bugs
fix_before_refactoring: { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean insideOtherTransaction = transaction . isActive () ; contractDao . create ( contract ) ; return contract ; }
fix_after_refactoring: { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean ykaerwsvjydacqgfphms = transaction . isActive () ; contractDao . create ( contract ) ; return contract ; }
× fix_prediction_before: { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean insideOtherTransaction = transaction . isActive () ; if ( ! insideOtherTransaction ) transaction . begin () ; contract . setUsedOptions ( optionService . loadOptionsByIds ( optionsIds ) ) ; return contract ; }
× fix_prediction_after: { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean ykaerwsvjydacqgfphms = transaction . isActive () ; if ( ! ykaerwsvjydacqgfphms ) transaction . begin () ; contract . setUsedOptions ( optionService . loadOptionsByIds ( optionsIds ) ) ; return contract ; }

line_index: 679
bug_before_refactoring: @ org.junit.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int expectedSize = 12 ; int actualSize = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; org.junit.Assert . assertFalse ( response . isEmpty () ) ; actualSize = response . size () ; org.junit.Assert . assertTrue ( ( ( ( "Expected " + expectedSize ) + " but received " ) + actualSize ) , ( actualSize == expectedSize ) ) ; } <s> @ org.junit.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int expectedSize = 12 ; int actualSize = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; org.junit.Assert . assertFalse ( response . isEmpty () ) ; actualSize = response . size () ; org.junit.Assert . assertTrue ( ( ( ( "Expected " + expectedSize ) + " but received " ) + actualSize ) , ( actualSize == expectedSize ) ) ; } <s> Merge pull request #36 from SMARTRACTECHNOLOGY/bugfix/OBJECTS-913_type_in_findByUrns  Implement new findByTypeAndUrns method  update tests
bug_after_refactoring: @ org.junit.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int doakydtmxcqepwtuazfp = 12 ; int lzebellhummawabmfdyk = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; org.junit.Assert . assertFalse ( response . isEmpty () ) ; lzebellhummawabmfdyk = response . size () ; org.junit.Assert . assertTrue ( ( ( ( "Expected " + doakydtmxcqepwtuazfp ) + " but received " ) + lzebellhummawabmfdyk ) , ( lzebellhummawabmfdyk == doakydtmxcqepwtuazfp ) ) ; } <s> @ org.junit.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int doakydtmxcqepwtuazfp = 12 ; int lzebellhummawabmfdyk = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; org.junit.Assert . assertFalse ( response . isEmpty () ) ; lzebellhummawabmfdyk = response . size () ; org.junit.Assert . assertTrue ( ( ( ( "Expected " + doakydtmxcqepwtuazfp ) + " but received " ) + lzebellhummawabmfdyk ) , ( lzebellhummawabmfdyk == doakydtmxcqepwtuazfp ) ) ; } <s> Merge pull request #36 from SMARTRACTECHNOLOGY/bugfix/OBJECTS-913_type_in_findByUrns  Implement new findByTypeAndUrns method  update tests
fix_before_refactoring: @ net.smartcosmos.dao.things.impl.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int expectedSize = 12 ; int actualSize = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; assertFalse ( response . isEmpty () ) ; actualSize = response . size () ; assertTrue ( ( ( ( "Expected " + expectedSize ) + " but received " ) + actualSize ) , ( actualSize == expectedSize ) ) ; }
fix_after_refactoring: @ net.smartcosmos.dao.things.impl.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int doakydtmxcqepwtuazfp = 12 ; int lzebellhummawabmfdyk = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; assertFalse ( response . isEmpty () ) ; lzebellhummawabmfdyk = response . size () ; assertTrue ( ( ( ( "Expected " + doakydtmxcqepwtuazfp ) + " but received " ) + lzebellhummawabmfdyk ) , ( lzebellhummawabmfdyk == doakydtmxcqepwtuazfp ) ) ; }
× fix_prediction_before: @ net.smartcosmos.dto.things.ThingResponse testFindAll ( ) throws java.lang.Exception { populateData () ; int expectedSize = 12 ; int actualSize = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; assertFalse ( response . isEmpty () ) ; actualSize = response . size () ; assertTrue ( ( ( ( "Expected " + expectedSize ) + " but received " ) + actualSize ) , ( actualSize == expectedSize ) ) ; }
× fix_prediction_after: @ net.smartcosmos.dao.things.Test public void testFindAll ( ) throws java.lang.Exception { populateData () ; int doakydtmxcqepwtuazfp = 12 ; int lzebellhummawabmfdyk = 0 ; java.util.List < net.smartcosmos.dto.things.ThingResponse > response = persistenceService . findAll ( tenantUrn ) ; assertFalse ( response . isEmpty () ) ; lzebellhummawabmfdyk = response . size () ; assertTrue ( ( ( ( "Expected " + doakydtmxcqepwtuazfp ) + " but received " ) + lzebellhummawabmfdyk ) , ( lzebellhummawabmfdyk == doakydtmxcqepwtuazfp ) ) ; }

line_index: 681
bug_before_refactoring: { int result = super . hashCode () ; result = ( 31 * result ) + ( ( t1 ) != null ? t1 . hashCode () : 0 ) ; result = ( 31 * result ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return result ; } <s> @ java.lang.Override public int hashCode () { int result = super . hashCode () ; result = ( 31 * result ) + ( ( t1 ) != null ? t1 . hashCode () : 0 ) ; result = ( 31 * result ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return result ; } <s> Tuple Hash Code  Previously  Tuple hash codes were broken because at the root of the hierarchy  Object identity was used to start the calculation.  This bug was due to the recent removal of the root Tuple type  leaving Tuple2 calling Object.hashCode() instead of a properly structured Tuple.hashCode().  This change fixes the bug by using the t1 as the start of the hash code calculation.
bug_after_refactoring: { int nsfhaonjnbnyllbjbalz = super . hashCode () ; nsfhaonjnbnyllbjbalz = ( 31 * nsfhaonjnbnyllbjbalz ) + ( ( t1 ) != null ? t1 . hashCode () : 0 ) ; nsfhaonjnbnyllbjbalz = ( 31 * nsfhaonjnbnyllbjbalz ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return nsfhaonjnbnyllbjbalz ; } <s> @ java.lang.Override public int hashCode () { int nsfhaonjnbnyllbjbalz = super . hashCode () ; nsfhaonjnbnyllbjbalz = ( 31 * nsfhaonjnbnyllbjbalz ) + ( ( t1 ) != null ? t1 . hashCode () : 0 ) ; nsfhaonjnbnyllbjbalz = ( 31 * nsfhaonjnbnyllbjbalz ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return nsfhaonjnbnyllbjbalz ; } <s> Tuple Hash Code  Previously  Tuple hash codes were broken because at the root of the hierarchy  Object identity was used to start the calculation.  This bug was due to the recent removal of the root Tuple type  leaving Tuple2 calling Object.hashCode() instead of a properly structured Tuple.hashCode().  This change fixes the bug by using the t1 as the start of the hash code calculation.
fix_before_refactoring: { int result = ( ( t1 ) != null ) ? t1 . hashCode () : 0 ; result = ( 31 * result ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return result ; }
fix_after_refactoring: { int nsfhaonjnbnyllbjbalz = ( ( t1 ) != null ) ? t1 . hashCode () : 0 ; nsfhaonjnbnyllbjbalz = ( 31 * nsfhaonjnbnyllbjbalz ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return nsfhaonjnbnyllbjbalz ; }
× fix_prediction_before: { int result = super . hashCode () ; result = ( 31 * result ) + ( ( t1 ) != null ? t1 . hashCode () : 0 ) ; result = ( 31 * result ) + ( ( t2 ) != null ? t2 . hashCode () : 0 ) ; return result ; }
× fix_prediction_after: { int nsfhaonjnbnyllbjbalz = super . hashCode () ; nsfhaonjnbnyllbjbalz = ( 31 * nsfhaonjnbnyllbjbalz ) + ( ( t1 ) != null ? t1 . hashCode () : 0 ) ; return nsfhaonjnbnyllbjbalz ; }

line_index: 683
bug_before_refactoring: java.lang.System.out . println ( result ) <s> public static void main ( java.lang.String [] args ) { java.util.Scanner scan = new java.util.Scanner ( java.lang.System.in ) ; int N = scan . nextInt () ; long r = scan . nextInt () ; long c = scan . nextInt () ; long base = 0 ; long result = Main . getPoint ( ( r + 1 ) , ( c + 1 ) , N , base ) ; java.lang.System.out . println ( result ) ; } <s> update baekjoon_1074_z to solve problem completely
bug_after_refactoring: java.lang.System.out . println ( wrmhykcgnumzpmdalovs ) <s> public static void main ( java.lang.String [] args ) { java.util.Scanner scan = new java.util.Scanner ( java.lang.System.in ) ; int N = scan . nextInt () ; long r = scan . nextInt () ; long c = scan . nextInt () ; long base = 0 ; long result = Main . getPoint ( ( r + 1 ) , ( c + 1 ) , N , base ) ; java.lang.System.out . println ( wrmhykcgnumzpmdalovs ) ; } <s> update baekjoon_1074_z to solve problem completely
fix_before_refactoring: java.lang.System.out . println ( ( result - 1 ) )
fix_after_refactoring: java.lang.System.out . println ( ( wrmhykcgnumzpmdalovs - 1 ) )
× fix_prediction_before: java.lang.System.out . println ( result )
× fix_prediction_after: java.lang.System.out . print ( wrmhykcgnumzpmdalovs )

line_index: 684
bug_before_refactoring: { if ( time <= 0 ) { return; } double timeToFirstCollision = this . getTimeToFirstCollision () ; if ( time <= timeToFirstCollision ) { this . advance ( time ) ; return; } this . advance ( timeToFirstCollision ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( timeToFirstCollision ) ; this . evolve ( ( time - timeToFirstCollision ) , collistionListener ) ; } <s> public void evolve ( double time , asteroids.part2.CollisionListener collistionListener ) { if ( time <= 0 ) { return; } double timeToFirstCollision = this . getTimeToFirstCollision () ; if ( time <= timeToFirstCollision ) { this . advance ( time ) ; return; } this . advance ( timeToFirstCollision ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( timeToFirstCollision ) ; this . evolve ( ( time - timeToFirstCollision ) , collistionListener ) ; } <s> Fixed bug in thrust() method
bug_after_refactoring: { if ( time <= 0 ) { return; } double covngcfltaxwzvakrplw = this . getTimeToFirstCollision () ; if ( time <= covngcfltaxwzvakrplw ) { this . advance ( time ) ; return; } this . advance ( covngcfltaxwzvakrplw ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( covngcfltaxwzvakrplw ) ; this . evolve ( ( time - covngcfltaxwzvakrplw ) , collistionListener ) ; } <s> public void evolve ( double time , asteroids.part2.CollisionListener collistionListener ) { if ( time <= 0 ) { return; } double covngcfltaxwzvakrplw = this . getTimeToFirstCollision () ; if ( time <= covngcfltaxwzvakrplw ) { this . advance ( time ) ; return; } this . advance ( covngcfltaxwzvakrplw ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( covngcfltaxwzvakrplw ) ; this . evolve ( ( time - covngcfltaxwzvakrplw ) , collistionListener ) ; } <s> Fixed bug in thrust() method
fix_before_refactoring: { if ( time <= 0 ) { return; } double timeToFirstCollision = this . getTimeToFirstCollision () ; if ( time <= timeToFirstCollision ) { this . advance ( time ) ; return; } else { this . advance ( timeToFirstCollision ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( timeToFirstCollision ) ; this . evolve ( ( time - timeToFirstCollision ) , collistionListener ) ; } }
fix_after_refactoring: { if ( time <= 0 ) { return; } double covngcfltaxwzvakrplw = this . getTimeToFirstCollision () ; if ( time <= covngcfltaxwzvakrplw ) { this . advance ( time ) ; return; } else { this . advance ( covngcfltaxwzvakrplw ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( covngcfltaxwzvakrplw ) ; this . evolve ( ( time - covngcfltaxwzvakrplw ) , collistionListener ) ; } }
× fix_prediction_before: { if ( time <= 0 ) { return; } double timeToFirstCollision = this . getTimeToFirstCollision () ; if ( time <= timeToFirstCollision ) { this . advance ( time ) ; return; } this . advance ( timeToFirstCollision ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( timeToFirstCollision ) ; this . evolve ( ( time - timeToFirstCollision ) , collistionListener ) ; }
× fix_prediction_after: { if ( time <= 0 ) { return; } double covngcfltaxwzvakrplw = this . getTimeToFirstCollision () ; if ( time <= covngcfltaxwzvakrplw ) { this . advance ( time ) ; return; } this . advance ( covngcfltaxwzvakrplw ) ; this . resolveCollision ( collistionListener ) ; java.lang.System.out . println ( covngcfltaxwzvakrplw ) ; this . evolve ( ( time - covngcfltaxwzvakrplw ) , collistionListener ) ; }

line_index: 686
bug_before_refactoring: @ java.lang.Override public void onNext ( T i ) { if ( ! ( isUnsubscribed () ) ) { boolean stop = ( ++ ( count ) ) >= ( limit ) ; child . onNext ( i ) ; if ( stop && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } } <s> @ java.lang.Override public void onNext ( T i ) { if ( ! ( isUnsubscribed () ) ) { boolean stop = ( ++ ( count ) ) >= ( limit ) ; child . onNext ( i ) ; if ( stop && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } } <s> Merge pull request #3384 from akarnokd/TakeReentrancyFix1x  Fix for take() reentrancy bug.
bug_after_refactoring: @ java.lang.Override public void onNext ( T i ) { if ( ! ( isUnsubscribed () ) ) { boolean tbdbrcsbsggvrrjsuzfh = ( ++ ( count ) ) >= ( limit ) ; child . onNext ( i ) ; if ( tbdbrcsbsggvrrjsuzfh && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } } <s> @ java.lang.Override public void onNext ( T i ) { if ( ! ( isUnsubscribed () ) ) { boolean tbdbrcsbsggvrrjsuzfh = ( ++ ( count ) ) >= ( limit ) ; child . onNext ( i ) ; if ( tbdbrcsbsggvrrjsuzfh && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } } <s> Merge pull request #3384 from akarnokd/TakeReentrancyFix1x  Fix for take() reentrancy bug.
fix_before_refactoring: @ java.lang.Override public void onNext ( T i ) { if ( ( ! ( isUnsubscribed () ) ) && ( ( ( count ) ++ ) < ( limit ) ) ) { boolean stop = ( count ) == ( limit ) ; child . onNext ( i ) ; if ( stop && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } }
fix_after_refactoring: @ java.lang.Override public void onNext ( T i ) { if ( ( ! ( isUnsubscribed () ) ) && ( ( ( count ) ++ ) < ( limit ) ) ) { boolean tbdbrcsbsggvrrjsuzfh = ( count ) == ( limit ) ; child . onNext ( i ) ; if ( tbdbrcsbsggvrrjsuzfh && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } }
× fix_prediction_before: @ java.lang.Override public void onNext ( T i ) { if ( ! ( isUnsubscribed () ) ) { boolean stop = ( ++ ( count ) ) >= ( limit ) ; if ( stop && ( ! ( completed ) ) ) { completed = true ; child . onCompleted () ; } finally { unsubscribe () ; } } }
× fix_prediction_after: @ java.lang.Override public void onNext ( T i ) { if ( ! ( isUnsubscribed () ) ) { boolean tbdbrcsbsggvrrjsuzfh = ( ++ ( count ) ) >= ( limit ) ; if ( tbdbrcsbsggvrrjsuzfh && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } }

line_index: 688
bug_before_refactoring: { int temp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { temp += ( inputs [ i ] ) * ( weights [ i ] ) ; } return ( ( float ) ( 1 / ( 1 + ( java.lang.Math . pow ( java.lang.Math.E , ( - temp ) ) ) ) ) ) ; } <s> public float activated ( float [] inputs ) { int temp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { temp += ( inputs [ i ] ) * ( weights [ i ] ) ; } return ( ( float ) ( 1 / ( 1 + ( java.lang.Math . pow ( java.lang.Math.E , ( - temp ) ) ) ) ) ) ; } <s> Fixed some bullet issues  found some others  onPredictiveTarget() causes an infinite loop somewhere  but I think I fixed collisions etc. They also do not fire when the AIObject is facing directly up/down/left/right
bug_after_refactoring: { int iglxuwnclynnanflswtp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { iglxuwnclynnanflswtp += ( inputs [ i ] ) * ( weights [ i ] ) ; } return ( ( float ) ( 1 / ( 1 + ( java.lang.Math . pow ( java.lang.Math.E , ( - iglxuwnclynnanflswtp ) ) ) ) ) ) ; } <s> public float activated ( float [] inputs ) { int iglxuwnclynnanflswtp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { iglxuwnclynnanflswtp += ( inputs [ i ] ) * ( weights [ i ] ) ; } return ( ( float ) ( 1 / ( 1 + ( java.lang.Math . pow ( java.lang.Math.E , ( - iglxuwnclynnanflswtp ) ) ) ) ) ) ; } <s> Fixed some bullet issues  found some others  onPredictiveTarget() causes an infinite loop somewhere  but I think I fixed collisions etc. They also do not fire when the AIObject is facing directly up/down/left/right
fix_before_refactoring: { int temp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { temp += ( inputs [ i ] ) * ( weights [ i ] ) ; } if ( temp >= ( weights [ ( ( weights.length ) - 1 ) ] ) ) return 1 ; return 0 ; }
fix_after_refactoring: { int iglxuwnclynnanflswtp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { iglxuwnclynnanflswtp += ( inputs [ i ] ) * ( weights [ i ] ) ; } if ( iglxuwnclynnanflswtp >= ( weights [ ( ( weights.length ) - 1 ) ] ) ) return 1 ; return 0 ; }
× fix_prediction_before: { int temp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { temp += ( inputs [ i ] ) * ( weights [ i ] ) ; } return ( ( float ) ( 1 / ( 1 + ( java.lang.Math . pow ( java.lang.Math.E , ( - temp ) ) ) ) ) ) ; }
× fix_prediction_after: { int iglxuwnclynnanflswtp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { iglxuwnclynnanflswtp += ( inputs [ i ] ) * ( weights [ i ] ) ; } return ( ( float ) ( 1 / ( 1 + ( java.lang.Math . pow ( java.lang.Math.E , ( - iglxuwnclynnanflswtp ) ) ) ) ) ) ; }

line_index: 689
bug_before_refactoring: java.lang.System . arraycopy ( values , 0 , padded , 0 , values.length ) <s> static java.lang.Object [] boxAndPadWithZeros ( int length , long [] values ) { long [] padded ; if ( ( values.length ) == length ) { padded = values ; } else { padded = new long [ length ] ; java.lang.System . arraycopy ( values , 0 , padded , 0 , values.length ) ; } return java.util.Arrays . stream ( padded ) . boxed () . toArray () ; } <s> Fixes #9 : Tool throws AIOOBE  Also fixes a minor output formatting issue.
bug_after_refactoring: java.lang.System . arraycopy ( values , 0 , vnhthafehduhghrjaluj , 0 , values.length ) <s> static java.lang.Object [] boxAndPadWithZeros ( int length , long [] values ) { long [] padded ; if ( ( values.length ) == length ) { padded = values ; } else { padded = new long [ length ] ; java.lang.System . arraycopy ( values , 0 , vnhthafehduhghrjaluj , 0 , values.length ) ; } return java.util.Arrays . stream ( padded ) . boxed () . toArray () ; } <s> Fixes #9 : Tool throws AIOOBE  Also fixes a minor output formatting issue.
fix_before_refactoring: java.lang.System . arraycopy ( values , 0 , padded , 0 , padded.length )
fix_after_refactoring: java.lang.System . arraycopy ( values , 0 , vnhthafehduhghrjaluj , 0 , vnhthafehduhghrjaluj.length )
× fix_prediction_before: java.lang.System . arraycopy ( values , 0 , padded , 0 , values.length )
× fix_prediction_after: java.lang.System . arraycopy ( buffer , 0 , vnhthafehduhghrjaluj , 0 , values.length )

line_index: 691
bug_before_refactoring: private void setMedian () { int mid = ( this . numbers . size () ) / 2 ; if ( ( mid % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( mid ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( mid - 1 ) ) ) + ( this . numbers . get ( mid ) ) ) / 2.0 ; } } <s> private void setMedian () { int mid = ( this . numbers . size () ) / 2 ; if ( ( mid % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( mid ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( mid - 1 ) ) ) + ( this . numbers . get ( mid ) ) ) / 2.0 ; } } <s> Add Documentation for InputAndAnalysis  As well as some comments in the FileScanner and a bug fix in InputAndAnalysis.
bug_after_refactoring: private void setMedian () { int srpksipzavyzfoejeclm = ( this . numbers . size () ) / 2 ; if ( ( srpksipzavyzfoejeclm % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( srpksipzavyzfoejeclm ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( srpksipzavyzfoejeclm - 1 ) ) ) + ( this . numbers . get ( srpksipzavyzfoejeclm ) ) ) / 2.0 ; } } <s> private void setMedian () { int srpksipzavyzfoejeclm = ( this . numbers . size () ) / 2 ; if ( ( srpksipzavyzfoejeclm % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( srpksipzavyzfoejeclm ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( srpksipzavyzfoejeclm - 1 ) ) ) + ( this . numbers . get ( srpksipzavyzfoejeclm ) ) ) / 2.0 ; } } <s> Add Documentation for InputAndAnalysis  As well as some comments in the FileScanner and a bug fix in InputAndAnalysis.
fix_before_refactoring: private void setMedian () { if ( ! ( this . numbers . isEmpty () ) ) { int mid = ( this . numbers . size () ) / 2 ; if ( ( mid % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( mid ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( mid - 1 ) ) ) + ( this . numbers . get ( mid ) ) ) / 2.0 ; } } }
fix_after_refactoring: private void setMedian () { if ( ! ( this . numbers . isEmpty () ) ) { int srpksipzavyzfoejeclm = ( this . numbers . size () ) / 2 ; if ( ( srpksipzavyzfoejeclm % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( srpksipzavyzfoejeclm ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( srpksipzavyzfoejeclm - 1 ) ) ) + ( this . numbers . get ( srpksipzavyzfoejeclm ) ) ) / 2.0 ; } } }
× fix_prediction_before: private void setMedian () { int mid = ( this . numbers . size () ) / 2 ; if ( ( mid % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( mid ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( mid - 1 ) ) ) + ( this . numbers . get ( mid ) ) ) / 2.0 ; } }
× fix_prediction_after: private void setMedian () { int srpksipzavyzfoejeclm = ( this . numbers . size () ) / 2 ; if ( ( srpksipzavyzfoejeclm % 2 ) == 1 ) { this . medianOfAllNumbers = this . numbers . get ( srpksipzavyzfoejeclm ) ; } else { this . medianOfAllNumbers = ( ( this . numbers . get ( ( srpksipzavyzfoejeclm - 1 ) ) ) + ( this . numbers . get ( srpksipzavyzfoejeclm ) ) ) / 2.0 ; } }

line_index: 693
bug_before_refactoring: for ( byte b = this . state . sfrs . A . getValue () ; b > 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) parity = ! parity ; <s> private void updateParityFlag () { boolean parity = false ; for ( byte b = this . state . sfrs . A . getValue () ; b > 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) parity = ! parity ; this . state . sfrs . PSW . setBit ( parity , 0 ) ; } <s> Add ADD  ADDC  RET  RL  * Add the mnemonics mentioned above and their tests * Fix bug in updateParityFlag() * Add a feature to ignore stack overflows and underflows
bug_after_refactoring: for ( byte b = this . state . sfrs . A . getValue () ; b > 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) eqzcjrkzrwsvotzzwvjs = ! eqzcjrkzrwsvotzzwvjs ; <s> private void updateParityFlag () { boolean parity = false ; for ( byte b = this . state . sfrs . A . getValue () ; b > 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) eqzcjrkzrwsvotzzwvjs = ! eqzcjrkzrwsvotzzwvjs ; this . state . sfrs . PSW . setBit ( parity , 0 ) ; } <s> Add ADD  ADDC  RET  RL  * Add the mnemonics mentioned above and their tests * Fix bug in updateParityFlag() * Add a feature to ignore stack overflows and underflows
fix_before_refactoring: for ( byte b = this . state . sfrs . A . getValue () ; b != 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) parity = ! parity ;
fix_after_refactoring: for ( byte b = this . state . sfrs . A . getValue () ; b != 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) eqzcjrkzrwsvotzzwvjs = ! eqzcjrkzrwsvotzzwvjs ;
× fix_prediction_before: for ( byte b = this . state . sfrs . A . getValue () ; b > 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) parity = ! parity ;
× fix_prediction_after: for ( byte b = this . state . sfrs . A . getValue () ; b > 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) eqzcjrkzrwsvotzzwvjs = ! eqzcjrkzrwsvotzzwvjs ;

line_index: 694
bug_before_refactoring: { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int y = ( ( p.y ) - ( center.y ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside ) { if ( ( y < 0 ) || ( y > ( getHeight () ) ) ) return null ; } return y ; } <s> public java.lang.Integer getLatOffset ( double lat , double lon , double offset , boolean checkOutside ) { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int y = ( ( p.y ) - ( center.y ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside ) { if ( ( y < 0 ) || ( y > ( getHeight () ) ) ) return null ; } return y ; } <s> [jmapviewer] fix more Javadoc/Sonar issues  git-svn-id: http://svn.openstreetmap.org/applications/viewer/jmapviewer@31439 b9d5c4c9-76e1-0310-9c85-f3177eceb1e4
bug_after_refactoring: { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int shiruldzikhktnuslkej = ( ( p.shiruldzikhktnuslkej ) - ( center.shiruldzikhktnuslkej ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside ) { if ( ( shiruldzikhktnuslkej < 0 ) || ( shiruldzikhktnuslkej > ( getHeight () ) ) ) return null ; } return shiruldzikhktnuslkej ; } <s> public java.lang.Integer getLatOffset ( double lat , double lon , double offset , boolean checkOutside ) { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int shiruldzikhktnuslkej = ( ( p.shiruldzikhktnuslkej ) - ( center.shiruldzikhktnuslkej ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside ) { if ( ( shiruldzikhktnuslkej < 0 ) || ( shiruldzikhktnuslkej > ( getHeight () ) ) ) return null ; } return shiruldzikhktnuslkej ; } <s> [jmapviewer] fix more Javadoc/Sonar issues  git-svn-id: http://svn.openstreetmap.org/applications/viewer/jmapviewer@31439 b9d5c4c9-76e1-0310-9c85-f3177eceb1e4
fix_before_refactoring: { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int y = ( ( p.y ) - ( center.y ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside && ( ( y < 0 ) || ( y > ( getHeight () ) ) ) ) { return null ; } return y ; }
fix_after_refactoring: { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int shiruldzikhktnuslkej = ( ( p.shiruldzikhktnuslkej ) - ( center.shiruldzikhktnuslkej ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside && ( ( shiruldzikhktnuslkej < 0 ) || ( shiruldzikhktnuslkej > ( getHeight () ) ) ) ) { return null ; } return shiruldzikhktnuslkej ; }
× fix_prediction_before: { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; return ( ( p.y ) - ( center.y ) ) - ( ( getHeight () ) / 2 ) ; }
× fix_prediction_after: { java.awt.Point p = tileSource . latLonToXY ( lat , lon , zoom ) ; int shiruldzikhktnuslkej = ( ( p.shiruldzikhktnuslkej ) - ( center.shiruldzikhktnuslkej ) ) - ( ( getHeight () ) / 2 ) ; if ( checkOutside && ( ( shiruldzikhktnuslkej < 0 ) || ( shiruldzikhktnuslkej > ( getHeight () ) ) ) return null ; return shiruldzikhktnuslkej ; }

line_index: 695
bug_before_refactoring: { int numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be no finished tasks, yet" , ( numOfFinishedTasks == 0 ) ) ; repo . setPerformed ( 1 , 5 ) ; numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be 1 finished task now" , ( numOfFinishedTasks == 1 ) ) ; } <s> @ org.junit.Test public void setPerformed ( ) throws java.lang.Exception { int numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be no finished tasks, yet" , ( numOfFinishedTasks == 0 ) ) ; repo . setPerformed ( 1 , 5 ) ; numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be 1 finished task now" , ( numOfFinishedTasks == 1 ) ) ; } <s> DurationMap bug fix  A bug fixed due to durationMap returning 1 durations and related tests are improved to cover this scenario.
bug_after_refactoring: { int qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be no finished tasks, yet" , ( qaginwcqdmjccchekqdn == 0 ) ) ; repo . setPerformed ( 1 , 5 ) ; qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be 1 finished task now" , ( qaginwcqdmjccchekqdn == 1 ) ) ; } <s> @ org.junit.Test public void setPerformed ( ) throws java.lang.Exception { int qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be no finished tasks, yet" , ( qaginwcqdmjccchekqdn == 0 ) ) ; repo . setPerformed ( 1 , 5 ) ; qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be 1 finished task now" , ( qaginwcqdmjccchekqdn == 1 ) ) ; } <s> DurationMap bug fix  A bug fixed due to durationMap returning 1 durations and related tests are improved to cover this scenario.
fix_before_refactoring: { int numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertEquals ( "There should be no finished tasks, yet" , 0 , numOfFinishedTasks , 0 ) ; repo . setPerformed ( 1 , 5 ) ; numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertEquals ( "There should be 1 finished task now" , 1 , numOfFinishedTasks , 0 ) ; }
fix_after_refactoring: { int qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertEquals ( "There should be no finished tasks, yet" , 0 , qaginwcqdmjccchekqdn , 0 ) ; repo . setPerformed ( 1 , 5 ) ; qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertEquals ( "There should be 1 finished task now" , 1 , qaginwcqdmjccchekqdn , 0 ) ; }
× fix_prediction_before: { int numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be no finished tasks, yet" , ( numOfFinishedTasks == 0 ) ) ; repo . setPerformed ( 1 , 5 ) ; numOfFinishedTasks = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; org.junit.Assert . assertTrue ( "There should be 1 finished task now" , ( numOfFinishedTasks == 1 ) ) ; }
× fix_prediction_after: { int qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; assertTrue ( "There should be no finished tasks, yet" , ( qaginwcqdmjccchekqdn == 0 ) ) ; repo . setPerformed ( 1 , 5 ) ; qaginwcqdmjccchekqdn = repo . getDurationInfo ( 1 ) . getNumOfFinishedTasks () ; assertTrue ( "There should be 1 finished task now" , ( qaginwcqdmjccchekqdn == 1 ) ) ; }

line_index: 696
bug_before_refactoring: { num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int temp = num2 ; num2 = num1 ; num1 = temp ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int temp = num1 % num2 ; ojld ( num2 , temp ) ; } <s> void ojld ( int num1 , int num2 ) { num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int temp = num2 ; num2 = num1 ; num1 = temp ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int temp = num1 % num2 ; ojld ( num2 , temp ) ; } <s> fix problem with incorrect input space and add a Simplification function
bug_after_refactoring: { num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int jqdvgscrjmvjtjodgzyi = num2 ; num2 = num1 ; num1 = jqdvgscrjmvjtjodgzyi ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int jqdvgscrjmvjtjodgzyi = num1 % num2 ; ojld ( num2 , jqdvgscrjmvjtjodgzyi ) ; } <s> void ojld ( int num1 , int num2 ) { num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int jqdvgscrjmvjtjodgzyi = num2 ; num2 = num1 ; num1 = jqdvgscrjmvjtjodgzyi ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int jqdvgscrjmvjtjodgzyi = num1 % num2 ; ojld ( num2 , jqdvgscrjmvjtjodgzyi ) ; } <s> fix problem with incorrect input space and add a Simplification function
fix_before_refactoring: { this . maxcommom = 1 ; num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int temp = num2 ; num2 = num1 ; num1 = temp ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int temp = num1 % num2 ; ojld ( num2 , temp ) ; }
fix_after_refactoring: { this . maxcommom = 1 ; num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int jqdvgscrjmvjtjodgzyi = num2 ; num2 = num1 ; num1 = jqdvgscrjmvjtjodgzyi ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int jqdvgscrjmvjtjodgzyi = num1 % num2 ; ojld ( num2 , jqdvgscrjmvjtjodgzyi ) ; }
× fix_prediction_before: { num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int temp = num2 ; num2 = num1 ; num1 = temp ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int temp = num1 % num2 ; ojld ( num2 , temp ) ; }
× fix_prediction_after: { num1 = java.lang.Math . abs ( num1 ) ; num2 = java.lang.Math . abs ( num2 ) ; if ( num2 > num1 ) { int jqdvgscrjmvjtjodgzyi = num2 ; num2 = num1 ; num1 = jqdvgscrjmvjtjodgzyi ; } if ( num2 == 0 ) { return; } if ( ( num1 % num2 ) == 0 ) { this . maxcommom = num2 ; return; } int jqdvgscrjmvjtjodgzyi = num1 % num2 ; ojld ( num2 , jqdvgscrjmvjtjodgzyi ) ; }

line_index: 697
bug_before_refactoring: { int start = info . getStartOffset () ; int end = ( info . getEndOffset () ) + 1 ; org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( start , end ) ; list . add ( range ) ; } <s> public java.util.List < org.fife.ui.rsyntaxtextarea.DocumentRange > getMarkedOccurrences () { java.util.List < org.fife.ui.rsyntaxtextarea.DocumentRange > list = new java.util.ArrayList < org.fife.ui.rsyntaxtextarea.DocumentRange > ( markedOccurrences . size () ) ; for ( org.fife.ui.rsyntaxtextarea.HighlightInfo info : markedOccurrences ) { int start = info . getStartOffset () ; int end = ( info . getEndOffset () ) + 1 ; org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( start , end ) ; list . add ( range ) ; } return list ; } <s> Fix #130: ErrorStrip marked occurrences on line 0 have top 2 pixels cut off
bug_after_refactoring: { int pojaisgrezcuyzjezzbo = info . getStartOffset () ; int seusrsdaiwpkolvjazop = ( info . getEndOffset () ) + 1 ; org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( pojaisgrezcuyzjezzbo , seusrsdaiwpkolvjazop ) ; list . add ( range ) ; } <s> public java.util.List < org.fife.ui.rsyntaxtextarea.DocumentRange > getMarkedOccurrences () { java.util.List < org.fife.ui.rsyntaxtextarea.DocumentRange > list = new java.util.ArrayList < org.fife.ui.rsyntaxtextarea.DocumentRange > ( markedOccurrences . size () ) ; for ( org.fife.ui.rsyntaxtextarea.HighlightInfo info : markedOccurrences ) { int pojaisgrezcuyzjezzbo = info . getStartOffset () ; int seusrsdaiwpkolvjazop = ( info . getEndOffset () ) + 1 ; org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( pojaisgrezcuyzjezzbo , seusrsdaiwpkolvjazop ) ; list . add ( range ) ; } return list ; } <s> Fix #130: ErrorStrip marked occurrences on line 0 have top 2 pixels cut off
fix_before_refactoring: { int start = info . getStartOffset () ; int end = ( info . getEndOffset () ) + 1 ; if ( start <= end ) { org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( start , end ) ; list . add ( range ) ; } }
fix_after_refactoring: { int pojaisgrezcuyzjezzbo = info . getStartOffset () ; int seusrsdaiwpkolvjazop = ( info . getEndOffset () ) + 1 ; if ( pojaisgrezcuyzjezzbo <= seusrsdaiwpkolvjazop ) { org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( pojaisgrezcuyzjezzbo , seusrsdaiwpkolvjazop ) ; list . add ( range ) ; } }
× fix_prediction_before: { int start = info . getStartOffset () ; int end = ( info . getEndOffset () ) + 1 ; org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( start , end ) ; list . add ( range ) ; }
× fix_prediction_after: { int pojaisgrezcuyzjezzbo = info . getStartOffset () ; int seusrsdaiwpkolvjazop = ( info . getEndOffset () ) + 1 ; org.fife.ui.rsyntaxtextarea.DocumentRange range = new org.fife.ui.rsyntaxtextarea.DocumentRange ( pojaisgrezcuyzjezzbo , seusrsdaiwpkolvjazop ) ; list . add ( range ) ; }

line_index: 698
bug_before_refactoring: { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long id = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "id" ) ) + 1 ; com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( id ) ; return j ; } <s> private com.louiscarrese.clopecounter.model.Jour createJour () { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long id = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "id" ) ) + 1 ; com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( id ) ; return j ; } <s> Fixed a bug in adding the first clope
bug_after_refactoring: { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long ngaohtsdzjabnkmylqmm = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "ngaohtsdzjabnkmylqmm" ) ) + 1 ; com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( ngaohtsdzjabnkmylqmm ) ; return j ; } <s> private com.louiscarrese.clopecounter.model.Jour createJour () { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long ngaohtsdzjabnkmylqmm = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "ngaohtsdzjabnkmylqmm" ) ) + 1 ; com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( ngaohtsdzjabnkmylqmm ) ; return j ; } <s> Fixed a bug in adding the first clope
fix_before_refactoring: { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long id ; if ( ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . count () ) > 0 ) { id = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "id" ) ) + 1 ; } else { id = 1 ; } com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( id ) ; return j ; }
fix_after_refactoring: { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long ngaohtsdzjabnkmylqmm ; if ( ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . count () ) > 0 ) { ngaohtsdzjabnkmylqmm = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "ngaohtsdzjabnkmylqmm" ) ) + 1 ; } else { ngaohtsdzjabnkmylqmm = 1 ; } com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( ngaohtsdzjabnkmylqmm ) ; return j ; }
× fix_prediction_before: { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long id = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "id" ) ) + 1 ; com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( id ) ; return j ; }
× fix_prediction_after: { io.realm.Realm realm = io.realm.Realm . getDefaultInstance () ; long ngaohtsdzjabnkmylqmm = ( realm . where ( com.louiscarrese.clopecounter.model.Jour . class ) . maximumInt ( "ngaohtsdzjabnkmylqmm" ) ) + 1 ; com.louiscarrese.clopecounter.model.Jour j = new com.louiscarrese.clopecounter.model.Jour () ; j . setId ( ngaohtsdzjabnkmylqmm ) ; return j ; }

line_index: 699
bug_before_refactoring: { int lastPos = getPosition () ; super . add ( to , super . remove ( from ) ) ; mObservable . notifyChanged () ; if ( lastPos == from ) moveToPosition ( to ) ; } <s> public void move ( int from , int to ) { int lastPos = getPosition () ; super . add ( to , super . remove ( from ) ) ; mObservable . notifyChanged () ; if ( lastPos == from ) moveToPosition ( to ) ; } <s> Bugfix: handle playlist moves when from and to are on different sides of nowplaying
bug_after_refactoring: { int clsehlzyqfzxdsckfqsd = getPosition () ; super . add ( to , super . remove ( from ) ) ; mObservable . notifyChanged () ; if ( clsehlzyqfzxdsckfqsd == from ) moveToPosition ( to ) ; } <s> public void move ( int from , int to ) { int clsehlzyqfzxdsckfqsd = getPosition () ; super . add ( to , super . remove ( from ) ) ; mObservable . notifyChanged () ; if ( clsehlzyqfzxdsckfqsd == from ) moveToPosition ( to ) ; } <s> Bugfix: handle playlist moves when from and to are on different sides of nowplaying
fix_before_refactoring: { int lastPos = getPosition () ; super . add ( to , super . remove ( from ) ) ; mObservable . notifyChanged () ; if ( from == lastPos ) moveToPosition ( to ) ; else if ( ( from < lastPos ) && ( to >= lastPos ) ) moveToPosition ( ( lastPos - 1 ) ) ; else if ( ( from > lastPos ) && ( to <= lastPos ) ) moveToPosition ( ( lastPos + 1 ) ) ; }
fix_after_refactoring: { int clsehlzyqfzxdsckfqsd = getPosition () ; super . add ( to , super . remove ( from ) ) ; mObservable . notifyChanged () ; if ( from == clsehlzyqfzxdsckfqsd ) moveToPosition ( to ) ; else if ( ( from < clsehlzyqfzxdsckfqsd ) && ( to >= clsehlzyqfzxdsckfqsd ) ) moveToPosition ( ( clsehlzyqfzxdsckfqsd - 1 ) ) ; else if ( ( from > clsehlzyqfzxdsckfqsd ) && ( to <= clsehlzyqfzxdsckfqsd ) ) moveToPosition ( ( clsehlzyqfzxdsckfqsd + 1 ) ) ; }
× fix_prediction_before: { int lastPos = getPosition () ; super . add ( to , super . remove ( from ) ) ; if ( lastPos == from ) moveToPosition ( to ) ; }
× fix_prediction_after: { int clsehlzyqfzxdsckfqsd = getPosition () ; super . add ( to , super . remove ( from ) ) ; if ( clsehlzyqfzxdsckfqsd == from ) moveToPosition ( to ) ; }

line_index: 700
bug_before_refactoring: if ( aip == ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { canAct = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; } <s> @ java.lang.Override public boolean canAct ( org.roda.wui.client.common.actions.Actionable.Action < org.roda.core.data.v2.ip.IndexedAIP > action , org.roda.core.data.v2.ip.IndexedAIP aip ) { boolean canAct ; if ( aip == ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { canAct = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; } return canAct ; } <s> solved some sonar new bugs
bug_after_refactoring: if ( aip == ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { sasmnfyzryscdkzxqosh = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; } <s> @ java.lang.Override public boolean canAct ( org.roda.wui.client.common.actions.Actionable.Action < org.roda.core.data.v2.ip.IndexedAIP > action , org.roda.core.data.v2.ip.IndexedAIP aip ) { boolean canAct ; if ( aip == ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { sasmnfyzryscdkzxqosh = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; } return canAct ; } <s> solved some sonar new bugs
fix_before_refactoring: if ( aip . equals ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { canAct = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; }
fix_after_refactoring: if ( aip . equals ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { sasmnfyzryscdkzxqosh = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; }
× fix_prediction_before: if ( aip == ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; } else { canAct = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ; }
× fix_prediction_after: if ( aip == ( org.roda.wui.client.common.actions.AipActions.NO_AIP_OBJECT ) ) { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_NO_AIP . contains ( action ) ; } else if ( AIPState.UNDER_APPRAISAL . equals ( aip . getState () ) ) { sasmnfyzryscdkzxqosh = ( org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action ) ) || ( org.roda.wui.client.common.actions.AipActions.APPRAISAL_ACTIONS . contains ( action ) ) ; } else { sasmnfyzryscdkzxqosh = org.roda.wui.client.common.actions.AipActions.POSSIBLE_ACTIONS_ON_SINGLE_AIP . contains ( action )

line_index: 701
bug_before_refactoring: if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } } <s> @ java.lang.Override public com.udacity.gradle.joketeller.Joke loadInBackground () { int retryCount = 0 ; com.udacity.gradle.joketeller.Joke joke = loadJoke () ; if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } } return joke ; } <s> Added build variants and fixed null pointer errors
bug_after_refactoring: if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } } <s> @ java.lang.Override public com.udacity.gradle.joketeller.Joke loadInBackground () { int retryCount = 0 ; com.udacity.gradle.joketeller.Joke joke = loadJoke () ; if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } } return joke ; } <s> Added build variants and fixed null pointer errors
fix_before_refactoring: if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } }
fix_after_refactoring: if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } }
× fix_prediction_before: if ( ( lastJoke != null ) && ( ! ( retry . equals ( lastJoke ) ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; }
× fix_prediction_after: if ( ( lastJoke ) != null ) { while ( ( joke . equals ( lastJoke ) ) && ( qdrvdxbrtlrquxwapokp < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; qdrvdxbrtlrquxwapokp ++ ; } }

line_index: 702
bug_before_refactoring: { int status = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { status = org.dataaccessioner.Migrator.STATUS_RUNNING ; status = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return status ; } <s> public int run ( java.io.File source , java.io.File destination ) { int status = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { status = org.dataaccessioner.Migrator.STATUS_RUNNING ; status = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return status ; } <s> Implemented basic FITS integration. 	Added FITS jars & directories needed to run 	Updated Migrator to run FITS Updated Migrator w/ options to overwrite existing destination files. Added a (local) test case to DataAccessioner main method. Bug fix: initial checksum/copy wrote nulls when source did not fill the buffer. Now correctly omits null buffer.
bug_after_refactoring: { int dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_RUNNING ; dvmfzseulhluyxcfabst = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return dvmfzseulhluyxcfabst ; } <s> public int run ( java.io.File source , java.io.File destination ) { int dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_RUNNING ; dvmfzseulhluyxcfabst = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return dvmfzseulhluyxcfabst ; } <s> Implemented basic FITS integration. 	Added FITS jars & directories needed to run 	Updated Migrator to run FITS Updated Migrator w/ options to overwrite existing destination files. Added a (local) test case to DataAccessioner main method. Bug fix: initial checksum/copy wrote nulls when source did not fill the buffer. Now correctly omits null buffer.
fix_before_refactoring: { status = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { status = org.dataaccessioner.Migrator.STATUS_RUNNING ; status = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return status ; }
fix_after_refactoring: { dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_RUNNING ; dvmfzseulhluyxcfabst = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return dvmfzseulhluyxcfabst ; }
× fix_prediction_before: { int status = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { status = org.dataaccessioner.Migrator.STATUS_RUNNING ; status = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } return status ; }
× fix_prediction_after: { int dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_INITIALIZING ; try { dvmfzseulhluyxcfabst = org.dataaccessioner.Migrator.STATUS_RUNNING ; dvmfzseulhluyxcfabst = copyDirectory ( source , destination ) ; } catch ( java.io.FileNotFoundException ex ) { setStatusMessage ( ex . getLocalizedMessage () ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } catch ( java.lang.Exception ex ) { setStatusMessage ( ( "Unexpected Failure: " + ( ex . getLocalizedMessage () ) ) ) ; return org.dataaccessioner.Migrator.STATUS_FAILURE ; } }

line_index: 703
bug_before_refactoring: { double [] primArr = new double [ valArr.length ] ; if ( ( valArr.length ) <= 0 ) java.lang.System.err . println ( "ERROR: array is null" ) ; java.lang.System.out . println ( ( "Valarr length = " + ( valArr.length ) ) ) ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { java.lang.System.out . println ( ( "i= " + i ) ) ; primArr [ i ] = valArr [ i ] ; } return primArr ; } <s> private double [] primConverter ( java.lang.Double [] valArr ) { double [] primArr = new double [ valArr.length ] ; if ( ( valArr.length ) <= 0 ) java.lang.System.err . println ( "ERROR: array is null" ) ; java.lang.System.out . println ( ( "Valarr length = " + ( valArr.length ) ) ) ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { java.lang.System.out . println ( ( "i= " + i ) ) ; primArr [ i ] = valArr [ i ] ; } return primArr ; } <s> commented out debugging code  fixed file locations  commented out code in the main
bug_after_refactoring: { double [] wdznkfbwjrsqzfeqimhr = new double [ valArr.length ] ; if ( ( valArr.length ) <= 0 ) java.lang.System.err . println ( "ERROR: array is null" ) ; java.lang.System.out . println ( ( "Valarr length = " + ( valArr.length ) ) ) ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { java.lang.System.out . println ( ( "i= " + i ) ) ; wdznkfbwjrsqzfeqimhr [ i ] = valArr [ i ] ; } return wdznkfbwjrsqzfeqimhr ; } <s> private double [] primConverter ( java.lang.Double [] valArr ) { double [] wdznkfbwjrsqzfeqimhr = new double [ valArr.length ] ; if ( ( valArr.length ) <= 0 ) java.lang.System.err . println ( "ERROR: array is null" ) ; java.lang.System.out . println ( ( "Valarr length = " + ( valArr.length ) ) ) ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { java.lang.System.out . println ( ( "i= " + i ) ) ; wdznkfbwjrsqzfeqimhr [ i ] = valArr [ i ] ; } return wdznkfbwjrsqzfeqimhr ; } <s> commented out debugging code  fixed file locations  commented out code in the main
fix_before_refactoring: { double [] primArr = new double [ valArr.length ] ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { primArr [ i ] = valArr [ i ] ; } return primArr ; }
fix_after_refactoring: { double [] wdznkfbwjrsqzfeqimhr = new double [ valArr.length ] ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { wdznkfbwjrsqzfeqimhr [ i ] = valArr [ i ] ; } return wdznkfbwjrsqzfeqimhr ; }
× fix_prediction_before: { double [] primArr = new double [ valArr.length ] ; if ( ( valArr.length ) <= 0 ) java.lang.System.err . println ( "ERROR: array is null" ) ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { primArr [ i ] = valArr [ i ] ; } return primArr ; }
× fix_prediction_after: { double [] wdznkfbwjrsqzfeqimhr = new double [ valArr.length ] ; if ( ( valArr.length ) <= 0 ) java.lang.System.err . println ( "ERROR: array is null" ) ; java.lang.System.out . println ( ( "Valarr length = " + ( valArr.length ) ) ) ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { java.lang.System.out . println ( ( "i= " + i ) ) ; wdznkfbwjrsqzfeqimhr [ i ] = valArr [ i ] ; } return wdznkfbwjrsqzfeqimhr ; }

line_index: 704
bug_before_refactoring: { int res = firstClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "firstClassOrdering" ) ; if ( res == 0 ) { res = secondClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "SecondClassOrdering" ) ; if ( res == 0 ) { res = thirdClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "thirdClassOrdering" ) ; } } return res ; } <s> @ java.lang.Override public int compare ( com.example.nickozoulis.teamproj.domain.Referee lRef , com.example.nickozoulis.teamproj.domain.Referee rRef ) { int res = firstClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "firstClassOrdering" ) ; if ( res == 0 ) { res = secondClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "SecondClassOrdering" ) ; if ( res == 0 ) { res = thirdClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "thirdClassOrdering" ) ; } } return res ; } <s> more features and bug fixes
bug_after_refactoring: { int cttisehwqshsnkrxuiua = firstClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "firstClassOrdering" ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = secondClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "SecondClassOrdering" ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = thirdClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "thirdClassOrdering" ) ; } } return cttisehwqshsnkrxuiua ; } <s> @ java.lang.Override public int compare ( com.example.nickozoulis.teamproj.domain.Referee lRef , com.example.nickozoulis.teamproj.domain.Referee rRef ) { int cttisehwqshsnkrxuiua = firstClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "firstClassOrdering" ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = secondClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "SecondClassOrdering" ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = thirdClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "thirdClassOrdering" ) ; } } return cttisehwqshsnkrxuiua ; } <s> more features and bug fixes
fix_before_refactoring: { int res = firstClassOrdering ( lRef , rRef ) ; if ( res == 0 ) { res = secondClassOrdering ( lRef , rRef ) ; if ( res == 0 ) { res = thirdClassOrdering ( lRef , rRef ) ; } } return res ; }
fix_after_refactoring: { int cttisehwqshsnkrxuiua = firstClassOrdering ( lRef , rRef ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = secondClassOrdering ( lRef , rRef ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = thirdClassOrdering ( lRef , rRef ) ; } } return cttisehwqshsnkrxuiua ; }
× fix_prediction_before: { int res = firstClassOrdering ( lRef , rRef ) ; if ( res == 0 ) { res = secondClassOrdering ( lRef , rRef ) ; if ( res == 0 ) { res = secondClassOrdering ( lRef , rRef ) ; } if ( res == 0 ) { res = thirdClassOrdering ( lRef , rRef ) ; } } return res ; }
× fix_prediction_after: { int cttisehwqshsnkrxuiua = firstClassOrdering ( lRef , rRef ) ; if ( cttisehwqshkrxuiua == 0 ) { cttisehwqshkrxuiua = secondClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "SecondClassOrdering" ) ; if ( cttisehwqshsnkrxuiua == 0 ) { cttisehwqshsnkrxuiua = thirdClassOrdering ( lRef , rRef ) ; android.util.Log . i ( "INFO" , "thirdClassOrdering" ) ; } } return cttisehwqshsnkrxuiua ; }

line_index: 705
bug_before_refactoring: { int count = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( lowerIndex ) < ( histogram.length ) ; ( lowerIndex ) ++ ) { count += histogram [ lowerIndex ] ; if ( count >= ( lowerCount ) ) { break; } } for ( upperIndex = lowerIndex ; ( upperIndex ) < ( histogram.length ) ; ( upperIndex ) ++ ) { count += histogram [ upperIndex ] ; if ( count >= ( upperCount ) ) { break; } } } <s> private void findPercentiles () { int count = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( lowerIndex ) < ( histogram.length ) ; ( lowerIndex ) ++ ) { count += histogram [ lowerIndex ] ; if ( count >= ( lowerCount ) ) { break; } } for ( upperIndex = lowerIndex ; ( upperIndex ) < ( histogram.length ) ; ( upperIndex ) ++ ) { count += histogram [ upperIndex ] ; if ( count >= ( upperCount ) ) { break; } } } <s> - Fixed a bug relating to upper and lower threshold index values not being equal when they should have been - Type wasn't set in ConfigThresholdSquareBorder
bug_after_refactoring: { int uxzxrwtqmcserfycltoz = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( lowerIndex ) < ( histogram.length ) ; ( lowerIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ lowerIndex ] ; if ( uxzxrwtqmcserfycltoz >= ( lowerCount ) ) { break; } } for ( upperIndex = lowerIndex ; ( upperIndex ) < ( histogram.length ) ; ( upperIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ upperIndex ] ; if ( uxzxrwtqmcserfycltoz >= ( upperCount ) ) { break; } } } <s> private void findPercentiles () { int uxzxrwtqmcserfycltoz = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( lowerIndex ) < ( histogram.length ) ; ( lowerIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ lowerIndex ] ; if ( uxzxrwtqmcserfycltoz >= ( lowerCount ) ) { break; } } for ( upperIndex = lowerIndex ; ( upperIndex ) < ( histogram.length ) ; ( upperIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ upperIndex ] ; if ( uxzxrwtqmcserfycltoz >= ( upperCount ) ) { break; } } } <s> - Fixed a bug relating to upper and lower threshold index values not being equal when they should have been - Type wasn't set in ConfigThresholdSquareBorder
fix_before_refactoring: { int count = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( ( lowerIndex ) < ( histogram.length ) ) && ( count < ( lowerCount ) ) ; ( lowerIndex ) ++ ) { count += histogram [ lowerIndex ] ; } for ( upperIndex = lowerIndex ; ( ( upperIndex ) < ( histogram.length ) ) && ( count < ( upperCount ) ) ; ( upperIndex ) ++ ) { count += histogram [ upperIndex ] ; } }
fix_after_refactoring: { int uxzxrwtqmcserfycltoz = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( ( lowerIndex ) < ( histogram.length ) ) && ( uxzxrwtqmcserfycltoz < ( lowerCount ) ) ; ( lowerIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ lowerIndex ] ; } for ( upperIndex = lowerIndex ; ( ( upperIndex ) < ( histogram.length ) ) && ( uxzxrwtqmcserfycltoz < ( upperCount ) ) ; ( upperIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ upperIndex ] ; } }
× fix_prediction_before: { int count = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( lowerIndex ) < ( histogram.length ) ; ( lowerIndex ) ++ ) { count += histogram [ lowerIndex ] ; if ( count >= ( lowerCount ) ) { break; } } for ( upperIndex = lowerIndex ; ( upperIndex ) < ( histogram.length ) ; ( upperIndex ) ++ ) { count += histogram [ upperIndex ] ; if ( count >= ( upperCount ) ) { break; } } }
× fix_prediction_after: { int uxzxrwtqmcserfycltoz = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( lowerIndex ) < ( histogram.length ) ; ( lowerIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ lowerIndex ] ; if ( uxzxrwtqmcserfycltoz >= ( lowerCount ) ) { break; } } for ( upperIndex = lowerIndex ; ( upperIndex ) < ( histogram.length ) ; ( upperIndex ) ++ ) { uxzxrwtqmcserfycltoz += histogram [ upperIndex ] ; if ( uxzxrwtqmcserfycltoz >= ( upperCount ) ) { break; } } }

line_index: 707
bug_before_refactoring: return 1 + ( java.lang.Math . log ( ( ( documents . size () ) / count ) ) ) ; <s> public double calculateIDF ( java.util.List < java.lang.String [] > documents , java.lang.String wordToCheck ) { double count = 0 ; for ( java.lang.String [] ss : documents ) { for ( java.lang.String s : ss ) { if ( s . equalsIgnoreCase ( wordToCheck ) ) { count ++ ; break; } } } return 1 + ( java.lang.Math . log ( ( ( documents . size () ) / count ) ) ) ; } <s> fix issue in idf calculator method
bug_after_refactoring: return 1 + ( java.lang.Math . log ( ( ( documents . size () ) / rkouggwkrrfhepzytlqa ) ) ) ; <s> public double calculateIDF ( java.util.List < java.lang.String [] > documents , java.lang.String wordToCheck ) { double count = 0 ; for ( java.lang.String [] ss : documents ) { for ( java.lang.String s : ss ) { if ( s . equalsIgnoreCase ( wordToCheck ) ) { count ++ ; break; } } } return 1 + ( java.lang.Math . log ( ( ( documents . size () ) / rkouggwkrrfhepzytlqa ) ) ) ; } <s> fix issue in idf calculator method
fix_before_refactoring: return java.lang.Math . log ( ( ( ( documents . size () ) / 1 ) + count ) ) ;
fix_after_refactoring: return java.lang.Math . log ( ( ( ( documents . size () ) / 1 ) + rkouggwkrrfhepzytlqa ) ) ;
× fix_prediction_before: return 0 ;
× fix_prediction_after: return java.lang.Math . log ( ( ( documents . size () ) / rkouggwkrrfhepzytlqa ) ) ;

line_index: 709
bug_before_refactoring: de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) , sizeHeight ) <s> @ java.lang.Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { if ( heightMeasureSpec != 0 ) { int sizeWidth = de.dmxcontrol.widget.MeasureSpec . getSize ( widthMeasureSpec ) ; int sizeHeight = de.dmxcontrol.widget.MeasureSpec . getSize ( heightMeasureSpec ) ; if ( ( sizeHeight < sizeWidth ) && false ) { heightMeasureSpec = de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) , sizeHeight ) ; } } super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; } <s> Fixed some small errors
bug_after_refactoring: de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) , meiekscmokdmqqtdwzbf ) <s> @ java.lang.Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { if ( heightMeasureSpec != 0 ) { int sizeWidth = de.dmxcontrol.widget.MeasureSpec . getSize ( widthMeasureSpec ) ; int sizeHeight = de.dmxcontrol.widget.MeasureSpec . getSize ( heightMeasureSpec ) ; if ( ( sizeHeight < sizeWidth ) && false ) { heightMeasureSpec = de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) , meiekscmokdmqqtdwzbf ) ; } } super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; } <s> Fixed some small errors
fix_before_refactoring: de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( sizeHeight , de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) )
fix_after_refactoring: de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( meiekscmokdmqqtdwzbf , de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) )
× fix_prediction_before: de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( de.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) , sizeHeight )
× fix_prediction_after: de.dmxcontrol.widget.MeasureSpec . makeMeasureSpec ( me.dmxcontrol.widget.MeasureSpec . getMode ( heightMeasureSpec ) , meiekscmokdmqqtdwzbf )

line_index: 710
bug_before_refactoring: { int next = ( status . ordinal () ) + 1 ; if ( next >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( next ) ; } } <s> private void next () { int next = ( status . ordinal () ) + 1 ; if ( next >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( next ) ; } } <s> Solve cursor issue
bug_after_refactoring: { int qjoxpghjhplafwthzrou = ( status . ordinal () ) + 1 ; if ( qjoxpghjhplafwthzrou >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( qjoxpghjhplafwthzrou ) ; } } <s> private void next () { int qjoxpghjhplafwthzrou = ( status . ordinal () ) + 1 ; if ( qjoxpghjhplafwthzrou >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( qjoxpghjhplafwthzrou ) ; } } <s> Solve cursor issue
fix_before_refactoring: { update () ; int next = ( status . ordinal () ) + 1 ; if ( next >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( next ) ; } }
fix_after_refactoring: { update () ; int qjoxpghjhplafwthzrou = ( status . ordinal () ) + 1 ; if ( qjoxpghjhplafwthzrou >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( qjoxpghjhplafwthzrou ) ; } }
× fix_prediction_before: { int next = ( status . ordinal () ) + 1 ; if ( next >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( next ) ; } }
× fix_prediction_after: { int qjoxpghjhplafwthrou = ( status . ordinal () ) + 1 ; if ( qjoxpghjhplafwthzrou >= ( PipelineConfig.Step . values () . length ) ) { ch.epfl.planair.Planair . become ( ch.epfl.planair.mods.MenuMode . class ) ; } else { toStep ( qjoxpghjhplafwthzrou ) ; } }

line_index: 711
bug_before_refactoring: { if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float rawX = event.values [ 0 ] ; float normalizedX = rawX * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( normalizedX ) ) ) ; } } <s> @ java.lang.Override public void onSensorChanged ( android.hardware.SensorEvent event ) { if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float rawX = event.values [ 0 ] ; float normalizedX = rawX * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( normalizedX ) ) ) ; } } <s> Fixed issue on emulator.
bug_after_refactoring: { if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float fehekgwsajskbnczksuo = event.values [ 0 ] ; float eqcsautxlrbjkyqhnojf = fehekgwsajskbnczksuo * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( eqcsautxlrbjkyqhnojf ) ) ) ; } } <s> @ java.lang.Override public void onSensorChanged ( android.hardware.SensorEvent event ) { if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float fehekgwsajskbnczksuo = event.values [ 0 ] ; float eqcsautxlrbjkyqhnojf = fehekgwsajskbnczksuo * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( eqcsautxlrbjkyqhnojf ) ) ) ; } } <s> Fixed issue on emulator.
fix_before_refactoring: { if ( ( spaceShip ) == null ) return; if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float rawX = event.values [ 0 ] ; float normalizedX = rawX * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( normalizedX ) ) ) ; } }
fix_after_refactoring: { if ( ( spaceShip ) == null ) return; if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float fehekgwsajskbnczksuo = event.values [ 0 ] ; float eqcsautxlrbjkyqhnojf = fehekgwsajskbnczksuo * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( eqcsautxlrbjkyqhnojf ) ) ) ; } }
× fix_prediction_before: { super . onSensorChanged ( event ) ; if ( ( event.sensor . getType () ) == ( android.hardware.Sensor.TYPE_ACCELEROMETER ) ) { float rawX = event.values [ 0 ] ; float normalizedX = rawX * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( normalizedX ) ) ) ; } }
× fix_prediction_after: { float fehekgwsajskbnczksuo = event.values [ 0 ] ; float eqcsautxlrbjkyqhnojf = fehekgwsajskbnczksuo * ( - 2.0F ) ; spaceShip . setXVelocity ( ( ( int ) ( eqcsautxlrbjkyqhnojf ) ) ) ; }

line_index: 713
bug_before_refactoring: { int action = 0 ; setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int randomNum = rand . nextInt ( 4 ) ; if ( randomNum == 0 ) action = 0 ; if ( randomNum == 1 ) action = 1 ; if ( randomNum == 2 ) action = 2 ; if ( randomNum == 3 ) action = 3 ; return action ; } <s> private int decideAction () { int action = 0 ; setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int randomNum = rand . nextInt ( 4 ) ; if ( randomNum == 0 ) action = 0 ; if ( randomNum == 1 ) action = 1 ; if ( randomNum == 2 ) action = 2 ; if ( randomNum == 3 ) action = 3 ; return action ; } <s> clean up the code. still buggy  need to be fixed
bug_after_refactoring: { int lfjoivoznrtoevxtbrrt = 0 ; setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int gdcdtlpptobxtbwrzixe = rand . nextInt ( 4 ) ; if ( gdcdtlpptobxtbwrzixe == 0 ) lfjoivoznrtoevxtbrrt = 0 ; if ( gdcdtlpptobxtbwrzixe == 1 ) lfjoivoznrtoevxtbrrt = 1 ; if ( gdcdtlpptobxtbwrzixe == 2 ) lfjoivoznrtoevxtbrrt = 2 ; if ( gdcdtlpptobxtbwrzixe == 3 ) lfjoivoznrtoevxtbrrt = 3 ; return lfjoivoznrtoevxtbrrt ; } <s> private int decideAction () { int lfjoivoznrtoevxtbrrt = 0 ; setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int gdcdtlpptobxtbwrzixe = rand . nextInt ( 4 ) ; if ( gdcdtlpptobxtbwrzixe == 0 ) lfjoivoznrtoevxtbrrt = 0 ; if ( gdcdtlpptobxtbwrzixe == 1 ) lfjoivoznrtoevxtbrrt = 1 ; if ( gdcdtlpptobxtbwrzixe == 2 ) lfjoivoznrtoevxtbrrt = 2 ; if ( gdcdtlpptobxtbwrzixe == 3 ) lfjoivoznrtoevxtbrrt = 3 ; return lfjoivoznrtoevxtbrrt ; } <s> clean up the code. still buggy  need to be fixed
fix_before_refactoring: { setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int randomNum = rand . nextInt ( 4 ) ; return randomNum ; }
fix_after_refactoring: { setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int gdcdtlpptobxtbwrzixe = rand . nextInt ( 4 ) ; return gdcdtlpptobxtbwrzixe ; }
× fix_prediction_before: { int action = 0 ; setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int randomNum = rand . nextInt ( 4 ) ; if ( randomNum == 0 ) action = 0 ; if ( randomNum == 1 ) action = 1 ; if ( randomNum == 2 ) action = 2 ; if ( randomNum == 3 ) action = 3 ; return action ; }
× fix_prediction_after: { int lfjoivoznrtoevxtbrrt = 0 ; setHorizontalVelocity ( 0.0 ) ; java.util.Random rand = new java.util.Random () ; actionDuration = ( ( rand . nextDouble () ) * 3.0 ) + 1.0 ; actionTime = 0.0 ; int gdcdtlpptobxtbwrzixe = rand . nextInt ( 4 ) ; if ( gdcdtlpptobxtbwrzixe == 1 ) lfjoivoznrtoevxtbrrt = 0 ; if ( gdcdtlpptobxtbwrzixe == 1 ) lfjoivoznrtoevxtbrrt = 1 ; if ( gdcdtlpptobxtbwrzixe == 2 ) lfjoivoznrtoevxtbrrt = 2 ; return lfjoivoznrtoevxtbrrt = 3 ; }

line_index: 714
bug_before_refactoring: sim < ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) <s> private static double compare ( final java.lang.String v1 , final java.lang.String v2 , final double high , final double low , final java.util.Comparator comparator ) { if ( comparator == null ) { return org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ; } double sim = comparator . compare ( v1 , v2 ) ; if ( sim < ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) ) { return low ; } else { return ( ( high - ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) ) * ( sim * sim ) ) + ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) ; } } <s> Merge pull request #3 from Gfif/master  Fix average_socre bug  add version to plugin properties
bug_after_refactoring: rrfcwfewhqqugwdjkepv < ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) <s> private static double compare ( final java.lang.String v1 , final java.lang.String v2 , final double high , final double low , final java.util.Comparator comparator ) { if ( comparator == null ) { return org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ; } double sim = comparator . compare ( v1 , v2 ) ; if ( rrfcwfewhqqugwdjkepv < ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) ) { return low ; } else { return ( ( high - ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) ) * ( sim * sim ) ) + ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE ) ; } } <s> Merge pull request #3 from Gfif/master  Fix average_socre bug  add version to plugin properties
fix_before_refactoring: sim < low
fix_after_refactoring: rrfcwfewhqqugwdjkepv < low
× fix_prediction_before: sim < ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE )
× fix_prediction_after: rrfcwfewhqqugwdjkepv < ( org.yaba.entity.script.EntityResolutionScript.AVERAGE_SCORE )

line_index: 715
bug_before_refactoring: { byte [] id = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; xaurora.io.DataFileIO . instanceOf () . createDataFile ( id , java.lang.String . valueOf ( text ) . getBytes () ) ; } <s> private void outputToFile ( java.lang.String text ) { byte [] id = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; xaurora.io.DataFileIO . instanceOf () . createDataFile ( id , java.lang.String . valueOf ( text ) . getBytes () ) ; } <s> bug fix for ID generation
bug_after_refactoring: { byte [] vyzdkhaztgvdaynrhshx = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; xaurora.io.DataFileIO . instanceOf () . createDataFile ( vyzdkhaztgvdaynrhshx , java.lang.String . valueOf ( text ) . getBytes () ) ; } <s> private void outputToFile ( java.lang.String text ) { byte [] vyzdkhaztgvdaynrhshx = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; xaurora.io.DataFileIO . instanceOf () . createDataFile ( vyzdkhaztgvdaynrhshx , java.lang.String . valueOf ( text ) . getBytes () ) ; } <s> bug fix for ID generation
fix_before_refactoring: { java.lang.String id = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; xaurora.io.DataFileIO . instanceOf () . createDataFile ( id , java.lang.String . valueOf ( text ) . getBytes () ) ; java.lang.System.out . println ( java.lang.String . valueOf ( text ) ) ; }
fix_after_refactoring: { java.lang.String vyzdkhaztgvdaynrhshx = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; xaurora.io.DataFileIO . instanceOf () . createDataFile ( vyzdkhaztgvdaynrhshx , java.lang.String . valueOf ( text ) . getBytes () ) ; java.lang.System.out . println ( java.lang.String . valueOf ( text ) ) ; }
× fix_prediction_before: { byte [] id = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; if ( ( text != null ) && ( ( text . getBytes () ) != null ) ) { xaurora.io.DataFileIO . instanceOf () . createDataFile ( id , java.lang.String . valueOf ( text ) . getBytes () ) ; } }
× fix_prediction_after: { byte [] vyzdkhaztgvdaynrhshx = xaurora.io.IDGenerator . instanceOf () . GenerateID ( xaurora.communication.ChromeServer . getURL ( text ) , xaurora.communication.ChromeServer.TYPE_FULL_TEXT ) ; if ( ( text != null ) && ( ( text . getBytes () ) != null ) ) { xaurora.io.DataFileIO . instanceOf () . createDataFile ( vyzdkhaztgvdaynrhshx , java.lang.String . valueOf ( text ) . getBytes () ) ; } }

line_index: 716
bug_before_refactoring: { int realLightsCount = getRealLightsCount () ; int sum = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { sum += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( java.lang.Math . round ( ( sum / realLightsCount ) ) ) ; } <s> private void updateMaster () { if ( masterExists () ) { int realLightsCount = getRealLightsCount () ; int sum = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { sum += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( java.lang.Math . round ( ( sum / realLightsCount ) ) ) ; } } <s> fixed lights update from master bug
bug_after_refactoring: { int cozxwosxocoepeqgnrtj = getRealLightsCount () ; int ntiazcceptejkvbhuqtc = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { ntiazcceptejkvbhuqtc += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( java.lang.Math . round ( ( ntiazcceptejkvbhuqtc / cozxwosxocoepeqgnrtj ) ) ) ; } <s> private void updateMaster () { if ( masterExists () ) { int cozxwosxocoepeqgnrtj = getRealLightsCount () ; int ntiazcceptejkvbhuqtc = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { ntiazcceptejkvbhuqtc += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( java.lang.Math . round ( ( ntiazcceptejkvbhuqtc / cozxwosxocoepeqgnrtj ) ) ) ; } } <s> fixed lights update from master bug
fix_before_refactoring: { int sum = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { sum += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( sum ) ; }
fix_after_refactoring: { int ntiazcceptejkvbhuqtc = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { ntiazcceptejkvbhuqtc += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( ntiazcceptejkvbhuqtc ) ; }
× fix_prediction_before: { int realLightsCount = getRealLightsCount () ; int sum = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { sum += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( java.lang.Math . round ( ( sum / realLightsCount ) ) ) ; }
× fix_prediction_after: { int cozxwosxocoepeqgnrtj = getRealLightsCount () ; int ntiazcceptejkvbhuqtc = 0 ; for ( bei.m3c.widgets.LightWidget lightWidget : largeLightWidgets . subList ( 1 , largeLightWidgets . size () ) ) { ntiazcceptejkvbhuqtc += lightWidget . getValue () ; } largeLightWidgets . get ( 0 ) . setValue ( java.lang.Math . round ( ( ntiazcceptejkvbhuqtc / cozxwosxocoepeqgnrtj ) ) ) ; }

line_index: 717
bug_before_refactoring: { if ( ( getBalance () ) == 0 ) return 0 ; double deposited = super . deposit ( amount ) ; double finalDeposit = against . deposit ( deposited ) ; double difference = finalDeposit - deposited ; if ( difference != 0 ) super . withdraw ( difference ) ; return finalDeposit ; } <s> @ java.lang.Override public double deposit ( double amount ) { if ( ( getBalance () ) == 0 ) return 0 ; double deposited = super . deposit ( amount ) ; double finalDeposit = against . deposit ( deposited ) ; double difference = finalDeposit - deposited ; if ( difference != 0 ) super . withdraw ( difference ) ; return finalDeposit ; } <s> Fixes bugs with the new loan against account feature
bug_after_refactoring: { if ( ( getBalance () ) == 0 ) return 0 ; double tuvrkilhlbvmjejykajy = super . deposit ( amount ) ; double expwfuiwlyjzuuelkjqd = against . deposit ( tuvrkilhlbvmjejykajy ) ; double petiuqjlgxdzgajpmkng = expwfuiwlyjzuuelkjqd - tuvrkilhlbvmjejykajy ; if ( petiuqjlgxdzgajpmkng != 0 ) super . withdraw ( petiuqjlgxdzgajpmkng ) ; return expwfuiwlyjzuuelkjqd ; } <s> @ java.lang.Override public double deposit ( double amount ) { if ( ( getBalance () ) == 0 ) return 0 ; double tuvrkilhlbvmjejykajy = super . deposit ( amount ) ; double expwfuiwlyjzuuelkjqd = against . deposit ( tuvrkilhlbvmjejykajy ) ; double petiuqjlgxdzgajpmkng = expwfuiwlyjzuuelkjqd - tuvrkilhlbvmjejykajy ; if ( petiuqjlgxdzgajpmkng != 0 ) super . withdraw ( petiuqjlgxdzgajpmkng ) ; return expwfuiwlyjzuuelkjqd ; } <s> Fixes bugs with the new loan against account feature
fix_before_refactoring: { if ( ( getBalance () ) == 0 ) return 0 ; double deposited = super . deposit ( amount ) ; double finalDeposit = against . deposit ( deposited ) ; double difference = deposited - finalDeposit ; if ( difference != 0 ) { super . withdraw ( difference ) ; } return finalDeposit ; }
fix_after_refactoring: { if ( ( getBalance () ) == 0 ) return 0 ; double tuvrkilhlbvmjejykajy = super . deposit ( amount ) ; double expwfuiwlyjzuuelkjqd = against . deposit ( tuvrkilhlbvmjejykajy ) ; double petiuqjlgxdzgajpmkng = tuvrkilhlbvmjejykajy - expwfuiwlyjzuuelkjqd ; if ( petiuqjlgxdzgajpmkng != 0 ) { super . withdraw ( petiuqjlgxdzgajpmkng ) ; } return expwfuiwlyjzuuelkjqd ; }
× fix_prediction_before: { if ( ( getBalance () ) == 0 ) return 0 ; double deposit = super . deposit ( amount ) ; double finalDeposit = against . deposit ( deposit ) ; double difference = finalDeposit - deposit ; if ( difference != 0 ) super . withdraw ( difference ) ; return finalDeposit ; }
× fix_prediction_after: { if ( ( getBalance () ) == 0 ) return 0 ; double tuvrkilhlbvmjejykajy = super . deposit ( amount ) ; double petiuqjlgxdzgajpmkng = expwfuiwlyjzuuelkjqd - tuvrkilhlbvmjejykajy ; if ( petiuqjlgxdzgajpmkng != 0 ) super . withdraw ( petiuqjlgxdzgajpmkng ) ; return expwfuiwlyjzuuelkjqd ; }

line_index: 718
bug_before_refactoring: { if ( preamble == null ) preamble = "V" ; int i = 1 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( i <= nameCount ) { n [ i ] = preamble + ( i ++ ) ; } return n ; } <s> protected static java.lang.String [] createNames ( int nameCount , java.lang.String preamble ) { if ( preamble == null ) preamble = "V" ; int i = 1 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( i <= nameCount ) { n [ i ] = preamble + ( i ++ ) ; } return n ; } <s> Fixed createNames(int  String) method errors
bug_after_refactoring: { if ( preamble == null ) preamble = "V" ; int lbyeqwfihbotlplidims = 1 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( lbyeqwfihbotlplidims <= nameCount ) { n [ lbyeqwfihbotlplidims ] = preamble + ( lbyeqwfihbotlplidims ++ ) ; } return n ; } <s> protected static java.lang.String [] createNames ( int nameCount , java.lang.String preamble ) { if ( preamble == null ) preamble = "V" ; int lbyeqwfihbotlplidims = 1 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( lbyeqwfihbotlplidims <= nameCount ) { n [ lbyeqwfihbotlplidims ] = preamble + ( lbyeqwfihbotlplidims ++ ) ; } return n ; } <s> Fixed createNames(int  String) method errors
fix_before_refactoring: { if ( preamble == null ) preamble = "V" ; int i = 0 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( i < nameCount ) { n [ i ] = preamble + ( ++ i ) ; } return n ; }
fix_after_refactoring: { if ( preamble == null ) preamble = "V" ; int lbyeqwfihbotlplidims = 0 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( lbyeqwfihbotlplidims < nameCount ) { n [ lbyeqwfihbotlplidims ] = preamble + ( ++ lbyeqwfihbotlplidims ) ; } return n ; }
× fix_prediction_before: { if ( preamble == null ) { preamble = "V" ; } int i = 1 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( i <= nameCount ) { n [ i ] = preamble + ( i ++ ) ; } return n ; }
× fix_prediction_after: { if ( preamble == null ) preamble = "V" ; int lbyeqwfihbotlplidims = 1 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( lbyeqwfihbotlplidims <= nameCount ) { n [ lbyeqwfihbotlplidims ] = preamble + ( lbyeqwfihbotlplidims ++ ) ; } return n ; }

line_index: 719
bug_before_refactoring: if ( ( stoneBlocks + boardBlocksCount ) == ( Board.WIDTH_IN_BLOCKS ) ) { lines ++ ; } <s> public static int getFutureLinesVanished ( de.slothsoft.tetris.Board board , de.slothsoft.tetris.Stone stone , int blockY ) { int lines = 0 ; for ( int y = 0 ; y < ( stone . getHeightInBlocks () ) ; y ++ ) { int stoneBlocks = stone . calculateBlockCountOfLine ( y ) ; int boardBlocksCount = board . calculateBlockCountOfLine ( ( y + blockY ) ) ; if ( ( stoneBlocks + boardBlocksCount ) == ( Board.WIDTH_IN_BLOCKS ) ) { lines ++ ; } } return lines ; } <s> bug fixes
bug_after_refactoring: if ( ( gjlkbrhhaadmhfvcaznx + qvwuhmlzyzhtgqspvboy ) == ( Board.WIDTH_IN_BLOCKS ) ) { xsgabswdftidefvmeehv ++ ; } <s> public static int getFutureLinesVanished ( de.slothsoft.tetris.Board board , de.slothsoft.tetris.Stone stone , int blockY ) { int lines = 0 ; for ( int y = 0 ; y < ( stone . getHeightInBlocks () ) ; y ++ ) { int stoneBlocks = stone . calculateBlockCountOfLine ( y ) ; int boardBlocksCount = board . calculateBlockCountOfLine ( ( y + blockY ) ) ; if ( ( gjlkbrhhaadmhfvcaznx + qvwuhmlzyzhtgqspvboy ) == ( Board.WIDTH_IN_BLOCKS ) ) { xsgabswdftidefvmeehv ++ ; } } return lines ; } <s> bug fixes
fix_before_refactoring: if ( ( stoneBlocks + boardBlocksCount ) >= ( Board.WIDTH_IN_BLOCKS ) ) { lines ++ ; }
fix_after_refactoring: if ( ( gjlkbrhhaadmhfvcaznx + qvwuhmlzyzhtgqspvboy ) >= ( Board.WIDTH_IN_BLOCKS ) ) { xsgabswdftidefvmeehv ++ ; }
× fix_prediction_before: if ( ( stoneBlocks + boardBlocksCount ) == ( Board.WIDTH_IN_BLOCKS ) ) { lines ++ ; }
× fix_prediction_after: if ( ( gjlkbrhhaadmhfvcaznx + qvwuhmlzyzhtgqspvboy ) == ( Board.WIDTH_IN_BLOCKS ) ) { xsgabswdftidefvmeehv ++ ; }

line_index: 720
bug_before_refactoring: { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; int numOfSchedules = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + numOfSchedules ) ) ; } return numOfSchedules ; } <s> public int incrementNumberOfScheduledDeliveries ( long messageID ) { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; int numOfSchedules = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + numOfSchedules ) ) ; } return numOfSchedules ; } <s> Merge pull request #53 from indikasampath2000/MB-953_MB-955  MB-953 and MB-955 issue fixed.
bug_after_refactoring: { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; int fdfcxelvxhsfhjbctgch = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + fdfcxelvxhsfhjbctgch ) ) ; } return fdfcxelvxhsfhjbctgch ; } <s> public int incrementNumberOfScheduledDeliveries ( long messageID ) { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; int fdfcxelvxhsfhjbctgch = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + fdfcxelvxhsfhjbctgch ) ) ; } return fdfcxelvxhsfhjbctgch ; } <s> Merge pull request #53 from indikasampath2000/MB-953_MB-955  MB-953 and MB-955 issue fixed.
fix_before_refactoring: { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; int numOfSchedules = 0 ; if ( trackingData != null ) { trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; numOfSchedules = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + numOfSchedules ) ) ; } } return numOfSchedules ; }
fix_after_refactoring: { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; int fdfcxelvxhsfhjbctgch = 0 ; if ( trackingData != null ) { trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; fdfcxelvxhsfhjbctgch = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + fdfcxelvxhsfhjbctgch ) ) ; } } return fdfcxelvxhsfhjbctgch ; }
× fix_prediction_before: { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; int numOfSchedules = trackingData.numberOfScheduledDeliveries . incrementAndGet () ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + numOfSchedules ) ) ; } return numOfSchedules ; }
× fix_prediction_after: { org.wso2.andes.kernel.OnflightMessageTracker.MsgData trackingData = getTrackingData ( messageID ) ; trackingData . addMessageStatus ( MessageStatus.SCHEDULED_TO_SEND ) ; if ( org.wso2.andes.kernel.OnflightMessageTracker.log . isDebugEnabled () ) { org.wso2.andes.kernel.OnflightMessageTracker.log . debug ( ( ( ( "message id= " + messageID ) + " scheduled. Pending to execute= " ) + fdfcxelvxhsfhjbctgch ) ) ; } return fdfcxelvxhsfhjbctgch ; }

line_index: 722
bug_before_refactoring: { int i = 0 ; int maxConnections = 200 ; while ( ( i ++ ) < maxConnections ) { java.net.Socket clientConnection = s . accept () ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; } <s> public ATMServer.Server handleData ( ) throws java.io.IOException { int i = 0 ; int maxConnections = 200 ; while ( ( i ++ ) < maxConnections ) { java.net.Socket clientConnection = s . accept () ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; } <s> More bug fixes  added identifier  scrapped stock market
bug_after_refactoring: { int dhgbumjgkqxujgzrtyhe = 0 ; int epdsrnbzmdoblxwfznsb = 200 ; while ( ( dhgbumjgkqxujgzrtyhe ++ ) < epdsrnbzmdoblxwfznsb ) { java.net.Socket clientConnection = s . accept () ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; } <s> public ATMServer.Server handleData ( ) throws java.io.IOException { int dhgbumjgkqxujgzrtyhe = 0 ; int epdsrnbzmdoblxwfznsb = 200 ; while ( ( dhgbumjgkqxujgzrtyhe ++ ) < epdsrnbzmdoblxwfznsb ) { java.net.Socket clientConnection = s . accept () ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; } <s> More bug fixes  added identifier  scrapped stock market
fix_before_refactoring: { int i = 0 ; int maxConnections = 200 ; byte id = 1 ; while ( ( i ++ ) < maxConnections ) { java.net.Socket clientConnection = s . accept () ; id ++ ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData , id ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; }
fix_after_refactoring: { int dhgbumjgkqxujgzrtyhe = 0 ; int epdsrnbzmdoblxwfznsb = 200 ; byte id = 1 ; while ( ( dhgbumjgkqxujgzrtyhe ++ ) < epdsrnbzmdoblxwfznsb ) { java.net.Socket clientConnection = s . accept () ; id ++ ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData , id ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; }
× fix_prediction_before: { int i = 0 ; int maxConnections = 200 ; while ( ( i ++ ) < maxConnections ) { java.net.Socket clientConnection = s . accept () ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; }
× fix_prediction_after: { int dhgbumjgkqxujgzrtyhe = 0 ; while ( ( dhgbumjgkqxujgzrtyhe ++ ) < epdsrnbzmdoblxwfznsb ) { java.net.Socket clientConnection = s . accept () ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; }

line_index: 723
bug_before_refactoring: private source.Node < T > find ( T value , source.Node < T > node ) { if ( node == null ) { return null ; } int comparison = value . compareTo ( node.value ) ; if ( comparison == 0 ) { return node ; } else if ( comparison > 0 ) { return find ( value , node.rightChild ) ; } else { return find ( value , node.leftChild ) ; } } <s> private source.Node < T > find ( T value , source.Node < T > node ) { if ( node == null ) { return null ; } int comparison = value . compareTo ( node.value ) ; if ( comparison == 0 ) { return node ; } else if ( comparison > 0 ) { return find ( value , node.rightChild ) ; } else { return find ( value , node.leftChild ) ; } } <s> Fixed some issues and added new tests
bug_after_refactoring: private source.Node < T > find ( T value , source.Node < T > node ) { if ( node == null ) { return null ; } int ekwlalvtkzkutawltast = value . compareTo ( node.value ) ; if ( ekwlalvtkzkutawltast == 0 ) { return node ; } else if ( ekwlalvtkzkutawltast > 0 ) { return find ( value , node.rightChild ) ; } else { return find ( value , node.leftChild ) ; } } <s> private source.Node < T > find ( T value , source.Node < T > node ) { if ( node == null ) { return null ; } int ekwlalvtkzkutawltast = value . compareTo ( node.value ) ; if ( ekwlalvtkzkutawltast == 0 ) { return node ; } else if ( ekwlalvtkzkutawltast > 0 ) { return find ( value , node.rightChild ) ; } else { return find ( value , node.leftChild ) ; } } <s> Fixed some issues and added new tests
fix_before_refactoring: private source.Node < T > find ( T key , source.Node < T > node ) { if ( node == null ) { return null ; } int comparison = key . compareTo ( node.key ) ; if ( comparison == 0 ) { return node ; } else if ( comparison > 0 ) { return find ( key , node.rightChild ) ; } else { return find ( key , node.leftChild ) ; } }
fix_after_refactoring: private source.Node < T > find ( T key , source.Node < T > node ) { if ( node == null ) { return null ; } int ekwlalvtkzkutawltast = key . compareTo ( node.key ) ; if ( ekwlalvtkzkutawltast == 0 ) { return node ; } else if ( ekwlalvtkzkutawltast > 0 ) { return find ( key , node.rightChild ) ; } else { return find ( key , node.leftChild ) ; } }
× fix_prediction_before: public source.Node < T > find ( T value , source.Node < T > node ) { if ( node == null ) { return null ; } int comparison = value . compareTo ( node.value ) ; if ( comparison == 0 ) { return node ; } else if ( comparison > 0 ) { return find ( value , node.rightChild ) ; } else { return find ( value , node.leftChild ) ; } }
× fix_prediction_after: public source.Node < T > find ( T value , source.Node < T > node ) { if ( node == null ) { return null ; } int ekwlalvtkzkutawltast = value . compareTo ( node.value ) ; if ( ekwlalvtkzkutawltast == 0 ) { return find ( value , node.rightChild ) ; } else { return find ( value , node.leftChild ) ; } }

line_index: 724
bug_before_refactoring: { super . onChanged () ; int childCount = getChildCount () ; for ( int i = childCount ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } <s> @ java.lang.Override public void onChanged () { super . onChanged () ; int childCount = getChildCount () ; for ( int i = childCount ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } <s> update to new gradle / android studio  bugfixes and cleanup
bug_after_refactoring: { super . onChanged () ; int rtmgnhdvwerilrkraekb = getChildCount () ; for ( int i = rtmgnhdvwerilrkraekb ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } <s> @ java.lang.Override public void onChanged () { super . onChanged () ; int rtmgnhdvwerilrkraekb = getChildCount () ; for ( int i = rtmgnhdvwerilrkraekb ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } <s> update to new gradle / android studio  bugfixes and cleanup
fix_before_refactoring: { super . onChanged () ; int childCount = getChildCount () ; if ( childCount < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ) { for ( int i = childCount ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } }
fix_after_refactoring: { super . onChanged () ; int rtmgnhdvwerilrkraekb = getChildCount () ; if ( rtmgnhdvwerilrkraekb < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ) { for ( int i = rtmgnhdvwerilrkraekb ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } }
× fix_prediction_before: { super . onChanged () ; int childCount = getChildCount () ; for ( int i = 0 ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } }
× fix_prediction_after: { super . onChanged () ; int rtmgnhdvwerilrkraekb = getChildCount () ; for ( int i = rtmgnhdvwerilrkraekb ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } }

line_index: 725
bug_before_refactoring: { boolean isLiterallyConnected = ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; final boolean isTimeGapConnected = ( ( this . timeGap () ) + ( another . timeGap () ) ) == 24 ; return isLiterallyConnected && isTimeGapConnected ; } <s> public boolean connectWith ( final com.kcht.parking.charge.timeline.Period another ) { boolean isLiterallyConnected = ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; final boolean isTimeGapConnected = ( ( this . timeGap () ) + ( another . timeGap () ) ) == 24 ; return isLiterallyConnected && isTimeGapConnected ; } <s> bugfix : correct 2000-2300 as night shift
bug_after_refactoring: { boolean jtendyjeguqrwtviimfw = ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; final boolean vtbjmvzsssfdzktiypaf = ( ( this . timeGap () ) + ( another . timeGap () ) ) == 24 ; return jtendyjeguqrwtviimfw && vtbjmvzsssfdzktiypaf ; } <s> public boolean connectWith ( final com.kcht.parking.charge.timeline.Period another ) { boolean jtendyjeguqrwtviimfw = ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; final boolean vtbjmvzsssfdzktiypaf = ( ( this . timeGap () ) + ( another . timeGap () ) ) == 24 ; return jtendyjeguqrwtviimfw && vtbjmvzsssfdzktiypaf ; } <s> bugfix : correct 2000-2300 as night shift
fix_before_refactoring: { return ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; }
fix_after_refactoring: { return ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; }
× fix_prediction_before: { boolean isLiterallyConnected = ( ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; return ( ( this . timeGap () ) + ( another . timeGap () ) ) == 24 ; }
× fix_prediction_after: { boolean jtendyjeguqrwtviimfw = ( ( ( this . endHour ) == ( another.startHour ) ) && ( ( this . endMinute ) == ( another.startMinute ) ) ) && ( ( this . startHour ) == ( another.endHour ) ) ) && ( ( this . startMinute ) == ( another.endMinute ) ) ; final boolean vtbjmvzsssfdzktiypaf = ( ( this . timeGap () ) + ( another . timeGap () ) ) == 24 ; return jtendyj�qrwtviimfw && vtbjmvzsssfdzktiypaf ; }

line_index: 726
bug_before_refactoring: public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int tmp = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { tmp = 1 ; } else { result [ i ] = arrayToRemoveFrom [ ( i + tmp ) ] ; } } return result ; } <s> public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int tmp = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { tmp = 1 ; } else { result [ i ] = arrayToRemoveFrom [ ( i + tmp ) ] ; } } return result ; } <s> Updated by fixing a bug with removeEntry()
bug_after_refactoring: public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int kymskiecwbzmqxukgzco = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { kymskiecwbzmqxukgzco = 1 ; } else { result [ i ] = arrayToRemoveFrom [ ( i + kymskiecwbzmqxukgzco ) ] ; } } return result ; } <s> public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int kymskiecwbzmqxukgzco = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { kymskiecwbzmqxukgzco = 1 ; } else { result [ i ] = arrayToRemoveFrom [ ( i + kymskiecwbzmqxukgzco ) ] ; } } return result ; } <s> Updated by fixing a bug with removeEntry()
fix_before_refactoring: public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int tmp = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { tmp = 1 ; } result [ i ] = arrayToRemoveFrom [ ( i + tmp ) ] ; } return result ; }
fix_after_refactoring: public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int kymskiecwbzmqxukgzco = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { kymskiecwbzmqxukgzco = 1 ; } result [ i ] = arrayToRemoveFrom [ ( i + kymskiecwbzmqxukgzco ) ] ; } return result ; }
× fix_prediction_before: public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int tmp = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { tmp = 1 ; } else { result [ i ] = arrayToRemoveFrom [ ( i + tmp ) ] ; } } return result ; }
× fix_prediction_after: public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int kymskiecwbzmqxukgzco = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { kymskiecwbzmqxukgzco = 1 ; } else { result [ i ] = arrayToRemoveFrom [ ( i + kymskiecwbzmqxukgzco ) ] ; } } return result ; }

line_index: 727
bug_before_refactoring: if ( ( compassDirection ) == null ) { calculateNextTarget ( true ) ; } else { int distanceSquared = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double distance = java.lang.Math . sqrt ( distanceSquared ) ; if ( distance < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } } <s> @ java.lang.Override public team379.pathfinding.PathFindResult move ( battlecode.common.RobotController rc ) throws java.lang.Exception { if ( ( compassDirection ) == null ) { calculateNextTarget ( true ) ; } else { int distanceSquared = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double distance = java.lang.Math . sqrt ( distanceSquared ) ; if ( distance < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } } return super . move ( rc ) ; } <s> Fixed some bugs. This thing is still very broken though...
bug_after_refactoring: if ( ( compassDirection ) == null ) { calculateNextTarget ( true ) ; } else { int txukbxmblqmnbwyjfbod = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double bnsgnklkpzqnirmsrjfi = java.lang.Math . sqrt ( txukbxmblqmnbwyjfbod ) ; if ( bnsgnklkpzqnirmsrjfi < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } } <s> @ java.lang.Override public team379.pathfinding.PathFindResult move ( battlecode.common.RobotController rc ) throws java.lang.Exception { if ( ( compassDirection ) == null ) { calculateNextTarget ( true ) ; } else { int txukbxmblqmnbwyjfbod = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double bnsgnklkpzqnirmsrjfi = java.lang.Math . sqrt ( txukbxmblqmnbwyjfbod ) ; if ( bnsgnklkpzqnirmsrjfi < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } } return super . move ( rc ) ; } <s> Fixed some bugs. This thing is still very broken though...
fix_before_refactoring: if ( ( ( compassDirection ) == null ) || ( ( getTarget () ) == null ) ) { calculateNextTarget ( true ) ; } else { int distanceSquared = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double distance = java.lang.Math . sqrt ( distanceSquared ) ; if ( distance < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } }
fix_after_refactoring: if ( ( ( compassDirection ) == null ) || ( ( getTarget () ) == null ) ) { calculateNextTarget ( true ) ; } else { int txukbxmblqmnbwyjfbod = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double bnsgnklkpzqnirmsrjfi = java.lang.Math . sqrt ( txukbxmblqmnbwyjfbod ) ; if ( bnsgnklkpzqnirmsrjfi < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } }
× fix_prediction_before: if ( ( compassDirection ) == null ) { calculateNextTarget ( true ) ; } else { int distanceSquared = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double distance = java.lang.Math . sqrt ( distanceSquared ) ; if ( distance < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } }
× fix_prediction_after: if ( ( compassDirection ) == null ) { calculateNextTarget ( true ) ; } else { int txukbxmblqmnbwyjfbod = getTarget () . distanceSquaredTo ( rc . getLocation () ) ; double bnsgnklkpzqnirmsrjfi = java.lang.Math . sqrt ( txukbxmblqmnbwyjfbod ) ; if ( bnsgnklkpzqnirmedrjfi < ( team379.pathfinding.Orbiter.DISTANCE_THRESHOLD ) ) { calculateNextTarget ( true ) ; } }

line_index: 729
bug_before_refactoring: private static int getNumberOfWeeksOfYear ( int year ) { com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.YEAR , year ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int ordinalDay = com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_YEAR ) ; int weekDay = ( com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( ordinalDay - weekDay ) + 10 ) / 7 ; } <s> private static int getNumberOfWeeksOfYear ( int year ) { com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.YEAR , year ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int ordinalDay = com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_YEAR ) ; int weekDay = ( com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( ordinalDay - weekDay ) + 10 ) / 7 ; } <s> Version 1.2.5 (Important update: Bugfixes)
bug_after_refactoring: private static int getNumberOfWeeksOfYear ( int year ) { com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.YEAR , year ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int jfgdylbymzoxzeomrzak = com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_YEAR ) ; int yyqlqitleajqhzmgamjl = ( com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( jfgdylbymzoxzeomrzak - yyqlqitleajqhzmgamjl ) + 10 ) / 7 ; } <s> private static int getNumberOfWeeksOfYear ( int year ) { com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.YEAR , year ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int jfgdylbymzoxzeomrzak = com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_YEAR ) ; int yyqlqitleajqhzmgamjl = ( com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( jfgdylbymzoxzeomrzak - yyqlqitleajqhzmgamjl ) + 10 ) / 7 ; } <s> Version 1.2.5 (Important update: Bugfixes)
fix_before_refactoring: private static int getNumberOfWeeksOfYear ( int year ) { java.util.Calendar c = java.util.Calendar . getInstance () ; c . set ( java.util.Calendar.YEAR , year ) ; c . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; c . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int ordinalDay = c . get ( java.util.Calendar.DAY_OF_YEAR ) ; int weekDay = ( c . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( ordinalDay - weekDay ) + 10 ) / 7 ; }
fix_after_refactoring: private static int getNumberOfWeeksOfYear ( int year ) { java.util.Calendar c = java.util.Calendar . getInstance () ; c . set ( java.util.Calendar.YEAR , year ) ; c . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; c . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int jfgdylbymzoxzeomrzak = c . get ( java.util.Calendar.DAY_OF_YEAR ) ; int yyqlqitleajqhzmgamjl = ( c . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( jfgdylbymzoxzeomrzak - yyqlqitleajqhzmgamjl ) + 10 ) / 7 ; }
× fix_prediction_before: public static int getNumberOfWeeksOfYear ( final int year ) { com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.YEAR , year ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int ordinalDay = com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_YEAR ) ; int weekDay = ( com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) - 1 ; return ( ( ordinalDay - weekDay ) + 10 ) / 7 ; }
× fix_prediction_after: public static int getNumberOfWeeksOfYear ( final int year ) { com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.YEAR , year ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.MONTH , java.util.Calendar.DECEMBER ) ; com.timodenk.gswnstupla.StuplaControl.calendar . set ( java.util.Calendar.DAY_OF_MONTH , 31 ) ; int jfgdylbymzoxzeomrzak = com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_YEAR ) ; int yyqlqitleajqhzmgamjl = ( com.timodenk.gswnstupla.StuplaControl.calendar . get ( java.util.Calendar.DAY_OF_WEEK ) ) + 1 ;

line_index: 732
bug_before_refactoring: { new us.nineworlds.serenity.core.services.WatchedVideoAsyncTask () . execute ( videoId ) ; boolean showOSD = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( showOSD ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } } <s> protected void setMetaData () { new us.nineworlds.serenity.core.services.WatchedVideoAsyncTask () . execute ( videoId ) ; boolean showOSD = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( showOSD ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } } <s> Issue #197: remove extraneous watch status updater  Thanks to @alonalbert for the fix.  This removes an extraneous update of the Watched indicator that was left over from some early spikes around the video player.
bug_after_refactoring: { new us.nineworlds.serenity.core.services.WatchedVideoAsyncTask () . execute ( videoId ) ; boolean zvaxvpxghdhkughvyobq = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( zvaxvpxghdhkughvyobq ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } } <s> protected void setMetaData () { new us.nineworlds.serenity.core.services.WatchedVideoAsyncTask () . execute ( videoId ) ; boolean zvaxvpxghdhkughvyobq = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( zvaxvpxghdhkughvyobq ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } } <s> Issue #197: remove extraneous watch status updater  Thanks to @alonalbert for the fix.  This removes an extraneous update of the Watched indicator that was left over from some early spikes around the video player.
fix_before_refactoring: { boolean showOSD = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( showOSD ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } }
fix_after_refactoring: { boolean zvaxvpxghdhkughvyobq = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( zvaxvpxghdhkughvyobq ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } }
× fix_prediction_before: { new us.nineworlds.serenity.core.services.WatchedVideoAsyncTask () . execute ( videoId ) ; boolean showOSD = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( showOSD ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } }
× fix_prediction_after: { new us.nineworlds.serenity.core.services.WatchedVideoAsyncTask () . execute ( videoId ) ; boolean zvaxvpxghdhkughvyobq = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( zvaxvpxghdhkughvyobq ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } }

line_index: 733
bug_before_refactoring: { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { inputCheck = false ; } } <s> protected static java.lang.String getRoomName ( java.util.ArrayList < main.java.com.marist.mscs721.Room > rooms ) { boolean inputCheck = false ; java.lang.String test = "" ; while ( ! inputCheck ) { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { inputCheck = false ; } } return test ; } <s> Testing update  Thanks to sudheer for the updates on my code. Fixes the add room and scheduling room issues.
bug_after_refactoring: { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { lznybmuiwybccrozxhpr = false ; } } <s> protected static java.lang.String getRoomName ( java.util.ArrayList < main.java.com.marist.mscs721.Room > rooms ) { boolean inputCheck = false ; java.lang.String test = "" ; while ( ! inputCheck ) { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { lznybmuiwybccrozxhpr = false ; } } return test ; } <s> Testing update  Thanks to sudheer for the updates on my code. Fixes the add room and scheduling room issues.
fix_before_refactoring: { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; java.lang.System.out . println ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { inputCheck = true ; } }
fix_after_refactoring: { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; java.lang.System.out . println ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { lznybmuiwybccrozxhpr = true ; } }
× fix_prediction_before: { test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { inputCheck = false ; } }
× fix_prediction_after: { test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { lznybmuiwybccrozxhpr = false ; } else { lznybmuiwybccrozxhpr = false ; } }

line_index: 734
bug_before_refactoring: void dependentStopped () { assert ! ( java.lang.Thread . holdsLock ( this ) ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean leavingRestState = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( leavingRestState ) ; } doExecute ( tasks ) ; } <s> void dependentStopped () { assert ! ( java.lang.Thread . holdsLock ( this ) ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean leavingRestState = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( leavingRestState ) ; } doExecute ( tasks ) ; } <s> [MSC-155] Fix problem where lock is not held during dependent-stop propagation  which may allow an inconsistency in counts
bug_after_refactoring: void dependentStopped () { assert ! ( java.lang.Thread . holdsLock ( this ) ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean ntmecnhdeaptdfctpzsa = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( ntmecnhdeaptdfctpzsa ) ; } doExecute ( tasks ) ; } <s> void dependentStopped () { assert ! ( java.lang.Thread . holdsLock ( this ) ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean ntmecnhdeaptdfctpzsa = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( ntmecnhdeaptdfctpzsa ) ; } doExecute ( tasks ) ; } <s> [MSC-155] Fix problem where lock is not held during dependent-stop propagation  which may allow an inconsistency in counts
fix_before_refactoring: java.util.ArrayList < java.lang.Runnable > dependentStopped () { assert java.lang.Thread . holdsLock ( this ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean leavingRestState = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return new java.util.ArrayList < java.lang.Runnable > () ; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( leavingRestState ) ; } return tasks ; }
fix_after_refactoring: java.util.ArrayList < java.lang.Runnable > dependentStopped () { assert java.lang.Thread . holdsLock ( this ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean ntmecnhdeaptdfctpzsa = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return new java.util.ArrayList < java.lang.Runnable > () ; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( ntmecnhdeaptdfctpzsa ) ; } return tasks ; }
× fix_prediction_before: void dependentStopped () { assert ! ( java.lang.Thread . holdsLock ( this ) ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean leavingRestState = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( leavingRestState ) ; } doExecute ( tasks ) ; }
× fix_prediction_after: void dependentStopped () { assert ! ( java.lang.Thread . holdsLock ( this ) ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean ntmecnhdeaptdfctpzsa = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( ntmecnhdeaptdfctpzsa ) ; } doExecute ( tasks ) ; }

line_index: 735
bug_before_refactoring: { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long postID = op . save () ; logic.Post post = new logic.Post ( postID ) ; assertEquals ( postID , post.postID ) ; } <s> @ org.junit.Test public void testPostConstructorDB () { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long postID = op . save () ; logic.Post post = new logic.Post ( postID ) ; assertEquals ( postID , post.postID ) ; } <s> Try to fix the errors in Course  Stop hardcoding the keys. I claned up the DB info. My junit wont run  so gl.
bug_after_refactoring: { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long opvkdniqatvzehbthtuw = op . save () ; logic.Post post = new logic.Post ( opvkdniqatvzehbthtuw ) ; assertEquals ( opvkdniqatvzehbthtuw , post.opvkdniqatvzehbthtuw ) ; } <s> @ org.junit.Test public void testPostConstructorDB () { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long opvkdniqatvzehbthtuw = op . save () ; logic.Post post = new logic.Post ( opvkdniqatvzehbthtuw ) ; assertEquals ( opvkdniqatvzehbthtuw , post.opvkdniqatvzehbthtuw ) ; } <s> Try to fix the errors in Course  Stop hardcoding the keys. I claned up the DB info. My junit wont run  so gl.
fix_before_refactoring: { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long postID = op . save () ; logic.Post post = new logic.Post ( postID ) ; assertEquals ( postID , post.postID ) ; op . delete () ; }
fix_after_refactoring: { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long opvkdniqatvzehbthtuw = op . save () ; logic.Post post = new logic.Post ( opvkdniqatvzehbthtuw ) ; assertEquals ( opvkdniqatvzehbthtuw , post.opvkdniqatvzehbthtuw ) ; op . delete () ; }
× fix_prediction_before: { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long postID = op . save () ; logic.Post post = new logic.Post ( postID ) ; assertEquals ( postID , post.postID ) ; }
× fix_prediction_after: { java.lang.String title = "Please get me out of the db!" ; java.lang.String text = "All I want is to be with you!" ; logic.Post op = new logic.Post ( title , text ) ; long opvkdniqatvzehbthtuw = op . save () ; logic.Post post = new logic.Post ( opvkdniqatvzehbthtuw ) ; assertEquals ( opvkdniqatvzehbthtuw , post.opvkdniqatvzehbthtuw ) ; }

line_index: 737
bug_before_refactoring: { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( ( candidate.version.versionCode ) <= bestVersionCode ) { continue; } if ( matcher . isCompatible ( candidate.filter ) ) { continue; } bestDist = candidate ; } <s> @ org.jetbrains.annotations.Nullable public io.github.eterverda.playless.common.Dist bestMyReplacement ( io.github.eterverda.playless.common.Dist . . . candidates ) { int bestVersionCode = versionCode ; io.github.eterverda.playless.common.Dist bestDist = null ; for ( io.github.eterverda.playless.common.Dist candidate : candidates ) { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( ( candidate.version.versionCode ) <= bestVersionCode ) { continue; } if ( matcher . isCompatible ( candidate.filter ) ) { continue; } bestDist = candidate ; } return bestDist ; } <s> Fixed error in condition in DistReplacementPicker
bug_after_refactoring: { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( ( candidate.version.versionCode ) <= axdmkptffddjsbyfofrh ) { continue; } if ( matcher . isCompatible ( candidate.filter ) ) { continue; } bestDist = candidate ; } <s> @ org.jetbrains.annotations.Nullable public io.github.eterverda.playless.common.Dist bestMyReplacement ( io.github.eterverda.playless.common.Dist . . . candidates ) { int bestVersionCode = versionCode ; io.github.eterverda.playless.common.Dist bestDist = null ; for ( io.github.eterverda.playless.common.Dist candidate : candidates ) { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( ( candidate.version.versionCode ) <= axdmkptffddjsbyfofrh ) { continue; } if ( matcher . isCompatible ( candidate.filter ) ) { continue; } bestDist = candidate ; } return bestDist ; } <s> Fixed error in condition in DistReplacementPicker
fix_before_refactoring: { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( ! ( matcher . isCompatible ( candidate.filter ) ) ) { continue; } if ( ( candidate.version.versionCode ) <= bestVersionCode ) { continue; } bestDist = candidate ; }
fix_after_refactoring: { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( ! ( matcher . isCompatible ( candidate.filter ) ) ) { continue; } if ( ( candidate.version.versionCode ) <= axdmkptffddjsbyfofrh ) { continue; } bestDist = candidate ; }
× fix_prediction_before: { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( matcher . isCompatible ( candidate.filter ) ) { continue; } bestDist = candidate ; }
× fix_prediction_after: { if ( ! ( candidate.applicationId . equals ( applicationId ) ) ) { continue; } if ( matcher . isCompatible ( candidate.filter ) ) { continue; } bestDist = candidate ; }

line_index: 738
bug_before_refactoring: private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings != null ) { for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int randomPrivatePort = generateRandomPrivatePort () ; portBinding . setBound ( randomPrivatePort ) ; } } } <s> private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings != null ) { for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int randomPrivatePort = generateRandomPrivatePort () ; portBinding . setBound ( randomPrivatePort ) ; } } } <s> fixes reviewable issues
bug_after_refactoring: private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings != null ) { for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int ubojwwkwpjrzwecijjdz = generateRandomPrivatePort () ; portBinding . setBound ( ubojwwkwpjrzwecijjdz ) ; } } } <s> private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings != null ) { for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int ubojwwkwpjrzwecijjdz = generateRandomPrivatePort () ; portBinding . setBound ( ubojwwkwpjrzwecijjdz ) ; } } } <s> fixes reviewable issues
fix_before_refactoring: private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings == null ) { return; } for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int randomPrivatePort = generateRandomPrivatePort () ; portBinding . setBound ( randomPrivatePort ) ; } }
fix_after_refactoring: private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings == null ) { return; } for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int ubojwwkwpjrzwecijjdz = generateRandomPrivatePort () ; portBinding . setBound ( ubojwwkwpjrzwecijjdz ) ; } }
× fix_prediction_before: private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings != null ) { for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int randomPrivatePort = generateRandomPrivatePort () ; portBinding . setBound ( randomPrivatePort ) ; } } }
× fix_prediction_after: private void adaptPortBindingToParallelRun ( org.arquillian.cube.docker.impl.client.config.CubeContainer cubeContainer ) { final java.util.Collection < org.arquillian.cube.docker.impl.client.config.PortBinding > portBindings = cubeContainer . getPortBindings () ; if ( portBindings != null ) { for ( org.arquillian.cube.docker.impl.client.config.PortBinding portBinding : portBindings ) { final int ubojwwkwpjrzwecijjdz = generateRandomPrivatePort () ; portBinding . setBound ( ubojwwkwpjrzwecijjdz ) ; } } }

line_index: 739
bug_before_refactoring: { int index = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( index < 0 ) { decrypted += letter ; continue; } int i = ( index - ( info . getRightShift () ) ) % 26 ; decrypted += com.soesec.util.Alphabet . At ( i ) ; } <s> @ java.lang.Override public java.lang.String decode ( java.lang.String plain ) { java.lang.String decrypted = "" ; for ( char letter : plain . toUpperCase () . toCharArray () ) { int index = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( index < 0 ) { decrypted += letter ; continue; } int i = ( index - ( info . getRightShift () ) ) % 26 ; decrypted += com.soesec.util.Alphabet . At ( i ) ; } return decrypted ; } <s> BugFix in Ceaser
bug_after_refactoring: { int xidfwkdbsoyabjmcfsxg = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( xidfwkdbsoyabjmcfsxg < 0 ) { decrypted += letter ; continue; } int bbuxlormolagnboktwtu = ( xidfwkdbsoyabjmcfsxg - ( info . getRightShift () ) ) % 26 ; decrypted += com.soesec.util.Alphabet . At ( bbuxlormolagnboktwtu ) ; } <s> @ java.lang.Override public java.lang.String decode ( java.lang.String plain ) { java.lang.String decrypted = "" ; for ( char letter : plain . toUpperCase () . toCharArray () ) { int xidfwkdbsoyabjmcfsxg = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( xidfwkdbsoyabjmcfsxg < 0 ) { decrypted += letter ; continue; } int bbuxlormolagnboktwtu = ( xidfwkdbsoyabjmcfsxg - ( info . getRightShift () ) ) % 26 ; decrypted += com.soesec.util.Alphabet . At ( bbuxlormolagnboktwtu ) ; } return decrypted ; } <s> BugFix in Ceaser
fix_before_refactoring: { int index = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( index < 0 ) { decrypted += letter ; continue; } int i = index - ( info . getRightShift () ) ; if ( i < 0 ) { i = 26 + i ; } i = i % 26 ; decrypted += com.soesec.util.Alphabet . At ( i ) ; }
fix_after_refactoring: { int xidfwkdbsoyabjmcfsxg = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( xidfwkdbsoyabjmcfsxg < 0 ) { decrypted += letter ; continue; } int bbuxlormolagnboktwtu = xidfwkdbsoyabjmcfsxg - ( info . getRightShift () ) ; if ( bbuxlormolagnboktwtu < 0 ) { bbuxlormolagnboktwtu = 26 + bbuxlormolagnboktwtu ; } bbuxlormolagnboktwtu = bbuxlormolagnboktwtu % 26 ; decrypted += com.soesec.util.Alphabet . At ( bbuxlormolagnboktwtu ) ; }
× fix_prediction_before: { int index = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( index < 0 ) { decrypted += letter ; } int i = ( index - ( info . getRightShift () ) ) % 26 ; decrypted += com.soesec.util.Alphabet . At ( i ) ; }
× fix_prediction_after: { int xidfwkdbsoyabjmcfsxg = com.soesec.util.Alphabet . IndexOf ( letter ) ; if ( xidfwkdbsoyabjmcfsxg < 0 ) { decrypted += letter ; continue; } int bbuxlormolagnboktwtu = ( xidfwkdbsoyabjmcfsxg - ( info . getRightShift () ) ) % 26 ; decrypted += com.soesec.util.Alphabet . At ( bbuxlormolagnboktwtu ) ; }

line_index: 740
bug_before_refactoring: if ( color == 0 ) y = ( this . y ) - 1 ; else y = ( this . y ) + 1 ; <s> public domain.Coordenada getEsquerra ( int color ) throws java.lang.Exception { int x = ( this . x ) + 1 ; int y ; if ( color == 0 ) y = ( this . y ) - 1 ; else y = ( this . y ) + 1 ; return new domain.Coordenada ( x , y ) ; } <s> kill movement solved errors
bug_after_refactoring: if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; <s> public domain.Coordenada getEsquerra ( int color ) throws java.lang.Exception { int x = ( this . x ) + 1 ; int y ; if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; return new domain.Coordenada ( x , y ) ; } <s> kill movement solved errors
fix_before_refactoring: if ( color == 0 ) y = ( this . y ) + 1 ; else y = ( this . y ) - 1 ;
fix_after_refactoring: if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) - 1 ;
× fix_prediction_before: if ( color < 0 ) y = ( this . y ) - 1 ; else y = ( this . y ) + 1 ;
× fix_prediction_after: if ( color == 0 ) zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ; else zwgpjfgzvubjmcpsbkec = ( this . zwgpjfgzvubjmcpsbkec ) + 1 ;

line_index: 741
bug_before_refactoring: { int height = ( ( int ) ( scaleY ( b ) ) ) ; y -= height ; x += binWidth ; g . fill3DRect ( x , y , binWidth , height , true ) ; y = ( getHeight () ) - ( BOTTOM_MARGIN ) ; } <s> private void drawBins ( java.awt.Graphics g ) { g . setColor ( java.awt.Color.GRAY ) ; int x = LEFT_MARGIN ; int y = ( getHeight () ) - ( BOTTOM_MARGIN ) ; for ( int b : bins ) { int height = ( ( int ) ( scaleY ( b ) ) ) ; y -= height ; x += binWidth ; g . fill3DRect ( x , y , binWidth , height , true ) ; y = ( getHeight () ) - ( BOTTOM_MARGIN ) ; } } <s> Fixed an error with the x positioning of the graph and commented the code
bug_after_refactoring: { int xaonnvwboxljnrztbjyi = ( ( int ) ( scaleY ( b ) ) ) ; nbgjxvbmcrurqrhiajgc -= xaonnvwboxljnrztbjyi ; sqxkplapjohnrvaqxbzp += binWidth ; g . fill3DRect ( sqxkplapjohnrvaqxbzp , nbgjxvbmcrurqrhiajgc , binWidth , xaonnvwboxljnrztbjyi , true ) ; nbgjxvbmcrurqrhiajgc = ( getHeight () ) - ( BOTTOM_MARGIN ) ; } <s> private void drawBins ( java.awt.Graphics g ) { g . setColor ( java.awt.Color.GRAY ) ; int x = LEFT_MARGIN ; int y = ( getHeight () ) - ( BOTTOM_MARGIN ) ; for ( int b : bins ) { int xaonnvwboxljnrztbjyi = ( ( int ) ( scaleY ( b ) ) ) ; nbgjxvbmcrurqrhiajgc -= xaonnvwboxljnrztbjyi ; sqxkplapjohnrvaqxbzp += binWidth ; g . fill3DRect ( sqxkplapjohnrvaqxbzp , nbgjxvbmcrurqrhiajgc , binWidth , xaonnvwboxljnrztbjyi , true ) ; nbgjxvbmcrurqrhiajgc = ( getHeight () ) - ( BOTTOM_MARGIN ) ; } } <s> Fixed an error with the x positioning of the graph and commented the code
fix_before_refactoring: { int height = ( ( int ) ( scaleY ( b ) ) ) ; y -= height ; g . fill3DRect ( x , y , binWidth , height , true ) ; x += binWidth ; y = ( getHeight () ) - ( BOTTOM_MARGIN ) ; }
fix_after_refactoring: { int xaonnvwboxljnrztbjyi = ( ( int ) ( scaleY ( b ) ) ) ; nbgjxvbmcrurqrhiajgc -= xaonnvwboxljnrztbjyi ; g . fill3DRect ( sqxkplapjohnrvaqxbzp , nbgjxvbmcrurqrhiajgc , binWidth , xaonnvwboxljnrztbjyi , true ) ; sqxkplapjohnrvaqxbzp += binWidth ; nbgjxvbmcrurqrhiajgc = ( getHeight () ) - ( BOTTOM_MARGIN ) ; }
× fix_prediction_before: { int height = ( ( int ) ( scaleY ( b ) ) ) ; y -= height ; x += binWidth ; g . fill3DRect ( x , y , binWidth , height , true ) ; y = ( getHeight () ) - ( BOTTOM_MARGIN ) ; }
× fix_prediction_after: { int xaonnvwboxljnrztbjyi = ( ( int ) ( scaleY ( b ) ) ) ; nbgjxvbmcrurqrhiajgc -= xaonnvwboxljnrztbjyi ; sqxkplapjohnrvaqxbzp += binWidth ; g . fill3DRect ( sqxkplapjohnrvaqxbzp , nbgjxvbmcrurqrhiajgc , binWidth , xaonnvwboxljnrztbjyi , true ) ; }

line_index: 742
bug_before_refactoring: public void myTick ( long mils ) { int minsRemaining = ( ( int ) ( mils ) ) / 60000 ; int secsRemaining = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( minsRemaining ) ) + ":" ) + ( java.lang.String . format ( "%02d" , secsRemaining ) ) ; timeRemaining . setText ( time ) ; timeInMilis = mils ; } <s> public void myTick ( long mils ) { int minsRemaining = ( ( int ) ( mils ) ) / 60000 ; int secsRemaining = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( minsRemaining ) ) + ":" ) + ( java.lang.String . format ( "%02d" , secsRemaining ) ) ; timeRemaining . setText ( time ) ; timeInMilis = mils ; } <s> Fixed bug with timer restarting when paused and resuming
bug_after_refactoring: public void myTick ( long mils ) { int ljtjmypdcbodjmokyuia = ( ( int ) ( mils ) ) / 60000 ; int cvqbrnjgfmrxqbovxzsh = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( ljtjmypdcbodjmokyuia ) ) + ":" ) + ( java.lang.String . format ( "%02d" , cvqbrnjgfmrxqbovxzsh ) ) ; timeRemaining . setText ( time ) ; timeInMilis = mils ; } <s> public void myTick ( long mils ) { int ljtjmypdcbodjmokyuia = ( ( int ) ( mils ) ) / 60000 ; int cvqbrnjgfmrxqbovxzsh = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( ljtjmypdcbodjmokyuia ) ) + ":" ) + ( java.lang.String . format ( "%02d" , cvqbrnjgfmrxqbovxzsh ) ) ; timeRemaining . setText ( time ) ; timeInMilis = mils ; } <s> Fixed bug with timer restarting when paused and resuming
fix_before_refactoring: public void myTick ( long mils ) { if ( ( mils % 1000 ) == 0 ) { int minsRemaining = ( ( int ) ( mils ) ) / 60000 ; int secsRemaining = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( minsRemaining ) ) + ":" ) + ( java.lang.String . format ( "%02d" , secsRemaining ) ) ; timeRemaining . setText ( time ) ; } timeInMilis = mils ; }
fix_after_refactoring: public void myTick ( long mils ) { if ( ( mils % 1000 ) == 0 ) { int ljtjmypdcbodjmokyuia = ( ( int ) ( mils ) ) / 60000 ; int cvqbrnjgfmrxqbovxzsh = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( ljtjmypdcbodjmokyuia ) ) + ":" ) + ( java.lang.String . format ( "%02d" , cvqbrnjgfmrxqbovxzsh ) ) ; timeRemaining . setText ( time ) ; } timeInMilis = mils ; }
× fix_prediction_before: public void myTick ( long mils ) { int minsRemaining = ( ( int ) ( mils ) ) / 60000 ; int secsRemaining = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( minsRemaining ) ) + ":" ) + ( java.lang.String . format ( "%02d" , secsRemaining ) ) ; timeRemaining . setText ( time ) ; timeInMilis = mils ; }
× fix_prediction_after: public void myTick ( long mils ) { int ljtjmypdcbodjmokyuia = ( ( int ) ( mils ) ) / 60000 ; int cvqbrnjgfmrxqbovxzsh = ( ( ( int ) ( mils ) ) / 1000 ) % 60 ; java.lang.String time = ( ( java.lang.Integer . toString ( ljtjmypdcbodjmokyuia ) ) + ":" ) + ( java.lang.String . format ( "%02d" , cvqbrnjgfmrxqbovxzsh ) ) ; timeRemaining . setText ( time ) ; timeInMilis = mils ; }

line_index: 743
bug_before_refactoring: { java.lang.String contents = "" ; crazycalculator.datastructure.Link < T > currentLink = firstLink ; int index = 0 ; while ( ( currentLink . getData () ) != null ) { contents = ( ( ( ( contents + "[ " ) + index ) + " ]\t= " ) + ( currentLink . getData () ) ) + "\n" ; index ++ ; currentLink = currentLink . getNextLink () ; } return contents ; } <s> public java.lang.String displayContents () { java.lang.String contents = "" ; crazycalculator.datastructure.Link < T > currentLink = firstLink ; int index = 0 ; while ( ( currentLink . getData () ) != null ) { contents = ( ( ( ( contents + "[ " ) + index ) + " ]\t= " ) + ( currentLink . getData () ) ) + "\n" ; index ++ ; currentLink = currentLink . getNextLink () ; } return contents ; } <s> Added visualization for evaluating postfix notation and fixed some bug fixes.
bug_after_refactoring: { java.lang.String contents = "" ; crazycalculator.datastructure.Link < T > currentLink = firstLink ; int eghhavzzvjydshzdpbhw = 0 ; while ( ( currentLink . getData () ) != null ) { contents = ( ( ( ( contents + "[ " ) + eghhavzzvjydshzdpbhw ) + " ]\t= " ) + ( currentLink . getData () ) ) + "\n" ; eghhavzzvjydshzdpbhw ++ ; currentLink = currentLink . getNextLink () ; } return contents ; } <s> public java.lang.String displayContents () { java.lang.String contents = "" ; crazycalculator.datastructure.Link < T > currentLink = firstLink ; int eghhavzzvjydshzdpbhw = 0 ; while ( ( currentLink . getData () ) != null ) { contents = ( ( ( ( contents + "[ " ) + eghhavzzvjydshzdpbhw ) + " ]\t= " ) + ( currentLink . getData () ) ) + "\n" ; eghhavzzvjydshzdpbhw ++ ; currentLink = currentLink . getNextLink () ; } return contents ; } <s> Added visualization for evaluating postfix notation and fixed some bug fixes.
fix_before_refactoring: { java.lang.String contents = "" ; int index = 0 ; while ( index < ( size () ) ) { T data = get ( index ) ; if ( data != null ) { contents = ( ( ( ( contents + "[ " ) + index ) + " ]\t= " ) + data ) + "\n" ; } index ++ ; } return contents ; }
fix_after_refactoring: { java.lang.String contents = "" ; int eghhavzzvjydshzdpbhw = 0 ; while ( eghhavzzvjydshzdpbhw < ( size () ) ) { T data = get ( eghhavzzvjydshzdpbhw ) ; if ( data != null ) { contents = ( ( ( ( contents + "[ " ) + eghhavzzvjydshzdpbhw ) + " ]\t= " ) + data ) + "\n" ; } eghhavzzvjydshzdpbhw ++ ; } return contents ; }
× fix_prediction_before: { java.lang.String contents = "" ; crazycalculator.datastructure.Link < T > currentLink = firstLink ; int index = 0 ; while ( ( currentLink . getData () ) != null ) { contents = ( ( ( ( contents + "[ " ) + index ) + " ]\t= " ) + ( currentLink . getData () ) ) + "\n" ; index ++ ; currentLink = currentLink . getNextLink () ; } return contents ; }
× fix_prediction_after: { java.lang.String contents = "" ; crazycalculator.datastructure.Link < T > currentLink = firstLink ; int eghhavzzvjydshzdpbhw = 0 ; while ( ( currentLink . getData () ) != null ) { contents = ( ( ( ( contents + "[ " ) + eghhavzzvjydshzdpbhw ) + " ]\t= " ) + ( currentLink . getData () ) ) + "\n" ; eghhavzzvjydshzdpbhw ++ ; currentLink = currentLink . getNextLink () ; } return contents ; }

line_index: 744
bug_before_refactoring: { neuralNetwork.InputPerceptron testPerceptron = new neuralNetwork.InputPerceptron ( 0 ) ; final double testInput = 1.0 ; testPerceptron . setInput ( testInput ) ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( testInput , testPerceptron . output () , DELTA ) ; } <s> @ org.junit.Test public void doesNotAdjustToError () { neuralNetwork.InputPerceptron testPerceptron = new neuralNetwork.InputPerceptron ( 0 ) ; final double testInput = 1.0 ; testPerceptron . setInput ( testInput ) ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( testInput , testPerceptron . output () , DELTA ) ; } <s> Fixed error in InputPerceptronTest
bug_after_refactoring: { neuralNetwork.InputPerceptron testPerceptron = new neuralNetwork.InputPerceptron ( 0 ) ; final double cxmnpspmyzagctnwfmtc = 1.0 ; testPerceptron . setInput ( cxmnpspmyzagctnwfmtc ) ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( cxmnpspmyzagctnwfmtc , testPerceptron . output () , DELTA ) ; } <s> @ org.junit.Test public void doesNotAdjustToError () { neuralNetwork.InputPerceptron testPerceptron = new neuralNetwork.InputPerceptron ( 0 ) ; final double cxmnpspmyzagctnwfmtc = 1.0 ; testPerceptron . setInput ( cxmnpspmyzagctnwfmtc ) ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( cxmnpspmyzagctnwfmtc , testPerceptron . output () , DELTA ) ; } <s> Fixed error in InputPerceptronTest
fix_before_refactoring: { neuralNetwork.InputPerceptron testPerceptron = new neuralNetwork.InputPerceptron ( 0 ) ; final double testInput = 1.0 ; testPerceptron . setInput ( testInput ) ; testPerceptron . activate () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( testInput , testPerceptron . output () , DELTA ) ; }
fix_after_refactoring: { neuralNetwork.InputPerceptron testPerceptron = new neuralNetwork.InputPerceptron ( 0 ) ; final double cxmnpspmyzagctnwfmtc = 1.0 ; testPerceptron . setInput ( cxmnpspmyzagctnwfmtc ) ; testPerceptron . activate () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( cxmnpspmyzagctnwfmtc , testPerceptron . output () , DELTA ) ; }
× fix_prediction_before: { final double testInput = 1.0 ; testPerceptron . setInput ( testInput ) ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( testInput , testPerceptron . output () , DELTA ) ; }
× fix_prediction_after: { final double cxmnpspmyzagctnwfmtc = 1.0 ; testPerceptron . setInput ( cxmnpspmyzagctnwfmtc ) ; testPerceptron . activate () ; testPerceptron . calculateDeltas () ; testPerceptron . adjustToError () ; testPerceptron . activate () ; assertEquals ( cxmnpspmyzagctnwfmtc , testPerceptron . output () , DELTA ) ; }

line_index: 745
bug_before_refactoring: { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int id = element . getIdentification () ; element . clear () ; element . release () ; end = ( Constants.ENDSYSTEM ) == id ; } <s> @ java.lang.Override public void run () { boolean end = false ; while ( ! end ) { if ( ( elements . size () ) > 0 ) { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int id = element . getIdentification () ; element . clear () ; element . release () ; end = ( Constants.ENDSYSTEM ) == id ; } else { java.lang.Thread . yield () ; } } printElementStatistics () ; } <s> Fixed a bug where the instances from the object pool would not get cleared correctly. This led to an overflow of the pool.
bug_after_refactoring: { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int jvnscuaaqgaewvicmhsw = element . getIdentification () ; element . clear () ; element . release () ; lrvjquxyrgjyhfqbqjgr = ( Constants.ENDSYSTEM ) == jvnscuaaqgaewvicmhsw ; } <s> @ java.lang.Override public void run () { boolean end = false ; while ( ! end ) { if ( ( elements . size () ) > 0 ) { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int jvnscuaaqgaewvicmhsw = element . getIdentification () ; element . clear () ; element . release () ; lrvjquxyrgjyhfqbqjgr = ( Constants.ENDSYSTEM ) == jvnscuaaqgaewvicmhsw ; } else { java.lang.Thread . yield () ; } } printElementStatistics () ; } <s> Fixed a bug where the instances from the object pool would not get cleared correctly. This led to an overflow of the pool.
fix_before_refactoring: { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int id = element . getIdentification () ; element . release () ; end = ( Constants.ENDSYSTEM ) == id ; }
fix_after_refactoring: { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int jvnscuaaqgaewvicmhsw = element . getIdentification () ; element . release () ; lrvjquxyrgjyhfqbqjgr = ( Constants.ENDSYSTEM ) == jvnscuaaqgaewvicmhsw ; }
× fix_prediction_before: { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int id = element . getIdentification () ; element . clear () ; element . release () ; end = ( Constants.ENDSYSTEM ) == id ; }
× fix_prediction_after: { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int jvnscuaaqgaewvicmhsw = element . getIdentification () ; element . clear () ; element . release () ; }

line_index: 746
bug_before_refactoring: { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; int ret = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; return ret ; } <s> public static int addAssetPath ( android.content.res.AssetManager assets , java.lang.String path ) { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; int ret = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; return ret ; } <s> Fix issue #4
bug_after_refactoring: { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; int kinyieblgktwounprbrq = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; return kinyieblgktwounprbrq ; } <s> public static int addAssetPath ( android.content.res.AssetManager assets , java.lang.String path ) { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; int kinyieblgktwounprbrq = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; return kinyieblgktwounprbrq ; } <s> Fix issue #4
fix_before_refactoring: { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; java.lang.Integer ret = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; if ( ret == null ) return 0 ; return ret ; }
fix_after_refactoring: { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; java.lang.Integer kinyieblgktwounprbrq = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; if ( kinyieblgktwounprbrq == null ) return 0 ; return kinyieblgktwounprbrq ; }
× fix_prediction_before: { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; int ret = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; return ret ; }
× fix_prediction_after: { if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) { net.wequick.small.util.ReflectAccelerator.sAddAssetPath = net.wequick.small.util.ReflectAccelerator . getMethod ( android.content.res.AssetManager . class , "addAssetPath" , new java.lang.Class [] { java.lang.String . class } ) ; } if ( ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath ) == null ) return 0 ; int kinyieblgktwounprbrq = net.wequick.small.util.ReflectAccelerator . invoke ( net.wequick.small.util.ReflectAccelerator.sAddAssetPath , assets , path ) ; return kinyieblgktwounprq ; }

line_index: 747
bug_before_refactoring: { int roomCost = 0 ; if ( ( roomType ) == 'I' ) roomCost = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; else if ( ( roomType ) == 'P' ) roomCost = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; else roomCost = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; return roomCost ; } <s> public int getRoomCost () { int roomCost = 0 ; if ( ( roomType ) == 'I' ) roomCost = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; else if ( ( roomType ) == 'P' ) roomCost = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; else roomCost = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; return roomCost ; } <s> Fixed a few formatting errors and updated ifs  There were a few formatting errors with the comments which I updated. As well I updated a few of the ifs to the faster switch statements.
bug_after_refactoring: { int rjtlvaqwfvwwpijmycfm = 0 ; if ( ( roomType ) == 'I' ) rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; else if ( ( roomType ) == 'P' ) rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; else rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; return rjtlvaqwfvwwpijmycfm ; } <s> public int getRoomCost () { int rjtlvaqwfvwwpijmycfm = 0 ; if ( ( roomType ) == 'I' ) rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; else if ( ( roomType ) == 'P' ) rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; else rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; return rjtlvaqwfvwwpijmycfm ; } <s> Fixed a few formatting errors and updated ifs  There were a few formatting errors with the comments which I updated. As well I updated a few of the ifs to the faster switch statements.
fix_before_refactoring: { int roomCost = 0 ; switch ( roomType ) { case 'I' : roomCost = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; break; case 'P' : roomCost = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; break; default: roomCost = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; break; } return roomCost ; }
fix_after_refactoring: { int rjtlvaqwfvwwpijmycfm = 0 ; switch ( roomType ) { case 'I' : rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; break; case 'P' : rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; break; default: rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; break; } return rjtlvaqwfvwwpijmycfm ; }
× fix_prediction_before: { int roomCost = 0 ; switch ( roomType ) { case 'I' : roomCost = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; break; case roomCost = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; break; case roomCost = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; return roomCost ; } return roomCost ; }
× fix_prediction_after: { int rjtlvaqwfvwwpijmycfm = 0 ; if ( ( roomType ) == 'I' ) rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.icRoomRate ) * ( days ) ; else if ( ( roomType ) == 'P' ) rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.privateRoomRate ) * ( days ) ; else rjtlvaqwfvwwpijmycfm = ( HospitalMVC.Patient.doubleRoomRate ) * ( days ) ; return rjtlvaqwfvwwpijmycfm ; }

line_index: 748
bug_before_refactoring: { if ( h != null ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } } <s> public void setTemperature ( java.lang.String h ) { if ( h != null ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } } <s> Version 1.2.1: some little bug fixes
bug_after_refactoring: { if ( h != null ) { strTemperature = h ; int vwuuctintbqukpphmtxf = strTemperature . indexOf ( '.' ) ; vwuuctintbqukpphmtxf = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , vwuuctintbqukpphmtxf ) ) ; if ( vwuuctintbqukpphmtxf > ( maxTemp ) ) maxTemp = ( ( byte ) ( vwuuctintbqukpphmtxf ) ) ; } } <s> public void setTemperature ( java.lang.String h ) { if ( h != null ) { strTemperature = h ; int vwuuctintbqukpphmtxf = strTemperature . indexOf ( '.' ) ; vwuuctintbqukpphmtxf = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , vwuuctintbqukpphmtxf ) ) ; if ( vwuuctintbqukpphmtxf > ( maxTemp ) ) maxTemp = ( ( byte ) ( vwuuctintbqukpphmtxf ) ) ; } } <s> Version 1.2.1: some little bug fixes
fix_before_refactoring: { strTemperature = h ; if ( h != null ) { int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } }
fix_after_refactoring: { strTemperature = h ; if ( h != null ) { int vwuuctintbqukpphmtxf = strTemperature . indexOf ( '.' ) ; vwuuctintbqukpphmtxf = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , vwuuctintbqukpphmtxf ) ) ; if ( vwuuctintbqukpphmtxf > ( maxTemp ) ) maxTemp = ( ( byte ) ( vwuuctintbqukpphmtxf ) ) ; } }
× fix_prediction_before: { super . setTemperature ( h ) ; if ( h != null ) { strTemperature = h ; int i = strTemperature . indexOf ( '.' ) ; i = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , i ) ) ; if ( i > ( maxTemp ) ) maxTemp = ( ( byte ) ( i ) ) ; } }
× fix_prediction_after: { strTemperature = h ; float vwuuctintbqukpphmtxf = strTemperature . indexOf ( '.' ) ; vwuuctintbqukpphmtxf = java.lang.Integer . parseInt ( strTemperature . substring ( 0 , vwuuctintbqukpphmtxf ) ) ; if ( vwuuctintbqukpphmtxf > ( maxTemp ) ) maxTemp = ( ( byte ) ( vwuuctintbqukpphmtxf ) ) ; }

line_index: 749
bug_before_refactoring: if ( items [ num ] [ 0 ] . equals ( name ) ) { q = true ; } <s> public boolean findItem ( java.lang.String item ) { boolean q = false ; java.lang.String name = item ; for ( int num = 0 ; num < 101 ; num ++ ) { if ( items [ num ] [ 0 ] . equals ( name ) ) { q = true ; } } return q ; } <s> ERROR FOUND  NOT FIXED  Finding item returns an error that cannot be completed.
bug_after_refactoring: if ( items [ num ] [ 0 ] . equals ( name ) ) { zekqylqphydjbditociq = true ; } <s> public boolean findItem ( java.lang.String item ) { boolean q = false ; java.lang.String name = item ; for ( int num = 0 ; num < 101 ; num ++ ) { if ( items [ num ] [ 0 ] . equals ( name ) ) { zekqylqphydjbditociq = true ; } } return q ; } <s> ERROR FOUND  NOT FIXED  Finding item returns an error that cannot be completed.
fix_before_refactoring: if ( items [ num ] [ 0 ] . toLowerCase () . equals ( name . toLowerCase () ) ) { q = true ; }
fix_after_refactoring: if ( items [ num ] [ 0 ] . toLowerCase () . equals ( name . toLowerCase () ) ) { zekqylqphydjbditociq = true ; }
× fix_prediction_before: if ( ( items [ num ] [ 0 ] ) != null ) { q = true ; }
× fix_prediction_after: if ( ( items [ num ] [ 0 ] . getName () ) != null ) { zekqylqphydjbditociq = true ; }

line_index: 750
bug_before_refactoring: { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; int c = ( ( int ) ( field . get ( instance ) ) ) ; if ( c > 0 ) { return true ; } } <s> private static boolean isKeyPressed ( net.minecraft.client.settings.KeyBinding instance ) { try { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; int c = ( ( int ) ( field . get ( instance ) ) ) ; if ( c > 0 ) { return true ; } } catch ( java.lang.Exception e ) {} return false ; } <s> Fix export bug
bug_after_refactoring: { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; int cnkfquujkovvksfgqvvz = ( ( int ) ( field . get ( instance ) ) ) ; if ( cnkfquujkovvksfgqvvz > 0 ) { return true ; } } <s> private static boolean isKeyPressed ( net.minecraft.client.settings.KeyBinding instance ) { try { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; int cnkfquujkovvksfgqvvz = ( ( int ) ( field . get ( instance ) ) ) ; if ( cnkfquujkovvksfgqvvz > 0 ) { return true ; } } catch ( java.lang.Exception e ) {} return false ; } <s> Fix export bug
fix_before_refactoring: { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; java.lang.Object obj = field . get ( instance ) ; int c = ( ( java.lang.Integer ) ( obj ) ) ; if ( c > 0 ) { return true ; } }
fix_after_refactoring: { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; java.lang.Object obj = field . get ( instance ) ; int cnkfquujkovvksfgqvvz = ( ( java.lang.Integer ) ( obj ) ) ; if ( cnkfquujkovvksfgqvvz > 0 ) { return true ; } }
× fix_prediction_before: { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; int c = ( ( int ) ( field . get ( instance ) ) ) ; if ( c > 0 ) { return true ; } }
× fix_prediction_after: { java.lang.reflect.Field field = net.minecraft.client.settings.KeyBinding . class . getDeclaredField ( "pressTime" ) ; field . setAccessible ( true ) ; int cnkfquujkovvksfgqvvz = ( ( int ) ( field . get ( instance ) ) ) ; if ( cnkfquujkovvksfgqvvz > 0 ) { return true ; } }

line_index: 751
bug_before_refactoring: if ( ( ( threshold ) != ( - 1 ) ) && ( sum > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( sum ) ) ; <s> @ java.lang.Override public void reduce ( org.apache.hadoop.io.Text word , java.lang.Iterable < org.apache.hadoop.io.IntWritable > counts , com.moz.commoncrawl.Context context ) throws java.io.IOException , java.lang.InterruptedException { int sum = 0 ; for ( org.apache.hadoop.io.IntWritable count : counts ) { sum += count . get () ; } if ( ( ( threshold ) != ( - 1 ) ) && ( sum > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( sum ) ) ; } <s> bugfix filtering of anchorreducer + removed WARC related code
bug_after_refactoring: if ( ( ( threshold ) != ( - 1 ) ) && ( iyselglrqhsnmogbcknv > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( iyselglrqhsnmogbcknv ) ) ; <s> @ java.lang.Override public void reduce ( org.apache.hadoop.io.Text word , java.lang.Iterable < org.apache.hadoop.io.IntWritable > counts , com.moz.commoncrawl.Context context ) throws java.io.IOException , java.lang.InterruptedException { int sum = 0 ; for ( org.apache.hadoop.io.IntWritable count : counts ) { sum += count . get () ; } if ( ( ( threshold ) != ( - 1 ) ) && ( iyselglrqhsnmogbcknv > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( iyselglrqhsnmogbcknv ) ) ; } <s> bugfix filtering of anchorreducer + removed WARC related code
fix_before_refactoring: if ( ( ( threshold ) == ( - 1 ) ) || ( sum > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( sum ) ) ;
fix_after_refactoring: if ( ( ( threshold ) == ( - 1 ) ) || ( iyselglrqhsnmogbcknv > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( iyselglrqhsnmogbcknv ) ) ;
× fix_prediction_before: if ( ( ( threshold ) != ( - 1 ) ) && ( sum > ( threshold ) ) ) context . write ( word , new org.apache.hadoop.io.Text ( sum ) ) ;
× fix_prediction_after: if ( ( threshold ) != ( - 1 ) ) context . write ( word , new org.apache.hadoop.io.IntWritable ( iyselglrqhsnmogbcknv ) ) ;

line_index: 754
bug_before_refactoring: private long encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( " " ) . substring ( 0 , 5 ) ; int ascii ; for ( int i = 0 ; i < 5 ; ++ i ) { ascii = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( ascii ) ) ; } return java.lang.Long . parseLong ( rtn ) ; } <s> private long encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "      " ) . substring ( 0 , 5 ) ; int ascii ; for ( int i = 0 ; i < 5 ; ++ i ) { ascii = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( ascii ) ) ; } return java.lang.Long . parseLong ( rtn ) ; } <s> Bug fixes; added Top N Worst Offenders to Dashboard
bug_after_refactoring: private long encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( " " ) . substring ( 0 , 5 ) ; int kfpaafwuqyxdlujolzfe ; for ( int i = 0 ; i < 5 ; ++ i ) { kfpaafwuqyxdlujolzfe = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( kfpaafwuqyxdlujolzfe ) ) ; } return java.lang.Long . parseLong ( rtn ) ; } <s> private long encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "      " ) . substring ( 0 , 5 ) ; int ascii ; for ( int i = 0 ; i < 5 ; ++ i ) { ascii = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( ascii ) ) ; } return java.lang.Long . parseLong ( rtn ) ; } <s> Bug fixes; added Top N Worst Offenders to Dashboard
fix_before_refactoring: private java.lang.String encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "      " ) . substring ( 0 , 5 ) ; for ( int i = 0 ; i < 5 ; ++ i ) { int ascii = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( ascii ) ) ; } return java.lang.String . valueOf ( java.lang.Long . parseLong ( rtn ) ) ; }
fix_after_refactoring: private java.lang.String encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "      " ) . substring ( 0 , 5 ) ; for ( int i = 0 ; i < 5 ; ++ i ) { int kfpaafwuqyxdlujolzfe = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( kfpaafwuqyxdlujolzfe ) ) ; } return java.lang.String . valueOf ( java.lang.Long . parseLong ( rtn ) ) ; }
× fix_prediction_before: private long encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "     " ) . substring ( 0 , 5 ) ; int ascii ; for ( int i = 0 ; i < 5 ; ++ i ) { rtn = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( ascii ) ) ; } return java.lang.Long . parseLong ( rtn ) ) ; }
× fix_prediction_after: private long encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "    " ) . substring ( 0 , 5 ) ; int kfpaafwuqyxdlujolzfe ; for ( int i = 0 ; i < 5 ; ++ i ) { kfpaafwuqyxdlujolzfe = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( kfpaafwuqyxdlujolzfe ) ; } return java.lang.Long . parseLong ( rtn ) ; }

line_index: 755
bug_before_refactoring: for ( java.lang.String bPos : wPawns ) zobristKey ^= bZobrist . get ( bPos ) ; <s> long getZobristKey ( java.util.HashSet < java.lang.String > wPawns , java.util.HashSet < java.lang.String > bPawns ) { long zobristKey = 0 ; for ( java.lang.String wPos : wPawns ) zobristKey ^= wZobrist . get ( wPos ) ; for ( java.lang.String bPos : wPawns ) zobristKey ^= bZobrist . get ( bPos ) ; return zobristKey ; } <s> Bug fix
bug_after_refactoring: for ( java.lang.String bPos : wPawns ) fkcrktdlzvjvhghiljth ^= bZobrist . get ( bPos ) ; <s> long getZobristKey ( java.util.HashSet < java.lang.String > wPawns , java.util.HashSet < java.lang.String > bPawns ) { long zobristKey = 0 ; for ( java.lang.String wPos : wPawns ) zobristKey ^= wZobrist . get ( wPos ) ; for ( java.lang.String bPos : wPawns ) fkcrktdlzvjvhghiljth ^= bZobrist . get ( bPos ) ; return zobristKey ; } <s> Bug fix
fix_before_refactoring: for ( java.lang.String bPos : bPawns ) zobristKey ^= bZobrist . get ( bPos ) ;
fix_after_refactoring: for ( java.lang.String bPos : bPawns ) fkcrktdlzvjvhghiljth ^= bZobrist . get ( bPos ) ;
× fix_prediction_before: for ( java.lang.String bPos : wPawns ) if ( bPawns != null ) zobristKey ^= bZobrist . get ( bPos ) ;
× fix_prediction_after: for ( java.lang.String bPos : wPawns ) if ( bPos instanceof java.lang.String ) fkcrktdlzvjvhghiljth ^= bZobrist . get ( bPos ) ;

line_index: 756
bug_before_refactoring: public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean hasMash = false ; if ( ( ( ( currentInput . equals ( "sdf" ) ) || ( currentInput . equals ( "dfg" ) ) ) || ( currentInput . equals ( "cvb" ) ) ) || ( currentInput . equals ( ",./" ) ) ) { hasMash = true ; } return hasMash ; } <s> public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean hasMash = false ; if ( ( ( ( currentInput . equals ( "sdf" ) ) || ( currentInput . equals ( "dfg" ) ) ) || ( currentInput . equals ( "cvb" ) ) ) || ( currentInput . equals ( ",./" ) ) ) { hasMash = true ; } return hasMash ; } <s> Fixed errors and passed all Chatbot tests  GUI optimizations as well.
bug_after_refactoring: public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean ayzkwdgqatutlkcvtfmy = false ; if ( ( ( ( currentInput . equals ( "sdf" ) ) || ( currentInput . equals ( "dfg" ) ) ) || ( currentInput . equals ( "cvb" ) ) ) || ( currentInput . equals ( ",./" ) ) ) { ayzkwdgqatutlkcvtfmy = true ; } return ayzkwdgqatutlkcvtfmy ; } <s> public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean ayzkwdgqatutlkcvtfmy = false ; if ( ( ( ( currentInput . equals ( "sdf" ) ) || ( currentInput . equals ( "dfg" ) ) ) || ( currentInput . equals ( "cvb" ) ) ) || ( currentInput . equals ( ",./" ) ) ) { ayzkwdgqatutlkcvtfmy = true ; } return ayzkwdgqatutlkcvtfmy ; } <s> Fixed errors and passed all Chatbot tests  GUI optimizations as well.
fix_before_refactoring: public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean hasMash = false ; if ( ( ( ( currentInput . toLowerCase () . contains ( "sdf" ) ) || ( currentInput . toLowerCase () . contains ( "dfg" ) ) ) || ( currentInput . toLowerCase () . contains ( "cvb" ) ) ) || ( currentInput . toLowerCase () . contains ( ",./" ) ) ) { hasMash = true ; } return hasMash ; }
fix_after_refactoring: public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean ayzkwdgqatutlkcvtfmy = false ; if ( ( ( ( currentInput . toLowerCase () . contains ( "sdf" ) ) || ( currentInput . toLowerCase () . contains ( "dfg" ) ) ) || ( currentInput . toLowerCase () . contains ( "cvb" ) ) ) || ( currentInput . toLowerCase () . contains ( ",./" ) ) ) { ayzkwdgqatutlkcvtfmy = true ; } return ayzkwdgqatutlkcvtfmy ; }
× fix_prediction_before: public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean hasMash = false ; if ( ( ( currentInput . equals ( "sdf" ) ) || ( currentInput . equals ( "dfg" ) ) ) || ( currentInput . equals ( "cvb" ) ) ) || ( currentInput . equals ( ",./" ) ) ) { hasMash = true ; } return hasMash ; }
× fix_prediction_after: public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean ayzkwdgqatutlkcvtfmy = false ; if ( ( ( ( currentInput . equals ( "sdf" ) ) || ( currentInput . equals ( "dfg" ) ) ) || ( currentInput . equals ( "cvb" ) ) ) || ( currentInput . equals ( ",./" ) ) ) { ayzkwdgqatutlkcvtfmy = true ; } return ayzkwdgqatutlkcvtfmy ; }

line_index: 758
bug_before_refactoring: switch ( route ) { case "conquest" : { output = conquest [ stat ] ; } case "birthright" : { output = birthright [ stat ] ; } case "revelations" : { output = revelations [ stat ] ; } } <s> public int getStats ( java.lang.String route , int stat ) { int output = 0 ; switch ( route ) { case "conquest" : { output = conquest [ stat ] ; } case "birthright" : { output = birthright [ stat ] ; } case "revelations" : { output = revelations [ stat ] ; } } return output ; } <s> Finished Unittesting Unitclass  -Fixed an issue where stats and mods were not being correctly calculated. -Fixed an issue where the getStat function in BaseStats class was only outputting revelations stats when called.
bug_after_refactoring: switch ( route ) { case "conquest" : { pdtpxubhzgrzvgvixhih = conquest [ stat ] ; } case "birthright" : { pdtpxubhzgrzvgvixhih = birthright [ stat ] ; } case "revelations" : { pdtpxubhzgrzvgvixhih = revelations [ stat ] ; } } <s> public int getStats ( java.lang.String route , int stat ) { int output = 0 ; switch ( route ) { case "conquest" : { pdtpxubhzgrzvgvixhih = conquest [ stat ] ; } case "birthright" : { pdtpxubhzgrzvgvixhih = birthright [ stat ] ; } case "revelations" : { pdtpxubhzgrzvgvixhih = revelations [ stat ] ; } } return output ; } <s> Finished Unittesting Unitclass  -Fixed an issue where stats and mods were not being correctly calculated. -Fixed an issue where the getStat function in BaseStats class was only outputting revelations stats when called.
fix_before_refactoring: switch ( route ) { case "conquest" : { output = conquest [ stat ] ; break; } case "birthright" : { output = birthright [ stat ] ; break; } case "revelations" : { output = revelations [ stat ] ; break; } }
fix_after_refactoring: switch ( route ) { case "conquest" : { pdtpxubhzgrzvgvixhih = conquest [ stat ] ; break; } case "birthright" : { pdtpxubhzgrzvgvixhih = birthright [ stat ] ; break; } case "revelations" : { pdtpxubhzgrzvgvixhih = revelations [ stat ] ; break; } }
× fix_prediction_before: switch ( route ) { case "conquest" : { output = quest [ stat ] ; break; case "birthright" : { output = birthright [ stat ] ; } break; case "revelations" : { output = darkness [ stat ] ; } }
× fix_prediction_after: switch ( route ) { case "conquest" : { pdtpxubhzgrzvgvixhih =ihilation [ stat ] ; break; } case "birthright" : { pdtpxubhzgrzvgvixhih = birthright [ stat ] ; } break; case "revelations" : { pdtpxubhzgrzvgvixhih = bishops [ stat ] ; } break; }

line_index: 759
bug_before_refactoring: public synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long operationId = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( operationId , heapSize ) ; currentWriteBufferSize += heapSize ; return operationId ; } <s> public synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long operationId = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( operationId , heapSize ) ; currentWriteBufferSize += heapSize ; return operationId ; } <s> Merge pull request #322 from sduskis/add_bm_threadpool  Fixing some issues with BufferedMutator
bug_after_refactoring: public synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long zsoasmeayhhsuxaerhkc = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( zsoasmeayhhsuxaerhkc , heapSize ) ; currentWriteBufferSize += heapSize ; return zsoasmeayhhsuxaerhkc ; } <s> public synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long zsoasmeayhhsuxaerhkc = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( zsoasmeayhhsuxaerhkc , heapSize ) ; currentWriteBufferSize += heapSize ; return zsoasmeayhhsuxaerhkc ; } <s> Merge pull request #322 from sduskis/add_bm_threadpool  Fixing some issues with BufferedMutator
fix_before_refactoring: private synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long operationId = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( operationId , heapSize ) ; currentWriteBufferSize += heapSize ; return operationId ; }
fix_after_refactoring: private synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long zsoasmeayhhsuxaerhkc = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( zsoasmeayhhsuxaerhkc , heapSize ) ; currentWriteBufferSize += heapSize ; return zsoasmeayhhsuxaerhkc ; }
× fix_prediction_before: public long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long operationId = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( operationId , heapSize ) ; currentWriteBufferSize += heapSize ; return operationId ; }
× fix_prediction_after: public synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long zsoasmeayhhsuxaerhkc = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( zsoasmeayhhsuxaerhkc , heapSize ) ; currentWriteBufferSize += heapSize ; return zsoasmeayhhsuxaerhkc ; }

line_index: 760
bug_before_refactoring: boolean insertUserChild ( java.lang.String userId , long childId , int isOwner , int canEdit , java.lang.String childTimeStamp ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long result2 = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return result2 != ( - 1 ) ; } <s> boolean insertUserChild ( java.lang.String userId , long childId , int isOwner , int canEdit , java.lang.String childTimeStamp ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long result2 = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return result2 != ( - 1 ) ; } <s> fixed problem with baps info page
bug_after_refactoring: boolean insertUserChild ( java.lang.String userId , long childId , int isOwner , int canEdit , java.lang.String childTimeStamp ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long ctxoqpycrtwnjbehoslw = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return ctxoqpycrtwnjbehoslw != ( - 1 ) ; } <s> boolean insertUserChild ( java.lang.String userId , long childId , int isOwner , int canEdit , java.lang.String childTimeStamp ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long ctxoqpycrtwnjbehoslw = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return ctxoqpycrtwnjbehoslw != ( - 1 ) ; } <s> fixed problem with baps info page
fix_before_refactoring: boolean insertUserChild ( java.lang.String userId , long childId , int isOwner ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long result2 = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return result2 != ( - 1 ) ; }
fix_after_refactoring: boolean insertUserChild ( java.lang.String userId , long childId , int isOwner ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long ctxoqpycrtwnjbehoslw = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return ctxoqpycrtwnjbehoslw != ( - 1 ) ; }
× fix_prediction_before: boolean insertUserChild ( java.lang.String userId , long childId , int isOwner , int canEdit , java.lang.String childTimeStamp ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long result2 = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return result2 != ( - 1 ) ; }
× fix_prediction_after: boolean insertUserChild ( java.lang.String userId , long childId , int isOwner , java.lang.String childTimeStamp ) { android.database.sqlite.SQLiteDatabase db = this . getWritableDatabase () ; android.content.ContentValues childUserTableContent = new android.content.ContentValues () ; childUserTableContent . put ( baps.DatabaseHelper.UC_USER_ID , userId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_CHILD_ID , childId ) ; childUserTableContent . put ( baps.DatabaseHelper.UC_ISOWNER , isOwner ) ; long ctxoqpycrtwnjbehoslw = db . insert ( baps.DatabaseHelper.BAPS_USERCHILD_TABLE , null , childUserTableContent ) ; return ctxoqpycrtwnjbehoslw != ( - 1 ) ; }

line_index: 761
bug_before_refactoring: if ( ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.FilteredGAVs . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.ILogger . class ) ) ) c ++ ; <s> private int getRealParametersCount ( java.lang.reflect.Method m ) { int c = 0 ; for ( java.lang.Class < ? > t : m . getParameterTypes () ) { if ( ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.FilteredGAVs . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.ILogger . class ) ) ) c ++ ; } return c ; } <s> print build pipeline state  test Commands  bug fix
bug_after_refactoring: if ( ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.FilteredGAVs . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.ILogger . class ) ) ) xmfmediktwmqomofqubv ++ ; <s> private int getRealParametersCount ( java.lang.reflect.Method m ) { int c = 0 ; for ( java.lang.Class < ? > t : m . getParameterTypes () ) { if ( ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.FilteredGAVs . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.ILogger . class ) ) ) xmfmediktwmqomofqubv ++ ; } return c ; } <s> print build pipeline state  test Commands  bug fix
fix_before_refactoring: if ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.ILogger . class ) ) ) c ++ ;
fix_after_refactoring: if ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.ILogger . class ) ) ) xmfmediktwmqomofqubv ++ ;
× fix_prediction_before: if ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.FilteredGAVs . class ) ) ) c ++ ;
× fix_prediction_after: if ( ( ( ( t != ( fr.lteconsulting.pomexplorer.Client . class ) ) && ( t != ( fr.lteconsulting.pomexplorer.WorkingSession . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.CommandOptions . class ) ) ) && ( t != ( fr.lteconsulting.pomexplorer.commands.FilteredGAVs . class ) ) ) xmfmediktwmqomofqubv ++ ;

line_index: 762
bug_before_refactoring: { long currentWithoutPostZone = postTz . convertLocalToUTC ( time , true ) ; long local = preTz . convertUTCToLocal ( currentWithoutPostZone ) ; long nextLocal = durationField . add ( local , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( nextLocal , true ) ) ; } <s> @ java.lang.Override public long nextRoundingValue ( long time ) { long currentWithoutPostZone = postTz . convertLocalToUTC ( time , true ) ; long local = preTz . convertUTCToLocal ( currentWithoutPostZone ) ; long nextLocal = durationField . add ( local , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( nextLocal , true ) ) ; } <s> Aggregations: Be lenient when converting local to utc time in time zone roundings  This solves a problem in the time zone rounding classes where time dates that fall into a DST gap will cause joda time library to throw an exception. Changing the conversion methods 'strict' option to false prevents this.  Closes #10025
bug_after_refactoring: { long xtxlrfiidrehyzqdhhrs = postTz . convertLocalToUTC ( time , true ) ; long ndaagwtmqtxnkkslmqkq = preTz . convertUTCToLocal ( xtxlrfiidrehyzqdhhrs ) ; long vqcytdgrtslbeuseyelg = durationField . add ( ndaagwtmqtxnkkslmqkq , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( vqcytdgrtslbeuseyelg , true ) ) ; } <s> @ java.lang.Override public long nextRoundingValue ( long time ) { long xtxlrfiidrehyzqdhhrs = postTz . convertLocalToUTC ( time , true ) ; long ndaagwtmqtxnkkslmqkq = preTz . convertUTCToLocal ( xtxlrfiidrehyzqdhhrs ) ; long vqcytdgrtslbeuseyelg = durationField . add ( ndaagwtmqtxnkkslmqkq , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( vqcytdgrtslbeuseyelg , true ) ) ; } <s> Aggregations: Be lenient when converting local to utc time in time zone roundings  This solves a problem in the time zone rounding classes where time dates that fall into a DST gap will cause joda time library to throw an exception. Changing the conversion methods 'strict' option to false prevents this.  Closes #10025
fix_before_refactoring: { long currentWithoutPostZone = postTz . convertLocalToUTC ( time , false ) ; long local = preTz . convertUTCToLocal ( currentWithoutPostZone ) ; long nextLocal = durationField . add ( local , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( nextLocal , false ) ) ; }
fix_after_refactoring: { long xtxlrfiidrehyzqdhhrs = postTz . convertLocalToUTC ( time , false ) ; long ndaagwtmqtxnkkslmqkq = preTz . convertUTCToLocal ( xtxlrfiidrehyzqdhhrs ) ; long vqcytdgrtslbeuseyelg = durationField . add ( ndaagwtmqtxnkkslmqkq , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( vqcytdgrtslbeuseyelg , false ) ) ; }
× fix_prediction_before: { long currentWithoutPostZone = postTz . convertLocalToUTC ( time , true ) ; long local = preTz . convertUTCToLocal ( currentWithoutPostZone ) ; long nextLocal = durationField . add ( local , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( nextLocal , true ) ) ; }
× fix_prediction_after: { long xtxlrfifiidrehyzqdhhrs = postTz . convertLocalToUTC ( time , true ) ; long ndaagwtmqtxnkkslmqkq = preTz . convertUTCToLocal ( xtxlrfiidrehyzqdhhrs ) ; long vqcytdgrtslbeuseyelg = durationField . add ( ndaagwtmqtxnkkslmqkqkq , 1 ) ; return postTz . convertUTCToLocal ( preTz . convertLocalToUTC ( vqcytdgrtslbeuseyelg , true ) ) ; }

line_index: 763
bug_before_refactoring: if ( hasAtom ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } <s> @ java.lang.Override public void readFields ( java.io.DataInput dis ) throws java.io.IOException { int length = dis . readInt () ; byte [] bytes = new byte [ length ] ; dis . readFully ( bytes ) ; this . key = bytes ; this . deletedAt = dis . readLong () ; boolean hasAtom = dis . readBoolean () ; if ( hasAtom ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } } <s> Fix for an error when processing deleted items.
bug_after_refactoring: if ( cunavraybvyfdeemfpqr ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } <s> @ java.lang.Override public void readFields ( java.io.DataInput dis ) throws java.io.IOException { int length = dis . readInt () ; byte [] bytes = new byte [ length ] ; dis . readFully ( bytes ) ; this . key = bytes ; this . deletedAt = dis . readLong () ; boolean hasAtom = dis . readBoolean () ; if ( cunavraybvyfdeemfpqr ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } } <s> Fix for an error when processing deleted items.
fix_before_refactoring: if ( hasAtom ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } else { this . atom = null ; }
fix_after_refactoring: if ( cunavraybvyfdeemfpqr ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } else { this . atom = null ; }
× fix_prediction_before: if ( hasAtom ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } else { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; }
× fix_prediction_after: if ( ! ( cunavraybvyfdeemfpqr ) ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; }

line_index: 764
bug_before_refactoring: { android.os.Bundle b = getIntent () . getExtras () ; if ( ( org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ) != null ) b = org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ; boolean isSlim = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( isSlim ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } } <s> private void processIntent () { android.os.Bundle b = getIntent () . getExtras () ; if ( ( org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ) != null ) b = org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ; boolean isSlim = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( isSlim ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } } <s> Fixed some bugs  hacks and crashes
bug_after_refactoring: { android.os.Bundle b = getIntent () . getExtras () ; if ( ( org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ) != null ) b = org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ; boolean vpxudwjtourncmuzhizx = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( vpxudwjtourncmuzhizx ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } } <s> private void processIntent () { android.os.Bundle b = getIntent () . getExtras () ; if ( ( org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ) != null ) b = org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ; boolean vpxudwjtourncmuzhizx = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( vpxudwjtourncmuzhizx ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } } <s> Fixed some bugs  hacks and crashes
fix_before_refactoring: { android.os.Bundle b = getIntent () . getExtras () ; boolean isSlim = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( isSlim ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } }
fix_after_refactoring: { android.os.Bundle b = getIntent () . getExtras () ; boolean vpxudwjtourncmuzhizx = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( vpxudwjtourncmuzhizx ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } }
× fix_prediction_before: { android.os.Bundle b = getIntent () . getExtras () ; if ( ( org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ) != null ) b = org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ; boolean isSlim = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( isSlim ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsS
× fix_prediction_after: { android.os.Bundle b = getIntent () . getExtras () ; if ( ( org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ) != null ) b = org.bottiger.podcast.activities.feedview.FeedActivity.mFuckItHack ; boolean vpxudwjtourncmuzhizx = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( vpxudwjtourncmuzhizx ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.Sound

line_index: 765
bug_before_refactoring: Quick . quickSortH ( data , start , ( index - 1 ) ) <s> private static int [] quickSortH ( int [] data , int start , int end ) { if ( start < end ) { int index = Quick . part ( data , start , end ) ; Quick . quickSortH ( data , start , ( index - 1 ) ) ; Quick . quickSortH ( data , ( index + 1 ) , end ) ; } return data ; } <s> Fixed sort.. Small error
bug_after_refactoring: Quick . quickSortH ( data , start , ( hlcolvbjocqgcbczvswy - 1 ) ) <s> private static int [] quickSortH ( int [] data , int start , int end ) { if ( start < end ) { int index = Quick . part ( data , start , end ) ; Quick . quickSortH ( data , start , ( hlcolvbjocqgcbczvswy - 1 ) ) ; Quick . quickSortH ( data , ( index + 1 ) , end ) ; } return data ; } <s> Fixed sort.. Small error
fix_before_refactoring: Quick . quickSortH ( data , start , index )
fix_after_refactoring: Quick . quickSortH ( data , start , hlcolvbjocqgcbczvswy )
× fix_prediction_before: Quick . quickSortH ( data , start , end )
× fix_prediction_after: Quick . quickSortH ( data , start , end )

line_index: 766
bug_before_refactoring: { short componentId = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte propertyNumber = buffer [ ( start + 2 ) ] ; propertyNumber ++ ; byte size = buffer [ ( start + 3 ) ] ; byte [] val = new byte [ size ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , val , 0 , size ) ; edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue ( componentId , propertyNumber , val ) ; return value ; } <s> private edu.uci.eecs.wukong.framework.model.InitValue extractInitValue ( int start ) { short componentId = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte propertyNumber = buffer [ ( start + 2 ) ] ; propertyNumber ++ ; byte size = buffer [ ( start + 3 ) ] ; byte [] val = new byte [ size ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , val , 0 , size ) ; edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue ( componentId , propertyNumber , val ) ; return value ; } <s> Fix property id start from 1 bug
bug_after_refactoring: { short qqpnwdvdazaohrcvljhw = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte theuxshiexykirykszhk = buffer [ ( start + 2 ) ] ; theuxshiexykirykszhk ++ ; byte bebjjheilduzieciynmm = buffer [ ( start + 3 ) ] ; byte [] xkzbqekbrllmctivozxi = new byte [ bebjjheilduzieciynmm ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , xkzbqekbrllmctivozxi , 0 , bebjjheilduzieciynmm ) ; edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue ( qqpnwdvdazaohrcvljhw , theuxshiexykirykszhk , xkzbqekbrllmctivozxi ) ; return value ; } <s> private edu.uci.eecs.wukong.framework.model.InitValue extractInitValue ( int start ) { short qqpnwdvdazaohrcvljhw = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte theuxshiexykirykszhk = buffer [ ( start + 2 ) ] ; theuxshiexykirykszhk ++ ; byte bebjjheilduzieciynmm = buffer [ ( start + 3 ) ] ; byte [] xkzbqekbrllmctivozxi = new byte [ bebjjheilduzieciynmm ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , xkzbqekbrllmctivozxi , 0 , bebjjheilduzieciynmm ) ; edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue ( qqpnwdvdazaohrcvljhw , theuxshiexykirykszhk , xkzbqekbrllmctivozxi ) ; return value ; } <s> Fix property id start from 1 bug
fix_before_refactoring: { short componentId = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte propertyNumber = buffer [ ( start + 2 ) ] ; byte size = buffer [ ( start + 3 ) ] ; byte [] val = new byte [ size ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , val , 0 , size ) ; edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue ( componentId , ( propertyNumber ++ ) , val ) ; return value ; }
fix_after_refactoring: { short qqpnwdvdazaohrcvljhw = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte theuxshiexykirykszhk = buffer [ ( start + 2 ) ] ; byte bebjjheilduzieciynmm = buffer [ ( start + 3 ) ] ; byte [] xkzbqekbrllmctivozxi = new byte [ bebjjheilduzieciynmm ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , xkzbqekbrllmctivozxi , 0 , bebjjheilduzieciynmm ) ; edu.uci.eecs.wukong.framework.model.InitValue value = new edu.uci.eecs.wukong.framework.model.InitValue ( qqpnwdvdazaohrcvljhw , ( theuxshiexykirykszhk ++ ) , xkzbqekbrllmctivozxi ) ; return value ; }
× fix_prediction_before: { short componentId = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte propertyNumber = buffer [ ( start + 2 ) ] ; propertyNumber ++ ; byte size = buffer [ ( start + 3 ) ] ; byte [] val = new byte [ size ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , val , 0 , size ) ; return new edu.uci.eecs.wukong.framework.model.InitValue ( componentId , propertyNumber , val ) ; }
× fix_prediction_after: { short qqpnwdvdazaohrcvljhw = edu.uci.eecs.wukong.framework.util.WKPFUtil . getLittleEndianShort ( buffer , start ) ; byte theuxshiexykirykszhk = buffer [ ( start + 2 ) ] ; theuxshiexykirykszhk ++ ; byte bebjjheilduzieciynmm = buffer [ ( start + 3 ) ] ; byte [] xkzbqekbrllmctivozxi = new byte [ bebjjheilduzieciynmm ] ; java.lang.System . arraycopy ( buffer , ( start + 4 ) , xkzbqekbrllmctivozxi , 0 , bebjjheilduzieciynmm ) ; return value ; }

line_index: 767
bug_before_refactoring: { byte [] sendData = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { sendData = input . nextLine () . getBytes () ; } csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( sendData , sendData.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } <s> @ java.lang.SuppressWarnings ( value = "Duplicates" ) private static void upload ( int port ) throws java.lang.Exception { byte [] sendData = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { sendData = input . nextLine () . getBytes () ; } csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( sendData , sendData.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } <s> Solve issue with empty data displaying unknown chars by adding trim to new String
bug_after_refactoring: { byte [] ncfmfffkzstokqjkktgk = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { ncfmfffkzstokqjkktgk = input . nextLine () . getBytes () ; } csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( ncfmfffkzstokqjkktgk , ncfmfffkzstokqjkktgk.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } <s> @ java.lang.SuppressWarnings ( value = "Duplicates" ) private static void upload ( int port ) throws java.lang.Exception { byte [] ncfmfffkzstokqjkktgk = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { ncfmfffkzstokqjkktgk = input . nextLine () . getBytes () ; } csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( ncfmfffkzstokqjkktgk , ncfmfffkzstokqjkktgk.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } <s> Solve issue with empty data displaying unknown chars by adding trim to new String
fix_before_refactoring: { byte [] sendData = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { sendData = input . nextLine () . getBytes () ; csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( sendData , sendData.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } }
fix_after_refactoring: { byte [] ncfmfffkzstokqjkktgk = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { ncfmfffkzstokqjkktgk = input . nextLine () . getBytes () ; csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( ncfmfffkzstokqjkktgk , ncfmfffkzstokqjkktgk.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } }
× fix_prediction_before: { byte [] sendData = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { sendData = input . nextLine () . getBytes () ; } csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( sendData , sendData.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; }
× fix_prediction_after: { byte [] ncfmfffkzstokqjkktgk = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { ncfmfffkzstokqjkktgk = input . nextLine () . getBytes () ; } csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( ncfmfffkzstokqjkktgk , ncfmfffkzstokqjkktgk.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; }

line_index: 769
bug_before_refactoring: { long totalSteps = 0 ; int totalDays = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { totalSteps += dailyStepsDTO . getSteps () ; totalDays ++ ; } return ( ( int ) ( totalSteps ) ) / totalDays ; } <s> private int calculateAverageSteps ( java.util.List < grimesmea.gmail.com.pricklefit.DailyStepsDTO > dailyStepTotals ) { long totalSteps = 0 ; int totalDays = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { totalSteps += dailyStepsDTO . getSteps () ; totalDays ++ ; } return ( ( int ) ( totalSteps ) ) / totalDays ; } <s> fix: Display correct empty list messages and divided by 0 error
bug_after_refactoring: { long olsgkiuapmkbvapbcanx = 0 ; int jhcmhgtailzfdmvdiavf = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { olsgkiuapmkbvapbcanx += dailyStepsDTO . getSteps () ; jhcmhgtailzfdmvdiavf ++ ; } return ( ( int ) ( olsgkiuapmkbvapbcanx ) ) / jhcmhgtailzfdmvdiavf ; } <s> private int calculateAverageSteps ( java.util.List < grimesmea.gmail.com.pricklefit.DailyStepsDTO > dailyStepTotals ) { long olsgkiuapmkbvapbcanx = 0 ; int jhcmhgtailzfdmvdiavf = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { olsgkiuapmkbvapbcanx += dailyStepsDTO . getSteps () ; jhcmhgtailzfdmvdiavf ++ ; } return ( ( int ) ( olsgkiuapmkbvapbcanx ) ) / jhcmhgtailzfdmvdiavf ; } <s> fix: Display correct empty list messages and divided by 0 error
fix_before_refactoring: { long totalSteps = 0 ; int totalDays = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { totalSteps += dailyStepsDTO . getSteps () ; totalDays ++ ; } if ( totalDays == 0 ) { return 0 ; } else { return ( ( int ) ( totalSteps ) ) / totalDays ; } }
fix_after_refactoring: { long olsgkiuapmkbvapbcanx = 0 ; int jhcmhgtailzfdmvdiavf = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { olsgkiuapmkbvapbcanx += dailyStepsDTO . getSteps () ; jhcmhgtailzfdmvdiavf ++ ; } if ( jhcmhgtailzfdmvdiavf == 0 ) { return 0 ; } else { return ( ( int ) ( olsgkiuapmkbvapbcanx ) ) / jhcmhgtailzfdmvdiavf ; } }
× fix_prediction_before: { long totalSteps = 0 ; int totalDays = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { totalSteps += dailyStepsDTO . getSteps () ; totalDays ++ ; } return ( ( int ) ( totalSteps ) ) / totalDays ; }
× fix_prediction_after: { long olsgkiuapmkbvapbcanx = 0 ; int jhcmhgtailzfdmvdiav = 0 ; for ( grimesmea.gmail.com.pricklefit.DailyStepsDTO dailyStepsDTO : dailyStepTotals ) { olsgkiuapmkbvapbcanx += dailyStepsDTO . getSteps () ; jhcmhgtailzfdmvdiavf ++ ; } return ( ( int ) ( olsgkiuapmkbvapbcanx ) ) / jhcmhgtailzfdmvdiavf ; }

line_index: 770
bug_before_refactoring: { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( buffer , 0 , packet . getLength () ) ; } <s> @ java.lang.Override public void run () { byte [] buffer = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( buffer , buffer.length ) ; isRunning = true ; while ( isRunning ) { try { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( buffer , 0 , packet . getLength () ) ; } catch ( java.io.IOException e ) { break; } } } <s> - Fixed connection issue with ports - FIxed printing
bug_after_refactoring: { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( yfidnasvctpucrqcpoxg , 0 , packet . getLength () ) ; } <s> @ java.lang.Override public void run () { byte [] buffer = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( buffer , buffer.length ) ; isRunning = true ; while ( isRunning ) { try { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( yfidnasvctpucrqcpoxg , 0 , packet . getLength () ) ; } catch ( java.io.IOException e ) { break; } } } <s> - Fixed connection issue with ports - FIxed printing
fix_before_refactoring: { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( buffer , 0 , packet . getLength () ) ; java.lang.System.out . println ( msg ) ; }
fix_after_refactoring: { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( yfidnasvctpucrqcpoxg , 0 , packet . getLength () ) ; java.lang.System.out . println ( msg ) ; }
× fix_prediction_before: { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( buffer , 0 , packet . getLength () ) ; size = new java.lang.String ( buffer , 0 , packet . getLength () ) ; }
× fix_prediction_after: { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( yfidnasvctpucrqcpoxg , 0 , packet . getLength () ) ; }

line_index: 771
bug_before_refactoring: newString = new java.lang.String ( newData ) <s> @ java.lang.Override public java.lang.String getSubAwardXmlFileData () { if ( ( subAwardXmlFileData ) != null ) { return subAwardXmlFileData . get () ; } byte [] newData = getKcAttachmentDao () . getData ( xmlDataId ) ; java.lang.String newString = new java.lang.String ( newData ) ; subAwardXmlFileData = new java.lang.ref.SoftReference < java.lang.String > ( newString ) ; return newString ; } <s> Merge pull request #583 from jwillia/RESKC_557_1  RESKC-557:fix issue when copying proposal with manually entered sub a…
bug_after_refactoring: newString = new java.lang.String ( vfeqcupylilowvljnllt ) <s> @ java.lang.Override public java.lang.String getSubAwardXmlFileData () { if ( ( subAwardXmlFileData ) != null ) { return subAwardXmlFileData . get () ; } byte [] newData = getKcAttachmentDao () . getData ( xmlDataId ) ; java.lang.String newString = new java.lang.String ( vfeqcupylilowvljnllt ) ; subAwardXmlFileData = new java.lang.ref.SoftReference < java.lang.String > ( newString ) ; return newString ; } <s> Merge pull request #583 from jwillia/RESKC_557_1  RESKC-557:fix issue when copying proposal with manually entered sub a…
fix_before_refactoring: newString = ( newData != null ) ? new java.lang.String ( newData ) : null
fix_after_refactoring: newString = ( vfeqcupylilowvljnllt != null ) ? new java.lang.String ( vfeqcupylilowvljnllt ) : null
× fix_prediction_before: newString = new java.lang.String ( newData )
× fix_prediction_after: newString = vfeqcupylilowvljnllt

line_index: 772
bug_before_refactoring: while ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) { index ++ ; } <s> protected final int getLineStart ( java.lang.String line ) { int index = 0 ; while ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) { index ++ ; } return com.puppycrawl.tools.checkstyle.utils.CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth () ) ; } <s> Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check
bug_after_refactoring: while ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) { xexoxobrckhgzbhnyvci ++ ; } <s> protected final int getLineStart ( java.lang.String line ) { int index = 0 ; while ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) { xexoxobrckhgzbhnyvci ++ ; } return com.puppycrawl.tools.checkstyle.utils.CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth () ) ; } <s> Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check
fix_before_refactoring: while ( ( index < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) ) { index ++ ; }
fix_after_refactoring: while ( ( xexoxobrckhgzbhnyvci < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) ) { xexoxobrckhgzbhnyvci ++ ; }
× fix_prediction_before: while ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) { index ++ ; }
× fix_prediction_after: while ( java.lang.Character . isWhitespace ( line . charAt ( xexoxobrckhgzbhnyvci ) ) ) { xexoxobrckhgzbhnyvci ++ ; }

line_index: 773
bug_before_refactoring: if ( i > 0 ) { ip = args . substring ( 0 , i ) ; id = decc.dht.Key . load ( args . substring ( i ) ) ; } <s> @ java.lang.Override public boolean extract ( java.lang.String args ) { int i = args . indexOf ( "\n" ) ; if ( i > 0 ) { ip = args . substring ( 0 , i ) ; id = decc.dht.Key . load ( args . substring ( i ) ) ; } return ( i > 0 ) && ( ( ( args . length () ) - i ) > 0 ) ; } <s> fix bug in packet parsing
bug_after_refactoring: if ( ubumlfgknrebuxikiiaa > 0 ) { ip = args . substring ( 0 , ubumlfgknrebuxikiiaa ) ; id = decc.dht.Key . load ( args . substring ( ubumlfgknrebuxikiiaa ) ) ; } <s> @ java.lang.Override public boolean extract ( java.lang.String args ) { int i = args . indexOf ( "\n" ) ; if ( ubumlfgknrebuxikiiaa > 0 ) { ip = args . substring ( 0 , ubumlfgknrebuxikiiaa ) ; id = decc.dht.Key . load ( args . substring ( ubumlfgknrebuxikiiaa ) ) ; } return ( i > 0 ) && ( ( ( args . length () ) - i ) > 0 ) ; } <s> fix bug in packet parsing
fix_before_refactoring: if ( ( i > 0 ) && ( ( i + 1 ) < ( args . length () ) ) ) { ip = args . substring ( 0 , i ) ; id = decc.dht.Key . load ( args . substring ( ( i + 1 ) ) ) ; }
fix_after_refactoring: if ( ( ubumlfgknrebuxikiiaa > 0 ) && ( ( ubumlfgknrebuxikiiaa + 1 ) < ( args . length () ) ) ) { ip = args . substring ( 0 , ubumlfgknrebuxikiiaa ) ; id = decc.dht.Key . load ( args . substring ( ( ubumlfgknrebuxikiiaa + 1 ) ) ) ; }
× fix_prediction_before: if ( ( i > 0 ) && ( ( i + 1 ) < ( args . length () ) ) ) { ip = args . substring ( 0 , i ) ; id = decc.dht.Key . load ( args . substring ( i ) ) ; }
× fix_prediction_after: if ( ( ubumlfgknrebuxikiiaa > 0 ) && ( ubumlfgknrebuxikiiaa > 0 ) ) { ip = args . substring ( 0 , ubumlfgknrebuxikiiaa ) ; id = decc.dht.Key . load ( args . substring ( ubumlfgknrebuxikiiaa ) ) ; }

line_index: 774
bug_before_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> public static void findEvenOrOdd () { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> Finished user menu  fixed bugs with scanners  fixed formatting for some programs
bug_after_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> public static void findEvenOrOdd () { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; scanner . close () ; } <s> Finished user menu  fixed bugs with scanners  fixed formatting for some programs
fix_before_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenCheck = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }
fix_after_refactoring: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }
× fix_prediction_before: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int evenCheck ; java.lang.System.out . println ( "Enter a number:" ) ; int evenNum = scanner . nextInt () ; evenNum = scanner . nextInt () ; evenNum = evenNum % 2 ; if ( evenCheck == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }
× fix_prediction_after: { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; java.lang.System.out . println ( ( "This program will ask you for a number, and will then" + " tell you if it is even or odd" ) ) ; int tyuwqmlxbvyhkmdgzb ; java.lang.System.out . println ( "Enter a number:" ) ; int uymeslcdngnuhnuhnxheajl = scanner . nextInt () ; tyuwqmlmlxbvyhkmdgzb = uymeslcdngnuhnxheajl % 2 ; if ( tyuwqmlmlxbvyhkmdgzb == 0 ) { java.lang.System.out . println ( "Even" ) ; } else { java.lang.System.out . println ( "Odd" ) ; } java.lang.System.out . println ( "" ) ; }

line_index: 775
bug_before_refactoring: { int currentIndex = keyParamPairs . indexOf ( currentPair ) ; java.lang.String newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , currentIndex ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; } <s> private static void interpretAsName ( java.util.ArrayList < com.equinox.KeyParamPair > keyParamPairs , com.equinox.KeyParamPair currentPair ) { int currentIndex = keyParamPairs . indexOf ( currentPair ) ; java.lang.String newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , currentIndex ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; } <s> fixed bug for parsing edit commands
bug_after_refactoring: { int ezicihitpcyyohtjzgxj = keyParamPairs . indexOf ( currentPair ) ; java.lang.String newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , ezicihitpcyyohtjzgxj ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; } <s> private static void interpretAsName ( java.util.ArrayList < com.equinox.KeyParamPair > keyParamPairs , com.equinox.KeyParamPair currentPair ) { int ezicihitpcyyohtjzgxj = keyParamPairs . indexOf ( currentPair ) ; java.lang.String newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , ezicihitpcyyohtjzgxj ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; } <s> fixed bug for parsing edit commands
fix_before_refactoring: { java.lang.String newName ; int currentIndex = keyParamPairs . indexOf ( currentPair ) ; newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , currentIndex ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; }
fix_after_refactoring: { java.lang.String newName ; int ezicihitpcyyohtjzgxj = keyParamPairs . indexOf ( currentPair ) ; newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , ezicihitpcyyohtjzgxj ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; }
× fix_prediction_before: { int currentIndex = keyParamPairs . indexOf ( currentPair ) ; java.lang.String newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , currentIndex ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; }
× fix_prediction_after: { int ezicihitpcyyohtjzgxj = keyParamPairs . indexOf ( currentPair ) ; java.lang.String newName = com.equinox.Parser . appendParameters ( keyParamPairs , 0 , ezicihitpcyyohtjzgxj ) ; keyParamPairs . get ( 0 ) . setParam ( newName ) ; }

line_index: 776
bug_before_refactoring: private void updateVersion ( java.lang.Long slbId ) { try { int current = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( current + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; } } <s> private void updateVersion ( java.lang.Long slbId ) { try { int current = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( current + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; } } <s> add clean resources and fix task Executor bug
bug_after_refactoring: private void updateVersion ( java.lang.Long slbId ) { try { int tpwgpxldmvlrybutqhft = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( tpwgpxldmvlrybutqhft + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; } } <s> private void updateVersion ( java.lang.Long slbId ) { try { int tpwgpxldmvlrybutqhft = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( tpwgpxldmvlrybutqhft + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; } } <s> add clean resources and fix task Executor bug
fix_before_refactoring: private void updateVersion ( java.lang.Long slbId ) throws java.lang.Exception { try { int current = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( current + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; throw e ; } }
fix_after_refactoring: private void updateVersion ( java.lang.Long slbId ) throws java.lang.Exception { try { int tpwgpxldmvlrybutqhft = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( tpwgpxldmvlrybutqhft + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; throw e ; } }
× fix_prediction_before: private void updateVersion ( java.lang.Long slbId ) { try { int current = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( current + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; } }
× fix_prediction_after: private void updateVersion ( java.lang.Long slbId ) { try { int tpwgpxldmvlrybutqhft = buildInfoService . getCurrentTicket ( slbId ) ; buildInfoService . updateTicket ( slbId , ( tpwgpxldmvlrybutqhft + 1 ) ) ; } catch ( java.lang.Exception e ) { logger . error ( "Update Version Fail!" , e ) ; } }

line_index: 777
bug_before_refactoring: { int rv = root ( v ) ; int rw = root ( w ) ; int sv = size ( rv ) ; int sw = size ( rw ) ; if ( sv > sw ) { id [ rw ] = rv ; size [ rv ] = sv + sw ; } else { id [ rv ] = rw ; size [ rw ] = sv + sw ; } } <s> public void union ( int v , int w ) { int rv = root ( v ) ; int rw = root ( w ) ; int sv = size ( rv ) ; int sw = size ( rw ) ; if ( sv > sw ) { id [ rw ] = rv ; size [ rv ] = sv + sw ; } else { id [ rv ] = rw ; size [ rw ] = sv + sw ; } } <s> fix compilation error. add main method for testing
bug_after_refactoring: { int wkeulbjvhymlbtvgmwzs = root ( v ) ; int andvvgfsvedagskyblzl = root ( w ) ; int fiupnwltlxmpsiyjcjtl = size ( wkeulbjvhymlbtvgmwzs ) ; int ikxfhvhddyjfhvkfdsze = size ( andvvgfsvedagskyblzl ) ; if ( fiupnwltlxmpsiyjcjtl > ikxfhvhddyjfhvkfdsze ) { id [ andvvgfsvedagskyblzl ] = wkeulbjvhymlbtvgmwzs ; size [ wkeulbjvhymlbtvgmwzs ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } else { id [ wkeulbjvhymlbtvgmwzs ] = andvvgfsvedagskyblzl ; size [ andvvgfsvedagskyblzl ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } } <s> public void union ( int v , int w ) { int wkeulbjvhymlbtvgmwzs = root ( v ) ; int andvvgfsvedagskyblzl = root ( w ) ; int fiupnwltlxmpsiyjcjtl = size ( wkeulbjvhymlbtvgmwzs ) ; int ikxfhvhddyjfhvkfdsze = size ( andvvgfsvedagskyblzl ) ; if ( fiupnwltlxmpsiyjcjtl > ikxfhvhddyjfhvkfdsze ) { id [ andvvgfsvedagskyblzl ] = wkeulbjvhymlbtvgmwzs ; size [ wkeulbjvhymlbtvgmwzs ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } else { id [ wkeulbjvhymlbtvgmwzs ] = andvvgfsvedagskyblzl ; size [ andvvgfsvedagskyblzl ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } } <s> fix compilation error. add main method for testing
fix_before_refactoring: { int rv = root ( v ) ; int rw = root ( w ) ; if ( rv == rw ) { return; } int sv = size [ rv ] ; int sw = size [ rw ] ; if ( sv > sw ) { id [ rw ] = rv ; size [ rv ] = sv + sw ; } else { id [ rv ] = rw ; size [ rw ] = sv + sw ; } }
fix_after_refactoring: { int wkeulbjvhymlbtvgmwzs = root ( v ) ; int andvvgfsvedagskyblzl = root ( w ) ; if ( wkeulbjvhymlbtvgmwzs == andvvgfsvedagskyblzl ) { return; } int fiupnwltlxmpsiyjcjtl = size [ wkeulbjvhymlbtvgmwzs ] ; int ikxfhvhddyjfhvkfdsze = size [ andvvgfsvedagskyblzl ] ; if ( fiupnwltlxmpsiyjcjtl > ikxfhvhddyjfhvkfdsze ) { id [ andvvgfsvedagskyblzl ] = wkeulbjvhymlbtvgmwzs ; size [ wkeulbjvhymlbtvgmwzs ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } else { id [ wkeulbjvhymlbtvgmwzs ] = andvvgfsvedagskyblzl ; size [ andvvgfsvedagskyblzl ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } }
× fix_prediction_before: { int rv = root ( v ) ; int rw = root ( w ) ; int sv = size ( rv ) ; if ( sv > sw ) { id [ rw ] = rv ; size [ rv ] = sv + sw ; } else { id [ rv ] = rw ; size [ rw ] = sv + sw ; } }
× fix_prediction_after: { int wkeulbjvhymlbtvgmwzs = root ( v ) ; int andvvgfsvedagskyblzl = root ( w ) ; int fiupnwltlxmpsiyjcjtl = size ( wkeulbjvhymlbtvgmwzs ) ; int ikxfhvhddyjfhvkfdsze = size ( andvvgfsvedagskyblzl ) ; if ( fiupnwltlxmpsiyjcjtl > ikxfhvhddyjfhvkfdsze ) { id [ andvvgfsvedagskyblzl ] = wkeulbjvhymlbtvgmwzs ; size [ wkeulbjvhymlbtvgmwzs ] = fiupnwltlxmpsiyjcjtl + ikxfhvhddyjfhvkfdsze ; } else { id [ wkeulbjvhymlbtvgmwzs ] = andvvgfsvedagskyblzl ; size [ andvvgfsvedagskyblzl ] = fiupnwltl

line_index: 778
bug_before_refactoring: { distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean fulfilled = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! fulfilled ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return fulfilled ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; } <s> @ java.lang.Override public void enforce ( final org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution , final int numMaxSuppressedOutliers ) { distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean fulfilled = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! fulfilled ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return fulfilled ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; } <s> Bugfix: handle cases with 0% suppression correctly
bug_after_refactoring: { distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean ummhqesahkutyaebsvvq = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! ummhqesahkutyaebsvvq ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return ummhqesahkutyaebsvvq ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; } <s> @ java.lang.Override public void enforce ( final org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution , final int numMaxSuppressedOutliers ) { distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean ummhqesahkutyaebsvvq = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! ummhqesahkutyaebsvvq ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return ummhqesahkutyaebsvvq ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; } <s> Bugfix: handle cases with 0% suppression correctly
fix_before_refactoring: { if ( this . isFulfilled ( distribution ) ) { return; } distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean fulfilled = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! fulfilled ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return fulfilled ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; }
fix_after_refactoring: { if ( this . isFulfilled ( distribution ) ) { return; } distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean ummhqesahkutyaebsvvq = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! ummhqesahkutyaebsvvq ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return ummhqesahkutyaebsvvq ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; }
× fix_prediction_before: { if ( distribution == null ) { return; } distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean fulfilled = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! fulfilled ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return fulfilled ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; }
× fix_prediction_after: { if ( distribution == null ) { return; } distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean ummhqesahkutyaebsvvq = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! ummhqesahkutyaebsvvq ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return ummhqesahkutyaebsvvq ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; }

line_index: 779
bug_before_refactoring: { int [] pos = new int [ 2 ] ; java.lang.String result = "" ; int counter = 0 ; while ( ( gl . processCommand ( "MOVE W" , id ) ) != "FAIL" ) { counter ++ ; } pos [ 0 ] = 1 + counter ; counter = 0 ; while ( ( gl . processCommand ( "MOVE N" , id ) ) != "FAIL" ) { counter ++ ; } pos [ 1 ] = 1 + counter ; return pos ; } <s> public int [] getPlayerLocation ( int id ) { int [] pos = new int [ 2 ] ; java.lang.String result = "" ; int counter = 0 ; while ( ( gl . processCommand ( "MOVE W" , id ) ) != "FAIL" ) { counter ++ ; } pos [ 0 ] = 1 + counter ; counter = 0 ; while ( ( gl . processCommand ( "MOVE N" , id ) ) != "FAIL" ) { counter ++ ; } pos [ 1 ] = 1 + counter ; return pos ; } <s> Fixed errors in getPlayerLocation testing utility function; switched to GameLogicJNI
bug_after_refactoring: { int [] zwqfgckarkeikbtfxdvk = new int [ 2 ] ; java.lang.String result = "" ; int gevjwdvzmqjdqmiqifys = 0 ; while ( ( gl . processCommand ( "MOVE W" , id ) ) != "FAIL" ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 0 ] = 1 + gevjwdvzmqjdqmiqifys ; gevjwdvzmqjdqmiqifys = 0 ; while ( ( gl . processCommand ( "MOVE N" , id ) ) != "FAIL" ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 1 ] = 1 + gevjwdvzmqjdqmiqifys ; return zwqfgckarkeikbtfxdvk ; } <s> public int [] getPlayerLocation ( int id ) { int [] zwqfgckarkeikbtfxdvk = new int [ 2 ] ; java.lang.String result = "" ; int gevjwdvzmqjdqmiqifys = 0 ; while ( ( gl . processCommand ( "MOVE W" , id ) ) != "FAIL" ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 0 ] = 1 + gevjwdvzmqjdqmiqifys ; gevjwdvzmqjdqmiqifys = 0 ; while ( ( gl . processCommand ( "MOVE N" , id ) ) != "FAIL" ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 1 ] = 1 + gevjwdvzmqjdqmiqifys ; return zwqfgckarkeikbtfxdvk ; } <s> Fixed errors in getPlayerLocation testing utility function; switched to GameLogicJNI
fix_before_refactoring: { int [] pos = new int [ 2 ] ; int counter = 0 ; while ( ! ( gl . processCommand ( "MOVE W" , id ) . equals ( "FAIL" ) ) ) { counter ++ ; } pos [ 0 ] = 1 + counter ; counter = 0 ; while ( ! ( gl . processCommand ( "MOVE N" , id ) . equals ( "FAIL" ) ) ) { counter ++ ; } pos [ 1 ] = 1 + counter ; return pos ; }
fix_after_refactoring: { int [] zwqfgckarkeikbtfxdvk = new int [ 2 ] ; int gevjwdvzmqjdqmiqifys = 0 ; while ( ! ( gl . processCommand ( "MOVE W" , id ) . equals ( "FAIL" ) ) ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 0 ] = 1 + gevjwdvzmqjdqmiqifys ; gevjwdvzmqjdqmiqifys = 0 ; while ( ! ( gl . processCommand ( "MOVE N" , id ) . equals ( "FAIL" ) ) ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 1 ] = 1 + gevjwdvzmqjdqmiqifys ; return zwqfgckarkeikbtfxdvk ; }
× fix_prediction_before: { int [] pos = new int [ 2 ] ; java.lang.String result = "" ; while ( ( gl . processCommand ( "MOVE W" , id ) ) != "FAIL" ) { counter ++ ; } pos [ 0 ] = 1 + counter ; counter = 0 ; while ( ( gl . processCommand ( "MOVE N" , id ) ) != "FAIL" ) { counter ++ ; } pos [ 1 ] = 1 + counter ; return pos ; }
× fix_prediction_after: { int [] zwqfgckarkeikbtfxdvk = new int [ 2 ] ; java.lang.String result = "" ; int gevjwdvzmqjdqmiqifys = 0 ; while ( ( gl . processCommand ( "MOVE W" , id ) ) != "FAIL" ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 0 ] = 1 + gevjwdvzmqjdqmiqifys = 0 ; while ( ( gl . processCommand ( "MOVE N" , id ) ) != "FAIL" ) { gevjwdvzmqjdqmiqifys ++ ; } zwqfgckarkeikbtfxdvk [ 1 ] = 1 + gevjwdvzmqjdqmiqifys ; return zwqfgckarkeikbtfxdvk ; }

line_index: 780
bug_before_refactoring: isChecked ? childPositions . add ( packedPosition ) : childPositions . remove ( packedPosition ) <s> public boolean putChild ( int groupPosition , int childPosition , long childId , boolean isChecked ) { long packedPosition = android.widget.ExpandableListView . getPackedPositionForChild ( groupPosition , childPosition ) ; if ( hasStableIds () ) { java.lang.Long result = ( isChecked ) ? childIds . put ( childId , packedPosition ) : childIds . remove ( childId ) ; return result != null ; } else { return isChecked ? childPositions . add ( packedPosition ) : childPositions . remove ( packedPosition ) ; } } <s> Ref #38 - Fixed small logic error whereby checking an item when stableIds were disabled didn't always highlight the item row.
bug_after_refactoring: isChecked ? childPositions . add ( xefvqnoyjncdzgbbtruu ) : childPositions . remove ( xefvqnoyjncdzgbbtruu ) <s> public boolean putChild ( int groupPosition , int childPosition , long childId , boolean isChecked ) { long packedPosition = android.widget.ExpandableListView . getPackedPositionForChild ( groupPosition , childPosition ) ; if ( hasStableIds () ) { java.lang.Long result = ( isChecked ) ? childIds . put ( childId , packedPosition ) : childIds . remove ( childId ) ; return result != null ; } else { return isChecked ? childPositions . add ( xefvqnoyjncdzgbbtruu ) : childPositions . remove ( xefvqnoyjncdzgbbtruu ) ; } } <s> Ref #38 - Fixed small logic error whereby checking an item when stableIds were disabled didn't always highlight the item row.
fix_before_refactoring: isChecked ? ! ( childPositions . add ( packedPosition ) ) : childPositions . remove ( packedPosition )
fix_after_refactoring: isChecked ? ! ( childPositions . add ( xefvqnoyjncdzgbbtruu ) ) : childPositions . remove ( xefvqnoyjncdzgbbtruu )
× fix_prediction_before: isChecked ? childPositions . add ( packedPosition ) : childPositions . remove ( packedPosition )
× fix_prediction_after: isChecked ? childPositions . add ( xefvqnoyjncdzgbbtruu ) : childPositions . remove ( xefvqnoyjncdzgbbtruu )

line_index: 781
bug_before_refactoring: { int [] res = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { res [ i ] = arr . optInt ( i ) ; } return res ; } <s> public static int [] parseIntArray ( org.json.JSONArray arr ) { int [] res = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { res [ i ] = arr . optInt ( i ) ; } return res ; } <s> fix network error
bug_after_refactoring: { int [] mqmuiixzeabsiyzdzjxa = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { mqmuiixzeabsiyzdzjxa [ i ] = arr . optInt ( i ) ; } return mqmuiixzeabsiyzdzjxa ; } <s> public static int [] parseIntArray ( org.json.JSONArray arr ) { int [] mqmuiixzeabsiyzdzjxa = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { mqmuiixzeabsiyzdzjxa [ i ] = arr . optInt ( i ) ; } return mqmuiixzeabsiyzdzjxa ; } <s> fix network error
fix_before_refactoring: { if ( arr == null ) return null ; int [] res = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { res [ i ] = arr . optInt ( i ) ; } return res ; }
fix_after_refactoring: { if ( arr == null ) return null ; int [] mqmuiixzeabsiyzdzjxa = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { mqmuiixzeabsiyzdzjxa [ i ] = arr . optInt ( i ) ; } return mqmuiixzeabsiyzdzjxa ; }
× fix_prediction_before: { int [] res = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { res [ i ] = arr . optInt ( i ) ; } return res ; }
× fix_prediction_after: { int [] mqmuiixzeabsiyzdzjxa = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { mqmuiixzeabsiyzdzjxa [ i ] = arr . optInt ( i ) ; } return mqmuiixzeabsiyzdzjxa ; }

line_index: 783
bug_before_refactoring: { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int r = ( ( int ) ( ( ( coord . getY () ) - ( y0 ) ) % ( cellSize ) ) ) ; int c = ( ( int ) ( ( ( coord . getX () ) - ( x0 ) ) % ( cellSize ) ) ) ; return ( r * ( cols ) ) + c ; } <s> @ java.lang.Override public int getZoneIdx ( playground.michalm.zone.util.Node node ) { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int r = ( ( int ) ( ( ( coord . getY () ) - ( y0 ) ) % ( cellSize ) ) ) ; int c = ( ( int ) ( ( ( coord . getX () ) - ( x0 ) ) % ( cellSize ) ) ) ; return ( r * ( cols ) ) + c ; } <s> bugfix
bug_after_refactoring: { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int wjuwnvxpcpydaufjplju = ( ( int ) ( ( ( coord . getY () ) - ( y0 ) ) % ( cellSize ) ) ) ; int hjraaksiqbdwcjcljpjn = ( ( int ) ( ( ( coord . getX () ) - ( x0 ) ) % ( cellSize ) ) ) ; return ( wjuwnvxpcpydaufjplju * ( cols ) ) + hjraaksiqbdwcjcljpjn ; } <s> @ java.lang.Override public int getZoneIdx ( playground.michalm.zone.util.Node node ) { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int wjuwnvxpcpydaufjplju = ( ( int ) ( ( ( coord . getY () ) - ( y0 ) ) % ( cellSize ) ) ) ; int hjraaksiqbdwcjcljpjn = ( ( int ) ( ( ( coord . getX () ) - ( x0 ) ) % ( cellSize ) ) ) ; return ( wjuwnvxpcpydaufjplju * ( cols ) ) + hjraaksiqbdwcjcljpjn ; } <s> bugfix
fix_before_refactoring: { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int r = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( y0 ) ) / ( cellSize ) ) ) ) ) ; int c = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( x0 ) ) / ( cellSize ) ) ) ) ) ; return ( r * ( cols ) ) + c ; }
fix_after_refactoring: { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int wjuwnvxpcpydaufjplju = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getY () ) - ( y0 ) ) / ( cellSize ) ) ) ) ) ; int hjraaksiqbdwcjcljpjn = ( ( int ) ( java.lang.Math . round ( ( ( ( coord . getX () ) - ( x0 ) ) / ( cellSize ) ) ) ) ) ; return ( wjuwnvxpcpydaufjplju * ( cols ) ) + hjraaksiqbdwcjcljpjn ; }
× fix_prediction_before: { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int r = ( ( int ) ( ( ( coord . getY () ) - ( y0 ) ) % ( cellSize ) ) ) ; int c = ( ( int ) ( ( ( coord . getX () ) - ( x0 ) ) % ( cellSize ) ) ) ; return ( r * ( cols ) ) + c ; }
× fix_prediction_after: { org.matsim.api.core.v01.Coord coord = node . getCoord () ; int wjuwnvxpcpydaufjplju = ( ( int ) ( ( ( coord . getY () ) - ( y0 ) ) % ( cellSize ) ) ) ; int hjraaksiqbdwcjcljpjn = ( ( int ) ( ( ( coord . getX () ) - ( x0 ) ) % ( cellSize ) ) ) ; return ( wjuwnvxpcpydaufjpljpjn ) + hjraaksiqbdwcjcljpjn ; }

line_index: 784
bug_before_refactoring: { boolean synchronousReply = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( synchronousReply ) { return true ; } long ackId = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( ackId ) ) ) ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; } <s> private boolean asyncSendAcknowledge ( com.sun.messaging.jmq.jmsclient.ReadWritePacket pkt ) { boolean synchronousReply = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( synchronousReply ) { return true ; } long ackId = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( ackId ) ) ) ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; } <s> Merge pull request #387 from nigeldeakin/issue#371  Fix for #371 ReadChannel#requestMetaData leaks
bug_after_refactoring: { boolean wegtdeqbtvocznrwzyxc = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( wegtdeqbtvocznrwzyxc ) { return true ; } long brqzjlyizdtvyccedobz = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( brqzjlyizdtvyccedobz ) ) ) ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; } <s> private boolean asyncSendAcknowledge ( com.sun.messaging.jmq.jmsclient.ReadWritePacket pkt ) { boolean wegtdeqbtvocznrwzyxc = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( wegtdeqbtvocznrwzyxc ) { return true ; } long brqzjlyizdtvyccedobz = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( brqzjlyizdtvyccedobz ) ) ) ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; } <s> Merge pull request #387 from nigeldeakin/issue#371  Fix for #371 ReadChannel#requestMetaData leaks
fix_before_refactoring: { boolean synchronousReply = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( synchronousReply ) { return true ; } long ackId = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( ackId ) ) ) ) ; requestMetaData . remove ( ackId ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; }
fix_after_refactoring: { boolean wegtdeqbtvocznrwzyxc = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( wegtdeqbtvocznrwzyxc ) { return true ; } long brqzjlyizdtvyccedobz = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( brqzjlyizdtvyccedobz ) ) ) ) ; requestMetaData . remove ( brqzjlyizdtvyccedobz ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; }
× fix_prediction_before: { boolean synchronousReply = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( synchronousReply ) { return true ; } long ackId = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( ackId ) ) ) ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; }
× fix_prediction_after: { boolean wegtdeqbtvocznrwzyxc = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( wegtdeqbtvocznrwzyxc ) { return true ; } long brqzjlyizdtvyccedobz = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( brqzjlyizdtvyccedobz ) ) ) ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; }

line_index: 785
bug_before_refactoring: public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { boolean [] controlledPositionAxes = new boolean [] { true , true , true } ; boolean [] controlledOrientationAxes = new boolean [] { false , false , false } ; setHandControlledAxes ( robotSide , controlledPositionAxes , controlledOrientationAxes ) ; } <s> public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { boolean [] controlledPositionAxes = new boolean [] { true , true , true } ; boolean [] controlledOrientationAxes = new boolean [] { false , false , false } ; setHandControlledAxes ( robotSide , controlledPositionAxes , controlledOrientationAxes ) ; } <s> Fixed bug in the creation of hand matrices for linear and angular control.
bug_after_refactoring: public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { boolean [] ejerdgbeudpwnikzqgnl = new boolean [] { true , true , true } ; boolean [] qxpzgqyuuoduubilasdd = new boolean [] { false , false , false } ; setHandControlledAxes ( robotSide , ejerdgbeudpwnikzqgnl , qxpzgqyuuoduubilasdd ) ; } <s> public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { boolean [] ejerdgbeudpwnikzqgnl = new boolean [] { true , true , true } ; boolean [] qxpzgqyuuoduubilasdd = new boolean [] { false , false , false } ; setHandControlledAxes ( robotSide , ejerdgbeudpwnikzqgnl , qxpzgqyuuoduubilasdd ) ; } <s> Fixed bug in the creation of hand matrices for linear and angular control.
fix_before_refactoring: public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { double [] controlledPositionAxes = new double [] { 1.0 , 1.0 , 1.0 } ; double [] controlledOrientationAxes = new double [] { 0.0 , 0.0 , 0.0 } ; setHandControlledAxes ( robotSide , controlledPositionAxes , controlledOrientationAxes ) ; }
fix_after_refactoring: public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { double [] ejerdgbeudpwnikzqgnl = new double [] { 1.0 , 1.0 , 1.0 } ; double [] qxpzgqyuuoduubilasdd = new double [] { 0.0 , 0.0 , 0.0 } ; setHandControlledAxes ( robotSide , ejerdgbeudpwnikzqgnl , qxpzgqyuuoduubilasdd ) ; }
× fix_prediction_before: public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { boolean [] controlledPositionAxes = new boolean [] { true , true , true } ; boolean [] controlledOrientationAxes = new boolean [] { false , false , false } ; setHandControlledAxes ( robotSide , controlledPositionAxes , controlledOrientationAxes ) ; }
× fix_prediction_after: public void setHandLinearControlOnly ( us.ihmc.robotics.robotSide.RobotSide robotSide ) { boolean [] ejerdgbeudpwnikzqgnl = new boolean [] { true , true , true } ; boolean [] qxpzgqyuuoduubilasdd = new boolean [] { false , false , false } ; setHandControlledAxes ( robotSide , ejerdgbeudpwnikzqgnl , qxpzgqyuuoduubilasdd ) ; }

line_index: 786
bug_before_refactoring: { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; boolean intStatus = nachos.threads.Machine . interrupt () . disable () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( intStatus ) ; conditionLock . acquire () ; } <s> public void sleep () { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; boolean intStatus = nachos.threads.Machine . interrupt () . disable () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( intStatus ) ; conditionLock . acquire () ; } <s> Fix some bugs  still need work on Alarm.
bug_after_refactoring: { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; boolean carkcapukdfeocvlbknn = nachos.threads.Machine . interrupt () . disable () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( carkcapukdfeocvlbknn ) ; conditionLock . acquire () ; } <s> public void sleep () { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; boolean carkcapukdfeocvlbknn = nachos.threads.Machine . interrupt () . disable () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( carkcapukdfeocvlbknn ) ; conditionLock . acquire () ; } <s> Fix some bugs  still need work on Alarm.
fix_before_refactoring: { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; boolean intStatus = nachos.threads.Machine . interrupt () . disable () ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( intStatus ) ; conditionLock . acquire () ; }
fix_after_refactoring: { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; boolean carkcapukdfeocvlbknn = nachos.threads.Machine . interrupt () . disable () ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( carkcapukdfeocvlbknn ) ; conditionLock . acquire () ; }
× fix_prediction_before: { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; conditionLock . release () ; nachos.threads.Machine . interrupt () . disable () ; conditionLock . release () ; boolean intStatus = nachos.threads.Machine . interrupt () . disable () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( intStatus ) ; conditionLock . acquire () ; }
× fix_prediction_after: { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; conditionLock . release () ; condition carkcapukdfeocvlbknn = nachos.threads.Machine . interrupt () . disable () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( carkcapukdfeocvlbknn ) ; conditionLock . acquire () ; }

line_index: 788
bug_before_refactoring: ( ( arr . get ( i ) ) != value ) && ( i < ( arr . size () ) ) <s> public static int findBytes ( java.util.LinkedList < java.lang.Byte > arr , byte value ) { int i = 0 ; while ( ( ( arr . get ( i ) ) != value ) && ( i < ( arr . size () ) ) ) i ++ ; if ( i < ( arr . size () ) ) return i ; return - 1 ; } <s> game play bug fix
bug_after_refactoring: ( ( arr . get ( vonqtwonmphfywfqsmrr ) ) != value ) && ( vonqtwonmphfywfqsmrr < ( arr . size () ) ) <s> public static int findBytes ( java.util.LinkedList < java.lang.Byte > arr , byte value ) { int i = 0 ; while ( ( ( arr . get ( vonqtwonmphfywfqsmrr ) ) != value ) && ( vonqtwonmphfywfqsmrr < ( arr . size () ) ) ) i ++ ; if ( i < ( arr . size () ) ) return i ; return - 1 ; } <s> game play bug fix
fix_before_refactoring: ( i < ( arr . size () ) ) && ( ( arr . get ( i ) ) != value )
fix_after_refactoring: ( vonqtwonmphfywfqsmrr < ( arr . size () ) ) && ( ( arr . get ( vonqtwonmphfywfqsmrr ) ) != value )
× fix_prediction_before: ( ( ( arr . get ( i ) ) != value ) && ( i < ( arr . size () ) ) ) && ( i < ( arr . size () ) )
× fix_prediction_after: ( ( arr . get ( vonqtwonmphfywfqsmrr ) ) != value ) && ( ! ( arr . get ( vonqtwonmphfywfqsmrr ) . equals ( value ) ) )

line_index: 789
bug_before_refactoring: while ( sideFieldIndex < ( listOfPossibleMoves . size () ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( sideFieldIndex ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } else { sideFieldIndex ++ ; } } <s> private java.util.List < de.htw_berlin.HoboOthello.KI.Field > listPossibleSideFields () { java.util.List < de.htw_berlin.HoboOthello.KI.Field > listOfPossibleMoves = listPossibleMoves () ; java.util.List < de.htw_berlin.HoboOthello.KI.Field > listOfPossibleSideFields = null ; int sideFieldIndex = 0 ; while ( sideFieldIndex < ( listOfPossibleMoves . size () ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( sideFieldIndex ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } else { sideFieldIndex ++ ; } } return listOfPossibleSideFields ; } <s> bugfix
bug_after_refactoring: while ( qcddyanfmikzwywsiivy < ( listOfPossibleMoves . size () ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( qcddyanfmikzwywsiivy ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } else { qcddyanfmikzwywsiivy ++ ; } } <s> private java.util.List < de.htw_berlin.HoboOthello.KI.Field > listPossibleSideFields () { java.util.List < de.htw_berlin.HoboOthello.KI.Field > listOfPossibleMoves = listPossibleMoves () ; java.util.List < de.htw_berlin.HoboOthello.KI.Field > listOfPossibleSideFields = null ; int sideFieldIndex = 0 ; while ( qcddyanfmikzwywsiivy < ( listOfPossibleMoves . size () ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( qcddyanfmikzwywsiivy ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } else { qcddyanfmikzwywsiivy ++ ; } } return listOfPossibleSideFields ; } <s> bugfix
fix_before_refactoring: while ( sideFieldIndex < ( ( listOfPossibleMoves . size () ) - 1 ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( sideFieldIndex ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } sideFieldIndex ++ ; }
fix_after_refactoring: while ( qcddyanfmikzwywsiivy < ( ( listOfPossibleMoves . size () ) - 1 ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( qcddyanfmikzwywsiivy ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } qcddyanfmikzwywsiivy ++ ; }
× fix_prediction_before: while ( sideFieldIndex < ( ( listOfPossibleMoves . size () ) - 1 ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( sideFieldIndex ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } else { sideFieldIndex ++ ; } }
× fix_prediction_after: while ( qcddyanfmikzwywsiivy < ( listOfPossibleMoves . size () ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( qcddyanfmikzwywsiivy ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } else { qcddyanfmikzwywsiivy ++ ; } }

line_index: 790
bug_before_refactoring: numActivities < activityNdx <s> final void setFrontOfTask () { boolean foundFront = false ; final int numActivities = mActivities . size () ; for ( int activityNdx = 0 ; numActivities < activityNdx ; ++ activityNdx ) { final com.android.server.am.ActivityRecord r = mActivities . get ( activityNdx ) ; if ( foundFront || ( r.finishing ) ) { r.frontOfTask = false ; } else { r.frontOfTask = true ; foundFront = true ; } } } <s> Fix loop limits.  Fixes bug 12207606.  Change-Id: I9b450d2bc2a72a1f6581147f8930188f34c85299
bug_after_refactoring: iwzyfeitdhyyptypsfrq < activityNdx <s> final void setFrontOfTask () { boolean foundFront = false ; final int numActivities = mActivities . size () ; for ( int activityNdx = 0 ; iwzyfeitdhyyptypsfrq < activityNdx ; ++ activityNdx ) { final com.android.server.am.ActivityRecord r = mActivities . get ( activityNdx ) ; if ( foundFront || ( r.finishing ) ) { r.frontOfTask = false ; } else { r.frontOfTask = true ; foundFront = true ; } } } <s> Fix loop limits.  Fixes bug 12207606.  Change-Id: I9b450d2bc2a72a1f6581147f8930188f34c85299
fix_before_refactoring: activityNdx < numActivities
fix_after_refactoring: activityNdx < iwzyfeitdhyyptypsfrq
× fix_prediction_before: numActivities < ( activityNdx + 1 )
× fix_prediction_after: iwzyfeitdhyyptypsfrq < ( activityNdx + 1 )

line_index: 791
bug_before_refactoring: { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int numAnimats = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int animatDistance = animat . GetDistance ( otherAnimat ) ; } } <s> private int GeneralHeading ( com.fuzzy.simulator.CAnimat animat ) { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int numAnimats = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int animatDistance = animat . GetDistance ( otherAnimat ) ; } } <s> fixed rules.fcl load error
bug_after_refactoring: { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int eyyasgxqqahiodyxjfbe = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int mdgbbadszuscgaptfaia = animat . GetDistance ( otherAnimat ) ; } } <s> private int GeneralHeading ( com.fuzzy.simulator.CAnimat animat ) { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int eyyasgxqqahiodyxjfbe = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int mdgbbadszuscgaptfaia = animat . GetDistance ( otherAnimat ) ; } } <s> fixed rules.fcl load error
fix_before_refactoring: { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int numAnimats = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int animatDistance = animat . GetDistance ( otherAnimat ) ; } return numAnimats ; }
fix_after_refactoring: { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int eyyasgxqqahiodyxjfbe = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int mdgbbadszuscgaptfaia = animat . GetDistance ( otherAnimat ) ; } return eyyasgxqqahiodyxjfbe ; }
× fix_prediction_before: { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int numAnimats = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int animatDistance = animat . GetDistance ( otherAnimat ) ; } }
× fix_prediction_after: { java.awt.Point target = new java.awt.Point ( 0 , 0 ) ; int eyyasgxqqahiodyxjfbe = 0 ; for ( com.fuzzy.simulator.CAnimat otherAnimat : _animats ) { java.awt.Point otherLocation = ClosetLocation ( animat . GetLocation () , otherAnimat . GetLocation () ) ; int mdgbbadszuscgaptfaia = animat . GetDistance ( otherAnimat ) ; } return - 1 ; }

line_index: 792
bug_before_refactoring: private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean hasTag = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { hasTag = true ; } if ( ! hasTag ) { modifiedTags . add ( tagToAdd ) ; } } } } <s> private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean hasTag = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { hasTag = true ; } if ( ! hasTag ) { modifiedTags . add ( tagToAdd ) ; } } } } <s> Bug fix: TagTaskCommand was not checking duplicate existing tag properly
bug_after_refactoring: private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean vbaznjfbpjothetpaxqk = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { vbaznjfbpjothetpaxqk = true ; } if ( ! vbaznjfbpjothetpaxqk ) { modifiedTags . add ( tagToAdd ) ; } } } } <s> private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean vbaznjfbpjothetpaxqk = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { vbaznjfbpjothetpaxqk = true ; } if ( ! vbaznjfbpjothetpaxqk ) { modifiedTags . add ( tagToAdd ) ; } } } } <s> Bug fix: TagTaskCommand was not checking duplicate existing tag properly
fix_before_refactoring: private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean hasTag = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { hasTag = true ; } } if ( ! hasTag ) { modifiedTags . add ( tagToAdd ) ; } } }
fix_after_refactoring: private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean vbaznjfbpjothetpaxqk = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { vbaznjfbpjothetpaxqk = true ; } } if ( ! vbaznjfbpjothetpaxqk ) { modifiedTags . add ( tagToAdd ) ; } } }
× fix_prediction_before: private void updateOriginalTags () { if ( ( tagsToAdd ) != null ) { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean hasTag = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { hasTag = true ; } if ( ! hasTag ) { modifiedTags . add ( tagToAdd ) ; } } } } }
× fix_prediction_after: private void updateOriginalTags () { if ( ( tagsToAdd ) != null ) { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean vbaznjfbpjothetpaxqk = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { vbaznjfbpjothetpaxqk = true ; } if ( ! vbaznjfbpjothetpaxqk ) { modifiedTags . add ( tagToAdd ) ; } } } } }

line_index: 793
bug_before_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> @ android.annotation.TargetApi ( value = Build.VERSION_CODES.ICE_CREAM_SANDWICH ) public static io.branch.referral.Branch getAutoInstance ( @ android.support.annotation.NonNull android.content.Context context , boolean isReferrable ) { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> Merge pull request #321 from BranchMetrics/FIx-GetAutoInstance-Init-Lifecycle-Again  Fixing Activity life cycle re init issue
bug_after_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> @ android.annotation.TargetApi ( value = Build.VERSION_CODES.ICE_CREAM_SANDWICH ) public static io.branch.referral.Branch getAutoInstance ( @ android.support.annotation.NonNull android.content.Context context , boolean isReferrable ) { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; } <s> Merge pull request #321 from BranchMetrics/FIx-GetAutoInstance-Init-Lifecycle-Again  Fixing Activity life cycle re init issue
fix_before_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; return io.branch.referral.Branch.branchReferral_ ; }
fix_after_refactoring: { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean ykmnbugnruqbdpdftpif = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; return io.branch.referral.Branch.branchReferral_ ; }
× fix_prediction_before: { io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; }
× fix_prediction_after: { io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; io.branch.referral.Branch . getBranchInstance ( context , ( ! ykmnbugnruqbdpdftpif ) ) ; io.branch.referral.Branch.branchReferral_ . setActivityLifeCycleObserver ( ( ( android.app.Application ) ( context ) ) ) ; return io.branch.referral.Branch.branchReferral_ ; }

line_index: 794
bug_before_refactoring: { verifyNIL () ; int lastDegree = BinomialHeap.INFINITY ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) < lastDegree ) { return false ; } lastDegree = x.degree ; x = x.sibling ; } return true ; } <s> public boolean isValid () { verifyNIL () ; int lastDegree = BinomialHeap.INFINITY ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) < lastDegree ) { return false ; } lastDegree = x.degree ; x = x.sibling ; } return true ; } <s> Fix isValid bug
bug_after_refactoring: { verifyNIL () ; int sruwkdxjqdafwpfxdvan = BinomialHeap.INFINITY ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) < sruwkdxjqdafwpfxdvan ) { return false ; } sruwkdxjqdafwpfxdvan = x.degree ; x = x.sibling ; } return true ; } <s> public boolean isValid () { verifyNIL () ; int sruwkdxjqdafwpfxdvan = BinomialHeap.INFINITY ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) < sruwkdxjqdafwpfxdvan ) { return false ; } sruwkdxjqdafwpfxdvan = x.degree ; x = x.sibling ; } return true ; } <s> Fix isValid bug
fix_before_refactoring: { verifyNIL () ; int lastDegree = - ( BinomialHeap.INFINITY ) ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) <= lastDegree ) { return false ; } lastDegree = x.degree ; x = x.sibling ; } return true ; }
fix_after_refactoring: { verifyNIL () ; int sruwkdxjqdafwpfxdvan = - ( BinomialHeap.INFINITY ) ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) <= sruwkdxjqdafwpfxdvan ) { return false ; } sruwkdxjqdafwpfxdvan = x.degree ; x = x.sibling ; } return true ; }
× fix_prediction_before: { verifyNIL () ; int lastDegree = BinomialHeap.INFINITY ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) < lastDegree ) { return false ; } lastDegree = x.degree ; x = x.sibling ; } return true ; }
× fix_prediction_after: { verifyNIL () ; int sruwkdxjqdafwpfxdvan = BinomialHeap.INFINITY ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) < sruwkdxjqdafwpfxdvan ) { return false ; } sruwkdxjqdafwpfxdvan = x.degree ; x = x.sibling ; } return true ; }

line_index: 795
bug_before_refactoring: block . setNumBytes ( ( ( ( block . getNumBytes () ) + currLen ) - 4 ) ) <s> public void writeByteBufferImpl ( java.nio.ByteBuffer buf ) throws java.io.IOException { int currLen = buf . remaining () ; assert null != ( sChannel ) : "tcp socket not set yet, null value found." ; sChannel . write ( buf ) ; bufferPool . returnBuffer ( buf ) ; block . setNumBytes ( ( ( ( block . getNumBytes () ) + currLen ) - 4 ) ) ; bufferPool . returnBuffer ( buf ) ; } <s> fix bugs
bug_after_refactoring: block . setNumBytes ( ( ( ( block . getNumBytes () ) + nfrsckmjegkibcesftgh ) - 4 ) ) <s> public void writeByteBufferImpl ( java.nio.ByteBuffer buf ) throws java.io.IOException { int currLen = buf . remaining () ; assert null != ( sChannel ) : "tcp socket not set yet, null value found." ; sChannel . write ( buf ) ; bufferPool . returnBuffer ( buf ) ; block . setNumBytes ( ( ( ( block . getNumBytes () ) + nfrsckmjegkibcesftgh ) - 4 ) ) ; bufferPool . returnBuffer ( buf ) ; } <s> fix bugs
fix_before_refactoring: block . setNumBytes ( ( ( block . getNumBytes () ) + currLen ) )
fix_after_refactoring: block . setNumBytes ( ( ( block . getNumBytes () ) + nfrsckmjegkibcesftgh ) )
× fix_prediction_before: block . setNumBytes ( ( ( block . getNumBytes () ) + currLen ) - 4 ) )
× fix_prediction_after: block . setNumBytes ( ( ( block . getNumBytes () ) + nfrsckmjegkibcesftgh ) - 4 )

line_index: 796
bug_before_refactoring: { int [] a = new int [] { 1 , 2 , 3 , 4 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( a ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 2 , 4 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; } <s> public static void main ( java.lang.String [] args ) { int [] a = new int [] { 1 , 2 , 3 , 4 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( a ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 2 , 4 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; } <s> fixed error
bug_after_refactoring: { int [] txhuvfaazffligpfrfee = new int [] { 1 , 2 , 3 , 4 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( txhuvfaazffligpfrfee ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 2 , 4 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; } <s> public static void main ( java.lang.String [] args ) { int [] txhuvfaazffligpfrfee = new int [] { 1 , 2 , 3 , 4 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( txhuvfaazffligpfrfee ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 2 , 4 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; } <s> fixed error
fix_before_refactoring: { int [] a = new int [] { 3 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( a ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 1 , 2 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; }
fix_after_refactoring: { int [] txhuvfaazffligpfrfee = new int [] { 3 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( txhuvfaazffligpfrfee ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 1 , 2 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; }
× fix_prediction_before: { int [] a = new int [] { 1 , 2 , 3 , 4 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( a ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 2 , 4 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; }
× fix_prediction_after: { int [] txhuvfaazffligpfrfee = new int [] { 1 , 2 , 3 , 4 , 5 } ; reverseLinkedListII.ReverseLinkedListII obj = new reverseLinkedListII.ReverseLinkedListII () ; reverseLinkedListII.ReverseLinkedListII.ListNode head = obj . makeList ( txhuvfaazffligpfrfee ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; head = obj . reverseBetween ( head , 2 , 4 ) ; reverseLinkedListII.ReverseLinkedListII . printList ( head ) ; }

line_index: 798
bug_before_refactoring: { final int timeSensitiveness = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) { updateMovement () ; } else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( timeSensitiveness ) ; updateMovement () ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted -------\n" + e ) ) ; } } } ; keyThread . start () ; } } <s> private void checkSimultaneousRelease () { final int timeSensitiveness = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) { updateMovement () ; } else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( timeSensitiveness ) ; updateMovement () ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted -------\n" + e ) ) ; } } } ; keyThread . start () ; } } <s> Fixed the crash bug
bug_after_refactoring: { final int kcxyhepsxpyhlgurvdve = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) { updateMovement () ; } else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( kcxyhepsxpyhlgurvdve ) ; updateMovement () ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted -------\n" + e ) ) ; } } } ; keyThread . start () ; } } <s> private void checkSimultaneousRelease () { final int kcxyhepsxpyhlgurvdve = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) { updateMovement () ; } else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( kcxyhepsxpyhlgurvdve ) ; updateMovement () ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted -------\n" + e ) ) ; } } } ; keyThread . start () ; } } <s> Fixed the crash bug
fix_before_refactoring: { updateMovement () ; final int timeSensitiveness = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) {} else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( timeSensitiveness ) ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted -------\n" + e ) ) ; } } } ; keyThread . start () ; } }
fix_after_refactoring: { updateMovement () ; final int kcxyhepsxpyhlgurvdve = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) {} else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( kcxyhepsxpyhlgurvdve ) ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted -------\n" + e ) ) ; } } } ; keyThread . start () ; } }
× fix_prediction_before: { if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) { updateMovement () ; } else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( timeSensitiveness ) ; updateMovement () ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted ---------\n" + e ) ) ; } } } ; keyThread . start () ; } }
× fix_prediction_after: { final int kcxyhepsxpyhlgurvdve = 50 ; if ( ( ( keyThread ) != null ) && ( ( keyThread . getState () ) == ( java.lang.Thread.State.TIMED_WAITING ) ) ) { updateMovement () ; } else { keyThread = new java.lang.Thread () { public void run () { try { keyThread . sleep ( kcxyhepsxpyhlgurvdve ) ; updateMovement () ; } catch ( java.lang.InterruptedException e ) { java.lang.System.out . println ( ( "------ Key thread interrupted ---------\n" + e ) ) ; } } } ; keyThread . start () ; } }

line_index: 799
bug_before_refactoring: while ( ( element = aList . get ( index ) ) != null ) { if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( index , insertedGrade ) ; break; } index ++ ; } <s> private void orderedInsert ( gradesystem.Grades insertedGrade ) { int index = 0 ; gradesystem.Grades element ; while ( ( element = aList . get ( index ) ) != null ) { if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( index , insertedGrade ) ; break; } index ++ ; } if ( index == ( aList . size () ) ) aList . add ( index , insertedGrade ) ; } <s> Fix bugs for basic operations.
bug_after_refactoring: while ( ( element = aList . get ( dvfwpiuuywfanyauuoam ) ) != null ) { if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( dvfwpiuuywfanyauuoam , insertedGrade ) ; break; } dvfwpiuuywfanyauuoam ++ ; } <s> private void orderedInsert ( gradesystem.Grades insertedGrade ) { int index = 0 ; gradesystem.Grades element ; while ( ( element = aList . get ( dvfwpiuuywfanyauuoam ) ) != null ) { if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( dvfwpiuuywfanyauuoam , insertedGrade ) ; break; } dvfwpiuuywfanyauuoam ++ ; } if ( index == ( aList . size () ) ) aList . add ( index , insertedGrade ) ; } <s> Fix bugs for basic operations.
fix_before_refactoring: while ( index < ( aList . size () ) ) { element = aList . get ( index ) ; if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( index , insertedGrade ) ; break; } index ++ ; }
fix_after_refactoring: while ( dvfwpiuuywfanyauuoam < ( aList . size () ) ) { element = aList . get ( dvfwpiuuywfanyauuoam ) ; if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( dvfwpiuuywfanyauuoam , insertedGrade ) ; break; } dvfwpiuuywfanyauuoam ++ ; }
× fix_prediction_before: while ( ( element = aList . get ( index ) ) == null ) { if ( ( element . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( index , insertedGrade ) ; break; } index ++ ; }
× fix_prediction_after: while ( ( element = aList . get ( dvfwpiuuywfanyauuoam ) ) != null ) { if ( ( element . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( dvfwpiuuywfanyauuoam , insertedGrade ) ; java.lang.System.out . println ( index ) ; dvfwpiuuywfanyauuoam ++ ; } }

line_index: 800
bug_before_refactoring: albumSongs . get ( randNum ) <s> public java.util.List < utils.Song > getRandomSongList () { java.util.Random rand = new java.util.Random () ; int randNum ; java.util.List < utils.Song > randomSongs = new java.util.ArrayList < utils.Song > () ; for ( int i = 0 ; i < 3 ; i ++ ) { randNum = ( rand . nextInt ( albumSongs . size () ) ) + 1 ; java.lang.System.out . println ( ( "random number: " + randNum ) ) ; randomSongs . add ( albumSongs . get ( randNum ) ) ; } return randomSongs ; } <s> fixed minor issues with array limits  and fixed page parsing query to get lyrics from different kinds of songs (those without hooks/features). Allow user to guess the song  keep score and continue looping through game. have yet to fix getting unique random songs.
bug_after_refactoring: albumSongs . get ( vrsuonqjkclffgrveljx ) <s> public java.util.List < utils.Song > getRandomSongList () { java.util.Random rand = new java.util.Random () ; int randNum ; java.util.List < utils.Song > randomSongs = new java.util.ArrayList < utils.Song > () ; for ( int i = 0 ; i < 3 ; i ++ ) { randNum = ( rand . nextInt ( albumSongs . size () ) ) + 1 ; java.lang.System.out . println ( ( "random number: " + randNum ) ) ; randomSongs . add ( albumSongs . get ( vrsuonqjkclffgrveljx ) ) ; } return randomSongs ; } <s> fixed minor issues with array limits  and fixed page parsing query to get lyrics from different kinds of songs (those without hooks/features). Allow user to guess the song  keep score and continue looping through game. have yet to fix getting unique random songs.
fix_before_refactoring: albumSongs . get ( ( randNum - 1 ) )
fix_after_refactoring: albumSongs . get ( ( vrsuonqjkclffgrveljx - 1 ) )
× fix_prediction_before: albumSongs . get ( randNum )
× fix_prediction_after: albumSongs . get ( vrsuonqjkclffgrveljx )

line_index: 802
bug_before_refactoring: { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; int err = 0 ; redis.clients.jedis.Jedis jedis = redisUtil . getJedis () ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; jedis . close () ; } <s> @ java.lang.Override public void createTable ( org.apache.hadoop.hive.metastore.api.Table tbl ) throws org.apache.hadoop.hive.metastore.api.InvalidObjectException , org.apache.hadoop.hive.metastore.api.MetaException { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; int err = 0 ; redis.clients.jedis.Jedis jedis = redisUtil . getJedis () ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; jedis . close () ; } <s> Fix bug: OOM with  hive -f table.hql and optimise the performance.
bug_after_refactoring: { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; int tqsowgvrydvmefisxnvh = 0 ; redis.clients.jedis.Jedis jedis = redisUtil . getJedis () ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; jedis . close () ; } <s> @ java.lang.Override public void createTable ( org.apache.hadoop.hive.metastore.api.Table tbl ) throws org.apache.hadoop.hive.metastore.api.InvalidObjectException , org.apache.hadoop.hive.metastore.api.MetaException { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; int tqsowgvrydvmefisxnvh = 0 ; redis.clients.jedis.Jedis jedis = redisUtil . getJedis () ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; jedis . close () ; } <s> Fix bug: OOM with  hive -f table.hql and optimise the performance.
fix_before_refactoring: { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; }
fix_after_refactoring: { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; }
× fix_prediction_before: { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; int err = 0 ; redis.clients.jedis.Jedis jedis = redisUtil . getJedis () ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; }
× fix_prediction_after: { java.lang.String tbls = com.alibaba.fastjson.JSON . toJSONString ( tbl ) ; int tqsowgvrydvmefisxnvh = 0 ; redis.clients.jedis.Jedis jedis = redisUtil . getJedis () ; jedis . hset ( "table" , ( ( ( "" + ( tbl . getDbName () ) ) + "." ) + ( tbl . getTableName () ) ) , tbls ) ; org.apache.hadoop.hive.metastore.NewObjectStore.LOG . info ( ( ( "-----tianlong-----create table " + ( tbl . getTableName () ) ) + " success!" ) ) ; }

line_index: 803
bug_before_refactoring: try { count = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; } finally { handler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { notifyService . unbind () ; } } ) ; } <s> @ java.lang.Override public void run ( io.github.carlorodriguez.alarmon.NotificationServiceInterface service ) { int count ; try { count = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; } finally { handler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { notifyService . unbind () ; } } ) ; } if ( count > 0 ) { android.content.Intent notifyActivity = new android.content.Intent ( getApplicationContext () , io.github.carlorodriguez.alarmon.ActivityAlarmNotification . class ) ; notifyActivity . setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( notifyActivity ) ; } } <s> Fix service not registered  The bug can be reproduced with following steps:  1. Schedule an alarm. 2. Double click the notification at status bar.  The bug was not only appearing on above situation  but above situation was reproducing it each time.
bug_after_refactoring: try { bqmaoefqgkdjsbhuovxd = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; } finally { handler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { notifyService . unbind () ; } } ) ; } <s> @ java.lang.Override public void run ( io.github.carlorodriguez.alarmon.NotificationServiceInterface service ) { int count ; try { bqmaoefqgkdjsbhuovxd = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; } finally { handler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { notifyService . unbind () ; } } ) ; } if ( count > 0 ) { android.content.Intent notifyActivity = new android.content.Intent ( getApplicationContext () , io.github.carlorodriguez.alarmon.ActivityAlarmNotification . class ) ; notifyActivity . setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( notifyActivity ) ; } } <s> Fix service not registered  The bug can be reproduced with following steps:  1. Schedule an alarm. 2. Double click the notification at status bar.  The bug was not only appearing on above situation  but above situation was reproducing it each time.
fix_before_refactoring: try { count = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; }
fix_after_refactoring: try { bqmaoefqgkdjsbhuovxd = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; }
× fix_prediction_before: try { count = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; } finally { handler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { notifyService . unbind () ; } } ) ; }
× fix_prediction_after: try { bqmaoefqgkdjsbhuovxd = service . firingAlarmCount () ; } catch ( android.os.RemoteException e ) { return; } finally { handler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { notifyService . unbind () ; } } ) ; }

line_index: 805
bug_before_refactoring: { int prev_level = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; if ( prev_level > ( rooms_list . get ( roomID ) . getLevel () ) ) return true ; else return false ; } <s> public boolean lowerRoom ( int roomID ) { int prev_level = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; if ( prev_level > ( rooms_list . get ( roomID ) . getLevel () ) ) return true ; else return false ; } <s> FIX: bugs in room movement
bug_after_refactoring: { int sayutwxzevrsguwbtaun = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; if ( sayutwxzevrsguwbtaun > ( rooms_list . get ( roomID ) . getLevel () ) ) return true ; else return false ; } <s> public boolean lowerRoom ( int roomID ) { int sayutwxzevrsguwbtaun = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; if ( sayutwxzevrsguwbtaun > ( rooms_list . get ( roomID ) . getLevel () ) ) return true ; else return false ; } <s> FIX: bugs in room movement
fix_before_refactoring: { int prev_level = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; return prev_level > ( rooms_list . get ( roomID ) . getLevel () ) ; }
fix_after_refactoring: { int sayutwxzevrsguwbtaun = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; return sayutwxzevrsguwbtaun > ( rooms_list . get ( roomID ) . getLevel () ) ; }
× fix_prediction_before: { int prev_level = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; if ( prev_level > ( rooms_list . get ( roomID ) . getLevel () ) ) return true ; else return false ; }
× fix_prediction_after: { int sayutwxzevrsguwbtaun = rooms_list . get ( roomID ) . getLevel () ; rooms_list . get ( roomID ) . lower () ; return ! ( sayutwxzevrsguwbtaun > ( rooms_list . get ( roomID ) . getLevel () ) ) ; }

line_index: 810
bug_before_refactoring: { java.lang.System.out . println ( ( "Data addr=" + ( dataAddr ) ) ) ; int size = spriteData.length ; int bankBytesLeft = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( bankBytesLeft < size ) { dataAddr += bankBytesLeft + ( SpritesToROM.HEADER_SIZE ) ; } writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return size ; } <s> private int writeSprite ( byte [] spriteData ) { java.lang.System.out . println ( ( "Data addr=" + ( dataAddr ) ) ) ; int size = spriteData.length ; int bankBytesLeft = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( bankBytesLeft < size ) { dataAddr += bankBytesLeft + ( SpritesToROM.HEADER_SIZE ) ; } writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return size ; } <s> Fixed sprites issue
bug_after_refactoring: { java.lang.System.out . println ( ( "Data addr=" + ( dataAddr ) ) ) ; int bdyfwqvzxtbbgtbhhndg = spriteData.length ; int ufmmajxpbayryjhzsjfa = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( ufmmajxpbayryjhzsjfa < bdyfwqvzxtbbgtbhhndg ) { dataAddr += ufmmajxpbayryjhzsjfa + ( SpritesToROM.HEADER_SIZE ) ; } writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return bdyfwqvzxtbbgtbhhndg ; } <s> private int writeSprite ( byte [] spriteData ) { java.lang.System.out . println ( ( "Data addr=" + ( dataAddr ) ) ) ; int bdyfwqvzxtbbgtbhhndg = spriteData.length ; int ufmmajxpbayryjhzsjfa = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( ufmmajxpbayryjhzsjfa < bdyfwqvzxtbbgtbhhndg ) { dataAddr += ufmmajxpbayryjhzsjfa + ( SpritesToROM.HEADER_SIZE ) ; } writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return bdyfwqvzxtbbgtbhhndg ; } <s> Fixed sprites issue
fix_before_refactoring: { int size = spriteData.length ; int bankBytesLeft = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( bankBytesLeft < size ) { dataAddr += bankBytesLeft + ( SpritesToROM.HEADER_SIZE ) ; } int tmp = dataAddr ; writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return tmp ; }
fix_after_refactoring: { int bdyfwqvzxtbbgtbhhndg = spriteData.length ; int ufmmajxpbayryjhzsjfa = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( ufmmajxpbayryjhzsjfa < bdyfwqvzxtbbgtbhhndg ) { dataAddr += ufmmajxpbayryjhzsjfa + ( SpritesToROM.HEADER_SIZE ) ; } int tmp = dataAddr ; writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return tmp ; }
× fix_prediction_before: { int size = spriteData.length ; int bankBytesLeft = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( bankBytesLeft < size ) { dataAddr += bankBytesLeft + ( SpritesToROM.HEADER_SIZE ) ; } writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return size ; }
× fix_prediction_after: { int bdyfwqvzxtbbgtbhhndg = spriteData.length ; int ufmmajxpbayryjhzsjfa = ( SpritesToROM.BANK_SIZE ) - ( ( dataAddr ) % ( SpritesToROM.BANK_SIZE ) ) ; if ( ufmmajxpbayryjhzsjfa < bdyfwqvzxtbbgtbhhndg ) { dataAddr += ufmmajxpbayryjhzsjfa + ( SpritesToROM.HEADER_SIZE ) ; } writeIndex ( dataAddr ) ; dataAddr += writeBytes ( rom , dataAddr , spriteData ) ; return bdyfwqvzxtbbgtbhhndg ; }

line_index: 811
bug_before_refactoring: { int pageNumber = 1 ; int pageSize = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; java.lang.String name = "" ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( pageNumber , pageSize , name ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; } <s> @ org.smart4j.framework.mvc.annotation.Request.Get ( value = "/notices" ) public org.smart4j.framework.mvc.bean.View index () { int pageNumber = 1 ; int pageSize = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; java.lang.String name = "" ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( pageNumber , pageSize , name ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; } <s> fix bug
bug_after_refactoring: { int gkhbzvdiyxvtjpkzkrad = 1 ; int ocrhiznkoqtvvvgvkvbi = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; java.lang.String name = "" ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( gkhbzvdiyxvtjpkzkrad , ocrhiznkoqtvvvgvkvbi , name ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; } <s> @ org.smart4j.framework.mvc.annotation.Request.Get ( value = "/notices" ) public org.smart4j.framework.mvc.bean.View index () { int gkhbzvdiyxvtjpkzkrad = 1 ; int ocrhiznkoqtvvvgvkvbi = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; java.lang.String name = "" ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( gkhbzvdiyxvtjpkzkrad , ocrhiznkoqtvvvgvkvbi , name ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; } <s> fix bug
fix_before_refactoring: { int pageNumber = 1 ; int pageSize = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( pageNumber , pageSize , "" , "" ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; }
fix_after_refactoring: { int gkhbzvdiyxvtjpkzkrad = 1 ; int ocrhiznkoqtvvvgvkvbi = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( gkhbzvdiyxvtjpkzkrad , ocrhiznkoqtvvvgvkvbi , "" , "" ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; }
× fix_prediction_before: { int pageNumber = 1 ; int pageSize = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; java.lang.String param = "" ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( pageNumber , pageSize , name ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; }
× fix_prediction_after: { int gkhbzvdiyxvtjpkzkrad = org.bright.sepe.Tool . getPageSize ( "notice_pager" ) ; java.lang.String name = "" ; org.smart4j.framework.dao.bean.Pager < org.bright.sepe.entity.Notice > noticePager = noticeService . getNoticePager ( gkhbzvdiyxvtjpkzkrad , ocrhiznkoqtvvvgvkvbi , name ) ; return new org.smart4j.framework.mvc.bean.View ( "notice.jsp" ) . data ( "noticePager" , noticePager ) ; }

line_index: 813
bug_before_refactoring: { RapAnalyzer fire = new RapAnalyzer () ; double t = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double w = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double y = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( t + w ) + y ) / 3 ; java.lang.System.out . println ( ( "fireindex: " + ( RapAnalyzer.fireindex ) ) ) ; return RapAnalyzer.fireindex ; } <s> public static double getFireIndex ( java.lang.String sent1 ) { RapAnalyzer fire = new RapAnalyzer () ; double t = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double w = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double y = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( t + w ) + y ) / 3 ; java.lang.System.out . println ( ( "fireindex: " + ( RapAnalyzer.fireindex ) ) ) ; return RapAnalyzer.fireindex ; } <s> Bug fixes
bug_after_refactoring: { RapAnalyzer fire = new RapAnalyzer () ; double fepjsficgrlrdyaklmoz = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double fteerxkoykczpigypicm = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double bmpshgpngokgqeiutpqo = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( fepjsficgrlrdyaklmoz + fteerxkoykczpigypicm ) + bmpshgpngokgqeiutpqo ) / 3 ; java.lang.System.out . println ( ( "fireindex: " + ( RapAnalyzer.fireindex ) ) ) ; return RapAnalyzer.fireindex ; } <s> public static double getFireIndex ( java.lang.String sent1 ) { RapAnalyzer fire = new RapAnalyzer () ; double fepjsficgrlrdyaklmoz = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double fteerxkoykczpigypicm = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double bmpshgpngokgqeiutpqo = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( fepjsficgrlrdyaklmoz + fteerxkoykczpigypicm ) + bmpshgpngokgqeiutpqo ) / 3 ; java.lang.System.out . println ( ( "fireindex: " + ( RapAnalyzer.fireindex ) ) ) ; return RapAnalyzer.fireindex ; } <s> Bug fixes
fix_before_refactoring: { RapAnalyzer fire = new RapAnalyzer () ; double t = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double w = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double y = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( t + w ) + y ) / 3 ; return RapAnalyzer.fireindex ; }
fix_after_refactoring: { RapAnalyzer fire = new RapAnalyzer () ; double fepjsficgrlrdyaklmoz = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double fteerxkoykczpigypicm = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double bmpshgpngokgqeiutpqo = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( fepjsficgrlrdyaklmoz + fteerxkoykczpigypicm ) + bmpshgpngokgqeiutpqo ) / 3 ; return RapAnalyzer.fireindex ; }
× fix_prediction_before: { double t = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double w = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double y = ( RoadAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( t + w ) + y ) / 3 ; return RoadAnalyzer.fireindex ; }
× fix_prediction_after: { double fepjsficgrlrdyaklmoz = ( RapAnalyzer . sentenceanalyzer ( sent1 ) ) * 10 ; double fteerxkoykczpigypicm = ( RapAnalyzer . wordlength ( sent1 ) ) * 0.5 ; double bmpshgpngokgqeiutpqo = ( RapAnalyzer . wordvariety ( sent1 ) ) * 0.5 ; RapAnalyzer.fireindex = ( ( fepjsficgrlrdyaklmoz + fteerxkoykczpigypicm ) + bmpshgpngokgqeiutpqo ) / 3 ; return RoadAnalyzer.fireindex ; }

line_index: 814
bug_before_refactoring: { int idx = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( idx ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } map . remove ( idx ) ; } <s> public void remove ( small.data.structures.Vec2 gridPos ) { int idx = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( idx ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } map . remove ( idx ) ; } <s> Fix bug re relative origin failing to update when top left most square is removed from buffer
bug_after_refactoring: { int wskxtpnlixhlmmlihffl = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( wskxtpnlixhlmmlihffl ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } map . remove ( wskxtpnlixhlmmlihffl ) ; } <s> public void remove ( small.data.structures.Vec2 gridPos ) { int wskxtpnlixhlmmlihffl = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( wskxtpnlixhlmmlihffl ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } map . remove ( wskxtpnlixhlmmlihffl ) ; } <s> Fix bug re relative origin failing to update when top left most square is removed from buffer
fix_before_refactoring: { int idx = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( idx ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } map . remove ( idx ) ; if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } }
fix_after_refactoring: { int wskxtpnlixhlmmlihffl = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( wskxtpnlixhlmmlihffl ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } map . remove ( wskxtpnlixhlmmlihffl ) ; if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } }
× fix_prediction_before: { int idx = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( idx ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } map . remove ( idx ) ; }
× fix_prediction_after: { int wskxtpnlixhlmmlihffl = ( ( gridPos.y ) * ( gridRows ) ) + ( gridPos.x ) ; if ( ! ( map . containsKey ( wskxtpnlixhlmmlihffl ) ) ) { log . info ( "Could not remove. Key is not in buffer." ) ; return; } if ( gridPos . equals ( relativeOrigin ) ) { log . info ( "Removing current relative origin requires the relative origin to be updated." ) ; log . info ( "Updating relative origin..." ) ; this . updateRelativeOrigin () ; } map . remove ( wskxtpnlixhlmmlihffl ) ; }

line_index: 815
bug_before_refactoring: { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int id = ( ( int ) ( java.lang.Math . random () ) ) * 100 ; try { id = rs . getInt ( "ID" ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return id ; } <s> public int getMaxID () { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int id = ( ( int ) ( java.lang.Math . random () ) ) * 100 ; try { id = rs . getInt ( "ID" ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return id ; } <s> Fixed shitton of bugs
bug_after_refactoring: { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int kssllvxglvvltwxlalmb = ( ( int ) ( java.lang.Math . random () ) ) * 100 ; try { kssllvxglvvltwxlalmb = rs . getInt ( "ID" ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return kssllvxglvvltwxlalmb ; } <s> public int getMaxID () { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int kssllvxglvvltwxlalmb = ( ( int ) ( java.lang.Math . random () ) ) * 100 ; try { kssllvxglvvltwxlalmb = rs . getInt ( "ID" ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return kssllvxglvvltwxlalmb ; } <s> Fixed shitton of bugs
fix_before_refactoring: { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int id = - 1 ; try { id = rs . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return id ; }
fix_after_refactoring: { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int kssllvxglvvltwxlalmb = - 1 ; try { kssllvxglvvltwxlalmb = rs . getInt ( 1 ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return kssllvxglvvltwxlalmb ; }
× fix_prediction_before: { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int id = rs . getInt ( "ID" ) ; try { id = rs . getInt ( "ID" ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return id ; }
× fix_prediction_after: { java.lang.String sql = "SELECT MAX(ID) FROM CONTACTS" ; java.sql.ResultSet rs = executeQuery ( sql ) ; int kssllvxglvvltwxlalmb = ( ( int ) ( java.lang.Math . random () ) ) * 100 ; try { kssllvxglvvltwxlalmb = rs . getInt ( "ID" ) ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return kssllvxglvvltwxlalmb ; }

line_index: 816
bug_before_refactoring: { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; int position = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + position ) ) ; mBinding.pager . setCurrentItem ( position ) ; } <s> @ java.lang.Override protected void onPostExecute ( ca.rmen.android.scrumchatter.meeting.detail.MeetingPagerAdapter result ) { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; int position = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + position ) ) ; mBinding.pager . setCurrentItem ( position ) ; } <s> Fixing last Android Studio code inspection issues!
bug_after_refactoring: { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; int oqiqhvwlepzdbmroumlm = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + oqiqhvwlepzdbmroumlm ) ) ; mBinding.pager . setCurrentItem ( oqiqhvwlepzdbmroumlm ) ; } <s> @ java.lang.Override protected void onPostExecute ( ca.rmen.android.scrumchatter.meeting.detail.MeetingPagerAdapter result ) { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; int oqiqhvwlepzdbmroumlm = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + oqiqhvwlepzdbmroumlm ) ) ; mBinding.pager . setCurrentItem ( oqiqhvwlepzdbmroumlm ) ; } <s> Fixing last Android Studio code inspection issues!
fix_before_refactoring: { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; if ( ( mMeetingId ) >= 0 ) { int position = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + position ) ) ; mBinding.pager . setCurrentItem ( position ) ; } }
fix_after_refactoring: { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; if ( ( mMeetingId ) >= 0 ) { int oqiqhvwlepzdbmroumlm = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + oqiqhvwlepzdbmroumlm ) ) ; mBinding.pager . setCurrentItem ( oqiqhvwlepzdbmroumlm ) ; } }
× fix_prediction_before: { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; int position = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; mBinding.pager . setCurrentItem ( position ) ; }
× fix_prediction_after: { mMeetingPagerAdapter = result ; mBinding.activityLoading . setVisibility ( View.GONE ) ; mBinding.pager . setAdapter ( mMeetingPagerAdapter ) ; int oqiqhvwlepzdbmroumlm = mMeetingPagerAdapter . getPositionForMeetingId ( mMeetingId ) ; ca.rmen.android.scrumchatter.util.Log . v ( TAG , ( ( ( "meeting " + ( mMeetingId ) ) + " is on page " ) + oqiqhvwlepzdbmroumlm ) ) ; mBinding.pager . setCurrentItem ( oqiqhvwlepzdbmroumlm ) ; }

line_index: 817
bug_before_refactoring: { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char input = 'N' ; while ( input != 'Y' ) { java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; input = read . nextLine () . charAt ( 0 ) ; java.lang.System.out . println ( input ) ; } read . close () ; create . terminate () ; } <s> public void run () { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char input = 'N' ; while ( input != 'Y' ) { java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; input = read . nextLine () . charAt ( 0 ) ; java.lang.System.out . println ( input ) ; } read . close () ; create . terminate () ; } <s> Fixxed a issue in handler.
bug_after_refactoring: { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char mzxnlfwhfeymwhfelxns = 'N' ; while ( mzxnlfwhfeymwhfelxns != 'Y' ) { java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; mzxnlfwhfeymwhfelxns = read . nextLine () . charAt ( 0 ) ; java.lang.System.out . println ( mzxnlfwhfeymwhfelxns ) ; } read . close () ; create . terminate () ; } <s> public void run () { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char mzxnlfwhfeymwhfelxns = 'N' ; while ( mzxnlfwhfeymwhfelxns != 'Y' ) { java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; mzxnlfwhfeymwhfelxns = read . nextLine () . charAt ( 0 ) ; java.lang.System.out . println ( mzxnlfwhfeymwhfelxns ) ; } read . close () ; create . terminate () ; } <s> Fixxed a issue in handler.
fix_before_refactoring: { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char input = 'N' ; java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; input = read . nextLine () . charAt ( 0 ) ; while ( input != 'Y' ) { input = read . nextLine () . charAt ( 0 ) ; } read . close () ; create . terminate () ; }
fix_after_refactoring: { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char mzxnlfwhfeymwhfelxns = 'N' ; java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; mzxnlfwhfeymwhfelxns = read . nextLine () . charAt ( 0 ) ; while ( mzxnlfwhfeymwhfelxns != 'Y' ) { mzxnlfwhfeymwhfelxns = read . nextLine () . charAt ( 0 ) ; } read . close () ; create . terminate () ; }
× fix_prediction_before: { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char input = 'N' ; while ( input != 'Y' ) { java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; input = read . nextLine () . charAt ( 0 ) ; java.lang.System.out . println ( input ) ; } read . close () ; create . terminate () ; }
× fix_prediction_after: { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; while ( mzxnlfwhfeymwhfelxns != 'Y' ) { java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; mzxnlfwhfeymwhfelxns = read . nextLine () . charAt ( 0 ) ; java.lang.System.out . println ( mzxnlfwhfeymwhfelxns ) ; } read . close () ; create . terminate () ; }

line_index: 819
bug_before_refactoring: private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; if ( ( hxSoundEngines ) != null ) { int i = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( i ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + i ) + ") is released." ) ) ; i ++ ; } hxSoundEngines = null ; } com.huhx0015.hxaudio.audio.HXSound.hxSound = null ; } <s> private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; if ( ( hxSoundEngines ) != null ) { int i = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( i ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + i ) + ") is released." ) ) ; i ++ ; } hxSoundEngines = null ; } com.huhx0015.hxaudio.audio.HXSound.hxSound = null ; } <s> HXMusic / HXSound: Fixed issue with enable() retaining enabled/disabled state.
bug_after_refactoring: private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; if ( ( hxSoundEngines ) != null ) { int tlanwknfzvxmuucbczlr = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( tlanwknfzvxmuucbczlr ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + tlanwknfzvxmuucbczlr ) + ") is released." ) ) ; tlanwknfzvxmuucbczlr ++ ; } hxSoundEngines = null ; } com.huhx0015.hxaudio.audio.HXSound.hxSound = null ; } <s> private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; if ( ( hxSoundEngines ) != null ) { int tlanwknfzvxmuucbczlr = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( tlanwknfzvxmuucbczlr ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + tlanwknfzvxmuucbczlr ) + ") is released." ) ) ; tlanwknfzvxmuucbczlr ++ ; } hxSoundEngines = null ; } com.huhx0015.hxaudio.audio.HXSound.hxSound = null ; } <s> HXMusic / HXSound: Fixed issue with enable() retaining enabled/disabled state.
fix_before_refactoring: private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; int i = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( i ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + i ) + ") is released." ) ) ; i ++ ; } hxSoundEngines = null ; }
fix_after_refactoring: private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; int tlanwknfzvxmuucbczlr = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( tlanwknfzvxmuucbczlr ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + tlanwknfzvxmuucbczlr ) + ") is released." ) ) ; tlanwknfzvxmuucbczlr ++ ; } hxSoundEngines = null ; }
× fix_prediction_before: private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; if ( ( hxSoundEngines ) != null ) { int i = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( i ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + i ) + ") is released." ) ) ; i ++ ; } hxSoundEngines = null ; } com.huhx0015.hxaudio.audio.HXSound.hxSound = null ; }
× fix_prediction_after: private void release () { com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , "RELEASE: release(): Releasing all HXSoundEngine instances..." ) ; if ( ( hxSoundEngines ) != null ) { int tlanwknfzvxmuucbczlr = 0 ; for ( int x : new int [ numberOfEngines ] ) { hxSoundEngines . get ( tlanwknfzvxmuucbczlr ) . release () ; com.huhx0015.hxaudio.utils.HXLog . d ( com.huhx0015.hxaudio.audio.HXSound.LOG_TAG , ( ( "RELEASE: release(): HXSoundEngine (" + tlanwknfzvxmuucbczlr ) + ") is released." ) ) ; tlanwknfzvxmuucbczlr ++ ; } hxSoundEngines = null ; } com.huhx0015.hxaudio.audio.H

line_index: 820
bug_before_refactoring: { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; int currentPos = this . chunkId ; ( this . chunkId ) ++ ; while ( true ) { if ( currentPos >= ( list . size () ) ) { return chunkList ; } else { key . set ( currentPos ) ; chunkList . add ( nextKeyValue ( currentPos ) ) ; } } } <s> public java.util.List < com.ryan.pojo.ChunkInfo > fsp () { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; int currentPos = this . chunkId ; ( this . chunkId ) ++ ; while ( true ) { if ( currentPos >= ( list . size () ) ) { return chunkList ; } else { key . set ( currentPos ) ; chunkList . add ( nextKeyValue ( currentPos ) ) ; } } } <s> fix hafile bugs
bug_after_refactoring: { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; int qzuxqqnxxteorrvfojqj = this . chunkId ; ( this . chunkId ) ++ ; while ( true ) { if ( qzuxqqnxxteorrvfojqj >= ( list . size () ) ) { return chunkList ; } else { key . set ( qzuxqqnxxteorrvfojqj ) ; chunkList . add ( nextKeyValue ( qzuxqqnxxteorrvfojqj ) ) ; } } } <s> public java.util.List < com.ryan.pojo.ChunkInfo > fsp () { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; int qzuxqqnxxteorrvfojqj = this . chunkId ; ( this . chunkId ) ++ ; while ( true ) { if ( qzuxqqnxxteorrvfojqj >= ( list . size () ) ) { return chunkList ; } else { key . set ( qzuxqqnxxteorrvfojqj ) ; chunkList . add ( nextKeyValue ( qzuxqqnxxteorrvfojqj ) ) ; } } } <s> fix hafile bugs
fix_before_refactoring: { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; while ( true ) { int currentPos = this . chunkId ; ( this . chunkId ) ++ ; if ( currentPos >= ( list . size () ) ) { return chunkList ; } else { key . set ( currentPos ) ; chunkList . add ( nextKeyValue ( currentPos ) ) ; } } }
fix_after_refactoring: { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; while ( true ) { int qzuxqqnxxteorrvfojqj = this . chunkId ; ( this . chunkId ) ++ ; if ( qzuxqqnxxteorrvfojqj >= ( list . size () ) ) { return chunkList ; } else { key . set ( qzuxqqnxxteorrvfojqj ) ; chunkList . add ( nextKeyValue ( qzuxqqnxxteorrvfojqj ) ) ; } } }
× fix_prediction_before: { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; int currentPos = this . chunkId ; ( this . chunkId ) ++ ; while ( true ) { chunkList . add ( currentPos ) ; chunkList . add ( nextKeyValue ( currentPos ) ) ; } return size ; }
× fix_prediction_after: { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; int qzuxqqnxxteorrvfoj = this . chunkId ; ( this . chunkId ) ++ ; while ( true ) { if ( qzuxqqnxxteorrvfojqj >= ( list . size () ) ) { return chunkList ; } else { key . set ( qzuxqqnxxteorrvfojqj ) ; chunkList . add ( nextKeyValue ( qzuxqqnxxteorrvfojqj ) ) ; } } return size ; }

line_index: 822
bug_before_refactoring: { boolean prevState = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( prevState ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } markDirty () ; return isMultiblockStructurePresent () ; } <s> public boolean checkMultiblock () { boolean prevState = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( prevState ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } markDirty () ; return isMultiblockStructurePresent () ; } <s> - NodeManipulator: Added effects  fixxed inventory bug
bug_after_refactoring: { boolean ytlmcmfvmxgrhbthwkvy = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( ytlmcmfvmxgrhbthwkvy ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } markDirty () ; return isMultiblockStructurePresent () ; } <s> public boolean checkMultiblock () { boolean ytlmcmfvmxgrhbthwkvy = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( ytlmcmfvmxgrhbthwkvy ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } markDirty () ; return isMultiblockStructurePresent () ; } <s> - NodeManipulator: Added effects  fixxed inventory bug
fix_before_refactoring: { boolean prevState = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( prevState ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } return isMultiblockStructurePresent () ; }
fix_after_refactoring: { boolean ytlmcmfvmxgrhbthwkvy = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( ytlmcmfvmxgrhbthwkvy ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } return isMultiblockStructurePresent () ; }
× fix_prediction_before: { boolean prevState = isMultiblockStructurePresent () ; if ( prevState ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } } else { patternToCheck = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; }
× fix_prediction_after: { boolean ytlmcmfvmxgrhbthwkvy = isMultiblockStructurePresent () ; if ( ytlmcmfvmxgrhbthwkvy ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } return this ; }

line_index: 823
bug_before_refactoring: { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; } <s> public org.avuna.httpd.util.unixsocket.UnixSocket accept ( ) throws java.io.IOException { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; } <s> Fixed unix sockets  problem was freeing stack memory.
bug_after_refactoring: { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; } <s> public org.avuna.httpd.util.unixsocket.UnixSocket accept ( ) throws java.io.IOException { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; } <s> Fixed unix sockets  problem was freeing stack memory.
fix_before_refactoring: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; return us ; }
fix_after_refactoring: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; org.avuna.httpd.util.unixsocket.UnixSocket us = new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigszbjpjmjbudpvln ) ; return us ; }
× fix_prediction_before: { if ( ! ( bound ) ) bind () ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int i = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; return new org.avuna.httpd.util.unixsocket.UnixSocket ( file , i ) ; }
× fix_prediction_after: { if ( ! ( bound ) ) bind () ; org.avuna.httpd.util.Logger . log ( "accepting" ) ; java.lang.String nsfd = org.avuna.httpd.util.CLib . accept ( sockfd ) ; org.avuna.httpd.util.Logger . log ( nsfd ) ; int pvmigszbjpjmjbudpvln = java.lang.Integer . parseInt ( nsfd . substring ( 0 , nsfd . indexOf ( "/" ) ) ) ; nsfd = nsfd . substring ( ( ( nsfd . indexOf ( "/" ) ) + 1 ) ) ; return new org.avuna.httpd.util.unixsocket.UnixSocket ( file , pvmigsjpjpjmjbudpvln ) ; }

line_index: 824
bug_before_refactoring: org.usfirst.frc.team68.robot.RobotMap.intakePositions [ index ] <s> protected void execute () { int index ; index = ( org.usfirst.frc.team68.robot.MathUtil . findClosestIndex ( RobotMap.intakePositions , org.usfirst.frc.team68.robot.subsystems.Intake . getIntake () . getIntakeArm () ) ) + 1 ; if ( index > ( ( RobotMap.intakePositions.length ) - 1 ) ) index = ( RobotMap.intakePositions.length ) - 1 ; org.usfirst.frc.team68.robot.subsystems.Intake . getIntake () . setIntakeArm ( org.usfirst.frc.team68.robot.RobotMap.intakePositions [ index ] ) ; isDone = true ; } <s> Fix syntax error in last commit. Ooops!
bug_after_refactoring: org.usfirst.frc.team68.robot.RobotMap.intakePositions [ zcukwbjlicgxdcdiwwcw ] <s> protected void execute () { int index ; index = ( org.usfirst.frc.team68.robot.MathUtil . findClosestIndex ( RobotMap.intakePositions , org.usfirst.frc.team68.robot.subsystems.Intake . getIntake () . getIntakeArm () ) ) + 1 ; if ( index > ( ( RobotMap.intakePositions.length ) - 1 ) ) index = ( RobotMap.intakePositions.length ) - 1 ; org.usfirst.frc.team68.robot.subsystems.Intake . getIntake () . setIntakeArm ( org.usfirst.frc.team68.robot.RobotMap.intakePositions [ zcukwbjlicgxdcdiwwcw ] ) ; isDone = true ; } <s> Fix syntax error in last commit. Ooops!
fix_before_refactoring: org.usfirst.frc.team68.robot.RobotMap.intakePositions [ ( index ++ ) ]
fix_after_refactoring: org.usfirst.frc.team68.robot.RobotMap.intakePositions [ ( zcukwbjlicgxdcdiwwcw ++ ) ]
× fix_prediction_before: org.usfirst.frc.team68.robot.RobotMap.intakePositions [ index ]
× fix_prediction_after: org.usfirst.frc.team68.robot.RobotMap.intakePositions [ ( zcukwbjlicgxdcdiwwcw ] - 1 ) ]

line_index: 825
bug_before_refactoring: { int j = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { j = ( ( j + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; int temp = S [ i ] ; S [ i ] = S [ j ] ; S [ j ] = temp ; } } <s> public void KSA () { int j = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { j = ( ( j + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; int temp = S [ i ] ; S [ i ] = S [ j ] ; S [ j ] = temp ; } } <s> Fixed errors but no output
bug_after_refactoring: { int eekgeebbndobofjwffde = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { eekgeebbndobofjwffde = ( ( eekgeebbndobofjwffde + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; int xyctqtnaeycjaxlktidm = S [ i ] ; S [ i ] = S [ eekgeebbndobofjwffde ] ; S [ eekgeebbndobofjwffde ] = xyctqtnaeycjaxlktidm ; } } <s> public void KSA () { int eekgeebbndobofjwffde = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { eekgeebbndobofjwffde = ( ( eekgeebbndobofjwffde + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; int xyctqtnaeycjaxlktidm = S [ i ] ; S [ i ] = S [ eekgeebbndobofjwffde ] ; S [ eekgeebbndobofjwffde ] = xyctqtnaeycjaxlktidm ; } } <s> Fixed errors but no output
fix_before_refactoring: { int j = 0 ; int temp = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { j = ( ( j + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; temp = S [ i ] ; S [ i ] = S [ j ] ; S [ j ] = temp ; temp = 0 ; } }
fix_after_refactoring: { int eekgeebbndobofjwffde = 0 ; int xyctqtnaeycjaxlktidm = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { eekgeebbndobofjwffde = ( ( eekgeebbndobofjwffde + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; xyctqtnaeycjaxlktidm = S [ i ] ; S [ i ] = S [ eekgeebbndobofjwffde ] ; S [ eekgeebbndobofjwffde ] = xyctqtnaeycjaxlktidm ; xyctqtnaeycjaxlktidm = 0 ; } }
× fix_prediction_before: { for ( int i = 0 ; i < 256 ; i ++ ) { j = ( ( j + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; int temp = S [ i ] ; S [ i ] = S [ j ] ; S [ j ] = temp ; } }
× fix_prediction_after: { int eekgeebbndobofjwffde = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { eekgeebbndobofjwffde = ( ( eekgeebbndobofjwffde + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; int xyctqtnaeycjaxlktidm = S [ i ] ; S [ eekgeebbndobofjwffde ] ; S [ eekgeebbndobofjwffde ] = xyctqtnaeycjaxlktidm ; } }

line_index: 826
bug_before_refactoring: { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] array = new double [ 7 ] ; int count = 0 ; while ( count != 6 ) { array [ count ] = 10 * count ; count ++ ; } double weekly = step . stepAvgWeek ( array ) ; assertTrue ( ( ( weekly == 30.0 ) || ( weekly == 30 ) ) ) ; } <s> @ org.junit.Test public void checkAvg ( ) throws java.lang.Exception { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] array = new double [ 7 ] ; int count = 0 ; while ( count != 6 ) { array [ count ] = 10 * count ; count ++ ; } double weekly = step . stepAvgWeek ( array ) ; assertTrue ( ( ( weekly == 30.0 ) || ( weekly == 30 ) ) ) ; } <s> [Fixed] Test showed an error in the code (EC)  Was averaging 6 days instead of 7
bug_after_refactoring: { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] navrzaagcsaongjhvgcf = new double [ 7 ] ; int ftlusxgxjxhqiherhtup = 0 ; while ( ftlusxgxjxhqiherhtup != 6 ) { navrzaagcsaongjhvgcf [ ftlusxgxjxhqiherhtup ] = 10 * ftlusxgxjxhqiherhtup ; ftlusxgxjxhqiherhtup ++ ; } double svgvmytvrvkgmitkzdjs = step . stepAvgWeek ( navrzaagcsaongjhvgcf ) ; assertTrue ( ( ( svgvmytvrvkgmitkzdjs == 30.0 ) || ( svgvmytvrvkgmitkzdjs == 30 ) ) ) ; } <s> @ org.junit.Test public void checkAvg ( ) throws java.lang.Exception { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] navrzaagcsaongjhvgcf = new double [ 7 ] ; int ftlusxgxjxhqiherhtup = 0 ; while ( ftlusxgxjxhqiherhtup != 6 ) { navrzaagcsaongjhvgcf [ ftlusxgxjxhqiherhtup ] = 10 * ftlusxgxjxhqiherhtup ; ftlusxgxjxhqiherhtup ++ ; } double svgvmytvrvkgmitkzdjs = step . stepAvgWeek ( navrzaagcsaongjhvgcf ) ; assertTrue ( ( ( svgvmytvrvkgmitkzdjs == 30.0 ) || ( svgvmytvrvkgmitkzdjs == 30 ) ) ) ; } <s> [Fixed] Test showed an error in the code (EC)  Was averaging 6 days instead of 7
fix_before_refactoring: { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] array = new double [ 7 ] ; int count = 0 ; while ( count != 7 ) { array [ count ] = 10 * count ; count ++ ; } double weekly = step . stepAvgWeek ( array ) ; java.lang.System.out . println ( weekly ) ; assertTrue ( ( ( weekly == 30.0 ) || ( weekly == 30 ) ) ) ; }
fix_after_refactoring: { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] navrzaagcsaongjhvgcf = new double [ 7 ] ; int ftlusxgxjxhqiherhtup = 0 ; while ( ftlusxgxjxhqiherhtup != 7 ) { navrzaagcsaongjhvgcf [ ftlusxgxjxhqiherhtup ] = 10 * ftlusxgxjxhqiherhtup ; ftlusxgxjxhqiherhtup ++ ; } double svgvmytvrvkgmitkzdjs = step . stepAvgWeek ( navrzaagcsaongjhvgcf ) ; java.lang.System.out . println ( svgvmytvrvkgmitkzdjs ) ; assertTrue ( ( ( svgvmytvrvkgmitkzdjs == 30.0 ) || ( svgvmytvrvkgmitkzdjs == 30 ) ) ) ; }
× fix_prediction_before: { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] array = new double [ 7 ] ; int count = 0 ; while ( count != 6 ) { array [ count ] = 10 * count ; count ++ ; } double weekly = step . stepAvgWeek ( array ) ; assertTrue ( ( ( weekly == 30.0 ) || ( weekly == 30 ) ) ) ; }
× fix_prediction_after: { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; int ftlusxgxjxhqicf = new double [ 7 ] ; while ( ftlusxgxjxhqiherhtup != 6 ) { navrzaagcsaongjhvgcf [ ftlusxgxjxhqiherhtup ] = 10 * ftlusxgxjxhqiherhtup ; ftlusxgxjxhqiherhtup ++ ; } double svgvmytvrvkgmitkzdjs = step . stepAvgWeek ( navrzaagcsaongjhvgcf ) ; assertTrue ( ( ( svgvmytvrvkgmitkzdjs == 30.0 ) || ( svgvmytvrvkgmitkzdjs == 30 ) ) ) ; }

line_index: 827
bug_before_refactoring: public int lineClearCalc ( int linesCleared ) { int score = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; return score * ( pointsPerLine ) ; } <s> public int lineClearCalc ( int linesCleared ) { int score = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; return score * ( pointsPerLine ) ; } <s> Fixed Gameover issues and down arrow scoring
bug_after_refactoring: public int lineClearCalc ( int linesCleared ) { int mazwpkzzilhuwkzibbxs = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; return mazwpkzzilhuwkzibbxs * ( pointsPerLine ) ; } <s> public int lineClearCalc ( int linesCleared ) { int mazwpkzzilhuwkzibbxs = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; return mazwpkzzilhuwkzibbxs * ( pointsPerLine ) ; } <s> Fixed Gameover issues and down arrow scoring
fix_before_refactoring: public int lineClearCalc ( int linesCleared ) { int score = 0 ; if ( linesCleared > 0 ) { score = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; } return score * ( pointsPerLine ) ; }
fix_after_refactoring: public int lineClearCalc ( int linesCleared ) { int mazwpkzzilhuwkzibbxs = 0 ; if ( linesCleared > 0 ) { mazwpkzzilhuwkzibbxs = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; } return mazwpkzzilhuwkzibbxs * ( pointsPerLine ) ; }
× fix_prediction_before: public int lineClearCalc ( int linesCleared ) { int score = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; return score * ( pointsPerLine ) ; }
× fix_prediction_after: public int lineClearCalc ( int linesCleared ) { int mazwpkzzilhuwkzibbxs = ( ( int ) ( ( ( ( ( java.lang.Math . pow ( linesCleared , 3 ) ) / 6.0 ) - ( java.lang.Math . pow ( linesCleared , 2 ) ) ) + ( ( 23 * linesCleared ) / 6.0 ) ) - 2 ) ) ; return mazwpkzzilhuwkzibbxs * ( pointsPerLine ) ; }

line_index: 828
bug_before_refactoring: private static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int start ) { java.lang.String s = set [ start ] ; int i = 0 ; for ( java.lang.String part : set ) { if ( i > start ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; i ++ ; } return s ; } <s> private static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int start ) { java.lang.String s = set [ start ] ; int i = 0 ; for ( java.lang.String part : set ) { if ( i > start ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; i ++ ; } return s ; } <s> Various bugfixes and improvements
bug_after_refactoring: private static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int start ) { java.lang.String s = set [ start ] ; int pqezemzoimibrharovka = 0 ; for ( java.lang.String part : set ) { if ( pqezemzoimibrharovka > start ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; pqezemzoimibrharovka ++ ; } return s ; } <s> private static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int start ) { java.lang.String s = set [ start ] ; int pqezemzoimibrharovka = 0 ; for ( java.lang.String part : set ) { if ( pqezemzoimibrharovka > start ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; pqezemzoimibrharovka ++ ; } return s ; } <s> Various bugfixes and improvements
fix_before_refactoring: private static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int offset ) { java.lang.String s = set [ offset ] ; int i = 0 ; for ( java.lang.String part : set ) { if ( i > offset ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; i ++ ; } return s ; }
fix_after_refactoring: private static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int offset ) { java.lang.String s = set [ offset ] ; int pqezemzoimibrharovka = 0 ; for ( java.lang.String part : set ) { if ( pqezemzoimibrharovka > offset ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; pqezemzoimibrharovka ++ ; } return s ; }
× fix_prediction_before: public static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int start ) { java.lang.String s = set [ start ] ; int i = 0 ; for ( java.lang.String part : set ) { if ( i > start ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; i ++ ; } return s ; }
× fix_prediction_after: public static java.lang.String join ( java.lang.String [] set , java.lang.String medium , int start ) { java.lang.String s = set [ start ] ; int pqezemzoimibrharovka = 0 ; for ( java.lang.String part : set ) { if ( pqezemzoimibrharovka > start ) s = ( ( ( s + " " ) + medium ) + " " ) + part ; pqezemzoimibrharovka ++ ; } return s ; }

line_index: 829
bug_before_refactoring: { int fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( fileNameIndex == ( - 1 ) ) { fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( fileNameIndex ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; } <s> private java.lang.String setupDstByDirectory ( java.lang.String directory ) { int fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( fileNameIndex == ( - 1 ) ) { fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( fileNameIndex ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; } <s> Fixed a bug with the CommandLine class after running some unit tests.
bug_after_refactoring: { int uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( uuqvrffbiaaunnzyapgh == ( - 1 ) ) { uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( uuqvrffbiaaunnzyapgh ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; } <s> private java.lang.String setupDstByDirectory ( java.lang.String directory ) { int uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( uuqvrffbiaaunnzyapgh == ( - 1 ) ) { uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( uuqvrffbiaaunnzyapgh ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; } <s> Fixed a bug with the CommandLine class after running some unit tests.
fix_before_refactoring: { int fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( fileNameIndex == ( - 1 ) ) { fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } if ( fileNameIndex == ( - 1 ) ) { fileNameIndex = 0 ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( fileNameIndex ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; }
fix_after_refactoring: { int uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( uuqvrffbiaaunnzyapgh == ( - 1 ) ) { uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } if ( uuqvrffbiaaunnzyapgh == ( - 1 ) ) { uuqvrffbiaaunnzyapgh = 0 ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( uuqvrffbiaaunnzyapgh ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; }
× fix_prediction_before: { int fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( fileNameIndex == ( - 1 ) ) { fileNameIndex = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( fileNameIndex ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; }
× fix_prediction_after: { int uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "/" ) ; if ( uuqvrffbiaaunnzyapgh == ( - 1 ) ) { uuqvrffbiaaunnzyapgh = VCF_FILE_PATH . lastIndexOf ( "\\" ) ; } java.lang.String output = directory + ( VCF_FILE_PATH . substring ( uuqvrffbiaaunnzyapgh ) ) ; return ( output . substring ( 0 , ( ( output . length () ) - 3 ) ) ) + "csv" ; }

line_index: 831
bug_before_refactoring: { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] chars = sune.util.ssdf2.SSDF . formatContent ( content . toCharArray () ) ; return ( ( sune.util.ssdf2.SSDCollection ) ( sune.util.ssdf2.SSDF . readObjects ( chars , 0 , chars.length , null , false , false ) . get ( null ) ) ) ; } <s> public static final sune.util.ssdf2.SSDCollection read ( java.lang.String content ) { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] chars = sune.util.ssdf2.SSDF . formatContent ( content . toCharArray () ) ; return ( ( sune.util.ssdf2.SSDCollection ) ( sune.util.ssdf2.SSDF . readObjects ( chars , 0 , chars.length , null , false , false ) . get ( null ) ) ) ; } <s> Update no. 11  Reading and writing process has been sped up by about 20% and also potentially works in so-called online mode. However  the online mode is not yet implemented. Improvements. Various bug fixes.
bug_after_refactoring: { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] vefubwtfzlwcbpfwmyac = sune.util.ssdf2.SSDF . formatContent ( content . toCharArray () ) ; return ( ( sune.util.ssdf2.SSDCollection ) ( sune.util.ssdf2.SSDF . readObjects ( vefubwtfzlwcbpfwmyac , 0 , vefubwtfzlwcbpfwmyac.length , null , false , false ) . get ( null ) ) ) ; } <s> public static final sune.util.ssdf2.SSDCollection read ( java.lang.String content ) { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] vefubwtfzlwcbpfwmyac = sune.util.ssdf2.SSDF . formatContent ( content . toCharArray () ) ; return ( ( sune.util.ssdf2.SSDCollection ) ( sune.util.ssdf2.SSDF . readObjects ( vefubwtfzlwcbpfwmyac , 0 , vefubwtfzlwcbpfwmyac.length , null , false , false ) . get ( null ) ) ) ; } <s> Update no. 11  Reading and writing process has been sped up by about 20% and also potentially works in so-called online mode. However  the online mode is not yet implemented. Improvements. Various bug fixes.
fix_before_refactoring: { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] chars = sune.util.ssdf2.SSDF . format ( content . toCharArray () ) ; return sune.util.ssdf2.SSDF . readObjects ( chars , 0 , chars.length ) ; }
fix_after_refactoring: { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] vefubwtfzlwcbpfwmyac = sune.util.ssdf2.SSDF . format ( content . toCharArray () ) ; return sune.util.ssdf2.SSDF . readObjects ( vefubwtfzlwcbpfwmyac , 0 , vefubwtfzlwcbpfwmyac.length ) ; }
× fix_prediction_before: { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } char [] chars = sune.util.ssdf2.SSDF . formatContent ( content . toCharArray () ) ; return ( ( sune.util.ssdf2.SSDCollection ) ( sune.util.ssdf2.SSDF . readObjects ( chars , 0 , chars.length , null , false , false ) . get ( null ) ) ) ; }
× fix_prediction_after: { if ( content == null ) { throw new java.lang.IllegalArgumentException ( "Content cannot be null!" ) ; } return ( ( sune.util.ssdf2.SSDCollection ) ( sune.util.ssdf2.SSDF . readObjects ( vefubwtfzlwcbpfwmyac , 0 , vefubwtfzlwcbpfwmyac.length , null , false , false ) . get ( null ) ) ) ; }

line_index: 832
bug_before_refactoring: { java.lang.String searchUsername ; java.lang.String username = searchUsername = user . getUsername () ; int i = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { i ++ ; searchUsername = username + i ; } if ( i > 0 ) { user . setUsername ( searchUsername ) ; } } <s> private void checkUsername ( com.musicforall.model.User user ) { java.lang.String searchUsername ; java.lang.String username = searchUsername = user . getUsername () ; int i = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { i ++ ; searchUsername = username + i ; } if ( i > 0 ) { user . setUsername ( searchUsername ) ; } } <s> fixed codacy issues
bug_after_refactoring: { java.lang.String searchUsername ; java.lang.String username = searchUsername = user . getUsername () ; int xhvzvrjvsmajagqaxkxn = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { xhvzvrjvsmajagqaxkxn ++ ; searchUsername = username + xhvzvrjvsmajagqaxkxn ; } if ( xhvzvrjvsmajagqaxkxn > 0 ) { user . setUsername ( searchUsername ) ; } } <s> private void checkUsername ( com.musicforall.model.User user ) { java.lang.String searchUsername ; java.lang.String username = searchUsername = user . getUsername () ; int xhvzvrjvsmajagqaxkxn = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { xhvzvrjvsmajagqaxkxn ++ ; searchUsername = username + xhvzvrjvsmajagqaxkxn ; } if ( xhvzvrjvsmajagqaxkxn > 0 ) { user . setUsername ( searchUsername ) ; } } <s> fixed codacy issues
fix_before_refactoring: { java.lang.String searchUsername ; final java.lang.String username = user . getUsername () ; searchUsername = username ; int i = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { i ++ ; searchUsername = username + i ; } if ( i > 0 ) { user . setUsername ( searchUsername ) ; } }
fix_after_refactoring: { java.lang.String searchUsername ; final java.lang.String username = user . getUsername () ; searchUsername = username ; int xhvzvrjvsmajagqaxkxn = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { xhvzvrjvsmajagqaxkxn ++ ; searchUsername = username + xhvzvrjvsmajagqaxkxn ; } if ( xhvzvrjvsmajagqaxkxn > 0 ) { user . setUsername ( searchUsername ) ; } }
× fix_prediction_before: { java.lang.String searchUsername ; java.lang.String username = searchUsername = user . getUsername () ; int i = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { i ++ ; searchUsername = username + i ; } if ( i > 0 ) { user . setUsername ( searchUsername ) ; } }
× fix_prediction_after: { java.lang.String searchUsername ; java.lang.String username = searchUsername = user . getUsername () ; int xhvzvrjvsmajagqaxkxn = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { xhvzvrjvsmajagqaxkxn ++ ; searchUsername = username + xhvzvrjvsmajagqaxkxn ; } if ( xhvzvrjvsmajagqaxkxn > 0 ) { user . setUsername ( searchUsername ) ; } }

line_index: 833
bug_before_refactoring: ( asciiCount [ i ] ) > 0 <s> public boolean isEveryCharacterUniqueUsingHistogram () { int [] asciiCount = new int [ 128 ] ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { ( asciiCount [ string . charAt ( i ) ] ) ++ ; } for ( int i = 0 ; i < ( asciiCount.length ) ; i ++ ) { if ( ( asciiCount [ i ] ) > 0 ) { return false ; } } return true ; } <s> Fixing a bug
bug_after_refactoring: ( usujkxeuwmyegwqnjhrs [ i ] ) > 0 <s> public boolean isEveryCharacterUniqueUsingHistogram () { int [] asciiCount = new int [ 128 ] ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { ( asciiCount [ string . charAt ( i ) ] ) ++ ; } for ( int i = 0 ; i < ( asciiCount.length ) ; i ++ ) { if ( ( usujkxeuwmyegwqnjhrs [ i ] ) > 0 ) { return false ; } } return true ; } <s> Fixing a bug
fix_before_refactoring: ( asciiCount [ i ] ) > 1
fix_after_refactoring: ( usujkxeuwmyegwqnjhrs [ i ] ) > 1
× fix_prediction_before: ( asciiCount [ i ] ) > ( - 1 )
× fix_prediction_after: ( usujkxeuwmyegwqnjhrs [ i ] ) > ( - 1 )

line_index: 834
bug_before_refactoring: { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int percentage = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; this . progressLabel . setText ( statusMessage ) ; this . progressBar . setValue ( percentage ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; } <s> @ java.lang.Override public void update ( com.flurnamenpuzzle.generator.Observable observable ) { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int percentage = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; this . progressLabel . setText ( statusMessage ) ; this . progressBar . setValue ( percentage ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; } <s> bug fixes on progress card
bug_after_refactoring: { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int ahctzauswgvqcyowjogl = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; this . progressLabel . setText ( statusMessage ) ; this . progressBar . setValue ( ahctzauswgvqcyowjogl ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; } <s> @ java.lang.Override public void update ( com.flurnamenpuzzle.generator.Observable observable ) { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int ahctzauswgvqcyowjogl = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; this . progressLabel . setText ( statusMessage ) ; this . progressBar . setValue ( ahctzauswgvqcyowjogl ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; } <s> bug fixes on progress card
fix_before_refactoring: { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int percentage = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; if ( statusMessage != null ) { this . progressLabel . setText ( statusMessage ) ; } java.lang.System.out . println ( statusMessage ) ; this . progressBar . setValue ( percentage ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; }
fix_after_refactoring: { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int ahctzauswgvqcyowjogl = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; if ( statusMessage != null ) { this . progressLabel . setText ( statusMessage ) ; } java.lang.System.out . println ( statusMessage ) ; this . progressBar . setValue ( ahctzauswgvqcyowjogl ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; }
× fix_prediction_before: { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int percentage = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; this . progressLabel . setText ( statusMessage ) ; this . progressBar . setValue ( percentage ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; }
× fix_prediction_after: { com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel model = ( ( com.flurnamenpuzzle.generator.domain.PuzzleGeneratorModel ) ( observable ) ) ; int ahctzauswgvqcyowjogl = model . getPercentageGenerated () ; java.lang.String statusMessage = model . getStatusMessage () ; this . progressLabel . setText ( statusMessage ) ; this . progressBar . setValue ( ahctzauswgvqcyowjogl ) ; this . progressBar . setString ( ( ( progressBar . getValue () ) + "%" ) ) ; }

line_index: 835
bug_before_refactoring: { final int offset2 = offset - ( this . length () ) ; if ( offset2 >= 0 ) return array . section ( offset2 , length ) ; final int length2 = offset2 + length ; if ( length2 <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - offset2 ) ) . concat ( array . section ( 0 , offset2 ) ) ; } <s> @ java.lang.Override public bee.creative.function.Array section ( final int offset , final int length ) throws java.lang.IllegalArgumentException { final int offset2 = offset - ( this . length () ) ; if ( offset2 >= 0 ) return array . section ( offset2 , length ) ; final int length2 = offset2 + length ; if ( length2 <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - offset2 ) ) . concat ( array . section ( 0 , offset2 ) ) ; } <s> bug fixes in array section fast collect api on array
bug_after_refactoring: { final int bzukrzoxxjjnloaexojq = offset - ( this . length () ) ; if ( bzukrzoxxjjnloaexojq >= 0 ) return array . section ( bzukrzoxxjjnloaexojq , length ) ; final int twvmyegnkjtxutklqrdv = bzukrzoxxjjnloaexojq + length ; if ( twvmyegnkjtxutklqrdv <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - bzukrzoxxjjnloaexojq ) ) . concat ( array . section ( 0 , bzukrzoxxjjnloaexojq ) ) ; } <s> @ java.lang.Override public bee.creative.function.Array section ( final int offset , final int length ) throws java.lang.IllegalArgumentException { final int bzukrzoxxjjnloaexojq = offset - ( this . length () ) ; if ( bzukrzoxxjjnloaexojq >= 0 ) return array . section ( bzukrzoxxjjnloaexojq , length ) ; final int twvmyegnkjtxutklqrdv = bzukrzoxxjjnloaexojq + length ; if ( twvmyegnkjtxutklqrdv <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - bzukrzoxxjjnloaexojq ) ) . concat ( array . section ( 0 , bzukrzoxxjjnloaexojq ) ) ; } <s> bug fixes in array section fast collect api on array
fix_before_refactoring: { final int offset2 = offset - ( this . length () ) ; final int length2 = offset2 + length ; if ( offset2 >= 0 ) return array . section ( offset2 , length ) ; if ( length2 <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - offset2 ) ) . concat ( array . section ( 0 , length2 ) ) ; }
fix_after_refactoring: { final int bzukrzoxxjjnloaexojq = offset - ( this . length () ) ; final int twvmyegnkjtxutklqrdv = bzukrzoxxjjnloaexojq + length ; if ( bzukrzoxxjjnloaexojq >= 0 ) return array . section ( bzukrzoxxjjnloaexojq , length ) ; if ( twvmyegnkjtxutklqrdv <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - bzukrzoxxjjnloaexojq ) ) . concat ( array . section ( 0 , twvmyegnkjtxutklqrdv ) ) ; }
× fix_prediction_before: { final int offset2 = offset - ( this . length () ) ; if ( offset2 >= 0 ) { return array . section ( offset2 , length ) ; } final int length2 = offset2 + length ; if ( length2 <= 0 ) { return super . section ( offset , length ) ; } return super . section ( offset , ( - offset2 ) ) . concat ( array . section ( 0 , offset2 ) ) ; }
× fix_prediction_after: { final int bzukrzoxxjjnloaexojq = offset - ( this . length () ) ; if ( bzukrzoxxjjnloaexojq >= 0 ) return array . section ( bzukrzoxxjjnloaexojq , length ) ; final int twvmyegnkjtxutklqrdv = bzukrzoxxjjnloaexojq + length ; if ( twvmyegnkjtxutklqrdv <= 0 ) return super . section ( offset , length ) ; return super . section ( offset , ( - bzukrzoxxjjnloaexojq ) ) . concat ( array . section ( 0 , bzukrzoxxjjnloaexojq ) ) ; }

line_index: 836
bug_before_refactoring: { final long stopStartTime = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; } <s> @ java.lang.Override public void stop () { org.webrtc.Logging . d ( org.webrtc.Camera1Session.TAG , ( "Stop camera1 session on camera " + ( cameraId ) ) ) ; checkIsOnCameraThread () ; if ( ( state ) != ( org.webrtc.Camera1Session.SessionState.STOPPED ) ) { final long stopStartTime = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; } } <s> Camera1Session: Fix camera sometimes getting stopped twice.  Moves setting state as stopped to stopInternal. Checks that state is not stopped in stopInternal.  BUG=webrtc:7015  Review-Url: https://codereview.webrtc.org/2640093003 Cr-Commit-Position: refs/heads/master@{#16182}
bug_after_refactoring: { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; } <s> @ java.lang.Override public void stop () { org.webrtc.Logging . d ( org.webrtc.Camera1Session.TAG , ( "Stop camera1 session on camera " + ( cameraId ) ) ) ; checkIsOnCameraThread () ; if ( ( state ) != ( org.webrtc.Camera1Session.SessionState.STOPPED ) ) { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; } } <s> Camera1Session: Fix camera sometimes getting stopped twice.  Moves setting state as stopped to stopInternal. Checks that state is not stopped in stopInternal.  BUG=webrtc:7015  Review-Url: https://codereview.webrtc.org/2640093003 Cr-Commit-Position: refs/heads/master@{#16182}
fix_before_refactoring: { final long stopStartTime = java.lang.System . nanoTime () ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; }
fix_after_refactoring: { final long avjkhgupdyfiomzjrwnv = java.lang.System . nanoTime () ; stopInternal () ; final int wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; }
× fix_prediction_before: { final long stopStartTime = java.lang.System . nanoTime () ; state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final int stopTimeMs = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - stopStartTime ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( stopTimeMs ) ; }
× fix_prediction_after: { state = org.webrtc.Camera1Session.SessionState.STOPPED ; stopInternal () ; final long wmsejvzgkofdtwpjpawo = ( ( int ) ( java.util.concurrent.TimeUnit.NANOSECONDS . toMillis ( ( ( java.lang.System . nanoTime () ) - avjkhgupdyfiomzjrwnv ) ) ) ) ; org.webrtc.Camera1Session.camera1StopTimeMsHistogram . addSample ( wmsejvzgkofdtwpjpawo ) ; }

line_index: 837
bug_before_refactoring: { int listIndex = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( listIndex < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = com.rfo.basic.Run.theLists . get ( listIndex ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; } <s> private boolean executeTIMEZONE_LIST () { int listIndex = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( listIndex < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = com.rfo.basic.Run.theLists . get ( listIndex ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; } <s> GPS satellite bundles now in a reusable list.  Fixed bug in TimeZone.List and Debug.Commands from last commit.
bug_after_refactoring: { int sockxohrcrzecuobumtv = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( sockxohrcrzecuobumtv < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = com.rfo.basic.Run.theLists . get ( sockxohrcrzecuobumtv ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; } <s> private boolean executeTIMEZONE_LIST () { int sockxohrcrzecuobumtv = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( sockxohrcrzecuobumtv < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = com.rfo.basic.Run.theLists . get ( sockxohrcrzecuobumtv ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; } <s> GPS satellite bundles now in a reusable list.  Fixed bug in TimeZone.List and Debug.Commands from last commit.
fix_before_refactoring: { int listIndex = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( listIndex < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = new java.util.ArrayList < java.lang.String > () ; com.rfo.basic.Run.theLists . set ( listIndex , theList ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; }
fix_after_refactoring: { int sockxohrcrzecuobumtv = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( sockxohrcrzecuobumtv < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = new java.util.ArrayList < java.lang.String > () ; com.rfo.basic.Run.theLists . set ( sockxohrcrzecuobumtv , theList ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; }
× fix_prediction_before: { int listIndex = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( listIndex < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = com.rfo.basic.Run.theLists . get ( listIndex ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; }
× fix_prediction_after: { int sockxohrcrzecuobumtv = getListArg ( com.rfo.basic.Run.list_is_string ) ; if ( sockxohrcrzecuobumtv < 0 ) return false ; if ( ! ( checkEOL () ) ) return false ; java.util.ArrayList < java.lang.String > theList = com.rfo.basic.Run.theLists . get ( sockxohrcrzecuobumtv ) ; for ( java.lang.String zone : java.util.TimeZone . getAvailableIDs () ) { theList . add ( zone ) ; } return true ; }

line_index: 838
bug_before_refactoring: private long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long serialVersionUID = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { serialVersionUID += ( serialVersionUID * 31 ) + ( property . getName () . hashCode () ) ; } return serialVersionUID ; } <s> private long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long serialVersionUID = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { serialVersionUID += ( serialVersionUID * 31 ) + ( property . getName () . hashCode () ) ; } return serialVersionUID ; } <s> Pulish 1.0.0.Beta  Fixed the TypedQueryPathProcessor's bug reported by customer
bug_after_refactoring: private long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long kuuamvowwlgswwwdymas = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { kuuamvowwlgswwwdymas += ( kuuamvowwlgswwwdymas * 31 ) + ( property . getName () . hashCode () ) ; } return kuuamvowwlgswwwdymas ; } <s> private long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long kuuamvowwlgswwwdymas = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { kuuamvowwlgswwwdymas += ( kuuamvowwlgswwwdymas * 31 ) + ( property . getName () . hashCode () ) ; } return kuuamvowwlgswwwdymas ; } <s> Pulish 1.0.0.Beta  Fixed the TypedQueryPathProcessor's bug reported by customer
fix_before_refactoring: private static long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long serialVersionUID = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { serialVersionUID += ( serialVersionUID * 31 ) + ( property . getName () . hashCode () ) ; } return serialVersionUID ; }
fix_after_refactoring: private static long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long kuuamvowwlgswwwdymas = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { kuuamvowwlgswwwdymas += ( kuuamvowwlgswwwdymas * 31 ) + ( property . getName () . hashCode () ) ; } return kuuamvowwlgswwwdymas ; }
× fix_prediction_before: private long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long serialVersionUID = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { serialVersionUID += ( serialVersionUID * 31 ) + ( property . getName () . hashCode () ) ; } return serialVersionUID ; }
× fix_prediction_after: private long getSerialVersionUID ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaClass metaClass , java.lang.String nestedSimpleClassName ) throws java.io.IOException { long kuuamvowwlgswwwdymas = ( nestedSimpleClassName != null ) ? nestedSimpleClassName . hashCode () : 0 ; for ( org.babyfish.persistence.tool.path.TypedQueryPathProcessor.MetaProperty property : metaClass . getProperties () . values () ) { kuuamvowwlgswwwdymas += ( kuuamvowwlgswwwdymas * 31 ) + ( property . getName () . hashCode () ) ; } return kuuamvowwlgswwwdymas ; }

line_index: 839
bug_before_refactoring: { int hoursNotScheduled = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { hoursNotScheduled += ( offices.officeReq . get ( i ) . get ( j ) ) / 2 ; } } } return hoursNotScheduled ; } <s> public static int getUnScheuledHours ( Office offices ) { int hoursNotScheduled = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { hoursNotScheduled += ( offices.officeReq . get ( i ) . get ( j ) ) / 2 ; } } } return hoursNotScheduled ; } <s> Fixed opening and closing shift bug  adding serialization and deserialization of objects
bug_after_refactoring: { int jehlpnxyirbrkiagdzyo = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { jehlpnxyirbrkiagdzyo += ( offices.officeReq . get ( i ) . get ( j ) ) / 2 ; } } } return jehlpnxyirbrkiagdzyo ; } <s> public static int getUnScheuledHours ( Office offices ) { int jehlpnxyirbrkiagdzyo = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { jehlpnxyirbrkiagdzyo += ( offices.officeReq . get ( i ) . get ( j ) ) / 2 ; } } } return jehlpnxyirbrkiagdzyo ; } <s> Fixed opening and closing shift bug  adding serialization and deserialization of objects
fix_before_refactoring: { int hoursNotScheduled = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { hoursNotScheduled += offices.officeReq . get ( i ) . get ( j ) ; } } } return hoursNotScheduled / 2 ; }
fix_after_refactoring: { int jehlpnxyirbrkiagdzyo = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { jehlpnxyirbrkiagdzyo += offices.officeReq . get ( i ) . get ( j ) ; } } } return jehlpnxyirbrkiagdzyo / 2 ; }
× fix_prediction_before: { int hoursNotScheduled = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { hoursNotScheduled += ( office.officeReq . get ( i ) . get ( j ) ) / 2 ; } } } return hoursNotScheduled ; }
× fix_prediction_after: { int jehlpnxyirbrkiagdzyo = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { jehlpnxyirbrkiagdzyo += ( offices.officeReq . get ( i ) . get ( j ) ) / 2 ; } } } return jehlpnxybrkiagdzyo ; }

line_index: 840
bug_before_refactoring: { int playlistId = java.lang.Integer . parseInt ( pUri . getQueryParameter ( "playlistId" ) ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( playlistId ) ) ) ; transactions . remove ( playlistId ) ; view . removeMediaItem ( mediaItem ) ; } <s> private void handleDeletePlaylistEvent ( android.net.Uri pUri ) { com.dreamdigitizers.megamelodies.views.interfaces.IViewPlaylists view = this . getView () ; if ( view != null ) { int playlistId = java.lang.Integer . parseInt ( pUri . getQueryParameter ( "playlistId" ) ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( playlistId ) ) ) ; transactions . remove ( playlistId ) ; view . removeMediaItem ( mediaItem ) ; } } <s> fix bugs
bug_after_refactoring: { int jxocwuyoasvmlltajyso = java.lang.Integer . parseInt ( pUri . getQueryParameter ( "jxocwuyoasvmlltajyso" ) ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( jxocwuyoasvmlltajyso ) ) ) ; transactions . remove ( jxocwuyoasvmlltajyso ) ; view . removeMediaItem ( mediaItem ) ; } <s> private void handleDeletePlaylistEvent ( android.net.Uri pUri ) { com.dreamdigitizers.megamelodies.views.interfaces.IViewPlaylists view = this . getView () ; if ( view != null ) { int jxocwuyoasvmlltajyso = java.lang.Integer . parseInt ( pUri . getQueryParameter ( "jxocwuyoasvmlltajyso" ) ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( jxocwuyoasvmlltajyso ) ) ) ; transactions . remove ( jxocwuyoasvmlltajyso ) ; view . removeMediaItem ( mediaItem ) ; } } <s> fix bugs
fix_before_refactoring: { java.lang.String id = pUri . getQueryParameter ( "playlistId" ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( id ) ) ) ; transactions . remove ( id ) ; view . removeMediaItem ( mediaItem ) ; }
fix_after_refactoring: { java.lang.String id = pUri . getQueryParameter ( "jxocwuyoasvmlltajyso" ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( id ) ) ) ; transactions . remove ( id ) ; view . removeMediaItem ( mediaItem ) ; }
× fix_prediction_before: { int playlistId = java.lang.Integer . parseInt ( pUri . getQueryParameter ( "playlistId" ) ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( playlistId ) ) ) ; transactions . remove ( playlistId ) ; view . removeMediaItem ( mediaItem ) ; }
× fix_prediction_after: { int jxocwuyoasvmlltajyso = java.lang.Integer . parseInt ( pUri . getQueryParameter ( "jxocwuyoasvmlltajyso" ) ) ; java.util.HashMap transactions = this . mTransactionActions . get ( ServicePlayback.CUSTOM_ACTION__DELETE_PLAYLIST ) ; android.support.v4.media.MediaBrowserCompat.MediaItem mediaItem = ( ( android.support.v4.media.MediaBrowserCompat.MediaItem ) ( transactions . get ( jxocwuyoasvmlltajyso ) ) ) ; transactions . remove ( jxocwuyoasvmlltajyso ) ; view . removeMediaItem ( mediaItem ) ; }

line_index: 842
bug_before_refactoring: { double rn = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( getAngle () ) ) ; double in = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; setR ( rn ) ; setI ( in ) ; return this ; } <s> public Util.complex pow ( int n ) { double rn = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( getAngle () ) ) ; double in = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; setR ( rn ) ; setI ( in ) ; return this ; } <s> fixed a really stupid issue in complex.pow
bug_after_refactoring: { double oraqkzonjfpnggmjqemh = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( getAngle () ) ) ; double kgyudibwgsqtlehakzvi = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; setR ( oraqkzonjfpnggmjqemh ) ; setI ( kgyudibwgsqtlehakzvi ) ; return this ; } <s> public Util.complex pow ( int n ) { double oraqkzonjfpnggmjqemh = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( getAngle () ) ) ; double kgyudibwgsqtlehakzvi = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; setR ( oraqkzonjfpnggmjqemh ) ; setI ( kgyudibwgsqtlehakzvi ) ; return this ; } <s> fixed a really stupid issue in complex.pow
fix_before_refactoring: { double rn = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( ( n * ( getAngle () ) ) ) ) ; double in = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( ( n * ( getAngle () ) ) ) ) ; setR ( rn ) ; setI ( in ) ; return this ; }
fix_after_refactoring: { double oraqkzonjfpnggmjqemh = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( ( n * ( getAngle () ) ) ) ) ; double kgyudibwgsqtlehakzvi = ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( ( n * ( getAngle () ) ) ) ) ; setR ( oraqkzonjfpnggmjqemh ) ; setI ( kgyudibwgsqtlehakzvi ) ; return this ; }
× fix_prediction_before: { double rn = ( ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( getAngle () ) ) ; double in = ( ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( getAngle () ) ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; setR ( rn ) ; setI ( in ) ; return this ; }
× fix_prediction_after: { double oraqkzonjfpnggmjqemh = ( ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . cos ( getAngle () ) ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; double kgyudibwgsqtlehakzvi = ( ( java.lang.Math . pow ( getAbs () , n ) ) * ( java.lang.Math . sin ( getAngle () ) ) ) * ( java.lang.Math . sin ( getAngle () ) ) ; setR ( oraqkzonjfpnggmjqemh ) ; setI ( kgyudibwgsqtlehakzvi ) ; return this ; }

line_index: 843
bug_before_refactoring: public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { try { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int result = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials result: " + result ) ) ; return true ; } catch ( org.springframework.dao.DuplicateKeyException e ) { java.lang.System.out . println ( ( "Storing credentials not successful " + ( e . getMessage () ) ) ) ; return false ; } } <s> public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { try { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int result = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials result: " + result ) ) ; return true ; } catch ( org.springframework.dao.DuplicateKeyException e ) { java.lang.System.out . println ( ( "Storing credentials not successful " + ( e . getMessage () ) ) ) ; return false ; } } <s> Duplicate application name issue fixed
bug_after_refactoring: public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { try { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int ebmnwkpnscekzhodsvpy = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials ebmnwkpnscekzhodsvpy: " + ebmnwkpnscekzhodsvpy ) ) ; return true ; } catch ( org.springframework.dao.DuplicateKeyException e ) { java.lang.System.out . println ( ( "Storing credentials not successful " + ( e . getMessage () ) ) ) ; return false ; } } <s> public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { try { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int ebmnwkpnscekzhodsvpy = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials ebmnwkpnscekzhodsvpy: " + ebmnwkpnscekzhodsvpy ) ) ; return true ; } catch ( org.springframework.dao.DuplicateKeyException e ) { java.lang.System.out . println ( ( "Storing credentials not successful " + ( e . getMessage () ) ) ) ; return false ; } } <s> Duplicate application name issue fixed
fix_before_refactoring: public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int result = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials result: " + result ) ) ; return result == 1 ; }
fix_after_refactoring: public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int ebmnwkpnscekzhodsvpy = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials ebmnwkpnscekzhodsvpy: " + ebmnwkpnscekzhodsvpy ) ) ; return ebmnwkpnscekzhodsvpy == 1 ; }
× fix_prediction_before: public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { try { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int result = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials result: " + result ) ) ; return true ; } catch ( org.springframework.dao.DuplicateKeyException e ) { java.lang.System.out . println ( ( "Storing credentials not successful " + ( e . getMessage () ) ) ) ; return false ; } }
× fix_prediction_after: public boolean storeCredentials ( java.lang.String appName , java.lang.String hashedUser , java.lang.String hashedPassword ) { try { com.jeszka.domain.AppCredentials appCredentials = new com.jeszka.domain.AppCredentials.Builder () . appName ( appName ) . username ( hashedUser ) . password ( hashedPassword ) . enabled ( true ) . build () ; final int ebmnwkpnscekzhodsvpy = posterDao . saveAppCredentials ( appCredentials ) ; java.lang.System.out . println ( ( "Storing credentials ebmnwkpnscekzhodsvpy: " + ebmnwkpnscekzhodsvpy ) ) ; return true ; } catch ( org.springframework.dao.DuplicateKeyException e ) { java.lang.System.out . println ( ( "Storing credentials not successful " + ( e . getMessage () ) ) ) ; return false ; } }

line_index: 844
bug_before_refactoring: if ( aY > bY ) { y = bY - aY ; } else { y = aY - bY ; } <s> private int calcHeigth () { int aY = a . getBlockY () ; int bY = b . getBlockY () ; int y = 0 ; if ( aY > bY ) { y = bY - aY ; } else { y = aY - bY ; } return y ; } <s> Tobi: Testet + fixes + plugin.yml -> Darki MineRestter hat bugs aufgewiesen
bug_after_refactoring: if ( zkyactqhujzhmfkbhuft > smfxeqmscrvkxgqskjka ) { ocdvupgmtcbivsicnfni = smfxeqmscrvkxgqskjka - zkyactqhujzhmfkbhuft ; } else { ocdvupgmtcbivsicnfni = zkyactqhujzhmfkbhuft - smfxeqmscrvkxgqskjka ; } <s> private int calcHeigth () { int aY = a . getBlockY () ; int bY = b . getBlockY () ; int y = 0 ; if ( zkyactqhujzhmfkbhuft > smfxeqmscrvkxgqskjka ) { ocdvupgmtcbivsicnfni = smfxeqmscrvkxgqskjka - zkyactqhujzhmfkbhuft ; } else { ocdvupgmtcbivsicnfni = zkyactqhujzhmfkbhuft - smfxeqmscrvkxgqskjka ; } return y ; } <s> Tobi: Testet + fixes + plugin.yml -> Darki MineRestter hat bugs aufgewiesen
fix_before_refactoring: if ( aY < bY ) { y = bY - aY ; } else { y = aY - bY ; }
fix_after_refactoring: if ( zkyactqhujzhmfkbhuft < smfxeqmscrvkxgqskjka ) { ocdvupgmtcbivsicnfni = smfxeqmscrvkxgqskjka - zkyactqhujzhmfkbhuft ; } else { ocdvupgmtcbivsicnfni = zkyactqhujzhmfkbhuft - smfxeqmscrvkxgqskjka ; }
× fix_prediction_before: if ( aY > bY ) { y = bY - aY ; } else { y = aY - bY ; }
× fix_prediction_after: if ( zkyactqhujzhmfkbhuft > smfxeqmscrvkxgqskjka ) { ocdvupgmtcbivsicnfni = smfxeqmscrvkxgqskjka - zkyactqhujzhmfkbhuft ; } else { ocdvupgmtcbivsicnfni = zkyactqhujzhmfkbhuft - smfxeqmscrvkxgqskjka ; }

line_index: 847
bug_before_refactoring: ( depth ++ ) <s> public com.digitalpebble.storm.crawler.Metadata getMetaForOutlink ( java.lang.String sourceURL , com.digitalpebble.storm.crawler.Metadata parentMD ) { com.digitalpebble.storm.crawler.Metadata md = filter ( parentMD ) ; if ( trackPath ) { md . addValue ( com.digitalpebble.storm.crawler.util.MetadataTransfer.urlPathKeyName , sourceURL ) ; } if ( trackDepth ) { java.lang.String existingDepth = md . getFirstValue ( com.digitalpebble.storm.crawler.util.MetadataTransfer.depthKeyName ) ; int depth = 0 ; try { depth = java.lang.Integer . parseInt ( existingDepth ) ; } catch ( java.lang.Exception e ) { depth = 0 ; } md . setValue ( com.digitalpebble.storm.crawler.util.MetadataTransfer.depthKeyName , java.lang.Integer . toString ( ( depth ++ ) ) ) ; } return md ; } <s> added test class for Metadata transfer + fix silly bug in depth tracking
bug_after_refactoring: ( kvxzlojshbguxscfhlvn ++ ) <s> public com.digitalpebble.storm.crawler.Metadata getMetaForOutlink ( java.lang.String sourceURL , com.digitalpebble.storm.crawler.Metadata parentMD ) { com.digitalpebble.storm.crawler.Metadata md = filter ( parentMD ) ; if ( trackPath ) { md . addValue ( com.digitalpebble.storm.crawler.util.MetadataTransfer.urlPathKeyName , sourceURL ) ; } if ( trackDepth ) { java.lang.String existingDepth = md . getFirstValue ( com.digitalpebble.storm.crawler.util.MetadataTransfer.depthKeyName ) ; int depth = 0 ; try { depth = java.lang.Integer . parseInt ( existingDepth ) ; } catch ( java.lang.Exception e ) { depth = 0 ; } md . setValue ( com.digitalpebble.storm.crawler.util.MetadataTransfer.depthKeyName , java.lang.Integer . toString ( ( kvxzlojshbguxscfhlvn ++ ) ) ) ; } return md ; } <s> added test class for Metadata transfer + fix silly bug in depth tracking
fix_before_refactoring: ( ++ depth )
fix_after_refactoring: ( ++ kvxzlojshbguxscfhlvn )
× fix_prediction_before: ( depth + 1 )
× fix_prediction_after: ( ++ ( kvxzlojshbguxscfhlvn ) )

line_index: 848
bug_before_refactoring: com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) , temp ) <s> @ java.lang.Override public void onCompletion ( android.media.MediaPlayer mp ) { int temp = ( ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) ) + 1 ) % ( videoList . size () ) ; vvVideo . setVideoURI ( videoList . get ( temp ) ) ; com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) , temp ) ; editor . putInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , temp ) ; editor . commit () ; vvVideo . start () ; } <s> RecyclerView issued resolved by ADDING SCROLL LISTENER
bug_after_refactoring: com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) , geebuqipjnqjuhejqczg ) <s> @ java.lang.Override public void onCompletion ( android.media.MediaPlayer mp ) { int temp = ( ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) ) + 1 ) % ( videoList . size () ) ; vvVideo . setVideoURI ( videoList . get ( temp ) ) ; com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) , geebuqipjnqjuhejqczg ) ; editor . putInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , temp ) ; editor . commit () ; vvVideo . start () ; } <s> RecyclerView issued resolved by ADDING SCROLL LISTENER
fix_before_refactoring: com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( temp )
fix_after_refactoring: com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( geebuqipjnqjuhejqczg )
× fix_prediction_before: com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) , temp )
× fix_prediction_after: com.example.saksham.overlayscreenshort.PlaylistAdapter . changeActiveItemBackground ( sharedPreferences . getInt ( Constants.CURRENT_PLAYING_VIDEO_NUMBER , ( - 1 ) ) , geebuqipjnqjuhejqczg )

line_index: 850
bug_before_refactoring: { todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( numAdded ) ) ) ) ; list . addTodo ( newTodo ) ; numAdded ++ ; } <s> void addAmountTodo ( int amt , todolist.TodoList list ) { todolist.Todo head = new todolist.Todo ( "Task 1" ) ; list . addTodo ( head ) ; int numAdded = 1 ; while ( numAdded != amt ) { todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( numAdded ) ) ) ) ; list . addTodo ( newTodo ) ; numAdded ++ ; } } <s> Finished implementing all test cases. Updated deleteTodo to decrementTodoNum on target's next value when targetted Todo to delete is not the head. All issues found are fixed.
bug_after_refactoring: { todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( ccyqkumattqpypqvedqu ) ) ) ) ; list . addTodo ( newTodo ) ; ccyqkumattqpypqvedqu ++ ; } <s> void addAmountTodo ( int amt , todolist.TodoList list ) { todolist.Todo head = new todolist.Todo ( "Task 1" ) ; list . addTodo ( head ) ; int numAdded = 1 ; while ( numAdded != amt ) { todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( ccyqkumattqpypqvedqu ) ) ) ) ; list . addTodo ( newTodo ) ; ccyqkumattqpypqvedqu ++ ; } } <s> Finished implementing all test cases. Updated deleteTodo to decrementTodoNum on target's next value when targetted Todo to delete is not the head. All issues found are fixed.
fix_before_refactoring: { numAdded ++ ; todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( numAdded ) ) ) ) ; list . addTodo ( newTodo ) ; }
fix_after_refactoring: { ccyqkumattqpypqvedqu ++ ; todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( ccyqkumattqpypqvedqu ) ) ) ) ; list . addTodo ( newTodo ) ; }
× fix_prediction_before: { todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( numAdded ) ) ) ; list . addTodo ( newTodo ) ; numAdded ++ ; }
× fix_prediction_after: { todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( ccyqkumattqpypqvedqu ) ) ) ) ; list . addTodo ( newTodo ) ; ccyqkumattqpypqvedqu ++ ; }

line_index: 851
bug_before_refactoring: { int y = field . getCoordinate_y () ; int x = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( x , y , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; } <s> public java.lang.Boolean draw ( dk.eax.Field field ) { if ( ( field . getToken () ) == null ) { int y = field . getCoordinate_y () ; int x = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( x , y , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; } return false ; } <s> Fixed bug
bug_after_refactoring: { int njgbuxwehtdqphtrxqio = field . getCoordinate_y () ; int oeozmvrrifaemnpznugq = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( oeozmvrrifaemnpznugq , njgbuxwehtdqphtrxqio , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; } <s> public java.lang.Boolean draw ( dk.eax.Field field ) { if ( ( field . getToken () ) == null ) { int njgbuxwehtdqphtrxqio = field . getCoordinate_y () ; int oeozmvrrifaemnpznugq = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( oeozmvrrifaemnpznugq , njgbuxwehtdqphtrxqio , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; } return false ; } <s> Fixed bug
fix_before_refactoring: { java.lang.System.out . println ( field . getToken () ) ; int y = field . getCoordinate_y () ; int x = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( x , y , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; }
fix_after_refactoring: { java.lang.System.out . println ( field . getToken () ) ; int njgbuxwehtdqphtrxqio = field . getCoordinate_y () ; int oeozmvrrifaemnpznugq = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( oeozmvrrifaemnpznugq , njgbuxwehtdqphtrxqio , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; }
× fix_prediction_before: { int y = field . getCoordinate_y () ; int x = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( x , y , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; }
× fix_prediction_after: { int njgbuxwehtdqphtrxqio = field . getCoordinate_y () ; int oeozmvrrifaemnpznugq = field . getCoordinate_x () ; dk.eax.graphics.Ellipse ellipsis = new dk.eax.graphics.Ellipse ( oeozmvrrifaemnpznugq , njgbuxwehtdqphtrxqio , 200 , 200 ) ; ellipsis . draw () ; field . setToken ( this ) ; return true ; }

line_index: 852
bug_before_refactoring: { int _bitwiseXor = hash ^ b ; hash = _bitwiseXor ; hash = hash * 16777619 ; } <s> public static int hash ( final java.lang.String str ) { int hash = - 2128831035 ; final byte [] bytes = str . getBytes ( java.nio.charset.StandardCharsets.ISO_8859_1 ) ; for ( final byte b : bytes ) { { int _bitwiseXor = hash ^ b ; hash = _bitwiseXor ; hash = hash * 16777619 ; } } return hash ; } <s> Fixed a bug where a HDLBlock within a switch case creates an incorrect byte-code
bug_after_refactoring: { int xmrazjzegvabrlcsqwor = lnhtfzvwhhquauiqpkub ^ b ; lnhtfzvwhhquauiqpkub = xmrazjzegvabrlcsqwor ; lnhtfzvwhhquauiqpkub = lnhtfzvwhhquauiqpkub * 16777619 ; } <s> public static int hash ( final java.lang.String str ) { int hash = - 2128831035 ; final byte [] bytes = str . getBytes ( java.nio.charset.StandardCharsets.ISO_8859_1 ) ; for ( final byte b : bytes ) { { int xmrazjzegvabrlcsqwor = lnhtfzvwhhquauiqpkub ^ b ; lnhtfzvwhhquauiqpkub = xmrazjzegvabrlcsqwor ; lnhtfzvwhhquauiqpkub = lnhtfzvwhhquauiqpkub * 16777619 ; } } return hash ; } <s> Fixed a bug where a HDLBlock within a switch case creates an incorrect byte-code
fix_before_refactoring: { hash = hash ^ b ; hash = hash * 16777619 ; }
fix_after_refactoring: { lnhtfzvwhhquauiqpkub = lnhtfzvwhhquauiqpkub ^ b ; lnhtfzvwhhquauiqpkub = lnhtfzvwhhquauiqpkub * 16777619 ; }
× fix_prediction_before: { int _bitwiseXor = hash ^ b ; hash = _bitwiseXor ; }
× fix_prediction_after: { long xmrazjzegvabrlcsqwor = lnhtfzvwhhquauiqpkub ^ b ; lnhtfzvwhhquauiqpkub = xmrazjzegvabrlcsqwor ; lnhtfzvwhhquauiqpkub = lnhtfzvwhhquauiqpkub * 16777619 ; }

line_index: 854
bug_before_refactoring: { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double plagiarismRatio = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( plagiarismRatio * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; } <s> public static void main ( java.lang.String [] args ) { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double plagiarismRatio = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( plagiarismRatio * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; } <s> * Fixed minor Bugs
bug_after_refactoring: { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double wwiospzecnipwonavgga = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( wwiospzecnipwonavgga * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; } <s> public static void main ( java.lang.String [] args ) { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double wwiospzecnipwonavgga = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( wwiospzecnipwonavgga * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; } <s> * Fixed minor Bugs
fix_before_refactoring: { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double plagiarismRatio = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println () ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( plagiarismRatio * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println () ; }
fix_after_refactoring: { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double wwiospzecnipwonavgga = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println () ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( wwiospzecnipwonavgga * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println () ; }
× fix_prediction_before: { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double plagiarismRatio = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( plagiarismRatio * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; }
× fix_prediction_after: { main.java.PlagiarismDetector plagiarismDetector = new main.java.PlagiarismDetector () ; main.java.PlagiarismService plagiarismService = new main.java.PlagiarismService () ; main.java.InputWrapper inputWrapper = plagiarismDetector . validateInput ( args ) ; double wwiospzecnipwonavgga = plagiarismService . checkPlagiarism ( inputWrapper ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; java.lang.System.out . println ( ( ( "Plagiarism Percentage is " + ( wwiospzecnipwonavgga * 100 ) ) + " %" ) ) ; java.lang.System.out . println ( "---------------------------------------------------------------------------------------------" ) ; }

line_index: 855
bug_before_refactoring: { final int cameraType = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( cameraType ) ; } <s> private void initCamera () { try { final int cameraType = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( cameraType ) ; } catch ( java.lang.Exception e ) { view . errorLoadingCamera () ; } if ( ( camera ) != null ) { view . init ( camera ) ; } } <s> Fixed bug of camera rotation in the Nexus 6P
bug_after_refactoring: { final int fkympozndppngbaiuyba = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( fkympozndppngbaiuyba ) ; } <s> private void initCamera () { try { final int fkympozndppngbaiuyba = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( fkympozndppngbaiuyba ) ; } catch ( java.lang.Exception e ) { view . errorLoadingCamera () ; } if ( ( camera ) != null ) { view . init ( camera ) ; } } <s> Fixed bug of camera rotation in the Nexus 6P
fix_before_refactoring: { cameraType = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( cameraType ) ; }
fix_after_refactoring: { fkympozndppngbaiuyba = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( fkympozndppngbaiuyba ) ; }
× fix_prediction_before: { final int cameraType = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( cameraType ) ; }
× fix_prediction_after: { final int fkympozndppngbaiuyba = ( ( captureType ) == ( com.onfido.android.sdk.capture.ui.CaptureType.FACE ) ) ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK ; camera = android.hardware.Camera . open ( fkympozndppbaiuyba ) ; }

line_index: 856
bug_before_refactoring: b || ( s . update () ) <s> @ java.lang.Override final boolean updateBool ( ) throws java.lang.Exception { boolean b = false ; for ( nl.ramondevaan.visualization.core.Source < S > s : inputs ) { if ( s != null ) { b = b || ( s . update () ) ; } } if ( b || ( changed ) ) { try { output = nl.ramondevaan.visualization.core.Filter . updateImpl () ; return true ; } catch ( java.lang.Exception e ) { output = null ; throw e ; } } return false ; } <s> Error fixes
bug_after_refactoring: siexaqdrznvpyhrldtmf || ( s . update () ) <s> @ java.lang.Override final boolean updateBool ( ) throws java.lang.Exception { boolean b = false ; for ( nl.ramondevaan.visualization.core.Source < S > s : inputs ) { if ( s != null ) { b = siexaqdrznvpyhrldtmf || ( s . update () ) ; } } if ( b || ( changed ) ) { try { output = nl.ramondevaan.visualization.core.Filter . updateImpl () ; return true ; } catch ( java.lang.Exception e ) { output = null ; throw e ; } } return false ; } <s> Error fixes
fix_before_refactoring: ( s . update () ) || b
fix_after_refactoring: ( s . update () ) || siexaqdrznvpyhrldtmf
× fix_prediction_before: b || ( ! ( s . update () ) )
× fix_prediction_after: siexaqdrznvpyhrldtmf || ( s . update () )

line_index: 857
bug_before_refactoring: { deleteLobby () ; lobbies . remove ( getLobbyName () ) ; result = true ; } <s> public boolean removeClient ( de.dhbwka.java.bombercat.Client client , java.util.Map < java.lang.String , de.dhbwka.java.bombercat.Lobby > lobbies ) { boolean result = false ; if ( lobbyLeader . equals ( client ) ) { deleteLobby () ; lobbies . remove ( getLobbyName () ) ; result = true ; } else { result = clients . remove ( client ) ; client . setLobby ( null ) ; result = true ; } if ( result ) { broadcastPlayers () ; } return result ; } <s> Fixed bugs
bug_after_refactoring: { deleteLobby () ; lobbies . remove ( getLobbyName () ) ; xyewrewneypimmfmhkdc = true ; } <s> public boolean removeClient ( de.dhbwka.java.bombercat.Client client , java.util.Map < java.lang.String , de.dhbwka.java.bombercat.Lobby > lobbies ) { boolean result = false ; if ( lobbyLeader . equals ( client ) ) { deleteLobby () ; lobbies . remove ( getLobbyName () ) ; xyewrewneypimmfmhkdc = true ; } else { result = clients . remove ( client ) ; client . setLobby ( null ) ; result = true ; } if ( result ) { broadcastPlayers () ; } return result ; } <s> Fixed bugs
fix_before_refactoring: { deleteLobby ( lobbies ) ; result = true ; }
fix_after_refactoring: { deleteLobby ( lobbies ) ; xyewrewneypimmfmhkdc = true ; }
× fix_prediction_before: { lobbies . remove ( getLobbyName () ) ; result = true ; }
× fix_prediction_after: { deleteLobby () ; lobbies . remove ( getLobbyName () ) ; }

line_index: 858
bug_before_refactoring: { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long id = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( id ) ; db . close () ; db = null ; return id ; } <s> public long insert ( io.keepcoding.rgs.everpobre.model.Notebook notebook ) { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long id = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( id ) ; db . close () ; db = null ; return id ; } <s> Bug-fixed Front end created notebook height
bug_after_refactoring: { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long teuuewgrorhwturcxgpb = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( teuuewgrorhwturcxgpb ) ; db . close () ; db = null ; return teuuewgrorhwturcxgpb ; } <s> public long insert ( io.keepcoding.rgs.everpobre.model.Notebook notebook ) { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long teuuewgrorhwturcxgpb = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( teuuewgrorhwturcxgpb ) ; db . close () ; db = null ; return teuuewgrorhwturcxgpb ; } <s> Bug-fixed Front end created notebook height
fix_before_refactoring: { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long id = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( id ) ; db . close () ; return id ; }
fix_after_refactoring: { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long teuuewgrorhwturcxgpb = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( teuuewgrorhwturcxgpb ) ; db . close () ; return teuuewgrorhwturcxgpb ; }
× fix_prediction_before: { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long id = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , this . getContentValues ( notebook ) ) ; notebook . setId ( id ) ; db . close () ; db = null ; return id ; }
× fix_prediction_after: { if ( notebook == null ) { throw new java.lang.IllegalArgumentException ( "Passing NULL NOTEBOOK, imbecile" ) ; } long teuuewgrorhwturcxgpb = db . getWritableDatabase () . insert ( DBConstants.TABLE_NOTEBOOK , null , getContentValues ( notebook ) ) ; notebook . setId ( teuuewgrorhwturcxgpb ) ; db . close () ; db = null ; return teuuewgrorhwturcxgpb ; }

line_index: 859
bug_before_refactoring: private void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> private void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> Merge pull request #23 from tkomiya24/cleanup  Fixes issue 22
bug_after_refactoring: private void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> private void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } } <s> Merge pull request #23 from tkomiya24/cleanup  Fixes issue 22
fix_before_refactoring: public void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( response == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } }
fix_after_refactoring: public void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; if ( zpolwsueqjlhujbwwxcg == ( javax.swing.JOptionPane.YES_OPTION ) ) { for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } } }
× fix_prediction_before: private void backupAllMenuItemAction () { int response = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } }
× fix_prediction_after: private void backupAllMenuItemAction () { int zpolwsueqjlhujbwwxcg = mainView . showConfirmationDialog ( "Back up vocab files" , "This will overwrite all previous backup files. Are you sure?" ) ; for ( com.tkomiya.models.VocabList vlist : vocabLists ) { java.io.File file = new java.io.File ( ( ( ( ( ( com.tkomiya.main.MainController.DEFAULT_SAVE_DIRECTORY ) + ( vlist . getName () ) ) + "." ) + ( com.tkomiya.main.MainController.BACKUP_FILE_EXTENSION ) ) ) ; saveVocabListAsTextFile ( vlist , file ) ; } }

line_index: 860
bug_before_refactoring: { byte [] buffer = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; while ( true ) { int read = fileInputStream . read ( buffer ) ; if ( read == ( - 1 ) ) break; bytes . write ( buffer , 0 , read ) ; } fileInputStream . close () ; return bytes . toByteArray () ; } <s> static byte [] readFile ( java.io.File file ) throws java.io.IOException { byte [] buffer = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; while ( true ) { int read = fileInputStream . read ( buffer ) ; if ( read == ( - 1 ) ) break; bytes . write ( buffer , 0 , read ) ; } fileInputStream . close () ; return bytes . toByteArray () ; } <s> Bug fix in postcompiler app which seemed to not correctly identify changes.
bug_after_refactoring: { byte [] vtwphqpereqswvtyobqs = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; while ( true ) { int vnopcncmmrcxlodbjbyx = fileInputStream . vnopcncmmrcxlodbjbyx ( vtwphqpereqswvtyobqs ) ; if ( vnopcncmmrcxlodbjbyx == ( - 1 ) ) break; bytes . write ( vtwphqpereqswvtyobqs , 0 , vnopcncmmrcxlodbjbyx ) ; } fileInputStream . close () ; return bytes . toByteArray () ; } <s> static byte [] readFile ( java.io.File file ) throws java.io.IOException { byte [] vtwphqpereqswvtyobqs = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; while ( true ) { int vnopcncmmrcxlodbjbyx = fileInputStream . vnopcncmmrcxlodbjbyx ( vtwphqpereqswvtyobqs ) ; if ( vnopcncmmrcxlodbjbyx == ( - 1 ) ) break; bytes . write ( vtwphqpereqswvtyobqs , 0 , vnopcncmmrcxlodbjbyx ) ; } fileInputStream . close () ; return bytes . toByteArray () ; } <s> Bug fix in postcompiler app which seemed to not correctly identify changes.
fix_before_refactoring: { byte [] buffer = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; try { while ( true ) { int read = fileInputStream . read ( buffer ) ; if ( read == ( - 1 ) ) break; bytes . write ( buffer , 0 , read ) ; } } finally { fileInputStream . close () ; } return bytes . toByteArray () ; }
fix_after_refactoring: { byte [] vtwphqpereqswvtyobqs = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; try { while ( true ) { int vnopcncmmrcxlodbjbyx = fileInputStream . vnopcncmmrcxlodbjbyx ( vtwphqpereqswvtyobqs ) ; if ( vnopcncmmrcxlodbjbyx == ( - 1 ) ) break; bytes . write ( vtwphqpereqswvtyobqs , 0 , vnopcncmmrcxlodbjbyx ) ; } } finally { fileInputStream . close () ; } return bytes . toByteArray () ; }
× fix_prediction_before: { byte [] buffer = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; while ( true ) { int read = fileInputStream . read ( buffer ) ; if ( read == ( - 1 ) ) break; bytes . write ( buffer , 0 , read ) ; } fileInputStream . close () ; return bytes . toByteArray () ; }
× fix_prediction_after: { byte [] vtwphqpereqswvtyobqs = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; while ( true ) { int vnopcncmmrcxlodbjbyx = fileInputStream . vnopcncmmrcxlodbjbyx ( vtwphqpereqswvtyobqs ) ; if ( vnopcncmmrcxlodbjbyx == ( - 1 ) ) break; bytes . write ( vtwphqpereqswvtyobqs , 0 , vnopcncmmrcxlodbjbyx ) ; } fileInputStream . close () ; return bytes . toByteArray () ; }

line_index: 861
bug_before_refactoring: { int size = in . readInt () ; shortestpath = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { shortestpath [ i ] = in . readInt () ; } } <s> @ java.lang.Override public void readFields ( java.io.DataInput in ) throws java.io.IOException { int size = in . readInt () ; shortestpath = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { shortestpath [ i ] = in . readInt () ; } } <s> Bug fixes
bug_after_refactoring: { int wdxaxqpiuqnsascdqtre = in . readInt () ; shortestpath = new int [ wdxaxqpiuqnsascdqtre ] ; for ( int i = 0 ; i < wdxaxqpiuqnsascdqtre ; i ++ ) { shortestpath [ i ] = in . readInt () ; } } <s> @ java.lang.Override public void readFields ( java.io.DataInput in ) throws java.io.IOException { int wdxaxqpiuqnsascdqtre = in . readInt () ; shortestpath = new int [ wdxaxqpiuqnsascdqtre ] ; for ( int i = 0 ; i < wdxaxqpiuqnsascdqtre ; i ++ ) { shortestpath [ i ] = in . readInt () ; } } <s> Bug fixes
fix_before_refactoring: { int size = in . readInt () ; if ( size == 0 ) { shortestpath = null ; return; } shortestpath = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { shortestpath [ i ] = in . readInt () ; } }
fix_after_refactoring: { int wdxaxqpiuqnsascdqtre = in . readInt () ; if ( wdxaxqpiuqnsascdqtre == 0 ) { shortestpath = null ; return; } shortestpath = new int [ wdxaxqpiuqnsascdqtre ] ; for ( int i = 0 ; i < wdxaxqpiuqnsascdqtre ; i ++ ) { shortestpath [ i ] = in . readInt () ; } }
× fix_prediction_before: { int size = in . readInt () ; shortestpath = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { shortestpath [ i ] = in . readInt () ; } }
× fix_prediction_after: { int wdxaxqpiuqnsascdqtre = in . readInt () ; shortestpath = new int [ wdxaxqpiuqnsascdqtre ] ; for ( int i = 0 ; i < wdxaxqpiuqnsascdqtre ; i ++ ) { shortestpath [ i ] = in . readInt () ; } }

line_index: 862
bug_before_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version , true ) <s> public org.apache.cassandra.db.RowIndexEntry < org.apache.cassandra.io.sstable.IndexInfo > deserializeForCache ( org.apache.cassandra.io.util.DataInputPlus in ) throws java.io.IOException { assert version . storeRows () ; long position = in . readUnsignedVInt () ; switch ( in . readByte () ) { case org.apache.cassandra.db.RowIndexEntry.CACHE_NOT_INDEXED : return new org.apache.cassandra.db.RowIndexEntry <> ( position ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED : return new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version , true ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED_SHALLOW : return new org.apache.cassandra.db.RowIndexEntry.ShallowIndexedEntry ( position , in , idxInfoSerializer ) ; default: throw new java.lang.AssertionError () ; } } <s> fix regression (by bug)
bug_after_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version , true ) <s> public org.apache.cassandra.db.RowIndexEntry < org.apache.cassandra.io.sstable.IndexInfo > deserializeForCache ( org.apache.cassandra.io.util.DataInputPlus in ) throws java.io.IOException { assert version . storeRows () ; long position = in . readUnsignedVInt () ; switch ( in . readByte () ) { case org.apache.cassandra.db.RowIndexEntry.CACHE_NOT_INDEXED : return new org.apache.cassandra.db.RowIndexEntry <> ( position ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED : return new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version , true ) ; case org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED_SHALLOW : return new org.apache.cassandra.db.RowIndexEntry.ShallowIndexedEntry ( position , in , idxInfoSerializer ) ; default: throw new java.lang.AssertionError () ; } } <s> fix regression (by bug)
fix_before_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version )
fix_after_refactoring: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version )
× fix_prediction_before: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position , in , idxInfoSerializer , version , false )
× fix_prediction_after: new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( fyrdncraysonbcnuxazz , in , idxInfoSerializer , version , false )

line_index: 863
bug_before_refactoring: public java.lang.String format ( org.joda.time.DateTime dateTime , java.util.Locale locale ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long utcTime = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( utcTime + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; } <s> public java.lang.String format ( org.joda.time.DateTime dateTime , java.util.Locale locale ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long utcTime = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( utcTime + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; } <s> #JC-2029 Fixed remarks from QA  Now date for anonymous user displays considering current locale. JCLocaleResolver is used for detection of locale instead of directly reading current user locale  Added "data-" prefix to custom html attribute to prevent w3c validation error
bug_after_refactoring: public java.lang.String format ( org.joda.time.DateTime dateTime , java.util.Locale locale ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long zkciadvmpougbldpdeux = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( zkciadvmpougbldpdeux + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; } <s> public java.lang.String format ( org.joda.time.DateTime dateTime , java.util.Locale locale ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long zkciadvmpougbldpdeux = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( zkciadvmpougbldpdeux + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; } <s> #JC-2029 Fixed remarks from QA  Now date for anonymous user displays considering current locale. JCLocaleResolver is used for detection of locale instead of directly reading current user locale  Added "data-" prefix to custom html attribute to prevent w3c validation error
fix_before_refactoring: public java.lang.String format ( org.joda.time.DateTime dateTime ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long utcTime = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( utcTime + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; }
fix_after_refactoring: public java.lang.String format ( org.joda.time.DateTime dateTime ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long zkciadvmpougbldpdeux = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( zkciadvmpougbldpdeux + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; }
× fix_prediction_before: public java.lang.String format ( org.joda.time.DateTime dateTime , java.util.Locale locale ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long utcTime = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( utcTime + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; }
× fix_prediction_after: public java.lang.String format ( org.joda.time.DateTime dateTime , java.util.Locale locale ) { if ( dateTime == null ) { return "" ; } org.joda.time.DateTimeZone timeZone = dateTime . getZone () ; long zkciadvmpougbldpdeux = timeZone . convertLocalToUTC ( dateTime . getMillis () , false ) ; dateTime = new org.joda.time.DateTime ( ( zkciadvmpougbldpdeux + ( offset ) ) ) ; return formatter . withLocale ( locale ) . print ( dateTime ) ; }

line_index: 864
bug_before_refactoring: if ( buildValue1 > buildValue2 ) { java.lang.System.out . print ( "Player 1 wins" ) ; } else if ( buildValue1 == buildValue2 ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . print ( "Player 2 wins" ) ; } <s> private static void compareHands ( java.util.List < java.lang.Integer > x , java.util.List < java.lang.Integer > y , boolean [] a , boolean [] b ) { int buildValue1 = week1Problems.P6 . findValue ( a ) ; int buildValue2 = week1Problems.P6 . findValue ( b ) ; if ( buildValue1 > buildValue2 ) { java.lang.System.out . print ( "Player 1 wins" ) ; } else if ( buildValue1 == buildValue2 ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . print ( "Player 2 wins" ) ; } } <s> Solved basic problem. Started solving for adding player 3
bug_after_refactoring: if ( xajeishrhjmdozwabghv > cxvthfwokdvbxlptdxpz ) { java.lang.System.out . print ( "Player 1 wins" ) ; } else if ( xajeishrhjmdozwabghv == cxvthfwokdvbxlptdxpz ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . print ( "Player 2 wins" ) ; } <s> private static void compareHands ( java.util.List < java.lang.Integer > x , java.util.List < java.lang.Integer > y , boolean [] a , boolean [] b ) { int buildValue1 = week1Problems.P6 . findValue ( a ) ; int buildValue2 = week1Problems.P6 . findValue ( b ) ; if ( xajeishrhjmdozwabghv > cxvthfwokdvbxlptdxpz ) { java.lang.System.out . print ( "Player 1 wins" ) ; } else if ( xajeishrhjmdozwabghv == cxvthfwokdvbxlptdxpz ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . print ( "Player 2 wins" ) ; } } <s> Solved basic problem. Started solving for adding player 3
fix_before_refactoring: if ( buildValue1 > buildValue2 ) { java.lang.System.out . println ( "Player 1 wins" ) ; } else if ( buildValue1 == buildValue2 ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . println ( "Player 2 wins" ) ; }
fix_after_refactoring: if ( xajeishrhjmdozwabghv > cxvthfwokdvbxlptdxpz ) { java.lang.System.out . println ( "Player 1 wins" ) ; } else if ( xajeishrhjmdozwabghv == cxvthfwokdvbxlptdxpz ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . println ( "Player 2 wins" ) ; }
× fix_prediction_before: if ( buildValue1 > buildValue2 ) { java.lang.System.out . print ( "Player 1 wins" ) ; } else if ( buildValue1 == buildValue2 ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . println ( "Player 2 wins" ) ; }
× fix_prediction_after: if ( xajeishrhjmdozwabghv > cxvthfwokdvbxlptdxpz ) { java.lang.System.out . print ( "Player 1 wins" ) ; } else if ( xajeishrhjmdozwabghv == cxvthfwokdvbxlptdxpz ) { week1Problems.P6 . compareHigh ( x , y ) ; } else { java.lang.System.out . print ( "Player 2 wins" ) ; }

line_index: 865
bug_before_refactoring: { if ( keepCurrent ) { newSpeak += java.lang.String . valueOf ( word . charAt ( i ) ) ; keepCurrent = false ; } else { keepCurrent = true ; } } <s> public static java.lang.String omitEveryOther ( java.lang.String word ) { boolean keepCurrent = true ; int i = 0 ; java.lang.String newSpeak = "" ; while ( i < ( word . length () ) ) { if ( keepCurrent ) { newSpeak += java.lang.String . valueOf ( word . charAt ( i ) ) ; keepCurrent = false ; } else { keepCurrent = true ; } } return newSpeak ; } <s> Forgot to increment counter in both problem 6 & 7. Fixed that as well as issue in 7th that was causing it to print numbers even if number input was less than 5.
bug_after_refactoring: { if ( rgefoxnmidrkfuhauerw ) { newSpeak += java.lang.String . valueOf ( word . charAt ( kilhbsyhzjcexwkvovtx ) ) ; rgefoxnmidrkfuhauerw = false ; } else { rgefoxnmidrkfuhauerw = true ; } } <s> public static java.lang.String omitEveryOther ( java.lang.String word ) { boolean keepCurrent = true ; int i = 0 ; java.lang.String newSpeak = "" ; while ( i < ( word . length () ) ) { if ( rgefoxnmidrkfuhauerw ) { newSpeak += java.lang.String . valueOf ( word . charAt ( kilhbsyhzjcexwkvovtx ) ) ; rgefoxnmidrkfuhauerw = false ; } else { rgefoxnmidrkfuhauerw = true ; } } return newSpeak ; } <s> Forgot to increment counter in both problem 6 & 7. Fixed that as well as issue in 7th that was causing it to print numbers even if number input was less than 5.
fix_before_refactoring: { if ( keepCurrent ) { newSpeak += java.lang.String . valueOf ( word . charAt ( i ) ) ; keepCurrent = false ; } else { keepCurrent = true ; } i ++ ; }
fix_after_refactoring: { if ( rgefoxnmidrkfuhauerw ) { newSpeak += java.lang.String . valueOf ( word . charAt ( kilhbsyhzjcexwkvovtx ) ) ; rgefoxnmidrkfuhauerw = false ; } else { rgefoxnmidrkfuhauerw = true ; } kilhbsyhzjcexwkvovtx ++ ; }
× fix_prediction_before: { if ( keepCurrent ) { newSpeak += java.lang.String . valueOf ( word . charAt ( i ) ) ; keepCurrent = false ; } else { keepCurrent = true ; } }
× fix_prediction_after: { if ( rgefoxnmidrkfuhauerw ) { newSpeak += java.lang.String . valueOf ( word . charAt ( kilhbsyhzjcexwkvovtx ) ) ; } else { rgefoxnmidrkfuhauerw = false ; } break; }

line_index: 866
bug_before_refactoring: public int getValue ( gameplay.Card card ) { int s = card . getSuit () ; int val ; switch ( s ) { case 0 : val = this . indexOf ( spades , card ) ; break; case 1 : val = this . indexOf ( hearts , card ) ; break; case 2 : val = this . indexOf ( clubs , card ) ; break; case 3 : val = this . indexOf ( diamonds , card ) ; break; default: val = 0 ; } return val ; } <s> public int getValue ( gameplay.Card card ) { int s = card . getSuit () ; int val ; switch ( s ) { case 0 : val = this . indexOf ( spades , card ) ; break; case 1 : val = this . indexOf ( hearts , card ) ; break; case 2 : val = this . indexOf ( clubs , card ) ; break; case 3 : val = this . indexOf ( diamonds , card ) ; break; default: val = 0 ; } return val ; } <s> Fixed indexof issue
bug_after_refactoring: public int getValue ( gameplay.Card card ) { int dfltiwxurayultteufzs = card . getSuit () ; int wajsqsyekzpqemernmwk ; switch ( dfltiwxurayultteufzs ) { case 0 : wajsqsyekzpqemernmwk = this . indexOf ( spades , card ) ; break; case 1 : wajsqsyekzpqemernmwk = this . indexOf ( hearts , card ) ; break; case 2 : wajsqsyekzpqemernmwk = this . indexOf ( clubs , card ) ; break; case 3 : wajsqsyekzpqemernmwk = this . indexOf ( diamonds , card ) ; break; default: wajsqsyekzpqemernmwk = 0 ; } return wajsqsyekzpqemernmwk ; } <s> public int getValue ( gameplay.Card card ) { int dfltiwxurayultteufzs = card . getSuit () ; int wajsqsyekzpqemernmwk ; switch ( dfltiwxurayultteufzs ) { case 0 : wajsqsyekzpqemernmwk = this . indexOf ( spades , card ) ; break; case 1 : wajsqsyekzpqemernmwk = this . indexOf ( hearts , card ) ; break; case 2 : wajsqsyekzpqemernmwk = this . indexOf ( clubs , card ) ; break; case 3 : wajsqsyekzpqemernmwk = this . indexOf ( diamonds , card ) ; break; default: wajsqsyekzpqemernmwk = 0 ; } return wajsqsyekzpqemernmwk ; } <s> Fixed indexof issue
fix_before_refactoring: public int getValue ( gameplay.Card card ) { int s = card . getSuit () ; int val ; switch ( s ) { case 0 : val = this . spades . indexOf ( card ) ; break; case 1 : val = this . hearts . indexOf ( card ) ; break; case 2 : val = this . clubs . indexOf ( card ) ; break; case 3 : val = this . diamonds . indexOf ( card ) ; break; default: val = 0 ; } return val ; }
fix_after_refactoring: public int getValue ( gameplay.Card card ) { int dfltiwxurayultteufzs = card . getSuit () ; int wajsqsyekzpqemernmwk ; switch ( dfltiwxurayultteufzs ) { case 0 : wajsqsyekzpqemernmwk = this . spades . indexOf ( card ) ; break; case 1 : wajsqsyekzpqemernmwk = this . hearts . indexOf ( card ) ; break; case 2 : wajsqsyekzpqemernmwk = this . clubs . indexOf ( card ) ; break; case 3 : wajsqsyekzpqemernmwk = this . diamonds . indexOf ( card ) ; break; default: wajsqsyekzpqemernmwk = 0 ; } return wajsqsyekzpqemernmwk ; }
× fix_prediction_before: public int getValue ( gameplay.Card card ) { int s = card . getSuit () ; int val ; switch ( s ) { case 0 : val = this . indexOf ( spades , card ) ; break; case 1 : val = this . indexOf ( hearts , card ) ; break; case 2 : val = this . indexOf ( club , card ) ; break; case 3 : val = this . indexOf ( diamonds , card ) ; break; default: val = 0 ; } return val ; }
× fix_prediction_after: public int getValue ( gameplay.Card card ) { int dfltiwxurayultteufzs = card . getSuit () ; int wajsqsyekzpqemernmwk = this . indexOf ( spades , card ) ; switch ( dfltiwxurayultteufzs ) { case 0 : wajsqsyekzpqemernmwk = this . indexOf ( spades , card ) ; break; case 1 : wajsqsyekzpqemernmwk = this . indexOf ( hearts , card ) ; break; case 2 : wajsqsyekzpqemernmwk = this . indexOf ( club , card ) ; break; default: wajsqsyekzpqemernmwk = 0 ; } return wajsqsyekzpqemernmwk ; }

line_index: 867
bug_before_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } logic . editTask ( taskID , date ) ; return true ; } <s> private boolean editTask ( java.lang.String rawInput ) { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } logic . editTask ( taskID , date ) ; return true ; } <s> fix edit bug
bug_after_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } logic . editTask ( trljrsqruedhnnydmuku , date ) ; return true ; } <s> private boolean editTask ( java.lang.String rawInput ) { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } logic . editTask ( trljrsqruedhnnydmuku , date ) ; return true ; } <s> fix edit bug
fix_before_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } return logic . editTask ( taskID , date ) ; }
fix_after_refactoring: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } return logic . editTask ( trljrsqruedhnnydmuku , date ) ; }
× fix_prediction_before: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int taskID = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( taskID ) ) { return false ; } logic . editTask ( taskID , date ) ; return true ; }
× fix_prediction_after: { java.util.ArrayList < java.lang.String > inputParts = breakString ( rawInput ) ; int trljrsqruedhnnydmuku = convertToInt ( getTaskID ( inputParts ) ) ; java.lang.String date = getDateFromRaw ( inputParts ) ; if ( isInvalidID ( trljrsqruedhnnydmuku ) ) { return false ; } logic . editTask ( trljrsqruedhnnydmuku , date ) ; return true ; }

line_index: 868
bug_before_refactoring: { boolean assert_ = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { assert_ = true ; } } org.testng.Assert . assertTrue ( assert_ ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; org.testng.Assert . assertEquals ( s , "test.int1" ) ; } <s> @ org.testng.annotations.Test public void testSubtractBusinessKey ( ) throws java.lang.Exception { boolean assert_ = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { assert_ = true ; } } org.testng.Assert . assertTrue ( assert_ ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; org.testng.Assert . assertEquals ( s , "test.int1" ) ; } <s> fix field utils problem
bug_after_refactoring: { boolean hcpofyrabifpypphgpkd = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { hcpofyrabifpypphgpkd = true ; } } org.testng.Assert . assertTrue ( hcpofyrabifpypphgpkd ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; org.testng.Assert . assertEquals ( s , "test.int1" ) ; } <s> @ org.testng.annotations.Test public void testSubtractBusinessKey ( ) throws java.lang.Exception { boolean hcpofyrabifpypphgpkd = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { hcpofyrabifpypphgpkd = true ; } } org.testng.Assert . assertTrue ( hcpofyrabifpypphgpkd ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; org.testng.Assert . assertEquals ( s , "test.int1" ) ; } <s> fix field utils problem
fix_before_refactoring: { boolean assert_ = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { assert_ = true ; } } assertTrue ( assert_ ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; assertEquals ( s , "test.int1" ) ; }
fix_after_refactoring: { boolean hcpofyrabifpypphgpkd = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { hcpofyrabifpypphgpkd = true ; } } assertTrue ( hcpofyrabifpypphgpkd ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; assertEquals ( s , "test.int1" ) ; }
× fix_prediction_before: { boolean assert_ = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { assert_ = true ; } } org.testng.Assert . assertTrue ( assert_ ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; org.testng.Assert . assertEquals ( s , "test.int1" ) ; }
× fix_prediction_after: { boolean hcpofyrabifpypphgpkd = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { hcpofyrabifpypphgpkd = true ; } } org.testng.Assert . assertTrue ( hcpofyrabifpypphgpkd ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; org.testng.Assert . assertEquals ( s , "test.int1" ) ; }

line_index: 869
bug_before_refactoring: public int getBillWorth ( int itemDamage , int stackSize ) { int cash = 0 ; switch ( itemDamage ) { case 0 : cash = 1 ; break; case 1 : cash = 5 ; break; case 2 : cash = 10 ; break; case 3 : cash = 20 ; break; case 4 : cash = 50 ; break; case 5 : cash = 100 ; break; } return cash * stackSize ; } <s> public int getBillWorth ( int itemDamage , int stackSize ) { int cash = 0 ; switch ( itemDamage ) { case 0 : cash = 1 ; break; case 1 : cash = 5 ; break; case 2 : cash = 10 ; break; case 3 : cash = 20 ; break; case 4 : cash = 50 ; break; case 5 : cash = 100 ; break; } return cash * stackSize ; } <s> fixed a small buffer bug and cleaned up a few pieces of code
bug_after_refactoring: public int getBillWorth ( int itemDamage , int stackSize ) { int rqunjgvxiijqweotlsas = 0 ; switch ( itemDamage ) { case 0 : rqunjgvxiijqweotlsas = 1 ; break; case 1 : rqunjgvxiijqweotlsas = 5 ; break; case 2 : rqunjgvxiijqweotlsas = 10 ; break; case 3 : rqunjgvxiijqweotlsas = 20 ; break; case 4 : rqunjgvxiijqweotlsas = 50 ; break; case 5 : rqunjgvxiijqweotlsas = 100 ; break; } return rqunjgvxiijqweotlsas * stackSize ; } <s> public int getBillWorth ( int itemDamage , int stackSize ) { int rqunjgvxiijqweotlsas = 0 ; switch ( itemDamage ) { case 0 : rqunjgvxiijqweotlsas = 1 ; break; case 1 : rqunjgvxiijqweotlsas = 5 ; break; case 2 : rqunjgvxiijqweotlsas = 10 ; break; case 3 : rqunjgvxiijqweotlsas = 20 ; break; case 4 : rqunjgvxiijqweotlsas = 50 ; break; case 5 : rqunjgvxiijqweotlsas = 100 ; break; } return rqunjgvxiijqweotlsas * stackSize ; } <s> fixed a small buffer bug and cleaned up a few pieces of code
fix_before_refactoring: private int getBillWorth ( int itemDamage , int stackSize ) { int cash = 0 ; switch ( itemDamage ) { case 0 : cash = 1 ; break; case 1 : cash = 5 ; break; case 2 : cash = 10 ; break; case 3 : cash = 20 ; break; case 4 : cash = 50 ; break; case 5 : cash = 100 ; break; } return cash * stackSize ; }
fix_after_refactoring: private int getBillWorth ( int itemDamage , int stackSize ) { int rqunjgvxiijqweotlsas = 0 ; switch ( itemDamage ) { case 0 : rqunjgvxiijqweotlsas = 1 ; break; case 1 : rqunjgvxiijqweotlsas = 5 ; break; case 2 : rqunjgvxiijqweotlsas = 10 ; break; case 3 : rqunjgvxiijqweotlsas = 20 ; break; case 4 : rqunjgvxiijqweotlsas = 50 ; break; case 5 : rqunjgvxiijqweotlsas = 100 ; break; } return rqunjgvxiijqweotlsas * stackSize ; }
× fix_prediction_before: public int getBillWorth ( int itemDamage , int stackSize ) { int cash = 0 ; switch ( itemDamage ) { case 0 : cash = 1 ; break; case 1 : cash = 5 ; break; case 2 : cash = 10 ; break; case 3 : cash = 20 ; break; case 4 : cash = 50 ; break; case 5 : cash = 100 ; break; } return cash * stackSize ; }
× fix_prediction_after: public int getBillWorth ( int itemDamage , int stackSize ) { int rqunjgvxiijqweotlsas = 0 ; switch ( itemDamage ) { case 0 : rqunjgvxiijqweotlsas = 1 ; break; case 1 : rqunjgvxiijqweotlsas = 5 ; break; case 2 : rqunjgvxiijqweotlsas = 10 ; break; case 3 : rqunjgvxiijqweotlsas = 20 ; break; case 4 : rqunjgvxiijqweotlsas = 50 ; break; case 5 : rqunjgvxiijqweotlsas = 100 ; break; } return rqunjgvxiijqweotlsas ; }

line_index: 870
bug_before_refactoring: { int templateID = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "templateID" ) ) ) ) ; mob . setTemplateID ( templateID ) ; } <s> public void setTemplateID ( java.util.Map mobData , com.nkoiv.mists.game.gameobject.MapObject mob ) { if ( mobData . containsKey ( "templateID" ) ) { int templateID = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "templateID" ) ) ) ) ; mob . setTemplateID ( templateID ) ; } else { mob . setTemplateID ( getNextFreeID () ) ; } } <s> Fixed problems with save/loading doors (missing templateID in createFromTemplate())
bug_after_refactoring: { int qwjeysdfbjlojvwabujh = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "qwjeysdfbjlojvwabujh" ) ) ) ) ; mob . setTemplateID ( qwjeysdfbjlojvwabujh ) ; } <s> public void setTemplateID ( java.util.Map mobData , com.nkoiv.mists.game.gameobject.MapObject mob ) { if ( mobData . containsKey ( "templateID" ) ) { int qwjeysdfbjlojvwabujh = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "qwjeysdfbjlojvwabujh" ) ) ) ) ; mob . setTemplateID ( qwjeysdfbjlojvwabujh ) ; } else { mob . setTemplateID ( getNextFreeID () ) ; } } <s> Fixed problems with save/loading doors (missing templateID in createFromTemplate())
fix_before_refactoring: { int templateID = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "templateID" ) ) ) ) ; if ( templateID < 1 ) mob . setTemplateID ( getNextFreeID () ) ; else mob . setTemplateID ( templateID ) ; }
fix_after_refactoring: { int qwjeysdfbjlojvwabujh = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "qwjeysdfbjlojvwabujh" ) ) ) ) ; if ( qwjeysdfbjlojvwabujh < 1 ) mob . setTemplateID ( getNextFreeID () ) ; else mob . setTemplateID ( qwjeysdfbjlojvwabujh ) ; }
× fix_prediction_before: { int templateID = java.lang.Integer . parseInt ( ( ( java.lang.String ) ( mobData . get ( "templateID" ) ) ) ) ; mob . setTemplateID ( templateID ) ; }
× fix_prediction_after: { int qwjeysdfbjlojvwabujh = ( ( java.lang.String ) ( mobData . get ( "qwjeysdfbjlojvwabujh" ) ) ) ; mob . setTemplateID ( qwjeysdfbjlojvwabujh ) ; }

line_index: 871
bug_before_refactoring: { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long delay ; try { delay = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { delay = 240 ; } android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , ( "timerDelay : " + delay ) ) ; if ( delay != 0 ) { delay = ( 1000 * 60 ) * delay ; startInactiveTimer ( delay ) ; } else { android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , "Inactive Timer Skipped" ) ; } } <s> public void inactiveTimerStart () { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long delay ; try { delay = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { delay = 240 ; } android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , ( "timerDelay : " + delay ) ) ; if ( delay != 0 ) { delay = ( 1000 * 60 ) * delay ; startInactiveTimer ( delay ) ; } else { android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , "Inactive Timer Skipped" ) ; } } <s> 1.0.19.1 Test Build -Changed MainMenu initialization to hopefully resolve bugs in the start of the GPSIntervalService and to eliminate the GPSStatusIndicator from showing Green before it should
bug_after_refactoring: { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long yoymqmgszgnwinmsooqq ; try { yoymqmgszgnwinmsooqq = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { yoymqmgszgnwinmsooqq = 240 ; } android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , ( "timerDelay : " + yoymqmgszgnwinmsooqq ) ) ; if ( yoymqmgszgnwinmsooqq != 0 ) { yoymqmgszgnwinmsooqq = ( 1000 * 60 ) * yoymqmgszgnwinmsooqq ; startInactiveTimer ( yoymqmgszgnwinmsooqq ) ; } else { android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , "Inactive Timer Skipped" ) ; } } <s> public void inactiveTimerStart () { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long yoymqmgszgnwinmsooqq ; try { yoymqmgszgnwinmsooqq = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { yoymqmgszgnwinmsooqq = 240 ; } android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , ( "timerDelay : " + yoymqmgszgnwinmsooqq ) ) ; if ( yoymqmgszgnwinmsooqq != 0 ) { yoymqmgszgnwinmsooqq = ( 1000 * 60 ) * yoymqmgszgnwinmsooqq ; startInactiveTimer ( yoymqmgszgnwinmsooqq ) ; } else { android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , "Inactive Timer Skipped" ) ; } } <s> 1.0.19.1 Test Build -Changed MainMenu initialization to hopefully resolve bugs in the start of the GPSIntervalService and to eliminate the GPSStatusIndicator from showing Green before it should
fix_before_refactoring: { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long delay ; try { delay = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { delay = 240 ; } if ( delay != 0 ) { delay = ( 1000 * 60 ) * delay ; startInactiveTimer ( delay ) ; } else {} }
fix_after_refactoring: { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long yoymqmgszgnwinmsooqq ; try { yoymqmgszgnwinmsooqq = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { yoymqmgszgnwinmsooqq = 240 ; } if ( yoymqmgszgnwinmsooqq != 0 ) { yoymqmgszgnwinmsooqq = ( 1000 * 60 ) * yoymqmgszgnwinmsooqq ; startInactiveTimer ( yoymqmgszgnwinmsooqq ) ; } else {} }
× fix_prediction_before: { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long delay ; try { delay = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { delay = 240 ; } if ( delay != 0 ) { delay = ( 1000 * 60 ) * delay ; startInactiveTimer ( delay ) ; } else { android.util.Log . i ( com.givenhansco.keystonenavigation.Activities.MainMenuActivity.TAG , "Inactive Timer Skipped" ) ; } }
× fix_prediction_after: { java.lang.String sDelay = settings . getString ( "inactiveTimerMins" , com.givenhansco.keystonenavigation.Activities.MainMenuActivity.DEFAULT_TIMER_DELAY ) ; long yoymqmgszgnwinmsooqq ; try { yoymqmgszgnwinmsooqq = java.lang.Long . parseLong ( sDelay ) ; } catch ( java.lang.Exception e ) { yoymqmgszgnwinmsooqq = 240 ; } if ( yoymqmgszgnwinmsooqq != 0 ) { yoymqmgszgnwinmsooqq = ( 1000 * 60 ) * yoymqmgszgnwinmsooqq ; startInactiveTimer ( yoymqmgszgnwinmsooqq ) ; } return sDelay ; }

line_index: 872
bug_before_refactoring: { int written = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( length , data.length ) ) ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { written ++ ; } else break; } return written == length ; } <s> public boolean writeData ( byte [] data , int length ) { int written = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( length , data.length ) ) ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { written ++ ; } else break; } return written == length ; } <s> fix encoder/decoder bugs
bug_after_refactoring: { int cqjhllvypcwnhwkummlt = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( length , data.length ) ) ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { cqjhllvypcwnhwkummlt ++ ; } else break; } return cqjhllvypcwnhwkummlt == length ; } <s> public boolean writeData ( byte [] data , int length ) { int cqjhllvypcwnhwkummlt = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( length , data.length ) ) ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { cqjhllvypcwnhwkummlt ++ ; } else break; } return cqjhllvypcwnhwkummlt == length ; } <s> fix encoder/decoder bugs
fix_before_refactoring: { int written = 0 ; length = java.lang.Math . min ( length , data.length ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { written ++ ; } else break; } return written == length ; }
fix_after_refactoring: { int cqjhllvypcwnhwkummlt = 0 ; length = java.lang.Math . min ( length , data.length ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { cqjhllvypcwnhwkummlt ++ ; } else break; } return cqjhllvypcwnhwkummlt == length ; }
× fix_prediction_before: { int written = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( length , data.length ) ) ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { written ++ ; } else break; } return written == length ; }
× fix_prediction_after: { for ( int i = 0 ; i < ( java.lang.Math . min ( length , data.length ) ) ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { cqjhllvypcwnhwkummlt ++ ; } else break; } return cqjhllvypcwnhwkummlt == length ; }

line_index: 873
bug_before_refactoring: public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
bug_after_refactoring: public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int jucjkrfmpojebsgileft = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { jucjkrfmpojebsgileft ++ ; } } return jucjkrfmpojebsgileft ; } <s> public int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int jucjkrfmpojebsgileft = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { jucjkrfmpojebsgileft ++ ; } } return jucjkrfmpojebsgileft ; } <s> Merge pull request #27 from k1s/master  Fixed errors and added some features according 5th module
fix_before_refactoring: private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; }
fix_after_refactoring: private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int jucjkrfmpojebsgileft = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { jucjkrfmpojebsgileft ++ ; } } return jucjkrfmpojebsgileft ; }
× fix_prediction_before: private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { return playerRowCount ; } } return playerRowCount ; }
× fix_prediction_after: public static int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int jucjkrfmpojebsgileft = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { jucjkrfmpojebsgileft ++ ; } } return jucjkrfmpojebsgileft ; }

line_index: 874
bug_before_refactoring: { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; if ( currentLocation == null ) { return - 1 ; } android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float distance = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( distance ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; } <s> private float calculateDistanceToTheNextRadar ( java.lang.Double latitude , java.lang.Double longitude ) { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; if ( currentLocation == null ) { return - 1 ; } android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float distance = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( distance ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; } <s> Fix GPS temporary no location issue
bug_after_refactoring: { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; if ( currentLocation == null ) { return - 1 ; } android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float hstmqastlepsbxyoenyv = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( hstmqastlepsbxyoenyv ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; } <s> private float calculateDistanceToTheNextRadar ( java.lang.Double latitude , java.lang.Double longitude ) { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; if ( currentLocation == null ) { return - 1 ; } android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float hstmqastlepsbxyoenyv = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( hstmqastlepsbxyoenyv ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; } <s> Fix GPS temporary no location issue
fix_before_refactoring: { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float distance = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( distance ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; }
fix_after_refactoring: { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float hstmqastlepsbxyoenyv = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( hstmqastlepsbxyoenyv ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; }
× fix_prediction_before: { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; if ( currentLocation == null ) { return - 1 ; } android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float distance = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( distance ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; }
× fix_prediction_after: { android.location.Location currentLocation = com.mobilemakers.juansoler.appradar.StartScreenFragment . getLastLocation () ; if ( currentLocation == null ) { return - 1 ; } android.location.Location nextLocation = createTheNextLocation ( latitude , longitude ) ; float hstmqastlepsbxyoenyv = ( currentLocation . distanceTo ( nextLocation ) ) / 1000 ; return new java.math.BigDecimal ( hstmqastlepsbxyoenyv ) . setScale ( 1 , java.math.BigDecimal.ROUND_HALF_UP ) . floatValue () ; }

line_index: 875
bug_before_refactoring: void addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = intervalViewToAdd ( interval ) ; int pos = intervalsView . getChildCount () ; if ( ( pos % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , pos ) ; } <s> void addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = intervalViewToAdd ( interval ) ; int pos = intervalsView . getChildCount () ; if ( ( pos % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , pos ) ; } <s> Fixed afew bugs.
bug_after_refactoring: void addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = intervalViewToAdd ( interval ) ; int kgpjfmcvbmnmsualskbn = intervalsView . getChildCount () ; if ( ( kgpjfmcvbmnmsualskbn % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , kgpjfmcvbmnmsualskbn ) ; } <s> void addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = intervalViewToAdd ( interval ) ; int kgpjfmcvbmnmsualskbn = intervalsView . getChildCount () ; if ( ( kgpjfmcvbmnmsualskbn % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , kgpjfmcvbmnmsualskbn ) ; } <s> Fixed afew bugs.
fix_before_refactoring: com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = new com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView ( context , interval ) ; int pos = ( intervalsView . getChildCount () ) - 2 ; if ( ( pos % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , pos ) ; return intervalView ; }
fix_after_refactoring: com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = new com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView ( context , interval ) ; int kgpjfmcvbmnmsualskbn = ( intervalsView . getChildCount () ) - 2 ; if ( ( kgpjfmcvbmnmsualskbn % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , kgpjfmcvbmnmsualskbn ) ; return intervalView ; }
× fix_prediction_before: void addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { if ( ( intervalViewToAdd ( interval ) ) != null ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = intervalViewToAdd ( interval ) ; int pos = intervalsView . getChildCount () ; if ( ( pos % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , pos ) ; } }
× fix_prediction_after: void addInterval ( com.example.mapinguari.workoutclass.exerciseObjects.Interval interval ) { com.example.mapinguari.workoutclass.exerciseObjectsViews.IntervalView intervalView = intervalViewToAdd ( interval ) ; int kgpjfmcvbmnmsualskbn = intervalsView . getChildCount () ; if ( ( kgpjfmcvbmnmsualskbn % 2 ) == 0 ) { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.even_list_item ) ) ; } else { intervalView . setBackgroundColor ( getResources () . getColor ( R.color.odd_list_item ) ) ; } intervalsView . addView ( intervalView , kgpjfmcvbmnmsualskbn ) ; }

line_index: 876
bug_before_refactoring: { currentQuestion = quiz . nextQuestion () ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int index = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ index ] . setText ( ans ) ; index ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; broadcastToClients ( NetworkMessages.nextQ ) ; return true ; } <s> private boolean getNextQuestion () { currentQuestion = quiz . nextQuestion () ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int index = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ index ] . setText ( ans ) ; index ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; broadcastToClients ( NetworkMessages.nextQ ) ; return true ; } <s> Fixed leaderboard bug  ClientView now draws back button properly
bug_after_refactoring: { currentQuestion = quiz . nextQuestion () ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int dovmawikzeponbnobvcn = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ dovmawikzeponbnobvcn ] . setText ( ans ) ; dovmawikzeponbnobvcn ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; broadcastToClients ( NetworkMessages.nextQ ) ; return true ; } <s> private boolean getNextQuestion () { currentQuestion = quiz . nextQuestion () ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int dovmawikzeponbnobvcn = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ dovmawikzeponbnobvcn ] . setText ( ans ) ; dovmawikzeponbnobvcn ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; broadcastToClients ( NetworkMessages.nextQ ) ; return true ; } <s> Fixed leaderboard bug  ClientView now draws back button properly
fix_before_refactoring: { currentQuestion = quiz . nextQuestion () ; broadcastToClients ( NetworkMessages.nextQ ) ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int index = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ index ] . setText ( ans ) ; index ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; return true ; }
fix_after_refactoring: { currentQuestion = quiz . nextQuestion () ; broadcastToClients ( NetworkMessages.nextQ ) ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int dovmawikzeponbnobvcn = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ dovmawikzeponbnobvcn ] . setText ( ans ) ; dovmawikzeponbnobvcn ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; return true ; }
× fix_prediction_before: { currentQuestion = quiz . nextQuestion () ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int index = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ index ] . setText ( ans ) ; index ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; return true ; }
× fix_prediction_after: { currentQuestion = quiz . nextQuestion () ; if ( ( currentQuestion ) == null ) { currentState = backend.GameState.GAME_OVER ; return false ; } lblCurrentQ . setText ( currentQuestion . getQ () ) ; int dovmawikzeponbnobvcn = 0 ; for ( java.lang.String ans : currentQuestion . getAnswers () ) { answers [ dovmawikzeponbnobvcn ] . setText ( ans ) ; dovmawikzeponbnobvcn ++ ; } lblTime . setText ( java.lang.Integer . toString ( currentQuestion . getTimeLimit () ) ) ; currentState = backend.GameState.WAITING_FOR_ANSWERS ; broadcastToClients ( NetworkMessages.nextQ ) ; return true ; }

line_index: 878
bug_before_refactoring: public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; } <s> public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; } <s> Fixed bugs in the methods "add()"  "subtract()" and "compareTo()".
bug_after_refactoring: public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; } <s> public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; } <s> Fixed bugs in the methods "add()"  "subtract()" and "compareTo()".
fix_before_refactoring: public de.marsetex.lab2.task3.RationalNumber add ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; }
fix_after_refactoring: public de.marsetex.lab2.task3.RationalNumber add ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzfhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; }
× fix_prediction_before: public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int zaehlerTemp = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int nennerTemp = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( zaehlerTemp , nennerTemp ) ; }
× fix_prediction_after: public de.marsetex.lab2.task3.RationalNumber subtract ( de.marsetex.lab2.task3.RationalNumber other ) { int nakqahabnnznpsqrpdyz = ( ( zaehler ) * ( other.nenner ) ) + ( ( other.zaehler ) * ( nenner ) ) ; int uqxrlpomiizuzzhsfekx = ( nenner ) * ( other.nenner ) ; return new de.marsetex.lab2.task3.RationalNumber ( nakqahabnnznpsqrpdyz , uqxrlpomiizuzfhsfekx ) ; }

line_index: 879
bug_before_refactoring: i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) <s> public static java.lang.String getTodaysTshirt () { if ( ( com.coollooks.Util.tShirtPathList ) == null ) com.coollooks.Util . setTshirtList () ; int i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) ; if ( ( com.coollooks.Util.tShirtPathList . size () ) > 0 ) return com.coollooks.Util.tShirtPathList . get ( i ) ; else return null ; } <s> Fixed anr issue and optimized hash code
bug_after_refactoring: sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) <s> public static java.lang.String getTodaysTshirt () { if ( ( com.coollooks.Util.tShirtPathList ) == null ) com.coollooks.Util . setTshirtList () ; int sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) ) ; if ( ( com.coollooks.Util.tShirtPathList . size () ) > 0 ) return com.coollooks.Util.tShirtPathList . get ( i ) ; else return null ; } <s> Fixed anr issue and optimized hash code
fix_before_refactoring: i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( com.coollooks.Util.tShirtPathList . size () ) ) )
fix_after_refactoring: sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( com.coollooks.Util.tShirtPathList . size () ) ) )
× fix_prediction_before: i = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) )
× fix_prediction_after: sebccvmyjxnmngxhhzwg = ( ( int ) ( ( ( java.lang.Math . random () ) * 33 ) % ( ( com.coollooks.Util.tShirtPathList . size () ) - 1 ) ) )

line_index: 880
bug_before_refactoring: { int flags = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int sessionId = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] newData = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( flags , sessionId , new communication.pdu.PDU ( newData ) ) ; } <s> public static communication.pdu.SessionPDU createSessionPDU ( byte [] data ) { int flags = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int sessionId = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] newData = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( flags , sessionId , new communication.pdu.PDU ( newData ) ) ; } <s> Bug #44 - Fixed nullpointer.
bug_after_refactoring: { int jtddzlurpcgnlyqfutvg = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int eddjgeflxijxstlfewyz = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] fpicyoaezrpmecpljbfz = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( jtddzlurpcgnlyqfutvg , eddjgeflxijxstlfewyz , new communication.pdu.PDU ( fpicyoaezrpmecpljbfz ) ) ; } <s> public static communication.pdu.SessionPDU createSessionPDU ( byte [] data ) { int jtddzlurpcgnlyqfutvg = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int eddjgeflxijxstlfewyz = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] fpicyoaezrpmecpljbfz = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( jtddzlurpcgnlyqfutvg , eddjgeflxijxstlfewyz , new communication.pdu.PDU ( fpicyoaezrpmecpljbfz ) ) ; } <s> Bug #44 - Fixed nullpointer.
fix_before_refactoring: { if ( ( data == null ) || ( ( data.length ) < 2 ) ) { return null ; } int flags = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int sessionId = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] newData = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( flags , sessionId , new communication.pdu.PDU ( newData ) ) ; }
fix_after_refactoring: { if ( ( data == null ) || ( ( data.length ) < 2 ) ) { return null ; } int jtddzlurpcgnlyqfutvg = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int eddjgeflxijxstlfewyz = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] fpicyoaezrpmecpljbfz = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( jtddzlurpcgnlyqfutvg , eddjgeflxijxstlfewyz , new communication.pdu.PDU ( fpicyoaezrpmecpljbfz ) ) ; }
× fix_prediction_before: { int flags = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int sessionId = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] newData = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( flags , sessionId , new communication.pdu.PDU ( newData ) ) ; }
× fix_prediction_after: { int jtddzlurpcgnlyqfutvg = communication.utils.NumberParser . intToByte ( data [ 0 ] ) ; int eddjgeflxijxstlfewyz = communication.utils.NumberParser . intToByte ( data [ 1 ] ) ; byte [] fpicyoaezrpmecpljbfz = java.util.Arrays . copyOfRange ( data , 2 , data.length ) ; return new communication.pdu.SessionPDU ( jtddzlurpcgnlyqfutvg , eddjgeflxijxstlfewyz , new communication.pdu.PDU ( fpicyoaezrpmecpljbfz ) ) ; }

line_index: 882
bug_before_refactoring: { int count = 0 ; int contentLength = content . length () ; for ( int i = 0 ; i < contentLength ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { count ++ ; } } return count ; } <s> public static int count ( java.lang.String content , char charForSearch ) { int count = 0 ; int contentLength = content . length () ; for ( int i = 0 ; i < contentLength ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { count ++ ; } } return count ; } <s> fix bug
bug_after_refactoring: { int itiohoxsppmhblexqnbh = 0 ; int ktljzxlydhxifapycamm = content . length () ; for ( int i = 0 ; i < ktljzxlydhxifapycamm ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { itiohoxsppmhblexqnbh ++ ; } } return itiohoxsppmhblexqnbh ; } <s> public static int count ( java.lang.String content , char charForSearch ) { int itiohoxsppmhblexqnbh = 0 ; int ktljzxlydhxifapycamm = content . length () ; for ( int i = 0 ; i < ktljzxlydhxifapycamm ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { itiohoxsppmhblexqnbh ++ ; } } return itiohoxsppmhblexqnbh ; } <s> fix bug
fix_before_refactoring: { int count = 0 ; if ( null == content ) { return 0 ; } int contentLength = content . length () ; for ( int i = 0 ; i < contentLength ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { count ++ ; } } return count ; }
fix_after_refactoring: { int itiohoxsppmhblexqnbh = 0 ; if ( null == content ) { return 0 ; } int ktljzxlydhxifapycamm = content . length () ; for ( int i = 0 ; i < ktljzxlydhxifapycamm ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { itiohoxsppmhblexqnbh ++ ; } } return itiohoxsppmhblexqnbh ; }
× fix_prediction_before: { int count = 0 ; int contentLength = content . length () ; for ( int i = 0 ; i < contentLength ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { count ++ ; } } return count ; }
× fix_prediction_after: { int ktljzxlydhxifapycamm = content . length () ; for ( int i = 0 ; i < ktljzxlydhxifapycamm = content . length () ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { return - 1 ; } } return itiohoxsppmhblexqnbh ; }

line_index: 883
bug_before_refactoring: private double distanceTo ( pathfinding.MapNode n ) { double xDelta = ( this . location . getX () ) - ( n.location . getX () ) ; double yDelta = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( xDelta , 2 ) ) + ( java.lang.Math . pow ( yDelta , 2 ) ) ) ) ; } <s> private double distanceTo ( pathfinding.MapNode n ) { double xDelta = ( this . location . getX () ) - ( n.location . getX () ) ; double yDelta = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( xDelta , 2 ) ) + ( java.lang.Math . pow ( yDelta , 2 ) ) ) ) ; } <s> fixed merge error in Main fxml  and made distanceTo function in MapNode a public function
bug_after_refactoring: private double distanceTo ( pathfinding.MapNode n ) { double bwgphjobaqoiknijaqnu = ( this . location . getX () ) - ( n.location . getX () ) ; double pchhogtwbcskspxdnfdu = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( bwgphjobaqoiknijaqnu , 2 ) ) + ( java.lang.Math . pow ( pchhogtwbcskspxdnfdu , 2 ) ) ) ) ; } <s> private double distanceTo ( pathfinding.MapNode n ) { double bwgphjobaqoiknijaqnu = ( this . location . getX () ) - ( n.location . getX () ) ; double pchhogtwbcskspxdnfdu = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( bwgphjobaqoiknijaqnu , 2 ) ) + ( java.lang.Math . pow ( pchhogtwbcskspxdnfdu , 2 ) ) ) ) ; } <s> fixed merge error in Main fxml  and made distanceTo function in MapNode a public function
fix_before_refactoring: public double distanceTo ( pathfinding.MapNode n ) { double xDelta = ( this . location . getX () ) - ( n.location . getX () ) ; double yDelta = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( xDelta , 2 ) ) + ( java.lang.Math . pow ( yDelta , 2 ) ) ) ) ; }
fix_after_refactoring: public double distanceTo ( pathfinding.MapNode n ) { double bwgphjobaqoiknijaqnu = ( this . location . getX () ) - ( n.location . getX () ) ; double pchhogtwbcskspxdnfdu = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( bwgphjobaqoiknijaqnu , 2 ) ) + ( java.lang.Math . pow ( pchhogtwbcskspxdnfdu , 2 ) ) ) ) ; }
× fix_prediction_before: private static double distanceTo ( pathfinding.MapNode n ) { double xDelta = ( n.location . getX () ) - ( n.location . getX () ) ; double yDelta = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( xDelta , 2 ) ) + ( java.lang.Math . pow ( yDelta , 2 ) ) ) ) ; }
× fix_prediction_after: private static double distanceTo ( pathfinding.MapNode n ) { double bwgphjobaqoiknijaqnu = ( n.location . getX () ) - ( n.location . getX () ) ; double pchhogtwbcskspxdnfdu = ( this . location . getY () ) - ( n.location . getY () ) ; return java.lang.Math . sqrt ( ( ( java.lang.Math . pow ( bwgphjobaqoiknijaqnu , 2 ) ) + ( java.lang.Math . pow ( pchhogtwbcskspxdnfdu , 2 ) ) ) ) ; }

line_index: 884
bug_before_refactoring: { long time_start = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long time_end = java.lang.System . currentTimeMillis () ; java.lang.System.out . println ( "-------------------------------------------------------" ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( time_end - time_start ) ) + " milisegundos." ) ) ; } <s> public static void main ( java.lang.String [] args ) { long time_start = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long time_end = java.lang.System . currentTimeMillis () ; java.lang.System.out . println ( "-------------------------------------------------------" ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( time_end - time_start ) ) + " milisegundos." ) ) ; } <s> Bug fix greedy
bug_after_refactoring: { long lycmzlyswyoufedrytag = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long leikajbntzlzqpuhwjjo = java.lang.System . currentTimeMillis () ; java.lang.System.out . println ( "-------------------------------------------------------" ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( leikajbntzlzqpuhwjjo - lycmzlyswyoufedrytag ) ) + " milisegundos." ) ) ; } <s> public static void main ( java.lang.String [] args ) { long lycmzlyswyoufedrytag = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long leikajbntzlzqpuhwjjo = java.lang.System . currentTimeMillis () ; java.lang.System.out . println ( "-------------------------------------------------------" ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( leikajbntzlzqpuhwjjo - lycmzlyswyoufedrytag ) ) + " milisegundos." ) ) ; } <s> Bug fix greedy
fix_before_refactoring: { long time_start = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long time_end = java.lang.System . currentTimeMillis () ; java.lang.System.out . println () ; java.lang.System.out . println ( "-------------------------------------------------------" ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( time_end - time_start ) ) + " milisegundos." ) ) ; }
fix_after_refactoring: { long lycmzlyswyoufedrytag = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long leikajbntzlzqpuhwjjo = java.lang.System . currentTimeMillis () ; java.lang.System.out . println () ; java.lang.System.out . println ( "-------------------------------------------------------" ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( leikajbntzlzqpuhwjjo - lycmzlyswyoufedrytag ) ) + " milisegundos." ) ) ; }
× fix_prediction_before: { long time_start = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long time_end = java.lang.System . currentTimeMillis () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; }
× fix_prediction_after: { long lycmzlyswyoufedrytag = java.lang.System . currentTimeMillis () ; greedy.Greedy10 . cargarDatos () ; greedy.Greedy10 . resolverProblema () ; greedy.Greedy10 . mostrarMochila () ; long leikajbntzlzqpuhwjjo = java.lang.System . currentTimeMillis () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println ( ( ( ">> Tiempo de duracion del proceso: " + ( leikajbntzlzqpuhwjjo - lycmzlyswyoufedrytag ) ) + " milisegundos." ) ) ; }

line_index: 885
bug_before_refactoring: public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBDtoSize = java.math.BigDecimal.ZERO ; if ( java.lang.Double . isFinite ( value ) ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int newScale = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; valueBDtoSize = valueBD . setScale ( newScale , java.math.RoundingMode.HALF_UP ) ; } return valueBDtoSize . doubleValue () ; } <s> public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBDtoSize = java.math.BigDecimal.ZERO ; if ( java.lang.Double . isFinite ( value ) ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int newScale = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; valueBDtoSize = valueBD . setScale ( newScale , java.math.RoundingMode.HALF_UP ) ; } return valueBDtoSize . doubleValue () ; } <s> Revert "Adds tests and bug fixes. (#21)" (#22)  This reverts commit b3438aabfa84446868fd9c3fcd901903195aec2e.
bug_after_refactoring: public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBDtoSize = java.math.BigDecimal.ZERO ; if ( java.lang.Double . isFinite ( value ) ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int awtawejhefhkqeepbuvo = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; valueBDtoSize = valueBD . setScale ( awtawejhefhkqeepbuvo , java.math.RoundingMode.HALF_UP ) ; } return valueBDtoSize . doubleValue () ; } <s> public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBDtoSize = java.math.BigDecimal.ZERO ; if ( java.lang.Double . isFinite ( value ) ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int awtawejhefhkqeepbuvo = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; valueBDtoSize = valueBD . setScale ( awtawejhefhkqeepbuvo , java.math.RoundingMode.HALF_UP ) ; } return valueBDtoSize . doubleValue () ; } <s> Revert "Adds tests and bug fixes. (#21)" (#22)  This reverts commit b3438aabfa84446868fd9c3fcd901903195aec2e.
fix_before_refactoring: public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int newScale = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; java.math.BigDecimal valueBDtoSize = valueBD . setScale ( newScale , java.math.RoundingMode.HALF_UP ) ; return valueBDtoSize . doubleValue () ; }
fix_after_refactoring: public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int awtawejhefhkqeepbuvo = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; java.math.BigDecimal valueBDtoSize = valueBD . setScale ( awtawejhefhkqeepbuvo , java.math.RoundingMode.HALF_UP ) ; return valueBDtoSize . doubleValue () ; }
× fix_prediction_before: public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBDtoSize = java.math.BigDecimal.ZERO ; if ( java.lang.Double . isFinite ( value ) ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int newScale = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; valueBDtoSize = valueBD . setScale ( newScale , java.math.RoundingMode.HALF_UP ) ; } return valueBDtoSize . doubleValue () ; }
× fix_prediction_after: public static double roundedToSize ( double value , int sigFigs ) { java.math.BigDecimal valueBDtoSize = java.math.BigDecimal.ZERO ; if ( java.lang.Double . isFinite ( value ) ) { java.math.BigDecimal valueBD = new java.math.BigDecimal ( value ) ; int awtawejhefhkqeepbuvo = sigFigs - ( ( valueBD . precision () ) - ( valueBD . scale () ) ) ; valueBDtoSize = valueBD . setScale ( awtawejhefhkqeepbuvo , java.math.RoundingMode.HALF_UP ) ; } return valueBDtoSize . doubleValue () ; }

line_index: 886
bug_before_refactoring: if ( quantity <= ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; } <s> private boolean validateQuantity () { int quantity = java.lang.Integer . valueOf ( subgroupsQuantity . getText () . toString () ) ; if ( quantity <= ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; } return true ; } <s> many bug fixes
bug_after_refactoring: if ( jirtvyhcvztncsagocsg <= ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; } <s> private boolean validateQuantity () { int quantity = java.lang.Integer . valueOf ( subgroupsQuantity . getText () . toString () ) ; if ( jirtvyhcvztncsagocsg <= ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; } return true ; } <s> many bug fixes
fix_before_refactoring: if ( quantity > ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; }
fix_after_refactoring: if ( jirtvyhcvztncsagocsg > ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; }
× fix_prediction_before: if ( quantity >= ( getMaximumQuantity () ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; }
× fix_prediction_after: if ( ( jirtvyhcvztncsagocsg <= ( getMaximumQuantity () ) ) || ( quantity < ( getMaximumQuantity () ) ) ) { subgroupsQuantityLayout . setError ( getString ( R.string.nwinners_msg_validate_quantity , group . getItemCount () ) ) ; requestFocus ( subgroupsQuantity ) ; return false ; }


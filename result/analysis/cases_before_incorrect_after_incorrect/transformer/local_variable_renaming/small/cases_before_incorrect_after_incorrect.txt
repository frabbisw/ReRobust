line_index: 1
bug_before_refactoring: @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelUpdateOrInsert" ) public java.lang.Boolean labelUpdateOrInsert ( com.apcompany.user.pojo.TLabelsRel tlabelsrel , org.springframework.ui.Model model ) { int count = dataService . insertOrUpateTLabelsRel ( tlabelsrel ) ; return count > 0 ; } <s> @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelUpdateOrInsert" ) public java.lang.Boolean labelUpdateOrInsert ( com.apcompany.user.pojo.TLabelsRel tlabelsrel , org.springframework.ui.Model model ) { int count = dataService . insertOrUpateTLabelsRel ( tlabelsrel ) ; return count > 0 ; } <s> fix label bug
bug_after_refactoring: @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelUpdateOrInsert" ) public java.lang.Boolean labelUpdateOrInsert ( com.apcompany.user.pojo.TLabelsRel tlabelsrel , org.springframework.ui.Model model ) { int mrsmdcpbhpgtgivvztlr = dataService . insertOrUpateTLabelsRel ( tlabelsrel ) ; return mrsmdcpbhpgtgivvztlr > 0 ; } <s> @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelUpdateOrInsert" ) public java.lang.Boolean labelUpdateOrInsert ( com.apcompany.user.pojo.TLabelsRel tlabelsrel , org.springframework.ui.Model model ) { int mrsmdcpbhpgtgivvztlr = dataService . insertOrUpateTLabelsRel ( tlabelsrel ) ; return mrsmdcpbhpgtgivvztlr > 0 ; } <s> fix label bug
fix_before_refactoring: @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelUpdateOrInsert" ) @ org.springframework.web.bind.annotation.ResponseBody public java.lang.String labelUpdateOrInsert ( com.apcompany.user.pojo.TLabelsRel tlabelsrel , org.springframework.ui.Model model ) { int count = dataService . insertOrUpateTLabelsRel ( tlabelsrel ) ; return count > 0 ? "true" : "false" ; }
fix_after_refactoring: @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelUpdateOrInsert" ) @ org.springframework.web.bind.annotation.ResponseBody public java.lang.String labelUpdateOrInsert ( com.apcompany.user.pojo.TLabelsRel tlabelsrel , org.springframework.ui.Model model ) { int mrsmdcpbhpgtgivvztlr = dataService . insertOrUpateTLabelsRel ( tlabelsrel ) ; return mrsmdcpbhpgtgivvztlr > 0 ? "true" : "false" ; }
× fix_prediction_before: @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelOrUpdate" ) public java.lang.Boolean insertOrUpdate ( com.apapate.web.ui.Model t , org.springframework.ui.Model t ) { int count = 0 ; if ( count != 0 ) { countOrUpdate = tService . countOrUpdate ( data ) ; } return countOrUpdate ; }
× fix_prediction_after: @ org.springframework.web.bind.annotation.RequestMapping ( value = "/labelOrUpdate" ) public java.lang.Boolean labelOrUpdate ( java.lang.Boolean labelOrUpdate , org.springframework.ui.Model < com.tlmdh.rapjorel.vcpr.pojo.Ttl > mRelUp ) { int label = mRelService . mOrUpdate ( data ) ; if ( t != null ) { return t ; } else { return 0 ; } }

line_index: 2
bug_before_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int index = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "index" , index ) ; startService ( intent ) ; } <s> private void startScreenshots () { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int index = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "index" , index ) ; startService ( intent ) ; } <s> Minor bug fixes  major bug with widget not posting accessibility events  which wouldn't be bad if we could properly parse the getevent info. Changing widget should fix this  as we change it from a phone widget to an overlay  aka making it focusable. Other fix is matching time stamps.
bug_after_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int iwonwuclfrqudsriwhsw = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "iwonwuclfrqudsriwhsw" , iwonwuclfrqudsriwhsw ) ; startService ( intent ) ; } <s> private void startScreenshots () { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; int iwonwuclfrqudsriwhsw = csci435.csci435_odbr.BugReport . getInstance () . numEvents () ; intent . putExtra ( "iwonwuclfrqudsriwhsw" , iwonwuclfrqudsriwhsw ) ; startService ( intent ) ; } <s> Minor bug fixes  major bug with widget not posting accessibility events  which wouldn't be bad if we could properly parse the getevent info. Changing widget should fix this  as we change it from a phone widget to an overlay  aka making it focusable. Other fix is matching time stamps.
fix_before_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; startService ( intent ) ; }
fix_after_refactoring: { android.content.Intent intent = new android.content.Intent ( this , csci435.csci435_odbr.SnapshotIntentService . class ) ; startService ( intent ) ; }
× fix_prediction_before: { android.content.Intent intent = new android.content.Intent ( this ,json.csci4353535.csci435.BugEventsService . class ) ; intent . putExtra ( "index_br" , num ) ; startActivity ( intent ) ; }
× fix_prediction_after: { android.content.Intent intent = new android.content.Intent ( this , csci435.frsci435.wclu.wclonriclu.Bug.BugSnapshot . class ) ; intent . putExtra ( "on_fr" , num ) ; startService ( intent ) ; }

line_index: 3
bug_before_refactoring: { sum -= i * ( controllers.classification.ID3 . log2 ( i ) ) ; } <s> private static double entropy ( java.util.ArrayList < java.lang.Double > p ) { double sum = 0 ; for ( double i : p ) { sum -= i * ( controllers.classification.ID3 . log2 ( i ) ) ; } return sum ; } <s> error in int to double in ID3 fixed
bug_after_refactoring: { amddkujmcztlvxfasawc -= i * ( controllers.classification.ID3 . log2 ( i ) ) ; } <s> private static double entropy ( java.util.ArrayList < java.lang.Double > p ) { double sum = 0 ; for ( double i : p ) { amddkujmcztlvxfasawc -= i * ( controllers.classification.ID3 . log2 ( i ) ) ; } return sum ; } <s> error in int to double in ID3 fixed
fix_before_refactoring: { if ( i > 0 ) sum -= i * ( controllers.classification.ID3 . log2 ( i ) ) ; }
fix_after_refactoring: { if ( i > 0 ) amddkujmcztlvxfasawc -= i * ( controllers.classification.ID3 . log2 ( i ) ) ; }
× fix_prediction_before: { sum -= i ; if ( i > 0 ) { log . log ( ( i ) ) ; } else { return 0 ; } }
× fix_prediction_after: { for ( int i = 0 ; i < ( controllers.ddztl.cawvawas2 ) ; i ++ ) { java.lang.System.out . println ( ( ( controllers . double ) ( i ) ) ) ; } return sum ; }

line_index: 4
bug_before_refactoring: public void checkHealth ( Player player ) { int health = player.Health ; java.lang.System.out . println ( ( ( "Your health is currently at " + health ) + "health points." ) ) ; } <s> public void checkHealth ( Player player ) { int health = player.Health ; java.lang.System.out . println ( ( ( "Your health is currently at " + health ) + "health points." ) ) ; } <s> Fix: errors at compile time
bug_after_refactoring: public void checkHealth ( Player player ) { int iotlqajsoznmxtzxciib = player.Health ; java.lang.System.out . println ( ( ( "Your iotlqajsoznmxtzxciib is currently at " + iotlqajsoznmxtzxciib ) + "iotlqajsoznmxtzxciib points." ) ) ; } <s> public void checkHealth ( Player player ) { int iotlqajsoznmxtzxciib = player.Health ; java.lang.System.out . println ( ( ( "Your iotlqajsoznmxtzxciib is currently at " + iotlqajsoznmxtzxciib ) + "iotlqajsoznmxtzxciib points." ) ) ; } <s> Fix: errors at compile time
fix_before_refactoring: public void checkHealth ( Player player ) { java.lang.System.out . println ( ( ( "Your health is currently at " + ( player.Health ) ) + "health points." ) ) ; }
fix_after_refactoring: public void checkHealth ( Player player ) { java.lang.System.out . println ( ( ( "Your iotlqajsoznmxtzxciib is currently at " + ( player.Health ) ) + "iotlqajsoznmxtzxciib points." ) ) ; }
× fix_prediction_before: public void checkHealth ( Player player ) { health = player ; }
× fix_prediction_after: public void checkHealth ( Player player ) {}

line_index: 5
bug_before_refactoring: { int direction = gs . closestPillDir () ; java.lang.System.out . println ( "Action choosen" ) ; return direction ; } <s> public int getAction ( gr.PacManAI.GameState gs ) { int direction = gs . closestPillDir () ; java.lang.System.out . println ( "Action choosen" ) ; return direction ; } <s> Fixed bug where coordinates of pacman weren't being updated.
bug_after_refactoring: { int pvkxvujxkedkmvwuymdm = gs . closestPillDir () ; java.lang.System.out . println ( "Action choosen" ) ; return pvkxvujxkedkmvwuymdm ; } <s> public int getAction ( gr.PacManAI.GameState gs ) { int pvkxvujxkedkmvwuymdm = gs . closestPillDir () ; java.lang.System.out . println ( "Action choosen" ) ; return pvkxvujxkedkmvwuymdm ; } <s> Fixed bug where coordinates of pacman weren't being updated.
fix_before_refactoring: { int direction = gs . closestPillDir () ; return direction ; }
fix_after_refactoring: { int pvkxvujxkedkmvwuymdm = gs . closestPillDir () ; return pvkxvujxkedkmvwuymdm ; }
× fix_prediction_before: { int direction = gs . closestPillDir () ; java.lang.System.out . println ( "Action" ) ; return gs ; }
× fix_prediction_after: { int pvkx = gsManx . getAction () ; java.lang.System.out . println ( pvked ) ; return pv ; }

line_index: 6
bug_before_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "a" ) int k = ( a.length ) - b ; } <s> void test3 ( int [] a , int b ) { @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "a" ) int k = ( a.length ) - b ; } <s> fixed reformatter introduced errors
bug_after_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "a" ) int wtcehbuonsuswwxscvxr = ( a.length ) - b ; } <s> void test3 ( int [] a , int b ) { @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "a" ) int wtcehbuonsuswwxscvxr = ( a.length ) - b ; } <s> fixed reformatter introduced errors
fix_before_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "a" ) int k ; k = ( a.length ) - b ; }
fix_after_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "a" ) int wtcehbuonsuswwxscvxr ; wtcehbuonsuswwxscvxr = ( a.length ) - b ; }
× fix_prediction_before: { @ org.checkerframework.checker.index.OrIndex ( value = "a" ) int [] b = ( a.length ) - b ; this . test = b ; }
× fix_prediction_after: { int [] b = ( "indexOrLowIndex" ) - 1 ; int [] b = a + b ; }

line_index: 8
bug_before_refactoring: { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; result = ( 31 * result ) + ( epicodusId ) ; return result ; } <s> @ java.lang.Override public int hashCode () { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; result = ( 31 * result ) + ( epicodusId ) ; return result ; } <s> fix id issue
bug_after_refactoring: { int rcjmssnuxxrucmfddhvv = trackName . hashCode () ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( epicodusId ) ; return rcjmssnuxxrucmfddhvv ; } <s> @ java.lang.Override public int hashCode () { int rcjmssnuxxrucmfddhvv = trackName . hashCode () ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( trackDetails . hashCode () ) ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( epicodusId ) ; return rcjmssnuxxrucmfddhvv ; } <s> fix id issue
fix_before_refactoring: { int result = trackName . hashCode () ; result = ( 31 * result ) + ( trackDetails . hashCode () ) ; return result ; }
fix_after_refactoring: { int rcjmssnuxxrucmfddhvv = trackName . hashCode () ; rcjmssnuxxrucmfddhvv = ( 31 * rcjmssnuxxrucmfddhvv ) + ( trackDetails . hashCode () ) ; return rcjmssnuxxrucmfddhvv ; }
× fix_prediction_before: { int result = trackName . hashCode () ; return ( 31 * ( trackDetails . hashCode () ) ) + ( ep . hashCode () ) ; }
× fix_prediction_after: { int rcx = ( rc . hashCode () ) + 31 ; rcx = ( rcx ) * 31 ; return trackx ; }

line_index: 9
bug_before_refactoring: return java.lang.Math . cos ( ( day * ( com.kylantraynor.livelyworld.climate.Planet.TwoPI ) ) ) ; <s> public double getSunPosition ( org.bukkit.Location l ) { double day = ( getDayTime ( l ) ) / 24000.0 ; return java.lang.Math . cos ( ( day * ( com.kylantraynor.livelyworld.climate.Planet.TwoPI ) ) ) ; } <s> Fixed time issue.
bug_after_refactoring: return java.lang.Math . cos ( ( mtcyddlidgawbbmfcdsp * ( com.kylantraynor.livelyworld.climate.Planet.TwoPI ) ) ) ; <s> public double getSunPosition ( org.bukkit.Location l ) { double day = ( getDayTime ( l ) ) / 24000.0 ; return java.lang.Math . cos ( ( mtcyddlidgawbbmfcdsp * ( com.kylantraynor.livelyworld.climate.Planet.TwoPI ) ) ) ; } <s> Fixed time issue.
fix_before_refactoring: return - ( java.lang.Math . cos ( ( day * ( com.kylantraynor.livelyworld.climate.Planet.TwoPI ) ) ) ) ;
fix_after_refactoring: return - ( java.lang.Math . cos ( ( mtcyddlidgawbbmfcdsp * ( com.kylantraynor.livelyworld.climate.Planet.TwoPI ) ) ) ) ;
× fix_prediction_before: return day == 0 ? 0 : java.lang.Math . cos ( ( ( day * ( com.lann.trayorlielyvely.Planetely.Position.PITime ) ) / ( com.lanky.trimatecletelyv.Plan ) ) ) ;
× fix_prediction_after: return ( java.lang.Math . cos ( mt ) ) * 24.0 ;

line_index: 10
bug_before_refactoring: public static long calcTimeInTrip ( long tripStartTime ) { java.util.Calendar curCal = java.util.Calendar . getInstance () ; long endTime = curCal . getTime () . getTime () ; return endTime - tripStartTime ; } <s> public static long calcTimeInTrip ( long tripStartTime ) { java.util.Calendar curCal = java.util.Calendar . getInstance () ; long endTime = curCal . getTime () . getTime () ; return endTime - tripStartTime ; } <s> fixed few bugs with calculation of avgSpeed and fuelCons  timeSpent.
bug_after_refactoring: public static long calcTimeInTrip ( long tripStartTime ) { java.util.Calendar curCal = java.util.Calendar . getInstance () ; long jhtyqvdmgmzecetpprnf = curCal . getTime () . getTime () ; return jhtyqvdmgmzecetpprnf - tripStartTime ; } <s> public static long calcTimeInTrip ( long tripStartTime ) { java.util.Calendar curCal = java.util.Calendar . getInstance () ; long jhtyqvdmgmzecetpprnf = curCal . getTime () . getTime () ; return jhtyqvdmgmzecetpprnf - tripStartTime ; } <s> fixed few bugs with calculation of avgSpeed and fuelCons  timeSpent.
fix_before_refactoring: public static long calcTimeInTrip ( long tripStartTime ) { if ( tripStartTime <= 0 ) { return 0 ; } else { java.util.Calendar curCal = java.util.Calendar . getInstance () ; long endTime = curCal . getTime () . getTime () ; return endTime - tripStartTime ; } }
fix_after_refactoring: public static long calcTimeInTrip ( long tripStartTime ) { if ( tripStartTime <= 0 ) { return 0 ; } else { java.util.Calendar curCal = java.util.Calendar . getInstance () ; long jhtyqvdmgmzecetpprnf = curCal . getTime () . getTime () ; return jhtyqvdmgmzecetpprnf - tripStartTime ; } }
× fix_prediction_before: private static long calcTimeInTrip ( long tripStartTime ) { java.util.Calendar trip = java.util.Calendar . getInstance () ; long endTime = java.util.Calendar . getTime () ; return trip . getTimeCalent () ; }
× fix_prediction_after: private static long calcTimeInTrip ( long tripStartTime ) { java.util.Calendar tripStartTime = java.util.Calendar . getInstance () ; long time = 0 ; return curStartTime - ( trip . getTime () ) ; }

line_index: 11
bug_before_refactoring: distance = ( ( float ) ( steps * ( height ) ) ) / ( ( float ) ( 100000 ) ) <s> public float getDistanceRun ( long steps ) { float distance = ( ( float ) ( steps * ( height ) ) ) / ( ( float ) ( 100000 ) ) ; return distance ; } <s> made changes to way speed and distance are calculated  and fixed some errors
bug_after_refactoring: fbxahlbdjiqjtwvhhipg = ( ( float ) ( steps * ( height ) ) ) / ( ( float ) ( 100000 ) ) <s> public float getDistanceRun ( long steps ) { float fbxahlbdjiqjtwvhhipg = ( ( float ) ( steps * ( height ) ) ) / ( ( float ) ( 100000 ) ) ; return distance ; } <s> made changes to way speed and distance are calculated  and fixed some errors
fix_before_refactoring: distance = ( ( float ) ( steps * ( height ) ) )
fix_after_refactoring: fbxahlbdjiqjtwvhhipg = ( ( float ) ( steps * ( height ) ) )
× fix_prediction_before: distance = ( ( float ) ( ( height ) / ( speed ) ) ) )
× fix_prediction_after: fbxahljml ( ( ( float ) ( steps ) ) / ( ( float ) ( steps ) ) )

line_index: 12
bug_before_refactoring: { java.lang.System.out . println ( "in setProductManual" ) ; byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; } <s> public void setProductManual ( org.springframework.web.multipart.MultipartFile productPdf ) throws java.io.IOException , java.sql.SQLException , javax.sql.rowset.serial.SerialException { java.lang.System.out . println ( "in setProductManual" ) ; byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; } <s> bugfix category
bug_after_refactoring: { java.lang.System.out . println ( "in setProductManual" ) ; byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; } <s> public void setProductManual ( org.springframework.web.multipart.MultipartFile productPdf ) throws java.io.IOException , java.sql.SQLException , javax.sql.rowset.serial.SerialException { java.lang.System.out . println ( "in setProductManual" ) ; byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; } <s> bugfix category
fix_before_refactoring: { byte [] manualBytes = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( manualBytes ) ; this . productManual = manualBlob ; }
fix_after_refactoring: { byte [] tbjlmvzeplymanhledch = productPdf . getBytes () ; java.sql.Blob manualBlob = new javax.sql.rowset.serial.SerialBlob ( tbjlmvzeplymanhledch ) ; this . productManual = manualBlob ; }
× fix_prediction_before: { byte [] manualBytes = productBytes . getBytes () ; java.sql.Blob product = new javax.sql.rowset.serial.PdfSerialBlob ( manualBytes ) ; this . manualBytes = manualBlob ; }
× fix_prediction_after: { byte [] manualBlob = product . getBytes () ; java.sql.Blob tb = new javax.jepl.zsethepl.serialled.PdfSerialBlob ( category , manualBlob ) ; this . manualBlob = tb ; }

line_index: 13
bug_before_refactoring: water.util.Log . write0 ( lvl , writeToStdout , objs ) <s> private static void write ( int lvl , java.lang.Object [] objs ) { boolean writeToStdout = lvl <= ( water.util.Log.currentLevel ) ; water.util.Log . write0 ( lvl , writeToStdout , objs ) ; } <s> Fix bug with Log.info bypassing initialization
bug_after_refactoring: water.util.Log . write0 ( lvl , yypnpceythrrifxufezy , objs ) <s> private static void write ( int lvl , java.lang.Object [] objs ) { boolean writeToStdout = lvl <= ( water.util.Log.currentLevel ) ; water.util.Log . write0 ( lvl , yypnpceythrrifxufezy , objs ) ; } <s> Fix bug with Log.info bypassing initialization
fix_before_refactoring: water.util.Log . write ( lvl , writeToStdout , objs )
fix_after_refactoring: water.util.Log . write ( lvl , yypnpceythrrifxufezy , objs )
× fix_prediction_before: water.util.Log . write0 ( lvl , 0 , lvl )
× fix_prediction_after: water.util.Log . write0 ( lvl , ( y + 1 ) )

line_index: 15
bug_before_refactoring: damageDealt = ( attack ) - ( target.defence ) <s> public int doAttack ( com.slimekiller.main.Unit target ) { int damageDealt = ( attack ) - ( target.defence ) ; target . subHealth ( damageDealt ) ; return damageDealt ; } <s> Fix bug with negative damage  when armor was higher than attack  damage could be negative  and presumably heal.  Made it so it armor reduces damage down to 0 only.
bug_after_refactoring: gxbfciiboaiirnocstmi = ( attack ) - ( target.defence ) <s> public int doAttack ( com.slimekiller.main.Unit target ) { int gxbfciiboaiirnocstmi = ( attack ) - ( target.defence ) ; target . subHealth ( damageDealt ) ; return damageDealt ; } <s> Fix bug with negative damage  when armor was higher than attack  damage could be negative  and presumably heal.  Made it so it armor reduces damage down to 0 only.
fix_before_refactoring: damageDealt = ( ( ( attack ) - ( target.defence ) ) <= 0 ) ? 0 : ( attack ) - ( target.defence )
fix_after_refactoring: gxbfciiboaiirnocstmi = ( ( ( attack ) - ( target.defence ) ) <= 0 ) ? 0 : ( attack ) - ( target.defence )
× fix_prediction_before: damageDealt = ( attack ) - damage
× fix_prediction_after: gxciibo ( target ) ;

line_index: 16
bug_before_refactoring: { scope . getGui () . waitStatus ( " Building outputs " ) ; boolean result = super . init ( scope ) ; if ( result ) { scope . getGui () . updateSimulationState () ; } return result ; } <s> @ java.lang.Override public boolean init ( final msi.gama.runtime.IScope scope ) { scope . getGui () . waitStatus ( " Building outputs " ) ; boolean result = super . init ( scope ) ; if ( result ) { scope . getGui () . updateSimulationState () ; } return result ; } <s> Fixes #1463. Fixes another issue with experiments without outputs
bug_after_refactoring: { scope . getGui () . waitStatus ( " Building outputs " ) ; boolean gwxphhfmtltumigcfwxx = super . init ( scope ) ; if ( gwxphhfmtltumigcfwxx ) { scope . getGui () . updateSimulationState () ; } return gwxphhfmtltumigcfwxx ; } <s> @ java.lang.Override public boolean init ( final msi.gama.runtime.IScope scope ) { scope . getGui () . waitStatus ( " Building outputs " ) ; boolean gwxphhfmtltumigcfwxx = super . init ( scope ) ; if ( gwxphhfmtltumigcfwxx ) { scope . getGui () . updateSimulationState () ; } return gwxphhfmtltumigcfwxx ; } <s> Fixes #1463. Fixes another issue with experiments without outputs
fix_before_refactoring: { scope . getGui () . waitStatus ( " Building outputs " ) ; boolean result = super . init ( scope ) ; return result ; }
fix_after_refactoring: { scope . getGui () . waitStatus ( " Building outputs " ) ; boolean gwxphhfmtltumigcfwxx = super . init ( scope ) ; return gwxphhfmtltumigcfwxx ; }
× fix_prediction_before: { if ( super . init () ) { scope . wait ( "Status init scope " ) ; scope = scope . getGuiState () ; } return result ; }
× fix_prediction_after: { final boolean scope = super . init () ; if ( gltStatus ) { glthumphcf.wigxxphcf.ui.Iltcf . init ( scope ) ; } return scope ; }

line_index: 17
bug_before_refactoring: void playOneSequence () { Montecarlo.Node node = selectNode ( root ) ; node = expand ( node ) ; int winner = simulation ( node ) ; backPropagation ( node , winner ) ; } <s> void playOneSequence () { Montecarlo.Node node = selectNode ( root ) ; node = expand ( node ) ; int winner = simulation ( node ) ; backPropagation ( node , winner ) ; } <s> Fixed some bugs within Playout and Montecarlo  Played first game!
bug_after_refactoring: void playOneSequence () { Montecarlo.Node node = selectNode ( root ) ; node = expand ( node ) ; int vrrhjdsiqhpevszjfhrn = simulation ( node ) ; backPropagation ( node , vrrhjdsiqhpevszjfhrn ) ; } <s> void playOneSequence () { Montecarlo.Node node = selectNode ( root ) ; node = expand ( node ) ; int vrrhjdsiqhpevszjfhrn = simulation ( node ) ; backPropagation ( node , vrrhjdsiqhpevszjfhrn ) ; } <s> Fixed some bugs within Playout and Montecarlo  Played first game!
fix_before_refactoring: public void playOneSequence () { Montecarlo.Node node = selectNode ( root ) ; node = expand ( node ) ; if ( node == null ) { return; } int winner = simulation ( node ) ; backPropagation ( node , winner ) ; }
fix_after_refactoring: public void playOneSequence () { Montecarlo.Node node = selectNode ( root ) ; node = expand ( node ) ; if ( node == null ) { return; } int vrrhjdsiqhpevszjfhrn = simulation ( node ) ; backPropagation ( node , vrrhjdsiqhpevszjfhrn ) ; }
× fix_prediction_before: void playOneSequence () { Mecont.Node node = select ( node ) ; int winner = expand ( node ) ; if ( winner == null ) { return; } }
× fix_prediction_after: void playOneSequence () { Mecar ( root ) ; selectNode ( node , node ) ; }

line_index: 18
bug_before_refactoring: for ( int i : set ) { if ( i == id ) { return index ; } index ++ ; } <s> public static int positionInSet ( java.lang.Integer [] set , java.lang.Integer id ) { int index = 0 ; for ( int i : set ) { if ( i == id ) { return index ; } index ++ ; } return - 1 ; } <s> Fixed a bug where one replicationGroup might be duplicated sometimes
bug_after_refactoring: for ( int i : set ) { if ( i == id ) { return udpbmiqlbutdilvzmpqq ; } udpbmiqlbutdilvzmpqq ++ ; } <s> public static int positionInSet ( java.lang.Integer [] set , java.lang.Integer id ) { int index = 0 ; for ( int i : set ) { if ( i == id ) { return udpbmiqlbutdilvzmpqq ; } udpbmiqlbutdilvzmpqq ++ ; } return - 1 ; } <s> Fixed a bug where one replicationGroup might be duplicated sometimes
fix_before_refactoring: for ( java.lang.Integer i : set ) { if ( i . equals ( id ) ) { return index ; } index ++ ; }
fix_after_refactoring: for ( java.lang.Integer i : set ) { if ( i . equals ( id ) ) { return udpbmiqlbutdilvzmpqq ; } udpbmiqlbutdilvzmpqq ++ ; }
× fix_prediction_before: for ( int i : i ) { if ( i == ( - 1 ) ) { return i ; } }
× fix_prediction_after: for ( int i : i ) { if ( ( id == i ) || ( i >= 0 ) ) { return 0 ; } }

line_index: 19
bug_before_refactoring: int readChannel ( int channel ) { int msg = 0 ; try { msg = rc . readBroadcast ( RUfoo.managers.Radio.TREE_CHANNEL ) ; } catch ( battlecode.common.GameActionException e ) {} return msg ; } <s> int readChannel ( int channel ) { int msg = 0 ; try { msg = rc . readBroadcast ( RUfoo.managers.Radio.TREE_CHANNEL ) ; } catch ( battlecode.common.GameActionException e ) {} return msg ; } <s> Radio: fix channel bug
bug_after_refactoring: int readChannel ( int channel ) { int dydmrysgjqeaetualrmr = 0 ; try { dydmrysgjqeaetualrmr = rc . readBroadcast ( RUfoo.managers.Radio.TREE_CHANNEL ) ; } catch ( battlecode.common.GameActionException e ) {} return dydmrysgjqeaetualrmr ; } <s> int readChannel ( int channel ) { int dydmrysgjqeaetualrmr = 0 ; try { dydmrysgjqeaetualrmr = rc . readBroadcast ( RUfoo.managers.Radio.TREE_CHANNEL ) ; } catch ( battlecode.common.GameActionException e ) {} return dydmrysgjqeaetualrmr ; } <s> Radio: fix channel bug
fix_before_refactoring: public int readChannel ( int channel ) { int msg = 0 ; try { msg = rc . readBroadcast ( channel ) ; } catch ( battlecode.common.GameActionException e ) {} return msg ; }
fix_after_refactoring: public int readChannel ( int channel ) { int dydmrysgjqeaetualrmr = 0 ; try { dydmrysgjqeaetualrmr = rc . readBroadcast ( channel ) ; } catch ( battlecode.common.GameActionException e ) {} return dydmrysgjqeaetualrmr ; }
× fix_prediction_before: int readChannel ( int channel ) { return 0 ; }
× fix_prediction_after: int readChannel ( int channel ) { return 0 ; }

line_index: 20
bug_before_refactoring: index = ( getValidIndex ( fromKey , ( ! inclusive ) ) ) - 1 <s> @ java.lang.Override public java.util.concurrent.ConcurrentNavigableMap < org.apache.hadoop.hbase.Cell , org.apache.hadoop.hbase.Cell > tailMap ( org.apache.hadoop.hbase.Cell fromKey , boolean inclusive ) { int index = ( getValidIndex ( fromKey , ( ! inclusive ) ) ) - 1 ; return createCellBlocks ( comparator , index , maxCellIdx ) ; } <s> After Code Review and Bug Fixes
bug_after_refactoring: wlfaqfdgcsfojeqteior = ( getValidIndex ( fromKey , ( ! inclusive ) ) ) - 1 <s> @ java.lang.Override public java.util.concurrent.ConcurrentNavigableMap < org.apache.hadoop.hbase.Cell , org.apache.hadoop.hbase.Cell > tailMap ( org.apache.hadoop.hbase.Cell fromKey , boolean inclusive ) { int wlfaqfdgcsfojeqteior = ( getValidIndex ( fromKey , ( ! inclusive ) ) ) - 1 ; return createCellBlocks ( comparator , index , maxCellIdx ) ; } <s> After Code Review and Bug Fixes
fix_before_refactoring: index = getValidIndex ( fromKey , ( ! inclusive ) )
fix_after_refactoring: wlfaqfdgcsfojeqteior = getValidIndex ( fromKey , ( ! inclusive ) )
× fix_prediction_before: index = ( getValidIndex ( fromKey , false ) ) + 1
× fix_prediction_after: ( java.util.concurrent.ConcurrentMap < org.apache.hadoop.hbase.Cell , org.apache.hadoop.hbase.Cell > ) { return ! ( createfdg ( from , ( - 1 ) ) ) ; }

line_index: 21
bug_before_refactoring: final boolean result = super . commitText ( text , newCursorPosition ) ; <s> @ java.lang.Override public boolean commitText ( java.lang.CharSequence text , int newCursorPosition ) { final boolean result = super . commitText ( text , newCursorPosition ) ; updateEditingState () ; return result ; } <s> Simplify state management in the Android text editing plugin (#3769)  In particular  this avoids some unnecessary calls to InputMethodManager.restartInput that caused noticeable lag when moving the cursor.  Fixes https://github.com/flutter/flutter/issues/9928
bug_after_refactoring: final boolean jmiowxzhgugsovwyuqgv = super . commitText ( text , newCursorPosition ) ; <s> @ java.lang.Override public boolean commitText ( java.lang.CharSequence text , int newCursorPosition ) { final boolean jmiowxzhgugsovwyuqgv = super . commitText ( text , newCursorPosition ) ; updateEditingState () ; return result ; } <s> Simplify state management in the Android text editing plugin (#3769)  In particular  this avoids some unnecessary calls to InputMethodManager.restartInput that caused noticeable lag when moving the cursor.  Fixes https://github.com/flutter/flutter/issues/9928
fix_before_refactoring: boolean result = super . commitText ( text , newCursorPosition ) ;
fix_after_refactoring: boolean jmiowxzhgugsovwyuqgv = super . commitText ( text , newCursorPosition ) ;
× fix_prediction_before: final boolean result = super . commitText ( text , text ) ;
× fix_prediction_after: final boolean jmiowx = false ;

line_index: 22
bug_before_refactoring: { int hash = 0 ; return hash ; } <s> public int hashCode () { int hash = 0 ; return hash ; } <s> Zuggenerator Refactoring & Fixes      [#] Perft: Ausgabe für Stapelverarbeitung angepasst     [#] scripts/runSuite.sh: Führt eine Testsuite aus und prüft die Ergebnisse. Die Ausgabe erfolgt in einem CSV-Format     [#] Board Pawn MovePromotion: Bug in der Bauernumwandlung gefixt
bug_after_refactoring: { int wrjpyckigbrdnjyuzhid = 0 ; return wrjpyckigbrdnjyuzhid ; } <s> public int hashCode () { int wrjpyckigbrdnjyuzhid = 0 ; return wrjpyckigbrdnjyuzhid ; } <s> Zuggenerator Refactoring & Fixes      [#] Perft: Ausgabe für Stapelverarbeitung angepasst     [#] scripts/runSuite.sh: Führt eine Testsuite aus und prüft die Ergebnisse. Die Ausgabe erfolgt in einem CSV-Format     [#] Board Pawn MovePromotion: Bug in der Bauernumwandlung gefixt
fix_before_refactoring: { int hash = 0 ; hash += super . hashCode () ; return hash ; }
fix_after_refactoring: { int wrjpyckigbrdnjyuzhid = 0 ; wrjpyckigbrdnjyuzhid += super . hashCode () ; return wrjpyckigbrdnjyuzhid ; }
× fix_prediction_before: { int hash = 0 ; if ( hash > ( hash ) ) { return - 1 ; } return hash ; }
× fix_prediction_after: { int offset = 0 ; int angjckpy = (dnbrpyyjbrigyjyhigckyjcky.shuzigckyjjjy.generator.Format . hashCode () ) & ( fuzelh . hashCode () ) ; return number ; }

line_index: 23
bug_before_refactoring: ( a + b ) <s> public void test_sum () { addActivity = ( ( com.example.andrew.lab3add.Add ) ( getActivity () ) ) ; int a = 1 ; int b = 2 ; assertEquals ( ( a + b ) , addActivity . sum ( a , b ) ) ; } <s> fixed 'error'
bug_after_refactoring: ( neukrxffifwvngmngwqe + cwnvyynvfmyihccheell ) <s> public void test_sum () { addActivity = ( ( com.example.andrew.lab3add.Add ) ( getActivity () ) ) ; int a = 1 ; int b = 2 ; assertEquals ( ( neukrxffifwvngmngwqe + cwnvyynvfmyihccheell ) , addActivity . sum ( a , b ) ) ; } <s> fixed 'error'
fix_before_refactoring: ( a - b )
fix_after_refactoring: ( neukrxffifwvngmngwqe - cwnvyynvfmyihccheell )
× fix_prediction_before: ( a + b )
× fix_prediction_after: ( neukrifng ) + "\n"

line_index: 24
bug_before_refactoring: { if ( pilaMovimientos . empty () ) { deshacerPila = false ; return 0 ; } int aux = pilaMovimientos . pop () ; ultimo = opuesta ( aux ) ; return aux ; } <s> private int deshacer () { if ( pilaMovimientos . empty () ) { deshacerPila = false ; return 0 ; } int aux = pilaMovimientos . pop () ; ultimo = opuesta ( aux ) ; return aux ; } <s> fixed some bugs
bug_after_refactoring: { if ( pilaMovimientos . empty () ) { deshacerPila = false ; return 0 ; } int vkssnfzpmqhvjlvrdzzz = pilaMovimientos . pop () ; ultimo = opuesta ( vkssnfzpmqhvjlvrdzzz ) ; return vkssnfzpmqhvjlvrdzzz ; } <s> private int deshacer () { if ( pilaMovimientos . empty () ) { deshacerPila = false ; return 0 ; } int vkssnfzpmqhvjlvrdzzz = pilaMovimientos . pop () ; ultimo = opuesta ( vkssnfzpmqhvjlvrdzzz ) ; return vkssnfzpmqhvjlvrdzzz ; } <s> fixed some bugs
fix_before_refactoring: { if ( pilaMovimientos . empty () ) { deshacerPila = false ; return 0 ; } int aux = pilaMovimientos . pop () ; return aux ; }
fix_after_refactoring: { if ( pilaMovimientos . empty () ) { deshacerPila = false ; return 0 ; } int vkssnfzpmqhvjlvrdzzz = pilaMovimientos . pop () ; return vkssnfzpmqhvjlvrdzzz ; }
× fix_prediction_before: { if ( p ) { auxMovimient . empty () ; deshim = false ; } else { aux = p ; } return aux ; }
× fix_prediction_after: { pz.himientosvosjosv . empty () ; return pssh ; }

line_index: 25
bug_before_refactoring: { int position = this . searchBeatName ( bn ) ; return beatList . get ( position ) ; } <s> public main.java.binBeats.lib.BinBeat loadBinBeat ( java.lang.String bn ) { int position = this . searchBeatName ( bn ) ; return beatList . get ( position ) ; } <s> bugfixes in class Persistence
bug_after_refactoring: { int sqmfedzalxnvkgiymijo = this . searchBeatName ( bn ) ; return beatList . get ( sqmfedzalxnvkgiymijo ) ; } <s> public main.java.binBeats.lib.BinBeat loadBinBeat ( java.lang.String bn ) { int sqmfedzalxnvkgiymijo = this . searchBeatName ( bn ) ; return beatList . get ( sqmfedzalxnvkgiymijo ) ; } <s> bugfixes in class Persistence
fix_before_refactoring: { int position = this . searchBeatName ( bn ) ; if ( position >= 0 ) { return beatList . get ( position ) ; } return null ; }
fix_after_refactoring: { int sqmfedzalxnvkgiymijo = this . searchBeatName ( bn ) ; if ( sqmfedzalxnvkgiymijo >= 0 ) { return beatList . get ( sqmfedzalxnvkgiymijo ) ; } return null ; }
× fix_prediction_before: { int position = this . searchBeatList . get ( position ) ; if ( position == 0 ) return 0 ; return this . beatBeatList . get ( position ) ; }
× fix_prediction_after: { int sqmfedz.giymvymvymi = this . searchList . get ( beatName ) ; if ( sqmfatzgi != null ) { return sqatList . get ( beat ) ; } return null ; }

line_index: 26
bug_before_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( local ) , true , utcMillis ) <s> @ java.lang.Override public long roundKey ( long utcMillis ) { long local = preTz . convertUTCToLocal ( utcMillis ) ; return preTz . convertLocalToUTC ( field . roundFloor ( local ) , true , utcMillis ) ; } <s> Aggregations: Be lenient when converting local to utc time in time zone roundings  This solves a problem in the time zone rounding classes where time dates that fall into a DST gap will cause joda time library to throw an exception. Changing the conversion methods 'strict' option to false prevents this.  Closes #10025
bug_after_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , true , utcMillis ) <s> @ java.lang.Override public long roundKey ( long utcMillis ) { long local = preTz . convertUTCToLocal ( utcMillis ) ; return preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , true , utcMillis ) ; } <s> Aggregations: Be lenient when converting local to utc time in time zone roundings  This solves a problem in the time zone rounding classes where time dates that fall into a DST gap will cause joda time library to throw an exception. Changing the conversion methods 'strict' option to false prevents this.  Closes #10025
fix_before_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( local ) , false , utcMillis )
fix_after_refactoring: preTz . convertLocalToUTC ( field . roundFloor ( ggxqkxbwwujsvwrcaoex ) , false , utcMillis )
× fix_prediction_before: preTz . convertLocalToUTC ( field , false , utcMillis )
× fix_prediction_after: preTz . convertLocalToUTC ( field , false )

line_index: 27
bug_before_refactoring: maxSizePerNode = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig , MaxSizePolicy.PER_NODE ) <s> public static int getMaxSizePerNode ( com.hazelcast.config.MaxSizeConfig maxSizeConfig ) { int maxSizePerNode = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig , MaxSizePolicy.PER_NODE ) ; if ( maxSizePerNode == ( com.hazelcast.config.MaxSizeConfig.DEFAULT_MAX_SIZE ) ) { return - 1 ; } return maxSizePerNode ; } <s> Fixed getApproximateMaxSize calculation bug
bug_after_refactoring: ajyxiqidnsvipozllhnh = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig , MaxSizePolicy.PER_NODE ) <s> public static int getMaxSizePerNode ( com.hazelcast.config.MaxSizeConfig maxSizeConfig ) { int ajyxiqidnsvipozllhnh = com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig , MaxSizePolicy.PER_NODE ) ; if ( maxSizePerNode == ( com.hazelcast.config.MaxSizeConfig.DEFAULT_MAX_SIZE ) ) { return - 1 ; } return maxSizePerNode ; } <s> Fixed getApproximateMaxSize calculation bug
fix_before_refactoring: maxSizePerNode = java.lang.Math . round ( com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig , MaxSizePolicy.PER_NODE ) )
fix_after_refactoring: ajyxiqidnsvipozllhnh = java.lang.Math . round ( com.hazelcast.map.impl.eviction.MaxSizeChecker . getApproximateMaxSize ( maxSizeConfig , MaxSizePolicy.PER_NODE ) )
× fix_prediction_before: maxSizePerNode = com.hazelcast.map.impl.eviction.MaxSizeChecker . getAppMaxSize ( maxSizeMaxConfig , ( ( 1.0PerSize ) - 1 ) )
× fix_prediction_after: ajyxiqid.llhip.impl.lleviction.MaxSizeChecker = com.yxiqid.vipxevimate.impl.eviction.MaxSizeChecker . getAppMaxMaxSize ( maxSizePerConfig , ( - 1 ) )

line_index: 28
bug_before_refactoring: myList . duplicate ( n ) . toString () <s> public static void main ( java.lang.String [] arg ) { int n = 3 ; int size = 4 ; polyu_af.MyList1 myList = new polyu_af.MyList1 ( size ) ; java.lang.System.out . println ( myList . duplicate ( n ) . toString () ) ; } <s> adding testcase and fix some error
bug_after_refactoring: myList . duplicate ( kuyguwiyhjbdovsbpkya ) . toString () <s> public static void main ( java.lang.String [] arg ) { int n = 3 ; int size = 4 ; polyu_af.MyList1 myList = new polyu_af.MyList1 ( size ) ; java.lang.System.out . println ( myList . duplicate ( kuyguwiyhjbdovsbpkya ) . toString () ) ; } <s> adding testcase and fix some error
fix_before_refactoring: myList . duplicate ( n ) . size ()
fix_after_refactoring: myList . duplicate ( kuyguwiyhjbdovsbpkya ) . size ()
× fix_prediction_before: ( java.lang.String . toString ( n ) )
× fix_prediction_after: ( k . duplicate ( kyguygy ) . size () )

line_index: 29
bug_before_refactoring: { int code = connection . getResponseCode () ; if ( code == 404 ) { return null ; } return super . processResponse ( connection , typeOfT ) ; } <s> @ java.lang.Override protected < T > T processResponse ( java.net.HttpURLConnection connection , java.lang.reflect.Type typeOfT ) throws java.io.IOException , me.figo.FigoException { int code = connection . getResponseCode () ; if ( code == 404 ) { return null ; } return super . processResponse ( connection , typeOfT ) ; } <s> fixed error responses  removed unused test cases
bug_after_refactoring: { int dvhqsjgtkslimnxmkvdq = connection . getResponseCode () ; if ( dvhqsjgtkslimnxmkvdq == 404 ) { return null ; } return super . processResponse ( connection , typeOfT ) ; } <s> @ java.lang.Override protected < T > T processResponse ( java.net.HttpURLConnection connection , java.lang.reflect.Type typeOfT ) throws java.io.IOException , me.figo.FigoException { int dvhqsjgtkslimnxmkvdq = connection . getResponseCode () ; if ( dvhqsjgtkslimnxmkvdq == 404 ) { return null ; } return super . processResponse ( connection , typeOfT ) ; } <s> fixed error responses  removed unused test cases
fix_before_refactoring: { int code = connection . getResponseCode () ; return super . processResponse ( connection , typeOfT ) ; }
fix_after_refactoring: { int dvhqsjgtkslimnxmkvdq = connection . getResponseCode () ; return super . processResponse ( connection , typeOfT ) ; }
× fix_prediction_before: { int code = connection . 404 () ; if ( code == null ) { return null ; } return processResponseOfTigo ( connection , type ) ; }
× fix_prediction_after: { if ( ( connection ) == null ) { connection . processOf ( type , 404imo ) ; } return super . processOf ( connection , 404 , type ) ; }

line_index: 30
bug_before_refactoring: { checkEnabled () ; boolean state = ( net.sf.dz3.device.model.HvacMode.HEATING ) == mode ; switchMode . setState ( ( reverseMode ? ! state : state ) ) ; } <s> @ java.lang.Override protected synchronized void doSetMode ( net.sf.dz3.device.model.HvacMode mode ) throws java.io.IOException { checkEnabled () ; boolean state = ( net.sf.dz3.device.model.HvacMode.HEATING ) == mode ; switchMode . setState ( ( reverseMode ? ! state : state ) ) ; } <s> Fix for https://github.com/home-climate-control/dz/issues/3
bug_after_refactoring: { checkEnabled () ; boolean wcrkspndereumdukrdkv = ( net.sf.dz3.device.model.HvacMode.HEATING ) == mode ; switchMode . setState ( ( reverseMode ? ! wcrkspndereumdukrdkv : wcrkspndereumdukrdkv ) ) ; } <s> @ java.lang.Override protected synchronized void doSetMode ( net.sf.dz3.device.model.HvacMode mode ) throws java.io.IOException { checkEnabled () ; boolean wcrkspndereumdukrdkv = ( net.sf.dz3.device.model.HvacMode.HEATING ) == mode ; switchMode . setState ( ( reverseMode ? ! wcrkspndereumdukrdkv : wcrkspndereumdukrdkv ) ) ; } <s> Fix for https://github.com/home-climate-control/dz/issues/3
fix_before_refactoring: { checkEnabled () ; this . mode = mode ; boolean state = ( net.sf.dz3.device.model.HvacMode.HEATING ) == mode ; switchMode . setState ( ( reverseMode ? ! state : state ) ) ; }
fix_after_refactoring: { checkEnabled () ; this . mode = mode ; boolean wcrkspndereumdukrdkv = ( net.sf.dz3.device.model.HvacMode.HEATING ) == mode ; switchMode . setState ( ( reverseMode ? ! wcrkspndereumdukrdkv : wcrkspndereumdukrdkv ) ) ; }
× fix_prediction_before: { checkEnabled () ; state = ( state ) == ( net.sf.dzdevice.model.HATINGMode.HEMode ) ; }
× fix_prediction_after: { checkEnabled () ; boolean wcr = ! ( net.sfndkeredkv3.model.device.humduered.Hv3.HATINGMode . checkMode ( mode ) ) ; synchronized ( wcr ) { for ( net.sfndkndndndnddkv3.model.home.HerezduereMode w :krMode ) { switch ( w ) ; } } }

line_index: 31
bug_before_refactoring: { double output = Robot.instance.oi . getShooterElevatorInput () ; if ( ( output > 0 ) && ( ! ( Robot.instance.elevator.limitSwitch . get () ) ) ) { output = 0 ; } Robot.instance.elevator.elevatorActuator . set ( output ) ; } <s> protected void execute () { double output = Robot.instance.oi . getShooterElevatorInput () ; if ( ( output > 0 ) && ( ! ( Robot.instance.elevator.limitSwitch . get () ) ) ) { output = 0 ; } Robot.instance.elevator.elevatorActuator . set ( output ) ; } <s> (Temporarily) fix some issues/bugs.
bug_after_refactoring: { double olkinhbihbifckqufheb = Robot.instance.oi . getShooterElevatorInput () ; if ( ( olkinhbihbifckqufheb > 0 ) && ( ! ( Robot.instance.elevator.limitSwitch . get () ) ) ) { olkinhbihbifckqufheb = 0 ; } Robot.instance.elevator.elevatorActuator . set ( olkinhbihbifckqufheb ) ; } <s> protected void execute () { double olkinhbihbifckqufheb = Robot.instance.oi . getShooterElevatorInput () ; if ( ( olkinhbihbifckqufheb > 0 ) && ( ! ( Robot.instance.elevator.limitSwitch . get () ) ) ) { olkinhbihbifckqufheb = 0 ; } Robot.instance.elevator.elevatorActuator . set ( olkinhbihbifckqufheb ) ; } <s> (Temporarily) fix some issues/bugs.
fix_before_refactoring: { double output = Robot.instance.oi . getShooterElevatorInput () ; Robot.instance.elevator.elevatorActuator . set ( output ) ; }
fix_after_refactoring: { double olkinhbihbifckqufheb = Robot.instance.oi . getShooterElevatorInput () ; Robot.instance.elevator.elevatorActuator . set ( olkinhbihbifckqufheb ) ; }
× fix_prediction_before: { double output = Robot.oi.oi . getShooter () ; if ( ( output > 0 ) && ( ! ( output . output () ) ) ) { Robot.evator.elevator . set ( output ) ; } }
× fix_prediction_after: { if ( Robot.fhbebkinquooter . getShebkin () ) { Robot.fhhebator = Robot.bebkinquooterEleebator . getShebkin () ; Robot.bebkin . set ( 0 ) ; } }

line_index: 32
bug_before_refactoring: spinner . setSelection ( item , true ) <s> void setSelection ( long trackerID ) { if ( trackerIDToSelectionIDMap . containsKey ( trackerID ) ) { int item = trackerIDToSelectionIDMap . get ( trackerID ) ; spinner . setSelection ( item , true ) ; } } <s> Bugfix for Android 5.1 concerning selections
bug_after_refactoring: spinner . setSelection ( zutgajocwakswkcdoiwe , true ) <s> void setSelection ( long trackerID ) { if ( trackerIDToSelectionIDMap . containsKey ( trackerID ) ) { int item = trackerIDToSelectionIDMap . get ( trackerID ) ; spinner . setSelection ( zutgajocwakswkcdoiwe , true ) ; } } <s> Bugfix for Android 5.1 concerning selections
fix_before_refactoring: spinner . setSelection ( item )
fix_after_refactoring: spinner . setSelection ( zutgajocwakswkcdoiwe )
× fix_prediction_before: spinner . setSelection ( ( itemID <= 1 ) )
× fix_prediction_after: spinner . setSelection ( zutgoc )

line_index: 33
bug_before_refactoring: if ( ( this . random () ) > ( mean - n ) ) n ++ ; <s> @ java.lang.Override public final int round ( double mean ) { int n = ( ( int ) ( mean ) ) ; if ( ( this . random () ) > ( mean - n ) ) n ++ ; return n ; } <s> Fix rounding to the closest integer  It was rounding to the further integer instead :( Bug introduced in 0b335962c919.
bug_after_refactoring: if ( ( this . random () ) > ( mean - eylkeuekuzmnlqoewyvk ) ) eylkeuekuzmnlqoewyvk ++ ; <s> @ java.lang.Override public final int round ( double mean ) { int n = ( ( int ) ( mean ) ) ; if ( ( this . random () ) > ( mean - eylkeuekuzmnlqoewyvk ) ) eylkeuekuzmnlqoewyvk ++ ; return n ; } <s> Fix rounding to the closest integer  It was rounding to the further integer instead :( Bug introduced in 0b335962c919.
fix_before_refactoring: if ( ( this . random () ) < ( mean - n ) ) n ++ ;
fix_after_refactoring: if ( ( this . random () ) < ( mean - eylkeuekuzmnlqoewyvk ) ) eylkeuekuzmnlqoewyvk ++ ;
× fix_prediction_before: if ( ( ( this . random () ) - ( mean ) ) <= ( n ) ) ( n ) ++ ;
× fix_prediction_after: if ( ( java.lang.Math . random () ) <= ( ( e . mean () ) - 1 ) ) throw e ;

line_index: 34
bug_before_refactoring: public int getArrayIndex ( int row , int col ) { int index = ( ( row * ( size ) ) + col ) + 1 ; return index ; } <s> public int getArrayIndex ( int row , int col ) { int index = ( ( row * ( size ) ) + col ) + 1 ; return index ; } <s> Fix errors  keep row and col consistent
bug_after_refactoring: public int getArrayIndex ( int row , int col ) { int sdorafliwbdfxvnhczkv = ( ( row * ( size ) ) + col ) + 1 ; return sdorafliwbdfxvnhczkv ; } <s> public int getArrayIndex ( int row , int col ) { int sdorafliwbdfxvnhczkv = ( ( row * ( size ) ) + col ) + 1 ; return sdorafliwbdfxvnhczkv ; } <s> Fix errors  keep row and col consistent
fix_before_refactoring: public int getArrayIndex ( int row , int col ) { int index = ( ( row - 1 ) * ( size ) ) + col ; return index ; }
fix_after_refactoring: public int getArrayIndex ( int row , int col ) { int sdorafliwbdfxvnhczkv = ( ( row - 1 ) * ( size ) ) + col ; return sdorafliwbdfxvnhczkv ; }
× fix_prediction_before: public int getArrayIndex ( int row , int col ) { int index = ( row ) * ( size ) ; return index + 1 ; }
× fix_prediction_after: public int getArrayIndex ( int row , int col ) { int row = ( sd ) * ( size ) ; return row - 1 ; }

line_index: 35
bug_before_refactoring: { super . readFromNBT ( par1 ) ; int [] measurements = par1 . getIntArray ( com.minespaceships.mod.overhead.ChatRegisterEntity.recoverSpaceshipMeasures ) ; if ( measurements != null ) { ship = new com.minespaceships.mod.spaceship.Spaceship ( measurements ) ; } setRemoteWorld () ; } <s> @ java.lang.Override public void readFromNBT ( net.minecraft.nbt.NBTTagCompound par1 ) { super . readFromNBT ( par1 ) ; int [] measurements = par1 . getIntArray ( com.minespaceships.mod.overhead.ChatRegisterEntity.recoverSpaceshipMeasures ) ; if ( measurements != null ) { ship = new com.minespaceships.mod.spaceship.Spaceship ( measurements ) ; } setRemoteWorld () ; } <s> Revert "Tried fixind the reload bug. Didn't worked."  This reverts commit 758e25c8de6b8ec63d318df8489002834cd78b47.
bug_after_refactoring: { super . readFromNBT ( par1 ) ; int [] epalchezomikldchvzki = par1 . getIntArray ( com.minespaceships.mod.overhead.ChatRegisterEntity.recoverSpaceshipMeasures ) ; if ( epalchezomikldchvzki != null ) { ship = new com.minespaceships.mod.spaceship.Spaceship ( epalchezomikldchvzki ) ; } setRemoteWorld () ; } <s> @ java.lang.Override public void readFromNBT ( net.minecraft.nbt.NBTTagCompound par1 ) { super . readFromNBT ( par1 ) ; int [] epalchezomikldchvzki = par1 . getIntArray ( com.minespaceships.mod.overhead.ChatRegisterEntity.recoverSpaceshipMeasures ) ; if ( epalchezomikldchvzki != null ) { ship = new com.minespaceships.mod.spaceship.Spaceship ( epalchezomikldchvzki ) ; } setRemoteWorld () ; } <s> Revert "Tried fixind the reload bug. Didn't worked."  This reverts commit 758e25c8de6b8ec63d318df8489002834cd78b47.
fix_before_refactoring: { super . readFromNBT ( par1 ) ; int [] measurements = par1 . getIntArray ( com.minespaceships.mod.overhead.ChatRegisterEntity.recoverSpaceshipMeasures ) ; if ( measurements != null ) { ship = new com.minespaceships.mod.spaceship.Spaceship ( measurements ) ; } }
fix_after_refactoring: { super . readFromNBT ( par1 ) ; int [] epalchezomikldchvzki = par1 . getIntArray ( com.minespaceships.mod.overhead.ChatRegisterEntity.recoverSpaceshipMeasures ) ; if ( epalchezomikldchvzki != null ) { ship = new com.minespaceships.mod.spaceship.Spaceship ( epalchezomikldchvzki ) ; } }
× fix_prediction_before: { super . readFromNBT ( par1 ) ; int [] par1 = par1 . getInt ( com.minecraft.mod.hips.mod.ChatRegister . class ) ; if ( ( measurements ) != null ) { setMeasures ( new com.hipsoverhip.mod.hindhiphead7.RemoteRegisterEntity () ) ; } }
× fix_prediction_after: { super . readFromNBT ( par1 ) ; int [] ep = par1 . getInt ( par2 ) ; if ( ep != null ) { setChat ( new com.alipschikzhki.modchikhiphead7.hldecraft.headhead.EntityRegisterEntity ( par1 ) ) ; } }

line_index: 36
bug_before_refactoring: { throw new sun.plugin.dom.exception.InvalidStateException ( ( "length is an invalid value; " + length ) ) ; } <s> public double getLength () { double length = point1 . distance ( point2 ) ; if ( ( length == ( java.lang.Double.NaN ) ) || ( length <= 0 ) ) { throw new sun.plugin.dom.exception.InvalidStateException ( ( "length is an invalid value; " + length ) ) ; } return length ; } <s> Fixed the addition of new crosssection lines  Replaced the thrown "length 0 is invalid" error by an err.println statement.
bug_after_refactoring: { throw new sun.plugin.dom.exception.InvalidStateException ( ( "zxsnffybdlqvvlriqzcq is an invalid value; " + zxsnffybdlqvvlriqzcq ) ) ; } <s> public double getLength () { double length = point1 . distance ( point2 ) ; if ( ( length == ( java.lang.Double.NaN ) ) || ( length <= 0 ) ) { throw new sun.plugin.dom.exception.InvalidStateException ( ( "zxsnffybdlqvvlriqzcq is an invalid value; " + zxsnffybdlqvvlriqzcq ) ) ; } return length ; } <s> Fixed the addition of new crosssection lines  Replaced the thrown "length 0 is invalid" error by an err.println statement.
fix_before_refactoring: { java.lang.System.err . println ( ( "length is an invalid value; " + length ) ) ; }
fix_after_refactoring: { java.lang.System.err . println ( ( "zxsnffybdlqvvlriqzcq is an invalid value; " + zxsnffybdlqvvlriqzcq ) ) ; }
× fix_prediction_before: { return; }
× fix_prediction_after: { return 0 ; }

line_index: 37
bug_before_refactoring: { java.lang.String IndexWord = parser.IndexParser . findIndexWord ( userInputEvent ) ; int parsedInt = parser.IndexParser . tryParse ( IndexWord ) ; return parsedInt ; } <s> public static int parseIndex ( java.lang.String userInputEvent ) { java.lang.String IndexWord = parser.IndexParser . findIndexWord ( userInputEvent ) ; int parsedInt = parser.IndexParser . tryParse ( IndexWord ) ; return parsedInt ; } <s> Reworked operating->incomplete  fixed displaytask bugs and  slapped some stuff yo
bug_after_refactoring: { java.lang.String IndexWord = parser.IndexParser . findIndexWord ( userInputEvent ) ; int modleopdgfbldhliokvr = parser.IndexParser . tryParse ( IndexWord ) ; return modleopdgfbldhliokvr ; } <s> public static int parseIndex ( java.lang.String userInputEvent ) { java.lang.String IndexWord = parser.IndexParser . findIndexWord ( userInputEvent ) ; int modleopdgfbldhliokvr = parser.IndexParser . tryParse ( IndexWord ) ; return modleopdgfbldhliokvr ; } <s> Reworked operating->incomplete  fixed displaytask bugs and  slapped some stuff yo
fix_before_refactoring: { java.lang.String IndexWord = parser.IndexParser . findIndexWord ( userInputEvent ) ; int parsedInt = parser.IndexParser . tryParse ( IndexWord ) ; java.lang.System.out . println ( parsedInt ) ; return parsedInt ; }
fix_after_refactoring: { java.lang.String IndexWord = parser.IndexParser . findIndexWord ( userInputEvent ) ; int modleopdgfbldhliokvr = parser.IndexParser . tryParse ( IndexWord ) ; java.lang.System.out . println ( modleopdgfbldhliokvr ) ; return modleopdgfbldhliokvr ; }
× fix_prediction_before: { java.lang.String IndexWord = parser . IndexIndex ( userInput ) ; int userInputIndex = parser . displayInt ( parsedWordIndex ) ; return parseEvent ( parsedWordIndex ) ; }
× fix_prediction_after: { java.lang.String IndexWord = parser . findWordIndex ( userInput ) ; return moddg ; }

line_index: 39
bug_before_refactoring: { float direction = 1 ; rotate ( ( direction * ( theta - ( this . rotation ) ) ) ) ; } <s> public void setRotation ( float theta ) { float direction = 1 ; rotate ( ( direction * ( theta - ( this . rotation ) ) ) ) ; } <s> fixed bug with rotation causing crash
bug_after_refactoring: { float nchvuzgfnkyfqncmyqdc = 1 ; rotate ( ( nchvuzgfnkyfqncmyqdc * ( theta - ( this . rotation ) ) ) ) ; } <s> public void setRotation ( float theta ) { float nchvuzgfnkyfqncmyqdc = 1 ; rotate ( ( nchvuzgfnkyfqncmyqdc * ( theta - ( this . rotation ) ) ) ) ; } <s> fixed bug with rotation causing crash
fix_before_refactoring: { rotate ( ( theta - ( this . rotation ) ) ) ; }
fix_after_refactoring: { rotate ( ( theta - ( this . rotation ) ) ) ; }
× fix_prediction_before: { float direction = 1 ; if ( direction >= 0 ) rotate = ( direction ) * ( ( this . rotation ) - ( this . rotation ) ) ; }
× fix_prediction_after: { nuzchvuzkyqgnc = ( ( float ) ( ( this . nuzch ) * ( - 1 ) ) ) ; if ( nuzch != 0 ) { this . setRotation ( ( ( thetavuzch ) * ( - 1 ) ) ) ; } }

line_index: 40
bug_before_refactoring: switch ( option ) { case 0 : { fight () ; break; } case 1 : { flee () ; break; } case 2 : { return; } } <s> private void encounterRender () { int option = getOption () ; switch ( option ) { case 0 : { fight () ; break; } case 1 : { flee () ; break; } case 2 : { return; } } } <s> Fixing sonarqube issues
bug_after_refactoring: switch ( jxstmbsfelftvijvuvpc ) { case 0 : { fight () ; break; } case 1 : { flee () ; break; } case 2 : { return; } } <s> private void encounterRender () { int option = getOption () ; switch ( jxstmbsfelftvijvuvpc ) { case 0 : { fight () ; break; } case 1 : { flee () ; break; } case 2 : { return; } } } <s> Fixing sonarqube issues
fix_before_refactoring: switch ( option ) { case 0 : fight () ; break; case 1 : flee () ; break; default: return; }
fix_after_refactoring: switch ( jxstmbsfelftvijvuvpc ) { case 0 : fight () ; break; case 1 : flee () ; break; default: return; }
× fix_prediction_before: switch ( option ) { case 0 : break; case 1 : { break; } }
× fix_prediction_after: switch ( jxmbsf ) { case 0 : { break; case 1 : { break; case 2 : { break; } case 1 : { break; } } }

line_index: 41
bug_before_refactoring: { @ IntRange ( from = 6 , to = 25 ) int plus1 = a + b ; @ IntRange ( from = 0 , to = 25 ) int plus2 = a + b ; double c = 3.0 ; double d = c + a ; int e = fullRange + a ; } <s> public void add ( @ IntRange ( from = - 5 , to = 5 ) int a , @ IntRange ( from = 10 , to = 20 ) int b , int fullRange ) { @ IntRange ( from = 6 , to = 25 ) int plus1 = a + b ; @ IntRange ( from = 0 , to = 25 ) int plus2 = a + b ; double c = 3.0 ; double d = c + a ; int e = fullRange + a ; } <s> fix last bug; refactor a bit
bug_after_refactoring: { @ IntRange ( from = 6 , to = 25 ) int muyzdbauxmvadgmdfzqq = a + b ; @ IntRange ( from = 0 , to = 25 ) int dquyruetncljzbceggsx = a + b ; double bcrdqtqcebkktlnyoyip = 3.0 ; double kswjqzmvgefnzthphuoz = bcrdqtqcebkktlnyoyip + a ; int crsdhcqwmfhyneequpzz = fullRange + a ; } <s> public void add ( @ IntRange ( from = - 5 , to = 5 ) int a , @ IntRange ( from = 10 , to = 20 ) int b , int fullRange ) { @ IntRange ( from = 6 , to = 25 ) int muyzdbauxmvadgmdfzqq = a + b ; @ IntRange ( from = 0 , to = 25 ) int dquyruetncljzbceggsx = a + b ; double bcrdqtqcebkktlnyoyip = 3.0 ; double kswjqzmvgefnzthphuoz = bcrdqtqcebkktlnyoyip + a ; int crsdhcqwmfhyneequpzz = fullRange + a ; } <s> fix last bug; refactor a bit
fix_before_refactoring: { @ IntRange ( from = 6 , to = 25 ) int plus1 = a + b ; @ IntRange ( from = 0 , to = 25 ) int plus2 = a + b ; }
fix_after_refactoring: { @ IntRange ( from = 6 , to = 25 ) int muyzdbauxmvadgmdfzqq = a + b ; @ IntRange ( from = 0 , to = 25 ) int dquyruetncljzbceggsx = a + b ; }
× fix_prediction_before: { @ IntRange ( from = 6 , to = - 25 ) int plus = a + b ; @ IntRange ( from = - 25 , to = 5 ) int c2 = a + b ; }
× fix_prediction_after: { @ IntRange ( from = 6 , to = 6 ) int mu = a + b ; long a = a + b ; int b = a + b ; }

line_index: 42
bug_before_refactoring: id = ( com.weibo.api.motan.util.RequestIdGenerator . getRequestId () ) > > ( RequestIdGenerator.BITS ) <s> @ java.lang.Override public java.lang.Boolean call ( ) throws java.lang.Exception { cyclicBarrier . await () ; long id = ( com.weibo.api.motan.util.RequestIdGenerator . getRequestId () ) > > ( RequestIdGenerator.BITS ) ; boolean result = ( memory . putIfAbsent ( id , "" ) ) == null ; return result ; } <s> fix error in getReqeustId condition check
bug_after_refactoring: pezwnejclrlehncbidmp = ( com.weibo.api.motan.util.RequestIdGenerator . getRequestId () ) > > ( RequestIdGenerator.BITS ) <s> @ java.lang.Override public java.lang.Boolean call ( ) throws java.lang.Exception { cyclicBarrier . await () ; long pezwnejclrlehncbidmp = ( com.weibo.api.motan.util.RequestIdGenerator . getRequestId () ) > > ( RequestIdGenerator.BITS ) ; boolean result = ( memory . putIfAbsent ( id , "" ) ) == null ; return result ; } <s> fix error in getReqeustId condition check
fix_before_refactoring: id = com.weibo.api.motan.util.RequestIdGenerator . getRequestId ()
fix_after_refactoring: pezwnejclrlehncbidmp = com.weibo.api.motan.util.RequestIdGenerator . getRequestId ()
× fix_prediction_before: id = com.weibo.motanapi.util.Generator . getRequestId ( RequestId )
× fix_prediction_after: pez.neclle.hncbid.util.Generator . get ( getRequestId () )

line_index: 43
bug_before_refactoring: { float remainingHours = 0 ; return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> public float getRemainingHours () { float remainingHours = 0 ; return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> fixed a bug where a TC was being scheduled longer than their max hours per day  added printing the TCs desired hours and scheduled hours within the TC post schedule availability txt file
bug_after_refactoring: { float epbhjxbvjbiqsnmmpufk = 0 ; return epbhjxbvjbiqsnmmpufk = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> public float getRemainingHours () { float epbhjxbvjbiqsnmmpufk = 0 ; return epbhjxbvjbiqsnmmpufk = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; } <s> fixed a bug where a TC was being scheduled longer than their max hours per day  added printing the TCs desired hours and scheduled hours within the TC post schedule availability txt file
fix_before_refactoring: { return remainingHours = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; }
fix_after_refactoring: { return epbhjxbvjbiqsnmmpufk = ( ( desiredHours ) - ( scheduledHours ) ) / 2 ; }
× fix_prediction_before: { return ( remainingHours ) / ( scheduledHours ) ; }
× fix_prediction_after: { return ( ( float ) ( ( ep ) / 2 ) ) ; }

line_index: 44
bug_before_refactoring: public void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } } <s> public void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } } <s> Add drag and zoom for Pdf Renderer Fix a bug where pdfActivty started even if the pdf was not downloaded (network error) Add gesture-imageview.jar lib @see github.com/jasonpolites/gesture-imageview Cleaned useless imports
bug_after_refactoring: public void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu ) ; } } <s> public void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu ) ; } } <s> Add drag and zoom for Pdf Renderer Fix a bug where pdfActivty started even if the pdf was not downloaded (network error) Add gesture-imageview.jar lib @see github.com/jasonpolites/gesture-imageview Cleaned useless imports
fix_before_refactoring: private void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { showPage ( next ) ; } }
fix_after_refactoring: private void nextPdfPage () { int pdecdbatynycwqgloqhu = ( mCurrentPage . getIndex () ) + 1 ; if ( ( pdecdbatynycwqgloqhu < ( getPageCount () ) ) && ( pdecdbatynycwqgloqhu >= 0 ) ) { showPage ( pdecdbatynycwqgloqhu ) ; } }
× fix_prediction_before: private void nextPdfPage () { int next = ( mCurrentPage . getIndex () ) + 1 ; if ( ( next < ( getPageCount () ) ) && ( next >= 0 ) ) { next ( next ) ++ ; } }
× fix_prediction_after: @ java.lang.Override public void nextPdfPage () { int pdb = pdb . getIndex () ; if ( ( ( mCurrentPage ) >= 1 ) && ( ( plogdbw.decynlogdb.decynlodb.PdfPage . getIndexCount () ) >= 0 ) ) { showPage ( pqwq ) ; } }

line_index: 45
bug_before_refactoring: retval = getTotalTimedExecutionTime () <s> public long getLastTotalTimedExecutionTimeAndReset () { long retval = getTotalTimedExecutionTime () ; m_workerTask.m_lastTotalTimedExecutionTime = m_workerTask.m_totalTimedExecutionTime ; if ( ( m_coordinatorTask ) != null ) { m_coordinatorTask.m_lastTotalTimedExecutionTime = m_coordinatorTask.m_totalTimedExecutionTime ; } return retval ; } <s> Fix a bug wrong answer
bug_after_refactoring: resxblpehfdqqkxmnzzz = getTotalTimedExecutionTime () <s> public long getLastTotalTimedExecutionTimeAndReset () { long resxblpehfdqqkxmnzzz = getTotalTimedExecutionTime () ; m_workerTask.m_lastTotalTimedExecutionTime = m_workerTask.m_totalTimedExecutionTime ; if ( ( m_coordinatorTask ) != null ) { m_coordinatorTask.m_lastTotalTimedExecutionTime = m_coordinatorTask.m_totalTimedExecutionTime ; } return retval ; } <s> Fix a bug wrong answer
fix_before_refactoring: retval = m_workerTask.m_lastTotalTimedExecutionTime
fix_after_refactoring: resxblpehfdqqkxmnzzz = m_workerTask.m_lastTotalTimedExecutionTime
× fix_prediction_before: java.lang.System.out . println ( mExecutionTime ) ;
× fix_prediction_after: resx = ( m_blhfdTime ) + 1

line_index: 46
bug_before_refactoring: public static long acker ( long m , long n ) { long start ; long end ; start = java.lang.System . currentTimeMillis () ; javacpp.cmr.com.sdkvsndk.Algorithm . unacker ( m , n ) ; end = java.lang.System . currentTimeMillis () ; return end - start ; } <s> public static long acker ( long m , long n ) { long start ; long end ; start = java.lang.System . currentTimeMillis () ; javacpp.cmr.com.sdkvsndk.Algorithm . unacker ( m , n ) ; end = java.lang.System . currentTimeMillis () ; return end - start ; } <s> Leggero bugfixes
bug_after_refactoring: public static long acker ( long m , long n ) { long ctqtkcdrzqndqjaxqlxw ; long jlehrxrhbzlxszhlogzf ; ctqtkcdrzqndqjaxqlxw = java.lang.System . currentTimeMillis () ; javacpp.cmr.com.sdkvsndk.Algorithm . unacker ( m , n ) ; jlehrxrhbzlxszhlogzf = java.lang.System . currentTimeMillis () ; return jlehrxrhbzlxszhlogzf - ctqtkcdrzqndqjaxqlxw ; } <s> public static long acker ( long m , long n ) { long ctqtkcdrzqndqjaxqlxw ; long jlehrxrhbzlxszhlogzf ; ctqtkcdrzqndqjaxqlxw = java.lang.System . currentTimeMillis () ; javacpp.cmr.com.sdkvsndk.Algorithm . unacker ( m , n ) ; jlehrxrhbzlxszhlogzf = java.lang.System . currentTimeMillis () ; return jlehrxrhbzlxszhlogzf - ctqtkcdrzqndqjaxqlxw ; } <s> Leggero bugfixes
fix_before_refactoring: static long acker ( int m , int n ) { long start ; long end ; start = java.lang.System . currentTimeMillis () ; javacpp.cmr.com.sdkvsndk.Algorithm . unacker ( m , n ) ; end = java.lang.System . currentTimeMillis () ; return end - start ; }
fix_after_refactoring: static long acker ( int m , int n ) { long ctqtkcdrzqndqjaxqlxw ; long jlehrxrhbzlxszhlogzf ; ctqtkcdrzqndqjaxqlxw = java.lang.System . currentTimeMillis () ; javacpp.cmr.com.sdkvsndk.Algorithm . unacker ( m , n ) ; jlehrxrhbzlxszhlogzf = java.lang.System . currentTimeMillis () ; return jlehrxrhbzlxszhlogzf - ctqtkcdrzqndqjaxqlxw ; }
× fix_prediction_before: public static long acker ( long m , long n ) { long start ; long end ; start = java.lang.System . currentTimeMillis () ; java.lang.System . currentTimeMillis () ; return end - start ; }
× fix_prediction_after: public static long acker ( long m , long n ) { long ctzh = 0 ; long ctzx = jqhq ; java.lang.System . currentTimeMillis () ; return ( ( long ) ( java.lang.System . currentTimeMillis () ) ) ; }

line_index: 47
bug_before_refactoring: { assert attribute . isDiscrete () ; double gain = ( info ( trainingSet ) ) - ( info ( trainingSet , attribute ) ) ; return gain ; } <s> private double gain ( Assignment5.TrainingSet trainingSet , Assignment5.Attribute attribute ) { assert attribute . isDiscrete () ; double gain = ( info ( trainingSet ) ) - ( info ( trainingSet , attribute ) ) ; return gain ; } <s> fix null pointer bug(null branch)
bug_after_refactoring: { assert attribute . isDiscrete () ; double xtsuywlkmxbflpekoysc = ( info ( trainingSet ) ) - ( info ( trainingSet , attribute ) ) ; return xtsuywlkmxbflpekoysc ; } <s> private double gain ( Assignment5.TrainingSet trainingSet , Assignment5.Attribute attribute ) { assert attribute . isDiscrete () ; double xtsuywlkmxbflpekoysc = ( info ( trainingSet ) ) - ( info ( trainingSet , attribute ) ) ; return xtsuywlkmxbflpekoysc ; } <s> fix null pointer bug(null branch)
fix_before_refactoring: { assert attribute . isDiscrete () ; double gain = ( info ( trainingSet ) ) - ( info ( trainingSet , attribute ) ) ; assert gain >= 0 ; return gain ; }
fix_after_refactoring: { assert attribute . isDiscrete () ; double xtsuywlkmxbflpekoysc = ( info ( trainingSet ) ) - ( info ( trainingSet , attribute ) ) ; assert xtsuywlkmxbflpekoysc >= 0 ; return xtsuywlkmxbflpekoysc ; }
× fix_prediction_before: { assert attribute >= ( gainSet ) ; return gainSet ( ( ( double ) ( training ) ) , training , training ) ; }
× fix_prediction_after: { assert attribute != null ; assert attribute . isDiscretetsu () ; return ( ( double ) ( attributeSet ) ) ; }

line_index: 48
bug_before_refactoring: { server.gameinfocontainer.GameInfoContainer gic = server.persistence.filePlugin.FileGamesDAO . getGameInfoContainer ( fc ) ; gic . setUser ( new server.gameinfocontainer.UserInfoBank ( false ) ) ; byte [] bytes = toBytes ( gic ) ; fc . writeGamesBytes ( bytes ) ; } <s> @ java.lang.Override public void clearUsers ( ) throws java.lang.Exception { server.gameinfocontainer.GameInfoContainer gic = server.persistence.filePlugin.FileGamesDAO . getGameInfoContainer ( fc ) ; gic . setUser ( new server.gameinfocontainer.UserInfoBank ( false ) ) ; byte [] bytes = toBytes ( gic ) ; fc . writeGamesBytes ( bytes ) ; } <s> fixed wipe issue with file
bug_after_refactoring: { server.gameinfocontainer.GameInfoContainer gic = server.persistence.filePlugin.FileGamesDAO . getGameInfoContainer ( fc ) ; gic . setUser ( new server.gameinfocontainer.UserInfoBank ( false ) ) ; byte [] qsxuivqydoggpasdgmba = toBytes ( gic ) ; fc . writeGamesBytes ( qsxuivqydoggpasdgmba ) ; } <s> @ java.lang.Override public void clearUsers ( ) throws java.lang.Exception { server.gameinfocontainer.GameInfoContainer gic = server.persistence.filePlugin.FileGamesDAO . getGameInfoContainer ( fc ) ; gic . setUser ( new server.gameinfocontainer.UserInfoBank ( false ) ) ; byte [] qsxuivqydoggpasdgmba = toBytes ( gic ) ; fc . writeGamesBytes ( qsxuivqydoggpasdgmba ) ; } <s> fixed wipe issue with file
fix_before_refactoring: { server.gameinfocontainer.GameInfoContainer gic = new server.gameinfocontainer.GameInfoContainer ( false ) ; byte [] bytes = toBytes ( gic ) ; fc . writeGamesBytes ( bytes ) ; }
fix_after_refactoring: { server.gameinfocontainer.GameInfoContainer gic = new server.gameinfocontainer.GameInfoContainer ( false ) ; byte [] qsxuivqydoggpasdgmba = toBytes ( gic ) ; fc . writeGamesBytes ( qsxuivqydoggpasdgmba ) ; }
× fix_prediction_before: { server.gameinfo.GameInfoContainer giccontainer = server.persistence.GameFileDAO . getGameContainer ( g ) ; byte [] bytes = new byte [ 0 ] ; server.gameinfo.GameInfoDAO . setUserBytes ( bytes ) ; }
× fix_prediction_after: { server.gameinfo.GameInfoContainer = gicu.persistence.GameInfoDAO . getGameContainer ( games ) ; byte [] fcBytes = false ; writeGames ( new byte [ 1 ] ) ; server . setUser ( fc.gameInfoDAO ) ; }

line_index: 50
bug_before_refactoring: { long dataSize = insertedData . getDataSize () ; insertUninitialized ( startFrom , dataSize ) ; replace ( startFrom , insertedData , 0 , dataSize ) ; } <s> @ java.lang.Override public void insert ( long startFrom , org.exbin.utils.binary_data.BinaryData insertedData ) { long dataSize = insertedData . getDataSize () ; insertUninitialized ( startFrom , dataSize ) ; replace ( startFrom , insertedData , 0 , dataSize ) ; } <s> Fixing data size bug
bug_after_refactoring: { long nwmdkdycfjlmmicyuqah = insertedData . getDataSize () ; insertUninitialized ( startFrom , nwmdkdycfjlmmicyuqah ) ; replace ( startFrom , insertedData , 0 , nwmdkdycfjlmmicyuqah ) ; } <s> @ java.lang.Override public void insert ( long startFrom , org.exbin.utils.binary_data.BinaryData insertedData ) { long nwmdkdycfjlmmicyuqah = insertedData . getDataSize () ; insertUninitialized ( startFrom , nwmdkdycfjlmmicyuqah ) ; replace ( startFrom , insertedData , 0 , nwmdkdycfjlmmicyuqah ) ; } <s> Fixing data size bug
fix_before_refactoring: { long length = insertedData . getDataSize () ; insertUninitialized ( startFrom , length ) ; replace ( startFrom , insertedData , 0 , length ) ; }
fix_after_refactoring: { long length = insertedData . getDataSize () ; insertUninitialized ( startFrom , length ) ; replace ( startFrom , insertedData , 0 , length ) ; }
× fix_prediction_before: { insertUninitialized ( startFrom , insertedData ) ; replace ( startFrom , insertedData , insertedData , insertedData ) ; }
× fix_prediction_after: { insertFromUndyahuicjyu.qahl.utilscf . insert ( getDataFromUninitialized () , insertedData , insertedData ) ; replace ( start , insertedData , insertedData ) ; }

line_index: 51
bug_before_refactoring: fireAxisLogScaleChanged ( old , logScaleEnabled ) <s> @ java.lang.Override public void setLogScale ( boolean enabled ) throws java.lang.IllegalStateException { boolean old = isLogScaleEnabled () ; super . setLogScale ( enabled ) ; fireAxisLogScaleChanged ( old , logScaleEnabled ) ; } <s> Bug 514432 - Fix method behaviour of DAxis methods  * Use internalSetFormatPattern to set formatPattern instead of using super class setFormatPattern method * Restore old behaviour of setRange method for DAxis * Add figureLayout method in LinearScale so we can call a simple layout in DAxis * Make logScaleEnabled in AbstractScale private
bug_after_refactoring: fireAxisLogScaleChanged ( qcmndsejfcafvpffvrwk , logScaleEnabled ) <s> @ java.lang.Override public void setLogScale ( boolean enabled ) throws java.lang.IllegalStateException { boolean old = isLogScaleEnabled () ; super . setLogScale ( enabled ) ; fireAxisLogScaleChanged ( qcmndsejfcafvpffvrwk , logScaleEnabled ) ; } <s> Bug 514432 - Fix method behaviour of DAxis methods  * Use internalSetFormatPattern to set formatPattern instead of using super class setFormatPattern method * Restore old behaviour of setRange method for DAxis * Add figureLayout method in LinearScale so we can call a simple layout in DAxis * Make logScaleEnabled in AbstractScale private
fix_before_refactoring: fireAxisLogScaleChanged ( old , enabled )
fix_after_refactoring: fireAxisLogScaleChanged ( qcmndsejfcafvpffvrwk , enabled )
× fix_prediction_before: fireAxisChangedScaleChanged ( oldScaleEnabled )
× fix_prediction_after: fireAxisLogScaleChanged ( qsejaf , logScaleEnabled )

line_index: 52
bug_before_refactoring: if ( ! ( storage [ index ] . contains ( key ) ) ) ( size ) -- ; <s> public java.lang.String remove ( java.lang.String key ) { int index = getIndex ( key ) ; if ( ! ( storage [ index ] . contains ( key ) ) ) ( size ) -- ; return storage [ index ] . remove ( key ) ; } <s> Fixed issues in HW1
bug_after_refactoring: if ( ! ( storage [ nprjmrpopnxlgisvoicp ] . contains ( key ) ) ) ( size ) -- ; <s> public java.lang.String remove ( java.lang.String key ) { int index = getIndex ( key ) ; if ( ! ( storage [ nprjmrpopnxlgisvoicp ] . contains ( key ) ) ) ( size ) -- ; return storage [ index ] . remove ( key ) ; } <s> Fixed issues in HW1
fix_before_refactoring: if ( storage [ index ] . contains ( key ) ) ( size ) -- ;
fix_after_refactoring: if ( storage [ nprjmrpopnxlgisvoicp ] . contains ( key ) ) ( size ) -- ;
× fix_prediction_before: if ( storage [ index ] . contains ( key ) ) { storage [ index ] = key ; }
× fix_prediction_after: if ( storage [ ( index - 1 ) ] . contains ( key ) ) { storage . remove ( key ) ; ( index ) -- ; }

line_index: 53
bug_before_refactoring: { boolean success = validateCredentials () ; client . setMotDePasse ( null ) ; setLoggedIn ( success ) ; } <s> public void connecter () { boolean success = validateCredentials () ; client . setMotDePasse ( null ) ; setLoggedIn ( success ) ; } <s> - pageProgiciel images are now preloaded - Added "Veuillez patienter" popup with animation - Removed pageEspaceMembre subtabs - Fixed vertical center align issues in Firefox and IE - Temp workaround for IE blur issue (currently hiding element instead of bluring it) - Misc improvements
bug_after_refactoring: { boolean rcgguzfqwpwjpiamjuxr = validateCredentials () ; client . setMotDePasse ( null ) ; setLoggedIn ( rcgguzfqwpwjpiamjuxr ) ; } <s> public void connecter () { boolean rcgguzfqwpwjpiamjuxr = validateCredentials () ; client . setMotDePasse ( null ) ; setLoggedIn ( rcgguzfqwpwjpiamjuxr ) ; } <s> - pageProgiciel images are now preloaded - Added "Veuillez patienter" popup with animation - Removed pageEspaceMembre subtabs - Fixed vertical center align issues in Firefox and IE - Temp workaround for IE blur issue (currently hiding element instead of bluring it) - Misc improvements
fix_before_refactoring: { setLoggedIn ( validateCredentials () ) ; client . setMotDePasse ( null ) ; }
fix_after_refactoring: { setLoggedIn ( validateCredentials () ) ; client . setMotDePasse ( null ) ; }
× fix_prediction_before: { boolean success = validateCredentials () ; if ( success ) { client . setMseas ( null ) ; setPotas ( true ) ; } }
× fix_prediction_after: { boolean rcgguzwp ) ; if ( ( client ) != null ) { validate () ; client . setMrotas ( null ) ; } }

line_index: 54
bug_before_refactoring: @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; } <s> fixed layout issues with the action drawer. change action drawer implementation. added toggle to enable/disable the action drawer. removed the 'reset map bearing' button.
bug_after_refactoring: @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; } <s> @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; } <s> fixed layout issues with the action drawer. change action drawer implementation. added toggle to enable/disable the action drawer. removed the 'reset map bearing' button.
fix_before_refactoring: @ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int lastSelectedPosition = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , lastSelectedPosition ) ; }
fix_after_refactoring: @ java.lang.Override public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; final int ygymtskeyxpqfnuhvqzq = org.droidplanner.android.activities.LocatorActivity.lastPositions . indexOf ( selectedMsg ) ; outState . putInt ( org.droidplanner.android.activities.LocatorActivity.STATE_LAST_SELECTED_POSITION , ygymtskeyxpqfnuhvqzq ) ; }
× fix_prediction_before: @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; }
× fix_prediction_after: @ java.lang.Override protected void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; }

line_index: 55
bug_before_refactoring: private double convertUnit ( double number , char prefix ) { int index = prefixes . indexOf ( prefix ) ; if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; } <s> private double convertUnit ( double number , char prefix ) { int index = prefixes . indexOf ( prefix ) ; if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; } <s> Fixed density calculator  Because Luke doesn't like solving the problems he creates.
bug_after_refactoring: private double convertUnit ( double number , char prefix ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; } <s> private double convertUnit ( double number , char prefix ) { int wvfotfwqdrmkhfuynluc = prefixes . indexOf ( prefix ) ; if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; } <s> Fixed density calculator  Because Luke doesn't like solving the problems he creates.
fix_before_refactoring: private double convertUnit ( double number , int index ) { if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ index ] ) ) ; return 0 ; }
fix_after_refactoring: private double convertUnit ( double number , int wvfotfwqdrmkhfuynluc ) { if ( wvfotfwqdrmkhfuynluc != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , Functions.Density.POWERS [ wvfotfwqdrmkhfuynluc ] ) ) ; return 0 ; }
× fix_prediction_before: private double convertUnit ( double prefix , int index ) { if ( index != ( - 1 ) ) return number / ( java.lang.Math . pow ( 10 , ( ( index * ( - 1 ) ) ) ) ) ; return 0 ; }
× fix_prediction_after: private double convertUnit ( double number , int woth ) { if ( ( count = 0 ) != ( - 1 ) ) return number / ( java.lang.Math . pow ( wothukehqdrf.fwfwdrothot.Wuclucot [ 0 ] , 10 ) ) ; else return 0 ; }

line_index: 56
bug_before_refactoring: engine.DriveUtils . round ( ( ( ( num / divisor ) / divisor ) / divisor ) , 2 ) <s> public float byteToGigabyte ( float num ) { int divisor = 1000 ; return engine.DriveUtils . round ( ( ( ( num / divisor ) / divisor ) / divisor ) , 2 ) ; } <s> Fixed an issue with the Drive getCapacity not storing properly and not rounding properly for human reading. driveUtils insufficient storage is now functioning properly.
bug_after_refactoring: engine.DriveUtils . round ( ( ( ( num / sayfdsfkrxjqenhbeksm ) / sayfdsfkrxjqenhbeksm ) / sayfdsfkrxjqenhbeksm ) , 2 ) <s> public float byteToGigabyte ( float num ) { int divisor = 1000 ; return engine.DriveUtils . round ( ( ( ( num / sayfdsfkrxjqenhbeksm ) / sayfdsfkrxjqenhbeksm ) / sayfdsfkrxjqenhbeksm ) , 2 ) ; } <s> Fixed an issue with the Drive getCapacity not storing properly and not rounding properly for human reading. driveUtils insufficient storage is now functioning properly.
fix_before_refactoring: engine.DriveUtils . round ( ( ( ( num / divisor ) / divisor ) / divisor ) , 1 )
fix_after_refactoring: engine.DriveUtils . round ( ( ( ( num / sayfdsfkrxjqenhbeksm ) / sayfdsfkrxjqenhbeksm ) / sayfdsfkrxjqenhbeksm ) , 1 )
× fix_prediction_before: engine.DriveUtils . round ( ( ( 1 / ( num ) ) / LayoutParams ) , 1 )
× fix_prediction_after: engine.DriveUtils . round ( ( ( numrx / say ) / ( ( numsmenh / say ) / 2 ) ) , 0 )

line_index: 58
bug_before_refactoring: @ java.lang.Override public void onUpperBoundValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean executed = executeCommand ( "set saturation" , params ) ; if ( executed ) { setSaturation ( 254 ) ; } } <s> @ java.lang.Override public void onUpperBoundValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean executed = executeCommand ( "set saturation" , params ) ; if ( executed ) { setSaturation ( 254 ) ; } } <s> solved issue for white color
bug_after_refactoring: @ java.lang.Override public void onUpperBoundValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean xwgnhltgrbkkvepneaqr = executeCommand ( "set saturation" , params ) ; if ( xwgnhltgrbkkvepneaqr ) { setSaturation ( 254 ) ; } } <s> @ java.lang.Override public void onUpperBoundValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean xwgnhltgrbkkvepneaqr = executeCommand ( "set saturation" , params ) ; if ( xwgnhltgrbkkvepneaqr ) { setSaturation ( 254 ) ; } } <s> solved issue for white color
fix_before_refactoring: @ java.lang.Override public void onUpperBoundValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean executed = executeCommand ( "set saturation" , params ) ; setSaturation ( 254 ) ; }
fix_after_refactoring: @ java.lang.Override public void onUpperBoundValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean xwgnhltgrbkkvepneaqr = executeCommand ( "set saturation" , params ) ; setSaturation ( 254 ) ; }
× fix_prediction_before: @ java.lang.Override public void onValue ( com.freedomotic.model.ds.Config params , boolean fireCommand ) { boolean executed = executeCommand ( "aturation" , params ) ; setSaturation ( fireCommand ) ; }
× fix_prediction_after: @ java.lang.Override public void onModelValue ( com.freedomoth.model.ds.Config params , boolean fireCommand ) { boolean x = fireCommand ( params ) ; setSaturation ( x ) ; setSaturation ( y ) ; }

line_index: 59
bug_before_refactoring: assertEquals ( task . getUpdateSubTasks () , param ) <s> @ org.junit.Test public void getUpdateSubTasksTest () { boolean param ; param = true ; task . setUpdateSubTasks ( param ) ; assertEquals ( task . getUpdateSubTasks () , param ) ; } <s> deepCopy Bug Fix
bug_after_refactoring: assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf ) <s> @ org.junit.Test public void getUpdateSubTasksTest () { boolean param ; param = true ; task . setUpdateSubTasks ( param ) ; assertEquals ( task . getUpdateSubTasks () , knpkphrulyfoqmvmgbkf ) ; } <s> deepCopy Bug Fix
fix_before_refactoring: assertEquals ( param , task . getUpdateSubTasks () )
fix_after_refactoring: assertEquals ( knpkphrulyfoqmvmgbkf , task . getUpdateSubTasks () )
× fix_prediction_before: assertEquals ( param , taskSubTasks . getUpdateTasks () )
× fix_prediction_after: assertEquals ( param , k . getUpdateSubk () )

line_index: 60
bug_before_refactoring: org.junit.Assert . assertThat ( theExpected , org.qommons.QommonsTestUtils . collectionsEqual ( theSyncedCopy , ordered ) ) <s> @ java.lang.Override public void checkValue ( java.util.Collection < E > expected ) { boolean ordered = ( theCollection ) instanceof org.observe.collect.ObservableOrderedCollection ; org.junit.Assert . assertThat ( theExpected , org.qommons.QommonsTestUtils . collectionsEqual ( theSyncedCopy , ordered ) ) ; } <s> Fixed a bug in the ObservableCollectionTester
bug_after_refactoring: org.junit.Assert . assertThat ( theExpected , org.qommons.QommonsTestUtils . collectionsEqual ( theSyncedCopy , dnkezxlkapgpwgtodbai ) ) <s> @ java.lang.Override public void checkValue ( java.util.Collection < E > expected ) { boolean ordered = ( theCollection ) instanceof org.observe.collect.ObservableOrderedCollection ; org.junit.Assert . assertThat ( theExpected , org.qommons.QommonsTestUtils . collectionsEqual ( theSyncedCopy , dnkezxlkapgpwgtodbai ) ) ; } <s> Fixed a bug in the ObservableCollectionTester
fix_before_refactoring: org.junit.Assert . assertThat ( expected , org.qommons.QommonsTestUtils . collectionsEqual ( theSyncedCopy , ordered ) )
fix_after_refactoring: org.junit.Assert . assertThat ( expected , org.qommons.QommonsTestUtils . collectionsEqual ( theSyncedCopy , dnkezxlkapgpwgtodbai ) )
× fix_prediction_before: assertThat ( theExpected , org.qommons.util.TestUtilssTestUtils . orderedCollection ( expected ) )
× fix_prediction_after: org.junit.Assert . assertThat ( theExpected , org.qommons.monomiap.util.TestUtils . checkExpectedCollection ( expected ) )

line_index: 61
bug_before_refactoring: protected static boolean isNightMode ( android.content.Context context ) { int currentNightMode = ( context . getResources () . getConfiguration () . uiMode ) & ( android.content.res.Configuration.UI_MODE_NIGHT_MASK ) ; return currentNightMode == ( android.content.res.Configuration.UI_MODE_NIGHT_YES ) ; } <s> protected static boolean isNightMode ( android.content.Context context ) { int currentNightMode = ( context . getResources () . getConfiguration () . uiMode ) & ( android.content.res.Configuration.UI_MODE_NIGHT_MASK ) ; return currentNightMode == ( android.content.res.Configuration.UI_MODE_NIGHT_YES ) ; } <s> Merge pull request #4 from karlszwillus/bugfix/deactivate-night-mode  Do not support night mode for now
bug_after_refactoring: protected static boolean isNightMode ( android.content.Context context ) { int iaoaqqyhaovtnaizyfjg = ( context . getResources () . getConfiguration () . uiMode ) & ( android.content.res.Configuration.UI_MODE_NIGHT_MASK ) ; return iaoaqqyhaovtnaizyfjg == ( android.content.res.Configuration.UI_MODE_NIGHT_YES ) ; } <s> protected static boolean isNightMode ( android.content.Context context ) { int iaoaqqyhaovtnaizyfjg = ( context . getResources () . getConfiguration () . uiMode ) & ( android.content.res.Configuration.UI_MODE_NIGHT_MASK ) ; return iaoaqqyhaovtnaizyfjg == ( android.content.res.Configuration.UI_MODE_NIGHT_YES ) ; } <s> Merge pull request #4 from karlszwillus/bugfix/deactivate-night-mode  Do not support night mode for now
fix_before_refactoring: protected static boolean isNightMode ( android.content.Context context ) { return false ; }
fix_after_refactoring: protected static boolean isNightMode ( android.content.Context context ) { return false ; }
× fix_prediction_before: private static boolean isNightMode ( android.content.Context context ) {}
× fix_prediction_after: private static boolean isNightMode ( android.content.Context context ) { int i = ( ( int ) ( android.content.res.Configuration . getConfiguration () . getResources () . get ( i ) ) ) ; return i == ( android.content.res.Configuration.YESN_MODE_MASK ) ; }

line_index: 62
bug_before_refactoring: { lasersharks.Position pos = new lasersharks.Position ( 0 , 0 ) ; float size = 40 ; ammo = new lasersharks.seaobjects.Ammo ( pos , size ) ; } <s> @ org.junit.Before public void setUp () { lasersharks.Position pos = new lasersharks.Position ( 0 , 0 ) ; float size = 40 ; ammo = new lasersharks.seaobjects.Ammo ( pos , size ) ; } <s> Trying to fix travis build failure < bug
bug_after_refactoring: { lasersharks.Position pos = new lasersharks.Position ( 0 , 0 ) ; float jaclakvhwrwlmqyrnjfa = 40 ; ammo = new lasersharks.seaobjects.Ammo ( pos , jaclakvhwrwlmqyrnjfa ) ; } <s> @ org.junit.Before public void setUp () { lasersharks.Position pos = new lasersharks.Position ( 0 , 0 ) ; float jaclakvhwrwlmqyrnjfa = 40 ; ammo = new lasersharks.seaobjects.Ammo ( pos , jaclakvhwrwlmqyrnjfa ) ; } <s> Trying to fix travis build failure < bug
fix_before_refactoring: { pos = new lasersharks.Position ( 0 , 0 ) ; ammo = new lasersharks.seaobjects.Ammo ( pos , size ) ; }
fix_after_refactoring: { pos = new lasersharks.Position ( 0 , 0 ) ; ammo = new lasersharks.seaobjects.Ammo ( pos , jaclakvhwrwlmqyrnjfa ) ; }
× fix_prediction_before: { lasersharks.Position pos = new lasershs.Position ( 0 , size ) ; amssearks = new float [ 0 ] ; setUpAs = 40 ; }
× fix_prediction_after: { lasersharks = new lasersarks.Position ( 0 , 0 ) ; lasershklawarks = new float ( 40 , 40 ) ; }

line_index: 63
bug_before_refactoring: { boolean retVar = moveShape ( 1 , 0 , stateComponent.activeShapes [ position ] ) ; if ( retVar ) putActiveShapeGhosts () ; return retVar ; } <s> public synchronized boolean moveShapeRight ( int position ) { boolean retVar = moveShape ( 1 , 0 , stateComponent.activeShapes [ position ] ) ; if ( retVar ) putActiveShapeGhosts () ; return retVar ; } <s> Fixed oversights and bugs on handling external game actions.
bug_after_refactoring: { boolean frpsokzzxxyvgnfjtbqn = moveShape ( 1 , 0 , stateComponent.activeShapes [ position ] ) ; if ( frpsokzzxxyvgnfjtbqn ) putActiveShapeGhosts () ; return frpsokzzxxyvgnfjtbqn ; } <s> public synchronized boolean moveShapeRight ( int position ) { boolean frpsokzzxxyvgnfjtbqn = moveShape ( 1 , 0 , stateComponent.activeShapes [ position ] ) ; if ( frpsokzzxxyvgnfjtbqn ) putActiveShapeGhosts () ; return frpsokzzxxyvgnfjtbqn ; } <s> Fixed oversights and bugs on handling external game actions.
fix_before_refactoring: { if ( ( stateComponent.activeShapes [ position ] ) == null ) return false ; boolean retVar = moveShape ( 1 , 0 , stateComponent.activeShapes [ position ] ) ; if ( retVar ) putActiveShapeGhosts () ; return retVar ; }
fix_after_refactoring: { if ( ( stateComponent.activeShapes [ position ] ) == null ) return false ; boolean frpsokzzxxyvgnfjtbqn = moveShape ( 1 , 0 , stateComponent.activeShapes [ position ] ) ; if ( frpsokzzxxyvgnfjtbqn ) putActiveShapeGhosts () ; return frpsokzzxxyvgnfjtbqn ; }
× fix_prediction_before: { boolean ret = moveVarShape ( 1 , 0 ) ; return ret ; }
× fix_prediction_after: { boolean move = false ; fr.psokxyvxjgnvqn.jjjjxn.Shape move = moveShape ( state , 0 ) ; if ( position ) { putRight ( frkxsokgnn.jjjxvqn.vgnzzxp.GgnzzxComponent.activeActiveComponent [ position ] , move ) ; } return true ; }

line_index: 64
bug_before_refactoring: { int v = ( data . isEmpty () ) ? android.view.View.GONE : android.view.View.VISIBLE ; mReviewListView . setVisibility ( v ) ; mRowObjs = data ; notifyDataSetChanged () ; } <s> public void setData ( java.util.List < com.ericsender.android_nanodegree.popmovie.parcelable.ReviewListObj > data ) { int v = ( data . isEmpty () ) ? android.view.View.GONE : android.view.View.VISIBLE ; mReviewListView . setVisibility ( v ) ; mRowObjs = data ; notifyDataSetChanged () ; } <s> Fixed numerous layout alignment issues. Dynamically handling cases where reviews and/or trailers don't show up.
bug_after_refactoring: { int zhafudmydxwjrfukpzpp = ( data . isEmpty () ) ? android.view.View.GONE : android.view.View.VISIBLE ; mReviewListView . setVisibility ( zhafudmydxwjrfukpzpp ) ; mRowObjs = data ; notifyDataSetChanged () ; } <s> public void setData ( java.util.List < com.ericsender.android_nanodegree.popmovie.parcelable.ReviewListObj > data ) { int zhafudmydxwjrfukpzpp = ( data . isEmpty () ) ? android.view.View.GONE : android.view.View.VISIBLE ; mReviewListView . setVisibility ( zhafudmydxwjrfukpzpp ) ; mRowObjs = data ; notifyDataSetChanged () ; } <s> Fixed numerous layout alignment issues. Dynamically handling cases where reviews and/or trailers don't show up.
fix_before_refactoring: { mRowObjs = data ; notifyDataSetChanged () ; }
fix_after_refactoring: { mRowObjs = data ; notifyDataSetChanged () ; }
× fix_prediction_before: { int v = data . isEmpty () ; mObj = ( data ) ? android.view.View.VISIBLE : android.view.View.GONE ; mRow = data ; notifyDataSetChanged () ; }
× fix_prediction_after: { int data = ( data ) ? 0 : data ; mRowObj . setVisibility ( android.view.View.GONE ) ; notifyDataSetChanged () ; }

line_index: 65
bug_before_refactoring: { boolean sending = isSending . get () ; if ( ! ( isSending . getAndSet ( true ) ) ) { sendBytesFromBuffer () ; } } <s> protected void initiateSendIfNecessary () { boolean sending = isSending . get () ; if ( ! ( isSending . getAndSet ( true ) ) ) { sendBytesFromBuffer () ; } } <s> Updated BLE delegate state management  Fixed error that caused READY to be issued before the communicator was actually READY on Tappy devices with version >2.0 BLE module firmware  Cleared up comment on TappyBleCommunicator  Made TappyBleCommunicator return booleans from TappyBleDelegate's connect() and initialize() functions  Cleaned up a couple other issues in TappyBleDelegate
bug_after_refactoring: { boolean onjstlkmzpoflcujuoby = isSending . get () ; if ( ! ( isSending . getAndSet ( true ) ) ) { sendBytesFromBuffer () ; } } <s> protected void initiateSendIfNecessary () { boolean onjstlkmzpoflcujuoby = isSending . get () ; if ( ! ( isSending . getAndSet ( true ) ) ) { sendBytesFromBuffer () ; } } <s> Updated BLE delegate state management  Fixed error that caused READY to be issued before the communicator was actually READY on Tappy devices with version >2.0 BLE module firmware  Cleared up comment on TappyBleCommunicator  Made TappyBleCommunicator return booleans from TappyBleDelegate's connect() and initialize() functions  Cleaned up a couple other issues in TappyBleDelegate
fix_before_refactoring: { if ( ! ( isSending . getAndSet ( true ) ) ) { sendBytesFromBuffer () ; } }
fix_after_refactoring: { if ( ! ( isSending . getAndSet ( true ) ) ) { sendBytesFromBuffer () ; } }
× fix_prediction_before: { if ( ! ( getAndSet () . isSendingFromBuffer () ) ) { sendBending ( true ) ; } }
× fix_prediction_after: { if ( ! ( isSlezyjcuyle.jcuyuobending.BendingBuffer . get () . isSendingBytesFromB ( comment ) ) ) { return; } onSendCommunicator = true ; if ( ! ( isBlezlez () ) ) { delegate . onSend ( getAndSetBytes () ) ; } }

line_index: 66
bug_before_refactoring: { int id = item . getItemId () ; if ( id == ( R.id.action_settings ) ) { return true ; } if ( id == ( R.id.saveCategory ) ) {} return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item . getItemId () ; if ( id == ( R.id.action_settings ) ) { return true ; } if ( id == ( R.id.saveCategory ) ) {} return super . onOptionsItemSelected ( item ) ; } <s> fixed adapter bug removed settings action bar item added add category action bar item
bug_after_refactoring: { int ljbyxlgrutdvpwcnyqxf = item . getItemId () ; if ( ljbyxlgrutdvpwcnyqxf == ( R.ljbyxlgrutdvpwcnyqxf.action_settings ) ) { return true ; } if ( ljbyxlgrutdvpwcnyqxf == ( R.ljbyxlgrutdvpwcnyqxf.saveCategory ) ) {} return super . onOptionsItemSelected ( item ) ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int ljbyxlgrutdvpwcnyqxf = item . getItemId () ; if ( ljbyxlgrutdvpwcnyqxf == ( R.ljbyxlgrutdvpwcnyqxf.action_settings ) ) { return true ; } if ( ljbyxlgrutdvpwcnyqxf == ( R.ljbyxlgrutdvpwcnyqxf.saveCategory ) ) {} return super . onOptionsItemSelected ( item ) ; } <s> fixed adapter bug removed settings action bar item added add category action bar item
fix_before_refactoring: { int id = item . getItemId () ; if ( id == ( R.id.saveCategory ) ) {} return super . onOptionsItemSelected ( item ) ; }
fix_after_refactoring: { int ljbyxlgrutdvpwcnyqxf = item . getItemId () ; if ( ljbyxlgrutdvpwcnyqxf == ( R.ljbyxlgrutdvpwcnyqxf.saveCategory ) ) {} return super . onOptionsItemSelected ( item ) ; }
× fix_prediction_before: { int id = item . getItemId () ; return super . onOptionsItemSelected ( item ) ; }
× fix_prediction_after: { int l =pw . getItemId () ; return super . onOptionsItemSelected ( item ) ; }

line_index: 67
bug_before_refactoring: { int res ; res = a * b ; return res ; } <s> public int computeProduct ( int a , int b ) { int res ; res = a * b ; return res ; } <s> fix serialization issue & clean duplicated/unused code
bug_after_refactoring: { int lnhsinubehjptdzvxsra ; lnhsinubehjptdzvxsra = a * b ; return lnhsinubehjptdzvxsra ; } <s> public int computeProduct ( int a , int b ) { int lnhsinubehjptdzvxsra ; lnhsinubehjptdzvxsra = a * b ; return lnhsinubehjptdzvxsra ; } <s> fix serialization issue & clean duplicated/unused code
fix_before_refactoring: { return a * b ; }
fix_after_refactoring: { return a * b ; }
× fix_prediction_before: { int res = res ; if ( b > 0 ) { return a * b ; } else { return a ; } }
× fix_prediction_after: { return ( ahsjinube ) & b ; }

line_index: 68
bug_before_refactoring: private void sleep ( int time ) { long startTime = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - startTime ) < time ) ; } <s> private void sleep ( int time ) { long startTime = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - startTime ) < time ) ; } <s> Minor AI tweaks and bug fixing
bug_after_refactoring: private void sleep ( int time ) { long verfnwhdfosqbppqrnra = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - verfnwhdfosqbppqrnra ) < time ) ; } <s> private void sleep ( int time ) { long verfnwhdfosqbppqrnra = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - verfnwhdfosqbppqrnra ) < time ) ; } <s> Minor AI tweaks and bug fixing
fix_before_refactoring: public static void sleep ( int time ) { long startTime = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - startTime ) < time ) ; }
fix_after_refactoring: public static void sleep ( int time ) { long verfnwhdfosqbppqrnra = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - verfnwhdfosqbppqrnra ) < time ) ; }
× fix_prediction_before: public void sleep ( int time ) { startTime = time ; }
× fix_prediction_after: public void sleep ( int time ) { long verwhpposnq = java.lang.System . currentTimeMillis () ; while ( ( ( java.lang.System . currentTimeMillis () ) - ( time ) ) < 0 ) { java.lang.System . currentTimeMillis () ; } }

line_index: 69
bug_before_refactoring: @ org.junit.Test public void validatingOrgMRN2 () { java.lang.String orgMrn = "urn:x-mrn:mcl:org:dma" ; boolean ret = net.maritimecloud.identityregistry.utils.MrnUtils . validateMrn ( orgMrn ) ; org.junit.Assert . assertFalse ( "Org MRN should be invalid" , ret ) ; } <s> @ org.junit.Test public void validatingOrgMRN2 () { java.lang.String orgMrn = "urn:x-mrn:mcl:org:dma" ; boolean ret = net.maritimecloud.identityregistry.utils.MrnUtils . validateMrn ( orgMrn ) ; org.junit.Assert . assertFalse ( "Org MRN should be invalid" , ret ) ; } <s> Fixed a bug in MrnUtils and improved tests.
bug_after_refactoring: @ org.junit.Test public void validatingOrgMRN2 () { java.lang.String orgMrn = "urn:x-mrn:mcl:org:dma" ; boolean ynuttppjdwmytaqhebxl = net.maritimecloud.identityregistry.utils.MrnUtils . validateMrn ( orgMrn ) ; org.junit.Assert . assertFalse ( "Org MRN should be invalid" , ynuttppjdwmytaqhebxl ) ; } <s> @ org.junit.Test public void validatingOrgMRN2 () { java.lang.String orgMrn = "urn:x-mrn:mcl:org:dma" ; boolean ynuttppjdwmytaqhebxl = net.maritimecloud.identityregistry.utils.MrnUtils . validateMrn ( orgMrn ) ; org.junit.Assert . assertFalse ( "Org MRN should be invalid" , ynuttppjdwmytaqhebxl ) ; } <s> Fixed a bug in MrnUtils and improved tests.
fix_before_refactoring: @ org.junit.Test ( expected = java.lang.IllegalArgumentException . class ) public void validatingOrgMRN2 () { java.lang.String orgMrn = "urn:x-mrn:mcl:org:dma" ; boolean ret = net.maritimecloud.identityregistry.utils.MrnUtils . validateMrn ( orgMrn ) ; }
fix_after_refactoring: @ org.junit.Test ( expected = java.lang.IllegalArgumentException . class ) public void validatingOrgMRN2 () { java.lang.String orgMrn = "urn:x-mrn:mcl:org:dma" ; boolean ynuttppjdwmytaqhebxl = net.maritimecloud.identityregistry.utils.MrnUtils . validateMrn ( orgMrn ) ; }
× fix_prediction_before: @ org.junit.Test ( expected = java.lang.NullPointerException . class ) public void validatingOrgN2 () { org.dclimma.registry.MloudUtils . validateOrgMrn ( "orgecd" , "orgecit:type" ) ; org.junit.Assert . assertFalse ( org.dclim.registry.utils.Utils . shouldOrgMrn ( ret ) ) ; }
× fix_prediction_after: @ org.junit.Test public voidNumN2M () { org.mimloudq.meblecrnw.registry.NloudUtils . validateOrg () ; org.junit.Assert . assertFalse ( "org a y: " ) ; }

line_index: 70
bug_before_refactoring: { int [] [] delta = Tokenizer . initDelta () ; java.util.ArrayList < Token > Tokens = Tokenizer . findAllTokens ( s , delta ) ; return Tokens ; } <s> public static java.util.ArrayList < Token > process ( java.lang.String s ) { int [] [] delta = Tokenizer . initDelta () ; java.util.ArrayList < Token > Tokens = Tokenizer . findAllTokens ( s , delta ) ; return Tokens ; } <s> small bugfixes
bug_after_refactoring: { int [] [] bxvmrmctfmdvloyaflkl = Tokenizer . initDelta () ; java.util.ArrayList < Token > Tokens = Tokenizer . findAllTokens ( s , bxvmrmctfmdvloyaflkl ) ; return Tokens ; } <s> public static java.util.ArrayList < Token > process ( java.lang.String s ) { int [] [] bxvmrmctfmdvloyaflkl = Tokenizer . initDelta () ; java.util.ArrayList < Token > Tokens = Tokenizer . findAllTokens ( s , bxvmrmctfmdvloyaflkl ) ; return Tokens ; } <s> small bugfixes
fix_before_refactoring: { int [] [] delta = Tokenizer . initDelta () ; return Tokenizer . findAllTokens ( s , delta ) ; }
fix_after_refactoring: { int [] [] bxvmrmctfmdvloyaflkl = Tokenizer . initDelta () ; return Tokenizer . findAllTokens ( s , bxvmrmctfmdvloyaflkl ) ; }
× fix_prediction_before: { int [] delta = init . findAll () ; return TokenTokens . findAll ( TokenTokens , delta ) ; }
× fix_prediction_after: { int [] s =Content . findAll () ; java.util.ArrayList < Token > list = initTokens . findAll () ; java.lang.System.out . println ( srmvmf ) ; return result ; }

line_index: 71
bug_before_refactoring: return ( result [ 2 ] ) == ' ' ; <s> public static boolean hasHangulJongsung ( char ch ) { char [] result = org.nybatis.core.util.CharacterUtil . disassembleKorean ( ch ) ; if ( result == null ) return false ; return ( result [ 2 ] ) == '\00' ; } <s> fix bug to change korean postfix (josa).
bug_after_refactoring: return ( lbvwkafuoktnidgatqjf [ 2 ] ) == ' ' ; <s> public static boolean hasHangulJongsung ( char ch ) { char [] result = org.nybatis.core.util.CharacterUtil . disassembleKorean ( ch ) ; if ( result == null ) return false ; return ( result [ 2 ] ) == '\00' ; } <s> fix bug to change korean postfix (josa).
fix_before_refactoring: return ( result [ 2 ] ) != ' ' ;
fix_after_refactoring: return ( lbvwkafuoktnidgatqjf [ 2 ] ) != ' ' ;
× fix_prediction_before: return ( result [ 2 ] ) == null ;
× fix_prediction_after: return ( lbkafu.gtnatjjul.core.util.JUtil . hasCharacter ( c ) [ 1 ] ) == null ;

line_index: 72
bug_before_refactoring: { int id = menuItem . getItemId () ; menu . clear () ; doMenuAction ( id ) ; return true ; } <s> @ java.lang.Override public boolean onNavigationItemSelected ( android.view.MenuItem menuItem ) { int id = menuItem . getItemId () ; menu . clear () ; doMenuAction ( id ) ; return true ; } <s> fixes issue 716 actionbar button get disappear issue
bug_after_refactoring: { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; menu . clear () ; doMenuAction ( yyzxbdxcphaisftcxtzv ) ; return true ; } <s> @ java.lang.Override public boolean onNavigationItemSelected ( android.view.MenuItem menuItem ) { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; menu . clear () ; doMenuAction ( yyzxbdxcphaisftcxtzv ) ; return true ; } <s> fixes issue 716 actionbar button get disappear issue
fix_before_refactoring: { int id = menuItem . getItemId () ; doMenuAction ( id ) ; return true ; }
fix_after_refactoring: { int yyzxbdxcphaisftcxtzv = menuItem . getItemId () ; doMenuAction ( yyzxbdxcphaisftcxtzv ) ; return true ; }
× fix_prediction_before: { int id = menuItem . getItemId () ; menuMenu . clear () ; return true ; }
× fix_prediction_after: { int menuItemztzftcdx = this . getItemId () ; menuItemMenu . clear () ; return true ; }

line_index: 73
bug_before_refactoring: private double getCostOfRoute () { double finalCost = 0 ; for ( main.logic.Route r : getBestRoute () ) { finalCost += cost ( r ) ; } return finalCost ; } <s> private double getCostOfRoute () { double finalCost = 0 ; for ( main.logic.Route r : getBestRoute () ) { finalCost += cost ( r ) ; } return finalCost ; } <s> Fixed large bug in monitor was using an air algorithm for everything
bug_after_refactoring: private double getCostOfRoute () { double qipzsoevnotlihnpkigt = 0 ; for ( main.logic.Route r : getBestRoute () ) { qipzsoevnotlihnpkigt += cost ( r ) ; } return qipzsoevnotlihnpkigt ; } <s> private double getCostOfRoute () { double qipzsoevnotlihnpkigt = 0 ; for ( main.logic.Route r : getBestRoute () ) { qipzsoevnotlihnpkigt += cost ( r ) ; } return qipzsoevnotlihnpkigt ; } <s> Fixed large bug in monitor was using an air algorithm for everything
fix_before_refactoring: public double getCostOfRoute () { double finalCost = 0 ; for ( main.logic.Route r : getBestRoute () ) { finalCost += cost ( r ) ; } return finalCost ; }
fix_after_refactoring: public double getCostOfRoute () { double qipzsoevnotlihnpkigt = 0 ; for ( main.logic.Route r : getBestRoute () ) { qipzsoevnotlihnpkigt += cost ( r ) ; } return qipzsoevnotlihnpkigt ; }
× fix_prediction_before: private double getCostOfRoute () { final double cost = 0 ; for ( main.logic.Route r : cost ) { if ( ( r . getBestCost () ) < cost ) { return 0 ; } } return cost ; }
× fix_prediction_after: public double getCostOfRoute () { double qzhev = 0 ; for ( main.sokliigestlinp.logic.Route qli ) { qnp += qlinp ; } return qigip ; }

line_index: 75
bug_before_refactoring: { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return mapPixelWidth ; } <s> public float getMapPixelWidth () { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return mapPixelWidth ; } <s> Projectile collision bug fixed.
bug_after_refactoring: { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; } <s> public float getMapPixelWidth () { float enzouetxaeesbftnmwsv = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; return enzouetxaeesbftnmwsv ; } <s> Projectile collision bug fixed.
fix_before_refactoring: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
fix_after_refactoring: { return ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( levelScale ) ; }
× fix_prediction_before: { float mapPixelWidth = ( ( getMapWidth () ) * ( getMapTileWidth () ) ) * ( getMapWidth () ) ; return mapPixelWidth ; }
× fix_prediction_after: { return ( getMapTileWidth ( level ) ) * ( getMapTileWidth () ) ; }

line_index: 76
bug_before_refactoring: { int handId = rand . nextInt ( 3 ) ; java.lang.System.out . println ( ( "Computer plays " + handId ) ) ; int handError = setHandFromId ( handId ) ; if ( handError != 0 ) { java.lang.System.out . println ( "This should be an exception!" ) ; } } <s> public void playHand () { int handId = rand . nextInt ( 3 ) ; java.lang.System.out . println ( ( "Computer plays " + handId ) ) ; int handError = setHandFromId ( handId ) ; if ( handError != 0 ) { java.lang.System.out . println ( "This should be an exception!" ) ; } } <s> Fixed null pointer error and modified Hand enumeration structure.
bug_after_refactoring: { int uslsisowimuvfpvhhtxm = rand . nextInt ( 3 ) ; java.lang.System.out . println ( ( "Computer plays " + uslsisowimuvfpvhhtxm ) ) ; int ncvebjygqxdmlyanpqou = setHandFromId ( uslsisowimuvfpvhhtxm ) ; if ( ncvebjygqxdmlyanpqou != 0 ) { java.lang.System.out . println ( "This should be an exception!" ) ; } } <s> public void playHand () { int uslsisowimuvfpvhhtxm = rand . nextInt ( 3 ) ; java.lang.System.out . println ( ( "Computer plays " + uslsisowimuvfpvhhtxm ) ) ; int ncvebjygqxdmlyanpqou = setHandFromId ( uslsisowimuvfpvhhtxm ) ; if ( ncvebjygqxdmlyanpqou != 0 ) { java.lang.System.out . println ( "This should be an exception!" ) ; } } <s> Fixed null pointer error and modified Hand enumeration structure.
fix_before_refactoring: { int handId = ( rand . nextInt ( 3 ) ) + 1 ; int handError = setHandFromId ( handId ) ; if ( handError != 0 ) { java.lang.System.out . println ( "This should be an exception!" ) ; } }
fix_after_refactoring: { int uslsisowimuvfpvhhtxm = ( rand . nextInt ( 3 ) ) + 1 ; int ncvebjygqxdmlyanpqou = setHandFromId ( uslsisowimuvfpvhhtxm ) ; if ( ncvebjygqxdmlyanpqou != 0 ) { java.lang.System.out . println ( "This should be an exception!" ) ; } }
× fix_prediction_before: { int handId = rand ; if ( ( hand ) != null ) { java.lang.System.out . println ( ( "This handId " + handId ) ) ; handId = 0 ; } }
× fix_prediction_after: { int uslsowqimuvhuv , rand ) ; if ( rand ) { java.lang.System.out . println ( ( ( "This us " + ( us.mowqbjhqf.pqygim ) ) + ( us ) ) ) ; } }

line_index: 77
bug_before_refactoring: { long time = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> @ java.lang.Override protected void doPaint ( java.awt.Graphics g ) { long time = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> Bugfix
bug_after_refactoring: { long lgcnelaizwjihbbpinaa = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> @ java.lang.Override protected void doPaint ( java.awt.Graphics g ) { long lgcnelaizwjihbbpinaa = java.lang.System . currentTimeMillis () ; drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; } <s> Bugfix
fix_before_refactoring: { drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; }
fix_after_refactoring: { drawMapElements ( g ) ; drawBuildings ( g ) ; drawOtherTrainers ( g ) ; drawTrainer ( g ) ; }
× fix_prediction_before: { long time = java.lang.System . currentTimeMillis () ; drawBuild ( g ) ; drawTrain ( g ) ; drawTrainerers ( g ) ; drawPaint ( g ) ; }
× fix_prediction_after: { long g = java.lang.System . currentTimeMillis () ; drawTrainRead ( g ) ; drawElements ( g ) ; drawBuilders ( g ) ; }

line_index: 78
bug_before_refactoring: roll = value . nextInt ( 10 ) <s> public int roll () { int roll = value . nextInt ( 10 ) ; return roll ; } <s> fixed the same tedious error from the 10 system
bug_after_refactoring: hnwtipaodnibqhhljgig = value . nextInt ( 10 ) <s> public int roll () { int hnwtipaodnibqhhljgig = value . nextInt ( 10 ) ; return roll ; } <s> fixed the same tedious error from the 10 system
fix_before_refactoring: roll = ( value . nextInt ( 10 ) ) + 1
fix_after_refactoring: hnwtipaodnibqhhljgig = ( value . nextInt ( 10 ) ) + 1
× fix_prediction_before: this . roll = ( roll ) + 10
× fix_prediction_after: hnwaodibnq = ( ( int ) ( value ) ) + 1

line_index: 79
bug_before_refactoring: while ( ( i = pkgName . indexOf ( "." , i ) ) < ( - 1 ) ) { cnt ++ ; } <s> private static int packageDepth ( java.lang.String pkgName ) { int cnt = 0 ; int i = 0 ; while ( ( i = pkgName . indexOf ( "." , i ) ) < ( - 1 ) ) { cnt ++ ; } return cnt ; } <s> Fix the problem that BasePackageDetector detects wrong package
bug_after_refactoring: while ( ( xjviarzdqojyqjhxymya = pkgName . indexOf ( "." , xjviarzdqojyqjhxymya ) ) < ( - 1 ) ) { yuxmvqivibnbusjmqaze ++ ; } <s> private static int packageDepth ( java.lang.String pkgName ) { int cnt = 0 ; int i = 0 ; while ( ( xjviarzdqojyqjhxymya = pkgName . indexOf ( "." , xjviarzdqojyqjhxymya ) ) < ( - 1 ) ) { yuxmvqivibnbusjmqaze ++ ; } return cnt ; } <s> Fix the problem that BasePackageDetector detects wrong package
fix_before_refactoring: while ( ( i = pkgName . indexOf ( "." , i ) ) == ( - 1 ) ) { cnt ++ ; }
fix_after_refactoring: while ( ( xjviarzdqojyqjhxymya = pkgName . indexOf ( "." , xjviarzdqojyqjhxymya ) ) == ( - 1 ) ) { yuxmvqivibnbusjmqaze ++ ; }
× fix_prediction_before: while ( i < ( pkgName . indexOf ( "." ) ) || ( i >= 0 ) ) { i = packageName . indexOf ( "." ) ; }
× fix_prediction_after: while ( ( xjvi < 0 ) || ( x == ( - 1 ) ) ) { return 0 ; }

line_index: 81
bug_before_refactoring: { java.lang.System.out . println ( "Enter the number of teaspoons:" ) ; java.lang.String teaspoon = getInput () ; int Teaspoon = java.lang.Integer . parseInt ( teaspoon ) ; citbyui.cit260.theHunt2.view.PuzzleTeaspoon . calcHalfGallon () ; double quantity ; java.lang.String units ; } <s> private void teaspoon () { java.lang.System.out . println ( "Enter the number of teaspoons:" ) ; java.lang.String teaspoon = getInput () ; int Teaspoon = java.lang.Integer . parseInt ( teaspoon ) ; citbyui.cit260.theHunt2.view.PuzzleTeaspoon . calcHalfGallon () ; double quantity ; java.lang.String units ; } <s> 3/5/16- error fixes to HalfGallonPuzzle
bug_after_refactoring: { java.lang.System.out . println ( "Enter the number of teaspoons:" ) ; java.lang.String teaspoon = getInput () ; int sknolfgxxykmvosiryin = java.lang.Integer . parseInt ( teaspoon ) ; citbyui.cit260.theHunt2.view.PuzzleTeaspoon . calcHalfGallon () ; double eldjrjpoxvtcczboemhw ; java.lang.String units ; } <s> private void teaspoon () { java.lang.System.out . println ( "Enter the number of teaspoons:" ) ; java.lang.String teaspoon = getInput () ; int sknolfgxxykmvosiryin = java.lang.Integer . parseInt ( teaspoon ) ; citbyui.cit260.theHunt2.view.PuzzleTeaspoon . calcHalfGallon () ; double eldjrjpoxvtcczboemhw ; java.lang.String units ; } <s> 3/5/16- error fixes to HalfGallonPuzzle
fix_before_refactoring: { java.lang.String teaspoon = getInput () ; int Teaspoon = java.lang.Integer . parseInt ( teaspoon ) ; }
fix_after_refactoring: { java.lang.String teaspoon = getInput () ; int sknolfgxxykmvosiryin = java.lang.Integer . parseInt ( teaspoon ) ; }
× fix_prediction_before: { java.lang.String te = "Enter the te of the teonaspons:" ; java.lang.String te = 3 ; java.lang.String units = te . getInput () ; units2.cuzzonasp.view.Puzzon . getInput () ; java.lang.System.out . println ( te ) ; }
× fix_prediction_after: { java.lang.System.out . println ( "Enter te the te of the teaspons:" ) ; java.lang.String te = java.lang.Integer . parseInt ( skaspinnasp.cccxasp.ui.GitosEnter ) ; units2.cuzzx = java.lang.Integer . parseInt ( te ) ; units . getInput () ; }

line_index: 82
bug_before_refactoring: long newCRC = lznp.util.FileIO . getCRC32 ( outStream ) ; <s> private void checkCRC32 () { long newCRC = lznp.util.FileIO . getCRC32 ( outStream ) ; if ( ( origCRC32 ) != newCRC ) throw new lznp.exception.InvalidChecksumException ( "Error in decompressing file or corrupted file." ) ; } <s> 4th commit fixed crc32 bug and out of bounds bug
bug_after_refactoring: long iloeeowhevvytvmidcjg = lznp.util.FileIO . getCRC32 ( outStream ) ; <s> private void checkCRC32 () { long iloeeowhevvytvmidcjg = lznp.util.FileIO . getCRC32 ( outStream ) ; if ( ( origCRC32 ) != newCRC ) throw new lznp.exception.InvalidChecksumException ( "Error in decompressing file or corrupted file." ) ; } <s> 4th commit fixed crc32 bug and out of bounds bug
fix_before_refactoring: int newCRC = ( ( int ) ( ( lznp.util.FileIO . getCRC32 ( outStream ) ) & - 1 ) ) ;
fix_after_refactoring: int iloeeowhevvytvmidcjg = ( ( int ) ( ( lznp.util.FileIO . getCRC32 ( outStream ) ) & - 1 ) ) ;
× fix_prediction_before: double newCRC = ( this . getC32File ( origFile ) ) ;
× fix_prediction_after: long iloeeowhevtvm.gnpjnp.util.FileIO . getCRCFile ( i ) ;

line_index: 83
bug_before_refactoring: public void setChestAngularControlOnly () { boolean [] controlledPositionAxes = new boolean [] { false , false , false } ; boolean [] controlledOrientationAxes = new boolean [] { true , true , true } ; setChestControlledAxes ( controlledPositionAxes , controlledOrientationAxes ) ; } <s> public void setChestAngularControlOnly () { boolean [] controlledPositionAxes = new boolean [] { false , false , false } ; boolean [] controlledOrientationAxes = new boolean [] { true , true , true } ; setChestControlledAxes ( controlledPositionAxes , controlledOrientationAxes ) ; } <s> Fixed bug in the creation of hand matrices for linear and angular control.
bug_after_refactoring: public void setChestAngularControlOnly () { boolean [] vmzsuuqrosvtczyymuqu = new boolean [] { false , false , false } ; boolean [] mlsocajgkzkgupdgzgsa = new boolean [] { true , true , true } ; setChestControlledAxes ( vmzsuuqrosvtczyymuqu , mlsocajgkzkgupdgzgsa ) ; } <s> public void setChestAngularControlOnly () { boolean [] vmzsuuqrosvtczyymuqu = new boolean [] { false , false , false } ; boolean [] mlsocajgkzkgupdgzgsa = new boolean [] { true , true , true } ; setChestControlledAxes ( vmzsuuqrosvtczyymuqu , mlsocajgkzkgupdgzgsa ) ; } <s> Fixed bug in the creation of hand matrices for linear and angular control.
fix_before_refactoring: public void setChestAngularControlOnly () { double [] controlledPositionAxes = new double [] { 0.0 , 0.0 , 0.0 } ; double [] controlledOrientationAxes = new double [] { 1.0 , 1.0 , 1.0 } ; setChestControlledAxes ( controlledPositionAxes , controlledOrientationAxes ) ; }
fix_after_refactoring: public void setChestAngularControlOnly () { double [] vmzsuuqrosvtczyymuqu = new double [] { 0.0 , 0.0 , 0.0 } ; double [] mlsocajgkzkgupdgzgsa = new double [] { 1.0 , 1.0 , 1.0 } ; setChestControlledAxes ( vmzsuuqrosvtczyymuqu , mlsocajgkzkgupdgzgsa ) ; }
× fix_prediction_before: public void setChestUpdateControlOnlyControl () { boolean [] newPosition = false ; setChestControl ( newOrientation , true , false , true , false ) ; }
× fix_prediction_after: public void setChallControlOnlyControl () { boolean [] vm = new boolean [] { true , false , true } ; setControl ( new boolean [] { true , true , false } , true ) ; }

line_index: 84
bug_before_refactoring: { int [] temp = new int [ nexts . size () ] ; return null ; } <s> public int [] solutionArray ( Maze.Frontier nexts ) { int [] temp = new int [ nexts . size () ] ; return null ; } <s> fixed some of generic issues if not most; double check to make sure
bug_after_refactoring: { int [] ovbwdnnvqwxzhjxywrod = new int [ nexts . size () ] ; return null ; } <s> public int [] solutionArray ( Maze.Frontier nexts ) { int [] ovbwdnnvqwxzhjxywrod = new int [ nexts . size () ] ; return null ; } <s> fixed some of generic issues if not most; double check to make sure
fix_before_refactoring: { return null ; }
fix_after_refactoring: { return null ; }
× fix_prediction_before: { int [] temp = new int [ size ] ; if ( next == null ) return 0 ; return null ; }
× fix_prediction_after: { int [] o = new int [ size ] ; if ( next == null ) { return 0 ; } return new int [ size ] ; }

line_index: 85
bug_before_refactoring: @ java.lang.Override public long refill ( long limit , long available ) { final long now = org.apache.hadoop.hbase.util.EnvironmentEdgeManager . currentTime () ; if ( now < ( nextRefillTime ) ) { return 0 ; } nextRefillTime = now + ( super . getTimeUnitInMillis () ) ; return limit ; } <s> @ java.lang.Override public long refill ( long limit , long available ) { final long now = org.apache.hadoop.hbase.util.EnvironmentEdgeManager . currentTime () ; if ( now < ( nextRefillTime ) ) { return 0 ; } nextRefillTime = now + ( super . getTimeUnitInMillis () ) ; return limit ; } <s> HBASE-13888 Fix refill bug from HBASE-13686 (Guanghao Zhang)
bug_after_refactoring: @ java.lang.Override public long refill ( long limit , long available ) { final long zlozuxehetggkzlfbjfj = org.apache.hadoop.hbase.util.EnvironmentEdgeManager . currentTime () ; if ( zlozuxehetggkzlfbjfj < ( nextRefillTime ) ) { return 0 ; } nextRefillTime = zlozuxehetggkzlfbjfj + ( super . getTimeUnitInMillis () ) ; return limit ; } <s> @ java.lang.Override public long refill ( long limit , long available ) { final long zlozuxehetggkzlfbjfj = org.apache.hadoop.hbase.util.EnvironmentEdgeManager . currentTime () ; if ( zlozuxehetggkzlfbjfj < ( nextRefillTime ) ) { return 0 ; } nextRefillTime = zlozuxehetggkzlfbjfj + ( super . getTimeUnitInMillis () ) ; return limit ; } <s> HBASE-13888 Fix refill bug from HBASE-13686 (Guanghao Zhang)
fix_before_refactoring: @ java.lang.Override public long refill ( long limit ) { final long now = org.apache.hadoop.hbase.util.EnvironmentEdgeManager . currentTime () ; if ( now < ( nextRefillTime ) ) { return 0 ; } nextRefillTime = now + ( super . getTimeUnitInMillis () ) ; return limit ; }
fix_after_refactoring: @ java.lang.Override public long refill ( long limit ) { final long zlozuxehetggkzlfbjfj = org.apache.hadoop.hbase.util.EnvironmentEdgeManager . currentTime () ; if ( zlozuxehetggkzlfbjfj < ( nextRefillTime ) ) { return 0 ; } nextRefillTime = zlozuxehetggkzlfbjfj + ( super . getTimeUnitInMillis () ) ; return limit ; }
× fix_prediction_before: @ java.lang.Override public long refill ( long limit , long limit ) { final long currentTime = 0 ; if ( availableInMillis ) { final long nextTime = ( org.apache.hadoop.hill.base.util.EnvironmentManager . next () . currentTime ( now ) ) + ( nextTime ) ; return currentTime ; } return 0 ; }
× fix_prediction_after: @ java.lang.Override public long refill ( long limit , final long limit ) { final long nextTime = 0 ; if ( available ) { long z = ( org.apache.zehjl.zggetlhkjetl.hlobase.utiletlUnitManager . getTime () ) + ( nextTimeInMillis ) ; } return currentTime ; }

line_index: 86
bug_before_refactoring: core.ArcadeMachine . runOneGame ( game_file , level_file , visuals , agentName , actionFile , randomSeed ) <s> public static double playOneGame ( java.lang.String game_file , java.lang.String level_file , java.lang.String actionFile , int randomSeed ) { java.lang.String agentName = "controllers.human.Agent" ; boolean visuals = true ; return core.ArcadeMachine . runOneGame ( game_file , level_file , visuals , agentName , actionFile , randomSeed ) ; } <s> bug fix in gymkhana  avatar needs to be oriented. Start/End window only appears if a human is playing now.
bug_after_refactoring: core.ArcadeMachine . runOneGame ( game_file , level_file , tuiabgxoajakshqaprdj , agentName , actionFile , randomSeed ) <s> public static double playOneGame ( java.lang.String game_file , java.lang.String level_file , java.lang.String actionFile , int randomSeed ) { java.lang.String agentName = "controllers.human.Agent" ; boolean visuals = true ; return core.ArcadeMachine . runOneGame ( game_file , level_file , tuiabgxoajakshqaprdj , agentName , actionFile , randomSeed ) ; } <s> bug fix in gymkhana  avatar needs to be oriented. Start/End window only appears if a human is playing now.
fix_before_refactoring: core.ArcadeMachine . runOneGame ( game_file , level_file , visuals , agentName , actionFile , randomSeed , true )
fix_after_refactoring: core.ArcadeMachine . runOneGame ( game_file , level_file , tuiabgxoajakshqaprdj , agentName , actionFile , randomSeed , true )
× fix_prediction_before: core.ArcadeMachine . runOneGame ( gamefile , visuals , agentName , levelFile , levelName , levelFile , levelName )
× fix_prediction_after: core.ArcadeMachine . runGame ( gamefile , gamefile , levelName , levelFile , levelName , levelFile )

line_index: 87
bug_before_refactoring: @ java.lang.Override public org.w3c.dom.Node getParentNode () { final int parent = document.attrParent [ nodeNumber ] ; if ( parent > 0 ) { return document . getNode ( parent ) ; } return null ; } <s> @ java.lang.Override public org.w3c.dom.Node getParentNode () { final int parent = document.attrParent [ nodeNumber ] ; if ( parent > 0 ) { return document . getNode ( parent ) ; } return null ; } <s> [bugfix] Attr#getParentNode must return null
bug_after_refactoring: @ java.lang.Override public org.w3c.dom.Node getParentNode () { final int zfweajrczudikppwmwny = document.attrParent [ nodeNumber ] ; if ( zfweajrczudikppwmwny > 0 ) { return document . getNode ( zfweajrczudikppwmwny ) ; } return null ; } <s> @ java.lang.Override public org.w3c.dom.Node getParentNode () { final int zfweajrczudikppwmwny = document.attrParent [ nodeNumber ] ; if ( zfweajrczudikppwmwny > 0 ) { return document . getNode ( zfweajrczudikppwmwny ) ; } return null ; } <s> [bugfix] Attr#getParentNode must return null
fix_before_refactoring: @ java.lang.Override public org.w3c.dom.Node getParentNode () { return null ; }
fix_after_refactoring: @ java.lang.Override public org.w3c.dom.Node getParentNode () { return null ; }
× fix_prediction_before: @ java.lang.Override public org.w3c.dom.Node < org.w3c.dom.Node > getParent () { final int parent = documentNumber ; if ( ( parent ) > 0 ) { return parent . getNode ( parent ) ; } return null ; }
× fix_prediction_after: @ java.lang.Override public org.w3c.dom.Node < final int > getParentNode () { return getNode ( document ) ; }

line_index: 88
bug_before_refactoring: { double percents = 0 ; percents = ( actual / planned ) * 100 ; return percents ; } <s> private double calculatePercentage ( double planned , double actual ) { double percents = 0 ; percents = ( actual / planned ) * 100 ; return percents ; } <s> New category bug fix  При нова категория  се дефинира бюджетен план  за нея.
bug_after_refactoring: { double yrrtvfnkyoadavzmvifg = 0 ; yrrtvfnkyoadavzmvifg = ( actual / planned ) * 100 ; return yrrtvfnkyoadavzmvifg ; } <s> private double calculatePercentage ( double planned , double actual ) { double yrrtvfnkyoadavzmvifg = 0 ; yrrtvfnkyoadavzmvifg = ( actual / planned ) * 100 ; return yrrtvfnkyoadavzmvifg ; } <s> New category bug fix  При нова категория  се дефинира бюджетен план  за нея.
fix_before_refactoring: { double percents = 0 ; if ( planned != 0 ) { percents = ( actual / planned ) * 100 ; } else { percents = 100 ; } return percents ; }
fix_after_refactoring: { double yrrtvfnkyoadavzmvifg = 0 ; if ( planned != 0 ) { yrrtvfnkyoadavzmvifg = ( actual / planned ) * 100 ; } else { yrrtvfnkyoadavzmvifg = 100 ; } return yrrtvfnkyoadavzmvifg ; }
× fix_prediction_before: { double percent = 0 ; percent = ( percent ) / 100 ; return percent ; }
× fix_prediction_after: { double y = 1 ; yrrtkyoad = yzravz.gifelvoadoad = 0 ; return ( ( double ) ( actual ) ) / 100 ; }

line_index: 91
bug_before_refactoring: org.junit.Assert . assertEquals ( 2971215073L , ( a + b ) ) <s> @ org.junit.Test public void longAdditionWorks () { long a = 1134903170 ; long b = 1836311903 ; org.junit.Assert . assertEquals ( 2971215073L , ( a + b ) ) ; } <s> Fix metaprogramming bugs
bug_after_refactoring: org.junit.Assert . assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) ) <s> @ org.junit.Test public void longAdditionWorks () { long a = 1134903170 ; long b = 1836311903 ; org.junit.Assert . assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) ) ; } <s> Fix metaprogramming bugs
fix_before_refactoring: assertEquals ( 2971215073L , ( a + b ) )
fix_after_refactoring: assertEquals ( 2971215073L , ( tfcworlfeukcwlmyhyco + lzfncqcmtijejzzwxtic ) )
× fix_prediction_before: org.junit.Assert . assertEquals ( 2 , a )
× fix_prediction_after: org.junit.Assert . assertEquals ( 1L , tf12L )

line_index: 92
bug_before_refactoring: boolean runCheck () { double r = java.util.concurrent.ThreadLocalRandom . current () . nextDouble () ; return ( chance ) > r ; } <s> boolean runCheck () { double r = java.util.concurrent.ThreadLocalRandom . current () . nextDouble () ; return ( chance ) > r ; } <s> fixed livelock issue  and replaced random with something 1.6 compatible
bug_after_refactoring: boolean runCheck () { double crqvayylkavhtmlasjjq = java.util.concucrqvayylkavhtmlasjjqrent.ThreadLocalRandom . current () . nextDouble () ; return ( chance ) > crqvayylkavhtmlasjjq ; } <s> boolean runCheck () { double crqvayylkavhtmlasjjq = java.util.concucrqvayylkavhtmlasjjqrent.ThreadLocalRandom . current () . nextDouble () ; return ( chance ) > crqvayylkavhtmlasjjq ; } <s> fixed livelock issue  and replaced random with something 1.6 compatible
fix_before_refactoring: boolean runCheck () { double r = java.lang.Math . random () ; return ( chance ) > r ; }
fix_after_refactoring: boolean runCheck () { double crqvayylkavhtmlasjjq = java.lang.Math . random () ; return ( chance ) > crqvayylkavhtmlasjjq ; }
× fix_prediction_before: boolean runCheck () { double r = currentLocal () . nextDouble () ; return ( java.util.concurrent.ThreadLocalRandom . random () ) > ( r . nextDouble () ) ; }
× fix_prediction_after: boolean runCheckCheck ( ) ;

line_index: 93
bug_before_refactoring: { int id = applyRepository . create ( apply ) ; return id ; } <s> @ com.funliving.info.resource.PUT @ com.funliving.info.resource.Path ( value = "apply" ) @ com.funliving.info.resource.Consumes ( value = javax.ws.rs.core.MediaType.APPLICATION_FORM_URLENCODED ) @ com.funliving.info.resource.Produces ( value = "text/plain" ) public int createApply ( @ com.funliving.info.resource.BeanParam com.funliving.info.repository.entity.Apply apply ) { int id = applyRepository . create ( apply ) ; return id ; } <s> fix a bug for create appy or schedule
bug_after_refactoring: { int mobyepvotvnfydxfmybg = applyRepository . create ( apply ) ; return mobyepvotvnfydxfmybg ; } <s> @ com.funliving.info.resource.PUT @ com.funliving.info.resource.Path ( value = "apply" ) @ com.funliving.info.resource.Consumes ( value = javax.ws.rs.core.MediaType.APPLICATION_FORM_URLENCODED ) @ com.funliving.info.resource.Produces ( value = "text/plain" ) public int createApply ( @ com.funliving.info.resource.BeanParam com.funliving.info.repository.entity.Apply apply ) { int mobyepvotvnfydxfmybg = applyRepository . create ( apply ) ; return mobyepvotvnfydxfmybg ; } <s> fix a bug for create appy or schedule
fix_before_refactoring: { applyRepository . create ( apply ) ; return apply . getId () ; }
fix_after_refactoring: { applyRepository . create ( apply ) ; return apply . getId () ; }
× fix_prediction_before: { int id = applyRepository . create ( id ) ; return create ( schedule ) ; }
× fix_prediction_after: { int applyy = mob . apply ( createRepository ( mob ) ) ; return mob [ 0 ] ; }

line_index: 94
bug_before_refactoring: private double calculatePrice ( double num ) { double givprice = ( quantity ) * 3.24 ; return givprice ; } <s> private double calculatePrice ( double num ) { double givprice = ( quantity ) * 3.24 ; return givprice ; } <s> -fix landscape layout view and run -fix issues with potrait view  by aligning the price  on the potrait view -removes price
bug_after_refactoring: private double calculatePrice ( double num ) { double xppivssfzwipehkmueot = ( quantity ) * 3.24 ; return xppivssfzwipehkmueot ; } <s> private double calculatePrice ( double num ) { double xppivssfzwipehkmueot = ( quantity ) * 3.24 ; return xppivssfzwipehkmueot ; } <s> -fix landscape layout view and run -fix issues with potrait view  by aligning the price  on the potrait view -removes price
fix_before_refactoring: private double calculatePrice ( double num ) { num = ( quantity ) * 3.24 ; return num ; }
fix_after_refactoring: private double calculatePrice ( double num ) { num = ( quantity ) * 3.24 ; return num ; }
× fix_prediction_before: public double calculatePrice ( double num ) { return num * ( ( double ) ( quantity ) ) ; }
× fix_prediction_after: public double calculatePrice ( double numpp ) { if ( ( quantity ) < 0 ) { return 0 ; } else { double x = ( quantity ) * ( quantity ) ; return xwf * ( viewivppuewipe ) ; } }

line_index: 95
bug_before_refactoring: public int collectUserOption ( java.lang.String question ) { int response = 0 ; response = javax.swing.JOptionPane . showConfirmDialog ( null , displayText , windowMessage , javax.swing.JOptionPane.PLAIN_MESSAGE , chatIcon ) ; return response ; } <s> public int collectUserOption ( java.lang.String question ) { int response = 0 ; response = javax.swing.JOptionPane . showConfirmDialog ( null , displayText , windowMessage , javax.swing.JOptionPane.PLAIN_MESSAGE , chatIcon ) ; return response ; } <s> Fixed bugs
bug_after_refactoring: public int collectUserOption ( java.lang.String question ) { int dgpcntlvpixqkjzugbqp = 0 ; dgpcntlvpixqkjzugbqp = javax.swing.JOptionPane . showConfirmDialog ( null , displayText , windowMessage , javax.swing.JOptionPane.PLAIN_MESSAGE , chatIcon ) ; return dgpcntlvpixqkjzugbqp ; } <s> public int collectUserOption ( java.lang.String question ) { int dgpcntlvpixqkjzugbqp = 0 ; dgpcntlvpixqkjzugbqp = javax.swing.JOptionPane . showConfirmDialog ( null , displayText , windowMessage , javax.swing.JOptionPane.PLAIN_MESSAGE , chatIcon ) ; return dgpcntlvpixqkjzugbqp ; } <s> Fixed bugs
fix_before_refactoring: public int collectUserOption ( java.lang.String question ) { int response = 0 ; response = javax.swing.JOptionPane . showConfirmDialog ( null , question , windowMessage , javax.swing.JOptionPane.PLAIN_MESSAGE , javax.swing.JOptionPane.PLAIN_MESSAGE , chatIcon ) ; return response ; }
fix_after_refactoring: public int collectUserOption ( java.lang.String question ) { int dgpcntlvpixqkjzugbqp = 0 ; dgpcntlvpixqkjzugbqp = javax.swing.JOptionPane . showConfirmDialog ( null , question , windowMessage , javax.swing.JOptionPane.PLAIN_MESSAGE , javax.swing.JOptionPane.PLAIN_MESSAGE , chatIcon ) ; return dgpcntlvpixqkjzugbqp ; }
× fix_prediction_before: public int collectUserOption ( java.lang.String question ) { int show = 0 ; javax.swing.JOptionPane . collectOptionDialog ( window , 0 , response ) ; return displayText ; }
× fix_prediction_after: public int collectUserOption ( java.lang.String question ) { int show = 0 ; return javax.swing.JOptionPane . collectOptionDialog ( window , 0 , javax.swing.JOptionPane.jpcPLAIN_MESSAGE ) ; }

line_index: 96
bug_before_refactoring: public void setRadii ( byte radii ) { byte before = this . radii ; this . radii = radii ; if ( before != ( this . radii ) ) { forceChunkLoading ( null ) ; forceChunkLoading ( null ) ; } } <s> public void setRadii ( byte radii ) { byte before = this . radii ; this . radii = radii ; if ( before != ( this . radii ) ) { forceChunkLoading ( null ) ; forceChunkLoading ( null ) ; } } <s> - Fix minor sync issues
bug_after_refactoring: public void setRadii ( byte radii ) { byte rhuakvfgnknohadxzzre = this . radii ; this . radii = radii ; if ( rhuakvfgnknohadxzzre != ( this . radii ) ) { forceChunkLoading ( null ) ; forceChunkLoading ( null ) ; } } <s> public void setRadii ( byte radii ) { byte rhuakvfgnknohadxzzre = this . radii ; this . radii = radii ; if ( rhuakvfgnknohadxzzre != ( this . radii ) ) { forceChunkLoading ( null ) ; forceChunkLoading ( null ) ; } } <s> - Fix minor sync issues
fix_before_refactoring: public void setRadii ( byte radii ) { this . radii = radii ; }
fix_after_refactoring: public void setRadii ( byte radii ) { this . radii = radii ; }
× fix_prediction_before: public void setRadii ( byte radii ) { this . radii = rad ; }
× fix_prediction_after: public void setRadii ( byte rad ) { this . radakhii = rad ; this . radakreii = rad ; }

line_index: 98
bug_before_refactoring: { super . reset () ; path = new java.util.ArrayList < Agents.Node > () ; nodes = new java.util.HashMap < Agents.Node , Agents.Node > () ; pathNotCreatedYet = true ; int searchSteps = 0 ; int movementSteps = 0 ; } <s> public void reset () { super . reset () ; path = new java.util.ArrayList < Agents.Node > () ; nodes = new java.util.HashMap < Agents.Node , Agents.Node > () ; pathNotCreatedYet = true ; int searchSteps = 0 ; int movementSteps = 0 ; } <s> Fixed a minor error in UninformedSearchAgent.java. Started working on UniformCostSearchAgent.java
bug_after_refactoring: { super . reset () ; path = new java.util.ArrayList < Agents.Node > () ; nodes = new java.util.HashMap < Agents.Node , Agents.Node > () ; pathNotCreatedYet = true ; int ojmtxkvwhpqcdykxxmbj = 0 ; int fflyrdzcevrbssnolkwn = 0 ; } <s> public void reset () { super . reset () ; path = new java.util.ArrayList < Agents.Node > () ; nodes = new java.util.HashMap < Agents.Node , Agents.Node > () ; pathNotCreatedYet = true ; int ojmtxkvwhpqcdykxxmbj = 0 ; int fflyrdzcevrbssnolkwn = 0 ; } <s> Fixed a minor error in UninformedSearchAgent.java. Started working on UniformCostSearchAgent.java
fix_before_refactoring: { super . reset () ; path = new java.util.ArrayList < Agents.Node > () ; nodes = new java.util.HashMap < Agents.Node , Agents.Node > () ; pathNotCreatedYet = true ; searchSteps = 0 ; movementSteps = 0 ; }
fix_after_refactoring: { super . reset () ; path = new java.util.ArrayList < Agents.Node > () ; nodes = new java.util.HashMap < Agents.Node , Agents.Node > () ; pathNotCreatedYet = true ; ojmtxkvwhpqcdykxxmbj = 0 ; fflyrdzcevrbssnolkwn = 0 ; }
× fix_prediction_before: { super . reset () ; path = new java.util.ArrayList <> () ; movements = 0 ; searchNode = new java.util.HashMap <> () ; }
× fix_prediction_after: { super . reset () ; path = new java.util.ArrayList <> () ; resetNodeAgent () ; nodes = true ; }

line_index: 99
bug_before_refactoring: { double diff = ( this . sim ) - ( o.sim ) ; if ( diff < 0 ) return - 1 ; return diff == 0.0 ? 0 : 1 ; } <s> public int compareTo ( edu.ucla.sspace.clustering.AverageLinkAgglomerativeClustering.Link o ) { double diff = ( this . sim ) - ( o.sim ) ; if ( diff < 0 ) return - 1 ; return diff == 0.0 ? 0 : 1 ; } <s> Fixing an ordering bug in average link HAC
bug_after_refactoring: { double mwmcirtruxelirluannd = ( this . sim ) - ( o.sim ) ; if ( mwmcirtruxelirluannd < 0 ) return - 1 ; return mwmcirtruxelirluannd == 0.0 ? 0 : 1 ; } <s> public int compareTo ( edu.ucla.sspace.clustering.AverageLinkAgglomerativeClustering.Link o ) { double mwmcirtruxelirluannd = ( this . sim ) - ( o.sim ) ; if ( mwmcirtruxelirluannd < 0 ) return - 1 ; return mwmcirtruxelirluannd == 0.0 ? 0 : 1 ; } <s> Fixing an ordering bug in average link HAC
fix_before_refactoring: { double diff = ( this . sim ) - ( o.sim ) ; if ( diff < 0 ) return 1 ; return diff == 0.0 ? 0 : - 1 ; }
fix_after_refactoring: { double mwmcirtruxelirluannd = ( this . sim ) - ( o.sim ) ; if ( mwmcirtruxelirluannd < 0 ) return 1 ; return mwmcirtruxelirluannd == 0.0 ? 0 : - 1 ; }
× fix_prediction_before: { double diff = ( this . sim ) - ( o.sim ) ; if ( diff == 0 ) return 0 ; return diff [ ( diff - 1 ) ] ; }
× fix_prediction_after: { double mwmctrirux = ( this . simlux ) - 1 ; if ( ( this . mw ) == ( - 1 ) ) return 0 ; return 1 ; }

line_index: 100
bug_before_refactoring: private int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; } <s> private int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; } <s> Fixed a serious error with the bank and getting the count of dev cards  Accidentally accessed the resources array rather than the real array
bug_after_refactoring: private int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; } <s> private int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; } <s> Fixed a serious error with the bank and getting the count of dev cards  Accidentally accessed the resources array rather than the real array
fix_before_refactoring: public int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { total += this . devCards [ i ] ; } return total ; }
fix_after_refactoring: public int getDevCardCount () { int hiqvqxfmypikptqvbjcv = 0 ; for ( int i = 0 ; i < ( this . numberDevCardTypes ) ; i ++ ) { hiqvqxfmypikptqvbjcv += this . devCards [ i ] ; } return hiqvqxfmypikptqvbjcv ; }
× fix_prediction_before: private int getDevCardCount () { int total = 0 ; for ( int i = 0 ; i < ( this . totalDev ) ; i ++ ) { this . totalCards += i ; } return i ; }
× fix_prediction_after: public int getDevCardCount () { int hiqvikcv = 0 ; for ( int i = 0 ; i < ( this . count ) ; i ++ ) { this . firstCardCardsvikpt [ i ] ; } return i ; }

line_index: 101
bug_before_refactoring: @ java.lang.Override public synchronized void clientDidDisconnect ( com.tc.net.ClientID client ) { boolean isBroken = true ; if ( ! isBroken ) { com.tc.util.Assert . assertTrue ( this . connectedClients . contains ( client ) ) ; } this . connectedClients . remove ( client ) ; } <s> @ java.lang.Override public synchronized void clientDidDisconnect ( com.tc.net.ClientID client ) { boolean isBroken = true ; if ( ! isBroken ) { com.tc.util.Assert . assertTrue ( this . connectedClients . contains ( client ) ) ; } this . connectedClients . remove ( client ) ; } <s> Fix #28: Moved ITopologyEventCollector client callsites to channel methods  -this avoids the problem where the events would also be called for the replicated information  on the passive -we can also now re-enable the assertions to verify event call symmetry in ManagementTopologyEventCollector
bug_after_refactoring: @ java.lang.Override public synchronized void clientDidDisconnect ( com.tc.net.ClientID client ) { boolean syqahkourhlffqtevpjm = true ; if ( ! syqahkourhlffqtevpjm ) { com.tc.util.Assert . assertTrue ( this . connectedClients . contains ( client ) ) ; } this . connectedClients . remove ( client ) ; } <s> @ java.lang.Override public synchronized void clientDidDisconnect ( com.tc.net.ClientID client ) { boolean syqahkourhlffqtevpjm = true ; if ( ! syqahkourhlffqtevpjm ) { com.tc.util.Assert . assertTrue ( this . connectedClients . contains ( client ) ) ; } this . connectedClients . remove ( client ) ; } <s> Fix #28: Moved ITopologyEventCollector client callsites to channel methods  -this avoids the problem where the events would also be called for the replicated information  on the passive -we can also now re-enable the assertions to verify event call symmetry in ManagementTopologyEventCollector
fix_before_refactoring: @ java.lang.Override public synchronized void clientDidDisconnect ( com.tc.net.ClientID client ) { com.tc.util.Assert . assertTrue ( this . connectedClients . contains ( client ) ) ; this . connectedClients . remove ( client ) ; }
fix_after_refactoring: @ java.lang.Override public synchronized void clientDidDisconnect ( com.tc.net.ClientID client ) { com.tc.util.Assert . assertTrue ( this . connectedClients . contains ( client ) ) ; this . connectedClients . remove ( client ) ; }
× fix_prediction_before: @ java.lang.Override public synchronized void clientDisconnect ( com.tc.netken.Broken client ) { if ( ! ( isBroken ) ) { this . clientClients . remove ( client ) ; } }
× fix_prediction_after: @ java.lang.Override public synchronized void clientDisconnect ( com.nettc.ktc.jteahourites.Clients client ) { if ( ! ( this . connectedClients . contains ( client ) ) ) { this . removeClients ( client ) ; } }

line_index: 102
bug_before_refactoring: { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return res ; } <s> public static boolean isButtonReleased ( int keycode ) { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return res ; } <s> Fixed a bug in the main menu when only the play button was clickable. Sometimes when multiple objects checked if the mouse was released only on the first time the mouse would actually be released. Caused in the main menu that only the play button worked. <bug
bug_after_refactoring: { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return iknlhumhvibniaixlpkv ; } <s> public static boolean isButtonReleased ( int keycode ) { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; utillities.Mouse.releasedButtons [ keycode ] = false ; return iknlhumhvibniaixlpkv ; } <s> Fixed a bug in the main menu when only the play button was clickable. Sometimes when multiple objects checked if the mouse was released only on the first time the mouse would actually be released. Caused in the main menu that only the play button worked. <bug
fix_before_refactoring: { boolean res = utillities.Mouse.releasedButtons [ keycode ] ; return res ; }
fix_after_refactoring: { boolean iknlhumhvibniaixlpkv = utillities.Mouse.releasedButtons [ keycode ] ; return iknlhumhvibniaixlpkv ; }
× fix_prediction_before: { boolean resillillities = keycodeillasedMouse ( keycode ) ; return true ; }
× fix_prediction_after: { boolean i = false ; boolean [] utkhumibia = utix.viblilliapk ; ifities.MouseButtons [ i ] = keycodevumlhumia ; return false ; }

line_index: 103
bug_before_refactoring: { int totalPrice = no.europark.parkingBooking.Utility . CalculatePrice ( timeSpan , parkingPlace ) ; java.lang.System.out . println ( ( "TOT.PRICE: " + totalPrice ) ) ; addModelVariable ( "TotalPrice" , totalPrice ) ; } <s> public void setTotalPrice ( no.europark.parkingBooking.entity.TimeSpan timeSpan , no.europark.parkingBooking.entity.ParkingPlace parkingPlace ) { int totalPrice = no.europark.parkingBooking.Utility . CalculatePrice ( timeSpan , parkingPlace ) ; java.lang.System.out . println ( ( "TOT.PRICE: " + totalPrice ) ) ; addModelVariable ( "TotalPrice" , totalPrice ) ; } <s> Fixed date issue on payment page
bug_after_refactoring: { int nlcqjhamwozkznckyjnz = no.europark.parkingBooking.Utility . CalculatePrice ( timeSpan , parkingPlace ) ; java.lang.System.out . println ( ( "TOT.PRICE: " + nlcqjhamwozkznckyjnz ) ) ; addModelVariable ( "TotalPrice" , nlcqjhamwozkznckyjnz ) ; } <s> public void setTotalPrice ( no.europark.parkingBooking.entity.TimeSpan timeSpan , no.europark.parkingBooking.entity.ParkingPlace parkingPlace ) { int nlcqjhamwozkznckyjnz = no.europark.parkingBooking.Utility . CalculatePrice ( timeSpan , parkingPlace ) ; java.lang.System.out . println ( ( "TOT.PRICE: " + nlcqjhamwozkznckyjnz ) ) ; addModelVariable ( "TotalPrice" , nlcqjhamwozkznckyjnz ) ; } <s> Fixed date issue on payment page
fix_before_refactoring: { int totalPrice = no.europark.parkingBooking.Utility . CalculatePrice ( timeSpan , parkingPlace ) ; addModelVariable ( "TotalPrice" , totalPrice ) ; }
fix_after_refactoring: { int nlcqjhamwozkznckyjnz = no.europark.parkingBooking.Utility . CalculatePrice ( timeSpan , parkingPlace ) ; addModelVariable ( "TotalPrice" , nlcqjhamwozkznckyjnz ) ; }
× fix_prediction_before: { int totalPrice = no.euro.parking.Utility.BookingPrice ; if ( totalPrice >= 0 ) { totalPrice = totalPrice ; } java.lang.System.out . println ( ( "PRICE: " + ( totalPrice ) ) ) ; }
× fix_prediction_after: { int index = 1 ; nl.cqjhamwozycky.jying.Utility . noBookingPrice ( nl , ( ( nl.cqjhamcky.jyckying.entity.BookingModel ) + " ) , time ) ; }

line_index: 104
bug_before_refactoring: private int threatLevelCalculator ( int armorRating , int potionEffectRating , int EliteMobRating ) { int threatLevel = ( ( armorRating / 2 ) + potionEffectRating ) + EliteMobRating ; return threatLevel ; } <s> private int threatLevelCalculator ( int armorRating , int potionEffectRating , int EliteMobRating ) { int threatLevel = ( ( armorRating / 2 ) + potionEffectRating ) + EliteMobRating ; return threatLevel ; } <s> Version 4.1.10  - Fixed a lot of hunting set-related bugs - Streamlined the natural mob spawning process - Disabled checking for passive mobs in a radius for now - Fixed group hunting not working; hunting parties will now always spawn higher level mobs
bug_after_refactoring: private int threatLevelCalculator ( int armorRating , int potionEffectRating , int EliteMobRating ) { int yqxplukouphgcgckiind = ( ( armorRating / 2 ) + potionEffectRating ) + EliteMobRating ; return yqxplukouphgcgckiind ; } <s> private int threatLevelCalculator ( int armorRating , int potionEffectRating , int EliteMobRating ) { int yqxplukouphgcgckiind = ( ( armorRating / 2 ) + potionEffectRating ) + EliteMobRating ; return yqxplukouphgcgckiind ; } <s> Version 4.1.10  - Fixed a lot of hunting set-related bugs - Streamlined the natural mob spawning process - Disabled checking for passive mobs in a radius for now - Fixed group hunting not working; hunting parties will now always spawn higher level mobs
fix_before_refactoring: private int threatLevelCalculator ( int armorRating , int potionEffectRating ) { int threatLevel = ( armorRating / 2 ) + potionEffectRating ; return threatLevel ; }
fix_after_refactoring: private int threatLevelCalculator ( int armorRating , int potionEffectRating ) { int yqxplukouphgcgckiind = ( armorRating / 2 ) + potionEffectRating ; return yqxplukouphgcgckiind ; }
× fix_prediction_before: private int threatLevelCalculatorRating ( int armor , int porEffect , int armLevel ) { int armLevel = ( armor + 1 ) / 2 ; if ( armLevel > 0 ) { arm = porEffect + ( ( int ) ( ( armLevel / 2 ) + armLevel ) ) ; } return armLevel ; }
× fix_prediction_after: private int threatLevelCalculatorRating ( int armorRating , int p ) { return ( armorgc , 0 ) / 2 ; }

line_index: 105
bug_before_refactoring: private int pickColor ( java.lang.String key ) { final int color = ( java.lang.Math . abs ( key . hashCode () ) ) % ( com.byteshaft.contactsharing.utils.BitmapWithCharacter.NUM_OF_TILE_COLORS ) ; try { return mColors . getColor ( color , Color.BLACK ) ; } finally { mColors . recycle () ; } } <s> private int pickColor ( java.lang.String key ) { final int color = ( java.lang.Math . abs ( key . hashCode () ) ) % ( com.byteshaft.contactsharing.utils.BitmapWithCharacter.NUM_OF_TILE_COLORS ) ; try { return mColors . getColor ( color , Color.BLACK ) ; } finally { mColors . recycle () ; } } <s> fix multiple ui elements  handle condition   bug fixes
bug_after_refactoring: private int pickColor ( java.lang.String key ) { final int veopidzyehotdxogjiwo = ( java.lang.Math . abs ( key . hashCode () ) ) % ( com.byteshaft.contactsharing.utils.BitmapWithCharacter.NUM_OF_TILE_COLORS ) ; try { return mColors . getColor ( veopidzyehotdxogjiwo , Color.BLACK ) ; } finally { mColors . recycle () ; } } <s> private int pickColor ( java.lang.String key ) { final int veopidzyehotdxogjiwo = ( java.lang.Math . abs ( key . hashCode () ) ) % ( com.byteshaft.contactsharing.utils.BitmapWithCharacter.NUM_OF_TILE_COLORS ) ; try { return mColors . getColor ( veopidzyehotdxogjiwo , Color.BLACK ) ; } finally { mColors . recycle () ; } } <s> fix multiple ui elements  handle condition   bug fixes
fix_before_refactoring: public int pickColor ( java.lang.String key ) { final int color = ( java.lang.Math . abs ( key . hashCode () ) ) % ( com.byteshaft.contactsharing.utils.BitmapWithCharacter.NUM_OF_TILE_COLORS ) ; try { return mColors . getColor ( color , Color.BLACK ) ; } finally { mColors . recycle () ; } }
fix_after_refactoring: public int pickColor ( java.lang.String key ) { final int veopidzyehotdxogjiwo = ( java.lang.Math . abs ( key . hashCode () ) ) % ( com.byteshaft.contactsharing.utils.BitmapWithCharacter.NUM_OF_TILE_COLORS ) ; try { return mColors . getColor ( veopidzyehotdxogjiwo , Color.BLACK ) ; } finally { mColors . recycle () ; } }
× fix_prediction_before: private int pickColor ( java.lang.String key ) { final int color = java.lang.Math . abs ( ( ( mColors . hashCode () ) % ( com.byteshaft.contact.utils.Bitmap.BLACK_TILE_NUM ) ) ) ; return color ; }
× fix_prediction_after: private int pickColor ( final java.lang.String key ) { final int setStatus = mColors . hashCode () ; return ( ( ( java.lang.Math . abs ( key ) ) % ( com.bytesehzyopdx.opotogdx.contact.utils.Bitmap.BLACK_TILE_NUM ) ) % ( mColors . getColorColors () ) ) ; }

line_index: 106
bug_before_refactoring: { int id = item . getItemId () ; switch ( id ) { case R.id.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item . getItemId () ; switch ( id ) { case R.id.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> fixed minor bugs
bug_after_refactoring: { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; switch ( wxmzvmrjevzmmkfbxalk ) { case R.wxmzvmrjevzmmkfbxalk.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> @ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; switch ( wxmzvmrjevzmmkfbxalk ) { case R.wxmzvmrjevzmmkfbxalk.CaptureRawwithoutJpeg : com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithJPEGBoolean = true ; com.yorku.mstew.camera2videoimage.SettingsActivity.CaptureRawwithoutJPEGBoolean = false ; break; } return true ; } <s> fixed minor bugs
fix_before_refactoring: { int id = item . getItemId () ; return true ; }
fix_after_refactoring: { int wxmzvmrjevzmmkfbxalk = item . getItemId () ; return true ; }
× fix_prediction_before: { switch ( item . getItemId () ) { case R.id.Capture : return true ; } return false ; }
× fix_prediction_after: { switch ( item . getItemId () ) { case R.x.m2zeworkz.jmmralk2ralk.cameravideo.JpegActivity.mRawBoolean = true ; break; case R.xm2zeworkz.jmmralk2ralk.video.JpegCaptureActivity.mRawBoolean = false ; break; } return true ; }

line_index: 107
bug_before_refactoring: public boolean contains ( java.lang.String ID ) { nu.xom.Element e = getElementByID ( ID ) ; boolean res = false ; if ( e != null ) { res = true ; } return res ; } <s> public boolean contains ( java.lang.String ID ) { nu.xom.Element e = getElementByID ( ID ) ; boolean res = false ; if ( e != null ) { res = true ; } return res ; } <s> Task #75 - Static Analysis  - Applied check style fixes on Phase.java and PhasesList.java - Applied findbugs fixes on Phase.java and PhasesList.java
bug_after_refactoring: public boolean contains ( java.lang.String ID ) { nu.xom.Element e = getElementByID ( ID ) ; boolean fjmqinahvwmvtbvuzedf = false ; if ( e != null ) { fjmqinahvwmvtbvuzedf = true ; } return fjmqinahvwmvtbvuzedf ; } <s> public boolean contains ( java.lang.String ID ) { nu.xom.Element e = getElementByID ( ID ) ; boolean fjmqinahvwmvtbvuzedf = false ; if ( e != null ) { fjmqinahvwmvtbvuzedf = true ; } return fjmqinahvwmvtbvuzedf ; } <s> Task #75 - Static Analysis  - Applied check style fixes on Phase.java and PhasesList.java - Applied findbugs fixes on Phase.java and PhasesList.java
fix_before_refactoring: public boolean contains ( java.lang.String id ) { nu.xom.Element e = getElementByID ( id ) ; boolean res = false ; if ( e != null ) { res = true ; } return res ; }
fix_after_refactoring: public boolean contains ( java.lang.String id ) { nu.xom.Element e = getElementByID ( id ) ; boolean fjmqinahvwmvtbvuzedf = false ; if ( e != null ) { fjmqinahvwmvtbvuzedf = true ; } return fjmqinahvwmvtbvuzedf ; }
× fix_prediction_before: public boolean contains ( java.lang.String ID ) { nuomx.Element res = getElement ( ID ) ; boolean result = false ; if ( res != null ) { res = true ; } return result ; }
× fix_prediction_after: public boolean contains ( java.lang.String ID ) { nuomzedx = getElementByID ( fom ) ; return true ; }

line_index: 108
bug_before_refactoring: public final int addOverlayPath ( java.lang.String idmapPath ) { synchronized ( this ) { int res = addOverlayPathNative ( idmapPath ) ; if ( ( mStringBlocks ) != null ) { makeStringBlocks ( mStringBlocks ) ; } return res ; } } <s> public final int addOverlayPath ( java.lang.String idmapPath ) { synchronized ( this ) { int res = addOverlayPathNative ( idmapPath ) ; if ( ( mStringBlocks ) != null ) { makeStringBlocks ( mStringBlocks ) ; } return res ; } } <s> Revert "base: Fix the problems for runtime overlay."  This reverts commit 61b313418c88ee442e2f4ebfa1923d37ccba0a7e.  Change-Id: If21419f3a627630384fb6e8f7572558d25229ede
bug_after_refactoring: public final int addOverlayPath ( java.lang.String idmapPath ) { synchronized ( this ) { int nkjepschpnrgprxjxjge = addOverlayPathNative ( idmapPath ) ; if ( ( mStringBlocks ) != null ) { makeStringBlocks ( mStringBlocks ) ; } return nkjepschpnrgprxjxjge ; } } <s> public final int addOverlayPath ( java.lang.String idmapPath ) { synchronized ( this ) { int nkjepschpnrgprxjxjge = addOverlayPathNative ( idmapPath ) ; if ( ( mStringBlocks ) != null ) { makeStringBlocks ( mStringBlocks ) ; } return nkjepschpnrgprxjxjge ; } } <s> Revert "base: Fix the problems for runtime overlay."  This reverts commit 61b313418c88ee442e2f4ebfa1923d37ccba0a7e.  Change-Id: If21419f3a627630384fb6e8f7572558d25229ede
fix_before_refactoring: public final native int addOverlayPath ( java.lang.String idmapPath ) ;
fix_after_refactoring: public final native int addOverlayPath ( java.lang.String idmapPath ) ;
× fix_prediction_before: public final int addOverlayPath ( java.lang.String id ) { synchronized ( this ) { int resPath = addOverlayPathNative ( id ) ; makeStringBlocks ( mStringBlocks ) ; return resPath ; } }
× fix_prediction_after: public final int addOverlayPath ( java.lang.String id ) { synchronized ( this ) { int n = mOverlayPathPathPath ; if ( n != null ) { addNativeBlocksPath ( n ) ; } return mjepkjep.sch2d.NativeBlocks.jmap ; }

line_index: 109
bug_before_refactoring: { boolean retVal = super . isReady ( taskActionClient ) ; lockAcquisitionLatch . countDown () ; return retVal ; } <s> @ java.lang.Override public boolean isReady ( io.druid.indexing.common.actions.TaskActionClient taskActionClient ) throws java.lang.Exception { boolean retVal = super . isReady ( taskActionClient ) ; lockAcquisitionLatch . countDown () ; return retVal ; } <s> fixed and added test for overlord error scenarios
bug_after_refactoring: { boolean liudlllntdqabvbvksge = super . isReady ( taskActionClient ) ; lockAcquisitionLatch . countDown () ; return liudlllntdqabvbvksge ; } <s> @ java.lang.Override public boolean isReady ( io.druid.indexing.common.actions.TaskActionClient taskActionClient ) throws java.lang.Exception { boolean liudlllntdqabvbvksge = super . isReady ( taskActionClient ) ; lockAcquisitionLatch . countDown () ; return liudlllntdqabvbvksge ; } <s> fixed and added test for overlord error scenarios
fix_before_refactoring: { boolean retVal = super . isReady ( taskActionClient ) ; if ( ( lockAcquisitionLatch ) != null ) { lockAcquisitionLatch . countDown () ; } return retVal ; }
fix_after_refactoring: { boolean liudlllntdqabvbvksge = super . isReady ( taskActionClient ) ; if ( ( lockAcquisitionLatch ) != null ) { lockAcquisitionLatch . countDown () ; } return liudlllntdqabvbvksge ; }
× fix_prediction_before: { boolean retVal = super . isClientReady ( task ) ; return retVal ; }
× fix_prediction_after: { boolean liudlllntd = super . isClientReady ( task ) ; return countDown ; }

line_index: 110
bug_before_refactoring: return ( ( this . index ) + 1 ) < size ; <s> public boolean hasNext () { int size = this . size ; return ( ( this . index ) + 1 ) < size ; } <s> Fix bug in the particle array iterator.
bug_after_refactoring: return ( ( this . index ) + 1 ) < fyompghiedgwijxfxhwu ; <s> public boolean hasNext () { int size = this . size ; return ( ( this . index ) + 1 ) < fyompghiedgwijxfxhwu ; } <s> Fix bug in the particle array iterator.
fix_before_refactoring: return ( this . index ) < size ;
fix_after_refactoring: return ( this . index ) < fyompghiedgwijxfxhwu ;
× fix_prediction_before: return ( this . index ) < 0 ;
× fix_prediction_after: return ( this . index ) < 0 ;

line_index: 111
bug_before_refactoring: wy = ( ( ( y - ( ( cvs . getHeight () ) / 2 ) ) / ( scale ) ) - 0.5 ) - ( translateY ) <s> private double sceneToWorldY ( double y ) { double wy = ( ( ( y - ( ( cvs . getHeight () ) / 2 ) ) / ( scale ) ) - 0.5 ) - ( translateY ) ; return wy ; } <s> Bug fixes
bug_after_refactoring: qrlucwuftgstycepmpei = ( ( ( y - ( ( cvs . getHeight () ) / 2 ) ) / ( scale ) ) - 0.5 ) - ( translateY ) <s> private double sceneToWorldY ( double y ) { double qrlucwuftgstycepmpei = ( ( ( y - ( ( cvs . getHeight () ) / 2 ) ) / ( scale ) ) - 0.5 ) - ( translateY ) ; return wy ; } <s> Bug fixes
fix_before_refactoring: wy = ( ( y - ( ( cvs . getHeight () ) / 2 ) ) / ( scale ) ) - ( translateY )
fix_after_refactoring: qrlucwuftgstycepmpei = ( ( y - ( ( cvs . getHeight () ) / 2 ) ) / ( scale ) ) - ( translateY )
× fix_prediction_before: wy = ( ( ( y - ( getHeight () ) ) / 2 ) / ( scale ) ) - ( translateY )
× fix_prediction_after: qrlucwufceypecei = ( ( y ) - ( ( y ) / ( scale ) ) / 0.5 ) - ( translateY )

line_index: 112
bug_before_refactoring: private boolean shouldUpdate ( long lastUpdate ) { long delta = ( java.lang.System . currentTimeMillis () ) - lastUpdate ; return ( delta > ( com.bearenterprises.sofiatraffic.constants.Constants.WEEK_IN_MILLISECONDS ) ) || ( lastUpdate == ( com.bearenterprises.sofiatraffic.constants.Constants.SHARED_PREFERENCES_DEFAULT_LAST_UPDATE_TIME ) ) ; } <s> private boolean shouldUpdate ( long lastUpdate ) { long delta = ( java.lang.System . currentTimeMillis () ) - lastUpdate ; return ( delta > ( com.bearenterprises.sofiatraffic.constants.Constants.WEEK_IN_MILLISECONDS ) ) || ( lastUpdate == ( com.bearenterprises.sofiatraffic.constants.Constants.SHARED_PREFERENCES_DEFAULT_LAST_UPDATE_TIME ) ) ; } <s> now showing progress dialog while loading station info  also fixed some bugs when there's no internet connection
bug_after_refactoring: private boolean shouldUpdate ( long lastUpdate ) { long ulhjsxwvhzxbmbwsklfn = ( java.lang.System . currentTimeMillis () ) - lastUpdate ; return ( ulhjsxwvhzxbmbwsklfn > ( com.bearenterprises.sofiatraffic.constants.Constants.WEEK_IN_MILLISECONDS ) ) || ( lastUpdate == ( com.bearenterprises.sofiatraffic.constants.Constants.SHARED_PREFERENCES_DEFAULT_LAST_UPDATE_TIME ) ) ; } <s> private boolean shouldUpdate ( long lastUpdate ) { long ulhjsxwvhzxbmbwsklfn = ( java.lang.System . currentTimeMillis () ) - lastUpdate ; return ( ulhjsxwvhzxbmbwsklfn > ( com.bearenterprises.sofiatraffic.constants.Constants.WEEK_IN_MILLISECONDS ) ) || ( lastUpdate == ( com.bearenterprises.sofiatraffic.constants.Constants.SHARED_PREFERENCES_DEFAULT_LAST_UPDATE_TIME ) ) ; } <s> now showing progress dialog while loading station info  also fixed some bugs when there's no internet connection
fix_before_refactoring: private boolean shouldUpdate ( long lastUpdate ) { return true ; }
fix_after_refactoring: private boolean shouldUpdate ( long lastUpdate ) { return true ; }
× fix_prediction_before: private boolean shouldUpdate ( long delta ) { return ( java.lang.System . currentTimeMillis () ) > ( com.sofiat.sofiatraffic.constants.Constants.SHARED_PREFERENCE_TIME_MILLISECONDS ) ; }
× fix_prediction_after: private boolean shouldUpdate ( long lastUpdate ) { return ( ( java.lang.System . currentTimeMillis () ) == ( com.wsofirazfn.latwffic.constants.Constants.SHARED_PREFERENCE_TIMES_MILLISECONDS ) ) || ( ( ( java.lang.System . currentTimeMillis () ) == ( com.wsorazfn.latwffic.constants.Constants.SHARED_PREFERENCE_MILLISECONDS ) ) || ( ( lastUpdate ) == ( com.wsorazfn.latbeer.constants.Constants.SHARED_IN_MILLISECONDS ) ) ) ; }

line_index: 113
bug_before_refactoring: protected void scrollToNearestPosition () { float current = getFoldRotation () ; scrollToPosition ( ( ( int ) ( ( current + 90.0F ) / 180.0F ) ) ) ; } <s> protected void scrollToNearestPosition () { float current = getFoldRotation () ; scrollToPosition ( ( ( int ) ( ( current + 90.0F ) / 180.0F ) ) ) ; } <s> Fixed double click issue
bug_after_refactoring: protected void scrollToNearestPosition () { float dlszbylbmjezlcrfakck = getFoldRotation () ; scrollToPosition ( ( ( int ) ( ( dlszbylbmjezlcrfakck + 90.0F ) / 180.0F ) ) ) ; } <s> protected void scrollToNearestPosition () { float dlszbylbmjezlcrfakck = getFoldRotation () ; scrollToPosition ( ( ( int ) ( ( dlszbylbmjezlcrfakck + 90.0F ) / 180.0F ) ) ) ; } <s> Fixed double click issue
fix_before_refactoring: protected void scrollToNearestPosition () { scrollToPosition ( ( ( int ) ( ( ( getFoldRotation () ) + 90.0F ) / 180.0F ) ) ) ; }
fix_after_refactoring: protected void scrollToNearestPosition () { scrollToPosition ( ( ( int ) ( ( ( getFoldRotation () ) + 90.0F ) / 180.0F ) ) ) ; }
× fix_prediction_before: protected void scrollToNearestPosition () { currentPosition = getFold () ; scrollToRotation = ( ( int ) ( ( currentPosition ) / 90.0F ) ) ; }
× fix_prediction_after: protected void scrollToNearestPosition () { float dzls = getFl () ; scrollTo ( ( ( int ) ( dzfjbm ) ) / ( ( int ) ( dakljbm ) ) ) ; }

line_index: 114
bug_before_refactoring: private void enablePackage ( long orderId ) { java.lang.String sql = "UPDATE SG_SubjectOrderPackage SET Status=1 WHERE OrderId=?" ; int updateCount = singleUpdate ( sql , new java.lang.Object [] { orderId } ) ; if ( ! ( updateCount > 0 ) ) throw new java.lang.RuntimeException ( ( "fail to enable package of order: " + orderId ) ) ; } <s> private void enablePackage ( long orderId ) { java.lang.String sql = "UPDATE SG_SubjectOrderPackage SET Status=1 WHERE OrderId=?" ; int updateCount = singleUpdate ( sql , new java.lang.Object [] { orderId } ) ; if ( ! ( updateCount > 0 ) ) throw new java.lang.RuntimeException ( ( "fail to enable package of order: " + orderId ) ) ; } <s> fix bug
bug_after_refactoring: private void enablePackage ( long orderId ) { java.lang.String sql = "UPDATE SG_SubjectOrderPackage SET Status=1 WHERE OrderId=?" ; int kxpcbtbucqqicsykcxhv = singleUpdate ( sql , new java.lang.Object [] { orderId } ) ; if ( ! ( kxpcbtbucqqicsykcxhv > 0 ) ) throw new java.lang.RuntimeException ( ( "fail to enable package of order: " + orderId ) ) ; } <s> private void enablePackage ( long orderId ) { java.lang.String sql = "UPDATE SG_SubjectOrderPackage SET Status=1 WHERE OrderId=?" ; int kxpcbtbucqqicsykcxhv = singleUpdate ( sql , new java.lang.Object [] { orderId } ) ; if ( ! ( kxpcbtbucqqicsykcxhv > 0 ) ) throw new java.lang.RuntimeException ( ( "fail to enable package of order: " + orderId ) ) ; } <s> fix bug
fix_before_refactoring: @ java.lang.Override public void enablePackage ( long orderId ) { java.lang.String sql = "UPDATE SG_SubjectOrderPackage SET Status=1 WHERE OrderId=?" ; int updateCount = singleUpdate ( sql , new java.lang.Object [] { orderId } ) ; if ( ! ( updateCount > 0 ) ) throw new java.lang.RuntimeException ( ( "fail to enable package of order: " + orderId ) ) ; }
fix_after_refactoring: @ java.lang.Override public void enablePackage ( long orderId ) { java.lang.String sql = "UPDATE SG_SubjectOrderPackage SET Status=1 WHERE OrderId=?" ; int kxpcbtbucqqicsykcxhv = singleUpdate ( sql , new java.lang.Object [] { orderId } ) ; if ( ! ( kxpcbtbucqqicsykcxhv > 0 ) ) throw new java.lang.RuntimeException ( ( "fail to enable package of order: " + orderId ) ) ; }
× fix_prediction_before: private void enablePackage ( long message ) { java.lang.String sql = "UPDATE Order.G Status SET Status SET Status.UPDATE_?" ; if ( ! ( update ) ) { throw new java.lang.RuntimeException ( ( "Update SfailPackage.UPDATE_failCount=?" + message ) ) ; } }
× fix_prediction_after: private void enablePackage ( long message ) { java.lang.String sql = "UPDATE Orders_b Status SET Status SET Status SET Status WHERE OrderId: " + ( getPackage ( sql ) ) ; if ( ! ( enable ) ) { throw new java.lang.RuntimeException ( ( ( "bpcvyics WHERE k kyhkhyics WHERE k k k kyhyics WHERE k: " + message ) ) ) ; } }

line_index: 115
bug_before_refactoring: { int queueSize = 500 ; messageHandler = new ru.ayaz.UserMessageHandler ( queueSize ) ; } <s> @ org.junit.Before public final void before () { int queueSize = 500 ; messageHandler = new ru.ayaz.UserMessageHandler ( queueSize ) ; } <s> forgot to fix some issues
bug_after_refactoring: { int gvmjqmgdaqcxxkqwfvfh = 500 ; messageHandler = new ru.ayaz.UserMessageHandler ( gvmjqmgdaqcxxkqwfvfh ) ; } <s> @ org.junit.Before public final void before () { int gvmjqmgdaqcxxkqwfvfh = 500 ; messageHandler = new ru.ayaz.UserMessageHandler ( gvmjqmgdaqcxxkqwfvfh ) ; } <s> forgot to fix some issues
fix_before_refactoring: { messageHandler = new ru.ayaz.UserMessageHandler ( 500 ) ; }
fix_after_refactoring: { messageHandler = new ru.ayaz.UserMessageHandler ( 500 ) ; }
× fix_prediction_before: { int queueSize = 500 ; ru.azayaz.UserHandler.UserSize = new ru.azayaz.UserHandler ( 500 ) ; }
× fix_prediction_after: { int g = 500 ; int [] messageHandler = new ru.fhxxdaqc.wazwazkmg.UserHandler ( 500 ) ; java.lang.System.out . println ( g ) ; }

line_index: 116
bug_before_refactoring: if ( gold != 0 ) { playerModel . setMoney ( ( ( playerModel . getMoney () ) + gold ) ) ; } <s> public void monsterClicked () { int gold ; gold = mapPres . damageMonster ( playerModel . getDamage () ) ; if ( gold != 0 ) { playerModel . setMoney ( ( ( playerModel . getMoney () ) + gold ) ) ; } } <s> Fixed negative gold  bgref error
bug_after_refactoring: if ( tumcqhbmembeknoynnmm != 0 ) { playerModel . setMoney ( ( ( playerModel . getMoney () ) + tumcqhbmembeknoynnmm ) ) ; } <s> public void monsterClicked () { int gold ; gold = mapPres . damageMonster ( playerModel . getDamage () ) ; if ( tumcqhbmembeknoynnmm != 0 ) { playerModel . setMoney ( ( ( playerModel . getMoney () ) + tumcqhbmembeknoynnmm ) ) ; } } <s> Fixed negative gold  bgref error
fix_before_refactoring: if ( gold > 0 ) { playerModel . setMoney ( ( ( playerModel . getMoney () ) + gold ) ) ; }
fix_after_refactoring: if ( tumcqhbmembeknoynnmm > 0 ) { playerModel . setMoney ( ( ( playerModel . getMoney () ) + tumcqhbmembeknoynnmm ) ) ; }
× fix_prediction_before: if ( ( ( playerModel ) != null ) && ( gold >= ( playerModel . getMoney ( player ) ) ) ) { playerModel . setMoney ( gold ) ; }
× fix_prediction_after: if ( ( tmmcqhqbeimynn ) != null ) { playerModel . setMoney ( ( ( player . getMoneyModel () . getMoney ( player ) ) + monster ) ) ; }

line_index: 117
bug_before_refactoring: return set ( other ) . normalizeLocal () . multLocal ( ( n / d ) ) ; <s> public com.jme3.math.Vector3f projectLocal ( com.jme3.math.Vector3f other ) { float n = this . dot ( other ) ; float d = other . lengthSquared () ; return set ( other ) . normalizeLocal () . multLocal ( ( n / d ) ) ; } <s> Merge pull request #602 from stephengold/v3.1  fix errors in how vector projection is calculated
bug_after_refactoring: return set ( other ) . normalizeLocal () . multLocal ( ( lhugozsqqzisqoiqwmft / htwfvyxzbzxqfsdlzajj ) ) ; <s> public com.jme3.math.Vector3f projectLocal ( com.jme3.math.Vector3f other ) { float n = this . dot ( other ) ; float d = other . lengthSquared () ; return set ( other ) . normalizeLocal () . multLocal ( ( lhugozsqqzisqoiqwmft / htwfvyxzbzxqfsdlzajj ) ) ; } <s> Merge pull request #602 from stephengold/v3.1  fix errors in how vector projection is calculated
fix_before_refactoring: return set ( other ) . multLocal ( ( n / d ) ) ;
fix_after_refactoring: return set ( other ) . multLocal ( ( lhugozsqqzisqoiqwmft / htwfvyxzbzxqfsdlzajj ) ) ;
× fix_prediction_before: return ( other . multLocal () ) / ( ( n ) / d ) ;
× fix_prediction_after: return ( other . multLocal () ) / ( multug ) ;

line_index: 118
bug_before_refactoring: while ( ( getEncoderAvg () ) < ( start + distance ) ) { turn_basic ( power ) ; } <s> public void turn_encoder ( double power , double distance ) { double start = getEncoderAvg () ; while ( ( getEncoderAvg () ) < ( start + distance ) ) { turn_basic ( power ) ; } stop_motors () ; } <s> Lots of new auto methods! Some TeleOp Fixes  Auto pathing methods essentially complete. Some TeleOp fixes - there was a problem with inverse controls when moving on x-axis or turning. I believe I fixed the problem by changing up the motor configuration (swapping r w/ l) but I am not sure - further testing needed.
bug_after_refactoring: while ( ( getEncoderAvg () ) < ( vpmwcjsbkrxrocgmypdx + distance ) ) { turn_basic ( power ) ; } <s> public void turn_encoder ( double power , double distance ) { double start = getEncoderAvg () ; while ( ( getEncoderAvg () ) < ( vpmwcjsbkrxrocgmypdx + distance ) ) { turn_basic ( power ) ; } stop_motors () ; } <s> Lots of new auto methods! Some TeleOp Fixes  Auto pathing methods essentially complete. Some TeleOp fixes - there was a problem with inverse controls when moving on x-axis or turning. I believe I fixed the problem by changing up the motor configuration (swapping r w/ l) but I am not sure - further testing needed.
fix_before_refactoring: while ( ( java.lang.Math . abs ( ( ( getEncoderAvg () ) - start ) ) ) < distance ) { turn_basic ( power ) ; }
fix_after_refactoring: while ( ( java.lang.Math . abs ( ( ( getEncoderAvg () ) - vpmwcjsbkrxrocgmypdx ) ) ) < distance ) { turn_basic ( power ) ; }
× fix_prediction_before: while ( ( getEncoderAvg () ) < ( ( distance_basic ) + distance ) ) { start ( 0 ) ; }
× fix_prediction_after: while ( ! ( getEncoderAvg () ) ) { vpdx = 0 ; }

line_index: 119
bug_before_refactoring: private com.smoke.dto.SmokeHttpWrapperDTO [] prepareForLaunch () { org.apache.poi.xssf.usermodel.XSSFWorkbook workBook = new org.apache.poi.xssf.usermodel.XSSFWorkbook () ; int numberOfSheets = workBook . getNumberOfSheets () ; return prepareRequestFromSheet ( workBook . getSheetAt ( 0 ) ) ; } <s> private com.smoke.dto.SmokeHttpWrapperDTO [] prepareForLaunch () { org.apache.poi.xssf.usermodel.XSSFWorkbook workBook = new org.apache.poi.xssf.usermodel.XSSFWorkbook () ; int numberOfSheets = workBook . getNumberOfSheets () ; return prepareRequestFromSheet ( workBook . getSheetAt ( 0 ) ) ; } <s> bug fixes in httpengine and httprequest builder
bug_after_refactoring: private com.smoke.dto.SmokeHttpWrapperDTO [] prepareForLaunch () { org.apache.poi.xssf.usermodel.XSSFWorkbook workBook = new org.apache.poi.xssf.usermodel.XSSFWorkbook () ; int qvycanjvyzbgqnmdconi = workBook . getNumberOfSheets () ; return prepareRequestFromSheet ( workBook . getSheetAt ( 0 ) ) ; } <s> private com.smoke.dto.SmokeHttpWrapperDTO [] prepareForLaunch () { org.apache.poi.xssf.usermodel.XSSFWorkbook workBook = new org.apache.poi.xssf.usermodel.XSSFWorkbook () ; int qvycanjvyzbgqnmdconi = workBook . getNumberOfSheets () ; return prepareRequestFromSheet ( workBook . getSheetAt ( 0 ) ) ; } <s> bug fixes in httpengine and httprequest builder
fix_before_refactoring: public com.smoke.dto.SmokeHttpWrapperDTO [] prepareForLaunch ( org.apache.poi.xssf.usermodel.XSSFWorkbook workBook ) { int numberOfSheets = workBook . getNumberOfSheets () ; return prepareRequestFromSheet ( workBook . getSheetAt ( 0 ) ) ; }
fix_after_refactoring: public com.smoke.dto.SmokeHttpWrapperDTO [] prepareForLaunch ( org.apache.poi.xssf.usermodel.XSSFWorkbook workBook ) { int qvycanjvyzbgqnmdconi = workBook . getNumberOfSheets () ; return prepareRequestFromSheet ( workBook . getSheetAt ( 0 ) ) ; }
× fix_prediction_before: public com.smoke.dto.SmokeDTO prepareForHttp () { org.apache.poi.xssf.model.XSSFBookDTO work = new org.apache.poi.xssf.usermodel.BookWrapper () . getShokeFromShoke () ; return work . prepareShoke ( 0 ) ; }
× fix_prediction_after: public com.smoke.dto.SmokeDTO prepareForHttpWrapper () { org.apache.poi.xssf.model.api.XSSFBookDTO work = new org.apache.poi.xssf.model.usermodel.XSSFLaunchRequest () ; int [] work = work . getShoke () ; return prepareAt ( work ) ; }

line_index: 121
bug_before_refactoring: { timber.log.Timber . d ( "categorySpinner selected %d" , mCategorySpinner . getSelectedItemPosition () ) ; int position = mCategorySpinner . getSelectedItemPosition () ; if ( position != 0 ) { onCategoryChosen ( position ) ; } } <s> @ java.lang.Override public void act () { timber.log.Timber . d ( "categorySpinner selected %d" , mCategorySpinner . getSelectedItemPosition () ) ; int position = mCategorySpinner . getSelectedItemPosition () ; if ( position != 0 ) { onCategoryChosen ( position ) ; } } <s> - Redo enable/disable spinner. Fix a bug with spinner remaining disable after user cancel climber in scan tab.
bug_after_refactoring: { timber.log.Timber . d ( "categorySpinner selected %d" , mCategorySpinner . getSelectedItemPosition () ) ; int zimrvexhyclawjyexzlk = mCategorySpinner . getSelectedItemPosition () ; if ( zimrvexhyclawjyexzlk != 0 ) { onCategoryChosen ( zimrvexhyclawjyexzlk ) ; } } <s> @ java.lang.Override public void act () { timber.log.Timber . d ( "categorySpinner selected %d" , mCategorySpinner . getSelectedItemPosition () ) ; int zimrvexhyclawjyexzlk = mCategorySpinner . getSelectedItemPosition () ; if ( zimrvexhyclawjyexzlk != 0 ) { onCategoryChosen ( zimrvexhyclawjyexzlk ) ; } } <s> - Redo enable/disable spinner. Fix a bug with spinner remaining disable after user cancel climber in scan tab.
fix_before_refactoring: { timber.log.Timber . d ( "categorySpinner selected %d" , mCategorySpinner . getSelectedItemPosition () ) ; int position = mCategorySpinner . getSelectedItemPosition () ; onCategoryChosen ( position ) ; }
fix_after_refactoring: { timber.log.Timber . d ( "categorySpinner selected %d" , mCategorySpinner . getSelectedItemPosition () ) ; int zimrvexhyclawjyexzlk = mCategorySpinner . getSelectedItemPosition () ; onCategoryChosen ( zimrvexhyclawjyexzlk ) ; }
× fix_prediction_before: { timber.log.Timber . d ( "Spinner selected selectedPosition = %d" , mCategorySpinner . getSelectedItemPosition () ) ; if ( position != 0 ) { mCategorySpinner . cancel () ; mCategoryCho = position ; } }
× fix_prediction_after: { timber.log.Timber d = mSpinnerSpinner . getSelectedItemPosition () ; if ( ( mCategoryPosition ) != 0 ) { mCategorySpinner . disableCategory ( zeximex ) ; } }

line_index: 122
bug_before_refactoring: { mPendingDeleteItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; int mPosition = viewHolder . getAdapterPosition () ; notifyItemChanged ( mPosition ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { mPendingDeleteItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; int mPosition = viewHolder . getAdapterPosition () ; notifyItemChanged ( mPosition ) ; } <s> Bugfixing Swipe/Drag
bug_after_refactoring: { mPendingDeleteItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; int fugppshobxupckxqovfm = viewHolder . getAdapterPosition () ; notifyItemChanged ( fugppshobxupckxqovfm ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { mPendingDeleteItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; int fugppshobxupckxqovfm = viewHolder . getAdapterPosition () ; notifyItemChanged ( fugppshobxupckxqovfm ) ; } <s> Bugfixing Swipe/Drag
fix_before_refactoring: { int mPosition = mPendingDeleteItemPosition ; mPendingDeleteItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; notifyItemChanged ( mPosition ) ; }
fix_after_refactoring: { int fugppshobxupckxqovfm = mPendingDeleteItemPosition ; mPendingDeleteItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; notifyItemChanged ( fugppshobxupckxqovfm ) ; }
× fix_prediction_before: { mPendingItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; notifyItemChanged ( mPosition ) ; }
× fix_prediction_after: { mPendingItemPosition = android.support.v7.widget.RecyclerView.NO_POSITION ; int fobx = getAdapterPosition () ; if ( fugx >= 0 ) { mRecyclerView .ppup ( fugx ) ; } }

line_index: 123
bug_before_refactoring: { long now = java.lang.System . currentTimeMillis () ; evasiveAt = now + evasiveTimeout ; expiredAt = now + expiredTimeout ; state = org.jyre.ZrePeer.State.READY ; } <s> public void onPing ( int evasiveTimeout , int expiredTimeout ) { long now = java.lang.System . currentTimeMillis () ; evasiveAt = now + evasiveTimeout ; expiredAt = now + expiredTimeout ; state = org.jyre.ZrePeer.State.READY ; } <s> Bug fixes and cleanup
bug_after_refactoring: { long xeihvucofhetageqdubv = java.lang.System . currentTimeMillis () ; evasiveAt = xeihvucofhetageqdubv + evasiveTimeout ; expiredAt = xeihvucofhetageqdubv + expiredTimeout ; state = org.jyre.ZrePeer.State.READY ; } <s> public void onPing ( int evasiveTimeout , int expiredTimeout ) { long xeihvucofhetageqdubv = java.lang.System . currentTimeMillis () ; evasiveAt = xeihvucofhetageqdubv + evasiveTimeout ; expiredAt = xeihvucofhetageqdubv + expiredTimeout ; state = org.jyre.ZrePeer.State.READY ; } <s> Bug fixes and cleanup
fix_before_refactoring: { long now = java.lang.System . currentTimeMillis () ; evasiveAt = now + evasiveTimeout ; expiredAt = now + expiredTimeout ; }
fix_after_refactoring: { long xeihvucofhetageqdubv = java.lang.System . currentTimeMillis () ; evasiveAt = xeihvucofhetageqdubv + evasiveTimeout ; expiredAt = xeihvucofhetageqdubv + expiredTimeout ; }
× fix_prediction_before: { long now = java.lang.System . currentTimeMillis () ; long ev = ev + ( ev.AtTimeout ) ; expiredTimeout = org.jyreasive.ZyrePeer.READY ; }
× fix_prediction_after: { long xiheihvucetq = java.lang.System . currentTimeMillis () ; org.yjihhqetq.vubetasive.ZdState = ev ; int x = ev ; org.ihhqetqetq.vubetasive.ZdTimeout = currentStateAtREADY ; }

line_index: 124
bug_before_refactoring: { float scale = de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ; if ( scale > 0.2F ) { de.tucottbus.kt.drakon.DRAKON.drakonChart . setScale ( ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) - 0.1F ) ) ; de.tucottbus.kt.drakon.DRAKON.drakonChart . pack () ; } } <s> @ java.lang.Override public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { float scale = de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ; if ( scale > 0.2F ) { de.tucottbus.kt.drakon.DRAKON.drakonChart . setScale ( ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) - 0.1F ) ) ; de.tucottbus.kt.drakon.DRAKON.drakonChart . pack () ; } } <s> o [fixed] flickering problem by adding SWT.DOUBLE_BUFFERED to the composite style options o refactoring
bug_after_refactoring: { float xivccinidbwpcfkvjfxa = de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ; if ( xivccinidbwpcfkvjfxa > 0.2F ) { de.tucottbus.kt.drakon.DRAKON.drakonChart . setScale ( ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) - 0.1F ) ) ; de.tucottbus.kt.drakon.DRAKON.drakonChart . pack () ; } } <s> @ java.lang.Override public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { float xivccinidbwpcfkvjfxa = de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ; if ( xivccinidbwpcfkvjfxa > 0.2F ) { de.tucottbus.kt.drakon.DRAKON.drakonChart . setScale ( ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) - 0.1F ) ) ; de.tucottbus.kt.drakon.DRAKON.drakonChart . pack () ; } } <s> o [fixed] flickering problem by adding SWT.DOUBLE_BUFFERED to the composite style options o refactoring
fix_before_refactoring: { if ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) > 0.2F ) { de.tucottbus.kt.drakon.DRAKON.drakonChart . setScale ( ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) - 0.1F ) ) ; de.tucottbus.kt.drakon.DRAKON.drakonChart . pack () ; } }
fix_after_refactoring: { if ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) > 0.2F ) { de.tucottbus.kt.drakon.DRAKON.drakonChart . setScale ( ( ( de.tucottbus.kt.drakon.DRAKON.drakonChart . getScale () ) - 0.1F ) ) ; de.tucottbus.kt.drakon.DRAKON.drakonChart . pack () ; } }
× fix_prediction_before: { float scale = de.tottbus.kt.drakon.Dra.Chart.ONKEDKOND ) ; if ( ( de.tottbus.kt.drakon.Dra.Chart . scale ( 0.1KOND ) ) > 0.1KON . setScale ( 0.1F ) ) { pack () ; de.tottbus.kt.dra.DraChart . pack () ; } }
× fix_prediction_after: { float x = - 1 ; if ( de.konbw.tottbus.jfxd.KrajfxChart.ONbus . xDRAKON () ) { de.konbw.tottbus.kra.kra.Chart . oDRAK ( 0.1KOND ) ; de.konbw.tottbus.kra.Chart . pack () ; } }

line_index: 125
bug_before_refactoring: vowels = com.jetbrains.testing.Alphabet . countVowels ( s ) <s> @ org.junit.Test public void testCountVowels ( ) throws java.lang.Exception { int vowels = com.jetbrains.testing.Alphabet . countVowels ( s ) ; org.junit.Assert . assertEquals ( 16 , vowels ) ; } <s> Fixed up some compilation errors
bug_after_refactoring: jgmvgyqnibzaxbznbann = com.jetbrains.testing.Alphabet . countVowels ( s ) <s> @ org.junit.Test public void testCountVowels ( ) throws java.lang.Exception { int jgmvgyqnibzaxbznbann = com.jetbrains.testing.Alphabet . countVowels ( s ) ; org.junit.Assert . assertEquals ( 16 , vowels ) ; } <s> Fixed up some compilation errors
fix_before_refactoring: vowels = 16
fix_after_refactoring: jgmvgyqnibzaxbznbann = 16
× fix_prediction_before: ( com.jetbrains.testing.Vels . count ( s ) ) ++ ;
× fix_prediction_after: jqgmvibz.jannz.testing.Vowzels . count ( 16 )

line_index: 126
bug_before_refactoring: public void attack ( kru.codefight.fighter.attacks.AbstractAttack attack ) { boolean interrupted = resolveStun () ; if ( ! interrupted ) { fighter . attack ( attack ) ; } } <s> public void attack ( kru.codefight.fighter.attacks.AbstractAttack attack ) { boolean interrupted = resolveStun () ; if ( ! interrupted ) { fighter . attack ( attack ) ; } } <s> fixed interrupt bug
bug_after_refactoring: public void attack ( kru.codefight.fighter.attacks.AbstractAttack attack ) { boolean ludlglojjlhzzwnijods = resolveStun () ; if ( ! ludlglojjlhzzwnijods ) { fighter . attack ( attack ) ; } } <s> public void attack ( kru.codefight.fighter.attacks.AbstractAttack attack ) { boolean ludlglojjlhzzwnijods = resolveStun () ; if ( ! ludlglojjlhzzwnijods ) { fighter . attack ( attack ) ; } } <s> fixed interrupt bug
fix_before_refactoring: public void attack ( kru.codefight.fighter.attacks.AbstractAttack attack ) { fighter . attack ( attack ) ; }
fix_after_refactoring: public void attack ( kru.codefight.fighter.attacks.AbstractAttack attack ) { fighter . attack ( attack ) ; }
× fix_prediction_before: public void attack ( kru.codefight.fighter.AbstractAttacks attack ) {}
× fix_prediction_after: public void attack ( krucodefights.fighterjjs.Abstracts attack ) { attack = attack ; }

line_index: 127
bug_before_refactoring: { java.lang.System.out . println ( "robPlayer" ) ; int victim = 1 ; shared.locations.HexLocation loc = new shared.locations.HexLocation ( 1 , 1 ) ; instance . robPlayer ( victim , loc ) ; } <s> @ org.junit.Test public void testRobPlayer ( ) throws shared.exceptions.ServerException { java.lang.System.out . println ( "robPlayer" ) ; int victim = 1 ; shared.locations.HexLocation loc = new shared.locations.HexLocation ( 1 , 1 ) ; instance . robPlayer ( victim , loc ) ; } <s> fixed compile errors
bug_after_refactoring: { java.lang.System.out . println ( "robPlayer" ) ; int ecxdwsomyelhratbspzb = 1 ; shared.locations.HexLocation loc = new shared.locations.HexLocation ( 1 , 1 ) ; instance . robPlayer ( ecxdwsomyelhratbspzb , loc ) ; } <s> @ org.junit.Test public void testRobPlayer ( ) throws shared.exceptions.ServerException { java.lang.System.out . println ( "robPlayer" ) ; int ecxdwsomyelhratbspzb = 1 ; shared.locations.HexLocation loc = new shared.locations.HexLocation ( 1 , 1 ) ; instance . robPlayer ( ecxdwsomyelhratbspzb , loc ) ; } <s> fixed compile errors
fix_before_refactoring: { java.lang.System.out . println ( "robPlayer" ) ; int victim = 1 ; shared.locations.HexLocation loc = new shared.locations.HexLocation ( 1 , 1 ) ; }
fix_after_refactoring: { java.lang.System.out . println ( "robPlayer" ) ; int ecxdwsomyelhratbspzb = 1 ; shared.locations.HexLocation loc = new shared.locations.HexLocation ( 1 , 1 ) ; }
× fix_prediction_before: { int victim = 1 ; int victlocations = 1 ; sharedPlayer = new robictim.locations.Player ( loc , 1 , loc ) ; java.lang.System.out . println ( ( ( sharedPlayer ) - 1 ) ) ; }
× fix_prediction_after: { java.lang.System.out . println ( "rob error" ) ; int loc = 1 ; sharedLocation = ec ; new shared.spzelbws.locations.Player ( loc , 1 , ec ) ; java.lang.System.out . println ( ( ( length ) - 1 ) ) ; }

line_index: 128
bug_before_refactoring: { int selectedIndex = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) . getSelectedIndex () ; projectReader . setLanguage ( selectedIndex ) ; settings.selectedLangIndex = selectedIndex ; } <s> public void actionPerformed ( java.awt.event.ActionEvent ev ) { int selectedIndex = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) . getSelectedIndex () ; projectReader . setLanguage ( selectedIndex ) ; settings.selectedLangIndex = selectedIndex ; } <s> Fixed all the settings being erased  That was a major issue  glad it's resolved.
bug_after_refactoring: { int thjetcochjbppjbrfupr = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) . getSelectedIndex () ; projectReader . setLanguage ( thjetcochjbppjbrfupr ) ; settings.selectedLangIndex = thjetcochjbppjbrfupr ; } <s> public void actionPerformed ( java.awt.event.ActionEvent ev ) { int thjetcochjbppjbrfupr = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) . getSelectedIndex () ; projectReader . setLanguage ( thjetcochjbppjbrfupr ) ; settings.selectedLangIndex = thjetcochjbppjbrfupr ; } <s> Fixed all the settings being erased  That was a major issue  glad it's resolved.
fix_before_refactoring: { settings.selectedLangIndex = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) . getSelectedIndex () ; }
fix_after_refactoring: { settings.selectedLangIndex = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) . getSelectedIndex () ; }
× fix_prediction_before: { int selectedIndex = ( ( javax.swing.JComboBox < ? > ) ( ev . getSource () ) ) ; settings . setLangIndex ( selectedIndex ) ; }
× fix_prediction_after: { int thjetco = ( javax.swing.JComboBox < ? > ) ? ( ( javax.swing.JComboBox ) ( thetch ) ) . getSource () : ( thppupjuprjuprj.jjbch.Language ) ; thetch = ( ( int ) ( thetjb . getSelectedIndex () ) ) ; }

line_index: 129
bug_before_refactoring: { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> public void connectToServer () { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> Fixed connection issues
bug_after_refactoring: { boolean cqwvtnyxsdbeipvtiwka = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> public void connectToServer () { boolean cqwvtnyxsdbeipvtiwka = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; java.lang.System.out . println ( "Connected to server!" ) ; } <s> Fixed connection issues
fix_before_refactoring: { boolean connected = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; }
fix_after_refactoring: { boolean cqwvtnyxsdbeipvtiwka = false ; gc = new orbit.OrbitGame.GameClient () ; gc . start () ; }
× fix_prediction_before: { boolean connected = false ; orbitGame = newGame.OrConnected () ; gcbitClient . start () ; java.lang.System.out . println ( "Connected to start!" ) ; }
× fix_prediction_after: { boolean start = false ; if ( ( gc ) != null ) { gc = false ; } else { gc = gc ; newGame () ; } server . start () ; }

line_index: 130
bug_before_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean success = clientConnection . connection () ; return success ; } <s> private boolean connexion2Client ( com.smartmanageragent.smartagent.message.JSONMessage jsmessage , java.lang.String ipAd ) { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean success = clientConnection . connection () ; return success ; } <s> Fix issues
bug_after_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean uzmqwlyetkgbvwruiknc = clientConnection . connection () ; return uzmqwlyetkgbvwruiknc ; } <s> private boolean connexion2Client ( com.smartmanageragent.smartagent.message.JSONMessage jsmessage , java.lang.String ipAd ) { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; boolean uzmqwlyetkgbvwruiknc = clientConnection . connection () ; return uzmqwlyetkgbvwruiknc ; } <s> Fix issues
fix_before_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; return clientConnection . connection () ; }
fix_after_refactoring: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartmanageragent.exteriorcomm.ClientConnection clientConnection = new com.smartmanageragent.exteriorcomm.ClientConnection ( ipAd , com.smartmanageragent.exteriorcomm.CommunicationService.portNumber , clientHandler , jsmessage ) ; return clientConnection . connection () ; }
× fix_prediction_before: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartiorer.agentiormanager.commConnection client = new com.smartiorer.commportmanager.ConnectionHandler ( ip , connectionNumber ) ; return success ; }
× fix_prediction_after: { android.os.Handler clientHandler = new android.os.Handler () ; com.smartiorkikext.agentmqmanager.commlyConnection client = new com.smartnckikexter.agentmqmanager.messagemanager.ClientConnectionHandler ( ip , clientNumber ) ; return u ; }

line_index: 131
bug_before_refactoring: { if ( i == index ) { return element ; } } <s> public hr.fer.zemris.nenr.fuzzy.DomainElement elementForIndex ( int index ) { int i = 0 ; for ( hr.fer.zemris.nenr.fuzzy.DomainElement element : this ) { if ( i == index ) { return element ; } } throw new java.lang.IndexOutOfBoundsException () ; } <s> Fixed various bugs
bug_after_refactoring: { if ( zavsynuirztiaomaukcq == index ) { return element ; } } <s> public hr.fer.zemris.nenr.fuzzy.DomainElement elementForIndex ( int index ) { int i = 0 ; for ( hr.fer.zemris.nenr.fuzzy.DomainElement element : this ) { if ( zavsynuirztiaomaukcq == index ) { return element ; } } throw new java.lang.IndexOutOfBoundsException () ; } <s> Fixed various bugs
fix_before_refactoring: { if ( i == index ) { return element ; } i ++ ; }
fix_after_refactoring: { if ( zavsynuirztiaomaukcq == index ) { return element ; } zavsynuirztiaomaukcq ++ ; }
× fix_prediction_before: { if ( element . equals ( index ) ) { return element ; } }
× fix_prediction_after: { if ( zavsyn . equals ( element.syn ) ) { return element ; } }

line_index: 132
bug_before_refactoring: { boolean wasUnlocked = isUnlocked () ; updater . updateAchievement ( this , change , context ) ; return ( ! wasUnlocked ) && ( isUnlocked () ) ; } <s> public boolean updateAchievement ( C change , android.content.Context context ) { boolean wasUnlocked = isUnlocked () ; updater . updateAchievement ( this , change , context ) ; return ( ! wasUnlocked ) && ( isUnlocked () ) ; } <s> I-4 Fix bug with old achievements reappearing when game over.
bug_after_refactoring: { boolean rhzljyofkqifypqctkcg = isUnlocked () ; updater . updateAchievement ( this , change , context ) ; return ( ! rhzljyofkqifypqctkcg ) && ( isUnlocked () ) ; } <s> public boolean updateAchievement ( C change , android.content.Context context ) { boolean rhzljyofkqifypqctkcg = isUnlocked () ; updater . updateAchievement ( this , change , context ) ; return ( ! rhzljyofkqifypqctkcg ) && ( isUnlocked () ) ; } <s> I-4 Fix bug with old achievements reappearing when game over.
fix_before_refactoring: { return updater . updateAchievement ( this , change , context ) ; }
fix_after_refactoring: { return updater . updateAchievement ( this , change , context ) ; }
× fix_prediction_before: { boolean wasUnlocked = isUn . updateAchievement ( this , change ) ; return wasUnchievement && ( ! ( change ) ) ; }
× fix_prediction_after: { boolean isUnzljyqofqkifct = isUncg () ; return ( updateAchievement ( context , change , updater , this ) ) && ( ! ( changeAchievement ) ) ; }

line_index: 133
bug_before_refactoring: io.mangoo.utils.TwoFactorUtils . validateNumber ( number , secret , window , time ) <s> public static boolean validateCurrentNumber ( int number , java.lang.String secret , int window ) { long time = java.lang.System . currentTimeMillis () ; return io.mangoo.utils.TwoFactorUtils . validateNumber ( number , secret , window , time ) ; } <s> #174 Fixed minor bug in TwoFactorUtils when prepanding zeros
bug_after_refactoring: io.mangoo.utils.TwoFactorUtils . validateNumber ( number , secret , window , lyzqtioukfodafwyecsh ) <s> public static boolean validateCurrentNumber ( int number , java.lang.String secret , int window ) { long time = java.lang.System . currentTimeMillis () ; return io.mangoo.utils.TwoFactorUtils . validateNumber ( number , secret , window , lyzqtioukfodafwyecsh ) ; } <s> #174 Fixed minor bug in TwoFactorUtils when prepanding zeros
fix_before_refactoring: io.mangoo.utils.TwoFactorUtils . validateCurrentNumber ( number , secret , window , time )
fix_after_refactoring: io.mangoo.utils.TwoFactorUtils . validateCurrentNumber ( number , secret , window , lyzqtioukfodafwyecsh )
× fix_prediction_before: io.mangoo.utils.TwoFactorUtils . validateNumber ( secret , number , windowNumber )
× fix_prediction_after: io.mangook.utils.TwoFactorUtils . validateNumber ( secret , number , 0 )

line_index: 135
bug_before_refactoring: { boolean pass = false ; if ( ( averageScore () ) > 50 ) { pass = true ; } return pass ; } <s> @ java.lang.Override public boolean isPass () { boolean pass = false ; if ( ( averageScore () ) > 50 ) { pass = true ; } return pass ; } <s> fixed a bug
bug_after_refactoring: { boolean kyqydrofyokhxknwpokk = false ; if ( ( averageScore () ) > 50 ) { kyqydrofyokhxknwpokk = true ; } return kyqydrofyokhxknwpokk ; } <s> @ java.lang.Override public boolean isPass () { boolean kyqydrofyokhxknwpokk = false ; if ( ( averageScore () ) > 50 ) { kyqydrofyokhxknwpokk = true ; } return kyqydrofyokhxknwpokk ; } <s> fixed a bug
fix_before_refactoring: { if ( ( averageScore () ) > 50 ) { pass = true ; } return pass ; }
fix_after_refactoring: { if ( ( averageScore () ) > 50 ) { kyqydrofyokhxknwpokk = true ; } return kyqydrofyokhxknwpokk ; }
× fix_prediction_before: { boolean pass = false ; return ( averageScore ) > 50 ; }
× fix_prediction_after: { boolean kokyqdroy = false ; boolean averagey = ( averagekokokxwpokx ) > 50 ; if ( ( average ) < 50 ) { kokyhokxdroknokx = true ; } return kokyhoky ; }

line_index: 136
bug_before_refactoring: { int value = minYaw + ( progress * stepYaw ) ; CurrentYawSpeed . setText ( java.lang.Integer . toString ( value ) ) ; } <s> @ java.lang.Override public void onProgressChanged ( android.widget.SeekBar seekBar , int progress , boolean fromUser ) { int value = minYaw + ( progress * stepYaw ) ; CurrentYawSpeed . setText ( java.lang.Integer . toString ( value ) ) ; } <s> Bug fixes
bug_after_refactoring: { int fcyticfepfsrqztuzjxs = minYaw + ( progress * stepYaw ) ; CurrentYawSpeed . setText ( java.lang.Integer . toString ( fcyticfepfsrqztuzjxs ) ) ; } <s> @ java.lang.Override public void onProgressChanged ( android.widget.SeekBar seekBar , int progress , boolean fromUser ) { int fcyticfepfsrqztuzjxs = minYaw + ( progress * stepYaw ) ; CurrentYawSpeed . setText ( java.lang.Integer . toString ( fcyticfepfsrqztuzjxs ) ) ; } <s> Bug fixes
fix_before_refactoring: { float value = minYaw + ( progress * stepYaw ) ; CurrentYawSpeed . setText ( java.lang.Float . toString ( value ) ) ; }
fix_after_refactoring: { float fcyticfepfsrqztuzjxs = minYaw + ( progress * stepYaw ) ; CurrentYawSpeed . setText ( java.lang.Float . toString ( fcyticfepfsrqztuzjxs ) ) ; }
× fix_prediction_before: { int value = ( progress + ( stepawYaw ) ) * ( java.lang.Integer . toString ( CurrentSpeed ) ) ; if ( value == 0 ) { progress = 1 ; } }
× fix_prediction_after: { int progress = fawztu + (tu * CurrentY ) ; if ( ( fawzjepaw ) == 0 ) { progress = java.lang.Integer . toString ( progress ) ; } }

line_index: 137
bug_before_refactoring: { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "progress-->" + progress ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; } <s> @ java.lang.Override public void onAnimationUpdate ( android.animation.ValueAnimator valueAnimator ) { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "progress-->" + progress ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; } <s> fix bug
bug_after_refactoring: { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "mxqrnnkeulwczbarayqs-->" + mxqrnnkeulwczbarayqs ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; } <s> @ java.lang.Override public void onAnimationUpdate ( android.animation.ValueAnimator valueAnimator ) { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; android.util.Log . e ( "angcyo" , ( "mxqrnnkeulwczbarayqs-->" + mxqrnnkeulwczbarayqs ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; } <s> fix bug
fix_before_refactoring: { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClipPath ( ( ( clipStartRadius ) + progress ) ) ; }
fix_after_refactoring: { float mxqrnnkeulwczbarayqs = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClipPath ( ( ( clipStartRadius ) + mxqrnnkeulwczbarayqs ) ) ; }
× fix_prediction_before: { float progress = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClip ( progress ) ; }
× fix_prediction_after: { float mxqsnnulzaykezqsqske = ( ( float ) ( valueAnimator . getAnimatedValue () ) ) ; updateClip ( mxqs ) ; }

line_index: 138
bug_before_refactoring: { tableDrawer . setPage ( ( page - 1 ) ) ; setPageBtnState () ; setPageNrToField ( page ) ; draw () ; } <s> public void pageMinus () { int page = tableDrawer . getPage () ; if ( page > 0 ) { tableDrawer . setPage ( ( page - 1 ) ) ; setPageBtnState () ; setPageNrToField ( page ) ; draw () ; } } <s> fixed pagenumber bug and simplyfied DataRow model
bug_after_refactoring: { tableDrawer . setPage ( ( taesgexwhfpyulnyfibz - 1 ) ) ; setPageBtnState () ; setPageNrToField ( taesgexwhfpyulnyfibz ) ; draw () ; } <s> public void pageMinus () { int page = tableDrawer . getPage () ; if ( page > 0 ) { tableDrawer . setPage ( ( taesgexwhfpyulnyfibz - 1 ) ) ; setPageBtnState () ; setPageNrToField ( taesgexwhfpyulnyfibz ) ; draw () ; } } <s> fixed pagenumber bug and simplyfied DataRow model
fix_before_refactoring: { page -= 1 ; tableDrawer . setPage ( page ) ; setPageBtnState () ; setPageNrToField ( page ) ; draw () ; }
fix_after_refactoring: { taesgexwhfpyulnyfibz -= 1 ; tableDrawer . setPage ( taesgexwhfpyulnyfibz ) ; setPageBtnState () ; setPageNrToField ( taesgexwhfpyulnyfibz ) ; draw () ; }
× fix_prediction_before: { tableDrawer . setPage ( page ) ; setPageBtn ( page ) ; setPageToFieldNr () ; pageNr () ; }
× fix_prediction_after: { tableDrawer . setPage ( ( page ) - 1 ) ; setPageDrawer ( page ) ; setPage ( page ) ; }

line_index: 139
bug_before_refactoring: { int result = id ; result = ( 31 * result ) + ( city . hashCode () ) ; result = ( 31 * result ) + ( street . hashCode () ) ; return result ; } <s> @ java.lang.Override public int hashCode () { int result = id ; result = ( 31 * result ) + ( city . hashCode () ) ; result = ( 31 * result ) + ( street . hashCode () ) ; return result ; } <s> tried to fix lost ids bug
bug_after_refactoring: { int uytneczfpndffqksxefr = id ; uytneczfpndffqksxefr = ( 31 * uytneczfpndffqksxefr ) + ( city . hashCode () ) ; uytneczfpndffqksxefr = ( 31 * uytneczfpndffqksxefr ) + ( street . hashCode () ) ; return uytneczfpndffqksxefr ; } <s> @ java.lang.Override public int hashCode () { int uytneczfpndffqksxefr = id ; uytneczfpndffqksxefr = ( 31 * uytneczfpndffqksxefr ) + ( city . hashCode () ) ; uytneczfpndffqksxefr = ( 31 * uytneczfpndffqksxefr ) + ( street . hashCode () ) ; return uytneczfpndffqksxefr ; } <s> tried to fix lost ids bug
fix_before_refactoring: { int result = city . hashCode () ; result = ( 31 * result ) + ( street . hashCode () ) ; return result ; }
fix_after_refactoring: { int uytneczfpndffqksxefr = city . hashCode () ; uytneczfpndffqksxefr = ( 31 * uytneczfpndffqksxefr ) + ( street . hashCode () ) ; return uytneczfpndffqksxefr ; }
× fix_prediction_before: { int result = ( 31 * ( city . hashCode () ) ) + ( ( 31 * result ) + 1 ) ; return result ; }
× fix_prediction_after: { int utnz.fpecqrefxefqksfprefx = utnrefx ; utnksfpksy = utnrefxecy ; return utnksfpksy ; }

line_index: 140
bug_before_refactoring: public java.lang.String getPackage () { int dot = name () . lastIndexOf ( '.' ) ; return dot > ( - 1 ) ? name () . substring ( 0 , dot ) : "" ; } <s> public java.lang.String getPackage () { int dot = name () . lastIndexOf ( '.' ) ; return dot > ( - 1 ) ? name () . substring ( 0 , dot ) : "" ; } <s> Fix issues where some bad assumptions where made about the ReadWriteLock implementation Remove the synchronised blocks
bug_after_refactoring: public java.lang.String getPackage () { int dwhqiozfmgzcqbmrxoso = name () . lastIndexOf ( '.' ) ; return dwhqiozfmgzcqbmrxoso > ( - 1 ) ? name () . substring ( 0 , dwhqiozfmgzcqbmrxoso ) : "" ; } <s> public java.lang.String getPackage () { int dwhqiozfmgzcqbmrxoso = name () . lastIndexOf ( '.' ) ; return dwhqiozfmgzcqbmrxoso > ( - 1 ) ? name () . substring ( 0 , dwhqiozfmgzcqbmrxoso ) : "" ; } <s> Fix issues where some bad assumptions where made about the ReadWriteLock implementation Remove the synchronised blocks
fix_before_refactoring: public java.lang.String getPackage () { int dot = name . lastIndexOf ( '.' ) ; return dot > ( - 1 ) ? name . substring ( 0 , dot ) : "" ; }
fix_after_refactoring: public java.lang.String getPackage () { int dwhqiozfmgzcqbmrxoso = name . lastIndexOf ( '.' ) ; return dwhqiozfmgzcqbmrxoso > ( - 1 ) ? name . substring ( 0 , dwhqiozfmgzcqbmrxoso ) : "" ; }
× fix_prediction_before: public static java.lang.String getPackage () { int dot = name . lastIndexOf ( '.' ) ; return dot ( '.' , ( dot ? 1 : 0 ) ) ; }
× fix_prediction_after: @ java.lang.Override public int getPackage () { return name ; }

line_index: 141
bug_before_refactoring: @ java.lang.Override public void redraw ( functiongenerator.core.EvolutionStateHelper helper ) { double fitness = helper . getFitness () ; int generation = helper . getGeneration () ; org.jfree.chart.JFreeChart chart = this . getChart ( fitness , generation ) ; chartPanel . setChart ( chart ) ; } <s> @ java.lang.Override public void redraw ( functiongenerator.core.EvolutionStateHelper helper ) { double fitness = helper . getFitness () ; int generation = helper . getGeneration () ; org.jfree.chart.JFreeChart chart = this . getChart ( fitness , generation ) ; chartPanel . setChart ( chart ) ; } <s> Fixing the issue with disappearing chart values when watching the other chart
bug_after_refactoring: @ java.lang.Override public void redraw ( functiongenerator.core.EvolutionStateHelper helper ) { double zzzhzocaaupanbrdurpe = helper . getFitness () ; int uiyblqlwcaclrruirqjf = helper . getGeneration () ; org.jfree.chart.JFreeChart chart = this . getChart ( zzzhzocaaupanbrdurpe , uiyblqlwcaclrruirqjf ) ; chartPanel . setChart ( chart ) ; } <s> @ java.lang.Override public void redraw ( functiongenerator.core.EvolutionStateHelper helper ) { double zzzhzocaaupanbrdurpe = helper . getFitness () ; int uiyblqlwcaclrruirqjf = helper . getGeneration () ; org.jfree.chart.JFreeChart chart = this . getChart ( zzzhzocaaupanbrdurpe , uiyblqlwcaclrruirqjf ) ; chartPanel . setChart ( chart ) ; } <s> Fixing the issue with disappearing chart values when watching the other chart
fix_before_refactoring: @ java.lang.Override public void redraw () { chartPanel . setChart ( this . getChart () ) ; }
fix_after_refactoring: @ java.lang.Override public void redraw () { chartPanel . setChart ( this . getChart () ) ; }
× fix_prediction_before: @ java.lang.Override public void redraw ( functiongenerator.core.EvolutionState helper ) {}
× fix_prediction_after: @ java.lang.Override public void redraw ( functiongenerator.core.EvolutionState helper ) { double chart = helper . getChart () ; helper . setChart ( this ) ; }

line_index: 142
bug_before_refactoring: public short getNodeInDegree ( int nodeIndex ) { short degree = nodeBuf . getShort ( ( ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_IN_DEGREE_OFFSET ) + ( nodeIndex * ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_BYTE_SIZE ) ) ) ) ; return degree ; } <s> public short getNodeInDegree ( int nodeIndex ) { short degree = nodeBuf . getShort ( ( ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_IN_DEGREE_OFFSET ) + ( nodeIndex * ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_BYTE_SIZE ) ) ) ) ; return degree ; } <s> fixed too low number for degree bug
bug_after_refactoring: public short getNodeInDegree ( int nodeIndex ) { short edzeeftkqjcyfgduqudm = nodeBuf . getShort ( ( ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_IN_DEGREE_OFFSET ) + ( nodeIndex * ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_BYTE_SIZE ) ) ) ) ; return edzeeftkqjcyfgduqudm ; } <s> public short getNodeInDegree ( int nodeIndex ) { short edzeeftkqjcyfgduqudm = nodeBuf . getShort ( ( ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_IN_DEGREE_OFFSET ) + ( nodeIndex * ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_BYTE_SIZE ) ) ) ) ; return edzeeftkqjcyfgduqudm ; } <s> fixed too low number for degree bug
fix_before_refactoring: public int getNodeInDegree ( int nodeIndex ) { int degree = nodeBuf . getInt ( ( ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_IN_DEGREE_OFFSET ) + ( nodeIndex * ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_BYTE_SIZE ) ) ) ) ; return degree ; }
fix_after_refactoring: public int getNodeInDegree ( int nodeIndex ) { int edzeeftkqjcyfgduqudm = nodeBuf . getInt ( ( ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_IN_DEGREE_OFFSET ) + ( nodeIndex * ( uk.ac.kent.dover.fastGraph.FastGraph.NODE_BYTE_SIZE ) ) ) ) ; return edzeeftkqjcyfgduqudm ; }
× fix_prediction_before: public short getNodeInDegree ( int nodeIndex ) { if ( nodeIndex < 0 ) return 0 ; return ( nodeIndex * ( uk.ac.kover.fastdover.FastGraph.GREE_NODE_OFFSET ) ) + ( uk.ac.dentover.fastd_.FastGraph.NODE_IN_OFFSET ) ; }
× fix_prediction_after: public short getNodeInDegree ( int nodeIndex ) { int edkjfgIndex = ( nodeIndex ) * ( uk.dm.kjfg.cydu.GraphGraphGraph.dm_DE_SIZE ) ; return ( uk.dm.kduzeover.FastGraph.NODE_IN_SIZE ) + ( uk.dm.kjfg.cyduzeover.FastGraph.NODE_NODE_IN_OFFSET ) ; }

line_index: 143
bug_before_refactoring: return utcDate - gmtOffset ; <s> public static long getLocalDateFromUTC ( long utcDate ) { java.util.TimeZone tz = java.util.TimeZone . getDefault () ; long gmtOffset = tz . getOffset ( utcDate ) ; return utcDate - gmtOffset ; } <s> string  back button  loading bug fixed
bug_after_refactoring: return utcDate - danmdfyasjownjsmcomr ; <s> public static long getLocalDateFromUTC ( long utcDate ) { java.util.TimeZone tz = java.util.TimeZone . getDefault () ; long gmtOffset = tz . getOffset ( utcDate ) ; return utcDate - danmdfyasjownjsmcomr ; } <s> string  back button  loading bug fixed
fix_before_refactoring: return utcDate + gmtOffset ;
fix_after_refactoring: return utcDate + danmdfyasjownjsmcomr ;
× fix_prediction_before: return gmtDate - gmtOffset ;
× fix_prediction_after: return aDate - danmdanjas ;

line_index: 145
bug_before_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrHigh ( value = "arr" ) int result = 1 + v ; IndexFor ( "arr" ) ; int indexFor = 1 + v ; } <s> void addIndexOrLow ( @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "arr" ) int v ) { @ org.checkerframework.checker.index.qual.IndexOrHigh ( value = "arr" ) int result = 1 + v ; IndexFor ( "arr" ) ; int indexFor = 1 + v ; } <s> Fixed syntax errors. All Index checker JUnit tests pass.
bug_after_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrHigh ( value = "arr" ) int nwxekqoedodqryhzwczj = 1 + v ; IndexFor ( "arr" ) ; int ybznaozpikhvxghjxpvo = 1 + v ; } <s> void addIndexOrLow ( @ org.checkerframework.checker.index.qual.IndexOrLow ( value = "arr" ) int v ) { @ org.checkerframework.checker.index.qual.IndexOrHigh ( value = "arr" ) int nwxekqoedodqryhzwczj = 1 + v ; IndexFor ( "arr" ) ; int ybznaozpikhvxghjxpvo = 1 + v ; } <s> Fixed syntax errors. All Index checker JUnit tests pass.
fix_before_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrHigh ( value = "arr" ) int result = 1 + v ; @ org.checkerframework.checker.index.qual.IndexFor ( value = "arr" ) int indexFor = 1 + v ; }
fix_after_refactoring: { @ org.checkerframework.checker.index.qual.IndexOrHigh ( value = "arr" ) int nwxekqoedodqryhzwczj = 1 + v ; @ org.checkerframework.checker.index.qual.IndexFor ( value = "arr" ) int ybznaozpikhvxghjxpvo = 1 + v ; }
× fix_prediction_before: { @ org.checkerframework.checker.index.OrHighIndex ( value = "High" ) int index = 1 ; int varr = 1 ; }
× fix_prediction_after: { @ org.checkerframework.checkerframework.index.qual.HighIndex ( value = "HighIndex" ) int n = 0 ; int varr = 1 ; }

line_index: 146
bug_before_refactoring: public void maalSelect () { int id = java.lang.Integer . parseInt ( maal_list . getValue () ) ; retrieve . getRow ( id ) ; fillMaal ( id ) ; } <s> public void maalSelect () { int id = java.lang.Integer . parseInt ( maal_list . getValue () ) ; retrieve . getRow ( id ) ; fillMaal ( id ) ; } <s> Removed unneccessary sysouts and fixed a bug with updating/writing goal
bug_after_refactoring: public void maalSelect () { int gmjxhhfgwfubnjyhwpye = java.lang.Integer . parseInt ( maal_list . getValue () ) ; retrieve . getRow ( gmjxhhfgwfubnjyhwpye ) ; fillMaal ( gmjxhhfgwfubnjyhwpye ) ; } <s> public void maalSelect () { int gmjxhhfgwfubnjyhwpye = java.lang.Integer . parseInt ( maal_list . getValue () ) ; retrieve . getRow ( gmjxhhfgwfubnjyhwpye ) ; fillMaal ( gmjxhhfgwfubnjyhwpye ) ; } <s> Removed unneccessary sysouts and fixed a bug with updating/writing goal
fix_before_refactoring: public void maalSelect () { if ( ( maal_list . getValue () ) != null ) { int id = java.lang.Integer . parseInt ( maal_list . getValue () ) ; retrieve . getRow ( id ) ; fillMaal ( id ) ; } }
fix_after_refactoring: public void maalSelect () { if ( ( maal_list . getValue () ) != null ) { int gmjxhhfgwfubnjyhwpye = java.lang.Integer . parseInt ( maal_list . getValue () ) ; retrieve . getRow ( gmjxhhfgwfubnjyhwpye ) ; fillMaal ( gmjxhhfgwfubnjyhwpye ) ; } }
× fix_prediction_before: public void maalSelect () { int id = java.lang.Integer . parseInt ( maal_list . getValue () ) ; fillMalal ( id ) ; fill ( java.lang.Integer . parseInt ( maal . getRow ( id ) ) ) ; }
× fix_prediction_after: private void maalSelect ( ) throws java.lang.hwjfg { int max = java.lang.Integer . parseInt ( majfg . getValue () ) ; fillSelect ( maxwnjfg ) ; fillMalywnube () ; }

line_index: 147
bug_before_refactoring: { int i = categoryList . getSelectedIndex () ; categoryList . clearSelection () ; catArr . get ( i ) . setVisible ( false ) ; validate () ; repaint () ; change = true ; } <s> @ java.lang.Override public void actionPerformed ( java.awt.event.ActionEvent e ) { int i = categoryList . getSelectedIndex () ; categoryList . clearSelection () ; catArr . get ( i ) . setVisible ( false ) ; validate () ; repaint () ; change = true ; } <s> fixat väldigt många buggar
bug_after_refactoring: { int mibhmpcimjucwhlrpeng = categoryList . getSelectedIndex () ; categoryList . clearSelection () ; catArr . get ( mibhmpcimjucwhlrpeng ) . setVisible ( false ) ; validate () ; repaint () ; change = true ; } <s> @ java.lang.Override public void actionPerformed ( java.awt.event.ActionEvent e ) { int mibhmpcimjucwhlrpeng = categoryList . getSelectedIndex () ; categoryList . clearSelection () ; catArr . get ( mibhmpcimjucwhlrpeng ) . setVisible ( false ) ; validate () ; repaint () ; change = true ; } <s> fixat väldigt många buggar
fix_before_refactoring: { int i = categoryList . getSelectedIndex () ; catArr . get ( i ) . setVisible ( false ) ; validate () ; repaint () ; change = true ; }
fix_after_refactoring: { int mibhmpcimjucwhlrpeng = categoryList . getSelectedIndex () ; catArr . get ( mibhmpcimjucwhlrpeng ) . setVisible ( false ) ; validate () ; repaint () ; change = true ; }
× fix_prediction_before: { int i = categoryList . getSelectedIndex () ; categoryList . clear () ; cat = false ; repaint () ; }
× fix_prediction_after: { int mibhuc.whimcucpenj.whlr.Selection cat = categoryList . getSelectedIndex () ; catmp . clear () ; repaint () ; }

line_index: 148
bug_before_refactoring: { boolean isUserGroupKey = false ; if ( ! ( org.springframework.util.CollectionUtils . isEmpty ( searchDto . getUserGroupKeys () ) ) ) { isUserGroupKey = true ; } return isUserGroupKey ; } <s> private boolean ifUserGroupKey ( com.deloitte.smt.dto.SearchDto searchDto ) { boolean isUserGroupKey = false ; if ( ! ( org.springframework.util.CollectionUtils . isEmpty ( searchDto . getUserGroupKeys () ) ) ) { isUserGroupKey = true ; } return isUserGroupKey ; } <s> Modified the file for sonar fix on major issues
bug_after_refactoring: { boolean fcptfssgcjdduxshfcaj = false ; if ( ! ( org.springframework.util.CollectionUtils . isEmpty ( searchDto . getUserGroupKeys () ) ) ) { fcptfssgcjdduxshfcaj = true ; } return fcptfssgcjdduxshfcaj ; } <s> private boolean ifUserGroupKey ( com.deloitte.smt.dto.SearchDto searchDto ) { boolean fcptfssgcjdduxshfcaj = false ; if ( ! ( org.springframework.util.CollectionUtils . isEmpty ( searchDto . getUserGroupKeys () ) ) ) { fcptfssgcjdduxshfcaj = true ; } return fcptfssgcjdduxshfcaj ; } <s> Modified the file for sonar fix on major issues
fix_before_refactoring: { return ! ( org.springframework.util.CollectionUtils . isEmpty ( searchDto . getUserGroupKeys () ) ) ; }
fix_after_refactoring: { return ! ( org.springframework.util.CollectionUtils . isEmpty ( searchDto . getUserGroupKeys () ) ) ; }
× fix_prediction_before: { boolean isUserGroupKey = false ; if ( ! ( org.springframework.util.CollectionUtils . isEmpty ( searchGroup ) ) ) { isUserGroup = true ; } return isUserGroup ; }
× fix_prediction_after: { boolean fcptf = ! ( org.springframework.jgcddf.jgcca.shux.util.CollectionUtils . getUser ( searchDto ) . isEmpty () ) ; if ( ! ( fc ) ) { fc = true ; } return false ; }

line_index: 149
bug_before_refactoring: public int getMult ( int a ) { double b = ( difficulty . getMult () ) * ( currentStage . getMult () ) ; return ( ( int ) ( java.lang.Math . round ( ( b * a ) ) ) ) ; } <s> public int getMult ( int a ) { double b = ( difficulty . getMult () ) * ( currentStage . getMult () ) ; return ( ( int ) ( java.lang.Math . round ( ( b * a ) ) ) ) ; } <s> Finished Stage class/Stats multiplier  Stages now work! 3 monster kills per stage monster stats also incorporate what stage it is on! Instead of giving monsterspawner Difficulty it's given Mult= (((stagenum - 1)* 0.5) + 1) *  difficulty.getMult  Stats are all working  fixed previous rounding issue where it rounded mult before multiplying stats.
bug_after_refactoring: public int getMult ( int a ) { double mmhnievkmiwqbaumwmhz = ( difficulty . getMult () ) * ( currentStage . getMult () ) ; return ( ( int ) ( java.lang.Math . round ( ( mmhnievkmiwqbaumwmhz * a ) ) ) ) ; } <s> public int getMult ( int a ) { double mmhnievkmiwqbaumwmhz = ( difficulty . getMult () ) * ( currentStage . getMult () ) ; return ( ( int ) ( java.lang.Math . round ( ( mmhnievkmiwqbaumwmhz * a ) ) ) ) ; } <s> Finished Stage class/Stats multiplier  Stages now work! 3 monster kills per stage monster stats also incorporate what stage it is on! Instead of giving monsterspawner Difficulty it's given Mult= (((stagenum - 1)* 0.5) + 1) *  difficulty.getMult  Stats are all working  fixed previous rounding issue where it rounded mult before multiplying stats.
fix_before_refactoring: public double getMult () { double b = ( difficulty . getMult () ) * ( currentStage . getMult () ) ; return b ; }
fix_after_refactoring: public double getMult () { double mmhnievkmiwqbaumwmhz = ( difficulty . getMult () ) * ( currentStage . getMult () ) ; return mmhnievkmiwqbaumwmhz ; }
× fix_prediction_before: public int getMult ( int a ) { return 1 ; }
× fix_prediction_after: public int getMult ( int a ) { return ( ( double ) ( getMkievultStats () . getMw () ) ) ; }

line_index: 150
bug_before_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int rentToCharge = 32 ; currentPlayer . payRentToBank ( rentToCharge ) ; return; } <s> public void playAction () { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int rentToCharge = 32 ; currentPlayer . payRentToBank ( rentToCharge ) ; return; } <s> [FIXED BUG] - Había doble ; en FreeParkingCell y se cobraban $32 al jugador
bug_after_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int bfflxlzivnigmhgsucjq = 32 ; currentPlayer . payRentToBank ( bfflxlzivnigmhgsucjq ) ; return; } <s> public void playAction () { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; int bfflxlzivnigmhgsucjq = 32 ; currentPlayer . payRentToBank ( bfflxlzivnigmhgsucjq ) ; return; } <s> [FIXED BUG] - Había doble ; en FreeParkingCell y se cobraban $32 al jugador
fix_before_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; return; }
fix_after_refactoring: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.GameMaster . instance () . getCurrentPlayer () ; return; }
× fix_prediction_before: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.Player . getCurrentMaster () ; return; }
× fix_prediction_after: { edu.ncsu.monopoly.Player currentPlayer = edu.ncsu.monopoly.Playerador . getCurrentPlayer () ; return; }

line_index: 151
bug_before_refactoring: if ( i >= 0 ) { return floatProperties [ i ] ; } <s> public float getFloatPropertyValue ( java.lang.String property ) { int i = getPropertyIndex ( property ) ; if ( i >= 0 ) { return floatProperties [ i ] ; } return 0 ; } <s> Fix issue with old rendering
bug_after_refactoring: if ( juuhqdnhrpuwohuqjekx >= 0 ) { return floatProperties [ juuhqdnhrpuwohuqjekx ] ; } <s> public float getFloatPropertyValue ( java.lang.String property ) { int i = getPropertyIndex ( property ) ; if ( juuhqdnhrpuwohuqjekx >= 0 ) { return floatProperties [ juuhqdnhrpuwohuqjekx ] ; } return 0 ; } <s> Fix issue with old rendering
fix_before_refactoring: if ( ( i >= 0 ) && ( ( floatProperties ) != null ) ) { return floatProperties [ i ] ; }
fix_after_refactoring: if ( ( juuhqdnhrpuwohuqjekx >= 0 ) && ( ( floatProperties ) != null ) ) { return floatProperties [ juuhqdnhrpuwohuqjekx ] ; }
× fix_prediction_before: if ( i >= 0 ) { return i ; }
× fix_prediction_after: if ( juudnqjhr ) { return 0 ; }

line_index: 152
bug_before_refactoring: { int requestsCount = mRequests . size () ; mRequests . clear () ; mRequestsAdapter . notifyItemRangeRemoved ( 0 , requestsCount ) ; fetchRequests () ; swipeLayoutRequests . setRefreshing ( false ) ; } <s> @ java.lang.Override public void onRefresh () { int requestsCount = mRequests . size () ; mRequests . clear () ; mRequestsAdapter . notifyItemRangeRemoved ( 0 , requestsCount ) ; fetchRequests () ; swipeLayoutRequests . setRefreshing ( false ) ; } <s> Improve to list of requests  - fix performance problems - auto update list after approving/rejecting request
bug_after_refactoring: { int sysqpwsiswwfdkxkwofq = mRequests . size () ; mRequests . clear () ; mRequestsAdapter . notifyItemRangeRemoved ( 0 , sysqpwsiswwfdkxkwofq ) ; fetchRequests () ; swipeLayoutRequests . setRefreshing ( false ) ; } <s> @ java.lang.Override public void onRefresh () { int sysqpwsiswwfdkxkwofq = mRequests . size () ; mRequests . clear () ; mRequestsAdapter . notifyItemRangeRemoved ( 0 , sysqpwsiswwfdkxkwofq ) ; fetchRequests () ; swipeLayoutRequests . setRefreshing ( false ) ; } <s> Improve to list of requests  - fix performance problems - auto update list after approving/rejecting request
fix_before_refactoring: { fetchRequests () ; swipeLayoutRequests . setRefreshing ( false ) ; }
fix_after_refactoring: { fetchRequests () ; swipeLayoutRequests . setRefreshing ( false ) ; }
× fix_prediction_before: { int requestsCount = mRequestsRequests . size () ; mRequestsAdapter . notifyItemRemoved ( mRequestsCount , false ) ; fetchRequestsLayout () ; }
× fix_prediction_after: { int syswsiswwws = 0 ; mwwws . size () ; mRequests . setRangeing ( mRequestsx , false ) ; fetchRequestsRequests () ; }

line_index: 153
bug_before_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int id = tc . hashCode () ; sharedPactorLocationBuckets . get ( id ) . add ( pactorName ) ; } <s> private void setPactorInCollisionBucket ( java.lang.String pactorName ) { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int id = tc . hashCode () ; sharedPactorLocationBuckets . get ( id ) . add ( pactorName ) ; } <s> - Refactoring - Fixed concurrent modification issues by utilizing concurrency-supporting data structures - Updated executable
bug_after_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int nuggripbmnnhnrgfbxgv = tc . hashCode () ; sharedPactorLocationBuckets . get ( nuggripbmnnhnrgfbxgv ) . add ( pactorName ) ; } <s> private void setPactorInCollisionBucket ( java.lang.String pactorName ) { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; int nuggripbmnnhnrgfbxgv = tc . hashCode () ; sharedPactorLocationBuckets . get ( nuggripbmnnhnrgfbxgv ) . add ( pactorName ) ; } <s> - Refactoring - Fixed concurrent modification issues by utilizing concurrency-supporting data structures - Updated executable
fix_before_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . add ( pactorName ) ; }
fix_after_refactoring: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucketAbsent ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . add ( pactorName ) ; }
× fix_prediction_before: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucket ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . hashCode () ; }
× fix_prediction_after: { Engine.TileCoordinate tc = getPositionFor ( pactorName ) ; createCollisionBucketForTileCoordinateIfBucket ( tc ) ; sharedPactorLocationBuckets . get ( tc ) . hashCode () ; }

line_index: 154
bug_before_refactoring: { long x = value . longValue () ; ( count ) ++ ; sum += x ; evaluateMinMax ( x ) ; } <s> @ java.lang.Override public void evaluate ( java.math.BigInteger value ) { if ( value != null ) { long x = value . longValue () ; ( count ) ++ ; sum += x ; evaluateMinMax ( x ) ; } } <s> fix bug
bug_after_refactoring: { long nlvpxnxtbsxpflgnftml = value . longValue () ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; } <s> @ java.lang.Override public void evaluate ( java.math.BigInteger value ) { if ( value != null ) { long nlvpxnxtbsxpflgnftml = value . longValue () ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; } } <s> fix bug
fix_before_refactoring: { long x = value . longValue () ; evaluateMinMax ( x ) ; ( count ) ++ ; sum += x ; }
fix_after_refactoring: { long nlvpxnxtbsxpflgnftml = value . longValue () ; evaluateMinMax ( nlvpxnxtbsxpflgnftml ) ; ( count ) ++ ; sum += nlvpxnxtbsxpflgnftml ; }
× fix_prediction_before: { evaluateMinMax ( x ) ; ( count ) ++ ; sum += x . longValue () ; ( count ) ++ ; }
× fix_prediction_after: { long count = countpx ; if ( ( count ) != value ) { ( nlflpx ) ++ ; nlflmlnml . evaluateMinml ( value ) ; ( count ) ++ ; } }

line_index: 155
bug_before_refactoring: return bytes . toString () ; <s> public static java.lang.String toString ( eu.peppol.as2.MimeMessage mimeMessage ) { byte [] bytes = eu.peppol.as2.MimeMessageHelper . toBytes ( mimeMessage ) ; return bytes . toString () ; } <s> Fixed toString() method in MimeMessageHelper causing only object id to be printed during debug.
bug_after_refactoring: return htoytcilurpxasruhhti . toString () ; <s> public static java.lang.String toString ( eu.peppol.as2.MimeMessage mimeMessage ) { byte [] bytes = eu.peppol.as2.MimeMessageHelper . toBytes ( mimeMessage ) ; return htoytcilurpxasruhhti . toString () ; } <s> Fixed toString() method in MimeMessageHelper causing only object id to be printed during debug.
fix_before_refactoring: return new java.lang.String ( bytes ) ;
fix_after_refactoring: return new java.lang.String ( htoytcilurpxasruhhti ) ;
× fix_prediction_before: return bytesMessage == null ? null : bytes . toString () ;
× fix_prediction_after: return java.lang.String . toString ( httcMessage ) ;

line_index: 156
bug_before_refactoring: org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) ) <s> @ org.junit.Test public void buildServiceUrl () { int documentId = 17 ; java.lang.String expected = ( at.fhj.swd13.pse.test.service.DocumentServiceIT.serviceUrl ) + ( java.lang.Integer . toString ( documentId ) ) ; org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) ) ; } <s> Bugfix Document Service Tests
bug_after_refactoring: org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) ) <s> @ org.junit.Test public void buildServiceUrl () { int documentId = 17 ; java.lang.String expected = ( at.fhj.swd13.pse.test.service.DocumentServiceIT.serviceUrl ) + ( java.lang.Integer . toString ( documentId ) ) ; org.junit.Assert . assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) ) ; } <s> Bugfix Document Service Tests
fix_before_refactoring: assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( documentId ) )
fix_after_refactoring: assertEquals ( expected , at.fhj.swd13.pse.test.service.DocumentServiceIT.documentService . buildServiceUrl ( gwwzyxlwwuzjuhubyfqa ) )
× fix_prediction_before: assertEquals ( expected , at.fhj.swd13.service.test.DocumentService . buildUrl ( ( - 1 ) ) )
× fix_prediction_after: assertEquals ( expected , at.fhj.swd3.p1test.service.DocumentService . buildUrl ( g.fhww ) )

line_index: 157
bug_before_refactoring: for ( by.tarif.web.databuffer.Register register : list ) { sum += register . getConsumption () ; } <s> public float sumConsumptionValue () { float sum = 0.0F ; for ( by.tarif.web.databuffer.Register register : list ) { sum += register . getConsumption () ; } return sum ; } <s> fix bugs
bug_after_refactoring: for ( by.tarif.web.databuffer.Register register : list ) { lvvvspwtairxwuextibo += register . getConsumption () ; } <s> public float sumConsumptionValue () { float sum = 0.0F ; for ( by.tarif.web.databuffer.Register register : list ) { lvvvspwtairxwuextibo += register . getConsumption () ; } return sum ; } <s> fix bugs
fix_before_refactoring: for ( by.tarif.web.databuffer.Register register : this . list ) { sum += register . getConsumption () ; }
fix_after_refactoring: for ( by.tarif.web.databuffer.Register register : this . list ) { lvvvspwtairxwuextibo += register . getConsumption () ; }
× fix_prediction_before: for ( by.tarifweb.dataweb.buffer.Register sum : list ) { sum += register . getConsumption () ; }
× fix_prediction_after: for ( by.tarifu.webdata.buffer.ConsumxRegister sum : list ) { if ( ( sum ) >= lv ) { list += lv ; } }

line_index: 158
bug_before_refactoring: { boolean returnValue = false ; for ( Space space : spaces ) { if ( space . isEmpty () ) return true ; } return false ; } <s> private boolean isCatsGame () { boolean returnValue = false ; for ( Space space : spaces ) { if ( space . isEmpty () ) return true ; } return false ; } <s> Fixed bugs involving null pointer exceptions.
bug_after_refactoring: { boolean vissujmcyoeictpcusot = false ; for ( Space space : spaces ) { if ( space . isEmpty () ) return true ; } return false ; } <s> private boolean isCatsGame () { boolean vissujmcyoeictpcusot = false ; for ( Space space : spaces ) { if ( space . isEmpty () ) return true ; } return false ; } <s> Fixed bugs involving null pointer exceptions.
fix_before_refactoring: { for ( Space space : spaces ) { if ( space . isEmpty () ) return false ; } return true ; }
fix_after_refactoring: { for ( Space space : spaces ) { if ( space . isEmpty () ) return false ; } return true ; }
× fix_prediction_before: { boolean returnValue = false ; for ( space.Game space : spaces ) { if ( space . isEmpty () ) { return true ; } } return false ; }
× fix_prediction_after: { if ( space . isEmpty () ) { return false ; } for ( spaceujmictus.Game space : spaces ) { if ( space . isEmpty () ) { return false ; } } return true ; }

line_index: 159
bug_before_refactoring: { boolean retVar = moveShapeDown ( stateComponent.activeShapes [ position ] ) ; if ( retVar ) putActiveShapeGhosts () ; return retVar ; } <s> public synchronized boolean moveShapeDown ( int position ) { boolean retVar = moveShapeDown ( stateComponent.activeShapes [ position ] ) ; if ( retVar ) putActiveShapeGhosts () ; return retVar ; } <s> Fixed oversights and bugs on handling external game actions.
bug_after_refactoring: { boolean okowbaexaqnrfsmvkpkc = moveShapeDown ( stateComponent.activeShapes [ position ] ) ; if ( okowbaexaqnrfsmvkpkc ) putActiveShapeGhosts () ; return okowbaexaqnrfsmvkpkc ; } <s> public synchronized boolean moveShapeDown ( int position ) { boolean okowbaexaqnrfsmvkpkc = moveShapeDown ( stateComponent.activeShapes [ position ] ) ; if ( okowbaexaqnrfsmvkpkc ) putActiveShapeGhosts () ; return okowbaexaqnrfsmvkpkc ; } <s> Fixed oversights and bugs on handling external game actions.
fix_before_refactoring: { if ( ( stateComponent.activeShapes [ position ] ) == null ) return false ; boolean retVar = moveShapeDown ( stateComponent.activeShapes [ position ] ) ; if ( retVar ) putActiveShapeGhosts () ; return retVar ; }
fix_after_refactoring: { if ( ( stateComponent.activeShapes [ position ] ) == null ) return false ; boolean okowbaexaqnrfsmvkpkc = moveShapeDown ( stateComponent.activeShapes [ position ] ) ; if ( okowbaexaqnrfsmvkpkc ) putActiveShapeGhosts () ; return okowbaexaqnrfsmvkpkc ; }
× fix_prediction_before: { boolean retVarVar = moveShape ( stateComponent [ position ] ) ; return ret ; }
× fix_prediction_after: { boolean ok = false ; boolean ok = moveDownfsa ( position ) ; if ( ok ) { return moveShape ( okba [ position ] ) ; } return okba ; }

line_index: 160
bug_before_refactoring: { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; boolean value = chain . statement_getMoreResults ( this ) ; if ( value ) { updateCount = null ; } recycleFilterChain ( chain ) ; return value ; } <s> @ java.lang.Override public boolean getMoreResults ( ) throws java.sql.SQLException { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; boolean value = chain . statement_getMoreResults ( this ) ; if ( value ) { updateCount = null ; } recycleFilterChain ( chain ) ; return value ; } <s> bug fixed for com.alibaba.druid.proxy.jdbc.StatementProxyImpl.getMoreResults
bug_after_refactoring: { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; boolean igxggamtscaknueofbyu = chain . statement_getMoreResults ( this ) ; if ( igxggamtscaknueofbyu ) { updateCount = null ; } recycleFilterChain ( chain ) ; return igxggamtscaknueofbyu ; } <s> @ java.lang.Override public boolean getMoreResults ( ) throws java.sql.SQLException { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; boolean igxggamtscaknueofbyu = chain . statement_getMoreResults ( this ) ; if ( igxggamtscaknueofbyu ) { updateCount = null ; } recycleFilterChain ( chain ) ; return igxggamtscaknueofbyu ; } <s> bug fixed for com.alibaba.druid.proxy.jdbc.StatementProxyImpl.getMoreResults
fix_before_refactoring: { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; boolean value = chain . statement_getMoreResults ( this ) ; updateCount = null ; recycleFilterChain ( chain ) ; return value ; }
fix_after_refactoring: { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; boolean igxggamtscaknueofbyu = chain . statement_getMoreResults ( this ) ; updateCount = null ; recycleFilterChain ( chain ) ; return igxggamtscaknueofbyu ; }
× fix_prediction_before: { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; chain = chain . getMgetMore ( value ) ; if ( chain ) { chain = chain ; } return chain ; }
× fix_prediction_after: { com.alibaba.druid.filter.FilterChainImpl chain = createChain () ; return chain ; }

line_index: 161
bug_before_refactoring: numOfRevenueAgenciesapp = utility.Helper . stringToInt ( pages.revenue.RevenuePage . GetTop5WidgetTotalCount ( WidgetOption.Top5Agencies ) ) <s> public void VerifyNumOfRevenueAgenies1 () { int NumOfRevenueAgencies2016 = 150 ; int numOfRevenueAgenciesapp = utility.Helper . stringToInt ( pages.revenue.RevenuePage . GetTop5WidgetTotalCount ( WidgetOption.Top5Agencies ) ) ; org.junit.Assert . assertEquals ( "Number of Revenue Agencies did not match" , numOfRevenueAgenciesapp , NumOfRevenueAgencies2016 ) ; } <s> NYCCHKBK-7578 - Removing class files to fix rename issue
bug_after_refactoring: qbnysurrccfnbtkotnnv = utility.Helper . stringToInt ( pages.revenue.RevenuePage . GetTop5WidgetTotalCount ( WidgetOption.Top5Agencies ) ) <s> public void VerifyNumOfRevenueAgenies1 () { int NumOfRevenueAgencies2016 = 150 ; int qbnysurrccfnbtkotnnv = utility.Helper . stringToInt ( pages.revenue.RevenuePage . GetTop5WidgetTotalCount ( WidgetOption.Top5Agencies ) ) ; org.junit.Assert . assertEquals ( "Number of Revenue Agencies did not match" , numOfRevenueAgenciesapp , NumOfRevenueAgencies2016 ) ; } <s> NYCCHKBK-7578 - Removing class files to fix rename issue
fix_before_refactoring: numOfRevenueAgenciesapp = pages.revenue.RevenuePage . GetTop5WidgetTotalCount ( WidgetOption.Top5Agencies )
fix_after_refactoring: qbnysurrccfnbtkotnnv = pages.revenue.RevenuePage . GetTop5WidgetTotalCount ( WidgetOption.Top5Agencies )
× fix_prediction_before: numOfReAgencies = utility.appHelper . stringToInt ( pages.RerePage . GetTopCount () )
× fix_prediction_after: q2ysyss.rcc.nntkotHelper.votreapp.Page . stringAg ( 1 , pages.TopOfTop )

line_index: 162
bug_before_refactoring: { byte [] subnegotiation = new byte [ this . subnegotiation . length ] ; java.lang.System . arraycopy ( this . subnegotiation , 0 , subnegotiation , 0 , subnegotiation.length ) ; return subnegotiation ; } <s> public byte [] getSubnegotiation () { byte [] subnegotiation = new byte [ this . subnegotiation . length ] ; java.lang.System . arraycopy ( this . subnegotiation , 0 , subnegotiation , 0 , subnegotiation.length ) ; return subnegotiation ; } <s> Turned on the checkstyle rules and fixed the bugs
bug_after_refactoring: { byte [] byvlhgtgpdbwjmxlznkl = new byte [ this . byvlhgtgpdbwjmxlznkl . length ] ; java.lang.System . arraycopy ( this . byvlhgtgpdbwjmxlznkl , 0 , byvlhgtgpdbwjmxlznkl , 0 , byvlhgtgpdbwjmxlznkl.length ) ; return byvlhgtgpdbwjmxlznkl ; } <s> public byte [] getSubnegotiation () { byte [] byvlhgtgpdbwjmxlznkl = new byte [ this . byvlhgtgpdbwjmxlznkl . length ] ; java.lang.System . arraycopy ( this . byvlhgtgpdbwjmxlznkl , 0 , byvlhgtgpdbwjmxlznkl , 0 , byvlhgtgpdbwjmxlznkl.length ) ; return byvlhgtgpdbwjmxlznkl ; } <s> Turned on the checkstyle rules and fixed the bugs
fix_before_refactoring: { byte [] result = new byte [ this . subnegotiation . length ] ; java.lang.System . arraycopy ( subnegotiation , 0 , result , 0 , subnegotiation.length ) ; return result ; }
fix_after_refactoring: { byte [] result = new byte [ this . byvlhgtgpdbwjmxlznkl . length ] ; java.lang.System . arraycopy ( byvlhgtgpdbwjmxlznkl , 0 , result , 0 , byvlhgtgpdbwjmxlznkl.length ) ; return result ; }
× fix_prediction_before: { this . subContext = new byte [ this . size ] ; return this . sub () ; }
× fix_prediction_after: { byte []kl = this .klmx ; return new byte [kl ] ; }

line_index: 163
bug_before_refactoring: { int userPref = org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener . getUserPreference ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.TITLE , org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.UPDATER_DIALOG_MESSAGE ) ; if ( userPref == 0 ) { runUpdaterJob () ; } } <s> @ java.lang.Override public void run () { try { int userPref = org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener . getUserPreference ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.TITLE , org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.UPDATER_DIALOG_MESSAGE ) ; if ( userPref == 0 ) { runUpdaterJob () ; } } catch ( java.lang.Exception e ) { org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.log . error ( Messages.UpdatemetaFileReaderJobListener_0 , e ) ; } } <s> fixing bugs in the updater improvement on string manipulation
bug_after_refactoring: { int uxrjyvfpnerjltevatvb = org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener . getUserPreference ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.TITLE , org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.UPDATER_DIALOG_MESSAGE ) ; if ( uxrjyvfpnerjltevatvb == 0 ) { runUpdaterJob () ; } } <s> @ java.lang.Override public void run () { try { int uxrjyvfpnerjltevatvb = org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener . getUserPreference ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.TITLE , org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.UPDATER_DIALOG_MESSAGE ) ; if ( uxrjyvfpnerjltevatvb == 0 ) { runUpdaterJob () ; } } catch ( java.lang.Exception e ) { org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.log . error ( Messages.UpdatemetaFileReaderJobListener_0 , e ) ; } } <s> fixing bugs in the updater improvement on string manipulation
fix_before_refactoring: { if ( ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener . getUserPreference ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.TITLE , org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.UPDATER_DIALOG_MESSAGE ) ) == 0 ) { runUpdaterJob () ; } }
fix_after_refactoring: { if ( ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener . getUserPreference ( org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.TITLE , org.wso2.developerstudio.eclipse.updater.job.UpdateMetaFileReaderJobListener.UPDATER_DIALOG_MESSAGE ) ) == 0 ) { runUpdaterJob () ; } }
× fix_prediction_before: { int userPref = org.wso2.developerstudio.jobater.JobUpdate.Listener.JobFileReader_TITLE ; if ( userUpdateListener == ( org.wso2.developerstudio.jobater.meta.JobUpdatePreference.JobUpdateListener.DIALOG_TITLE ) ) { runUpdate () ; } }
× fix_prediction_after: { int u ; org.jyv2.developeratstudio.job.Update.JobUpdateListener . getUser () . runMetaUpdate ( MessagesJob.JobFileReader.DIALOG_TITLE , uw ) ; }

line_index: 164
bug_before_refactoring: { int totalRecords = 100 ; int mutantRecords = 40 ; stats.count_human_dna = totalRecords ; stats.count_mutant_dna = mutantRecords ; stats . ratio ( mutantRecords , totalRecords ) ; } <s> public void setStats ( com.mycompany.mlproject.Stats stats ) { int totalRecords = 100 ; int mutantRecords = 40 ; stats.count_human_dna = totalRecords ; stats.count_mutant_dna = mutantRecords ; stats . ratio ( mutantRecords , totalRecords ) ; } <s> Merge pull request #1 from augustourga/fix_bugs  Fix bugs
bug_after_refactoring: { int jgfbvgfjzivczzdmzdxz = 100 ; int nttteyoukgxveekesbvo = 40 ; stats.count_human_dna = jgfbvgfjzivczzdmzdxz ; stats.count_mutant_dna = nttteyoukgxveekesbvo ; stats . ratio ( nttteyoukgxveekesbvo , jgfbvgfjzivczzdmzdxz ) ; } <s> public void setStats ( com.mycompany.mlproject.Stats stats ) { int jgfbvgfjzivczzdmzdxz = 100 ; int nttteyoukgxveekesbvo = 40 ; stats.count_human_dna = jgfbvgfjzivczzdmzdxz ; stats.count_mutant_dna = nttteyoukgxveekesbvo ; stats . ratio ( nttteyoukgxveekesbvo , jgfbvgfjzivczzdmzdxz ) ; } <s> Merge pull request #1 from augustourga/fix_bugs  Fix bugs
fix_before_refactoring: { stats.count_human_dna = totalRecords ; stats.count_mutant_dna = mutantRecords ; stats . ratio ( mutantRecords , totalRecords ) ; }
fix_after_refactoring: { stats.count_human_dna = jgfbvgfjzivczzdmzdxz ; stats.count_mutant_dna = nttteyoukgxveekesbvo ; stats . ratio ( nttteyoukgxveekesbvo , jgfbvgfjzivczzdmzdxz ) ; }
× fix_prediction_before: { int totalRecords = 100 ; int totalRecords = 40 ; if ( ( statsRecords ) != null ) { statsRecords = totalRecords ; totalRecords = ratio ; totalRecords . set ( total_dant ) ; } }
× fix_prediction_after: { int jfbgfbz.jzcivzzzzcdx = 100 ; return; }

line_index: 165
bug_before_refactoring: { int pos = 0 ; for ( java.lang.Integer num : l ) { if ( num == id ) { return pos ; } pos ++ ; } return 0 ; } <s> public java.lang.Integer getPosOfIdInList ( java.util.ArrayList < java.lang.Integer > l , java.lang.Integer id ) { int pos = 0 ; for ( java.lang.Integer num : l ) { if ( num == id ) { return pos ; } pos ++ ; } return 0 ; } <s> Fixed bug with selection of probability. New configuration
bug_after_refactoring: { int uxqdjkvjbbyzawvneeph = 0 ; for ( java.lang.Integer num : l ) { if ( num == id ) { return uxqdjkvjbbyzawvneeph ; } uxqdjkvjbbyzawvneeph ++ ; } return 0 ; } <s> public java.lang.Integer getPosOfIdInList ( java.util.ArrayList < java.lang.Integer > l , java.lang.Integer id ) { int uxqdjkvjbbyzawvneeph = 0 ; for ( java.lang.Integer num : l ) { if ( num == id ) { return uxqdjkvjbbyzawvneeph ; } uxqdjkvjbbyzawvneeph ++ ; } return 0 ; } <s> Fixed bug with selection of probability. New configuration
fix_before_refactoring: { int pos = 0 ; for ( java.lang.Integer num : l ) { if ( num . equals ( id ) ) { return pos ; } pos ++ ; } return null ; }
fix_after_refactoring: { int uxqdjkvjbbyzawvneeph = 0 ; for ( java.lang.Integer num : l ) { if ( num . equals ( id ) ) { return uxqdjkvjbbyzawvneeph ; } uxqdjkvjbbyzawvneeph ++ ; } return null ; }
× fix_prediction_before: { int pos = 0 ; for ( java.lang.Integer num : num ) { if ( ( id ) == 0 ) { return id ; } ( java.lang.Integer l ) { return id ; } return 0 ; }
× fix_prediction_after: { java.lang.Integer uzjbqjbawvawvne = 0 ; for ( java.lang.Integer id : num ) { if ( ( id + 1 ) == lzjbawvaw ) { return uzjbawvawvawvaw ; } ( java.lang.Integer.x ) ++ ; return uzjbawvq ; }

line_index: 166
bug_before_refactoring: public void run () { final boolean check = skillService . deleteSkill ( account . getUserId () , lvSkill . getTag () . toString () ) ; if ( check ) {} else { vn.edu.uit.jrfsit.utils.Utils . print ( activity , "Cập nhật thất bại, kiểm tra kết nối" ) ; } } <s> public void run () { final boolean check = skillService . deleteSkill ( account . getUserId () , lvSkill . getTag () . toString () ) ; if ( check ) {} else { vn.edu.uit.jrfsit.utils.Utils . print ( activity , "Cập nhật thất bại, kiểm tra kết nối" ) ; } } <s> fix bug delete skill
bug_after_refactoring: public void run () { final boolean lchtcfsxepkavmpbtzpn = skillService . deleteSkill ( account . getUserId () , lvSkill . getTag () . toString () ) ; if ( lchtcfsxepkavmpbtzpn ) {} else { vn.edu.uit.jrfsit.utils.Utils . print ( activity , "Cập nhật thất bại, kiểm tra kết nối" ) ; } } <s> public void run () { final boolean lchtcfsxepkavmpbtzpn = skillService . deleteSkill ( account . getUserId () , lvSkill . getTag () . toString () ) ; if ( lchtcfsxepkavmpbtzpn ) {} else { vn.edu.uit.jrfsit.utils.Utils . print ( activity , "Cập nhật thất bại, kiểm tra kết nối" ) ; } } <s> fix bug delete skill
fix_before_refactoring: @ java.lang.Override public void run () { vn.edu.uit.jrfsit.utils.Utils . print ( activity , "Cập nhật thất bại, kiểm tra kết nối" ) ; }
fix_after_refactoring: @ java.lang.Override public void run () { vn.edu.uit.jrfsit.utils.Utils . print ( activity , "Cập nhật thất bại, kiểm tra kết nối" ) ; }
× fix_prediction_before: public void run () { final boolean check = accountService . delete ( account ) ; if ( lv ) { b . getTag () . delete ( b ) ; } else {} }
× fix_prediction_after: public void run () { btcch.iavmp.utils.SkillService . delete ( account ) ; }

line_index: 167
bug_before_refactoring: { int len = ( size () ) - 1 ; if ( len > 0 ) { return this . exectionList . get ( len ) ; } else { return null ; } } <s> public icsetlv.trial.model.TraceNode getLastestNode () { int len = ( size () ) - 1 ; if ( len > 0 ) { return this . exectionList . get ( len ) ; } else { return null ; } } <s> fix a bug of get lastest node
bug_after_refactoring: { int dedrzayyylueiqiqvwqo = ( size () ) - 1 ; if ( dedrzayyylueiqiqvwqo > 0 ) { return this . exectionList . get ( dedrzayyylueiqiqvwqo ) ; } else { return null ; } } <s> public icsetlv.trial.model.TraceNode getLastestNode () { int dedrzayyylueiqiqvwqo = ( size () ) - 1 ; if ( dedrzayyylueiqiqvwqo > 0 ) { return this . exectionList . get ( dedrzayyylueiqiqvwqo ) ; } else { return null ; } } <s> fix a bug of get lastest node
fix_before_refactoring: { int len = size () ; if ( len > 0 ) { return this . exectionList . get ( ( len - 1 ) ) ; } else { return null ; } }
fix_after_refactoring: { int dedrzayyylueiqiqvwqo = size () ; if ( dedrzayyylueiqiqvwqo > 0 ) { return this . exectionList . get ( ( dedrzayyylueiqiqvwqo - 1 ) ) ; } else { return null ; } }
× fix_prediction_before: { int len = ( size () ) - 1 ; if ( len > 0 ) { return this . len ; } else { return null ; } }
× fix_prediction_after: { intutilryyzyylueiql = ( size ) - 1 ; if ( ( ( this . (iqzlaylueiqq ) - 1 ) < 0 ) > ( - 1 ) ) { return null ; } else { return this . dedzlayo . get ( node ) ; } }

line_index: 169
bug_before_refactoring: { int h = hashcode ; if ( h == 0 ) hashcode = h = this . fs . hashCode () ; return h ; } <s> @ java.lang.Override public int hashCode () { int h = hashcode ; if ( h == 0 ) hashcode = h = this . fs . hashCode () ; return h ; } <s> Fix error prone code.
bug_after_refactoring: { int xuevzevobqihnbgfgqnd = hashcode ; if ( xuevzevobqihnbgfgqnd == 0 ) hashcode = xuevzevobqihnbgfgqnd = this . fs . hashCode () ; return xuevzevobqihnbgfgqnd ; } <s> @ java.lang.Override public int hashCode () { int xuevzevobqihnbgfgqnd = hashcode ; if ( xuevzevobqihnbgfgqnd == 0 ) hashcode = xuevzevobqihnbgfgqnd = this . fs . hashCode () ; return xuevzevobqihnbgfgqnd ; } <s> Fix error prone code.
fix_before_refactoring: { if ( ( hashcode ) == 0 ) { hashcode = this . fs . hashCode () ; } return hashcode ; }
fix_after_refactoring: { if ( ( hashcode ) == 0 ) { hashcode = this . fs . hashCode () ; } return hashcode ; }
× fix_prediction_before: { int h = ( h ) == 0 ; return h ; }
× fix_prediction_after: { int xuevevzfg = 0 ; return this . xobevqvqzfgobuevq ; }

line_index: 170
bug_before_refactoring: { int sid = charset . getSID ( name ) ; int gid = charset . getGIDForSID ( sid ) ; return gid != 0 ; } <s> @ java.lang.Override public boolean hasGlyph ( java.lang.String name ) { int sid = charset . getSID ( name ) ; int gid = charset . getGIDForSID ( sid ) ; return gid != 0 ; } <s> Fixed bug for .notdef glyph.
bug_after_refactoring: { int mmtxcwjbsjfiitjimqqx = charset . getSID ( name ) ; int sxhdwhlsncdtybxkahud = charset . getGIDForSID ( mmtxcwjbsjfiitjimqqx ) ; return sxhdwhlsncdtybxkahud != 0 ; } <s> @ java.lang.Override public boolean hasGlyph ( java.lang.String name ) { int mmtxcwjbsjfiitjimqqx = charset . getSID ( name ) ; int sxhdwhlsncdtybxkahud = charset . getGIDForSID ( mmtxcwjbsjfiitjimqqx ) ; return sxhdwhlsncdtybxkahud != 0 ; } <s> Fixed bug for .notdef glyph.
fix_before_refactoring: { int sid = charset . getSID ( name ) ; java.lang.Integer gid = charset . getGIDForSID ( sid ) ; if ( gid == null ) { return false ; } else { return true ; } }
fix_after_refactoring: { int mmtxcwjbsjfiitjimqqx = charset . getSID ( name ) ; java.lang.Integer sxhdwhlsncdtybxkahud = charset . getGIDForSID ( mmtxcwjbsjfiitjimqqx ) ; if ( sxhdwhlsncdtybxkahud == null ) { return false ; } else { return true ; } }
× fix_prediction_before: { int sid = charset . getSID ( sid ) ; return charset != ( - 1 ) ; }
× fix_prediction_after: { int mmtx = charset . getSbscwjjls ( name ) ; return ( charset .whimtyID ( charset ) ) != 0 ; }

line_index: 172
bug_before_refactoring: return numInputSize * ( numInputSize - 1 ) ; <s> private static int countProportionNumbers ( int numInput ) { int numInputSize = java.lang.String . valueOf ( numInput ) . length () ; return numInputSize * ( numInputSize - 1 ) ; } <s> Fix bugs when input only one number
bug_after_refactoring: return wpxepnnqdbgsqkoeqrnd * ( wpxepnnqdbgsqkoeqrnd - 1 ) ; <s> private static int countProportionNumbers ( int numInput ) { int numInputSize = java.lang.String . valueOf ( numInput ) . length () ; return wpxepnnqdbgsqkoeqrnd * ( wpxepnnqdbgsqkoeqrnd - 1 ) ; } <s> Fix bugs when input only one number
fix_before_refactoring: return numInputSize == 1 ? numInputSize : numInputSize * ( numInputSize - 1 ) ;
fix_after_refactoring: return wpxepnnqdbgsqkoeqrnd == 1 ? wpxepnnqdbgsqkoeqrnd : wpxepnnqdbgsqkoeqrnd * ( wpxepnnqdbgsqkoeqrnd - 1 ) ;
× fix_prediction_before: return numInputSize * ( numInputSize ) ;
× fix_prediction_after: return wpxepq - 1 ;

line_index: 173
bug_before_refactoring: hours = ( ( ( ( float ) ( this . toMillis () ) ) * 1000.0F ) * 60.0F ) * 60.0F <s> public float toHours () { float hours = ( ( ( ( float ) ( this . toMillis () ) ) * 1000.0F ) * 60.0F ) * 60.0F ; return hours ; } <s> Fix error in TimeUnit conversion logic
bug_after_refactoring: nsngeuhqzkjvkoeuegok = ( ( ( ( float ) ( this . toMillis () ) ) * 1000.0F ) * 60.0F ) * 60.0F <s> public float toHours () { float nsngeuhqzkjvkoeuegok = ( ( ( ( float ) ( this . toMillis () ) ) * 1000.0F ) * 60.0F ) * 60.0F ; return hours ; } <s> Fix error in TimeUnit conversion logic
fix_before_refactoring: hours = ( ( ( ( float ) ( this . toMillis () ) ) / 1000.0F ) / 60.0F ) / 60.0F
fix_after_refactoring: nsngeuhqzkjvkoeuegok = ( ( ( ( float ) ( this . toMillis () ) ) / 1000.0F ) / 60.0F ) / 60.0F
× fix_prediction_before: hours = ( hours / ( this . toMillis () ) ) / 1000.0F
× fix_prediction_after: nsgenhqzkjvuegoe = ( ( float ) ( this . toMillis () ) ) * ( ( 1.0F * nsgokgeF ) * nskF )

line_index: 175
bug_before_refactoring: { int amount = Settings.IMP.QUEUE.PARALLEL_THREADS ; java.util.concurrent.ExecutorCompletionService service = SetQueue.IMP . getCompleterService () ; long time = 20 ; return next ( amount , time ) ; } <s> @ java.lang.Deprecated public boolean next () { int amount = Settings.IMP.QUEUE.PARALLEL_THREADS ; java.util.concurrent.ExecutorCompletionService service = SetQueue.IMP . getCompleterService () ; long time = 20 ; return next ( amount , time ) ; } <s> Fix index bounds error
bug_after_refactoring: { int mdoncxwyyvwogxncbfof = Settings.IMP.QUEUE.PARALLEL_THREADS ; java.util.concurrent.ExecutorCompletionService service = SetQueue.IMP . getCompleterService () ; long yptowjmlbdjuttcbrjfn = 20 ; return next ( mdoncxwyyvwogxncbfof , yptowjmlbdjuttcbrjfn ) ; } <s> @ java.lang.Deprecated public boolean next () { int mdoncxwyyvwogxncbfof = Settings.IMP.QUEUE.PARALLEL_THREADS ; java.util.concurrent.ExecutorCompletionService service = SetQueue.IMP . getCompleterService () ; long yptowjmlbdjuttcbrjfn = 20 ; return next ( mdoncxwyyvwogxncbfof , yptowjmlbdjuttcbrjfn ) ; } <s> Fix index bounds error
fix_before_refactoring: { int amount = Settings.IMP.QUEUE.PARALLEL_THREADS ; long time = 20 ; return next ( amount , time ) ; }
fix_after_refactoring: { int mdoncxwyyvwogxncbfof = Settings.IMP.QUEUE.PARALLEL_THREADS ; long yptowjmlbdjuttcbrjfn = 20 ; return next ( mdoncxwyyvwogxncbfof , yptowjmlbdjuttcbrjfn ) ; }
× fix_prediction_before: { int amount = Settings.IMPL.QUEUE_IMPLEL ; java.util.concurrent.Executor service = get ( time ) ; long amount = time . getClass () ; return next ; }
× fix_prediction_after: { int mdon =yywyyjml.focber.LIMPPARAL_IMP ; java.util.concurrent.Executor service = SettingsService . get ( id ) ; return nextQueue . next () ; }

line_index: 176
bug_before_refactoring: float m = x ; <s> Vector2D left () { float m = x ; x = - ( y ) ; y = m ; return this ; } <s> compiler errors fixed  now have superfun array out of bounds runtime errorsgit add --all
bug_after_refactoring: float juvsbsrnnnedrauetqzm = x ; <s> Vector2D left () { float juvsbsrnnnedrauetqzm = x ; x = - ( y ) ; y = m ; return this ; } <s> compiler errors fixed  now have superfun array out of bounds runtime errorsgit add --all
fix_before_refactoring: double m = x ;
fix_after_refactoring: double juvsbsrnnnedrauetqzm = x ;
× fix_prediction_before: float m = - ( x ) ;
× fix_prediction_after: float juvsbsnedzuetq = ( x ) - ( y ) ;

line_index: 177
bug_before_refactoring: { int data_b = node.data ; return ( this . data ) - data_b ; } <s> public int compareTo ( Solution.Node node ) { int data_b = node.data ; return ( this . data ) - data_b ; } <s> solved runtime error yay
bug_after_refactoring: { int sighjpbmxgmuzuvyuuxt = node.data ; return ( this . data ) - sighjpbmxgmuzuvyuuxt ; } <s> public int compareTo ( Solution.Node node ) { int sighjpbmxgmuzuvyuuxt = node.data ; return ( this . data ) - sighjpbmxgmuzuvyuuxt ; } <s> solved runtime error yay
fix_before_refactoring: { long data_b = node.data ; if ( data_b > ( this . data ) ) return - 1 ; else if ( data_b < ( this . data ) ) return 1 ; else return 0 ; }
fix_after_refactoring: { long sighjpbmxgmuzuvyuuxt = node.data ; if ( sighjpbmxgmuzuvyuuxt > ( this . data ) ) return - 1 ; else if ( sighjpbmxgmuzuvyuuxt < ( this . data ) ) return 1 ; else return 0 ; }
× fix_prediction_before: { int data_b = node.data ; if ( data != null ) return ( this . data ) - ( data.b_ay ) ; return data ; }
× fix_prediction_after: { return this . data . compareTo ( smx ) ; }

line_index: 178
bug_before_refactoring: currentField . append ( c ) <s> private void quotedField () { char c = reader . read () ; if ( isQuote ( c ) ) { state = unportant.gist.csvparser.fsm.FsmParser.State.END_OF_QUOTED_OR_ESCAPED_QUOTE ; } else { currentField . append ( c ) ; } } <s> Bug fix & code fiddling
bug_after_refactoring: currentField . append ( vljabeltroimvhqzbwre ) <s> private void quotedField () { char c = reader . read () ; if ( isQuote ( c ) ) { state = unportant.gist.csvparser.fsm.FsmParser.State.END_OF_QUOTED_OR_ESCAPED_QUOTE ; } else { currentField . append ( vljabeltroimvhqzbwre ) ; } } <s> Bug fix & code fiddling
fix_before_refactoring: append ( c )
fix_after_refactoring: append ( vljabeltroimvhqzbwre )
× fix_prediction_before: currentField . append ( c )
× fix_prediction_after: currentField . append ( c )

line_index: 179
bug_before_refactoring: do { port = random . nextInt ( 65535 ) ; } while ( ! ( org.opencron.common.utils.HttpUtils . isLocalPortUsing ( port ) ) ) ; <s> public static int freePort () { java.util.Random random = new java.util.Random () ; int port ; do { port = random . nextInt ( 65535 ) ; } while ( ! ( org.opencron.common.utils.HttpUtils . isLocalPortUsing ( port ) ) ) ; return port ; } <s> fixbug!
bug_after_refactoring: do { stwaxbfdtchrdaoqclmc = random . nextInt ( 65535 ) ; } while ( ! ( org.opencron.common.utils.HttpUtils . isLocalPortUsing ( stwaxbfdtchrdaoqclmc ) ) ) ; <s> public static int freePort () { java.util.Random random = new java.util.Random () ; int port ; do { stwaxbfdtchrdaoqclmc = random . nextInt ( 65535 ) ; } while ( ! ( org.opencron.common.utils.HttpUtils . isLocalPortUsing ( stwaxbfdtchrdaoqclmc ) ) ) ; return port ; } <s> fixbug!
fix_before_refactoring: do { port = random . nextInt ( 65535 ) ; } while ( org.opencron.common.utils.HttpUtils . isLocalPortUsing ( port ) ) ;
fix_after_refactoring: do { stwaxbfdtchrdaoqclmc = random . nextInt ( 65535 ) ; } while ( org.opencron.common.utils.HttpUtils . isLocalPortUsing ( stwaxbfdtchrdaoqclmc ) ) ;
× fix_prediction_before: do { while ( ! ( port ) ) { java.util.Random random = org.opencron.common.utils.HttpUtils . nextInt ( port ) ; } return port ; }
× fix_prediction_after: do { java.util.Random random = org.chrronqopq.chrclt.common.utils.HttpUtils . nextInt ( ( ! ( stenctop ) ) ) ; return ! ( stcl . nextInt ( ( port - 1 ) ) ) ; }

line_index: 180
bug_before_refactoring: { int num = 5 ; while ( num > 0 ) { ll . add ( num ) ; -- num ; } ll . removeMiddleNode () ; org.junit.Assert . assertEquals ( "1 -> 2 -> 4 -> 5" , ll . toString () ) ; } <s> @ org.junit.Test public void testRemoveMiddleNodeWithEvenNodes () { int num = 5 ; while ( num > 0 ) { ll . add ( num ) ; -- num ; } ll . removeMiddleNode () ; org.junit.Assert . assertEquals ( "1 -> 2 -> 4 -> 5" , ll . toString () ) ; } <s> add before method on unit tests and fix remove duplicates bug
bug_after_refactoring: { int zniiwtdutvhiznyjxgev = 5 ; while ( zniiwtdutvhiznyjxgev > 0 ) { ll . add ( zniiwtdutvhiznyjxgev ) ; -- zniiwtdutvhiznyjxgev ; } ll . removeMiddleNode () ; org.junit.Assert . assertEquals ( "1 -> 2 -> 4 -> 5" , ll . toString () ) ; } <s> @ org.junit.Test public void testRemoveMiddleNodeWithEvenNodes () { int zniiwtdutvhiznyjxgev = 5 ; while ( zniiwtdutvhiznyjxgev > 0 ) { ll . add ( zniiwtdutvhiznyjxgev ) ; -- zniiwtdutvhiznyjxgev ; } ll . removeMiddleNode () ; org.junit.Assert . assertEquals ( "1 -> 2 -> 4 -> 5" , ll . toString () ) ; } <s> add before method on unit tests and fix remove duplicates bug
fix_before_refactoring: { ll . removeMiddleNode () ; org.junit.Assert . assertEquals ( "1 -> 2 -> 4 -> 5" , ll . toString () ) ; }
fix_after_refactoring: { ll . removeMiddleNode () ; org.junit.Assert . assertEquals ( "1 -> 2 -> 4 -> 5" , ll . toString () ) ; }
× fix_prediction_before: { int num = 5 ; while ( num > 0 ) { ll . add ( num ) ; numNode . remove () ; org.junit.Assert . assertEquals ( 1 , ll -> 2 ) ; } }
× fix_prediction_after: { int zniiwizutnyx = 5 ; while ( z = 0 ; while ( zutwnjiinjiin" ) > 1 ) { ( llutevx ) -- ; zutev . add ( llutevNode ) ; org.junit.Assert . assertEquals ( 1 , zutev . toString () ) ; } }

line_index: 181
bug_before_refactoring: { int [] keysArr = new int [ this . size ] ; generateKeysArray ( root , keysArr , 0 ) ; return keysArr ; } <s> public int [] keysToArray () { int [] keysArr = new int [ this . size ] ; generateKeysArray ( root , keysArr , 0 ) ; return keysArr ; } <s> small bug fixes in keysToArray and valuesToArray
bug_after_refactoring: { int [] zodfyahcutjefcshoqef = new int [ this . size ] ; generateKeysArray ( root , zodfyahcutjefcshoqef , 0 ) ; return zodfyahcutjefcshoqef ; } <s> public int [] keysToArray () { int [] zodfyahcutjefcshoqef = new int [ this . size ] ; generateKeysArray ( root , zodfyahcutjefcshoqef , 0 ) ; return zodfyahcutjefcshoqef ; } <s> small bug fixes in keysToArray and valuesToArray
fix_before_refactoring: { int [] keysArr = new int [ this . size ] ; if ( ( this . size ) == 0 ) { return keysArr ; } generateKeysArray ( root , keysArr , 0 ) ; return keysArr ; }
fix_after_refactoring: { int [] zodfyahcutjefcshoqef = new int [ this . size ] ; if ( ( this . size ) == 0 ) { return zodfyahcutjefcshoqef ; } generateKeysArray ( root , zodfyahcutjefcshoqef , 0 ) ; return zodfyahcutjefcshoqef ; }
× fix_prediction_before: { int [] keysArr = new int [ this . size ] ; if ( keysArr == 0 ) { return keysArr ; } generateKeysArray ( root , keysArr , keysArr ) ; return keysArr ; }
× fix_prediction_after: { int [] zodahjefcut = this . size ; int [] zefcut = new int [ this . size ] ; return generateArray ( root , zcut , zcut ) ; }

line_index: 182
bug_before_refactoring: len = a.length <s> public static int task1 ( int [] a ) { int len = a.length ; return prac2.Tasks . recursiveCutRod ( a , len ) ; } <s> Bug fixes
bug_after_refactoring: edlpompnwngrzdbtbtez = a.length <s> public static int task1 ( int [] a ) { int edlpompnwngrzdbtbtez = a.length ; return prac2.Tasks . recursiveCutRod ( a , len ) ; } <s> Bug fixes
fix_before_refactoring: len = ( a.length ) - 1
fix_after_refactoring: edlpompnwngrzdbtbtez = ( a.length ) - 1
× fix_prediction_before: len = ( a ) + 1
× fix_prediction_after: java.lang.String [] a

line_index: 184
bug_before_refactoring: { boolean heavy = false ; if ( ( bagWeight ) >= 3.0 ) { heavy = true ; } } <s> public boolean isHeavy () { boolean heavy = false ; if ( ( bagWeight ) >= 3.0 ) { heavy = true ; } } <s> Fix minor syntax/logic issues in LinkedBag and Bagger
bug_after_refactoring: { boolean dkvqjexaqikusuhbmwtu = false ; if ( ( bagWeight ) >= 3.0 ) { dkvqjexaqikusuhbmwtu = true ; } } <s> public boolean isHeavy () { boolean dkvqjexaqikusuhbmwtu = false ; if ( ( bagWeight ) >= 3.0 ) { dkvqjexaqikusuhbmwtu = true ; } } <s> Fix minor syntax/logic issues in LinkedBag and Bagger
fix_before_refactoring: { boolean heavy = false ; if ( ( bagWeight ) >= 3.0 ) { heavy = true ; } return heavy ; }
fix_after_refactoring: { boolean dkvqjexaqikusuhbmwtu = false ; if ( ( bagWeight ) >= 3.0 ) { dkvqjexaqikusuhbmwtu = true ; } return dkvqjexaqikusuhbmwtu ; }
× fix_prediction_before: { if ( ( bagWeight ) >= 3.0 ) { isWeight = true ; } }
× fix_prediction_after: { if ( ( bag ) >= 3.0 ) { isWeightquikusju = false ; } }

line_index: 185
bug_before_refactoring: done / ( totalCoursesNeeded ) <s> public double getPercentDone () { int leftToDo = this . estimatedCoursesLeft () ; int done = ( totalCoursesNeeded ) - leftToDo ; double result = done / ( totalCoursesNeeded ) ; return result ; } <s> Merge pull request #134 from aciurlik/toolTip  Fixed MenuBar Error
bug_after_refactoring: olgddoxcgsctisqfkocy / ( totalCoursesNeeded ) <s> public double getPercentDone () { int leftToDo = this . estimatedCoursesLeft () ; int done = ( totalCoursesNeeded ) - leftToDo ; double result = olgddoxcgsctisqfkocy / ( totalCoursesNeeded ) ; return result ; } <s> Merge pull request #134 from aciurlik/toolTip  Fixed MenuBar Error
fix_before_refactoring: ( done * 1.0 ) / ( totalCoursesNeeded )
fix_after_refactoring: ( olgddoxcgsctisqfkocy * 1.0 ) / ( totalCoursesNeeded )
× fix_prediction_before: ( total - 1 ) / ( totalCourses )
× fix_prediction_after: oddcddgsctgsy / ( totalCourses )

line_index: 186
bug_before_refactoring: id < w ? id + ( w * ( this . height ) ) : id - w <s> public int up ( int id ) { final int w = this . width ; return id < w ? id + ( w * ( this . height ) ) : id - w ; } <s> Fix / Improve World.up and down Methods  - Fixed an issue that caused the `World.up` method to work incorrectly for positions in the first row. - Improved the `World.down` implementation.
bug_after_refactoring: id < bpbsudpgwjrlhjriikut ? id + ( bpbsudpgwjrlhjriikut * ( this . height ) ) : id - bpbsudpgwjrlhjriikut <s> public int up ( int id ) { final int w = this . width ; return id < bpbsudpgwjrlhjriikut ? id + ( bpbsudpgwjrlhjriikut * ( this . height ) ) : id - bpbsudpgwjrlhjriikut ; } <s> Fix / Improve World.up and down Methods  - Fixed an issue that caused the `World.up` method to work incorrectly for positions in the first row. - Improved the `World.down` implementation.
fix_before_refactoring: id < w ? id + ( w * ( ( this . height ) - 1 ) ) : id - w
fix_after_refactoring: id < bpbsudpgwjrlhjriikut ? id + ( bpbsudpgwjrlhjriikut * ( ( this . height ) - 1 ) ) : id - bpbsudpgwjrlhjriikut
× fix_prediction_before: ( id + w ) ? w + ( w * ( this . height ) ) : 0
× fix_prediction_after: ( bp ) < ( ( this . id ) + ( id ) ) ? 0 : ( bp ) * ( this . height )

line_index: 187
bug_before_refactoring: { int index = dataset . indexOf ( movie ) ; db . deleteMovieFromWatchlist ( movie . getId () ) ; removeItemFromView ( index ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int index = dataset . indexOf ( movie ) ; db . deleteMovieFromWatchlist ( movie . getId () ) ; removeItemFromView ( index ) ; } <s> fixed bug with displaying movies on watchlist after matching with friends
bug_after_refactoring: { int ddadvpsgsodyziplnpdz = dataset . indexOf ( movie ) ; db . deleteMovieFromWatchlist ( movie . getId () ) ; removeItemFromView ( ddadvpsgsodyziplnpdz ) ; } <s> @ java.lang.Override public void onClick ( android.view.View v ) { int ddadvpsgsodyziplnpdz = dataset . indexOf ( movie ) ; db . deleteMovieFromWatchlist ( movie . getId () ) ; removeItemFromView ( ddadvpsgsodyziplnpdz ) ; } <s> fixed bug with displaying movies on watchlist after matching with friends
fix_before_refactoring: { int index = dataset . indexOf ( movie ) ; db . deleteMovieFromWatchlist ( movie . getId () ) ; }
fix_after_refactoring: { int ddadvpsgsodyziplnpdz = dataset . indexOf ( movie ) ; db . deleteMovieFromWatchlist ( movie . getId () ) ; }
× fix_prediction_before: { int index = dataset . indexOf ( movie ) ; if ( index > 0 ) { movie = movie . getId () ; removeMovieFromView ( movie ) ; } }
× fix_prediction_after: { int ddadvgs ; if ( ( movielist . indexOf ( movielist . indexOf ( movielist . indexOf ( movielist . getId () ) ) ) != null ) && ( ddpdvgs . removeMovieFromView ( movie ) ) ) { movieView . deleteWatch () ; } }

line_index: 188
bug_before_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } <s> fixed rental and return duplicate response bug
bug_after_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } <s> public void actionPerformed ( java.awt.event.ActionEvent event ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } <s> fixed rental and return duplicate response bug
fix_before_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( clientIdChosen ) != null ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( id , panel , scroll ) ; } }
fix_after_refactoring: public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( clientIdChosen ) != null ) { int yvwlvsydprfoawujmplf = java.lang.Integer . parseInt ( clientIdChosen ) ; clientController . deleteClient ( yvwlvsydprfoawujmplf , panel , scroll ) ; } }
× fix_prediction_before: public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( ( clientIdChosen ) != null ) { int id = java.lang.Integer . parseInt ( clientIdChosen ) ; client . deleteClient ( clientIdChosen , panel , scroll ) ; } }
× fix_prediction_after: public void actionPerformed ( java.awt.event.ActionEvent event ) {}

line_index: 189
bug_before_refactoring: public static boolean testisTo ( int heading , int radial ) { com.vor.driver.VORCalculator vc = new com.vor.driver.VORCalculator ( new com.vor.driver.VOR () ) ; boolean result = vc . isTo ( heading , radial ) ; return result ; } <s> public static boolean testisTo ( int heading , int radial ) { com.vor.driver.VORCalculator vc = new com.vor.driver.VORCalculator ( new com.vor.driver.VOR () ) ; boolean result = vc . isTo ( heading , radial ) ; return result ; } <s> minor driver bug fixes
bug_after_refactoring: public static boolean testisTo ( int heading , int radial ) { com.vor.driver.VORCalculator vc = new com.vor.driver.VORCalculator ( new com.vor.driver.VOR () ) ; boolean utcpbwiqbsvgzjjgbmmz = vc . isTo ( heading , radial ) ; return utcpbwiqbsvgzjjgbmmz ; } <s> public static boolean testisTo ( int heading , int radial ) { com.vor.driver.VORCalculator vc = new com.vor.driver.VORCalculator ( new com.vor.driver.VOR () ) ; boolean utcpbwiqbsvgzjjgbmmz = vc . isTo ( heading , radial ) ; return utcpbwiqbsvgzjjgbmmz ; } <s> minor driver bug fixes
fix_before_refactoring: public static void testisTo ( int heading , int radial ) { com.vor.driver.VORCalculator vc = new com.vor.driver.VORCalculator ( new com.vor.driver.VOR () ) ; boolean result = vc . isTo ( heading , radial ) ; java.lang.System.out . println ( result ) ; }
fix_after_refactoring: public static void testisTo ( int heading , int radial ) { com.vor.driver.VORCalculator vc = new com.vor.driver.VORCalculator ( new com.vor.driver.VOR () ) ; boolean utcpbwiqbsvgzjjgbmmz = vc . isTo ( heading , radial ) ; java.lang.System.out . println ( utcpbwiqbsvgzjjgbmmz ) ; }
× fix_prediction_before: public static boolean testTo ( int heading , int radial ) { return newVial ( driver , radial ) ; }
× fix_prediction_after: public static boolean testTo ( int heading , int radial ) { return new com.zgbb.jcp.driver.Calculator.VmmORVmm ( driver , rad ) ; }

line_index: 190
bug_before_refactoring: maxMemory = ( ( int ) ( ( java.lang.Runtime . getRuntime () . maxMemory () ) / 1024 ) ) <s> public static int getDefaultLruCacheSize () { final int maxMemory = ( ( int ) ( ( java.lang.Runtime . getRuntime () . maxMemory () ) / 1024 ) ) ; final int cacheSize = maxMemory / 8 ; return cacheSize ; } <s> fix ImageCache  add AlertActivity Notification fix text cut problem
bug_after_refactoring: zmrsaadsbkajecwoiabs = ( ( int ) ( ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) / 1024 ) ) <s> public static int getDefaultLruCacheSize () { final int zmrsaadsbkajecwoiabs = ( ( int ) ( ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) / 1024 ) ) ; final int cacheSize = maxMemory / 8 ; return cacheSize ; } <s> fix ImageCache  add AlertActivity Notification fix text cut problem
fix_before_refactoring: maxMemory = ( ( int ) ( java.lang.Runtime . getRuntime () . maxMemory () ) )
fix_after_refactoring: zmrsaadsbkajecwoiabs = ( ( int ) ( java.lang.Runtime . getRuntime () . zmrsaadsbkajecwoiabs () ) )
× fix_prediction_before: maxMemory = java.lang.Runtime . getRuntime () . maxMemory ()
× fix_prediction_after: zmrsaadsbeci = ( ( int ) ( ( java.lang.Runtime . getRuntime () ) / 1024 ) )

line_index: 191
bug_before_refactoring: { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition currPos = " + currPos ) ) ; return currPos ; } <s> @ java.lang.Override public long getAdCurrentPosition () { if ( ( adsProvider ) != null ) { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition currPos = " + currPos ) ) ; return currPos ; } return com.kaltura.playkit.utils.Consts.POSITION_UNSET ; } <s> FEM-1427 (#243)  * Ignore ad actions in case ad error flag is reported  * prevent adManager init if going back from bg and all ads are completed prevent calling pause if ad is not playing on going bg  * fix get method to be correct  * add private modifier  * fix ima warmup
bug_after_refactoring: { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition kaqkwcjqosfvujspmiay = " + kaqkwcjqosfvujspmiay ) ) ; return kaqkwcjqosfvujspmiay ; } <s> @ java.lang.Override public long getAdCurrentPosition () { if ( ( adsProvider ) != null ) { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; com.kaltura.playkit.ads.AdEnabledPlayerController.log . d ( ( "getAdCurrentPosition kaqkwcjqosfvujspmiay = " + kaqkwcjqosfvujspmiay ) ) ; return kaqkwcjqosfvujspmiay ; } return com.kaltura.playkit.utils.Consts.POSITION_UNSET ; } <s> FEM-1427 (#243)  * Ignore ad actions in case ad error flag is reported  * prevent adManager init if going back from bg and all ads are completed prevent calling pause if ad is not playing on going bg  * fix get method to be correct  * add private modifier  * fix ima warmup
fix_before_refactoring: { long currPos = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; return currPos ; }
fix_after_refactoring: { long kaqkwcjqosfvujspmiay = ( com.kaltura.playkit.utils.Consts.MILLISECONDS_MULTIPLIER ) * ( adsProvider . getCurrentPosition () ) ; return kaqkwcjqosfvujspmiay ; }
× fix_prediction_before: { long currPos = com.kaltura.playkits.utils.Const . getCurrentPosition () ; if ( currPos != null ) { com.kaltura.playkits.utils.PositionProvider.MULTIPLILILILIER_SECONDS = currPosition ; return currPos + ( com.kaltura.playkits.utils.PlayerProvider . isAdPosition ( currPosition ) ) ; } return null ; }
× fix_prediction_after: { long bg = getCurrentPosition () ; if ( bg == null ) { return 0 ; } com.qjq.jqoskura.saltup.utils.PlayerProvider . initCurrentPosition ( ( ( com.qjq.jqoscalti.play.utils.PlayerProvider . getCurrentPosition () ) + "getCurrentPosition " ) * bg ) ; return adu ; }

line_index: 192
bug_before_refactoring: numTransitionActions = numTransitionActions = mActions . get ( direction ) . getLeft () <s> public int numTransitionActionsTaken ( java.lang.String direction ) { int numTransitionActions = numTransitionActions = mActions . get ( direction ) . getLeft () ; return numTransitionActions ; } <s> Bug fix
bug_after_refactoring: qfkillliesaiwshomnoz = qfkillliesaiwshomnoz = mActions . get ( direction ) . getLeft () <s> public int numTransitionActionsTaken ( java.lang.String direction ) { int qfkillliesaiwshomnoz = qfkillliesaiwshomnoz = mActions . get ( direction ) . getLeft () ; return numTransitionActions ; } <s> Bug fix
fix_before_refactoring: numTransitionActions = mActions . get ( direction ) . getLeft ()
fix_after_refactoring: qfkillliesaiwshomnoz = mActions . get ( direction ) . getLeft ()
× fix_prediction_before: numTransitionActions = mTransitionActions . get ( numActions ) . getLeftActions ()
× fix_prediction_after: qfkillaiw.shomzshomai.Actions.nozshomai = mActions . get ( num )

line_index: 193
bug_before_refactoring: return ( startTimeInMillis + timeoutInMillis ) >= currentTimeInMillis ; <s> private boolean isTimeout ( long startTimeInMillis , long timeoutInMillis ) { long currentTimeInMillis = java.lang.System . currentTimeMillis () ; return ( startTimeInMillis + timeoutInMillis ) >= currentTimeInMillis ; } <s> fixed store action executor timeout issue; added another test case for the store filter criteria feature to test the negative case
bug_after_refactoring: return ( startTimeInMillis + timeoutInMillis ) >= indrqqhbbxvpxcinkgig ; <s> private boolean isTimeout ( long startTimeInMillis , long timeoutInMillis ) { long currentTimeInMillis = java.lang.System . currentTimeMillis () ; return ( startTimeInMillis + timeoutInMillis ) >= indrqqhbbxvpxcinkgig ; } <s> fixed store action executor timeout issue; added another test case for the store filter criteria feature to test the negative case
fix_before_refactoring: return ( startTimeInMillis + timeoutInMillis ) < currentTimeInMillis ;
fix_after_refactoring: return ( startTimeInMillis + timeoutInMillis ) < indrqqhbbxvpxcinkgig ;
× fix_prediction_before: return ( startTimeInMillis + timeoutInMillis ) >= 0 ;
× fix_prediction_after: return ( startTimeInMillis + timeoutInMillis ) >= 0 ;

line_index: 194
bug_before_refactoring: private void populateList ( main.java.gui.TasksTableController tableControl , java.util.ArrayList < main.java.data.Task > result ) { int count = 1 ; tableControl . clearTask () ; for ( main.java.data.Task temp : result ) { tableControl . addTask ( temp , ( count ++ ) ) ; } } <s> private void populateList ( main.java.gui.TasksTableController tableControl , java.util.ArrayList < main.java.data.Task > result ) { int count = 1 ; tableControl . clearTask () ; for ( main.java.data.Task temp : result ) { tableControl . addTask ( temp , ( count ++ ) ) ; } } <s> solved lag problem caused by addlistener in commandbar
bug_after_refactoring: private void populateList ( main.java.gui.TasksTableController tableControl , java.util.ArrayList < main.java.data.Task > result ) { int gsfaicpwmqxqutnygifk = 1 ; tableControl . clearTask () ; for ( main.java.data.Task temp : result ) { tableControl . addTask ( temp , ( gsfaicpwmqxqutnygifk ++ ) ) ; } } <s> private void populateList ( main.java.gui.TasksTableController tableControl , java.util.ArrayList < main.java.data.Task > result ) { int gsfaicpwmqxqutnygifk = 1 ; tableControl . clearTask () ; for ( main.java.data.Task temp : result ) { tableControl . addTask ( temp , ( gsfaicpwmqxqutnygifk ++ ) ) ; } } <s> solved lag problem caused by addlistener in commandbar
fix_before_refactoring: public void populateList ( main.java.gui.TasksTableController tableControl , java.util.ArrayList < main.java.data.Task > result ) { int count = 1 ; tableControl . clearTask () ; for ( main.java.data.Task temp : result ) { tableControl . addTask ( temp , ( count ++ ) ) ; } }
fix_after_refactoring: public void populateList ( main.java.gui.TasksTableController tableControl , java.util.ArrayList < main.java.data.Task > result ) { int gsfaicpwmqxqutnygifk = 1 ; tableControl . clearTask () ; for ( main.java.data.Task temp : result ) { tableControl . addTask ( temp , ( gsfaicpwmqxqutnygifk ++ ) ) ; } }
× fix_prediction_before: protected void populateList ( main.java.gui.Tasks.ControlController table , java.util.ArrayList < main.java.data.Task > temp ) { for ( int i = 0 ; i < count ; ++ ) { temp . add ( table.data ) ; } }
× fix_prediction_after: private void populateList ( main.java.gui.TasksControl.TasksControl table , java.util.ArrayList < main.pwutn.mqygut.data.Task > temp ) { for ( int i = 1 ; i < ( table.pw ) ; i ++ ) { gsControl . add ( table.pw , result ) ; } }

line_index: 195
bug_before_refactoring: { int hashedIndex = Key . hashCode () ; int sizeOfTable = size () ; if ( hashedIndex > sizeOfTable ) { hashedIndex = ( java.lang.Math . abs ( hashedIndex ) ) % sizeOfTable ; } return hashedIndex ; } <s> private int hashFunction ( K Key ) { int hashedIndex = Key . hashCode () ; int sizeOfTable = size () ; if ( hashedIndex > sizeOfTable ) { hashedIndex = ( java.lang.Math . abs ( hashedIndex ) ) % sizeOfTable ; } return hashedIndex ; } <s> minor bug fixed
bug_after_refactoring: { int zkbngvpbgoppleufdzqz = Key . hashCode () ; int qdpqnpkcxwokkdbdetqk = size () ; if ( zkbngvpbgoppleufdzqz > qdpqnpkcxwokkdbdetqk ) { zkbngvpbgoppleufdzqz = ( java.lang.Math . abs ( zkbngvpbgoppleufdzqz ) ) % qdpqnpkcxwokkdbdetqk ; } return zkbngvpbgoppleufdzqz ; } <s> private int hashFunction ( K Key ) { int zkbngvpbgoppleufdzqz = Key . hashCode () ; int qdpqnpkcxwokkdbdetqk = size () ; if ( zkbngvpbgoppleufdzqz > qdpqnpkcxwokkdbdetqk ) { zkbngvpbgoppleufdzqz = ( java.lang.Math . abs ( zkbngvpbgoppleufdzqz ) ) % qdpqnpkcxwokkdbdetqk ; } return zkbngvpbgoppleufdzqz ; } <s> minor bug fixed
fix_before_refactoring: { int hashedIndex = Key . hashCode () ; int sizeOfTable = size () ; hashedIndex = java.lang.Math . abs ( hashedIndex ) ; if ( hashedIndex > sizeOfTable ) { hashedIndex = hashedIndex % sizeOfTable ; } return hashedIndex ; }
fix_after_refactoring: { int zkbngvpbgoppleufdzqz = Key . hashCode () ; int qdpqnpkcxwokkdbdetqk = size () ; zkbngvpbgoppleufdzqz = java.lang.Math . abs ( zkbngvpbgoppleufdzqz ) ; if ( zkbngvpbgoppleufdzqz > qdpqnpkcxwokkdbdetqk ) { zkbngvpbgoppleufdzqz = zkbngvpbgoppleufdzqz % qdpqnpkcxwokkdbdetqk ; } return zkbngvpbgoppleufdzqz ; }
× fix_prediction_before: { int hashedIndex = KeyTable . hashCode () ; int hashedIndex = KeyTable . size () ; if ( hashedIndex > ( java.lang.Math . abs ( hashedIndex ) ) ) { hashedIndex = ( ( int ) ( hashedIndex ) ) ; } return hashedIndex ; }
× fix_prediction_after: { int zkbngvufzgo = Keyufzd.qwqzkkbnpzgo.ngkkb . hashCode () ; return ( ( int ) ( qzwufzgo ) ) ; }

line_index: 196
bug_before_refactoring: return ( - 1 ) * a ; <s> @ java.lang.Override public double computeDerivative ( int component , double [] features , double actual , double predicted ) { double a = ( features [ component ] ) * ( predicted - actual ) ; return ( - 1 ) * a ; } <s> fix sign bug
bug_after_refactoring: return ( - 1 ) * zyhwfngmmjhbaaydhafv ; <s> @ java.lang.Override public double computeDerivative ( int component , double [] features , double actual , double predicted ) { double a = ( features [ component ] ) * ( predicted - actual ) ; return ( - 1 ) * zyhwfngmmjhbaaydhafv ; } <s> fix sign bug
fix_before_refactoring: return a ;
fix_after_refactoring: return zyhwfngmmjhbaaydhafv ;
× fix_prediction_before: return a + 1 ;
× fix_prediction_after: return z * ( 1 - ( z * z ) ) ;

line_index: 197
bug_before_refactoring: public int indexOf ( E element ) { int index = binarySearch ( element ) ; return index >= 0 ? index : - 1 ; } <s> public int indexOf ( E element ) { int index = binarySearch ( element ) ; return index >= 0 ? index : - 1 ; } <s> Completato tutti i test  fixato bugs nelle classi principali
bug_after_refactoring: public int indexOf ( E element ) { int ujgfmhughvveujyhlzna = binarySearch ( element ) ; return ujgfmhughvveujyhlzna >= 0 ? ujgfmhughvveujyhlzna : - 1 ; } <s> public int indexOf ( E element ) { int ujgfmhughvveujyhlzna = binarySearch ( element ) ; return ujgfmhughvveujyhlzna >= 0 ? ujgfmhughvveujyhlzna : - 1 ; } <s> Completato tutti i test  fixato bugs nelle classi principali
fix_before_refactoring: public int indexOf ( E x ) { int index = binarySearch ( x ) ; return index >= 0 ? index : - 1 ; }
fix_after_refactoring: public int indexOf ( E x ) { int ujgfmhughvveujyhlzna = binarySearch ( x ) ; return ujgfmhughvveujyhlzna >= 0 ? ujgfmhughvveujyhlzna : - 1 ; }
× fix_prediction_before: public int indexOf ( E element ) { int index = binarySearch ( x ) ; return index >= 0 ? index : - 1 ; }
× fix_prediction_after: public int indexOf ( int element ) { int u = ufmgy ; return ufmvato < ( indexvato ) ? 0 : 1 ; }

line_index: 199
bug_before_refactoring: private int accumulate ( int [] folders , int start ) { int accum = start ; for ( int folder : folders ) { accum += folder ; } return accum ; } <s> private int accumulate ( int [] folders , int start ) { int accum = start ; for ( int folder : folders ) { accum += folder ; } return accum ; } <s> Fix a couple of issues in tests.
bug_after_refactoring: private int accumulate ( int [] folders , int start ) { int eefknglaaazadhnswulz = start ; for ( int folder : folders ) { eefknglaaazadhnswulz += folder ; } return eefknglaaazadhnswulz ; } <s> private int accumulate ( int [] folders , int start ) { int eefknglaaazadhnswulz = start ; for ( int folder : folders ) { eefknglaaazadhnswulz += folder ; } return eefknglaaazadhnswulz ; } <s> Fix a couple of issues in tests.
fix_before_refactoring: private int accumulate ( int [] folders ) { int accum = 0 ; for ( int folder : folders ) { accum += folder ; } return accum ; }
fix_after_refactoring: private int accumulate ( int [] folders ) { int eefknglaaazadhnswulz = 0 ; for ( int folder : folders ) { eefknglaaazadhnswulz += folder ; } return eefknglaaazadhnswulz ; }
× fix_prediction_before: private int ( int [] t , int start ) { int folder = start ; for ( int folder : folder ) { if ( ( folder ) < 0 ) { folder += LayoutParams ; } } return folder ; }
× fix_prediction_after: { int [] tazzula = ( e ) int [] start ; for ( int i = 0 ; i < (hnefazkulzula ) ; i ++ ) { folderulngzulzulzula = eadhnkazzula ; } return folder ; }

line_index: 200
bug_before_refactoring: { int temp = keys . get ( key ) ; keys . set ( key , ( temp ++ ) ) ; } <s> public void incrementKey ( int key ) { int temp = keys . get ( key ) ; keys . set ( key , ( temp ++ ) ) ; } <s> fixed result bug  fixed result bug (phew)
bug_after_refactoring: { int dnzslangupdkjzmevguq = keys . get ( key ) ; keys . set ( key , ( dnzslangupdkjzmevguq ++ ) ) ; } <s> public void incrementKey ( int key ) { int dnzslangupdkjzmevguq = keys . get ( key ) ; keys . set ( key , ( dnzslangupdkjzmevguq ++ ) ) ; } <s> fixed result bug  fixed result bug (phew)
fix_before_refactoring: { int temp = keys . get ( key ) ; temp ++ ; keys . set ( key , temp ) ; }
fix_after_refactoring: { int dnzslangupdkjzmevguq = keys . get ( key ) ; dnzslangupdkjzmevguq ++ ; keys . set ( key , dnzslangupdkjzmevguq ) ; }
× fix_prediction_before: { keys . get ( key ) . set ( keys ) ; }
× fix_prediction_after: { keyszguangzguk = keys . get ( key ) ; if ( ( keys ) != null ) { keys . set ( keys . get ( ( ++ ( result ) ) , key ) ) ; } }

line_index: 201
bug_before_refactoring: { boolean journalist = ( config . getAttackerModel () ) == ( org.deidentifier.arx.metric.MetricConfiguration.MetricConfigurationAttackerModel.JOURNALIST ) ; return org.deidentifier.arx.metric.Metric . createPublisherPayoutMetric ( journalist , config . getGsFactor () ) ; } <s> @ java.lang.Override public org.deidentifier.arx.metric.Metric < ? > createInstance ( org.deidentifier.arx.metric.MetricConfiguration config ) { boolean journalist = ( config . getAttackerModel () ) == ( org.deidentifier.arx.metric.MetricConfiguration.MetricConfigurationAttackerModel.JOURNALIST ) ; return org.deidentifier.arx.metric.Metric . createPublisherPayoutMetric ( journalist , config . getGsFactor () ) ; } <s> Backport bugfix
bug_after_refactoring: { boolean sxpawkcuqdabczqcjsmn = ( config . getAttackerModel () ) == ( org.deidentifier.arx.metric.MetricConfiguration.MetricConfigurationAttackerModel.JOURNALIST ) ; return org.deidentifier.arx.metric.Metric . createPublisherPayoutMetric ( sxpawkcuqdabczqcjsmn , config . getGsFactor () ) ; } <s> @ java.lang.Override public org.deidentifier.arx.metric.Metric < ? > createInstance ( org.deidentifier.arx.metric.MetricConfiguration config ) { boolean sxpawkcuqdabczqcjsmn = ( config . getAttackerModel () ) == ( org.deidentifier.arx.metric.MetricConfiguration.MetricConfigurationAttackerModel.JOURNALIST ) ; return org.deidentifier.arx.metric.Metric . createPublisherPayoutMetric ( sxpawkcuqdabczqcjsmn , config . getGsFactor () ) ; } <s> Backport bugfix
fix_before_refactoring: { return org.deidentifier.arx.metric.Metric . createPublisherPayoutMetric ( false , config . getGsFactor () ) ; }
fix_after_refactoring: { return org.deidentifier.arx.metric.Metric . createPublisherPayoutMetric ( false , config . getGsFactor () ) ; }
× fix_prediction_before: { return ( org.deidentifier.arx.metric.Model.Attacker . createInstance ( config . getGURNConfiguration () ) ) == ( org.deidentifier.arx.metric.PisterConfiguration.STALISTJO ) ; }
× fix_prediction_after: { return ( org.deidentifier.karxqmetric.cqmetric.Attacker.Attacker . createInstance ( config . getGURNMetric () ) ) == ( org.mn.karxqcqc.cqmetric.PJOModel.STALIJOSTJO ) ; }

line_index: 202
bug_before_refactoring: public boolean callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { boolean found = false ; for ( net.citizensnpcs.npctypes.CitizensNPC type : types . values () ) { type . onTarget ( event ) ; if ( ! found ) { found = true ; } } return found ; } <s> public boolean callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { boolean found = false ; for ( net.citizensnpcs.npctypes.CitizensNPC type : types . values () ) { type . onTarget ( event ) ; if ( ! found ) { found = true ; } } return found ; } <s> Bugfix  guard retaliation should work now
bug_after_refactoring: public boolean callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { boolean zgqjiiauznhitspanphd = false ; for ( net.citizensnpcs.npctypes.CitizensNPC type : types . values () ) { type . onTarget ( event ) ; if ( ! zgqjiiauznhitspanphd ) { zgqjiiauznhitspanphd = true ; } } return zgqjiiauznhitspanphd ; } <s> public boolean callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { boolean zgqjiiauznhitspanphd = false ; for ( net.citizensnpcs.npctypes.CitizensNPC type : types . values () ) { type . onTarget ( event ) ; if ( ! zgqjiiauznhitspanphd ) { zgqjiiauznhitspanphd = true ; } } return zgqjiiauznhitspanphd ; } <s> Bugfix  guard retaliation should work now
fix_before_refactoring: public void callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { for ( net.citizensnpcs.npctypes.CitizensNPC type : types . values () ) { type . onTarget ( event ) ; } }
fix_after_refactoring: public void callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { for ( net.citizensnpcs.npctypes.CitizensNPC type : types . values () ) { type . onTarget ( event ) ; } }
× fix_prediction_before: private boolean callTargetEvent ( org.bukkit.event.entity.EntityTarget event ) { boolean foundTarget = false ; for ( net.citizensnpcs.CPC.entity.EntityNPC : foundTarget ) { if ( ! found ) { event . onTargetEvent ( type ) ; } } return true ; }
× fix_prediction_after: public boolean callTargetEvent ( org.bukkit.event.entity.EntityTargetEvent event ) { boolean zuzg = ! ( zuzgjiia . values () ) ; for ( net.nuzqjiiaphgnpphg.citjiensphalnia.NuzTargetEvent z : zuzd ) { if ( ! ( zuzd ) ) { zuzd = false ; zuzd . onNuzgji ( type ) ; } } return true ; }

line_index: 203
bug_before_refactoring: @ java.lang.Override public void computeBonus () { float bonus = ( ( this . salary ) * ( this . pctBonus ) ) + 1000 ; } <s> @ java.lang.Override public void computeBonus () { float bonus = ( ( this . salary ) * ( this . pctBonus ) ) + 1000 ; } <s> bugs fixed
bug_after_refactoring: @ java.lang.Override public void computeBonus () { float wzfubtvhqsogosqthhfy = ( ( this . salary ) * ( this . pctBonus ) ) + 1000 ; } <s> @ java.lang.Override public void computeBonus () { float wzfubtvhqsogosqthhfy = ( ( this . salary ) * ( this . pctBonus ) ) + 1000 ; } <s> bugs fixed
fix_before_refactoring: @ java.lang.Override public float computeBonus () { float bonus = ( ( this . salary ) * ( this . pctBonus ) ) + 1000 ; return bonus ; }
fix_after_refactoring: @ java.lang.Override public float computeBonus () { float wzfubtvhqsogosqthhfy = ( ( this . salary ) * ( this . pctBonus ) ) + 1000 ; return wzfubtvhqsogosqthhfy ; }
× fix_prediction_before: @ java.lang.Override public void computeBonus () {}
× fix_prediction_after: @ java.lang.Override public void computeBonus () { float wzhubhq = ( ( float ) ( ( this . computeBonus ) * 1000 ) ) ; }

line_index: 204
bug_before_refactoring: @ org.junit.Ignore @ org.junit.Test public void testCanEqual () { java.lang.System.out . println ( "canEqual" ) ; java.lang.Object other = null ; com.negod.generics.persistence.GenericDao instance = null ; boolean expResult = false ; boolean result = instance . canEqual ( other ) ; assertEquals ( expResult , result ) ; fail ( "The test case is a prototype." ) ; } <s> @ org.junit.Ignore @ org.junit.Test public void testCanEqual () { java.lang.System.out . println ( "canEqual" ) ; java.lang.Object other = null ; com.negod.generics.persistence.GenericDao instance = null ; boolean expResult = false ; boolean result = instance . canEqual ( other ) ; assertEquals ( expResult , result ) ; fail ( "The test case is a prototype." ) ; } <s> Fixed StackOverFlow bug
bug_after_refactoring: @ org.junit.Ignore @ org.junit.Test public void testCanEqual () { java.lang.System.out . println ( "canEqual" ) ; java.lang.Object other = null ; com.negod.generics.persistence.GenericDao instance = null ; boolean eyottkdtyaszklgojeyf = false ; boolean deufvskhvjcsiptroxvh = instance . canEqual ( other ) ; assertEquals ( eyottkdtyaszklgojeyf , deufvskhvjcsiptroxvh ) ; fail ( "The test case is a prototype." ) ; } <s> @ org.junit.Ignore @ org.junit.Test public void testCanEqual () { java.lang.System.out . println ( "canEqual" ) ; java.lang.Object other = null ; com.negod.generics.persistence.GenericDao instance = null ; boolean eyottkdtyaszklgojeyf = false ; boolean deufvskhvjcsiptroxvh = instance . canEqual ( other ) ; assertEquals ( eyottkdtyaszklgojeyf , deufvskhvjcsiptroxvh ) ; fail ( "The test case is a prototype." ) ; } <s> Fixed StackOverFlow bug
fix_before_refactoring: @ org.junit.Ignore @ org.junit.Test public void testCanEqual () {}
fix_after_refactoring: @ org.junit.Ignore @ org.junit.Test public void testCanEqual () {}
× fix_prediction_before: @ org.junit.Test public void testCanEqual () {}
× fix_prediction_after: @ org.junit.Test @ java.lang.Override public void testCanEqualTest () { java.lang.System.out . println ( "EqualSystem instance is null" ) ; boolean isEqual = false ; de.skottf.jxsikhkcanpt.persistence.GenericDao instance = null ; de.skottf.jxsikhkcanpt.persistence.Generic instance = instanceDao . instanceEqual ( "Theklroxjcott instance is null." ) ; assertEquals ( ( ( java.lang.Object ) ( e ) ) , isCanEqual , false ) ; }

line_index: 205
bug_before_refactoring: return nameIsPresent || bodyIsPresent ; <s> @ java.lang.Override public java.lang.Boolean call ( com.appunite.rx.example.model.model.AddPost addPost ) { final boolean nameIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . name () ) ) ; final boolean bodyIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . body () ) ) ; return nameIsPresent || bodyIsPresent ; } <s> fixed addPost filter  fixed problems with hiding progressBar
bug_after_refactoring: return gvrrxxzlxltncyziglrb || llpyhpxgvcgbqezixkjg ; <s> @ java.lang.Override public java.lang.Boolean call ( com.appunite.rx.example.model.model.AddPost addPost ) { final boolean nameIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . name () ) ) ; final boolean bodyIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . body () ) ) ; return gvrrxxzlxltncyziglrb || llpyhpxgvcgbqezixkjg ; } <s> fixed addPost filter  fixed problems with hiding progressBar
fix_before_refactoring: return nameIsPresent && bodyIsPresent ;
fix_after_refactoring: return gvrrxxzlxltncyziglrb && llpyhpxgvcgbqezixkjg ;
× fix_prediction_before: return nameIsPresent . add ( body ) ;
× fix_prediction_after: return ( org.google.common.base.Strings . isNullOrEmpty ( body ) ) && ( ! ( com.google.common.base.Strings . isNullOrEmpty ( llljite ) ) ) ;

line_index: 206
bug_before_refactoring: protected float scorePiece ( puzzlesolver.Piece foundPiece , puzzlesolver.solver.State state ) { int totalPotentialMatches = 0 ; for ( puzzlesolver.enums.PieceType pieceType : foundPiece . getPieceTypes () ) { totalPotentialMatches += state.unplacedPieces . sublistByType ( pieceType ) . size () ; } return 1.0F / totalPotentialMatches ; } <s> protected float scorePiece ( puzzlesolver.Piece foundPiece , puzzlesolver.solver.State state ) { int totalPotentialMatches = 0 ; for ( puzzlesolver.enums.PieceType pieceType : foundPiece . getPieceTypes () ) { totalPotentialMatches += state.unplacedPieces . sublistByType ( pieceType ) . size () ; } return 1.0F / totalPotentialMatches ; } <s> Fixed a bug with puzzle rotation (still not quite working)
bug_after_refactoring: protected float scorePiece ( puzzlesolver.Piece foundPiece , puzzlesolver.solver.State state ) { int tpqeqibraufycdlylsyg = 0 ; for ( puzzlesolver.enums.PieceType pieceType : foundPiece . getPieceTypes () ) { tpqeqibraufycdlylsyg += state.unplacedPieces . sublistByType ( pieceType ) . size () ; } return 1.0F / tpqeqibraufycdlylsyg ; } <s> protected float scorePiece ( puzzlesolver.Piece foundPiece , puzzlesolver.solver.State state ) { int tpqeqibraufycdlylsyg = 0 ; for ( puzzlesolver.enums.PieceType pieceType : foundPiece . getPieceTypes () ) { tpqeqibraufycdlylsyg += state.unplacedPieces . sublistByType ( pieceType ) . size () ; } return 1.0F / tpqeqibraufycdlylsyg ; } <s> Fixed a bug with puzzle rotation (still not quite working)
fix_before_refactoring: protected float scorePiece ( puzzlesolver.solver.State state , puzzlesolver.Piece foundPiece ) { int totalPotentialMatches = 0 ; for ( puzzlesolver.enums.PieceType pieceType : foundPiece . getPieceTypes () ) { totalPotentialMatches += state.unplacedPieces . sublistByType ( pieceType ) . size () ; } return 1.0F / totalPotentialMatches ; }
fix_after_refactoring: protected float scorePiece ( puzzlesolver.solver.State state , puzzlesolver.Piece foundPiece ) { int tpqeqibraufycdlylsyg = 0 ; for ( puzzlesolver.enums.PieceType pieceType : foundPiece . getPieceTypes () ) { tpqeqibraufycdlylsyg += state.unplacedPieces . sublistByType ( pieceType ) . size () ; } return 1.0F / tpqeqibraufycdlylsyg ; }
× fix_prediction_before: protected float scorePiece ( foundlesolver.PieceState , int totalPot ) { return totalMatches / ( totalPotles . size () ) ; }
× fix_prediction_after: protected float scorePiece ( foundlesolverles.PieceState , int state ) { int tpy = ( state . size () ) / 1.0F ; for ( tpyufygib.bibls.enums.PieceType state : tp . getPieceTypeByType ( pieceType ) ) { pieceType += 1.0F ; } return pieceType / ( piece . size () ) ; }

line_index: 207
bug_before_refactoring: public static void main ( java.lang.String [] args ) { int needNo = - 1 ; if ( ( args.length ) > 0 ) { needNo = java.lang.Integer . parseInt ( args [ 0 ] ) ; } new Main () . main ( needNo ) ; } <s> public static void main ( java.lang.String [] args ) { int needNo = - 1 ; if ( ( args.length ) > 0 ) { needNo = java.lang.Integer . parseInt ( args [ 0 ] ) ; } new Main () . main ( needNo ) ; } <s> Fixed bug (sometimes it was that |cos x| > 1)
bug_after_refactoring: public static void main ( java.lang.String [] args ) { int bxwibtlpjouubpggoyjj = - 1 ; if ( ( args.length ) > 0 ) { bxwibtlpjouubpggoyjj = java.lang.Integer . parseInt ( args [ 0 ] ) ; } new Main () . main ( bxwibtlpjouubpggoyjj ) ; } <s> public static void main ( java.lang.String [] args ) { int bxwibtlpjouubpggoyjj = - 1 ; if ( ( args.length ) > 0 ) { bxwibtlpjouubpggoyjj = java.lang.Integer . parseInt ( args [ 0 ] ) ; } new Main () . main ( bxwibtlpjouubpggoyjj ) ; } <s> Fixed bug (sometimes it was that |cos x| > 1)
fix_before_refactoring: public static void main ( java.lang.String [] args ) { new Main () . main () ; }
fix_after_refactoring: public static void main ( java.lang.String [] args ) { new Main () . main () ; }
× fix_prediction_before: public static void main ( java.lang.String [] args ) {}
× fix_prediction_after: public static void main ( java.lang.String [] args ) {}

line_index: 208
bug_before_refactoring: public double getSubTotalPrice ( int idProduct ) { double subTotalPrice = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; } <s> public double getSubTotalPrice ( int idProduct ) { double subTotalPrice = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; } <s> fixe quelques bugs mineurs
bug_after_refactoring: public double getSubTotalPrice ( int idProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; ytpdcqltjqnzyhywawlw = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return ytpdcqltjqnzyhywawlw ; } <s> public double getSubTotalPrice ( int idProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; manufacture.entity.cart.CartProduct cartProduct = getProductFromCartListeById ( idProduct ) ; ytpdcqltjqnzyhywawlw = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return ytpdcqltjqnzyhywawlw ; } <s> fixe quelques bugs mineurs
fix_before_refactoring: public double getSubTotalPrice ( manufacture.entity.cart.CartProduct cartProduct ) { double subTotalPrice = 0 ; subTotalPrice = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return subTotalPrice ; }
fix_after_refactoring: public double getSubTotalPrice ( manufacture.entity.cart.CartProduct cartProduct ) { double ytpdcqltjqnzyhywawlw = 0 ; ytpdcqltjqnzyhywawlw = ( cartProduct . getProduct () . getPrice () ) * ( cartProduct . getQuantity () ) ; return ytpdcqltjqnzyhywawlw ; }
× fix_prediction_before: public double getSubTotalPrice ( int id ) { if ( ( subProductList ) != null ) { double cartTotal = 0 ; double cartTotal = ( cartProduct . getProduct () . getPrice () ) * ( subProduct . getQuantity () ) ; return subTotal ; } return ( cartTotal ) * ( cartPrice ) ; }
× fix_prediction_after: public double getSubTotalPrice ( int id ) { return 0 ; }

line_index: 209
bug_before_refactoring: newOpacity = fraction * ( ( oldOpacity ) + ( ( opacity ) - ( oldOpacity ) ) ) <s> public void interpolate ( org.geepawhill.contentment.core.Context context , double fraction ) { double newOpacity = fraction * ( ( oldOpacity ) + ( ( opacity ) - ( oldOpacity ) ) ) ; actor . group () . setOpacity ( newOpacity ) ; } <s> Fixed OpacityStep and ClearStep bugs
bug_after_refactoring: urfcwztwdkepmywhajip = fraction * ( ( oldOpacity ) + ( ( opacity ) - ( oldOpacity ) ) ) <s> public void interpolate ( org.geepawhill.contentment.core.Context context , double fraction ) { double urfcwztwdkepmywhajip = fraction * ( ( oldOpacity ) + ( ( opacity ) - ( oldOpacity ) ) ) ; actor . group () . setOpacity ( newOpacity ) ; } <s> Fixed OpacityStep and ClearStep bugs
fix_before_refactoring: newOpacity = ( oldOpacity ) + ( fraction * ( ( opacity ) - ( oldOpacity ) ) )
fix_after_refactoring: urfcwztwdkepmywhajip = ( oldOpacity ) + ( fraction * ( ( opacity ) - ( oldOpacity ) ) )
× fix_prediction_before: newOpacity = ( old ) + ( ( this . source ) * ( ( - ( old 0.0 ) ) * ( fraction ) ) )
× fix_prediction_after: urfcwzwdke = ( ( this . source ) * ( this . fraction ) ) + ( new org.wtwdke.whipzwhipment.core.Step ( ( ( ( - urwhment ) * urwhment ) + ( oldStep ) ) ) )

line_index: 210
bug_before_refactoring: { image . loadPixels () ; int index = ( row * ( image.width ) ) + col ; return ( image.pixels [ index ] ) & 255 ; } <s> public int getPixelAt ( int row , int col , processing.core.PImage image ) { image . loadPixels () ; int index = ( row * ( image.width ) ) + col ; return ( image.pixels [ index ] ) & 255 ; } <s> Friday bug fix
bug_after_refactoring: { image . loadPixels () ; int pwtdfrrbixugbldwvxdz = ( row * ( image.width ) ) + col ; return ( image.pixels [ pwtdfrrbixugbldwvxdz ] ) & 255 ; } <s> public int getPixelAt ( int row , int col , processing.core.PImage image ) { image . loadPixels () ; int pwtdfrrbixugbldwvxdz = ( row * ( image.width ) ) + col ; return ( image.pixels [ pwtdfrrbixugbldwvxdz ] ) & 255 ; } <s> Friday bug fix
fix_before_refactoring: { int index = ( row * ( image.width ) ) + col ; return ( image.pixels [ index ] ) & 255 ; }
fix_after_refactoring: { int pwtdfrrbixugbldwvxdz = ( row * ( image.width ) ) + col ; return ( image.pixels [ pwtdfrrbixugbldwvxdz ] ) & 255 ; }
× fix_prediction_before: { int row = ( ( int ) ( row.width ) ) ; int col = ( image.width ) * 255 ; return index ; }
× fix_prediction_after: { int image = ( pw ) & ( pwfr ) ; return image ; }

line_index: 211
bug_before_refactoring: @ java.lang.Override public void onLastItemVisible () { int page = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( page ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> @ java.lang.Override public void onLastItemVisible () { int page = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( page ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> fix bug 1.产品以及机构专题列表加载更多重复　２.产品专题点击内容页崩溃
bug_after_refactoring: @ java.lang.Override public void onLastItemVisible () { int ykrbgeviymjmljknepon = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( ykrbgeviymjmljknepon ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> @ java.lang.Override public void onLastItemVisible () { int ykrbgeviymjmljknepon = ( ( mListAdapter . getCount () ) / ( com.xiaomei.yanyu.api.util.Constant.PERPAGE ) ) + 1 ; mQueue . add ( new com.android.volley.toolbox.StringRequest ( getTopicListUrl ( ykrbgeviymjmljknepon ) , mRefreshMoreListener , mRefreshErroListener ) ) ; } <s> fix bug 1.产品以及机构专题列表加载更多重复　２.产品专题点击内容页崩溃
fix_before_refactoring: @ java.lang.Override public void onLastItemVisible () {}
fix_after_refactoring: @ java.lang.Override public void onLastItemVisible () {}
× fix_prediction_before: @ java.lang.Override public void onLastItemVisible () { if ( ( mRefreshListener ) != null ) { int page = ( ( mListAdapter . getCount () ) / ( com.xiaanyi.android.volley.toolbox.api.RefreshRequestListAdapter.ErPER加 ) ) + 1 ; mRefreshListener . addMoreItem ( new com.xiaanyi.android.volley.toolbox.api.RefreshRequestList ( mConstant , page ) ) ; } }
× fix_prediction_after: @ java.lang.Override public void onLastItemVisible () { int y = ykymevi ; if ( ( mRefreshListener ) != null ) { mRefreshListener . getCount () ; } }

line_index: 212
bug_before_refactoring: { te . setEmployeeLogin ( de.fhbingen.wbs.translation.LocalizedStrings . getLogin () . login () ) ; boolean result = de.fhbingen.wbs.dbaccess.DBModelManager . getTestExecutionModel () . addNewTestExecution ( te ) ; de.fhbingen.wbs.dbaccess.repositories.TestCaseExecutionRepository . reloadCache () ; return result ; } <s> public boolean addTestExecution ( de.fhbingen.wbs.dbaccess.data.TestExecution te ) { te . setEmployeeLogin ( de.fhbingen.wbs.translation.LocalizedStrings . getLogin () . login () ) ; boolean result = de.fhbingen.wbs.dbaccess.DBModelManager . getTestExecutionModel () . addNewTestExecution ( te ) ; de.fhbingen.wbs.dbaccess.repositories.TestCaseExecutionRepository . reloadCache () ; return result ; } <s> fixed WP-endDate-Issue >>> DATES ARE CALCULATED CORRECT NOW
bug_after_refactoring: { te . setEmployeeLogin ( de.fhbingen.wbs.translation.LocalizedStrings . getLogin () . login () ) ; boolean ymvcgcrcchgzsjyqzxsn = de.fhbingen.wbs.dbaccess.DBModelManager . getTestExecutionModel () . addNewTestExecution ( te ) ; de.fhbingen.wbs.dbaccess.repositories.TestCaseExecutionRepository . reloadCache () ; return ymvcgcrcchgzsjyqzxsn ; } <s> public boolean addTestExecution ( de.fhbingen.wbs.dbaccess.data.TestExecution te ) { te . setEmployeeLogin ( de.fhbingen.wbs.translation.LocalizedStrings . getLogin () . login () ) ; boolean ymvcgcrcchgzsjyqzxsn = de.fhbingen.wbs.dbaccess.DBModelManager . getTestExecutionModel () . addNewTestExecution ( te ) ; de.fhbingen.wbs.dbaccess.repositories.TestCaseExecutionRepository . reloadCache () ; return ymvcgcrcchgzsjyqzxsn ; } <s> fixed WP-endDate-Issue >>> DATES ARE CALCULATED CORRECT NOW
fix_before_refactoring: { boolean result = de.fhbingen.wbs.dbaccess.DBModelManager . getTestExecutionModel () . addNewTestExecution ( te ) ; de.fhbingen.wbs.dbaccess.repositories.TestCaseExecutionRepository . reloadCache () ; return result ; }
fix_after_refactoring: { boolean ymvcgcrcchgzsjyqzxsn = de.fhbingen.wbs.dbaccess.DBModelManager . getTestExecutionModel () . addNewTestExecution ( te ) ; de.fhbingen.wbs.dbaccess.repositories.TestCaseExecutionRepository . reloadCache () ; return ymvcgcrcchgzsjyqzxsn ; }
× fix_prediction_before: { te . setEmployeeLogin ( de.fhen.wbs.translation.Strings . getTest () ) ; return ( de.fhen.wbs.translation.dbaccess.ExecutionManager . reloadDB () ) && ( de.fhen.wbs.bingaccess.dbaccess.ExecutionManager . reload () ) ; }
× fix_prediction_after: { te . setEmployeeLogin ( de.fhenbingch.jbss.translation.Strings . getTest () . y () ) ; return reloadExecution ( te ) ; }

line_index: 213
bug_before_refactoring: { byte [] bytes = getAsBytes ( key ) ; return com.zhy.base.cache.disk.Utils . bytes2Bitmap ( bytes ) ; } <s> public android.graphics.Bitmap getAsBitmap ( java.lang.String key ) { byte [] bytes = getAsBytes ( key ) ; return com.zhy.base.cache.disk.Utils . bytes2Bitmap ( bytes ) ; } <s> fix bug
bug_after_refactoring: { byte [] powjwtbhgzcdvjsmcisr = getAsBytes ( key ) ; return com.zhy.base.cache.disk.Utils . bytes2Bitmap ( powjwtbhgzcdvjsmcisr ) ; } <s> public android.graphics.Bitmap getAsBitmap ( java.lang.String key ) { byte [] powjwtbhgzcdvjsmcisr = getAsBytes ( key ) ; return com.zhy.base.cache.disk.Utils . bytes2Bitmap ( powjwtbhgzcdvjsmcisr ) ; } <s> fix bug
fix_before_refactoring: { byte [] bytes = getAsBytes ( key ) ; if ( bytes == null ) return null ; return com.zhy.base.cache.disk.Utils . bytes2Bitmap ( bytes ) ; }
fix_after_refactoring: { byte [] powjwtbhgzcdvjsmcisr = getAsBytes ( key ) ; if ( powjwtbhgzcdvjsmcisr == null ) return null ; return com.zhy.base.cache.disk.Utils . bytes2Bitmap ( powjwtbhgzcdvjsmcisr ) ; }
× fix_prediction_before: { byte [] bytes = getAsBytes ( key ) ; if ( bytes == null ) { return null ; } return bytes . getAsBytes ( bytes ) ; }
× fix_prediction_after: { return ( ( byte [] ) ( bytes ) ) ; }

line_index: 214
bug_before_refactoring: { byte [] keybytes = org.apache.commons.io.IOUtils . toByteArray ( key ) ; if ( haveKey ( getFingerPrint ( keybytes ) ) ) { return; } runGPG ( java.util.Arrays . asList ( "--import" ) , keybytes ) ; } <s> public void importKey ( java.io.InputStream key ) throws java.io.IOException { byte [] keybytes = org.apache.commons.io.IOUtils . toByteArray ( key ) ; if ( haveKey ( getFingerPrint ( keybytes ) ) ) { return; } runGPG ( java.util.Arrays . asList ( "--import" ) , keybytes ) ; } <s> -Fix fallacy where secret keys were not imported when there was a matching public key in the ring.  -Add some debug stuff.  -Add a decryption unit test.
bug_after_refactoring: { byte [] vcyagvchhyfuxlziezec = org.apache.commons.io.IOUtils . toByteArray ( key ) ; if ( haveKey ( getFingerPrint ( vcyagvchhyfuxlziezec ) ) ) { return; } runGPG ( java.util.Arrays . asList ( "--import" ) , vcyagvchhyfuxlziezec ) ; } <s> public void importKey ( java.io.InputStream key ) throws java.io.IOException { byte [] vcyagvchhyfuxlziezec = org.apache.commons.io.IOUtils . toByteArray ( key ) ; if ( haveKey ( getFingerPrint ( vcyagvchhyfuxlziezec ) ) ) { return; } runGPG ( java.util.Arrays . asList ( "--import" ) , vcyagvchhyfuxlziezec ) ; } <s> -Fix fallacy where secret keys were not imported when there was a matching public key in the ring.  -Add some debug stuff.  -Add a decryption unit test.
fix_before_refactoring: { runGPG ( java.util.Arrays . asList ( "--import" ) , key ) ; }
fix_after_refactoring: { runGPG ( java.util.Arrays . asList ( "--import" ) , key ) ; }
× fix_prediction_before: { org.apache.bytescommons.io.IOUtils . toByteArray ( ( ( getFPG ( key ) ) + "--import" ) , key ) ; }
× fix_prediction_after: { org.apache.zchux.zlecl.IOUtils . runGPG ( ( ( java.io.PrintInputStream ) ( v ) ) , "--import" ) ; }

line_index: 215
bug_before_refactoring: { int dispMode = getResources () . getConfiguration () . orientation ; if ( dispMode == 1 ) { displayMode = "" ; } else { displayMode = "_land" ; } } <s> public void detectDisplayMode () { int dispMode = getResources () . getConfiguration () . orientation ; if ( dispMode == 1 ) { displayMode = "" ; } else { displayMode = "_land" ; } } <s> Modularized MainKeyboard  added theme functionality  solved few issues
bug_after_refactoring: { int stqxdejxznzvsjaxduoo = getResources () . getConfiguration () . orientation ; if ( stqxdejxznzvsjaxduoo == 1 ) { displayMode = "" ; } else { displayMode = "_land" ; } } <s> public void detectDisplayMode () { int stqxdejxznzvsjaxduoo = getResources () . getConfiguration () . orientation ; if ( stqxdejxznzvsjaxduoo == 1 ) { displayMode = "" ; } else { displayMode = "_land" ; } } <s> Modularized MainKeyboard  added theme functionality  solved few issues
fix_before_refactoring: { int dispMode = getResources () . getConfiguration () . orientation ; displayMode = ( dispMode == 1 ) ? "" : "_land" ; }
fix_after_refactoring: { int stqxdejxznzvsjaxduoo = getResources () . getConfiguration () . orientation ; displayMode = ( stqxdejxznzvsjaxduoo == 1 ) ? "" : "_land" ; }
× fix_prediction_before: { int dispMode = getResources () . getConfiguration () . orientation ; if ( dispMode == 1 ) { displayDisplay = "" ; } else { displayMode = "" ; } }
× fix_prediction_after: { int stqxjxz.jxzduoo.jaxoox = getResources () . getConfigurationMode () ; if ( stMode == 1 ) { displayDisplay = "" ; } else { displayMode = "" ; } }

line_index: 216
bug_before_refactoring: { int a = 10 ; int b = 11 ; int c = org.tlsys.Main . get ( 1 , 2 ) ; org.tlsys.Main . giveException () ; return; } <s> public static void main () { int a = 10 ; int b = 11 ; int c = org.tlsys.Main . get ( 1 , 2 ) ; org.tlsys.Main . giveException () ; return; } <s> Error fix
bug_after_refactoring: { int puuwjzmztzcgbuotunva = 10 ; int mhgkkurwykmxknekdhrh = 11 ; int uxozawxewewlgucoftqv = org.tlsys.Main . get ( 1 , 2 ) ; org.tlsys.Main . giveException () ; return; } <s> public static void main () { int puuwjzmztzcgbuotunva = 10 ; int mhgkkurwykmxknekdhrh = 11 ; int uxozawxewewlgucoftqv = org.tlsys.Main . get ( 1 , 2 ) ; org.tlsys.Main . giveException () ; return; } <s> Error fix
fix_before_refactoring: { int a = 10 ; int b = 11 ; int c = org.tlsys.Main . get ( 1 , 2 ) ; org.tlsys.Main . giveException () ; new org.tlsys.Main () ; return; }
fix_after_refactoring: { int puuwjzmztzcgbuotunva = 10 ; int mhgkkurwykmxknekdhrh = 11 ; int uxozawxewewlgucoftqv = org.tlsys.Main . get ( 1 , 2 ) ; org.tlsys.Main . giveException () ; new org.tlsys.Main () ; return; }
× fix_prediction_before: { int a = 10 ; int b = 11 ; int c = org.tlsys.Main . get ( 1 , 2 ) ; return; }
× fix_prediction_after: { org.uwjzm.motzcgbenva.Main . get ( 10 ) ; int u = 10 ; return; }


{"code1": "package humaneval.buggy;\n\n/* sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1 */\n\npublic class SUM_TO_N {\n    public static int sum_to_n(int n) {\n        return (n + 1) * (n / 2);\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "p", "num", "m", "g", "len", "nt", "ln", "a", "x", "count", "number", "dn", "ne", "all", "l", "j", "nb", "v", "q", "cn", "ns", "h", "c", "nm", "nc", "nn", "na", "N", "i", "np", "o", "s", "d", "norm", "sn", "t"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class SUM_PRODUCT {\n    public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[2];\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nodes", "innumbers", " nums", "Nulas", "Nums", "niverse", "enodes", "nodes", "Niverse", " nlements", "enlements", "enumbers", " niverse", " nulas", "nums", "nlements", "innulas", "nulas", "enums", "tumbers", "Numbers", "innums", "tlements", "inniverse", "tums", "todes"], "result": ["set", "test", "data", "trade", "vector", "sum", "draw", "request", "total", "valid", "success", "relation", "output", "integer", "figure", "goal", "product", "cur", "current", "pair", "diff", "term", "list", "currency", "other", "prefix", "collect", "query", "join", "Result", "value", "number", "all", "table", "ret", "complete", "extra", "spring", "next", "unique", "contact", "memory", "cert", "feature", "work", "primary", "master", "results", "report", "ult", "sequence", "r", "first", "factor", "rule", "mate", "profile", "root", "make", "match", "message", "res", "front", "answer"], "n": ["u", "nu", "mn", "b", "num", "p", "note", "net", "out", "nt", "ln", "z", "x", "number", "ne", "l", "fn", "nb", "name", "v", "gn", "ic", "y", "cn", "ns", "c", "nm", "nc", "nn", "na", "N", "node", "r", "ot", "i", "np", "o", "k", "d", "ng", "sn", "t", "nr", "an"]}}
{"code1": "package humaneval.buggy;\n\n/* Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111' */\n\npublic class CHANGE_BASE {\n    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n            result = result + x % base;\n            x = x - x / base;\n        }\n        return result;\n    }\n}\n", "substitutes": {"x": ["xxx", "ox", "p", "b", "xf", "ctx", "val", "m", "xt", "ex", "current", "mx", "px", "z", "xx", "fixed", "xxxxxxxx", "any", "xc", "X", "l", "ax", "ix", "check", "xxxx", "v", "rx", "y", "tx", "w", "wx", "ct", "h", "index", "c", "xes", "xs", "xd", "i", "xy", "e", "xe", "n", "d", "f", "bit", "dx", "xi", "t", "fx", "xp", "orig"], "base": ["max", "zero", "b", "se", "total", "balance", "m", "ASE", "space", "length", "len", "prime", "based", "change", "prefix", "buffer", "bas", "unit", "type", "bound", "lock", "bp", "block", "batch", "work", "bf", "machine", "scale", "Base", "range", "bi", "bu", "factor", "ase", "bit", "rule", "reset", "kb", "beta", "f", "size", "ma", "bar"], "result": ["test", "reason", "continue", "data", "wrapper", "total", "sum", "char", "response", "success", "relation", "output", "ful", "expression", "product", "goal", "repl", "out", "cur", "term", "currency", "prefix", "value", "join", "buffer", "Result", "lower", "phrase", "ret", "name", "str", "content", "complete", "full", "next", "string", "primary", "master", "report", "results", "comment", "r", "sequence", "description", "date", "text", "mate", "status", "root", "command", "match", "message", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class FIND_ZERO {\n    public static double poly(List<Double> xs, double x) {\n        double sum = 0;\n        for (int i = 0; i < xs.size(); i += 1){\n            sum += xs.get(i) * Math.pow(x, i);\n        }\n        return sum;\n    }\n\n    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n            if (poly(xs, begin) * poly(xs, end) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}\n", "substitutes": {"xs": ["xxx", "obs", "icks", "fts", "ints", "vs", "pps", "ads", "ctx", "ls", "apps", "bs", "sys", "ews", "inters", "ats", "eps", "its", "phones", "ials", "opens", "ops", "xon", "sels", "px", "boxes", "xx", "xc", "ys", "ims", "inches", "rices", "rx", "tx", "xa", "wx", "ns", "aus", "tops", "abs", "fixes", "hs", "phis", "iffs", "xes", "ices", "ics", "ws", "rates", "yx", "xe", "qs", "ires", "rex", "cats", "eas", "ds", "amps", "views", "gs", "dx", "ists", "fps", "xi", "fx", "xp", "rs"], "x": ["u", "ox", "p", "xf", "xt", "ex", "mx", " cx", "px", "z", "xx", " xx", "xc", "X", "ax", "ix", "v", "tx", "rx", " y", "xa", "y", "w", "wx", "xes", "e", "xy", " dx", "xe", "d", "f", "dx", "xi", "t", "fx", "xp"], "sum": [" sums", "val", "cu", "acc", "total", "num", "mean", " Sum", "us", "cal", "sat", "si", "term", "um", "sa", "hash", "count", "unit", "result", "mod", "Sum", "mm", "sam", "doc", "su", " summed", "v", "average", "add", "ums", "med", "ass", " SUM", "sys", "h", "mass", "fac", "comment", "summary", "mem", "gram", "union", "cum", "n", "body", "cos", "sim", "prof", "cat", "size", "match"], "i": ["u", "phi", "p", "ri", "ori", "in", "m", "oi", "iu", "ui", "us", "id", "info", "ti", "hi", "ai", "I", "si", "ki", "li", "pi", "multi", "io", "it", "qi", "ms", "fi", "zi", "ami", "all", "j", "l", "ix", "key", "di", "uri", "v", "ic", "y", "mi", "im", "ci", "c", "ini", "e", "o", "ie", "is", "bi", "ii", "xi", "ip", "init", "gi"], "begin": ["set", "End", "may", "where", "gate", "middle", "go", "mem", "local", "pan", "common", "fill", "body", "bone", "don", "ward", "back", "EGIN", "home", "update", "surface", "continue", "min", "best", "goal", "me", "en", "aug", "bound", "ker", "pre", "window", "get", "ge", "off", "minimum", "span", "Begin", "sav", "global", " beg", "init", "point", "subject", "mean", "blue", "old", "cover", "pen", "half", "un", "offset", "late", "side", "index", "shift", "enter", "gan", "initial", "stay", "paren", "reset", " Begin", "make", "meet", "ize", "mid", "start", "run", "coord", "pend", "bid", "bor", "stop", "bind", "commit", "pair", "mark", "open", "then", "lower", "be", "rest", "add", "head", "gap", "batch", "floor", "range"], "end": ["set", "End", "up", "out", "entity", "all", "gate", "ext", "last", "event", "hend", "die", "dest", "back", "update", "edge", "goal", "iter", "it", "en", "eff", "vert", "rend", "next", "END", "ord", "window", "ending", "nd", "alt", "after", "obj", "post", "max", "inn", "eng", "append", "len", "term", "other", "except", "until", "close", "ender", "offset", "entry", "ad", "ended", "save", "ort", "enter", "est", "reset", "start", "env", "pend", "chain", "and", "ut", "id", "stop", "open", "then", "ent", "ment", "fail", "rest", "ends", "east", "ff", "range", "e", "endif", "send"], "center": ["max", "set", "coord", "pad", "point", "Center", "edge", "layout", "mean", "centered", "cal", "radius", "ize", "cover", "value", "unit", "cpu", "location", "gate", "offset", "check", "copy", "average", "ca", "c", "cf", "inner", "shift", "left", "central", "enter", "mac", "star", "mem", "clip", "scale", "leader", "cp", "core", "ale", "cell", "ger", "origin", "cap", "norm", "mate", "cat", "mid", "init", "start"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/*\n * Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n */\n\npublic class UNIQUE_DIGITS {\n    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n                if((curr_digit % 2) != 0) {\n                    all_odd = true;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}\n", "substitutes": {"x": ["xxx", "p", "xf", "ctx", "xt", "g", "ex", "nex", "ux", "px", "z", "xx", "xc", "X", "l", "ix", "v", "rx", "y", "tx", "xa", "xb", "w", "wx", "ct", "abc", "h", "xes", "xs", "e", "xy", "xe", "xd", "n", "xml", "xi", "fx", "xp"], "res": ["mont", "val", "re", "us", "repl", "out", "ren", "RES", "usr", "ro", "aux", "list", "ms", "gr", "result", "ons", "rel", "resp", "ret", "rek", "ps", "helps", "sol", "rez", "pres", "rest", "crit", "rm", "arr", "full", "ber", "sys", "rt", "rem", "results", "ress", "pas", "r", "req", "rex", "red", "ack", "rev", "obj", "reset", "cons", "Res", "stock", "reg", "vol", "rs", "resh"], "i": ["ind", "u", "ri", "b", "p", "oi", "ori", "iu", "in", "ui", "integer", "id", "ti", "ai", "I", "ki", "si", "ij", "li", "pi", "a", "ik", "it", "l", "j", "ix", "di", "ic", "v", "y", "mi", "ci", "index", "r", "o", "iri", "is", "bi", "ii", "n", "k", "xi", "gi"], "num": ["con", "zero", "phys", "conv", "nu", "coord", "mon", "sum", "no", "total", "missing", "NUM", "info", "cal", "nam", "mult", "net", "Num", "nt", "old", "mark", "buf", "um", "en", "multi", "snap", "count", "pos", "number", "one", "nb", "form", "mu", "im", "tmp", "dev", "ord", "txt", "multipl", "index", "nm", "block", "na", "rem", "off", "node", "np", "cum", "common", "n", "nom", "tim", "msg", "temp", "orig"], "curr_digit": ["curr_hour", "currt_rounder", "curr2number", "curr2rounder", "currobjhour", "currt2digit", "currobjnumber", "currobjdigit", "currmatnumber", "currt2rounder", "curr_rounder", "curr_number", "curre_digit", "currt_digit", "curre_hour", "curr_num", "curr2digit", "curre_number", "currobjnum", "currt_number", "currmatrounder", "currt2number", "curre_num", "currmatdigit"], "all_odd": ["both_odd", " all_integer", "all_dd", " all_even", "all_found", " all_kept", " all_found", "both_dd", "allalleven", "allallodd", "all_even", "all_kept", "allallfound", "allallinteger", "all_integer", "all_drawn", "both_drawn", "both_even"]}}
{"code1": "package humaneval.buggy;\n\npublic class CONCATENATE {\n    public static String concatenate(String[] strings) {\n        String result = null;\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n}\n", "substitutes": {"strings": ["sheets", "scripts", "ls", "services", "pieces", "suits", "years", "workers", "sites", "ies", "inters", "series", "objects", "groups", "states", "sels", "names", "months", "chains", "ids", "nets", "dos", "ians", "idents", "prints", "values", "pins", "ties", "vals", "rings", "results", "styles", "parts", "sts", "ings", "s", "terms", "users", "views", "gs", "units", "lists", "lines", "ses", "rows"], "result": [" resulted", "test", "reason", "continue", "data", "vector", "total", "sum", "char", "response", "success", "relation", "output", "character", "integer", "goal", "product", "current", "mark", " Result", "value", "join", "Result", " resulting", "real", "mask", "complete", "str", "tmp", "full", "memory", "the", "true", "primary", "master", "results", "comment", "r", "text", "cup", "mate", "status", "meg", "root", "make", "command", "match", "message", "answer"], "string": ["data", "p", "point", "in", "char", "character", "source", "instance", "relation", "ring", "integer", "group", "series", "space", "element", "pair", "list", "word", "value", "name", "str", "st", "entry", "service", "parse", " sting", "object", "section", "comment", "e", "scale", "password", "sequence", "s", "component", "sample", "row", "single", "file", "match", "start"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\n\n/* Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == [] */\n\npublic class ORDER_BY_POINTS {\n    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n}\n", "substitutes": {"nums": ["numbers", " numbs", "num", "neumbers", "dumbs", "Nums", "dumbers", " nems", "Nomes", "Num", "enuma", "neums", "neomes", "anogs", "names", "nsomes", "numa", "neams", " nogs", "dums", "nams", "Nams", " numa", "nsums", "anames", "dum", " numbers", "nsumbers", "anems", "namps", "nogs", "nomes", "enems", "enogs", " num", "enums", "Names", "Numbs", "numbs", "Numbers", "nems", "anums", "anuma", "Namps", "anamps", "nsames", "nsams", "nsamps", "anumbers"], "digits": ["digributes", "digbits", "dits", "posbits", " digributes", "digists", "dirit", "volists", "signits", " digbits", "derits", "commists", "positions", "volbits", "DigITS", "posits", " digitions", "funbits", "commited", "Digists", "dirits", " digITS", "signists", "Digit", "posals", "dITS", "digals", "Digins", "dirbits", "funits", "Digributes", "dit", "digins", "commbits", "commits", "digited", "Digbits", "deritions", "Digits", "derbits", "dributes", "derals", "digitions", "volits", "funited", "signbits", "volins", " digals", "dirITS", "Digited", "signins", "funists", "digITS"], "digits_number": ["digitions_directory", "digits2Number", "digats_Number", "digitedallwork", "digals2Number", "digals_Number", "digits_notation", "digals2version", "digitions_message", "digits_num", "digats_number", "digitsJdisplay", "digits7work", "digits___display", "digitsureversion", "digitions_error", "digitsurenum", "digitsallnotation", "digited_factor", "digited_work", "digals_version", "digitsurenumber", "digitedallnumber", "digitsJtotal", "digitions_Number", "digats_total", "digitedallfactor", "digits___number", "digits_Number", "digits2number", "digitsallwork", "digitsureNumber", "digitsallfactor", "digits7number", "digits_total", "digitions_num", "digitsablenumber", "digits_version", "digits2version", "digals_num", "digitsJnumber", "digats_display", "digals_number", "digits7factor", "digits7notation", "digits_factor", "digits_directory", "digitsallnumber", "digits_message", "digits___total", "digited_number", "digitsJNumber", "digals2num", "digals2number", "digitsablemessage", "digitsablenum", "digits_display", "digitedallnotation", "digits_work", "digitsabledirectory", "digits___Number", "digited_notation", "digitions_number", "digits2num", "digits_error"], "i": ["ji", "asi", "oi", "g", "ei", "yi", "us", "ai", "multi", "x", "ims", "mu", "im", "iti", "o", "is", "ii", "eu", "u", "ori", "iu", "ex", "me", "ti", "hi", "li", "it", "ami", "by", "l", "on", "v", "ini", "s", "init", "gi", "ind", "phi", "ri", "in", "ui", "parent", "info", "ij", "this", "pi", "io", "ix", "di", "ity", "wi", "index", "c", "m", "id", "I", "si", "ki", "qi", "zi", "ic", "q", "y", "mi", "iq", "cli", "ci", "h", "e", "ie", "bi", "f", "status", "sim", "xi", "ip", "t"], "neg": ["Pos", "zero", "sign", "cond", "vs", "num", "acc", "bad", "exp", "valid", "g", " Neg", "nl", "Neg", "spec", "not", "term", "ko", "pos", "minus", "diff", "x", "unit", "ne", "rel", "po", "def", "log", "jump", "div", "ax", "v", "inv", "index", "rot", "comp", "git", "coll", "star", "dep", "sec", "ku", "rev", "nom", "flag", "cos", "deg", "del", "negative", "dec"], "n": ["u", "nan", "nu", "mn", "p", "num", "note", "m", "b", "nl", "g", "len", "net", "out", "ren", "nt", "ln", "names", "z", "en", "number", "dn", "ne", "all", "l", "fn", "nb", "on", "v", "gn", "pn", "y", "cn", "ll", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "ni", "node", "np", "o", "d", "ng", "sn", "t", "nr"], "digit": ["zero", "ind", "point", "num", "sum", "total", "char", "character", "valid", "bid", "inc", "digital", "integer", "uid", "position", "iter", "prime", "term", "rand", "it", "prefix", "token", "hash", "word", "number", "unit", "unsigned", "init", "format", "div", "uri", "fix", "major", "umeric", "eur", "dot", "dig", "index", "letter", "player", "feature", "git", "star", "basic", "red", "fill", "factor", "nom", "dat", "d", "flag", "oct", "frac", "dimension", "alpha", "beta", "member", "dec", "cat", "hex", "negative", "latest", "pid", "winner", "tag"], "j": ["ji", "jit", "b", "sp", "m", "uj", "json", "g", "jj", "aj", "og", "ja", "ij", "other", "z", "jl", "x", "jo", "by", "J", "oj", "l", "jump", "ax", "ix", "jet", "v", "q", "y", "pt", "bj", "kj", "att", "off", "br", "job", "ie", "jp", "js", "k", "s", "let", "jc", "dj", "err", "t", "obj", "el"], "result": ["test", "wrapper", "continue", "run", "total", "response", "valid", "relation", "success", "output", "group", "goal", "current", "pair", "term", "list", "currency", "other", "this", "buffer", "collect", "diff", "Result", "all", "created", "table", "ret", "complete", "extra", "contact", "successful", "true", "work", "report", "results", "br", "search", "r", "summary", "bridge", "collection", "mate", "trace", "profile", "cache", "make", "match", "res"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n */\n\npublic class TRI {\n    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = -3;\n        for(int i = 2; i < n - 1; i--) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "p", "mn", "num", "no", "m", "nl", "len", "net", "nt", "ln", "number", " N", "ne", "l", "j", "name", " ns", "nb", "v", "q", "cn", "ity", "ll", "ns", "nor", "c", "nm", "h", "nc", "nn", "na", "N", "np", "o", "k", "d", "ng", " ng", "network", "sn", "t"], "sequence": ["history", "species", "test", "server", "struct", "note", "vector", "total", "draw", "subject", "response", "document", "chain", "expression", "series", "store", "sync", "position", "sequ", "iter", "frame", " Sequence", "list", "pse", "specified", "prefix", "derived", "buffer", "journal", "random", "number", "result", "seq", "table", "serial", "template", "ment", "nexus", "reference", "ence", "system", "cause", "string", "iterator", "block", "batch", "ences", "version", "database", "range", "scale", "record", "choice", "print", "\u3082", "description", "queue", "sche", "collection", " sequences", "network", "seed", "sample", "trace", "cache", "command", "match", "message"], "i": ["u", "ji", "base", "phi", "ri", "asi", "in", "m", "iu", "oi", "ui", "ei", "us", "me", "id", "info", "hi", "ti", "ai", "I", "si", "ki", "ij", "li", "pi", "a", "x", "multi", "it", "io", "qi", "z", "zi", "ami", "l", "j", "fi", "ix", "uri", "di", "v", "ic", "q", "y", "mi", "im", "mu", "ci", "cli", "slice", "index", "ini", "go", "batch", "\u0438", "o", "is", "bi", "ii", "f", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.*;\n\n/* You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None */\n\npublic class NEXT_SMALLEST {\n    public static Integer next_smallest(int[] lst) {\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n}\n", "substitutes": {"lst": ["rist", "Llist", "lstr", "Lst", "Lsts", "rst", "lssts", "list", "dlstr", "lsstr", " lnt", "llist", " lstr", " lsts", "dlnt", "rlist", "dlst", "lnt", "dlsts", "rsts", " llist", "lsst", "lsts", "lsnt", " list"], "numbers": ["enures", "minlections", "nlections", " nums", "neumbers", "nures", "numurers", "dumbers", "minuers", "nanumeric", " nlections", "enumeric", "nurations", " nurations", " nurers", "neums", "alllections", "nurers", " nlements", "minurations", "enumbers", "nums", "allurations", "numumbers", "neurers", "nlements", "minumbers", "dures", " nuers", "enots", "nanots", "allumbers", "nanumbers", "nuers", "nots", "numeric", "alluers", "dumeric", "numums", "nelements", "dots", "nanures", "numlements"], "n": ["nan", "nu", "mn", "b", "note", "p", "m", "nl", "net", "nt", "ln", "z", "ne", "l", "j", "fn", "v", "gn", "cn", "hn", "ll", "ns", "nor", "c", "nm", "nn", "na", "N", "node", "r", "o", "i", "np", "k", "d", "ng", "sn", "t", "nr", "an"], "no_duplicate": ["no_diffplicate", "no_diffpge", "no_dupication", "no_dupleicated", "no_dublication", "no_dupicator", "no_dupesidate", "no_dulexicated", "no_duplege", "no_Duclicated", "no_diffplide", "no_diffpicate", "no_duclicated", "no_dupate", "no_duplication", "no_dupide", "no_Duclicate", "no_duplicated", "no_denpication", "no_Duclical", "no_denpicate", "no_Duplicated", "no_duplide", "no_denpicated", "no_dupleate", "no_duplidate", "no_duribge", "no_duribide", "no_dublicit", "no_denplication", "no_dulexication", "no_duplge", "no_duplate", "no_dupleide", "no_dupleication", "no_Duplical", "no_Duclidate", "no_dupicate", "no_duplicator", "no_duclidate", "no_Duplicator", "no_Duplate", "no_dupicit", "no_dublicate", "no_duclicate", "no_dupleicator", "no_dupicated", "no_duplicit", "no_dupesicated", "no_denplicit", "no_dublicated", "no_dupge", "no_denplicate", "no_diffplication", "no_diffplge", "no_dupesicate", "no_duribicate", "no_dulexicate", "no_diffpide", "no_dupesical", "no_dupleicate", "no_duribication", "no_duclical", "no_denpicit", "no_duplical", "no_Duplidate", "no_denplicated", "no_dulexicit", "no_Duplicate", "no_diffpication"]}}
{"code1": "package humaneval.buggy;\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n//             GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A \n//           > 3.3                A- \n//           > 3.0                B+\n//           > 2.7                B \n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+ \n//           > 0.7                D \n//           > 0.0                D-\n//             0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\npublic class NUMERICAL_LETTER_GRADE {\n    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n}\n", "substitutes": {"grades": ["ods", "comes", "versions", "points", "needs", "pps", "ads", "modules", "services", "details", "vs", "years", "works", "tracks", "marks", "ates", "phones", "notes", "months", "votes", "ids", "errors", "ms", "dates", "changes", "graded", "tests", "mys", "mates", "ges", "ages", "arts", "pins", "ends", "ments", "ades", "times", "reports", "ports", "ties", "posts", "days", "results", "rates", "charges", "grading", "weights", "orders", "verages", " upgrades", "rics", "angles", "rows", "lists"], "letter_grade": ["letteretgraded", "letter_der", "letter_quote", "word_depth", "letter_tile", "letterletreason", "letter_source", "letter10grade", "letter10body", "letterletresult", "letterresscale", "physical_tile", "starter_tile", "systemtstate", " letter_date", "letterAppgrad", "word_mate", "letter5vote", "letter7grade", "lettertheresult", "letter7core", "letterdevmetadata", "letter_state", "letter2grade", "starter_take", "letterlettile", " letter_grad", "journalletrice", "letter64source", " letter2date", "letter3tile", "letterletgraded", "system_grade", "letter64like", "letter3depth", "let_scale", "starter_quote", "state_tile", "lower_metadata", "letterletstate", "starterthegrade", "physical_order", "letterletlike", "lower_continue", "letter7grad", "system_result", "word_grade", "starter_source", "format_grad", "lettertdepth", "letter_like", "startertheresult", "letter_write", "her_reason", "letter_take", "letteretgrade", "stateergate", "letter5tile", "journal_rice", "letter_test", "starterthetake", "format_mate", "letterresgrade", "letter3body", "letter10progress", "stateerbody", " letter_graded", "letter_move", "let_grade", "letterdevvote", "letter2der", "lettertmate", "letterliketile", "journal_result", "letterAppdepth", "system_state", "letter3gate", "letteredgrad", "letter64take", "lettertstate", "physical5grade", "journalletlike", "letter64result", "lettertgrade", " letter2der", "letter_mean", "her_grade", "letternettile", "word_state", "letter3mate", "wordtgrade", "starter_progress", "lower_grade", "letterletgrade", "letterlettest", "letterdevgrade", "letterlikegrade", "journalletresult", "letter3take", "her_order", "letter5state", "formateddepth", "physical5trade", "starterthesource", "letterlikeprogress", "letterletorder", "formatedgrade", "letter____date", "letter10move", "letterletrice", "systemtdepth", "format_grade", "letter5grade", "letterlikequote", "letter_trade", "state_body", "stateergrade", "letter10write", "format_depth", "lettererbody", "system_depth", "let_come", "letter5trade", "letterresgraded", "letternettrade", "letter_scale", "letter____move", "letter3grade", "letter10date", "systemtresult", "letterthegrade", " letter_state", "lettereddepth", "journal_like", "wordtmate", "letter_continue", " letter2grade", " letter_test", "letter_mate", "letter7mean", "journal_grade", " letter2grad", "letter3source", "physical_grade", "letter_rice", "letteredgrade", "state_grade", "letter10quote", "starter_grade", "letter3state", "formatedmate", "physical_trade", "letter_date", " letter_move", "letteretstate", "letter____write", "letter_progress", "letter10gate", " letter_write", "let_graded", "letter64rice", "her_continue", "letterlettrade", "letter5result", "letterrescome", "letter2date", "letter2grad", "letter5order", "formatedgrad", "letter_reason", "letter5depth", "letterletcontinue", "letter5continue", "letterdevcontinue", "letterthetake", "journalletgrade", "letter_body", "letter_grad", "letter_come", "letternetorder", "letter_core", "letter64grade", "letterettest", "letter_graded", "physical5tile", "systemtgrade", "wordtstate", "stateertile", "letter_metadata", " letter_der", "letterergate", " letter_mean", "physical5order", "letterertile", "letter5reason", "letter3result", "letter5metadata", "lettertresult", "letter10tile", "letternetgrade", "state_gate", "starter_result", "lower_vote", "letter_depth", "letter_gate", " letter_core", "letterAppgrade", "letterAppmate", "letterergrade", "letter____grade", "wordtdepth", "letter_result", "letteredmate", "letter_order", "letterthesource", "letter_vote"], "i": ["ji", "oi", "exp", "ei", "us", "ai", "multi", "ios", "x", "ims", "uri", "im", "iti", "print", "o", "iri", "is", "n", "ii", "u", "ori", "gu", "iu", "ski", "hi", "ti", "iter", "client", "li", "it", "field", "table", "complete", "ini", "at", "span", "you", "origin", "user", "err", "init", "gi", "ind", "phi", "ri", "b", "ui", "source", "info", "port", "ij", "term", "pi", "io", "isi", "ix", "di", "index", "tree", "history", "page", "m", "ice", "chain", "series", "id", "I", "si", "list", "then", "a", "qi", "fi", "zi", "j", "ic", "q", "y", "uni", "mi", "iq", "cli", "ci", "iki", "inner", "batch", "ni", "fr", "record", "iat", "bi", "sim", "xi", "ip"], "gpa": ["egota", "regpu", "mgpa", "gupa", "ggpx", "GPA", "pgppa", "gpse", " gpi", "gpan", "grouppre", "gPA", "fpu", "grepi", "gampa", "regota", "gatePa", "gregpe", "googlepar", " gpid", "igpa", " gpic", "gamppa", "pgPA", "gatepe", "grouppa", "ggpa", "gpe", "gpar", " gpar", " gty", "gateda", "gatepic", "regpx", "igppa", "qpi", "grepa", "grepar", "mgpan", "egppo", "Gpa", " gapa", "gty", " gpe", "greppa", "gda", "algpet", "egta", "qpa", "gregpu", " gpan", "gfa", "gampse", " gfa", "fPa", "pgpe", "egpi", "gota", "gatepet", " gpre", "gpet", " gda", "fpa", "gppa", " gpet", "gpx", "egpa", "algppo", "igpar", "grepid", " gpu", "regfa", "ggfa", "grouppan", "gampan", "Gppa", " gjp", "gppo", " gpx", "gta", "fpet", "gapa", "ggty", "groupapa", "gregpa", "gpic", "gampar", "gregpic", " gPA", "regpa", "guppa", "ggpi", " gppa", "gamdp", "googlepa", "gpre", "egjp", "gregppo", "egpan", "ggta", "googleppa", "gjp", "regty", "egty", "gPa", "gatepa", " gota", "Gpe", "ggpan", "gatepu", "gregda", " gdp", "igpid", "algpa", "greta", "egpet", "googlepse", "grepan", "gupi", "gredp", "qppa", " gppo", "algpan", "mgpre", " gpse", "qota", "guota", "gregjp", "gpid", "gpi", "mgapa", "gregpet", "gdp", "egpu", "pgpa", "gpu", "gregPa"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n *\n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n */\n\npublic class WORDS_STRINGS {\n\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n}\n", "substitutes": {"s": ["sv", "set", "p", "b", "ls", "sq", "m", "g", "es", "strings", "a", "less", "l", "ps", "str", "v", "w", "y", "h", "string", "os", "e", "xs", "S", "is", "simple", "n", "js", "south", "gs", "t", "rs", "ss"], "result": ["ure", "continue", "data", "vector", "total", "either", "create", "response", "valid", "relation", "success", "output", "see", "end", "goal", "there", "found", "cur", "current", "pair", "list", "other", "collect", "now", "folder", "Result", "all", "created", "table", " resulting", "ret", "done", "complete", "real", "next", "memory", "feature", "true", "primary", "report", "results", "search", "initial", "first", "date", "operator", "collection", "mate", "profile", "res", "answer"], "s_list": ["s_table", "s7List", "s_dir", "s2list", "s3list", "s3l", "sql_li", " s7list", "sparlists", "sparbody", "s_lists", " s_listed", "s7l", " s_lists", "spardir", "s2List", " s_string", "sql_long", "sparlist", "s3List", " s7l", "s_li", " s_body", "sql_list", "sahlist", " s_l", "s_string", "sahbody", "s7table", "s2listed", "s7list", "sahlists", " s_List", " s7table", " s_dir", "s_l", "s_long", "s3table", "sahdir", "s_List", "s2string", "sql_listed", "s_listed", " s_table", " s7List", "s_body"], "c": ["arc", "con", "dc", "conv", "ec", "cd", "p", "cu", "b", "char", "sc", "character", "cs", "chain", "cont", "ch", "rc", "cur", "z", "bc", "C", "fc", "lc", "xc", "l", "cr", "mc", "str", "v", "ic", "q", "ct", "tc", "cf", "ce", "uc", "ac", "cm", "i", "cp", "code", "unc", "col", "k", "f", "cos", "cc", "cat", "com"], "result_array": ["result2set", "result2hash", " result2collection", "resultmatlist", "resultmathash", "resultptcontainer", "result2container", "result2array", "result_hash", "results_hash", " result2arr", " result_container", "result_list", "resultmatarray", " result2container", " result2array", "resultptarr", "results_array", "results_set", "resultmatset", "result2arr", "result2list", " result_arr", "result2collection", " result_collection", "resultptcollection", "result_container", "result_set", "results_list", "resultptarray", "result_arr", "result_collection"], "r": ["u", "p", "b", "re", "m", "dr", "kr", "rc", "er", "rr", "adr", "pair", "vr", "l", "cr", "rg", "str", "ar", "R", "v", "rs", "w", "q", "pr", "sr", "rb", "h", "rt", "br", "rd", "mr", "e", "n", "k", "d", "row", "attr", "err", "nr", "res"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class HAS_CLOSE_ELEMENTS {\n    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n                double distance = numbers.get(i) - numbers.get(j);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n", "substitutes": {"numbers": ["natives", " nums", "neumbers", "numpy", "neews", " natives", "dumbers", "unnums", "neums", "numatives", "neumpy", " numeric", "numers", "nets", " nounters", "neumers", "dumpy", "dumer", "unnews", " numer", "nums", "numumbers", "dums", "onenatives", "dounters", "pumeric", " news", "numeters", "nsums", "neters", "unnumbers", "nsumbers", "numernels", " nues", "pumpy", " neters", " nernels", " numpy", "numer", "nsues", "unnumers", "nsets", "nues", "neets", "nernels", "numeric", "pumer", " numers", "onenumbers", "dumeric", " nets", "pumbers", "nounters", "onenernels", "news", "neues", "oneneters", "neounters"], "threshold": ["ithamber", " thportion", "thribution", "hribution", "Thribution", "chamber", "ithportion", "hportion", "chportion", "thamber", "hresh", "ithreshold", "Thamber", "chreshold", "Thportion", "thresh", " thresh", "ithribution", "hreshold", "Threshold", "chribution", "thportion", "Thresh", " thribution"], "i": ["ind", "u", "phi", "ri", "asi", "ori", "ir", "in", "m", "iu", "ui", "yi", "ei", "us", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "li", "ami", "it", "io", "by", "qi", "aci", "multi", "zi", "ik", "ims", "ix", "di", "ic", "uri", "q", "mi", "iq", "im", "ci", "inner", "ini", "ia", "ie", "iri", "is", "bi", "ii", "xi", "ip", "init", "eu"], "j": ["ind", "ji", "jas", "b", "p", "sp", "m", "uj", "json", "g", "jj", "aj", "adj", "out", "old", "ja", "ij", "other", "it", "z", "jl", "J", "rel", "oj", "l", "jump", "ax", "ix", "on", "v", "q", "pt", "y", "bj", "im", "next", "c", "kj", "bot", "ge", "att", "br", "fr", "job", "at", "jp", "bi", "js", "k", "ph", "jc", "dj", "err", "jac", "je", "obj", "el"], "distance": ["partial", "sum", "directory", "response", "relation", "dist", "length", "position", "efficient", "density", "radius", "still", "remote", "driver", "diff", " Distance", " distances", "service", "depth", "relative", "istance", "duration", "de", "shape", "sequence", "description", "Distance", "approximately", "route", "dimension", "erence", "d", "km", "near", "imity", "delay", "definition", "similar", "connection", "command", "message"]}}
{"code1": "package humaneval.buggy;\n\n// Given a string s, count the number of uppercase vowels in even indices.\n\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\n\npublic class COUNT_UPPER {\n    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n                count += 1;\n        }\n        return count;\n    }\n}\n", "substitutes": {"s": ["sv", "data", "p", "b", "ls", "sq", "csv", "sb", "bs", "strings", "ats", "its", "sw", "a", "ms", "less", "ps", "str", "st", "v", "w", "sql", "say", "ns", "h", "abs", "string", "os", "xs", "r", "e", "qs", "is", "S", "sts", "sf", "n", "js", "text", "gets", "gs", "t", "rs", "ss"], "count": ["ind", "cast", "zero", "continue", "process", "cd", "more", "num", "sum", "total", "counter", "hold", "cont", "amount", "inc", "integer", "length", "out", "found", "nt", "current", "list", "um", "z", "C", "now", "number", "result", "table", "Count", "nb", "check", "index", "coll", "comment", "ount", "carry", "core", "ctr", "n", "flag", "empty", "find", "size", "weight", "latest", "cache", "th", "match"], "i": ["ind", "u", "ji", "phi", "point", "in", "m", "iu", "gu", "ui", "ex", "ei", "us", "id", "ogi", "hi", "ti", "iter", "ai", "I", "si", "ij", "pi", "li", "it", "x", "multi", "qi", "j", "ix", "uri", "di", "v", "ic", "y", "mi", "im", "ci", "index", "ini", "go", " j", "e", "is", "bi", "ii", "n", "f", "xi", "ip", "t", "init", "gi"], "c": ["con", "u", "arc", "dc", "conv", "cd", "cu", "can", "char", "sc", "cont", "cs", "g", "anc", "cl", "vc", "ch", "rc", "co", "a", "z", "bc", "C", "fc", "lc", "cmp", "cr", "l", "enc", "ar", "ic", "v", "ct", "ca", "abc", "h", "tc", "ce", "uc", "ac", "coll", "etc", "e", "cp", "unc", "gc", "col", "f", "cap", "cod", "cc", "t", "cache", "err"]}}
{"code1": "package humaneval.buggy;\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\n\npublic class IS_MULTIPLY_PRIME {\n    public static boolean is_prime(int n) {\n        for (int i = 2; i < n; i += 1) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; j += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "p", "b", "mn", "no", "num", "m", "g", "ny", "nt", "ln", "pi", "en", "z", "x", "ne", "l", "nb", "v", "q", "cn", "ns", "c", "nm", "nc", "nn", "na", "N", "ni", "r", "np", "o", "d", "ng", "sn", "t", "nr", "an"], "i": ["ind", "u", "ji", "phi", "p", "asi", "ri", "ir", "in", "iu", "ui", "g", "ei", "yi", "me", "id", "z", "info", "hi", "iter", "ti", "out", "ai", "I", "si", "ki", "ij", "pi", "li", "x", "it", "ami", "fi", "qi", "io", "zi", "ani", "ik", "ix", "di", "ion", "ic", "v", "y", "II", "mi", "im", "iq", "ci", "ity", "ini", "ia", "ni", "ie", "o", "is", "bi", "ii", "d", "f", "sim", "xi", "ip", "err", "t", "init", "gi"], "a": ["aa", "p", "b", "val", "au", "m", "act", "g", "aff", "aj", "to", "aaa", "si", "z", "sa", "count", "all", "any", "am", "ax", "ba", "ta", "ar", "v", "w", "ity", "ca", "area", "c", "index", "va", "ac", "na", "A", "ia", "att", "off", "e", "o", "at", "span", "as", "s", "f", "alpha", "ae", "t", "ma", "ab", "ao", "an"], "j": ["ind", "ji", "jit", "ke", "kid", "b", "ijk", "m", "uj", "json", "g", "bs", "jj", "aj", "out", "tr", "ja", "si", "ki", "ij", "it", "z", "li", "jl", "x", "jo", "io", "ik", "lu", "J", "oj", "l", "jump", "str", "ix", "on", "v", "q", "y", "pt", "ib", "bj", "pr", "_", "uni", "kj", "br", "fr", "job", "ie", "jp", "ck", "bi", "js", "jc", "meg", "sim", "dj", "err", "jac", "je", "obj", "vol", "jack", "ek"], "k": ["ks", "ke", "uk", "kid", "tk", "ijk", "ok", "mk", "kn", "kr", "ket", "kar", "wk", "ka", "sk", "ki", "kok", "ko", "kt", "ik", "key", "q", "unk", "kw", "kj", "kl", "kg", "ck", "ku", "ph", "km", "kh", "kk", "K", "ak", "ek"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n */\n\npublic class MATCH_PARENS {\n    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == '(') val--;\n            else val++;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n    public static String match_parens(String[] lst) {\n        String S1 = lst[0] + lst[1];\n        String S2 = lst[1] + lst[0];\n        if(check(S1) || check(S2)) return \"Yes\";\n        return \"No\";\n    }\n}\n", "substitutes": {"s": ["sv", "p", "b", "ls", "sq", "source", "sb", "g", "bs", "strings", "ats", "its", "ins", "ps", "less", "str", "w", "y", "q", "ns", "h", "c", "abs", "ws", "string", "os", "ts", "qs", "xs", "r", "is", "S", "sts", "bits", "n", "js", "gets", "ds", "gs", "t", "rs", "ss"], "val": ["update", "ival", "test", "data", "VAL", "num", "point", " Val", "valid", "Val", "pret", "cal", "len", " eval", "loc", "fol", "aval", "elt", "serv", "bool", "ee", "pal", "li", "it", "state", "value", "x", "al", "count", "mod", "all", "label", "seq", "def", "l", "ret", "rel", "div", "rol", "key", "v", "bal", "tx", "pt", "fail", "level", "vt", "oval", "dev", "index", "abl", " aval", "pol", "pl", "vals", "role", "vel", "print", "eval", "expr", "ul", " v", "fill", "slot", "status", "sel", "echo", "stat", "vol", "el"], "i": ["ind", "u", "ji", "phi", "ri", "ori", "oi", "m", "gu", "iu", "ui", "g", " I", "ex", " x", "us", "me", "id", " ii", "ogi", "hi", "iter", "ti", "ai", "I", "si", "ki", "pi", "li", "multi", "x", "qi", "fi", "j", "ix", "uri", "di", "ic", "v", "q", "y", "mi", "im", "mu", "ci", "index", "ini", "\u0438", " j", "my", "bi", "ii", "sim", "ip", "init", "gi"], "lst": ["Lth", "Lbl", "lnd", "lstr", "llsts", "Lst", "Lsts", "llstr", "lbl", " lth", "list", "elth", "llnd", " lbl", "llist", " lstr", "elnd", " lsts", "lth", "Lnd", "elst", "llst", "elist", "elsts", "lsts", " lnd", "Lstr", " list", "llbl"], "S1": ["String1", "P1", "s7", "SOne", " S01", " SOne", "POne", "STR0", "S7", "S0", " S7", "STR01", "P01", "s0", "s2", "P0", "String7", " S0", "s1", "STROne", "STR1", "String2", "S01", "String0"], "S2": ["String1", "S3", "s3", "String3", "L1", "L3", "s2", "L2", " S3", "String2", "s1"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FACTORIZE {\n    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "p", "b", "num", "mn", "m", "g", "len", "out", "net", "nt", "ln", "names", "a", "z", "nw", "x", "count", "number", "dn", "ne", "l", "j", "nb", "v", "gn", "w", "cn", "ll", "ns", "nor", "c", "nm", "h", "nc", "nn", "na", "N", "ni", "np", "o", "k", "s", "d", "f", "ng", "network", "sn", "size", "t", "nr"], "result": ["test", "data", "total", "create", "response", "valid", "relation", "success", "output", "group", "end", "product", "goal", "up", "found", "cur", "current", "pair", "list", "collect", "now", "folder", "buffer", "Result", "created", "lower", "table", "ret", "all", "complete", "next", "cert", "feature", "work", "primary", "true", "report", "comment", "search", "results", "r", "sequence", "first", "initial", "date", "operator", "collection", "mate", "trace", "profile", "match", "message", "black", "answer"], "i": ["u", "phi", "conv", "ri", "b", "asi", "ori", "oi", "m", "in", "iu", "ui", "instance", "g", "ei", "yi", "integer", "id", "z", "info", "ti", "hi", "iter", "ai", "I", "si", "ki", "ij", "pi", "li", "multi", "x", "it", "ik", "qi", "fi", "io", "zi", "l", "j", "isi", "ix", "di", "ic", "v", "mi", "im", "cli", "ci", "iq", "index", "ini", "ip", "ni", "o", "is", "bi", "ii", "d", "sim", "xi", "t", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\npublic class DECODE_CYCLIC {\n    public static String decode_cyclic(String str) {\n        class Cyclic {\n            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n                for (int i = 0; i < s.length(); i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n        }\n        \n        final Cyclic cyclic = new Cyclic();\n        return cyclic.encode_cyclic(cyclic.encode_cyclic(str));\n    }\n}\n", "substitutes": {"str": ["data", "conv", "p", "b", "sp", "re", "m", "char", "comm", "g", "input", "strings", "out", "tr", "cur", "list", "z", "x", "res", "seq", "name", "st", "v", "w", "arr", "txt", "c", "string", "br", "fr", "r", "print", "ocr", "sts", "n", "text", "Str", "STR", "t", "obj", "rs"], "s": ["sv", "conv", "p", "b", "ls", "sp", "sq", "m", "comm", "sb", "bs", "g", "strings", "ats", "its", "sw", "ms", "ins", "ps", "less", "l", "st", "ims", "sol", "v", "y", "sql", "ns", "h", "c", "sys", "string", "hs", "ws", "ashes", "os", "ts", "xs", "r", "qs", "S", "is", "parts", "sf", "n", "js", "sts", "ds", "gets", "f", "gs", "t", "rs", "ss"], "groups": ["lets", "windows", "modules", "details", "services", "agents", "stores", "apps", "g", "works", "roots", "workers", "builders", "marks", "outs", "boxes", "states", "chains", "agers", "helps", "ages", " Groups", "balls", "files", "holders", "olds", "photos", "bags", "reports", "uses", "times", "rings", "roups", "profits", "cards", "guards", "orders", "blocks", "users", "powers", "gs", "units", "games", "models", "lists", "banks", "pages", "packages", "rows", "caps"], "i": ["u", "phi", "ri", "point", "p", "in", "m", "iu", "ui", "ei", "us", "me", "id", "integer", "info", "hi", "ti", "ai", "I", "si", "client", "li", "pi", "multi", "x", "it", "ami", "qi", "zi", "l", "j", "ims", "ix", "di", "key", "ic", "v", "uri", "y", "mi", "im", "cli", "ci", "index", "inner", "ini", "print", "o", "ie", "is", "bi", "ii", "n", "sim", "xi", "ip", "init", "gi"], "remain": ["Remaining", "remaining", "restrain", "restained", "remained", "Remrain", "restaining", "Remains", "Remained", "REMrain", "remrain", " remaining", "resaining", "resained", "resains", " remained", "REMained", " remains", "resrain", "REMain", "REMaining", "Remain", "resain", "restain", "remains"], "result": ["test", "reason", "continue", "data", "wrapper", "request", "char", "response", "success", "output", "relation", "ful", "product", "goal", "found", "cur", "current", "currency", "value", "join", "buffer", "Result", "ret", "url", "complete", "name", "temp", "string", "master", "report", "results", "summary", "r", "print", "description", "sequence", "text", "trace", "make", "command", "match", "message", "res", "answer"], "group": ["set", "arg", "part", "card", "p", "point", "char", "pg", "g", "chain", "Group", "pattern", "GROUP", "out", "pair", "join", "buffer", "gr", "label", "holder", "column", "name", "mask", "entry", "child", "line", "v", "key", "q", "match", "window", "c", "block", "batch", "password", "shadow", "record", "cell", "k", "roup", "rule", "member", "global", "row", "user", "step", "back", "tag"], "cyclic": [" cyclicity", "cleric", " cyclo", "cyclo", "cyclac", "clingetic", "canonac", "cyclric", " cyclric", "canonico", "clac", " cyclac", "clicity", "clingicity", "chronric", "chronic", "clingac", "chronetic", "cycletic", "chronicity", " cyclico", "canonic", "clo", "clerico", "clic", "cyclicity", "cletic", "clingric", "clric", "canonicity", "clingo", "clingic", "clerac", "clericity", "cyclico"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.HashSet;\n\npublic class COUNT_DISTINCT_CHARACTERS {\n    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n                distinct.add(c);\n        }\n        return distinct.size();\n    }\n}\n", "substitutes": {"string": ["set", "test", "data", "p", "array", "in", "char", "source", "instance", "input", "strings", "ring", "space", "escape", "pattern", "list", "this", "word", "prefix", "null", "buffer", "value", "type", "name", "str", "format", "object", "shape", "comment", "sequence", "print", "text", "s", "network", "file", "message"], "distinct": ["dident", "Distill", "disinguished", "continguished", "istinct", "distributed", "dributed", "restributed", "deringuished", "dinguished", "expinguished", "restinguished", "istributed", "distill", "diffinct", "Distinguished", "disident", "istribut", "diffident", "dunct", "diffinguished", "derributed", "Distinct", "diffribut", "disinct", "distinguished", "distunct", "Distident", "distident", "descinguished", "contident", "expinct", "descunct", "expact", "continct", "deract", "restinct", "disill", "istinguished", "distribut", "contill", "istunct", "dinct", "restact", "expributed", "descinct", "derinct", "dribut", "descributed", "distact", "istident"], "c": ["arc", "u", "dc", "conv", "ec", "cd", "p", "cu", "b", "char", "sc", "cont", "cs", "chain", "vc", "ch", "rc", "cur", "a", "z", "fc", "C", "bc", "lc", "l", "cr", "mc", "ic", "y", "ct", "abc", "h", "ce", "cf", "tc", "uc", "ac", "nc", "etc", "ico", "cp", "code", "unc", "gc", "col", "k", "cos", "pc", "cc", "cat"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.Arrays;\n\n// Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\n\npublic class MONOTONIC {\n    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        sorted = l;\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n}\n", "substitutes": {"l": ["lr", "lt", "lis", "ml", "p", "b", "ls", "rl", "m", "val", "lb", "g", "nl", "dl", "acl", "L", "sl", "lp", "ln", "list", "lang", "lit", "li", "z", "lv", "ld", "al", "lu", "lc", "all", "like", "j", "url", "v", "q", "lol", "ll", "c", "lock", "pl", "kl", "fl", "ol", "tl", "r", "o", "lo", "n", "s", "d", "f", "le", "ell", "t", "el", "los"], "sorted": ["corting", " sacked", " solved", "sorting", "esorted", "nsort", "unsort", "unsaved", " sorter", "sort", "xsorting", "nsorted", "stported", "nsorting", "unsorting", "esolved", " saved", "lsorting", "lsort", "nsorter", "unsacked", "unsolved", "xsaved", "sacked", "unsorted", "storted", "cacked", " sorting", "storting", "esported", "corted", "solved", "colved", "xsorted", "unsorter", "sported", "sorter", "esorting", "saved", "xsacked", "lsorted", " sported", "stolved", "lsaved", " sort"], "reverse_sorted": ["reverse_mort", "reverse_sipped", "reverse_scaved", "reverse_sorting", "reverse_morted", "reverse_saved", "reverse_commort", "reverse_sorters", "reverse_Santed", "reverse_morting", "reverse_consaved", "reverse_santed", "reverse_Sorters", "reverse_Sorted", "reverse_sort", "reverse_Saved", "reverse_consorted", "reverse_scorted", "reverse_slorters", "reverse_slanted", "reverse_consorters", "reverse_mordered", "reverse_slorted", "reverse_commorting", "reverse_sordered", "reverse_scipped", "reverse_Sort", "reverse_slaved", "reverse_consanted", "reverse_commordered", "reverse_scort", "reverse_commorted", "reverse_Sipped"], "i": ["ind", "u", "phi", "asi", "sp", "in", "m", "gu", "ui", "g", "ei", "chain", "us", "me", "id", "hi", "ti", "ai", "I", "si", "li", "pi", "a", "x", "it", "multi", "io", "qi", "z", "zi", "j", "ix", "uri", "di", "v", "ic", "y", "q", "mi", "im", "cli", "ci", "c", "ini", "batch", "e", "sequence", "o", "is", "bi", "n", "ii", "f", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False */\n\npublic class SIMPLIFY {\n    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n        if (numerator / denom == (int) (numerator / denom))\n            return true;\n        return false;\n    }\n}\n", "substitutes": {"x": ["xxx", "ox", "xf", "xt", "act", "ex", "ux", "co", "mx", "px", "xx", "xc", "X", "l", "zx", "ax", "ix", "xxxx", "v", "rx", "y", "tx", "xa", "xb", "wx", "xes", "e", "xs", "xe", "xy", "at", "rex", "xml", "dx", "xi", "fx", "xp"], "n": ["nv", "nan", "nu", "p", "note", "m", "nl", "net", "out", "nt", "ln", "en", "nw", "ne", "l", "fn", "on", "v", "y", "cn", "rn", "ns", "nor", "nm", "nn", "na", "N", "np", "o", "i", "s", "network", "sn", "wn", "t", "to"], "a": ["from", "aa", "era", "ab", "aj", "ai", "isa", "aaa", "sa", "ea", "af", "ach", "am", "ba", "ta", "ar", "ca", "la", "oa", "area", "va", "ac", "A", "ia", "sta", "at", "as", "aq", "app", "alpha", "ae", "ma", "au", "ao", "ak", "an"], "b": ["u", "eb", "aa", "ub", "bb", "bs", "g", "sb", "B", "bc", "l", "fb", "ba", "cb", "v", "y", "be", "ib", "rb", "bf", "r", "e", "gb", "bi", "f", "db", "ab"], "c": ["con", "u", "cut", "ec", "dc", "cd", "cu", "can", "sc", "cs", "cur", "co", "bc", "C", "fc", "lc", "cb", "ctrl", "cn", "ct", "ci", "ca", "cv", "ce", "cf", "uc", "ac", "cus", "etc", "cm", "e", "cp", "unc", "cc", "cat"], "d": ["dc", "da", "dd", "m", "dr", "des", "df", "D", "dp", "dt", "sd", "bd", "dict", "diff", "dn", "dir", "l", "div", "done", "di", "w", "ad", "dev", "dra", "de", "days", "r", "red", "nd", "dat", "ds", "f", "db", "dx", "du", "dec"], "numerator": ["numerifier", "numericATOR", " numberATOR", " numberinator", "numATOR", " numberater", "nummeror", "numerATOR", "NumATOR", "numerinator", "nnumator", "nominator", "Numerator", "nummerATOR", "Numerifier", " numberor", " numberulator", "nverinator", "numifier", "numericor", "numor", " numerity", "nominor", " numerATOR", "numberator", " numerater", "nummerator", "numberity", "nominater", "nverATOR", "nnumor", " numberator", "numberulator", "numberinator", "Numeror", "Numifier", "nnumity", "numberater", "Numator", "NumerATOR", "numberATOR", "Numor", "nverulator", "nverator", " numeror", "nnumater", "numerulator", "numberor", " numberity", "numinator", " numerulator", "numerity", " numerinator", "numeror", "numericator", "numerater", "nominity", "numulator", "numator", "nummerifier", "numericifier"], "denom": [" denot", "derum", "Denow", "Denot", "Denom", " denomin", "derom", " denorm", "derot", "Denum", "denow", " denum", "Denomin", "derow", "denomin", " denow", "derorm", "denot", "denorm", "denum", "Denorm", "deromin"]}}
{"code1": "package humaneval.buggy;\n\npublic class STRING_XOR {\n    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"a": ["aka", "aa", "data", "p", "array", "acc", "m", "era", "ab", "act", "aff", "up", "ata", "ai", "aaa", "al", "sa", "all", "any", "l", "am", "ar", "ba", "w", "y", "ca", "oa", "la", "c", "area", "abs", "acs", "va", "ac", "A", "ia", "past", "r", "o", "at", "ack", "as", "s", "f", "app", "apa", "alpha", "ae", "ma", "au", "ao", "an"], "b": ["bh", "eb", "base", "bb", "bs", "sb", "g", "out", "B", "bis", "z", "bc", "by", "mb", "ob", "j", "fb", "cb", "ba", "nb", "v", "w", "y", "be", "ib", "another", "c", "bp", "br", "bf", "bi", "db", "bl", "bar"], "result": [" resulted", "test", "reason", "continue", "data", "request", "char", "response", "source", "relation", "output", "params", "success", "product", "integer", "json", "found", "currency", "other", "prefix", "value", "join", "buffer", "Result", "word", "res", "field", "str", "complete", "were", "reported", "default", "memory", "string", "character", "true", "work", "feature", "report", "results", "comment", "r", "sequence", "description", "date", "text", "trace", "make", "command", "match", "message", "black", "back", "answer"], "i": ["ind", "u", "ji", "phi", "ri", "ori", "in", "m", "gu", "iu", "ui", "oi", "g", "chain", "yi", "us", "ei", "id", "info", "hi", "iter", "ti", "ai", "I", "si", "pi", "li", "x", "it", "io", "qi", "multi", "ami", "zi", "j", "ix", "uri", "di", "v", "ic", "y", "q", "mi", "im", "iq", "ci", "slice", "index", "ini", "go", "ni", "is", "n", "ii", "k", "sim", "t", "xi", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FILTER_BY_PREFIX {\n    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n            if (string.startsWith(prefix, 1)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"strings": ["finals", "versions", "ites", "ints", "ls", "services", "pieces", "years", "bs", "workers", "sites", "ies", "series", "objects", "states", "sels", "names", "chains", "nets", "mers", "idents", "prints", "ants", "values", "pins", "issues", "ties", "rings", "styles", "results", "sts", "ings", "s", "users", "views", "gs", "units", "lists", "ses", "tags"], "prefix": ["said", "zero", "base", "filename", "p", "missing", " suffix", "success", "input", "pkg", "ring", "pattern", "space", "length", "foo", "list", "before", "word", "fixed", "type", "name", "format", "ix", "key", "uri", "fx", "fix", "pres", "pre", "index", "thus", "master", "title", "password", "sequence", "username", "alpha", "root", "padding", "start"], "result": ["mont", "ure", "set", "test", "continue", "process", "data", "fake", "create", "response", "valid", "relation", "success", "output", "end", "group", "goal", "product", "same", "out", "found", "cur", "current", "pair", "list", "other", "join", "now", "folder", "Result", "our", "created", "diff", "table", "ret", "all", "done", "complete", "reported", "tmp", "next", "memory", "cert", "primary", "report", "results", "perm", "first", "collection", "mate", "profile", "detail", "make", "black", "front", "answer"], "string": ["reason", "filename", "p", "char", "source", "instance", "chain", "ring", "relation", "space", "escape", "element", "pair", "strip", "list", "word", "buffer", "value", "join", "number", "phrase", "name", "str", "entry", "stick", "line", "service", "parse", "complete", "sql", "full", "language", "sound", "comment", "search", "password", "print", "sequence", "image", "text", "s", "component", "ident", "sample", "row", "status", "single", "translation", "user", "file", "message"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n */\n\npublic class ODD_COUNT {\n    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 == 0) {\n                    n--;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n}\n", "substitutes": {"lst": ["cllist", "Llist", "llsts", " lSt", "Lst", "Lsts", "dllist", "list", "dlset", "clst", "llist", "lSt", " lsts", "lset", "llst", "dlst", "clset", "lllist", " llist", " lset", "lsts", "dlSt", "clSt", " list"], "result": ["ure", "set", "test", "continue", "data", "total", "create", "response", "success", "relation", "output", "see", "integer", "goal", "product", "group", "current", "cur", "list", "currency", "false", "word", "join", "now", "other", "number", "Result", "created", "all", "table", "ret", "done", "complete", "were", "next", "memory", "true", "work", "primary", "master", "report", "search", "summary", "results", "first", "date", "collection", "mate", "profile", "detail", "make", "match", "message", "black", "answer"], "s": ["sv", "p", "b", "se", "ls", "sq", "m", "csv", "sb", "bs", "ats", "its", "sw", "a", "ms", "ps", "l", "j", "less", "str", "v", "y", "sql", "ns", "h", "c", "abs", "string", "hs", "tes", "ts", "r", "qs", "o", "S", "is", "sts", "gets", "bits", "js", "gs", "t", "rs", "ss"], "n": ["u", "nan", "anon", "nu", "p", "note", "num", "missing", "m", "nl", "and", "g", "net", "out", "nt", "ln", "names", "a", "z", "x", "count", "al", "number", " N", "dn", "ne", "l", "j", "nb", "v", "w", "cn", "ns", "h", "c", "nc", "nn", "na", "N", "ni", "node", "r", "e", "np", "o", "d", "norm", "ng", "empty", "natural", "sn", "t", "nr", "an"], "i": ["u", "ji", "phi", "ri", "ori", "oi", "gu", "iu", "ui", "ei", "us", "integer", "id", "info", "ogi", "hi", "iter", "ti", "ai", "I", "si", "ki", "ish", "li", "pi", "it", "x", "io", "multi", "qi", "j", "ims", "ix", "di", "uri", "ic", "v", "y", "mi", "im", "ci", "index", "ini", "\u0438", "o", "ie", "is", "bi", "ii", "f", "xi", "ip", "gi"], "digit": ["sign", "part", "num", "lambda", "character", "char", "digital", "integer", "pattern", "prime", "rand", "word", "hash", "minus", "upper", "unsigned", "unit", "magic", "format", "div", "check", "doc", "significant", "needed", "major", "umeric", "uni", "piece", "dot", "dig", "onent", "letter", "feature", "basic", "factor", "frac", "alpha", "hex", "second", "dec"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\npublic class COUNT_NUMS {\n    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n            if(neg) num *= 1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n}\n", "substitutes": {"arr": ["aa", "array", "stack", "au", "ch", "Ar", "nt", "aaa", "list", "ij", "ars", "buf", "ins", "gr", "all", "ang", "seq", "ps", "enc", "ar", "iq", "aus", "grid", "sys", "batch", "vals", "coll", "pl", "fr", "r", "ARR", "gb", "parts", "dat", "blocks", "amps", "err", "bl", "obj", "ag", "rs", "arb"], "count": ["con", "zero", "max", "cond", "set", "call", "val", "total", "hold", "counter", "cont", "amount", "mean", "length", "out", "found", "nt", "current", "list", "um", "const", "z", "now", "number", "result", "cmp", "Count", "content", "check", "doc", "consider", "add", "c", "index", "report", "know", "ount", "score", "ctr", "core", "cum", "n", "flag", "find", "size", "cache", "match", "must"], "num": ["con", "nu", "coord", "p", "b", "no", "m", "mon", "note", "acc", "dim", "inc", "NUM", "cal", "nam", "mult", "Num", "nt", "none", "um", "en", "x", "number", "unit", "sam", "uu", "name", "nb", "un", "on", "mu", "im", "add", "ord", "index", "nm", "na", "rem", "node", "o", "np", "tu", "cum", "col", "alph", "n", "nom", "ph", "norm", "item", "tim", "typ", "msg", "temp", "orig", "dec"], "neg": ["zero", "obs", "sign", "sub", "eg", "acc", "bad", " Neg", "good", "Neg", "priv", "sort", "orient", " reneg", "serv", " negate", "ko", "pred", "pos", "minus", "gov", "cong", "ne", "rel", "gate", "und", "pres", "percent", "agg", "vis", "gen", "neutral", "rot", "coll", "fy", "dep", "ku", "sec", "rev", "fee", "desc", "flag", "empty", "cos", "oct", "dest", "pri", "nov", "deg", "anim", "negative", "reg", "bo", "dec"], "num_string": ["number2str", "Num_string", " num_ring", "num2strings", "Num_stack", "Num_buffer", "num2string", "numMbuffer", " num_String", "num_version", " num_str", "number2buffer", "numetstrings", "num_buffer", "numptstring", "num_strings", "Num2str", "number_buffer", "Num2stack", "numptstack", "num_str", "numptbuffer", "numetbuffer", "number_version", "numMstr", "num2buffer", "numMstack", "num2stack", "numetstr", "number_string", "num_list", "num_ring", "num2str", "number2string", "number_list", "num_stack", "Num2string", "num_String", "numMstring", "numetstring", "number_str", "Num_str", "number2strings", "Num2buffer", "number_strings", "numptstr"], "sum": ["stat", "cast", "sub", "acc", "missing", "total", "se", "sc", "mean", "us", "cal", "ram", "sh", "out", "si", "um", "hash", "sa", "result", "now", "unit", "Sum", "cmp", "sam", "su", "mu", "add", "med", "ass", " SUM", "fac", "comment", "summary", "mem", "scale", "ount", "gram", "score", "union", "cum", "n", "umm", "ash", "trace", "sim", "weight", "size", "temp", "vol", "match", "send", "must"], "i": ["ind", "u", "ji", "phi", "ri", "point", "ori", "oi", "m", "iu", "in", "ui", "exp", "ei", "ex", "id", "info", "ti", "ai", "ish", "si", "ki", "ij", "I", "spec", "li", "pi", "it", "x", "multi", "ik", "qi", "zi", "j", "ims", "ix", "di", "uri", "ic", "v", "q", "y", "mi", "im", "cli", "ci", "full", "slice", "index", "ini", "\u0438", "my", "o", "ie", "is", "bi", "span", "ii", "xi", "ip", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter) */\n\npublic class FILE_NAME_CHECK {\n    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n        if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n}\n", "substitutes": {"file_name": ["filelypath", "file_Name", "ile_space", "file_word", "filelyspace", "filelyname", " file_path", "ile_name", "FILE_name", "FILE_path", "file_base", "FILE_Name", "filelyName", "ile_Name", "file_path", "ile_path", "FILE_base", " file_Name", "file_space", " file_word"], "lst": ["flst", "lebl", "olso", "llnt", "nlld", " ldr", "litld", " lstro", " lld", "nlst", "elsts", "lsst", "listy", "lcst", "ltt", "lidr", " lrd", "littt", "jlgd", "mlstro", "lsrest", "ylrd", "lcgd", "litinst", "litST", " lrest", "litst", "nlrd", "lht", "lstr", "olstro", "litph", "lph", "lrest", "llstr", "lssts", "lld", " lbl", "llnd", "rlbl", " lnt", "lsstro", "mlST", "lstro", "lcstro", "dLst", "litt", "llst", "linst", "ledr", "lest", "nlnt", "lsty", "libl", "ldr", "rlrest", "dLinst", "llsts", "mlrest", " lht", "lbl", "lrd", "nlht", "llST", "flST", "rlST", "ylsts", "rlst", " lstr", "elnt", " lsts", "lsbl", "nltt", "elst", "nlinst", "lsts", "ylld", "jlstro", "olst", "nlsts", " ltt", "ylST", "nlstr", "lnd", " lST", "flrest", "ylst", "lST", "olgd", "list", "rlstro", "ylht", "lesty", "lild", "nlph", "mlst", "dLtt", "lso", "ylnd", "lnt", "flstro", " lsty", "jlso", "liST", " lnd", "lsnt", "jlst", "lcso", "dLph", "lgd", "elbl"], "digit_cnt": ["digit_gount", "digit_tn", "digit_cost", "digit_cn", "digit_cbt", "digit_catgt", "digit2Cn", "digit_cobt", "digit_count", "digit_Cn", "digit_rnt", "digit_tgt", "digit_copt", "digit_Cnt", "digit_gst", "digit_catount", "digit2cn", "digit_Count", "digit_cpt", "digit_Cbt", "digit_cgt", "digit2cgt", "digit_gth", "digit2cnt", "digit_Cpt", "digit_Cth", "digit_cst", "digit2Cgt", "digit_tnt", "digit_catnt", "digit_rpt", "digit_rbt", "digit2Cnt", "digit2Count", "digit_cth", "digit_tount", "digit_cont", "digit_Cst", "digit_rst", "digit_catn", "digit2count", "digit_gnt", "digit_Cgt"], "c": ["arc", "u", "ec", "conv", "dc", "p", "b", "cu", "char", "sc", "cont", "cs", "anc", "vc", "ch", "rc", "cur", "a", "z", "bc", "C", "fc", "lc", "xc", "l", "cr", "mc", "v", "q", "y", "ct", "abc", "tc", "cf", "ce", "uc", "nc", "ac", "etc", "r", "e", "o", "i", "cp", "unc", "n", "k", "f", "\u00e7", "pc", "cc", "cat", "t"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/* Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"] */\n\npublic class SORTED_LIST_SUM {\n    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n            (s1, s2) -> s1.length() - s2.length()\n        );\n\n        return result;\n    }\n}\n", "substitutes": {"lst": ["klz", "slz", "lstr", "dlist", "lbl", "Lst", "Lsts", "klst", "lz", "list", "dlstr", " lbl", "slist", " lstr", "klbl", " lsts", "dlst", "dlsts", "slst", "lsts", "Lstr", " list", "slbl", "klist", " lz"], "result": ["test", "data", "fake", "trade", "total", "create", "valid", "success", "relation", "group", "output", "end", "goal", "product", "them", "split", "out", "found", "current", "cur", "list", "other", "currency", "buffer", "now", "folder", "Result", "collect", "created", "error", "all", "ret", "res", "complete", "table", "real", "tmp", "next", "default", "temp", "memory", "cert", "comb", "block", "menu", "work", "primary", "master", "report", "comment", "results", "search", "sequence", "first", "local", "collection", "mate", "root", "cache", "make", "message", "black", "answer"], "str": ["part", "rec", "p", "sp", "note", "m", "exp", "char", "cont", "dr", "tr", "cur", "spec", "list", "word", "prefix", "join", "enc", "j", "url", "st", "name", "div", "arr", "txt", "c", "string", "coll", "br", "fr", "r", "e", "i", "print", "req", "ctr", "exec", "n", "s", "text", "dat", "Str", "row", "STR", "cat", "t", "msg", "hex", "obj", "del", "res"]}}
{"code1": "package humaneval.buggy;\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n\n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\n\npublic class ENCODE {\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n", "substitutes": {"message": ["reason", "data", "m", "request", "response", "document", "g", "attribute", "expression", "output", "frame", "hello", "word", "value", "buffer", "result", "log", "error", "format", "content", "channel", "event", "say", "object", "essage", "memory", "string", "report", "sequence", "description", "code", "mail", "mess", "text", "body", "Message", "msg", "connection", "command"], "sb": ["sv", "bh", "eb", "ssl", "ub", "SB", "b", "sp", "sq", "wb", "lb", "sg", "bb", "bs", "zb", "sh", " tob", "sw", "BB", "lp", "bd", "sa", "mb", "pb", "ob", "nb", "cb", "fb", "erb", "ib", "bt", "xb", "bj", "rb", "gob", "bp", "bf", "bg", "gb", "sf", "gc", "sth", "db", "kb"], "c": ["category", "can", "cont", "g", "orc", "cur", "x", "cn", "cin", "gc", "cum", "k", "cos", "cod", "cat", "cache", "u", "ec", "conv", "cd", "cu", "cl", "l", "v", "ca", "abc", "cf", "ac", "cp", "err", "com", "dec", "arc", "b", "anc", "sc", "cs", "vc", "rc", "fc", "lc", "cmp", "mc", "ct", "tc", "comp", "etc", "comment", "r", "pc", "cc", "con", "dc", "char", "comm", "chain", "ch", "co", "a", "bc", "C", "cr", "enc", "ic", "q", "copy", "y", "ci", "h", "ce", "uc", "nc", "cm", "e", "i", "unc", "col", "f", "t"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FILTER_INTEGERS {\n    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n            result.add((Integer) value);\n        }\n        return result;\n    }\n}\n", "substitutes": {"values": ["settings", "vs", "services", "years", "flows", "forms", "states", "sels", "boxes", "ues", "words", "changes", "images", "sets", "places", "files", "issues", "Values", "actions", "ples", "times", "vals", "ports", "lists", "results", "styles", "docs", "terms", "blocks", "items", "users", "views", "ves", "maps", "models", "events", "lines", "ses", "pes"], "result": ["ure", "set", "test", "continue", "process", "data", "create", "response", "success", "relation", "valid", "output", "end", "group", "goal", "product", "them", "up", "cur", "current", "pair", "list", "other", "collect", "now", "folder", "buffer", "Result", "created", "join", "table", "ret", "all", "complete", "tmp", "next", "cert", "work", "primary", "report", "comment", "search", "results", "perm", "sequence", "params", "collection", "mate", "trace", "make", "match", "message", "answer"], "value": ["resource", "unknown", "data", "val", "point", "ve", "vector", "request", "instance", "document", "attribute", "expression", "see", "group", "element", "current", "ue", "hello", "word", "state", "priority", "widget", "Value", "field", "key", "entry", "v", "context", "object", "language", "block", "feature", "database", "zone", "sequence", "peer", "image", "family", "item", "sample", "row", "project", "python", "function", "VALUE", "message"]}}
{"code1": "package humaneval.buggy;\n\n/* You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\n    search([4, 1, 2, 2, 3, 1]) == 2\n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    search([5, 5, 4, 4, 4]) == -1 */\n\npublic class SEARCH {\n    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n        int[] frq = new int[max];\n        for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n}\n", "substitutes": {"lst": [" lST", "slST", "llsts", "dlist", "lST", "lust", "Lst", "Lsts", "llST", "Lust", "list", "llist", " lsts", "dlust", " lust", "ellist", "sllist", "elst", "elST", "llst", "dlst", "elsts", "lllist", "slst", " llist", "dlsts", "lsts", "slsts", " list"], "max": ["p", "num", "min", "m", "sum", "total", "can", "Max", "end", "best", "gt", "out", "cur", "prime", "mx", "rand", "ms", "x", "now", "count", "mod", "all", "MAX", "created", "maximum", "ax", "v", "last", "rest", "map", "tmp", "full", "med", "window", "mad", "right", "master", "star", "range", "req", "ma", "n", "k", "global", "recent", "size", "t", "cache", "temp", "res"], "i": ["ji", "p", "oi", "yi", "ei", "g", "ai", "multi", "ims", "uri", "im", "iy", "o", "iri", "is", "ii", "u", "ori", "iu", "hi", "ti", "li", "it", "ami", "ms", "l", "v", "ini", "s", "gi", "phi", "ri", "b", "point", "in", "ui", "info", "ij", "pi", "io", "ik", "ix", "di", "ity", "index", "c", "iso", "m", "chain", "ql", "I", "si", "ki", "qi", "fi", "zi", "j", "ic", "q", "y", "mi", "iq", "cli", "ci", "ni", "e", "ie", "bi", "f", "sim", "xi", "ip"], "result": ["zero", "test", "coord", "p", "num", "total", "valid", "success", "end", "integer", "goal", "length", "tr", "found", "cur", "current", "term", "other", "count", "Result", "gr", "number", "error", "created", "ret", "complete", "rank", "last", "next", "default", "right", "feature", "primary", "results", "search", "comment", "fr", "r", "ult", "first", "date", "mate", "after", "command", "match", "message", "res", "start"], "frq": ["flqs", " frreq", "freq", "grqs", "Frq", "srreq", "freQ", "grq", "brQ", "FrQ", "trreq", "trQ", "frequ", "flreq", "Frqu", "flq", "frqu", "brqs", "trj", "srq", "srqu", "frej", " frk", "trq", "Frj", "frj", "frek", "frereq", "brreq", "frreq", "grQ", "srQ", "frk", "Frreq", "frqs", "frQ", "freqs", "brq", "grreq", " frqs", "flk"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GET_POSITIVE {\n    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n            result.add(number);\n        }\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nodes", " nums", "pums", "dumbers", "nurations", "nodes", " nurations", "tumeric", " numeric", "lumbers", "podes", "nums", "dums", "pumeric", "neters", " neters", "leters", "tumbers", "lurations", "numeric", "deters", "lums", "pumbers", "tums", "todes", "durations"], "result": ["set", "test", "continue", "data", "run", "response", "valid", "relation", "success", "output", "see", "group", "goal", "product", "end", "same", "cur", "current", "pair", "list", "other", "collect", "buffer", "folder", "Result", "created", "join", "table", "ret", "all", "complete", "reported", "tmp", "next", "memory", "cert", "true", "work", "primary", "master", "report", "comment", "search", "results", "sequence", "first", "collection", "mate", "make", "match", "answer"], "number": ["notation", "zero", "data", "point", "num", "note", "no", "issue", "counter", "book", "request", "relation", "group", "integer", "element", "hello", "other", "currency", "value", "one", "x", "unit", "maximum", "entry", "reference", "Number", "message", "another", "language", " Number", "object", "numbered", "block", "money", "umber", "version", "feature", "password", "n", "item", "row", "match", "document"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/* Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124] */\n\npublic class INCR_LIST {\n    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n            result.add(n - 1);\n        }\n        return result;\n    }\n}\n", "substitutes": {"l": ["lis", "p", "b", "ls", "rl", "m", "g", "nl", "hl", "dl", "L", "sl", "lp", "ln", "list", "lit", "z", "ld", "al", "lc", "j", "v", "isl", "w", "ll", "la", "c", "pl", "kl", "fl", "ol", "r", "o", "lo", "d", "f", "le", "t", "el"], "result": ["test", "continue", "data", "vector", "total", "response", "valid", "relation", "success", "output", "group", "end", "goal", "product", "found", "cur", "make", "current", "pair", "list", "other", "buffer", "now", "folder", "Result", "join", "all", "table", "ret", "real", "complete", "next", "memory", "cert", "block", "feature", "work", "primary", "master", "results", "report", "comment", "search", "r", "print", "rule", "collection", "mate", "profile", "temp", "match", "message", "answer"], "n": ["max", "nu", "mn", "p", "b", "note", "m", "net", "out", "nt", "ln", "dn", "ne", "yn", "j", "fn", "name", "v", "y", "cn", "ll", "next", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "node", "r", "i", "o", "k", "ng", "sn", "nr"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/* Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2 */\n\npublic class SPECIAL_FILTER {\n    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n                if (odd_digits.contains(number_as_string.charAt(0))\n                        && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "substitutes": {"nums": [" noms", "numbers", "enoms", "Nums", " nams", "Num", "toms", "tams", "enumbers", "nams", "Nams", " numbers", "noms", "enums", "tumbers", "Noms", "Numbers", "tums"], "count": ["max", "process", "continue", "more", "call", "sum", "total", "counter", "success", "amount", "integer", "length", "out", "found", "nt", "current", "list", "then", "z", "C", "now", "number", "value", "Count", "nb", "check", "last", "ct", "consider", "add", "index", "c", "frequency", "comment", "ount", "code", "ctr", "n", "flag", "size", "cc", "match"], "odd_digits": ["odd2digins", "odd_digit", "odd_doifiers", "odd_digitists", "odd_digities", "odd_cosits", "odd_digitumps", "odd_divifiers", "odd_addits", "oddableaddits", "odd_divities", "odd2digit", "odd_logit", "odd2digists", "odd_digists", "odd_cosities", "odd_cosists", "odd_digumps", "odd_divists", "odd_divited", "odd_logins", "odd_cosumps", "odd_divins", "odd_digins", "oddabledigited", "odd_digifiers", "oddableaddifiers", "odd_digited", "oddabledigits", "odd2Digit", "oddableaddists", "odd_digitits", "oddabledigifiers", "odd_divits", "odd2digits", "odd_doits", "odd_addifiers", "odd_Digits", "odd_logists", "odd_Digit", "odd_addited", "odd_digitities", "odd_Digins", "odd2Digins", "odd2Digits", "odd_logits", "odd_divumps", "oddabledigists", "odd_addists", "odd2Digists", "odd_divit", "odd_Digists", "odd_doists", "oddableaddited", "odd_doited"], "num": ["con", "zero", "mom", "conv", "nu", "coord", "cu", "bn", "sum", "m", "no", "mon", "note", "NUM", "cal", "nam", "Num", "om", "um", "en", "one", "x", "number", "result", "snap", "sam", "uu", "nb", "add", "ord", "another", "index", "nm", "go", "na", "umber", "node", "np", "cum", "alph", "n", "nom", "non", "item", "tim", "msg"], "number_as_string": ["number_As_String", "number_As_string", "number_asegerstring", "number_as_ring", "number_asetlist", "number_ase_func", "number_asetstring", "number_base_list", "number_asegerString", "number_base_ring", "number_as_list", "number_ase_String", "number_ase_string", "number_as_String", "number_as_str", "number_base_str", "number_asegerlower", "number_asegerlist", "number_base_string", "number_as_lower", "number_asetring", "number_asetstr", "number_as_func", "number_As_str", "number_ase_list"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n */\n\npublic class FACTORIAL {\n    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n                for(int j = 1; j <= i; i++) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}\n", "substitutes": {"n": ["nu", "mn", "p", "num", "b", "no", "m", "g", "net", "nt", "ln", "en", "count", "number", "all", "l", "name", "nb", "w", "y", "cn", "ns", "c", "nm", "nc", "nn", "na", "N", "ni", "r", "np", "o", "k", "d", "sn", "size", "t"], "ret": ["RET", "re", "aret", "rect", "cont", "gt", "repl", "det", "out", "tr", "nt", "elt", "usr", "inf", "rets", "dt", "buf", "list", "over", "result", "mb", "rel", "def", "complete", "fit", "ext", "pt", "back", "tmp", "mt", "arr", "rm", "txt", "ert", "bot", "sys", "temp", "rt", "rot", "tree", "att", "rem", "off", "mem", "et", "req", "utils", "ref", "gb", "Ret", "ry", "alt", "reset", "ft", "backed", "t", "reg", "res", "opt"], "i": ["ind", "ji", "phi", "ri", "ori", "ir", "in", "m", "iu", "ui", "g", "us", "me", "id", "jj", "info", "ti", "iter", "hi", "ai", "I", "si", "ki", "ij", "pi", "ami", "it", "multi", "by", "li", "qi", "io", "zi", "ik", "fi", "ix", "di", "ims", "v", "ic", "y", "mi", "iq", "im", "ci", "ini", "ia", "ni", "print", "ie", "at", "is", "bi", "ii", "sim", "xi", "ip", "init", "gi"], "x": ["xxx", "test", "step", "ox", "xf", "lex", "xt", "cont", "act", "ex", "ux", "foo", "pair", "mx", "checked", "px", "z", "xx", " xx", "inx", "xc", "error", "X", "zx", "ax", "ix", "key", "check", "v", "ext", "tx", "rx", "y", "xa", "xb", "w", "wx", "ct", "tmp", "nz", "xes", "xs", "xd", "xy", "xe", "at", "yx", "status", "dx", "xi", "hex", "fx", "xp"], "j": ["ji", "jit", "jas", "b", "uj", "g", "json", "us", "ju", "jj", "aj", "er", "tr", "ja", "si", "ij", "li", "z", "ld", "jl", "jo", "by", "fi", "it", "J", "rel", "oj", "str", "on", "ion", "v", "di", "key", "q", "y", "pt", "bj", "im", "pr", "bo", "next", "kj", "ge", "off", "br", "fr", "job", "son", "zone", "jp", "ie", "bi", "col", "js", "ph", "jc", "meg", "dj", "bl", "jac", "je", "obj", "err", "el"]}}
{"code1": "package humaneval.buggy;\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n//                                 the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n\n// Variables:\n// @number : integer\n//     the number of carrots that you have eaten.\n// @need : integer\n//     the number of carrots that you need to eat.\n// @remaining : integer\n//     the number of remaining carrots thet exist in stock\n\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n\n// Have fun :)\n\npublic class EAT {\n    public static int[] eat(int number, int need, int remaining) {\n        return new int[] {number + need,  remaining - need};\n    }\n}\n", "substitutes": {"number": ["zero", "resource", "unknown", "num", "note", "total", "draw", "volume", "no", "request", "amount", "integer", "goal", "length", "position", "hello", "value", "count", "widget", "random", "over", "maximum", "Number", "message", "object", "numbered", "duration", "na", "umber", "version", "initial", "password", "node", "record", "date", "usage", "n", "size", "news", "nr", "document"], "need": ["seek", "needs", "missing", "hold", "request", "use", "skip", "help", "ide", "bind", "what", "kind", "kick", "it", "query", "required", "unit", "allow", "important", "wait", "have", "offer", "needed", "q", "fail", "add", "Need", "get", "want", "shape", "work", "search", "req", "i", "carry", "fee", "ack", "fill", "require", "give", "share", "just", "find", "keep", "weight", "make", "send", "start"], "remaining": ["Remaining", "Removing", " unremain", " reming", "Remnant", "remnant", " Remaining", " unremaining", "restaining", " Remain", "resending", "remain", "resaining", "resing", " unremnant", " remending", " Removing", "resains", "restains", " remains", "restending", " unremoving", "resting", "removing", " Remnant", "Remain", "remending", "reming", "remains"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class BELOW_ZERO {\n    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n            if (balance > 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "substitutes": {"operations": ["Operation", "Operands", "alternations", " operacements", "operands", "OperATIONS", "operATIONS", "Operations", "OPERacements", " operbeans", "OPERATIONS", "OPERations", "operacements", "operbeans", " operATIONS", "alternATIONS", "operation", "alternacements", " operands", " operation", "OPERands", "OPERation", "alternbeans", "OPERbeans"], "balance": ["base", "league", "card", "trade", "note", "sum", "total", "amount", "store", "payment", "policy", "goal", "position", "Balance", "balanced", "folio", "credit", "price", "list", "currency", "state", "value", "count", "buffer", "address", "equality", "foundation", "bal", "transfer", "bolt", "coin", "hands", "role", "money", "off", "sequence", "carry", "ranking", "usage", "share", "spread", "bridge", "confirmed", "paid", " balanced", "weight", "flow", "stroke", "translation", "definition", "capacity", "message", "account"], "op": ["p", "val", "sp", "exp", "hop", "cop", "m", "ok", "ep", "Op", "ops", "pair", "word", " OP", "opp", "mp", "oc", "pop", "oper", "hip", "ob", "pp", " cop", "ap", "OP", "operation", "comp", "block", "perm", " operation", "e", "o", "cp", "operator", " Op", "bit", "app", " operator", "ip", "xp", "post"]}}
{"code1": "package humaneval.buggy;\n\n/* Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3 */\n\npublic class VOWELS_COUNT {\n    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n        if (str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n}\n", "substitutes": {"str": ["data", "p", "b", "sp", "in", "m", "char", "cs", "input", "out", "cur", "spec", "it", "utt", "seq", "stri", "j", "name", "st", "cr", "w", "arr", "ns", "txt", "string", "br", "r", "print", "ctr", "text", "n", "s", "Str", "oct", "STR", "vol", "t", "err", "obj"], "result": ["zero", "test", "reason", "continue", "num", "sum", "total", "char", "character", "success", "relation", "integer", "goal", "product", "length", "current", "mark", " Result", "currency", "value", "diff", "count", "Result", "number", "error", "table", " resulting", "done", "mask", "complete", "event", "default", "ULT", "power", "duration", "feature", "true", "fac", "section", "results", "comment", "search", "start", "ult", "r", "date", "die", "global", "profile", "degree", "match", "message", "res", "answer"], "str_chars": ["str_contats", "str_Chrs", "str_quars", "str_charars", "str_chears", "str_contannels", "str_qurs", "str_quacters", "str_sharts", "str_contrs", "str_charts", "str_quans", "str_Chacters", "str_Chars", "str_contarts", "str_contans", "str_charrs", "str_chrs", "str_charats", "str_quarts", "str_chans", "str_characters", "str_shrs", "str_channels", "str_chers", "str_quannels", "str_shars", "str_chats", "str_cheannels", "str_chararts", "str_Chats", "str_contars", "str_cheans", "str_shats", "str_Charts", "str_chacters"], "c": ["arc", "con", "ec", "conv", "dc", "cu", "can", "char", "sc", "cont", "cs", "anc", "g", "comm", "cl", "vc", "ch", "rc", "loc", "cur", "co", "a", "z", "fc", "C", "bc", "lc", "cmp", "l", "cr", "enc", "mc", "ar", "ct", "ci", "abc", "tc", "ce", "cf", "uc", "nc", "ac", "etc", "e", "cp", "code", "unc", "col", "gc", "cos", "cod", "pc", "cc", "cat", "t", "cache", "err", "com"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/* xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6] */\n\npublic class DERIVATIVE {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n        for (int i = 0; i < xs.size(); i += 1)\n            result.add(xs.get(i));\n        return result;\n    }\n}\n", "substitutes": {"xs": ["icks", "ites", "fts", "pps", "ls", "bs", "ords", "ews", "inters", "ats", "eps", "px", "x", "xx", "xc", "ims", "rices", "dds", "ns", "aus", "tops", "abs", "hs", "ics", "iffs", "xes", "phis", "ashes", "rings", "qs", "xe", "yrs", "ires", "aws", "js", "amps", "gs", "dx", "ists", "rics", "xi", "atts", "fps", "fx", "xp"], "result": ["set", "continue", "data", "vector", "total", "create", "response", "valid", "relation", "success", "output", "group", "use", "goal", "product", "found", "current", "cur", "pair", "list", "other", "buffer", "diff", "folder", "join", "Result", "created", "them", "table", "ret", "all", "done", "complete", "tmp", "next", "default", "memory", "cert", "true", "feature", "primary", "work", "report", "comment", "results", "r", "first", "collection", "mate", "trace", "cache", "temp", "match", "message", "answer"], "i": ["ind", "u", "ji", "phi", "ri", "ori", "in", "m", "iu", "ui", "yi", "ei", "us", "id", "hi", "ski", "ti", "iter", "ai", "I", "si", "ki", "ij", "li", "pi", "it", "x", "multi", "qi", "zi", "j", "ix", "di", "ic", "v", "q", "y", "mi", "im", "iq", "ci", "index", "c", "ini", "batch", "ni", "print", "o", "is", "bi", "n", "ii", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n// You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\n\npublic class IS_HAPPY {\n    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n}\n", "substitutes": {"s": ["sv", "conv", "b", "ls", "sq", "comm", "source", "sb", "bs", "g", "strings", "its", "out", "sw", "sl", "a", "ms", "query", "less", "ps", "l", "str", "st", "ims", "q", "w", "sql", "say", "ns", "txt", "h", "c", "abs", "string", "ws", "hs", "os", "ts", "r", "xs", "qs", "req", "is", "S", "sf", "gets", "n", "text", "js", "parts", "ds", "sts", "gs", "t", "msg", "rs", "ss"], "i": ["ind", "u", "phi", "ri", "ori", "in", "m", "gu", "iu", "ui", "oi", "g", "ei", "yi", "us", "me", "id", "ski", "iter", "hi", "ti", "ai", "I", "si", "out", "pi", "li", "it", "x", "multi", "io", "qi", "ami", "j", "ix", "on", "di", "v", "ic", "uri", "y", "q", "mi", "im", "iq", "ci", "cli", "slice", "index", "c", "ini", "go", "sequence", "o", "print", "at", "is", "bi", "iri", "ii", "f", "sim", "xi", "ip", "err", "init", "eu", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters */\n\npublic class WORDS_IN_SENTENCE {\n    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n}\n", "substitutes": {"sentence": ["entance", "spency", "spence", "sentences", "sentance", "sentency", " sentences", "utterance", "sequency", "utterage", "sentage", "entENCE", "entenced", "utterence", " sentance", "sentenced", "entences", "sequence", "entence", "spenced", "sequENCE", "utterences", "sentENCE", "sequenced", "entage", "entency", " sentage", "spENCE"], "result": ["test", "reason", "wrapper", "part", "sum", "char", "response", "success", "relation", "output", "ful", "product", "out", "found", "cur", "prefix", "Result", "created", "region", "table", "ret", "complete", "extra", "full", "next", "default", "memory", "true", "work", "report", "results", "search", "r", "description", "first", "cup", "root", "make", "command", "match", "message", "res", "back", "front", "answer"], "word": ["test", "part", "point", "can", "sword", "char", "character", "question", "wo", "space", "wk", "frame", "pair", "term", "token", "words", "query", "prefix", "phrase", "field", "man", "name", "line", "key", "doc", "form", "w", "Word", "piece", "window", "language", "letter", "string", "block", "feature", "work", "comment", "node", "password", "first", "we", "wp", "image", "text", "rule", "bit", "item", "row", "weight", "translation", "user", "message", "bow", "wd", "tag"], "flag": ["cond", "set", "stage", "success", "group", "store", "sync", "debug", "condition", "bool", "list", "button", "const", "ld", "flags", "failed", "agged", "state", "type", "band", "field", "error", "ret", "mask", "child", "needed", "lag", "event", "cloud", "ord", "force", "window", "enable", "fd", "style", "Flag", "FLAG", "cmd", "sun", "ground", "bit", "member", "bug", "func", "f", "status", "lead", "weight", "command", "back", "tag"], "i": ["base", "phi", "asi", "ori", "oi", "m", "gu", "iu", "ui", "g", "ei", "us", "me", "id", "length", "hi", "ti", "ai", "I", "si", "pi", "multi", "li", "io", "ms", "it", "qi", "x", "zi", "l", "j", "name", "ix", "di", "ic", "v", "q", "y", "ity", "im", "mi", "ci", "cli", "index", "\u0438", "o", "is", "bi", "n", "ii", "d", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class MEAN_ABSOLUTE_DEVIATION {\n    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n            deviation_sum += (number - mean) * (number - mean);\n        }\n        return deviation_sum / numbers.size();\n    }\n}\n", "substitutes": {"numbers": ["snumeric", "snographies", "nographies", " numbs", "natives", " nums", "numumeric", "numanges", "Nums", " natives", " Nums", "nachers", "snabases", "gatives", " nctions", "gefficients", "anographies", " Nologies", " numeric", "numographies", "ernctions", " Numbers", "numounters", "tologies", "nums", "nefficients", "numumbers", "ernums", "ernumbers", "nubes", "nanges", "manguages", " nefficients", "mefficients", "gumbers", "nabases", "anounters", "nanguages", "matives", " nanges", " Numbs", "nctions", "numubes", "nologies", " nachers", "snanges", "ernachers", "tumbers", "snounters", "anubes", "numbs", "numeric", "ganguages", "tumbs", " nanguages", "mumbers", "snumbers", "Numbers", "anumbers", "Nctions", "tums", "nounters", " nologies", " nabases", "snubes", "Nachers", "numabases"], "sum": ["zero", "set", "num", "total", "se", "success", "amount", "us", "me", "up", "cal", "sat", "info", "sort", "si", "hum", "um", "cover", "sa", "count", "now", "all", "hash", "Sum", "result", "parse", "su", " summed", "average", "add", "sys", "mass", "get", "fac", "ly", "summary", "mem", "cum", "body", "share", "empty", "spread", "seed", "size", "sim", "cache", "temp", "match", "post"], "number": ["notation", "unknown", "page", "reason", "run", "point", "note", "no", "num", "book", "counter", "request", "document", "attribute", "relation", "integer", "bor", "product", "amount", "element", "mark", "other", "word", "currency", "value", "result", "maximum", "name", "line", "entry", "reference", "Number", "duration", "add", "object", "another", " Number", "string", "numbered", "block", "nn", "na", "umber", "work", "money", "feature", "comment", "version", "node", "record", "date", "n", "original", "function", "match", "message", "back"], "mean": ["home", "normal", "base", "data", "point", "se", "m", "hold", "ean", "group", "me", "ka", "mark", "ann", "um", "const", "type", "holder", "age", "gate", "name", "mask", "parse", "line", "rank", "average", " avg", "mu", "mi", "meta", "side", " means", "tan", "index", "med", "mass", "na", "pl", "cus", "floor", "gan", "scale", "pe", "local", "span", "cum", "metadata", "sample", "weight", "root", "ma", "meet", "orig", "an", "start"], "deviation_sum": ["devation_sum", "deviate_scale", "deviate2in", "deviation___in", "deviation2scale", "deviation2mem", "deviation___scale", "deviation2in", "deviation2summary", "deviation_mem", "deviate2scale", "deviation___sum", "deviation7Sum", "devation_total", "deviation_summary", "deviation2mean", "deviation_total", "devation_mem", "deviate2sum", "deviate_in", "deviation_in", "devation_Sum", "deviation2total", "deviation7sum", "deviation_Sum", "deviation7scale", "devation_summary", "deviation_scale", "deviate_Sum", "devation_mean", "deviation7in", "deviation_mean", "deviation2Sum", "deviation2sum", "deviation___Sum", "deviate2Sum", "deviate_sum"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/*\n * You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n */\n\npublic class GET_CLOSET_VOWEL {\n    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for(int i = word.length() - 2; i >= 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n}\n", "substitutes": {"word": ["test", "part", "point", "vector", "sword", "char", "character", "chain", "question", "input", "ring", "space", "training", "pattern", "term", " keyword", "list", "token", "words", "prefix", "W", "query", "lower", "phrase", "address", "result", "buffer", "value", "train", "name", "line", "doc", "form", "w", "Word", "piece", "letter", "string", "block", "feature", "work", "comment", "fr", "password", "sequence", "description", "record", "gram", "image", "text", "queue", "rule", "voice", "translation", "weight", "white", "user", "function", "won", "command", "message", "wd"], "vowels": ["voveps", "voquers", "Vowels", "vowel", "vowilings", "vsowals", " vowilings", "Vowers", "vowerals", "vowsel", "voodells", "vovles", "Voweps", "vantryel", " vowel", "vowals", "vowsells", "vsowers", "vovels", "voweals", "vantryilings", "vowsers", "vowsilings", " vowals", "vantryals", "vantryels", "vsowsells", "vowsles", "Vowles", " vantryel", " vantryilings", " vantryals", "Vowsers", "vsowels", "voquels", "voodels", "voqueps", "Vowals", "vowsels", "vowells", "vsowsals", "vsowsels", "voodals", " vantryels", "vsowells", "vovals", "voweells", "vowles", "Vowseps", "vowerilings", "vowerels", "Vowsles", "vowers", "voweels", "vowerel", "vowsals", "vovers", "vowseps", "Vowsels", "vooders", "Vowsals", "voquals", "voweers", "voweps", "vsowsers", "voweles"], "i": ["phi", "ri", "asi", "ori", "sp", "in", "m", "iu", "exp", "ui", "p", "g", "ei", "yi", "me", "info", "ogi", "hi", "ti", "ai", "I", "si", "ki", "ij", "this", "li", "pi", "multi", "x", "it", "z", "qi", "ami", "zi", "l", "isi", "j", "ix", "ims", "di", "uri", "v", "ic", "y", "rest", "mi", "im", "cli", "ci", "iq", "slice", "index", "ini", "iy", "ni", "iri", "is", "bi", "n", "ii", "f", "status", "sim", "xi", "ip", "init", "eu", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class REMOVE_DUPLICATES {\n    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nodes", "dails", "renums", "renues", "hodes", " nums", "neumbers", "renumbers", "neodes", "dumbers", "dappers", "ngues", "neurities", "nodes", "names", "ngappers", " names", "neames", "hurities", "mails", "nums", "dues", "mappers", "nurities", "nanges", "ngumbers", " nues", "nails", " nanges", "ngails", "hames", "snanges", "nappers", "nues", "mumbers", "snumbers", "snums", "renanges", "snues", "mues", " nurities", "humbers"], "result": ["ure", "test", "expected", "continue", "data", "fake", "create", "response", "ful", "relation", "success", "valid", "output", "where", "goal", "product", "same", "found", "current", "cur", "black", "list", "other", "false", "collect", "buffer", "join", "Result", "all", "created", "table", "ret", "done", "complete", "blank", "tmp", "next", "memory", "true", "report", "comment", "results", "search", "r", "sequence", "first", "empty", "collection", "mate", "match", "message", "res", "answer"], "count": ["max", "cond", "test", "sum", "total", "hold", "create", "counter", "amount", "use", "group", "store", "limit", "info", "length", "found", "nt", "hash", "now", "label", "log", "table", "Count", "check", "cycle", "last", "map", "only", "ct", "add", "force", "consider", "c", "index", "report", "comment", "th", "score", "ctr", "flag", "find", "keep", "size", "latest", "cache", "detail", "match"], "n": ["nv", "nan", "inn", "nu", "mn", "b", "note", "num", "m", "g", "out", "ren", "net", "nt", "none", "ln", "z", "en", "number", "dn", "yn", "ne", "l", "j", "fn", "name", "un", "on", "nb", "v", "gn", "q", "y", "cn", "pn", "w", "hn", "ll", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "br", "node", "o", "np", "i", "s", "norm", "ng", "sn", "tn", "nr", "el", "an"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n\npublic class FIND_MAX {\n    public static String find_max(String[] words) {\n        ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n        Collections.sort(\n            words_list,\n            (w1, w2) -> {\n                Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n                HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n                Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n                HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n                return s1.size() - s2.size();\n            }\n        );\n        return words_list.get(0);\n    }\n}\n", "substitutes": {"words": ["windows", "papers", "sword", "works", "strings", "workers", "objects", "names", "word", "W", "ms", "letters", "images", "values", "w", "Words", "pins", "ws", "posts", "docs", "features", "styles", "frames", "we", "weights", "wp", "english", "s", "terms", "blocks", "rules", "books", "users", "WOR", "views", "games", "articles", "pages", "tags"], "words_list": ["wordswlist", "words8lat", "wordswstr", "Words_str", " words_map", "words8cont", "words_List", "words9list", "words9lat", "words_map", "Words_print", "wordswprint", "words9cont", " words_cont", "words67LIST", "words_LIST", "words_str", "words_detail", "words67print", "words9List", "words_lat", " words_lat", "words8list", "words_cont", "words8List", " words_List", "Words_list", "words67str", "Words_LIST", "words67list", "words_print", "wordswLIST", " words_detail"], "c1": ["c51", "sOne", "cOne", "chone", "c81", "w51", "s7", "wone", "sFirst", " cOne", "cFirst", "ch1", "ch51", " c51", " c7", " c81", "cone", " cFirst", "w7", "c7", "w81", "w1", "wOne", "ch81", "wFirst", " cone"], "s1": [" s001", "ts1", "sOne", "fs001", "s001", "ns001", "ps1", " s01", "psone", "ns1", "fs2", "sone", "psOne", "s0", " s0", "fs1", "tsone", " sone", "ns01", "ts0", "ps0", " sOne", "tsOne", "ns2", "fs01", "s01"], "c2": [" c32", "c72", "ch2", "w32", "s5", "chlet", "wlet", "w72", "c5", " c5", "w2", "spl", " c72", "cpl", " cpl", "ch32", " clet", "clet", "c32", "wtwo", "ctwo", "wpl", " ctwo", "ch72", "w5", "stwo"], "s2": [" stwo", " s4", "es2", "S02", "ps02", "STwo", "estwo", "ostwo", "ps1", "esTwo", "es4", "ps2", "S1", "S2", " sTwo", "os4", "sTwo", "osTwo", "s02", "os2", "s4", " s02", "stwo", "psTwo"]}}
{"code1": "package humaneval.buggy;\n\n/* The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24 */\n\npublic class FIBFIB {\n    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "substitutes": {"n": ["max", "nan", "nu", "mn", "num", "note", "exp", "min", "g", "len", "net", "out", "nt", "none", "ln", "it", "en", "z", "number", "any", "ne", "all", "name", "nb", "on", "ic", "w", "q", "cn", "ity", "ll", "ns", "rn", "nor", "next", "nm", "nie", "nc", "nn", "na", "N", "i", "o", "np", "k", "non", "d", "ng", "after", "sn", "t", "nr", "opt"]}}
{"code1": "package humaneval.buggy;\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\n\npublic class INT_TO_MINI_ROMAN {\n    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n            result += sym[i];\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n}\n", "substitutes": {"number": ["zero", "resource", "re", "note", "total", "no", "request", "issue", "b", "NUM", "integer", "length", "current", "change", "currency", "value", "count", "one", "al", "error", "maximum", "uu", "name", "ion", "Number", " integer", "rest", "message", "another", " Number", "string", "numbered", "production", "nn", "umber", "version", "work", "node", "record", "n", "collection", "nr", "document"], "num": ["con", "zero", "test", "data", "nu", "mon", "sum", "bn", "total", "dim", "no", "note", "prim", "NUM", "cal", "nam", "net", "Num", "um", "one", "count", "nb", "str", "Number", "index", "nm", "block", "na", "np", "alph", "n", "nom", "norm", "tim", "nr", "dec"], "sym": ["sv", "mom", "sp", "mbol", "sync", "sh", "nam", "si", "ym", "sem", "yy", "ms", "syn", "mm", "ys", "mys", "Sy", "sing", "Sym", "fam", "ns", "ty", "sch", "sys", "sm", "spe", "fy", "perm", "my", " symb", " sy", "hyp", "typ", "sim", "ols", "single", "sel", "sy", "sty"], "i": [" k", "phi", "b", " counter", "m", "counter", "iu", "ui", "yi", "ei", " x", "id", " ii", "info", "hi", "iter", "ti", "ai", "I", "si", "li", "pi", "multi", "x", "io", "by", "it", "qi", "zi", "j", " iii", "ix", "di", "ic", "y", "mi", "slice", "cli", "ci", "index", "ini", "ip", " j", "bi", "n", "ii", "k", "xi", "t", "init", "gi"], "result": ["test", "reason", "data", "continue", "wrapper", "sum", "request", "char", "response", "relation", "output", "product", "goal", "RESULTS", "term", "currency", "word", "prefix", "null", "join", "buffer", "Result", "str", "complete", "ment", "were", "temp", "memory", "string", "results", "report", "comment", "r", "sequence", "description", "first", "date", "text", "trace", "make", "command", "message", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/*\n * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n */\n\npublic class GET_ODD_COLLATZ {\n    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n        while(n >= 1) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n", "substitutes": {"n": ["nan", "inn", "nu", "mn", "b", "num", "note", "no", "m", "p", "g", "nl", "len", "net", "out", "nt", "ln", "it", "en", "z", "x", "count", "nw", "number", "one", "dn", "ne", "all", "l", "j", "name", "nb", "fn", "on", "v", "gn", "q", "pn", "cn", "ll", "ns", "next", "nor", "h", "nm", "c", "window", "nc", "nn", "na", "go", "N", "node", "np", "o", "i", "nd", "k", "d", "ng", "s", "norm", "sn", "tn", "t", "don"], "result": ["test", "continue", "data", "total", "create", "response", "valid", "relation", "success", "output", "use", "group", "goal", "product", "out", "load", "found", "cur", "current", "pair", "list", "currency", "other", "buffer", "join", "folder", "Result", "diff", "created", "lower", "them", "ret", "table", "done", "complete", "real", "only", "bar", "tmp", "memory", "comb", "menu", "true", "work", "primary", "report", "comment", "search", "results", "r", "print", "sequence", "date", "collection", "mate", "trace", "detail", "cache", "make", "match", "message", "res", "here", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n// Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\n\npublic class ISCUBE {\n    public static boolean iscude(int a) {\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n}\n", "substitutes": {"a": ["aa", "p", "b", "val", "m", "ab", "g", "aj", "z", "x", "sa", "all", "any", "am", "ta", "ba", "v", "ca", "la", "oa", "area", "c", "ac", "A", "na", "ia", "r", "e", "o", "i", "at", "as", "n", "s", "pa", "d", "f", "k", "alpha", "apa", "ae", "t", "ma", "au", "an"], "root": ["max", "base", "p", "b", "m", "box", "roots", "roid", "parent", "OT", "prime", "term", "ro", "bc", "result", "res", "div", "depth", "average", "ree", "round", "dev", "oot", "h", "bot", "rt", "tree", "right", "head", "bank", "node", "scale", "r", "ot", "ash", "db", "bottom", "rad", "Root"], "bd": ["bh", "da", "cd", "dd", "b", "bn", "od", "bb", "bs", "sb", "BD", "md", "BB", "edd", "sd", "bc", "ld", "vd", "hd", "mb", "td", "nb", "ba", "DD", "bt", "dh", "pd", "bf", "bet", "rd", "gb", "BT", "d", "ds", "db", "BM", "DB", "bl", "ded"], "round_root": ["round___box", "round_term", "roundableright", "roundablesuccess", " roundableright", "floor_term", "round1root", "round_tree", "round1term", "round_box", "floor_box", "round_max", "round_right", "floor_max", " round_tree", "round___max", "floor_root", "round___term", " roundablesuccess", " round_success", " roundableroot", "round1max", "round_success", "round1box", " roundabletree", "round___root", " round_right", "roundableroot", "roundabletree"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class MAX_ELEMENT {\n    public static int max_element(List<Integer> l) {\n        int m = 0;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n}\n", "substitutes": {"l": ["ml", "p", "b", "ls", "rl", "g", "nl", "dl", "L", "sl", "lp", "ln", "list", "lit", "li", "z", "jl", "lc", "j", "line", "v", "q", "ll", "la", "h", "c", "coll", "kl", "fl", "ol", "o", "i", "n", "s", "d", "le", "t", "el"], "m": ["mun", "max", "p", "mn", "min", "mk", "mean", "me", "md", "om", "mx", "um", "M", "ms", " M", "mod", "met", "wm", "em", "mm", "j", "am", "mc", "v", "tm", "mi", "im", "mt", "esm", "rm", "mu", "med", "h", "gm", "nm", "sm", "cm", "perm", "lem", "mem", "mr", "i", "pm", "n", "k", "bm", "t", "fm", "arm", "dm"], "e": ["u", "eb", "ec", "eg", "p", "se", "b", "ate", "ev", "ei", "es", "me", "er", "elt", "ue", "ine", "ee", "a", "x", "ea", "ele", "ent", "fe", "oe", "entry", "v", "y", "te", "eur", "h", "c", "ed", "ce", "ge", "eeee", "est", "r", "i", "o", "ie", "et", "pe", "ger", "s", "d", "f", "ae", "le", "t", "E", "eu", "el"]}}
{"code1": "package humaneval.buggy;\n\n/* Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                    so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value */\n\npublic class PLUCK {\n    public static int[] pluck(int[] arr) {\n        int min_even = 0;\n        int index = 0;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n}\n", "substitutes": {"arr": ["aa", "arp", "vs", "array", "stack", "au", "ev", "dr", "act", "repl", "Ar", "tr", "cur", "elt", "aaa", "ij", "buf", "words", "dict", "unch", "gr", "ray", "now", "ele", "rel", "enc", "resp", "str", "ar", "img", "hist", "iq", "ll", "abc", "grid", "sys", "batch", "coll", "pl", "br", "fr", "r", "ARR", "req", "Array", "expr", "gb", "arry", "dat", "compl", "db", "app", "emb", "attr", "err", "bl", "stock", "obj", "ag", "rs", "arb"], "min_even": ["mineneven", "min_up", "minimum_down", "minenodd", "minlycon", "area_con", "areaitycon", "minimumencharacter", "minitypair", "min_odd", "min_zero", "area_even", "minlyeven", "minityeven", "minimum_character", "minenwell", "minimum_odd", " min_odd", "min_well", "min_con", "area_odd", "minencharacter", "min_down", "minimum_even", "minitycon", " min_own", "minityodd", "areaityeven", "area_pair", "minimumenwell", "min_own", "areaitypair", "minimum_well", "min_pair", "minimumenodd", "areaityodd", "minlyodd", "minlypair", "minimum_zero", "min_character", "minimumeneven", " min_up"], "index": ["ind", "zero", "timeout", "axis", "action", "point", "no", "num", "instance", "ex", "id", "info", "position", "condition", "iter", "available", "loc", "out", "alias", "si", "ln", "list", "open", "pos", "x", "count", "close", "number", "address", "location", "j", "Index", "offset", "key", "connected", "context", "connect", "exit", "IND", "level", "slice", "only", "each", "path", "loop", "window", "next", "block", "search", "foot", "initial", "fee", "n", "seed", "find", "trace", "row", "match", "send", "second"], "i": ["ind", "u", "ji", "phi", "ori", "in", "m", "iu", "gu", "ui", "oi", "chain", "ei", "us", "me", "id", " ii", "info", "hi", "ti", "ai", "I", "si", "ki", "ij", "li", "pi", "it", "x", "io", "multi", "qi", "ms", "ami", "zi", "ik", "l", "j", "ix", "on", "di", "uri", "v", "ic", "q", "y", "mi", "im", "cli", "ci", "h", "ini", "my", "o", "is", "bi", "ii", "n", "s", "f", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\n\npublic class CYCPATTERN_CHECK {\n    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n        String pat = b;\n        for (int i = 0; i < a.length(); i += 1) {\n            for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n}\n", "substitutes": {"a": ["aka", "aa", "data", "arp", "p", "val", "ab", "g", "act", "ata", "ai", "aaa", "this", "it", "sa", "al", "ach", "am", "ba", "ar", "w", "ap", "area", "c", "abs", "ac", "A", "ia", "r", "e", "o", "at", "ack", "as", "n", "s", "f", "app", "alpha", "ae", "t", "ma", "au", "an"], "b": ["bh", "base", "p", "bad", "bb", "bs", "sb", "g", "B", "bis", "z", "bc", "pb", "ob", "nb", "ba", "fb", "v", "y", "be", "ib", "bt", "erb", "rb", "c", "bp", "batch", "bf", "br", "r", "bi", "n", "s", "d", "bit", "db", "beta", "t", "ab"], "l": ["ml", "p", "ls", "vl", "lam", "m", "hl", "nl", "g", "dl", "length", "L", "len", "sl", "lp", "ln", "list", "lit", "li", "z", "lv", "lu", "lc", "dL", "v", "q", "level", "ll", "h", "pl", "kl", "ly", " L", "r", "lo", "ul", "n", "s", "d", "le", "size", "t", "lin", "el"], "pat": ["pro", "psy", "apt", "p", "pad", "pkg", "pattern", "rep", "nt", "patch", " plat", "feat", "pb", "def", "format", "mat", "lat", "cro", "tmp", "mt", "pard", "pr", "rend", "abc", "proc", "rot", "pay", "op", "pl", "att", "pd", "np", "prot", "ref", "dat", "db", "Pat", "reg", " Pat", "tt", "py"], "i": ["u", "phi", "ri", "asi", "ori", "ir", "in", "iu", "ui", "yi", "ei", "us", "ti", "hi", "iter", "ai", "ish", "ki", "si", "ij", "pi", "li", "x", "ami", "it", "io", "qi", "aci", "zi", "ix", "di", "v", "ic", "mi", "iq", "im", "ci", "iti", "inner", "ini", "ia", "ni", "ie", "at", "iri", "is", "ii", "xi", "ip", "init"], "j": ["ind", "ji", "jit", "p", "m", "uj", "jack", "json", "g", "bs", "and", "jj", "aj", "adj", "out", "ja", "ij", "other", "it", "z", "gov", "jl", "li", "jo", "J", "ne", "oj", "jump", "ix", "on", "ion", "v", "q", "y", "pt", "bj", "im", "bot", "kj", "ort", "att", "br", "fr", "ot", "at", "jp", "n", "js", "k", "d", "jc", "dj", "err", "jac", "je", "obj", "el"]}}
{"code1": "package humaneval.buggy;\n\n/* brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse */\n\npublic class CORRECT_BRACKETING {\n    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n            if (depth >= 0)\n                return true;\n        }\n        return false;\n    }\n}\n", "substitutes": {"brackets": ["charackets", "charanches", "charags", "brets", " branches", "blets", "blacket", "blackets", "branches", "blags", "bets", "trets", " brets", " bracket", "backets", "trackets", "banches", "bags", "bracket", "brags", "tranches", "tracket", "charets", "blanches"], "depth": ["history", "Depth", "process", "details", "levels", "stack", "height", "ptr", "roots", "directory", "parent", "where", "goal", "debug", "length", "distance", "dirty", "focus", "thread", "density", "position", "prime", "driver", "count", "priority", "allow", "ths", "worked", "context", "mode", "rank", "percent", "level", "path", "window", "index", "head", "tree", "feature", "Depths", "TH", "panic", "cache", "dep", "scale", "sequence", "module", " deepest", "core", "ctr", "device", "order", " depths", "family", "component", "purpose", "trace", "scope", "dq", "root", "deep", "python", "DEP"], "b": ["u", "bh", "eb", "base", "verb", "bb", "bs", "sb", "g", "B", "a", "z", "bc", "buff", "buffer", "mb", "j", "ob", "nb", "cb", "bound", "v", "be", "ib", "bt", "rb", "h", "c", "bp", "br", "e", "gb", "bi", "bu", "k", "d", "f", "db", "app", "ab"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Assume that the negative sign counts as a digit, e.g. -5 has two digits\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n */\n\npublic class ADD_ELEMENTS {\n    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n            if(Integer.toString(arr.get(i)).length() >= 2) {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"arr": ["obs", "arg", "aa", "data", "arp", "array", "ev", "dr", "bs", "adj", "alg", "Ar", "rr", "cur", "elt", "aaa", "list", "buf", "ars", "ij", "now", "gr", "ray", "addr", "mb", "seq", "res", "resp", "ar", "img", "pp", "ll", "sys", "vals", "coll", "pl", "att", "br", "fr", "r", "alph", "dat", "emb", "err", "bl", "obj", "ag", "rs", "arb"], "k": ["ks", "ask", "uk", "kid", "p", "num", "m", "ok", "mk", "kn", "kr", "radius", "ka", "sk", "kind", "ko", "ik", "j", "key", "v", "q", "unk", "kw", "dk", "kj", "work", "kl", "ck", "ku", "n", "ikk", "km", "kb", "kh", "kk", "K", "ak", "ek"], "result": ["zero", "test", "expected", "p", "num", "total", "sum", "counter", "valid", "success", "params", "processor", "integer", "product", "goal", "out", "current", "cur", "different", "currency", "other", "value", "now", "diff", "Result", "number", "ret", "done", "complete", "were", "mu", "tmp", "next", "power", "ULT", "default", "ge", "true", "fac", "work", "results", "ult", "r", "date", "mate", "err", "make", "match", "res"], "i": ["u", "ji", "phi", "ri", "cu", "ori", "point", "oi", "m", "iu", "gu", "ui", "yi", "ei", "us", "info", "ogi", "ti", "hi", "ski", "ai", "I", "si", "ki", "client", "ij", "li", "pi", "multi", "x", "it", "ms", "qi", "io", "ami", "zi", "ik", "j", "ix", "di", "ic", "v", "y", "mi", "im", "cli", "ci", "c", "index", "ini", "my", "o", "ie", "is", "bi", "ii", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\npublic class PRIME_FIB {\n    public static boolean is_prime(int n) {\n        if (n < 2)\n            return false;\n        for (int i = 2; i < (int)Math.sqrt(n) + 1; i += 1){\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len));\n            if (is_prime(fib.get(len - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "p", "b", "num", "note", "m", "g", "net", "out", "nt", "none", "ln", "a", "en", "z", "x", "number", "dn", "ne", "all", "l", "j", "fn", "nb", "name", "on", "v", "gn", "q", "y", "cn", "ll", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "ni", "r", "e", "o", "np", "k", "d", "ng", "norm", "f", "sn", "t"], "i": ["u", "phi", "ri", "oi", "gu", "iu", "ui", "ei", "us", "id", "ti", "hi", "ai", "I", "si", "ki", "pi", "li", "multi", "io", "ms", "by", "it", "fi", "ik", "zi", "l", "j", "ix", "di", "ic", "y", "mu", "mi", "iq", "ci", "im", "cli", "ini", "my", "is", "bi", "ii", "sim", "xi", "ip", "gi"], "fib": ["uflib", "rfig", "flIB", "Fob", "bib", "freib", "confob", "frib", "wilib", "ufifa", "affIB", "fibi", "rfift", "invift", "Filib", "sfiber", "facibi", " fibi", "confib", "refibi", "refilib", " filib", "flrib", "wib", "xfibi", " fIB", "firm", "freilib", "wiber", "Fib", "sfibi", "refirm", "feb", "filib", "rfib", "affib", "fIB", "fift", "flib", "sfim", "facig", "confIB", " fob", "facib", "fob", "faciber", " fim", "ufiber", "Fiber", " frib", "refib", "biber", "bibi", "fleb", "xfilib", "affob", "ufib", "affiber", "affifa", "rfibi", "fiber", " fig", " fiber", "xfib", "xfirm", "bilib", "invig", "sfig", "affrib", "wob", "invibi", "invib", "freiber", "Fig", " firm", "confeb", " flib", "fig", "fifa", " feb", "freibi", "sfib", " fifa", "confrib", " fift", "Fim", "sfob", "fim", "afflib"], "len": ["ind", "cond", "lt", "lis", "lib", "ls", "sp", "lif", "hl", "end", "fin", "dl", "length", "L", "nt", "elt", "sl", "lp", "ln", "lon", "el", "lit", "li", "ld", "en", " Len", "count", "lvl", "lv", "lc", "all", "pos", "cmp", "seq", "l", "lim", "ll", "full", "Len", "lan", "left", "coll", "mem", "wid", "alt", "lf", "den", "size", "le", "vec"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/* There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\") */\n\npublic class BF {\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        for (int i = planet1_index; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n}\n", "substitutes": {"planet1": ["plan1", "planA", "plateone", "layout81", " planetone", "workerA", "source2", "plotone", "plot1", "planet81", "sourceOne", "plateOne", "planetOne", "workerone", " planetOne", "layoutOne", "layout1", "planone", "worker2", " planetA", " planet0", "worker1", "plotOne", "plan2", "layout2", "planetone", "planet0", " planet81", "plate0", "source1", "plate1", "source81", "planetA", "plot0"], "planet2": ["plan3", " planet02", "plan1", "planet52", "source3", "projecttwo", "resource3", "source2", "element1", "orbitTwo", "project52", "sunTwo", "plan2", "projectTwo", "planet3", "element2", "element02", "source02", "sun2", "project2", "resource2", "suntwo", "resource1", "planetTwo", "source1", "sun52", "orbittwo", "planettwo", "orbit52", "element3", " planet3", "planet02", "orbit2"], "planet_names": ["planet_members", "planet_writers", "planetallheaders", "planet12names", "planetallnames", "intelligence_ames", "planet2files", "Planet_names", "planet2members", "planet55names", "planet_sql", "intelligence_docs", "Planet_files", "planet12ids", "pixel_writers", "Planet2files", "Planet2members", "plan_headers", "planet_Names", "plan_names", "planet2headers", "Planet2Names", "intelligence_names", "planet55writers", "planet_docs", "pixel_names", "planet12works", "planet_codes", "intelligence_errors", "plan55headers", "starter_members", "planet27headers", "planet55Names", "pixel_works", "Planet_Names", "starter_papers", "plan55Names", "planet55headers", "pixel_ids", "planet_headers", "planet_ames", "planet12nos", "planet_nos", "planet8errors", "planet8ames", "planet27names", "plan_Names", "planet8docs", "planetallns", "planet_ids", "planet12writers", "planet55ids", "plan_ns", "Planet2names", "planet8names", "intelligence_nos", "planet_files", "planet2Names", "plan55ns", "planet_ns", "planet2names", "starter_names", "planet12headers", "planet_works", "planet12sql", "planet27sql", "planet_errors", "Planet_members", "intelligence_headers", "planet55works", "planetallNames", "plan55names", "planet_papers", "planet55ns", "starter_codes", "planet2ns", "planet27nos", "intelligence_sql"], "result": ["set", "test", "continue", "data", "total", "create", "response", "valid", "relation", "success", "output", "end", "goal", "see", "product", "length", "found", "current", "list", "it", "other", "currency", "word", "null", "collect", "value", "Result", "join", "them", "diff", "table", "ret", "complete", "extra", "only", "default", "memory", "successful", "true", "feature", "primary", "report", "results", "br", "comment", "r", "summary", "description", "first", "initial", "database", "date", "exist", "empty", "cup", "mate", "profile", "match", "message", "res", "answer"], "planet1_index": ["planet2_Index", "planet9ti", "planet1_connect", "planet1tindex", "planet1_address", "planet1istindex", "planet1isti", "planet1ti", "planet1istaddress", "planet9taddress", "planet1istconnect", "planet9_i", "planet1_number", "planet9_index", "planet9tindex", "planet1_i", "planet2_ind", "planet1tconnect", "planet1taddress", "planet2_number", "planet1_ind", "planet9_address", "planet9_connect", "planet9tconnect", "planet1_Index"], "planet2_index": ["planet2_Index", "planet2ixindex", "planettwo_ind", "planettwo_Index", "planet2ixind", "planettwo_index", "planet2_x", "planet2_ix", "planet2_ind", "planet2ixix", "planet1_x", "planet1_ind", "planet2ixIndex", "planettwo_ix", "planet1_Index"], "i": ["u", "phi", "asi", "ori", "in", "m", "iu", "gu", "ui", "g", "ei", "id", "ti", "iter", "ai", "I", "si", "ki", "pi", "li", "it", "x", "multi", "ms", "qi", "ami", "zi", "j", "ix", "di", "v", "ic", "y", "mi", "iq", "cli", "ci", "c", "index", "ini", "iri", "is", "bi", "ii", "s", "sim", "xi", "ip", "gi"]}}
{"code1": "package humaneval.buggy;\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\n\npublic class SKJKASDKD {\n    public static boolean is_prime(int n) {\n        for (int i = 2; i < (int)Math.pow(n, 0.5) + 1; i += 1) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n            result += (int) c;\n        }\n        return result;\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "p", "num", "m", "g", "nt", "ln", "z", "x", "number", "ne", "l", "j", "fn", "nb", "v", "q", "y", "cn", "ll", "ns", "nor", "nm", "nc", "nn", "na", "N", "np", "o", "k", "d", "ng", "norm", "f", "sn", "t"], "i": ["ind", "u", "phi", "p", "ori", "oi", "m", "iu", "a", "ui", "yi", "ei", "me", "id", " ii", "info", "hi", "iter", "ti", "ai", "I", "si", "ki", "ij", "li", "multi", "pi", "it", "io", "by", "qi", "ami", "fi", "zi", "x", "l", "j", "ims", "ix", "di", "ta", "ic", "v", "uri", "uli", "y", "mi", "im", "mu", "ci", "iq", "cli", "slice", "index", "ini", "ia", "ni", " j", "o", "at", "is", "bi", "ii", "sim", "xi", "ip", "gi"], "lst": ["elstr", "flist", "Lth", "plstr", "lnd", "Llist", "flst", "llsts", "lstr", "llld", "Lst", "Lsts", "llstr", "lST", "llST", "lssts", " lth", "elld", "lld", "list", "llth", "llnd", "LST", "llist", " lstr", " lsts", "flsts", " lld", "lth", "plst", "ellist", "llst", "elst", "lsST", "elist", "elsts", "lsst", "lsts", " lnd", "plnd", "lsist", "fllist", " list", "plsts"], "max": ["ver", "base", "p", "min", "total", "m", "exp", " Max", "box", "sum", "Max", "mean", "end", "best", "limit", "gt", "length", "with", "cur", "prime", "top", "mx", "aux", "prefix", "x", "now", "upper", "mod", "MAX", "res", "maximum", "real", "ax", "v", "last", "rest", "tmp", "full", "default", "med", "window", "h", "grow", "right", "head", "work", "huge", "star", "fr", "range", "scale", "ma", "k", "global", "recent", " biggest", "size", "t", "cache", "temp", "conf", "orig"], "result": ["zero", "test", "continue", "more", "p", "num", "total", "sum", "counter", "char", "valid", "success", "relation", "integer", "product", "goal", "mult", "current", "cur", "term", "currency", "value", "diff", "buffer", "Result", "number", "def", "ret", "mask", "complete", "default", "feature", "results", "comment", "ult", "r", "date", "global", "mate", "trace", "profile", "command", "match", "message", "res"], "c": ["u", "category", "dc", "p", "b", "cu", "m", "anc", "sc", "g", "cs", "ch", "a", "fc", "C", "lc", "xc", "l", "mc", "ic", "v", "ct", "h", "tc", "nc", "ac", "r", "cp", "unc", "gc", "k", "f", "cap", "cc", "cat", "t"]}}
{"code1": "package humaneval.buggy;\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\n\npublic class SOLVE_STRING {\n    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n            else sb.append(Character.toLowerCase(c));\n            flg = 1;\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}\n", "substitutes": {"s": ["sv", "p", "b", "ls", "sq", "sg", "bs", "g", "cs", "ats", "sort", "its", "sl", "a", "ms", "state", "ps", "l", "fs", "less", "str", "st", "v", "y", "sql", "ns", "sys", "abs", "string", "ws", "http", "os", "ts", "r", "xs", "e", "qs", "is", "S", "sf", "sts", "n", "js", "bits", "parts", "gs", "t", "rs", "ss"], "flg": ["flgs", "complg", "folgs", "flG", "folg", "flge", "complge", " flog", " flgn", "folgu", "flig", "complig", "Flgs", "flog", " flge", "Flog", "filg", "FLg", "FLog", "filgu", "Flge", "FLgs", "Flg", " flgs", " flG", "filgs", " flgu", "FLG", "FlG", "complgs", "flgu", "folgn", "filgn", "flgn", " flig", "Flig"], "sb": ["bh", "eb", "ssl", "ub", "SB", "b", "lab", "bn", "sq", "wb", "ls", "lb", "sg", "bs", "bb", "shell", "zb", "sh", "obb", "BB", "sl", "lp", "bis", "bd", "buff", "sa", "bc", "mb", "rob", "pb", "abb", "ob", "nb", "fb", "cb", "ctrl", "orb", "gg", "erb", "ib", "bt", "bj", "xb", "rb", "umb", "gob", "tg", "bp", "bf", "bg", "gb", "bash", "sf", "sth", "gc", "bridge", "db", "kb", "tn", "ab", "ha", "arb"], "c": ["arc", "dc", "ec", "cd", "b", "cu", "char", "cont", "cs", "g", "chain", "cy", "vc", "ch", "rc", "cur", "co", "fc", "C", "lc", "cr", "mc", "content", "ct", "ci", "ca", "abc", "tc", "cf", "cin", "ce", "ac", "comp", "coll", "etc", "cm", "cp", "code", "cell", "gc", "col", "k", "cos", "cap", "cc", "cat", "cache", "com"], "i": ["ind", "ji", "phi", "ri", "ori", "oi", "gu", "iu", "m", "ui", "chain", "ei", "id", "ti", "hi", "iter", "ai", "hei", "si", "I", "ki", "pi", "li", "multi", "it", "qi", "fi", "zi", "j", "ix", "uri", "di", "v", "ic", "y", "mi", "cli", "ci", "ini", "mac", "ni", "is", "bi", "ii", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n */\n\npublic class SELECT_WORDS {\n    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n}\n", "substitutes": {"s": ["sv", "p", "b", "ls", "m", "sb", "bs", "g", "strings", "a", "ms", "x", "ps", "l", "str", "v", "w", "y", "q", "ns", "h", "c", "string", "ashes", "os", "ts", "r", "xs", "qs", "e", "is", "S", "sts", "aws", "js", "gs", "t", "ses", "rs", "ss"], "n": ["max", "u", "nan", "nu", "mn", "p", "num", "b", "m", "g", "nl", "net", "ny", "nt", "none", "ln", "it", "count", "number", " N", "ne", "l", "nb", "cn", "ity", "ns", "nor", "c", "nm", "nie", "nc", "nn", "na", "N", "ni", "e", "r", "d", "ng", "t"], "result": ["set", "test", "data", "run", "total", "create", "response", "success", "relation", "valid", "output", "group", "goal", "product", "up", "there", "out", "found", "current", "list", "buffer", "now", "Result", "all", "table", " resulting", "ret", "done", "complete", "next", "default", "memory", "feature", "work", "primary", "master", "report", "results", "initial", "sequence", "first", "union", "ger", "mate", "profile", "match", "message", "res", "front", "answer"], "words": ["said", "finals", "versions", "windows", "ones", "papers", "points", "details", "vs", "pieces", "works", "params", "years", "ords", "strings", "workers", "forms", "objects", "phones", "its", "ions", "members", "letters", "ms", "images", "Words", "pins", "tools", "files", "spe", "days", "docs", "features", "frames", "we", "weights", "bits", "parts", "english", "terms", "blocks", "rules", "books", "users", "ows", "items", "bows", "hops", "articles", "games", "news", "lists", "banks", "lines", "pages", "tags"], "i": ["ind", "u", "base", "phi", "ri", "asi", "ori", "ir", "in", "iu", "ui", "g", "ei", "yi", "me", "info", "out", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "ami", "li", "a", "it", "multi", "qi", "x", "io", "zi", "ix", "ims", "di", "uri", "ic", "y", "mi", "im", "ci", "index", "iti", "ini", "go", "ia", "e", "print", "ie", "iri", "is", "bi", "ii", "f", "sim", "xi", "ip", "to", "init", "gi"], "num_consonants": ["num_consonents", "num_consnands", "num_consongands", "num_consistants", "num_coonents", "num_consonsant", "num_consenant", "num_consonsators", "num_cononants", "num_cononant", "num_consonsanted", "num_cononators", "num_cononsant", "num_consnators", "num_consenanted", "num_cononands", "num_cononsanted", "num_coongents", "num_consenents", "num_coongant", "num_cononanted", "num_consonands", "num_coongands", "num_consonant", "num_coonants", "num_cononsants", "num_consistanted", "num_consenands", "num_consenants", "num_consonsants", "num_consongant", "num_consonsands", "num_coongants", "num_consenators", "num_coonands", "num_cononsators", "num_consistands", "num_consonanted", "num_consistant", "num_consongents", "num_consnants", "num_consonators", "num_consonsents", "num_consnant", "num_consongants", "num_coonant", "num_cononsands"], "vowels": ["vowel", "Vowels", "voyals", "vowsel", " voveles", "vovles", "Vowsals", "voweelines", "vowals", "vameels", "vowsells", "vovels", "voweals", " vowals", "quowsles", " voveals", "Vowselines", "Vowelines", "voveels", "vowselines", "quowels", "quowsel", "vowsles", "Vowles", "voveells", "vowses", "voyles", "voveles", "quowel", "quowses", "vowells", "Vowals", "vowsels", " voveells", "vamees", "voyelines", "vovel", "vameles", "voweells", "vowles", "vowelines", "vameel", "Vowsles", " vowells", "vowes", "voves", "voveals", "voweels", " voveels", "quowes", "vowsals", " vowles", "voyels", "Vowsels", "quowsels", "voweles", "quowles"], "j": ["ji", "jit", "kid", "b", "no", "uj", "json", "g", "bs", "jj", "aj", "out", "ja", "ij", "it", "z", "jl", "jo", "by", "J", "oj", "jump", "key", "ion", "v", "q", "y", "pt", "bj", "im", "pr", "next", "bot", "kj", "ge", "att", "je", "off", "br", "fr", "job", "o", "jp", "js", "you", "jc", "dj", "jac", "to", "obj", "jack"], "k": ["ks", "ke", "max", "uk", "kid", "tk", "ijk", "ok", "mk", "g", "kr", "kn", "kin", "wk", "ka", "sk", "ki", "ko", "z", "kt", "ik", "key", "q", "unk", "kw", "dk", "kj", "kl", "kg", "ck", "ku", "ph", "km", "kh", "kk", "K", "ak", "ek"], "consonant": ["Consenant", "consontants", "cosonants", "consongient", "cosenanting", "consenent", "consonants", "consenient", "consenanting", "consongants", "Consonants", "Consenance", "cosonant", "Consenent", "consonsance", "consontant", "consonsant", "cosenent", "consontanting", "Consonant", "consonanting", "consontent", "consonent", "consonsient", "consenant", "cosenant", "consenance", "Consenants", "consongent", "cosonanting", "consongance", "consenants", "consonance", "consongant", "cosonent", "cosonient", "cosenants", "cosenient", "consonsants", "consonient", "Consonance", "consonsent", "Consonent", "consonsanting"]}}
{"code1": "package humaneval.buggy;\n\n/* Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False \n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced. */\n\npublic class WILL_IT_FLY {\n    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n        }\n        return true;\n    }\n}\n", "substitutes": {"q": ["qual", "que", "p", "b", "requ", "sq", "m", "comm", "g", "qt", "ch", "sh", "ql", "ue", "cur", "z", "ms", "query", "ues", "required", "qi", "qa", "l", "msg", "quit", "v", "form", "y", "pt", "pp", "iq", "ll", "ct", "qv", "qu", "c", "h", "gm", "qs", "req", "ck", "ry", "eq", "k", "Q", "queue", "aq", "quant", "qq", "dq", "t", "quest", "conf"], "w": ["max", "ew", "wh", "wb", "m", "g", "wal", "sw", "W", "wt", "nw", "tw", "aw", "wait", "v", "y", "kw", "rw", "wx", "wi", "width", "window", "h", "ws", "wl", "we", "weights", "wp", "hw", "wrap", " W", "weight", "wr", "iw", "wa", "t"], "sum": ["zero", "set", "num", "total", "mean", "sup", "us", "cal", "SI", "gam", "um", "ms", "sa", "hash", "by", "Sum", "sam", "doc", "su", " summed", "average", "tmp", "add", "dev", "med", "ass", " SUM", "head", "mass", "fac", "summary", "mem", "scale", "tu", "gram", "sun", "union", "cum", "ul", "share", "alpha", "sim", "weight", "size", "temp", "vol", "must", "tail"], "i": ["ind", "u", "phi", "ri", "asi", "ori", "point", "in", "m", "iu", "a", "ui", "ei", "us", "me", "id", "info", "ti", "hi", "iter", "ai", "I", "si", "ki", "ij", "pi", "li", "it", "io", "multi", "ami", "fi", "qi", "x", "zi", "ik", "ims", "ix", "di", "uri", "ic", "v", "mi", "im", "iq", "ci", "index", "inner", "iii", "ini", "get", "ia", "ie", "at", "is", "bi", "ii", "f", "sim", "xi", "ip", "ma", "init", "gi"], "j": ["ji", "sp", "m", "uj", "ev", "json", "jj", "aj", "out", "tr", "ja", "si", "ij", "z", "jl", "J", "ne", "jump", "div", "di", "v", "y", "pt", "bj", "next", "kj", "nm", "br", "fr", "jp", "bi", "n", "js", "ph", "k", "jc", "dj", "jac", "obj", "res"]}}
{"code1": "package humaneval.buggy;\n\n/* Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21 */\n\npublic class FIB {\n    public static int fib(int n) {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "substitutes": {"n": ["nu", "mn", "p", "num", "m", "g", "len", "nt", "ln", "count", "number", "dn", "ne", "j", "nb", "on", "v", "q", "cn", "ll", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "np", "i", "k", "d", "ng", "f", "sn", "size", "t"]}}
{"code1": "package humaneval.buggy;\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\npublic class MULTIPLY {\n    public static int multiply(int a, int b) {\n        return (a % 10) * (b % 10);\n    }\n}\n", "substitutes": {"a": ["aka", "aa", "da", "p", "era", "ab", "act", "aj", "aaa", "sa", "ea", "l", "am", "ba", "ar", "y", "ity", "ca", "la", "oa", "acs", "va", "ac", "A", "ia", "sta", "e", "o", "at", "as", "eas", "d", "apa", "alpha", "ae", "le", "t", "ma", "au", "ao", "an"], "b": ["eb", "base", "lib", "wb", "m", "bb", "bs", "g", "sb", "blue", "B", "bis", "z", "bc", "mb", "l", "ob", "fb", "ba", "v", "w", "y", "be", "ib", "rb", "c", "br", "r", "or", "i", "gb", "bi", "n", "d", "db", "ab", "bar"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\npublic class COUNT_UP_TO {\n    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n            boolean is_prime = false;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "p", "b", "num", "no", "mn", "m", "g", "net", "nt", "ln", "z", "count", "number", "l", "nb", "w", "q", "ll", "ns", "c", "nm", "nc", "nn", "na", "N", "ni", "node", "np", "o", "k", "d", "f", "network", "sn", "size", "t"], "primes": ["brimes", "prics", " prines", "prunes", "crunes", "ratics", "Primens", "pruning", "brimens", "brime", "prime", " primens", "Prime", "prines", " prunes", "Primes", " prime", "drimes", "ratunes", "prices", "crizes", "statizes", " prics", "Prices", "cruning", " pruning", "ratines", "drics", "statuning", "prizes", "drines", "primens", "brices", "drunes", " prices", "statunes", " prizes", "crimes", "statimes", "ratimes"], "i": ["ind", "u", "base", "phi", "p", "asi", "b", "ri", "in", "m", "iu", "ori", "ui", "g", "ei", "yi", "us", "me", "id", "integer", "info", "hi", "out", "ti", "ai", "I", "si", "ij", "pi", "ami", "it", "x", "io", "by", "qi", "multi", "z", "zi", "l", "li", "ix", "di", "ic", "v", "q", "y", "mi", "im", "iq", "ci", "h", "index", "ini", "N", "ni", "ie", "o", "is", "bi", "ii", "k", "f", "sim", "xi", "ip", "t", "init", "gi"], "j": ["ji", "p", "b", "m", "uj", "g", "json", "bs", "jj", "aj", "adj", "tr", "old", "ja", "prime", "ij", "other", "it", "z", "x", "jl", "J", "ne", "oj", "jump", "div", "on", "ion", "v", "key", "q", "y", "bj", "next", "kj", " dj", "br", "fr", "ie", "jp", "bi", "js", "k", "d", "jc", "beta", "meg", "dj", "err", "jac", "vol", "obj"], "is_prime": ["Is_zero", "isLprimary", " is_zero", "isNotPrime", "isLprime", " is_floor", "isLextra", "Is_Prime", "isLzero", "is_floor", "isNotfloor", "is_primary", " is_Prime", "isNotprime", " is_mod", " is_extra", "Is_prime", "is_four", "is_extra", "is_Prime", " is_primary", "is_zero", "isNotmod", "Is_four", "is_mod"]}}
{"code1": "package humaneval.buggy;\n\n/* \ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n*/\n\npublic class TRIPLES_SUM_TO_ZERO {\n    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n            for (int j = i; j < numbers.length; j += 1) {\n                for (int k = j; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "substitutes": {"numbers": ["neographies", "nographies", "lographies", " nasha", "nifiers", "noteums", "neeters", "nums", "norices", "noeters", "mifiers", "nanguages", "noteumbers", "Numbers", "snumbers", "noumbers", "nasha", "snometers", " nnotations", " nolars", "onenolars", "rumber", "noums", "Nums", "rumbers", "nurations", "trices", "number", "ruers", " nuers", " nrices", "tumbers", "mumbers", " nanguages", "naeters", "naumbers", " nometers", "Nuers", "numer", "noteanguages", "neurations", "lumbers", " numer", "Number", "neanguages", "neters", "onenums", "nuers", "naums", "nometers", "lums", "nenotations", "neumer", "rums", "nanotations", " nums", "neumbers", "lumer", "nolars", "masha", "snifiers", " nographies", " nurations", "neums", "nrices", "teters", "mometers", " neters", "neolars", "onenurations", "noteumer", "nnotations", "onenumbers", " nifiers", " number", "snasha", "tums"], "i": ["ind", "u", "phi", "ri", "asi", "ori", "ir", "in", "oi", "iu", "ui", "yi", "ei", "id", "info", "hi", "ti", "ai", "I", "si", "ki", "ij", "li", "pi", "ami", "x", "io", "it", "aci", "multi", "zi", "ix", "ims", "di", "ic", "y", "mi", "im", "iq", "ci", "iti", "inner", "index", "ini", "ia", "iri", "o", "ie", "is", "bi", "iat", "at", "ii", "xi", "ip", "to", "init"], "j": ["ji", "jas", "b", "ijk", "uj", "jack", "json", "g", "bs", "ju", "jj", "aj", "to", "adj", "er", "ja", "ij", "other", "it", "z", "gov", "jl", "by", "J", "oj", "l", "jump", "key", "v", "q", "y", "pt", "bj", "im", "pr", "art", "Ja", "kj", "off", "br", "fr", "ot", "job", "jp", "n", "js", "jc", "dj", "jac", "je", "obj", "el"], "k": ["ks", "ke", "uk", "kid", "tk", "ijk", "m", "ok", "mk", "g", "kr", "kn", "kin", "kar", "ark", "wk", "ka", "sk", "ki", "isk", "ko", "z", "kt", "ik", "kan", "key", "unk", "kw", "dk", "kit", "kj", "kl", "kg", "ck", "ku", "kat", "km", "kh", "kk", "th", "K", "ak", "ek"]}}
{"code1": "package humaneval.buggy;\n\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\n\npublic class SMALLEST_CHANGE {\n    public static int smallest_change(int[] arr) {\n        int result = 0;\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] != arr[arr.length - i])\n                result += 1;\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"arr": ["arg", "aa", "data", "arp", "val", "vs", "array", "stack", "au", "ev", "dr", "rep", "Ar", "rr", "tr", "cur", "elt", "aaa", "list", "buf", "ij", "dict", "ray", "gr", "our", "rel", "enc", "str", "ar", "mat", "img", "inst", "map", "pr", "rb", "iq", "grid", "sys", "batch", "coll", "pl", "br", "fr", "r", "Array", "expr", "gb", "parts", "ck", "ack", "arry", "alph", "dat", "db", "deg", "attr", "err", "bl", "obj", "rs", "arb"], "result": ["zero", " resulted", "set", "test", "expected", "continue", "total", "sum", "ful", "success", "mean", "integer", "goal", "product", "me", "debug", "length", "current", "RESULTS", "currency", " Result", "value", "Result", "number", "error", "ret", "real", "mask", "event", "next", "default", "ULT", "duration", "feature", "true", "results", "know", "comment", "perm", "ult", "r", "score", "date", "red", "flag", "purpose", "mate", "status", "command", "match", "message", "res", "answer"], "i": ["ind", "u", "ji", "phi", "ri", "p", "ori", "m", "iu", "gu", "ui", "ei", "us", "id", "hi", "ti", "ai", "I", "si", "ki", "ij", "li", "pi", "multi", "x", "io", "it", "qi", "ms", "fi", "zi", "l", "j", "ix", "uri", "di", "v", "ic", "q", "y", "mi", "im", "iq", "ci", "h", "index", "c", "ini", "batch", "my", "e", "o", "is", "bi", "ii", "n", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False */\n\npublic class PRIME_LENGTH {\n    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n            if (l - i == 0)\n                return false;\n        }\n        return true;\n    }\n}\n", "substitutes": {"string": ["said", "test", "data", "filename", "array", "char", "source", "strings", "ring", "input", "space", "pattern", "escape", "length", "spec", "list", "word", "prefix", "null", "value", "buffer", "number", "type", "name", "str", "format", "parse", "reference", "v", "object", "password", "print", "sequence", "text", "s", "file", "command"], "l": ["lt", "lis", "ml", "p", "ls", "lb", "hl", "nl", "dl", "shell", "length", "L", "len", "loc", "sl", "lp", "ln", "list", "las", "li", "ld", "lit", "x", "al", "lu", "lc", "lay", "v", "q", "ll", "h", "left", "pl", "kl", "ly", "lo", "ul", "n", "s", "d", "f", "lf", "le", "ell", "t", "lin", "el"], "i": ["u", "phi", "ri", "ori", "m", "iu", "ui", "ei", "us", "id", "ti", "iter", "hi", "ai", "I", "si", "ij", "pi", "li", "multi", "x", "it", "by", "qi", "ms", "zi", "j", "ix", "di", "v", "ic", "y", "mi", "iq", "cli", "ci", "mu", "ini", "ni", "is", "bi", "ii", "n", "sim", "xi", "ip", "err", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\npublic class MAKE_PALINDROME {\n    public static boolean is_palindrome(String str){\n        for (int i = 0; i < str.length(); i += 1){\n            if (str.charAt(i) != str.charAt(str.length() - 1 - i))\n                return false;\n        }\n        return true;\n    }\n\n    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n        result += str.substring(0, beginning_of_suffix);\n        return result;\n    }\n}\n", "substitutes": {"str": ["data", "p", "b", "sp", "exp", "char", "comm", "g", "dr", "cs", "input", "act", "ch", "out", "iter", "tr", "nt", "cur", "spec", "progress", "list", "this", "it", "prefix", "buffer", "gr", "recomm", "seq", "res", "enc", "ret", "name", "st", "url", "msg", "div", "raw", "form", "rs", "pr", "arr", "ct", "txt", "window", "c", "string", "coll", "os", "br", "fr", "r", "print", "req", "ctr", "ocr", "exec", "text", "n", "s", "Str", "status", "STR", "vol", "t", "err", "temp", "obj", "rec"], "i": ["u", "ji", "phi", "p", "b", "in", "m", "gu", "iu", "ui", "ex", "us", "id", "info", "hi", "iter", "ai", "I", "si", "client", "li", "pi", "it", "x", "a", "io", "ms", "multi", "qi", "ami", "zi", "l", "j", "ix", "on", "di", "v", "ic", "y", "uri", "mi", "im", "cli", "ci", "c", "index", "ini", "my", "e", "is", "bi", "ii", "n", "k", "sim", "xi", "ip", "t", "init", "gi"], "beginning_of_suffix": ["beginning_of_expprefix", "beginning_of_desill", "beginning_of_uffix", "beginning_of_affix", "beginning_of_suix", "beginning_of_suprefix", "beginning_of_sufffix", "beginning_of_prefixient", "beginning_of_suffixed", "beginning_of_expill", "beginning_of_suffprefix", "beginning_of_affient", "beginning_of_successix", "beginning_of_suension", "beginning_of_prefixfix", "beginning_of_supill", "beginning_of_expix", "beginning_of_prefixixed", "beginning_of_supix", "beginning_of_subfix", "beginning_of_uffension", "beginning_of_uffixed", "beginning_of_subprefix", "beginning_of_suient", "beginning_of_prefixprefix", "beginning_of_supfix", "beginning_of_expfix", "beginning_of_successension", "beginning_of_subixed", "beginning_of_successixed", "beginning_of_suixed", "beginning_of_suffension", "beginning_of_prefixix", "beginning_of_desix", "beginning_of_desfix", "beginning_of_desprefix", "beginning_of_suffient", "beginning_of_supprefix", "beginning_of_suffill", "beginning_of_subix", "beginning_of_afffix", "beginning_of_sufix"], "result": ["test", "reason", "wrapper", "data", "request", "response", "success", "json", "ful", "output", "runner", "me", "product", "relation", "goal", "out", "cur", "current", "currency", "word", "value", "join", "Result", "table", "ret", "name", "complete", "were", "next", "memory", "string", "replace", "feature", "master", "results", "report", "r", "description", "date", "html", "mate", "root", "match", "message", "res", "answer"]}}
{"code1": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\npublic class GET_ROW {\n    public class Tuple{\n        int x;\n        int y;\n        public Tuple(int x, int y) {\n            this.x = x;\n            this.y = y;            \n        }\n        @Override\n        public boolean equals(Object o) {\n            if (o instanceof Tuple) {\n                return this.x == ((Tuple) o).x && this.y == ((Tuple) o).y;\n            }\n            return false;\n        }\n    } \n\n    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n            for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(i) == x){\n                    result.add(new GET_ROW().new Tuple(i, i));\n                }\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"x": ["xxx", "u", "ox", "p", "xf", "m", "exp", "lex", "xt", "ex", "id", " ax", "ux", "current", "mx", " cx", "px", "a", "z", "lon", "xx", "value", " xx", "check", "xc", "X", "l", "zx", "ax", "ix", "on", "key", "xxxx", "v", " tx", "name", "rx", "w", "tx", "xa", "wx", "lat", "width", "index", "c", "xs", "yx", "xy", "xe", "r", "ry", "e", "xd", " dx", "n", "xml", "row", "dx", "xi", "t", "hex", "fx", "xp"], "y": ["pretty", "hey", "vy", "ey", "yer", "gy", "phi", "u", "b", "Y", "m", "ya", "yi", "cy", "dy", "axy", "ies", "ny", "yt", "ye", "client", "yy", "lon", "z", "yr", "l", "key", "v", "ay", "ity", "iny", "hot", "ty", "c", "sys", "ery", "iy", "uy", "fy", "ly", "my", "xy", "yo", "ry", "at", "wy", "n", "oy", "row", "sky", "t", "sy", "py"], "o": ["u", "from", "p", "fo", "oi", "m", "ou", "oin", "ok", "out", "ops", "om", "co", "ro", "other", "a", "this", "O", "io", "ame", "oj", "l", "ob", "oid", "mo", "v", "onet", "oa", "object", "oly", "c", "oco", "op", "auto", "os", "so", "oos", "e", "or", "iso", "off", "et", "lo", "n", "oo", "f", "t", "to", "obj", "bo"], "lst": ["lnist", "lnd", "Llist", "litsty", "litst", "lmt", "lnst", "dlist", "Lst", "lbl", "dllist", "list", "Lsty", "slist", "llist", "elnd", " lmt", "Lnd", "sllist", "ellist", "elst", "lnlist", "dlst", "litnd", "lnmt", "dlbl", "elist", "litist", " lsty", "slst", " llist", " lnd", " list", "lsty", "slbl", "Lmt", "Lbl"], "result": [" resulted", "buffer", "test", "join", "continue", "data", "remove", "fake", "create", "response", "success", "relation", "valid", "output", "see", "runner", "goal", "end", "there", "found", "current", "cur", "pair", "list", "collect", "now", "folder", "Result", "diff", "created", "error", "table", "ret", "all", "complete", "were", "tmp", "next", "contact", "memory", "cert", "true", "report", "search", "br", "results", "r", "sequence", "first", "collection", "mate", "trace", "profile", "cache", "match", "message", "res", "answer"], "i": ["u", "ji", "base", "phi", "p", "asi", "ri", "in", "m", "iu", "ui", "yi", "ei", "id", "jj", "ti", "out", "ai", "I", "si", "ki", "ij", "this", "pi", "ami", "li", "it", "by", "io", "multi", "z", "zi", "l", "Index", "ix", "di", "key", "ic", "v", "mi", "iq", "im", "ci", "index", "ini", "batch", "ip", "ia", "ni", "e", "r", "ie", "is", "bi", "ii", "n", "k", "t", "xi", "init"], "j": ["ji", "jit", "jas", "b", "m", "uj", "g", "json", "bs", "jj", "aj", "adj", "ja", "ij", "other", "a", "z", "gov", "jl", "it", "J", "oj", "l", "jump", "ix", "v", "q", "bj", "pr", "h", "kj", "left", "br", "fr", "job", "at", "jp", "bi", "n", "js", "k", "d", "jc", "dj", "t", "obj"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.HashMap;\n\n/*\n * Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n */\n\npublic class HISTOGRAM {\n    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n            if(count_letter[i] < most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n}\n", "substitutes": {"s": ["sv", "conv", "p", "b", "ls", "sb", "bs", "g", "strings", "space", "ats", "its", "a", "ms", "ps", "l", "str", "st", "v", "w", "y", "ns", "txt", "h", "abs", "string", "os", "ts", "r", "xs", "e", "is", "S", "parts", "n", "js", "f", "gs", "t", "rs", "ss"], "res": ["con", "resources", "conv", "val", "re", "rect", "exp", "response", "bs", "us", "repl", "out", "RES", "usr", "ro", "ms", "ins", "hash", "gr", "result", "here", "rek", "resp", "ret", "rel", "ps", "j", "helps", "pers", "sol", "der", "rx", "rez", "pres", "rest", "map", "crit", "rm", "proc", "ber", "sys", "rem", "results", "os", "mem", "fr", "respons", "pas", "ress", "r", "we", "rex", "req", "expr", "red", "js", "reset", "cons", "Res", "vol", "err", "stock", "reg", "obj", "init", "rs", "resh", "rss"], "list_letters": ["listdletter", "LIST_ants", "LIST_files", "LIST_letters", "listenmails", "list_ants", "listlistlines", "listenletters", "LISTptletters", "listdlists", "listenletter", "list_lines", "list_files", "listlistmails", " list_units", "listptletters", "listenlists", "listptmails", "st_letters", "listingmails", "listingants", " list_mails", "listptants", "list_letter", "listingletters", "st_letter", "list_mails", "listingfiles", "LISTptants", "LISTptmails", "st_lists", "LISTptfiles", " list_lines", "list_units", "LIST_mails", "listlistletters", "listdletters", "list_lists", "listdmails", "st_mails", "listptfiles", "listlistunits"], "count_letter": ["count___card", "amount_letter", "count4pattern", "count32parent", " count_char", "sum_pattern", "count_pattern", "count32char", "countobjcheck", "countPropattern", " count_type", "countProletter", "count_parent", "count5type", " count_parent", "amount_card", " count_check", "count32letter", "count8count", "countProstar", "sum_letters", "countProletters", "count_word", "count_card", "count___alpha", "count_count", "count5check", "count_type", "count5letter", "count4letter", "count_letters", "countablealpha", "count8letter", "count4letters", "sum_star", "countobjletter", "countablecharacter", "countobjtype", " count_count", "count_star", "Count_list", "count___letter", "amount_character", "count8char", "count_char", "Count_char", "count_list", "count8parent", "countablecard", "count_check", "count_alpha", "Count_word", "Count_letter", "amount_alpha", "count4star", "sum_letter", "count32count", "countableletter", "count___character", "count_character"], "i": ["ji", "oi", "exp", "g", "ei", "json", "us", "out", "ai", "multi", "x", "ims", "uri", "im", "iy", "sequence", "o", "print", "iri", "is", "ii", "to", "u", "iu", "ex", "me", "ti", "iter", "hi", "client", "li", "it", "ini", "get", "\u0438", "err", "init", "gi", "ind", "cgi", "phi", "ri", "point", "in", "ui", "info", "ij", "pi", "io", "ik", "ix", "di", "ity", "index", "my", "history", "m", "chain", "series", "id", "I", "si", "ki", "a", "qi", "zi", "j", "ion", "ic", "q", "y", "mi", "iq", "cli", "ci", "slice", "ni", "ie", "bi", "sim", "xi", "ip"], "c": ["con", "dc", "conv", "cd", "ec", "b", "cu", "m", "circle", "cont", "cs", "chain", "rc", "current", "cur", "co", "z", "fc", "C", "const", "lc", "l", "cr", "v", "ct", "ca", "abc", "h", "tc", "ce", "cf", "uc", "ac", "cp", "unc", "n", "k", "f", "cos", "cat", "t", "cache"], "most_count": ["most_command", "largest_Count", "mostThecounter", "most_conn", "mostCountconn", "mostjcall", "most2current", "mostlycall", "mostenscore", "full_state", "mostCountfilter", "largest_count", "mostlycommand", "Most_count", "mostlyscore", " mostCountconn", "mostfulhash", "mostlytemp", "mostThefilter", "most67now", "full_num", "mostlycount", " mostjcall", "linkedfullevel", "most68conn", "mostentotal", "most___count", " mostjcontent", "most_content", "most_Count", "most68counter", "mostptsearch", "most_hash", "mostfullevel", "mostencommand", " most_conn", "mostlyflag", "mostlystate", "mostlytotal", "largest_cache", "mostjcontent", "linked_html", "mostCountcounter", "most_call", "most___command", "mostCountcount", "most_current", "most2count", "mostfulcount", "mostptcount", "mostfulsearch", "mostfulhtml", "most67html", "linked_count", "fulllystate", " mostCountcounter", " mostCountfilter", "most_total", "full_count", "mostjcount", "Mostenscore", "mostfulcontent", "full_flag", " most_hash", "mostTheconn", "mostfulnow", "mostThecount", "most___total", "most_level", "most67level", "linked_now", "mostptcontent", "most_score", "Mostencount", "mostjtemp", " mostjtemp", "most_state", " most_filter", "most_cache", "mostlynum", "linkedfulcount", "fulllycount", "linkedfulnow", "Most_score", "most2Count", "fulllyflag", "Mostentotal", "fulllynum", " most_counter", "most_filter", "linkedfulhtml", "mostencount", "most___score", " most_temp", "mostlycontent", "most_search", "most_html", " most_search", " mostCountcount", "largest_current", "most2cache", " most_content", "most_num", "Most_total", "most_temp", "Mostencommand", "Most_command", "most68filter", "most_now", " mostjcount", "most67count", "most68count", "most_counter", "mostpthash", " most_call", "linked_level", "most_flag"]}}
{"code1": "package humaneval.buggy;\n\n/* Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions. */\n\npublic class CAR_RACE_COLLISION {\n    public static int car_race_collision(int n) {\n        return n;\n    }\n}\n", "substitutes": {"n": ["nv", "nan", "nu", "p", "mn", "m", "nl", "nt", "ln", " na", "en", " N", "dn", "ne", "l", "fn", "nb", "v", "cn", "ns", "rn", "nor", "c", "nm", " nan", "nn", "na", "N", "ni", "r", " ni", "i", "d", "sn", "t", "nr"]}}
{"code1": "package humaneval.buggy;\n\n/* remove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd' */\n\npublic class REMOVE_VOWELS {\n    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n", "substitutes": {"string": ["test", "data", "array", "char", "sword", "instance", "source", "group", "input", "strings", "ring", "pattern", "space", "list", "this", "word", "prefix", "value", "result", "type", "address", "name", "str", "content", "v", "object", "comment", "past", "password", "print", "sequence", "description", "text", "s", "network", "match"], "sb": ["sv", "bh", "eb", "ssl", "ub", "SB", "b", "sp", "bn", "wb", "sq", "lb", "sg", "bs", "bb", "zb", "sh", "BB", "si", "lp", "bis", "bd", "buff", "sa", "bc", "mb", "pb", "abb", "ob", "nb", "cb", "fb", "erb", "ib", "bt", "bj", "xb", "rb", "abs", "bp", "bf", "bg", "gb", "sf", "sth", "db", "kb"], "c": ["arc", "con", "u", "dc", "conv", "cd", "cu", "b", "can", "char", "sc", "cont", "cs", "chain", "anc", "cl", "vc", "ch", "rc", "cur", "co", "a", "fc", "C", "bc", "lc", "cmp", "xc", "l", "enc", "cr", "mc", "ar", "v", "ct", "ci", "abc", "h", "ce", "cf", "cin", "tc", "ac", "etc", "cache", "cm", "e", "i", "cp", "code", "unc", "col", "gc", "k", "f", "cod", "pc", "cc", "cat", "t", "err", "com"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * he Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n\n */\n\npublic class SPECIAL_FACTORIAL {\n    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n        for(long i = n; i >= 1; i--) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n}\n", "substitutes": {"n": ["nu", "mn", "p", "num", "m", "nat", "g", "nl", "nt", "ln", "z", "number", "l", "j", "nb", "gn", "q", "cn", "ll", "ns", "h", "nor", "nm", "c", "nn", "na", "N", "r", "np", "k", "d", "ng", "f", "sn", "t"], "fact_i": ["fact10o", "fact__ai", "turn_iu", "make67i", "work_si", "make67li", "work_ini", "fact00li", "make_i", "work_i", "fact10ini", "fact_n", "work10pi", "regular_o", "work10i", "fact_pi", "fact_iu", "fact10ai", "turn_i", "fact7i", "fact__iu", "fact67li", "fact_di", "fact10si", "fact__i", "fact7ai", "regular7iu", "work10si", "make67ori", "fact67ori", "regular7o", "fact_ini", "fact_ori", "make67n", "fact__o", "make_ori", "fact10i", "make_n", "fact_li", "fact00ori", "fact00n", "fact_xi", "turn_di", "regular7ai", "fact7o", "fact10iu", "fact10pi", "regular7i", "fact_o", "regular_i", "work10ini", "fact_ai", "fact00i", "fact7iu", "fact_si", "turn_xi", "make_li", "regular_ai", "fact67i", "work_pi", "regular_iu", "fact67n"], "special_fact": [" special_mod", " special_mix", "special68fact", "special_cond", "special___mix", "special___act", "special68act", "special_act", "special_fac", "special___fact", "partial_act", "partial_cond", " special_man", " special_act", "special_man", "special_mix", "partial_fact", "special68mod", "special_fe", " special_fe", "special___fe", "special68man", "special_mod", "partial_fac"], "i": ["u", "ji", "phi", "ri", "asi", "oi", "m", "iu", "in", "ui", "yi", "info", "ti", "hi", "ai", "I", "si", "ki", "pi", "li", "it", "multi", "z", "io", "qi", "fi", "zi", "ani", "l", "ix", "di", "ic", "v", "mi", "mu", "im", "ci", "cli", "ini", "ip", "\u0438", "ni", "o", "is", "bi", "ii", "f", "sim", "xi", "t", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.Arrays;\n\n/* Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0] */\n\npublic class SORT_ARRAY {\n    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = array[i];\n            }\n            return array;\n        }\n    }\n}\n", "substitutes": {"array": ["arrow", "test", "analysis", "stack", "expression", "repeat", "query", "value", "hash", "now", "library", "ray", "all", "random", "our", "buffer", "any", "form", "string", "replace", "Array", "sequence", "empty", "file", "message", "data", "vector", "attribute", "integer", "sh", "found", "false", "number", "address", "field", "table", "equality", "storage", "raw", "v", "system", "arr", "say", "force", "window", "area", "database", "search", "at", "order", "app", "function", "angle", "answer", "angular", "air", "dirty", "element", "other", "word", "this", "null", "view", "only", "grid", "index", "the", "save", "shape", "section", "my", "queue", "trace", "sample", "history", "archive", "instance", "pair", "list", "a", "result", "error", "format", "ar", "map", "memory", "batch", "range", "record", "audio", "image", "component", "collection", "row", "time"], "i": ["ind", "u", "ji", "phi", "ri", "asi", "p", "in", "m", "iu", "ui", "chain", "us", "me", "id", "hi", "out", "ti", "ai", "I", "si", "ij", "li", "pi", "multi", "x", "a", "it", "qi", "io", "one", "zi", "j", "ims", "key", "di", "ix", "v", "ic", "uri", "y", "q", "mi", "im", "cli", "ci", "iq", "h", "index", "c", "ini", "batch", "at", "is", "bi", "n", "ii", "sim", "xi", "ip", "init", "gi"], "length": ["history", "ength", "expected", "Length", "php", "pad", "total", "append", "volume", "balance", "pieces", "ENGTH", "amount", "padding", "height", "integer", "product", "limit", "distance", "position", "len", "loc", "cost", "always", "priority", "count", "now", "number", "display", "buffer", "table", "maximum", "offset", "depth", "form", "level", "path", "default", "power", "present", "operation", "duration", "replace", "shape", "section", "database", "title", "runtime", "reading", "sequence", "print", "minimum", "text", "factor", "component", "collection", "build", "trace", "prototype", "translation", "future", "deep", "capacity", "time"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n */\n\npublic class DIGITS {\n    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n        while(n >= 0) {\n            int digit = n * 10;\n            if(digit % 2 == 0) {\n                product /= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "p", "b", "num", "no", "m", "g", "net", "out", "nt", "ln", "a", "z", "en", "x", "count", "number", "dn", "ne", "l", "j", "fn", "nb", "on", "v", "gn", "q", "cn", "next", "ns", "nor", "c", "h", "nc", "nn", "go", "na", "N", "node", "r", "np", "i", "nd", "k", "d", "ng", "norm", "sn", "size", "t", "an"], "product": ["part", "process", "division", "p", "sum", "total", "processor", "relation", "integer", "id", "length", "mult", "position", "spec", "current", "cart", "rod", "prefix", "domain", "value", "count", "products", "number", "result", "band", "per", "dot", "power", "standard", "multipl", "operation", "Product", "production", "feature", "basic", "r", "print", "or", "common", "operator", "factor", "component", "d", "prototype", "quant", "command", "project", "front", " prod"], "odd_count": ["oddnesscache", "odd_nt", "oddtownCount", "oddtowncurrent", " odd_counter", "oddnesscloud", "odd_cloud", " odd_child", " odd_nt", "odditycounter", "oddlingcount", "oddnesscount", "odd_counter", "oddtownnt", "oddlingnt", "odd_current", "even_cache", "odd_Count", "odditychild", "odd_cache", "oddtowncount", "oddlingcurrent", "even_Count", " odd_current", "odd_child", "oddnessCount", " odd_Count", "oddlingCount", "even_count", "even_cloud", "oddityCount", "odditycount"], "digit": ["part", "adder", "tag", "num", "sum", "total", "char", "character", "option", "inc", "integer", "prime", "ln", "term", "word", "hour", "number", "unsigned", "upper", "unit", "format", "div", "check", "event", "piece", "ord", "dot", "dig", "uint", "letter", "feature", "bin", "factor", "dat", "d", "bit", "member", "alpha", "hex", "step", "dec"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FILTER_BY_SUBSTRING {\n    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            result.add(string);\n        }\n        return result;\n    }\n}\n", "substitutes": {"strings": ["sheets", "ites", "ints", "scripts", "services", "pieces", "years", "workers", "sites", "ies", "series", "objects", "states", "sels", "names", "chains", "words", "sections", "idents", "prints", "ants", "values", "pins", "issues", "ties", "vals", "rings", "results", "styles", "qs", "parts", "sts", "seconds", "ings", "s", "terms", "items", "users", "gs", "units", "lists", "lines", "ses", "tags"], "substring": ["subset", " substr", "Subset", " subset", " subspace", "Substr", " subtset", "Substring", "substr", "Subspace", " subtstring", "subspace", " subtstr", " subtspace"], "result": ["set", "test", "continue", "process", "data", "response", "valid", "relation", "success", "output", "end", "goal", "product", "same", "current", "cur", "pair", "list", "other", "collect", "buffer", "folder", "Result", "join", "created", "all", "table", "ret", "real", "complete", "reported", "tmp", "next", "default", "temp", "memory", "cert", "true", "work", "primary", "report", "results", "comment", "search", "sequence", "print", "collection", "mate", "trace", "make", "match", "message", "black", "answer"], "string": ["data", " match", "p", " object", " resource", "char", "source", " source", "chain", "relation", "ring", "integer", "escape", "space", "attribute", " sequence", "element", "pair", "word", "value", "join", "name", "str", "entry", "st", "service", "complete", "reference", "parse", "sql", "language", "feature", "section", "comment", "e", "password", "sequence", "s", "component", "ident", "sample", " sample", "row", " row", "translation", "file", "tag"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n/*\n * In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n */\n\npublic class SORT_ARRAY_BINARY {\n   public static int number_ones(int n) {\n      if(n < 0) n *= -1;\n      int count = 0;\n      while(n > 0) {\n         count += n & 1;\n         n >>= 1;\n      }\n      return count;\n   }\n\n   public static ArrayList<Integer> sort_array_binary(ArrayList<Integer> arr) {\n      Collections.sort(arr, new Comparator<Integer>() {\n         @Override\n         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n               if(o1 == o2) return 1;\n               if(o1 < o2) return 0;\n               if(o1 > o2) return -1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n      });\n      return arr;\n   }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "p", "b", "num", "note", "m", "g", "nl", "net", "nt", "ln", "it", "en", "z", "a", "x", "number", " N", "dn", "ne", "l", "j", "name", "nb", "on", "v", "y", "w", "cn", "ns", "h", "c", "nm", "window", "nc", "nn", "na", " num", "N", "ac", "np", "i", "o", "span", "s", "non", "d", " ng", "ng", "norm", "sn", "size", "tn", "t", "nr"], "count": ["ind", "cond", "continue", "p", "acc", "num", "total", "sum", "counter", "hold", "cont", "amount", "length", "found", "nt", "current", "z", "value", "now", "number", "result", "Count", "nb", "content", "child", "last", "ct", "next", "c", "index", "nn", "coll", "N", "ount", "i", "d", "find", "size", "t", "conf", "start"], "arr": ["data", "array", "stack", "dr", "sort", "out", "rr", "nt", "cur", "elt", "aaa", "list", "buf", "ij", "this", "null", "dict", "gr", "result", "all", "seq", "enc", "j", "resp", "l", "ar", "img", "agg", "map", "ll", "reports", "coll", "pl", "lists", "br", "fr", "r", "ARR", "req", "Array", "parts", "s", "dat", "js", "compl", "blocks", "order", "db", "empty", "attr", "err", "bl", "obj", "rs"], "o1": [" o101", "os101", "oa61", " o01", "ho101", "vo01", "po001", "go6", "voasso", "bo1", "os61", "mo61", "oasso", "poName", " o61", "oa1", "ho61", "mo1", "o01", "os01", "oa101", "po01", "ao1", "go61", "os1", "mo6", "ho41", "ko1", "vo1", "o6", "boName", "po1", "o61", "ao61", "ho1", "po81", "bo81", "bo001", "oi1", "os81", "ao81", "go01", "ko41", "ko61", "mo01", "o41", "o001", "o101", " o81", "os6", "o81", "oa41", "ko101", "go1", "oName", "vo2", "poasso", "oi81", " oasso", "oiName", "po2", "ao101", "oi001"], "o2": ["autolet", "auto2", "e256", "elet", "oB", "e0", " o64", "oa2", "otlet", "oa42", "eB", "oalet", "h0", "e22", "h96", " o102", "e96", "o42", "o102", "h1", "oa1", "oo1", "oo64", "olet", " oB", "o96", " o42", "o64", "oo2", " o256", "o22", "ot102", "oa96", "e102", " o22", "po1", "ot1", "auto1", "ot2", "oa0", "e64", "h2", "e2", "o0", "oo256", "poB", "o256", " olet", "po22", "auto42", "e1", "po2"], "num_ones_o1": ["num_ones___o001", "num_ones_y1", "num_ones_one001", "num_ones_a2", "num_ones_p7", "num_ones_a7", "num_ones_oOnce", "num_ones_jix", "num_ones_one1", "num_ones_yix", "num_ones_i7", "num_ones_bo7", "num_ones_j1", "num_ones_p001", "num_ones_pOnce", "num_ones___bo001", "num_ones_bo1", "num_ones_o7", "num_ones_i1", "num_ones_j2", "num_ones___o7", "num_ones___bo1", "num_ones_ioup", "num_ones_p1", "num_ones_a1", "num_ones_i2", "num_ones_io7", "num_ones_bo001", "num_ones_y2", "num_ones___oOnce", "num_ones_io1", "num_ones_oneOnce", "num_ones_aup", "num_ones___o1", "num_ones___bo7", "num_ones_oix", "num_ones_iix", "num_ones_one7", "num_ones___boOnce", "num_ones_boOnce", "num_ones_oup", "num_ones_io2", "num_ones_o001", "num_ones_iup"], "num_ones_o2": ["num_ones_u1", "num_ones_a2", "num_ones_a4", "num_ones_u2", "num_ones_e102", "num_ones_o102", "num_ones_or02", "num_ones2o1", "num_ones2ualt", "num_ones_o0", "num_ones2u1", "num_ones_s02", "num_ones_bo1", "num_ones_o4", "num_ones_e1", "num_ones_s2", "num_ones_e2", "num_ones_i1", "num_ones2o2", "num_ones_n2", "num_ones2o0", "num_ones_bo2", "num_ones_u0", "num_ones_ualt", "num_ones2oalt", "num_ones_a1", "num_ones_or2", "num_ones_a102", "num_ones_bo0", "num_ones_n0", "num_ones_or4", "num_ones2u0", "num_ones_i2", "num_ones_nalt", "num_ones_s4", "num_ones2u2", "num_ones_e4", "num_ones_boalt", "num_ones_i02", "num_ones_i102", "num_ones_o02", "num_ones_i4", "num_ones_n1", "num_ones_oalt"]}}
{"code1": "package humaneval.buggy;\n\npublic class RESCALE_TO_UNIT {\n    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n            else if (numbers[i] < min) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nats", "namesachers", "noteappers", "commnotations", "nifiers", "numumbered", "dumer", "nuumbers", " nulas", "nums", "netists", "nulas", "nanges", "nuures", "nurances", "noms", "noteumbers", "nswers", "snumbers", "nuores", "netulas", " nabases", " nnotations", "unnnotations", "sequators", "snappers", " nodes", "lodes", " nists", "nures", " nures", "unnswers", "dumbers", " numbered", "neurances", "gnores", "nodes", " nappers", "dodes", "anators", " nistics", "ananges", "oodes", "numumbers", "sequanges", "unnumbers", "nistics", "formators", " nachers", "nats", "nowers", "oumbers", " nights", "unnowers", "numer", "nores", "namesifiers", "commumbers", "neodes", "sequumbers", "formanges", "ooms", " nores", "gnumbers", "lumbers", " numer", "sequifiers", "commswers", "nabases", "lurances", "numbered", "formifiers", " nowers", "nators", "formumbers", "netumbers", "numists", "lums", "oumer", "numights", " nurances", "numabases", "netights", "numulas", "gnats", " noms", "commowers", "numistics", "nights", " nums", "neumbers", "nachers", "snabases", "neums", "sequachers", "nuats", "sequistics", "nists", "doms", "numappers", "gnures", "noteistics", " nswers", "namesistics", "anifiers", "nnotations", "nappers", "noteumbered", "numowers", "namesumbers", " nifiers", "snowers", "anumbers"], "min": ["from", "mini", "lt", "step", "part", "margin", "mn", "partial", "m", "mon", "method", "mel", "mean", "me", "dist", "sort", "MIN", "current", "none", "Min", "mp", "value", "diff", "begin", "mod", "lower", "required", "label", "mm", "sam", "st", "sol", "amin", "mi", "im", "pre", "middle", "temp", "bot", "lock", "inner", "left", "mins", "Minimum", "mem", "initial", "range", "sin", "minimum", "first", "lo", "local", "span", "just", "south", "mit", "sample", "small", "delay", "del", "minute", "low", "init", "start"], "max": ["cross", "m", "sum", "total", "can", "height", "chain", "Max", "parent", "end", "ex", "limit", "up", "length", "out", "load", "top", "mx", "co", "null", "x", "upper", "mod", "all", "MAX", "view", "maximum", "ax", "v", "last", "high", "rest", "map", "full", "med", "h", "mad", "right", "master", "auto", "cache", "huge", "fr", "range", "scale", "r", "n", "k", "cos", "size", "t", "root", "ma", "vol", "step", "res"], "i": ["ind", "ji", "u", "set", "phi", "ri", "asi", "oi", "m", "iu", "gu", "ui", "g", "ei", "chain", "json", "me", "us", "info", "ogi", "ski", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "li", "multi", "x", "io", "it", "qi", "ami", "ik", "zi", "j", "ix", "uri", "di", "ic", "q", "y", "mi", "im", "iq", "ci", "cli", "ity", "c", "ini", "batch", "iy", "sequence", "o", "iri", "ie", "is", "bi", "ii", "f", "sim", "xi", "ip", "err", "init", "gi"], "result": ["test", "continue", "data", "array", "total", "request", "create", "response", "success", "relation", "output", "integer", "goal", "product", "current", "cur", "pair", "term", "list", "currency", "other", "buffer", "value", "Result", "all", "table", "ret", "complete", "tmp", "next", "memory", "save", "feature", "true", "report", "search", "comment", "results", "r", "print", "sequence", "trace", "match", "message", "res", "back", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PARSE_NESTED_PARENS {\n    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"paren_string": ["braceamestring", "parenedseries", "paren_series", "paren_site", "aren_string", "parenameseries", "aren_series", "braceamering", "parenedstring", "paren_list", "parenamesite", "parenationlist", "parenationseries", "aren_source", "braceamesite", "parenamering", "parenedring", "brace_string", "parenedsite", "paren64series", "parenationstring", "parenationsource", "aren_list", "paren_source", "brace_site", "paren_ring", "braceameseries", "parenamestring", "brace_series", "paren64string", "paren64ring", "paren64site", "brace_ring"], "paren_groups": ["author67group", "author_groups", "paren_blocks", "paren_objects", "parensgroups", "paren67group", "parensblocks", "aren_points", "author_objects", "paren67groups", "parensnames", "paren_points", "author67objects", "paren67blocks", "aren_groups", "paren67objects", "paren67points", "author_blocks", "aren_group", "parensgroup", "paren_names", "author_group", "author67blocks", "aren_names", "author67groups", "parensobjects", "paren67names", "parenspoints"], "result": ["set", "test", "continue", "process", "data", "total", "create", "response", "valid", "relation", "success", "output", "integer", "goal", "current", "cur", "pair", "list", "false", "currency", "collect", "now", "lower", "Result", "join", "diff", "created", "table", "ret", "all", "complete", "consider", "next", "memory", "true", "feature", "report", "search", "results", "sequence", "date", "bridge", "mate", "profile", "meg", "make", "match", "message", "res", "here", "answer"], "paren_group": ["pen_group", "parenletgroup", "paren2block", "paren2string", "parenitygroups", "pareninggroup", "aren_string", "pen_number", "pareningdata", "paren_str", "pen_data", "paren_block", "parenitynumber", "paren2group", "parenitydata", "parenletblock", "pareningnumber", "paren_number", "pareninggroups", "pen_groups", "paren_data", "aren_group", "parenletstring", "aren_str", "parenletstr", "paren2str", "aren_block", "parenitygroup"], "depth": ["max", "history", "Depth", "details", "stack", "total", "exp", "height", "directory", "ptr", "dr", "where", "goal", "debug", "length", "distance", "focus", "dirty", "always", "driver", "count", "value", "priority", "ths", "context", "rank", "level", "window", "index", "tree", "shift", "feature", "cache", "search", "node", "scale", "sequence", "module", "core", "device", "d", "purpose", "trace", "trust", "dq", "root", "deep", "repair", "scope", "push", "time", "DEP"], "max_depth": ["maxfuldepth", " max_trace", "maximum_status", "maxenresult", "max___trace", "maxensize", " max_window", "maximum_level", " max_dist", "max___depth", "max__dist", "maximumenchild", "max_size", "maximumensize", "maxendepth", "max2depth", "maximum_result", "maximum_size", "max_level", "maxenchild", "max2level", "maxenlevel", "max12depth", "max2size", "maximum_deep", "max_dist", "max_deep", "max2tree", "maxfullevel", "max_tree", "maxfulchild", "max__trace", "maxenstatus", "max2window", "max2child", "max_status", "max12tree", "max_result", "max12level", "maximum_child", "max_child", " max_tree", "maximum_depth", "max___deep", " max_deep", "maximumenlevel", "max12window", "max___dist", "max__depth", "maxendeep", "max__deep", " max_level", "max_window", "maxfulsize", "max_trace", "maximumendepth"], "c": ["arc", "u", "dc", "conv", "p", "cu", "m", "char", "sc", "cs", "g", "chain", "vc", "a", "bc", "C", "x", "lc", "xc", "l", "v", "ic", "ct", "h", "tc", "ce", "uc", "nc", "ac", "coll", "r", "i", "cp", "code", "unc", "col", "n", "k", "cos", "cap", "f", "pc", "cc", "cat", "com"]}}
{"code1": "package humaneval.buggy;\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\n\npublic class CLOSEST_INTEGER {\n    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n        if (value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"value": ["set", "test", "reason", "reverse", "json", "expression", "input", "output", "length", "always", "state", "now", "buffer", "any", "name", "serial", "content", "string", "title", "sequence", "code", "local", "python", "file", "message", "update", "data", "val", "vector", "attribute", "position", "variable", "remote", "number", "type", "address", "label", "property", "field", "raw", "values", "v", "media", "get", "true", "version", "http", "search", "summary", "date", "text", "size", "function", "VALUE", "max", "server", "subject", "source", "info", "word", "prefix", "null", "widget", "view", "template", "key", "entry", "tree", "block", "report", "comment", "initial", "item", "trace", "sample", "root", "document", "history", "software", "total", "current", "ue", "hello", "list", "domain", "journal", "Value", "format", "sql", "example", "range", "description", "image", "rule", "status"], "num": ["con", "data", "conv", "nu", "coord", "val", "cu", "mon", "sum", "no", "m", "dim", "valid", "note", "NUM", "good", "cal", "nam", "net", "out", "Num", "um", "en", "multi", "x", "one", "number", "snap", "cmp", "div", "nb", "Number", "ord", "gen", "temp", "nm", "block", "na", "rem", "node", "np", "cum", "alph", "n", "nom", "non", "norm", "t", "msg", "th", "obj", "orig", "dec"], "result": ["set", "test", "continue", "data", "coord", "val", "total", "ful", "success", "relation", "output", "valid", "integer", "goal", "product", "cur", "mark", "term", "currency", "diff", "Result", "number", "cmp", "region", "rel", "ret", "done", "complete", "next", "proc", "cert", "duration", "feature", "true", "primary", "fac", "results", "know", "report", "br", "ult", "sequence", "description", "r", "date", "component", "cup", "global", "mate", "trace", "root", "cache", "make", "match", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ROLLING_MAX {\n    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n            running_max = Math.max(running_max, n);\n            result.add(running_max);\n        }\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nums", "neumbers", "nures", "lumer", " nures", "dumbers", "dappers", "neures", "enumeric", "neums", " nappers", " numeric", "lumbers", "dumer", "enumbers", " numer", "nums", "enumer", "enappers", "nappers", "numeric", "dumeric", "lums", "lures", "neumer", "numer"], "result": ["set", "continue", "data", "run", "vector", "total", "create", "response", "valid", "relation", "success", "output", "see", "group", "goal", "product", "found", "cur", "current", "pair", "list", "buffer", "collect", "folder", "Result", "join", "diff", "error", "table", "ret", "all", "complete", "follow", "tmp", "consider", "next", "power", "cert", "block", "replace", "work", "primary", "report", "results", "comment", "search", "r", "perm", "first", "date", "collection", "mate", "trace", "match", "message", "answer"], "running_max": [" Running_maximum", "running64ax", "running_step", "loading___max", "running_key", "running2step", "running5maximum", "running___key", " Running_max", "running___best", "running2global", "running_global", "rolled_best", "running64maximum", "runningingnext", "running67step", "rolledingmax", "running_min", "running_maximum", "runningingbest", "loading___key", "running___max", "unning67ax", "running___min", "loading_min", "running67global", "unning67step", "running2ax", "running2max", "running_best", "runningingmax", "rolled_next", "runningingmaximum", "unning_ax", "loading_max", "rolledingbest", "rolled_max", "rolledingmaximum", "unning_step", "running67ax", "unning_max", "running5max", "running64min", "loading___best", "running64max", "rolledingnext", "running_next", "loading___min", "rolled_maximum", "running67max", "running5next", "running5best", "unning67max", "running_ax", "unning67global", "loading_key", "unning_global", " Running_min", " Running_ax", "loading_best"], "n": ["nu", "mn", "b", "num", "p", "m", "nt", "ln", "z", "number", "dn", "ne", "l", "j", "fn", "nb", "name", "v", "gn", "y", "cn", "ll", "next", "ns", "c", "nm", "nc", "nn", "na", "N", "node", "r", "e", "o", "i", "k", "d", "ng", "sn", "t", "nr"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\n */\n\npublic class IS_EQUAL_TO_SUM_EVEN {\n    public static boolean is_equal_to_sum_even(int n) {\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "b", "num", "bn", "p", "m", "g", "nt", "ln", "a", "z", "x", "count", "number", "dn", "ne", "l", "j", "nb", "v", "gn", "q", "cn", "ll", "ns", "h", "c", "nm", "nn", "na", "N", "i", "o", "np", "k", "d", "ng", "f", "sn", "tn", "t"]}}
{"code1": "package humaneval.buggy;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n/* Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1 */\n\npublic class TRIANGLE_AREA_2 {\n    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        double result = Math.pow(s, 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n}\n", "substitutes": {"a": ["aa", "ga", "da", "p", "au", "m", "g", "aj", " at", "ai", "aaa", "x", "sa", "al", "ea", "ach", "l", "am", "ax", "ba", "ar", "ta", "ad", "ca", "la", "oa", "h", "ap", "ac", "A", "na", "ia", "e", "r", "i", "at", "as", "d", "aq", "f", "ra", "alpha", "ae", "t", "ma", "ab", "ao", "ak", "an"], "b": ["u", "eb", "ub", "p", "wb", "m", "bb", "g", "sb", "bs", "ch", "B", "z", "bc", "by", "l", "ob", "j", "fb", "cb", "ba", "nb", "abb", "v", "y", "be", "ib", "rb", "ca", "h", "br", "bf", "e", "r", "i", "o", "gb", "bi", "n", "d", "f", "db", "cc", "t", "ab", "bar", "back"], "c": ["con", "u", "cut", "dc", "ec", "cd", "p", "cu", "m", "sc", "g", "cs", "cl", "rc", "ch", "co", "z", "bc", "C", "fc", "x", "lc", "cr", "l", "mc", "cb", "ic", "v", "q", "ct", "ci", "ca", "cv", "h", "ce", "tc", "cin", "cf", "ac", "cm", "e", "r", "cp", "col", "n", "d", "f", "cc", "t", "com", "cor"], "s": ["sv", "p", "sp", "ls", "details", "m", "cs", "g", "sb", "space", "sat", "spec", "si", "sd", "j", "sol", "su", "v", "sql", "h", "string", "r", "i", "S", "sf", "span", "simple", "n", "js", "d", "south", "gs", "single", "t", "rs", "ss"], "result": ["test", "division", "sum", "total", "valid", "success", "relation", "sen", "product", "current", "RESULTS", "value", "Result", "number", "ret", "su", "next", "style", "true", "search", "results", "report", "rendered", "r", "description", "score", "first", "core", "date", "roy", "root", "res"], "bd": ["da", "cd", "dd", "pad", "bn", "od", "bb", "bs", "sb", "BD", "dm", "des", "md", "ond", "bind", "bis", "edd", "rod", "ld", "bc", "sd", "vd", "hd", "dn", "td", "mb", "nb", "ba", "cb", "deb", "di", "done", "DD", "led", " BD", "be", "bt", "ad", "dk", "fd", "dh", "de", "gd", "pd", "bf", "bet", "br", "rd", "gb", "d", "ds", "db", "kb", "DB", "ded"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n */\n\npublic class MAX_FILL {\n    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n            for(int j = 0; j < grid[j].length; j++) {\n                row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n}\n", "substitutes": {"grid": ["idge", "card", "data", "league", "coord", "array", "stack", " grids", "dim", "filter", "graph", "chain", "link", "raid", "file", "wire", "bag", "client", "list", "cart", "prefix", "fc", "domain", "now", "Grid", "gray", "query", "addr", "lay", "ace", "table", "gate", "util", "band", "ix", "mat", "ay", "lag", "rank", "lat", "slice", "window", "block", "batch", "work", "tile", "rid", "layer", "queue", "rule", "db", "func", "affected", "row", "tif", "dq", "stock", "reg", "back"], "bucket_capacity": ["bucket_volume", "buckets_purpose", "buckets_size", "bucketing_volume", "bucketablecapacity", "bucket_purpose", "bucketing_sequence", "buckets_length", "bucketing_size", "bucket_sequence", "bucketing_length", "bucketablepurpose", "bucketablesize", "bucketing_capacity", "bucket_size", "bucket_length", "bucketablelength", "buckets_capacity"], "result": ["zero", "test", "expected", "continue", "p", "vector", "total", "sum", "success", "relation", "output", "integer", "goal", "figure", "product", "found", "current", "mark", "currency", "value", "now", "Result", "number", "ret", "done", "complete", "default", "ULT", "disk", "power", "memory", "duration", "true", "capacity", "results", "know", "database", "comment", "r", "report", "score", "date", "purpose", "transform", "mate", "trace", "row", "make", "match", "message", "res", "answer"], "i": ["ind", "u", "ji", "phi", "ri", "ori", "in", "m", "iu", "ui", "yi", "us", "hi", "ti", "ai", "I", "ki", "si", "ij", "li", "pi", "ami", "it", "io", "multi", "qi", "zi", "ix", "ims", "di", "ic", "q", "mi", "im", "iq", "ci", "wi", "iti", "inner", "index", "ini", "ia", "my", "e", "ie", "o", "is", "bi", "ii", "f", "sim", "xi", "ip", "init", "gi"], "row_capacity": ["row_sequence", "row_length", "Row_capacity", "row64capacity", "row_history", "row_power", "Row_density", " row_history", "line_capacity", "row23generation", "row23strength", "row64strength", "Row_acity", "line64capacity", "line64position", "row_strength", "row23capacity", "row_position", "row_acity", "line64strength", "line_position", "row_density", "row23position", "line_strength", "line64generation", "row64position", " row_sequence", "row_generation", "row64generation", " row_power", "line_generation", "Row_length"], "j": ["ji", "jit", "jas", "b", "m", "uj", "json", "g", "jj", "aj", "out", "ja", "ij", "other", "it", "z", "jl", "jo", "by", "J", "oj", "l", "jump", "jet", "str", "v", "q", "y", "pt", "bj", "im", "pr", "bot", "kj", "ge", "zone", "br", "job", "fr", "o", "son", "jp", "n", "js", "k", "ph", "s", "jc", "dj", "err", "jac", "je", "obj", "jack"]}}
{"code1": "package humaneval.buggy;\n\n/* Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0  \n\nIf the input list is empty, return 0. */\n\npublic class DOUBLE_THE_DIFFERENCE {\n    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n                    result += d_int;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"lst": ["dlST", " lST", "lnst", "lnth", "lnsts", "lST", "dllist", " lth", "dlth", "lsth", "llist", " lsts", "slth", "lth", "sllist", "lsST", "lnlist", "dlst", "slst", "lsst", " llist", "lsts", "lslist", "slsts"], "result": ["zero", " resulted", "test", "expected", "vector", "total", "sum", "success", "relation", "params", "output", "integer", "figure", "goal", "product", "found", "current", "cur", "term", "change", " Result", "currency", "other", "value", "diff", "Result", " resulting", "done", "complete", "power", "ULT", "duration", "feature", "start", "results", "know", "ult", "sequence", "r", "date", "purpose", "mate", "trace", "meg", "mut", "command", "match", "message", "answer"], "d": ["ind", "da", "cd", "dd", "p", "b", "m", "od", "dr", "g", "dl", "md", "D", "dt", "sd", "ld", "x", "diff", "z", "it", "dn", "l", "j", "di", "v", "w", "q", "ad", "dev", "ord", "h", "c", "dh", "ed", "de", "odd", "pd", "r", "e", "o", "i", "nd", "n", "s", "k", "ds", "f", "db", "dx", "del", "t", "du", "ud"], "d_int": ["d2int", " d_out", "d2quick", " d_imm", "d2next", " d_hex", "d_imm", "d_out", " d_float", "d_str", "d_next", "ds_int", "d_nt", "ds_quick", "d_id", "d_hex", " d_nt", "ds_next", "d_quick", "ds_uint", " d_id", "d_float", " d_str", "d_uint", "d2uint"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class MOVE_ONE_BALL {\n    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n        int min_value = sorted_arr.get(sorted_arr.size() - 1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "substitutes": {"arr": ["arg", "data", "arp", "vs", "array", "ev", "dr", "act", "urg", "repl", "alg", "rep", "iter", "rr", "cur", "elt", "aaa", "list", "buf", "wav", "dict", "gr", "all", "addr", "res", "rel", "enc", "resp", "str", "ar", "msg", "img", "agg", "pr", "iq", "rb", "ll", "tmp", "abc", "vals", "batch", "coll", "pl", "br", "fr", "r", "ARR", "req", "rar", "parts", "ack", "dat", "compl", "alt", "db", "app", "row", "ell", "attr", "wr", "err", "bl", "stock", "obj", "rs", "arb"], "sorted_arr": ["sorter_obj", "sorted_res", "sort_err", "sorter_data", "saved_list", "sort_list", "sort_all", "sorted____err", "sorted____obj", "sorted_gr", "sorted____rs", "saved_gr", "sorted____arr", "saved_var", "saved_arr", "sorted_obj", "sorted_list", "sorted____list", "sorted_var", "sort_arr", "sorter_grad", "sorted____grad", "sorted_ar", "sort_grad", "sorter_res", "sorted____str", "sort_dat", "sorted_all", "sorted_str", "sorted_rs", "sorter_arr", "sorted_data", "sorter_ar", "sorted_err", "sorted_grad", "sorted_dat", "sorter_str", "sort_rs"], "min_value": ["minute___val", "min_tag", "minute___tag", "mintenancekey", "min_unit", "mintenancevalue", "min___value", "minute___value", "minute_val", "minPvalue", "min_val", "min_key", "minPval", "min___val", "min_relation", "minPtag", " min_type", "min_type", "minute_value", "mintenancetype", "minute___unit", "min___tag", "mintenancerelation", "minute_tag", " min_relation", " min_key", "minPunit", "minute_unit", "min___unit"], "min_index": ["minimum_index", "minimum_success", "minxindex", "Min_Index", "min2index", "minimum___date", "int_location", "minxIndex", "minimum_value", "min___date", "int_ind", "Min_size", "minletlocation", "min2value", " min0max", "min0index", "min2date", "Min_ind", " min0offset", "min2success", "min_Index", " min_max", "min_offset", "Min_index", "minimum___index", " min0ind", " min0index", " min_offset", "minxind", "minletindex", "minimum___value", "min_location", "min_max", "min0ind", "min_image", "minletind", "min___success", "minxsize", " min_ind", "int_index", "min___value", "min_ind", "minimum_date", "minletimage", "min___index", "min0max", "minimum___success", "min_date", "min0offset", "int_image", "min_success", "min_size"], "i": ["ji", "p", "oi", "exp", "g", "ei", "us", "ogi", "ai", "multi", "ims", "uri", "mu", "im", "o", "is", "ii", "u", "base", "php", "ori", "iu", "ex", "er", "ti", "hi", "remote", "li", "it", "ms", "ami", "them", "by", "eric", "ini", "\u0438", "s", "init", "gi", "phi", "ri", "point", "ui", "info", "port", "ij", "pi", "io", "ik", "ix", "di", "ity", "c", "my", "ice", "m", "chain", "I", "si", "ki", "qi", "fi", "zi", "j", "ic", "q", "y", "mi", "cli", "ci", "batch", "e", "ie", "bi", "f", "sim", "xi", "ip"], "arr_after_move": ["arr_dir_moving", "arr_after_use", "arr_over_remove", "arr_after_update", "arr_after_moving", "arr_dir_update", "arr_afterzmoving", "arr_after_change", "arr_dir_get", "arr_after__leave", "arr_afterzupdate", "arr_after_leave", "arr_around_change", "arr_dir_move", "arr_after_get", "arr_for_update", "arr_after__remove", "arr_over_move", "arr_after__return", "arr_afterzmove", "arr_for_change", "arr_after__move", "arr_over_leave", "arr_around_save", "arr_around_use", "arr_after_remove", "arr_after_return", "arr_for_move", "arr_after_save", "arr_afterzget", "arr_over_return", "arr_around_move"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.HashMap;\n\n/*\n * Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n */\n\npublic class IS_SORTED {\n    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n            if(lst[i] <= lst[i + 1]) return false;\n        }\n        return true;\n    }\n}\n", "substitutes": {"lst": ["slnt", "flst", "tlsty", "liist", "Lgr", "lend", "glsty", "Lcl", "flsw", "lstd", " lset", "ltt", "glst", "lists", "dlgr", " lrest", "lgr", "flso", "olstro", "lstr", " lstd", "lrest", "tist", "fltt", " lnt", "llist", "latgr", "ellsts", "plst", "lstro", "tlsts", "lset", "Lnd", "llst", "ellst", "lipt", "sltt", "ulst", "slst", "lest", "flnt", "latstro", "plsts", "lsty", "latst", "lirest", "ulstd", "legr", "listr", "llsts", "tnd", "tlstro", "licl", "dlist", "Lst", "olsty", "glstro", "ellstro", "lsw", "llpt", " lstr", "ylstro", " lsts", " lcl", " lsw", "hlsts", "lcl", "ulsw", "flstd", "lsts", "olst", "dlnd", "hlset", " ltt", "leist", "lpt", "lnd", " lST", "tst", "ylst", "llset", "hlst", "lST", "tstr", "lestro", "list", "LST", "ulso", "llrest", " lpt", "lso", "dlst", "lnt", "liST", " lnd", "ylpt", "Lstr", "ylstr", " list", " lso", "ylgr", "hlist", "tlst", "plstro"], "count_num": ["count_sum", "count2num", "countmatnum", "count32num", "length_num", "count_mult", "count64num", "countmatNUM", "found_um", "found64dec", "countmathom", "count___num", "length_Num", "count2map", "count2Num", "status_num", "found_dec", "count3hom", "hold_sum", "count3num", "count_number", "length_map", "countmattotal", "length2map", "count3total", "length2Num", "count___desc", "max_num", "countdbdec", "count___sum", "statusmatNUM", "countdbtotal", "count64total", "count_um", "count_hom", "status_total", "statusmathom", "count64um", "count_multi", "statusmatnum", "status_NUM", "found_num", "count_NUM", "count32multi", "countdbnum", "found64num", "count_dec", "count___mult", "statusmattotal", "countdbum", "hold_num", "hold_mult", "count32number", "found64total", "found_total", "count_map", "max_number", "count_desc", "count_total", "count3NUM", "status_hom", "count64dec", "found64um", "max_multi", "length2num", "hold_desc", "count_Num"], "i": ["ji", "oi", "g", "ei", "us", "ies", "out", "ai", "multi", "mm", "uri", "mu", "im", "iy", "et", "o", "is", "ii", "to", "eu", "u", "base", "ori", "gu", "iu", "me", "er", "hi", "ti", "client", "remote", "li", "it", "ami", "by", "eric", "v", "ini", "\u0438", "err", "init", "gi", "phi", "ri", "point", "in", "ui", "info", "ij", "pi", "io", "ik", "ix", "di", "my", "m", "chain", "id", "I", "si", "ki", "qi", "zi", "j", "ic", "q", "y", "mi", "iq", "cli", "ci", "inner", "ia", "ie", "bi", "sim", "xi", "ip"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.Arrays;\n\n/* Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0 */\n\npublic class MEDIAN {\n    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n            return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        }\n    }\n}\n", "substitutes": {"list": ["set", "test", "LIST", "p", "array", "stack", "valid", "cont", "act", "json", "pkg", "out", "state", "ist", "all", "recomm", "name", "form", "ll", "sequence", "print", "code", "n", "detail", "lists", "lt", "data", "ls", "vector", "iter", "nt", "li", "table", "l", "v", "alist", "lat", "pre", "text", "alt", "single", "match", "source", "params", "info", "old", "word", "null", "dict", "st", "tmp", "the", "tree", "block", "left", "we", "queue", "history", "chain", "dl", "listed", "pair", "al", "result", "def", "str", "map", "batch", "rule", "collection", "config", "t", "del"]}}
{"code1": "package humaneval.buggy;\n\n/* This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126 */\n\npublic class SUM_SQUARES {\n    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n}\n", "substitutes": {"lst": [" lists", "Lsts", "klst", "klth", "Lists", "plists", "nlld", "llsty", "lth", "nlst", "lith", "lsst", "nlsty", "lists", "Lth", "llists", "aclth", "Llist", "slST", "lstr", "llstr", "lssts", "lld", "llso", "lsnd", "llist", "plst", "Lnd", "dLst", "llst", "lllist", "slst", " llist", "liso", "lsty", "plstr", "listr", "llld", "Lst", "dllist", "pllist", "dlstr", " lstab", "dLld", " lstr", " lsts", "slth", "klST", "lsts", "lnd", " lST", "dlists", "lST", "dLsty", " lth", "aclstab", "list", "listab", "liists", "LST", "slist", "lso", "aclst", "dlst", "liST", " lnd", "lsist", " list", " lso", "lstab"], "result": ["zero", "resource", "test", "reason", "expected", "continue", "p", "vector", "sum", "total", "response", "success", "relation", "ful", "output", "integer", "goal", "product", "debug", "found", "current", "pair", "mark", "work", "currency", "value", "join", "Result", "number", "region", "ret", "real", "done", "complete", "next", "memory", "cert", "duration", "true", "feature", "primary", "fac", "results", "know", "report", "master", "ult", "sequence", "description", "r", "we", "date", "component", "purpose", "global", "mate", "profile", "meg", "make", "command", "match", "message", "res", "front"], "i": ["ind", "u", "page", "phi", "ri", "point", "in", "m", "gu", "iu", "ui", "oi", "chain", "ei", "json", "us", "me", "id", "dim", "info", "hi", "ti", "ai", "I", "si", "ij", "list", "li", "pi", "a", "x", "multi", "it", "qi", "io", "ami", "zi", "l", "j", "ix", "uri", "di", "v", "ic", "q", "y", "mi", "im", "cli", "ci", "slice", "h", "index", "ini", "batch", "go", "my", "ie", "is", "bi", "ii", "k", "f", "item", "status", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n */\n\npublic class SPLIT_WORDS {\n    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n                if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n}\n", "substitutes": {"txt": ["test", "lt", "data", "filename", "sit", "ht", "csv", "xt", "cont", "act", "json", "input", "gt", " text", "bsp", "nt", "elt", "tf", "aaa", "prefix", "kt", "buff", "XT", "utt", "phrase", "name", "str", "printf", "ext", "tx", "pt", "rx", "tm", "bt", "tmp", "ct", "lat", "rb", "ns", "nm", "sys", "rt", "tg", "cmd", "TEXT", "joined", "fr", "print", "req", "pdf", "text", "n", "dat", "html", "tp", "tif", "plain", "typ", "ont", "tn", "t", "msg", "obj", "xp", "tt", "println"], "count": ["cast", "page", "call", "process", "num", "sum", "draw", "counter", "hold", "total", "amount", "length", "iter", "found", "nt", "thread", "list", "currency", "number", "all", "Count", "OUNT", "nb", "check", "child", "needed", "ct", "add", "next", "c", "index", "unique", "batch", "coll", "report", "th", "ount", "score", "core", "common", "span", "n", "mount", "flag", "find", "collection", "size", "cache", "make", "match", "message", "conf"], "i": ["ind", "u", "ji", "phi", "conv", "ri", "point", "ori", "oi", "m", "iu", "gu", "ui", "g", "ei", "json", "us", "id", "info", "hi", "ti", "ai", "I", "si", "ki", "ij", "ish", "pi", "li", "multi", "x", "a", "it", "qi", "any", "zi", "j", "ix", "uri", "di", "ic", "y", "mi", "im", "ci", "index", "ini", "go", "\u0438", "r", "print", "ie", "my", "bi", "ii", "sim", "xi", "ip", "init", "gi"], "curr": ["Currc", "chrc", "grrb", "Curre", "currb", "grrc", " curp", " curre", "chrb", "chre", " Curl", " currb", " curl", "grre", "Curl", "Currb", "Curp", " Curre", "grr", "currc", "curp", "curre", "chr", " Curp", " currc", " Curr", "Curr", "curl"], "result": ["test", "reason", "continue", "data", "vector", "total", "csv", "response", "success", "relation", "output", "params", "goal", "product", "cur", "current", "pair", "term", "currency", "other", "join", "Result", "table", "ret", "mask", "complete", "memory", "true", "report", "results", "comment", "r", "collection", "mate", "err", "root", "match", "message", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as 0.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n */\n\npublic class LARGEST_SMALLEST_INTEGERS {\n    public static int[] largest_smallest_integers(int[] lst) {\n        boolean negative = true, positive = true;\n        int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = false;\n                max_negative = Math.min(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n}\n", "substitutes": {"lst": ["flst", "lesrc", "mlsty", "lsrc", " lsrc", "elnd", " lstro", "lth", "ltt", " lrd", "littt", "mlstro", "Lts", "litST", "lts", "litsty", "litst", "lstr", "dlrd", "leth", "lwd", "mlST", "plst", "lstro", "ellst", "lbist", "lbst", "lest", "elrd", "lsty", "litstro", "Lst", "lrd", "flST", "dlstr", " lstr", "elst", "lbstr", "jlsp", "jlstro", "flsty", "dlnd", " ltt", "lbts", "elstr", "lnd", "ellth", "lST", "plsty", " lth", "ilstro", "list", "lsp", "pltt", "ilsp", "mlst", "dlst", "ellwd", "ilst", "flstro", " lsty", "lewd", " lnd", " lsp", "jlst", "Lstr", "ilsty", "ellsrc", " lts", " list", " lwd", "jlsty"], "max_negative": [" max__neg", "max_neg", "max__negative", "ax_positive", "min_neg", " max__negative", "max__export", "ax_minus", "max__neg", "min_required", "max00export", " max_export", " max_minus", "max_minus", "max_dirty", "max_required", "maxsminus", "max_dependent", "maxsnan", "max_nan", "maxsnegative", "min_dependent", "min_minus", "max00neg", "min_dirty", "max__minus", "ax_nan", "max_sensitive", "max00minus", " max__export", "max_positive", "min_negative", "max_exclusive", "ax_negative", "maxspositive", " max__minus", "max00negative", "min_sensitive", "max_export", "min_exclusive", " max_neg"], "min_positive": ["max_properties", "min___negative", "max_zero", "min_null", "min_primary", "minptprimary", "min_properties", "min_zero", "min_percent", "minptnegative", "min___positive", "min_restricted", "min08negative", "min08zero", "max_success", " min_restricted", " min_primary", "max_null", " min_negative", "min___status", "max_status", "min08positive", "min_success", "max_positive", "min_status", "min_negative", "max_percent", "minptrestricted", "min___percent", "min08null", "minptpositive"], "i": ["u", "ji", "set", "phi", "ri", "b", "point", "ori", "in", "m", "ui", "json", "ei", "us", "me", "id", "series", "info", "hi", "ti", "ski", "ai", "I", "si", "ki", "ij", "spec", "li", "pi", "a", "x", "multi", "io", "qi", "it", "ami", "zi", "ik", "l", "j", "ix", "uri", "di", "ic", "q", "y", "mi", "im", "sql", "ci", "cli", "slice", "c", "ini", "menu", "\u0438", "my", "sequence", "o", "ie", "print", "record", "bi", "n", "ii", "f", "sim", "xi", "ip", "init", "gi"], "negative": ["zero", "pretty", "nan", "delete", "tag", "dependent", "missing", " negatives", " deficient", "sufficient", "poor", "dirty", "sensitive", "restricted", " unwanted", "none", " negate", "variable", " tentative", " negatively", "pos", "null", "neg", "minus", "snap", "unsigned", "unit", "export", "biased", "great", "important", "increasing", "created", "sharp", "ative", "given", "crop", "signed", " destructive", "responsive", "outside", "bo", "exclusive", " derogatory", "production", "aggressive", "tiny", " preventive", "desc", "component", "empty", "dest", "natural", "beta", "majority", "neutral", " insignificant", "optional", " negativity", "ping"], "positive": ["nice", "zero", "pretty", "p", "plus", "valid", "active", "good", "apo", "sufficient", "position", "sensitive", "restricted", "pressure", "pi", "null", "flags", "biased", "admin", "increasing", "created", "unsigned", "ps", "great", "pleasant", "less", "sharp", "platform", "signed", "major", "responsive", "wordpress", "commercial", "percent", "pres", "enabled", "exclusive", "successful", " positively", "true", "production", "primary", "stats", "perfect", "inflammatory", "citizens", "yes", "natural", "status", "warming", "arity", "itive", "generated", "meta", "ping"], "result": ["mont", "set", "test", "reason", "data", "coord", "p", "array", "vector", "response", "success", "relation", "params", "output", "goal", "product", "length", "pair", "list", "currency", "other", "buffer", "diff", "dict", "Result", "join", "table", "ret", "complete", "next", "contact", "memory", "search", "report", "comment", "results", "r", "union", "mate", "match", "message", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/* \n * Given a positive integer n, you have to make a pile of n levels of stones.\n * The first level has n stones.\n * The number of stones in the next level is:\n * - the next odd number if n is odd.\n * - the next even number if n is even.\n * Return the number of stones in each level in a list, where element at index\n * i represents the number of stones in the level (i+1).\n *\n * Examples:\n * >>> make_a_pile(3)\n * [3, 5, 7]\n */\n\npublic class MAKE_A_PILE {\n\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(n - 2 * i);\n\t\t}\n\t\treturn pile;\n\t}\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "p", "num", "b", "m", "g", "nl", "net", "nt", "ln", "en", "count", "number", "ne", "l", "j", "nb", "gn", "q", "cn", "ns", "nor", "c", "nm", "h", "nc", "nn", "na", "N", "ni", "r", "np", "o", "k", "s", "d", "f", "network", "sn", "t"], "pile": ["paile", " pil", "prile", "vpile", "privil", "pil", " pitch", " pipe", "prole", "privILE", "piler", "privile", "cpile", "peline", "pILE", "pole", "ppille", " piler", "preline", "privitch", " pille", "pipe", "vpille", "paeline", "pitch", " pole", "paole", "vpipe", "cpitch", "cpILE", "ppile", "cpil", "ppipe", " peline", "priler", " pILE", "ppil", "vpil", "pille", "pailer"], "i": ["phi", "p", "point", "in", "m", "iu", "gu", "ui", "g", "ei", "us", "integer", "id", "info", "hi", "ti", "iter", "ai", "I", "si", "ki", "client", "pi", "li", "a", "multi", "it", "io", "qi", "zi", "l", "j", "uu", "ix", "ims", "di", "ic", "q", "y", "mi", "im", "iq", "ci", "cli", "index", "ini", "ip", "ie", "is", "bi", "ii", "sim", "xi", "err", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.Arrays;\n\npublic class SORT_EVEN {\n    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n        int[] evens = new int[1 + (int) (l.length / 2.)];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"l": ["u", "lr", "league", "ml", "els", "val", "rl", "ls", "p", "lis", "m", "lb", "hl", "nl", "dl", "L", "sl", "lp", "ln", "list", "lit", "li", "z", "lv", "jl", "ld", "lu", "al", "lc", "all", "il", "dL", "v", "ll", "mt", "la", "h", "c", "wl", "pl", "kl", "fl", "tl", "r", "lo", "n", "s", "lf", "le", "ell", "t", "el"], "result": ["set", "test", "reason", "continue", "process", "data", "request", "create", "response", "success", "relation", "use", "output", "integer", "goal", "same", "found", "current", "cur", "pair", "list", "currency", "other", "join", "diff", "Result", "console", "ret", "complete", "meet", "only", "pre", "next", "memory", "replace", "true", "work", "primary", "master", "results", "search", "report", "comment", "r", "sequence", "first", "record", "ult", "initial", "date", "trace", "cache", "make", "match", "message", "res", "answer"], "evens": [" evenses", "oddds", "wells", "vens", " evenps", "ownds", "evenges", "venges", "welles", "oddges", "oddes", "ownges", "Evens", "evends", "ownjs", "oddps", " evengs", "evenes", "evenjs", "Evenjs", "owns", " evenjs", "wellps", " evenes", "odds", "evenps", "evenses", "Evenses", " evenges", "evengs", " evends", "oddgs", "vengs", "ownses", "wellges"], "i": ["ind", "u", "ji", "page", "phi", "ri", "ori", "in", "m", "oi", "iu", "ui", "g", "ei", "chain", "us", "me", "id", "info", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "li", "multi", "ms", "io", "it", "qi", "used", "x", "zi", "ami", "j", "ims", "ix", "di", "on", "ic", "uri", "q", "y", "v", "uni", "mi", "im", "cli", "ci", "sql", "h", "c", "inner", "index", "ini", "batch", "sequence", "o", "iri", "is", "bi", "ii", "sim", "err", "ip", "xi", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.*;\n\npublic class SORT_NUMBERS {\n    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(number_array);\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n}\n", "substitutes": {"numbers": ["nanores", "lumbered", "nores", "lodes", "cumeric", "dumbered", "nanubes", "cumbers", "Nums", "dumbers", "nanumeric", "nodes", "cubes", " nores", "dodes", " numeric", "lumbers", " nubes", "nums", "nubes", "dums", "nanumbers", "cores", "numbered", "Numbered", "Nodes", "Numbers", "numeric", "lums"], "value_map": ["value_order", "Value_map", "priority_map", "value_stream", "widget_mg", "value_tool", "value1map", "value____map", "widget_map", "values_map", "hello_maker", "valueLcontrol", "description5order", "description5bag", "hello_claim", "value____mg", "valuetclaim", "description5tool", "value_maps", "value1manager", "valueLcap", "value1stream", "valueLockmap", "description_map", "value_Map", "value_com", "Value_MAP", "priority_control", "valueetmg", "value_MAP", "value_claim", "Value_Map", "valueLockmanager", "description_bag", " value_modules", " value_maps", "value_mg", "message_tool", "widget____map", "valueLockmodules", "value5map", "value_modules", "value_control", "valueetmaker", "values_maker", " value_stream", "valuetmaker", "valueLmap", "values_mg", " value_manager", "values_cap", "values_control", "value_maker", "widget____MAP", "valuetmap", "message_maps", "value5bag", "widget____mg", "Value_tool", "priority_com", "priority_down", "widget_MAP", "value5tool", "value_cap", "value1maps", "valueetmap", "Value_forge", "hello_map", "message_map", "value5order", "description_order", "value_bag", "description5map", "value_manager", "value_down", "value____MAP", "value_forge", "description_tool"], "number_array": ["Number_area", "number2area", "value_list", "Number_list", "value_hash", "number_Array", "value_ray", "value_array", "value_collection", "number2array", "numberitycollection", "number_cloud", "Number_array", "numberityarray", "numberitycloud", "numberingarray", "number2Array", "number_area", "Number_Array", "value_batch", "numberingArray", "value_cloud", "number2list", "number_ray", "numberingarea", "number_hash", "numberityray", "numberinglist", "number_list", "number_batch", "number_collection"], "result": ["test", "reason", "continue", "data", "alter", "wrapper", "either", "request", "csv", "response", "success", "relation", "output", "char", "product", "goal", "term", "list", "currency", "word", "prefix", "join", "value", "Result", "table", "ret", "str", "content", "complete", "memory", "string", "report", "results", "summary", "br", "r", "sequence", "description", "date", "text", "transform", "trace", "make", "command", "match", "message", "res", "answer"], "number": ["notation", "zero", "point", "num", "total", "counter", "directory", "instance", "document", "integer", "rue", "element", "hello", "currency", "value", "one", "x", "column", "maximum", "name", "reference", "Number", "object", "another", "frequency", " Number", "language", "string", "numbered", "money", "umber", "work", "node", "password", "record", "code", "date", "n", "dimension", "collection", "item", "row", "translation", "phone", "information", "match", "message", "second"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/*\n * Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\n */\n\npublic class IS_NESTED {\n    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n        Collections.reverse(opening_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l || idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n", "substitutes": {"brackets": ["pracket", "replacket", "brets", " branches", "replensions", "arrackets", "prensions", " Brairs", "arrairs", "replackets", "grats", "strets", " Brets", " brgins", "blackets", "branches", "arranches", "replanches", " bracket", "brats", " brats", "blgins", " Branches", "arrets", "prackets", "strackets", "blats", " Brackets", "bracket", " brensions", "stranches", "brensions", "granches", "strairs", "brairs", "pranches", "grgins", "blanches", "grackets", "brgins"], "opening_brackets": ["opening_trets", "opening_fracements", "opening_capsacements", "opening_blinters", "opening_balets", "opening_praps", "opening_shortinters", "opening_bedackets", "opening_prackets", "opening_bracers", "opening_blackets", "opening_arrets", "opening_frackets", "opening_branches", "opening_blolds", "opening_bedacements", "opening_arrackets", "opening_brrices", "opening_bedrices", "opening_balackets", "opening_fracers", "opening_trackets", "opening_bedickets", "opening_brinters", "opening_balolds", "opening_relackets", "opening_bedacers", "opening_blanches", "opening_shortets", "opening_shortackets", "opening_trinters", "opening_braps", "opening_brickets", "opening_bratches", "opening_brets", "opening_pracers", "opening_capsanches", "opening_blets", "opening_relacements", "opening_tranches", "opening_pracements", "opening_blickets", "opening_braceackets", "opening_braceacements", "opening_relatches", "opening_braceatches", "opening_fraps", "opening_blrices", "opening_frickets", "opening_bracements", "opening_capsackets", "opening_arranches", "opening_frrices", "opening_arrolds", "opening_shortanches", "opening_brolds", "opening_bedets", "opening_braceanches", "opening_relanches", "opening_frets", "opening_balanches", "opening_capsatches", "opening_bedaps"], "closing_brackets": ["closing_notosures", "closing\u064ebrackets", "closing\u064ebraps", "closing_arrackets", "closing\u064epiecesacks", "closing_BRackets", "closing_piecesackets", "closing_piecesacks", "closing_piecesaps", "closing_bsanches", "closing_braps", "closing_trridges", "closing_blaches", "closing_trackets", "closing_blanches", "closing_bsets", "closing\u064epiecesackets", "closing_braques", "closing_blaques", "closing_blaps", "closing_blockaches", "closing_arrets", "closing_notacks", "closing_piecesosures", "closing_bsridges", "closing_notaps", "closing_branches", "closing_bracks", "closing_notackets", "closing_tranches", "closing_blacks", "closing_BRaques", "closing\u064ebrosures", "closing_BRanches", "closing_brosures", "closing_brridges", "closing_trets", "closing\u064epiecesaps", "closing_blockaques", "closing_arrridges", "closing_blosures", "closing_brets", "closing_BRaches", "closing_blackets", "closing\u064epiecesosures", "closing_blockanches", "closing_arranches", "closing_braches", "closing\u064ebracks", "closing_bsackets", "closing_blockackets"], "i": ["ji", "p", "oi", "g", "ei", "yi", "us", "ai", "multi", "z", "x", "ims", "uri", "im", "print", "iri", "is", "n", "ii", "to", "u", "ori", "iu", "hi", "ti", "remote", "li", "it", "ami", "v", "ini", "user", "err", "load", "init", "gi", "ind", "phi", "ri", "b", "point", "in", "ui", "parent", "info", "ij", "pi", "io", "ik", "ix", "di", "index", "c", "my", "m", "id", "I", "si", "ki", "qi", "zi", "j", "ic", "q", "y", "mi", "cli", "ci", "batch", "ie", "bi", "f", "status", "sim", "t", "ip", "xi"], "cnt": ["lcNT", "lctr", " count", "nct", "acct", " ctr", "nount", "Cnd", "lcnt", "nrt", "count", "lccount", "Ctr", "acrt", "Count", "Ccount", "Cct", "crt", "nnt", "ccount", "cNT", " ccount", " cct", "CNT", "cnd", " crt", "acnt", "nnd", "ctr", "cct", "Cnt", " cnd", " cNT", "ncount", "account"], "l": ["ml", "p", "ls", "hl", "nl", "dl", "length", "L", "len", "sl", "lp", "ln", "li", "il", "x", "lu", "lc", "j", "v", "ll", "c", "pl", "kl", "fl", "lo", "ul", "n", "f", "lf", "ell", "le", "t", "el"], "idx": ["Idx", "Idxs", "bidxs", "oidx", " idxx", "midx", "midxc", " idxc", "idex", "idxc", " idX", " idex", " idxs", "oidxx", "oidex", "Idxx", "idxx", "oidxs", "midxs", "midX", "idxs", "Idex", "bidx", "idX", "bidxc", "bidX"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class INTERSPERSE {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size(); i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nodes", " niddles", "cnumbers", "lodes", "cumeric", "niddles", " nasures", "nights", " nums", "neumbers", "cnums", "pums", "cumbers", "nways", "unniddles", " Nums", "neiddles", "cnumeric", "unnums", "nurations", "nodes", "neums", " nurations", "codes", " numeric", "neurations", "neumeric", "lumbers", "normalanges", " Numbers", "snograms", "neuers", "normalnotations", " Nights", "nums", "snights", "pumeric", " nuers", "nanges", " nways", "nasures", "unnumbers", "lasures", " nanges", "nuers", "casures", "normalumbers", "nnotations", "snanges", "lumeric", "unnurations", "numeric", "snumbers", " nograms", "snums", "nograms", "snways", "pumbers", "cnuers", " nights", " nnotations", "purations", "normalograms", "snnotations", " Nways"], "delimeter": ["deliner", "seim", "seimeter", " deliner", "delim", "Delim", "Delimeter", "Deliner", "seimeters", "elimeter", " delitter", "periner", "delidian", "delimeters", "Delimeters", "peridian", "delitter", "seiner", "elim", "eliner", "peritter", "elimeters", "Delitter", " delidian", "Delidian", "perimeter"], "result": ["test", "data", "continue", "run", "array", "trade", "total", "vector", "create", "response", "valid", "relation", "output", "success", "group", "goal", "product", "same", "them", "length", "found", "current", "cur", "pair", "diff", "list", "currency", "other", "buffer", "now", "folder", "Result", "value", "created", "error", "table", "ret", "real", "complete", "only", "next", "default", "memory", "true", "work", "primary", "report", "comment", "results", "br", "search", "sequence", "print", "also", "local", "first", "date", "rule", "empty", "collection", "mate", "user", "root", "make", "command", "match", "message", "res", "answer"], "i": ["ind", "u", "ji", "phi", "b", "ori", "in", "m", "iu", "ui", "yi", "ei", "ex", "us", "id", "hi", "ski", "ai", "I", "si", "li", "pi", "it", "x", "multi", "by", "qi", "j", "ix", "di", "v", "ic", "q", "y", "mi", "im", "ci", "h", "index", "c", "inner", "ini", "batch", "my", "o", "is", "bi", "n", "ii", "f", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Checks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse */\n\npublic class IS_PALINDROME {\n    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n            if (text.charAt(i) == text.charAt(text.length() - i))\n                return true;\n        }\n        return false;\n    }\n}\n", "substitutes": {"text": ["ind", "history", "test", "reason", "data", "char", "cont", "output", "input", "ut", "aut", "pattern", "expression", "length", "read", "nt", "current", "term", "word", "it", "state", "buff", "Text", "now", "value", "buffer", "view", "log", "name", "str", "content", "template", "ext", "form", "context", "tx", "q", "pt", "reported", "event", "ct", "path", "txt", "window", "string", "TEXT", "comment", "title", "search", "report", "print", "code", "n", "font", "trace", "translation", "config", "t", "msg", "command", "message", "tt"], "i": ["ind", "u", "ji", "phi", "ri", "ori", "oi", "m", "iu", "gu", "ui", "chain", "ex", "ei", "us", "yi", "id", "ogi", "ski", "hi", "out", "ai", "I", "si", "ki", "pi", "a", "li", "x", "it", "by", "qi", "multi", "io", "zi", "l", "j", "ix", "on", "di", "uri", "v", "ic", "q", "y", "mi", "iq", "cli", "ci", "h", "index", "c", "ini", "batch", "go", "ni", "e", "o", "iri", "is", "bi", "n", "ii", "sim", "t", "xi", "gi"]}}
{"code1": "package humaneval.buggy;\n\npublic class IS_PRIME {\n    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 0; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "p", "mn", "num", "note", "no", "m", "bn", "nl", "len", "net", "nt", "none", "ln", "en", "count", "number", "dn", "ne", "all", "l", "j", "fn", "nb", "un", "gn", "q", "w", "cn", "ns", "nor", "c", "nm", "nie", "h", "nc", "nn", "na", "N", "ni", "i", "np", "o", "nd", "non", "d", "ng", "norm", "sn", "t"], "k": ["ks", "ke", "UK", "ask", "uk", "kid", "tk", "seek", "acc", "ijk", "m", "ak", "ok", "mk", "g", "kr", "kn", "ark", "wk", "ka", "sk", "ki", "ko", "kt", "ik", "j", "key", "q", "w", "unk", "kw", "dk", "kj", "ac", "kl", "kg", "i", "ck", "ku", "ack", "d", "ikk", "km", "kh", "kk", "th", "K", "isk", "ek"]}}
{"code1": "package humaneval.buggy;\n\n/* I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score. */\n\npublic class COMPARE {\n    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"game": ["history", "playing", "unknown", "test", "football", "league", "jury", "team", "shot", "played", "program", "g", "chance", "ball", "players", "goal", "hog", "play", "info", "position", "cheat", "gam", "hello", "enemy", "win", "field", "testing", "quit", "won", "event", "message", "grid", "player", "scoring", "defense", "go", "Game", "bet", "score", "stats", "battle", "setup", "rule", "week", "bit", "status", "row", "config", "games", "rage", "GAME", "winner", " games", "bo"], "guess": [" guest", "guest", "guesses", "prize", " guplay", "assplay", "assze", "gamessing", " guessing", "assest", "guze", "assess", "assessing", "priplay", "guessed", " guesses", "guessing", "priess", " guze", "assesses", "assessed", "gamessed", "gamess", "priesses", "gamest", "guplay", " guessed"], "result": ["test", "continue", "data", "trade", "total", "draw", "request", "create", "response", "valid", "relation", "success", "output", "end", "goal", "integer", "same", "current", "mark", "pair", "term", "currency", "other", "join", "diff", "Result", "allow", "table", "ret", "complete", "force", "next", "replace", "true", "work", "primary", "search", "results", "comment", "report", "ult", "sequence", "print", "r", "local", "score", "date", "mate", "trace", "profile", "match", "message", "res", "back", "front", "answer"], "i": ["ind", "u", "ji", "set", "phi", "ri", "ori", "in", "m", "iu", "ui", "chain", "ex", "ei", "us", "id", "info", "ski", "hi", "ti", "ai", "I", "si", "remote", "ij", "pi", "li", "multi", "x", "io", "ms", "qi", "it", "z", "zi", "fi", "j", "ix", "uri", "di", "v", "ic", "y", "mi", "im", "ci", "index", "c", "inner", "ini", "batch", "\u0438", "r", "sequence", "o", "is", "bi", "n", "ii", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19 */\n\npublic class FRUIT_DISTRIBUTION {\n    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n            int cnt = Integer.parseInt(str);\n            result -= cnt;\n        }\n        return result;\n    }\n}\n", "substitutes": {"s": ["sv", "p", "b", "ls", "sq", "g", "strings", "ats", "its", "spec", "ps", "l", "less", "st", "v", "ns", "h", "c", "string", "ts", "xs", "r", "i", "qs", "S", "aws", "sts", "parts", "js", "f", "sample", "t", "rs", "ss"], "n": ["u", "nan", "nu", "p", "num", "no", "m", "g", "nl", "out", "ny", "nt", "nw", "count", " N", "number", "dn", "ne", "j", "nb", "cn", "ns", "rn", "nor", "c", "nm", "nc", "nn", "na", "N", "r", "np", "i", "d", "ng", "sn", "tn", "t", "nr"], "result": ["test", "p", "num", "total", "sum", "counter", "ful", "success", "relation", "cont", "integer", "goal", "me", "nt", "current", "cur", "nr", "currency", "this", "value", "now", "count", "Result", "number", "ne", "all", "diff", "ret", "mask", "cmp", "su", "next", "default", "power", "true", "results", "ult", "r", "np", "score", "date", "mate", "match", "res", "start"], "str": ["set", "sp", "char", "sc", "dr", "out", "iter", "tr", "spec", "cur", "list", "z", "stri", "enc", "name", "st", "url", "doc", "div", "piece", "arr", "next", "txt", "c", "string", "coll", "br", "fr", "r", "print", "ctr", "exec", "text", "Str", "oct", "STR", "vol", "t", "obj", "res", "dec"], "cnt": ["lcNT", " counters", "cont", "coounters", "lcnt", "Cnc", "Cst", "counters", "Cct", "cNT", "lcnc", " cct", "CNT", "cst", "coct", " cnc", "lcst", "cct", "Cnt", " cst", "coNT", "Counters", " cNT", "cnc"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n\n// if the two lists have the same number of chars, return the first list.\n\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\npublic class TOTAL_MATCH {\n    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n        for (String st : lst1)\n            l2 = st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n}\n", "substitutes": {"lst1": ["lph3", " lst100", "elstrP", " lst01", " lbl1", "linst3", "lbl3", " lbl100", "list01", "elst1", "lstr0", "list1", "elstP", " lstr3", "listP", "list3", "lph100", "lst100", " lbl3", "lstr3", " lstr1", "lstr1", "lstrOne", " lstrOne", "lstr100", " lstr0", "list2", " lstOne", "lStOne", "llist1", "lSTOne", " lst3", "lbl0", "lst0", "elstr1", "lph0", " lst0", "llist3", " list01", "lst3", "lbl1", "lph1", " lbl0", "llist2", "lSt0", "lST3", "lST0", "lstP", " list3", "linst2", "linst1", "linstP", "lstr01", "lbl100", "lstr2", "elstr2", "lST1", "lstrP", "lst01", "elstr3", " list1", " list2", "lSt1", "llist01", "elst3", "lstOne", "lSt3", "elst2"], "lst2": ["lST2", "elst1", "lst02", "lSTTwo", " lstTwo", "lnt2", " listTwo", "lostTwo", "lost02", "list1", "list3", "lstr3", "listTwo", "lstr1", "list2", "lost2", "list02", "lnt1", " lst02", "lnt3", "listtwo", "elstr1", "elsttwo", "lST02", "lst3", "lsttwo", "elstrtwo", " list02", "lnttwo", "lstTwo", "lstr2", "elstr2", "lST1", "elstr3", "lost1", " list1", " list2", "elst3", "lstrtwo", "elst2"], "l1": ["leacy", "lr01", " l90", "el100", "el51", "lacy", "l01", "int90", "el1", "l30", "li0", "li1", "la001", "la1", "l0", "li30", "lracy", "li001", "le1", "li90", "l90", "int0", "lr1", "la100", " l0", "int1", "la51", "li51", "le01", "lr0", "el0", "el01", "int30", "l51", "el001", "le0", "l100", " l30", "l001", "li100", "elacy"], "st": ["set", "ST", "stage", "sc", "stable", "ut", "stab", "sh", "bsp", " nost", "stop", "nt", "usr", "list", "const", "kt", "ld", "ost", "ist", "l", "ust", "str", "form", "pt", "rest", "bt", "inst", "ste", "ct", "mt", "tmp", "rt", "std", "est", "irst", "sta", "et", "at", "sts", "nd", "func", "St", "src", "status", "t", "th", "sty", "step", "tt", "must"], "l2": ["li2", "eltwo", "lioud", "lt1", " l02", "lay2", "ltwo", "v02", "lbeta", "el2", "slbeta", "loud", " lsecond", "li1", " l32", "sltwo", "v2", "ed1", "l32", "l02", "el02", "ed02", "lay02", "elbeta", "ltsecond", "lisecond", "lt2", "lsecond", "v32", "ltoud", " loud", "laytwo", "laybeta", "sl02", "ed32", "v1", "ed2", "sl2"]}}
{"code1": "package humaneval.buggy;\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2\n\npublic class HEX_KEY {\n    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n}\n", "substitutes": {"num": ["zero", " som", "nu", "b", "no", "sum", "m", "mon", "comm", "bn", "cu", "g", "inc", "NUM", "cal", "nam", "out", "Num", "om", "hum", "um", "number", "unit", "name", "str", " numer", "key", "form", "nm", "na", "umber", " sum", "np", "tu", "alph", "n", "nom", " number", "tim", "th", "dec"], "result": ["zero", " resulted", "set", "test", "expected", "continue", "total", "sum", "counter", "character", "success", "integer", "goal", "product", "found", "current", "cur", "mark", "currency", " Result", "value", "diff", "Result", "number", " resulting", "done", "mask", "key", "event", "next", "ULT", "feature", "fac", "primary", "results", "know", "comment", "ult", "r", "score", "date", "purpose", "cup", "mate", "status", "command", "match", "message", "res"], "c": ["arc", "con", "dc", "conv", "p", "b", "cu", "char", "sc", "cont", "cs", "anc", "cl", "vc", "ch", "rc", "co", "bc", "C", "fc", "lc", "cmp", "l", "cr", "enc", "mc", "ic", "q", "ct", "ci", "ca", "abc", "h", "tc", "ce", "cf", "uc", "nc", "ac", "etc", "r", "cp", "unc", "col", "n", "k", "cap", "cod", "cc", "cat", "t", "cache", "com"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n */\n\npublic class SUM_SQUARED_NUMS {\n    public static long sum_squared_nums(double[] lst) {\n        int result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n}\n", "substitutes": {"lst": [" lrest", "Lbl", "lnd", "llsts", "lstr", "lrest", "llld", "Lst", "Lsts", "lbl", "dlist", "lbrest", "lld", "list", "lsstr", "elrest", "lsnd", " lnt", "slist", "llist", "lbnt", "elnt", "lsbl", "Lnd", "elst", "llst", "dlst", "lbist", "dlbl", "elist", "lbst", "lnt", "slst", "lsst", "lsts", "Lld", "dlnd", "Lstr", "slnd", "slsts", "lsist", " list", "slld", "slstr"], "result": ["zero", " resulted", "wrapper", "test", "expected", "continue", "p", "num", "sum", "trade", "total", "ful", "success", "relation", "output", "integer", "goal", "found", "current", "cur", "different", " Result", "currency", "multi", "value", "now", "diff", "Result", "number", "created", "ret", " resulting", "done", "complete", "strength", "next", "ULT", "memory", "cert", "duration", "feature", "primary", "results", "ult", "sequence", "score", "r", "date", "purpose", "trace", "mate", "profile", "make", "match", "message", "res"], "i": ["ind", "ji", "p", "ri", "ori", "oi", "iu", "uj", "json", "ei", "integer", "id", "jj", "info", "er", "ti", "ai", "I", "si", "ij", "pi", "it", "li", "ami", "jl", "qi", "fi", "J", "di", "v", "mi", "im", "ci", "index", "ini", "ia", "r", "job", "o", "jp", "ii", "n", "xi", "ip", "gi"], "j": ["ind", "ji", "jit", "b", "uj", "json", "g", "jj", "aj", "adj", "out", "tr", "ij", "other", "it", "z", "x", "jl", "jo", "gr", "J", "oj", "jump", "str", "ix", "key", "v", "q", "y", "bj", "im", "pr", "kj", " dj", "ge", "br", "job", "ie", "at", "jp", "n", "js", "k", "jc", "dj", "t", "msg", "obj"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class UNIQUE {\n    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n}\n", "substitutes": {"l": ["u", "p", "b", "ls", "rl", "m", "g", "nl", "hl", "dl", "L", "sl", "lp", "ln", "list", "lit", "li", "z", "lc", "j", "v", "isl", "w", "q", "ll", "la", "c", "pl", "kl", "fl", "ol", "o", "d", "f", "le", "t", "el"], "result": ["test", "data", "continue", "process", "trade", "create", "response", "valid", "relation", "success", "output", "end", "group", "goal", "product", "params", "out", "found", "cur", "current", "list", "other", "buffer", "join", "folder", "Result", "them", "created", "all", "table", "ret", "complete", "tmp", "next", "unique", "memory", "cert", "comb", "menu", "true", "work", "primary", "report", "comment", "search", "results", "r", "print", "sequence", "first", "rule", "collection", "mate", "root", "cache", "make", "match", "message", "res", "answer"], "n": ["nu", "mn", "p", "note", "m", "net", "nt", "none", "ln", "en", "z", "number", "dn", "ne", "j", "fn", "name", "v", "cn", "hn", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "node", "r", "o", "k", "d", "ng", "sn", "nr", "an"]}}
{"code1": "package humaneval.buggy;\n\npublic class GREATEST_COMMON_DIVISOR {\n    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            a = b;\n            b = a % b;\n        }\n        return a;\n    }\n}\n", "substitutes": {"a": ["u", "aa", " fa", "da", "p", "acc", "au", "val", "m", "act", "g", "aj", "ai", "aaa", "x", "sa", "al", "ea", "result", "ach", "l", "am", "div", "ba", "ta", "ar", "v", " pa", "w", "ity", " l", "ca", "oa", "la", "h", "area", "ed", "c", "ac", "A", "na", "ia", "sta", "e", "r", "i", "at", "as", "pa", "d", "aq", "f", "app", "alpha", "ae", "t", "ma", "ab", "ao", "ak", "an"], "b": ["u", "eb", "lib", "p", "m", "bb", "g", "sb", "bs", "length", "B", " B", "bis", "change", "other", "z", "bc", "it", "value", "x", "mb", "l", "ob", "fb", "ba", "nb", "cb", "v", "y", "be", "ib", "bt", "rb", "c", "bin", "br", "r", "e", "i", "gb", "bi", "n", "d", "f", "db", "beta", "t", "ab", "reb", "bar"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SORT_THIRD {\n    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n                result.add(thirds.get(i));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"l": ["lr", "ml", "els", "p", "b", "ls", "rl", "lis", "m", "lor", "nl", "cl", "dl", "acl", "L", "sl", "lp", "ln", "list", "li", "lv", "il", "jl", "al", "ld", "laws", "lc", "all", "dL", "les", "v", "lol", "ll", "la", "c", "wl", "pl", "kl", "fl", "ol", "tl", "r", "o", "n", "s", "d", "lf", "ell", "t", "lists", "lines", "el"], "result": [" resulted", "data", "continue", "total", "response", "ful", "success", "relation", "output", "they", "goal", "same", "group", "them", "integer", "found", "cur", "current", "RESULTS", "list", "this", "other", "rown", "buffer", "join", "forth", "Result", "all", "created", "dict", "def", "ret", " resulting", "table", "complete", "only", "full", "next", "power", "ral", "ults", "cert", "right", "memory", "mass", "true", "work", "successful", "primary", "results", "report", "search", "ult", "sequence", "r", "also", "first", "red", "trace", "profile", "neutral", "match", "res"], "thirds": ["ers", "dogs", "ards", "windows", "arth", "eds", "eeks", "downs", "rely", "they", "inces", "irds", "itals", "nings", "quarters", "ways", "requisites", "lords", "inals", "hens", "rets", "rown", " dividends", "uds", "efficients", "cedes", "ths", "irs", "keyes", "casts", "rists", "der", "dds", "sticks", "roads", "stars", "hands", "right", "third", "thus", "rises", "rights", "rings", "adders", "resy", "arers", "sts", "founder", "ings", "eways", "stocks", "icals", "straight", "reys"], "i": ["ind", "u", "ji", "base", "phi", "ri", "point", "ori", "in", "m", "oi", "iu", "ui", "chain", "ei", "us", "me", "id", "info", "ti", "hi", "ai", "I", "si", "ki", "ij", "pi", "li", "it", "x", "io", "by", "qi", "multi", "zi", "j", "mm", "ix", "uri", "di", "ic", "v", "key", "q", "y", "mi", "iq", "im", "ci", "cli", "h", "inner", "ini", "batch", "ni", "my", "sequence", "o", "at", "is", "bi", "ii", "n", "sim", "xi", "ip", "err", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n\n */\n\npublic class CHECK_IF_LAST_CHAR_IS_A_LETTER {\n    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n        last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n}\n", "substitutes": {"txt": ["said", "test", "lt", "data", "filename", "ctx", "sit", "ht", "pat", "xt", "cont", "json", "act", "nants", "input", "gt", " text", "out", "its", "nt", "elt", "this", "prefix", "kt", "XT", "utt", "phrase", "name", "str", "format", "ext", "tx", "tm", "pt", "bt", "tmp", "lat", "ct", "ns", "nm", "rt", "tg", "cmd", "TEXT", "joined", "git", "past", "print", "first", "np", "pdf", "bits", "text", "dat", "html", "tp", "gs", "typ", "plain", "t", "msg", "latest", "obj", "init", "tt"], "parts": ["phys", "part", "points", "details", "vs", "ads", "pieces", "params", "strings", "Parts", "workers", "split", "objects", "its", "groups", "list", "names", "jobs", "cells", "words", "dates", "sections", "tests", "faces", "places", "arts", "pins", "rest", "files", "issues", "kids", "ries", "fixes", "acts", "phis", "times", "ports", "styles", "ts", "asts", "types", "keys", "bits", "sts", "terms", "rots", "items", "things", "lists", "lines", "caps"], "last": ["max", "pretty", "base", "self", "prev", "reverse", "total", "since", "char", "parent", "end", "good", "id", "stop", "sort", "out", "old", "nt", "top", "list", "then", "las", "close", "quote", "all", "log", "most", "l", "name", "str", "st", "rest", "next", "show", "string", "right", "left", "handle", "style", "est", "ast", "node", "sequence", "first", "print", "Last", "n", "text", "body", "empty", "desc", "dest", "after", "t", "latest", "tail"], "last_char_pos": ["last_int2po", "last_upper_comp", "last_upper_pos", "last_byte_con", "last_charptcon", "last_byte_pos", "last_upper_loc", "last_int_pos", "last_char_loc", "last_char2pos", "last_char_comp", "last_int2POS", "last_int2position", "last_byte_po", "last_char_po", "last_int2pos", "last_int_POS", "last_char_con", "last_char_length", "last_char_POS", "last_char2po", "last_byte_position", "last_char_position", "last_char2position", "last_upper_length", "last_charptpos", "last_int_position", "last_char2POS", "last_charptpo", "last_int_po", "last_charptposition"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.*;\n\n// Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\npublic class COMMON {\n    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n}\n", "substitutes": {"l1": ["li2", "L30", "pl0", " lOne", "l30", "li1", "pl1", "kl30", "lc2", "lc001", "pl9", "l0", "L21", "li21", "li30", "lons", "L1", " lons", "ll0", "li001", "lc21", "ll9", "l9", " l0", "lOne", "L2", "lions", "ll1", "lc1", "Lons", "kl1", "L001", "llOne", "l21", "l001", " l9", "kl001", "kl2", "plOne"], "l2": ["li2", "kl2", " ltwo", "eltwo", " l02", "l4", "el3", "ltwo", "l42", "kl6", "el2", "L7", "ll4", "L02", " l42", "L6", "L1", "ll02", "litwo", "l7", "l02", "li3", "l3", "l6", " l7", "L2", "li42", "kl7", "ll1", " l6", "kl1", "ll2", " l3", " l4", "el42", "L4"], "common": ["con", "shared", "base", "normal", "total", "broad", "valid", "mentioned", "same", "necessary", "there", "qualified", "equal", "found", "pair", "border", "other", "some", "multi", "specified", "required", "used", "met", "created", "between", "official", "made", "check", "register", "bare", "reasonable", "given", "connected", "relative", "average", "onet", "seen", "specific", "among", "Common", "general", "unique", "inner", "present", "central", " consistent", "primary", "basic", "related", "binary", "minimum", "documented", "local", "called", "initial", "core", "associated", "component", "non", "known", "global", "recent", "natural", "latest", "similar", "match", "ordered", "com"], "i": ["u", "ji", "phi", "ri", "asi", "in", "m", "iu", "ui", "yi", "ei", "us", "me", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "ami", "li", "x", "it", "io", "multi", "qi", "zi", "l", "ims", "ix", "di", "uri", "v", "ic", "y", "mi", "iq", "im", "ci", "cli", "wi", "ini", "ia", "ie", "at", "is", "bi", "ii", "sim", "xi", "ip", "gi"], "j": ["ji", "jit", "jas", "b", "note", "sp", "m", "exp", "uj", "ev", "g", "json", "jj", "aj", "adj", "out", "ja", "ij", "other", "it", "z", "jl", "by", "J", "oj", "jump", "str", "key", "on", "v", "q", "y", "pt", "bj", "im", "pr", "kj", "att", "br", "fr", "ot", "job", "at", "jp", "js", "k", "s", "dj", "jac", "je", "obj"], "result": ["test", "reason", "expected", "process", "data", "vector", "total", "request", "create", "valid", "response", "relation", "success", "output", "see", "product", "goal", "integer", "tr", "cur", "current", "pair", "term", "list", "currency", "other", "collect", "join", "Result", "our", "created", "table", "ret", "complete", "register", "spring", "tmp", "memory", "true", "work", "primary", "results", "report", "search", "comment", "ult", "r", "print", "first", "summary", "date", "component", "mate", "cache", "make", "match", "message", "res", "answer"], "index": ["ind", "zero", "update", "set", "max", "timeout", "axis", "action", "point", "num", "sum", "exp", "insert", "success", "instance", "ex", "output", "see", "position", "iter", "loc", "alias", "prime", "open", "other", "pos", "prefix", "x", "number", "address", "label", "Index", "offset", "ix", "key", "select", "connect", "exit", "level", "slice", "each", "loop", "search", "initial", "access", "n", "dimension", "find", "row", "config", "size", "connection", "capacity", "init"], "c": ["u", "category", "dc", "cd", "cu", "b", "m", "sc", "cs", "chain", "rc", "co", "const", "fc", "C", "lc", "l", "cr", "mc", "v", "ic", "cn", "ct", "ci", "tc", "ce", "cf", "uc", "ac", "cm", "r", "cp", "n", "k", "f", "cc", "cat", "t", "com", "cor"]}}
{"code1": "package humaneval.buggy;\n\n/* A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5 */\n\npublic class X_OR_Y {\n    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n            if (n % i == 0) return x;\n        }\n        return y;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "p", "num", "no", "m", "g", "nl", "len", "net", "ny", "nt", "none", "ln", "en", "count", "number", "dn", "ne", "l", "nb", "gn", "q", "cn", "ll", "ns", "nor", "c", "nm", "nc", "nn", "na", "N", "ni", "np", "k", "d", "norm", "network", "f", "sn", "size", "t", "nr"], "x": ["ox", "p", "lex", "xt", "ex", "px", "z", "xx", " xx", "xc", "X", "l", "ax", "ix", "on", "v", "ross", "rx", "w", "xa", "tx", "wx", "h", "left", "ock", "xs", "xd", "xy", "yx", "at", "ry", "dx", "xi", "fx", "xp"], "y": ["ind", "vy", "ey", "gy", "p", "b", "val", "Y", "point", "height", "dy", "ch", "to", "out", "ny", "yt", "ye", "ish", "yy", "top", "it", "z", "by", "l", "j", "v", "ay", "iny", "ty", "h", "iy", "fy", "ly", "my", "xy", "yo", "ry", "f", "sky", "t", "err", "sy", "py"], "i": ["phi", "ri", "asi", "ori", "oi", "m", "gu", "iu", "ui", "g", "ei", "us", "ti", "iter", "hi", "ai", "I", "si", "ki", "li", "pi", "multi", "io", "a", "it", "qi", "ms", "by", "zi", "fi", "ik", "j", "l", "ix", "di", "ic", "uli", "q", "uni", "mu", "mi", "iq", "ci", "cli", "ini", "ni", "o", "is", "bi", "ii", "sim", "t", "ip", "xi", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/* The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14 */\n\npublic class FIB4 {\n    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n        }\n        return result.get(result.size() - 1);\n    }\n}\n", "substitutes": {"n": ["zero", "nan", "nu", "p", "num", "no", "note", "m", "mn", "g", "nl", "net", "nt", "ln", "en", "x", "number", "ne", "l", "j", "fn", "nb", "name", "v", "cn", "ns", "nor", "c", "nm", "index", "h", "nc", "nn", "N", "ni", "r", "o", "np", "k", "d", "ng", "sn", "size", "tn", "t", "nr"], "result": ["test", "wrapper", "stack", "valid", "output", "runner", "buffer", "now", "Result", "console", "all", "important", "su", "event", "power", "sequence", "desc", "profile", "cache", "command", "message", "progress", "back", "continue", "process", "trade", "draw", "group", "integer", "iter", "false", "number", "created", "table", "complete", "full", "proc", "successful", "menu", "true", "search", "date", "order", "function", "load", "match", "res", "answer", "call", "success", "term", "this", "word", "dict", "ret", "block", "primary", "comment", "report", "manager", "r", "trace", "make", "page", "run", "total", "response", "relation", "chain", "see", "pair", "list", "currency", "then", "diff", "folder", "error", "def", "done", "work", "results", "description", "first", "rule", "mate"], "i": ["ind", "phi", "asi", "in", "m", "gu", "iu", "ui", "chain", "us", "hi", "iter", "ti", "ai", "I", "si", "li", "pi", "multi", "x", "io", "it", "qi", "zi", "j", "ix", "di", "ic", "q", "y", "mi", "im", "cli", "ci", "ini", " j", "my", "at", "is", "bi", "ii", "sim", "xi", "ip", "t", "gi"]}}
{"code1": "package humaneval.buggy;\n\npublic class TRUNCATE_NUMBER {\n    public static double truncate_number(double number) {\n        return number / 1.0;\n    }\n}\n", "substitutes": {"number": ["zero", "normal", "data", "b", "num", "vector", "note", "total", "counter", "document", "amount", "output", "integer", "length", "hello", "value", "x", "count", "result", "maximum", "Number", "next", "object", "default", "string", "numbered", "money", "version", "password", "print", "scale", "date", "n", "original", "to", "two", "message", "second"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\n\npublic class GENERATE_INTEGERS {\n    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n}\n", "substitutes": {"a": ["ama", "aa", "da", "ab", "act", "g", "aj", "aaa", "sa", "al", "ea", "am", "ba", "ta", "ar", "ca", "la", "oa", "ac", "A", "ia", "e", "r", "at", "as", "d", "f", "ra", "ae", "t", "ma", "au", "ao", "an"], "b": ["eb", "lib", "bb", "bs", "g", "blue", "B", "bis", "z", "bc", "by", "mb", "l", "ob", "fb", "cb", "ba", "v", "w", "y", "be", "ib", "rb", "h", "c", "bp", "bin", "br", "bi", "n", "body", "d", "f", "db", "ab", "bar"], "lower": ["zero", "from", "base", "Lower", "partial", "min", "higher", " lowered", "both", "position", "Low", "old", "elt", "OWER", "down", "begin", "loe", "ele", "less", "below", "ower", "offset", "st", "middle", "side", "floor", "section", "master", "basic", "minimum", "first", "ger", "seconds", "even", "ase", "bottom", "small", " lowers", "low", "second"], "upper": ["max", "history", "above", "stack", "higher", "volume", "height", "largest", "instance", "where", "rise", "up", "figure", "there", "hi", "west", "pper", "top", "then", "iverse", "most", "maximum", "impl", "high", "full", "highest", "inner", "Higher", "capacity", "range", "ger", "older", "latest", "padding", "angle"], "result": ["test", "continue", "data", "run", "total", "create", "response", "valid", "relation", "success", "output", "integer", "goal", "product", "there", "out", "current", "black", "cur", "pair", "list", "other", "collect", "join", "buffer", "Result", "all", "created", "region", "table", "ret", "complete", "tmp", "next", "memory", "true", "feature", "primary", "work", "report", "comment", "search", "results", "r", "sequence", "first", "collection", "mate", "trace", "make", "match", "message", "res", "answer"], "i": ["u", "ji", "phi", "ri", "ori", "in", "m", "iu", "ui", "yi", "ei", "us", "me", "id", "info", "hi", "ti", "ai", "I", "si", "ij", "li", "pi", "it", "x", "ms", "multi", "qi", "ik", "z", "zi", "j", "ix", "ims", "di", "v", "ic", "key", "q", "y", "mi", "im", "iq", "ci", "cli", "index", "ini", "ip", "ni", "o", "ie", "iso", "is", "bi", "ii", "n", "xi", "t", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SEPARATE_PAREN_GROUPS {\n    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n            } else {\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"paren_string": ["parenderstrings", "pen_wrapper", "pareningstring", "pareningstrings", "aren_string", "aren_strings", "pareningsequence", "parenderwrapper", "pen_source", "paren_strings", "pen_string", "paren_char", "aren_sequence", "parenphpstring", "parenderstring", "parendersource", "pareningchar", "paren_source", "parenphpsource", "pen_strings", "parenphpstrings", "parenphpwrapper", "paren_wrapper", "paren_sequence", "aren_char"], "result": ["test", "continue", "total", "create", "response", "success", "relation", "valid", "output", "params", "goal", "there", "found", "current", "cur", "pair", "list", "join", "now", "folder", "Result", "created", "table", " resulting", "ret", "complete", "next", "memory", "cert", "true", "work", "primary", "master", "report", "search", "summary", "results", "sequence", "first", "bridge", "collection", "mate", "meg", "match", "message", "res", "answer"], "current_string": ["currentOtherbuffer", " current_property", "currenttlist", "currenteduser", "currenttformat", "full_sample", " current_buffer", "current_user", "reported_list", "currentedsample", "current_object", "fullTheuser", "currentOtherprefix", "currentnetstring", "current_value", "current_sample", "currentedstring", "currentOtherproperty", "currentOtherstring", "fullThestring", "current_buffer", "current_format", "currently_strings", "current_comment", "currentTheuser", "reported_string", "currentnetsample", "currently_string", "currentThesample", " current_prefix", "reported_format", "fullTheappend", "full_user", "fullThesample", "currently_value", "current_list", "current_strings", " current_sample", "full_append", "current_property", "currentedappend", "current_append", "currentTheappend", "currenttstring", "full_string", " current_strings", "current_prefix", "reported_comment", "currentnetstrings", "currenttcomment", "currentnetprefix", "currently_object", "currentThestring"], "current_depth": ["currenttenancelevel", "currentnessdeep", "currentnessdefault", " current_levels", "current_levels", "current_default", "currentnessdepth", "reported_deep", "current7level", "currentsDepth", "currentnesslayer", "remotetenancealways", "remotetenancenode", "variable_depth", "currentlyDepth", "current_total", "currentWlayer", "currentWdeep", "current7depth", "current7always", "current2string", "currentstotal", "current64deep", "reported_layer", "currentlystring", "current64levels", " current_deep", "remotetenancelevel", "current7node", "currentlytotal", "currentsdepth", "variablelydepth", "current_layer", "variable_total", "current_details", "current64depth", "remote_always", "variable_Depth", "current_Depth", "currentWdefault", "currenttenancealways", " current_details", "variable_string", "currenttenancedepth", "remote_depth", "current_always", "remote_level", "currentlydepth", "reported_depth", "current2Depth", "remote_node", "variablelyDepth", "currentsstring", "current64details", "current2depth", "current2total", "variablelystring", "current_level", "reported_default", "current_deep", "currenttenancenode", "variablelytotal", "currentWdepth", "current_node", "remotetenancedepth"], "c": ["arc", "u", "category", "dc", "conv", "ec", "p", "cu", "b", "char", "sc", "cont", "cs", "g", "chain", "ch", "cur", "a", "bc", "C", "fc", "lc", "xc", "l", "cr", "v", "ct", "abc", "h", "tc", "ce", "cf", "uc", "ac", "etc", "cm", "r", "i", "cp", "code", "unc", "col", "gc", "k", "f", "cos", "cod", "pc", "cc", "cat", "com"]}}
{"code1": "package humaneval.buggy;\n\npublic class FLIP_CASE {\n    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n                char_list[i] = Character.toLowerCase(c);\n            }\n            else {\n                char_list[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n}\n", "substitutes": {"string": ["test", "data", "array", "request", "char", "character", "source", "relation", "input", "ring", "strings", "space", "pattern", "escape", "spec", "list", "word", "prefix", "null", "value", "buffer", "type", "address", "name", "str", "v", "sql", "object", "version", "shape", "comment", "password", "sequence", "print", "description", "text", "s", "network", "function"], "char_list": ["charlenset", " charlisttext", "charistrange", " char_text", "char_List", "char_names", "char_group", "charListlists", "character_range", "char_ist", "char_number", "char_array", "byte_lists", "char2set", "cmd_number", "charlenlist", "char64list", "char_LIST", " char_List", "charetset", "char_lists", "charetlists", "charlenlists", "charlistlists", "charletist", "char64group", "charListlist", " char_lists", " char_array", "byte_ist", "charletlists", "char2number", "cmd_set", "charListdata", " charlistList", "char2lists", "cmdlenlist", "charetlist", "char2list", "charlennumber", "char_data", "cmdlennumber", "char64range", "charletdata", "cmd_list", " char_LIST", "char64List", "byte_data", " char_names", "character_list", "character_group", "charListist", "cmdlenlists", "charetnumber", "cmd_lists", "char_set", "char64array", "char_text", "charletlist", " charlistlists", "cmdlenset", "charlistList", " charlistlist", "char_range", "byte_list", "charistgroup", "char64names", "charistlist", "charlisttext", "charlistlist"], "i": ["ind", "u", "ji", "phi", "ri", "ori", "in", "m", "iu", "gu", "ui", "chain", "ex", "json", "us", "me", "id", "ei", "info", "port", "ski", "iter", "hi", "ti", "ai", "I", "si", "ij", "pi", "a", "it", "x", "io", "multi", "qi", "li", "used", "rel", "j", "ims", "ix", "key", "di", "v", "ic", "uri", "q", "y", "on", "mi", "im", "cli", "ci", "slice", "h", "index", "batch", "e", "my", "o", "at", "ie", "is", "n", "ii", "status", "sim", "xi", "ip", "err", "gi"], "c": ["arc", "dc", "ec", "cu", "char", "sc", "cont", "cs", "chain", "vc", "ch", "cur", "current", "fc", "C", "bc", "lc", "cr", "l", "name", "mc", "cb", "content", "v", "q", "ct", "ci", "ca", "abc", "h", "tc", "cf", "ce", "comp", "ac", "etc", "coll", "cm", "cp", "code", "unc", "col", "n", "gc", "k", "cos", "cap", "f", "cod", "cc", "cat", "cache"]}}
{"code1": "package humaneval.buggy;\n\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n//     Example:\n//     even_odd_count(-12) ==> (1, 1)\n//     even_odd_count(123) ==> (1, 2)\n\npublic class EVEN_ODD_COUNT {\n    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n        for (char c : (num + \"\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n}\n", "substitutes": {"num": ["zero", "from", "nu", "p", "b", "no", "sum", "m", "cu", "mon", "mn", "NUM", "id", "cal", "nam", "Num", "om", "um", "multi", "x", "number", "hon", "name", "nb", "su", "Number", "ad", "nm", "umber", "umer", "np", "o", "n", "nom", "ident", "tim", "th"], "even_count": ["pairfullimit", "evenfulsuccess", "evennesstoken", "evensarea", "evenitysuccess", "pairfulsuccess", " even_weight", "evennessfound", "pair_limit", "evenfulconfig", "own_area", "own_group", "pairfulcount", "pairfulconfig", "evenfulcount", "even_limit", "evenlyarea", "even_group", "pair_config", "pair_count", " evennesstoken", " evennessfound", "evensgroup", "evenlygroup", "evenityconfig", "evennessweight", "even_area", "evenscount", "evenlylimit", " even_token", "own_Count", "evensCount", "even_Count", "evenitycount", "pair_success", "evenlycount", "evenfullimit", "evenitylimit", "even_success", " even_found", "even_weight", "evenlyconfig", "even_found", "evennesscount", "evenlyCount", "even_config", " evennessweight", "own_count", "evenlysuccess", "even_token", " evennesscount"], "odd_count": ["oddJcount", "dd_cache", "odd_scope", "technical42count", "odd_number", "odd14scope", "dd_group", "odd42cache", "odd2number", "odd2count", "odd42count", "technical_count", "odd14count", "odd14cache", "technical_cache", "odd2Count", "odd42scope", "oddJfound", "oddJgroup", "odd_cache", "odd_Count", " odd_code", "technical42cache", "oddJcache", " odd_Count", "odd_found", "odd14hash", "technical_scope", "odd_hash", "technical_hash", "odd42hash", "odd2code", "technical42hash", " odd_number", "odd_group", "odd_code", "dd_found", "technical42scope", "dd_count"], "c": ["con", "arc", "dc", "ec", "b", "cu", "m", "anc", "sc", "cont", "cs", "ch", "rc", "cur", "co", "a", "bc", "C", "count", "x", "lc", "xc", "l", "cr", "ctrl", "ic", "v", "q", "ct", "ci", "cv", "abc", "h", "tc", "cf", "ce", "uc", "ac", "fac", "etc", "cm", "cp", "unc", "gc", "n", "k", "f", "pc", "cc", "t", "cache"]}}
{"code1": "package humaneval.buggy;\n\n/* Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\" */\n\npublic class CIRCULAR_SHIFT {\n    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n            return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        }\n    }\n}\n", "substitutes": {"x": ["xxx", "ox", "p", "xf", "ctx", "xt", "ex", "ux", "px", "z", "xx", "inx", "xc", "X", "ix", "xxxx", "v", "rx", "y", "w", "tx", "xa", "wx", "h", "xs", "xd", "xy", "xe", "e", "dx", "xi", "t", "fx", "xp"], "shift": ["set", "sign", "sub", "axis", "pad", "stack", "sq", "exp", "hold", "box", "sup", "escape", "help", "skip", "store", "length", "sh", "hift", "focus", "ssh", "snap", "pop", "aug", "diff", "j", "ix", "offset", " shifted", "tip", "slice", "add", "window", "index", "h", "pull", "right", "left", "handle", "shape", "block", "star", "scale", "share", "transform", "pause", "shr", "align", "size", "has", "delay", "Shift", "command", "push", "center", "start"], "s": ["sv", "p", "b", "ls", "sp", "sq", "m", "se", "sg", "bs", "g", "es", "ats", "sort", "its", "sw", "sl", " ss", "ms", "sa", "ins", "z", "res", "ps", "less", "l", "fs", "st", " str", "sing", "str", "sol", "w", "sql", "ns", "h", "sys", "scl", "ws", "string", "abs", "hs", "so", "ts", "qs", "xs", "S", "sf", "is", "sts", "parts", "js", "ings", "bits", "f", "gs", "single", "t", "rs", "ss"], "sb": ["eb", "bh", "ssl", "ub", "SB", "b", "ls", "bn", "sp", "wb", "sq", "lb", "sg", "bb", "bs", "shell", "zb", "obb", "sl", "lp", "bd", "sa", "mb", "rob", "pb", "ob", "nb", "fb", "cb", "erb", "ib", "bj", "bt", "sql", "rb", "bp", "sbm", "bf", "bg", "gb", "sf", "sth", "gc", "db", "kb", "ab"], "i": ["phi", "ori", "oi", "m", "iu", "ui", "ei", "id", "hi", "ti", "iter", "ai", "I", "si", "pi", "li", "multi", "io", "ms", "it", "qi", "zi", "PI", "j", "ix", "di", "uri", "v", "ic", "q", "y", "mi", "mu", "cli", "ci", "index", "ini", "\u0438", "ni", "is", "bi", "ii", "n", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n// Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\n\npublic class RIGHT_ANGLE_TRIANGLE {\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c;\n    }\n}\n", "substitutes": {"a": ["aa", " fa", "da", " sa", "aj", " ax", "ata", " at", "aaa", " ca", " na", "x", "sa", "al", "ea", "am", "ta", "ba", "ar", " pa", "xa", " ba", "ao", "ca", "la", "oa", " A", "va", "ac", "A", "ia", "sta", "r", "e", "i", "at", "as", "d", "aq", " ra", "ae", "t", "ma", "ab", " an", "ak", "an"], "b": ["u", "eb", "ub", "wb", "bb", "g", "bs", "B", "z", "bc", "l", "abb", "ob", "nb", "ba", "cb", "fb", "v", "y", "be", "ib", "rb", "ca", "abc", "br", "bf", "r", "e", "i", "gb", "bi", "n", "d", "f", "db", "cc", "bl", "ab"], "c": ["u", "ec", "dc", "cd", "cu", "cs", "g", "co", "fc", "C", "bc", "lc", "cr", "l", "cb", "ic", "v", "ct", "ci", "ca", "cv", "h", "tc", "ce", "cin", "cf", "ac", "etc", "cm", "e", "r", "cp", "sec", "d", "f", "cc", "t"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n */\n\npublic class INTERSECTION {\n    public static boolean is_prime(int num) {\n        if(num == 0 || num == 1) return false;\n        if(num == 2) return true;\n        for(int i = 2; i <= num; i++) {\n            if((num % i) == 0) return false;\n        }\n        return true;\n    }\n    public static String intersection(int[] interval1, int[] interval2) {\n        int l = Math.min(interval1[0], interval2[0]);\n        int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n}\n", "substitutes": {"num": ["con", "zero", "nu", "coord", "p", "mn", "no", "sum", "mon", "m", "draw", "total", "dim", "g", "NUM", "cal", "nam", "to", "mult", "net", "Num", "nt", "none", "um", "multi", "bc", "count", "number", "unit", "result", "util", "nb", "Number", "uni", "mu", "dev", "bo", "nm", "block", "na", "rem", "perm", "mem", "np", "uf", "tu", "ul", "alph", "n", "nom", "non", "tim", "den", "msg", "th", "orig", "dec"], "i": ["u", "phi", "ri", "oi", "m", "gu", "iu", "ui", "g", "us", "hi", "iter", "ti", "ai", "I", "si", "ki", "pi", "li", "multi", "ms", "it", "by", "qi", "io", "x", "zi", "fi", "j", "ix", "di", "ic", "q", "y", "mi", "im", "iq", "ci", "mu", "cli", "ini", "ie", "o", "span", "bi", "is", "n", "ii", "d", "sim", "xi", "ip", "t", "init", "gi"], "interval1": ["intvalOne", "intersect11", "interpretmediate001", "intvals11", "interpoint1", "interpretmediate1", "intersectionOne", "interpoint2", "interpretval001", "INTERpointOne", "interval0", "intersection1", "interpretval01", "intval1", "intersect2", "intvals1", "intvalsOne", "interpretmediate01", "intersection01", "interpretmediateOne", "interv01", "interpointOne", "interv0", "interv1", "interpoint001", "interpoint01", "interval001", "intersect1", "intervalOne", "intvals2", "intervals2", "interpoint0", "intervals1", "intermediateOne", "intersectOne", "intervalsOne", "intval2", "intermediate01", "interpoint11", "intervOne", "interval01", "interval11", "INTERvalOne", "INTERpoint1", "intersection0", "intervals11", "INTERval1", "intermediate001", "INTERpoint01", "intermediate1", "interpretval1", "interpretvalOne", "INTERpoint0", "intval11", "INTERval01", "INTERval0"], "interval2": ["interpoint42", "interrangetwo", " interval4", " intervals2", "intersection4", "interrupt4", "interpoint2", "intervals4", "interval0", "pretable02", "interangletwo", "interval42", "intersection1", "intersect2", "prevaltwo", "interrupt2", "preval02", "interference42", " intervals1", "interpretference0", "interval4", "interrangeTwo", "interrange02", "intertableTwo", "interpointSecond", "interangleTwo", "prevalTwo", "intersectSecond", "intervals2", "intertabletwo", "interpoint0", "interangle2", " intervals4", "intervals1", "interference2", "interferenceSecond", "intervalSecond", "interpretval42", "preval2", "pretable2", "intervaltwo", "intertable02", "intersection2", "intertable2", "interpretvalSecond", "interference0", "interrange2", "intervalTwo", "pretableTwo", "interpretferenceSecond", "intersect0", "interrupt1", "interval02", "interangle02", "interpretval2", "interpretference42", "pretabletwo", "interpretference2", "intersect42", "interpretval0"], "l": ["u", "lr", "p", "b", "ls", "m", "lb", "g", "nl", "len", "L", "loc", "sl", "lp", "ln", "lit", "li", "x", "lc", "j", "v", "ll", "h", "left", "pl", " L", "e", "o", "n", "k", "d", "f", "le", "t", "lin", "el"], "r": ["max", "u", "lr", "run", "p", "ri", "b", "re", "m", "g", "end", "er", "rr", "tr", "x", "res", "rel", "j", "ar", "R", "w", "q", "rb", "h", "c", "rt", "right", "rd", "range", "ref", "e", "ry", "mr", "n", "d", "f", "t", "nr", "rs"], "length": ["ind", "max", "ngth", "ength", "phi", "data", "Length", "p", "no", "total", "vector", "ENGTH", "end", "integer", "len", "L", "position", "loc", "sl", "enth", "z", "join", "count", "value", "number", "result", "j", "v", "path", "h", "width", "string", "duration", "idth", "shape", "sequence", "n", "k", "d", "f", "collection", "row", "size", "t", "padding"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n */\n\npublic class MIN_SUBARRAY_SUM {\n    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n            s += num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n", "substitutes": {"nums": [" noms", "annumbers", "numbers", "commumbers", " numbs", "Numps", "enoms", "neumbers", " nims", "Nums", "annumbs", " namps", "sames", "neums", "names", "snames", " numeric", "numa", "snuma", "sums", " names", "sumps", "enumbers", " numer", "snumps", "commumeric", " numps", " numa", "Nails", " numbers", "numps", "annums", "nails", "namps", "annumps", "enims", "noms", "enums", "Numbs", "Noms", " nails", "Nims", "Numbers", "numbs", "numeric", "commums", "commails", "Numer", "snums", "suma", "neamps", "nims", "Namps", "neumer", "Numeric", "numer"], "max_sum": ["max_mix", "MAX2sum", "maxfultotal", "MAX_um", " max_total", "maxmatSum", "MAX2diff", "max9Sum", "maxfulsum", "iternetpool", "ax_sam", "max10square", "max2total", "max_size", "iter_sum", "max10sum", "maxmatdiff", "med_Sum", "max_sam", "maxfulum", "max2sum", "max_min", "max_tail", "max10total", "med_sum", "max9sam", "maxmatum", "maxLpool", "med_tail", "maxfultail", "max_total", " max_Sum", "iternetcum", "MAX2Sum", "iter_set", "max2mean", "iternetsum", "maxLsum", "max2um", " max_tail", " max_mem", "max10mean", "iter_pool", "iter_cum", "iternetset", "max2Sum", "max_cal", "min_um", "maxfulmin", "max_um", "maxLcum", "maxnetsum", "max_set", "min_min", "max___sum", "max___Sum", "max_pool", "max_process", "maxnetset", "max___sam", " max_mean", "max2diff", "med_size", "maxnetpool", "max_square", "MAX_Sum", "max_mean", "maxnetcum", "max9sum", "max2square", "max___process", " max_square", "MAX_diff", "max_diff", "min_mix", "max_Sum", " max_cal", "maxmatsum", "max9process", "max_mem", "MAX2um", "maxLset", "MAX_sum", "ax_Sum", "ax_sum", "ax_process", "max_cum", "maxfulmix"], "s": [" samples", "set", " b", "conv", "p", "b", "ls", "sq", "m", "comm", "g", "bs", "es", " x", "sb", "ats", "sort", "its", "sw", " ss", "ms", "ins", "sym", "changes", "ps", "sam", " so", "less", " ns", "str", "sol", "w", " is", " numbers", " l", "ends", "ns", "h", "c", "sys", " ts", "hs", "string", "save", "os", "ts", "qs", "stats", " fs", "S", "sts", "gets", "n", "js", "span", "d", " mins", "ds", "cons", "f", "gs", "sim", "t", "stat", " has", "rs", "ss"], "num": ["nu", "b", "no", "sum", "m", "sc", "g", "NUM", "integer", "cal", "nam", "info", "Num", "um", "en", "x", "sym", "number", "sam", "name", "un", "Number", "index", "nm", "sm", "ge", "na", "node", "o", "np", "local", "n", "nom", " number", "sim", "single", "t", "th", "obj"], "i": ["ind", "u", "ji", "phi", "ri", "point", "m", "gu", "ui", "ei", "us", "id", "info", "hi", "ti", "iter", "ai", "I", "si", "ki", "pi", "li", "multi", "io", "it", "qi", "zi", "j", "ix", "uri", "di", "key", "ic", "v", "q", "y", "mi", "mu", "cli", "ci", "inner", "ini", "\u0438", "o", "ie", "is", "bi", "ii", "n", "f", "sim", "xi", "init", "gi"], "min_sum": ["minolycal", "minolytotal", "initial_total", "min_total", "MIN_sum", "MIN_um", "initial_cal", "min_um", "MIN_mean", "min_vol", "initial_sum", "min_cal", "min_mean", "minolyvol", "minolysum", "initial_vol"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * Given a non-empty list of integers, return the sum of all of the odd elements\n * that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n */\n\npublic class SOLUTION {\n    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"lst": ["Lbl", "lnd", "llsts", "plist", "lph", "lbl", "Lst", "Lsts", "plph", "llnt", "list", " lbl", "llnd", " lnt", "llist", "slist", " lsts", "olist", "olnd", "Lnt", "plst", "Lnd", "llst", "lnt", "slst", "olph", " lph", "lsts", " lnd", "plnd", "olst", "slnd", "slsts", " list", "llbl"], "result": ["zero", " resulted", "test", "expected", "vector", "total", "sum", "success", "relation", "mean", "output", "params", "integer", "goal", "product", "found", "current", "different", "currency", "other", "value", "now", "diff", "Result", "created", "ret", "strength", "complete", "power", "ULT", "cert", "duration", "fac", "primary", "results", "ult", "sequence", "r", "score", "date", "purpose", "transform", "mate", "make", "match", "message", "res", "front", "answer"], "i": ["ind", "u", "ji", "phi", "ri", "point", "ori", "in", "m", "iu", "gu", "ui", "oi", "yi", "ei", "us", "id", " ii", " di", "ogi", "hi", "ti", "ai", "I", "si", "ki", "client", "ij", "li", "pi", "multi", "x", "io", "it", "qi", "ik", "fi", "ami", "j", "ix", "uri", "di", "ic", "q", "y", "mi", "im", "cli", "ci", "index", "c", "ini", "my", "print", "o", "is", "bi", "ii", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n */\n\npublic class REVERSE_DELETE {\n    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(c.indexOf(s.charAt(i)) != -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n}\n", "substitutes": {"s": ["sv", "conv", "b", "ls", "sq", "g", "sb", "es", "bs", "ies", "ats", "its", "a", "ids", "ms", "ins", "ps", "l", "less", "st", "str", "ims", "raw", "sol", "sql", "ns", "h", "abs", "string", "ashes", "os", "ts", "qs", "xs", "r", "S", "is", "sts", "aws", "n", "js", "parts", "ds", "gs", "t", "ses", "rs", "ss"], "c": ["con", "arc", "dc", "ec", "cu", "b", "m", "csv", "cont", "cs", "g", "chain", "cl", "rc", "toc", "co", "fc", "C", "bc", "lc", "cr", "enc", "l", "mc", "v", "ct", "crit", "abc", "cf", "tc", "cin", "uc", "ac", "etc", "coll", "unc", "gc", "col", "f", "cc", "conf"], "new_s": ["nextptx", "unique_sl", "new___s", " new_sq", "newptsource", " new_i", "newertsl", "next_js", "reverse_is", "new1is", "uniqueertsl", "newloge", "new_source", "newmdi", "reverselogs", "newerts", "old_ls", "newpti", "unique_is", "new_is", "newloghas", "newmds", " new_stats", "nextptsql", "newLogS", "uniqueertS", "new_sl", "unique_S", "new_i", "next_x", "newLogis", "new1s", "newmdsource", "new1e", "newlogis", "new_ls", "unique_s", "new_e", "next_sql", "next_s", "new_has", "newmdls", " new_ls", "new_stats", "newertis", "uniqueerts", "new___S", "newptsql", "reverseloghas", "new_sql", "newLogs", "new___sl", "reverselogis", "old_s", "reverse_has", "reverseloge", "new___is", "newptx", "newptjs", "new_x", "nextptjs", "reverse_e", "old_c", " new_source", "new_js", "new1has", "newptls", "nextpts", "newLogsl", "newertS", "new_S", "newpts", "new_c", "uniqueertis", "newlogs", "new_sq"], "i": ["ji", "asi", "oi", "ei", "us", "ai", "multi", "x", "ims", "uri", "uli", "im", "iy", "print", "o", "is", "ii", "to", "u", "ori", "iu", "me", "ti", "hi", "iter", "client", "remote", "li", "it", "ami", "ms", "check", "v", "ini", "\u0438", "err", "init", "gi", "phi", "ri", "point", "in", "ui", "info", "port", "pi", "io", "PI", "ix", "di", "index", "my", "m", "chain", "si", "ki", "qi", "fi", "zi", "j", "ic", "q", "y", "mi", "iq", "cli", "ci", "inner", "ni", "ie", "bi", "f", "sim", "xi", "ip"], "reverse_s": ["reversedevsq", " reverse_p", "default_g", "reverseajp", "reverse_string", "super_string", "default_s", "super_sys", "reverse_i", "reverseajs", "reverseajsql", "reverseajsp", "default_h", "reversedevstring", "reverse_h", "reverse_g", "reverse_sp", "reverse_sq", " reverse_sql", "reverse_p", "default_i", "reverse_sys", " reverse_sp", "reversedevs", "super_sq", "reversedevsys", "super_s", "reverse_sql"], "res": ["mont", "cond", "resources", "clus", "val", "re", "bs", "us", "repl", "rc", "out", "RES", "usr", "list", "aux", "ms", "gr", "result", "rek", "rel", "resp", "ret", "ps", "sol", "rs", "rez", "pres", "rest", "arr", "ber", "sys", "rt", "right", "rem", "results", "os", "fr", "r", "pas", "req", "conn", "ref", "we", "ress", "red", "rev", "reset", "cons", "Res", "rus", "err", "vec", "reg", "obj", "resh"]}}
{"code1": "package humaneval.buggy;\n\n/* Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers (double) can be converted integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False */\n\npublic class ANY_INT {\n    public static boolean any_int(double x, double y, double z) {\n        if ((int)x == x && (int)y == y) {\n            if (x + y == z || x + z == y)\n                return true;\n        }\n        return false;\n    }\n}\n", "substitutes": {"x": ["ox", "xf", "lex", "xt", "act", "ex", "ux", "mx", " cx", "px", "a", "lon", "xx", " xx", "xc", "X", "l", "zx", "ax", "ix", "v", "rx", "tx", "lat", "w", "xa", "wx", "width", "h", "yx", "xs", "xy", "xe", "xd", "i", "dx", "xi", "hex", "fx", "xp"], "y": ["zy", "vy", "ey", "yer", "gy", "b", "Y", "ble", "ya", "yi", "g", "cy", "ies", "axy", "ny", "yt", "ye", "yd", "yy", "ym", "yz", "xx", "by", "ys", "j", "v", "ay", "q", "yl", "iny", "ty", "hot", "ery", "iy", "uy", "fy", "ly", "my", "xy", "i", "o", "ry", "oy", "sky", "t", "sy", "py"], "z": ["zy", "uz", "gz", "g", "Z", "zo", "cz", "yz", "zh", "iz", "zz", "ld", "zag", "xx", "zi", "l", "j", "zx", "ez", "v", "w", "q", "wx", "zer", "nz", "h", "tz", "ly", "zone", "xy", "zip", "i", "ze", "az", "s", "d", "hz", "oz", "t"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n\n */\n\npublic class COMPARE_ONE {\n    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n        if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n        if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n}\n", "substitutes": {"a": ["u", "aka", "aa", "from", "ga", "data", "da", "p", "au", "m", "act", "g", " \u00e0", "aj", "ata", " at", "aaa", "aria", "aux", "it", " ya", "x", "sa", "al", "ea", "admin", "all", "ach", "l", "am", "ba", "ar", "v", "w", "y", "ao", "ca", "oa", "la", "h", "area", "c", "va", "ac", "A", "ia", "att", "e", "r", "o", "i", "at", "as", "s", "n", "pa", "d", "f", "fa", "app", "ra", "apa", "alpha", "ae", "t", "ma", "ab", " an", "an"], "b": ["u", "eb", "bh", "base", "p", "wb", "m", "bb", "sb", "bs", "g", "out", "B", "bis", "other", "z", "bc", "it", "by", "mb", "pb", "l", "ob", "j", "fb", "nb", "cb", "bound", "v", "y", "be", "ib", "rb", "another", "c", "bp", "bin", "br", "e", "r", "o", "i", "bi", "n", "k", "d", "f", "db", "beta", "t", "ab", "bar"], "temp_a": [" temp2b", " tempEca", " tempEae", "temp2a", "temp2c", " temp2an", "temp2ae", "temp00a", "temp___0", "temp2ao", "temp2la", "temp2b", " temp_an", "tmp_a", "tempEae", " temp2ao", "tempEca", "temp_sa", "temp_ia", "temp_ae", "emp_a", "tempEa", "tem_a", "tem_ia", "tmp_la", "emp_ia", "perm_A", "temp_la", "emp_an", "emp_oa", "temp2ca", "tmp_A", "temp0an", "temp_0", "temp___an", "tem_an", "perm_b", "tempPia", "tempPa", " tempEao", "temp0ao", "perm___a", "temp_oa", "temp0a", "tempPoa", "temp0b", "temp_c", "tem_sa", "temp___b", " temp_ao", "tempPan", "perm___0", "temp00ia", "temp00sa", " temp_ca", "temp___A", "tmp_c", "temp2A", " temp2a", "perm_a", "perm___b", "temp_ao", " tempEa", "perm___A", "temp00an", "temp_ca", " temp_ae", "temp___ia", "temp_A", "temp_an", "temp2an", "temp___oa", "tempEao", "perm_0", "temp___a"], "temp_b": ["temp_it", "tmp_b", " temp2b", "temp2a", "tmp2bb", "temp2it", "tmp_bb", "temp_d", "temp10it", "tmp2b", "tmp2d", "temp2b", "tmp_a", " temp2it", "read_r", "temp_beta", "tmp_r", "temp2n", "temp_rb", "mp_br", "temp_bl", "temp_eb", " temp2B", "temp67B", "temp2d", "temp10eb", " temp_beta", "tmp_n", "tmp2r", "temp2bl", "temp10B", "temp2B", "temp_B", " temp_it", "temp2r", "temp10b", "temp67beta", "read_b", "mp_r", "temp2bb", " temp_eb", "read_bl", "temp67rb", "mp_sb", "temp_bb", "read_a", "tmp_d", "mp_b", "temp67b", "temp2eb", "temp_sb", "tmp_B", " temp_rb", "temp_br", " temp2eb", "temp_r", " temp_B", "temp_n"], "temp_a_string": ["temp_a_ring", "temp_a__ring", "temp_as_str", "temp_as_status", "temp_a2str", "temp_aresstring", "temp_A_string", "temp_a_strings", "temp_a__string", "temp_A_str", "temp_A_ring", "temp_ae_str", "temp_a_String", "temp_a_text", "temp_aresstr", "temp_A2str", "temp_ae_text", "temp_aa_str", "temp_a2string", "temp_aa_uri", "temp_a_uri", "temp_a2ring", "temp_A2string", "temp_ae_string", "temp_a_str", "temp_as_string", "temp_aressign", "temp_A2ring", "temp_a_sign", "temp_aa_sign", "temp_a__str", "temp_a_status", "temp_aresuri", "temp_as_String", "temp_aa_string", "temp_ae_strings"], "temp_b_string": ["temp_n_series", "temp_a_ring", "temp_a_prefix", "temp_a_number", "temp_b_prefix", "temp_b_ring", "temp_b_String", "temp_n_value", "temp_b2String", "temp_b2ring", "temp_bmmseries", "temp_b2strings", "temp_n_string", "temp_a_strings", "temp_a_String", "temp_bmmstring", "temp_bmmvalue", "temp_b_str", "temp_b_space", "temp_a_str", "temp_a_space", "temp_b_series", "temp_b_strings", "temp_b2string", "temp_bmmprefix", "temp_b_number", "temp_b_value", "temp_n_prefix"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\npublic class LONGEST {\n    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n            if (strings.size() > string.length()){\n                maxlen = strings.size();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n}\n", "substitutes": {"strings": ["finals", "ers", "obs", "lets", "ints", "scripts", "vs", "services", "ls", "suits", "details", "eds", "years", "roots", "workers", "sites", "ies", "inters", "objects", "groups", "states", "names", "outs", "chains", "codes", "nets", "ins", "dos", "ians", "ids", "changes", "mers", "idents", "prints", "str", "ims", "faces", "ants", "values", "pins", "files", "sql", "issues", "actions", "fixes", "ties", "dies", "rings", "styles", "docs", "posts", "qs", "types", "keys", "ires", "parts", "sts", "gets", "ings", "terms", "items", "views", "gs", "units", "games", "lists", "lines", "tags"], "maxlen": ["Maxen", "actlength", "endlength", "maxen", "MAXLen", "actlen", "endlen", " maxen", "maxlan", "viewlength", "endLen", "MAXrel", " maxLen", "endrel", "Maxrel", "maxlength", "moden", "maxrel", "modLen", "MAXlen", "maxLen", "actLen", "modlength", "Maxlen", "MAXlength", "viewlen", "modlen", "actlan", "MaxLen", "viewLen", "viewlan", "Maxlength", " maxlength", " maxlan"], "string": ["resource", "filename", "subject", "missing", "char", "character", "source", "link", "group", "instance", "ring", "integer", "space", "escape", "length", "pattern", "element", "spec", "pair", "list", "word", "prefix", "state", "join", "value", "buffer", "number", "result", "name", "str", "line", "entry", "key", "service", "format", "complete", "back", "piece", "sql", "object", "iterator", "sound", "section", "comment", "password", "sequence", "print", "image", "text", "component", "row", "status", "single", "future", "user", "file", "command", "match", "message", "start"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n */\n\npublic class VALID_DATE {\n    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n                if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n}\n", "substitutes": {"date": ["update", "set", "page", "reason", "data", "call", "note", "trade", "request", "ate", "create", "json", "cal", "night", "remote", "dt", "value", "close", "diff", "number", "address", "log", "gate", "grade", "name", "str", "url", "on", "format", "late", "when", "Date", "event", "te", "message", "string", "today", "daily", "send", "duration", "work", "go", "start", "comment", "zone", "range", "print", "iso", "code", "mail", "clean", "text", "dat", "die", "week", "network", "file", "document", "time", "tag"], "date_info": ["day_info", "date8information", "day_inner", "day_data", "use_information", "debug_info", "date_trans", "debug_success", "Date_info", "date_data", "date_report", "use_info", "date_query", "date0trans", "event_INFO", "date_Info", "date_inf", "date_INFO", "date8info", "day_inf", "Date_show", "use_fo", "date_show", "Date_Info", "date8success", "Date_query", "date_inner", "date0info", "date8report", "debug_information", "date_fo", "event_trans", "event_info", "date_success", "use_Info", "date0INFO", "debug_report", "date_information"], "month": ["con", "mini", "ver", "page", "part", "mon", "num", "method", "m", "total", "char", "min", "mean", "may", "me", "port", "length", "position", "night", "tr", "term", "um", "hour", "word", "number", "quarter", "type", "mod", "field", "age", "man", "mm", "mask", "table", "mb", "mo", "mode", "form", "major", "mt", "Month", "period", "mass", "block", "version", "perm", "module", "mobile", "tom", "member", "username", "bug", "oct", "row", "market", "user", "minute", "time", "century", "tag"], "day": ["cond", "sign", "da", "run", "dd", "num", "no", "min", "draw", "mon", "note", "sum", "and", "end", "des", "id", "Day", "cal", "length", "condition", "out", "night", "co", "rand", "hour", "word", "dt", "diff", "number", "mod", "all", "column", "drop", "on", "cycle", "ay", "when", "dis", "piece", "add", "dev", "default", "today", "daily", "DAY", "block", "odd", "work", "de", "days", "save", "noon", "code", "desc", "dat", "d", "week", "member", "row", "size", "delay", "session", "file", "nesday", "time", "start"], "year": ["ver", "mon", "id", "night", "hour", "number", "type", "age", "name", "ay", "y", "Year", "sec", "col", "n", "d", "week", "oy", "size", "time", "century", "start"], "month_check1": ["month_checks1", "month_keyOne", "month_walkOne", "month_walk41", "month_key41", "month_look1", "month_goodOnce", "month_check6", "month_search3", "month_good1", "month_checkable", "month_search0", "month_check0", "month_check41", "month_search6", "month_look3", "month_key1", "month_find6", "month_find3", "month_checksable", "month_good6", "month_searchOnce", "month_check3", "month_good3", "month_checks41", "month_find1", "month_checksOne", "month_checkOnce", "month_keyable", "month_checkOne", "month_findOnce", "month_walk1", "month_look0", "month_walkable", "month_search1"], "i": ["ji", "set", "phi", "ri", "asi", "oi", "m", "in", "exp", "ui", "g", "ei", "us", "me", "series", "info", "er", "ski", "ti", "ai", "si", "ki", "ij", "li", "pi", "multi", "io", "ms", "it", "qi", "PI", "zi", "j", "ix", "uri", "di", "key", "ic", "v", "q", "y", "mi", "iq", "cli", "ci", "ini", "\u0438", "e", "span", "bi", "is", "ii", "s", "status", "sim", "xi", "ip", "err", "init", "gi"], "month_check2": ["month_checks1", "month_help6", "month_key02", "month_key2", "month_Check1", "month_Check4", "month_look1", "month_check6", "month_help2", "month_key3", "month_Check3", "month_check0", "month_checks6", "month_info3", "month_key0", "month_look3", "month_checks2", "month_Check2", "month_check4", "month_check02", "month_Check6", "month_info02", "month_look4", "month_info0", "month_look02", "month_check3", "month_look6", "month_look2", "month_help1", "month_checks3", "month_look0", "month_help4", "month_info2"]}}
{"code1": "package humaneval.buggy;\n\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptException;\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( / ) \n// Exponentiation ( ** ), deprecated in Java\n\n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n\n// Note:\n//     The length of operator list is equal to the length of operand list minus one.\n//     Operand is a list of of non-negative integers.\n//     Operator list has at least one operator, and operand list has at least two operands.\n\npublic class DO_ALGEBRA {\n    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        String expression = \"\";\n        for (int i = 0; i < operand.length; i += 1) {\n            expression += operator[i] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n}\n", "substitutes": {"operator": ["owner", "alter", "axis", "adder", "atom", "attribute", "integer", "condition", "position", "ops", "variable", "direction", "prefix", "linear", "oper", "equality", "argument", "der", "major", "average", "author", "atomic", "OPER", "inner", "operation", "iterator", "op", "production", "comment", "ter", "or", "order", "factor", "rule", "function", "command", "ator"], "operand": ["perAND", "perands", "Operands", "OPERator", "OPERand", "OPERband", "OPERant", "Operator", "operband", "Operband", "OPERAND", "perand", " operband", " operands", "Operand", " operAND", "Operant", "OPERands", " operant", "perant", "operant", "operAND", "operands"], "mgr": ["grav", "gmgr", " mman", "tmdr", "gdr", " mdr", "tmgr", "mrav", "gmGR", "migr", "miGR", "mdr", "miman", "gmmg", "mman", " mGR", " mGr", "tmrav", " mmg", "mimg", "tmGr", "mGr", "ggr", "gmman", " mrav", "gGr", "mmg", "mGR"], "engine": ["Engine", "server", "settings", "eng", "ve", "m", "handler", "me", "reflect", "driver", "express", "buffer", "query", "view", "console", "gate", "evaluate", "template", "impl", "context", "system", "model", "window", "index", "enable", "database", "manager", "machine", "e", "module", "eval", "code", "core", "metadata", "network", "profile", "cache", "connection"], "expression": ["history", "verb", "exp", "program", "document", "attribute", "input", "output", "integer", "pattern", "series", "condition", "external", "position", "ression", "variable", "term", "express", "value", "application", "query", "equality", "evaluate", "template", "ion", "script", "event", "sql", "language", "string", "operation", "comment", "search", "statement", "sequence", "description", "password", "expr", "usage", "component", "rule", "xml", "network", "sample", "definition", "function", "connection", "command", "message", "javascript"], "i": ["ind", "u", "set", "phi", "ri", "point", "ori", "in", "m", "ui", "g", "ei", "chain", "us", "me", "id", "info", "hi", "ti", "ai", "I", "si", "pi", "li", "multi", "x", "it", "io", "qi", "zi", "j", "ims", "key", "di", "ix", "v", "ic", "uri", "q", "y", "mi", "im", "ci", "c", "index", "inner", "ini", "batch", "is", "bi", "ii", "k", "sim", "size", "xi", "ip", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5 */\n\npublic class TRIANGLE_AREA {\n    public static double triangle_area(double a, double h) {\n        return a * h;\n    }\n}\n", "substitutes": {"a": ["aa", "da", "b", "au", "act", " \u00e0", " at", "aaa", " ca", "sa", "al", "ea", "ach", "am", "ta", "ba", "ar", " pa", " ba", "ca", "la", "area", "va", "ac", "A", "ia", "sta", "at", "as", "pa", "aq", "alpha", "ae", "ma", "ab", " an", "an"], "h": ["bh", "H", "phi", "b", "ho", "height", "hr", "uh", "hl", "m", "g", "help", "ch", "sh", "length", "hi", "ish", "rh", "hhh", "hd", "l", "v", "oh", "w", "dh", "hh", "hs", "he", "ah", "ih", "ph", "hz", "kh", "th", "ha"]}}
{"code1": "package humaneval.buggy;\n\npublic class HOW_MANY_TIMES {\n    public static int how_many_times(String string, String substring) {\n        int times = 0;\n        for (int i = 0; i < string.length() - substring.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n", "substitutes": {"string": ["test", "data", "filename", "re", "subject", "char", "source", "group", "chain", "input", "ring", "strings", "pattern", "space", "escape", "spec", "word", "prefix", "null", "value", "buffer", "unit", "address", "name", "str", "format", "complete", "parse", "system", "sql", "version", "section", "comment", "search", "title", "scale", "sequence", "description", "print", "module", "text", "network", "ident", "sample", "translation", "STR", "function", "command", "project", "tag"], "substring": ["subjectstring", "subjectring", "subtest", "searchstring", "superformat", "SubString", "singring", "superpart", "searchring", "ubString", "subjectstr", "newstring", "Substr", " subchar", "Subchar", "searchstr", "ubstr", "newring", "ubstring", "subString", "replacestr", "Subsection", "searchString", "replacepart", "superchar", "ubchar", "Subring", "substr", "Subserver", "ubserver", "subformat", "singstring", "ubtest", "newstr", "subchar", " subtest", "subjectsection", "singstr", "replacestring", "subserver", " subformat", "newString", "Subtest", " subserver", "subpart", "superString", "replacechar", "subring", "Subpart", " subString", "subsection", " substr", "Substring", "singsection", "ubformat", "superstring", "superstr"], "times": ["versions", "modules", " tests", "oes", "total", "exp", "Times", "cs", " stamps", " tasks", "ces", "its", "cases", "ops", "months", "imes", "ures", "oms", "checks", "tests", "ims", "casts", "rix", "places", "etimes", "TS", "actions", "hours", "acts", "xes", "posts", "results", "ts", "types", " Times", "seconds", "terms", "comments", "blocks", "runs", "users", "ulations", " occurrences", "things", "units", " attempts", "rows", "events", "tions", "pages", "time", "tags", "caps"], "i": ["ind", "u", "phi", "ri", "b", "ori", "point", "in", "m", "iu", "gu", "ui", "oi", "yi", " I", "ei", "us", " ii", "ti", "iter", "hi", "ai", "I", "si", "ish", "ij", "ki", "pi", "a", "li", "x", "multi", "ms", "qi", "it", "ami", "zi", "l", "j", "ix", "ims", "di", "ic", "uri", "q", "y", "mi", "im", "iq", "ci", "cli", "index", "ini", "o", "is", "bi", "ii", "n", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/* Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == [] */\n\npublic class STRANGE_SORT_LIST {\n    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"lst": ["Lth", "lnd", "plnt", "laySt", "lamSt", "tst", "Llist", "lamnd", " lSt", "tnd", "plist", "tist", "Lst", "lbl", "tbl", "Lsts", " lth", "pllist", "list", "lamstro", "elth", "llnd", " lnt", "llist", "lSt", " lstro", " lsts", "lamst", "lth", "plst", "Lnt", "lstro", "laynd", "Lnd", "llst", "elst", "elist", "lnt", "elsts", " llist", "lsts", "layst", " lnd", " list", "llbl", "Lbl", "laystro"], "result": ["test", "part", "data", "vector", "total", "create", "response", "valid", "relation", "success", "output", "group", "goal", "product", "up", "out", "found", "current", "cur", "pair", "list", "currency", "buffer", "join", "folder", "Result", "over", "created", "error", "table", "ret", "complete", "reported", "mu", "tmp", "next", "default", "memory", "cert", "block", "true", "work", "primary", "feature", "report", "comment", "results", "print", "first", "local", "order", "collection", "mate", "trace", "profile", "user", "temp", "match", "message", "res", "answer"], "switched": [" switching", "Switch", "spitching", "switcher", "twitching", "witched", "shitching", "switching", "witching", "shitch", "Switching", "spitched", "twitch", "witch", "spitch", "twitches", "switches", " switcher", "spitcher", "shitches", "witcher", "twitched", "Switched", "shitched", "Switches"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.*;\n\n/* Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse */\n\npublic class SAME_CHARS {\n    public static boolean same_chars(String s0, String s1) {\n        ArrayList<Character> set0 = new ArrayList<Character>();\n        ArrayList<Character> set1 = new ArrayList<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n}\n", "substitutes": {"s0": ["p1", "rs0", "xs5", " s5", "xs6", "setos", "rs5", "p0", "s5", "rs6", "pos", "xs0", "sos", "set8", "p8", "s8", " sos", "xs1", " s8", "rs1", "s6", " s6"], "s1": [" s001", "s001", "seriesnew", "Snew", "series0", "S1", "S0", "S2", "s2", "sf2", "series1", "sf1", "sf0", "snew", "sf001", " s2", "series2", " snew", "S001"], "set0": ["group0", "subject2", "groupZero", "set2", " setzero", "sche2", "setfrom", "subjectzero", "subject0", "listfrom", "setZero", "setzero", "check0", "list1", "list0", "subject7", "sche7", "checkZero", "check1", "spacezero", " set7", "space1", "group1", "sche0", " setfrom", "spacefrom", "set7", "space0", "listzero", "schezero", "checkzero", "groupzero", " setZero", " set2"], "set1": ["see8", "subject2", " set001", "set2", "set11", "subject0", "draw7", "Set0", "Set2", "draw100", "see11", "set100", "set001", "subject1", "draw2", " set7", "sync11", "sync8", "subject001", " set8", "set7", "set8", "sync0", "track1", "Set1", "see1", "Set001", "track2", "track7", "track100", " set100", "draw1", " set11", "see0", " set2", "sync1"], "c0": ["eczero", " c10", "chain02", "ac0", "ec10", "enc1", "c5", " c02", " c5", "c10", "ac1", "chain0", "ac02", "ec0", "chain1", "chain5", "ac5", "enc0", "enc10", "czero", "ec1", "enczero", "c02", " czero"], "c1": ["vc9", "set81", "cu1", "tc0", "tc1", "ac0", "c6", "c81", " c01", "c9", "ac1", "cu0", "ac9", "vc1", " c81", "set01", "ac6", "tc01", "vc0", "c01", "cu6", "tc81", "vc6", "cu9"]}}
{"code1": "package humaneval.buggy;\n\n/* Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1. */\n\npublic class STARTS_ONE_ENDS {\n    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "mn", "p", "num", "note", "b", "m", "len", "nt", "ln", "a", "z", "nw", "x", "count", "number", "dn", "ne", "any", "l", "j", "nb", "w", "cn", "ns", "nor", "c", "nm", "nie", "nc", "nn", "na", "N", "i", "np", "k", "s", "d", "ng", "norm", "sn", "t"]}}
{"code1": "package humaneval.buggy;\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\n\npublic class DECIMAL_TO_BINARY {\n    public static String decimal_to_binary(int decimal) {\n        String result = Integer.toHexString(decimal);\n        return \"db\" + result + \"db\";\n    }\n}\n", "substitutes": {"decimal": ["Decimate", "decal", "Decim", " decal", "discim", "decum", "discum", " decimate", "decimate", "ecimal", "discimated", " decim", " decimated", "Decimated", "discimal", "Decal", "ecimate", "ecal", "decimated", " decum", "Decum", "Decimal", "ecim", "decim"], "result": [" resulted", "test", "reason", "data", "reverse", "trade", "response", "success", "relation", "output", "valid", "integer", "product", "cur", "current", "RESULTS", " Result", "false", "value", "buffer", "Result", " resulting", "ret", "name", "were", "su", "pak", "tmp", "default", "successful", "true", "report", "results", "r", "date", "dat", "cup", "db", "mate", "message", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.HashMap;\n\n// Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\npublic class CHECK_DICT_CASE {\n    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n                } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n}\n", "substitutes": {"dict": ["con", "ind", "update", "cond", "data", "da", "dd", "details", "sum", "info", "md", "ict", "df", "bind", "nt", "cur", "client", "dt", "hash", "hd", "def", "dir", "str", "doc", "map", "ad", "txt", "get", "cmd", "coll", "pd", "print", "nd", "text", "dat", "d", "ds", "db", "build", "del", "cache", "obj", "conf", "wd", "dec"], "state": ["test", "reason", "runner", "output", "policy", "out", "states", "STATE", "now", "unit", "admin", "allow", "event", "controller", "zone", "print", "sequence", "State", "local", "code", "attr", "scope", "cache", "command", "step", "progress", "back", "group", "store", "sort", "position", "what", "remote", "it", "type", "label", "mode", "force", "style", "version", "powered", "function", "err", "stat", "init", "race", "resource", "action", "point", "source", "info", "debug", "port", "old", "effect", "close", "ace", "reported", "the", "color", "block", "section", "comment", "stats", "operator", "trace", "trans", "see", "sync", "condition", "commit", "spec", "lower", "monitor", "addr", "error", "done", "rest", "art", "loop", "lock", "control", "memory", "show", "inner", "range", "component", "rule", "status", "config", "tag"], "key": ["ind", "owner", "ey", "page", "base", "val", "point", "ice", "char", "link", "ex", "mk", "parent", "cy", "id", "info", "air", "client", "pair", "KEY", "prefix", "value", "x", "query", "any", "ace", "name", "str", "entry", "y", "unk", "object", "index", "get", "node", "e", "my", "et", "cell", "ry", "col", "n", "k", "member", "item", "pri", "row", "Key", "obj", "ek"], "str_key": ["int_key", " str_value", "urlptkey", "float_val", "str___val", "floatptval", "float_my", "str___my", "strmtype", "strptcond", "int_type", "strptsum", "url_key", "floatptsource", "str_sum", "str_source", "url_char", "int_name", "int_page", "strmname", "str_box", "str___link", "str_keys", "urlptcond", "strptsource", "url_cond", "strmpage", "str_parent", "str_name", "str_prefix", " str_keys", "str___source", "urlptchar", "str_page", "str4pop", "hex_owner", "str4key", "strmkey", "str_value", "url_sum", "str___key", " str_pot", "str_char", "sta_pop", "floatptkey", "strptkey", "str_pop", "strptmy", "urlptsum", "str_pot", "hex_key", "str_type", "sta_key", " str_file", "str_my", "str_owner", "strptval", "sta_box", "strptchar", "float_source", "str_val", "str___value", "str_code", "str4prefix", "str4box", "str_file", "floatptmy", "str_link", "str___pot", "hex_code", "sta_prefix", "str_cond", "hex_parent", " str_link", "float_key"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\n\n/*\n * In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n */\n\npublic class EXCHANGE {\n    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst2) {\n            if((i % 2) == 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n", "substitutes": {"lst1": ["lST2", " lSTOne", "lnd3", "list1", "lndOne", "list3", "listOne", "list2", " lST2", " lstOne", "lnd1", "lSTOne", " lst3", " lST3", "lst3", " lST1", "lST3", "lST1", "lstOne", "lnd2"], "lst2": ["lndTwo", "List1", " lbl1", "lst4", "lbl3", " lbl2", "lST2", "elst1", "Lst0", "lSTTwo", "Lst4", "lnd3", "lstr0", "list1", " lbl3", "list0", "list3", "List0", "listTwo", "lstr1", "list2", "lnd1", "lbl2", "lnd0", "lstr4", "Lst2", " lst3", "lbl0", "lst0", " lst0", "List4", "Lst1", "lst3", "lbl1", " lbl0", "elST2", "lST3", "elST3", "elST1", "List2", "lstTwo", "lstr2", "elSTTwo", "list4", "lST1", "elst3", "elstTwo", "lnd4", "lnd2", "elst2"], "odd": ["ind", "expected", "dd", "no", "total", "draw", "od", "stable", "integer", "Even", "length", "equal", "found", "nt", "down", "x", "diff", "count", "number", "td", "error", "wind", "st", "done", "offset", "own", "add", "dev", "index", " Odd", "ly", "off", "nd", "d", "empty", "row", "dx", "ded", "start"], "even": ["ind", "zero", "con", "unknown", "set", "run", "dd", "no", "look", "draw", "success", "ex", "itt", "both", "integer", "end", "Even", "output", "debug", "stop", "up", "net", "ren", "change", "other", "rown", "down", "zen", "lower", "forth", "diff", "close", "opp", "log", "wrong", "wind", "l", "needed", "month", "high", "only", "put", "own", "art", "each", "add", "hidden", "front", "left", "floor", "section", "initial", "vel", "ahead", "day", "common", "nd", "compl", "ven", "d", "find", "sect", "row", "ell", "straight"], "i": ["ji", "phi", "ri", "ori", "oi", "iu", "ui", "yi", "ei", "id", "info", "ti", "ai", "I", "si", "ki", "ij", "li", "ami", "pi", "it", "io", "qi", "zi", "l", "j", "uri", "di", "v", "ic", "mi", "cli", "ci", "ini", "r", "o", "iri", "bi", "ii", "xi", "ip", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12 */\n\npublic class ADD {\n    public static int add(int x, int y) {\n        return x | y;\n    }\n}\n", "substitutes": {"x": ["ox", "val", "xf", "xt", "ex", "ux", " cx", "px", "z", "xx", " xx", "inx", "xc", "X", "zx", "ix", "v", " tx", "rx", "tx", "w", "wx", " val", "yx", "xs", "i", "xy", "xd", " dx", "dx", "xi", "fx", "xp"], "y": ["vy", "ey", "gy", "b", "Y", "ya", "yi", "cy", "ch", "ny", "yt", "yd", "yy", "ym", "z", "xx", "yr", "ys", "j", "v", "ay", "ty", "hot", "ery", "iy", "uy", "fy", "ly", "i", "xy", "ry", "ii", "oy", "sky", "sy", "py"]}}
{"code1": "package humaneval.buggy;\n\n/* You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13). */\n\npublic class GET_MAX_TRIPLES {\n    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n            for (int j = 0; j < n-1; j += 1) {\n                for (int k = 0; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "p", "mn", "num", "no", "note", "m", "g", "nl", "len", "net", "nt", "ln", "it", "z", "pi", "x", "count", "number", " N", "ne", "l", "name", "nb", "v", "q", "w", "cn", "ity", "ns", "c", "nm", "nc", "nn", "na", "N", "r", "np", "o", "span", "s", "d", "non", "network", "sn", "size", "t", "an"], "A": ["Java", "Adam", "AT", "AN", "H", "NA", "AB", "An", "EA", "Y", "AA", "What", "BA", "WA", "U", "Answer", "Ar", "B", "I", "AF", "D", "AM", "P", "Av", "a", "V", "AR", "HA", "AU", "LA", "All", "This", "Address", "As", "AV", "Area", "mA", "ARC", "AP", "JA", "N", "GA", "Array", "RAM", "ACC", "Bar", "F", "Abs", "The", "SA", "At", "CA", "AE", "AC", "ACT", "Alpha", "API"], "i": ["ji", "p", "asi", "yi", "ei", "ai", "multi", "z", "aci", "x", "ims", "im", "iti", "o", "is", "ii", "u", "iu", "me", "hi", "ti", "iter", "li", "ami", "it", "ani", "l", "v", "ini", "init", "gi", "ind", "phi", "ri", "b", "num", "in", "ir", "ui", "info", "ij", "this", "pi", "io", "ix", "di", "index", "iso", "m", "id", "I", "si", "ki", "a", "qi", "zi", "ic", "y", "mi", "ci", "ia", "ni", "ie", "bi", "f", "sim", "xi", "ip", "t"], "result": ["zero", "set", "test", "continue", "expected", "total", "sum", "valid", "success", "json", "integer", "product", "found", "pair", "mark", "term", "change", "other", "currency", "value", "diff", "count", "Result", "number", "error", "def", "ret", "done", "complete", "mask", "rank", "event", "power", "ULT", "true", "feature", "results", "search", "comment", "r", "sequence", "score", "date", "match", "message", "res", "answer"], "j": ["ji", "jit", "kid", "b", "ijk", "uj", "json", "g", "bs", "jj", "aj", "out", "ja", "ij", "other", "it", "z", "bc", "jl", "x", "J", "rel", "oj", "jump", "str", "key", "on", "q", "y", "pt", "ib", "bj", "pr", "im", "kj", "br", "fr", "job", "jp", "js", "jc", "dj", "jac", "je", "obj", "jack"], "k": ["ks", "ke", "ask", "uk", "kid", "tk", "ijk", "yk", "ok", "mk", "g", "kr", "kn", "ark", "wk", "ka", "sk", "ki", "isk", "ko", "kick", "kt", "ik", "kan", "key", "unk", "kw", "kj", "ac", "kl", "kg", "ck", "ku", "ack", "ph", "km", "kh", "kk", "K", "ak", "ek"]}}
{"code1": "package humaneval.buggy;\n\npublic class STRING_SEQUENCE {\n    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n        return result;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "num", "no", "m", "nat", "g", "nl", "length", "len", "net", "nt", "ln", "names", "en", "x", "count", "number", "ne", "l", "name", "nb", "q", "cn", "ll", "ns", "c", "nm", "nc", "nn", "na", "N", "shape", "np", "s", "k", "d", "sn", "size", "t"], "result": ["test", "reason", "continue", "wrapper", "data", "vector", "sum", "request", "char", "response", "character", "relation", "output", "success", "integer", "product", "json", "current", "prefix", "query", "value", "join", "Result", "buffer", " resulting", "str", "complete", "were", "reported", "memory", "string", "the", "true", "work", "section", "report", "results", "r", "sequence", "record", "date", "text", "mate", "status", "meg", "make", "command", "match", "message", "res", "answer"], "i": ["ind", "u", "ji", "phi", "point", "in", "m", "iu", "ui", "us", "me", "id", "integer", "info", "ogi", "hi", "iter", "ti", "ai", "I", "si", "client", "ij", "pi", "li", "multi", "ms", "it", "number", "qi", "fi", "z", "j", "ims", "ix", "di", "ic", "v", "uri", "y", "mu", "im", "iq", "ci", "mi", "index", "memory", "ini", "batch", "is", "bi", "ii", "k", "sim", "t", "ip", "xi", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1 */\n\npublic class IS_BORED {\n    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n}\n", "substitutes": {"S": ["H", "ST", "SB", "NS", "AS", "Z", "U", "L", "B", "I", "D", "P", "V", "M", "C", "W", "SU", "R", "SM", "G", "ASH", "string", "A", "N", "ITS", "s", "T", "Q", "SA", "Str", "STR", "SOURCE", "SAM", "E", "SS"], "sentences": ["encencing", "sequenses", " sentencing", "sentelines", "sequencing", "entelines", "encence", "sentencing", " sentelines", "sequences", "encences", "sequelines", "entences", " sentitudes", "sequence", "entence", "sentenses", "sentitudes", "encitudes", "entenses", "sequitudes", " sentenses"], "result": ["zero", "test", "num", "sum", "total", "counter", "character", "success", "relation", "chance", "integer", "goal", "product", "length", "found", "RESULTS", "term", "currency", "value", "diff", "Result", "number", "done", "event", "default", "ULT", "present", "duration", "successful", "feature", "primary", "results", "know", "comment", "r", "sequence", "date", "flag", "purpose", "cup", "mate", "command", "match", "message", "res", "answer"], "sentence": [" sentant", "spency", "spence", "spences", " sentencer", " sentiece", "equency", "sentency", "sentine", "equence", " sentine", "commandence", "spiece", "sentencing", "sendant", "sentencer", "commandencer", "sentsequence", "indsequence", "indine", "sentiece", " sentsequence", "contsequence", "contant", "sendencer", " sentency", "commandant", "equiece", "equences", "sendencing", "contence", "indant", "indence", "contine", "sentant", "commandencing", " sentencing", "sendence"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ALL_PREFIXES {\n    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n            result.add(string.substring(i + 1));\n        }\n\n        return result;\n    }\n}\n", "substitutes": {"string": ["set", "data", "p", "re", "array", "in", "subject", "char", "instance", "document", "group", "chain", "strings", "input", "ring", "pattern", "space", "integer", "length", "relation", "list", "word", "prefix", "state", "value", "query", "null", "number", "type", "address", "name", "str", "format", "attribute", "context", "system", "object", "comment", "search", "password", "sequence", "description", "print", "text", "s", "translation", "STR", "cache", "match", "message"], "result": ["mont", "ure", "set", "test", "continue", "data", "total", "request", "create", "response", "success", "relation", "valid", "output", "goal", "product", "current", "cur", "pair", "list", "other", "buffer", "now", "folder", "Result", "all", "created", "them", "table", "ret", "complete", "event", "tmp", "next", "memory", "cert", "block", "work", "primary", "report", "comment", "search", "results", "sequence", "first", "collection", "mate", "trace", "profile", "make", "here", "front", "answer"], "i": ["ind", "u", "phi", "asi", "ori", "point", "oi", "m", "in", "iu", "ui", "chain", "ei", "ex", "us", "hi", "ski", "ai", "I", "si", "li", "pi", "it", "x", "multi", "qi", "zi", "j", "ims", "ix", "di", "uri", "ic", "v", "y", "q", "mi", "im", "cli", "ci", "iq", "index", "c", "ini", "batch", "ni", "print", "o", "is", "bi", "ii", "n", "f", "sim", "xi", "ip", "gi"]}}
{"code1": "package humaneval.buggy;\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\n\npublic class IS_SIMPLE_POWER {\n    public static boolean is_simple_power(int x, int n) {\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n", "substitutes": {"x": ["max", "ox", "p", "xf", "num", "lex", "act", "ex", "length", "px", "xx", "number", "xc", "X", "l", "ax", "ix", "check", "xxxx", "v", "rx", "y", "xa", "w", "wx", "xff", "index", "xs", "xd", "xy", "xe", "i", "f", "cox", "dx", "xi", "fx", "xp"], "n": ["u", "nan", "nu", "p", "b", "m", "g", "nt", "ln", "a", "z", "nw", "count", "number", "ne", "l", "j", "nb", "w", "cn", "ity", "ns", "nor", "c", "nm", "nie", "nn", "na", "N", "ni", "e", "np", "i", "k", "s", "d", "ng", "f", "t"], "power": ["every", "zero", "history", "energy", "pro", "part", "php", "p", "total", "exp", "volume", "sum", "padding", "Power", "sup", "integer", "product", "policy", "distance", "position", "efficiency", "performance", "pi", "prefix", "count", "pop", "number", "ower", "ix", "pread", "key", "rank", "vote", "pp", "force", "next", "window", "onent", "index", "shift", "production", "feature", "role", "version", "start", "primary", "pe", "i", "powered", "operator", "factor", "spread", "powers", "weight", "stroke", "command", "capacity", "ping"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.List;\n\n/* pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise. */\n\npublic class PAIRS_SUM_TO_ZERO {\n    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n            for (int j = 0; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n", "substitutes": {"l": ["lr", "lt", "ml", "lis", "p", "b", "ls", "rl", "m", "lam", "lb", "g", "nl", "cl", "dl", "acl", "L", "sl", "lp", "ln", "list", "lang", "li", "z", "il", "lv", "al", "lu", "ld", "lc", "dL", "line", "sol", "v", "ll", "la", "c", "coll", "pl", "kl", "fl", "ol", "tl", "r", "o", "lo", "s", "d", "le", "t", "lists", "el"], "i": ["u", "phi", "ri", "asi", "ori", "ir", "in", "iu", "ui", "yi", "ei", "us", "ti", "hi", "ai", "si", "ki", "ij", "li", "ami", "pi", "x", "it", "io", "aci", "qi", "ik", "zi", "ix", "di", "ic", "y", "mi", "iq", "im", "ci", "wi", "iti", "uci", "inner", "ini", "ia", "ni", "r", "iri", "ie", "is", "bi", "ii", "xi", "ip", "gi"], "j": ["ji", "p", "b", "acc", "note", "sp", "m", "uj", "json", "g", "ex", "end", "jj", "aj", "adj", "er", "out", "ja", "ij", "other", "it", "z", "jl", "by", "J", "oj", "jump", "ax", "ix", "on", "v", "q", "y", "pt", "bj", "im", "pr", "next", "bot", "kj", "att", "br", "job", "o", "at", "jp", "n", "js", "k", "s", "ph", "jc", "dj", "err", "jac", "je", "obj"]}}
{"code1": "package humaneval.buggy;\n\npublic class FIND_CLOSEST_ELEMENTS {\n    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n            for (int j = 0; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"numbers": [" nats", "neographies", "nographies", "nuways", "namesabases", "numumeric", "yats", "nsails", "Nasures", "mologies", "numometers", "onairs", "onenachers", "Nters", "nsrices", "nuumbers", "nums", "nanges", "nsairs", "nuashes", "ngats", "generachers", "ngters", "Numbers", "onails", "noumbers", "generanners", "numashes", " nanners", "Numer", "generubes", " nabases", "nones", " numbs", " nasures", "natives", "Nums", "jats", "nulements", "onenanners", "anatives", "enumeric", " nlements", "enlements", "anologies", " numeric", "jones", "enumbers", "numumbers", "nlements", "numeters", " nrices", "ngumbers", "nseters", "anats", "nologies", " nachers", "nats", " nters", " nackers", "nernels", "numeric", "mumbers", "mats", " nometers", "enackers", " nologies", "nanners", " nights", "numer", "nsones", "onenubes", " natives", "nsometers", "numways", "onights", "lumbers", "yones", " nubes", "nsashes", "nairs", " numer", "nubes", "yumbers", "neters", "nabases", "numernels", " nernels", "nackers", " nairs", " nails", "netumbers", "nometers", "ngums", "netumbs", "lums", " nones", "namesones", "netums", "nashes", "nights", " nums", "neumbers", "lumer", "namesrices", "nways", "nachers", "nslements", " nographies", "neums", "generumbers", "Nats", "nrices", "noanges", "nsernels", "yanges", "nsways", "nsumbers", "nasures", "netographies", "lasures", "nails", " neters", "matives", "nsabases", "numackers", "numbs", "jumbers", "namesumbers", "onenumbers", "janges", "onumbers", "nsights", "noones", "neumbs", "noats", "nters", "numlements", "anumbers"], "result": ["test", "reason", "output", "out", "join", "buffer", "value", "Result", "console", "mask", "consider", "replace", "sequence", "print", "local", "cache", "message", "back", "continue", "process", "part", "data", "vector", "group", "use", "integer", "goal", "found", "table", "complete", "next", "date", "correct", "match", "res", "answer", "resource", "request", "success", "term", "dict", "ret", "report", "comment", "ult", "r", "operator", "trace", "root", "make", "front", "create", "response", "relation", "see", "current", "pair", "list", "currency", "map", "contact", "memory", "cert", "work", "results", "first", "record", "rule", "mate", "status", "here"], "distance": ["delete", "point", "height", "directory", "response", "relation", "dim", " proximity", "dist", "length", "position", "radius", "density", "direction", "close", "diff", "value", "number", "driver", "address", "error", "equality", "grade", "location", " distances", "depth", "relative", "istance", "path", "power", "frequency", "shift", "duration", "range", "scale", "description", "minimum", "sequence", "Distance", "dimension", "d", "transform", "near", "due", "delay", "stroke", "del", "definition", "command", "match", "message", "progress", "time", "angle"], "i": ["ji", "base", "phi", "ri", "asi", "ori", "ir", "in", "iu", "ui", "ei", "us", "info", "hi", "ti", "ai", "inter", "si", "ki", "ij", "I", "pi", "ami", "li", "io", "it", "ik", "zi", "ix", "ims", "di", "ic", "v", "q", "mi", "im", "iq", "ci", "inner", "ini", "ia", "iri", "ie", "at", "is", "iso", "ii", "xi", "ip"], "j": ["ind", "ji", "jit", "b", "note", "sp", "m", "uj", "g", "bs", "json", "and", "jj", "aj", "er", "out", "ja", "ij", "other", "it", "z", "jl", "J", "rel", "oj", "l", "jump", "str", "ret", "on", "v", "q", "pt", "y", "bj", "im", "next", "bot", "kj", "ort", "att", "br", "fr", "o", "at", "jp", "ie", "n", "js", "k", "s", "jc", "dj", "vol", "jac", "obj", "res", "el"], "new_distance": ["new_position", "new_times", "newlexdist", "newlexdistance", "unsignedlexdistance", "New_dist", "unsignedlexwindow", "newnessposition", "new___expected", "New_expected", "unsigned_dist", "new_radius", "new___distance", "new_length", "New_radius", "new_Distance", "unsignedlexposition", "unsigned_position", "newlexwindow", " new_length", " new_Distance", "newnessdistance", "new___dist", "newlydistance", "new_dist", "newlyexpected", "newlexposition", " new_times", "new_window", "unsigned_distance", "newnesswindow", "new___radius", "new_expected", "New_distance", "newnessdist", "unsignedlexdist", "newlydist", "newlyradius", "unsigned_window"]}}
{"code1": "package humaneval.buggy;\n\npublic class LARGEST_DIVISOR {\n    public static int largest_divisor(int n) {\n        for (int i = n; i >= 0; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "mn", "p", "num", "m", "g", "len", "nt", "ln", "a", "number", "dn", "ne", "l", "j", "fn", "nb", "gn", "q", "w", "cn", "ll", "ns", "nor", "c", "nm", "nie", "nc", "nn", "na", "N", "ni", "np", "o", "k", "d", "norm", "f", "sn", "size", "t"], "i": ["ind", "u", "phi", "p", "asi", "ri", "oi", "m", "iu", "in", "ui", "ei", "id", "ti", "hi", "ai", "I", "si", "ki", "ij", "li", "pi", "it", "x", "a", "multi", "qi", "fi", "zi", "l", "j", "ix", "ims", "di", "v", "ic", "y", "mi", "im", "cli", "ci", "iq", "iti", "c", "ini", "ni", "o", "is", "bi", "ii", "k", "f", "sim", "xi", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n\n */\n\npublic class CAN_ARRANGE {\n    public static int can_arrange(int[] arr) {\n        int ind = 1;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] < arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n}\n", "substitutes": {"arr": ["av", "aa", "data", "arp", "val", "vs", "array", "ev", "dr", "par", "alg", "Ar", "rr", "tr", "cur", "elt", "aaa", "ij", "buf", "ray", "gr", "mb", "ele", "seq", "rel", "str", "ar", "img", "hist", "dar", "iq", "ll", "grid", "pl", "coll", "br", "fr", "r", "req", "gb", "dat", "compl", "db", "app", "emb", "deg", "attr", "vol", "err", "vec", "bl", "obj", "stock", "ag", "rs", "arb"], "ind": ["cond", "inn", "num", "in", "mind", "hold", "ptr", "pend", "cont", "inc", "end", "id", "aj", "ond", "md", "adj", "bind", "length", "found", "make", "kind", "ann", "pred", "pos", "ins", "count", "rel", "wind", "dir", "stick", "und", "bound", "IND", "rend", "next", "index", "idth", "nn", "cmd", "cand", "roll", "print", "req", "red", "nd", "d", "find", "db", "Ind", "th", "ded", "send", "start"], "i": ["u", "ji", "phi", "ri", "ori", "oi", "m", "iu", "gu", "ui", "in", "g", "ei", "us", "id", "info", "ogi", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "li", "it", "x", "multi", "io", "qi", "fi", "ami", "zi", "ik", "j", "ims", "ix", "di", "uri", "ic", "v", "q", "mu", "im", "mi", "ci", "cli", "c", "ini", "iy", "my", "sequence", "is", "bi", "ii", "s", "f", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\npublic class STRONGEST_EXTENSION {\n    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.toUpperCase(c) == c) SM += 1;\n                if (Character.toLowerCase(c) == c) CAP += 1;\n            }\n            val = CAP - SM;\n            strong = s;\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "substitutes": {"class_name": ["classlynames", "classNamename", " classNametitle", "CLASS_NAME", "class_title", "classlyprefix", "classNamenames", " class_prefix", "class_names", " classNamename", "classNameprefix", "classlyname", " class_title", "CLASS_name", " class_names", "class_Name", " classNameprefix", " classNamenames", "CLASS_Name", "class_prefix", "classNametitle", "class_NAME", "classlytitle"], "extensions": ["contends", "contended", "exences", "xtension", "Extences", "xtended", "exensions", "extended", "xtences", "contensions", "extension", "exended", "exension", "contions", "exends", "exions", "xtions", "extions", "xtends", "extences", "xtensions", "Extends", "Extensions", "Extension"], "strong": ["qual", " ind", " strongly", "part", " sp", "sp", "details", " qual", "char", "stable", " strength", "chain", " span", "good", "ch", " Strong", "sh", "qualified", " stronger", "client", "si", "sd", "secure", "x", "state", "likely", "unsigned", " weak", " best", "name", "str", "strength", " str", "sing", "ext", "light", "signed", "high", " strongest", " stable", " cs", "spe", "string", "style", "weak", "supp", " sing", "print", "i", " weaker", " symbolic", "span", " st", "big", "just", "Strong", "status", "sim", "single", "trust", "attr"], "val": ["sv", "ind", "max", "ival", "VAL", "sp", " Val", "valid", " valid", "Val", "cal", "ch", "serv", "AL", "aval", "li", "V", "it", "value", "al", "x", "util", " value", "v", "bal", "oval", "index", "abl", "vals", "pol", " aval", " lim", " VAL", "pe", "eval", "ul", " v", "cap", "IL", "var", "sel", "vol", "el"], "s": ["sv", "p", "b", "se", "ls", "sq", "m", "cs", "sb", "g", "a", "z", "ps", "l", "sam", "name", "str", "ar", "less", "v", "y", "ns", "h", "abs", "string", "hs", "was", "os", "ts", "e", "r", "i", "S", "n", "js", "f", "gs", "t", "rs", "ss"], "CAP": ["IM", "PL", "RE", "SUP", "VAL", "POS", "Capt", "Val", "L", "PER", "CL", "SIZE", "CS", "V", "CE", "CR", "APE", "CV", "CT", "AV", "UL", "CP", "MC", "RIP", "AP", "CON", "PORT", "JUST", "Cap", "SAN", "SC", "PLAY", "INT", " Cap", "LI", "STAT", "SIM", "UB", "cap", "CHAR", "VR", "STR", "POL", "VALUE", "AC", "SAM", "AMP", "MAP", "PE", "MP", "SP", "caps"], "SM": ["IM", "SW", "Sm", "MED", "RM", "SB", "SL", "MF", "SUP", "MI", "VAL", "NV", "SF", "CAN", "MAS", "SI", "AM", "VM", "M", "LM", "SU", "MC", "NM", "CM", "CON", "sm", "MAN", "SG", "SAN", "SK", "INT", "MS", "S", "SIM", "SD", "SA", "SEC", "SO", "MB", "STR", "SAM", "AMP", "MAP", "SH", "SP", "SS"], "c": ["arc", "u", "dc", "p", "b", "cu", "char", "sc", "cont", "cs", "anc", "chain", "vc", "ch", "rc", "cur", "co", "z", "bc", "C", "fc", "lc", "cmp", "l", "enc", "mc", "v", "ic", "ct", "ca", "abc", "tc", "cf", "ce", "uc", "nc", "ac", "etc", "mac", "cm", "i", "cp", "code", "unc", "col", "gc", "cos", "cod", "pc", "cc", "cat", "cache", "com"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/*\n * Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n */\n\npublic class EVEN_ODD_PALINDROME {\n    public static boolean is_palindrome(int n) {\n        String n_str = Integer.toString(n);\n        String n_str_rev = \"\";\n        for(int i = n_str.length() - 1; i >= 0; i--) {\n            n_str_rev += n_str.substring(i, i + 1);\n        }\n        return n_str.equals(n_str_rev);\n    }\n\n    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n            else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n}", "substitutes": {"n": ["nan", "nu", "p", "mn", "num", "no", "m", "g", "net", "nt", "ln", "en", "x", "count", "number", "ne", "l", "j", "name", "nb", "on", "v", "y", "w", "cn", "ity", "ns", "c", "nm", "nc", "nn", "na", "N", "r", "o", "np", "k", "d", "sn", "t", "an"], "n_str": ["n_int", "n___ctr", "n_raw", "n___STR", "f_STR", "nt___STR", "n_string", "n_comp", "n___str", " n_arr", "nt___arr", " n_ctr", "nt_ctr", "f_str", " n_raw", "n_gr", "nt_str", "nt_STR", " n_string", " n_gr", "nt___ctr", "n_ctr", "nt_arr", "nt___str", "f_comp", "n_arr", "f_int", "n___arr", "n_STR"], "n_str_rev": ["n_pos_orig", "n_pos_ver", "n_arr_re", "n_pos_rs", "n_str_orig", "n_arr_prev", "n_pos_rev", "n_str_inv", "n_str_re", "n_arr_inv", "n_arr_ret", "n_arr_reverse", "n_str_rs", "n_str_ret", "n_str_ver", "n_str_reverse", "n_arr_rev", "n_str_prev"], "i": ["ji", "oi", "ei", "us", "ai", "multi", "z", "x", "ims", "uri", "im", "print", "o", "is", "ii", "k", "u", "base", "php", "iu", "me", "hi", "iter", "ti", "client", "li", "it", "ms", "ami", "l", "v", "ini", "\u0438", "err", "init", "gi", "ind", "phi", "ri", "point", "in", "ui", "info", "pi", "io", "ix", "di", "key", "ity", "index", "jp", "m", "chain", "id", "I", "si", "ki", "qi", "zi", "j", "ic", "q", "y", "mi", "iq", "cli", "ci", "ni", "bi", "f", "sim", "xi", "ip", "t"], "even_palindrome_count": ["even_palindice_list", "even_palindrom_total", "even_palindrome2count", "even_palindrom_success", "even_palindrome_total", "even_palindrome1seen", "even_palindrom_seen", "even_palindice_Count", "even_palindrome_success", "even_palindrome_list", "even_palindrome_found", "even_palindrome_Count", "even_palindrome1found", "even_palindrome2total", "even_palindrome2list", "even_palindrom_found", "even_palindrome1count", "even_palindrome_seen", "even_palindice_count", "even_palindrom_list", "even_palindrom_count", "even_palindrome1success"], "odd_palindrome_count": ["odd_palindice_count", "odd_palindrome67count", "odd_palindrome67found", "odd_palindice_Count", "odd_palindrome2found", "odd_palindrome2list", "odd_palindrome_found", "odd_palindrome67cache", "odd_palindrom_count", "odd_palindrome_size", "odd_palindrom_found", "odd_palindrom_size", "odd_palindrome_status", "odd_palindrome_cache", "odd_palindice_found", "odd_palindrom_cache", "odd_palindrom_status", "odd_palindrom_Count", "odd_palindrome2count", "odd_palindrome_list", "odd_palindrome_Count", "odd_palindrome67status", "odd_palindice_list", "odd_palindrome2Count"], "result": ["test", "continue", "data", "run", "total", "response", "success", "relation", "valid", "output", "params", "goal", "product", "repl", "group", "current", "pair", "mark", "list", "buffer", "join", "Result", "all", "table", "complete", "spring", "event", "next", "proc", "contact", "memory", "comb", "feature", "comment", "report", "summary", "results", "r", "exist", "collection", "mate", "profile", "meg", "err", "match", "message", "res", "answer"]}}
{"code1": "package humaneval.buggy;\n\n/*\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n*/\n\npublic class CHOOSE_NUM {\n    public static int choose_num(int x, int y) {\n        if(x < y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n}\n", "substitutes": {"x": ["ox", "xf", "m", "lex", "xt", "ex", "ux", "lon", " cx", "px", "z", "xx", " xx", "xc", "X", "l", "ax", "ix", "v", "rx", "w", "tx", "wx", "c", "index", "yx", "xd", "xy", "xs", "i", "e", "n", "dx", "xi", "fx", "xp"], "y": ["vy", "ey", "yer", "gy", "val", "b", "p", "Y", "m", "height", "yi", "cy", "dy", "ch", "axy", " Y", "out", "ny", "yt", "yd", "ye", "yy", "ym", "z", "count", "xx", "value", "icy", "j", "ys", "l", "v", "ay", "q", "yl", "iny", "ty", "h", "c", "sys", "hot", "ery", "iy", "uy", "ky", "fy", "ly", "my", "yx", "xy", "i", "o", "yo", "ry", "n", "oy", "row", "sky", "t", "sy", "py"]}}
{"code1": "package humaneval.buggy;\n\npublic class STRLEN {\n    public static int strlen(String string){\n        return string.length() - 1;\n    }\n}\n", "substitutes": {"string": ["test", "data", "filename", "array", "subject", "char", "document", "source", "strings", "ring", "escape", "space", "pattern", "input", "length", "spec", "pair", "list", "this", "word", "prefix", "null", "value", "buffer", "name", "str", "format", "service", "object", "iterator", "comment", "scale", "print", "sequence", "description", "password", "text", "command", "message", "tag"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n\n */\n\npublic class MIN_PATH {\n    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n                    if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                    if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                    if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                    if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n}\n", "substitutes": {"grid": ["set", "clear", "card", "data", "windows", "coord", "num", "stack", "array", "draw", "hold", "dim", "box", "link", "g", "graph", "chain", "raid", "sort", "wire", "client", "list", "cart", "domain", "fc", "query", "Grid", "band", "lay", "addr", "table", "gate", "mat", "v", "ay", "lag", "web", "lat", "map", "ad", "mg", "gm", "window", "pool", "work", "tile", "rid", "range", "code", "cell", "gc", "queue", "rule", "db", "func", "row", "deg", "sky", "stock", "reg", "wd"], "k": ["max", "ke", "set", "kid", "p", "b", "num", "m", "ok", "mk", "kn", "kr", "g", "id", "kar", "ka", "sk", "ki", "kind", "ko", "z", "count", "key", "v", "q", "unk", "kw", "c", "kl", " K", "N", "r", "o", "ck", "ku", "d", "km", "kh", "kk", "t", "K", "ak"], "n": ["nv", "nan", "inn", "nu", "mn", "p", "num", "no", "m", "g", "nl", "len", "net", "out", "nt", "none", "ln", "pi", "z", "en", "x", "number", " N", "all", "ne", "l", "name", "nb", "un", "on", "fn", "v", "q", "w", "cn", "ll", "ns", "c", "nm", "nc", "nn", "na", "N", "ni", "r", "np", "o", "norm", "ng", "network", "sn", "size", "t", "an"], "val": ["test", "p", "ctx", "valid", "act", " eval", "loc", "rand", "il", "value", "x", "all", " value", "pr", "grad", "pl", "mem", "print", "fill", "var", "el", "u", "update", "ver", "data", "Val", "aval", "it", "label", "l", "v", "tx", " aval", "pol", "alt", "sel", "err", "vec", "stat", "vol", "res", "max", "ind", "mean", "elt", "cmp", "ret", "key", "dev", "index", "vals", "eval", "ref", " v", "func", "alpha", "reg", "VAL", " Val", "cal", "fol", "pal", "px", "rol", "al", "rel", "def", "util", "pt", "fail", "vt", "add", "xy"], "i": ["ji", "MI", "g", "ei", "yi", "ai", "multi", "ims", "im", "iti", "iy", "is", "ii", "u", "ori", "iu", "hi", "ti", "li", "ami", "it", "by", "l", "ini", "\u0438", "at", "s", "init", "gi", "ind", "phi", "ri", "point", "in", "ui", "info", "ij", "this", "pi", "io", "PI", "ix", "di", "ity", "wi", "index", "m", "chain", "series", "I", "ki", "si", "a", "fi", "qi", "zi", "ic", "q", "y", "uni", "mi", "cli", "ci", "iii", "ia", "ie", "bi", "f", "sim", "xi", "ip"], "j": ["ind", "ji", "jit", "b", "sp", "ijk", "m", "uj", "g", "json", "jj", "aj", "to", "adj", "ja", "ij", "other", "it", "z", "dt", "jl", "jo", "J", "oj", "l", "jump", "ax", "ix", "v", "q", "pt", "y", "bj", "im", "pr", "next", "h", "kj", " dj", "ge", "br", "fr", "ot", "o", "ie", "jp", "xy", "js", "jc", "dj", "jac", "je", "obj", "res"], "ans": ["ks", "AN", "nan", "bys", "vs", "ls", "ads", "us", "ates", "ats", "leans", "cas", "anas", "anks", "ann", "ars", "ids", "ms", "uns", "ins", "ians", "aps", "ons", "ants", "offs", "arts", "ns", "aus", " means", "lan", "ums", "olds", "aints", "ens", "vals", "posts", "os", "xs", "ANS", "anes", "pan", "ras", "is", "angs", "as", "mas", "rans", "ds", "amps", "ams", "gs", "rs", "an"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/*\n * Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n */\n\npublic class MAXIMUM_K {\n    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}\n", "substitutes": {"arr": ["aa", "data", "arp", "array", "dr", "conf", "alg", "rep", "adj", "iter", "rr", "cur", "elt", "aaa", "list", "buf", "dict", "now", "gr", "all", "addr", "rel", "seq", "enc", "j", "str", "ar", "img", "agg", "pp", "iq", "ll", "rb", "batch", "coll", "pl", "att", "br", "fr", "r", "Array", "expr", "parts", "obj", "ack", "dat", "compl", "db", "app", "ell", "attr", "err", "bl", "stock", "au", "ag", "rs", "arb"], "k": ["ks", "ke", "max", "uk", "p", "num", "ijk", "m", "ok", "mk", "g", "id", "length", "ka", "sk", "ki", "kind", "ko", "ik", "check", "key", "v", "w", "unk", "kw", "h", "c", "work", "kl", "r", "e", "ku", "n", "km", "size", "kk", "t", "K", "ak", "ek"], "result": ["test", "data", "continue", "expected", "total", "response", "valid", "relation", "success", "output", "group", "end", "goal", "product", "found", "current", "cur", "pair", "list", "other", "buffer", "collect", "folder", "Result", "our", "created", "now", "table", "ret", "all", "div", "complete", "done", "tmp", "next", "memory", "cert", "work", "primary", "report", "comment", "search", "results", "r", "perm", "first", "order", "collection", "mate", "profile", "temp", "match", "message", "answer"], "i": ["u", "ji", "phi", "ri", "asi", "ori", "point", "oi", "m", "in", "iu", "ui", "yi", "ei", "ogi", "hi", "ski", "ti", "iter", "ai", "I", "ki", "si", "ij", "li", "pi", "multi", "x", "it", "ami", "fi", "qi", "j", "ix", "uri", "di", "ic", "y", "mi", "iq", "cli", "ci", "index", "inner", "ini", "batch", "\u0438", "ni", "my", "o", "iri", "is", "bi", "ii", "xi", "ip", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1 */\n\npublic class MODP {\n    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n            result = 2 * result;\n        }\n        return result % p;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "num", "no", "m", "len", "net", "nt", "ln", "en", "x", "count", "number", "ne", "l", "j", "fn", "nb", "q", "cn", "ns", "c", "nm", "nc", "nn", "na", "N", "np", "o", "k", "d", "f", "network", "sn", "t"], "p": ["u", "part", "b", "sp", "m", "g", "lp", "P", "pi", "ps", "pb", "v", "q", "pn", "pp", "ap", "power", "h", "c", "bp", "op", "perm", "np", "cp", "jp", "o", "k", "pa", "d", "tp", "pc", "t", "ip", "ping"], "result": ["test", "expected", "num", "sum", "total", "counter", "response", "success", "relation", "output", "integer", "product", "goal", "rc", "length", "current", "cur", "pair", "term", " Result", "currency", "direction", "value", "diff", "count", "Result", "number", "ret", " resulting", "done", "complete", "next", "default", "ULT", "power", "command", "true", "fac", "master", "results", "search", "r", "sequence", "score", "execute", "date", "correct", "mate", "mut", "function", "cache", "make", "root", "match", "message", "res"], "i": ["ind", "u", "phi", "ori", "m", "iu", "gu", "ui", "ei", "us", "id", " ii", "hi", "iter", "ti", "ai", "I", "si", "li", "pi", "multi", "x", "io", "it", "qi", "j", "ix", "uri", "di", "v", "ic", "q", "mi", "im", "mu", "ci", "index", "ini", "batch", "go", " j", "bi", "ii", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport javax.xml.bind.DatatypeConverter;\n\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\npublic class STRING_TO_MD5 {\n    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n}\n", "substitutes": {"text": ["test", "data", "subject", "char", "source", "document", "act", "output", "input", "aut", "pattern", "read", "term", "word", "prefix", "value", "Text", "x", "now", "buffer", "name", "str", "content", "format", "key", "template", "ext", "form", "q", "event", "path", "txt", "object", "string", "TEXT", "comment", "title", "password", "print", "code", "n", "body", "translation", "config", "t", "msg", "command", "message"], "md": ["ind", "cond", "cd", "mn", "dd", "m", "od", "mk", "dr", "alg", "df", "det", "sd", "ms", "bd", "ld", "mp", "gr", "hd", "mod", "hash", "mm", "sam", "mc", "der", "pt", "mu", "ct", "ad", "mt", "add", "h", "dig", "dh", "mand", "sm", "mg", "cmd", "grad", "pd", "mac", "sha", "red", "nd", "d", "db", "MD", "obj", "dm"], "digest": ["hashor", "Digest", "mdum", "hashEST", "Digests", "digested", "mdEST", "signum", "signester", "Digester", "decests", "signEST", "DigEST", "decested", "mdests", "Digum", "mdested", "digor", "digests", "Digor", "decEST", "digum", "mdor", "digester", "mdest", "signest", "decest", "hashested", "hashest", "digEST", "mdester", "Digested"]}}
{"code1": "package humaneval.buggy;\n\n/* Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse */\n\npublic class BELOW_THRESHOLD {\n    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n            if (l[i] <= t)\n                return true;\n        }\n        return false;\n    }\n}\n", "substitutes": {"l": ["lr", "lt", "ml", "lam", "p", "rl", "ls", "m", "lb", "g", "nl", "hl", "cl", "dl", "L", "sl", "lp", "ln", "list", "lit", "li", "lv", "ld", "al", "lu", "lc", "all", "line", "sol", "v", "ll", "la", "pl", "kl", "fl", "ol", "tl", "r", "o", "lo", "s", "lf", "le", "lists", "el"], "t": ["test", "lt", "p", "total", "ht", "qt", "gt", "out", "tr", "term", "dt", "it", "fort", "wt", "tw", "type", "j", "st", "ta", "tip", "q", "pt", "ct", "vt", "te", "ty", "h", "tc", "rt", "title", "ts", "ot", "iat", "at", "T", "f", "tp", "typ", " T", "to", "tt"], "i": ["ind", "u", "ji", "set", "phi", "ori", "in", "m", "gu", "iu", "ui", "chain", "ex", "yi", "us", "id", "ti", "iter", "ai", "I", "si", "ki", "ij", "pi", "it", "multi", "x", "qi", "fi", "zi", "j", "spin", "ix", "key", "di", "uri", "ic", "uli", "y", "q", "mi", "iq", "ci", "index", "ini", "batch", "go", "sequence", "o", "is", "bi", "n", "ii", "f", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/* Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153 */\n\npublic class DIGIT_SUM {\n    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n            if (c == ' ')\n                break;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n}\n", "substitutes": {"s": ["sv", "set", "p", "b", "ls", "sq", "m", "g", "sb", "strings", "space", "ats", "a", "less", "ps", "str", "v", "w", "y", "q", "ns", "h", "string", "ts", "xs", "r", "e", "is", "S", "n", "js", "south", "f", "gs", "t", "rs", "ss"], "result": ["zero", " resulted", "expected", "division", "sum", "total", "character", "success", "relation", "expression", "integer", "figure", "goal", "product", "current", "cur", "mark", " Result", "currency", "other", "value", "diff", "Result", "number", " resulting", "real", "done", "complete", "mask", "percent", "power", "ULT", "cert", "duration", "feature", "fac", "primary", "results", "know", "comment", "ult", "sequence", "r", "score", "date", "you", "purpose", "mate", "profile", "meg", "command", "match", "message", "eu"], "c": ["arc", "con", "dc", "conv", "ec", "cd", "p", "cu", "b", "char", "sc", "cont", "cs", "anc", "character", "cl", "vc", "ch", "rc", "cur", "co", "a", "z", "fc", "C", "bc", "lc", "xc", "cr", "enc", "mc", "ic", "v", "ct", "ca", "ce", "cf", "tc", "uc", "ac", "nc", "cm", "cp", "code", "unc", "gc", "col", "k", "f", "cos", "cod", "cap", "pc", "cc", "cat", "cache", "com"]}}
{"code1": "package humaneval.buggy;\n\n/* Given a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\n    add([4, 2, 6, 7]) ==> 2 */\n\npublic class ADD_EVEN_AT_ODD {\n    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.length; i += 1) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n}\n", "substitutes": {"lst": ["Lth", "lnd", "lmt", "lstr", "lsh", "Lst", "lbl", "llmt", " lth", "list", "llth", "alnd", " lbl", "llnd", "alstr", "llist", "lsth", " lstr", "alist", "Lsh", "alst", "lth", " lmt", "Lnd", "llst", "lssh", " lsh", "lsst", " lnd", "Lstr", "Lmt", "lsist", " list", "llbl", "Lbl"], "sum": ["max", "zero", "num", "total", "success", "mean", "us", "sup", "cal", "sat", "ram", "length", "out", "gam", "si", "hum", "other", "um", "null", "sa", "hash", "now", "result", "count", "all", "Sum", "mod", "sam", "su", " summed", "average", "tmp", "add", " SUM", "mass", "fac", "summary", "gram", "score", "union", "cum", "alph", "body", "alpha", "sim", "weight", "size", "temp", "vol", "match", "black", "must"], "i": ["u", "ji", "phi", "ri", "point", "ori", "in", "m", "iu", "gu", "ui", "oi", "chain", "us", "id", "info", "hi", "ti", "ai", "I", "si", "ki", "ij", "li", "pi", "it", "x", "io", "multi", "qi", "ms", "fi", "j", "ims", "ix", "di", "uri", "ic", "v", "uli", "q", "mi", "im", "ci", "index", "ini", "batch", "print", "o", "is", "bi", "ii", "n", "f", "sim", "xi", "ip", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer (if the number ends in 0.5 round down)\n    and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n */\n\npublic class ROUNDED_AVG {\n    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n            avg_rounded = (int) Math.ceil(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n}\n", "substitutes": {"n": ["u", "nan", "nu", "mn", "p", "num", "b", "g", "nt", "en", "nw", "x", "z", "dn", "ne", "l", "j", "nb", "on", "v", "w", "y", "cn", "ns", "h", "c", "nm", "nc", "nn", "na", "N", "r", "np", "o", "s", "d", "ng", "f", "sn", "t"], "m": ["mun", "mn", "p", "b", "mk", "g", "me", "om", "M", "ms", "mod", "all", "em", "mm", "l", "j", "mc", "mo", "v", "month", "tm", "mi", "mu", "mt", "im", "med", "c", "gm", "h", "sm", "cm", "perm", "mis", "mr", "o", "k", "d", "f", "km", "bm", "t", "dm"], "summation": ["subification", "subations", "ssumATION", "summification", "summATION", " sumutation", "ssumation", "simmation", "summations", " summoration", " sumation", "sumification", "subation", "sumpration", "summration", " summration", " summutation", "ssumuration", " summuration", "summoration", "ssumoration", "simmutation", "sumation", " sumification", "summnation", " summnation", "sumpification", "simmations", "sumutation", "sumration", "subration", " sumration", " sumoration", "sumpnation", "sumnation", " summATION", "sumputation", " sumuration", " sumations", "sumATION", "sumations", " summations", " sumATION", " sumnation", "sumuration", "summutation", "simmnation", "sumoration", "sumpations", "sumpation", "summuration", " summification"], "i": ["u", "phi", "ri", "p", "oi", "iu", "in", "ui", " I", "us", "integer", "id", "hi", "iter", "ti", "ai", "client", "si", "ki", "I", "li", "pi", "it", "io", "x", "multi", "qi", "ami", "zi", "j", "ix", "di", "ic", "v", "q", "y", "mi", "im", "ci", "wi", "inner", "index", "ini", "o", "ie", "is", "bi", "ii", "sim", "xi", "ip", "init", "gi"], "avg": ["svge", "avgo", " avgc", "sumgg", "avegc", " avG", "augg", "aveG", "avegp", "avm", "avgp", "averm", "avergp", "ravg", "averg", "sumG", "aug", " avge", "avgg", "navg", "svm", "svG", "augm", " avgp", "avergo", "averG", "avergg", "svg", "aveg", "avego", " avm", "navtg", "navgm", "averge", "navG", "ravgp", "avtg", "sumg", "avge", "avG", "avgm", "auG", "ravG", "avergm", "avertg", "avgc", "avergc", "ravgo", "autg", "sumgm"], "rem": ["rom", " Rem", "immer", "remove", "re", "RE", "mind", "comm", "rip", "ex", "dist", "disc", "rep", "xp", "remote", "prem", "em", "drm", "pers", "Rem", "rx", "pres", "rm", "prom", "pol", "REM", "mem", "gre", "rain", "pm", "common", "red", "roy", "reg", " REM", "res", "resh", "dem"], "avg_rounded": ["avg_updated", "avge_rounded", "avg_marked", "avg_qualified", "avg_round", "avge_rendered", "avg_matched", "avg_fitted", "avged_bound", "avg___rounded", "avg_colored", "avg___qualified", "avmed_matched", "avg___marked", "avged_qualified", "avmed_updated", "avmed_rounded", "avg_____colored", "avg___rolled", "avgn_adjusted", "avgn_marked", "avged_rounded", "avg_rolled", "avmed_____rounded", "avged_rolled", "avg2rounded", "avmed_____updated", "avgn_rounded", "avg2marked", "avg_adjusted", "avg2fitted", "avg___adjusted", "avg_____updated", "avg2adjusted", "avg_bound", "avmed_colored", "avgn_fitted", "avg___bound", "avge_round", "avg___fitted", "avg_____rounded", "avg_____matched", "avmed_____colored", "avge_locked", "avmed_____matched", "avg_rendered", "avg_locked"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.HashMap;\n\n/*\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n */\n\npublic class BY_LENGTH {\n    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n            if(digit_map.get(num) != \"\") {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"a": ["history", "aka", "aa", "ava", "ga", "data", "p", "b", "array", "m", "aaaa", "g", "es", "ata", "aaa", "isa", "aux", "en", "sa", "all", "l", "ar", "v", "aos", "w", "y", "arr", "ca", "la", "abc", "oa", "area", "c", "ana", "abs", "another", "na", "A", "ia", "e", "i", "o", "parts", "ack", "n", "s", "as", "eas", "d", "apa", "ae", "t", "ma", "an"], "digit_map": ["digitistlink", "digititymap", "digit5mask", "digitistmt", "winner_link", "pent10search", "digitityrule", "significant_com", "digit_man", "digitetmt", "digit64com", "digit5add", "png_MAP", "digitOpmap", "winneristdict", "digitettool", "digit1trans", " digit_cap", "digit_com", "digit67map", "pent_map", "major_map", "pattern5tool", "prime_map", "digit64map", "digitistmanager", "digitetman", "digitistmaster", "digitistkey", "digitMmap", "digit10mt", "digit0tool", " digits_map", "digit32add", "digit_cap", "winneristmt", "digititytree", "digit32map", "digit33link", "digit_bridge", "inant_map", "digit_link", "digit0master", "inant_MAP", "pattern_menu", "png5map", "major_master", "digit5manager", "winneristmap", "digit_file", "digitetmaster", "digit_over", "digitmattrans", "primeitymap", "digit64master", "digit67search", "digititycom", "png5add", " digit1trans", "prime_tree", "significant_map", "digit10over", "digit8key", "digititydo", "primeitymaster", "digitisttool", "winner_dict", "major_tool", "digit_ware", "digit_Map", "digit10dict", "digitistman", "significant_rule", "significantitymap", "digit_key", "digitetdict", "pent_over", "winneristlink", "digit0map", "digit8map", " digit_do", "digit0policy", " digits_manager", " digits_mask", "digitistMAP", "digit3over", "digit_menu", "winner_MAP", "png_map", "digitMgroup", "winneristMAP", "digititytrans", "digit_group", "digit33map", "png_add", "digit5map", "digit8manager", "digitetgroup", "major0policy", "winneristman", "pent_tool", "digit67master", "digit67tool", "winner_man", " digitsistkey", "winner_mask", "prime_master", "digitOpbridge", "digitMMAP", "digitetMAP", "png5MAP", "digitOpMap", "digititycomplete", " digit1do", "digit10MAP", "digitetware", "digit33man", "major_policy", "digitetlink", " digit_file", "digit32MAP", "digit5key", "digit_manager", "digititymaster", "digit3search", "digit10search", "digitmatdo", "digitistmenu", " digitsistmask", "major0tool", "digitetpolicy", " digit_bridge", " digitsistmanager", "digitOpfile", " digit_Map", "winneristmask", "digit_mt", "major0map", "digititycap", "digit10tool", "digitisttree", "pent10tool", "digitMware", "digitetcom", "digit67over", " digits_key", "digit5MAP", "pattern_mask", "digit67policy", " digit_trans", "digitistmask", "digit1do", "primeitycomplete", "pattern5menu", " digit1cap", "digit5menu", "pattern_map", "digitetrule", "pattern5mask", "pattern5map", "digit_dict", " digit1map", "digit_add", "digit_master", "pent10over", "significant_master", "major0master", "primeitytree", "digit8mask", "inant_ware", "digitmatmap", "inant_group", "digit_policy", "significantitymaster", "digit_complete", "digitetmask", "digit_tree", "digitistmap", "digit_trans", "digit3map", "digit_search", "digit_tool", "significantitycom", "prime_complete", "digit_rule", "pent_search", "digit1cap", "digit33mask", "pent10map", " digitsistmap", "digit1map", "significantityrule", "digit_MAP", "digitmatcap", "digit3tool", "digitetmap", "digit_do", "digit5tool", "digitistcomplete", "winner_map", "winner_mt", "pattern_tool", "digit10map", "digit_mask", "digit64rule", "digitistdict"], "result": ["set", "test", "continue", "data", "vector", "total", "create", "response", "valid", "relation", "success", "output", "end", "goal", "product", "found", "current", "term", "list", "currency", "other", "this", "buffer", "Result", "all", "created", "region", "table", "ret", "complete", "event", "next", "contact", "true", "work", "report", "results", "br", "summary", "r", "sequence", "order", "collection", "mate", "trace", "profile", "meg", "err", "match", "message", "res", "answer"], "num": ["con", "mun", "conv", "nu", "coord", "val", "cu", "no", "mon", "m", "mn", "dim", "prim", "kin", "NUM", "nam", "iter", "umi", "Num", "om", "zh", "um", "en", "one", "x", "number", "sam", "uu", "name", "str", "man", "on", "mat", "Number", "vis", "ord", "gen", "nm", "block", "nn", "na", "umber", "node", "np", "cum", "alph", "n", "nom", "ph", "dat", "item", "sel", "sim", "th", "bo"]}}
{"code1": "package humaneval.buggy;\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\n\npublic class LARGEST_PRIME_FACTOR {\n    public static boolean is_prime(int k) {\n        if (k < 2)\n            return false;\n        for (int i = 2; i < k; i += 1){\n            if (k % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n            if (is_prime(j)){\n                largest = n % j;\n            }\n        }\n        return largest;\n    }\n}\n", "substitutes": {"k": ["ks", "ke", "kid", "tk", "p", "m", "ok", "mk", "g", "kr", "inc", "conf", "wk", "ka", "sk", "ki", "co", "kind", "ko", "kick", "ik", "mc", "key", "q", "kw", "kj", "need", "kl", "keys", "ck", "ku", "ack", "ikk", "km", "alpha", "kh", "kk", "th", "K", "ak"], "i": ["u", "phi", "ri", "asi", "ori", "iu", "ui", "ei", "us", "me", "hi", "ti", "ai", "I", "si", "ki", "ij", "pi", "multi", "li", "x", "it", "io", "qi", "ami", "fi", "zi", "ani", "ix", "di", "ic", "y", "mi", "im", "iq", "ci", "inner", "ini", "my", "o", "ie", "bi", "ii", "sim", "xi", "ip", "init", "gi"], "n": ["nan", "nu", "mn", "num", "no", "m", "nl", "net", "out", "nt", "ln", "z", "nw", "number", "all", "ne", "dn", "l", "nb", "un", "v", "gn", "q", "cn", "ns", "nor", "h", "nm", "nc", "nn", "na", "N", "ni", "np", "d", "ng", "sn", "size", "tn", "t", "nr"], "largest": ["max", "Large", "total", "broad", "tall", "best", " greatest", "las", "unsigned", "all", "peak", "most", "maximum", "great", "sharp", "significant", "last", "average", "major", "full", "default", "highest", "index", "large", "ast", "hest", "huge", "master", "est", "first", "multiple", "big", "majority", "small", " biggest", "size", "latest", "gest", "capacity", "Maximum"], "j": ["ind", "ji", "jit", "kid", "jas", "b", "note", "m", "uj", "json", "g", "bs", "us", "ju", "jj", "aj", "adj", "ja", "ij", "other", "it", "z", "li", "jl", "x", "jo", "by", "J", "oj", "l", "jump", "str", "key", "ion", "on", "v", "q", "y", "_", "bj", "im", "pr", "bot", "kj", "left", "att", "off", "br", "fr", "jp", "js", "jc", "kh", "sim", "dj", "err", "jac", "je", "obj", "jack"]}}
{"code1": "package humaneval.buggy;\n\n/*\n * You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return -10 for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == -10\n */\n\npublic class PROD_SIGNS {\n    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] > 0) prod *= 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n}\n", "substitutes": {"arr": ["arg", "aa", "arp", "val", "vs", "array", "au", "ev", "par", "good", "adj", "alg", "Ar", "rr", "tr", "cur", "aaa", "list", "ij", "buf", "z", "now", "unch", "ray", "gr", "addr", "ang", "seq", "rel", "enc", "ele", "str", "ar", "img", "hist", "inst", "map", "iq", "rb", "ll", "abc", "batch", "pl", "ig", "coll", "att", "br", "fr", "r", "ARR", "req", "expr", "parts", "arry", "n", "dat", "compl", "hz", "db", "app", "shr", "emb", "deg", "attr", "vol", "err", "bl", "stock", "obj", "ag", "rs", "arb", "angle"], "prod": ["prog", "prd", "proded", " Pron", "pegud", "perpd", "prsd", "Pron", "psypd", " Prod", "pron", "pegg", "proud", "prob", " Proud", " proud", " prob", "psyded", " proded", "prosd", "propd", "pegd", " propd", "psyd", " Prog", "psyn", "Prosd", "perded", "perd", "pern", "Prod", " prog", " prosd", "pegn", " pron", "prn", "prb", "Prob"], "i": ["ji", "oi", "exp", "yi", "ei", "json", "us", "ai", "multi", "any", "ims", "uri", "im", "iy", "print", "o", "is", "ii", "to", "u", "php", "ori", "iu", "ex", "me", "hi", "ti", "li", "it", "ami", "ini", "\u0438", "span", "init", "gi", "ind", "phi", "ri", "point", "in", "ui", "info", "ij", "pi", "io", "ik", "ix", "di", "ity", "c", "my", "chain", "series", "id", "I", "si", "ki", "list", "a", "qi", "fi", "zi", "j", "ic", "q", "y", "mi", "slice", "cli", "ci", "iq", "iii", "ie", "bi", "sim", "xi", "ip"], "sum": ["zero", "set", "sub", " sums", "acc", "num", "stack", "total", "mean", "sup", "us", "good", "cal", "sat", "out", "si", "other", "um", "multi", "sa", "hash", "count", "diff", "Sum", "sam", "su", "average", "add", "dev", "med", " SUM", "sys", "fac", "summary", "mem", "score", "ma", "cum", "n", "square", "share", "cos", "ash", "sim", "size", "prof", "cat", "temp", "vol", "match", "ss"]}}
{"code1": "package humaneval.buggy;\n\n/* encode_shift(): returns encoded string by shifting every character by 5 in the alphabet.\ndecode_shift(): takes as input string encoded with encode_shift function. Returns decoded string. */\n\npublic class DECODE_SHIFT {\n    public static String encode_shift(String string){\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            c = (char)((((int) c + 5 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n\n    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n", "substitutes": {"string": ["site", "test", "part", "filename", "array", "subject", "char", "source", "relation", "chain", "series", "ring", "store", "space", "strings", "spec", "current", "list", "this", "word", "prefix", "null", "value", "query", "buffer", "library", "dump", "name", "str", "format", "service", "parse", "sql", "object", "get", "version", "comment", "password", "sequence", "print", "text", "s", "network", "ident", "sample", "status", "san", "function", "cache", "file", "command", "document"], "sb": ["eb", "bh", "ssl", "ub", "SB", "b", "bn", "wb", "sq", "lb", "sg", "bb", "bs", "stab", "sync", "shell", "zb", "bsp", "BB", "sl", "lp", "bis", "bd", "ssh", "ibl", "bc", "lbs", "sa", "mb", "rob", "pb", "abb", "ob", "nb", "cb", "bps", "erb", "ib", "bj", "xb", "bt", "rb", "sql", "gob", "bp", "sbm", "bf", "bg", "gb", "bash", "gc", "sth", "sf", "db", "kb", "zeb", "bl", "arb"], "c": ["arc", "con", "from", "category", "ec", "dc", "cd", "conv", "cu", "b", "can", "char", "sc", "cont", "g", "cs", "chain", "cy", "id", "vc", "rc", "cl", "ch", "cur", "cas", "co", "a", "z", "fc", "bc", "oc", "count", "C", "lc", "l", "cr", "mc", "cb", "v", "ic", "q", "y", "cn", "ct", "ci", "ca", "cv", "abc", "h", "ce", "cf", "cin", "uc", "ac", "nc", "tc", "cm", "or", "i", "cp", "code", "unc", "col", "gc", "k", "f", "pc", "cc", "cat", "err", "cache", "t"]}}
{"code1": "package humaneval.buggy;\n\npublic class FIZZ_BUZZ {\n    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0; j < i + \"\".length(); j += 1){\n                    if (i + \"\".substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "substitutes": {"n": ["nan", "nu", "mn", "num", "no", "m", "nih", "g", "nl", "len", "net", "nt", "ln", "count", "number", "ne", "l", "fn", "nb", "q", "w", "ns", "c", "nm", "nie", "nc", "nn", "na", "N", "ni", "np", "o", "k", "d", "f", "network", "sn", "size", "t", "nr"], "result": ["zero", "test", "expected", "continue", "vector", "total", "sum", "counter", "char", "success", "integer", "product", "goal", "debug", "found", "current", "term", "change", "currency", "value", "diff", "count", "Result", "number", "error", "ret", "done", "complete", "event", "default", "ULT", "power", "successful", "true", "feature", "results", "search", "comment", "sequence", "score", "flag", "status", "match", "message", "res", "answer"], "i": ["ind", "phi", "ri", "b", "ori", "ir", "in", "oi", "iu", "ui", "g", "ei", "yi", "me", "id", "info", "hi", "iter", "ti", "ai", "I", "ki", "si", "ij", "li", "pi", "ami", "x", "io", "it", "qi", "multi", "abi", "zi", "ix", "di", "uri", "ic", "v", "mi", "im", "iq", "ci", "index", "iii", "ini", "ia", "iri", "is", "bi", "ii", "sim", "xi", "ip", "init", "gi"], "j": ["ind", "ji", "u", "jit", "kid", "jas", "b", "ijk", "p", "m", "uj", "json", "g", "bs", "jj", "aj", "og", "adj", "ja", "ij", "gov", "it", "z", "li", "jl", "x", "J", "oj", "l", "jump", "str", "ix", "on", "ion", "q", "y", "pt", "bj", "im", "pr", "bot", "kj", "att", "off", "br", "fr", "ie", "at", "jp", "bi", "js", "k", "jc", "dj", "obj", "el"]}}
{"code1": "package humaneval.buggy;\n\n/* Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix' */\n\npublic class ENCRYPT {\n    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n                    d.charAt(s.indexOf((int) c) + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "substitutes": {"s": ["sv", "p", "b", "ls", "sq", "m", "g", "bs", "strings", "its", "sl", "a", "z", "ms", "x", "l", "str", "st", "v", "q", "y", "w", "ns", "h", "string", "hs", "ws", "ts", "r", "xs", "i", "is", "S", "sf", "n", "js", "text", "ds", "gs", "t", "ses", "rs", "ss"], "sb": ["bh", "eb", "ssl", "ub", "SB", "b", "sp", "bn", "sq", "wb", "lb", " SB", "sg", "bs", "bb", "stab", "shell", "zb", "bsp", "obb", " tob", "sl", "lp", "bis", "ssh", "sa", "mb", "rob", "pb", "abb", "ob", "nb", "cb", "fb", "rub", "erb", "ib", "bt", "xb", "bj", "rb", "gob", "tg", "bp", "sbm", "bf", "bg", "gb", "sf", "bash", "sth", "kb", "sn", "arb"], "d": ["dd", "b", "p", "m", "od", "g", "dl", "md", "D", "sd", "bd", "z", "dict", "ld", "td", "dn", "l", "j", "done", "dL", "der", "w", "ad", "dot", "fd", "dh", "gd", "de", "pd", "r", "xd", "nd", "n", "dat", "ds", "db", "t", "del", "dec"], "c": ["arc", "con", "ec", "conv", "dc", "cd", "p", "b", "cu", "can", "char", "sc", "cont", "cs", "chain", "character", "g", "cy", "vc", "ch", "rc", "cur", "co", "a", "z", "bc", "C", "x", "fc", "lc", "cmp", "l", "cr", "mc", "cb", "ctrl", "ic", "v", "ct", "ci", "ca", "abc", "tc", "cf", "ce", "uc", "ac", "nc", "etc", "cm", "r", "i", "cp", "code", "unc", "col", "gc", "k", "cos", "cod", "pc", "cc", "cat", "cache", "com"]}}
{"code1": "package humaneval.buggy;\n\n/* Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\" */\n\npublic class FIX_SPACES {\n    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n        return new_text;\n    }\n}\n", "substitutes": {"text": ["history", "resource", "test", "reason", "data", "source", "document", "act", "output", "input", "ut", "json", "pattern", "info", "length", "net", "read", "out", "nt", "term", "list", "word", "state", "buff", "Text", "buffer", "log", "name", "template", "content", "str", "url", "format", "ext", "form", "select", "tx", "post", "event", "ct", "force", "path", "txt", "inner", "string", "TEXT", "comment", "title", "print", "code", "image", "article", "xml", "network", "translation", "config", "t", "msg", "temp", "command", "message", "tt"], "new_text": [" new_print", "new_path", "good_translation", "new_message", "new___Text", "new_translation", "goodpttext", "new__text", "new_batch", "new_source", "newttext", "new___log", "newetproduct", "newThebinary", "new_txt", "newpttext", "newptpath", "goodpttranslation", "newtnet", "new_context", "newetpath", "new___context", "good_text", "new__ext", " new_txt", "newtmessage", "new___txt", "New_net", "newpttranslation", "new_print", "new__string", "newThesource", "new___text", " new_binary", " new_batch", "newJcontext", "New_message", "newJtext", "newJText", "goodptpath", "newTheprint", "newJlog", "new__txt", "newThetext", "new_Text", "good_product", "new_binary", "new_net", " new_context", "new___ext", "new_product", "newettext", " new_string", " new_ext", "good_path", " new_source", "newtlog", "New_text", "new_string", " new_Text", "newptproduct", "new_log", " new_log", "goodptproduct", "New_log", "new_ext", "new___string", "newettranslation"], "i": ["ind", "u", "phi", "p", "ri", "in", "oi", "iu", "ui", "yi", "ei", "me", "id", "info", "hi", "iter", "ti", "ai", "I", "si", "ij", "li", "pi", "it", "x", "qi", "zi", "ix", "uri", "di", "v", "ic", "ims", "y", "mi", "im", "cli", "ci", "art", "index", "ini", "gi", "ia", "ni", "iri", "at", "iat", "is", "bi", "ii", "n", "t", "ip", "xi", "err", "init", "eu"], "start": ["ind", "from", "set", "part", "p", "sp", "in", "starting", "char", "id", "started", "stop", "length", "iter", "ish", "top", "before", "open", "it", "state", "begin", "wind", "st", "offset", "check", "last", "be", "rest", "pre", "art", "next", "index", "shift", "get", "save", "range", "first", "at", "Start", "origin", "size", "step", "init", "time"], "end": ["max", "ind", "set", "eng", "pad", "se", "append", "pend", "edge", "End", "chain", "id", "fin", "length", "stop", "len", "iter", "old", "ue", "term", "open", "it", "en", "until", "close", "begin", "ender", "then", "all", "ent", "mid", "ment", "offset", "st", "v", "bound", "last", "be", "rest", "ad", "add", "END", "ended", "ends", "next", "hend", "index", "window", "send", "ending", "est", "shape", "e", "scale", "tail", "nd", "d", "dest", "after", "size", "endif", "to", "ension", "back"], "j": ["ji", "jit", "kid", "jas", "b", "m", "uj", "json", "g", "jj", "aj", " J", "ja", "ij", "other", "z", "jl", "jo", "J", "oj", "jump", "key", "v", "q", "y", "pt", "_", "bj", "pr", "kj", "br", "job", "jp", "js", "k", "ph", "jc", "dj", "err", "t", "obj", "jack"]}}
{"code1": "package humaneval.buggy;\n\n/* Given a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n        a string of binary number */\n\npublic class SOLVE {\n    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Integer.parseInt((N + \"\").substring(i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n", "substitutes": {"N": ["NC", "TN", "NA", "H", "AN", "NT", "NS", "Y", "NV", "NR", "NN", "Ns", "NO", "NG", "FN", "L", "B", "Num", "I", "D", "P", "V", "M", "W", "NEW", "X", "CNN", "NH", "ND", "R", "GN", "NP", "NI", "NM", "G", "NB", "OUT", "Ni", "TEXT", "S", "F", "n", "ANY", "SN", "K", "Node"], "sum": ["max", "zero", "cu", "num", "total", "volume", "success", "mean", "sup", "cal", "sat", "si", "um", "sa", "hash", "count", "mod", "Sum", "sam", "su", " summed", "average", "system", "vote", "tmp", "add", "ass", "mass", "fac", "summary", "so", "scale", "tu", "union", "scan", "cum", "alph", "body", "square", "empty", "seed", "alpha", "sample", "sim", "size", "weight", "ma", "vol", "match", "black", "must", "tail"], "i": ["ind", "u", "phi", "point", "ori", "oi", "m", "iu", "gu", "ui", "in", "ex", " x", "us", "id", " ii", "info", "hi", "ti", "ai", "I", "si", "li", "pi", "it", "x", "multi", "io", "qi", "ms", "j", "ix", "on", "di", "uri", "v", "ic", "q", "y", "mi", "im", "ci", "index", "c", "inner", "ini", "go", "my", "o", "at", "is", "bi", "n", "ii", "sim", "xi", "init", "gi"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.Arrays;\n\n/* Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor' */\n\npublic class ANTI_SHUFFLE {\n    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            result += new String(chars);\n        }\n        return result;\n    }\n}\n", "substitutes": {"s": ["sv", "p", "b", "ls", "sq", "g", "bs", "sb", "strings", "ies", "ats", "a", "ms", "ps", "less", "st", "v", "w", "ns", "c", "sys", "string", "ashes", "os", "ts", "xs", "r", "S", "aws", "sts", "parts", "ings", "js", "n", "gs", "t", "ses", "rs", "ss"], "result": ["wrapper", "reason", "data", "continue", "test", "p", "sum", "char", "success", "relation", "output", "product", "out", "cur", "black", "pair", "current", " Result", "word", "prefix", "buffer", "join", "Result", "table", " resulting", "complete", "next", "string", "true", "primary", "report", "results", "comment", "br", "r", "sequence", "first", "jp", "text", "cup", "mate", "trace", "row", "meg", "root", "cache", "command", "match", "message", "res", "answer"], "str": ["p", "sp", "in", "m", "char", "comm", "g", "input", "iter", "tr", "sw", "cur", "spec", "z", "quote", "gr", "l", "j", "name", "st", "enc", "doc", "cr", "piece", "arr", "art", "c", "string", "coll", "br", "fr", "r", "expr", "ctr", "exec", "n", "dat", "Str", "oct", "STR", "vol", "t", "cat", "obj", "res"], "chars": [" chales", "crs", "cars", "shacters", " chators", "Chrs", "shrs", "shars", "chales", "Chps", "achars", "achators", "cacters", " chps", "Champs", "chacters", "Chales", " Chales", "chators", "charts", " charts", "Chars", "champs", "Charts", "chps", " Chrs", "Chators", "achps", "acharts", " champs", "Chaps", "Chacters", " Chars", " chrs", " Champs", "shaps", "chrs", "chaps", "caps"]}}
{"code1": "package humaneval.buggy;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class PARSE_MUSIC {\n    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n}\n", "substitutes": {"music_string": [" music_strings", "musicplacestr", " music_line", "music62strings", "musicplacestrings", "musicplaceline", "music_line", " music_str", "music62str", "music_strings", "music_str", "music_chain", " music_chain", "music62chain", "music62string", "musicplacestring"], "note_map": ["note_mask", "note_config", "note_down", "note64store", "note0map", " note_bridge", "annot_Map", "annot_map", "music_dict", "note_Map", "note_bag", "note64map", "notemmmap", "noteetmask", "note0bag", "note2Map", "note_save", "notemmbridge", "note0Map", " note_save", " note_Map", "annot_store", "note_store", "annot_make", "noteetMap", "noteetstore", "music_Map", "annot_config", "note_cache", "annot_down", "note2map", "music_map", "annot64map", "notemmMap", "note64make", "music_cache", "noteetsave", "annot64store", "annot64make", "noteetmake", " note_bag", "note0mask", "note_dict", "note0bridge", "note2dict", "noteetmap", "note_bridge", "note2cache", " note_mask", "note_make", "note0save", "notemmbag"], "result": ["set", "test", "continue", "expected", "data", "more", "total", "create", "response", "valid", "success", "relation", "output", "end", "goal", "up", "params", "tr", "found", "current", "cur", "pair", "term", "list", "currency", "join", "now", "folder", "Result", "all", "created", "dict", "table", "ret", "done", "complete", "event", "next", "memory", "true", "report", "search", "summary", "comment", "results", "sequence", "order", "collection", "mate", "trace", "profile", "err", "match", "message", "res", "answer"], "note": ["notation", "set", "NOTE", "nee", "lie", "thing", "beat", "source", "link", "write", "play", "info", "music", "bind", "alias", "hello", "not", "list", "notes", "one", "ne", "name", "line", "key", "event", "piece", "story", "song", " NOTE", "annot", "handle", "sound", "comment", "ote", "node", "sequence", "pose", "date", "text", "n", "Note", "component", "item", "sample", "tone", " Note"]}}

S-6	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-6	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-6	-0.1703692078590393	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-6	-0.1703692078590393	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-6	-0.0966 -0.0557 -1.5646 -0.0842 -0.6837 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0392 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.2028 -0.0741 -0.6239 -0.0738 -0.0708 -0.0848 -0.0539 -1.2269 -0.0651 -0.1200 -0.1713 -0.0984 -0.0771 -1.5078 -0.1910 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4782 -0.1082 -0.0840 -0.0740 -0.0834 -0.0906 -0.5234 -0.1077 -0.0763 -0.0789 -0.0682 -0.9762 -0.0967 -0.0825 -0.0506 -0.1061 -0.0661 -0.5290 -0.0705 -0.3561 -0.0718 -0.0780 -0.1206 -0.0809 -0.0992 -0.0275 -0.0223 -0.0284 -0.0998 -0.9012 -0.1780 -0.1608 -0.0605 -0.0530 -0.0862 -0.1154 -0.0890 -0.0479 -0.1339 -0.1053 -0.0492 -0.1319 -0.1239 -0.0512 -0.0884 -0.1026 -0.0534 -0.1035 -0.1040 -0.0330 -0.0666 -0.0776 -0.0961 -0.1745 -0.1057 -0.0759 -0.0972 -0.0781 -0.9573 -0.0975 -0.0814 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3169 -0.0913 -0.0772 -0.0717 -0.3845 -0.0747 -0.0781 -0.0790 -0.0371 -0.0340 -0.0402 -0.0836 -0.0743 -0.5771 -0.1334 -0.1016 -0.0722 -0.0832 -0.0843 -0.6988 -0.0814 -0.0669 -0.2309 -0.1137 -0.0795 -0.8691 -0.0860 -0.3675 -0.0742 -0.1027 -0.1148 -0.1061 -0.1411 -0.0693 -0.0839 -0.0717 -0.2415 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7170 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0632 -0.0342 -0.0419 -0.1088 -0.0448 -0.7096 -0.0489 -0.0689 -0.0809 -0.0789 -0.1170 -0.1142 -0.0633 -0.0288 -0.0350 -0.0864 -0.1440 -0.0855 -0.0396 -0.0287 -0.0231 -0.4165 -0.1031 -0.1829 -0.1060 -0.1703 -0.0888 -0.0365 -0.0266 -0.0248 -0.0833 -0.1045 -0.0939 -0.1493 -0.1807 -0.2682 -0.1119 -0.0279 -0.0663 -0.1300 -0.0786 -0.1612 -0.0910 -0.1009 -0.0622 -0.0874 -0.1233 -0.0890 -0.0758
S-0	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-0	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-0	-0.17453932762145996	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-0	-0.17453932762145996	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-0	-0.1008 -0.0400 -0.0996 -0.2060 -0.1012 -0.0140 -0.0902 -0.0551 -0.0349 -0.0906 -0.0229 -0.0295 -0.1128 -0.1043 -0.1462 -0.1162 -0.0465 -0.0866 -0.0865 -0.2404 -0.0589 -0.0933 -0.0617 -0.1899 -0.0810 -0.0944 -0.0629 -1.0683 -0.1029 -0.0760 -0.1103 -0.0664 -0.0767 -0.6612 -0.0938 -0.0404 -0.0893 -0.0397 -0.2802 -0.0927 -0.1030 -0.0403 -0.0887 -0.5563 -0.0935 -0.0186 -0.0824 -0.0433 -0.7711 -0.1313 -0.1097 -0.0700 -0.0839 -0.0752 -2.3101 -0.3566 -0.0926 -0.4151 -0.4435 -0.0880 -0.0744 -0.5334 -0.0810 -1.7883 -0.0677 -0.0964 -0.1089 -0.1105 -0.0744 -0.0682 -0.0776 -0.0861 -0.0575 -0.0828 -0.0888 -0.1083 -0.0644 -0.0914 -0.0854 -0.8968 -0.0742 -0.1069 -0.0601 -0.0889 -1.9331 -0.0932 -0.0742 -0.1047 -0.1005 -0.0970 -0.0507 -0.8506 -0.0485 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0478 -0.0724 -0.0896 -0.0754 -0.0649 -0.0855 -0.0825 -0.0736 -0.0258 -0.0935 -0.0752 -0.3618 -0.1136 -0.0839 -0.0409 -0.0906 -2.0543 -0.0905 -0.0563 -0.1052 -0.0742 -0.0846 -0.0389 -0.6776 -0.0393 -0.0871 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1318 -0.1153 -0.0888 -0.0910 -0.0834 -0.0527 -0.1077 -0.0532 -0.0682 -0.2404 -0.1392 -0.1113 -0.0751 -0.0394 -0.0774 -0.0578 -0.0948 -0.0366 -0.0966 -0.1926 -0.1411 -0.1211 -0.0441 -0.0787 -0.0776 -0.1059 -0.0932 -0.1262 -0.0828 -0.6687 -0.0909 -0.0984 -0.0409 -0.1166 -0.1146 -0.1017 -0.0639 -0.4416 -0.0750 -0.0844
S-1	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-1	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-1	-0.17453935742378235	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-1	-0.17453935742378235	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-1	-0.1008 -0.0400 -0.0996 -0.2060 -0.1012 -0.0140 -0.0902 -0.0551 -0.0349 -0.0906 -0.0229 -0.0295 -0.1128 -0.1043 -0.1462 -0.1162 -0.0464 -0.0866 -0.0865 -0.2404 -0.0589 -0.0933 -0.0617 -0.1899 -0.0810 -0.0944 -0.0629 -1.0683 -0.1029 -0.0760 -0.1103 -0.0664 -0.0767 -0.6612 -0.0938 -0.0404 -0.0893 -0.0397 -0.2802 -0.0927 -0.1030 -0.0403 -0.0887 -0.5563 -0.0935 -0.0186 -0.0824 -0.0433 -0.7711 -0.1313 -0.1097 -0.0700 -0.0839 -0.0752 -2.3101 -0.3566 -0.0926 -0.4151 -0.4435 -0.0880 -0.0744 -0.5334 -0.0810 -1.7883 -0.0677 -0.0964 -0.1089 -0.1105 -0.0744 -0.0682 -0.0776 -0.0861 -0.0575 -0.0828 -0.0888 -0.1083 -0.0644 -0.0914 -0.0854 -0.8968 -0.0742 -0.1069 -0.0601 -0.0889 -1.9331 -0.0932 -0.0742 -0.1047 -0.1005 -0.0970 -0.0507 -0.8506 -0.0485 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0478 -0.0724 -0.0896 -0.0754 -0.0649 -0.0855 -0.0825 -0.0736 -0.0258 -0.0935 -0.0752 -0.3618 -0.1136 -0.0839 -0.0409 -0.0906 -2.0543 -0.0905 -0.0563 -0.1052 -0.0742 -0.0846 -0.0389 -0.6776 -0.0393 -0.0871 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1318 -0.1153 -0.0888 -0.0910 -0.0834 -0.0527 -0.1077 -0.0532 -0.0682 -0.2404 -0.1392 -0.1113 -0.0751 -0.0394 -0.0774 -0.0578 -0.0948 -0.0366 -0.0966 -0.1926 -0.1411 -0.1211 -0.0441 -0.0787 -0.0776 -0.1059 -0.0932 -0.1262 -0.0828 -0.6687 -0.0909 -0.0984 -0.0409 -0.1166 -0.1146 -0.1017 -0.0639 -0.4416 -0.0750 -0.0844
S-3	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-3	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-3	-0.18250223994255066	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-3	-0.18250223994255066	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-3	-0.0908 -0.0419 -0.1087 -0.0741 -0.0954 -0.0774 -0.1180 -1.2384 -0.0641 -0.6650 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1318 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0988 -0.0677 -0.0634 -0.0836 -0.0838 -0.2904 -0.0802 -0.1015 -0.1086 -0.1092 -0.4610 -0.1642 -0.1097 -0.0911 -0.0793 -0.1208 -0.0106 -0.5282 -0.9778 -0.0634 -0.0858 -0.0424 -0.0789 -0.5762 -0.1050 -1.0788 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0889 -0.7472 -0.1004 -0.1074 -0.0710 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1051 -0.1094 -0.0600 -0.1103 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6211 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1501 -0.1462 -0.0818 -0.1053 -0.1407 -0.0843 -0.1147 -0.1107 -0.0720 -0.1068 -0.0733 -0.1018 -0.6437 -0.1033 -0.1200 -0.0936 -0.2079 -0.1595 -0.1062 -0.0815 -0.1214 -0.0691 -0.0880 -0.0966 -0.0654 -0.0958 -0.9582 -0.0971 -0.0990 -0.0903 -0.1616 -0.1688 -0.1675 -0.1065 -0.1358 -0.1198 -0.1132 -0.1381 -0.1128 -0.0932 -0.1393 -0.6521 -0.0885 -0.0885 -0.1472 -0.7089 -0.0887 -0.0744
S-4	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-4	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-4	-0.20833249390125275	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-4	-0.20833249390125275	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-4	-0.0982 -0.0604 -1.5792 -0.0777 -0.9069 -0.0605 -0.0252 -0.0836 -0.0598 -0.1102 -1.4251 -0.0654 -0.9126 -0.0695 -0.1143 -0.0835 -0.0829 -1.4168 -0.0796 -0.8329 -0.0612 -0.1212 -0.0827 -0.0676 -1.4237 -0.0826 -0.9787 -0.0675 -0.1949 -0.1094 -0.0808 -0.2722 -0.1051 -0.0743 -0.0773 -0.0712 -0.0948 -0.0934 -0.0823 -0.1112 -0.0609 -0.0839 -0.0677 -0.6122 -0.0743 -0.0653 -0.1139 -0.0265 -0.0821 -0.0864 -1.0408 -0.0798 -0.1117 -0.1232 -0.1474 -0.1141 -0.0863 -0.0899 -0.1713 -0.0518 -0.0906 -0.0302 -0.0889 -0.0404 -0.0641 -0.1798 -0.1126 -0.1059 -0.2548 -0.0584 -0.0935 -0.0322 -0.1419 -0.0834 -0.0869 -0.0827 -0.0766 -0.0871 -0.1064 -0.0851 -0.1015 -0.0365 -0.0724 -0.3862 -1.2313 -0.0521 -0.0664 -0.0741 -0.0674 -0.0234 -0.1884 -0.0865 -0.0971 -0.1220 -0.1642 -0.1016 -0.0406 -0.0957 -0.1095 -0.1058 -0.1590 -0.2721 -0.1156 -0.1287 -0.1009 -0.0857 -0.1177 -0.1411 -1.1326 -0.1641 -0.1675 -0.0848 -0.0613
S-5	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-5	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-5	-0.19591906666755676	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-5	-0.19591906666755676	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-5	-0.0995 -0.0535 -0.4356 -0.0881 -0.8989 -0.0597 -0.0650 -0.0949 -0.0586 -0.0888 -0.0482 -0.1057 -0.0933 -0.0827 -0.0843 -0.0806 -0.4523 -0.0931 -0.8282 -0.0624 -0.0492 -0.0817 -0.0719 -1.9392 -0.0863 -0.9706 -0.0657 -0.2047 -0.1026 -0.0822 -0.2147 -0.1112 -0.0676 -0.0853 -0.0842 -1.0302 -0.1070 -0.1265 -0.1039 -0.4984 -0.0770 -0.0880 -0.1962 -0.0816 -0.0803 -0.1052 -0.0584 -0.1003 -0.0602 -0.0905 -0.0811 -0.6367 -0.0869 -0.1049 -0.0736 -0.0905 -0.0921 -0.6743 -0.1180 -0.0826 -0.1291 -1.1666 -0.0737 -0.0744 -0.1627 -0.0833 -0.0950 -0.1372 -0.1152 -0.3547 -0.2454 -0.0828 -0.2308 -0.1319 -0.0895 -0.1171 -0.0965 -0.1040 -0.0443 -0.1000 -0.2469 -0.3173 -0.1360 -0.1250 -0.1858 -0.1238 -0.1660 -0.1066 -0.0416 -0.0999 -0.2597 -0.2651 -0.4149 -0.1118 -0.1462 -0.2290 -0.0795 -0.1271 -0.0829 -0.0453 -0.1432 -0.0825 -0.0744
S-2	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-2	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size ( ) - 1 ) ) ; switched = ( ! switched ) ; } return result; }
H-2	-0.25770121812820435	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
D-2	-0.25770121812820435	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
P-2	-0.1018 -0.0457 -0.3403 -0.0951 -1.3476 -0.0632 -0.0202 -0.0809 -0.0209 -0.0883 -0.0456 -0.1129 -0.3574 -0.0928 -1.2647 -0.0716 -0.0510 -0.0851 -0.0779 -0.3394 -0.0953 -1.1333 -0.0610 -0.0589 -0.0791 -0.0583 -1.7307 -0.0871 -1.4786 -0.0641 -0.2761 -0.1333 -0.0801 -0.0946 -0.0352 -0.0993 -0.1508 -0.1921 -0.1753 -0.1125 -0.3442 -1.0857 -0.2403 -0.6231 -0.0915 -0.1096 -0.1323 -0.0891 -0.0892 -0.1684 -0.1216 -0.0799 -0.0850 -0.0873 -0.1135 -0.2328 -0.3746 -0.1199 -2.0439 -0.0980 -0.0616 -0.1273 -0.0887 -0.1092 -0.1025 -0.0919 -0.2578 -0.0566 -0.1275 -0.1163 -0.1311 -0.2319 -0.1097 -1.9960 -0.0880 -0.1058 -0.1133 -0.0871 -0.1053 -0.0979 -0.0853 -1.0950 -0.1322 -0.1137 -0.1482 -0.0846 -0.1612 -0.0685 -0.0947 -0.1354 -0.0793 -0.0767
Generate test with beam=5: BLEU = 92.25 98.9/97.5/95.5/92.4 (BP = 0.961 ratio = 0.961 hyp_len = 994 ref_len = 1034)

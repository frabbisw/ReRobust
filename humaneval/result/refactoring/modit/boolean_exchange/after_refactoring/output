S-6	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = false; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = true; break; } } if ( ! ( consonant ) ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-6	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = false; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = true; break; } } if ( ! ( consonant ) ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-6	-0.20966312289237976	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = false; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = true; break; } } if ( ! ( consonant ) ) num_consonants++; } if ( ! ( consonant ) ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-6	-0.20966312289237976	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = false; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = true; break; } } if ( ! ( consonant ) ) num_consonants++; } if ( ! ( consonant ) ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-6	-0.1014 -0.0540 -1.4933 -0.3215 -0.0666 -0.1525 -0.0465 -0.0950 -0.0276 -0.1135 -1.2576 -0.1082 -0.9402 -0.0893 -0.0703 -0.0838 -0.0864 -1.1633 -0.2773 -0.0690 -0.1897 -0.0829 -0.0873 -0.0551 -0.9396 -0.2779 -0.0642 -0.0804 -4.4347 -0.0491 -0.4140 -0.0737 -0.2018 -1.0861 -0.0355 -0.0864 -0.0824 -0.1472 -0.4868 -0.1139 -0.0816 -0.0709 -0.0832 -0.0921 -0.3452 -0.1092 -0.0910 -0.0810 -0.0685 -0.9773 -0.0957 -0.0755 -0.0533 -0.0627 -0.0670 -0.6551 -0.0693 -0.4119 -0.0704 -0.0796 -0.1274 -0.0845 -0.0995 -0.0328 -0.0245 -0.0300 -0.0877 -1.1063 -0.1107 -1.8328 -0.0400 -0.0850 -0.0999 -0.0712 -0.0505 -0.1081 -0.0962 -0.0519 -0.1388 -0.1241 -0.0563 -0.0984 -0.1030 -0.0485 -0.0956 -0.0803 -0.0387 -0.0453 -0.5818 -0.0997 -0.1055 -0.0781 -0.1044 -0.0777 -0.9662 -0.1009 -0.0765 -0.0264 -0.7341 -0.1617 -0.2555 -0.1035 -0.0700 -0.0859 -0.0769 -0.4474 -0.0768 -0.0801 -0.0633 -0.0385 -0.0294 -0.0428 -0.0786 -0.0509 -0.6854 -0.0882 -0.1049 -0.0729 -0.1047 -0.0846 -0.8405 -0.0906 -0.0643 -0.1340 -0.0984 -0.0829 -1.3691 -0.0880 -0.3239 -0.0729 -0.1008 -0.1029 -0.1079 -0.0945 -0.3716 -0.1534 -0.1357 -0.2022 -0.0285 -0.3443 -0.1092 -0.2724 -0.9629 -0.1053 -0.0987 -0.0879 -0.0842 -0.0860 -0.0493 -0.0288 -0.0397 -0.0981 -0.0671 -0.5652 -0.0356 -0.0727 -0.0785 -0.0734 -0.1048 -0.1127 -0.0374 -0.1452 -0.0418 -0.0252 -0.0405 -0.0804 -0.0863 -0.1295 -0.0943 -0.0452 -0.0288 -0.0252 -0.6952 -0.0755 -0.1097 -0.1010 -1.0080 -0.1223 -0.0818 -0.0203 -0.0373 -0.0835 -0.0901 -0.1705 -0.0995 -0.0382 -0.0269 -0.0248 -0.6894 -0.0807 -0.1584 -0.1013 -0.1071 -0.0919 -0.0400 -0.0264 -0.0249 -0.0656 -0.0761 -0.0876 -0.0917 -0.1086 -0.1901 -0.1062 -0.0284 -0.5816 -0.1438 -0.2309 -0.1048 -0.0891 -0.0818 -0.0739 -0.0787 -0.1993 -0.0834 -0.0746
S-0	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
T-0	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
H-0	-0.23651860654354095	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
D-0	-0.23651860654354095	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
P-0	-0.0988 -0.0422 -0.0991 -1.8810 -0.0144 -0.0901 -0.0526 -0.0296 -0.0914 -0.0193 -0.0287 -0.1127 -0.1005 -2.0640 -0.0351 -0.0850 -0.0856 -0.2029 -0.0566 -0.0899 -0.0916 -0.3169 -0.0857 -0.0905 -0.0968 -1.2346 -0.1089 -0.0755 -0.1138 -0.0646 -0.0768 -0.6397 -0.0929 -0.0352 -0.0888 -0.0373 -0.3508 -0.0950 -0.1009 -0.0371 -0.0893 -0.5674 -0.0938 -0.0209 -0.0862 -0.0376 -0.8582 -0.1469 -0.1105 -0.0688 -0.0810 -0.0737 -2.2389 -0.3801 -0.0931 -0.4026 -0.3543 -0.0786 -0.0735 -0.7432 -0.0792 -1.9691 -0.0663 -0.0955 -0.1113 -0.1120 -0.0653 -0.4165 -0.2716 -0.1756 -0.0604 -0.0818 -0.0880 -0.0999 -0.1029 -0.0924 -0.1021 -0.6138 -0.0775 -0.1045 -0.0577 -0.0899 -2.0386 -0.0943 -0.0677 -0.1079 -0.1096 -0.0995 -0.0523 -1.0357 -0.0480 -0.3418 -0.1520 -0.2368 -0.0933 -0.0983 -0.0639 -0.0966 -0.0761 -0.1054 -0.0417 -0.2380 -0.1162 -0.1257 -0.0759 -0.0858 -0.0824 -0.0692 -0.0398 -0.0957 -0.0724 -0.3565 -0.1168 -0.0879 -0.0408 -0.0908 -1.9230 -0.0920 -0.0539 -0.1064 -0.0781 -0.0865 -0.0368 -0.8157 -0.0419 -0.2851 -0.1161 -0.2019 -0.0869 -0.0967 -0.0684 -0.0701 -0.1119 -0.1258 -0.1061 -0.0783 -0.0691 -0.1114 -0.0584 -0.0678 -0.3531 -0.1142 -0.1154 -0.0603 -0.0395 -0.0864 -0.0560 -0.0965 -0.0380 -0.1049 -0.2622 -0.1057 -1.9624 -0.0716 -0.0748 -0.1115 -0.0681 -0.1186 -0.0753 -0.6301 -0.0811 -0.0984 -0.0452 -0.3364 -0.0907 -0.0670 -1.3719 -0.0770 -1.2223 -0.0870
S-1	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = false; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = false; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
T-1	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = true; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = false; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
H-1	-0.24107268452644348	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = false; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = false; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; }
D-1	-0.24107268452644348	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = false; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = false; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; }
P-1	-0.0990 -0.0418 -0.0985 -1.8804 -0.0140 -0.0902 -0.0528 -0.0295 -0.0915 -0.0190 -0.0285 -0.1129 -0.1005 -2.0792 -0.0351 -0.0852 -0.0855 -0.2093 -0.0637 -0.0949 -0.0602 -0.2242 -0.0948 -0.0958 -0.1093 -1.5709 -0.1113 -0.0758 -0.1148 -0.0650 -0.0761 -0.6185 -0.0932 -0.0358 -0.0887 -0.0375 -0.3552 -0.0941 -0.1024 -0.0389 -0.0897 -0.5726 -0.0931 -0.0211 -0.0862 -0.0376 -0.8113 -0.1427 -0.1106 -0.0688 -0.0799 -0.0733 -2.1937 -0.3825 -0.0917 -0.4031 -0.3652 -0.0782 -0.0746 -0.7274 -0.0788 -0.9349 -0.0699 -0.0902 -0.1139 -0.1146 -0.0668 -0.4228 -0.2492 -0.1733 -0.0618 -0.0841 -0.0861 -0.1027 -0.0932 -0.0985 -0.0854 -0.9161 -0.0839 -0.1085 -0.0632 -0.0928 -2.0695 -0.0940 -0.0746 -0.1084 -0.1149 -0.1000 -0.0518 -1.1512 -0.0500 -0.3603 -0.1532 -0.2437 -0.0946 -0.0999 -0.0681 -0.0916 -0.0745 -0.1047 -0.0430 -0.2485 -0.1150 -0.1248 -0.0794 -0.0897 -0.0828 -0.0699 -0.0394 -0.0950 -0.0651 -0.6802 -0.1192 -0.0910 -0.0411 -0.0893 -2.0514 -0.0915 -0.0593 -0.1064 -0.0763 -0.0870 -0.0383 -0.8757 -0.0415 -0.2936 -0.1187 -0.2060 -0.0884 -0.0971 -0.0709 -0.0827 -0.1590 -0.1168 -0.1258 -0.1201 -0.0877 -0.0687 -0.1119 -0.0639 -0.0724 -0.5203 -0.1495 -0.1164 -0.0260 -0.0859 -0.0525 -0.1002 -0.0437 -0.0976 -0.3406 -0.1343 -2.1483 -0.0716 -0.0768 -0.1177 -0.0870 -0.1200 -0.0762 -0.7403 -0.0788 -0.0998 -0.0462 -0.3728 -0.0874 -0.0692 -1.2556 -0.0780 -0.9909
S-3	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = ! ( num < 0 ) ; if ( ! ( neg ) ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && ! ( neg ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-3	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = ! ( num < 0 ) ; if ( ! ( neg ) ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && ! ( neg ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-3	-0.17486509680747986	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = ! ( num < 0 ) ; if ( ! ( neg ) ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && ! ( neg ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-3	-0.17486509680747986	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = ! ( num < 0 ) ; if ( ! ( neg ) ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && ! ( neg ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-3	-0.0870 -0.0445 -0.1038 -0.0759 -0.0947 -0.0754 -0.1209 -1.1786 -0.2160 -0.0363 -0.1937 -0.0537 -0.0871 -0.0909 -0.1038 -0.1220 -0.0841 -0.6929 -0.1551 -0.1060 -0.0800 -0.1117 -0.0638 -0.0666 -0.0862 -0.0849 -0.3304 -0.0696 -0.1059 -0.1058 -0.1064 -0.1456 -0.0860 -0.0967 -0.0898 -0.0902 -0.2422 -0.1054 -0.0600 -0.1620 -0.0790 -0.0756 -0.0842 -0.1463 -0.0116 -0.6769 -1.2077 -0.0712 -0.0829 -0.0391 -0.0816 -0.5810 -0.1071 -1.4713 -0.1079 -0.0959 -0.0847 -0.0947 -0.1366 -0.0796 -0.0858 -0.7755 -0.0906 -0.1075 -0.0740 -0.0941 -0.0737 -0.9252 -0.0913 -0.0843 -0.1248 -0.1055 -0.0505 -0.1050 -0.0839 -0.0773 -0.0909 -0.0878 -0.4240 -0.0742 -0.0975 -0.1435 -0.1163 -0.3003 -0.1105 -0.1645 -0.1304 -0.0812 -0.1074 -0.1085 -0.1367 -0.0509 -0.0814 -0.0890 -0.1224 -0.0847 -0.0781 -0.1002 -0.0625 -0.1022 -0.6538 -0.1031 -0.1053 -0.0912 -0.2178 -0.1660 -0.0885 -0.0807 -0.1489 -0.0755 -0.0915 -0.0920 -0.0564 -0.0958 -0.8400 -0.0966 -0.0927 -0.0901 -0.1627 -0.1612 -0.1389 -0.0968 -0.1421 -0.1149 -0.1227 -0.1441 -0.1073 -0.0888 -0.1262 -0.8537 -0.0844 -0.0859 -0.1364 -0.6440 -0.0904 -0.0748
S-4	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = false; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = false; break; } num /= 10; } if ( ! ( all_odd ) ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-4	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = false; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = true; break; } num /= 10; } if ( ! ( all_odd ) ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-4	-0.1824789196252823	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = false ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = false ; break; } num /= 10; } if ( ! ( all_odd ) ) { res.add ( i ) ; } } return res ; }
D-4	-0.1824789196252823	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = false ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = false ; break; } num /= 10; } if ( ! ( all_odd ) ) { res.add ( i ) ; } } return res ; }
P-4	-0.1058 -0.0560 -1.5382 -0.3174 -0.0501 -0.1483 -0.0255 -0.0851 -0.0636 -0.1118 -1.3273 -0.2325 -0.0466 -0.1525 -0.1249 -0.0817 -0.0847 -1.4284 -0.2623 -0.0545 -0.1480 -0.1275 -0.0853 -0.0644 -1.2681 -0.2397 -0.0585 -0.1342 -0.0644 -0.0819 -0.2410 -0.1052 -0.0674 -0.0833 -0.0737 -0.0932 -0.0935 -0.0846 -0.1156 -0.0670 -0.0829 -0.0654 -0.5711 -0.0916 -0.0678 -0.1136 -0.0255 -0.0816 -0.1103 -0.9480 -0.0882 -0.1116 -0.1427 -0.1425 -0.1157 -0.0853 -0.0890 -0.1791 -0.0477 -0.0928 -0.0277 -0.0875 -0.0444 -0.0592 -0.1486 -0.1150 -0.1058 -0.2592 -0.0521 -0.0956 -0.0309 -0.1216 -0.0761 -0.0866 -0.0728 -0.0767 -0.0855 -0.1038 -0.0886 -0.1074 -0.0352 -0.0694 -0.1639 -1.0979 -0.0515 -0.0703 -0.0765 -0.0778 -0.0225 -0.1688 -0.0882 -0.1048 -0.1175 -0.0413 -0.4836 -0.0915 -0.1031 -0.0383 -0.0944 -0.0899 -0.1108 -0.1006 -0.1437 -0.2613 -0.1182 -0.1549 -0.1021 -0.0880 -0.1313 -0.1360 -1.3718 -0.1781 -0.1631 -0.0865 -0.0616
S-5	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = true; } } if ( ! ( is_prime ) ) primes.add ( i ) ; } return primes; }
T-5	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = true; break; } } if ( ! ( is_prime ) ) primes.add ( i ) ; } return primes; }
H-5	-0.1849110722541809	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = true ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = true ; } } if ( ! is_prime ) primes.add ( i ) ; } return primes ; }
D-5	-0.1849110722541809	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = true ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = true ; } } if ( ! is_prime ) primes.add ( i ) ; } return primes ; }
P-5	-0.1013 -0.0480 -0.3225 -0.3421 -0.0544 -0.1739 -0.0664 -0.0965 -0.0582 -0.0911 -0.0461 -0.1073 -0.0867 -0.0779 -0.0844 -0.0834 -0.3771 -0.3805 -0.0546 -0.1757 -0.0432 -0.0853 -0.0711 -1.8710 -0.3262 -0.0590 -0.1523 -0.0627 -0.0821 -0.1757 -0.1135 -0.0640 -0.0853 -0.0851 -1.2184 -0.1065 -0.1500 -0.1126 -0.4025 -0.0765 -0.0901 -0.1933 -0.0803 -0.0809 -0.1238 -0.0576 -0.1034 -0.0610 -0.0892 -0.1023 -0.6050 -0.0853 -0.1068 -0.0735 -0.0900 -0.0902 -0.7331 -0.1237 -0.0885 -0.1323 -1.0400 -0.0779 -0.0834 -0.1616 -0.0819 -0.0928 -0.1308 -0.1150 -0.3352 -0.2367 -0.0865 -0.1946 -0.1266 -0.0891 -0.1147 -0.0817 -0.1082 -0.0488 -0.0881 -0.3570 -0.4678 -0.1146 -0.1057 -0.1794 -0.1214 -0.1016 -0.7472 -0.1127 -0.0436 -0.0941 -0.3547 -0.2116 -0.3447 -0.1115 -0.1334 -0.1791 -0.0837 -0.1153 -0.0853 -0.0439 -0.2046 -0.0808 -0.0773
S-2	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = false; while ( lst.size () > 0 ) { if ( ! ( switched ) ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-2	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = false; while ( lst.size () > 0 ) { if ( ! ( switched ) ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size () - 1 ) ) ; switched = ! ( ( switched ) ) ; } return result; }
H-2	-0.20840786397457123	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = false ; while ( lst.size () > 0 ) { if ( ! ( switched ) ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = true ; } } return result ; }
D-2	-0.20840786397457123	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = false ; while ( lst.size () > 0 ) { if ( ! ( switched ) ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = true ; } } return result ; }
P-2	-0.1028 -0.0406 -0.2154 -0.3107 -0.0651 -0.1362 -0.0200 -0.0802 -0.0196 -0.0924 -0.0442 -0.1145 -0.2424 -0.3747 -0.0585 -0.1623 -0.0568 -0.0843 -0.0804 -0.2795 -0.3798 -0.0607 -0.1270 -0.0600 -0.0820 -0.0552 -1.5804 -0.3284 -0.0666 -0.1135 -0.0703 -0.0803 -0.1044 -0.0333 -0.0988 -0.1887 -0.1761 -0.1794 -0.1127 -0.3570 -0.8839 -0.2109 -0.0683 -0.1874 -0.1274 -0.0912 -0.0904 -0.1733 -0.1151 -0.1498 -0.6052 -0.0972 -0.0853 -0.0847 -0.0803 -0.1275 -0.2245 -0.3271 -0.1180 -2.0599 -0.0979 -0.0591 -0.1257 -0.0986 -0.1052 -0.1013 -0.0944 -0.5970 -0.0534 -0.1412 -0.1147 -0.1251 -0.2212 -0.1114 -2.0550 -0.0888 -0.1086 -0.1159 -0.0872 -0.1016 -0.0978 -0.0885 -0.7302 -0.0915 -0.2735 -0.1131 -0.0790 -0.1115 -0.0673 -0.0940 -0.1332 -0.0790 -0.0774
Generate test with beam=5: BLEU = 91.49 97.1/95.1/92.9/90.0 (BP = 0.976 ratio = 0.976 hyp_len = 1030 ref_len = 1055)

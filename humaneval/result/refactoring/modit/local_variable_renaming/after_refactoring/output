S-18	public static int fizz_buzz ( int n ) { int answer = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) answer += 1; } } } return answer; }
T-18	public static int fizz_buzz ( int n ) { int answer = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) answer += 1; } } } return answer; }
H-18	-0.19856716692447662	public static int fizz_buzz ( int n ) { int answer = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) answer += 1 ; } } } return answer ; }
D-18	-0.19856716692447662	public static int fizz_buzz ( int n ) { int answer = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) answer += 1 ; } } } return answer ; }
P-18	-0.1025 -0.0456 -0.1103 -0.0738 -0.0155 -0.0878 -0.0542 -0.0148 -0.1178 -0.0940 -0.0620 -0.0872 -0.0922 -0.1007 -0.0423 -0.0815 -0.7149 -0.1485 -0.1080 -0.0735 -0.0744 -0.0827 -0.7517 -0.0867 -0.1051 -0.0917 -0.4674 -0.0771 -0.0859 -0.1855 -0.0777 -0.0874 -0.2139 -0.1113 -0.2071 -0.2736 -0.0575 -0.1611 -0.1000 -0.3420 -0.1022 -0.2000 -0.0339 -0.1375 -0.0963 -0.0803 -0.0832 -0.1698 -0.1071 -0.0778 -0.0926 -0.0921 -0.8861 -0.1024 -0.0752 -0.2056 -0.1856 -0.7465 -0.0651 -0.3552 -0.0878 -0.0840 -0.0775 -0.0931 -0.1589 -0.0747 -0.1000 -0.1502 -0.1117 -0.1926 -0.2469 -0.6087 -1.9574 -0.1132 -0.1156 -1.1299 -0.0871 -0.1107 -0.1149 -0.1077 -0.4223 -0.1216 -0.0161 -0.0904 -0.1308 -0.0861 -1.7111 -0.1210 -0.1030 -0.0954 -0.0849 -0.0987 -0.0556 -0.2784 -0.0838 -0.0790
S-56	public static int sum_squares ( int [ ] lst ) { int global = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) global += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) global += lst [ i ] * lst [ i ] * lst [ i ] ; else global += lst [ i ] ; } return global; }
T-56	public static int sum_squares ( int [ ] lst ) { int global = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) global += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) global += lst [ i ] * lst [ i ] * lst [ i ] ; else global += lst [ i ] ; } return global; }
H-56	-0.13897591829299927	public static int sum_squares ( int [ ] lst ) { int global = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) global += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) global += lst [ i ] * lst [ i ] ; else global += lst [ i ] ; } return global ; }
D-56	-0.13897591829299927	public static int sum_squares ( int [ ] lst ) { int global = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) global += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) global += lst [ i ] * lst [ i ] ; else global += lst [ i ] ; } return global ; }
P-56	-0.0995 -0.0463 -0.1318 -0.1031 -0.1128 -0.0164 -0.0702 -0.1196 -0.1216 -0.1592 -0.1104 -0.0641 -0.0916 -0.0852 -0.1223 -0.0907 -0.1075 -1.2245 -0.1504 -0.1022 -0.0750 -0.0815 -0.0858 -1.3761 -0.0937 -0.1130 -0.2978 -0.1021 -0.0521 -0.3063 -0.0890 -0.1087 -0.2674 -0.0809 -0.1015 -0.1126 -0.1136 -0.2380 -0.3157 -0.1261 -0.1624 -0.1121 -0.0875 -0.1039 -0.0539 -0.0965 -0.0961 -0.1012 -0.0814 -0.0872 -0.0789 -0.1106 -0.0919 -0.0808 -0.0823 -0.1322 -0.0936 -0.1088 -0.1302 -0.3062 -0.1034 -0.1039 -0.1052 -0.0934 -0.1072 -0.0624 -0.0737 -0.0916 -0.1003 -0.0766 -0.0727 -0.0627 -0.0985 -0.0949 -0.0695 -0.2796 -0.1140 -0.1090 -0.0650 -0.0763 -0.0718 -0.1025 -0.0843 -0.1563 -0.1096 -0.1122 -0.0751 -0.2070 -0.0827 -0.0828
S-75	public static int [ ] even_odd_count ( int num ) { int well_book = 0; int own_hash = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) well_book += 1; if ( ( int ) c % 2 == 1 ) own_hash += 1; } return new int [ ] { well_book, own_hash } ; }
T-75	public static int [ ] even_odd_count ( int num ) { int well_book = 0; int own_hash = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray ( ) ) { int n = c - '0'; if ( n % 2 == 0 ) well_book += 1; if ( n % 2 == 1 ) own_hash += 1; } return new int [ ] { well_book, own_hash } ; }
H-75	-0.15823408961296082	public static int [ ] even_odd_count ( int num ) { int well_book = 0; int own_hash = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) well_book += 1 ; if ( ( int ) c % 2 == 1 ) own_hash += 1 ; } return new int [ ] { well_book, own_hash } ; }
D-75	-0.15823408961296082	public static int [ ] even_odd_count ( int num ) { int well_book = 0; int own_hash = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) well_book += 1 ; if ( ( int ) c % 2 == 1 ) own_hash += 1 ; } return new int [ ] { well_book, own_hash } ; }
P-75	-0.1071 -0.0419 -0.0938 -0.1996 -0.0593 -0.0771 -0.0989 -0.0088 -0.0985 -0.0573 -0.1120 -0.0998 -0.0856 -0.0820 -0.0863 -0.1030 -0.2003 -0.1015 -0.0528 -0.0869 -0.7627 -0.0986 -0.0357 -0.0937 -0.0665 -0.0880 -0.7570 -0.1572 -0.1136 -0.1941 -0.0790 -0.0670 -0.1805 -0.0832 -0.0670 -0.0561 -0.0812 -0.1083 -0.0870 -0.0284 -0.3395 -0.1217 -0.0909 -0.0888 -0.0939 -0.1175 -0.2292 -0.1488 -0.1018 -0.2178 -0.2686 -0.0738 -0.1465 -0.1385 -0.0807 -0.3392 -0.1011 -0.0719 -0.1009 -2.7468 -0.1906 -0.1465 -0.1043 -0.0987 -0.0857 -0.0811 -0.1444 -0.1737 -0.0610 -0.0876 -0.1878 -0.0784 -0.0280 -0.0857 -0.1071 -0.0975 -0.2309 -0.1635 -0.0956 -0.1074 -0.0758 -0.0660 -0.0725 -0.1176 -0.1164 -0.1963 -0.1085 -0.0593 -0.8054 -0.0292 -0.0904 -0.0899 -0.1043 -0.0943 -0.0680 -0.0659
S-73	public static boolean will_it_fly ( int [ ] q, int w ) { int sam = 0; for ( int ip = 0; ip < q.length; ip += 1 ) sam += q [ ip ] ; if ( sam > w ) return false; int ip = 0; int div = q.length - 1; while ( ip < div ) { if ( q [ ip ] != q [ div ] ) return false; } return true; }
T-73	public static boolean will_it_fly ( int [ ] q, int w ) { int sam = 0; for ( int ip = 0; ip < q.length; ip += 1 ) sam += q [ ip ] ; if ( sam > w ) return false; int ip = 0; int div = q.length - 1; while ( ip < div ) { if ( q [ ip ] != q [ div ] ) return false; ip += 1; div -= 1; } return true; }
H-73	-0.20844899117946625	public static boolean will_it_fly ( int [ ] q , int w ) { int sam = 0; for ( int ip = 0; ip < q.length ; ip += 1 ) sam += q [ ip ] ; if ( sam > w ) return false ; int ip = 0; int div = q.length - 1 ; while ( ip < div ) { if ( q [ ip ] != q [ div ] ) return false ; ip += q [ ip ] ; } return true ; }
D-73	-0.20844899117946625	public static boolean will_it_fly ( int [ ] q , int w ) { int sam = 0; for ( int ip = 0; ip < q.length ; ip += 1 ) sam += q [ ip ] ; if ( sam > w ) return false ; int ip = 0; int div = q.length - 1 ; while ( ip < div ) { if ( q [ ip ] != q [ div ] ) return false ; ip += q [ ip ] ; } return true ; }
P-73	-0.0998 -0.0524 -0.1045 -0.0322 -0.0907 -0.0245 -0.0928 -0.0136 -0.1105 -0.1130 -0.1414 -0.0740 -0.0549 -1.5219 -0.0881 -0.0946 -0.0897 -0.0899 -0.1508 -0.0685 -0.1115 -0.9159 -0.1794 -0.1056 -0.0859 -0.0427 -0.0929 -0.7522 -0.0458 -0.1134 -0.0934 -0.1031 -0.0798 -0.3657 -0.0510 -0.0893 -0.2071 -0.0884 -0.3194 -0.0721 -0.0868 -0.0785 -0.0522 -0.0853 -0.0802 -0.1589 -0.1169 -0.1352 -0.2213 -0.1570 -0.0904 -0.0936 -0.0802 -1.0096 -0.1386 -0.0266 -0.1000 -0.6204 -0.1028 -0.0929 -0.0878 -0.0676 -0.1006 -0.0637 -0.2498 -1.9968 -0.1335 -0.0932 -0.1122 -0.0448 -0.1562 -0.1507 -0.0878 -0.0889 -0.1098 -0.1154 -0.1335 -0.0726 -0.0410 -0.0827 -0.3133 -0.0478 -0.0861 -0.1729 -0.0783 -0.0974 -0.0718 -0.0506 -1.5488 -0.3983 -0.4875 -0.9846 -0.2188 -0.0351 -0.0715 -0.1193 -0.4644 -0.0796 -0.0597 -1.1813 -0.0803 -0.0756
S-8	public static double mean_absolute_deviation ( List < Double > numbers ) { double si = 0.; for ( Double number : numbers ) { si += number; } double mask = si / numbers.size ( ) ; double devlation_num = 0.; for ( Double number : numbers ) { devlation_num += ( number - mask ) * ( number - mask ) ; } return devlation_num / numbers.size ( ) ; }
T-8	public static double mean_absolute_deviation ( List < Double > numbers ) { double si = 0.; for ( Double number : numbers ) { si += number; } double mask = si / numbers.size ( ) ; double devlation_num = 0.; for ( Double number : numbers ) { devlation_num += Math.abs ( number - mask ) ; } return devlation_num / numbers.size ( ) ; }
H-8	-0.12552940845489502	public static double mean_absolute_deviation ( List < Double > numbers ) { double si = 0. ; for ( Double number : numbers ) { si += number ; } double mask = si / numbers.size ( ) ; double devlation_num = 0. ; for ( Double number : numbers ) { devlation_num += ( number - mask ) * ( number - mask ) ; } return devlation_num / numbers.size ( ) ; }
D-8	-0.12552940845489502	public static double mean_absolute_deviation ( List < Double > numbers ) { double si = 0. ; for ( Double number : numbers ) { si += number ; } double mask = si / numbers.size ( ) ; double devlation_num = 0. ; for ( Double number : numbers ) { devlation_num += ( number - mask ) * ( number - mask ) ; } return devlation_num / numbers.size ( ) ; }
P-8	-0.0950 -0.0510 -0.0772 -0.0282 -0.1006 -0.0383 -0.0866 -0.0321 -0.0281 -0.1131 -0.4955 -0.0783 -0.1844 -0.0700 -0.0664 -0.0867 -0.0843 -0.0821 -0.0312 -0.0945 -0.1470 -0.9437 -0.6794 -0.1073 -0.2410 -0.0531 -0.0665 -0.0705 -0.0901 -0.0828 -0.0758 -0.0658 -0.0377 -0.5646 -0.0753 -0.0790 -0.1144 -0.0959 -0.2014 -0.0759 -0.0611 -0.1235 -0.1131 -0.3999 -0.0804 -0.0889 -0.0748 -0.1056 -0.0655 -0.0896 -0.0563 -0.0917 -0.1497 -0.3483 -0.1197 -0.1067 -0.1881 -0.0462 -0.0626 -0.0728 -0.0883 -0.0959 -0.3139 -0.0657 -0.0873 -0.0614 -0.0712 -0.1935 -0.0749 -0.0948 -0.1276 -0.0806 -0.0465 -0.1023 -0.0623 -0.0652 -0.0632 -0.0877 -0.0909 -0.0829 -0.1641 -0.2673 -0.0662 -0.0822 -0.0564 -0.0977 -0.0594 -0.1162 -0.1059 -0.2329 -0.1134 -0.0848 -0.0819 -0.0802
S-35	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean SWitching = true; while ( lst.size ( ) > 0 ) { if ( SWitching ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-35	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean SWitching = true; while ( lst.size ( ) > 0 ) { if ( SWitching ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size ( ) - 1 ) ) ; SWitching = ( ! SWitching ) ; } return result; }
H-35	-0.2616633474826813	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean SWitching = true ; while ( lst.size () > 0 ) { if ( SWitching ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result ; }
D-35	-0.2616633474826813	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean SWitching = true ; while ( lst.size () > 0 ) { if ( SWitching ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result ; }
P-35	-0.1009 -0.0465 -0.3574 -0.0932 -1.3395 -0.0624 -0.0181 -0.0808 -0.0218 -0.0895 -0.0455 -0.1138 -0.3798 -0.0917 -1.2672 -0.0698 -0.0499 -0.0863 -0.0778 -0.3583 -0.0938 -1.1278 -0.0608 -0.0596 -0.0801 -0.0598 -1.8047 -0.0857 -1.4710 -0.0637 -0.2666 -0.1185 -0.0798 -0.0906 -0.0832 -0.0156 -0.0349 -0.0941 -0.1669 -0.2462 -0.1684 -0.1104 -0.7057 -1.1257 -0.2483 -2.1046 -0.6142 -0.1206 -0.0912 -0.0857 -0.1318 -0.1226 -0.2224 -0.0178 -0.0380 -0.0870 -0.0831 -0.0864 -0.1838 -0.2923 -0.1139 -1.6954 -0.0931 -0.0389 -0.1144 -0.0750 -0.0929 -0.0963 -0.0900 -0.1171 -0.0664 -0.0961 -0.0854 -0.1142 -0.1854 -0.1091 -1.6610 -0.0877 -0.0966 -0.1095 -0.0777 -0.0903 -0.0946 -0.0878 -0.1412 -0.2339 -0.0761 -0.0820 -0.1456 -0.0770 -0.0734
S-37	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double approximately = numbers.get ( i ) - numbers.get ( j ) ; if ( approximately < threshold ) return true; } } return false; }
T-37	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double approximately = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( approximately < threshold ) return true; } } return false; }
H-37	-0.15857593715190887	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double approximately = numbers.get ( i ) - numbers.get ( j ) ; if ( approximately < threshold ) return true ; } } return false ; }
D-37	-0.15857593715190887	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double approximately = numbers.get ( i ) - numbers.get ( j ) ; if ( approximately < threshold ) return true ; } } return false ; }
P-37	-0.0918 -0.0531 -0.1017 -0.0522 -0.0872 -0.0349 -0.0830 -0.0211 -0.1123 -0.3515 -0.0777 -0.1686 -0.0556 -0.0520 -1.3452 -0.0954 -0.0668 -0.0914 -0.0829 -0.1834 -0.1120 -0.0891 -0.0768 -0.0820 -1.1385 -0.0836 -0.0909 -0.0967 -0.1114 -0.1482 -0.4174 -0.0754 -0.0935 -0.0767 -0.0987 -0.1654 -0.0771 -0.0803 -0.1164 -0.1026 -0.0666 -0.0848 -0.0871 -0.1273 -0.0675 -1.2172 -0.0903 -0.0941 -0.0733 -0.1070 -0.1252 -0.1874 -0.0781 -0.1026 -0.0803 -0.1045 -0.1252 -0.0780 -0.0960 -0.1603 -0.0311 -0.1021 -0.0922 -0.1366 -0.2823 -0.1115 -0.1962 -0.0955 -0.1431 -0.0756 -0.1004 -0.2022 -0.1025 -0.1246 -0.0902 -0.1082 -0.1220 -0.1205 -0.0159 -0.4254 -0.0851 -0.0913 -0.1716 -0.0562 -0.8404 -0.1122 -0.1028 -0.1024 -0.0450 -0.4402 -0.0842 -0.0862
S-63	public static int count_upper ( String s ) { int nt = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char col = s.charAt ( i ) ; if ( col == 'A' || col == 'e' || col == 'I' || col == 'o' || col == 'u' ) nt += 1; } return nt; }
T-63	public static int count_upper ( String s ) { int nt = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char col = s.charAt ( i ) ; if ( col == 'A' || col == 'E' || col == 'I' || col == 'O' || col == 'U' ) nt += 1; } return nt; }
H-63	-0.19177848100662231	public static int count_upper ( String s ) { int nt = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char col = s.charAt ( i ) ; if ( col == 'A' || col == 'e' || col == 'I' || col == 'o' || col == 'u' ) nt += 1 ; } return nt ; }
D-63	-0.19177848100662231	public static int count_upper ( String s ) { int nt = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char col = s.charAt ( i ) ; if ( col == 'A' || col == 'e' || col == 'I' || col == 'o' || col == 'u' ) nt += 1 ; } return nt ; }
P-63	-0.0939 -0.0471 -0.1097 -0.0625 -0.1012 -0.0322 -0.1155 -0.9636 -0.1204 -0.0899 -0.0894 -0.1127 -0.0500 -0.0866 -1.1789 -0.1464 -0.1075 -0.0814 -0.0705 -0.0826 -1.2518 -0.0853 -0.1115 -0.3793 -0.1441 -0.0746 -0.5337 -0.0805 -0.0920 -0.0761 -0.1084 -0.1359 -0.0812 -0.0868 -0.1431 -0.0615 -0.0944 -0.0883 -0.1416 -0.9166 -0.0988 -0.1020 -0.0860 -0.0858 -0.1583 -0.1259 -0.2016 -0.2185 -0.0582 -0.2017 -0.0937 -0.1758 -0.0935 -0.1403 -0.0604 -0.1036 -0.1002 -0.2848 -0.0967 -0.1434 -0.0852 -0.1088 -0.1172 -0.3944 -0.0918 -0.1307 -0.0883 -0.0435 -0.1124 -1.2591 -0.0855 -0.1126 -0.0717 -0.0595 -0.1107 -0.0836 -0.1493 -0.1126 -1.4249 -0.1114 -0.1749 -0.0858 -0.0787 -0.1772 -0.0896 -0.0753
S-29	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] macests = md.macests ( ) ; return DatatypeConverter.printHexBinary ( macests ) .toLowerCase ( ) ; }
T-29	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "MD5" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] macests = md.macests ( ) ; return DatatypeConverter.printHexBinary ( macests ) .toLowerCase ( ) ; }
H-29	-0.2155638039112091	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text . equals ( "" ) ) return null ; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] macests = md.macests ( ) ; return DatatypeConverter.printHexBinary ( macests ) . toLowerCase () ; }
D-29	-0.2155638039112091	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text . equals ( "" ) ) return null ; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] macests = md.macests ( ) ; return DatatypeConverter.printHexBinary ( macests ) . toLowerCase () ; }
P-29	-0.1013 -0.0476 -1.6361 -0.0687 -0.0836 -0.0629 -0.0800 -0.0352 -0.0602 -0.1174 -1.1963 -0.0532 -0.0877 -0.0974 -0.0589 -0.0468 -0.0778 -0.1931 -0.1160 -0.2424 -2.7647 -0.5174 -0.1186 -0.0419 -0.0939 -0.0882 -0.0854 -0.3165 -0.1812 -0.1417 -0.0552 -0.0837 -0.0797 -0.1026 -2.0186 -0.1131 -0.0788 -0.0337 -0.0475 -0.0295 -0.0443 -0.0880 -0.0774 -0.1072 -0.1291 -0.0693 -0.1152 -0.0603 -0.2665 -1.5060 -0.2789 -0.1629 -0.0861 -0.0846 -0.0439 -0.2534 -0.1306 -0.1744 -0.0481 -0.0929 -0.0497 -0.1284 -0.0585 -0.0322 -0.2196 -0.5316 -0.0926 -0.1332 -0.0064 -0.0210 -0.1214 -0.0388 -0.0188 -0.0138 -0.1064 -0.2100 -0.0729 -0.1001 -0.2747 -0.1803 -0.0574 -0.1998 -0.0872 -0.0785
S-24	public static boolean iscude ( int a ) { double div = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal.valueOf ( div ) ; int round67floor = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round67floor, 3 ) ) == a; }
T-24	public static boolean iscude ( int a ) { a = Math.abs ( a ) ; double div = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal.valueOf ( div ) ; int round67floor = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round67floor, 3 ) ) == a; }
H-24	-0.2044973224401474	public static boolean iscude ( int a ) { double div = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal. valueOf ( div ) ; int round67floor = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round67floor, 3 ) ) == a ; }
D-24	-0.2044973224401474	public static boolean iscude ( int a ) { double div = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal. valueOf ( div ) ; int round67floor = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round67floor, 3 ) ) == a ; }
P-24	-0.0864 -0.0534 -0.0921 -0.0172 -0.0161 -0.1109 -0.1374 -0.0943 -0.0926 -0.0867 -0.1878 -0.0825 -0.0862 -2.3376 -0.0943 -0.0334 -0.1060 -0.1158 -0.7929 -0.0627 -0.0284 -0.0986 -0.0919 -0.7756 -0.0277 -0.0750 -0.4834 -0.0934 -1.2565 -0.1139 -0.0790 -0.0980 -0.0889 -0.1492 -0.0456 -0.0140 -0.0529 -0.0923 -0.2284 -0.2057 -0.0764 -0.0800 -0.1249 -0.1704 -0.0291 -0.1037 -0.5180 -0.0244 -0.0243 -0.0857 -0.0422 -0.0175 -0.0785 -0.0491 -0.0982 -0.1019 -0.0863 -0.0369 -0.2151 -0.3103 -0.0919 -0.1163 -0.1438 -0.1612 -0.1028 -0.0804 -2.7834 -0.1003 -0.0494 -0.1158 -0.0639 -0.0235 -0.0549 -0.7901 -0.1160 -0.0920 -0.0950 -0.0923 -0.2026 -0.2877 -0.0791 -0.0689
S-39	public static String longest ( List < String > strings ) { int minen = 0; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { minen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == minen ) { return string; } } return null; }
T-39	public static String longest ( List < String > strings ) { int minen = 0; for ( String string : strings ) { if ( string.length ( ) > minen ) { minen = string.length ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == minen ) { return string; } } return null; }
H-39	-0.1720455437898636	public static String longest ( List < String > strings ) { int minen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { minen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == minen ) { return string ; } } return null ; }
D-39	-0.1720455437898636	public static String longest ( List < String > strings ) { int minen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { minen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == minen ) { return string ; } } return null ; }
P-39	-0.0933 -0.0484 -0.9537 -0.0165 -0.1112 -0.3785 -0.0781 -0.4833 -0.0694 -0.1234 -0.0889 -0.0876 -0.1338 -0.0879 -0.0656 -0.0946 -1.7987 -0.0755 -0.1435 -0.1071 -0.8053 -0.0642 -0.0499 -0.1443 -0.0863 -0.0961 -0.1049 -0.1169 -0.3285 -0.1214 -0.2586 -0.2822 -0.0877 -0.1523 -0.0583 -0.1207 -0.0961 -0.5149 -0.0914 -0.0844 -0.0767 -0.1370 -0.0588 -0.1014 -0.1069 -0.1164 -0.1951 -0.2180 -0.1065 -0.0934 -0.0906 -0.0913 -0.1333 -0.1121 -0.6575 -0.0529 -0.0666 -0.1352 -0.0871 -0.0999 -0.0956 -0.1136 -0.0929 -0.2266 -0.1516 -0.1988 -0.0717 -0.2336 -0.1621 -0.0582 -0.0731 -0.0906 -0.1154 -0.0781 -0.1994 -0.0803 -0.0819 -0.0845 -0.1408 -0.1650 -0.0869 -0.0669
S-17	public static int how_many_times ( String string, String substring ) { int rows = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { rows += 1; } } return rows; }
T-17	public static int how_many_times ( String string, String substring ) { int rows = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) + 1; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { rows += 1; } } return rows; }
H-17	-0.2467835545539856	public static int how_many_times ( String string, String substring ) { int rows = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { rows += 1 ; } } return rows ; }
D-17	-0.2467835545539856	public static int how_many_times ( String string, String substring ) { int rows = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { rows += 1 ; } } return rows ; }
P-17	-0.1008 -0.0437 -0.1051 -0.0127 -0.0922 -0.0552 -0.1060 -0.0189 -0.1090 -0.7278 -0.1185 -1.5668 -0.5356 -0.0330 -0.0887 -0.0889 -0.0847 -0.0362 -0.0820 -1.3362 -0.1339 -0.1074 -0.0690 -0.0797 -0.0879 -1.2379 -0.1037 -0.1206 -0.3101 -0.0942 -0.0668 -0.3681 -0.0810 -1.2106 -0.0350 -0.1384 -0.1227 -0.3875 -0.0961 -0.0854 -0.0805 -0.1214 -0.1760 -0.0773 -0.0894 -0.1543 -0.1188 -0.1809 -0.1303 -0.8265 -0.3693 -0.1773 -1.3433 -0.2856 -0.2530 -0.1170 -0.1341 -0.1583 -0.2655 -0.0928 -0.0832 -0.1129 -0.6199 -0.1067 -0.0175 -0.1026 -0.0870 -0.0840 -0.0604 -0.0957 -1.7634 -0.1349 -0.2213 -0.0930 -0.0734 -0.0543 -0.2060 -0.0808 -0.0695
S-43	public static List < Integer > rolling_max ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; Integer rolling_maximum = null; for ( Integer n : numbers ) { rolling_maximum = Math.max ( rolling_maximum, n ) ; result.add ( rolling_maximum ) ; } return result; }
T-43	public static List < Integer > rolling_max ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; Integer rolling_maximum = null; for ( Integer n : numbers ) { if ( rolling_maximum == null ) { rolling_maximum = n; } else { rolling_maximum = Math.max ( rolling_maximum, n ) ; } result.add ( rolling_maximum ) ; } return result; }
H-43	-0.2954588532447815	public static java.util.List < Integer > rolling_max ( java.util.List < Integer > numbers ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer rolling_maximum = null ; for ( Integer n : numbers ) { rolling_maximum = Math.max ( rolling_maximum, n ) ; result.add ( rolling_maximum ) ; } return result ; }
D-43	-0.2954588532447815	public static java.util.List < Integer > rolling_max ( java.util.List < Integer > numbers ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer rolling_maximum = null ; for ( Integer n : numbers ) { rolling_maximum = Math.max ( rolling_maximum, n ) ; result.add ( rolling_maximum ) ; } return result ; }
P-43	-0.0952 -0.0552 -5.1999 -0.0691 -0.3524 -0.1266 -0.4182 -0.0567 -1.4892 -0.0624 -0.0584 -0.0901 -0.0328 -0.1107 -0.2815 -0.1262 -0.0446 -0.1576 -0.1631 -0.0852 -1.5033 -0.0747 -0.0691 -0.0951 -0.0826 -0.2024 -0.0937 -0.1119 -0.1188 -0.0800 -0.0984 -1.1833 -0.0589 -0.0802 -0.0696 -0.0438 -0.0589 -0.1381 -0.0690 -0.1868 -0.1694 -0.0885 -2.0924 -0.5198 -0.0857 -1.7671 -0.0377 -0.0773 -0.1233 -0.1016 -0.0754 -0.1385 -0.1163 -0.1142 -1.5453 -0.0799 -0.0639 -0.0476 -0.0875 -0.0794 -0.0908 -0.0944 -0.1401 -0.0966 -1.4538 -0.0928 -0.0627 -0.1026 -0.0475 -0.0988 -0.1624 -1.1914 -0.0753 -0.0888 -0.1053 -0.1084 -0.3375 -0.3145 -0.1050 -0.0504 -0.0944 -0.1658 -0.0822 -0.0872 -0.0668 -0.0705 -0.0634 -0.1099 -0.0666 -0.0608
S-12	public static long sum_squared_nums ( double [ ] lst ) { int total = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { total += ( Math.floor ( ( int ) lst [ i ] ) ) * ( Math.ceil ( ( int ) lst [ i ] ) ) ; } return total; }
T-12	public static long sum_squared_nums ( double [ ] lst ) { int total = 0; for ( int i = 0; i < lst.length; i++ ) { total += ( Math.ceil ( lst [ i ] ) ) * ( Math.ceil ( lst [ i ] ) ) ; } return total; }
H-12	-0.2690136134624481	public static long sum_squared_nums ( double [ ] lst ) { int total = 0, i = 0; for ( int j = 0; j < lst.length ; j++ ) { total += ( ( int ) ( lst [ i ] ) ) * ( ( int ) ( lst [ i ] ) ) ; i ++ ; } return total ; }
D-12	-0.2690136134624481	public static long sum_squared_nums ( double [ ] lst ) { int total = 0, i = 0; for ( int j = 0; j < lst.length ; j++ ) { total += ( ( int ) ( lst [ i ] ) ) * ( ( int ) ( lst [ i ] ) ) ; i ++ ; } return total ; }
P-12	-0.0986 -0.0457 -0.0728 -0.0825 -0.1146 -0.0219 -0.0863 -0.0852 -0.1182 -0.1519 -0.1397 -0.1022 -0.0537 -0.0883 -0.0826 -0.2390 -0.1183 -0.0941 -1.2452 -0.1461 -0.0924 -1.5469 -0.1492 -0.1101 -0.0928 -0.0878 -0.0800 -1.5067 -0.1017 -0.0979 -0.3323 -0.0991 -0.0639 -0.4636 -0.0861 -0.5688 -0.0872 -0.0878 -0.2635 -0.0681 -0.1324 -1.0773 -1.5799 -0.0790 -1.4341 -0.4163 -0.0529 -0.4907 -0.0822 -0.0966 -0.0843 -0.0585 -0.1085 -0.4613 -0.1847 -0.0688 -0.1457 -0.2388 -0.0563 -0.8010 -0.0741 -0.0796 -0.0793 -0.1144 -0.9736 -0.6933 -0.0824 -0.1144 -0.0953 -0.1050 -0.2359 -0.0895 -0.0792
S-26	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] answer = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { answer [ i ] = Math.floorDiv ( game [ i ] , guess [ i ] ) ; } return answer; }
T-26	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] answer = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { answer [ i ] = Math.abs ( game [ i ] - guess [ i ] ) ; } return answer; }
H-26	-0.19776421785354614	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] answer = new int [ game.length ] ; for ( int i = 0 ; i < game.length ; i += 1 ) { answer [ i ] = Math.floorDiv ( game [ i ] , guess [ i ] ) ; } return answer ; }
D-26	-0.19776421785354614	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] answer = new int [ game.length ] ; for ( int i = 0 ; i < game.length ; i += 1 ) { answer [ i ] = Math.floorDiv ( game [ i ] , guess [ i ] ) ; } return answer ; }
P-26	-0.0932 -0.0424 -0.1009 -0.2136 -0.0881 -0.0370 -0.1123 -0.0948 -0.1343 -0.0965 -0.0739 -1.7303 -0.0987 -0.1517 -0.0784 -0.0677 -0.0777 -0.0852 -0.0994 -0.2015 -0.0652 -0.0439 -0.0848 -0.0666 -0.0602 -0.0771 -0.0638 -0.0988 -0.0665 -0.1038 -0.0946 -0.1537 -0.1175 -0.0637 -0.0793 -0.0948 -3.1046 -0.0890 -0.0852 -0.0618 -0.2936 -0.0859 -0.0835 -0.1542 -0.0786 -0.3244 -0.1982 -0.0836 -0.0913 -0.1436 -0.0750 -0.1051 -0.0948 -0.1232 -2.7566 -0.0925 -0.0898 -0.0361 -0.1052 -0.1017 -0.0794 -0.0976 -0.0880 -0.1014 -0.0831 -0.0664 -0.1038 -0.0774 -0.1324 -0.1080 -0.1338 -0.1170 -0.0486 -0.1613 -0.0817 -0.0809
S-50	public static int solution ( ArrayList < Integer > lst ) { int answer = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { answer += lst.get ( i ) ; } } return answer; }
T-50	public static int solution ( ArrayList < Integer > lst ) { int answer = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { answer += lst.get ( i ) ; } } return answer; }
H-50	-0.23067960143089294	public static int solution ( ArrayList < Integer > lst ) { int answer = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { answer += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { answer += lst.get ( i ) ; } } return answer ; }
D-50	-0.23067960143089294	public static int solution ( ArrayList < Integer > lst ) { int answer = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { answer += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { answer += lst.get ( i ) ; } } return answer ; }
P-50	-0.0910 -0.0454 -0.1042 -0.0276 -0.1170 -1.5495 -0.0686 -0.9059 -0.0628 -0.0466 -0.0825 -0.0836 -0.0883 -0.0473 -0.0757 -1.4466 -0.1415 -0.1065 -0.0583 -0.0745 -0.0748 -1.4240 -0.0957 -0.0989 -0.3233 -0.1773 -0.1659 -0.5155 -0.0809 -0.0911 -0.0853 -1.0231 -0.0805 -0.0945 -0.1698 -0.1158 -0.2465 -0.2810 -0.1450 -0.0940 -0.0887 -0.1146 -0.6288 -0.5908 -0.0994 -0.7909 -0.0825 -0.0950 -0.1861 -0.3332 -0.1104 -0.1070 -0.0913 -0.1235 -0.1408 -1.2693 -0.1128 -0.3976 -0.2228 -0.2614 -0.0850 -0.0842 -0.0984 -0.3331 -0.0821 -0.0770 -0.0960 -0.0559 -0.0512 -0.1327 -0.3185 -0.1123 -0.1024 -0.0840 -0.1066 -0.0858 -0.0987 -0.0791 -0.0517 -0.1745 -0.0794 -0.0744
S-58	public static String solve ( int N ) { int sam = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sam += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sam ) ; }
T-58	public static String solve ( int N ) { int sam = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sam += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sam ) ; }
H-58	-0.21503283083438873	public static String solve ( int N ) { int sam = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sam += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sam ) ; }
D-58	-0.21503283083438873	public static String solve ( int N ) { int sam = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sam += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sam ) ; }
P-58	-0.0867 -0.0494 -1.4051 -0.0286 -0.1058 -0.1047 -0.0916 -0.0833 -0.0905 -0.1266 -0.0578 -0.1001 -1.0479 -0.1309 -0.1087 -0.0692 -0.0646 -0.0943 -1.0546 -0.0856 -0.1292 -0.1337 -0.1464 -0.0753 -0.0920 -0.0839 -0.1818 -0.1006 -0.4292 -0.0781 -0.0925 -0.0772 -0.1154 -0.2176 -0.0849 -0.0843 -0.1353 -0.0685 -1.1251 -0.0929 -1.3208 -0.1129 -0.3726 -0.1753 -0.0600 -0.0725 -0.0796 -0.1717 -0.0599 -0.1109 -0.4002 -0.4067 -0.7959 -0.5362 -0.1840 -0.2528 -0.0936 -0.0981 -0.1258 -0.0939 -0.1205 -0.1071 -0.6362 -0.0922 -0.1174 -0.0222 -0.0458 -0.1003 -0.0537 -0.1038 -0.0923 -0.0789 -0.0735
S-46	public static String anti_shuffle ( String s ) { String answer = ""; for ( String str : s.split ( " " ) ) { char [ ] Chacters = str.toCharArray ( ) ; Arrays.sort ( Chacters ) ; answer += new String ( Chacters ) ; } return answer; }
T-46	public static String anti_shuffle ( String s ) { String answer = ""; for ( String str : s.split ( " " ) ) { char [ ] Chacters = str.toCharArray ( ) ; Arrays.sort ( Chacters ) ; answer += new String ( Chacters ) + " "; } return answer.substring ( 0, answer.length ( ) - 1 ) ; }
H-46	-0.27833470702171326	public static String anti_shuffle ( String s ) { String answer = ""; for ( String str : s.split ( " " ) ) { char [ ] Chacters = str.toCharArray ( ) ; java.lang.System.out . println ( Chacters ) ; Arrays.sort ( Chacters ) ; answer += new String ( Chacters ) ; } return answer ; }
D-46	-0.27833470702171326	public static String anti_shuffle ( String s ) { String answer = ""; for ( String str : s.split ( " " ) ) { char [ ] Chacters = str.toCharArray ( ) ; java.lang.System.out . println ( Chacters ) ; Arrays.sort ( Chacters ) ; answer += new String ( Chacters ) ; } return answer ; }
P-46	-0.0920 -0.0579 -1.5615 -0.0167 -0.1022 -0.0372 -0.1158 -1.1653 -0.1631 -0.0881 -0.0904 -2.1061 -0.0416 -0.0765 -1.7024 -0.1896 -0.1100 -1.8042 -0.0718 -0.0676 -0.0794 -0.1892 -0.3282 -0.1185 -0.0839 -0.0778 -0.0855 -0.0924 -0.0882 -0.2128 -0.2450 -0.0694 -0.0553 -0.0332 -0.0928 -0.0755 -0.1645 -0.0759 -0.0325 -0.3223 -0.6985 -0.0792 -2.3398 -0.0778 -0.0804 -0.1009 -0.4895 -0.0879 -0.0786 -0.0635 -0.0443 -0.2993 -0.1061 -0.0335 -0.3860 -0.0861 -2.5443 -0.0856 -0.1106 -0.1118 -0.0448 -0.0262 -0.0898 -0.1008 -0.0667 -0.0962 -0.0549 -0.4929 -0.1111 -0.0651 -0.0278 -0.0895 -0.0924 -0.0982 -0.1012 -0.0564 -0.1410 -0.0764 -0.0710
S-33	public static String string_xor ( String a, String b ) { String answer = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { answer += "0"; } } return answer; }
T-33	public static String string_xor ( String a, String b ) { String answer = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { answer += "0"; } else { answer += "1"; } } return answer; }
H-33	-0.29196855425834656	public static java.lang.String string_xor ( java.lang.String a, java.lang.String b ) { java.lang.String answer = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { answer += "0"; } } return answer ; }
D-33	-0.29196855425834656	public static java.lang.String string_xor ( java.lang.String a, java.lang.String b ) { java.lang.String answer = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { answer += "0"; } } return answer ; }
P-33	-0.0973 -0.0585 -5.6543 -0.0921 -0.0318 -0.1033 -0.0408 -0.0764 -0.1037 -0.0218 -0.1122 -1.9264 -0.0797 -0.0468 -0.1041 -0.0289 -0.2296 -1.6947 -0.2972 -0.0877 -0.0213 -0.1134 -0.0218 -0.0615 -0.0762 -0.0903 -0.3987 -0.0731 -0.0230 -0.1041 -0.0695 -0.2971 -0.0716 -2.3816 -0.1403 -0.1055 -0.0987 -0.0722 -0.0803 -1.0149 -0.0922 -0.0853 -0.4202 -0.1183 -0.0952 -0.6017 -0.0699 -0.0903 -0.0754 -0.0759 -0.1380 -0.0760 -0.0810 -0.1145 -0.1084 -0.1170 -0.1406 -1.0719 -0.1088 -0.0889 -0.0818 -0.2834 -0.0638 -0.1011 -0.8679 -0.1044 -0.0859 -0.0767 -0.0805 -0.0765 -0.1198 -0.0810 -0.0584 -0.7519 -0.1025 -0.0851 -0.1121 -0.0595 -0.3465 -0.0732 -0.0659
S-41	public static int add_even_at_odd ( int [ ] lst ) { int sam = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sam += lst [ i ] ; } return sam; }
T-41	public static int add_even_at_odd ( int [ ] lst ) { int sam = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sam += lst [ i ] ; } return sam; }
H-41	-0.19464588165283203	public static int add_even_at_odd ( int [ ] lst ) { int sam = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sam += lst [ i ] ; } return sam ; }
D-41	-0.19464588165283203	public static int add_even_at_odd ( int [ ] lst ) { int sam = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sam += lst [ i ] ; } return sam ; }
P-41	-0.1085 -0.0465 -0.1318 -0.0874 -0.1109 -0.0364 -0.0937 -0.0506 -0.1090 -0.0073 -0.1125 -0.1213 -0.1819 -0.1136 -0.0682 -0.0914 -0.0812 -0.1039 -0.0455 -0.0834 -1.8510 -0.1337 -0.1075 -0.0732 -0.0886 -0.0915 -1.6708 -0.1022 -0.1038 -0.6661 -0.0864 -0.0532 -0.4198 -0.0878 -0.1653 -0.2544 -0.0837 -0.0850 -0.1254 -0.1166 -0.5787 -0.0665 -0.1054 -0.0779 -0.9352 -0.0800 -0.2916 -0.1437 -0.0836 -0.1684 -0.0926 -0.1033 -0.0810 -0.1263 -0.0823 -0.1077 -0.1820 -0.1339 -0.0484 -0.2559 -0.0909 -0.0820
S-10	public static int smallest_change ( int [ ] arr ) { int answer = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) answer += 1; } return answer; }
T-10	public static int smallest_change ( int [ ] arr ) { int answer = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i - 1 ] ) answer += 1; } return answer; }
H-10	-0.2247052639722824	public static int smallest_change ( int [ ] arr ) { int answer = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) answer += 1 ; } return answer ; }
D-10	-0.2247052639722824	public static int smallest_change ( int [ ] arr ) { int answer = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) answer += 1 ; } return answer ; }
P-10	-0.0945 -0.0480 -0.1168 -0.0325 -0.0989 -0.0373 -0.1163 -0.1050 -0.1791 -0.0974 -0.0709 -0.0892 -0.0908 -0.0916 -0.0457 -0.0803 -1.7621 -0.1450 -0.1086 -0.0704 -0.0861 -0.0946 -2.0065 -0.1041 -0.1021 -0.5598 -0.0791 -0.0743 -0.3772 -0.0894 -0.1245 -0.2070 -0.0806 -0.1110 -0.1440 -0.1155 -0.3877 -0.0719 -0.1277 -0.0840 -0.3590 -0.1696 -0.0753 -0.2141 -0.1478 -0.0861 -0.3700 -0.1343 -0.1317 -0.0904 -0.4087 -0.0950 -1.7014 -0.1792 -0.1559 -0.1737 -0.0626 -0.2601 -0.0867 -0.0732
S-23	public static int can_arrange ( int [ ] arr ) { int pos = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) pos = i + 1; } return pos; }
T-23	public static int can_arrange ( int [ ] arr ) { int pos = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) pos = i; } return pos; }
H-23	-0.2414368987083435	public static int can_arrange ( int [ ] arr ) { int pos = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) pos = i + 1 ; } return pos ; }
D-23	-0.2414368987083435	public static int can_arrange ( int [ ] arr ) { int pos = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) pos = i + 1 ; } return pos ; }
P-23	-0.0956 -0.0467 -0.1060 -0.1011 -0.1023 -0.1211 -0.1148 -0.1035 -0.1701 -0.0867 -0.0590 -0.0863 -0.0887 -0.1118 -0.0600 -0.0895 -2.2474 -0.2876 -0.1623 -0.1123 -0.0733 -0.0826 -0.0807 -1.5260 -0.0986 -0.0934 -0.5094 -0.0802 -0.0588 -1.1488 -0.0800 -1.3289 -0.0754 -0.1329 -0.1141 -0.1128 -0.1171 -0.0622 -0.1075 -0.0831 -0.1550 -0.0703 -0.0892 -0.1231 -0.1952 -0.1953 -0.0972 -0.0971 -0.1216 -0.1312 -0.1273 -0.0910 -1.6622 -0.1714 -0.0877 -0.1098 -0.0665 -0.4250 -0.0828 -0.0688
S-30	public static int hex_key ( String num ) { int event = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) event += 1; } return event; }
T-30	public static int hex_key ( String num ) { int event = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) event += 1; } return event; }
H-30	-0.24706850945949554	public static int hex_key ( String num ) { int event = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) event += 1 ; } return event ; }
D-30	-0.24706850945949554	public static int hex_key ( String num ) { int event = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) event += 1 ; } return event ; }
P-30	-0.0953 -0.0438 -0.1188 -0.0450 -0.0956 -0.0247 -0.1157 -1.5502 -0.0837 -0.0915 -0.0914 -0.0941 -0.0743 -0.0898 -1.9861 -0.1740 -0.1119 -0.1368 -0.0925 -0.0700 -0.0670 -0.1671 -0.0717 -0.0391 -0.3027 -0.2009 -0.0910 -0.1375 -0.1545 -0.1179 -0.2775 -0.1454 -0.4360 -0.2334 -0.1933 -0.1545 -0.4754 -0.4407 -0.1682 -0.1433 -0.2726 -0.4408 -0.1486 -0.1412 -0.1733 -0.0775 -0.2680 -0.1093 -1.8380 -0.2261 -0.1947 -0.1474 -0.0758 -0.3529 -0.0879 -0.0794
S-22	public static int fruit_distribution ( String s, int n ) { int processor = n; for ( String str : s.split ( " " ) ) { int ucnc = Integer.parseInt ( str ) ; processor -= ucnc; } return processor; }
T-22	public static int fruit_distribution ( String s, int n ) { int processor = n; for ( String str : s.split ( " " ) ) { try { int ucnc = Integer.parseInt ( str ) ; processor -= ucnc; } catch ( Exception e ) { continue; } } return processor; }
H-22	-0.23923014104366302	public static int fruit_distribution ( String s , int n ) { int processor = n ; for ( String str : s.split ( " " ) ) { int ucnc = Integer. parseInt ( str ) ; processor -= ucnc ; } return processor ; }
D-22	-0.23923014104366302	public static int fruit_distribution ( String s , int n ) { int processor = n ; for ( String str : s.split ( " " ) ) { int ucnc = Integer. parseInt ( str ) ; processor -= ucnc ; } return processor ; }
P-22	-0.0942 -0.0478 -0.1106 -0.0256 -0.0937 -0.0273 -0.1128 -1.7231 -0.1573 -0.8268 -0.0959 -0.0917 -0.0845 -0.0902 -0.0963 -0.0715 -0.1040 -0.1914 -0.3000 -0.2691 -0.1139 -2.0058 -0.1121 -0.0675 -0.0878 -0.1993 -0.8333 -0.1266 -0.0968 -0.0853 -0.0872 -0.0976 -0.1006 -0.1819 -0.1126 -0.0603 -0.0950 -1.0188 -0.0994 -1.1955 -0.1078 -0.0874 -0.1137 -0.0968 -0.1308 -0.0942 -0.0973 -0.0355 -0.2802 -0.1107 -0.1239 -0.0380 -0.2874 -0.0879 -0.0748
S-70	public static Integer [ ] sum_product ( List < Integer > numbers ) { Integer [ ] answer = new Integer [ 2 ] ; for ( Integer n : numbers ) { answer [ 0 ] += n; answer [ 1 ] *= n; } return answer; }
T-70	public static Integer [ ] sum_product ( List < Integer > numbers ) { Integer [ ] answer = new Integer [ ] { 0, 1 } ; for ( Integer n : numbers ) { answer [ 0 ] += n; answer [ 1 ] *= n; } return answer; }
H-70	-0.24042440950870514	public static java.lang.Integer [ ] sum_product ( java.lang.Integer [] numbers ) { java.lang.Integer [ ] answer = new java.lang.Integer [ numbers.length ] ; for ( int i = 0 ; i < ( numbers.length ) ; i ++ ) { answer [ i ] += numbers [ i ] ; answer [ i ] *= numbers [ i ] ; } return answer ; }
D-70	-0.24042440950870514	public static java.lang.Integer [ ] sum_product ( java.lang.Integer [] numbers ) { java.lang.Integer [ ] answer = new java.lang.Integer [ numbers.length ] ; for ( int i = 0 ; i < ( numbers.length ) ; i ++ ) { answer [ i ] += numbers [ i ] ; answer [ i ] *= numbers [ i ] ; } return answer ; }
P-70	-0.0991 -0.0571 -4.0189 -0.0712 -0.2142 -0.0960 -0.2540 -0.6339 -0.0706 -0.0677 -0.1019 -0.0223 -0.1116 -0.4116 -0.0977 -0.8386 -0.1202 -0.0972 -1.5500 -0.0553 -0.1639 -0.0976 -0.3740 -0.0690 -0.0287 -0.1017 -0.0296 -0.4512 -0.0356 -0.0351 -0.0766 -0.0658 -0.3342 -0.0872 -0.0454 -0.1299 -0.0147 -0.0571 -0.7010 -0.0261 -0.0731 -0.0607 -0.0806 -0.0979 -0.1235 -1.9773 -0.1597 -0.1910 -0.1539 -0.0922 -0.0478 -0.0460 -0.2910 -0.0767 -0.0462 -0.0334 -0.1218 -0.1195 -0.0817 -0.0941 -0.0806 -0.0842 -0.2700 -0.0426 -0.3716 -0.0566 -0.2167 -0.1525 -0.0439 -0.3219 -0.0320 -0.1768 -1.4657 -0.0541 -0.2650 -0.0715 -0.0335 -0.3672 -0.0516 -0.1873 -0.0379 -0.1588 -0.1865 -0.1434 -0.0428 -0.2287 -0.0683 -0.0638
S-20	public static int max_element ( List < Integer > l ) { int lem = 0; for ( Integer e : l ) { if ( e > lem ) { lem = e; } } return lem; }
T-20	public static int max_element ( List < Integer > l ) { int lem = l.get ( 0 ) ; for ( Integer e : l ) { if ( e > lem ) { lem = e; } } return lem; }
H-20	-0.24340325593948364	public static int max_element ( List < Integer > l ) { int lem = 0 ; for ( Integer e : l ) { if ( e > lem ) { lem = e ; } } return lem ; }
D-20	-0.24340325593948364	public static int max_element ( List < Integer > l ) { int lem = 0 ; for ( Integer e : l ) { if ( e > lem ) { lem = e ; } } return lem ; }
P-20	-0.0975 -0.0421 -0.1198 -0.0592 -0.0977 -0.0318 -0.1163 -0.5311 -0.0767 -1.2152 -0.0669 -0.0885 -0.0915 -0.0901 -0.1003 -0.1793 -0.0660 -0.0868 -1.7193 -0.1042 -0.2249 -0.1122 -2.2490 -0.1254 -0.0638 -0.0807 -0.0928 -0.1032 -0.1343 -0.1090 -0.2069 -0.4118 -0.2247 -0.0622 -0.0873 -0.0881 -0.1536 -0.0620 -0.1539 -0.1346 -0.6788 -0.1998 -0.1545 -0.1413 -0.1928 -0.0652 -0.4674 -0.0870 -0.0792
S-44	public static String change_base ( int x, int base ) { String answer = ""; while ( x > 0 ) { answer = answer + x % base; x = x - x / base; } return answer; }
T-44	public static String change_base ( int x, int base ) { String answer = ""; while ( x > 0 ) { answer = ( x % base ) + answer; x = ( int ) x / base; } return answer; }
H-44	-0.3246215581893921	public static java.lang.String change_base ( int x , int base ) { java.lang.String answer = ""; while ( x > 0 ) { answer = answer + x % base ; x = x - x / base ; } return answer ; }
D-44	-0.3246215581893921	public static java.lang.String change_base ( int x , int base ) { java.lang.String answer = ""; while ( x > 0 ) { answer = answer + x % base ; x = x - x / base ; } return answer ; }
P-44	-0.0909 -0.0506 -5.1437 -0.1146 -0.0205 -0.1090 -0.0580 -0.0532 -0.1001 -0.0283 -0.1145 -0.4294 -0.1430 -1.7740 -0.1183 -0.0523 -0.0845 -0.0848 -0.5634 -0.0756 -0.0292 -0.1089 -0.0618 -0.0951 -0.0991 -2.5983 -0.1775 -0.1150 -0.1713 -0.1745 -0.1451 -0.0899 -0.0775 -0.1013 -0.1072 -0.0779 -0.1039 -0.2217 -0.1219 -0.0565 -1.1892 -0.1124 -0.1334 -0.1647 -0.0930 -0.1820 -0.0897 -0.0390 -0.8023 -0.1739 -0.1397 -0.0462 -0.6000 -0.0773 -0.0691
S-34	public static boolean below_zero ( List < Integer > operations ) { int off = 0; for ( Integer op : operations ) { off += op; if ( off > 0 ) { return false; } } return true; }
T-34	public static boolean below_zero ( List < Integer > operations ) { int off = 0; for ( Integer op : operations ) { off += op; if ( off < 0 ) { return true; } } return false; }
H-34	-0.25481346249580383	public static boolean below_zero ( List < Integer > operations ) { int off = 0 ; for ( Integer op : operations ) { off += op ; if ( off > 0 ) { return false ; } } return true ; }
D-34	-0.25481346249580383	public static boolean below_zero ( List < Integer > operations ) { int off = 0 ; for ( Integer op : operations ) { off += op ; if ( off > 0 ) { return false ; } } return true ; }
P-34	-0.0985 -0.0521 -0.0907 -0.0587 -0.1009 -0.0605 -0.1248 -0.6227 -0.0748 -1.1471 -0.0625 -0.0656 -0.0952 -0.0894 -0.1159 -0.1074 -0.1057 -1.7307 -0.1081 -0.1450 -0.1148 -1.8671 -0.0426 -0.0668 -0.0745 -0.0961 -0.0906 -0.2245 -0.0548 -0.0577 -0.7923 -0.1248 -0.1112 -0.0597 -0.2743 -0.1541 -0.0892 -0.0948 -0.1082 -0.0971 -1.0673 -0.0968 -0.1396 -0.0971 -0.1352 -0.8777 -0.0847 -0.0810
S-31	public static int modp ( int n, int p ) { int iter = 1; for ( int i = 0; i < n; i += 1 ) { iter = 2 * iter; } return iter % p; }
T-31	public static int modp ( int n, int p ) { int iter = 1; for ( int i = 0; i < n; i += 1 ) { iter = ( 2 * iter ) % p; } return iter; }
H-31	-0.22475893795490265	public static int modp ( int n , int p ) { int iter = 1 ; for ( int i = 0; i < n ; i += 1 ) { iter = 2 * iter ; } return iter % p ; }
D-31	-0.22475893795490265	public static int modp ( int n , int p ) { int iter = 1 ; for ( int i = 0; i < n ; i += 1 ) { iter = 2 * iter ; } return iter % p ; }
P-31	-0.0950 -0.0482 -0.1301 -0.0452 -0.0572 -0.1090 -0.1072 -0.0727 -1.3661 -0.1174 -0.0622 -0.0937 -0.0865 -0.1269 -0.0457 -0.1022 -0.8686 -0.4376 -0.1491 -0.1124 -0.0956 -0.0799 -0.0911 -1.5219 -0.0879 -0.1324 -0.1266 -0.9594 -0.0794 -0.1016 -0.2524 -0.0842 -0.0818 -0.0859 -0.2145 -0.1369 -0.0444 -0.0452 -0.6615 -0.1575 -0.3160 -0.1104 -0.1353 -0.0779 -0.4923 -0.0900 -0.0688
S-28	public static boolean is_simple_power ( int x, int n ) { int production = 1; while ( production < x ) { production *= n; } return production == x; }
T-28	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int production = 1; while ( production < x ) { production *= n; } return production == x; }
H-28	-0.2417655736207962	public static boolean is_simple_power ( int x , int n ) { int production = 1 ; while ( production < x ) { production *= n ; } return production == x ; }
D-28	-0.2417655736207962	public static boolean is_simple_power ( int x , int n ) { int production = 1 ; while ( production < x ) { production *= n ; } return production == x ; }
P-28	-0.1027 -0.0522 -0.1255 -0.0634 -0.0928 -0.0382 -0.0863 -0.0449 -0.1081 -0.1029 -0.1793 -1.4348 -0.0869 -0.1014 -0.0867 -0.0865 -0.1390 -0.1884 -0.1105 -1.0568 -0.3625 -0.2323 -0.1187 -0.1955 -0.2829 -0.1873 -0.0999 -0.0820 -0.1737 -0.0232 -0.1065 -1.3764 -0.1961 -0.3068 -0.1754 -0.1254 -0.2508 -0.9204 -0.0868 -0.0809
S-25	public static String decimal_to_binary ( int decimal ) { String answer = Integer.toHexString ( decimal ) ; return "db" + answer + "db"; }
T-25	public static String decimal_to_binary ( int decimal ) { String answer = Integer.toBinaryString ( decimal ) ; return "db" + answer + "db"; }
H-25	-0.3011218309402466	public static String decimal_to_binary ( int decimal ) { java.lang.String answer = Integer.toHexString ( decimal ) ; return "db" + answer + "db"; }
D-25	-0.3011218309402466	public static String decimal_to_binary ( int decimal ) { java.lang.String answer = Integer.toHexString ( decimal ) ; return "db" + answer + "db"; }
P-25	-0.1011 -0.0577 -2.7274 -0.0336 -0.0851 -0.0715 -0.0811 -0.0190 -0.1219 -0.1491 -0.0514 -0.0919 -0.0824 -3.5339 -0.0552 -0.0438 -0.0822 -0.1141 -0.0869 -0.0885 -1.7874 -0.1137 -0.1536 -0.0251 -0.1076 -0.0675 -0.0835 -0.0965 -0.2069 -0.1138 -0.0530 -0.0956 -0.0754 -0.0608 -0.2822 -0.1253 -0.0614 -0.6834 -0.0980 -0.0767
S-60	public static String concatenate ( String [ ] strings ) { String global = null; for ( String string : strings ) global += string; return global; }
T-60	public static String concatenate ( String [ ] strings ) { String global = ""; for ( String string : strings ) global += string; return global; }
H-60	-0.28586217761039734	public static java.lang.String concatenate ( java.lang.String [] strings ) { java.lang.String global = null ; for ( java.lang.String string : strings ) global += string ; return global ; }
D-60	-0.28586217761039734	public static java.lang.String concatenate ( java.lang.String [] strings ) { java.lang.String global = null ; for ( java.lang.String string : strings ) global += string ; return global ; }
P-60	-0.0885 -0.0523 -4.6976 -0.0567 -0.1244 -0.0933 -0.0668 -0.1448 -0.1210 -0.3870 -0.0920 -0.1384 -0.1179 -0.0276 -1.3156 -0.1025 -0.1208 -0.0835 -0.4556 -0.0745 -0.0268 -0.1060 -0.0456 -0.2386 -0.0902 -0.8444 -0.3607 -0.1660 -0.1177 -0.3616 -0.0958 -0.0444 -0.1265 -0.0337 -0.3401 -0.0368 -0.1291 -0.1012 -0.1080 -0.0687 -0.0540 -0.6000 -0.1293 -0.0529 -0.6660 -0.0800 -0.0507
S-53	public static String fix_spaces ( String text ) { String fresh_physical = ""; int iter = 0; int iter = 0; int iter = 0; while ( iter < text.length ( ) ) { if ( text.charAt ( iter ) == ' ' ) iter += 1; else { if ( iter - iter > 2 ) fresh_physical += "-" + text.substring ( iter, iter + 1 ) ; else if ( iter - iter > 0 ) { for ( int j = iter; j < iter; j += 1 ) { fresh_physical += "_"; } fresh_physical += text.substring ( iter, iter + 1 ) ; } else { fresh_physical += text.substring ( iter, iter + 1 ) ; } iter = iter + 1; iter = iter + 1; } iter += 1; } return fresh_physical; }
T-53	public static String fix_spaces ( String text ) { String fresh_physical = ""; int iter = 0; int iter = 0; int iter = 0; while ( iter < text.length ( ) ) { if ( text.charAt ( iter ) == ' ' ) iter += 1; else { if ( iter - iter > 2 ) fresh_physical += "-" + text.substring ( iter, iter + 1 ) ; else if ( iter - iter > 0 ) { for ( int j = iter; j < iter; j += 1 ) { fresh_physical += "_"; } fresh_physical += text.substring ( iter, iter + 1 ) ; } else { fresh_physical += text.substring ( iter, iter + 1 ) ; } iter = iter + 1; iter = iter + 1; } iter += 1; } if ( iter - iter > 2 ) fresh_physical += "-"; else if ( iter - iter > 0 ) { for ( int j = iter; j < iter; j += 1 ) { fresh_physical += "_"; } } return fresh_physical; }
H-53	-0.18853816390037537	public static String fix_spaces ( String text ) { String fresh_physical = ""; int iter = 0; int iter = 0; int iter = 0; while ( iter < text.length ( ) ) { if ( text.charAt ( iter ) == ' ' ) iter += 1; else { if ( iter - iter > 2 ) fresh_physical += "-" + text. substring ( iter, iter + 1 ) ; else if ( iter - iter > 0 ) { for ( int j = iter; j < iter ; j += 1 ) { fresh_physical += "_"; } fresh_physical += text. substring ( iter, iter + 1 ) ; } else { fresh_physical += text. substring ( iter, iter + 1 ) ; } iter = iter + 1; iter = iter + 1; } iter += 1; } return fresh_physical ; }
D-53	-0.18853816390037537	public static String fix_spaces ( String text ) { String fresh_physical = ""; int iter = 0; int iter = 0; int iter = 0; while ( iter < text.length ( ) ) { if ( text.charAt ( iter ) == ' ' ) iter += 1; else { if ( iter - iter > 2 ) fresh_physical += "-" + text. substring ( iter, iter + 1 ) ; else if ( iter - iter > 0 ) { for ( int j = iter; j < iter ; j += 1 ) { fresh_physical += "_"; } fresh_physical += text. substring ( iter, iter + 1 ) ; } else { fresh_physical += text. substring ( iter, iter + 1 ) ; } iter = iter + 1; iter = iter + 1; } iter += 1; } return fresh_physical ; }
P-53	-0.0956 -0.0550 -1.1405 -0.0432 -0.0971 -0.0339 -0.1172 -0.9344 -0.0570 -0.0923 -0.0852 -1.6674 -0.1549 -0.0802 -0.0746 -0.0334 -0.0857 -1.5472 -0.0919 -0.0689 -0.0829 -0.6919 -0.0965 -0.0333 -0.1095 -0.7029 -0.3942 -0.0338 -0.1186 -0.8838 -0.0765 -0.1068 -0.0763 -0.1122 -0.0880 -0.1072 -0.0816 -0.5040 -0.0771 -0.0868 -0.0819 -0.1213 -0.1143 -0.0847 -0.1263 -0.5826 -0.1022 -0.0398 -0.0908 -0.1913 -0.0469 -0.0398 -0.0809 -0.0437 -0.0682 -1.3167 -0.0799 -0.1790 -0.1057 -0.1125 -0.1756 -0.1570 -0.0582 -0.0981 -0.1496 -0.0808 -0.1667 -0.0958 -0.0657 -0.0436 -0.0895 -0.0332 -0.0495 -0.0557 -0.1028 -0.8610 -0.1105 -0.0528 -0.7228 -0.0573 -0.2038 -0.1442 -0.1005 -0.0899 -0.0795 -0.0993 -0.1067 -0.1228 -0.1129 -0.0411 -0.0680 -0.1295 -0.0840 -0.1150 -0.1763 -0.1060 -0.0871 -0.0788 -0.0753 -0.0739 -0.7683 -0.0672 -0.1130 -0.0318 -0.6844 -0.0775 -0.0668 -0.1279 -0.0849 -0.0985 -0.1014 -0.1050 -0.0679 -0.0417 -0.0676 -0.0406 -0.2753 -0.1037 -0.2223 -0.1044 -0.0691 -0.0425 -0.1021 -0.0344 -0.1038 -0.8531 -0.1139 -0.0998 -0.6334 -0.0573 -0.2345 -0.1665 -0.1073 -0.0901 -0.1589 -0.2298 -0.1158 -0.0833 -0.1018 -0.0613 -0.0381 -0.0803 -0.0384 -0.1072 -0.6513 -0.1105 -0.0631 -0.5659 -0.0520 -0.1470 -0.1530 -0.0939 -0.0938 -0.1157 -0.0575 -0.1305 -0.0679 -0.0675 -0.8889 -0.0751 -0.1257 -0.0598 -0.0619 -0.7740 -0.1500 -0.0647 -0.0563 -0.9722 -0.0914 -0.1215 -0.0867 -0.0919 -0.0634 -0.0337 -0.2024 -0.0722 -0.0883
S-3	public static double poly ( List < Double > xs, double x ) { double ums = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { ums += xs.get ( i ) * Math.pow ( x, i ) ; } return ums; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, begin ) * poly ( xs, end ) < 0 ) { begin = center; } else { end = center; } } return begin; }
T-3	public static double poly ( List < Double > xs, double x ) { double ums = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { ums += xs.get ( i ) * Math.pow ( x, i ) ; } return ums; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, center ) * poly ( xs, begin ) > 0 ) { begin = center; } else { end = center; } } return begin; }
H-3	-0.1949588656425476	public static double poly ( List < Double > xs , double x ) { double ums = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { ums += xs.get ( i ) * Math.pow ( x, i ) ; } return ums ; }
D-3	-0.1949588656425476	public static double poly ( List < Double > xs , double x ) { double ums = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { ums += xs.get ( i ) * Math.pow ( x, i ) ; } return ums ; }
P-3	-0.0845 -0.0433 -0.0881 -0.0687 -0.1027 -0.2210 -0.0795 -0.1258 -0.0519 -0.0920 -0.5922 -0.1106 -0.1209 -0.0888 -0.0817 -0.1139 -0.1955 -0.0417 -0.0935 -0.8687 -0.1628 -0.1055 -0.0970 -0.0669 -0.0867 -0.6910 -0.0849 -0.0890 -0.1631 -0.0982 -0.0794 -0.3359 -0.0781 -0.0942 -0.0766 -0.0845 -0.1563 -0.0798 -0.0866 -0.2307 -0.0323 -0.0648 -0.1453 -0.1060 -0.1636 -0.1070 -0.0968 -0.0995 -0.0793 -2.3345 -0.0967 -0.0391 -0.1060 -0.1105 -1.4725 -0.1415 -0.0892 -0.1072 -0.0861 -0.1291 -0.1140 -0.0394 -0.4229 -0.0811 -0.1953
S-36	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean production = true, positive = true; int max_description = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { production = false; max_description = Math.min ( max_description, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !production ) max_description = 0; if ( !positive ) min_positive = 0; int [ ] answer = { max_description, min_positive } ; return answer; }
T-36	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean production = false, positive = false; int max_description = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { production = true; max_description = Math.max ( max_description, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !production ) max_description = 0; if ( !positive ) min_positive = 0; int [ ] answer = { max_description, min_positive } ; return answer; }
H-36	-0.17740696668624878	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean production = true, positive = true; int max_description = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i++ ) { if ( lst [ i ] < 0 ) { production = false; max_description = Math.min ( max_description, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !production ) max_description = 0; if ( !positive ) min_positive = 0; int [ ] answer = { max_description, min_positive } ; return answer ; }
D-36	-0.17740696668624878	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean production = true, positive = true; int max_description = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i++ ) { if ( lst [ i ] < 0 ) { production = false; max_description = Math.min ( max_description, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !production ) max_description = 0; if ( !positive ) min_positive = 0; int [ ] answer = { max_description, min_positive } ; return answer ; }
P-36	-0.1001 -0.0395 -0.1012 -0.2106 -0.0995 -0.0140 -0.0904 -0.0513 -0.0331 -0.0903 -0.0226 -0.0308 -0.1132 -0.1035 -0.1491 -0.1133 -0.0462 -0.0874 -0.0860 -0.2087 -0.1894 -0.0920 -0.0554 -0.2106 -0.0893 -0.0962 -0.0675 -1.0784 -0.1126 -0.0728 -0.1022 -0.0492 -0.0852 -0.6491 -0.0955 -0.0454 -0.0879 -0.0386 -0.2922 -0.0991 -0.1078 -0.0408 -0.0895 -0.6103 -0.0927 -0.0195 -0.0825 -0.0447 -0.7350 -0.1369 -0.1096 -0.0688 -0.0785 -0.0772 -2.4645 -0.3614 -0.0815 -0.4281 -0.4212 -0.0890 -0.0727 -0.5071 -0.0761 -0.9779 -0.0715 -0.0904 -0.1209 -0.1129 -0.0735 -0.0673 -0.0732 -0.0826 -0.0643 -0.0889 -0.0866 -0.0898 -0.1530 -0.0867 -0.0669 -0.8438 -0.0726 -0.0931 -0.0591 -0.0950 -2.2411 -0.0942 -0.0697 -0.1059 -0.1124 -0.0853 -0.0491 -0.9072 -0.0497 -0.0948 -0.0897 -0.0941 -0.0972 -0.0949 -0.0775 -0.0744 -0.0836 -0.1030 -0.0545 -0.0711 -0.0837 -0.0747 -0.0727 -0.0884 -0.0827 -0.0717 -0.0332 -0.1003 -0.0899 -0.4448 -0.1039 -0.0841 -0.0479 -0.0937 -2.1871 -0.0904 -0.0575 -0.1064 -0.0653 -0.0871 -0.0358 -0.7965 -0.0382 -0.0842 -0.0811 -0.0874 -0.0961 -0.0935 -0.0685 -0.0876 -0.1830 -0.1190 -0.0526 -0.0453 -0.0809 -0.0600 -0.0982 -0.0465 -0.0834 -0.5089 -0.1588 -0.1121 -0.0518 -0.0661 -0.0811 -0.0647 -0.0944 -0.0447 -0.0964 -0.2091 -0.1826 -0.1292 -0.0457 -0.0401 -0.0830 -0.1113 -0.0654 -0.1132 -0.0506 -0.5896 -0.0976 -0.0960 -0.0386 -0.1262 -0.1135 -0.1003 -0.0348 -0.5848 -0.0751 -0.0859
S-68	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] consider = new double [ 2 ] ; double dim = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_Distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_Distance < dim ) { dim = new_Distance; if ( numbers [ i ] < numbers [ j ] ) { consider [ 0 ] = numbers [ i ] ; consider [ 1 ] = numbers [ j ] ; } else { consider [ 0 ] = numbers [ j ] ; consider [ 1 ] = numbers [ i ] ; } } } } return consider; }
T-68	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] consider = new double [ 2 ] ; double dim = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_Distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_Distance < dim ) { dim = new_Distance; if ( numbers [ i ] < numbers [ j ] ) { consider [ 0 ] = numbers [ i ] ; consider [ 1 ] = numbers [ j ] ; } else { consider [ 0 ] = numbers [ j ] ; consider [ 1 ] = numbers [ i ] ; } } } } return consider; }
H-68	-0.1290435642004013	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] consider = new double [ 2 ] ; double dim = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_Distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_Distance < dim ) { dim = new_Distance ; if ( numbers [ i ] < numbers [ j ] ) { consider [ 0 ] = numbers [ i ] ; consider [ 1 ] = numbers [ j ] ; } else { consider [ 0 ] = numbers [ j ] ; consider [ 1 ] = numbers [ i ] ; } } } } return consider ; }
D-68	-0.1290435642004013	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] consider = new double [ 2 ] ; double dim = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_Distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_Distance < dim ) { dim = new_Distance ; if ( numbers [ i ] < numbers [ j ] ) { consider [ 0 ] = numbers [ i ] ; consider [ 1 ] = numbers [ j ] ; } else { consider [ 0 ] = numbers [ j ] ; consider [ 1 ] = numbers [ i ] ; } } } } return consider ; }
P-68	-0.0876 -0.0530 -0.1046 -0.1831 -0.1102 -0.0582 -0.0811 -0.1362 -0.0806 -0.0293 -0.1144 -0.1219 -0.1556 -0.0967 -0.0721 -0.0905 -0.0831 -0.1138 -0.1126 -0.0497 -0.1692 -0.0953 -0.0767 -0.0780 -0.0673 -0.0981 -0.1133 -0.0926 -0.1310 -0.0819 -0.0811 -0.0949 -0.0835 -0.0325 -0.0777 -0.0340 -0.2677 -0.1279 -0.1117 -0.0826 -0.0762 -0.0821 -0.9310 -0.0842 -0.0832 -0.0899 -0.0989 -0.0725 -0.3833 -0.0722 -0.0928 -0.1542 -0.0761 -0.0831 -0.0917 -0.1064 -0.0694 -0.0779 -0.0938 -0.6718 -0.0930 -0.0705 -0.0663 -0.1214 -0.0737 -0.4714 -0.0791 -0.0800 -0.1524 -0.0798 -0.0934 -0.1265 -0.0716 -0.0834 -0.0232 -0.0916 -1.7758 -0.0923 -0.0281 -0.0998 -0.0897 -0.0719 -0.0951 -0.0871 -0.1154 -0.0633 -0.0959 -0.0994 -0.0999 -0.1007 -0.0955 -0.1261 -0.1137 -0.0577 -0.0923 -0.0292 -0.1041 -0.0733 -0.0908 -0.0781 -1.4146 -0.1372 -0.0624 -0.0759 -0.0323 -0.1935 -0.2395 -0.1153 -0.1113 -0.0810 -0.0876 -0.0724 -0.1474 -0.0691 -0.1024 -0.0950 -0.0875 -0.0970 -0.1036 -0.1530 -0.0923 -0.1136 -0.0916 -0.1166 -0.1090 -0.1071 -0.0906 -0.0856 -0.0860 -0.2321 -0.0945 -0.1948 -0.0966 -0.1064 -0.1049 -0.1114 -0.1038 -0.0971 -0.0861 -0.0694 -0.0875 -0.0999 -0.1560 -0.0850 -0.0707 -0.1244 -0.0931 -0.1019 -0.1018 -0.1163 -0.0919 -0.0888 -0.2129 -0.0792 -0.1654 -0.1257 -0.0846 -0.0751 -0.0869 -0.0688 -0.0907 -0.0923 -0.0815 -0.0875 -0.0861 -0.0815 -0.0909 -0.2099 -0.3218 -0.0848 -0.0817
S-16	public static int [ ] sort_even ( int [ ] l ) { int [ ] answer = new int [ l.length ] ; int [ ] evenries = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evenries [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evenries ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { answer [ i ] = evenries [ ( int ) i / 2 ] ; } else { answer [ i ] = l [ i ] ; } } return answer; }
T-16	public static int [ ] sort_even ( int [ ] l ) { int [ ] answer = new int [ l.length ] ; int [ ] evenries = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evenries [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evenries ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { answer [ i ] = evenries [ ( int ) i / 2 ] ; } else { answer [ i ] = l [ i ] ; } } return answer; }
H-16	-0.13400118052959442	public static int [ ] sort_even ( int [ ] l ) { int [ ] answer = new int [ l.length ] ; int [ ] evenries = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { answer [ i ] = l [ i ] ; } Arrays.sort ( evenries ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { answer [ i ] = evenries [ ( int ) i / 2 ] ; } else { answer [ i ] = l [ i ] ; } } return answer ; }
D-16	-0.13400118052959442	public static int [ ] sort_even ( int [ ] l ) { int [ ] answer = new int [ l.length ] ; int [ ] evenries = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { answer [ i ] = l [ i ] ; } Arrays.sort ( evenries ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { answer [ i ] = evenries [ ( int ) i / 2 ] ; } else { answer [ i ] = l [ i ] ; } } return answer ; }
P-16	-0.0930 -0.0403 -0.0913 -0.2225 -0.0955 -0.0488 -0.0877 -0.0309 -0.1073 -0.0851 -0.1336 -0.1183 -0.0846 -0.0857 -0.0853 -0.0952 -0.1784 -0.0750 -0.0382 -0.0915 -0.0686 -0.0622 -0.0794 -0.0703 -0.0930 -0.0669 -0.1158 -0.0903 -0.0883 -0.1151 -0.0474 -0.1287 -0.0559 -0.0839 -0.0570 -0.0629 -0.0744 -0.5579 -0.0867 -0.1291 -0.1959 -0.0787 -0.1181 -0.0601 -0.0948 -0.0594 -0.1245 -0.2411 -0.0903 -0.0626 -0.0897 -0.1075 -0.1153 -0.0646 -0.0906 -0.0836 -0.7675 -0.0882 -0.0988 -0.1232 -0.0909 -0.0781 -0.2761 -0.0833 -0.1025 -0.1736 -0.0795 -0.0828 -1.3672 -0.0579 -0.6419 -0.0937 -0.0984 -0.1969 -0.0837 -0.0886 -0.1065 -0.0879 -0.1109 -1.3606 -0.0852 -0.0400 -0.1159 -0.1343 -0.0525 -0.1021 -0.0904 -0.1427 -0.1103 -0.0624 -0.0867 -0.0813 -0.5749 -0.0861 -0.0931 -0.0842 -0.0952 -0.0851 -0.2849 -0.0762 -0.0726 -0.2489 -0.0774 -0.0863 -0.3177 -0.1196 -0.1074 -0.1402 -0.0493 -0.1376 -0.0967 -0.0861 -0.0829 -0.0482 -0.0786 -0.0922 -0.0914 -0.1013 -0.2799 -0.0500 -0.0953 -0.2854 -0.1863 -0.0794 -0.1154 -0.0929 -0.0770 -0.1191 -0.0927 -0.0719 -0.0962 -0.0838 -0.0541 -0.0764 -0.0935 -0.0797 -0.0920 -0.0730 -0.0865 -0.1086 -0.1147 -0.0853 -0.0888 -0.0970 -0.0920 -0.0491 -0.3270 -0.0911 -0.0763
S-27	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double Min = Double.MAX_VALUE; double total = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > total ) { total = numbers [ i ] ; } else if ( numbers [ i ] < Min ) { Min = numbers [ i ] ; } } double [ ] answer = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { answer [ i ] = ( numbers [ i ] - Min ) / ( total - Min ) ; } return answer; }
T-27	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double Min = Double.MAX_VALUE; double total = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > total ) { total = numbers [ i ] ; } if ( numbers [ i ] < Min ) { Min = numbers [ i ] ; } } double [ ] answer = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { answer [ i ] = ( numbers [ i ] - Min ) / ( total - Min ) ; } return answer; }
H-27	-0.1176270991563797	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double Min = Double.MAX_VALUE ; double total = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > total ) { total = numbers [ i ] ; } else if ( numbers [ i ] < Min ) { Min = numbers [ i ] ; } } double [ ] answer = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { answer [ i ] = ( numbers [ i ] - Min ) / ( total - Min ) ; } return answer ; }
D-27	-0.1176270991563797	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double Min = Double.MAX_VALUE ; double total = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > total ) { total = numbers [ i ] ; } else if ( numbers [ i ] < Min ) { Min = numbers [ i ] ; } } double [ ] answer = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { answer [ i ] = ( numbers [ i ] - Min ) / ( total - Min ) ; } return answer ; }
P-27	-0.0900 -0.0537 -0.1217 -0.1860 -0.0959 -0.0527 -0.0277 -0.0842 -0.0671 -0.0898 -0.0306 -0.1141 -0.1169 -0.1388 -0.0913 -0.0611 -0.0892 -0.0800 -0.0907 -0.1473 -0.0867 -0.2883 -0.0908 -0.0575 -0.0903 -0.0486 -0.5420 -0.0867 -0.0534 -0.0873 -0.2819 -0.0872 -0.0293 -0.0872 -0.0439 -0.2066 -0.3219 -0.1057 -0.0924 -0.0783 -0.0812 -1.0450 -0.0948 -0.0937 -0.0921 -0.0886 -0.0759 -0.3517 -0.0790 -0.1062 -0.1647 -0.0772 -0.0906 -0.1272 -0.1143 -0.0667 -0.0709 -0.0831 -0.0919 -0.1547 -0.1403 -0.0829 -0.0930 -0.1227 -0.1332 -0.0696 -0.1082 -0.0857 -0.1008 -0.0917 -0.0698 -0.0937 -0.0755 -0.1030 -0.0471 -0.0773 -0.0879 -0.0887 -0.0589 -0.1091 -0.0900 -0.0826 -0.0909 -0.1208 -0.0496 -0.0876 -0.0886 -0.1183 -0.0902 -0.0697 -0.0893 -0.1326 -0.1729 -0.0544 -0.0410 -0.0948 -0.0682 -0.0774 -0.0656 -0.0434 -0.0893 -0.0682 -0.0902 -0.0836 -0.1019 -0.1105 -0.0705 -0.0711 -0.0880 -1.0549 -0.0944 -0.0810 -0.0699 -0.0953 -0.0729 -0.4274 -0.0759 -0.0952 -0.1348 -0.0778 -0.0965 -0.0547 -0.0894 -0.0948 -0.0734 -0.1227 -0.1642 -0.0763 -0.0938 -0.0883 -0.0892 -0.1002 -0.1643 -0.0851 -0.0729 -0.0966 -0.1271 -0.0613 -0.0723 -0.0930 -0.0950 -0.0708 -0.0781 -0.0387 -0.5667 -0.0800 -0.0811
S-47	public static long min_subarray_sum ( ArrayList < Long > nums ) { long maxnetstatus = 0; long sam = 0; for ( long num : nums ) { sam += num; if ( sam < 0 ) { sam = 0; } maxnetstatus = Math.max ( sam, maxnetstatus ) ; } if ( maxnetstatus == 0 ) { maxnetstatus = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { maxnetstatus = Math.max ( maxnetstatus, -nums.get ( i ) ) ; } } long minvalcum = -maxnetstatus; return minvalcum; }
T-47	public static long min_subarray_sum ( ArrayList < Long > nums ) { long maxnetstatus = 0; long sam = 0; for ( long num : nums ) { sam += -num; if ( sam < 0 ) { sam = 0; } maxnetstatus = Math.max ( sam, maxnetstatus ) ; } if ( maxnetstatus == 0 ) { maxnetstatus = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { maxnetstatus = Math.max ( maxnetstatus, -nums.get ( i ) ) ; } } long minvalcum = -maxnetstatus; return minvalcum; }
H-47	-0.1661883145570755	public static long min_subarray_sum ( ArrayList < Long > nums ) { long maxnetstatus = 0; long sam = 0; for ( long num : nums ) { sam += num ; if ( sam < 0 ) { sam = 0; } maxnetstatus = Math.max ( sam, maxnetstatus ) ; } if ( maxnetstatus == 0 ) { maxnetstatus = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { maxnetstatus = Math.max ( maxnetstatus, -nums.get ( i ) ) ; } } long minvalcum = -maxnetstatus ; return minvalcum ; }
D-47	-0.1661883145570755	public static long min_subarray_sum ( ArrayList < Long > nums ) { long maxnetstatus = 0; long sam = 0; for ( long num : nums ) { sam += num ; if ( sam < 0 ) { sam = 0; } maxnetstatus = Math.max ( sam, maxnetstatus ) ; } if ( maxnetstatus == 0 ) { maxnetstatus = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { maxnetstatus = Math.max ( maxnetstatus, -nums.get ( i ) ) ; } } long minvalcum = -maxnetstatus ; return minvalcum ; }
P-47	-0.0950 -0.0351 -0.0498 -0.0461 -0.0899 -0.0329 -0.0267 -0.0840 -0.0719 -0.1168 -1.2799 -0.0675 -0.1119 -0.0563 -0.0432 -0.0894 -0.0876 -0.0457 -0.0903 -0.0615 -0.1106 -0.0876 -0.5753 -0.0581 -0.0307 -0.0919 -0.6622 -0.1916 -0.1025 -0.0391 -0.0894 -0.0710 -0.0382 -0.0868 -0.0852 -0.0677 -0.0516 -0.0581 -0.5029 -0.1849 -0.1094 -0.0358 -0.0900 -0.0957 -0.0911 -0.0811 -0.0436 -0.1502 -0.2749 -0.0953 -0.0496 -0.0494 -0.1130 -0.1064 -1.4847 -0.0918 -0.0912 -0.1072 -0.0274 -0.6759 -0.0555 -0.0471 -0.0989 -0.0911 -0.0965 -0.1532 -0.2523 -0.1062 -0.0415 -0.0429 -0.1055 -0.0752 -0.1229 -0.0888 -0.0999 -0.1060 -0.0535 -0.1156 -0.0898 -0.2103 -0.1889 -0.1062 -0.1981 -0.1135 -0.1281 -0.0960 -0.0938 -0.2389 -0.1074 -0.1296 -0.0741 -0.0826 -1.7561 -0.0925 -0.1238 -0.0426 -0.1159 -0.1123 -0.3398 -0.0793 -0.0840 -0.0798 -0.7620 -0.0785 -0.0935 -0.0663 -0.0437 -0.1138 -0.0952 -1.5845 -0.0910 -0.0915 -0.1096 -0.0499 -0.0438 -0.1046 -0.9268 -0.1805 -0.2410 -0.1092 -0.2661 -0.1067 -0.0949 -0.0925 -0.0911 -0.0929 -0.1057 -0.1246 -0.1747 -0.0872 -0.0764 -0.0842 -0.0909 -0.2183 -0.1000 -0.0386 -0.1045 -0.4829 -0.1318 -0.0648 -0.0750 -0.0773 -0.2997 -0.0778 -0.0863
S-1	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] answer = new int [ common.size ( ) ] ; int iter = 0; for ( Integer c : common ) { answer [ iter ] = c; iter += 1; } Arrays.sort ( answer ) ; return answer; }
T-1	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] answer = new int [ common.size ( ) ] ; int iter = 0; for ( Integer c : common ) { answer [ iter ] = c; iter += 1; } Arrays.sort ( answer ) ; return answer; }
H-1	-0.18684953451156616	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] answer = new int [ common.size () ] ; int iter = 0; for ( Integer c : common ) { answer [ iter ] = c; iter += 1; } Arrays.sort ( answer ) ; return answer ; }
D-1	-0.18684953451156616	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] answer = new int [ common.size () ] ; int iter = 0; for ( Integer c : common ) { answer [ iter ] = c; iter += 1; } Arrays.sort ( answer ) ; return answer ; }
P-1	-0.0869 -0.0418 -0.1011 -0.2075 -0.0738 -0.0488 -0.1067 -0.0921 -0.1576 -0.0905 -0.0605 -0.4375 -0.0826 -0.1254 -0.1033 -0.0584 -0.0569 -0.0786 -0.0931 -2.0757 -0.0669 -0.7636 -0.0578 -0.0682 -0.0924 -0.0569 -1.3589 -0.0811 -0.8283 -0.0611 -0.1754 -0.0937 -0.0863 -0.2917 -0.1098 -0.0674 -0.0759 -0.0874 -0.7748 -0.0806 -0.0810 -0.0848 -0.0418 -0.0723 -0.3895 -0.0723 -0.0741 -0.1680 -0.0776 -0.0798 -0.0993 -0.1074 -0.0716 -0.0781 -0.0959 -0.4746 -0.0925 -0.0580 -0.0593 -0.0358 -0.0748 -0.5520 -0.0654 -0.0843 -0.1215 -0.0797 -0.0976 -0.1215 -0.1145 -0.0861 -0.0846 -0.0800 -0.1170 -0.0831 -0.2254 -0.0374 -0.0640 -0.0803 -0.0652 -0.0765 -0.0881 -0.2265 -0.1386 -0.1950 -0.1106 -0.0855 -0.0713 -0.0989 -0.1162 -0.1063 -0.1347 -0.0965 -0.1173 -0.0785 -0.1296 -0.1911 -0.0505 -0.0466 -0.0884 -0.0791 -0.0689 -0.0831 -0.0811 -0.1151 -0.1104 -2.8693 -0.0880 -0.0896 -0.0685 -0.0601 -0.0827 -0.7543 -0.1064 -0.1112 -0.8863 -0.0704 -0.0617 -0.0633 -0.0877 -0.0888 -0.0370 -0.0807 -0.0186 -0.0565 -0.0962 -0.0707 -0.8013 -0.0252 -0.0499 -0.7159 -0.0851 -1.3744 -0.0812 -0.0446 -0.1085 -0.0444 -0.0795 -0.0927 -0.0944 -0.0438 -0.2943 -0.0798 -0.0679
S-51	public static String int_to_mini_roman ( int number ) { int [ ] dim = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] syn = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int iter = 12; String answer = ""; while ( number > 0 ) { answer += syn [ iter ] ; number %= dim [ iter ] ; iter -= 1; } return answer.toLowerCase ( ) ; }
T-51	public static String int_to_mini_roman ( int number ) { int [ ] dim = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] syn = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int iter = 12; String answer = ""; while ( number > 0 ) { int div = ( int ) ( number / dim [ iter ] ) ; while ( div > 0 ) { answer += syn [ iter ] ; div -= 1; } number %= dim [ iter ] ; iter -= 1; } return answer.toLowerCase ( ) ; }
H-51	-0.2631627023220062	public static String int_to_mini_roman ( int number ) { int [ ] dim = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] syn = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int iter = 12 ; String answer = ""; while ( number > 0 ) { answer += syn [ iter ] ; number %= dim [ iter ] ; iter -= 1; } return answer.toLowerCase ( ) ; }
D-51	-0.2631627023220062	public static String int_to_mini_roman ( int number ) { int [ ] dim = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] syn = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int iter = 12 ; String answer = ""; while ( number > 0 ) { answer += syn [ iter ] ; number %= dim [ iter ] ; iter -= 1; } return answer.toLowerCase ( ) ; }
P-51	-0.0906 -0.0595 -1.5895 -0.0832 -0.0957 -0.0550 -0.0838 -0.0219 -0.0892 -0.0084 -0.0409 -0.1153 -0.0955 -0.0540 -0.0846 -0.0919 -0.1371 -0.2098 -0.0565 -0.0390 -0.0872 -0.0694 -0.0627 -0.0813 -0.0824 -0.0843 -0.6181 -0.1521 -0.0788 -0.2063 -0.0952 -0.0572 -0.0391 -0.0860 -0.1485 -0.2221 -0.0491 -0.0353 -0.0696 -0.1722 -0.0414 -0.0909 -0.0823 -1.4398 -0.1449 -0.0480 -0.0499 -0.0888 -0.0642 -0.9527 -0.0661 -0.1066 -0.0822 -0.1001 -0.0449 -1.1480 -0.1048 -0.0143 -1.2346 -0.1139 -0.0533 -1.3824 -0.1169 -0.0411 -1.2092 -0.1089 -0.0410 -1.1448 -0.1107 -0.0460 -0.0669 -1.5472 -0.1087 -0.3159 -1.7814 -0.1086 -0.0386 -0.0445 -1.4092 -0.1153 -0.0788 -1.4464 -0.1135 -0.0328 -1.3336 -0.1047 -0.0425 -1.4558 -0.1097 -0.0223 -1.2552 -0.0962 -0.0629 -0.0652 -0.0945 -0.0863 -0.1269 -0.0976 -0.0927 -0.0533 -0.5138 -1.2344 -0.0445 -0.0908 -1.2771 -0.0591 -0.1222 -0.1622 -0.1310 -0.1351 -0.0874 -0.0856 -0.0814 -0.0668 -0.0313 -0.1128 -0.1016 -0.0775 -0.0965 -0.3096 -0.3339 -0.0387 -0.0359 -0.0973 -0.0457 -0.0744 -0.0942 -0.0537 -0.0306 -0.8201 -0.1094 -0.2431 -0.0657 -0.3895 -0.4422 -0.6215 -0.1048 -0.0919 -0.0872 -0.0645
S-19	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int common = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char centrt = txt.charAt ( i ) ; if ( Character.isUpperCase ( centrt ) && ( ( centrt - 'a' ) % 2 ) == 0 ) common++; } String [ ] answer = { Integer.toString ( common ) } ; return answer; } }
T-19	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int common = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char centrt = txt.charAt ( i ) ; if ( Character.isLowerCase ( centrt ) && ( ( centrt - 'a' ) % 2 ) == 1 ) common++; } String [ ] answer = { Integer.toString ( common ) } ; return answer; } }
H-19	-0.18193945288658142	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int common = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char centrt = txt.charAt ( i ) ; if ( Character.isUpperCase ( centrt ) && ( ( centrt - 'a' ) % 2 ) == 0 ) common++; } String [ ] answer = { Integer.toString ( common ) } ; return answer ; } }
D-19	-0.18193945288658142	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int common = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char centrt = txt.charAt ( i ) ; if ( Character.isUpperCase ( centrt ) && ( ( centrt - 'a' ) % 2 ) == 0 ) common++; } String [ ] answer = { Integer.toString ( common ) } ; return answer ; } }
P-19	-0.0883 -0.0557 -1.1282 -0.1957 -0.1938 -0.0414 -0.0948 -0.0287 -0.1100 -0.6989 -0.0287 -0.0884 -0.0899 -0.1868 -0.1128 -0.0519 -0.1562 -0.8403 -0.1058 -0.1008 -0.0834 -0.0953 -0.0884 -0.1013 -0.0772 -0.0370 -0.1001 -0.2155 -0.1198 -0.0787 -0.0917 -0.0944 -0.0884 -0.0815 -0.0996 -0.1192 -0.1050 -0.0350 -0.1254 -0.6203 -0.1077 -0.0201 -0.0860 -0.0911 -0.0839 -0.0658 -0.0369 -0.0997 -0.1651 -0.1129 -0.0190 -0.0860 -0.0942 -0.0823 -0.0795 -0.1162 -0.1866 -0.0394 -0.1040 -0.8793 -0.1547 -0.1054 -0.0750 -0.0818 -0.0722 -0.5141 -0.0937 -0.0870 -0.0891 -0.1066 -0.1081 -0.4834 -0.0784 -0.0902 -0.0726 -0.6382 -0.0733 -0.0821 -0.2157 -0.0494 -0.1343 -0.0847 -0.0232 -0.1084 -0.7561 -0.1001 -0.0897 -0.0872 -0.0838 -0.1539 -0.1138 -0.5555 -0.0899 -0.0777 -0.0417 -0.1118 -0.0512 -0.0887 -0.0825 -1.0815 -0.1137 -0.1370 -0.0436 -0.1067 -0.1681 -0.0369 -0.0432 -0.0475 -0.1003 -0.1189 -0.0625 -0.0981 -0.3363 -0.1122 -0.0852 -0.2489 -0.6204 -0.0852 -1.2827 -0.1579 -0.0494 -0.0328 -0.0857 -0.2434 -1.0307 -0.0983 -1.1246 -0.1171 -0.0906 -0.0921 -0.2258 -0.1115 -0.1024 -0.0385 -0.8271 -0.0773 -0.0764 -0.0819
S-9	public static int vowels_count ( String str ) { int global = 0; char [ ] str_contacters = str.toCharArray ( ) ; for ( char c : str_contacters ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) global += 1; } if ( str_contacters [ str_contacters.length - 1 ] == 'y' ) global += 1; return global; }
T-9	public static int vowels_count ( String str ) { int global = 0; char [ ] str_contacters = str.toCharArray ( ) ; for ( char c : str_contacters ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) global += 1; } if ( str_contacters [ str_contacters.length - 1 ] == 'y' || str_contacters [ str_contacters.length - 1 ] == 'Y' ) global += 1; return global; }
H-9	-0.15990419685840607	public static int vowels_count ( String str ) { int global = 0; char [ ] str_contacters = str.toCharArray ( ) ; for ( char c : str_contacters ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) global += 1; } if ( str_contacters [ str_contacters.length - 1 ] == 'y' ) global += 1; return global ; }
D-9	-0.15990419685840607	public static int vowels_count ( String str ) { int global = 0; char [ ] str_contacters = str.toCharArray ( ) ; for ( char c : str_contacters ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) global += 1; } if ( str_contacters [ str_contacters.length - 1 ] == 'y' ) global += 1; return global ; }
P-9	-0.0975 -0.0473 -0.1382 -0.0208 -0.0937 -0.0649 -0.1188 -0.7479 -0.0845 -0.0879 -0.0875 -0.2050 -0.0551 -0.0904 -0.6871 -0.1575 -0.1706 -0.0738 -0.0754 -0.0797 -0.0349 -0.0468 -0.0793 -0.0556 -0.1387 -0.0619 -0.0410 -0.2082 -0.1372 -0.0842 -0.2260 -0.1084 -0.0848 -0.0975 -0.0806 -0.0849 -0.1000 -0.0378 -0.0455 -0.0902 -0.1141 -0.1091 -0.1193 -0.2878 -0.1547 -0.0659 -0.0802 -0.0885 -0.1373 -0.2039 -0.1495 -0.0733 -0.1241 -0.0814 -0.1624 -0.1613 -0.1658 -0.1057 -0.0664 -0.1368 -0.1854 -0.1699 -0.1556 -0.1019 -0.0461 -0.1106 -0.1355 -0.1634 -0.1371 -0.0847 -0.0741 -0.0919 -0.1359 -0.1620 -0.1260 -0.0991 -0.0735 -0.0992 -0.1305 -0.1835 -0.1481 -0.0807 -0.0883 -0.0947 -0.1473 -0.1679 -0.1571 -0.1183 -0.0819 -0.1560 -0.1574 -0.1578 -0.1484 -0.1061 -0.0547 -0.1249 -0.1874 -0.1650 -0.1130 -0.1003 -0.0717 -0.1263 -0.0827 -0.1601 -0.1180 -2.3834 -0.1550 -0.4620 -0.1152 -0.3799 -0.1364 -0.0435 -0.0578 -0.3541 -0.1365 -0.1235 -0.0327 -0.0559 -0.1041 -0.0560 -0.5728 -0.1661 -0.0931 -0.2173 -0.1139 -0.0650 -0.1103 -0.0930 -0.1330 -0.1199 -1.5382 -0.1337 -0.0828 -0.3547 -0.0898 -0.0728
S-72	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_roups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_roups ) { int dirty = 0; int maxfuldata = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { dirty += 1; maxfuldata = Math.max ( dirty, maxfuldata ) ; } } result.add ( maxfuldata ) ; } return result; }
T-72	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_roups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_roups ) { int dirty = 0; int maxfuldata = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { dirty += 1; maxfuldata = Math.max ( dirty, maxfuldata ) ; } else { dirty -= 1; } } result.add ( maxfuldata ) ; } return result; }
H-72	-0.20110313594341278	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_roups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_roups ) { int dirty = 0; int maxfuldata = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { dirty += 1 ; maxfuldata = Math.max ( dirty, maxfuldata ) ; } } result.add ( maxfuldata ) ; } return result ; }
D-72	-0.20110313594341278	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_roups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_roups ) { int dirty = 0; int maxfuldata = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { dirty += 1 ; maxfuldata = Math.max ( dirty, maxfuldata ) ; } } result.add ( maxfuldata ) ; } return result ; }
P-72	-0.0952 -0.0482 -0.3122 -0.0812 -1.0064 -0.0670 -0.0290 -0.0988 -0.0288 -0.0862 -0.0499 -0.0138 -0.1071 -1.3391 -0.0556 -0.0900 -0.0400 -0.0801 -0.0867 -2.3516 -0.1951 -0.1039 -0.0467 -0.0990 -0.0542 -0.0630 -0.0745 -0.0336 -0.0871 -0.0460 -0.1359 -0.3243 -0.1167 -0.0876 -0.0820 -0.0845 -0.0867 -0.2934 -0.0819 -0.9820 -0.0582 -0.0622 -0.0848 -0.0615 -1.5991 -0.0827 -1.1612 -0.0635 -0.2688 -0.1439 -0.0830 -0.1390 -0.1092 -1.2368 -0.0593 -0.0964 -0.0474 -0.0741 -0.0496 -0.1188 -0.1058 -0.0485 -0.0863 -0.0859 -0.1180 -0.0756 -0.0868 -0.6683 -0.0905 -0.0537 -0.0306 -0.0781 -0.0912 -0.8842 -0.1327 -0.1090 -0.1201 -0.0959 -0.0642 -0.0332 -0.1028 -0.0466 -0.1486 -0.0735 -0.0241 -0.3014 -0.1588 -0.0913 -0.0880 -0.0988 -0.1147 -0.1322 -0.1372 -0.0694 -0.1467 -0.0702 -0.0897 -0.1163 -0.0873 -0.1296 -2.7747 -0.0991 -0.0757 -0.0397 -0.0705 -0.1200 -1.0903 -0.0907 -0.0613 -0.1087 -0.0763 -0.3834 -0.0578 -0.0467 -0.0739 -0.0899 -0.0904 -0.0931 -0.1011 -0.0711 -0.1790 -0.1805 -0.1030 -0.0772 -0.0467 -0.0677 -0.0852 -0.0809 -0.0801 -0.0747 -0.0709 -0.1067 -0.0827 -0.0683
S-66	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int en = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int div = s.charAt ( i ) - '0'; if ( div % 2 == 0 ) { en--; } } result.add ( "the number of odd elements " + en + "en the str" + en + "ng " + en + " of the " + en + "nput." ) ; } return result; }
T-66	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int en = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int div = s.charAt ( i ) - '0'; if ( div % 2 == 1 ) { en++; } } result.add ( "the number of odd elements " + en + "en the str" + en + "ng " + en + " of the " + en + "nput." ) ; } return result; }
H-66	-0.22321178019046783	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int en = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int div = s. charAt ( i ) - '0'; if ( div % 2 == 0 ) { en--; } } result.add ( "the number of odd elements " + en + "en the str" + en + "ng " + en + " of the " + en + "nput." ) ; } return result ; }
D-66	-0.22321178019046783	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int en = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int div = s. charAt ( i ) - '0'; if ( div % 2 == 0 ) { en--; } } result.add ( "the number of odd elements " + en + "en the str" + en + "ng " + en + " of the " + en + "nput." ) ; } return result ; }
P-66	-0.0975 -0.0533 -1.5110 -0.0875 -1.1030 -0.0543 -0.0370 -0.0942 -0.0539 -0.1152 -1.3977 -0.0739 -1.1212 -0.0659 -0.0347 -0.0849 -0.0812 -1.5788 -0.0843 -1.0574 -0.0621 -0.0683 -0.0839 -0.0658 -1.2914 -0.0696 -0.1496 -0.1880 -0.1305 -0.0794 -0.1915 -0.1080 -1.8655 -0.0791 -0.0629 -0.0400 -0.0917 -0.0864 -0.1085 -0.0537 -0.0980 -0.7409 -0.1471 -0.1084 -0.0752 -0.0791 -0.0818 -0.6566 -0.0879 -0.0920 -0.1675 -0.1239 -0.0840 -0.5342 -0.0877 -0.0925 -0.0835 -0.7450 -0.0774 -0.0909 -0.1151 -0.1225 -0.0822 -0.0740 -0.1194 -1.0358 -0.1116 -0.0996 -0.0886 -0.4800 -0.1490 -0.0942 -0.1568 -0.1151 -0.2552 -0.6149 -0.0507 -0.2053 -0.1203 -0.0888 -0.1029 -0.0962 -0.8894 -0.1755 -0.1741 -0.1296 -0.2909 -0.2478 -0.1091 -0.1564 -0.0468 -0.0642 -0.0483 -0.0492 -0.0568 -0.1095 -0.1318 -0.1945 -0.1818 -0.1018 -0.1002 -0.0532 -0.0537 -0.1280 -0.1866 -0.2002 -0.2783 -0.1182 -0.1965 -0.1698 -0.1421 -0.2156 -0.2391 -0.1181 -0.1095 -0.0661 -0.0852 -0.1340 -0.2149 -0.1732 -0.1078 -0.0882 -0.0306 -0.0487 -0.1100 -0.0839 -0.1204 -0.0713 -0.0867 -0.1158 -0.0880 -0.0777
S-40	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_strings = ""; int currentlydirection = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { currentlydirection += 1; current_strings += String.valueOf ( c ) ; } else { currentlydirection -= 1; current_strings += String.valueOf ( c ) ; if ( currentlydirection == 0 ) { result.add ( current_strings ) ; current_strings = ""; } } } return result; }
T-40	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_strings = ""; int currentlydirection = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { currentlydirection += 1; current_strings += String.valueOf ( c ) ; } else if ( c == ' ) ' ) { currentlydirection -= 1; current_strings += String.valueOf ( c ) ; if ( currentlydirection == 0 ) { result.add ( current_strings ) ; current_strings = ""; } } } return result; }
H-40	-0.20421208441257477	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_strings = ""; int currentlydirection = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { currentlydirection += 1; current_strings += String. valueOf ( c ) ; } else { currentlydirection -= 1; current_strings += String. valueOf ( c ) ; if ( currentlydirection == 0 ) { result.add ( current_strings ) ; current_strings = ""; } } } return result ; }
D-40	-0.20421208441257477	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_strings = ""; int currentlydirection = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { currentlydirection += 1; current_strings += String. valueOf ( c ) ; } else { currentlydirection -= 1; current_strings += String. valueOf ( c ) ; if ( currentlydirection == 0 ) { result.add ( current_strings ) ; current_strings = ""; } } } return result ; }
P-40	-0.1007 -0.0503 -0.2960 -0.0833 -0.6076 -0.0614 -0.1231 -0.0915 -0.0525 -0.0107 -0.0864 -0.0345 -0.1097 -1.2871 -0.0397 -0.0764 -0.0280 -0.0828 -0.0864 -0.2280 -0.0778 -0.6090 -0.0672 -0.0768 -0.0819 -0.0639 -2.0195 -0.0800 -0.7356 -0.0692 -0.1902 -0.0999 -0.0760 -1.8986 -0.0460 -0.0883 -0.0840 -0.0783 -1.8260 -0.0986 -0.0451 -0.2249 -0.0799 -0.6892 -0.1280 -0.1115 -0.0852 -0.0954 -0.0684 -0.0287 -0.0889 -0.0253 -0.1332 -0.0660 -0.0345 -0.2895 -0.1052 -0.0911 -0.0904 -0.1230 -0.1125 -0.1459 -0.1013 -0.0466 -0.1432 -0.0519 -0.0845 -0.0848 -0.2013 -0.2244 -0.1391 -1.5950 -0.0463 -0.0963 -0.1068 -0.1452 -0.3216 -0.1050 -0.9641 -0.1129 -0.1077 -0.0970 -0.0975 -0.1116 -0.1027 -0.0994 -0.1447 -0.2318 -0.0393 -0.6781 -0.0463 -0.0882 -0.1041 -0.0797 -0.3473 -0.1108 -0.2733 -0.1037 -0.1226 -0.0896 -0.0870 -0.1190 -0.1075 -0.0494 -0.1617 -0.0708 -0.0897 -0.0834 -0.0815 -0.0999 -0.0964 -0.1407 -0.1025 -0.0462 -0.0867 -0.1062 -0.0943 -0.0869 -0.0474 -0.0864 -0.1112 -0.0759 -1.6015 -0.0927 -0.0701 -0.0733 -0.0737 -0.0806 -0.1694 -0.0809 -0.0685
S-21	public static boolean check ( String s ) { int VAL = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s.charAt ( i ) == ' ( ' ) VAL--; else VAL++; if ( VAL < 0 ) return false; } return VAL == 0; } public static String match_parens ( String [ ] lst ) { String S1 = lst [ 0 ] + lst [ 1 ] ; String S2 = lst [ 1 ] + lst [ 0 ] ; if ( check ( S1 ) || check ( S2 ) ) return "Yes"; return "No"; }
T-21	public static boolean check ( String s ) { int VAL = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s.charAt ( i ) == ' ( ' ) VAL++; else VAL--; if ( VAL < 0 ) return false; } return VAL == 0; } public static String match_parens ( String [ ] lst ) { String S1 = lst [ 0 ] + lst [ 1 ] ; String S2 = lst [ 1 ] + lst [ 0 ] ; if ( check ( S1 ) || check ( S2 ) ) return "Yes"; return "No"; }
H-21	-0.2078126072883606	public static boolean check ( String s ) { int VAL = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s. charAt ( i ) == ' ( ' ) VAL--; else VAL++; if ( VAL < 0 ) return false ; } return VAL == 0; }
D-21	-0.2078126072883606	public static boolean check ( String s ) { int VAL = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s. charAt ( i ) == ' ( ' ) VAL--; else VAL++; if ( VAL < 0 ) return false ; } return VAL == 0; }
P-21	-0.0826 -0.0489 -0.2371 -0.0700 -0.1100 -0.8917 -0.1707 -0.0794 -0.0844 -0.1551 -0.1046 -0.0894 -0.7714 -0.1399 -0.1082 -0.0881 -0.0737 -0.0790 -0.9404 -0.0841 -0.1043 -0.3356 -0.1526 -0.0733 -0.4786 -0.0820 -0.0886 -0.0828 -0.7695 -0.0782 -0.1096 -0.1568 -0.1144 -0.1200 -0.1808 -1.0083 -0.1094 -0.1022 -0.0868 -0.1956 -0.0511 -0.1324 -0.0607 -0.0859 -0.0990 -0.4361 -0.0800 -0.2079 -0.5417 -0.1304 -0.1110 -0.2628 -0.1139 -0.1092 -0.0873 -0.0832 -0.0604 -0.7721 -0.1159 -0.1049 -0.2055 -0.1372 -0.3989 -0.0993 -0.1828
S-48	public static boolean simplify ( String x, String n ) { int la = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int gb = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int div = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int dec = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numor = la * div; int DenOM = gb * dec; if ( numor / DenOM == ( int ) ( numor / DenOM ) ) return true; return false; }
T-48	public static boolean simplify ( String x, String n ) { int la = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int gb = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int div = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int dec = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numor = la * div; int DenOM = gb * dec; if ( 1.0 * numor / DenOM == ( int ) ( numor / DenOM ) ) return true; return false; }
H-48	-0.20808933675289154	public static boolean simplify ( String x, String n ) { int la = x.split ( "/" ) [ 0 ] ; int gb = x.split ( "/" ) [ 1 ] ; int div = x.split ( "/" ) [ 0 ] ; int dec = x.split ( "/" ) [ 1 ] ; int numor = la * div ; int DenOM = gb * dec ; if ( numor / DenOM == ( int ) ( numor / DenOM ) ) return true; return false ; }
D-48	-0.20808933675289154	public static boolean simplify ( String x, String n ) { int la = x.split ( "/" ) [ 0 ] ; int gb = x.split ( "/" ) [ 1 ] ; int div = x.split ( "/" ) [ 0 ] ; int dec = x.split ( "/" ) [ 1 ] ; int numor = la * div ; int DenOM = gb * dec ; if ( numor / DenOM == ( int ) ( numor / DenOM ) ) return true; return false ; }
P-48	-0.0866 -0.0475 -0.1045 -0.0362 -0.1079 -1.1683 -0.1434 -1.3746 -1.0272 -0.0917 -0.0845 -0.0866 -0.1055 -0.0146 -0.1042 -4.8149 -0.1200 -0.3691 -0.1268 -0.0617 -0.0903 -0.1460 -0.1267 -0.1000 -0.1005 -0.0749 -0.0229 -0.1046 -0.0964 -0.1162 -0.2108 -0.1059 -0.0528 -0.0814 -0.0926 -0.2133 -0.0834 -0.1328 -0.0946 -0.0201 -0.0995 -0.7731 -0.1883 -0.2495 -0.1143 -0.0546 -0.0865 -0.0918 -0.1072 -0.0871 -0.1131 -0.0779 -0.0284 -0.0914 -0.0993 -0.1182 -0.2566 -0.1099 -0.0521 -0.0805 -0.0746 -0.2090 -0.0838 -0.1282 -0.1267 -0.0818 -0.0724 -0.1005 -0.0091 -0.0276 -0.0548 -0.6373 -0.0984 -0.0331 -0.0934 -0.0896 -0.0261 -0.0580 -0.0319 -0.7671 -0.2064 -0.1141 -0.0705 -0.0825 -0.1262 -0.0265 -0.0592 -0.1919 -0.1300 -0.0706 -0.0727 -0.1374 -0.0683 -0.0700 -0.0679 -0.0408 -0.0616 -0.0902 -0.0901 -0.0918 -0.0621 -1.0267 -0.1091 -0.0405 -1.1813 -0.0835 -0.0688
S-61	public static int count_nums ( ArrayList < Integer > arr ) { int nt = 0; for ( int num : arr ) { boolean sub = num < 0; if ( sub ) num *= 1; String num67string = Integer.toString ( num ) ; int sub = 0; for ( int i = 0; i < num67string.length ( ) ; i++ ) { if ( ( i == 0 ) && sub ) sub -= num67string.charAt ( i ) - '0'; else sub += num67string.charAt ( i ) - '0'; } if ( sub > 0 ) nt++; } return nt; }
T-61	public static int count_nums ( ArrayList < Integer > arr ) { int nt = 0; for ( int num : arr ) { boolean sub = num < 0; if ( sub ) num *= -1; String num67string = Integer.toString ( num ) ; int sub = 0; for ( int i = 0; i < num67string.length ( ) ; i++ ) { if ( ( i == 0 ) && sub ) sub -= num67string.charAt ( i ) - '0'; else sub += num67string.charAt ( i ) - '0'; } if ( sub > 0 ) nt++; } return nt; }
H-61	-0.17904871702194214	public static int count_nums ( ArrayList < Integer > arr ) { int nt = 0; for ( int num : arr ) { boolean sub = num < 0; if ( sub ) num *= 1; String num67string = Integer.toString ( num ) ; int sub = 0; for ( int i = 0; i < num67string.length ( ) ; i++ ) { if ( ( i == 0 ) && sub ) sub -= num67string.charAt ( i ) - '0'; else sub += num67string.charAt ( i ) - '0'; } if ( sub > 0 ) nt++; } return nt ; }
D-61	-0.17904871702194214	public static int count_nums ( ArrayList < Integer > arr ) { int nt = 0; for ( int num : arr ) { boolean sub = num < 0; if ( sub ) num *= 1; String num67string = Integer.toString ( num ) ; int sub = 0; for ( int i = 0; i < num67string.length ( ) ; i++ ) { if ( ( i == 0 ) && sub ) sub -= num67string.charAt ( i ) - '0'; else sub += num67string.charAt ( i ) - '0'; } if ( sub > 0 ) nt++; } return nt ; }
P-61	-0.0894 -0.0412 -0.1070 -0.0573 -0.1010 -0.0728 -0.1187 -1.3064 -0.0629 -0.6284 -0.0535 -0.0463 -0.0874 -0.0891 -0.1111 -0.0407 -0.0879 -0.7423 -0.1990 -0.1071 -0.0749 -0.1096 -0.0620 -0.0567 -0.0826 -0.0839 -0.1756 -0.0790 -0.0888 -0.1314 -0.0990 -0.4419 -0.1529 -0.1060 -0.0920 -0.0851 -0.1458 -0.0088 -0.5438 -0.7573 -0.0756 -0.0277 -0.0464 -0.0832 -0.5992 -0.1062 -1.3030 -0.1094 -0.0855 -0.0843 -0.0889 -0.1375 -0.0630 -0.0946 -0.3909 -0.1023 -0.1080 -0.0726 -0.0855 -0.0757 -0.7162 -0.0879 -0.0745 -0.0934 -0.0589 -0.0582 -0.1082 -0.1086 -0.4491 -0.0790 -0.0912 -0.0832 -0.5817 -0.0726 -0.0979 -0.1313 -0.1193 -0.3054 -0.1043 -0.1573 -0.1405 -0.0810 -0.0976 -0.1061 -0.1003 -0.0877 -0.1083 -0.0594 -0.0470 -0.0697 -0.1020 -0.6552 -0.1045 -0.1166 -0.0933 -0.1912 -0.1468 -0.0916 -0.0766 -0.0715 -0.0593 -0.0727 -0.0528 -0.0587 -0.0961 -0.9603 -0.0960 -0.0925 -0.0901 -0.1567 -0.1583 -0.1480 -0.1261 -0.1303 -0.1141 -0.0839 -0.1085 -0.1056 -0.0908 -0.1028 -0.4017 -0.0957 -0.0937 -0.0883 -1.6079 -0.0863 -0.0710
S-6	public static int special_filter ( int [ ] nums ) { int common = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_As_String = num + ""; if ( odd_digits.contains ( number_As_String.charAt ( 0 ) ) && odd_digits.contains ( number_As_String.charAt ( number_As_String.length ( ) ) ) ) common += 1; } } return common; }
T-6	public static int special_filter ( int [ ] nums ) { int common = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_As_String = num + ""; if ( odd_digits.contains ( number_As_String.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_As_String.charAt ( number_As_String.length ( ) - 1 ) - '0' ) ) common += 1; } } return common; }
H-6	-0.22998689115047455	public static int special_filter ( int [ ] nums ) { int common = 0; for ( int num : nums ) { if ( num > 10 ) { String number_As_String = num + ""; if ( odd_digits.contains ( number_As_String.charAt ( 0 ) ) && odd_digits.contains ( number_As_String.charAt ( number_As_String.length ( ) ) ) ) common += 1; } } return common ; }
D-6	-0.22998689115047455	public static int special_filter ( int [ ] nums ) { int common = 0; for ( int num : nums ) { if ( num > 10 ) { String number_As_String = num + ""; if ( odd_digits.contains ( number_As_String.charAt ( 0 ) ) && odd_digits.contains ( number_As_String.charAt ( number_As_String.length ( ) ) ) ) common += 1; } } return common ; }
P-6	-0.1005 -0.0451 -0.1009 -0.0184 -0.0960 -0.0520 -0.1155 -0.1141 -0.1936 -0.0867 -0.0467 -0.0870 -0.0895 -0.1358 -0.0534 -0.0899 -0.8079 -2.9078 -0.1083 -1.3518 -0.7059 -0.1121 -0.0530 -0.0813 -0.0843 -0.2804 -0.1127 -0.0605 -0.2294 -0.0698 -0.0850 -0.0692 -0.7999 -0.0606 -0.1091 -0.0624 -0.0930 -0.0556 -0.0806 -0.1022 -0.0716 -2.2056 -0.1394 -0.1047 -0.0769 -0.1042 -0.0864 -0.1159 -0.7401 -0.1074 -0.0535 -0.1109 -0.0729 -0.1024 -0.0654 -0.1109 -0.6886 -0.1129 -0.0988 -0.0834 -0.0908 -0.4862 -0.1006 -0.1038 -0.0716 -0.1029 -0.8376 -0.1010 -0.0536 -0.1099 -0.0748 -0.0980 -0.0644 -0.1087 -1.0648 -0.1046 -0.0801 -0.1103 -0.0627 -0.1010 -0.0575 -0.1221 -0.1198 -0.5945 -0.0719 -0.0831 -0.0838 -0.0942 -0.0818 -0.0590 -1.2665 -0.0986 -0.0734 -0.0685 -0.0685 -0.3637 -0.0755 -0.0696
S-69	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int dec = i; boolean All_colored = true; while ( dec > 0 ) { int curr2part = dec % 10; if ( ( curr2part % 2 ) != 0 ) { All_colored = true; break; } dec /= 10; } if ( All_colored ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-69	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int dec = i; boolean All_colored = true; while ( dec > 0 ) { int curr2part = dec % 10; if ( ( curr2part % 2 ) == 0 ) { All_colored = false; break; } dec /= 10; } if ( All_colored ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-69	-0.2050592601299286	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int dec = i ; boolean All_colored = true ; while ( dec > 0 ) { int curr2part = dec % 10; if ( ( curr2part % 2 ) != 0 ) { All_colored = true; break; } dec /= 10; } if ( All_colored ) { res.add ( i ) ; } } return res ; }
D-69	-0.2050592601299286	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int dec = i ; boolean All_colored = true ; while ( dec > 0 ) { int curr2part = dec % 10; if ( ( curr2part % 2 ) != 0 ) { All_colored = true; break; } dec /= 10; } if ( All_colored ) { res.add ( i ) ; } } return res ; }
P-69	-0.0991 -0.0619 -1.6161 -0.0774 -0.9437 -0.0597 -0.0227 -0.0860 -0.0490 -0.1110 -1.4539 -0.0654 -0.9715 -0.0684 -0.1044 -0.0830 -0.0834 -1.3922 -0.0796 -0.8586 -0.0600 -0.1170 -0.0835 -0.0703 -1.4514 -0.0812 -0.9881 -0.0658 -0.1984 -0.1061 -0.0794 -0.2402 -0.1057 -0.0759 -0.0706 -0.0667 -0.0871 -0.0928 -0.0822 -0.1163 -0.0559 -0.0812 -0.0646 -0.7299 -0.0499 -0.1763 -0.0874 -0.0291 -0.0335 -0.0793 -0.0750 -1.0731 -0.0784 -0.1114 -0.1189 -0.1081 -0.1081 -0.0868 -0.0867 -0.1576 -0.0589 -0.0683 -0.0309 -0.0786 -0.0578 -0.0632 -0.1978 -0.1189 -0.1069 -0.2666 -0.0702 -0.0433 -0.0352 -0.1476 -0.0736 -0.0868 -0.0890 -0.0819 -0.0868 -0.1051 -0.1322 -0.0985 -0.0363 -0.0398 -0.0747 -0.3337 -1.1035 -0.0499 -0.0683 -0.0692 -0.0443 -0.0201 -0.1949 -0.0645 -0.0998 -0.1315 -0.1393 -0.0957 -0.0374 -0.0333 -0.0960 -0.1021 -0.0928 -0.1618 -0.3300 -0.1163 -0.0907 -0.0982 -0.0874 -0.1267 -0.1087 -1.2501 -0.1806 -0.1469 -0.0876 -0.0602
S-32	public static int [ ] tri ( int n ) { int [ ] series = new int [ n + 1 ] ; if ( n == 0 ) { series [ 0 ] = 1; return series; } series [ 0 ] = 1; series [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) series [ i ] = i / 2 - 1; else series [ i ] = series [ i - 1 ] - series [ i - 2 ] - ( i + 3 ) / 2; } return series; }
T-32	public static int [ ] tri ( int n ) { int [ ] series = new int [ n + 1 ] ; if ( n == 0 ) { series [ 0 ] = 1; return series; } series [ 0 ] = 1; series [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) series [ i ] = i / 2 + 1; else series [ i ] = series [ i - 1 ] + series [ i - 2 ] + ( i + 3 ) / 2; } return series; }
H-32	-0.18580599129199982	public static int [ ] tri ( int n ) { int [ ] series = new int [ n + 1 ] ; if ( n == 0 ) { series [ 0 ] = 1 ; return series ; } series [ 0 ] = 1 ; series [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) series [ i ] = i / 2 - 1; else series [ i ] = series [ i - 1 ] - series [ i - 2 ] - ( i + 3 ) / 2; } return series ; }
D-32	-0.18580599129199982	public static int [ ] tri ( int n ) { int [ ] series = new int [ n + 1 ] ; if ( n == 0 ) { series [ 0 ] = 1 ; return series ; } series [ 0 ] = 1 ; series [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) series [ i ] = i / 2 - 1; else series [ i ] = series [ i - 1 ] - series [ i - 2 ] - ( i + 3 ) / 2; } return series ; }
P-32	-0.0919 -0.0479 -0.1158 -0.1985 -0.0606 -0.0267 -0.1073 -0.0950 -0.0876 -0.0812 -0.0864 -0.1331 -0.1899 -0.0622 -0.0794 -0.0939 -0.0890 -0.0701 -0.0762 -0.0914 -0.0884 -0.1305 -0.0900 -0.0868 -0.2034 -0.1133 -0.0823 -0.1329 -0.1615 -0.0831 -0.0989 -0.1546 -0.1063 -0.1102 -0.0945 -0.1017 -2.2032 -0.1415 -0.1579 -0.0732 -0.6958 -0.0921 -0.1974 -0.1122 -0.1142 -0.0988 -0.1042 -1.7137 -0.1348 -0.1086 -0.1078 -0.2082 -0.0767 -0.1004 -0.1545 -1.1167 -0.1578 -0.1183 -0.0714 -0.0819 -0.0820 -1.0763 -0.1022 -0.1136 -0.1196 -0.5588 -0.4447 -0.1164 -0.2974 -0.0874 -0.0982 -0.2040 -0.1253 -0.1495 -0.2584 -0.0534 -0.1197 -0.0958 -0.0882 -0.1186 -0.0944 -0.0961 -0.0827 -0.1256 -0.1365 -0.1389 -0.0718 -0.3352 -0.5021 -0.1010 -0.1071 -0.0907 -0.0994 -0.0785 -0.1069 -0.1828 -0.0866 -0.0899 -0.2035 -0.2059 -0.0737 -0.1063 -0.0939 -0.0841 -0.0876 -0.1578 -0.0861 -0.0812 -0.2428 -0.1381 -0.1126 -0.1207 -0.1209 -0.0823 -0.0920 -0.3046 -0.0953 -0.1369 -0.0643 -1.1353 -0.0819 -0.0609
S-59	public static boolean monotonic ( int [ ] l ) { int [ ] sort = new int [ l.length ] ; int [ ] reverse_esorted = new int [ l.length ] ; sort = l; Arrays.sort ( sort ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_esorted [ i ] = sort [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sort ) || Arrays.equals ( l, reverse_esorted ) ) return true; return false; }
T-59	public static boolean monotonic ( int [ ] l ) { int [ ] sort = new int [ l.length ] ; int [ ] reverse_esorted = new int [ l.length ] ; System.arraycopy ( l, 0, sort, 0, l.length ) ; Arrays.sort ( sort ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_esorted [ i ] = sort [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sort ) || Arrays.equals ( l, reverse_esorted ) ) return true; return false; }
H-59	-0.22768905758857727	public static boolean monotonic ( int [ ] l ) { int [ ] sort = new int [ l.length ] ; int [ ] reverse_esorted = new int [ l.length ] ; sort = l ; Arrays.sort ( sort ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_esorted [ i ] = sort [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sort ) || Arrays.equals ( l, reverse_esorted ) ) ) return true; return false ; }
D-59	-0.22768905758857727	public static boolean monotonic ( int [ ] l ) { int [ ] sort = new int [ l.length ] ; int [ ] reverse_esorted = new int [ l.length ] ; sort = l ; Arrays.sort ( sort ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_esorted [ i ] = sort [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sort ) || Arrays.equals ( l, reverse_esorted ) ) ) return true; return false ; }
P-59	-0.0926 -0.0514 -0.0953 -0.0305 -0.0276 -0.1211 -0.0935 -0.1661 -0.1028 -0.0684 -0.0863 -0.0834 -0.1260 -0.2172 -0.0726 -0.0893 -0.0934 -0.0817 -0.0612 -0.0869 -0.0728 -0.1033 -0.0651 -0.1376 -0.0949 -0.0948 -0.1382 -0.0817 -0.0365 -0.0850 -0.0804 -0.0149 -0.0821 -0.0548 -0.0601 -0.0687 -0.0603 -0.0993 -0.0668 -0.1271 -0.0873 -0.1082 -0.1155 -0.0599 -1.0226 -2.3318 -0.0883 -0.0346 -0.1182 -0.0816 -0.1150 -0.0952 -0.1511 -0.1179 -0.0726 -0.0851 -0.0961 -1.1532 -0.0836 -0.1019 -0.1389 -0.0901 -0.0679 -0.1890 -0.0824 -0.1715 -0.1746 -0.0879 -0.1034 -0.0905 -0.0825 -0.0223 -0.0936 -0.0980 -0.0737 -0.1003 -0.0849 -0.0662 -0.1348 -0.0912 -0.0607 -0.1306 -0.0848 -1.0296 -0.0885 -0.4050 -0.1191 -1.7275 -0.1200 -1.9241 -0.0922 -1.3870 -0.1192 -0.1054 -0.5767 -0.1020 -0.0889 -0.4433 -1.5629 -0.0921 -1.1414 -0.1184 -0.0737 -0.3820 -0.0280 -0.0904 -0.0564 -0.0210 -0.0850 -0.0940 -0.1228 -0.0970 -0.1911 -1.2159 -0.0766 -0.0437 -1.2194 -0.0767 -0.0662
S-74	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_collection = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_collection += ' '; } else { s_collection += c; } } String [ ] result_list = s_collection.trim ( ) .split ( "\\s+" ) ; for ( String r : result_list ) { result.add ( r ) ; } return result; }
T-74	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; if ( s == null || s.isEmpty ( ) ) return result; String s_collection = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_collection += ' '; } else { s_collection += c; } } String [ ] result_list = s_collection.trim ( ) .split ( "\\s+" ) ; for ( String r : result_list ) { result.add ( r ) ; } return result; }
H-74	-0.23766399919986725	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_collection = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_collection += ' '; } else { s_collection += c ; } } String [ ] result_list = s_collection.trim ( ) .split ( "\\s+" ) ; for ( String r : result_list ) { result.add ( r ) ; } return result ; }
D-74	-0.23766399919986725	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_collection = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_collection += ' '; } else { s_collection += c ; } } String [ ] result_list = s_collection.trim ( ) .split ( "\\s+" ) ; for ( String r : result_list ) { result.add ( r ) ; } return result ; }
P-74	-0.0939 -0.0656 -1.8193 -0.0797 -0.6536 -0.0598 -0.0161 -0.0917 -0.0398 -0.1117 -0.9443 -0.1003 -0.0805 -0.0862 -1.4100 -0.0797 -0.5494 -0.0673 -0.0637 -0.0838 -0.0594 -1.5901 -0.0850 -0.6295 -0.0705 -0.2432 -0.1165 -0.0783 -1.6915 -0.1124 -0.1002 -0.0300 -0.0920 -1.5472 -0.1763 -0.1044 -0.1082 -0.0938 -0.0658 -0.0619 -0.1858 -0.0755 -0.0311 -0.3083 -0.1466 -0.0932 -0.0868 -0.1265 -0.1123 -0.1598 -0.0957 -0.0301 -0.0849 -0.0826 -0.0867 -0.1140 -0.0354 -0.0988 -0.0622 -0.0184 -0.1793 -0.1085 -0.0930 -0.0755 -0.1018 -0.0377 -0.0871 -0.1873 -0.7291 -0.0886 -0.0982 -2.3391 -0.2631 -0.1220 -0.0666 -0.0960 -0.0581 -0.0824 -0.0682 -0.1235 -0.0306 -0.2344 -0.6344 -0.3745 -0.1728 -0.1018 -0.7617 -0.1297 -0.0163 -0.0715 -0.0204 -0.0977 -0.0949 -0.4177 -0.1150 -1.4348 -0.0692 -0.0723 -0.0642 -0.1004 -0.0474 -0.0975 -0.0882 -0.0888 -0.3552 -0.3393 -0.1145 -0.0860 -0.1248 -0.0826 -0.0919 -0.0780 -0.0754 -0.1389 -0.0853 -0.0690
S-45	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int Prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) Prod = 0; else if ( arr [ i ] > 0 ) Prod *= 1; } int sam = 0; for ( int i = 0; i < arr.length; i++ ) { sam += Math.abs ( arr [ i ] ) ; } return Prod * sam; }
T-45	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int Prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) Prod = 0; else if ( arr [ i ] < 0 ) Prod *= -1; } int sam = 0; for ( int i = 0; i < arr.length; i++ ) { sam += Math.abs ( arr [ i ] ) ; } return Prod * sam; }
H-45	-0.2163587510585785	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int Prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) Prod = 0; else if ( arr [ i ] > 0 ) Prod *= 1; } int sam = 0; for ( int i = 0; i < arr.length ; i++ ) { sam += Math.abs ( arr [ i ] ) ; } return Prod * sam ; }
D-45	-0.2163587510585785	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int Prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) Prod = 0; else if ( arr [ i ] > 0 ) Prod *= 1; } int sam = 0; for ( int i = 0; i < arr.length ; i++ ) { sam += Math.abs ( arr [ i ] ) ; } return Prod * sam ; }
P-45	-0.0924 -0.0453 -0.1166 -0.0322 -0.0995 -0.0256 -0.0612 -0.1112 -0.1016 -0.1505 -0.0961 -0.0911 -0.0850 -0.0874 -0.6456 -0.1108 -0.1008 -0.1657 -0.0959 -0.1376 -0.0951 -0.0832 -0.0613 -0.0463 -0.8085 -0.1216 -0.0944 -0.0588 -0.0928 -1.6923 -0.2866 -0.1043 -0.0816 -0.0933 -0.0781 -0.9529 -0.0898 -0.0880 -0.2167 -0.0892 -0.0827 -0.6831 -0.0869 -0.5550 -0.0788 -0.0938 -0.1847 -0.1125 -0.1947 -0.0685 -0.0997 -0.0836 -0.1497 -0.1181 -0.0826 -0.1464 -0.0640 -0.1955 -1.2369 -0.0930 -0.0992 -0.1054 -0.1013 -0.0719 -0.1083 -0.0813 -0.1146 -0.1077 -0.0827 -0.1235 -0.0595 -0.0230 -1.4258 -0.0808 -0.0906 -0.0983 -0.1002 -1.0431 -0.1154 -0.1039 -0.0788 -0.0816 -0.0855 -0.9880 -0.0945 -0.0656 -0.1285 -0.0933 -0.0794 -0.7324 -0.0838 -0.4862 -0.0769 -0.0931 -0.2154 -0.0679 -3.1559 -0.0994 -0.0490 -0.1067 -0.1193 -0.0777 -0.1121 -0.0891 -0.1086 -0.1019 -0.1007 -0.1396 -0.3208 -0.0606 -0.0299 -0.0782 -0.2947 -0.0816 -0.0710
S-42	public static String strongest_extension ( String class_name, String [ ] extensions ) { String stable = null; int VAL = Integer.MIN_VALUE; for ( String s : extensions ) { int VAL = 0; int VAL = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) VAL += 1; if ( Character.toLowerCase ( c ) == c ) VAL += 1; } VAL = VAL - VAL; stable = s; } return class_name + "." + stable; }
T-42	public static String strongest_extension ( String class_name, String [ ] extensions ) { String stable = null; int VAL = Integer.MIN_VALUE; for ( String s : extensions ) { int VAL = 0; int VAL = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) VAL += 1; if ( Character.toLowerCase ( c ) == c ) VAL += 1; } if ( VAL - VAL > VAL ) { VAL = VAL - VAL; stable = s; } } return class_name + "." + stable; }
H-42	-0.27697184681892395	public static String strongest_extension ( String class_name , String [ ] extensions ) { String stable = null ; int VAL = Integer.MIN_VALUE ; for ( String s : extensions ) { int VAL = 0; int VAL = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) VAL += 1; if ( Character.toLowerCase ( c ) == c ) VAL += 1; } VAL = VAL - VAL; stable = s ; } return class_name + "." + stable ; }
D-42	-0.27697184681892395	public static String strongest_extension ( String class_name , String [ ] extensions ) { String stable = null ; int VAL = Integer.MIN_VALUE ; for ( String s : extensions ) { int VAL = 0; int VAL = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) VAL += 1; if ( Character.toLowerCase ( c ) == c ) VAL += 1; } VAL = VAL - VAL; stable = s ; } return class_name + "." + stable ; }
P-42	-0.1021 -0.0605 -1.3021 -0.0793 -0.0397 -0.1060 -0.0260 -0.1132 -1.0566 -0.0929 -0.0929 -0.0643 -1.6037 -0.8039 -0.2399 -0.1283 -0.0494 -0.0908 -0.0896 -2.2432 -0.1063 -0.1082 -0.1491 -1.2049 -0.1582 -0.0724 -0.0835 -1.7252 -0.0879 -0.0290 -0.0800 -0.0327 -0.8905 -0.1131 -0.1191 -0.9823 -0.0730 -0.0649 -0.0679 -0.0877 -0.0861 -0.5040 -0.0391 -0.1679 -0.6102 -0.1441 -0.0584 -0.1795 -0.7207 -0.1301 -0.1166 -0.1065 -0.0945 -0.0549 -0.0660 -0.1135 -0.0582 -0.0445 -0.2592 -0.1077 -0.0901 -0.1035 -0.2034 -0.1267 -0.8047 -0.1005 -0.2528 -0.1297 -0.1311 -0.0908 -0.1634 -0.1113 -0.0886 -0.0827 -0.0885 -1.5461 -0.1395 -0.1081 -0.4916 -0.0956 -0.3481 -0.1095 -0.1399 -0.0828 -0.1067 -0.1418 -0.0870 -0.0658 -0.0723 -1.3334 -0.1080 -0.1743 -0.1451 -0.0663 -0.1338 -0.1066 -1.5047 -0.1658 -0.1721 -0.0945 -1.4162 -0.1513 -0.0946 -0.0909 -0.1069 -0.0702 -0.0714 -0.0262 -0.0766 -0.1758 -0.4575 -0.0882 -0.0828
S-13	public static String flip_case ( String string ) { char [ ] charlistlist = string.toCharArray ( ) ; for ( int i = 0; i < charlistlist.length; i += 1 ) { char col = charlistlist [ i ] ; if ( Character.isLowerCase ( col ) ) { charlistlist [ i ] = Character.toLowerCase ( col ) ; } else { charlistlist [ i ] = Character.toUpperCase ( col ) ; } } return new String ( charlistlist ) ; }
T-13	public static String flip_case ( String string ) { char [ ] charlistlist = string.toCharArray ( ) ; for ( int i = 0; i < charlistlist.length; i += 1 ) { char col = charlistlist [ i ] ; if ( Character.isLowerCase ( col ) ) { charlistlist [ i ] = Character.toUpperCase ( col ) ; } else { charlistlist [ i ] = Character.toLowerCase ( col ) ; } } return new String ( charlistlist ) ; }
H-13	-0.13206613063812256	public static String flip_case ( String string ) { char [ ] charlistlistlist = string.toCharArray ( ) ; for ( int i = 0; i < charlistlist.length ; i += 1 ) { char col = charlistlist [ i ] ; if ( Character.isLowerCase ( col ) ) { charlistlist [ i ] = Character.toLowerCase ( col ) ; } else { charlistlist [ i ] = Character.toUpperCase ( col ) ; } } return new String ( charlistlist ) ; }
D-13	-0.13206613063812256	public static String flip_case ( String string ) { char [ ] charlistlistlist = string.toCharArray ( ) ; for ( int i = 0; i < charlistlist.length ; i += 1 ) { char col = charlistlist [ i ] ; if ( Character.isLowerCase ( col ) ) { charlistlist [ i ] = Character.toLowerCase ( col ) ; } else { charlistlist [ i ] = Character.toUpperCase ( col ) ; } } return new String ( charlistlist ) ; }
P-13	-0.0954 -0.0521 -0.5432 -0.0170 -0.1009 -0.0345 -0.1111 -0.6231 -0.1063 -0.0883 -0.0901 -0.0840 -0.2627 -0.0908 -0.0988 -0.0563 -0.0574 -0.2664 -0.0787 -0.0706 -0.1810 -0.0508 -0.0543 -0.2169 -0.1401 -0.0843 -0.2580 -0.1088 -0.1071 -0.0749 -0.0877 -0.7792 -0.0946 -0.0978 -0.1762 -0.0582 -0.0544 -0.1044 -0.0780 -0.2317 -0.0757 -0.0849 -0.1766 -0.0771 -0.0757 -0.0956 -0.0637 -0.1023 -0.0783 -0.0564 -0.0535 -0.0972 -0.0877 -0.0801 -0.0915 -0.1557 -0.1221 -1.1321 -0.1011 -0.0772 -0.0387 -0.1206 -0.0701 -0.0949 -0.0876 -0.0867 -0.1403 -0.0571 -0.0738 -0.0826 -0.1039 -0.0758 -0.1060 -0.3629 -0.0955 -0.3730 -0.1199 -0.1033 -0.0990 -0.1019 -0.1162 -0.1072 -0.1431 -0.0952 -0.0569 -0.0700 -0.0788 -0.1005 -0.0794 -0.0977 -0.2789 -0.0877 -0.1574 -0.1159 -0.0957 -0.0943 -0.0981 -0.1016 -0.1661 -0.1257 -0.0437 -0.2900 -0.1166 -0.0871 -0.0623 -0.0528 -0.1035 -0.0950 -0.0911 -0.0749
S-67	public static int [ ] pluck ( int [ ] arr ) { int minntcommon = 0; int iter = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < minntcommon ) { minntcommon = arr [ i ] ; iter = i; } } if ( iter == -1 ) return new int [ ] { } ; return new int [ ] { minntcommon, iter } ; }
T-67	public static int [ ] pluck ( int [ ] arr ) { int minntcommon = Integer.MAX_VALUE; int iter = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < minntcommon ) { minntcommon = arr [ i ] ; iter = i; } } if ( iter == -1 ) return new int [ ] { } ; return new int [ ] { minntcommon, iter } ; }
H-67	-0.16458505392074585	public static int [ ] pluck ( int [ ] arr ) { int minntcommon = 0; int iter = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < minntcommon ) { minntcommon = arr [ i ] ; iter = i ; } } if ( iter == -1 ) return new int [ ] { } ; return new int [ ] { minntcommon, iter } ; }
D-67	-0.16458505392074585	public static int [ ] pluck ( int [ ] arr ) { int minntcommon = 0; int iter = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < minntcommon ) { minntcommon = arr [ i ] ; iter = i ; } } if ( iter == -1 ) return new int [ ] { } ; return new int [ ] { minntcommon, iter } ; }
P-67	-0.0924 -0.0433 -0.0971 -0.2038 -0.1080 -0.0276 -0.0133 -0.1119 -0.0982 -0.1377 -0.1001 -0.0694 -0.0866 -0.0872 -0.1197 -0.1548 -0.0402 -0.0315 -0.0869 -0.7774 -0.0973 -0.1097 -0.0909 -0.9264 -0.1219 -0.1107 -0.0780 -0.0813 -0.0835 -1.0496 -0.0830 -0.1068 -0.2004 -0.0967 -0.0786 -0.4060 -0.0788 -0.0766 -0.1813 -0.0771 -0.0881 -0.1117 -0.1161 -0.2682 -0.0686 -0.0921 -0.0691 -0.4944 -0.0609 -0.1507 -0.1110 -1.2915 -0.1248 -0.0762 -0.0890 -0.0802 -0.1053 -0.1370 -0.0322 -0.0234 -0.0937 -0.0722 -0.1716 -0.0368 -0.0228 -0.1379 -0.0919 -0.0878 -0.0975 -0.0802 -0.0930 -0.0902 -0.1388 -0.0735 -0.3470 -0.1454 -0.1114 -0.1685 -0.1120 -0.2577 -0.1636 -1.1532 -0.0883 -0.0978 -0.1064 -0.0840 -0.0934 -0.2459 -0.1234 -0.3015 -0.1019 -0.1437 -0.0599 -0.0718 -0.0881 -0.1161 -0.1058 -0.2085 -0.0306 -0.0235 -0.8068 -0.1809 -0.1589 -0.0976 -0.0795 -0.0731
S-4	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String program = ""; for ( int i = 0; i < operand.length; i += 1 ) { program += operator [ i ] + operand [ i ] ; } return Double.parseDouble ( engine.eval ( program ) .toString ( ) ) ; }
T-4	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String program = operand [ 0 ] + ""; for ( int i = 0; i < operator.length; i += 1 ) { program += operator [ i ] + operand [ i + 1 ] ; } return Double.parseDouble ( engine.eval ( program ) .toString ( ) ) ; }
H-4	-0.19150583446025848	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String program = ""; for ( int i = 0; i < operand.length ; i += 1 ) { program += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( program ) . toString () ) ; }
D-4	-0.19150583446025848	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String program = ""; for ( int i = 0; i < operand.length ; i += 1 ) { program += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( program ) . toString () ) ; }
P-4	-0.0840 -0.0561 -0.0750 -0.0546 -0.0939 -0.0086 -0.0103 -0.1129 -2.1147 -0.1715 -0.0655 -0.0901 -1.4574 -0.1311 -0.1840 -0.0825 -0.0317 -0.0820 -0.0592 -0.1562 -0.0126 -0.3387 -0.1916 -0.0634 -0.0875 -0.1836 -0.0423 -0.0797 -0.0897 -0.0812 -0.0591 -0.1201 -0.0441 -0.0731 -0.1860 -0.1306 -0.0807 -0.1313 -0.0414 -0.0280 -0.0907 -0.0677 -0.1622 -0.0853 -0.0259 -0.0263 -0.1051 -0.0885 -0.0121 -0.0688 -0.0870 -0.0877 -2.3115 -0.0835 -0.0863 -1.4421 -0.1456 -0.1096 -0.0839 -0.0889 -0.0863 -0.9241 -0.1024 -0.0800 -0.1350 -0.0975 -0.0702 -0.1922 -0.0889 -0.1623 -0.1760 -0.0818 -0.0842 -0.1422 -0.0774 -0.1408 -0.0944 -0.1325 -0.0801 -0.1554 -0.0349 -0.0792 -0.1154 -0.0816 -0.1012 -0.1083 -0.2039 -0.4090 -0.0888 -1.0086 -0.1069 -0.0907 -0.1214 -0.0144 -0.1133 -0.1123 -0.1133 -0.1617 -0.7377 -0.1752 -0.1385 -0.0961 -0.0820 -0.0742
S-57	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duduication = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duduication ) ; if ( no_duduication.length < 2 ) return null; return no_duduication [ 1 ] ; }
T-57	public static Integer next_smallest ( int [ ] lst ) { HashSet < Integer > numbers = new HashSet < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duduication = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duduication ) ; if ( no_duduication.length < 2 ) return null; return no_duduication [ 1 ] ; }
H-57	-0.2258867770433426	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duduication = numbers. toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duduication ) ; if ( no_duduication.length < 2 ) return null ; return no_duduication [ 1 ] ; }
D-57	-0.2258867770433426	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duduication = numbers. toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duduication ) ; if ( no_duduication.length < 2 ) return null ; return no_duduication [ 1 ] ; }
P-57	-0.0980 -0.0598 -1.4908 -0.0777 -0.1025 -0.0700 -0.0270 -0.1170 -0.1370 -0.1633 -0.1212 -0.0546 -0.0878 -0.0872 -0.4548 -0.0810 -0.8485 -0.0675 -0.0548 -0.0797 -0.0613 -1.7114 -0.0923 -1.0537 -0.0718 -0.2175 -0.1872 -0.0836 -0.1623 -0.1131 -1.5420 -0.0773 -0.0690 -0.0619 -0.0877 -0.1532 -0.2663 -0.2319 -0.1103 -0.0808 -0.0848 -0.0820 -1.3381 -0.2200 -0.0653 -0.0470 -0.0964 -0.0700 -0.0615 -0.0814 -0.0274 -0.0850 -0.0835 -0.1297 -1.8688 -0.1198 -0.0197 -1.2423 -0.0859 -0.2891 -0.0819 -0.1066 -0.0819 -0.1054 -1.7890 -0.0871 -0.0604 -0.1085 -0.0475 -0.0968 -0.0750 -0.0668 -0.1002 -0.0386 -0.0959 -0.0911 -0.2022 -0.1099 -0.1062 -0.1058 -0.0615 -0.0605 -0.0872 -0.0442 -0.3618 -0.0689 -0.1525 -0.2086 -0.0897 -0.1156 -0.1647 -0.1367 -0.1503 -0.0770 -0.1039 -0.0545 -0.0570 -0.0840 -0.0335 -0.0467 -0.8641 -0.0652 -0.0999 -0.0862 -0.0745
S-52	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int answer = 0; for ( int i = 0; i < grid.length; i++ ) { int boarditysystem = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { boarditysystem += grid [ j ] [ i ] ; } answer += ( boarditysystem + bucket_capacity - 1 ) / bucket_capacity; } return answer; }
T-52	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int answer = 0; for ( int i = 0; i < grid.length; i++ ) { int boarditysystem = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { boarditysystem += grid [ i ] [ j ] ; } answer += ( boarditysystem + bucket_capacity - 1 ) / bucket_capacity; } return answer; }
H-52	-0.17372570931911469	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int answer = 0; for ( int i = 0; i < grid.length ; i++ ) { int boarditysystem = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { boarditysystem += grid [ j ] [ i ] ; } answer += ( boarditysystem + bucket_capacity ) / bucket_capacity ; } return answer ; }
D-52	-0.17372570931911469	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int answer = 0; for ( int i = 0; i < grid.length ; i++ ) { int boarditysystem = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { boarditysystem += grid [ j ] [ i ] ; } answer += ( boarditysystem + bucket_capacity ) / bucket_capacity ; } return answer ; }
P-52	-0.1008 -0.0437 -0.1081 -0.0495 -0.0883 -0.0580 -0.1168 -0.0913 -0.1460 -0.0817 -0.1244 -0.0873 -0.0208 -1.5588 -0.0816 -0.0333 -0.0961 -0.0830 -0.0896 -0.0892 -0.0887 -0.0495 -0.0814 -1.1701 -0.2047 -0.1104 -0.0719 -0.0938 -0.0841 -1.2598 -0.0828 -0.0766 -0.0936 -0.1305 -0.0950 -0.6275 -0.0736 -0.6207 -0.0737 -0.0873 -0.1171 -0.0421 -0.0450 -0.0307 -0.0922 -1.1589 -0.1019 -0.1025 -0.0720 -0.1022 -0.0976 -1.3079 -0.0982 -0.0555 -0.0520 -0.1033 -0.3595 -0.0930 -0.1190 -0.1404 -0.3479 -0.0823 -0.5704 -0.0772 -0.1008 -0.1165 -0.0554 -0.0315 -0.0724 -0.0433 -0.0804 -0.1288 -0.0605 -0.0699 -0.0891 -0.0841 -0.0966 -0.0891 -0.0754 -0.1153 -0.1773 -0.1096 -0.0338 -0.0384 -0.2174 -0.1126 -0.0984 -0.0783 -0.1862 -0.0984 -0.0930 -0.0951 -0.0848 -0.2752 -0.1074 -0.0885 -0.0395 -0.2872 -0.0795 -0.0704
S-38	public static boolean cycpattern_check ( String a, String b ) { int kl = b.length ( ) ; String pr = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < kl; j += 1 ) { if ( a.substring ( i, i + kl ) .equals ( pr.substring ( j, j + kl ) ) ) return true; } } return false; }
T-38	public static boolean cycpattern_check ( String a, String b ) { int kl = b.length ( ) ; String pr = b + b; for ( int i = 0; i < a.length ( ) - kl + 1; i += 1 ) { for ( int j = 0; j < kl + 1; j += 1 ) { if ( a.substring ( i, i + kl ) .equals ( pr.substring ( j, j + kl ) ) ) return true; } } return false; }
H-38	-0.2391202449798584	public static boolean cycpattern_check ( String a, String b ) { int kl = b.length ( ) ; String pr = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < kl ; j += 1 ) { if ( a. substring ( i, i ) . equals ( pr. substring ( j, j ) ) ) return true; } } return false ; }
D-38	-0.2391202449798584	public static boolean cycpattern_check ( String a, String b ) { int kl = b.length ( ) ; String pr = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < kl ; j += 1 ) { if ( a. substring ( i, i ) . equals ( pr. substring ( j, j ) ) ) return true; } } return false ; }
P-38	-0.0932 -0.0507 -0.0999 -0.0341 -0.0590 -0.0055 -0.0868 -0.0406 -0.1132 -1.0253 -0.0990 -1.2487 -0.7190 -0.0961 -0.0843 -0.0923 -0.1373 -0.1042 -0.0904 -0.1246 -0.2114 -0.0877 -0.4241 -0.0866 -0.0812 -1.6767 -0.0296 -0.0801 -0.1281 -0.7559 -0.1716 -0.1138 -0.0749 -0.0749 -0.0838 -0.9248 -0.0915 -0.0759 -0.2228 -0.1398 -0.0910 -0.4466 -0.0817 -0.0934 -0.0767 -0.0897 -0.2006 -0.0797 -0.0772 -0.1041 -0.1082 -0.0667 -0.0758 -0.0960 -0.7000 -0.0995 -0.0689 -0.1473 -0.5537 -0.0690 -0.1058 -0.1527 -0.0757 -0.1036 -0.1292 -0.1132 -0.2088 -0.1131 -0.8091 -0.1271 -0.1317 -1.3394 -0.1903 -1.1379 -0.0939 -0.3574 -0.1047 -0.0478 -0.1279 -0.5776 -0.1059 -0.1060 -0.7363 -0.1173 -0.1583 -0.0854 -0.0905 -0.0898 -0.0449 -1.0232 -0.0865 -0.0797 -0.0773 -0.0314 -0.9016 -0.0741 -0.0745
S-0	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean isDdivision = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { isDdivision = false; } } if ( isDdivision ) primes.add ( i ) ; } return primes; }
T-0	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean isDdivision = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { isDdivision = false; break; } } if ( isDdivision ) primes.add ( i ) ; } return primes; }
H-0	-0.20247194170951843	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean isDdivision = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { isDdivision = false ; } } if ( isDdivision ) primes.add ( i ) ; } return primes ; }
D-0	-0.20247194170951843	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean isDdivision = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { isDdivision = false ; } } if ( isDdivision ) primes.add ( i ) ; } return primes ; }
P-0	-0.1003 -0.0547 -0.4374 -0.0889 -0.9165 -0.0589 -0.0642 -0.0959 -0.0596 -0.0899 -0.0479 -0.1067 -0.0929 -0.0842 -0.0850 -0.0802 -0.4555 -0.0913 -0.8539 -0.0611 -0.0380 -0.0823 -0.0718 -1.9763 -0.0860 -0.9851 -0.0662 -0.2045 -0.1017 -0.0836 -0.1987 -0.1111 -0.0663 -0.0806 -0.0852 -1.0179 -0.1039 -0.1229 -0.1017 -0.5961 -0.0748 -0.0803 -0.1837 -0.0818 -0.0798 -0.1208 -0.0346 -0.0963 -0.0811 -0.0801 -0.8088 -0.0773 -0.1047 -0.0728 -0.0886 -0.0901 -0.6530 -0.1153 -0.0837 -0.1294 -1.4011 -0.0719 -0.0694 -0.1552 -0.0829 -0.0927 -0.1246 -0.1158 -0.3451 -0.2162 -0.0841 -0.2335 -0.1284 -0.0898 -0.0901 -0.0632 -0.1018 -0.0799 -0.2266 -0.4111 -0.1381 -0.1269 -0.2125 -0.1237 -0.0719 -0.0961 -0.1058 -0.2076 -0.2786 -0.3259 -0.1131 -0.1337 -0.2885 -0.0773 -0.1219 -0.0733 -0.0356 -0.1343 -0.0818 -0.0754
S-7	public static String words_in_sentence ( String sentence ) { String answer = ""; for ( String word : sentence.split ( " " ) ) { int FLAG = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) FLAG = 1; } if ( FLAG == 0 || word.length ( ) == 2 ) answer += word + " "; } return answer.trim ( ) ; }
T-7	public static String words_in_sentence ( String sentence ) { String answer = ""; for ( String word : sentence.split ( " " ) ) { int FLAG = 0; if ( word.length ( ) == 1 ) FLAG = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) FLAG = 1; } if ( FLAG == 0 || word.length ( ) == 2 ) answer += word + " "; } return answer.trim ( ) ; }
H-7	-0.246788889169693	public static String words_in_sentence ( String sentence ) { String answer = ""; for ( String word : sentence.split ( " " ) ) { int FLAG = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length ( ) % i == 0 ) FLAG = 1; } if ( FLAG == 0 || word.length ( ) == 2 ) answer += word + " "; } return answer.trim ( ) ; }
D-7	-0.246788889169693	public static String words_in_sentence ( String sentence ) { String answer = ""; for ( String word : sentence.split ( " " ) ) { int FLAG = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length ( ) % i == 0 ) FLAG = 1; } if ( FLAG == 0 || word.length ( ) == 2 ) answer += word + " "; } return answer.trim ( ) ; }
P-7	-0.1051 -0.0602 -1.7059 -0.0149 -0.0935 -0.0695 -0.0882 -0.0623 -0.1138 -1.1688 -0.0461 -0.0900 -0.0892 -2.0988 -0.0432 -0.0836 -1.7446 -0.1629 -0.1115 -1.8313 -0.0565 -0.0683 -0.0274 -0.1197 -0.3443 -0.1157 -0.0826 -0.0740 -0.0877 -0.0933 -0.0879 -0.1601 -0.0656 -0.0787 -0.6297 -0.1153 -0.1133 -0.0699 -0.0757 -0.0853 -0.8889 -0.1072 -0.1609 -0.1184 -0.1077 -0.0736 -3.0310 -0.0819 -0.0782 -0.0984 -0.1852 -0.0776 -0.0924 -0.1297 -0.1106 -0.1106 -0.1425 -0.0984 -0.4243 -0.0848 -0.2524 -0.0803 -0.1476 -0.0841 -0.0824 -0.0929 -0.1022 -0.9166 -0.0940 -0.1235 -0.1115 -0.0833 -0.0598 -0.1013 -0.2435 -0.0840 -0.1416 -0.1192 -0.4998 -0.0781 -0.1011 -0.2365 -0.0836 -0.0987 -0.0801 -0.0559 -0.0855 -0.1003 -0.0152 -0.0798 -0.1115 -0.0438 -0.1177 -0.5795 -0.2733 -0.0962 -0.0774 -0.0818 -0.0790
S-65	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] feat_lower = s.split ( " " ) ; int [ ] countentialchar = new int [ 26 ] ; for ( int i = 0; i < feat_lower.length; i++ ) { char l = feat_lower [ i ] .charAt ( 0 ) ; countentialchar [ l - 'a' ] ++; } int most_current = 0; for ( int i = 0; i < 26; i++ ) { if ( countentialchar [ i ] < most_current ) { most_current = countentialchar [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_current ) ; } else if ( countentialchar [ i ] == most_current ) { res.put ( ( char ) ( 'a' + i ) , most_current ) ; } } if ( most_current == 0 ) res.clear ( ) ; return res; }
T-65	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] feat_lower = s.split ( " " ) ; int [ ] countentialchar = new int [ 26 ] ; for ( int i = 0; i < feat_lower.length; i++ ) { char l = feat_lower [ i ] .charAt ( 0 ) ; countentialchar [ l - 'a' ] ++; } int most_current = 0; for ( int i = 0; i < 26; i++ ) { if ( countentialchar [ i ] > most_current ) { most_current = countentialchar [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_current ) ; } else if ( countentialchar [ i ] == most_current ) { res.put ( ( char ) ( 'a' + i ) , most_current ) ; } } if ( most_current == 0 ) res.clear ( ) ; return res; }
H-65	-0.1641676276922226	public staticHashMap < Character, Integer > histogram ( String s ) {HashMap < Character, Integer > res = newHashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] feat_lower = s.split ( " " ) ; int [ ] countentialchar = new int [ 26 ] ; for ( int i = 0; i < feat_lower.length ; i++ ) { char l = feat_lower [ i ] .charAt ( 0 ) ; countentialchar [ l - 'a' ] ++; } int most_current = 0; for ( int i = 0; i < 26 ; i++ ) { if ( countentialchar [ i ] < most_current ) { most_current = countentialchar [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_current ) ; } else if ( countentialchar [ i ] == most_current ) { res.put ( ( char ) ( 'a' + i ) , most_current ) ; } } if ( most_current == 0 ) res.clear ( ) ; return res ; }
D-65	-0.1641676276922226	public staticHashMap < Character, Integer > histogram ( String s ) {HashMap < Character, Integer > res = newHashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] feat_lower = s.split ( " " ) ; int [ ] countentialchar = new int [ 26 ] ; for ( int i = 0; i < feat_lower.length ; i++ ) { char l = feat_lower [ i ] .charAt ( 0 ) ; countentialchar [ l - 'a' ] ++; } int most_current = 0; for ( int i = 0; i < 26 ; i++ ) { if ( countentialchar [ i ] < most_current ) { most_current = countentialchar [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_current ) ; } else if ( countentialchar [ i ] == most_current ) { res.put ( ( char ) ( 'a' + i ) , most_current ) ; } } if ( most_current == 0 ) res.clear ( ) ; return res ; }
P-65	-0.0892 -0.0523 -2.9123 -0.0773 -0.2547 -0.3331 -0.9567 -0.0710 -0.0390 -0.1054 -1.1288 -0.1191 -0.0840 -0.0888 -0.6263 -0.0986 -0.2238 -0.2846 -0.8527 -0.0691 -0.1413 -0.0887 -0.0577 -0.1764 -0.0827 -0.3871 -0.3142 -0.6648 -0.0748 -0.2250 -0.1352 -0.0867 -0.2168 -0.1178 -0.1092 -0.1782 -1.1049 -0.4163 -0.0769 -0.0885 -0.0997 -0.1367 -0.1176 -1.4245 -0.1443 -0.0644 -0.0619 -0.0752 -0.0588 -0.0821 -0.0590 -0.1155 -0.3084 -0.1067 -0.0760 -0.0758 -0.0849 -0.0958 -0.1011 -0.2099 -0.0477 -0.6316 -0.0747 -0.0933 -0.0880 -0.0482 -0.0703 -0.0811 -0.0379 -0.1047 -0.0821 -0.3731 -0.1083 -0.0640 -0.0979 -0.0745 -0.5343 -0.0847 -0.0737 -0.2020 -0.0870 -0.0707 -0.1148 -0.0658 -0.4187 -0.0732 -0.3842 -0.0726 -0.0886 -0.1831 -0.0745 -0.0868 -0.0809 -0.0911 -0.0749 -0.0836 -0.0733 -0.0891 -0.1053 -1.2090 -0.1140 -0.1169 -0.0881 -0.0775 -0.1894 -0.0772 -0.1098 -0.0866 -0.0524 -0.1671 -0.0349 -0.0421 -0.0480 -0.0738 -0.0325 -0.8120 -0.0869 -0.0659 -0.0376 -0.1061 -0.0508 -0.1106 -0.6948 -0.1105 -0.1036 -0.0562 -0.0896 -0.0796 -0.5345 -0.0835 -0.0807 -0.0608 -0.9292 -0.0681 -0.2854 -0.0709 -0.0913 -0.1012 -0.1061 -0.1863 -0.0769 -0.1252 -0.0931 -0.0889 -0.0626 -0.0956 -0.0301 -0.0868 -0.0559 -0.0901 -0.1217 -0.0561 -0.1021 -0.0590 -0.1020 -0.1521 -0.0724 -0.1092 -0.0923 -0.0873 -0.0808 -0.0855 -0.1545 -0.1037 -0.1990 -0.2004 -0.0753 -0.1001 -0.1403 -0.1012 -0.2836 -0.1122 -0.1582 -0.1529 -0.0757 -0.1045 -0.0679 -0.0513 -0.0577 -0.1042 -0.1049 -0.0912 -0.1112 -0.0427 -0.1059 -0.0738 -0.0997 -0.0952 -0.0809 -0.0737 -0.0739 -0.1038 -0.2319 -0.0559 -0.1184 -0.0759 -0.1013 -0.0686 -0.0791 -0.0454 -0.1019 -0.0680 -0.0851 -0.1131 -0.1352 -0.1001 -0.2275 -0.1050 -0.1274 -0.1256 -0.0783 -0.0998 -0.0802 -0.0509 -0.0630 -0.0707 -0.0964 -0.0875 -0.1241 -0.0551 -0.0983 -0.0692 -0.0979 -0.0934 -0.0928 -0.1006 -0.2392 -0.1083 -0.0247 -0.0997 -0.0570 -0.0842 -0.1193 -0.0856 -0.1998 -0.1140 -0.2031 -0.1924 -0.0875 -0.0825 -0.0686 -0.1183 -0.1088 -0.0768 -0.0821
S-5	public static Object compare_one ( Object a, Object b ) { double emp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_ammString = a.toString ( ) ; temp_ammString = temp_ammString.replace ( ',', '.' ) ; emp_a = Double.parseDouble ( temp_ammString ) ; } if ( b instanceof String ) { String temp_b__string = b.toString ( ) ; temp_b__string = temp_b__string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b__string ) ; } if ( a instanceof Double ) emp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Integer ) emp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( emp_a == temp_b ) return null; if ( emp_a > temp_b ) return a; else return b; }
T-5	public static Object compare_one ( Object a, Object b ) { double emp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_ammString = a.toString ( ) ; temp_ammString = temp_ammString.replace ( ',', '.' ) ; emp_a = Double.parseDouble ( temp_ammString ) ; } if ( b instanceof String ) { String temp_b__string = b.toString ( ) ; temp_b__string = temp_b__string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b__string ) ; } if ( a instanceof Double ) emp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) emp_a = ( ( Integer ) a ) .doubleValue ( ) ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue ( ) ; if ( emp_a == temp_b ) return null; if ( emp_a > temp_b ) return a; else return b; }
H-5	-0.1710648238658905	public static Object compare_one ( Object a, Object b ) { double emp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_ammString = a. toString () ; temp_ammString = temp_ammString.replace ( ',', '.' ) ; emp_a = Double.parseDouble ( temp_ammString ) ; } if ( b instanceof String ) { String temp_b__string = b. toString () ; temp_b__string = temp_b__string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b__string ) ; } if ( a instanceof Double ) emp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) emp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( emp_a == temp_b ) return null ; if ( emp_a > temp_b ) return a ; else return b ; }
D-5	-0.1710648238658905	public static Object compare_one ( Object a, Object b ) { double emp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_ammString = a. toString () ; temp_ammString = temp_ammString.replace ( ',', '.' ) ; emp_a = Double.parseDouble ( temp_ammString ) ; } if ( b instanceof String ) { String temp_b__string = b. toString () ; temp_b__string = temp_b__string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b__string ) ; } if ( a instanceof Double ) emp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) emp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( emp_a == temp_b ) return null ; if ( emp_a > temp_b ) return a ; else return b ; }
P-5	-0.0860 -0.0416 -0.6652 -0.0210 -0.0879 -0.0641 -0.1076 -0.5849 -0.0744 -0.6329 -0.3817 -0.0672 -0.0817 -0.0887 -0.0970 -0.0893 -0.0798 -0.0595 -0.0872 -0.5203 -0.1078 -0.0971 -0.0636 -0.0865 -0.4977 -0.1184 -0.1036 -0.1237 -0.0483 -0.4830 -0.0898 -0.0825 -0.9670 -0.0924 -0.0901 -0.0501 -0.0498 -0.0642 -0.0813 -0.1218 -0.1238 -2.4464 -0.4535 -0.1074 -0.1434 -0.0931 -0.0495 -0.0539 -0.0701 -0.0787 -0.1033 -0.0828 -0.0374 -0.0467 -0.0601 -0.1587 -0.9287 -0.1073 -0.6025 -0.0308 -0.0331 -0.0832 -0.0946 -0.2774 -0.0727 -0.0624 -0.1051 -0.1878 -0.0919 -0.8289 -0.0918 -0.0894 -0.0764 -0.0360 -0.0451 -0.0624 -0.0951 -0.0907 -0.0854 -0.1250 -0.1077 -0.0692 -0.0446 -0.2916 -0.0833 -0.0904 -0.4501 -0.0729 -0.0809 -0.0571 -0.0186 -0.0380 -0.0827 -0.0507 -0.2328 -0.6541 -0.0860 -0.0956 -0.0927 -0.0974 -0.0669 -0.0334 -0.0478 -0.0883 -0.0860 -0.0858 -0.0629 -0.0230 -0.0382 -0.1354 -0.9265 -0.1016 -0.5508 -0.0379 -0.0284 -0.0772 -0.0923 -0.0763 -0.0877 -0.0673 -0.0924 -0.1680 -0.0870 -0.7872 -0.0975 -0.0799 -0.0786 -0.0656 -0.0208 -0.0383 -0.0881 -0.0802 -0.0699 -0.0831 -0.1079 -0.0943 -0.0432 -0.2106 -0.0851 -0.1160 -0.0822 -0.0481 -0.0951 -0.0969 -0.1109 -1.3330 -0.0740 -0.2580 -0.0940 -0.1246 -0.0861 -0.0584 -0.2116 -0.0829 -0.0802 -0.1196 -0.1122 -0.0736 -0.0547 -0.2215 -0.0881 -0.1488 -0.0817 -0.0777 -0.0845 -0.1190 -0.1147 -1.0690 -0.0753 -0.1438 -0.0861 -0.0906 -0.0786 -0.0613 -0.1371 -0.0752 -0.0791 -0.1406 -0.1107 -0.0721 -0.0483 -1.3250 -0.0983 -0.1202 -0.0920 -0.0670 -0.1193 -0.0959 -0.6840 -0.0800 -0.1255 -0.5871 -0.1247 -0.1108 -0.0610 -0.0737 -0.3876 -0.0891 -0.2255 -0.0904 -0.0802 -0.0949 -0.1207 -0.2529 -0.0781 -0.0729 -0.3435 -0.1216 -0.1218 -0.1060 -0.0902 -0.0697 -0.2085 -0.1005 -0.0946 -0.0874 -0.0817 -0.0814 -0.1254 -0.7703 -0.2903 -0.1234 -0.1107 -0.0888 -0.0658 -0.1468 -0.0876 -0.0876 -0.0740 -0.0907 -0.0687 -0.0956 -0.6407 -0.1067 -0.0797 -0.0722 -0.6864 -0.0796 -0.0764
S-64	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int en = grid.length; int add = en * en + 1; for ( int i = 0; i < en; i++ ) { for ( int j = 0; j < en; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) add = Math.max ( add, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( i != en - 1 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( j != en + 1 ) add = Math.max ( add, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ds = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ds [ i ] = 1; else ds [ i ] = add; } return ds; }
T-64	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int en = grid.length; int add = en * en + 1; for ( int i = 0; i < en; i++ ) { for ( int j = 0; j < en; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) add = Math.min ( add, grid [ i ] [ j - 1 ] ) ; if ( i != en - 1 ) add = Math.min ( add, grid [ i + 1 ] [ j ] ) ; if ( j != en - 1 ) add = Math.min ( add, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ds = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ds [ i ] = 1; else ds [ i ] = add; } return ds; }
H-64	-0.19227629899978638	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int en = grid.length ; int add = en * en + 1; for ( int i = 0; i < en ; i++ ) { for ( int j = 0; j < en ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) add = Math.max ( add, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( i != en - 1 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( j != en + 1 ) add = Math.max ( add, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ds = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ds [ i ] = 1 ; else ds [ i ] = add ; } return ds ; }
D-64	-0.19227629899978638	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int en = grid.length ; int add = en * en + 1; for ( int i = 0; i < en ; i++ ) { for ( int j = 0; j < en ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) add = Math.max ( add, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( i != en - 1 ) add = Math.min ( add, grid [ i - 1 ] [ j ] ) ; if ( j != en + 1 ) add = Math.max ( add, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ds = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ds [ i ] = 1 ; else ds [ i ] = add ; } return ds ; }
P-64	-0.0991 -0.0365 -0.1040 -0.1807 -0.0683 -0.0504 -0.0966 -0.0317 -0.1100 -0.0924 -0.1190 -0.0764 -0.1016 -0.1048 -0.0243 -1.3445 -0.0810 -0.1245 -0.0774 -0.0976 -0.1046 -0.0967 -0.0857 -0.0340 -0.0937 -0.0792 -0.7807 -0.1292 -0.0894 -0.0880 -0.1001 -0.0390 -0.1039 -0.0997 -0.7328 -0.1297 -0.1069 -0.0686 -0.0809 -0.0749 -0.7253 -0.0913 -0.0663 -0.0792 -0.9328 -0.0864 -0.5019 -0.0766 -0.0837 -0.1581 -0.1064 -0.0668 -0.1021 -0.0913 -0.4833 -0.1099 -0.0530 -0.0523 -1.3891 -0.0714 -0.2915 -0.0796 -0.0983 -0.1392 -0.1109 -0.0757 -0.0824 -0.0832 -0.0611 -0.0849 -0.0815 -0.0606 -0.1722 -0.1406 -0.0842 -0.0698 -0.1433 -0.1182 -0.1162 -0.1432 -0.1339 -0.0794 -0.1298 -0.1345 -2.1859 -0.0956 -0.2989 -0.1068 -0.1074 -0.4071 -0.0479 -0.1034 -0.0873 -0.1435 -0.0863 -0.0935 -0.9518 -0.1069 -0.1125 -0.1040 -0.0925 -0.1300 -0.1158 -0.1332 -0.1222 -0.1104 -0.0781 -0.0912 -0.0881 -1.8389 -0.0920 -0.0626 -0.1078 -0.0989 -0.5050 -0.0434 -0.1000 -0.0865 -0.1872 -0.1703 -0.0890 -0.0878 -0.0886 -0.1058 -0.0937 -0.0919 -0.1399 -0.1043 -0.1939 -0.1439 -0.2967 -0.5463 -0.1344 -0.0846 -0.0851 -0.0906 -1.7902 -0.0897 -0.0691 -0.1032 -0.1076 -0.4081 -0.0378 -0.0986 -0.0867 -0.5728 -0.1531 -0.0893 -0.0770 -0.0926 -0.0993 -0.0891 -0.0951 -0.1348 -0.1106 -0.1001 -0.1246 -0.0941 -0.1829 -0.0804 -0.0800 -0.0892 -0.0884 -1.7575 -0.0907 -0.1415 -0.1067 -0.0874 -0.5553 -0.0391 -0.0938 -0.0866 -0.0947 -0.0748 -0.0818 -0.1232 -0.0962 -0.1296 -0.0931 -0.0951 -0.0812 -0.0797 -0.0729 -0.1278 -0.1361 -0.0402 -0.0385 -0.0947 -0.0564 -0.0672 -0.0645 -0.1258 -0.0913 -0.0945 -0.1009 -0.1082 -0.0639 -0.0723 -0.0692 -0.4788 -0.0792 -0.0542 -0.2416 -1.2361 -0.0774 -0.3911 -0.0848 -0.0893 -0.1779 -0.1133 -0.5545 -0.0812 -0.0696 -0.0424 -0.0822 -0.0941 -0.0897 -0.0852 -0.0606 -0.0852 -0.0876 -0.0651 -0.1028 -1.9063 -0.1340 -0.0796 -0.0645 -0.0605 -0.0898 -0.0760 -0.1095 -0.4549 -0.7412 -0.0777 -0.0782 -0.0461 -1.0310 -0.0779 -0.0778
S-71	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String answer = ""; for ( String number : number_array ) { answer += number + " "; } return answer.trim ( ) ; }
T-71	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array, new Comparator < String > ( ) { public int compare ( String n1, String n2 ) { return value_map.get ( n1 ) - value_map.get ( n2 ) ; } } ) ; String answer = ""; for ( String number : number_array ) { answer += number + " "; } return answer.trim ( ) ; }
H-71	-0.2515210211277008	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String answer = ""; for ( String number : number_array ) { answer += number + " "; } return answer. trim () ; }
D-71	-0.2515210211277008	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String answer = ""; for ( String number : number_array ) { answer += number + " "; } return answer. trim () ; }
P-71	-0.0926 -0.0546 -1.6011 -0.0372 -0.1023 -0.0653 -0.1170 -1.4562 -0.0507 -0.0969 -0.0827 -0.1167 -0.8634 -0.0753 -0.9139 -0.3076 -0.9668 -0.0772 -0.0496 -0.0962 -0.0505 -0.0830 -0.0584 -0.9627 -0.0933 -0.9645 -0.2555 -0.8165 -0.0745 -0.1649 -0.0901 -0.0784 -0.0822 -0.1006 -0.0784 -0.1119 -0.1798 -0.1085 -0.0755 -0.0603 -1.9762 -0.1025 -0.0892 -0.0932 -0.0694 -0.1030 -0.0816 -0.0971 -0.1928 -0.1103 -0.0843 -0.0347 -1.6203 -0.2220 -0.0895 -0.0923 -0.0665 -0.1029 -0.0815 -0.0960 -0.1896 -0.1074 -0.0861 -0.0422 -1.7185 -0.0738 -0.0845 -0.0933 -0.0686 -0.1045 -0.0851 -0.0976 -0.2060 -0.1126 -0.0844 -0.0997 -1.9947 -0.0470 -0.0884 -0.0971 -0.0613 -0.1039 -0.0898 -0.0983 -0.1961 -0.1130 -0.0873 -0.0293 -1.5217 -0.0707 -0.0905 -0.0948 -0.0571 -0.1000 -0.0848 -0.0978 -0.1823 -0.1141 -0.0876 -0.0770 -1.7578 -0.0603 -0.0858 -0.0899 -0.0646 -0.1004 -0.0858 -0.0995 -0.1904 -0.1118 -0.0852 -0.0117 -1.5199 -0.0537 -0.0835 -0.0948 -0.0593 -0.0986 -0.0888 -0.0992 -0.1619 -0.1097 -0.0887 -0.0422 -0.0077 -1.4850 -0.0728 -0.0868 -0.0895 -0.0525 -0.0969 -0.0786 -0.0987 -0.1401 -0.1064 -0.0919 -0.0046 -1.3553 -0.0750 -0.0808 -0.0888 -0.0622 -0.0946 -0.0796 -0.1017 -0.1802 -0.1054 -0.0769 -0.1173 -0.0188 -1.7640 -0.0234 -0.0849 -0.0873 -1.0747 -0.0628 -0.8060 -0.0573 -0.0340 -0.0943 -0.0364 -0.0873 -0.0567 -0.9457 -0.1012 -0.6990 -0.0701 -0.1151 -3.2920 -0.0680 -0.3623 -0.0917 -0.0098 -0.1487 -0.0156 -0.1074 -0.1166 -0.2427 -0.4363 -0.1071 -0.0808 -0.0794 -0.0949 -0.0947 -0.0876 -0.1174 -1.4014 -0.0844 -0.0323 -0.1095 -0.0339 -0.0803 -0.0363 -0.1012 -0.0971 -0.8569 -0.0480 -0.0881 -1.0759 -0.1287 -0.1074 -1.1422 -0.0405 -0.0675 -0.0267 -0.0862 -0.0287 -0.0881 -0.0884 -0.0629 -0.0403 -0.0450 -0.0487 -0.0945 -0.0100 -0.1219 -0.1354 -0.0476 -0.1161 -1.5935 -0.0939 -0.1067 -0.0806 -0.0922
S-62	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String trans = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { trans = "mixed"; break; } String hex_key = ( String ) key; if ( trans.equals ( "start" ) ) { if ( hex_key.toUpperCase ( ) .equals ( hex_key ) ) trans = "upper"; else if ( hex_key.toLowerCase ( ) .equals ( hex_key ) ) trans = "lower"; else { trans = "mixed"; break; } } else if ( trans.equals ( "upper" ) && !hex_key.toUpperCase ( ) .equals ( hex_key ) ) { trans = "mixed"; break; } } return ( trans.equals ( "upper" ) ) || ( trans.equals ( "lower" ) ) ; } }
T-62	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String trans = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { trans = "mixed"; break; } String hex_key = ( String ) key; if ( trans.equals ( "start" ) ) { if ( hex_key.toUpperCase ( ) .equals ( hex_key ) ) trans = "upper"; else if ( hex_key.toLowerCase ( ) .equals ( hex_key ) ) trans = "lower"; else { trans = "mixed"; break; } } else if ( ( trans.equals ( "upper" ) && !hex_key.toUpperCase ( ) .equals ( hex_key ) ) || ( trans.equals ( "lower" ) && !hex_key.toLowerCase ( ) .equals ( hex_key ) ) ) { trans = "mixed"; break; } } return ( trans.equals ( "upper" ) ) || ( trans.equals ( "lower" ) ) ; } }
H-62	-0.1880607008934021	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String trans = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { trans = "mixed"; break; } String hex_key = ( String ) key ; if ( trans.equals ( "start" ) ) { if ( hex_key.toUpperCase ( ) . equals ( hex_key ) ) trans = "upper"; else if ( hex_key.toLowerCase ( ) . equals ( hex_key ) ) trans = "lower"; else { trans = "mixed"; break; } } else if ( trans.equals ( "upper" ) && !hex_key.toUpperCase ( ) . equals ( hex_key ) ) { trans = "mixed"; break; } } return ( trans.equals ( "upper" ) ) || ( trans.equals ( "lower" ) ) ; } }
D-62	-0.1880607008934021	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String trans = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { trans = "mixed"; break; } String hex_key = ( String ) key ; if ( trans.equals ( "start" ) ) { if ( hex_key.toUpperCase ( ) . equals ( hex_key ) ) trans = "upper"; else if ( hex_key.toLowerCase ( ) . equals ( hex_key ) ) trans = "lower"; else { trans = "mixed"; break; } } else if ( trans.equals ( "upper" ) && !hex_key.toUpperCase ( ) . equals ( hex_key ) ) { trans = "mixed"; break; } } return ( trans.equals ( "upper" ) ) || ( trans.equals ( "lower" ) ) ; } }
P-62	-0.0910 -0.0436 -0.0789 -0.0451 -0.0892 -0.0427 -0.0803 -0.0385 -0.1136 -0.7016 -0.0625 -0.6393 -0.2366 -0.4221 -0.0666 -0.0316 -0.0823 -0.0888 -0.3090 -0.1104 -0.0310 -0.1353 -0.1511 -0.2569 -0.0770 -0.0959 -0.1022 -0.0830 -0.0868 -0.0968 -1.3570 -0.1376 -0.0941 -0.9738 -0.0801 -0.0828 -0.0830 -0.0335 -0.7474 -0.1484 -0.1022 -0.6789 -0.0717 -0.0638 -0.0200 -0.1133 -0.0358 -0.0501 -0.1866 -0.0864 -0.0845 -0.0854 -0.1177 -0.1093 -0.0378 -0.1211 -0.0683 -0.0251 -0.5116 -0.0947 -0.0839 -0.1019 -0.0989 -0.1231 -0.0831 -0.1164 -0.3915 -0.0465 -0.0725 -0.0745 -1.2160 -0.1004 -0.0780 -0.0430 -0.0816 -0.1237 -0.5450 -0.0673 -0.0692 -1.2248 -0.1167 -0.1146 -0.0867 -0.1215 -1.4960 -0.1027 -0.0858 -0.0632 -0.0753 -0.0857 -0.0785 -0.0787 -0.0932 -0.1169 -0.1386 -0.1022 -0.0453 -0.1174 -0.4302 -0.2234 -0.0786 -0.1156 -1.6060 -0.1050 -0.0824 -0.0956 -0.0557 -0.1233 -0.0858 -0.1985 -0.1105 -0.0812 -0.0687 -0.5190 -0.0654 -0.0872 -0.1077 -0.0955 -0.1020 -0.0426 -0.1063 -0.4234 -0.1880 -0.0743 -0.1199 -0.8383 -0.1065 -0.0785 -0.0977 -0.0539 -0.1076 -0.0856 -0.0888 -0.0989 -0.0824 -0.0826 -0.3530 -0.0700 -0.0994 -0.0838 -0.1088 -0.0868 -0.1208 -0.3717 -0.0599 -0.0920 -0.0761 -0.0740 -0.0739 -0.1035 -0.1109 -0.0794 -0.1088 -1.4737 -0.1103 -0.0990 -0.1117 -0.0787 -0.0892 -0.7063 -0.0904 -0.1652 -0.0931 -0.0361 -0.1297 -0.5246 -0.1471 -0.0637 -0.0980 -1.1054 -0.1100 -0.0816 -0.0890 -0.0549 -0.1033 -0.0890 -0.1318 -0.0840 -0.1169 -0.0852 -0.1759 -0.3476 -0.0503 -0.0931 -0.0857 -0.0871 -0.1279 -0.3780 -0.0873 -0.1359 -1.3575 -0.1043 -0.0933 -0.1087 -0.0842 -0.0909 -0.0880 -0.0676 -0.1075 -0.0566 -0.1156 -1.1183 -0.0988 -0.0821 -0.0719 -0.0692 -0.0848 -0.0934 -0.0964 -0.0812 -0.1429 -0.0808
S-54	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] versions = s.split ( " " ) ; for ( int i = 0; i < versions.length; i++ ) { int num_coongors = 0; char [ ] vameals = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < versions [ i ] .length ( ) ; j++ ) { boolean consonance = true; for ( int k = 0; k < vameals.length; k++ ) { if ( vameals [ k ] == versions [ i ] .charAt ( j ) ) { consonance = false; break; } } if ( consonance ) num_coongors++; } if ( num_coongors == n ) result.add ( versions [ i ] ) ; } return result; }
T-54	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] versions = s.split ( " " ) ; for ( int i = 0; i < versions.length; i++ ) { int num_coongors = 0; char [ ] vameals = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < versions [ i ] .length ( ) ; j++ ) { boolean consonance = true; for ( int k = 0; k < vameals.length; k++ ) { if ( vameals [ k ] == versions [ i ] .charAt ( j ) ) { consonance = false; break; } } if ( consonance ) num_coongors++; } if ( num_coongors == n ) result.add ( versions [ i ] ) ; } return result; }
H-54	-0.17051418125629425	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] versions = s.split ( " " ) ; for ( int i = 0; i < versions.length ; i++ ) { int num_coongors = 0; char [ ] vameals = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < versions [ i ] .length ( ) ; j++ ) { boolean consonance = true; for ( int k = 0; k < vameals.length ; k++ ) { if ( vameals [ k ] == versions [ i ] . charAt ( j ) ) { consonance = false; break; } } if ( consonance ) num_coongors++; } if ( num_coongors == n ) result.add ( versions [ i ] ) ; } return result ; }
D-54	-0.17051418125629425	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] versions = s.split ( " " ) ; for ( int i = 0; i < versions.length ; i++ ) { int num_coongors = 0; char [ ] vameals = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < versions [ i ] .length ( ) ; j++ ) { boolean consonance = true; for ( int k = 0; k < vameals.length ; k++ ) { if ( vameals [ k ] == versions [ i ] . charAt ( j ) ) { consonance = false; break; } } if ( consonance ) num_coongors++; } if ( num_coongors == n ) result.add ( versions [ i ] ) ; } return result ; }
P-54	-0.0952 -0.0577 -1.5056 -0.0845 -0.8189 -0.0604 -0.0472 -0.0918 -0.0249 -0.1080 -1.1898 -0.0938 -0.9706 -0.0880 -0.0689 -0.0834 -0.0835 -1.1467 -0.0755 -0.7337 -0.0727 -0.0704 -0.0875 -0.0549 -1.1996 -0.0645 -0.1238 -0.1684 -0.1020 -0.0766 -1.8491 -0.1717 -0.0740 -0.1160 -0.0738 -0.0683 -0.1681 -0.5294 -0.1079 -0.0849 -0.0754 -0.0828 -0.0906 -0.4509 -0.1083 -0.0761 -0.0742 -0.0686 -0.8586 -0.0851 -0.0802 -0.0940 -0.1089 -0.0639 -0.5138 -0.0673 -0.3851 -0.0697 -0.0821 -0.1210 -0.0753 -0.1059 -0.0415 -0.0282 -0.0500 -0.0957 -0.7183 -0.2022 -0.1460 -0.0683 -0.0663 -0.0667 -0.0351 -0.0778 -0.1355 -0.1041 -0.0550 -0.1199 -0.1108 -0.0525 -0.1393 -0.1217 -0.0569 -0.0944 -0.1195 -0.0490 -0.1115 -0.1118 -0.0364 -0.0713 -0.0745 -0.0914 -0.1926 -0.1042 -0.0734 -0.1079 -0.0774 -0.8117 -0.1048 -0.0808 -0.0990 -0.0985 -0.1184 -0.0727 -0.0960 -0.1363 -0.3671 -0.0853 -0.0774 -0.0845 -0.3794 -0.0746 -0.0810 -0.0823 -0.0356 -0.0299 -0.0508 -0.0817 -0.0722 -0.5124 -0.1376 -0.1019 -0.0710 -0.0958 -0.0800 -0.5413 -0.0925 -0.0613 -0.1029 -0.0808 -0.0454 -0.1234 -0.0863 -1.0952 -0.0779 -0.2911 -0.0742 -0.1175 -0.1087 -0.1063 -0.1135 -0.0760 -0.0371 -0.0647 -0.0722 -0.0716 -0.5473 -0.1011 -0.0822 -0.0838 -0.0694 -0.1043 -0.5378 -0.1106 -0.0984 -0.0910 -0.0867 -0.0898 -0.0622 -0.0315 -0.0475 -0.0971 -0.0482 -0.8703 -0.0470 -0.0677 -0.0780 -0.0760 -0.1175 -0.1121 -0.0724 -0.0296 -0.0511 -0.0847 -0.1286 -0.0899 -0.0403 -0.0276 -0.0454 -0.5092 -0.1003 -0.1521 -0.1060 -0.1195 -0.0900 -0.0448 -0.0275 -0.0424 -0.0997 -0.0967 -0.0918 -0.1505 -0.1666 -0.2357 -0.1103 -0.1358 -0.0656 -0.0882 -0.0731 -0.1552 -0.0887 -0.1010 -0.0644 -0.0858 -0.1089 -0.0879 -0.0759
S-15	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int Remain = s.length ( ) % 3; String answer = ""; for ( String group : groups ) { answer += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( Remain > 0 ) { answer += s.substring ( s.length ( ) - Remain ) ; } return answer; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-15	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int Remain = s.length ( ) % 3; String answer = ""; for ( String group : groups ) { answer += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( Remain > 0 ) { answer += s.substring ( s.length ( ) - Remain ) ; } return answer; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-15	-0.19534331560134888	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int Remain = s.length ( ) % 3; String answer = ""; for ( String group : groups ) { answer += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( Remain > 0 ) { answer += s. substring ( s.length ( ) - Remain ) ; } return answer ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-15	-0.19534331560134888	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int Remain = s.length ( ) % 3; String answer = ""; for ( String group : groups ) { answer += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( Remain > 0 ) { answer += s. substring ( s.length ( ) - Remain ) ; } return answer ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-15	-0.0897 -0.0419 -1.1933 -0.0319 -0.0917 -0.0287 -0.0911 -0.0174 -0.1094 -1.0218 -0.0916 -0.0870 -0.0978 -0.3192 -0.0307 -0.0290 -0.1321 -1.9818 -0.0242 -0.0852 -0.0283 -0.0825 -0.0178 -0.1156 -0.9150 -0.1219 -0.0776 -0.0950 -2.2568 -0.0680 -0.6413 -0.0552 -0.0652 -0.0870 -0.0574 -1.3827 -0.0801 -0.7610 -0.0592 -0.2462 -0.1042 -0.0868 -0.3185 -0.1057 -0.0914 -0.0692 -0.0790 -0.7511 -0.0829 -0.1169 -0.1832 -0.1077 -0.0756 -0.3267 -0.0829 -0.0912 -0.0703 -0.1037 -0.0624 -0.0783 -0.0902 -0.0966 -0.2019 -0.2243 -0.1048 -0.0595 -0.0943 -0.6588 -0.1188 -0.1400 -1.0882 -3.2339 -0.0906 -0.0424 -0.1075 -0.0837 -0.0950 -0.0909 -0.1677 -0.0772 -0.1182 -0.1018 -0.1355 -0.0695 -0.0790 -0.0903 -0.0904 -0.1038 -0.0783 -0.1050 -0.0392 -0.0542 -0.0847 -0.0657 -0.1063 -0.0909 -0.1818 -0.0769 -0.0597 -0.2637 -0.8720 -0.0483 -0.0852 -1.0232 -0.0813 -0.1042 -0.9315 -0.0902 -0.0610 -0.0585 -0.0846 -0.0883 -0.1267 -0.0587 -0.1047 -0.1009 -0.6235 -0.1164 -0.2799 -0.1896 -0.2358 -0.0850 -0.1092 -0.5949 -0.1077 -0.1547 -0.1935 -0.0841 -0.0839 -0.0676 -0.1959 -0.1015 -0.0793 -0.0488 -0.1251 -0.0875 -0.0849 -0.0958 -0.0680 -0.0682 -0.0610 -0.0979 -0.5111 -0.1058 -0.1017 -0.0962 -0.1116 -0.1623 -0.0750 -0.5803 -0.0262 -0.0484 -0.1186 -0.0988 -0.0674 -0.0755 -0.0561 -0.3421 -0.0736 -0.1020 -0.0890 -0.0459 -0.0482 -0.0582 -0.0831 -0.0570 -0.0450 -0.0446 -0.1858 -0.1187 -0.0949 -0.0640 -0.0329 -0.0992 -0.0490 -0.0855 -0.0389 -0.0877 -0.0163 -0.1084 -0.0296 -0.0872 -0.0424 -0.0892 -0.0518 -0.0898 -0.0183 -0.1091 -0.0892 -0.0955 -0.1010 -0.1012 -0.0735 -0.0966
S-55	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_int = planet_names.indexOf ( planet1 ) ; int planet2mmlevel = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_int; i < planet2mmlevel; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-55	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_int = planet_names.indexOf ( planet1 ) ; int planet2mmlevel = planet_names.indexOf ( planet2 ) ; if ( planet1_int < planet2mmlevel ) { for ( int i = planet1_int + 1; i < planet2mmlevel; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2mmlevel + 1; i < planet1_int; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-55	-0.254658579826355	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_int = planet_names.indexOf ( planet1 ) ; int planet2mmlevel = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_int ; i < planet2mmlevel ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-55	-0.254658579826355	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_int = planet_names.indexOf ( planet1 ) ; int planet2mmlevel = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_int ; i < planet2mmlevel ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-55	-0.0893 -0.0572 -1.5243 -0.0865 -0.9935 -0.0604 -0.0155 -0.1013 -1.8093 -0.0873 -0.5766 -1.1502 -0.0880 -0.0636 -0.0832 -0.0855 -1.4198 -0.0887 -1.0051 -0.0628 -0.1071 -0.0924 -0.0981 -0.0775 -0.0865 -0.9922 -0.0889 -1.0412 -0.0676 -0.1073 -1.8847 -0.0917 -0.3489 -0.1024 -0.0951 -0.0106 -0.0207 -0.0616 -1.6556 -0.1125 -0.0516 -0.0082 -1.1376 -0.1115 -0.0262 -0.0177 -1.2425 -0.1069 -0.0502 -0.0167 -1.3053 -0.1175 -0.0430 -0.0328 -0.0369 -1.4136 -0.1072 -0.0244 -0.0067 -1.4085 -0.0980 -0.0438 -0.0151 -0.0420 -1.4787 -0.1005 -0.0218 -0.0322 -0.0067 -0.0670 -0.0970 -0.0972 -0.1039 -1.6375 -0.0864 -1.0348 -0.0623 -0.0940 -0.0849 -0.0568 -1.0785 -0.0796 -1.1011 -0.0775 -0.2820 -0.1270 -0.0803 -0.5335 -0.1122 -1.0250 -0.1094 -0.3161 -0.1212 -0.0744 -0.1194 -0.8025 -0.1082 -0.0658 -0.0663 -0.0830 -0.0808 -0.0833 -0.1101 -0.0606 -0.1860 -0.1007 -0.0682 -0.1111 -0.6848 -0.1027 -0.0939 -0.0800 -0.0815 -0.0793 -0.0849 -0.0873 -0.1294 -0.2223 -0.1055 -0.0658 -0.0677 -0.0345 -0.0938 -0.1246 -0.1152 -0.0695 -0.1179 -0.9820 -0.1073 -0.0712 -0.0721 -0.0877 -0.0841 -0.0699 -0.0982 -0.0662 -0.0378 -0.0492 -0.0932 -0.0757 -0.1049 -0.0651 -0.1128 -1.2561 -0.1019 -0.0924 -0.0719 -0.0840 -0.0881 -0.2662 -0.1131 -0.0716 -0.0694 -0.0926 -0.1161 -0.0595 -0.0336 -0.7943 -0.0864 -0.1720 -0.1260 -0.0556 -0.0223 -0.0359 -0.2330 -0.0794 -0.1052 -0.1670 -0.0853 -0.1203 -0.2044 -0.3560 -0.1069 -0.0644 -0.1115 -0.0706 -0.1507 -0.3190 -0.1154 -0.1137 -0.1199 -0.1118 -0.0842 -0.0773 -0.0889 -0.1216 -0.0876 -0.0745
S-11	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_rice = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpo = grades [ i ] ; if ( gpo == 4.0 ) letter_rice [ i ] = "A+"; else if ( gpo > 3.7 ) letter_rice [ i ] = "A"; else if ( gpo > 3.3 ) letter_rice [ i ] = "A-"; else if ( gpo > 3.0 ) letter_rice [ i ] = "B+"; else if ( gpo > 2.7 ) letter_rice [ i ] = "B"; else if ( gpo > 2.3 ) letter_rice [ i ] = "B-"; else if ( gpo > 2.0 ) letter_rice [ i ] = "C+"; else if ( gpo > 1.3 ) letter_rice [ i ] = "C-"; else if ( gpo > 1.0 ) letter_rice [ i ] = "D+"; else if ( gpo > 1.7 ) letter_rice [ i ] = "C"; else if ( gpo > 0.7 ) letter_rice [ i ] = "D"; else if ( gpo > 0.0 ) letter_rice [ i ] = "D-"; else letter_rice [ i ] = "E"; } return letter_rice; }
T-11	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_rice = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpo = grades [ i ] ; if ( gpo == 4.0 ) letter_rice [ i ] = "A+"; else if ( gpo > 3.7 ) letter_rice [ i ] = "A"; else if ( gpo > 3.3 ) letter_rice [ i ] = "A-"; else if ( gpo > 3.0 ) letter_rice [ i ] = "B+"; else if ( gpo > 2.7 ) letter_rice [ i ] = "B"; else if ( gpo > 2.3 ) letter_rice [ i ] = "B-"; else if ( gpo > 2.0 ) letter_rice [ i ] = "C+"; else if ( gpo > 1.7 ) letter_rice [ i ] = "C"; else if ( gpo > 1.3 ) letter_rice [ i ] = "C-"; else if ( gpo > 1.0 ) letter_rice [ i ] = "D+"; else if ( gpo > 0.7 ) letter_rice [ i ] = "D"; else if ( gpo > 0.0 ) letter_rice [ i ] = "D-"; else letter_rice [ i ] = "E"; } return letter_rice; }
H-11	-0.11748732626438141	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_rice = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpo = grades [ i ] ; if ( gpo == 4.0 ) letter_rice [ i ] = "A+"; else if ( gpo > 3.7 ) letter_rice [ i ] = "A"; else if ( gpo > 3.3 ) letter_rice [ i ] = "A-"; else if ( gpo > 3.0 ) letter_rice [ i ] = "B+"; else if ( gpo > 2.7 ) letter_rice [ i ] = "B"; else if ( gpo > 2.3 ) letter_rice [ i ] = "B-"; else if ( gpo > 2.0 ) letter_rice [ i ] = "C+"; else if ( gpo > 1.3 ) letter_rice [ i ] = "C-"; else if ( gpo > 1.0 ) letter_rice [ i ] = "D+"; else if ( gpo > 1.7 ) letter_rice [ i ] = "C"; else if ( gpo > 0.7 ) letter_rice [ i ] = "D"; else if ( gpo > 0.0 ) letter_rice [ i ] = "D-"; else letter_rice [ i ] = "E"; } return letter_rice ; }
D-11	-0.11748732626438141	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_rice = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpo = grades [ i ] ; if ( gpo == 4.0 ) letter_rice [ i ] = "A+"; else if ( gpo > 3.7 ) letter_rice [ i ] = "A"; else if ( gpo > 3.3 ) letter_rice [ i ] = "A-"; else if ( gpo > 3.0 ) letter_rice [ i ] = "B+"; else if ( gpo > 2.7 ) letter_rice [ i ] = "B"; else if ( gpo > 2.3 ) letter_rice [ i ] = "B-"; else if ( gpo > 2.0 ) letter_rice [ i ] = "C+"; else if ( gpo > 1.3 ) letter_rice [ i ] = "C-"; else if ( gpo > 1.0 ) letter_rice [ i ] = "D+"; else if ( gpo > 1.7 ) letter_rice [ i ] = "C"; else if ( gpo > 0.7 ) letter_rice [ i ] = "D"; else if ( gpo > 0.0 ) letter_rice [ i ] = "D-"; else letter_rice [ i ] = "E"; } return letter_rice ; }
P-11	-0.1072 -0.0456 -2.2159 -0.1575 -0.0829 -0.0194 -0.0849 -0.1481 -0.0887 -0.0145 -0.1095 -0.1216 -0.1289 -0.0851 -0.0421 -0.0902 -0.0776 -2.3099 -0.1336 -0.0549 -0.0550 -0.0858 -0.0467 -0.0444 -0.0792 -0.0553 -1.0822 -0.0684 -0.0394 -0.1138 -0.0529 -0.0812 -0.0930 -0.1160 -0.1063 -0.0880 -0.0676 -0.0840 -0.8016 -0.0907 -0.0888 -0.0729 -0.1105 -0.0496 -0.2344 -0.0733 -0.0729 -0.1674 -0.0789 -0.0885 -0.1654 -0.0610 -0.0270 -0.0973 -0.0388 -0.0893 -0.0857 -0.0820 -0.0896 -0.1843 -0.1180 -0.0854 -0.0321 -0.4521 -0.0242 -0.0890 -0.0876 -0.1000 -0.0644 -0.0523 -0.1016 -0.0977 -0.0796 -0.0975 -0.0952 -0.0452 -0.1286 -0.5839 -0.1017 -0.1020 -0.1162 -0.0794 -0.0327 -0.2428 -0.0352 -0.0879 -0.0521 -0.0950 -0.0651 -0.0527 -0.0895 -0.1105 -0.0866 -0.0993 -0.0980 -0.0429 -0.3199 -0.0670 -0.0888 -0.1129 -0.0754 -0.0335 -0.1347 -0.0402 -0.0805 -0.0451 -0.0930 -0.0602 -0.0524 -0.0832 -0.1052 -0.0864 -0.1013 -0.0919 -0.0535 -0.0435 -0.3705 -0.0725 -0.0909 -0.1140 -0.0766 -0.0326 -0.1294 -0.0150 -0.0931 -0.0467 -0.0935 -0.0605 -0.0517 -0.0884 -0.1012 -0.0826 -0.1115 -0.1005 -0.0573 -0.0794 -0.4389 -0.0815 -0.0976 -0.1120 -0.0650 -0.0318 -0.1166 -0.0334 -0.0905 -0.0456 -0.0946 -0.0642 -0.0509 -0.0877 -0.1036 -0.0835 -0.1089 -0.1055 -0.0562 -0.4009 -0.0584 -0.0857 -0.1138 -0.0684 -0.0328 -0.1180 -0.0278 -0.0875 -0.0491 -0.0951 -0.0650 -0.0470 -0.0848 -0.1020 -0.0833 -0.1051 -0.1064 -0.0814 -0.0396 -0.4238 -0.0617 -0.0863 -0.1166 -0.0649 -0.0290 -0.1248 -0.0222 -0.0970 -0.0491 -0.0970 -0.0676 -0.0515 -0.0864 -0.1053 -0.0819 -0.1099 -0.1135 -0.0598 -0.0968 -0.4726 -0.0739 -0.0944 -0.1158 -0.0656 -0.0322 -0.1311 -0.0123 -0.0913 -0.0475 -0.0928 -0.0669 -0.0469 -0.0882 -0.1011 -0.0891 -0.1069 -0.1001 -0.0529 -0.0371 -0.3830 -0.0744 -0.0799 -0.1177 -0.0726 -0.0297 -0.1100 -0.0096 -0.0894 -0.0433 -0.0944 -0.0652 -0.0511 -0.0852 -0.1022 -0.0894 -0.1187 -0.1089 -0.0585 -0.0807 -0.5506 -0.0788 -0.0967 -0.1137 -0.0700 -0.0324 -0.1324 -0.0220 -0.0880 -0.0424 -0.0958 -0.0616 -0.0510 -0.0921 -0.1002 -0.0907 -0.1150 -0.1028 -0.0485 -0.3634 -0.0717 -0.0781 -0.1132 -0.0717 -0.0372 -0.1193 -0.0221 -0.0897 -0.0378 -0.0911 -0.0644 -0.0519 -0.0930 -0.0978 -0.0898 -0.1249 -0.1045 -0.0514 -0.3854 -0.0725 -0.2332 -0.1164 -0.0791 -0.0352 -0.1274 -0.0228 -0.1038 -0.0478 -0.0934 -0.0643 -0.0481 -0.0840 -0.0970 -0.0788 -0.1257 -0.1029 -0.0601 -0.0491 -0.4449 -0.1051 -0.0373 -0.0935 -0.0623 -0.0444 -0.0720 -0.0948 -0.0831 -0.1326 -0.0981 -0.0481 -0.6691 -0.0758 -0.1101 -0.0461 -0.0954 -0.0544 -0.0383 -0.2988 -0.0902 -0.0936
S-49	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int iter = 1; int en = nums [ i ] ; if ( en < 0 ) { en = -1 * en; iter = -1; } int or = 0; for ( int j = 0; j < ( en + "" ) .toCharArray ( ) .length; j += 1 ) { or += ( ( en + "" ) .toCharArray ( ) [ j ] - '0' ) * iter; } digits.add ( or ) ; if ( ! digits_number.containsKey ( or ) ) digits_number.put ( or, new ArrayList < Integer > ( ) ) ; digits_number.get ( or ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-49	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int iter = 1; int en = nums [ i ] ; if ( en < 0 ) { en = -1 * en; iter = -1; } int or = 0; for ( int j = 0; j < ( en + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) or += ( ( en + "" ) .toCharArray ( ) [ j ] - '0' ) * iter; else or += ( en + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( or ) ) digits.add ( or ) ; if ( ! digits_number.containsKey ( or ) ) digits_number.put ( or, new ArrayList < Integer > ( ) ) ; digits_number.get ( or ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-49	-0.1950525939464569	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int iter = 1; int en = nums [ i ] ; if ( en < 0 ) { en = -1 * en; iter = -1; } int or = 0; for ( int j = 0; j < ( en + "" ) .toCharArray ( ) .length; j += 1 ) { or += ( ( en + "" ) .toCharArray ( ) [ j ] - '0' ) * iter ; } digits.add ( or ) ; if ( ! digits_number.containsKey ( or ) ) digits_number.put ( or , new ArrayList < Integer > ( ) ) ; digits_number.get ( or ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-49	-0.1950525939464569	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int iter = 1; int en = nums [ i ] ; if ( en < 0 ) { en = -1 * en; iter = -1; } int or = 0; for ( int j = 0; j < ( en + "" ) .toCharArray ( ) .length; j += 1 ) { or += ( ( en + "" ) .toCharArray ( ) [ j ] - '0' ) * iter ; } digits.add ( or ) ; if ( ! digits_number.containsKey ( or ) ) digits_number.put ( or , new ArrayList < Integer > ( ) ) ; digits_number.get ( or ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-49	-0.0878 -0.0473 -1.3330 -0.1693 -0.1114 -0.0440 -0.0783 -0.0454 -0.0842 -0.0264 -0.1065 -1.3920 -0.1586 -0.1056 -0.0398 -0.0845 -0.0926 -1.2212 -0.0724 -0.8366 -0.0687 -0.0335 -0.0893 -0.0504 -1.2238 -0.0871 -1.0265 -0.0709 -0.1502 -0.0829 -0.0795 -1.1839 -0.0791 -0.7186 -0.4629 -0.8024 -0.0842 -0.6493 -0.0586 -0.0487 -0.0203 -0.0640 -0.0582 -0.0798 -0.0427 -1.0076 -0.0896 -0.7942 -0.7573 -0.8084 -0.0766 -0.5164 -0.0598 -0.1116 -0.1608 -0.0872 -0.0844 -0.2135 -0.1065 -0.0641 -0.0758 -0.0767 -0.5355 -0.0794 -0.0754 -0.0692 -0.0931 -0.0613 -0.3747 -0.0649 -0.0711 -0.1503 -0.0778 -0.0839 -0.0813 -0.0678 -0.0880 -0.9184 -0.0785 -0.0317 -0.0811 -0.0662 -0.0762 -0.0729 -0.0835 -0.0786 -0.1712 -0.1090 -0.0755 -0.0760 -0.0918 -0.0848 -0.0970 -0.0391 -0.0981 -0.4542 -0.0495 -0.0697 -0.7763 -0.0657 -0.1243 -0.1790 -0.1229 -0.0743 -0.0748 -0.0867 -0.2983 -0.0725 -0.0944 -0.0615 -0.1084 -0.0766 -0.3957 -0.1096 -0.0764 -0.1077 -0.0266 -0.0686 -0.0515 -0.0836 -0.1076 -0.0766 -0.0528 -0.2230 -0.1014 -0.1072 -0.0702 -1.3653 -0.1238 -0.0615 -0.1334 -0.0794 -0.0823 -0.0777 -0.0511 -0.1097 -0.1973 -0.0339 -0.0616 -0.0447 -0.0743 -0.1015 -0.0851 -0.0647 -0.1298 -0.0731 -0.0549 -0.0953 -0.0435 -0.1286 -0.0063 -0.0835 -0.0438 -0.0351 -1.4434 -0.0809 -0.0349 -0.1133 -0.1194 -0.1120 -0.0721 -0.0899 -0.0854 -0.4545 -0.1055 -0.0320 -0.0341 -0.1083 -0.0513 -0.0975 -0.4841 -0.0403 -0.1055 -0.0739 -0.0856 -0.0895 -0.0271 -0.1039 -0.0601 -0.1049 -0.1339 -0.1025 -0.0638 -1.3204 -0.0535 -0.6251 -0.0984 -0.6631 -0.0725 -0.2570 -0.0887 -0.0986 -0.1001 -0.0285 -0.1125 -0.0644 -0.1046 -0.0905 -0.1082 -0.0724 -0.0783 -0.0982 -0.1830 -0.1070 -0.1105 -0.0738 -0.0861 -0.0844 -0.1048 -0.0892 -0.1049 -1.3156 -0.0850 -0.0597 -0.1154 -0.0377 -0.1019 -0.0898 -0.8934 -0.0893 -0.6473 -0.0934 -0.0759 -0.0976 -0.0515 -1.1591 -0.0824 -0.8814 -0.0688 -0.2449 -0.1136 -0.0797 -0.0888 -0.1073 -0.0616 -0.0692 -0.0758 -0.4102 -0.0715 -0.0705 -0.0614 -0.1171 -0.1346 -0.5068 -0.0698 -0.0913 -0.0671 -0.0708 -0.1268 -0.0813 -0.0999 -0.0727 -0.1052 -1.0862 -0.1133 -0.0394 -0.1463 -0.0614 -0.1398 -0.2071 -0.1131 -0.0298 -0.1210 -0.3411 -0.0996 -0.0968 -0.0933 -0.0908 -0.1083 -0.0866 -0.0799 -0.0641 -0.0703 -0.1598 -1.0418 -0.1213 -0.0334 -1.1351 -0.0807 -0.2111 -0.1127 -0.1002 -0.0913 -0.0878 -0.0770 -0.0780
S-2	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] message_init = date.split ( "-" ) ; if ( message_init.length > 3 ) return false; int mask = Integer.parseInt ( message_init [ 0 ] ) ; int min = Integer.parseInt ( message_init [ 1 ] ) ; int Year = Integer.parseInt ( message_init [ 2 ] ) ; if ( mask < 1 || mask > 12 ) return false; int [ ] month_clean3 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_clean3.length; i++ ) { if ( mask != month_clean3 [ i ] && ! ( min < 1 || min > 31 ) ) return false; } int [ ] month_ok5 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_ok5.length; i++ ) { if ( mask == month_ok5 [ i ] && ( min < 1 || min > 30 ) ) return false; } if ( mask == 2 && ( min < 1 || min > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-2	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] message_init = date.split ( "-" ) ; if ( message_init.length > 3 ) return false; int mask = Integer.parseInt ( message_init [ 0 ] ) ; int min = Integer.parseInt ( message_init [ 1 ] ) ; int Year = Integer.parseInt ( message_init [ 2 ] ) ; if ( mask < 1 || mask > 12 ) return false; int [ ] month_clean3 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_clean3.length; i++ ) { if ( mask == month_clean3 [ i ] && ( min < 1 || min > 31 ) ) return false; } int [ ] month_ok5 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_ok5.length; i++ ) { if ( mask == month_ok5 [ i ] && ( min < 1 || min > 30 ) ) return false; } if ( mask == 2 && ( min < 1 || min > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-2	-0.15882405638694763	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; int mask = Integer. parseInt ( message_init [ 0 ] ) ; int min = Integer. parseInt ( message_init [ 1 ] ) ; int Year = Integer. parseInt ( message_init [ 2 ] ) ; if ( mask < 1 || mask > 12 ) return false; int [ ] month_clean3 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_clean3.length ; i++ ) { if ( mask != month_clean3 [ i ] && ! ( min < 1 || min > 31 ) ) return false; } int [ ] month_ok5 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_ok5.length ; i++ ) { if ( mask == month_ok5 [ i ] && ( min < 1 || min > 30 ) ) return false; } if ( mask == 2 && ( min < 1 || min > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-2	-0.15882405638694763	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; int mask = Integer. parseInt ( message_init [ 0 ] ) ; int min = Integer. parseInt ( message_init [ 1 ] ) ; int Year = Integer. parseInt ( message_init [ 2 ] ) ; if ( mask < 1 || mask > 12 ) return false; int [ ] month_clean3 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_clean3.length ; i++ ) { if ( mask != month_clean3 [ i ] && ! ( min < 1 || min > 31 ) ) return false; } int [ ] month_ok5 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_ok5.length ; i++ ) { if ( mask == month_ok5 [ i ] && ( min < 1 || min > 30 ) ) return false; } if ( mask == 2 && ( min < 1 || min > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-2	-0.0825 -0.0536 -0.0764 -0.0382 -0.0944 -0.0429 -0.1176 -1.2398 -0.0533 -0.0817 -0.0923 -0.5374 -0.0914 -0.9242 -0.0788 -0.0383 -0.1148 -0.6304 -0.2181 -0.0935 -0.0834 -1.8852 -0.5653 -0.0798 -0.7401 -0.0924 -1.4523 -0.1079 -1.0822 -0.2062 -0.0590 -0.0829 -0.0840 -0.0720 -0.1052 -0.0899 -0.0716 -0.0575 -0.0726 -0.7193 -0.0921 -0.6687 -0.1049 -0.0595 -0.1003 -0.0918 -0.0819 -0.1232 -0.0637 -0.0918 -0.0891 -0.0609 -0.0496 -0.0784 -0.6435 -0.0877 -0.5950 -0.1020 -0.0593 -0.0996 -0.0923 -0.0710 -0.0711 -0.0692 -0.0861 -0.0872 -0.1697 -0.1064 -0.0993 -0.0727 -0.1104 -0.1187 -0.1049 -0.0671 -0.0232 -0.0795 -0.0801 -0.0912 -0.9731 -0.0953 -0.1329 -0.0519 -0.0691 -0.0987 -0.0374 -0.0458 -0.0786 -0.0849 -0.1285 -0.0344 -0.0418 -0.0404 -0.0597 -0.1231 -0.0338 -0.0604 -0.0918 -0.1683 -0.1032 -0.0657 -0.0851 -0.0689 -0.3235 -0.0820 -0.0728 -0.1167 -0.1087 -0.0530 -0.0996 -0.0739 -0.6689 -0.0722 -0.2718 -0.0738 -0.0989 -0.1107 -0.1111 -0.0963 -0.1256 -0.0541 -0.1103 -0.0591 -0.0632 -0.0806 -0.0714 -0.0647 -0.8096 -0.1316 -0.1021 -0.0821 -0.0649 -0.0856 -0.0934 -0.0814 -0.0808 -0.0105 -0.0767 -0.0915 -0.0659 -0.0696 -0.6404 -0.0921 -0.1084 -0.1106 -0.0492 -0.0825 -0.0947 -0.0395 -0.1099 -0.0861 -0.0779 -0.0851 -0.0333 -0.0998 -0.0406 -0.0702 -0.0966 -0.0952 -0.0988 -0.0678 -0.0786 -0.0789 -0.3529 -0.0850 -0.0603 -0.1072 -0.0993 -0.0479 -0.0582 -0.0730 -0.6919 -0.0651 -0.2567 -0.0760 -0.0890 -0.0944 -0.1152 -0.0833 -0.1332 -0.0633 -0.1018 -0.0653 -0.3150 -0.0895 -0.0698 -0.0687 -0.2806 -0.1475 -0.0975 -0.0811 -0.0886 -0.0694 -0.0874 -0.0959 -0.0243 -0.0840 -0.0783 -0.0626 -0.0796 -0.5041 -0.0804 -0.1271 -0.1049 -0.0685 -0.0773 -0.0784 -0.1840 -0.1171 -0.0646 -0.0660 -0.0712 -0.0684 -0.0612 -0.1044 -0.0393 -0.0788 -0.0910 -0.0615 -0.0630 -0.7172 -0.1101 -0.0703 -0.1140 -0.1408 -0.0641 -0.0789 -0.1047 -0.0845 -0.0751 -0.5322 -0.0813 -0.0782 -0.0605 -0.9780 -0.0815 -0.0922
S-14	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int miningimage = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int MIN_ind = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == miningimage ) MIN_ind = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = MIN_ind; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < MIN_ind; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-14	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int miningimage = sorted_arr.get ( 0 ) ; int MIN_ind = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == miningimage ) MIN_ind = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = MIN_ind; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < MIN_ind; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-14	-0.17815515398979187	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int miningimage = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int MIN_ind = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == miningimage ) MIN_ind = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = MIN_ind; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-14	-0.17815515398979187	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int miningimage = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int MIN_ind = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == miningimage ) MIN_ind = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = MIN_ind; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-14	-0.0898 -0.0401 -0.0929 -0.0361 -0.0840 -0.0604 -0.0895 -0.0074 -0.1102 -1.3054 -0.0616 -1.0368 -0.0540 -0.0752 -0.0840 -0.0872 -0.2215 -0.1060 -0.0754 -0.1562 -0.1289 -0.2530 -0.0699 -0.0829 -0.0872 -0.0813 -0.0837 -0.1180 -0.8146 -1.2308 -0.0700 -0.7677 -0.0569 -0.1834 -0.0786 -0.0371 -0.0779 -0.0558 -1.0741 -0.0831 -0.1002 -0.1113 -0.0953 -0.0804 -0.0878 -1.4647 -0.0893 -0.0415 -0.1068 -0.2326 -0.0796 -0.0615 -0.0875 -0.0913 -0.1282 -0.1617 -0.0280 -0.0444 -0.0958 -0.1786 -0.1034 -0.0650 -0.1213 -0.1831 -0.1100 -0.2486 -0.1034 -0.0728 -0.1051 -0.1178 -0.3012 -0.0730 -0.2910 -0.1169 -0.0887 -0.0955 -0.2073 -0.3146 -0.1014 -0.0277 -0.0754 -0.8851 -0.1383 -0.1017 -0.0818 -0.0951 -0.0784 -0.9200 -0.0950 -0.0755 -0.0885 -0.1034 -0.1110 -0.1937 -0.0640 -0.0904 -0.0889 -0.6356 -0.0723 -0.0991 -0.1183 -0.1087 -0.0817 -0.1087 -0.1916 -0.1143 -0.0863 -0.0900 -0.1777 -0.1077 -0.0310 -0.0434 -0.0852 -0.3545 -0.0961 -0.0342 -0.0958 -0.0846 -1.0406 -0.0886 -1.1063 -0.0851 -0.5409 -0.0568 -0.0499 -0.0762 -0.0672 -0.0909 -0.0389 -0.0862 -0.0415 -0.8383 -0.0781 -0.0895 -0.1938 -0.1073 -0.0800 -0.0903 -0.1069 -0.0787 -0.0924 -0.0756 -2.2695 -0.1193 -0.0397 -1.2787 -0.0849 -0.0804 -0.0700 -0.1047 -0.1056 -0.1871 -0.0674 -0.0859 -0.0963 -0.5254 -0.0746 -0.1011 -0.1372 -0.1012 -0.0855 -0.1026 -0.0464 -0.1322 -0.2076 -0.1088 -0.0713 -0.1055 -0.1834 -0.1108 -0.0949 -0.0963 -0.0986 -0.0939 -0.0805 -0.0999 -0.0994 -0.0795 -0.0876 -0.0790 -0.4801 -0.0994 -0.0697 -0.1785 -0.0986 -0.1101 -0.2616 -0.0650 -0.0914 -0.0870 -0.5507 -0.0767 -0.0910 -0.1931 -0.0908 -0.0995 -0.1012 -0.0416 -0.1007 -0.1644 -0.1043 -0.0729 -0.1089 -0.2089 -0.1148 -0.0889 -0.0924 -0.0920 -0.0935 -0.0802 -0.0940 -0.1010 -0.0808 -0.0772 -0.0787 -0.4161 -0.1002 -0.0602 -0.0754 -0.1014 -0.0914 -0.1723 -0.0688 -0.0918 -0.0814 -0.4710 -0.0728 -0.0976 -0.1023 -0.1067 -0.1054 -0.0972 -0.0918 -0.1000 -0.0396 -0.1278 -0.2189 -0.1186 -0.0938 -0.0926 -0.1194 -0.1699 -0.0995 -0.0668 -0.1401 -0.2651 -0.1060 -0.0830 -0.0931 -0.0916 -0.1214 -0.0940 -0.0831 -1.4229 -0.0976 -0.0730 -0.0615 -0.0664 -0.9219 -0.0873 -0.0818
Generate test with beam=5: BLEU = 87.49 97.4/95.3/93.1/90.9 (BP = 0.929 ratio = 0.932 hyp_len = 9180 ref_len = 9852)

S-230	public static boolean is_prime ( int k ) { if ( 2 > k ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; }
T-230	public static boolean is_prime ( int k ) { if ( 2 > k ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; }
H-230	-0.22302258014678955	public static boolean is_prime ( int k ) { if ( 2 > k ) return false ; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-230	-0.22302258014678955	public static boolean is_prime ( int k ) { if ( 2 > k ) return false ; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-230	-0.1001 -0.0592 -0.0946 -0.0674 -0.0958 -0.0238 -0.1189 -0.0911 -0.1211 -0.0878 -0.0920 -0.2575 -0.1109 -0.2598 -0.1730 -0.1077 -0.0860 -0.0928 -0.0842 -1.5208 -0.3260 -0.1148 -0.0806 -0.0742 -0.0950 -1.5202 -0.0979 -0.1812 -0.1512 -0.7324 -0.0752 -0.0979 -0.2870 -0.0851 -0.1051 -0.1293 -0.1140 -0.3932 -0.2054 -0.1135 -0.3437 -0.2289 -0.0881 -0.1102 -0.1054 -0.8685 -0.1518 -0.1408 -0.0843 -0.6757 -0.0889 -0.0872
S-97	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( 0 == k % i ) return false; } return true; }
T-97	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( 0 == k % i ) return false; } return true; }
H-97	-0.2455275058746338	public static boolean is_prime ( int k ) { if ( k < 2 ) return false ; for ( int i = 2 ; i < k ; i += 1 ) { if ( 0 == k % i ) return false ; } return true ; }
D-97	-0.2455275058746338	public static boolean is_prime ( int k ) { if ( k < 2 ) return false ; for ( int i = 2 ; i < k ; i += 1 ) { if ( 0 == k % i ) return false ; } return true ; }
P-97	-0.1007 -0.0595 -0.0935 -0.0680 -0.0964 -0.0231 -0.1200 -0.0931 -0.1263 -0.0851 -0.0894 -0.2454 -0.1112 -0.1686 -0.1535 -0.0845 -0.0915 -0.0862 -0.0873 -1.4528 -0.3627 -0.1142 -0.0818 -0.0696 -0.0977 -2.1037 -0.2261 -0.0869 -0.3276 -0.1371 -0.7392 -0.0719 -0.0921 -0.3136 -0.0860 -0.0997 -0.1270 -0.1070 -0.5953 -0.1398 -0.4930 -0.5035 -0.1286 -0.0890 -0.0868 -0.0953 -0.9791 -0.1327 -0.1281 -0.0800 -0.7035 -0.0869 -0.0914
S-310	public static int choose_num ( int x, int y ) { if ( y > x ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
T-310	public static int choose_num ( int x, int y ) { if ( y < x ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
H-310	-0.2579937279224396	public static int choose_num ( int x, int y ) { if ( y > x ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
D-310	-0.2579937279224396	public static int choose_num ( int x, int y ) { if ( y > x ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
P-310	-0.0929 -0.0415 -0.0924 -0.0407 -0.0984 -0.0579 -0.1074 -0.0922 -0.2036 -1.5723 -0.0789 -0.1009 -0.0844 -0.0873 -0.1383 -0.1209 -0.4595 -0.4158 -0.1567 -0.0878 -0.0936 -0.8766 -0.1389 -0.1201 -0.3096 -0.3478 -0.1025 -0.0601 -0.0859 -0.0735 -0.1186 -0.0842 -0.0877 -0.2303 -0.7700 -0.2020 -0.1149 -0.2637 -0.1041 -0.2570 -0.0816 -0.0855 -1.3826 -0.1895 -0.2644 -0.1772 -1.7922 -0.1613 -0.1121 -0.0828
S-276	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( 0 == ( y % 2 ) ) return y; if ( x == y ) return -1; return y - 1; }
T-276	public static int choose_num ( int x, int y ) { if ( x > y ) return -1; if ( 0 == ( y % 2 ) ) return y; if ( x == y ) return -1; return y - 1; }
H-276	-0.2616707682609558	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( 0 == ( y % 2 ) ) return y ; if ( x == y ) return -1; return y - 1 ; }
D-276	-0.2616707682609558	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( 0 == ( y % 2 ) ) return y ; if ( x == y ) return -1; return y - 1 ; }
P-276	-0.0933 -0.0421 -0.0922 -0.0390 -0.0985 -0.0570 -0.1075 -0.0902 -0.1732 -1.5433 -0.0786 -0.0964 -0.0855 -0.0870 -0.1377 -0.1171 -0.4353 -0.1806 -0.1068 -0.0836 -0.0938 -1.1299 -0.1474 -0.1144 -0.8219 -0.1084 -0.1062 -0.2808 -0.0724 -0.0683 -0.0831 -0.0885 -0.0792 -0.1956 -0.7206 -0.2058 -0.1163 -0.2884 -0.1129 -0.2275 -0.0826 -0.0800 -1.4393 -0.2122 -0.2924 -0.1847 -1.6242 -0.1562 -0.1220 -0.0837
S-52	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( y == x ) return -1; return y - 1; }
T-52	public static int choose_num ( int x, int y ) { if ( x > y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( y == x ) return -1; return y - 1; }
H-52	-0.2638656795024872	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( y == x ) return -1; return y - 1 ; }
D-52	-0.2638656795024872	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( y == x ) return -1; return y - 1 ; }
P-52	-0.0928 -0.0413 -0.0926 -0.0396 -0.0987 -0.0572 -0.1076 -0.0910 -0.1818 -1.6133 -0.0787 -0.0989 -0.0842 -0.0874 -0.1358 -0.1192 -0.4380 -0.1728 -0.1084 -0.0845 -0.0979 -1.1304 -0.1374 -0.1194 -0.3393 -0.2681 -0.1506 -0.0611 -0.0871 -0.0749 -0.1211 -0.0841 -0.0864 -0.2584 -0.8597 -0.2001 -0.1167 -0.3820 -0.1537 -0.2635 -0.0859 -0.0821 -1.5249 -0.1868 -0.2648 -0.1900 -1.6782 -0.1697 -0.1126 -0.0827
S-102	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = x % base + result; x = x - x / base; } return result; }
T-102	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = result + ( x % base ) ; x = ( int ) x / base; } return result; }
H-102	-0.319190114736557	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = x % base + result ; x = x - x / base ; } return result ; }
D-102	-0.319190114736557	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = x % base + result ; x = x - x / base ; } return result ; }
P-102	-0.0908 -0.0520 -5.1999 -0.0963 -0.0195 -0.1116 -0.0559 -0.0454 -0.1000 -0.0256 -0.1143 -0.4203 -0.1350 -1.6543 -0.1175 -0.0636 -0.0831 -0.0854 -0.5820 -0.0778 -0.0299 -0.1128 -0.0670 -0.1496 -0.1082 -2.6693 -0.1847 -0.1143 -0.1467 -0.1616 -0.1465 -0.0902 -0.0746 -0.1552 -0.1079 -0.1551 -0.0851 -0.0858 -0.1399 -0.0891 -1.0639 -0.1091 -0.1370 -0.1598 -0.1173 -0.1822 -0.1048 -0.0464 -0.6807 -0.1217 -0.1337 -0.0902 -0.4643 -0.0785 -0.0624
S-55	public static String change_base ( int x, int base ) { String result = ""; while ( 0 < x ) { result = result + x % base; x = x - x / base; } return result; }
T-55	public static String change_base ( int x, int base ) { String result = ""; while ( 0 < x ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-55	-0.32121697068214417	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( 0 < x ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-55	-0.32121697068214417	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( 0 < x ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-55	-0.0916 -0.0522 -5.2074 -0.0935 -0.0228 -0.1103 -0.0519 -0.0451 -0.0994 -0.0258 -0.1149 -0.3765 -0.1334 -1.4926 -0.1172 -0.0608 -0.0838 -0.0845 -0.5570 -0.0755 -0.0318 -0.1113 -0.0719 -0.1692 -0.0972 -2.6288 -0.1963 -0.1108 -0.3357 -0.1259 -0.1628 -0.0958 -0.0758 -0.1459 -0.1097 -0.0985 -0.0778 -0.2120 -0.1384 -0.0684 -1.1953 -0.1113 -0.1291 -0.1491 -0.1081 -0.1786 -0.0810 -0.0460 -0.8154 -0.0954 -0.1361 -0.0880 -0.4332 -0.0780 -0.0622
S-125	public static boolean below_zero ( List<Integer> operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( 0 < balance ) { return false; } } return true; }
T-125	public static boolean below_zero ( List<Integer> operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( 0 > balance ) { return true; } } return false; }
H-125	-0.2552562952041626	public static boolean below_zero ( List<Integer> operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( 0 < balance ) { return false ; } } return true ; }
D-125	-0.2552562952041626	public static boolean below_zero ( List<Integer> operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( 0 < balance ) { return false ; } } return true ; }
P-125	-0.0968 -0.0497 -0.0927 -0.0579 -0.1038 -0.0682 -0.1276 -0.6030 -0.3438 -0.0685 -0.2230 -0.0616 -0.0939 -0.0899 -0.1171 -0.0962 -0.0937 -1.3922 -0.1202 -0.1569 -0.1159 -2.1884 -0.0401 -0.0652 -0.0659 -0.0959 -0.0884 -0.4696 -0.0446 -0.0477 -0.9313 -0.1267 -0.1164 -0.3283 -0.2002 -0.1703 -0.0897 -0.0998 -0.1177 -0.1085 -1.2127 -0.0957 -0.1201 -0.0974 -0.1134 -0.8796 -0.0845 -0.0816
S-155	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; n > i; i += 1 ) { result = 2 * result; } return result % p; }
T-155	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; n > i; i += 1 ) { result = ( 2 * result ) % p; } return result; }
H-155	-0.242589071393013	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; n > i ; i += 1 ) { result = 2 * result ; } return result % p ; }
D-155	-0.242589071393013	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; n > i ; i += 1 ) { result = 2 * result ; } return result % p ; }
P-155	-0.0943 -0.0481 -0.1246 -0.0487 -0.0573 -0.1086 -0.1081 -0.0748 -1.4865 -0.1041 -0.0620 -0.0898 -0.0871 -0.1095 -0.0913 -0.1023 -0.8694 -0.5328 -0.1845 -0.1105 -0.0835 -0.0782 -0.0918 -1.8126 -0.1189 -0.3141 -0.1839 -0.8866 -0.1089 -0.1594 -0.2691 -0.0840 -0.0806 -0.1414 -0.1449 -0.1513 -0.0412 -0.0907 -0.6286 -0.0991 -0.3431 -0.1342 -0.0971 -0.1006 -0.5037 -0.0896 -0.0702
S-389	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = result * 2; } return result % p; }
T-389	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = ( result * 2 ) % p; } return result; }
H-389	-0.26065412163734436	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = result * 2; } return result % p ; }
D-389	-0.26065412163734436	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = result * 2; } return result % p ; }
P-389	-0.0938 -0.0496 -0.1257 -0.0487 -0.0579 -0.1090 -0.1084 -0.0767 -1.3747 -0.1075 -0.0647 -0.0907 -0.0870 -0.1184 -0.0883 -0.1006 -0.9726 -0.4396 -0.1726 -0.1093 -0.0863 -0.0825 -0.0925 -1.7580 -0.0889 -0.1302 -0.1665 -0.8402 -0.0791 -0.1390 -0.3386 -0.0860 -0.0818 -0.1341 -0.1663 -0.1222 -0.0555 -1.7274 -0.0783 -0.3977 -0.1210 -0.1131 -0.0966 -0.4499 -0.0920 -0.0705
S-235	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( Math.pow ( 10, n - 2 ) * ( 10 + 9 ) ) ; }
T-235	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( Math.pow ( 10, n - 2 ) * ( 10 + 9 - 1 ) ) ; }
H-235	-0.24895638227462769	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( Math.pow ( 10, n - 2 ) * ( 10 + 9 ) ) ; }
D-235	-0.24895638227462769	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( Math.pow ( 10, n - 2 ) * ( 10 + 9 ) ) ; }
P-235	-0.1027 -0.0470 -0.0990 -0.0227 -0.0940 -0.0445 -0.0870 -0.0805 -0.1092 -0.0967 -0.0697 -0.0871 -0.0882 -0.1809 -0.1156 -0.1096 -0.1714 -0.4061 -0.0905 -0.0996 -2.1505 -0.1400 -0.3391 -0.1012 -0.1022 -0.0762 -0.1088 -2.3105 -0.0943 -0.0472 -0.1110 -1.9642 -0.1942 -0.3269 -0.1722 -0.1045 -0.1280 -0.1455 -0.0658 -0.0773 -0.0376 -0.0825 -0.1050 -0.1069 -0.0828 -0.0756
S-126	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 9 + 10 ) * Math.pow ( 10, n - 2 ) ) ; }
T-126	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 9 + 10 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-126	-0.22855941951274872	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 9 + 10 ) * ( n - 2 ) ) ; }
D-126	-0.22855941951274872	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 9 + 10 ) * ( n - 2 ) ) ; }
P-126	-0.1033 -0.0461 -0.0983 -0.0229 -0.0946 -0.0439 -0.0878 -0.0796 -0.1099 -0.0963 -0.0672 -0.0867 -0.0888 -0.1890 -0.1156 -0.1080 -0.1764 -0.4322 -0.0910 -0.0994 -1.8427 -0.1341 -0.3504 -0.0991 -0.0988 -0.0761 -0.1033 -0.1979 -0.0968 -0.1012 -0.0835 -0.0873 -0.0530 -1.6351 -0.6408 -0.2769 -1.0076 -0.0967 -0.0913 -0.1460 -0.0726 -0.0714
S-13	public static int starts_one_ends ( int n ) { if ( 1 == n ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
T-13	public static int starts_one_ends ( int n ) { if ( 1 == n ) return 1; return ( int ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-13	-0.2341555804014206	public static int starts_one_ends ( int n ) { if ( 1 == n ) return 1; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
D-13	-0.2341555804014206	public static int starts_one_ends ( int n ) { if ( 1 == n ) return 1; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
P-13	-0.1029 -0.0459 -0.0989 -0.0234 -0.0945 -0.0444 -0.0876 -0.0797 -0.1101 -0.0966 -0.0618 -0.0883 -0.0904 -0.1940 -0.1141 -0.6033 -0.1337 -0.0897 -0.0852 -0.0939 -1.9161 -0.1894 -0.1091 -0.1083 -0.0755 -0.1075 -0.2001 -0.1394 -0.1017 -0.0418 -0.0803 -0.0542 -1.4884 -0.6434 -0.3949 -1.0864 -0.0967 -0.0915 -0.1316 -0.1309 -0.0750
S-290	public static int max_element ( List<Integer> l ) { int m = 0; for ( Integer e : l ) { if ( m < e ) { m = e; } } return m; }
T-290	public static int max_element ( List<Integer> l ) { int m = l.get ( 0 ) ; for ( Integer e : l ) { if ( m < e ) { m = e; } } return m; }
H-290	-0.23298710584640503	public static int max_element ( List<Integer> l ) { int m = 0 ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { if ( l . get ( i ) < e ) { m = e ; } } return m ; }
D-290	-0.23298710584640503	public static int max_element ( List<Integer> l ) { int m = 0 ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { if ( l . get ( i ) < e ) { m = e ; } } return m ; }
P-290	-0.0948 -0.0436 -0.1108 -0.0528 -0.0994 -0.0302 -0.1195 -0.4845 -0.3820 -0.0637 -0.2460 -0.0777 -0.0914 -0.0937 -0.1043 -0.2006 -0.0952 -1.5889 -0.0835 -0.2216 -0.1129 -1.8315 -1.0833 -0.0929 -0.5458 -0.1181 -0.0809 -0.0330 -0.0673 -0.0842 -0.3150 -0.0398 -0.0300 -0.1091 -0.1148 -0.0928 -0.0606 -0.0958 -0.0822 -0.4424 -0.1060 -0.5640 -0.0805 -0.0616 -0.0960 -0.1427 -0.0960 -0.3434 -0.2193 -0.1039 -0.0833 -0.1097 -0.1868 -1.1648 -0.3185 -0.1846 -0.1579 -0.0788 -0.1634 -0.2933 -0.0884 -0.0855
S-145	public static boolean is_prime ( int n ) { for ( int i = 2; n > i; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-145	public static boolean is_prime ( int n ) { for ( int i = 2; n > i; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-145	-0.21652506291866302	public static boolean is_prime ( int n ) { for ( int i = 2; n > i ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-145	-0.21652506291866302	public static boolean is_prime ( int n ) { for ( int i = 2; n > i ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-145	-0.0978 -0.0557 -0.0933 -0.0701 -0.0931 -0.0236 -0.1226 -0.0976 -0.0712 -0.0875 -0.0881 -0.3382 -0.1178 -0.0845 -0.0762 -0.1027 -1.7772 -0.1257 -0.5727 -0.2658 -0.5340 -0.1069 -0.1383 -0.2900 -0.0874 -0.0944 -0.1203 -0.1151 -0.2108 -0.2046 -0.1338 -0.2621 -0.1424 -0.0874 -0.1259 -0.1281 -0.8901 -0.1842 -0.1495 -0.1034 -0.6587 -0.0902 -0.0918
S-291	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( 0 == n % i ) return false; } return true; }
T-291	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( 0 == n % i ) return false; } return true; }
H-291	-0.23073047399520874	public static boolean is_prime ( int n ) { for ( int i = 2 ; i < n ; i += 1 ) { if ( 0 == n % i ) return false ; } return true ; }
D-291	-0.23073047399520874	public static boolean is_prime ( int n ) { for ( int i = 2 ; i < n ; i += 1 ) { if ( 0 == n % i ) return false ; } return true ; }
P-291	-0.0989 -0.0558 -0.0937 -0.0692 -0.0947 -0.0225 -0.1233 -0.0982 -0.0699 -0.0890 -0.0878 -0.3031 -0.1186 -0.0859 -0.0778 -0.1045 -2.4788 -0.2408 -0.0966 -0.3060 -0.1871 -0.6033 -0.0812 -0.1127 -0.3111 -0.0852 -0.0915 -0.1141 -0.1082 -0.3992 -0.1320 -0.3340 -0.3533 -0.1436 -0.0872 -0.0947 -0.1140 -0.9134 -0.1186 -0.1192 -0.0711 -0.6776 -0.0880 -0.0969
S-394	public static int greatest_common_divisor ( int a, int b ) { while ( 0 < b ) { a = b; b = a % b; } return a; }
T-394	public static int greatest_common_divisor ( int a, int b ) { while ( 0 < b ) { int tmp = a; a = b; b = tmp % b; } return a; }
H-394	-0.25514936447143555	public static int greatest_common_divisor ( int a, int b ) { while ( 0 < b ) { a = b ; b = a % b ; } return a ; }
D-394	-0.25514936447143555	public static int greatest_common_divisor ( int a, int b ) { while ( 0 < b ) { a = b ; b = a % b ; } return a ; }
P-394	-0.1065 -0.0485 -0.1320 -0.0133 -0.1041 -0.0085 -0.0827 -0.0347 -0.0147 -0.1083 -0.0983 -0.1195 -1.6682 -0.0952 -0.0789 -0.0840 -0.0938 -0.4165 -0.1150 -0.5697 -0.1628 -0.2709 -0.1012 -0.0760 -0.4647 -0.1783 -0.6594 -1.1916 -0.1117 -0.1559 -0.3362 -0.1010 -0.0982 -0.6450 -0.3429 -0.2343 -0.3268 -0.5735 -0.0965 -0.0866
S-292	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( power < x ) { power *= n; } return x == power; }
T-292	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return 1 == x; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-292	-0.2190757542848587	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return x == power ; }
D-292	-0.2190757542848587	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return x == power ; }
P-292	-0.1018 -0.0511 -0.1117 -0.0659 -0.0919 -0.0383 -0.0873 -0.0491 -0.1095 -0.1013 -0.1698 -1.2889 -0.0874 -0.0840 -0.0846 -0.0872 -0.1290 -0.0911 -0.0998 -0.9855 -0.3390 -0.1989 -0.1134 -0.2339 -0.3074 -0.2220 -0.0975 -0.0875 -0.1075 -0.0215 -0.0907 -1.3262 -0.1466 -0.2615 -0.2855 -0.1015 -0.1353 -0.6050 -0.0863 -0.0805
S-10	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( x > power ) { power *= n; } return power == x; }
T-10	public static boolean is_simple_power ( int x, int n ) { if ( 1 == n ) return x == 1; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-10	-0.24385692179203033	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( x > power ) { power *= n ; } return power == x ; }
D-10	-0.24385692179203033	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( x > power ) { power *= n ; } return power == x ; }
P-10	-0.1022 -0.0504 -0.1210 -0.0660 -0.0925 -0.0383 -0.0870 -0.0471 -0.1083 -0.1025 -0.1767 -1.5040 -0.0867 -0.0865 -0.0838 -0.0856 -0.1318 -0.0912 -0.1031 -1.0864 -0.3708 -0.2209 -0.1128 -0.1663 -0.2645 -0.1227 -0.0850 -0.0893 -0.1176 -0.0258 -0.0840 -1.4475 -0.4502 -0.2417 -0.2059 -0.1299 -0.2538 -0.9502 -0.0836 -0.0803
S-365	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return "db" + "db" + result; }
T-365	public static String decimal_to_binary ( int decimal ) { String result = Integer.toBinaryString ( decimal ) ; return "db" + "db" + result; }
H-365	-0.2416975349187851	public static java.lang.String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + "db" + result ; }
D-365	-0.2416975349187851	public static java.lang.String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + "db" + result ; }
P-365	-0.1018 -0.0575 -4.8895 -0.0724 -0.0264 -0.0915 -0.0538 -0.0565 -0.0939 -0.0743 -0.0832 -0.0176 -0.1309 -0.2210 -0.0565 -0.0908 -0.0807 -0.6673 -0.0705 -0.0446 -0.0942 -0.0585 -0.0834 -0.0909 -1.7142 -0.1124 -0.1440 -0.0226 -0.1064 -0.0702 -0.0869 -0.0916 -0.1659 -0.1140 -0.0540 -0.0841 -0.0805 -0.0911 -0.0557 -0.0706 -0.1128 -0.0667 -0.1649 -0.0866 -0.0738
S-12	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return result + "db" + "db"; }
T-12	public static String decimal_to_binary ( int decimal ) { String result = Integer.toBinaryString ( decimal ) ; return result + "db" + "db"; }
H-12	-0.26594334840774536	public static java.lang.String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return result + "db" + "db"; }
D-12	-0.26594334840774536	public static java.lang.String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return result + "db" + "db"; }
P-12	-0.1032 -0.0598 -4.8562 -0.0732 -0.0273 -0.0963 -0.0559 -0.0552 -0.0933 -0.0732 -0.0826 -0.0186 -0.1289 -0.2197 -0.0581 -0.0890 -0.0787 -0.8222 -0.0724 -0.0424 -0.0991 -0.0681 -0.1896 -0.0883 -1.6782 -0.1113 -0.1469 -0.0232 -0.1053 -0.0724 -0.0843 -0.0914 -0.1681 -0.0782 -0.1350 -0.1065 -0.0444 -0.0949 -0.1310 -0.1047 -0.0498 -0.7654 -0.0880 -0.0715
S-306	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 2 * n == 1 ) ^ ( n < 8 ) ) ; }
T-306	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 2 * n == 1 ) ^ ( n < 8 ) ) ; }
H-306	-0.22865359485149384	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 2 * n ) == 1 ) ^ ( n < 8 ) ; }
D-306	-0.22865359485149384	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 2 * n ) == 1 ) ^ ( n < 8 ) ; }
P-306	-0.1125 -0.0499 -0.0882 -0.0698 -0.0816 -0.0966 -0.0955 -0.0885 -0.0830 -0.0522 -0.1077 -0.0570 -0.1043 -0.0983 -0.0747 -0.0828 -0.0840 -0.2077 -0.1905 -0.3302 -0.2188 -0.0544 -0.1258 -1.8883 -0.9457 -0.6074 -0.0896 -0.9981 -0.1146 -0.1727 -0.1541 -0.1736 -0.0839 -0.2851 -0.0870 -0.0775
S-198	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 1 == n * 2 ) ^ ( n < 8 ) ) ; }
T-198	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 1 == n * 2 ) ^ ( n < 8 ) ) ; }
H-198	-0.3222731053829193	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 1 == n ) && ( n < 8 ) ) && ( ( n * 2 ) != ( - 1 ) ) ; }
D-198	-0.3222731053829193	public static boolean is_equal_to_sum_even ( int n ) { return ( ( 1 == n ) && ( n < 8 ) ) && ( ( n * 2 ) != ( - 1 ) ) ; }
P-198	-0.1135 -0.0518 -0.0854 -0.0692 -0.0820 -0.0962 -0.0968 -0.0885 -0.0835 -0.0508 -0.1078 -0.0545 -0.1051 -0.0978 -0.0743 -0.0806 -0.0851 -0.2167 -0.1785 -0.3304 -0.7485 -0.1854 -0.2625 -0.5271 -1.2472 -0.1278 -0.7537 -0.7240 -0.2219 -0.0856 -0.0898 -0.5862 -0.1124 -0.9730 -0.5238 -1.2540 -0.1957 -0.0826 -2.1853 -1.0193 -0.3663 -0.2591 -0.0957 -0.0830 -0.1345 -0.0788 -0.0753
S-95	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 == 1 ) ^ ( 8 > n ) ) ; }
T-95	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 == 1 ) ^ ( 8 > n ) ) ; }
H-95	-0.21052813529968262	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( 8 > n ) ; }
D-95	-0.21052813529968262	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( 8 > n ) ; }
P-95	-0.1128 -0.0511 -0.0894 -0.0692 -0.0820 -0.0977 -0.0956 -0.0871 -0.0835 -0.0518 -0.1077 -0.0573 -0.1052 -0.0966 -0.0770 -0.0832 -0.0853 -0.2461 -0.1926 -0.3500 -0.1746 -0.1219 -0.1033 -1.6049 -0.4751 -0.6291 -0.0874 -0.8167 -0.1170 -0.2024 -0.1661 -0.3426 -0.0865 -0.2663 -0.0853 -0.0786
S-228	public static boolean right_angle_triangle ( int a, int b, int c ) { return b * b + a * a == c * c; }
T-228	public static boolean right_angle_triangle ( int a, int b, int c ) { return b * b + c * c == a * a || a * a + b * b == c * c || c * c + a * a == b * b; }
H-228	-0.2304440438747406	public static boolean right_angle_triangle ( int a, int b, int c ) { return b * b + a * a == c * c ; }
D-228	-0.2304440438747406	public static boolean right_angle_triangle ( int a, int b, int c ) { return b * b + a * a == c * c ; }
P-228	-0.1035 -0.0451 -0.1321 -0.0709 -0.0977 -0.0707 -0.0834 -0.0389 -0.0710 -0.1141 -0.1002 -0.1134 -1.3431 -0.1028 -0.0691 -1.4868 -0.0914 -0.0763 -0.0873 -0.0892 -0.2996 -0.3660 -0.0832 -0.1894 -0.9449 -0.1996 -0.0748 -0.2219 -0.2719 -0.1696 -0.0632 -0.1287 -0.4742 -0.1095 -0.0820
S-60	public static boolean right_angle_triangle ( int a, int b, int c ) { return c * c == a * a + b * b; }
T-60	public static boolean right_angle_triangle ( int a, int b, int c ) { return c * c + a * a == b * b || a * a + b * b == c * c || b * b + c * c == a * a; }
H-60	-0.2402164191007614	public static boolean right_angle_triangle ( int a, int b, int c ) { return c * c == a * a + b * b ; }
D-60	-0.2402164191007614	public static boolean right_angle_triangle ( int a, int b, int c ) { return c * c == a * a + b * b ; }
P-60	-0.1041 -0.0450 -0.1284 -0.0727 -0.0978 -0.0692 -0.0834 -0.0383 -0.0691 -0.1151 -0.0964 -0.1105 -1.6047 -0.1026 -0.0877 -1.6293 -0.0960 -0.0722 -0.0858 -0.0906 -0.3305 -0.4635 -0.1108 -0.4485 -0.2823 -0.2384 -0.0731 -0.3309 -0.3314 -0.1504 -0.0613 -0.0891 -0.5137 -0.1013 -0.0836
S-363	public static int[] eat ( int number, int need, int remaining ) { return new int[] { need + number, remaining - need }; }
T-363	public static int[] eat ( int number, int need, int remaining ) { return new int[] { need + number, remaining - need }; }
H-363	-0.3472065031528473	public static int[] eat ( int number, int need, int remaining ) { return new int[] { need + number, remaining - need }; }
D-363	-0.3472065031528473	public static int[] eat ( int number, int need, int remaining ) { return new int[] { need + number, remaining - need }; }
P-363	-0.1018 -0.0448 -0.1300 -1.8745 -0.0336 -0.1124 -0.1169 -0.1936 -1.3153 -0.1287 -0.0365 -1.2580 -0.1104 -0.0568 -0.0803 -0.0941 -0.2646 -0.0686 -0.0745 -1.8356 -0.0947 -0.1261 -0.1851 -0.0491 -0.9514 -0.0548 -0.1514 -0.0376 -0.9681 -0.0956 -0.1185
S-121	public static int sum_to_n ( int n ) { return ( 1 + n ) * ( n / 2 ) ; }
T-121	public static int sum_to_n ( int n ) { return ( 1 + n ) * n / 2; }
H-121	-0.1452471762895584	public static int sum_to_n ( int n ) { return ( 1 + n ) * ( n / 2 ) ; }
D-121	-0.1452471762895584	public static int sum_to_n ( int n ) { return ( 1 + n ) * ( n / 2 ) ; }
P-121	-0.0957 -0.0508 -0.1201 -0.0893 -0.1070 -0.0662 -0.0844 -0.0748 -0.1174 -0.0968 -0.0689 -0.0829 -0.0885 -0.3444 -0.2634 -1.0286 -0.0827 -0.1679 -0.0841 -0.0627 -0.1235 -0.1523 -0.1433 -0.0978 -0.0985 -0.1005 -0.0981 -0.0763
S-50	public static int sum_to_n ( int n ) { return ( n / 2 ) * ( n + 1 ) ; }
T-50	public static int sum_to_n ( int n ) { return n * ( n + 1 ) / 2; }
H-50	-0.12436021119356155	public static int sum_to_n ( int n ) { return ( n / 2 ) * ( n + 1 ) ; }
D-50	-0.12436021119356155	public static int sum_to_n ( int n ) { return ( n / 2 ) * ( n + 1 ) ; }
P-50	-0.0968 -0.0526 -0.1206 -0.0899 -0.1085 -0.0681 -0.0830 -0.0745 -0.1182 -0.0974 -0.0751 -0.0821 -0.0892 -0.3600 -0.2533 -0.2404 -0.1985 -0.0846 -0.0916 -0.0743 -0.1164 -0.1333 -0.1765 -0.2269 -0.0903 -0.1044 -0.0965 -0.0791
S-161	public static int multiply ( int a, int b ) { return ( b % 10 ) * ( a % 10 ) ; }
T-161	public static int multiply ( int a, int b ) { return Math.abs ( b % 10 ) * Math.abs ( a % 10 ) ; }
H-161	-0.15786206722259521	public static int multiply ( int a, int b ) { return ( b % 10 ) * ( a % 10 ) ; }
D-161	-0.15786206722259521	public static int multiply ( int a, int b ) { return ( b % 10 ) * ( a % 10 ) ; }
P-161	-0.0906 -0.0493 -0.1083 -0.0583 -0.1100 -0.0899 -0.1065 -1.0520 -0.0848 -0.0673 -0.0816 -0.0907 -0.3218 -0.2822 -0.4127 -0.2056 -0.0606 -0.0906 -0.0539 -0.1189 -0.1690 -0.1407 -0.0648 -0.0871 -0.0864 -0.1061 -0.0725
S-385	public static int fib ( int n ) { return fib ( n - 2 ) + fib ( n - 1 ) ; }
T-385	public static int fib ( int n ) { if ( n == 1 || n == 0 ) return n; return fib ( n - 1 ) + fib ( n - 2 ) ; }
H-385	-0.14721828699111938	public static int fib ( int n ) { return fib ( n - 2 ) + fib ( n - 1 ) ; }
D-385	-0.14721828699111938	public static int fib ( int n ) { return fib ( n - 2 ) + fib ( n - 1 ) ; }
P-385	-0.0854 -0.0537 -0.1296 -0.0464 -0.1036 -0.1002 -0.0736 -0.0812 -0.0811 -0.2967 -0.0725 -0.0961 -0.1193 -0.6525 -0.5760 -0.0980 -0.0879 -0.0841 -0.0960 -0.0954 -0.2317 -0.2022 -0.0919 -0.1110 -0.0913 -0.0702
S-368	public static double triangle_area ( double a, double h ) { return h * a; }
T-368	public static double triangle_area ( double a, double h ) { return h * a / 2.; }
H-368	-0.21946269273757935	public static double triangle_area ( double a , double h ) { return h * a ; }
D-368	-0.21946269273757935	public static double triangle_area ( double a , double h ) { return h * a ; }
P-368	-0.1027 -0.0629 -0.1329 -0.0878 -0.0862 -0.0508 -0.1151 -0.1334 -0.1119 -1.4819 -0.1457 -0.0898 -0.0858 -0.0892 -0.4804 -0.4069 -0.0379 -0.2856 -0.4471 -0.1044 -0.0704
S-255	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0; arr.length > i; i += 1 ) { if ( arr[i] != arr[arr.length - i] ) result += 1; } return result; }
T-255	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0; arr.length / 2 > i; i += 1 ) { if ( arr[i] != arr[arr.length - i - 1] ) result += 1; } return result; }
H-255	-0.2778805196285248	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0 ; i < ( arr.length ) ; i += 1 ) { if ( arr[i] != arr[arr.length - i] ) result += 1 ; } return result ; }
D-255	-0.2778805196285248	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0 ; i < ( arr.length ) ; i += 1 ) { if ( arr[i] != arr[arr.length - i] ) result += 1 ; } return result ; }
P-255	-0.0942 -0.0495 -0.1249 -0.0298 -0.0998 -0.0367 -0.1193 -0.1040 -2.2608 -0.0486 -0.0828 -0.0898 -0.0999 -0.0956 -0.0839 -1.6721 -0.1438 -0.1108 -0.0766 -0.0873 -0.0926 -2.6028 -0.1213 -0.4761 -0.1743 -0.0742 -0.0636 -0.0705 -0.0490 -0.1069 -0.1687 -0.0932 -0.1799 -0.2027 -0.0824 -0.0996 -0.1257 -0.1116 -0.1260 -0.8087 -0.6607 -0.2382 -0.1599 -0.0755 -0.4158 -0.3821 -0.0988 -0.0571 -0.4618 -0.1193 -0.3014 -0.0846 -0.1522 -0.0745 -1.5877 -0.2048 -0.1009 -0.1203 -0.1170 -0.3290 -0.0823 -0.0652
S-209	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[arr.length - i] != arr[i] ) result += 1; } return result; }
T-209	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr[arr.length - i - 1] != arr[i] ) result += 1; } return result; }
H-209	-0.32834592461586	public static int smallest_change ( int [] arr ) { int result = 0 ; for ( int i = 0 ; i < arr.length ; i += 1 ) { if ( arr[arr.length - i] != arr[i] ) result += 1 ; } return result ; }
D-209	-0.32834592461586	public static int smallest_change ( int [] arr ) { int result = 0 ; for ( int i = 0 ; i < arr.length ; i += 1 ) { if ( arr[arr.length - i] != arr[i] ) result += 1 ; } return result ; }
P-209	-0.0928 -0.0499 -0.1234 -0.0299 -0.1006 -0.0364 -0.1197 -0.1055 -2.2783 -0.0493 -0.0841 -0.0919 -0.0960 -0.0911 -0.0835 -2.1718 -0.2005 -0.1692 -0.1085 -0.0749 -0.0910 -0.0942 -2.2837 -0.1653 -0.1011 -0.0762 -0.7217 -0.0633 -0.0647 -0.4689 -0.0948 -0.1542 -0.2020 -0.0815 -0.1034 -0.1491 -0.1169 -0.1913 -0.8608 -0.6910 -0.0927 -0.0649 -0.4423 -0.1257 -0.4845 -0.2261 -0.1345 -1.2003 -0.7767 -0.4295 -0.0899 -0.2828 -0.1116 -1.5416 -0.1787 -0.1804 -0.1597 -0.1378 -0.2798 -0.0888 -0.0685
S-372	public static int can_arrange ( int[] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i; } return ind; }
T-372	public static int can_arrange ( int[] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i; } return ind; }
H-372	-0.2780400812625885	public static int can_arrange ( int[] arr ) { int ind = 1 + ( arr.length ) ; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i ; } return ind ; }
D-372	-0.2780400812625885	public static int can_arrange ( int[] arr ) { int ind = 1 + ( arr.length ) ; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i ; } return ind ; }
P-372	-0.0911 -0.0451 -0.1078 -0.0811 -0.1028 -0.1176 -0.1180 -0.1023 -2.1874 -0.0361 -0.0817 -0.0911 -0.1275 -0.0787 -0.0786 -1.6730 -0.8330 -0.8901 -0.0907 -0.2588 -0.0466 -0.3326 -0.2259 -0.1782 -0.1151 -0.0733 -0.0790 -0.0822 -1.2971 -0.0934 -0.0891 -0.2555 -0.0942 -0.0476 -0.8581 -0.9142 -0.0911 -0.6063 -0.0759 -0.0998 -0.1308 -0.1137 -0.0838 -0.4871 -0.5295 -0.1621 -0.1271 -0.0585 -0.1763 -0.0668 -0.1549 -0.2931 -0.0914 -0.1174 -0.1208 -0.5897 -0.0487 -0.2610 -0.6867 -0.1194 -0.0874 -0.1320 -0.4455 -0.0772 -0.0638
S-156	public static int can_arrange ( int[] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i; } return ind; }
T-156	public static int can_arrange ( int[] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i; } return ind; }
H-156	-0.2780400514602661	public static int can_arrange ( int[] arr ) { int ind = 1 + ( arr.length ) ; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i ; } return ind ; }
D-156	-0.2780400514602661	public static int can_arrange ( int[] arr ) { int ind = 1 + ( arr.length ) ; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[1 + i] ) ind = 1 + i ; } return ind ; }
P-156	-0.0911 -0.0451 -0.1078 -0.0811 -0.1028 -0.1176 -0.1180 -0.1023 -2.1874 -0.0361 -0.0817 -0.0911 -0.1275 -0.0787 -0.0786 -1.6730 -0.8330 -0.8901 -0.0907 -0.2588 -0.0466 -0.3326 -0.2259 -0.1782 -0.1151 -0.0733 -0.0790 -0.0822 -1.2971 -0.0934 -0.0891 -0.2555 -0.0942 -0.0476 -0.8581 -0.9142 -0.0911 -0.6063 -0.0759 -0.0998 -0.1308 -0.1137 -0.0838 -0.4871 -0.5295 -0.1621 -0.1271 -0.0585 -0.1763 -0.0668 -0.1549 -0.2931 -0.0914 -0.1174 -0.1208 -0.5897 -0.0487 -0.2610 -0.6867 -0.1194 -0.0874 -0.1320 -0.4455 -0.0772 -0.0638
S-191	public static int can_arrange ( int[] arr ) { int ind = 1; for ( int i = 0; arr.length - 1 > i; i++ ) { if ( arr[i] < arr[i + 1] ) ind = i + 1; } return ind; }
T-191	public static int can_arrange ( int[] arr ) { int ind = -1; for ( int i = 1; arr.length > i; i++ ) { if ( arr[i] < arr[i - 1] ) ind = i; } return ind; }
H-191	-0.3216632306575775	public static int can_arrange ( int[] arr ) { int ind = 1 ; for ( int i = 0 ; i < ( arr.length ) ; i ++ ) { if ( arr[i] < arr[i + 1] ) ind = i + 1; } return ind ; }
D-191	-0.3216632306575775	public static int can_arrange ( int[] arr ) { int ind = 1 ; for ( int i = 0 ; i < ( arr.length ) ; i ++ ) { if ( arr[i] < arr[i + 1] ) ind = i + 1; } return ind ; }
P-191	-0.0922 -0.0467 -0.1079 -0.0831 -0.1029 -0.1206 -0.1179 -0.1013 -2.2470 -0.0377 -0.0832 -0.0896 -0.1201 -0.0706 -0.0776 -1.9902 -0.2169 -0.1549 -0.1145 -0.0765 -0.0793 -0.0824 -3.4724 -0.1273 -0.4812 -0.0985 -0.1044 -0.0449 -0.0603 -0.0338 -0.1355 -0.1566 -0.0881 -0.8015 -0.0706 -0.1047 -0.1377 -0.1122 -0.0697 -0.6236 -0.3484 -0.1957 -0.1109 -0.0555 -0.2827 -0.1497 -0.2354 -1.2503 -0.0872 -0.1097 -0.1060 -0.1164 -0.0597 -2.2815 -0.0900 -0.0847 -0.1305 -0.5311 -0.0750 -0.0633
S-170	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 2 ) + fibfib ( n - 1 ) + fibfib ( n - 3 ) ; }
T-170	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 3 ) + fibfib ( n - 1 ) + fibfib ( n - 2 ) ; }
H-170	-0.15529434382915497	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 2 ) + fibfib ( n - 1 ) + fibfib ( n - 3 ) ; }
D-170	-0.15529434382915497	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 2 ) + fibfib ( n - 1 ) + fibfib ( n - 3 ) ; }
P-170	-0.0935 -0.0465 -0.1211 -0.0482 -0.0736 -0.0489 -0.1157 -0.0899 -0.0751 -0.0807 -0.0807 -0.1679 -0.1192 -0.1074 -0.1700 -0.1772 -0.0825 -0.1011 -1.3892 -0.1986 -0.1077 -0.1068 -0.0854 -0.2375 -0.0830 -0.0798 -0.9475 -0.2372 -0.0735 -0.0788 -0.0530 -0.1028 -0.1238 -0.3508 -0.3399 -0.1056 -0.0913 -0.0942 -0.0854 -0.0709 -0.0998 -0.0951 -0.1932 -0.2595 -0.0898 -0.1359 -0.0876 -0.0851 -0.0718 -0.1002 -0.0942 -0.1840 -0.1427 -0.0938 -0.1089 -0.0879 -0.0801
S-392	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) y == y && ( int ) x == x ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-392	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) z == z && ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-392	-0.22346584498882294	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) y == y && ( int ) x == x ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-392	-0.22346584498882294	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) y == y && ( int ) x == x ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-392	-0.0873 -0.0591 -0.1053 -0.0984 -0.1009 -0.0545 -0.1105 -0.1231 -0.1874 -1.1283 -0.1243 -0.0826 -0.9914 -0.1104 -0.0536 -0.0864 -0.0815 -0.1355 -0.1119 -0.3768 -0.4454 -0.0892 -0.3534 -0.1104 -0.1743 -0.6682 -0.1143 -0.1647 -0.0825 -0.1336 -0.0979 -0.1626 -0.0870 -0.1125 -0.1896 -0.1182 -0.5997 -0.4200 -0.1944 -0.1941 -0.1278 -0.5092 -0.2842 -0.2300 -0.1615 -0.1135 -0.1783 -0.0877 -0.1571 -0.0757 -0.8344 -0.3791 -0.1381 -0.0471 -0.5292 -0.0865 -0.0771
S-350	public static boolean any_int ( double x, double y, double z ) { if ( x == ( int ) x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-350	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) y == y && ( int ) x == x && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-350	-0.22670410573482513	public static boolean any_int ( double x, double y, double z ) { if ( x == ( int ) x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-350	-0.22670410573482513	public static boolean any_int ( double x, double y, double z ) { if ( x == ( int ) x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-350	-0.0880 -0.0593 -0.1056 -0.0992 -0.1017 -0.0552 -0.1112 -0.1240 -0.1425 -1.1190 -0.1247 -0.0854 -0.9755 -0.1171 -0.0546 -0.0866 -0.0811 -0.1359 -0.1126 -0.4151 -0.1208 -0.3361 -0.2202 -0.0902 -0.1902 -0.5198 -0.3405 -0.3931 -0.0800 -0.1012 -0.0903 -0.2250 -0.0855 -0.1193 -0.2064 -0.1152 -0.4817 -0.4517 -0.1868 -0.1855 -0.1195 -0.5205 -0.2669 -0.2325 -0.2107 -0.1107 -0.2712 -0.0871 -0.1564 -0.0754 -0.8221 -0.4348 -0.1414 -0.0495 -0.5263 -0.0848 -0.0786
S-321	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || y == x + z ) return true; } return false; }
T-321	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + z == y || x + y == z || y + z == x ) return true; } return false; }
H-321	-0.23160557448863983	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || y == x + z ) return true ; } return false ; }
D-321	-0.23160557448863983	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || y == x + z ) return true ; } return false ; }
P-321	-0.0867 -0.0579 -0.1054 -0.0981 -0.1016 -0.0540 -0.1113 -0.1224 -0.1398 -1.1920 -0.1218 -0.0861 -1.0227 -0.1181 -0.0593 -0.0874 -0.0816 -0.1370 -0.1120 -0.4025 -0.4592 -0.0869 -0.2406 -0.0951 -0.1906 -0.9984 -0.1121 -0.1302 -0.0791 -0.0940 -0.0844 -0.0933 -0.0841 -0.1027 -0.2009 -0.1183 -0.5376 -0.6669 -0.1745 -0.2006 -0.1222 -0.5991 -0.1737 -0.2095 -0.2622 -0.3305 -0.1117 -0.0911 -0.1657 -0.0707 -0.7674 -0.3745 -0.1374 -0.0474 -0.5295 -0.0854 -0.0766
S-211	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && y == ( int ) y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-211	public static boolean any_int ( double x, double y, double z ) { if ( x == ( int ) x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-211	-0.24194587767124176	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && y == ( int ) y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-211	-0.24194587767124176	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && y == ( int ) y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-211	-0.0878 -0.0586 -0.1062 -0.0970 -0.1009 -0.0560 -0.1113 -0.1258 -0.1435 -1.1906 -0.1222 -0.0843 -1.0186 -0.1207 -0.0556 -0.0868 -0.0815 -0.1348 -0.1129 -0.4690 -0.4526 -0.0879 -0.3163 -0.0936 -0.3216 -0.8185 -0.9957 -0.1120 -0.1407 -0.0980 -0.0772 -0.1033 -0.0857 -0.1034 -0.1929 -0.1178 -0.4767 -0.3754 -0.1595 -0.1882 -0.1074 -0.5151 -0.2882 -0.2247 -0.2721 -0.1172 -0.1736 -0.0866 -0.1564 -0.0757 -0.8010 -0.4008 -0.1395 -0.0478 -0.5406 -0.0852 -0.0776
S-180	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + z == y || x + y == z ) return true; } return false; }
T-180	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && y == ( int ) y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-180	-0.2355964034795761	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + z == y || x + y == z ) return true ; } return false ; }
D-180	-0.2355964034795761	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + z == y || x + y == z ) return true ; } return false ; }
P-180	-0.0873 -0.0588 -0.1058 -0.0989 -0.1016 -0.0544 -0.1113 -0.1214 -0.1410 -1.1850 -0.1209 -0.0871 -1.0514 -0.1193 -0.0602 -0.0885 -0.0820 -0.1361 -0.1127 -0.4347 -0.4711 -0.0876 -0.2459 -0.0949 -0.1921 -1.0263 -0.1121 -0.1267 -0.0791 -0.0914 -0.0845 -0.0890 -0.0838 -0.1056 -0.1969 -0.1193 -0.4787 -0.4919 -0.4277 -0.2217 -0.2284 -0.6499 -0.2907 -0.2856 -0.2234 -0.1199 -0.0642 -0.0861 -0.1557 -0.0733 -0.7663 -0.4262 -0.1405 -0.0483 -0.5232 -0.0854 -0.0775
S-127	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || z + x == y ) return true; } return false; }
T-127	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( z == x + y || x + z == y || y + z == x ) return true; } return false; }
H-127	-0.23138242959976196	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || z + x == y ) return true ; } return false ; }
D-127	-0.23138242959976196	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || z + x == y ) return true ; } return false ; }
P-127	-0.0874 -0.0591 -0.1066 -0.0982 -0.1016 -0.0548 -0.1113 -0.1221 -0.1384 -1.1453 -0.1194 -0.0845 -1.0245 -0.1169 -0.0519 -0.0878 -0.0812 -0.1367 -0.1119 -0.4274 -0.4700 -0.0877 -0.2385 -0.0985 -0.1969 -1.0840 -0.1128 -0.1278 -0.0784 -0.0910 -0.0864 -0.0911 -0.0857 -0.1121 -0.2042 -0.1179 -0.4628 -0.6143 -0.1544 -0.1765 -0.1019 -0.6118 -0.1996 -0.2699 -0.3431 -0.0946 -0.1650 -0.0861 -0.1513 -0.0737 -0.8432 -0.3974 -0.1369 -0.0480 -0.5456 -0.0853 -0.0771
S-41	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( z == x + y || x + z == y ) return true; } return false; }
T-41	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && z == ( int ) z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-41	-0.256874680519104	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( z == x + y || x + z == y ) return true ; } return false ; }
D-41	-0.256874680519104	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( z == x + y || x + z == y ) return true ; } return false ; }
P-41	-0.0880 -0.0594 -0.1085 -0.0990 -0.1015 -0.0556 -0.1104 -0.1213 -0.1386 -1.1638 -0.1181 -0.0862 -1.0097 -0.1145 -0.0558 -0.0885 -0.0810 -0.1356 -0.1112 -0.4378 -0.4883 -0.0868 -0.2473 -0.0936 -0.1886 -0.9573 -0.1125 -0.1238 -0.0790 -0.0904 -0.0868 -0.0882 -0.0849 -0.1048 -0.1952 -0.1185 -0.3387 -0.0934 -0.3048 -0.9824 -0.1575 -1.2569 -0.4893 -0.4928 -0.3096 -0.1194 -0.1604 -0.0828 -0.1545 -0.0779 -0.8503 -0.4453 -0.1382 -0.0487 -0.5452 -0.0859 -0.0776
S-40	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( y + x == z || x + z == y ) return true; } return false; }
T-40	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( y + z == x || x + y == z || x + z == y ) return true; } return false; }
H-40	-0.23792608082294464	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( y + x == z || x + z == y ) return true ; } return false ; }
D-40	-0.23792608082294464	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( y + x == z || x + z == y ) return true ; } return false ; }
P-40	-0.0873 -0.0590 -0.1067 -0.0982 -0.1017 -0.0548 -0.1113 -0.1224 -0.1400 -1.1285 -0.1189 -0.0872 -1.0251 -0.1173 -0.0550 -0.0865 -0.0809 -0.1370 -0.1120 -0.4219 -0.4738 -0.0881 -0.2511 -0.0930 -0.2040 -0.9405 -0.1133 -0.1307 -0.0784 -0.0947 -0.0856 -0.0909 -0.0852 -0.1085 -0.1954 -0.1182 -0.8784 -0.5047 -0.2040 -0.2415 -0.1114 -0.6209 -0.4184 -0.2892 -0.1266 -0.1155 -0.2264 -0.0862 -0.1602 -0.0753 -0.8138 -0.3956 -0.1380 -0.0490 -0.5400 -0.0860 -0.0778
S-401	public static int fibfib ( int n ) { if ( 0 == n ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-401	public static int fibfib ( int n ) { if ( 0 == n ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-401	-0.15176033973693848	public static int fibfib ( int n ) { if ( 0 == n ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-401	-0.15176033973693848	public static int fibfib ( int n ) { if ( 0 == n ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-401	-0.0947 -0.0476 -0.1214 -0.0469 -0.0736 -0.0492 -0.1162 -0.0893 -0.0726 -0.0817 -0.0818 -0.1649 -0.1133 -0.2220 -0.1253 -0.1045 -0.0855 -0.0951 -1.0485 -0.2095 -0.1103 -0.3042 -0.1141 -0.2911 -0.0818 -0.0785 -0.9910 -0.2279 -0.0687 -0.0798 -0.0535 -0.1026 -0.1440 -0.4623 -0.3381 -0.1034 -0.1022 -0.0966 -0.0828 -0.0631 -0.0982 -0.0924 -0.1689 -0.1668 -0.0921 -0.1074 -0.0763 -0.0855 -0.0782 -0.0985 -0.0859 -0.1294 -0.0610 -0.0945 -0.1085 -0.0902 -0.0766
S-241	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( 1 == n ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-241	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( 1 == n ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-241	-0.15357564389705658	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( 1 == n ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-241	-0.15357564389705658	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( 1 == n ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-241	-0.0938 -0.0469 -0.1214 -0.0468 -0.0742 -0.0496 -0.1160 -0.0887 -0.0708 -0.0817 -0.0816 -0.1659 -0.1179 -0.1624 -0.1958 -0.1363 -0.0843 -0.0964 -1.3624 -0.2119 -0.1078 -0.4755 -0.1019 -0.0898 -0.0923 -0.0758 -0.8173 -0.2238 -0.0670 -0.0799 -0.0536 -0.1021 -0.1298 -0.5194 -0.2701 -0.1023 -0.1020 -0.0948 -0.0835 -0.0635 -0.0984 -0.0869 -0.1670 -0.1592 -0.0912 -0.1098 -0.0758 -0.0861 -0.0787 -0.0992 -0.0825 -0.1296 -0.0603 -0.0944 -0.1095 -0.0914 -0.0768
S-103	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 3 ) + fibfib ( n - 1 ) + fibfib ( n - 2 ) ; }
T-103	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( 2 == n ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-103	-0.1518934667110443	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 3 ) + fibfib ( n - 1 ) + fibfib ( n - 2 ) ; }
D-103	-0.1518934667110443	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 3 ) + fibfib ( n - 1 ) + fibfib ( n - 2 ) ; }
P-103	-0.0948 -0.0469 -0.1213 -0.0483 -0.0731 -0.0484 -0.1158 -0.0901 -0.0751 -0.0808 -0.0808 -0.1676 -0.1184 -0.1073 -0.1683 -0.1950 -0.0826 -0.1008 -1.3723 -0.1920 -0.1078 -0.1075 -0.0851 -0.2214 -0.0827 -0.0787 -0.9265 -0.2375 -0.0679 -0.0799 -0.0530 -0.1038 -0.1265 -0.3330 -0.1571 -0.1012 -0.0955 -0.1048 -0.0845 -0.0619 -0.0992 -0.0966 -0.2500 -0.3271 -0.0885 -0.1228 -0.0889 -0.0847 -0.0706 -0.0977 -0.0885 -0.1712 -0.1065 -0.0941 -0.1111 -0.0844 -0.0801
S-116	public static int can_arrange ( int[] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i + 1] > arr[i] ) ind = i + 1; } return ind; }
T-116	public static int can_arrange ( int[] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr[i - 1] > arr[i] ) ind = i; } return ind; }
H-116	-0.362896203994751	public static int can_arrange ( int[] arr ) { int ind = 1 ; for ( int i = 0 ; i < arr.length ; i ++ ) { if ( arr[i + 1] > arr[i] ) ind = i + 1; } return ind ; }
D-116	-0.362896203994751	public static int can_arrange ( int[] arr ) { int ind = 1 ; for ( int i = 0 ; i < arr.length ; i ++ ) { if ( arr[i + 1] > arr[i] ) ind = i + 1; } return ind ; }
P-116	-0.0915 -0.0473 -0.1066 -0.0846 -0.1032 -0.1220 -0.1178 -0.1012 -2.2359 -0.0381 -0.0825 -0.0911 -0.1236 -0.0803 -0.0773 -2.1223 -0.2580 -0.1682 -0.1128 -0.0756 -0.0826 -0.0771 -3.5119 -0.2085 -0.0967 -0.0628 -0.6784 -0.0712 -0.0483 -0.7904 -0.0888 -1.2479 -0.0735 -0.1120 -0.1385 -0.1169 -0.1012 -0.5655 -0.3015 -0.5474 -1.1300 -0.1052 -0.0643 -0.5127 -0.2273 -0.2749 -0.0872 -0.1699 -0.1031 -0.1387 -0.0655 -1.9887 -0.0945 -0.1000 -0.1496 -0.5307 -0.0782 -0.0664
S-71	public static boolean is_prime ( int n ) { for ( int i = 2; ( int ) Math.pow ( n, 0.5 ) + 1 > i; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-71	public static boolean is_prime ( int n ) { for ( int i = 2; ( int ) Math.pow ( n, 0.5 ) + 1 > i; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-71	-0.2535024583339691	public static boolean is_prime ( int n ) { for ( int i = 2; ( int ) Math.pow ( n, 0.5 ) + 1 > i ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-71	-0.2535024583339691	public static boolean is_prime ( int n ) { for ( int i = 2; ( int ) Math.pow ( n, 0.5 ) + 1 > i ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-71	-0.0960 -0.0535 -0.0924 -0.0687 -0.0942 -0.0223 -0.1205 -0.0972 -0.0724 -0.0892 -0.0873 -0.3207 -0.1164 -0.0740 -0.0717 -0.1043 -1.1634 -0.2927 -0.1055 -0.0862 -2.5570 -0.1001 -0.0576 -0.1108 -0.0868 -1.3795 -0.0287 -0.1145 -0.2090 -0.4198 -0.2743 -0.1188 -0.4721 -0.0866 -0.1219 -0.3137 -0.0875 -0.0952 -0.1207 -0.1184 -0.2479 -0.2928 -0.1400 -0.2710 -0.1419 -0.0889 -0.1511 -0.1264 -1.0444 -0.1889 -0.1503 -0.0742 -0.7533 -0.0864 -0.0834
S-36	public static boolean is_prime ( int n ) { for ( int i = 2; i < 1 + ( int ) Math.pow ( n, 0.5 ) ; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-36	public static boolean is_prime ( int n ) { for ( int i = 2; i < 1 + ( int ) Math.pow ( n, 0.5 ) ; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-36	-0.23528297245502472	public static boolean is_prime ( int n ) { for ( int i = 2; i < 1 + ( int ) Math.pow ( n, 0.5 ) ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-36	-0.23528297245502472	public static boolean is_prime ( int n ) { for ( int i = 2; i < 1 + ( int ) Math.pow ( n, 0.5 ) ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-36	-0.0941 -0.0559 -0.0904 -0.0685 -0.0939 -0.0205 -0.1197 -0.0956 -0.0702 -0.0882 -0.0858 -0.3099 -0.1140 -0.0779 -0.0770 -0.1081 -1.2923 -0.1196 -0.1900 -0.6432 -0.1134 -0.1380 -0.0998 -0.0963 -2.3678 -0.0983 -0.0497 -0.1057 -0.0777 -1.3380 -0.0356 -0.1178 -0.0943 -0.0823 -0.1368 -0.2680 -0.0843 -0.0943 -0.1277 -0.1173 -0.2625 -0.3110 -0.1494 -0.3065 -0.1362 -0.0882 -0.1459 -0.1201 -0.8337 -0.1684 -0.1446 -0.0769 -0.5661 -0.0863 -0.0872
S-296	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '5' || c == '2' || c == '3' || c == '7' ) result += 1; } return result; }
T-296	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == 'B' || c == '2' || c == '3' || c == '5' || c == '7' || c == 'D' ) result += 1; } return result; }
H-296	-0.23610539734363556	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '5' || c == '2' || c == '3' || c == '7' ) result += 1 ; } return result ; }
D-296	-0.23610539734363556	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '5' || c == '2' || c == '3' || c == '7' ) result += 1 ; } return result ; }
P-296	-0.0975 -0.0468 -0.1190 -0.0467 -0.0935 -0.0235 -0.1178 -1.5028 -0.0892 -0.0899 -0.0900 -0.0889 -0.0844 -0.0774 -1.9298 -0.1430 -0.2273 -0.1100 -0.1305 -0.0883 -0.0695 -0.0664 -0.1634 -0.0713 -0.0472 -0.0654 -0.0939 -0.1218 -0.1520 -0.1181 -0.2819 -0.1468 -0.2395 -0.2569 -0.2218 -0.1460 -0.4961 -0.3060 -0.1717 -0.1554 -0.4613 -0.6357 -0.1565 -0.1264 -0.1796 -0.0774 -0.2222 -0.1456 -1.6159 -0.2142 -0.1509 -0.1358 -0.1103 -0.2360 -0.0921 -0.0745
S-254	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || '5' == c || c == '7' ) result += 1; } return result; }
T-254	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( '2' == c || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-254	-0.23672910034656525	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || '5' == c || c == '7' ) result += 1 ; } return result ; }
D-254	-0.23672910034656525	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || '5' == c || c == '7' ) result += 1 ; } return result ; }
P-254	-0.0972 -0.0465 -0.1179 -0.0464 -0.0935 -0.0234 -0.1176 -1.5026 -0.0884 -0.0899 -0.0900 -0.0885 -0.0843 -0.0768 -1.9764 -0.1382 -0.2201 -0.1101 -0.1328 -0.0899 -0.0686 -0.0663 -0.1601 -0.0708 -0.0466 -0.0654 -0.0938 -0.1251 -0.1507 -0.1158 -0.3423 -0.1424 -0.4061 -0.2227 -0.2102 -0.1747 -0.3892 -0.3684 -0.6589 -0.2278 -0.1449 -0.3521 -0.1324 -0.1539 -0.1488 -0.0724 -0.2302 -0.1510 -1.5426 -0.2044 -0.1436 -0.1323 -0.1101 -0.2357 -0.0916 -0.0744
S-216	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '3' || c == '2' || c == '5' || c == '7' ) result += 1; } return result; }
T-216	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '7' || c == '2' || c == '3' || c == '5' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-216	-0.23112116754055023	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '3' || c == '2' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-216	-0.23112116754055023	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '3' || c == '2' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-216	-0.0975 -0.0465 -0.1189 -0.0463 -0.0935 -0.0235 -0.1177 -1.4896 -0.0892 -0.0899 -0.0900 -0.0882 -0.0844 -0.0768 -1.8693 -0.1404 -0.2273 -0.1101 -0.1324 -0.0870 -0.0703 -0.0659 -0.1615 -0.0708 -0.0468 -0.0659 -0.0939 -0.1246 -0.1490 -0.1175 -0.2574 -0.1544 -0.4614 -0.2972 -0.1927 -0.1319 -0.3999 -0.3403 -0.1639 -0.1511 -0.2550 -0.5411 -0.1452 -0.1404 -0.1746 -0.0782 -0.2374 -0.1462 -1.5711 -0.2207 -0.1525 -0.1333 -0.1096 -0.2373 -0.0915 -0.0740
S-201	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || '3' == c || c == '5' || c == '7' ) result += 1; } return result; }
T-201	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '3' || c == '2' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-201	-0.23797182738780975	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '2' || '3' == c || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-201	-0.23797182738780975	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '2' || '3' == c || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-201	-0.0972 -0.0465 -0.1179 -0.0466 -0.0935 -0.0234 -0.1176 -1.5144 -0.0885 -0.0898 -0.0899 -0.0885 -0.0844 -0.0774 -1.9652 -0.1345 -0.2177 -0.1100 -0.1344 -0.0873 -0.0714 -0.0669 -0.1595 -0.0703 -0.0463 -0.0660 -0.0938 -0.1267 -0.1485 -0.1172 -0.3650 -0.1520 -0.3758 -0.2433 -0.9046 -0.2171 -0.1385 -0.3166 -0.1343 -0.1398 -0.2686 -0.4304 -0.1317 -0.1442 -0.1780 -0.0722 -0.2300 -0.1495 -1.5343 -0.2130 -0.1514 -0.1324 -0.1095 -0.2370 -0.0923 -0.0740
S-165	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( '2' == c || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-165	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '5' || c == '2' || c == '3' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-165	-0.23232796788215637	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( '2' == c || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-165	-0.23232796788215637	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( '2' == c || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-165	-0.0973 -0.0466 -0.1189 -0.0457 -0.0935 -0.0233 -0.1178 -1.4956 -0.0885 -0.0892 -0.0899 -0.0889 -0.0849 -0.0774 -1.9381 -0.1373 -0.2224 -0.1108 -0.1309 -0.0830 -0.0651 -0.0676 -0.1600 -0.0699 -0.0464 -0.0660 -0.0938 -0.1237 -0.1509 -0.1192 -0.7113 -0.1589 -0.1390 -0.2094 -0.1847 -0.1891 -0.4037 -0.3013 -0.1606 -0.1455 -0.2679 -0.4686 -0.1414 -0.1444 -0.1708 -0.0772 -0.2207 -0.1433 -1.6276 -0.2041 -0.1489 -0.1353 -0.1106 -0.2373 -0.0921 -0.0740
S-101	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '7' || c == '2' || c == '3' || c == '5' ) result += 1; } return result; }
T-101	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == 'D' || c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ) result += 1; } return result; }
H-101	-0.2326480597257614	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '7' || c == '2' || c == '3' || c == '5' ) result += 1 ; } return result ; }
D-101	-0.2326480597257614	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '7' || c == '2' || c == '3' || c == '5' ) result += 1 ; } return result ; }
P-101	-0.0975 -0.0465 -0.1189 -0.0464 -0.0934 -0.0234 -0.1177 -1.5149 -0.0880 -0.0899 -0.0900 -0.0887 -0.0837 -0.0780 -1.9260 -0.1441 -0.2281 -0.1100 -0.1308 -0.0869 -0.0690 -0.0664 -0.1634 -0.0724 -0.0467 -0.0648 -0.0939 -0.1231 -0.1519 -0.1173 -0.2852 -0.1582 -0.2839 -0.2494 -0.2152 -0.1288 -0.4759 -0.2957 -0.1654 -0.1492 -0.4336 -0.5493 -0.1505 -0.1163 -0.1606 -0.0773 -0.2067 -0.1403 -1.5769 -0.2201 -0.1622 -0.1390 -0.1110 -0.2396 -0.0929 -0.0734
S-38	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || '7' == c ) result += 1; } return result; }
T-38	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || '3' == c || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-38	-0.23278740048408508	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || '7' == c ) result += 1 ; } return result ; }
D-38	-0.23278740048408508	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || '7' == c ) result += 1 ; } return result ; }
P-38	-0.0964 -0.0465 -0.1180 -0.0460 -0.0935 -0.0234 -0.1176 -1.5153 -0.0886 -0.0900 -0.0899 -0.0873 -0.0848 -0.0768 -1.9022 -0.1457 -0.2181 -0.1101 -0.1330 -0.0896 -0.0713 -0.0669 -0.1632 -0.0699 -0.0463 -0.0654 -0.0944 -0.1276 -0.1456 -0.1163 -0.2952 -0.1467 -0.4157 -0.2141 -0.1856 -0.1522 -0.3801 -0.3314 -0.1644 -0.1357 -0.2479 -0.3771 -0.6611 -0.2395 -0.1430 -0.0985 -0.2138 -0.1453 -1.3537 -0.2210 -0.1259 -0.1331 -0.1116 -0.2364 -0.0920 -0.0753
S-192	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( 0 == n % i ) return false; } return true; }
T-192	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( 0 == n % i ) return false; } return true; }
H-192	-0.29276788234710693	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1 ; i += 1 ) { if ( 0 == n % i ) return false ; } return true ; }
D-192	-0.29276788234710693	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1 ; i += 1 ) { if ( 0 == n % i ) return false ; } return true ; }
P-192	-0.0975 -0.0540 -0.0927 -0.0692 -0.0965 -0.0223 -0.1212 -0.0985 -0.0698 -0.0881 -0.0865 -0.3516 -0.1167 -0.0799 -0.0758 -0.1064 -1.3483 -0.1120 -0.2210 -0.1171 -0.2166 -0.1007 -2.5969 -0.0997 -0.0520 -0.1103 -0.0886 -1.1923 -0.0304 -0.1171 -0.3318 -2.3540 -0.1593 -0.0822 -0.1192 -0.2737 -0.0878 -0.0913 -0.1278 -0.1133 -0.4677 -0.1362 -0.3460 -0.5029 -0.2007 -0.0885 -0.1361 -0.1164 -1.1032 -0.1684 -0.1515 -0.0700 -0.6734 -0.0879 -0.0832
S-249	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; k > i; i += 1 ) { if ( k % i == 0 ) return false; } return true; }
T-249	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; k > i; i += 1 ) { if ( k % i == 0 ) return false; } return true; }
H-249	-0.22779235243797302	public static boolean is_prime ( int k ) { if ( k < 2 ) return false ; for ( int i = 2; k > i ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-249	-0.22779235243797302	public static boolean is_prime ( int k ) { if ( k < 2 ) return false ; for ( int i = 2; k > i ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-249	-0.1010 -0.0605 -0.0928 -0.0684 -0.0956 -0.0238 -0.1197 -0.0934 -0.1448 -0.0808 -0.0881 -0.2276 -0.1097 -0.1454 -0.1382 -0.0956 -0.0897 -0.0849 -0.0850 -1.4179 -0.3827 -0.1134 -0.0751 -0.0694 -0.0945 -1.7162 -0.3274 -0.5545 -0.1415 -0.5712 -0.0979 -0.1321 -0.2971 -0.0848 -0.1024 -0.1151 -0.1130 -0.2737 -0.1846 -0.1092 -0.2504 -0.2152 -0.0871 -0.1092 -0.1010 -0.8922 -0.1578 -0.1424 -0.0941 -0.6936 -0.0882 -0.0954
S-253	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; n > k; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-253	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; n - 1 > k; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-253	-0.22907033562660217	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; n > k ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-253	-0.22907033562660217	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; n > k ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-253	-0.0991 -0.0597 -0.0901 -0.0659 -0.0929 -0.0249 -0.1202 -0.0960 -0.0762 -0.0852 -0.0879 -0.2476 -0.1116 -0.0941 -0.1387 -0.1270 -0.0901 -0.0908 -0.0827 -1.4520 -0.3891 -0.1114 -0.0836 -0.1557 -0.0957 -1.7810 -0.1097 -0.4344 -0.1562 -0.7126 -0.1614 -0.1675 -0.2128 -0.0832 -0.1023 -0.1172 -0.1129 -0.1854 -0.1877 -0.1134 -0.2602 -0.1412 -0.0881 -0.1075 -0.0960 -1.0494 -0.1851 -0.1572 -0.1076 -0.7298 -0.0879 -0.0957
S-110	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; k < n; k += 1 ) { if ( 0 == n % k ) return false; } return true; }
T-110	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( 0 == n % k ) return false; } return true; }
H-110	-0.24343395233154297	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( 0 == n % k ) return false ; } return true ; }
D-110	-0.24343395233154297	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( 0 == n % k ) return false ; } return true ; }
P-110	-0.0993 -0.0586 -0.0918 -0.0654 -0.0937 -0.0242 -0.1206 -0.0961 -0.0717 -0.0875 -0.0891 -0.2650 -0.1129 -0.1179 -0.1580 -0.1140 -0.0911 -0.0901 -0.0857 -1.4733 -0.3600 -0.1129 -0.0863 -0.1483 -0.0951 -1.8066 -0.1399 -0.2027 -0.1627 -0.8454 -0.1207 -0.1151 -0.2414 -0.0859 -0.1051 -0.1212 -0.1096 -0.5203 -0.1479 -0.6233 -0.4019 -0.1636 -0.0910 -0.1005 -0.1021 -1.0161 -0.1382 -0.1448 -0.0921 -0.6695 -0.0885 -0.0940
S-73	public static boolean is_prime ( int n ) { if ( 2 > n ) return false; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-73	public static boolean is_prime ( int n ) { if ( 2 > n ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-73	-0.23118296265602112	public static boolean is_prime ( int n ) { if ( 2 > n ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-73	-0.23118296265602112	public static boolean is_prime ( int n ) { if ( 2 > n ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-73	-0.0991 -0.0588 -0.0920 -0.0649 -0.0930 -0.0256 -0.1197 -0.0952 -0.0715 -0.0886 -0.0910 -0.2643 -0.1129 -0.3310 -0.1634 -0.0837 -0.0917 -0.0948 -0.0850 -1.5351 -0.3094 -0.1127 -0.0856 -0.1598 -0.0907 -1.6273 -0.1345 -0.1526 -0.2044 -0.9068 -0.1169 -0.1246 -0.2016 -0.0849 -0.1027 -0.1191 -0.1137 -0.2274 -0.2414 -0.1341 -0.3863 -0.1496 -0.0883 -0.1089 -0.1045 -1.0246 -0.1402 -0.1463 -0.0906 -0.6930 -0.0885 -0.0894
S-14	public static String longest ( List<String> strings ) { int maxlen = 0; for ( String string : strings ) { if ( string.length () < strings.size () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string; } } return null; }
T-14	public static String longest ( List<String> strings ) { int maxlen = 0; for ( String string : strings ) { if ( maxlen < string.length () ) { maxlen = string.length () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string; } } return null; }
H-14	-0.17270398139953613	public static String longest ( List<String> strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( string.length () < strings.size () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string ; } } return null ; }
D-14	-0.17270398139953613	public static String longest ( List<String> strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( string.length () < strings.size () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string ; } } return null ; }
P-14	-0.0927 -0.0466 -1.2667 -0.0185 -0.1163 -0.3518 -0.3831 -0.0768 -0.1917 -0.1246 -0.0880 -0.0878 -0.1504 -0.0286 -0.0933 -1.4452 -0.0749 -0.1395 -0.1098 -0.9975 -0.0622 -0.0580 -0.1428 -0.0886 -0.0976 -0.0972 -0.1187 -0.0844 -0.1869 -0.1204 -0.0746 -0.1790 -0.1594 -0.1120 -0.2027 -0.0737 -0.0929 -0.0833 -0.0159 -0.1614 -0.1462 -0.1211 -0.1894 -0.0816 -0.0889 -0.1198 -0.1223 -0.1661 -0.1127 -0.8137 -0.0546 -0.0705 -0.1328 -0.0902 -0.0982 -0.0986 -0.1176 -0.0732 -0.1928 -0.1074 -0.0908 -0.3011 -0.0343 -0.0839 -0.0980 -0.1144 -0.0795 -0.2364 -0.0807 -0.1068 -0.1016 -0.1935 -0.1905 -0.0866 -0.0615
S-384	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( lst.get ( i ) % 2 ) == 0 && ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
T-384	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( lst.get ( i ) % 2 ) == 1 && ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
H-384	-0.2680252492427826	public static int solution ( ArrayList<Integer> lst ) { int result = 0 ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( lst.get ( i ) ) == 0 ) { if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } } return result ; }
D-384	-0.2680252492427826	public static int solution ( ArrayList<Integer> lst ) { int result = 0 ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( lst.get ( i ) ) == 0 ) { if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } } return result ; }
P-384	-0.0914 -0.0456 -0.1100 -0.0291 -0.1182 -1.5821 -0.4444 -0.0416 -0.2141 -0.0520 -0.0806 -0.0836 -0.0912 -0.0870 -0.0780 -1.9463 -0.0880 -0.1491 -0.1060 -0.0618 -0.0757 -0.0754 -1.7782 -0.0900 -0.1050 -0.3987 -0.1637 -0.1937 -0.0748 -0.0879 -0.0876 -1.0873 -0.0807 -0.0929 -0.1577 -0.1113 -0.1847 -0.0987 -0.2097 -0.2874 -0.1108 -0.1181 -0.0923 -0.5905 -0.6018 -1.2792 -0.1496 -0.1034 -1.2629 -0.1163 -0.9935 -0.9211 -0.1894 -0.0660 -0.0873 -0.1150 -0.2393 -0.1363 -0.0971 -0.1325 -0.1649 -0.1049 -0.1440 -0.2342 -0.1111 -0.1105 -0.0809 -0.1177 -0.1015 -0.2023 -0.1577 -0.0876 -0.1158 -0.1373 -0.0847 -0.0712
S-283	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && 0 == ( lst.get ( i ) % 2 ) ) { result += lst.get ( i ) ; } } return result; }
T-283	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 0 && 1 == ( lst.get ( i ) % 2 ) ) { result += lst.get ( i ) ; } } return result; }
H-283	-0.2445785254240036	public static int solution ( ArrayList<Integer> lst ) { int result = 0 ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && 0 == ( lst.get ( i ) % 2 ) ) { result += lst.get ( i ) ; } } return result ; }
D-283	-0.2445785254240036	public static int solution ( ArrayList<Integer> lst ) { int result = 0 ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && 0 == ( lst.get ( i ) % 2 ) ) { result += lst.get ( i ) ; } } return result ; }
P-283	-0.0911 -0.0452 -0.1093 -0.0292 -0.1189 -1.5929 -0.4268 -0.0422 -0.2082 -0.0517 -0.0808 -0.0832 -0.0912 -0.0885 -0.0780 -2.1658 -0.0900 -0.1469 -0.1059 -0.0632 -0.0755 -0.0742 -1.6897 -0.0888 -0.1106 -0.4332 -0.1685 -0.1945 -0.0728 -0.0884 -0.0862 -1.0279 -0.0806 -0.0917 -0.1573 -0.1134 -0.2795 -0.2600 -0.1288 -0.0930 -0.0863 -0.1024 -0.4280 -1.4197 -0.6337 -0.1630 -0.1066 -0.1239 -0.1383 -0.2680 -0.1149 -0.1017 -0.0899 -0.8645 -0.0898 -0.0873 -0.0918 -0.0808 -0.1278 -0.1682 -0.1231 -0.1525 -0.2367 -0.1147 -0.1328 -0.0884 -0.1237 -0.1656 -0.1329 -0.0915 -0.1265 -0.1369 -0.0895 -0.0738
S-175	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; lst.size () > i; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-175	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; lst.size () > i; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-175	-0.23013998568058014	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0 ; i < ( lst.size () ) ; i ++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-175	-0.23013998568058014	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0 ; i < ( lst.size () ) ; i ++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-175	-0.0928 -0.0451 -0.1114 -0.0293 -0.1173 -1.5425 -0.4551 -0.0415 -0.2121 -0.0515 -0.0805 -0.0839 -0.0938 -0.0905 -0.0776 -1.7416 -0.1462 -0.1080 -0.0638 -0.0739 -0.0790 -2.2777 -0.1367 -0.3265 -0.5131 -0.0853 -0.1175 -0.1732 -0.3964 -0.0695 -0.1077 -0.1217 -0.0807 -0.9941 -0.0755 -0.0901 -0.1494 -0.1130 -0.1644 -0.1850 -0.1223 -0.0797 -0.0878 -0.0773 -0.3764 -1.8696 -0.1194 -0.0823 -0.1257 -0.2338 -0.1101 -0.0813 -0.0869 -0.2692 -0.0577 -0.0836 -0.1503 -0.0915 -0.0884 -0.0778 -0.1062 -0.0731 -0.0801 -0.1297 -0.2266 -0.1091 -0.1025 -0.0868 -0.1030 -0.1002 -0.0826 -0.0806 -0.1019 -0.1723 -0.0809 -0.0691
S-19	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( 1 == ( i % 2 ) && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-19	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( 0 == ( i % 2 ) && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-19	-0.24650956690311432	public static int solution ( ArrayList<Integer> lst ) { int result = 0 ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-19	-0.24650956690311432	public static int solution ( ArrayList<Integer> lst ) { int result = 0 ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-19	-0.0906 -0.0449 -0.1104 -0.0293 -0.1189 -1.5833 -0.4194 -0.0419 -0.2098 -0.0505 -0.0809 -0.0834 -0.0916 -0.0880 -0.0775 -2.0724 -0.0870 -0.1463 -0.1058 -0.0635 -0.0748 -0.0754 -1.7489 -0.0883 -0.1079 -0.4109 -0.1733 -0.1933 -0.0741 -0.0872 -0.0863 -1.0508 -0.0804 -0.0902 -0.1649 -0.1132 -1.6169 -0.5608 -0.1838 -0.0804 -0.0844 -0.6716 -0.1291 -0.1405 -0.1622 -0.2341 -0.1170 -0.0996 -0.0923 -0.4529 -0.0593 -0.0845 -0.3574 -0.1268 -0.0880 -0.0769 -0.1286 -0.1621 -0.1249 -0.1621 -0.2525 -0.1140 -0.1247 -0.0922 -0.1341 -0.1629 -0.1322 -0.0931 -0.1234 -0.1427 -0.0910 -0.0744
S-34	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; for ( int i = 0; game.length > i; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } return result; }
T-34	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; for ( int i = 0; game.length > i; i += 1 ) { result[i] = Math.abs ( game[i] - guess[i] ) ; } return result; }
H-34	-0.41864335536956787	public static int[] compare ( int[] game, int[] guess ) { int [] result = new int[game.length]; for ( int i = 0 ; game.length > i ; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } return result ; }
D-34	-0.41864335536956787	public static int[] compare ( int[] game, int[] guess ) { int [] result = new int[game.length]; for ( int i = 0 ; game.length > i ; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } return result ; }
P-34	-0.0976 -0.0452 -0.1002 -1.9189 -0.0307 -0.1146 -0.0934 -2.0187 -0.0598 -1.1815 -0.0938 -1.9493 -0.0520 -0.0765 -0.0866 -0.0952 -2.8911 -0.0655 -0.0910 -0.0744 -0.0637 -0.7711 -0.0646 -0.0955 -0.0547 -2.1092 -0.1660 -0.1192 -0.0619 -0.0825 -0.0928 -1.8413 -0.0880 -0.3131 -0.1730 -0.0651 -0.1892 -0.1811 -0.3890 -0.0855 -0.2562 -0.2240 -0.0812 -0.0892 -0.2618 -1.1823 -0.2986 -0.2492 -0.1274 -3.3318 -0.0955 -0.0938 -0.0290 -0.1063 -0.0695 -1.2083 -0.3261 -0.3243 -0.0854 -1.1652 -0.2319 -0.3246 -0.1562 -0.1089 -0.1318 -0.1349 -0.0945 -0.2166 -0.0817 -0.0761
S-396	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( "" + N ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-396	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( "" + N ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-396	-0.2258620411157608	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( "" + N ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-396	-0.2258620411157608	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( "" + N ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-396	-0.0866 -0.0497 -1.4305 -0.0263 -0.1086 -0.1116 -0.1058 -0.0844 -0.0896 -0.1322 -0.0644 -0.0919 -1.1368 -0.1258 -0.1087 -0.0732 -0.0705 -0.0966 -1.1583 -0.0845 -0.1291 -0.1332 -0.1063 -0.0562 -0.1688 -0.0904 -0.2171 -0.1058 -0.1341 -0.0901 -0.0843 -0.1187 -0.2146 -0.0862 -0.0940 -0.1504 -0.0609 -1.1923 -0.0928 -1.2632 -0.1135 -0.3564 -0.0923 -0.0517 -0.2301 -0.0942 -0.1520 -0.0474 -0.1199 -0.5367 -0.3732 -0.7054 -0.6709 -0.1570 -0.1440 -0.0913 -0.1039 -0.1297 -0.0962 -0.0989 -0.1291 -1.0845 -0.0933 -0.1186 -0.0236 -0.0478 -0.1018 -0.1112 -0.1090 -0.0932 -0.0825 -0.0783
S-186	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( "" + N ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-186	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( "" + N ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-186	-0.2258620411157608	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( "" + N ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-186	-0.2258620411157608	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( "" + N ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( "" + N ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-186	-0.0866 -0.0497 -1.4305 -0.0263 -0.1086 -0.1116 -0.1058 -0.0844 -0.0896 -0.1322 -0.0644 -0.0919 -1.1368 -0.1258 -0.1087 -0.0732 -0.0705 -0.0966 -1.1583 -0.0845 -0.1291 -0.1332 -0.1063 -0.0562 -0.1688 -0.0904 -0.2171 -0.1058 -0.1341 -0.0901 -0.0843 -0.1187 -0.2146 -0.0862 -0.0940 -0.1504 -0.0609 -1.1923 -0.0928 -1.2632 -0.1135 -0.3564 -0.0923 -0.0517 -0.2301 -0.0942 -0.1520 -0.0474 -0.1199 -0.5367 -0.3732 -0.7054 -0.6709 -0.1570 -0.1440 -0.0913 -0.1039 -0.1297 -0.0962 -0.0989 -0.1291 -1.0845 -0.0933 -0.1186 -0.0236 -0.0478 -0.1018 -0.1112 -0.1090 -0.0932 -0.0825 -0.0783
S-82	public static String solve ( int N ) { int sum = 0; for ( int i = 0; ( N + "" ) .length () > i; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-82	public static String solve ( int N ) { int sum = 0; for ( int i = 0; ( N + "" ) .length () > i; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-82	-0.2343902736902237	public static String solve ( int N ) { int sum = 0; for ( int i = 0; ( N + "" ) .length () > i ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-82	-0.2343902736902237	public static String solve ( int N ) { int sum = 0; for ( int i = 0; ( N + "" ) .length () > i ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-82	-0.0877 -0.0497 -1.4006 -0.0264 -0.1076 -0.1095 -0.1250 -0.0817 -0.0907 -0.1382 -0.0653 -0.0913 -1.0470 -0.1278 -0.1099 -0.0715 -0.0697 -0.0958 -0.9951 -0.1758 -0.4329 -0.1428 -0.0908 -0.0865 -0.2477 -0.1819 -0.0902 -0.1817 -0.1448 -0.2574 -0.0983 -0.1139 -0.2248 -0.0861 -0.0906 -0.1403 -0.0594 -1.1355 -0.0925 -1.3550 -0.1045 -0.4591 -0.1843 -0.0599 -0.0760 -0.0804 -0.1678 -0.0673 -0.1171 -0.4266 -0.4257 -0.7768 -0.5811 -0.1546 -0.2021 -0.0939 -0.0986 -0.1302 -0.0924 -0.1055 -0.1397 -1.1702 -0.0920 -0.0988 -0.0238 -0.0484 -0.1015 -0.1175 -0.1098 -0.0942 -0.0826 -0.0748
S-47	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( 1 + i ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-47	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, 1 + i ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-47	-0.24264612793922424	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-47	-0.24264612793922424	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-47	-0.0866 -0.0497 -1.4271 -0.0270 -0.1083 -0.1079 -0.1283 -0.0831 -0.0911 -0.1324 -0.0661 -0.0914 -1.1622 -0.1282 -0.1086 -0.0723 -0.0738 -0.0999 -1.1595 -0.0853 -0.1304 -0.1328 -0.1893 -0.0728 -0.0918 -0.0836 -0.1909 -0.0999 -0.1354 -0.0894 -0.0843 -0.1078 -0.2280 -0.0833 -0.0937 -0.1484 -0.0597 -1.2164 -0.0923 -1.2449 -0.1137 -0.3670 -0.2014 -0.0579 -0.0720 -0.0789 -0.1662 -0.0482 -0.1157 -1.5209 -0.1964 -0.6653 -0.9115 -0.2128 -0.3599 -0.0910 -0.0928 -0.1262 -0.0955 -0.0937 -0.1285 -1.0454 -0.0920 -0.1182 -0.0235 -0.0475 -0.1012 -0.1080 -0.1049 -0.0919 -0.0809 -0.0776
S-74	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string.substring ( 1 + i ) ) ; } return result; }
T-74	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string.substring ( 0, 1 + i ) ) ; } return result; }
H-74	-0.2565942704677582	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0 ; i < string.length () ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-74	-0.2565942704677582	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0 ; i < string.length () ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-74	-0.1008 -0.0489 -0.3346 -0.3723 -0.0723 -0.1931 -0.0479 -0.0980 -0.0192 -0.1187 -1.3147 -0.0819 -0.0909 -0.0849 -0.3065 -0.3474 -0.0692 -0.1778 -0.0694 -0.0808 -0.0647 -1.9546 -0.3688 -0.0772 -0.1464 -0.0662 -0.0819 -0.2061 -0.1123 -0.0766 -0.0779 -0.0952 -1.6863 -0.0849 -0.1040 -0.0883 -0.4089 -0.2030 -0.1065 -0.0737 -0.0856 -0.0799 -0.2087 -0.2419 -0.0842 -0.0890 -0.1875 -0.7516 -0.3949 -0.1093 -0.0761 -0.1435 -0.7398 -0.1170 -0.9929 -0.1258 -0.9437 -1.0415 -0.2706 -0.1829 -0.0864 -0.1163 -0.1077 -0.1224 -0.0898 -0.1116 -0.0754 -0.1222 -0.0779 -0.0723
S-46	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0; string.length () > i; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } return result; }
T-46	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0; string.length () > i; i += 1 ) { result.add ( string.substring ( 0, i + 1 ) ) ; } return result; }
H-46	-0.24451987445354462	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0 ; i < ( string.length () ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-46	-0.24451987445354462	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0 ; i < ( string.length () ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-46	-0.1027 -0.0483 -0.3350 -0.3844 -0.0723 -0.1980 -0.0501 -0.0993 -0.0198 -0.1190 -1.2287 -0.0843 -0.0908 -0.0860 -0.3087 -0.3672 -0.0692 -0.1840 -0.0694 -0.0807 -0.0658 -1.9515 -0.3778 -0.0762 -0.1470 -0.0660 -0.0814 -0.2658 -0.1129 -0.0734 -0.0775 -0.0879 -1.9499 -0.0812 -1.1633 -0.1230 -0.0573 -0.0634 -0.2014 -0.0867 -0.1042 -0.0939 -0.1079 -0.0825 -0.2750 -0.1756 -0.0870 -0.0852 -0.1717 -0.4169 -0.3458 -0.1080 -0.0569 -0.1142 -0.7394 -0.1237 -0.2629 -0.2313 -0.9321 -0.6223 -0.2716 -0.1399 -0.0843 -0.0968 -0.1050 -0.1206 -0.0934 -0.1008 -0.0740 -0.1300 -0.0746 -0.0709
S-32	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; for ( int i = 0; i < n; i++ ) { pile.add ( n - i * 2 ) ; } return pile; }
T-32	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; for ( int i = 0; i < n; i++ ) { pile.add ( 2 * i + n ) ; } return pile; }
H-32	-0.23767957091331482	public static java.util.ArrayList <Integer > make_a_pile ( int n ) { java.util.ArrayList <Integer > pile = new java.util.ArrayList <> () ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - i ) ; } return pile ; }
D-32	-0.23767957091331482	public static java.util.ArrayList <Integer > make_a_pile ( int n ) { java.util.ArrayList <Integer > pile = new java.util.ArrayList <> () ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - i ) ; } return pile ; }
P-32	-0.1112 -0.0529 -3.4113 -0.0550 -0.7981 -0.1166 -0.5515 -0.9352 -0.1856 -0.8322 -0.0467 -0.1011 -0.0427 -0.1039 -0.0313 -0.0236 -0.1452 -0.1810 -0.0776 -0.0828 -0.0835 -0.3791 -0.0718 -0.0596 -0.0744 -0.1002 -0.1444 -0.0964 -0.1839 -0.0892 -0.0280 -0.0699 -0.0467 -0.0540 -0.0867 -0.0512 -0.1070 -0.0609 -0.1054 -1.0919 -0.0447 -0.0936 -0.1123 -0.1055 -0.0611 -0.0784 -0.0830 -1.2320 -0.0934 -0.0870 -0.1359 -0.2339 -0.0863 -1.0569 -0.0765 -0.0832 -0.0855 -0.0292 -0.4290 -0.3099 -0.1002 -0.3362 -0.1127 -0.1080 -0.3585 -0.0935 -0.1143 -0.3580 -0.0710 -0.0292 -0.1426 -0.0725 -0.0669
S-300	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length () ; i += 1 ) { if ( b.charAt ( i ) == a.charAt ( i ) ) { result += "0"; } } return result; }
T-300	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length () ; i += 1 ) { if ( b.charAt ( i ) == a.charAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-300	-0.3158162236213684	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length () ) ; i += 1 ) { if ( b.charAt ( i ) == a.charAt ( i ) ) { result += "0"; } } return result ; }
D-300	-0.3158162236213684	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length () ) ; i += 1 ) { if ( b.charAt ( i ) == a.charAt ( i ) ) { result += "0"; } } return result ; }
P-300	-0.1006 -0.0578 -1.3092 -0.0673 -0.0863 -0.0189 -0.1137 -0.9681 -0.1216 -1.2250 -0.7026 -0.0783 -0.0823 -0.0848 -1.5314 -0.0770 -0.0785 -2.0022 -0.1474 -0.1091 -0.0755 -0.0766 -0.0839 -1.3939 -0.0960 -0.1089 -1.2682 -0.5091 -0.2131 -0.1106 -0.1215 -0.1158 -0.1082 -0.0789 -0.1059 -0.1559 -0.0795 -0.0896 -0.1260 -0.1137 -0.2253 -0.4490 -1.2188 -0.1184 -0.1237 -0.0883 -0.4052 -0.1767 -0.1217 -0.9443 -0.1226 -0.1344 -0.0832 -0.0885 -0.0799 -0.1402 -0.0915 -0.1677 -1.1164 -0.1815 -0.1380 -0.1354 -0.1064 -0.2315 -0.0894 -0.0732
S-142	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; a.length () > i; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result; }
T-142	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; a.length () > i; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-142	-0.3074915111064911	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0 ; i < ( a.length () ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
D-142	-0.3074915111064911	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0 ; i < ( a.length () ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
P-142	-0.1029 -0.0565 -1.3027 -0.0706 -0.0882 -0.0187 -0.1137 -0.9343 -0.1201 -1.1522 -0.6397 -0.0827 -0.0829 -0.0860 -1.4815 -0.0770 -0.0793 -2.0140 -0.1489 -0.1109 -0.0753 -0.0720 -0.0844 -2.8877 -0.1255 -1.0246 -0.1903 -0.0716 -0.3570 -0.1092 -0.0993 -0.1373 -0.1384 -0.2078 -0.0730 -0.2124 -0.1614 -0.0833 -0.0869 -0.1238 -0.1120 -0.1553 -0.1196 -1.0050 -0.1135 -0.0947 -0.0862 -0.2982 -0.0791 -0.1000 -0.6659 -0.1074 -0.0850 -0.0874 -0.0837 -0.0807 -0.1093 -0.0696 -0.0929 -1.0470 -0.1290 -0.1030 -0.0990 -0.0899 -0.3522 -0.0824 -0.0697
S-284	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; for ( int i = 0; n > i; i++ ) { pile.add ( n - 2 * i ) ; } return pile; }
T-284	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; for ( int i = 0; n > i; i++ ) { pile.add ( n + 2 * i ) ; } return pile; }
H-284	-0.2304292917251587	public static java.util.ArrayList <Integer > make_a_pile ( int n ) { java.util.ArrayList <Integer > pile = new java.util.ArrayList <> () ; for ( int i = 0; n > i ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
D-284	-0.2304292917251587	public static java.util.ArrayList <Integer > make_a_pile ( int n ) { java.util.ArrayList <Integer > pile = new java.util.ArrayList <> () ; for ( int i = 0; n > i ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
P-284	-0.1100 -0.0536 -3.5012 -0.0555 -0.8443 -0.1182 -0.5384 -0.9543 -0.1930 -0.7034 -0.0469 -0.1012 -0.0419 -0.1032 -0.0316 -0.0234 -0.1468 -0.1586 -0.0766 -0.0813 -0.0834 -0.4030 -0.0719 -0.0651 -0.0757 -0.0987 -0.1451 -0.1067 -0.1495 -0.0819 -0.0282 -0.0718 -0.0475 -0.0549 -0.0853 -0.0511 -0.1047 -0.0586 -0.1014 -1.0199 -0.0469 -0.0932 -0.1148 -0.1068 -0.0570 -0.0737 -0.0815 -1.2899 -0.1231 -0.1755 -0.1838 -0.3772 -0.0906 -1.1777 -0.0717 -0.0852 -0.0848 -0.0298 -0.3838 -0.2875 -0.1004 -0.1262 -0.1211 -0.1652 -0.1466 -0.1032 -0.0908 -0.0897 -0.0761 -0.1591 -0.0737 -0.0297 -0.1357 -0.0720 -0.0704
S-369	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; xs.size () > i; i += 1 ) result.add ( xs.get ( i ) ) ; return result; }
T-369	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 1; xs.size () > i; i += 1 ) result.add ( i * xs.get ( i ) ) ; return result; }
H-369	-0.22222039103507996	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( xs.size () ) ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
D-369	-0.22222039103507996	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( xs.size () ) ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
P-369	-0.0987 -0.0429 -0.3631 -0.3148 -0.0611 -0.1624 -0.0114 -0.1071 -0.3686 -0.2712 -0.0561 -0.1882 -0.0859 -0.0838 -0.0846 -0.3508 -0.3908 -0.0614 -0.1877 -0.0536 -0.0781 -0.0610 -2.0141 -0.3559 -0.0639 -0.1421 -0.0661 -0.0814 -0.2623 -0.1148 -0.0653 -0.0704 -0.0929 -1.6870 -0.0768 -0.5311 -0.0852 -0.0891 -0.0673 -0.2043 -1.0630 -0.0785 -0.0847 -0.1096 -0.0787 -0.4935 -0.1935 -0.0850 -0.1353 -0.4096 -0.4193 -0.1043 -0.1264 -0.2078 -0.4016 -0.1147 -0.1026 -0.0896 -0.0899 -0.0828 -0.0982 -0.0607 -0.1074 -0.0824 -0.0721
S-279	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( str.length () - 1 - i ) != str.charAt ( i ) ) return false; } return true; }
T-279	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( str.length () - 1 - i ) != str.charAt ( i ) ) return false; } return true; }
H-279	-0.25980639457702637	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( str.length () - 1 ) != str.charAt ( i ) ) return false ; } return true ; }
D-279	-0.25980639457702637	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( str.length () - 1 ) != str.charAt ( i ) ) return false ; } return true ; }
P-279	-0.0991 -0.0544 -0.0867 -0.0669 -0.0883 -0.0160 -0.0060 -0.1174 -1.0164 -0.0697 -0.0883 -0.0860 -0.2966 -0.1151 -0.0775 -0.0686 -0.1043 -1.6899 -0.0894 -0.1280 -0.6210 -0.1427 -0.0863 -0.0897 -0.0876 -0.0773 -0.1083 -0.1673 -0.0800 -0.1012 -0.1249 -0.1177 -0.4261 -0.1890 -1.0734 -0.1138 -1.3635 -0.1329 -0.1136 -0.0741 -0.9397 -0.9183 -0.3580 -0.2563 -0.1263 -0.1307 -1.0050 -0.1084 -0.2485 -0.0878 -0.0981 -0.1512 -0.0799 -0.6003 -0.1404 -0.1095 -0.0926 -0.3139 -0.0891 -0.0795
S-247	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; ( int ) Math.sqrt ( n ) + 1 > i; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-247	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; ( int ) Math.sqrt ( n ) + 1 > i; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-247	-0.22329500317573547	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; ( int ) Math.sqrt ( n ) + 1 > i ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-247	-0.22329500317573547	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; ( int ) Math.sqrt ( n ) + 1 > i ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-247	-0.0972 -0.0580 -0.0865 -0.0671 -0.0939 -0.0247 -0.1201 -0.0954 -0.0736 -0.0852 -0.0841 -0.2436 -0.1120 -0.0870 -0.1215 -0.1008 -0.0904 -0.0879 -0.0811 -1.3007 -0.3267 -0.1131 -0.0706 -0.0752 -0.0979 -0.8527 -0.2245 -0.0948 -0.0863 -2.0939 -0.1019 -0.8831 -0.1053 -0.0734 -0.0923 -0.2111 -0.2551 -0.2245 -0.1230 -0.4653 -0.0843 -0.1175 -0.4083 -0.0863 -0.0979 -0.1257 -0.1160 -0.2441 -0.2306 -0.1398 -0.2519 -0.1423 -0.0873 -0.1104 -0.0765 -0.8382 -0.1541 -0.1317 -0.0776 -0.4675 -0.0869 -0.0878
S-220	public static boolean is_palindrome ( String str ) { for ( int i = 0; str.length () > i; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; } return true; }
T-220	public static boolean is_palindrome ( String str ) { for ( int i = 0; str.length () > i; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; } return true; }
H-220	-0.23936650156974792	public static boolean is_palindrome ( String str ) { for ( int i = 0; str.length () > i ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - i ) ) return false ; } return true ; }
D-220	-0.23936650156974792	public static boolean is_palindrome ( String str ) { for ( int i = 0; str.length () > i ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - i ) ) return false ; } return true ; }
P-220	-0.1007 -0.0539 -0.0875 -0.0681 -0.0887 -0.0159 -0.0059 -0.1172 -0.9839 -0.0691 -0.0889 -0.0871 -0.3551 -0.1158 -0.0749 -0.0649 -0.0991 -1.4857 -0.5684 -0.1634 -0.0994 -0.0751 -0.1373 -0.1405 -0.4306 -0.0829 -0.1216 -0.1942 -0.0830 -0.0976 -0.1184 -0.1198 -0.3983 -0.1628 -0.8870 -0.1150 -0.1730 -0.0854 -0.3046 -0.1482 -0.1266 -0.8526 -0.1176 -0.8242 -0.1138 -0.1085 -0.0634 -0.2430 -1.2648 -0.0886 -0.0889 -0.1484 -0.0789 -0.6565 -0.1595 -0.1260 -0.1058 -0.3603 -0.0896 -0.0760
S-195	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < 1 + ( int ) Math.sqrt ( n ) ; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-195	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < 1 + ( int ) Math.sqrt ( n ) ; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-195	-0.21962638199329376	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < 1 + ( int ) Math.sqrt ( n ) ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-195	-0.21962638199329376	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < 1 + ( int ) Math.sqrt ( n ) ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-195	-0.0962 -0.0584 -0.0847 -0.0667 -0.0926 -0.0234 -0.1191 -0.0937 -0.0709 -0.0847 -0.0831 -0.2432 -0.1115 -0.0818 -0.1525 -0.1179 -0.0891 -0.0868 -0.0796 -1.2265 -0.3016 -0.1107 -0.0766 -0.0814 -0.1003 -1.0247 -0.1080 -0.1553 -0.4304 -0.1516 -0.1403 -0.1136 -0.0967 -2.0971 -0.1037 -1.0519 -0.1051 -0.0693 -0.0934 -0.1019 -0.0825 -0.1238 -0.3298 -0.0859 -0.0968 -0.1349 -0.1150 -0.2557 -0.2442 -0.1520 -0.2902 -0.1436 -0.0875 -0.1083 -0.0747 -0.7804 -0.1427 -0.1225 -0.0782 -0.4160 -0.0871 -0.0893
S-342	public static boolean is_prime ( int n ) { if ( 2 > n ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-342	public static boolean is_prime ( int n ) { if ( 2 > n ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-342	-0.2456222027540207	public static boolean is_prime ( int n ) { if ( 2 > n ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-342	-0.2456222027540207	public static boolean is_prime ( int n ) { if ( 2 > n ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-342	-0.0974 -0.0579 -0.0896 -0.0675 -0.0940 -0.0273 -0.1202 -0.0953 -0.0711 -0.0867 -0.0866 -0.2615 -0.1115 -0.2569 -0.1586 -0.0933 -0.0907 -0.0940 -0.0870 -1.3685 -0.3108 -0.1140 -0.0754 -0.0802 -0.0966 -0.9015 -0.1054 -0.1843 -0.1134 -0.1798 -0.0998 -2.3912 -0.1028 -0.9540 -0.1072 -0.0721 -0.0944 -0.3163 -1.1540 -0.0870 -0.0892 -0.2572 -0.0836 -0.0955 -0.1298 -0.1169 -0.2665 -0.2719 -0.1510 -0.3472 -0.1475 -0.0884 -0.1121 -0.0794 -0.8516 -0.1539 -0.1329 -0.0770 -0.4052 -0.0868 -0.0838
S-278	public static double poly ( List<Double> xs, double x ) { double sum = 0; for ( int i = 0; xs.size () > i; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; }
T-278	public static double poly ( List<Double> xs, double x ) { double sum = 0; for ( int i = 0; xs.size () > i; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; }
H-278	-0.281028687953949	public static double poly ( List<Double> xs, double x ) { double sum = 0.0 ; for ( int i = 0; xs.size () > i ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x , i ) ; } return sum ; }
D-278	-0.281028687953949	public static double poly ( List<Double> xs, double x ) { double sum = 0.0 ; for ( int i = 0; xs.size () > i ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x , i ) ; } return sum ; }
P-278	-0.0902 -0.0535 -0.1090 -0.0298 -0.1097 -0.4430 -0.3121 -0.0357 -0.1994 -0.0845 -1.6021 -0.1523 -0.1333 -0.0951 -0.0813 -0.1237 -0.0717 -0.0858 -2.7384 -0.2303 -0.1372 -0.1139 -0.0771 -0.0700 -0.0875 -1.2323 -0.3107 -0.1329 -0.1474 -0.0724 -0.1586 -0.1161 -0.4942 -0.0827 -0.1087 -0.1627 -0.0810 -0.0838 -0.1703 -0.0903 -0.1757 -0.1221 -0.2379 -0.1195 -0.1108 -0.0931 -0.1116 -2.6351 -0.0964 -0.0575 -0.1043 -0.1174 -1.6714 -0.1779 -0.0911 -0.1056 -0.1018 -0.1217 -0.0957 -0.2089 -0.0887 -0.0686
S-158	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( 0 == n % i ) return false; } return true; }
T-158	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( 0 == n % i ) return false; } return true; }
H-158	-0.25757232308387756	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( 0 == n % i ) return false ; } return true ; }
D-158	-0.25757232308387756	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( 0 == n % i ) return false ; } return true ; }
P-158	-0.0974 -0.0583 -0.0883 -0.0680 -0.0946 -0.0259 -0.1203 -0.0957 -0.0690 -0.0840 -0.0844 -0.2445 -0.1129 -0.1139 -0.1435 -0.1103 -0.0911 -0.0892 -0.0807 -1.3996 -0.3489 -0.1142 -0.0765 -0.0772 -0.1002 -1.0152 -0.1026 -0.1910 -0.1125 -0.1551 -0.0993 -2.2476 -0.1030 -0.9426 -0.1075 -0.0693 -0.0925 -0.3219 -1.1695 -0.0860 -0.0860 -0.2763 -0.0854 -0.0950 -0.1304 -0.1140 -0.7087 -0.1607 -0.4393 -0.5113 -0.1963 -0.0877 -0.1046 -0.0755 -0.9200 -0.1500 -0.1331 -0.0755 -0.3851 -0.0863 -0.0864
S-29	public static double poly ( List<Double> xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size () ; i += 1 ) { sum += Math.pow ( x, i ) * xs.get ( i ) ; } return sum; }
T-29	public static double poly ( List<Double> xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size () ; i += 1 ) { sum += Math.pow ( x, i ) * xs.get ( i ) ; } return sum; }
H-29	-0.34583938121795654	public static double poly ( List<Double> xs, double x ) { double sum = 0 ; for ( int i = 0 ; i < xs.size () ; i += 1 ) { sum += ( ( xs.get ( i ) ) * ( xs.get ( i ) ) ) * ( xs.get ( i ) ) ; } return sum ; }
D-29	-0.34583938121795654	public static double poly ( List<Double> xs, double x ) { double sum = 0 ; for ( int i = 0 ; i < xs.size () ; i += 1 ) { sum += ( ( xs.get ( i ) ) * ( xs.get ( i ) ) ) * ( xs.get ( i ) ) ; } return sum ; }
P-29	-0.0890 -0.0548 -0.1051 -0.0311 -0.1089 -0.4434 -0.3059 -0.0360 -0.1989 -0.0864 -1.6912 -0.1547 -0.1423 -0.0906 -0.0807 -0.1260 -0.0727 -0.0863 -1.6856 -0.0948 -0.1432 -0.1101 -0.0841 -0.0738 -0.0913 -2.1932 -0.0831 -0.0880 -0.0831 -0.3105 -0.1288 -0.1640 -0.0761 -0.0858 -0.0832 -0.1639 -0.1850 -0.0839 -0.0907 -0.2325 -0.0723 -1.5034 -1.3722 -2.0609 -0.2498 -1.4847 -0.1395 -0.1191 -0.1871 -0.1421 -0.6200 -0.9702 -1.2248 -0.2063 -1.1406 -0.1079 -0.1267 -0.1139 -0.2563 -0.0868 -0.3568 -0.2840 -0.4443 -0.1840 -1.3050 -0.1151 -0.1380 -0.0902 -0.1984 -0.0883 -0.1195 -0.1185 -0.0937 -0.1703 -0.0857 -0.0688
S-189	public static int add_even_at_odd ( int[] lst ) { int sum = 0; for ( int i = 0; lst.length > i; i += 1 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum; }
T-189	public static int add_even_at_odd ( int[] lst ) { int sum = 0; for ( int i = 1; lst.length > i; i += 2 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum; }
H-189	-0.2762865722179413	public static int add_even_at_odd ( int [] lst ) { int sum = 0 ; for ( int i = 0 ; i < ( lst.length ) ; i += 1 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
D-189	-0.2762865722179413	public static int add_even_at_odd ( int [] lst ) { int sum = 0 ; for ( int i = 0 ; i < ( lst.length ) ; i += 1 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
P-189	-0.1065 -0.0483 -0.1454 -0.0858 -0.1170 -0.0331 -0.0970 -0.0484 -0.1137 -0.0080 -0.1155 -0.1218 -2.0616 -0.0610 -0.0860 -0.0866 -0.1244 -0.0721 -0.0864 -1.6416 -0.1180 -0.1550 -0.1088 -0.0738 -0.0939 -0.0907 -2.1043 -0.1022 -0.6929 -0.1419 -0.0673 -0.1094 -0.0551 -0.0296 -0.1262 -0.1758 -0.0863 -0.1776 -0.1960 -0.0860 -0.0881 -0.1286 -0.1124 -0.2513 -1.1337 -0.3831 -0.2652 -0.5673 -0.0664 -0.1241 -0.0893 -0.0824 -0.1433 -0.0967 -0.0976 -0.6761 -0.2220 -2.2968 -0.0916 -0.1557 -0.1162 -0.2758 -0.0881 -0.0796
S-58	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( text.length () - i ) == text.charAt ( i ) ) return true; } return false; }
T-58	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( text.length () - i - 1 ) != text.charAt ( i ) ) return false; } return true; }
H-58	-0.23445500433444977	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( text.length () ) == text.charAt ( i ) ) return true ; } return false ; }
D-58	-0.23445500433444977	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( text.length () ) == text.charAt ( i ) ) return true ; } return false ; }
P-58	-0.1005 -0.0576 -0.0829 -0.0672 -0.0896 -0.0169 -0.0053 -0.1161 -0.9952 -0.0559 -0.0897 -0.0859 -0.2668 -0.1157 -0.0717 -0.0780 -0.1011 -1.9575 -0.0986 -0.1237 -0.3823 -0.1481 -0.0929 -0.0933 -0.0880 -0.0823 -0.1116 -0.1766 -0.0812 -0.1039 -0.1334 -0.1140 -0.1845 -0.2123 -1.2384 -0.1171 -0.8547 -0.1161 -0.1301 -0.0764 -0.9444 -0.3158 -0.1769 -0.1280 -0.9953 -0.1124 -0.2376 -0.0842 -0.0920 -0.1440 -0.0716 -0.5336 -0.1036 -0.0945 -0.0432 -0.2403 -0.0841 -0.0839
S-23	public static boolean is_palindrome ( String text ) { for ( int i = 0; text.length () > i; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true; } return false; }
T-23	public static boolean is_palindrome ( String text ) { for ( int i = 0; text.length () > i; i += 1 ) { if ( text.charAt ( i ) != text.charAt ( text.length () - i - 1 ) ) return false; } return true; }
H-23	-0.21287642419338226	public static boolean is_palindrome ( String text ) { for ( int i = 0; text.length () > i ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true ; } return false ; }
D-23	-0.21287642419338226	public static boolean is_palindrome ( String text ) { for ( int i = 0; text.length () > i ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true ; } return false ; }
P-23	-0.1027 -0.0567 -0.0846 -0.0680 -0.0893 -0.0171 -0.0053 -0.1169 -0.9611 -0.0550 -0.0902 -0.0876 -0.3108 -0.1172 -0.0688 -0.0765 -0.0948 -1.7045 -0.3800 -0.1892 -0.1086 -0.0754 -0.1451 -0.1544 -0.4247 -0.0942 -0.1273 -0.2148 -0.0838 -0.1001 -0.1382 -0.1163 -0.1599 -0.1666 -1.0710 -0.1159 -0.1894 -0.0855 -0.3195 -0.0660 -0.1216 -0.9352 -0.1193 -0.4820 -0.1184 -0.1287 -0.0669 -0.3647 -0.2260 -0.0886 -0.0903 -0.1703 -0.0764 -0.4458 -0.1359 -0.1055 -0.0449 -0.2509 -0.0853 -0.0829
S-330	public static int add_even_at_odd ( int[] lst ) { int sum = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( 0 == lst[i] % 2 ) sum += lst[i]; } return sum; }
T-330	public static int add_even_at_odd ( int[] lst ) { int sum = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( 0 == lst[i] % 2 ) sum += lst[i]; } return sum; }
H-330	-0.3298684358596802	public static int add_even_at_odd ( int [] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( 0 == lst[i] ) sum += lst[i]; } return sum ; }
D-330	-0.3298684358596802	public static int add_even_at_odd ( int [] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( 0 == lst[i] ) sum += lst[i]; } return sum ; }
P-330	-0.1067 -0.0483 -0.1447 -0.0863 -0.1178 -0.0331 -0.0972 -0.0471 -0.1140 -0.0079 -0.1160 -0.1203 -1.9512 -0.0631 -0.0858 -0.0863 -0.1231 -0.0699 -0.0860 -1.5363 -0.1165 -0.1399 -0.1071 -0.0726 -0.0924 -0.0878 -2.0073 -0.1407 -0.0953 -0.0813 -0.9395 -0.0561 -0.0505 -1.0074 -0.0883 -0.1458 -0.2108 -0.0853 -0.0948 -0.1360 -0.1139 -0.5776 -0.1423 -0.7294 -1.2075 -0.4869 -0.3956 -0.1331 -0.4081 -0.1153 -0.1328 -0.8962 -0.2680 -2.5406 -0.1586 -0.1454 -0.1187 -0.2558 -0.0924 -0.0777
S-315	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( 0 == n % i ) return x; } return y; }
T-315	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( 0 == n % i ) return y; } return x; }
H-315	-0.27647942304611206	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2 ; i < n ; i += 1 ) { if ( 0 == n % i ) return x ; } return y ; }
D-315	-0.27647942304611206	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2 ; i < n ; i += 1 ) { if ( 0 == n % i ) return x ; } return y ; }
P-315	-0.1041 -0.0449 -0.1236 -0.1406 -0.0846 -0.0560 -0.0930 -0.0419 -0.1083 -0.0957 -0.0906 -1.5343 -0.1000 -0.1594 -1.6432 -0.0715 -0.0856 -0.0843 -0.0856 -0.4162 -0.1168 -0.1608 -0.1158 -0.2977 -0.0901 -0.0977 -0.2293 -1.0575 -0.3666 -0.1176 -0.0817 -0.0787 -0.1018 -2.1624 -0.2479 -0.0914 -0.3157 -0.1845 -0.7110 -0.0752 -0.1177 -0.2733 -0.0829 -0.0921 -0.1354 -0.1088 -0.3354 -0.1100 -0.3770 -0.4569 -0.1429 -0.0875 -0.0973 -0.2701 -1.1469 -0.1103 -0.1380 -0.1331 -0.6196 -0.0861 -0.0800
S-227	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; n > i; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-227	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; n > i; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-227	-0.2633000314235687	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; n > i ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-227	-0.2633000314235687	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; n > i ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-227	-0.1022 -0.0449 -0.1215 -0.1396 -0.0840 -0.0560 -0.0936 -0.0425 -0.1083 -0.0951 -0.0925 -1.3885 -0.0988 -0.1569 -1.5820 -0.0712 -0.0854 -0.0843 -0.0855 -0.4117 -0.1167 -0.1324 -0.1204 -0.3664 -0.0894 -0.0965 -0.2150 -1.1208 -0.4041 -0.1186 -0.0793 -0.0819 -0.0989 -1.5767 -0.1349 -0.3093 -0.1999 -0.7989 -0.0983 -0.1567 -0.2826 -0.0819 -0.0971 -0.1361 -0.1152 -0.2232 -0.2382 -0.1176 -0.2029 -0.1290 -0.0894 -0.1246 -0.3232 -1.1415 -0.1455 -0.1635 -0.1457 -0.6138 -0.0882 -0.0796
S-203	public static int x_or_y ( int n, int x, int y ) { if ( 1 == n ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-203	public static int x_or_y ( int n, int x, int y ) { if ( 1 == n ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-203	-0.282772958278656	public static int x_or_y ( int n, int x, int y ) { if ( 1 == n ) return y ; for ( int i = 2 ; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-203	-0.282772958278656	public static int x_or_y ( int n, int x, int y ) { if ( 1 == n ) return y ; for ( int i = 2 ; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-203	-0.1036 -0.0446 -0.1224 -0.1396 -0.0846 -0.0556 -0.0931 -0.0422 -0.1091 -0.0943 -0.0901 -1.6641 -0.0990 -0.1610 -1.6426 -0.0702 -0.0850 -0.0845 -0.0863 -0.4985 -0.1141 -1.0431 -0.1120 -0.1107 -0.0869 -0.1009 -0.1991 -1.1450 -0.3425 -0.1182 -0.0825 -0.0814 -0.1016 -2.0729 -0.2223 -0.0920 -0.3363 -0.1911 -0.6137 -0.0783 -0.1161 -0.2558 -0.0811 -0.0909 -0.1313 -0.1125 -0.2410 -0.2447 -0.1059 -0.1937 -0.1083 -0.0896 -0.0962 -0.2682 -1.2615 -0.1152 -0.1415 -0.1404 -0.6773 -0.0857 -0.0773
S-344	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; s.length () > i; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-344	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; s.length () > i; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-344	-0.2004002183675766	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; s.length () > i ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-344	-0.2004002183675766	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; s.length () > i ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-344	-0.0937 -0.0475 -0.1115 -0.0711 -0.0959 -0.0306 -0.1157 -0.8536 -0.1135 -0.0901 -0.0904 -0.1068 -0.0589 -0.0859 -1.3172 -0.1538 -0.1083 -0.0773 -0.0673 -0.0842 -1.4954 -0.4963 -0.2106 -0.0664 -0.0764 -0.1692 -0.1557 -0.4003 -0.0977 -0.1186 -0.1353 -0.0827 -0.0840 -0.1335 -0.0820 -0.0879 -0.0873 -0.1496 -0.8546 -0.1019 -0.1299 -0.0865 -0.0849 -0.1673 -0.1205 -0.3568 -0.2036 -0.0636 -0.1742 -0.0987 -0.1831 -0.1822 -0.1471 -0.0643 -0.1070 -0.0957 -0.2806 -0.1527 -0.1571 -0.0907 -0.1114 -0.1213 -0.3296 -0.1398 -0.1541 -0.0907 -0.0489 -0.1168 -0.9319 -0.1449 -0.1246 -0.0712 -0.0599 -0.1125 -0.0830 -0.3183 -0.1471 -1.2884 -0.1160 -0.1938 -0.0868 -0.0924 -0.1842 -0.0873 -0.0743
S-311	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'o' || c == 'A' || c == 'e' || c == 'I' || c == 'u' ) count += 1; } return count; }
T-311	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'O' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) count += 1; } return count; }
H-311	-0.19633640348911285	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'o' || c == 'A' || c == 'e' || c == 'I' || c == 'u' ) count += 1 ; } return count ; }
D-311	-0.19633640348911285	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'o' || c == 'A' || c == 'e' || c == 'I' || c == 'u' ) count += 1 ; } return count ; }
P-311	-0.0929 -0.0478 -0.1097 -0.0705 -0.0959 -0.0297 -0.1159 -0.9238 -0.1151 -0.0887 -0.0900 -0.1061 -0.0594 -0.0856 -1.3809 -0.1491 -0.1083 -0.0790 -0.0731 -0.0854 -1.4626 -0.0865 -0.1219 -0.4689 -0.1438 -0.0776 -0.0932 -0.0896 -0.0842 -0.1151 -0.1379 -0.0820 -0.0862 -0.1299 -0.0802 -0.0881 -0.0892 -0.1576 -0.9436 -0.1015 -0.1225 -0.0878 -0.0856 -0.1687 -0.1186 -0.3464 -0.1966 -0.0574 -0.0831 -0.0978 -0.1954 -0.1758 -0.1615 -0.0600 -0.0818 -0.0988 -0.2364 -0.1441 -0.1381 -0.0793 -0.0850 -0.1006 -0.2753 -0.1365 -0.1420 -0.0787 -0.0891 -0.1182 -1.1672 -0.1365 -0.1223 -0.0741 -0.0536 -0.1155 -0.0844 -0.3268 -0.1497 -1.3373 -0.1163 -0.1879 -0.0886 -0.0910 -0.1638 -0.0902 -0.0758
S-305	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || 'u' == c ) count += 1; } return count; }
T-305	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) count += 1; } return count; }
H-305	-0.19920668005943298	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || 'u' == c ) count += 1 ; } return count ; }
D-305	-0.19920668005943298	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || 'u' == c ) count += 1 ; } return count ; }
P-305	-0.0932 -0.0483 -0.1088 -0.0706 -0.0959 -0.0299 -0.1158 -0.9228 -0.1159 -0.0887 -0.0900 -0.1052 -0.0599 -0.0851 -1.3847 -0.1501 -0.1083 -0.0791 -0.0731 -0.0854 -1.4513 -0.0872 -0.1210 -0.4649 -0.1434 -0.0769 -0.0905 -0.0897 -0.0843 -0.1146 -0.1378 -0.0814 -0.0866 -0.1299 -0.0800 -0.0902 -0.0892 -0.1559 -0.9379 -0.1015 -0.1223 -0.0872 -0.0852 -0.1702 -0.1190 -0.3737 -0.2054 -0.0607 -0.1548 -0.0979 -0.1785 -0.1860 -0.1476 -0.0617 -0.1075 -0.0949 -0.2689 -0.1643 -0.1597 -0.0866 -0.1116 -0.1183 -0.3047 -0.1707 -0.1584 -0.0852 -0.0499 -0.1070 -0.8887 -0.2940 -0.0522 -0.0838 -0.3302 -0.1386 -0.0892 -0.2760 -0.1379 -1.2785 -0.1147 -0.1752 -0.0865 -0.0898 -0.1692 -0.0895 -0.0756
S-212	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( int ) ( 'a' ) + ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) ) ; sb.append ( c ) ; } return sb.toString () ; }
T-212	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( int ) ( 'a' ) + ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) ) ; sb.append ( c ) ; } return sb.toString () ; }
H-212	-0.21895872056484222	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( int ) ( 'a' ) + ( ( ( int ) ( 'a' ) ) % 26 ) ) ; sb.append ( c ) ; } return sb. toString () ; }
D-212	-0.21895872056484222	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( int ) ( 'a' ) + ( ( ( int ) ( 'a' ) ) % 26 ) ) ; sb.append ( c ) ; } return sb. toString () ; }
P-212	-0.0896 -0.0504 -1.5102 -0.0231 -0.0939 -0.0249 -0.1107 -1.0061 -0.0956 -0.0912 -0.0848 -1.3239 -0.0363 -0.0822 -0.0626 -0.6487 -0.0548 -0.0737 -0.2475 -0.1074 -0.2315 -0.0709 -0.0811 -0.0757 -0.1679 -0.0609 -0.0453 -0.0700 -0.1003 -0.0681 -0.3790 -0.1205 -0.1350 -0.1123 -0.0634 -0.1082 -0.1731 -0.2211 -0.0815 -0.1224 -0.0594 -0.0542 -0.0500 -0.0935 -0.7704 -0.1712 -0.1637 -0.4917 -0.1386 -0.0828 -0.7421 -0.5675 -0.0740 -0.0670 -0.1021 -0.1046 -0.2290 -0.0539 -0.0938 -0.0925 -0.1227 -0.0581 -0.1578 -1.1560 -0.1153 -0.1489 -0.0818 -0.0845 -0.1324 -0.1242 -0.0626 -0.3016 -1.5023 -0.0618 -0.0849 -0.0800 -0.0771
S-210	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'I' || c == 'A' || c == 'e' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-210	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'I' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-210	-0.1948789358139038	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'I' || c == 'A' || c == 'e' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-210	-0.1948789358139038	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'I' || c == 'A' || c == 'e' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-210	-0.0927 -0.0482 -0.1097 -0.0705 -0.0958 -0.0299 -0.1158 -0.9338 -0.1150 -0.0887 -0.0900 -0.1061 -0.0590 -0.0856 -1.3854 -0.1492 -0.1083 -0.0784 -0.0731 -0.0847 -1.4705 -0.0866 -0.1207 -0.4689 -0.1433 -0.0770 -0.0932 -0.0896 -0.0842 -0.1151 -0.1387 -0.0820 -0.0861 -0.1307 -0.0800 -0.0881 -0.0898 -0.1573 -0.9370 -0.1015 -0.1227 -0.0870 -0.0861 -0.1690 -0.1193 -0.3422 -0.1973 -0.0621 -0.1007 -0.1145 -0.1965 -0.1743 -0.1622 -0.0585 -0.0902 -0.1037 -0.2898 -0.1580 -0.1443 -0.0786 -0.1088 -0.1021 -0.3238 -0.1338 -0.1569 -0.0865 -0.0534 -0.1199 -0.8662 -0.1393 -0.1315 -0.0655 -0.0611 -0.1105 -0.0849 -0.3265 -0.1505 -1.3113 -0.1152 -0.1909 -0.0890 -0.0910 -0.1629 -0.0901 -0.0758
S-199	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( 'A' == c || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-199	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-199	-0.19431553781032562	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( 'A' == c || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-199	-0.19431553781032562	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( 'A' == c || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-199	-0.0929 -0.0475 -0.1090 -0.0706 -0.0959 -0.0300 -0.1159 -0.9124 -0.1152 -0.0886 -0.0899 -0.1056 -0.0589 -0.0856 -1.3447 -0.1472 -0.1088 -0.0778 -0.0730 -0.0854 -1.4435 -0.0872 -0.1211 -0.4568 -0.1441 -0.0769 -0.0925 -0.0897 -0.0844 -0.1146 -0.1361 -0.0814 -0.0862 -0.1285 -0.0782 -0.0893 -0.0900 -0.1576 -0.9343 -0.1014 -0.1243 -0.0876 -0.0863 -0.1691 -0.1209 -0.2847 -0.0762 -0.0939 -0.2545 -0.1266 -0.2478 -0.3110 -0.1775 -0.0481 -0.1133 -0.0977 -0.2305 -0.1712 -0.1516 -0.0743 -0.1148 -0.1204 -0.3019 -0.1473 -0.1471 -0.0805 -0.0480 -0.1147 -0.8114 -0.1452 -0.1237 -0.0612 -0.0602 -0.1123 -0.0829 -0.2833 -0.1405 -1.3124 -0.1171 -0.1858 -0.0862 -0.0910 -0.1680 -0.0889 -0.0760
S-187	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || 'o' == c || c == 'u' ) count += 1; } return count; }
T-187	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) count += 1; } return count; }
H-187	-0.19576895236968994	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || 'o' == c || c == 'u' ) count += 1 ; } return count ; }
D-187	-0.19576895236968994	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || 'o' == c || c == 'u' ) count += 1 ; } return count ; }
P-187	-0.0933 -0.0478 -0.1090 -0.0711 -0.0959 -0.0303 -0.1159 -0.9188 -0.1152 -0.0887 -0.0900 -0.1068 -0.0594 -0.0857 -1.3639 -0.1490 -0.1084 -0.0784 -0.0730 -0.0854 -1.4592 -0.0865 -0.1214 -0.4649 -0.1435 -0.0769 -0.0918 -0.0897 -0.0842 -0.1156 -0.1376 -0.0814 -0.0861 -0.1283 -0.0820 -0.0883 -0.0892 -0.1581 -0.9405 -0.1016 -0.1219 -0.0872 -0.0854 -0.1684 -0.1192 -0.3682 -0.1966 -0.0585 -0.1468 -0.0956 -0.1752 -0.1973 -0.1360 -0.0592 -0.1081 -0.0919 -0.2737 -0.1787 -0.1598 -0.0818 -0.1079 -0.1122 -0.3986 -0.4547 -0.0611 -0.0884 -0.2619 -0.1252 -0.4058 -0.1581 -0.1320 -0.0647 -0.0595 -0.1047 -0.0820 -0.3191 -0.1496 -1.3233 -0.1155 -0.1859 -0.0880 -0.0911 -0.1627 -0.0896 -0.0764
S-160	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( 5 + ( int ) c - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString () ; }
T-160	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( 5 + ( int ) c - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString () ; }
H-160	-0.2144809514284134	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( 5 + ( int ) ( c - ( int ) ( 'a' ) ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb. append ( c ) ; } return sb. toString () ; }
D-160	-0.2144809514284134	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( 5 + ( int ) ( c - ( int ) ( 'a' ) ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb. append ( c ) ; } return sb. toString () ; }
P-160	-0.0894 -0.0493 -1.5538 -0.0227 -0.0938 -0.0248 -0.1108 -1.0658 -0.0973 -0.0913 -0.0847 -1.3333 -0.0367 -0.0816 -0.0617 -0.6617 -0.0544 -0.0739 -0.2274 -0.1063 -0.1796 -0.0712 -0.0787 -0.0730 -0.1675 -0.0604 -0.0447 -0.0697 -0.1005 -0.0670 -0.4133 -0.1044 -0.1360 -0.0989 -0.0614 -0.1008 -0.1400 -0.2531 -0.2044 -0.1001 -0.1516 -0.2265 -0.0887 -1.2914 -0.6086 -0.1548 -0.2425 -0.1763 -0.0801 -0.3911 -0.0605 -0.0650 -0.0577 -0.0922 -0.0948 -0.4564 -0.1190 -0.0395 -0.0910 -0.0835 -0.1296 -0.1591 -0.0734 -0.1266 -0.0479 -0.0643 -0.0568 -0.0877 -0.0935 -0.1200 -0.0746 -0.2066 -1.4218 -0.1105 -0.1517 -0.0822 -0.0920 -0.1205 -0.0849 -0.0597 -0.2891 -1.4710 -0.0633 -0.0862 -0.0806 -0.0752
S-140	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'u' || c == 'A' || c == 'e' || c == 'I' || c == 'o' ) count += 1; } return count; }
T-140	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'U' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) count += 1; } return count; }
H-140	-0.19745755195617676	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'u' || c == 'A' || c == 'e' || c == 'I' || c == 'o' ) count += 1 ; } return count ; }
D-140	-0.19745755195617676	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'u' || c == 'A' || c == 'e' || c == 'I' || c == 'o' ) count += 1 ; } return count ; }
P-140	-0.0922 -0.0479 -0.1090 -0.0705 -0.0958 -0.0295 -0.1158 -0.9299 -0.1151 -0.0887 -0.0907 -0.1060 -0.0595 -0.0856 -1.3832 -0.1502 -0.1083 -0.0784 -0.0731 -0.0860 -1.4605 -0.0872 -0.1219 -0.4741 -0.1433 -0.0775 -0.0933 -0.0896 -0.0842 -0.1161 -0.1392 -0.0820 -0.0868 -0.1298 -0.0807 -0.0881 -0.0898 -0.1575 -0.9423 -0.1015 -0.1225 -0.0878 -0.0855 -0.1697 -0.1183 -0.3680 -0.2041 -0.0602 -0.0840 -0.0910 -0.2046 -0.1706 -0.1692 -0.0649 -0.0638 -0.1045 -0.2935 -0.1536 -0.1476 -0.0789 -0.0994 -0.1008 -0.2998 -0.1365 -0.1508 -0.0791 -0.0882 -0.1154 -1.0656 -0.1307 -0.1252 -0.0724 -0.0423 -0.1302 -0.0829 -0.2966 -0.1464 -1.4124 -0.1163 -0.1816 -0.0880 -0.0910 -0.1656 -0.0890 -0.0747
S-33	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'e' || c == 'A' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-33	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'E' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-33	-0.1978316605091095	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'e' || c == 'A' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-33	-0.1978316605091095	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'e' || c == 'A' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-33	-0.0929 -0.0479 -0.1098 -0.0705 -0.0959 -0.0301 -0.1159 -0.9290 -0.1152 -0.0888 -0.0900 -0.1063 -0.0595 -0.0856 -1.3805 -0.1493 -0.1075 -0.0790 -0.0731 -0.0854 -1.4721 -0.0872 -0.1215 -0.4741 -0.1433 -0.0775 -0.0932 -0.0896 -0.0842 -0.1161 -0.1380 -0.0820 -0.0861 -0.1301 -0.0795 -0.0881 -0.0899 -0.1578 -0.9449 -0.1015 -0.1233 -0.0878 -0.0860 -0.1735 -0.1184 -0.3393 -0.1983 -0.0566 -0.1670 -0.0940 -0.2037 -0.2017 -0.1731 -0.0598 -0.0899 -0.1094 -0.2583 -0.1505 -0.1559 -0.0809 -0.1042 -0.1213 -0.3592 -0.1357 -0.1550 -0.0795 -0.0458 -0.1146 -1.0130 -0.1399 -0.1260 -0.0642 -0.0594 -0.1107 -0.0842 -0.3180 -0.1475 -1.3289 -0.1163 -0.1860 -0.0874 -0.0917 -0.1648 -0.0896 -0.0765
S-173	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-173	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || 'i' == c_lower || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-173	-0.21109598875045776	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-173	-0.21109598875045776	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-173	-0.1026 -0.0543 -1.5122 -0.0594 -0.0996 -0.0570 -0.0249 -0.0112 -0.1160 -0.9048 -0.1018 -0.0902 -0.0825 -1.3040 -0.0321 -0.0814 -0.0609 -0.6186 -0.0567 -0.0742 -0.2381 -0.1123 -0.1092 -0.0808 -0.0771 -0.0860 -0.1891 -0.0769 -0.0378 -0.0673 -0.0987 -0.0959 -0.1416 -0.1164 -0.4309 -0.1556 -0.0448 -0.1080 -0.0856 -0.2345 -0.2272 -0.1644 -0.0585 -0.1107 -0.0787 -0.3505 -0.9541 -0.0756 -0.0854 -0.3636 -0.1931 -0.3447 -0.2630 -0.1437 -0.0717 -0.0561 -0.1117 -0.3953 -0.2192 -0.1382 -0.0640 -0.0619 -0.1024 -0.0840 -0.1252 -0.0926 -0.1266 -0.2066 -1.2567 -0.1098 -0.2226 -0.0771 -0.1040 -0.1865 -0.1446 -0.0615 -0.3724 -1.1604 -0.0596 -0.0977 -0.0833 -0.0739
S-379	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-379	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || 'e' == c_lower || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-379	-0.20370620489120483	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-379	-0.20370620489120483	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-379	-0.1018 -0.0544 -1.5130 -0.0594 -0.0989 -0.0579 -0.0249 -0.0112 -0.1160 -0.9052 -0.1024 -0.0902 -0.0824 -1.3043 -0.0323 -0.0814 -0.0609 -0.6188 -0.0566 -0.0742 -0.2371 -0.1124 -0.1088 -0.0783 -0.0773 -0.0867 -0.1905 -0.0774 -0.0373 -0.0678 -0.0987 -0.0965 -0.1407 -0.1164 -0.4699 -0.1625 -0.0481 -0.1040 -0.0835 -0.2210 -0.2149 -0.0838 -0.0615 -0.4880 -0.1431 -0.4200 -0.2192 -0.1537 -0.0633 -0.0833 -0.1078 -0.3695 -0.1843 -0.1340 -0.0763 -0.0570 -0.1195 -0.4514 -0.1785 -0.1448 -0.0646 -0.0620 -0.1079 -0.0835 -0.1266 -0.0920 -0.1294 -0.2051 -1.2552 -0.1105 -0.2177 -0.0777 -0.1048 -0.1857 -0.1462 -0.0620 -0.3711 -1.1726 -0.0596 -0.0978 -0.0833 -0.0739
S-293	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-293	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || 'u' == c_lower ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-293	-0.20212097465991974	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-293	-0.20212097465991974	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-293	-0.1024 -0.0540 -1.5337 -0.0590 -0.0996 -0.0574 -0.0250 -0.0112 -0.1158 -0.9097 -0.1040 -0.0903 -0.0823 -1.3094 -0.0321 -0.0813 -0.0609 -0.6188 -0.0567 -0.0742 -0.2397 -0.1124 -0.1097 -0.0800 -0.0800 -0.0867 -0.1878 -0.0775 -0.0370 -0.0679 -0.0986 -0.0967 -0.1395 -0.1163 -0.4107 -0.1616 -0.0459 -0.0968 -0.0875 -0.2291 -0.2121 -0.1445 -0.0595 -0.1034 -0.0815 -0.3082 -0.2150 -0.1579 -0.0703 -0.0777 -0.1073 -0.3312 -0.2307 -0.1369 -0.0808 -0.0554 -0.1105 -0.5449 -0.3123 -0.0549 -0.0835 -0.2827 -0.1382 -0.0937 -0.0991 -0.0955 -0.1332 -0.2118 -1.2290 -0.1101 -0.2287 -0.0797 -0.1058 -0.1813 -0.1432 -0.0615 -0.3694 -1.1799 -0.0591 -0.0975 -0.0837 -0.0732
S-262	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-262	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || 'o' == c_lower || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-262	-0.20826774835586548	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-262	-0.20826774835586548	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-262	-0.1029 -0.0548 -1.4851 -0.0594 -0.0989 -0.0574 -0.0248 -0.0113 -0.1159 -0.9004 -0.1025 -0.0902 -0.0824 -1.3042 -0.0321 -0.0814 -0.0609 -0.6189 -0.0567 -0.0742 -0.2358 -0.1124 -0.1103 -0.0792 -0.0766 -0.0860 -0.1895 -0.0769 -0.0378 -0.0678 -0.0987 -0.0960 -0.1404 -0.1164 -0.4067 -0.1566 -0.0453 -0.0973 -0.0832 -0.2198 -0.2168 -0.1451 -0.0579 -0.1017 -0.0779 -0.3555 -0.2300 -0.1580 -0.0705 -0.0745 -0.1002 -0.3701 -0.9543 -0.0612 -0.0829 -0.3010 -0.1403 -0.4231 -0.1921 -0.1404 -0.0578 -0.0583 -0.1039 -0.0833 -0.1268 -0.0915 -0.1286 -0.2075 -1.2464 -0.1098 -0.2215 -0.0773 -0.1042 -0.1886 -0.1481 -0.0615 -0.3751 -1.1726 -0.0595 -0.0977 -0.0833 -0.0739
S-245	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-245	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'e' || c_lower == 'a' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-245	-0.20242011547088623	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-245	-0.20242011547088623	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-245	-0.1026 -0.0544 -1.5199 -0.0593 -0.0996 -0.0589 -0.0251 -0.0110 -0.1161 -0.9105 -0.1024 -0.0903 -0.0824 -1.3055 -0.0321 -0.0814 -0.0609 -0.6190 -0.0567 -0.0742 -0.2407 -0.1123 -0.1118 -0.0784 -0.0789 -0.0866 -0.1910 -0.0774 -0.0378 -0.0679 -0.0987 -0.0957 -0.1435 -0.1163 -0.3854 -0.1562 -0.0463 -0.1451 -0.0794 -0.2590 -0.2285 -0.1536 -0.0630 -0.1138 -0.0931 -0.4358 -0.1866 -0.1573 -0.0707 -0.0766 -0.1070 -0.4721 -0.1637 -0.1366 -0.0814 -0.0590 -0.1193 -0.5810 -0.1742 -0.1472 -0.0678 -0.0650 -0.1091 -0.0843 -0.1324 -0.0920 -0.1270 -0.2059 -1.2444 -0.1097 -0.2228 -0.0784 -0.1051 -0.1910 -0.1485 -0.0615 -0.3779 -1.1708 -0.0591 -0.0978 -0.0833 -0.0739
S-188	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-188	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( 'a' == c_lower || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-188	-0.19960759580135345	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-188	-0.19960759580135345	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-188	-0.1026 -0.0544 -1.5051 -0.0593 -0.0989 -0.0576 -0.0252 -0.0113 -0.1160 -0.9010 -0.1025 -0.0903 -0.0824 -1.3055 -0.0321 -0.0820 -0.0604 -0.6195 -0.0566 -0.0743 -0.2356 -0.1137 -0.1062 -0.0754 -0.0752 -0.0873 -0.1902 -0.0758 -0.0377 -0.0674 -0.0980 -0.0946 -0.1476 -0.1156 -0.2210 -0.0496 -0.0699 -0.2084 -0.1334 -0.3010 -0.2857 -0.1752 -0.0473 -0.1154 -0.0832 -0.3687 -0.2193 -0.1568 -0.0621 -0.0776 -0.1079 -0.4515 -0.1725 -0.1395 -0.0773 -0.0537 -0.1168 -0.4834 -0.1758 -0.1496 -0.0627 -0.0600 -0.1054 -0.0841 -0.1241 -0.0924 -0.1260 -0.1994 -1.2584 -0.1097 -0.2264 -0.0765 -0.1051 -0.1880 -0.1541 -0.0619 -0.3763 -1.1840 -0.0596 -0.0971 -0.0833 -0.0733
S-144	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-144	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'u' || c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-144	-0.2053096443414688	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-144	-0.2053096443414688	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-144	-0.1021 -0.0543 -1.5135 -0.0594 -0.0996 -0.0584 -0.0254 -0.0110 -0.1161 -0.9062 -0.1017 -0.0902 -0.0825 -1.3059 -0.0320 -0.0814 -0.0604 -0.6195 -0.0571 -0.0742 -0.2432 -0.1123 -0.1085 -0.0795 -0.0783 -0.0860 -0.1880 -0.0763 -0.0381 -0.0678 -0.0987 -0.0976 -0.1418 -0.1170 -0.3992 -0.1623 -0.0445 -0.1034 -0.0782 -0.2726 -0.2238 -0.1516 -0.0665 -0.0874 -0.0932 -0.5382 -0.1742 -0.1451 -0.0681 -0.1009 -0.0905 -0.3807 -0.1671 -0.1449 -0.0724 -0.0657 -0.1185 -0.8851 -0.1626 -0.1375 -0.0734 -0.0539 -0.1188 -0.0829 -0.1113 -0.0883 -0.1223 -0.2037 -1.2727 -0.1105 -0.2182 -0.0791 -0.1041 -0.1894 -0.1545 -0.0615 -0.3793 -1.1791 -0.0592 -0.0979 -0.0839 -0.0734
S-96	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-96	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'i' || c_lower == 'a' || c_lower == 'e' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-96	-0.20372320711612701	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-96	-0.20372320711612701	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-96	-0.1015 -0.0544 -1.5196 -0.0593 -0.0988 -0.0566 -0.0252 -0.0110 -0.1161 -0.9105 -0.1024 -0.0902 -0.0824 -1.3062 -0.0321 -0.0814 -0.0604 -0.6153 -0.0567 -0.0742 -0.2436 -0.1122 -0.1100 -0.0789 -0.0795 -0.0860 -0.1897 -0.0768 -0.0380 -0.0679 -0.0987 -0.0949 -0.1431 -0.1155 -0.3891 -0.1612 -0.0483 -0.0999 -0.0957 -0.3035 -0.2360 -0.1494 -0.0631 -0.1004 -0.0919 -0.4222 -0.1724 -0.1474 -0.0661 -0.1131 -0.0937 -0.3631 -0.1558 -0.1398 -0.0770 -0.0697 -0.1165 -0.8120 -0.1772 -0.1486 -0.0663 -0.0634 -0.1046 -0.0848 -0.1246 -0.0919 -0.1241 -0.2063 -1.2618 -0.1104 -0.2213 -0.0788 -0.1052 -0.1866 -0.1480 -0.0611 -0.3765 -1.1730 -0.0596 -0.0979 -0.0834 -0.0739
S-26	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-26	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'o' || c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-26	-0.20338590443134308	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-26	-0.20338590443134308	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-26	-0.1018 -0.0543 -1.5129 -0.0594 -0.0989 -0.0571 -0.0250 -0.0112 -0.1161 -0.9106 -0.1024 -0.0902 -0.0824 -1.3060 -0.0321 -0.0814 -0.0609 -0.6156 -0.0566 -0.0742 -0.2415 -0.1123 -0.1085 -0.0785 -0.0795 -0.0867 -0.1915 -0.0763 -0.0380 -0.0678 -0.0987 -0.0957 -0.1412 -0.1166 -0.3901 -0.1556 -0.0456 -0.1043 -0.0872 -0.2319 -0.2189 -0.1474 -0.0629 -0.1173 -0.0830 -0.4440 -0.1676 -0.1413 -0.0677 -0.0995 -0.0884 -0.3501 -0.1659 -0.1447 -0.0718 -0.0721 -0.1185 -0.8941 -0.1666 -0.1410 -0.0709 -0.0608 -0.1111 -0.0844 -0.1361 -0.0927 -0.1279 -0.2045 -1.2423 -0.1098 -0.2223 -0.0783 -0.1041 -0.1878 -0.1491 -0.0619 -0.3834 -1.1768 -0.0596 -0.0977 -0.0833 -0.0734
S-236	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return a == ( ( int ) Math.pow ( round_root, 3 ) ) ; }
T-236	public static boolean iscude ( int a ) { a = Math.abs ( a ) ; double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return a == ( ( int ) Math.pow ( round_root, 3 ) ) ; }
H-236	-0.2000725269317627	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return a == ( ( int ) Math.pow ( round_root, 3 ) ) ; }
D-236	-0.2000725269317627	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return a == ( ( int ) Math.pow ( round_root, 3 ) ) ; }
P-236	-0.0870 -0.0524 -0.0944 -0.0181 -0.0188 -0.1130 -0.1455 -0.1049 -0.0876 -0.0878 -0.1571 -0.0555 -0.0865 -2.3958 -0.0944 -0.0333 -0.1062 -0.1457 -0.8292 -0.1543 -0.0892 -0.0836 -0.0954 -0.0864 -0.8051 -0.0339 -0.0744 -0.4952 -0.0919 -1.1691 -0.1191 -0.0736 -0.0927 -0.0895 -0.1719 -0.0498 -0.1003 -0.0386 -0.0858 -0.2136 -0.1756 -0.0790 -0.0777 -0.1169 -0.1523 -0.0274 -0.1071 -0.4500 -0.0254 -0.0234 -0.0847 -0.0418 -0.0177 -0.0812 -0.0475 -0.0974 -0.1045 -0.0793 -0.0338 -0.0807 -0.0920 -0.1331 -0.1486 -0.0766 -0.0930 -0.1213 -0.1076 -0.0835 -2.4868 -0.0992 -0.0564 -0.1148 -0.0576 -0.0968 -0.0399 -1.1583 -0.1633 -0.0878 -0.0969 -0.1136 -0.0778 -0.0711
S-134	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; l.size () > j; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-134	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 1 + i; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-134	-0.18173280358314514	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } } return false ; }
D-134	-0.18173280358314514	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } } return false ; }
P-134	-0.1041 -0.0508 -0.1127 -0.1056 -0.0927 -0.0445 -0.0946 -0.0435 -0.0873 -0.0706 -0.1223 -0.2730 -0.4225 -0.0437 -0.2114 -0.0667 -0.0820 -0.0878 -0.1985 -0.1145 -0.0690 -0.0792 -0.0871 -1.1250 -0.0897 -0.0739 -0.1423 -0.1303 -0.1638 -0.0806 -0.0902 -0.0738 -0.1039 -0.1846 -0.0792 -0.0803 -0.1105 -0.1064 -0.0645 -0.0815 -0.0951 -1.1565 -1.3849 -0.1686 -0.7241 -0.0886 -0.2354 -0.0770 -0.0975 -0.0692 -0.1497 -0.1711 -0.0779 -0.0921 -0.1561 -0.1060 -0.1274 -0.1259 -0.3168 -0.1120 -0.1048 -0.0908 -0.2805 -0.1110 -0.1061 -0.2113 -0.1100 -0.0950 -0.0841 -0.4686 -0.1316 -0.0861 -0.1058 -0.0666 -0.9507 -0.0813 -0.0863 -0.0935 -0.0342 -0.4572 -0.0814 -0.0890
S-275	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( 0 == l.get ( i ) + l.get ( j ) ) return true; } } return false; }
T-275	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = i + 1; l.size () > j; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-275	-0.1661778837442398	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( 0 == l.get ( i ) ) return true ; } } return false ; }
D-275	-0.1661778837442398	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( 0 == l.get ( i ) ) return true ; } } return false ; }
P-275	-0.1035 -0.0515 -0.1136 -0.1057 -0.0926 -0.0425 -0.0938 -0.0425 -0.0872 -0.0668 -0.1219 -0.2636 -0.3978 -0.0450 -0.2078 -0.0661 -0.0835 -0.0869 -0.1919 -0.1145 -0.0691 -0.0763 -0.0877 -1.0535 -0.0810 -0.0730 -0.1197 -0.1390 -0.1592 -0.0735 -0.0865 -0.0713 -0.1066 -0.1930 -0.0797 -0.0821 -0.1059 -0.1048 -0.0669 -0.0836 -0.0926 -1.0172 -0.1047 -0.0720 -0.0822 -0.1171 -0.1308 -0.0636 -0.0948 -0.0774 -0.1016 -0.1532 -0.0788 -0.0998 -0.1492 -0.1080 -0.7060 -0.1340 -0.4165 -0.1569 -0.2784 -0.1228 -0.1472 -0.0967 -0.3627 -0.2178 -0.1122 -0.9520 -0.1859 -0.1195 -0.1058 -0.0343 -0.3134 -0.0814 -0.0863
S-99	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( j ) + l.get ( i ) == 0 ) return true; } } return false; }
T-99	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = i + 1; j < l.size () ; j += 1 ) { if ( 0 == l.get ( i ) + l.get ( j ) ) return true; } } return false; }
H-99	-0.17000271379947662	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( j ) + l.get ( i ) == 0 ) return true ; } } return false ; }
D-99	-0.17000271379947662	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( j ) + l.get ( i ) == 0 ) return true ; } } return false ; }
P-99	-0.1028 -0.0514 -0.1116 -0.1053 -0.0920 -0.0431 -0.0933 -0.0426 -0.0874 -0.0697 -0.1214 -0.2739 -0.4036 -0.0446 -0.2092 -0.0660 -0.0829 -0.0871 -0.1954 -0.1138 -0.0699 -0.0872 -0.0868 -1.0542 -0.0806 -0.0757 -0.1266 -0.1384 -0.1645 -0.0724 -0.0874 -0.0710 -0.1095 -0.1907 -0.0794 -0.0820 -0.1091 -0.1047 -0.0665 -0.0851 -0.0941 -1.0880 -0.1049 -0.0713 -0.0901 -0.1170 -0.1379 -0.0640 -0.0935 -0.0774 -0.1062 -0.1601 -0.0783 -0.0976 -0.1520 -0.1095 -0.2658 -0.1593 -0.2692 -0.1129 -0.2541 -0.0940 -0.6875 -0.1606 -0.1122 -0.1959 -0.1131 -0.0821 -0.0989 -1.2333 -0.2579 -0.0862 -0.1558 -0.0870 -0.6809 -0.1105 -0.1121 -0.1034 -0.0374 -0.3123 -0.0853 -0.0916
S-79	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; l.size () > i; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-79	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; l.size () > i; i += 1 ) { for ( int j = i + 1; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-79	-0.18036718666553497	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } } return false ; }
D-79	-0.18036718666553497	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } } return false ; }
P-79	-0.1037 -0.0505 -0.1130 -0.1064 -0.0926 -0.0449 -0.0939 -0.0431 -0.0872 -0.0713 -0.1221 -0.2667 -0.4314 -0.0436 -0.2086 -0.0663 -0.0832 -0.0878 -0.1946 -0.1146 -0.0703 -0.0799 -0.0904 -1.1061 -1.1632 -0.1776 -0.8127 -0.0998 -0.2401 -0.0624 -0.0963 -0.0717 -0.1147 -0.1911 -0.0796 -0.0802 -0.1110 -0.1043 -0.0665 -0.0853 -0.0906 -0.9754 -0.1025 -0.0571 -0.0795 -0.1124 -0.1205 -0.0634 -0.1050 -0.0799 -0.0961 -0.1520 -0.0772 -0.0947 -0.1379 -0.1087 -0.1827 -0.1331 -0.2503 -0.1114 -0.1229 -0.0932 -0.3522 -0.1467 -0.1087 -0.1886 -0.1085 -0.0998 -0.0880 -0.7372 -0.2017 -0.0872 -0.1427 -0.0823 -0.8393 -0.0937 -0.0969 -0.1017 -0.0355 -0.4358 -0.0819 -0.0866
S-317	public static double median ( int[] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) + 1] / 2 + list[ ( int ) ( list.length / 2 ) ]; } }
T-317	public static double median ( int[] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return ( list[ ( int ) ( list.length / 2 ) - 1] + list[ ( int ) ( list.length / 2 ) ] ) / 2.; } }
H-317	-0.2079559862613678	public static double median ( int[] list ) { if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) + 1] / 2 + list[ ( int ) ( list.length / 2 ) ]; } }
D-317	-0.2079559862613678	public static double median ( int[] list ) { if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) + 1] / 2 + list[ ( int ) ( list.length / 2 ) ]; } }
P-317	-0.0882 -0.0478 -0.1071 -0.1639 -0.1160 -0.0996 -1.9802 -0.0958 -0.0826 -0.0883 -1.0173 -0.1194 -0.4406 -0.1131 -0.0639 -0.6301 -0.0630 -0.1704 -0.2673 -0.0851 -0.1000 -0.1105 -0.0958 -0.6148 -0.1221 -0.1535 -0.0857 -0.1184 -0.1275 -0.0984 -0.0701 -0.1740 -0.1011 -0.0944 -0.4230 -0.1029 -0.1116 -0.1881 -0.1174 -0.1117 -0.4638 -0.1206 -0.2134 -0.0897 -0.1166 -0.3952 -0.0856 -0.0586 -0.1134 -0.1000 -0.0963 -0.1585 -1.9289 -0.1216 -0.0899 -0.1169 -0.1214 -0.2652 -0.1145 -0.0921 -0.0871 -0.1109 -0.1051 -0.0943 -0.0542 -0.0923 -0.0990 -0.0856 -0.1828 -0.0850 -0.0885 -0.0655
S-148	public static double median ( int[] list ) { Arrays.sort ( list ) ; if ( 1 == list.length % 2 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } }
T-148	public static double median ( int[] list ) { Arrays.sort ( list ) ; if ( 1 == list.length % 2 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return ( list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) - 1] ) / 2.; } }
H-148	-0.2361147701740265	public static double median ( int[] list ) { if ( 1 == list.length ) { return list[ ( int ) ( list.length / 2 ) ] ; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } }
D-148	-0.2361147701740265	public static double median ( int[] list ) { if ( 1 == list.length ) { return list[ ( int ) ( list.length / 2 ) ] ; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } }
P-148	-0.0893 -0.0488 -0.1010 -0.1661 -0.1162 -0.0955 -1.9956 -0.0950 -0.0831 -0.0888 -0.9508 -0.1217 -1.0325 -0.1207 -0.4974 -0.0809 -0.0581 -0.4795 -0.1090 -0.1081 -0.0917 -0.6094 -0.1301 -0.1610 -0.0842 -0.1240 -0.1152 -0.0954 -0.0786 -0.2132 -0.0888 -0.0950 -0.5305 -0.9640 -0.0945 -0.1044 -0.1967 -0.1141 -0.1099 -0.4473 -0.1272 -0.1234 -0.0858 -0.1256 -0.1536 -0.0904 -0.0674 -0.0910 -0.0847 -0.0937 -0.0473 -0.1192 -0.1377 -0.3349 -0.1121 -0.1275 -0.0793 -0.1130 -0.1288 -0.0914 -0.0587 -0.0965 -0.0748 -0.0899 -0.3517 -1.1933 -0.8017 -0.6316 -0.0834 -0.0899 -0.0726
S-367	public static double median ( int[] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) ] + list[1 + ( int ) ( list.length / 2 ) ] / 2; } }
T-367	public static double median ( int[] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) ] + list[1 + ( int ) ( list.length / 2 ) ] / 2; } }
H-367	-0.20728303492069244	public static double median ( int[] list ) { if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ] ; } else { return list[ ( int ) ( list.length / 2 ) ] + list[1 + ( int ) ( list.length / 2 ) ] / 2; } }
D-367	-0.20728303492069244	public static double median ( int[] list ) { if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ] ; } else { return list[ ( int ) ( list.length / 2 ) ] + list[1 + ( int ) ( list.length / 2 ) ] / 2; } }
P-367	-0.0887 -0.0497 -0.0999 -0.1689 -0.1143 -0.0968 -1.8996 -0.0947 -0.0825 -0.0887 -1.0329 -0.1181 -0.4463 -0.1109 -0.0627 -0.5908 -0.0655 -0.1698 -0.2863 -0.0858 -0.1019 -0.1120 -0.1006 -0.5575 -0.1213 -0.1944 -0.0870 -0.1206 -0.1376 -0.0973 -0.0715 -0.1813 -0.1016 -0.0934 -0.4852 -0.7805 -0.0976 -0.1095 -0.1725 -0.1135 -0.1059 -0.4043 -0.1231 -0.1575 -0.0882 -0.1216 -0.1860 -0.0882 -0.0610 -0.0958 -0.0960 -0.0900 -0.0476 -0.1406 -0.2360 -0.3140 -0.0717 -0.1135 -0.1653 -0.0847 -0.1157 -0.1230 -0.0905 -0.0550 -0.1065 -0.0877 -0.0832 -0.0943 -0.9966 -0.7569 -0.0794 -0.0913 -0.0710
S-259	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length () - substring.length () ; i += 1 ) { if ( string.substring ( i, substring.length () + i ) .equals ( substring ) ) { times += 1; } } return times; }
T-259	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < 1 + string.length () - substring.length () ; i += 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } } return times; }
H-259	-0.25610706210136414	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length () - substring.length () ; i += 1 ) { if ( string. substring ( i , substring.length () ) . equals ( substring ) ) { times += 1 ; } } return times ; }
D-259	-0.25610706210136414	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length () - substring.length () ; i += 1 ) { if ( string. substring ( i , substring.length () ) . equals ( substring ) ) { times += 1 ; } } return times ; }
P-259	-0.0960 -0.0435 -0.1101 -0.0145 -0.0924 -0.0524 -0.1072 -0.0163 -0.1104 -0.7687 -0.0981 -1.7003 -0.5514 -0.0340 -0.0875 -0.0891 -0.0951 -0.0327 -0.0812 -1.2616 -0.1324 -0.1074 -0.0697 -0.0780 -0.0875 -1.2765 -0.1036 -0.1228 -0.2941 -0.0920 -0.0682 -0.0771 -1.6062 -0.0304 -0.1327 -0.1273 -0.0712 -0.0820 -0.0821 -0.1138 -0.1903 -0.0785 -0.0910 -0.1424 -0.1193 -0.1344 -0.1254 -0.7277 -0.1586 -0.1543 -1.6466 -0.1681 -0.0995 -0.0991 -0.0758 -0.6657 -0.1326 -0.5184 -0.1109 -0.0195 -0.0993 -0.0908 -0.0822 -0.0864 -0.0948 -1.8138 -0.1503 -0.2036 -0.1045 -0.0880 -0.0418 -0.2941 -0.0777 -0.0689
S-176	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; string.length () - substring.length () > i; i += 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } } return times; }
T-176	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; string.length () - substring.length () + 1 > i; i += 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } } return times; }
H-176	-0.23950757086277008	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; string.length () - substring.length () > i ; i += 1 ) { if ( string. substring ( i, i + substring.length () ) . equals ( substring ) ) { times += 1 ; } } return times ; }
D-176	-0.23950757086277008	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; string.length () - substring.length () > i ; i += 1 ) { if ( string. substring ( i, i + substring.length () ) . equals ( substring ) ) { times += 1 ; } } return times ; }
P-176	-0.0976 -0.0429 -0.1130 -0.0152 -0.0944 -0.0548 -0.1079 -0.0174 -0.1112 -0.7364 -0.1041 -1.6704 -0.5346 -0.0303 -0.0880 -0.0893 -0.0966 -0.0340 -0.0823 -1.2404 -0.1394 -0.1102 -0.0683 -0.0753 -0.0854 -1.3022 -0.4002 -0.1181 -0.0844 -0.0739 -0.1866 -0.0410 -0.1264 -0.1403 -0.0689 -0.2796 -0.1582 -0.8072 -0.0888 -0.1235 -0.2155 -0.0799 -0.0876 -0.1394 -0.1200 -0.1377 -0.1172 -0.6828 -0.2262 -0.1792 -1.1490 -0.2892 -0.2100 -0.1065 -0.1144 -0.1478 -0.0715 -0.0865 -0.1112 -0.6467 -0.1091 -0.0155 -0.0995 -0.0895 -0.0861 -0.0910 -0.0952 -1.7645 -0.1618 -0.2339 -0.1005 -0.0774 -0.0412 -0.3323 -0.0785 -0.0691
S-348	public static long sum_squared_nums ( double[] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.ceil ( ( int ) lst[i] ) ) * ( Math.floor ( ( int ) lst[i] ) ) ; } return result; }
T-348	public static long sum_squared_nums ( double[] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.ceil ( ( int ) lst[i] ) ) * ( Math.floor ( ( int ) lst[i] ) ) ; } return result; }
H-348	-0.3273293375968933	public static long sum_squared_nums ( double [] lst ) { int result = 0, i = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst[i] ) * ( ( int ) lst[i] ) ; i ++ ; } return result ; }
D-348	-0.3273293375968933	public static long sum_squared_nums ( double [] lst ) { int result = 0, i = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst[i] ) * ( ( int ) lst[i] ) ; i ++ ; } return result ; }
P-348	-0.0956 -0.0456 -0.0790 -0.0853 -0.1130 -0.0219 -0.0871 -0.0813 -0.1189 -0.1612 -1.8132 -0.0443 -0.0829 -0.0855 -0.2303 -0.0998 -0.0819 -1.2663 -0.1335 -0.0908 -2.3028 -0.0987 -0.1323 -0.1082 -0.0950 -0.0848 -0.0800 -1.8232 -0.0988 -0.0874 -0.3650 -0.0774 -0.0583 -0.6924 -0.0824 -0.5275 -0.0872 -0.0893 -0.1821 -0.0750 -0.1196 -1.0643 -1.4852 -0.0856 -0.7945 -1.0588 -0.7749 -0.3836 -0.0956 -0.0729 -0.1087 -0.7814 -0.2703 -0.0802 -0.1769 -0.6696 -0.3718 -0.2766 -0.0933 -0.3981 -0.4475 -0.2772 -0.0874 -0.0759 -0.0999 -0.1023 -0.2036 -0.0870 -0.0780
S-150	public static long sum_squared_nums ( double[] lst ) { int result = 0, i = 0; for ( int j = 0; lst.length > j; j++ ) { result += ( Math.floor ( ( int ) lst[i] ) ) * ( Math.ceil ( ( int ) lst[i] ) ) ; } return result; }
T-150	public static long sum_squared_nums ( double[] lst ) { int result = 0; for ( int i = 0; lst.length > i; i++ ) { result += ( Math.ceil ( lst[i] ) ) * ( Math.ceil ( lst[i] ) ) ; } return result; }
H-150	-0.3210562765598297	public static long sum_squared_nums ( double [] lst ) { int result = 0 ; for ( int j = 0; lst.length > j ; j++ ) { result += ( ( int ) lst[i] ) * ( ( int ) lst[i] ) ; } return result ; }
D-150	-0.3210562765598297	public static long sum_squared_nums ( double [] lst ) { int result = 0 ; for ( int j = 0; lst.length > j ; j++ ) { result += ( ( int ) lst[i] ) * ( ( int ) lst[i] ) ; } return result ; }
P-150	-0.0963 -0.0464 -0.0780 -0.0853 -0.1128 -0.0222 -0.0870 -0.0822 -0.1188 -0.1592 -1.9168 -0.0425 -0.0828 -0.0852 -0.2209 -0.1048 -0.0822 -2.4740 -0.1072 -0.1699 -0.1084 -0.0949 -0.1170 -0.0883 -1.6174 -0.2753 -0.1274 -0.0516 -0.1512 -0.1113 -1.3421 -0.1138 -0.4712 -0.0848 -0.0905 -0.1922 -0.0947 -0.1104 -1.3990 -0.8517 -0.0872 -0.7827 -1.0824 -0.4826 -0.3692 -0.0976 -0.0677 -0.1067 -0.5976 -0.2267 -0.0799 -0.1274 -0.6607 -0.2544 -0.2552 -0.0900 -0.4688 -0.1275 -0.1295 -0.1168 -0.1836 -0.0858 -0.0787
S-64	public static String longest ( List<String> strings ) { int maxlen = 0; for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( maxlen == string.length () ) { return string; } } return null; }
T-64	public static String longest ( List<String> strings ) { int maxlen = 0; for ( String string : strings ) { if ( string.length () > maxlen ) { maxlen = string.length () ; } } for ( String string : strings ) { if ( maxlen == string.length () ) { return string; } } return null; }
H-64	-0.17604613304138184	public static String longest ( List<String> strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( maxlen == string.length () ) { return string ; } } return null ; }
D-64	-0.17604613304138184	public static String longest ( List<String> strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( maxlen == string.length () ) { return string ; } } return null ; }
P-64	-0.0930 -0.0465 -1.2113 -0.0179 -0.1152 -0.3463 -0.3858 -0.0761 -0.1816 -0.1201 -0.0879 -0.0879 -0.1572 -0.0262 -0.0915 -1.5492 -0.0816 -0.1478 -0.1107 -0.9976 -0.0600 -0.0555 -0.1396 -0.0888 -0.0957 -0.1043 -0.1205 -0.2547 -0.1323 -0.2467 -0.0689 -0.1462 -0.0556 -0.1128 -0.1130 -0.0796 -0.0903 -0.0859 -0.0136 -0.1206 -0.1288 -0.1169 -0.2555 -0.0814 -0.0915 -0.1204 -0.1141 -0.1585 -0.1143 -0.7786 -0.0534 -0.0659 -0.1335 -0.0896 -0.0986 -0.0997 -0.1192 -0.0979 -0.4535 -0.1428 -0.1227 -0.1154 -0.0867 -0.0862 -0.0968 -0.1208 -0.0797 -0.2322 -0.0779 -0.1221 -0.1108 -0.1819 -0.1901 -0.0860 -0.0636
S-70	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || 0 == i % 13 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-70	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || 0 == i % 13 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-70	-0.20110705494880676	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || 0 == i % 13 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-70	-0.20110705494880676	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || 0 == i % 13 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-70	-0.1022 -0.0465 -0.1141 -0.0779 -0.0150 -0.0877 -0.0546 -0.0145 -0.1188 -0.0944 -0.0683 -0.0873 -0.0898 -0.1053 -0.0933 -0.0825 -0.7611 -0.1534 -0.1073 -0.0756 -0.0766 -0.0831 -0.8007 -0.0851 -0.1045 -0.0947 -0.4137 -0.0780 -0.0858 -0.2105 -0.0784 -0.0867 -0.2432 -0.1112 -0.2260 -0.3083 -0.0704 -0.1969 -0.1063 -0.2304 -0.1608 -0.1499 -0.1108 -0.1330 -0.0258 -0.0790 -0.0852 -0.1682 -0.1083 -0.0798 -0.0893 -0.0931 -0.9523 -0.0978 -0.0786 -0.2320 -0.1928 -0.7094 -0.0668 -0.0641 -0.0847 -0.0693 -0.1008 -0.1640 -0.0753 -0.1001 -0.1373 -0.1125 -0.2098 -0.2603 -0.5491 -1.9171 -0.1147 -0.1091 -1.3270 -0.0815 -0.1263 -0.1210 -0.1032 -0.4719 -0.1156 -0.0156 -0.0917 -0.1194 -0.0814 -1.6676 -0.1281 -0.1033 -0.0959 -0.0862 -0.1015 -0.1213 -0.2643 -0.0864 -0.0752
S-66	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( 0 == i % 11 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-66	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( 0 == i % 11 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-66	-0.20740613341331482	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( 0 == i % 11 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-66	-0.20740613341331482	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( 0 == i % 11 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-66	-0.1013 -0.0469 -0.1133 -0.0773 -0.0151 -0.0878 -0.0546 -0.0145 -0.1189 -0.0944 -0.0683 -0.0874 -0.0899 -0.1050 -0.0933 -0.0825 -0.7904 -0.1528 -0.1073 -0.0757 -0.0759 -0.0834 -0.7535 -0.0844 -0.1036 -0.0934 -0.4053 -0.0781 -0.0875 -0.1837 -0.0772 -0.0869 -0.2290 -0.1104 -0.5279 -0.1200 -0.1492 -0.2621 -0.0586 -0.6345 -0.1268 -0.2050 -0.0306 -0.2021 -0.1027 -0.0788 -0.0906 -0.1654 -0.1074 -0.0791 -0.0886 -0.0936 -0.9546 -0.0986 -0.0752 -0.2294 -0.1908 -0.7109 -0.0660 -0.0645 -0.0846 -0.0693 -0.1002 -0.1565 -0.0746 -0.1004 -0.1355 -0.1124 -0.2195 -0.2484 -0.5481 -1.9262 -0.1146 -0.1100 -1.3253 -0.0813 -0.1282 -0.1125 -0.1037 -0.4436 -0.1190 -0.0157 -0.0918 -0.1218 -0.0815 -1.6763 -0.1255 -0.1034 -0.0979 -0.0876 -0.1007 -0.1212 -0.2649 -0.0858 -0.0738
S-48	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( "7" == i + "".substring ( j, j + 1 ) ) result += 1; } } } return result; }
T-48	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( "" + i ) .length () ; j += 1 ) { if ( ( "" + i ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-48	-0.19459030032157898	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( "7" == i + "". substring ( j, j + 1 ) ) result += 1; } } } return result ; }
D-48	-0.19459030032157898	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( "7" == i + "". substring ( j, j + 1 ) ) result += 1; } } } return result ; }
P-48	-0.1026 -0.0462 -0.1132 -0.0768 -0.0150 -0.0877 -0.0547 -0.0150 -0.1190 -0.0951 -0.0671 -0.0872 -0.0904 -0.1043 -0.0947 -0.0825 -0.7682 -0.1533 -0.1073 -0.0757 -0.0760 -0.0833 -0.7458 -0.0860 -0.1024 -0.0932 -0.4139 -0.0786 -0.0866 -0.1851 -0.0770 -0.0879 -0.2192 -0.1122 -0.2245 -0.2499 -0.0578 -0.1625 -0.0966 -0.3410 -0.1017 -0.1957 -0.0332 -0.1369 -0.0951 -0.0801 -0.0866 -0.1631 -0.1075 -0.0794 -0.0926 -0.0948 -0.9254 -0.1021 -0.0743 -0.1893 -0.1932 -0.6831 -0.0622 -0.0631 -0.0851 -0.0719 -0.1008 -0.1621 -0.0753 -0.0988 -0.1415 -0.1153 -0.1991 -0.0260 -0.2653 -0.1856 -0.5064 -0.6247 -0.8791 -0.1261 -0.1340 -1.3230 -0.0774 -0.3110 -0.1163 -0.1466 -0.0987 -0.1056 -0.0726 -1.8077 -0.1081 -0.0970 -0.0843 -0.0973 -0.1161 -0.2803 -0.0821 -0.0754
S-20	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( "".substring ( j, j + 1 ) + i == "7" ) result += 1; } } } return result; }
T-20	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, 1 + j ) .equals ( "7" ) ) result += 1; } } } return result; }
H-20	-0.1952979862689972	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( "". substring ( j, j + 1 ) + i == "7" ) result += 1 ; } } } return result ; }
D-20	-0.1952979862689972	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( "". substring ( j, j + 1 ) + i == "7" ) result += 1 ; } } } return result ; }
P-20	-0.1013 -0.0465 -0.1133 -0.0773 -0.0152 -0.0872 -0.0547 -0.0146 -0.1190 -0.0950 -0.0679 -0.0867 -0.0905 -0.1047 -0.0942 -0.0831 -0.7736 -0.1554 -0.1073 -0.0762 -0.0787 -0.0838 -0.7560 -0.0859 -0.1029 -0.0936 -0.4008 -0.0785 -0.0892 -0.1771 -0.0777 -0.0875 -0.2212 -0.1122 -0.2091 -0.2710 -0.0566 -0.1627 -0.0990 -0.3458 -0.1006 -0.2088 -0.0319 -0.1399 -0.0978 -0.0802 -0.0867 -0.1689 -0.1079 -0.0799 -0.0908 -0.0914 -0.9378 -0.1028 -0.0746 -0.2130 -0.2239 -0.7570 -0.0700 -0.0637 -0.0859 -0.0704 -0.0995 -0.1650 -0.0751 -0.0983 -0.1460 -0.1152 -0.4580 -1.0111 -0.1295 -0.1291 -1.4756 -0.0754 -0.3533 -0.1190 -0.1519 -0.4343 -0.0930 -0.2354 -0.1333 -0.0134 -0.0905 -0.1044 -0.0762 -1.8597 -0.1445 -0.0943 -0.0884 -0.0822 -0.0964 -0.1136 -0.2991 -0.0813 -0.0746
S-16	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 13 == 0 || i % 11 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-16	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 13 == 0 || i % 11 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-16	-0.20162981748580933	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 13 == 0 || i % 11 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-16	-0.20162981748580933	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 13 == 0 || i % 11 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-16	-0.1021 -0.0466 -0.1140 -0.0773 -0.0150 -0.0878 -0.0547 -0.0145 -0.1188 -0.0943 -0.0677 -0.0866 -0.0905 -0.1046 -0.0933 -0.0831 -0.7725 -0.1527 -0.1073 -0.0752 -0.0760 -0.0832 -0.7813 -0.0865 -0.1046 -0.0948 -0.4029 -0.0786 -0.0896 -0.1975 -0.0776 -0.0876 -0.2225 -0.1122 -0.2286 -0.2897 -0.0188 -0.1929 -0.1030 -0.3548 -0.1013 -0.2104 -0.0438 -0.1254 -0.0990 -0.0815 -0.0892 -0.1686 -0.1082 -0.0798 -0.0902 -0.0929 -0.9601 -0.0985 -0.0770 -0.2185 -0.1931 -0.7074 -0.0664 -0.0646 -0.0851 -0.0700 -0.1000 -0.1597 -0.0751 -0.1012 -0.1361 -0.1124 -0.2117 -0.2568 -0.5485 -1.9172 -0.1145 -0.1073 -1.3167 -0.0824 -0.1258 -0.1202 -0.1028 -0.4835 -0.1207 -0.0152 -0.0916 -0.1228 -0.0815 -1.7112 -0.1278 -0.1046 -0.0974 -0.0873 -0.1002 -0.1213 -0.2688 -0.0857 -0.0743
S-410	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, 1 + j ) == "7" ) result += 1; } } } return result; }
T-410	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, 1 + j ) == "7" ) result += 1; } } } return result; }
H-410	-0.20906855165958405	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, 1 + j ) == "7" ) result += 1 ; } } } return result ; }
D-410	-0.20906855165958405	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, 1 + j ) == "7" ) result += 1 ; } } } return result ; }
P-410	-0.1021 -0.0469 -0.1132 -0.0774 -0.0148 -0.0878 -0.0546 -0.0145 -0.1189 -0.0943 -0.0672 -0.0873 -0.0906 -0.1044 -0.0934 -0.0826 -0.7731 -0.1534 -0.1073 -0.0751 -0.0755 -0.0833 -0.7633 -0.0859 -0.1041 -0.0936 -0.4133 -0.0786 -0.0891 -0.1825 -0.0772 -0.0876 -0.2260 -0.1121 -0.2066 -0.2715 -0.0588 -0.1663 -0.0974 -0.3498 -0.1002 -0.2002 -0.0327 -0.1408 -0.0959 -0.0807 -0.0882 -0.1669 -0.1082 -0.0793 -0.0872 -0.0937 -0.9455 -0.0949 -0.0774 -0.2106 -0.1893 -0.7119 -0.0670 -0.0642 -0.0845 -0.0671 -0.1006 -0.1567 -0.0747 -0.1004 -0.1362 -0.1124 -0.2084 -0.2521 -0.5605 -1.8975 -0.1146 -0.1044 -1.1778 -0.5705 -0.5675 -0.0593 -0.1086 -0.5809 -0.1240 -0.0152 -0.0927 -0.1242 -0.0840 -1.6642 -0.1604 -0.1064 -0.0955 -0.0869 -0.1004 -0.1213 -0.2745 -0.0858 -0.0749
S-339	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( j > i ) { if ( q[i] != q[j] ) return false; } return true; }
T-339	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( j > i ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; }
H-339	-0.3133782148361206	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i]; if ( sum > w ) return false ; int i = 0; int j = q.length - 1 ; while ( j > i ) { if ( q[i] != q[j] ) return false ; j = q.length - 1 ; } return true ; }
D-339	-0.3133782148361206	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i]; if ( sum > w ) return false ; int i = 0; int j = q.length - 1 ; while ( j > i ) { if ( q[i] != q[j] ) return false ; j = q.length - 1 ; } return true ; }
P-339	-0.1033 -0.0503 -0.1145 -0.0440 -0.0947 -0.0248 -0.0970 -0.0141 -0.1138 -0.1180 -2.2136 -0.0525 -1.3980 -0.0971 -0.0929 -0.0909 -0.0901 -0.1582 -0.0657 -0.0943 -1.2305 -0.1366 -0.1075 -0.0788 -0.0905 -0.0932 -1.0717 -0.0864 -0.0958 -0.2016 -0.0920 -0.0607 -1.1998 -0.0846 -0.0893 -0.2342 -0.0837 -0.1781 -0.0569 -0.0684 -0.4893 -0.5289 -2.2864 -0.1571 -0.1211 -0.1349 -0.2290 -0.2266 -0.0877 -0.0979 -0.0786 -1.2717 -0.1623 -0.1559 -0.1133 -1.0330 -0.1143 -0.1129 -0.0958 -0.0812 -0.0937 -0.0701 -0.1859 -2.2257 -0.2742 -0.0988 -0.1117 -0.2434 -0.2398 -0.0982 -0.0827 -0.1046 -0.1468 -0.1179 -0.1259 -0.4610 -0.4639 -0.2134 -0.2000 -0.0530 -0.3353 -0.1462 -0.2338 -0.0889 -0.0813 -0.0536 -1.4425 -0.3934 -1.8182 -0.2767 -0.1350 -0.1170 -0.4516 -0.5058 -0.1231 -0.1626 -0.1010 -0.1222 -1.2567 -0.0807 -0.0691
S-328	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[j] != q[i] ) return false; } return true; }
T-328	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[j] != q[i] ) return false; i += 1; j -= 1; } return true; }
H-328	-0.31823253631591797	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[j] != q[i] ) return false ; i ++ ; } return true ; }
D-328	-0.31823253631591797	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[j] != q[i] ) return false ; i ++ ; } return true ; }
P-328	-0.1028 -0.0504 -0.1146 -0.0438 -0.0954 -0.0248 -0.0969 -0.0139 -0.1139 -0.1188 -2.2385 -0.0529 -1.3854 -0.0983 -0.0934 -0.0924 -0.0901 -0.1585 -0.0649 -0.0958 -1.2556 -0.1369 -0.1076 -0.0786 -0.0894 -0.0931 -1.0699 -0.0869 -0.0964 -0.1977 -0.0926 -0.0628 -1.1713 -0.0832 -0.0902 -0.2396 -0.0842 -0.1903 -0.0573 -0.0683 -0.4953 -0.5420 -3.2069 -0.1146 -0.1740 -0.1190 -0.1053 -0.2140 -0.1934 -0.0874 -0.0902 -0.0743 -1.2997 -0.1540 -0.1589 -0.1113 -0.9733 -0.1101 -0.1202 -0.0951 -0.0751 -0.0934 -0.0678 -0.1723 -1.4838 -0.0830 -0.1096 -0.1231 -0.1697 -0.1641 -0.0847 -0.0956 -0.1433 -0.1184 -0.1303 -0.4067 -0.2950 -0.1896 -0.1915 -0.0460 -0.5609 -0.3281 -0.3131 -0.0887 -0.0852 -0.0531 -1.4047 -0.5252 -2.0029 -0.2171 -0.3036 -0.1012 -0.1181 -1.1145 -0.0817 -0.0725
S-258	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( w < sum ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; } return true; }
T-258	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( w < sum ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; }
H-258	-0.3209821879863739	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i] ; if ( w < sum ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false ; i ++ ; } return true ; }
D-258	-0.3209821879863739	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i] ; if ( w < sum ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false ; i ++ ; } return true ; }
P-258	-0.1020 -0.0507 -0.1118 -0.0425 -0.0947 -0.0243 -0.0970 -0.0136 -0.1147 -0.1194 -2.2344 -0.0525 -1.3923 -0.1033 -0.0996 -0.0884 -0.0887 -0.1671 -0.0701 -0.0943 -1.2513 -0.1320 -0.1084 -0.0791 -0.0872 -0.0933 -1.0713 -0.0855 -0.0944 -0.1949 -0.0938 -0.0651 -1.0720 -0.0802 -0.0856 -0.2396 -0.0836 -0.1615 -0.0572 -0.0690 -0.4964 -0.5339 -3.2934 -0.1300 -0.1821 -0.1183 -0.2714 -0.1404 -0.0882 -0.0874 -0.0845 -0.0858 -1.3993 -0.1601 -0.1410 -0.1139 -0.9563 -0.1099 -0.1148 -0.0935 -0.0734 -0.0945 -0.0689 -0.1825 -1.5897 -0.0825 -0.1095 -0.1216 -0.1551 -0.1857 -0.0858 -0.0946 -0.1391 -0.1182 -0.1364 -0.5057 -0.5410 -0.2413 -0.2144 -0.0560 -0.3533 -0.1787 -0.2604 -0.0886 -0.0813 -0.0561 -1.4171 -0.4266 -1.8116 -0.2074 -0.7095 -0.0982 -0.1014 -1.1086 -0.0797 -0.0730
S-69	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; q.length > i; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; } return true; }
T-69	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; q.length > i; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; }
H-69	-0.31807518005371094	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; q.length > i ; i += 1 ) sum += q[i]; if ( sum > w ) return false ; int i = 0; int j = q.length - 1 ; while ( i < j ) { if ( q[i] != q[j] ) return false ; i ++ ; } return true ; }
D-69	-0.31807518005371094	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; q.length > i ; i += 1 ) sum += q[i]; if ( sum > w ) return false ; int i = 0; int j = q.length - 1 ; while ( i < j ) { if ( q[i] != q[j] ) return false ; i ++ ; } return true ; }
P-69	-0.1025 -0.0503 -0.1154 -0.0440 -0.0954 -0.0254 -0.0968 -0.0139 -0.1138 -0.1176 -2.1836 -0.0525 -1.3633 -0.0976 -0.0932 -0.0922 -0.0900 -0.1606 -0.0667 -0.0957 -1.1643 -0.1318 -0.1075 -0.0804 -0.0870 -0.0945 -1.0414 -0.2525 -0.1234 -0.0583 -0.1136 -0.1073 -1.3305 -0.0897 -0.0820 -0.2564 -0.0863 -0.1732 -0.0580 -0.0662 -0.4672 -0.4716 -2.1468 -0.1529 -0.1193 -0.1187 -0.2258 -0.2218 -0.0884 -0.0981 -0.0799 -1.2416 -0.1680 -0.1472 -0.1147 -1.0194 -0.1130 -0.1204 -0.0957 -0.0820 -0.0983 -0.0610 -0.1708 -2.2748 -0.2796 -0.0961 -0.1130 -0.1221 -0.1329 -0.1667 -0.0858 -0.0951 -0.1419 -0.1189 -0.1286 -0.4766 -0.4489 -0.2313 -0.2059 -0.0537 -0.3265 -0.1758 -0.2451 -0.0885 -0.0800 -0.0538 -1.4100 -0.5245 -1.9288 -0.1979 -0.6193 -0.1024 -0.1147 -1.1465 -0.0810 -0.0712
S-225	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = 1 + i; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-225	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = 1 + i; j < numbers.size () ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-225	-0.16828472912311554	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = 1 + i ; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-225	-0.16828472912311554	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = 1 + i ; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-225	-0.0938 -0.0535 -0.1035 -0.0552 -0.0877 -0.0366 -0.0823 -0.0220 -0.1146 -0.3577 -0.4284 -0.0411 -0.1627 -0.0471 -1.3641 -0.1110 -0.0778 -0.0917 -0.0843 -0.1809 -0.1135 -0.0781 -0.0781 -0.0865 -1.8266 -0.0788 -0.0890 -0.1091 -0.1092 -0.1900 -0.0811 -0.0920 -0.0750 -0.1047 -0.1507 -0.0775 -0.0834 -0.1095 -0.1047 -0.0662 -0.0895 -0.0901 -0.9601 -0.0645 -0.1043 -0.3895 -0.0971 -0.1256 -0.0901 -0.1049 -0.1681 -0.0687 -0.1061 -0.0892 -0.1062 -0.1461 -0.0780 -0.0967 -0.1535 -0.0278 -0.1088 -0.1100 -0.1293 -0.2843 -0.1141 -0.1758 -0.0956 -0.1136 -0.0875 -0.0985 -0.2130 -0.1024 -0.1213 -0.0902 -0.1063 -0.1252 -0.1209 -0.0349 -0.4786 -0.1075 -0.0890 -0.1905 -0.0759 -0.6968 -0.1172 -0.1046 -0.1064 -0.0483 -0.4339 -0.0864 -0.0912
S-94	public static int sum_squares ( int[] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( 0 == i % 4 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
T-94	public static int sum_squares ( int[] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( 0 == i % 3 ) result += lst[i] * lst[i]; else if ( i % 4 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
H-94	-0.29388031363487244	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( 0 == i % 4 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
D-94	-0.29388031363487244	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( 0 == i % 4 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
P-94	-0.1046 -0.0497 -0.1368 -0.0870 -0.1156 -0.0190 -0.0731 -0.1200 -0.1380 -2.3930 -0.0631 -0.0842 -0.0845 -0.1023 -0.0805 -0.0958 -1.8167 -0.1387 -0.1746 -0.1051 -0.0720 -0.0789 -0.0875 -1.6330 -0.1567 -0.0847 -0.0830 -0.5741 -0.0711 -0.0556 -0.9728 -0.0823 -0.1294 -0.2839 -0.0831 -0.0918 -0.1322 -0.1192 -0.5183 -0.1032 -0.1868 -1.1522 -0.0980 -0.0780 -0.1386 -0.0745 -0.0820 -0.6796 -0.2283 -0.2147 -0.0825 -0.0677 -0.4096 -0.1706 -1.8581 -0.1365 -0.1062 -0.1165 -0.6386 -0.4624 -0.1083 -0.2098 -0.1161 -0.0908 -0.1145 -0.0659 -0.0659 -0.3861 -0.1357 -0.1722 -0.0579 -0.0611 -0.3105 -0.1194 -0.2870 -0.3952 -0.0541 -0.3283 -0.1227 -1.7010 -0.1088 -0.1403 -0.0817 -0.0601 -0.3880 -0.1343 -2.3911 -0.1097 -0.0978 -0.0970 -0.2782 -0.0900 -0.0748
S-62	public static int sum_squares ( int[] lst ) { int result = 0; for ( int i = 0; lst.length > i; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
T-62	public static int sum_squares ( int[] lst ) { int result = 0; for ( int i = 0; lst.length > i; i += 1 ) { if ( i % 3 == 0 ) result += lst[i] * lst[i]; else if ( i % 4 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
H-62	-0.24815930426120758	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < ( lst.length ) ; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
D-62	-0.24815930426120758	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < ( lst.length ) ; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
P-62	-0.1045 -0.0494 -0.1362 -0.0882 -0.1155 -0.0189 -0.0736 -0.1207 -0.1361 -2.3517 -0.0640 -0.0848 -0.0847 -0.1053 -0.0835 -0.0972 -1.8157 -0.1402 -0.2065 -0.1044 -0.0731 -0.0766 -0.0879 -1.7480 -0.1074 -0.5628 -0.2450 -0.1201 -0.1106 -0.0626 -0.0292 -0.1040 -0.1696 -0.0810 -0.1719 -0.2479 -0.0837 -0.0913 -0.1184 -0.1175 -0.1797 -0.3420 -0.0821 -0.1369 -0.1012 -0.0838 -0.1157 -0.0692 -0.0683 -0.6178 -0.1759 -0.1902 -0.0773 -0.0568 -0.4010 -0.1535 -1.7699 -0.1061 -0.1032 -0.1120 -0.1476 -0.2831 -0.0849 -0.0789 -0.0942 -0.0870 -0.1027 -0.0657 -0.0612 -0.3539 -0.1203 -0.1521 -0.0541 -0.0546 -0.2715 -0.1082 -0.2390 -0.3118 -0.0491 -0.2936 -0.1169 -1.5894 -0.0935 -0.1208 -0.0843 -0.0572 -0.3443 -0.1163 -1.9745 -0.0844 -0.0883 -0.0858 -0.3211 -0.0845 -0.0682
S-15	public static int sum_squares ( int[] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( 0 == i % 3 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
T-15	public static int sum_squares ( int[] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst[i] * lst[i]; else if ( 0 == i % 4 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
H-15	-0.2900664210319519	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
D-15	-0.2900664210319519	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
P-15	-0.1047 -0.0497 -0.1370 -0.0870 -0.1157 -0.0190 -0.0731 -0.1200 -0.1381 -2.3987 -0.0625 -0.0842 -0.0846 -0.1024 -0.0818 -0.0966 -1.7375 -0.1392 -0.1711 -0.1052 -0.0713 -0.0801 -0.0875 -1.6422 -0.1313 -0.0875 -0.0774 -0.6156 -0.0690 -0.0544 -0.9533 -0.0827 -0.1351 -0.2609 -0.0829 -0.0924 -0.1267 -0.1191 -0.2667 -0.3697 -0.1224 -0.3033 -0.1260 -0.0831 -0.1332 -0.0702 -0.0816 -0.6729 -0.2133 -0.2155 -0.0784 -0.0698 -0.4177 -0.1702 -1.9605 -0.1276 -0.1073 -0.1163 -1.0531 -0.8469 -0.1695 -0.5712 -0.1453 -0.0857 -0.1068 -0.0639 -0.0635 -0.3612 -0.1300 -0.1617 -0.0540 -0.0585 -0.2644 -0.1125 -0.2634 -0.3374 -0.0512 -0.3027 -0.1228 -1.6437 -0.0955 -0.1194 -0.0826 -0.0578 -0.3297 -0.1279 -2.0435 -0.0825 -0.0913 -0.0826 -0.3561 -0.0835 -0.0708
S-354	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( "" + num ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
T-354	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( "" + Math.abs ( num ) ) .toCharArray () ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
H-354	-0.1974520981311798	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( "" + num ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
D-354	-0.1974520981311798	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( "" + num ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
P-354	-0.1117 -0.0400 -0.1022 -1.8277 -0.1119 -0.1066 -0.0114 -0.1006 -0.0502 -0.1116 -0.1011 -0.0822 -0.0859 -0.0894 -0.0913 -0.0816 -0.1115 -0.0604 -0.0780 -0.6540 -0.0986 -0.0522 -0.0942 -0.0620 -0.0901 -0.7234 -0.1921 -0.1141 -0.2047 -0.0964 -0.0640 -0.2153 -0.0914 -0.0597 -0.0768 -0.0937 -0.1052 -0.0849 -0.0299 -0.0671 -0.0937 -0.0887 -0.1100 -0.1202 -0.2248 -0.1476 -0.1066 -0.2294 -0.2824 -0.0719 -0.1707 -0.1315 -0.0824 -0.1150 -0.0956 -0.0827 -0.1308 -2.4442 -0.3102 -0.1506 -0.1051 -0.1015 -0.0948 -0.0852 -0.1584 -0.1820 -0.0676 -0.0936 -0.2227 -0.0803 -0.0273 -0.0818 -0.0712 -0.1209 -0.1814 -0.2280 -0.1127 -0.1071 -0.0667 -0.0708 -1.8114 -0.1020 -0.0780 -0.1050 -0.0624 -0.9964 -0.0527 -0.0929 -0.0641 -0.5455 -0.0727 -0.1093
S-387	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( 1 == ( int ) c % 2 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
T-387	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray () ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( 1 == n % 2 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
H-387	-0.2026786506175995	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( 1 == ( int ) c % 2 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
D-387	-0.2026786506175995	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( 1 == ( int ) c % 2 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
P-387	-0.1134 -0.0401 -0.1012 -1.8146 -0.1113 -0.1067 -0.0112 -0.1008 -0.0505 -0.1117 -0.1019 -0.0973 -0.0831 -0.0918 -0.0919 -0.0808 -0.1125 -0.0604 -0.0776 -0.6449 -0.0993 -0.0522 -0.0936 -0.0619 -0.0902 -0.7145 -0.1845 -0.1149 -0.1962 -0.0928 -0.0636 -0.2070 -0.0866 -0.0713 -0.0542 -0.0783 -0.1078 -0.0935 -0.0304 -0.0689 -0.0957 -0.0888 -0.1145 -0.1194 -0.3262 -0.1736 -0.1055 -0.2513 -0.2935 -0.0672 -0.1766 -0.1195 -0.0832 -0.1173 -0.0954 -0.0838 -0.1205 -2.4405 -0.3468 -0.1509 -0.1070 -0.6964 -0.1141 -0.1037 -0.0802 -0.0863 -0.1406 -0.1541 -0.0738 -0.0858 -0.0297 -0.0824 -0.0740 -0.1399 -0.1555 -0.1934 -0.1032 -0.1032 -0.0671 -0.0696 -1.7756 -0.1027 -0.0774 -0.1051 -0.0618 -0.9825 -0.0537 -0.0930 -0.0659 -0.5544 -0.0714 -0.1077
S-128	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( 0 == ( int ) c % 2 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
T-128	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray () ) { int n = c - '0'; if ( 0 == n % 2 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
H-128	-0.20126813650131226	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( 0 == ( int ) c % 2 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
D-128	-0.20126813650131226	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( 0 == ( int ) c % 2 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
P-128	-0.1137 -0.0404 -0.1012 -1.8157 -0.1113 -0.1066 -0.0113 -0.1007 -0.0502 -0.1116 -0.1004 -0.0931 -0.0830 -0.0916 -0.0926 -0.0823 -0.1140 -0.0599 -0.0779 -0.6403 -0.1007 -0.0511 -0.0941 -0.0616 -0.0907 -0.7005 -0.1769 -0.1149 -0.1980 -0.0904 -0.0633 -0.2024 -0.0850 -0.0730 -0.0537 -0.0783 -0.1070 -0.0928 -0.0297 -0.0690 -0.0958 -0.0876 -0.1138 -0.1188 -0.4521 -0.1226 -0.1151 -0.0821 -0.0999 -0.2109 -0.3989 -0.0879 -0.0895 -0.1181 -0.0977 -0.0854 -0.1416 -2.1536 -0.3498 -0.1629 -0.1154 -0.6002 -0.1138 -0.0842 -0.1787 -0.1906 -0.0474 -0.1322 -0.2034 -0.0839 -0.0266 -0.0831 -0.0713 -0.1258 -0.1180 -0.2137 -0.1109 -0.1031 -0.0673 -0.0702 -1.7893 -0.1028 -0.0798 -0.1059 -0.0633 -0.9903 -0.0521 -0.0930 -0.0651 -0.5444 -0.0707 -0.1049
S-378	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; numbers.size () > i; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-378	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; numbers.size () > i; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-378	-0.18074682354927063	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; numbers.size () > i ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-378	-0.18074682354927063	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; numbers.size () > i ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-378	-0.0930 -0.0535 -0.1043 -0.0568 -0.0881 -0.0364 -0.0822 -0.0230 -0.1143 -0.3519 -0.4514 -0.0412 -0.1628 -0.0484 -1.4853 -0.1068 -0.0769 -0.0918 -0.0854 -0.1837 -0.1151 -0.0782 -0.0788 -0.0827 -1.6206 -0.6706 -0.1223 -0.2116 -0.0753 -0.2049 -0.1103 -0.4503 -0.0755 -0.0920 -0.1560 -0.0777 -0.0814 -0.1140 -0.1059 -0.0659 -0.0924 -0.0912 -0.1395 -0.0665 -1.3033 -0.1120 -0.1039 -0.0902 -0.1058 -0.1541 -0.0731 -0.1017 -0.0885 -0.0923 -0.1345 -0.0791 -0.0971 -0.1611 -0.0287 -0.1097 -0.1041 -0.1205 -0.2853 -0.1162 -0.2010 -0.0951 -0.1044 -0.0899 -0.0974 -0.2171 -0.1036 -0.1248 -0.0890 -0.1058 -0.1228 -0.1212 -0.0324 -0.4175 -0.1019 -0.0885 -0.1893 -0.0740 -0.7555 -0.1180 -0.1136 -0.1063 -0.0496 -0.4007 -0.0843 -0.0859
S-371	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; numbers.size () > j; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-371	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; numbers.size () > j; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-371	-0.1729518324136734	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; numbers.size () > j ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-371	-0.1729518324136734	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; numbers.size () > j ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-371	-0.0934 -0.0539 -0.1051 -0.0569 -0.0882 -0.0366 -0.0822 -0.0228 -0.1144 -0.3573 -0.4413 -0.0405 -0.1642 -0.0475 -1.4050 -0.1077 -0.0781 -0.0917 -0.0855 -0.1830 -0.1152 -0.0774 -0.0769 -0.0824 -1.3768 -0.0828 -0.0846 -0.1078 -0.1076 -0.1755 -0.0849 -0.0931 -0.0761 -0.0941 -0.1639 -0.0787 -0.0825 -0.1153 -0.1057 -0.0651 -0.0917 -0.0897 -0.1257 -0.0677 -1.6029 -0.3348 -0.1146 -0.1558 -0.0729 -0.1156 -0.1147 -0.4302 -0.0852 -0.0935 -0.1373 -0.0763 -0.0954 -0.1637 -0.0279 -0.1098 -0.1049 -0.1243 -0.3030 -0.1162 -0.1650 -0.0931 -0.1024 -0.0857 -0.0973 -0.2231 -0.1037 -0.1209 -0.0879 -0.1053 -0.1243 -0.1219 -0.0320 -0.3886 -0.1050 -0.0885 -0.1864 -0.0759 -0.6902 -0.1178 -0.1105 -0.1031 -0.0487 -0.3607 -0.0853 -0.0870
S-299	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( threshold > distance ) return true; } } return false; }
T-299	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( threshold > distance ) return true; } } return false; }
H-299	-0.16429856419563293	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( threshold > distance ) return true ; } } return false ; }
D-299	-0.16429856419563293	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( threshold > distance ) return true ; } } return false ; }
P-299	-0.0924 -0.0550 -0.1027 -0.0562 -0.0881 -0.0360 -0.0829 -0.0228 -0.1143 -0.3549 -0.4126 -0.0405 -0.1613 -0.0485 -1.3672 -0.1025 -0.0665 -0.0874 -0.0852 -0.1802 -0.1142 -0.0778 -0.0785 -0.0816 -1.3838 -0.0816 -0.0895 -0.0999 -0.1087 -0.1822 -0.0772 -0.0908 -0.0765 -0.1005 -0.1748 -0.0784 -0.0834 -0.1126 -0.1046 -0.0659 -0.0932 -0.0875 -0.1295 -0.0677 -1.2984 -0.0985 -0.0954 -0.0804 -0.1021 -0.1498 -0.0674 -0.1052 -0.0870 -0.1007 -0.1374 -0.0793 -0.0975 -0.1634 -0.0299 -0.1063 -0.1003 -0.1271 -0.2894 -0.1136 -0.1760 -0.0960 -0.1195 -0.0854 -0.0973 -0.2102 -0.1036 -0.1270 -0.0892 -0.1064 -0.1306 -0.1158 -0.1533 -0.4672 -0.0310 -0.0905 -0.1700 -0.0840 -0.8100 -0.1153 -0.1085 -0.1040 -0.0449 -0.3492 -0.0846 -0.0911
S-232	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; s.length () - 2 > i; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-232	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; s.length () - 2 > i; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-232	-0.22958195209503174	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; s.length () - 2 > i ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-232	-0.22958195209503174	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; s.length () - 2 > i ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-232	-0.0988 -0.0541 -0.0823 -0.0658 -0.0860 -0.0389 -0.0095 -0.1199 -0.7879 -0.0914 -0.0856 -0.0877 -0.2554 -0.1126 -0.1237 -0.1483 -0.1021 -0.0752 -0.1386 -0.0846 -0.0828 -0.0846 -0.0905 -1.2846 -0.2846 -0.1114 -0.0622 -0.0652 -0.0870 -1.2065 -0.4097 -0.1255 -0.0686 -0.0697 -0.3245 -0.2188 -0.1138 -0.1169 -0.4582 -0.0836 -0.1034 -0.2859 -0.0767 -0.0875 -0.1329 -0.1190 -0.3894 -0.1236 -0.7182 -0.1133 -0.1278 -0.0873 -0.2001 -0.1019 -0.1007 -0.5616 -0.1140 -0.2528 -0.4166 -0.2202 -0.0866 -0.2871 -0.1564 -0.1177 -1.4355 -0.7191 -0.2617 -0.0832 -0.6704 -0.0805 -0.0720
S-409	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; } return true; }
T-409	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i + 2 ) == s.charAt ( i ) || s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
H-409	-0.2544613480567932	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i ) ) return false; if ( s.charAt ( i ) == s.charAt ( i ) ) return false; } return true ; }
D-409	-0.2544613480567932	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i ) ) return false; if ( s.charAt ( i ) == s.charAt ( i ) ) return false; } return true ; }
P-409	-0.0986 -0.0555 -0.0828 -0.0672 -0.0865 -0.0397 -0.0099 -0.1208 -0.8545 -0.0904 -0.0850 -0.0874 -0.2650 -0.1133 -0.1367 -0.1631 -0.1137 -0.0774 -0.1466 -0.1517 -0.0840 -0.0888 -0.0922 -1.4785 -0.2608 -0.1107 -0.0671 -0.0717 -0.0908 -1.0940 -0.0951 -0.1182 -0.4387 -0.1095 -0.0657 -0.0644 -0.9303 -0.5787 -0.0971 -0.0635 -0.3077 -0.0774 -0.0888 -0.1371 -0.1188 -0.3822 -0.1296 -0.7391 -0.1093 -0.1656 -0.1880 -0.2381 -0.2003 -0.1043 -0.7202 -0.1131 -0.2204 -0.5989 -0.0995 -0.1958 -0.1127 -1.3620 -1.0716 -0.1228 -0.2805 -0.1005 -0.7947 -0.1090 -0.1462 -0.1758 -0.1520 -0.1027 -0.1023 -0.7501 -0.1111 -0.1830 -0.2934 -0.0628 -0.0810 -0.0649 -0.9128 -0.1816 -0.0957 -0.0602 -0.7785 -0.0778 -0.0724
S-407	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) || s.charAt ( 1 + i ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-407	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 2 ) == s.charAt ( i + 1 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-407	-0.2636462152004242	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) ) return false ; } return true ; }
D-407	-0.2636462152004242	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) ) return false ; } return true ; }
P-407	-0.0992 -0.0547 -0.0820 -0.0672 -0.0866 -0.0397 -0.0099 -0.1208 -0.8209 -0.0903 -0.0858 -0.0879 -0.2644 -0.1133 -0.1368 -0.1561 -0.1103 -0.0762 -0.1472 -0.1475 -0.0831 -0.0886 -0.0917 -1.4668 -0.2657 -0.1106 -0.0669 -0.0715 -0.0928 -1.1002 -0.0933 -0.1187 -0.4481 -0.1090 -0.0658 -0.0639 -0.9365 -0.5750 -0.0961 -0.0618 -0.3491 -0.0768 -0.0874 -0.1323 -0.1186 -0.3657 -0.1260 -0.7128 -0.1110 -0.1396 -0.0874 -0.2048 -0.1168 -0.1024 -0.6322 -0.1131 -1.0406 -0.2556 -0.1620 -0.0898 -0.3263 -0.1542 -0.1205 -1.5641 -1.1491 -0.3354 -0.0878 -0.7403 -0.0813 -0.0694
S-340	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) || s.charAt ( 1 + i ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-340	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i + 1 ) == s.charAt ( i ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-340	-0.2636462450027466	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) ) return false ; } return true ; }
D-340	-0.2636462450027466	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) ) return false ; } return true ; }
P-340	-0.0992 -0.0547 -0.0820 -0.0672 -0.0866 -0.0397 -0.0099 -0.1208 -0.8209 -0.0903 -0.0858 -0.0879 -0.2644 -0.1133 -0.1368 -0.1561 -0.1103 -0.0762 -0.1472 -0.1475 -0.0831 -0.0886 -0.0917 -1.4668 -0.2657 -0.1106 -0.0669 -0.0715 -0.0928 -1.1002 -0.0933 -0.1187 -0.4481 -0.1090 -0.0658 -0.0639 -0.9365 -0.5750 -0.0961 -0.0618 -0.3491 -0.0768 -0.0874 -0.1323 -0.1186 -0.3657 -0.1260 -0.7128 -0.1110 -0.1396 -0.0874 -0.2048 -0.1168 -0.1024 -0.6322 -0.1131 -1.0406 -0.2556 -0.1620 -0.0898 -0.3263 -0.1542 -0.1205 -1.5641 -1.1491 -0.3354 -0.0878 -0.7403 -0.0813 -0.0694
S-252	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( 2 + i ) ) return false; } return true; }
T-252	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) || s.charAt ( 1 + i ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-252	-0.25734931230545044	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-252	-0.25734931230545044	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-252	-0.0994 -0.0550 -0.0821 -0.0672 -0.0866 -0.0397 -0.0098 -0.1208 -0.8314 -0.0917 -0.0858 -0.0879 -0.2657 -0.1133 -0.1348 -0.1574 -0.1103 -0.0762 -0.1467 -0.1664 -0.0832 -0.0886 -0.0914 -1.4558 -0.2627 -0.1107 -0.0663 -0.0716 -0.0911 -1.0754 -0.0934 -0.1187 -0.4626 -0.1081 -0.0658 -0.0649 -0.9195 -0.5608 -0.0970 -0.0629 -0.3045 -0.0774 -0.0882 -0.1320 -0.1185 -0.3620 -0.1247 -0.6994 -0.1133 -0.1299 -0.0878 -0.2066 -0.1051 -0.1019 -0.6257 -0.1148 -0.3127 -0.4807 -0.2052 -0.0884 -0.4026 -0.1566 -0.1128 -1.6259 -1.0628 -0.1185 -0.2268 -0.0956 -0.8138 -0.1100 -0.1189 -0.2390 -0.1847 -0.0769 -0.0995 -0.7599 -0.1129 -1.1528 -0.1230 -0.2752 -0.0858 -0.0775 -0.0551 -0.0523 -1.0235 -0.1424 -0.0956 -0.0722 -0.5373 -0.0782 -0.0737
S-244	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 2 ) == s.charAt ( i + 1 ) ) return false; } return true; }
T-244	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( 1 + i ) || s.charAt ( 1 + i ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-244	-0.2472241371870041	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-244	-0.2472241371870041	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-244	-0.0992 -0.0550 -0.0820 -0.0672 -0.0865 -0.0399 -0.0100 -0.1207 -0.8281 -0.0910 -0.0859 -0.0872 -0.2657 -0.1125 -0.1364 -0.1578 -0.1118 -0.0775 -0.1468 -0.1547 -0.0838 -0.0887 -0.0916 -1.4489 -0.2613 -0.1107 -0.0666 -0.0721 -0.0906 -1.0975 -0.0950 -0.1172 -0.4622 -0.1081 -0.0653 -0.0644 -0.9124 -0.5782 -0.0964 -0.0629 -0.3144 -0.0779 -0.0881 -0.1333 -0.1185 -0.3687 -0.1250 -0.7233 -0.1123 -0.1314 -0.0878 -0.2155 -0.1111 -0.1008 -0.6407 -0.1131 -0.2522 -0.5477 -0.2404 -0.0874 -0.2876 -0.1550 -0.1181 -1.5840 -0.9584 -0.1198 -0.1915 -0.0972 -0.8156 -0.1128 -0.1199 -0.1200 -0.1901 -0.0861 -0.0977 -0.7779 -0.1145 -0.1663 -0.1453 -0.5368 -0.0869 -0.0819 -0.0597 -0.0508 -1.0385 -0.1464 -0.0957 -0.0695 -0.5434 -0.0781 -0.0729
S-233	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i + 1 ) == s.charAt ( i ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-233	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-233	-0.24858292937278748	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i ) ) return false ; } return true ; }
D-233	-0.24858292937278748	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i ) ) return false ; } return true ; }
P-233	-0.0994 -0.0551 -0.0821 -0.0667 -0.0859 -0.0397 -0.0097 -0.1208 -0.8624 -0.0919 -0.0849 -0.0880 -0.2667 -0.1133 -0.1373 -0.1633 -0.1136 -0.0779 -0.1480 -0.1529 -0.0839 -0.0881 -0.0923 -1.4452 -0.2636 -0.1107 -0.0666 -0.0712 -0.0907 -1.1045 -0.0944 -0.1199 -0.4595 -0.1091 -0.0657 -0.0649 -0.9550 -0.5793 -0.0964 -0.0636 -0.3337 -0.0767 -0.0887 -0.1353 -0.1188 -0.3835 -0.1322 -0.7531 -0.1103 -0.1635 -0.1496 -0.2763 -0.2341 -0.1025 -0.6842 -0.1189 -0.1739 -0.0868 -0.3402 -0.2131 -0.1296 -1.5515 -0.7930 -0.1194 -0.2475 -0.0979 -0.8135 -0.1109 -0.1272 -0.1878 -0.1394 -0.1184 -0.1008 -0.7290 -0.1182 -0.1514 -0.1131 -0.0829 -0.0783 -0.0607 -1.1171 -0.1609 -0.0910 -0.0630 -0.6143 -0.0789 -0.0720
S-44	public static boolean is_happy ( String s ) { if ( 3 > s.length () ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-44	public static boolean is_happy ( String s ) { if ( 3 > s.length () ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-44	-0.2617890238761902	public static boolean is_happy ( String s ) { if ( 3 > s.length () ) return false ; for ( int i = 0; i < s.length () ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; } return true ; }
D-44	-0.2617890238761902	public static boolean is_happy ( String s ) { if ( 3 > s.length () ) return false ; for ( int i = 0; i < s.length () ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; } return true ; }
P-44	-0.0997 -0.0545 -0.0820 -0.0661 -0.0860 -0.0399 -0.0099 -0.1210 -0.7991 -0.0920 -0.0862 -0.0891 -0.3038 -0.1144 -0.3767 -0.1323 -0.1339 -0.1185 -0.0843 -0.0921 -0.0865 -0.0912 -0.0896 -1.4385 -0.2415 -0.1124 -0.0672 -0.0701 -0.0886 -1.1619 -0.0920 -0.1237 -0.6691 -0.1052 -0.0629 -0.0658 -1.4364 -0.0781 -0.0677 -0.4061 -0.0800 -0.0869 -0.1329 -0.1183 -0.3502 -0.1231 -0.6413 -0.1121 -0.1212 -0.0882 -0.1964 -0.1016 -0.1024 -0.6014 -0.1145 -0.2303 -0.4763 -0.2441 -0.0868 -0.3082 -0.1806 -0.1212 -1.4838 -1.0257 -0.1258 -0.2720 -0.0964 -0.7578 -0.1113 -0.1141 -0.1288 -0.1992 -0.0756 -0.0992 -0.7558 -0.1106 -0.1566 -0.1236 -1.1877 -0.0835 -0.0797 -0.0594 -0.0523 -1.0754 -0.1657 -0.1062 -0.0693 -0.7387 -0.0797 -0.0728
S-178	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; while ( 0 < lst.size () ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-178	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; while ( 0 < lst.size () ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size () - 1 ) ) ; switched = ( !switched ) ; } return result; }
H-178	-0.20531213283538818	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true ; while ( 0 < lst.size () ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
D-178	-0.20531213283538818	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true ; while ( 0 < lst.size () ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
P-178	-0.1044 -0.0403 -0.2267 -0.3048 -0.0669 -0.1380 -0.0199 -0.0804 -0.0190 -0.0925 -0.0456 -0.1155 -0.2629 -0.3602 -0.0602 -0.1687 -0.0554 -0.0838 -0.0798 -0.2699 -0.3591 -0.0623 -0.1321 -0.0603 -0.0817 -0.0541 -1.5847 -0.3198 -0.0667 -0.1219 -0.0695 -0.0805 -0.1169 -0.0296 -0.0992 -0.1488 -0.1862 -0.1741 -0.1086 -0.3597 -0.1252 -0.4997 -0.2897 -0.2292 -0.0742 -0.0846 -0.0875 -0.1722 -0.1210 -0.0754 -0.0886 -0.0938 -0.1198 -0.2429 -0.3032 -0.1231 -2.2822 -0.0988 -0.0634 -0.1277 -0.1128 -0.1186 -0.1079 -0.0931 -0.2959 -0.0664 -0.1391 -0.1191 -0.1342 -0.2140 -0.1131 -2.1287 -0.0886 -0.1387 -0.1156 -0.1001 -0.1036 -0.0981 -0.0882 -0.9562 -0.1274 -0.0866 -0.1489 -0.0732 -0.1224 -0.0665 -0.0984 -0.1543 -0.0789 -0.0770
S-322	public static Integer next_smallest ( int[] lst ) { List<Integer> numbers = new ArrayList<Integer> () ; for ( Integer n : lst ) numbers.add ( n ) ; Integer[] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( 2 > no_duplicate.length ) return null; return no_duplicate[1]; }
T-322	public static Integer next_smallest ( int[] lst ) { HashSet<Integer> numbers = new HashSet<Integer> () ; for ( Integer n : lst ) numbers.add ( n ) ; Integer[] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( 2 > no_duplicate.length ) return null; return no_duplicate[1]; }
H-322	-0.2941405177116394	public static Integer next_smallest ( int [] lst ) { List<Integer> numbers = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( lst.length ) ; i ++ ) numbers.add ( i ) ; Integer [] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( 2 > no_duplicate.length ) return null ; return no_duplicate[1]; }
D-322	-0.2941405177116394	public static Integer next_smallest ( int [] lst ) { List<Integer> numbers = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( lst.length ) ; i ++ ) numbers.add ( i ) ; Integer [] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( 2 > no_duplicate.length ) return null ; return no_duplicate[1]; }
P-322	-0.0983 -0.0513 -1.9451 -0.0658 -0.1031 -0.0667 -0.0261 -0.1230 -0.1416 -1.9374 -0.0365 -0.0824 -0.0883 -0.3846 -0.3108 -0.0525 -0.1362 -0.0455 -0.0834 -0.0578 -1.6706 -0.3543 -0.0579 -0.1162 -0.0703 -0.0846 -0.1453 -0.1178 -2.6148 -0.4122 -0.2419 -0.3288 -0.1031 -0.0925 -0.0552 -0.0867 -0.1113 -0.1093 -0.0645 -0.1269 -0.0998 -0.0938 -0.0724 -0.0828 -0.4255 -0.3750 -0.3291 -0.1186 -1.7037 -0.1221 -0.0844 -0.9667 -1.6477 -0.0309 -0.0916 -0.0635 -0.0831 -0.1399 -0.1116 -0.9603 -0.1064 -0.0470 -1.0559 -1.4396 -0.0719 -0.0726 -0.1014 -1.2093 -0.0839 -0.0592 -0.1048 -0.0442 -0.0840 -0.0830 -0.0798 -0.0881 -0.1856 -0.1085 -0.0800 -0.0703 -0.0657 -0.1135 -0.0761 -0.1276 -0.0399 -0.0845 -0.0809 -0.0647 -0.4268 -0.0932 -0.0431 -0.0947 -0.0693 -0.5836 -0.6124 -0.0830
S-353	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || 'I' == c || c == 'o' || c == 'u' ) count += 1; } return count; }
T-353	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) count += 1; } return count; }
H-353	-0.20259349048137665	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || 'I' == c || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-353	-0.20259349048137665	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || 'I' == c || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-353	-0.0932 -0.0479 -0.1097 -0.0706 -0.0959 -0.0300 -0.1158 -0.9277 -0.1160 -0.0888 -0.0900 -0.1061 -0.0590 -0.0856 -1.3786 -0.1491 -0.1083 -0.0784 -0.0730 -0.0854 -1.4697 -0.0866 -0.1212 -0.4670 -0.1440 -0.0774 -0.0925 -0.0897 -0.0842 -0.1143 -0.1380 -0.0820 -0.0861 -0.1285 -0.0819 -0.0881 -0.0899 -0.1596 -0.9477 -0.1016 -0.1218 -0.0871 -0.0855 -0.1678 -0.1193 -0.3915 -0.1955 -0.0579 -0.1642 -0.0974 -0.1698 -0.2344 -0.1425 -0.0572 -0.1128 -0.0902 -0.2525 -0.7425 -0.0750 -0.1022 -0.3056 -0.1450 -0.2492 -0.2114 -0.1747 -0.0770 -0.0478 -0.1134 -0.6689 -0.1737 -0.1285 -0.0651 -0.0614 -0.1071 -0.0819 -0.3104 -0.1486 -1.3144 -0.1156 -0.1850 -0.0872 -0.0911 -0.1652 -0.0897 -0.0766
S-406	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || 'e' == c || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-406	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-406	-0.20010288059711456	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || 'e' == c || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-406	-0.20010288059711456	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || 'e' == c || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-406	-0.0931 -0.0479 -0.1097 -0.0711 -0.0959 -0.0298 -0.1158 -0.9046 -0.1151 -0.0888 -0.0900 -0.1069 -0.0590 -0.0856 -1.3554 -0.1488 -0.1083 -0.0791 -0.0731 -0.0854 -1.4517 -0.0872 -0.1205 -0.4650 -0.1438 -0.0769 -0.0919 -0.0898 -0.0843 -0.1155 -0.1368 -0.0814 -0.0861 -0.1289 -0.0826 -0.0888 -0.0899 -0.1581 -0.9392 -0.1015 -0.1228 -0.0872 -0.0855 -0.1652 -0.1192 -0.4469 -0.1982 -0.0634 -0.1455 -0.0914 -0.1731 -0.2412 -0.1004 -0.0721 -0.4070 -0.1386 -0.3252 -0.2245 -0.1554 -0.0771 -0.1189 -0.1139 -0.3317 -0.1665 -0.1474 -0.0819 -0.0485 -0.1112 -0.8072 -0.1509 -0.1255 -0.0645 -0.0593 -0.1050 -0.0824 -0.3125 -0.1477 -1.2989 -0.1149 -0.1875 -0.0876 -0.0911 -0.1638 -0.0897 -0.0766
S-383	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( 0 == i % j ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-383	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( 0 == i % j ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-383	-0.1852952092885971	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( 0 == i % j ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-383	-0.1852952092885971	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( 0 == i % j ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-383	-0.1005 -0.0473 -0.3491 -0.3558 -0.0558 -0.1804 -0.0688 -0.0979 -0.0586 -0.0911 -0.0467 -0.1074 -0.0869 -0.0782 -0.0845 -0.0833 -0.4064 -0.3935 -0.0551 -0.1786 -0.0442 -0.0834 -0.0690 -1.8778 -0.3377 -0.0582 -0.1532 -0.0626 -0.0819 -0.1937 -0.1135 -0.0638 -0.0829 -0.0860 -1.2559 -0.1036 -0.1459 -0.1124 -0.4104 -0.0766 -0.0909 -0.1964 -0.0815 -0.0811 -0.1136 -0.0570 -0.1001 -0.0634 -0.0899 -0.0805 -0.5794 -0.0859 -0.1070 -0.0725 -0.0804 -0.0915 -0.7426 -0.1158 -0.0901 -0.1370 -0.9654 -0.0728 -0.0790 -0.1638 -0.0823 -0.0960 -0.1417 -0.1123 -0.4317 -0.1220 -0.3091 -0.8191 -0.0981 -0.0829 -0.1126 -0.0898 -0.1051 -0.0486 -0.0944 -0.1492 -0.3445 -0.1364 -0.1246 -0.1890 -0.1242 -0.1718 -0.1073 -0.0437 -0.0981 -0.2540 -0.2535 -0.3641 -0.1132 -0.1593 -0.1985 -0.0816 -0.1271 -0.0861 -0.0507 -0.1425 -0.0819 -0.0766
S-313	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; n > i; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-313	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; n > i; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-313	-0.1847350150346756	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; n > i ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-313	-0.1847350150346756	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; n > i ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-313	-0.1002 -0.0476 -0.3407 -0.3645 -0.0553 -0.1776 -0.0678 -0.0971 -0.0579 -0.0904 -0.0457 -0.1072 -0.0854 -0.0787 -0.0822 -0.0829 -0.3951 -0.4000 -0.0550 -0.1785 -0.0455 -0.0840 -0.0695 -1.8579 -0.3400 -0.0578 -0.1475 -0.0628 -0.0819 -0.2087 -0.1142 -0.0632 -0.0839 -0.0870 -1.2999 -0.0906 -0.2348 -0.1566 -0.7878 -0.0905 -0.0931 -0.1830 -0.0796 -0.0822 -0.1201 -0.0574 -0.1000 -0.0648 -0.0881 -0.0819 -0.5863 -0.0863 -0.1082 -0.0694 -0.0858 -0.0892 -0.8563 -0.1647 -0.1294 -0.1676 -0.8141 -0.0746 -0.0903 -0.1703 -0.0809 -0.0933 -0.1341 -0.1167 -0.4077 -0.2561 -0.0846 -0.1921 -0.1288 -0.0892 -0.1109 -0.0971 -0.1060 -0.0479 -0.0950 -0.1911 -0.3328 -0.1335 -0.1217 -0.1888 -0.1250 -0.1615 -0.1074 -0.0438 -0.0975 -0.2503 -0.2457 -0.3533 -0.1142 -0.1694 -0.1979 -0.0811 -0.1344 -0.0812 -0.0518 -0.1438 -0.0820 -0.0779
S-72	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; i > j; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-72	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; i > j; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-72	-0.1805189698934555	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; i > j ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-72	-0.1805189698934555	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; i > j ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-72	-0.1013 -0.0476 -0.3389 -0.3673 -0.0554 -0.1766 -0.0684 -0.0972 -0.0583 -0.0912 -0.0464 -0.1082 -0.0873 -0.0798 -0.0849 -0.0826 -0.4003 -0.4032 -0.0547 -0.1760 -0.0446 -0.0841 -0.0695 -1.8644 -0.3446 -0.0574 -0.1467 -0.0632 -0.0819 -0.1905 -0.1142 -0.0646 -0.0863 -0.0846 -1.2494 -0.1047 -0.1507 -0.1142 -0.4574 -0.0768 -0.0870 -0.2012 -0.0812 -0.0809 -0.1157 -0.0575 -0.1001 -0.0644 -0.0889 -0.0813 -0.5712 -0.0861 -0.1082 -0.0733 -0.0921 -0.0910 -0.7650 -0.1216 -0.2519 -0.1150 -1.1744 -0.0827 -0.1033 -0.1715 -0.0781 -0.0918 -0.1331 -0.1165 -0.2943 -0.2438 -0.0845 -0.1530 -0.1192 -0.0899 -0.1081 -0.0959 -0.1067 -0.0476 -0.0957 -0.1898 -0.3303 -0.1317 -0.1198 -0.1855 -0.1240 -0.1610 -0.1074 -0.0436 -0.0967 -0.2511 -0.2434 -0.3553 -0.1141 -0.1421 -0.1705 -0.0811 -0.1260 -0.0843 -0.0512 -0.1463 -0.0821 -0.0767
S-304	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length; i += 1 ) { expression += operand[i] + operator[i]; } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
T-304	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand[0] + ""; for ( int i = 0; operator.length > i; i += 1 ) { expression += operator[i] + operand[i + 1]; } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
H-304	-0.27555975317955017	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operand[i] + operator[i]; } return Double.parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-304	-0.27555975317955017	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operand[i] + operator[i]; } return Double.parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-304	-0.0875 -0.0561 -0.0801 -0.0503 -0.0953 -0.0090 -0.0099 -0.1154 -2.2311 -2.1195 -0.0849 -1.0030 -0.1343 -2.4953 -0.0306 -0.0728 -0.0727 -0.1623 -0.0119 -0.4111 -0.2132 -0.0684 -0.0900 -0.1783 -0.0457 -0.0842 -0.0795 -0.0821 -0.0638 -0.1301 -0.0425 -0.0729 -0.0855 -0.0808 -0.1280 -0.0448 -0.0337 -0.0883 -0.0609 -0.1469 -0.0863 -0.0302 -0.0268 -0.1075 -0.0916 -0.0122 -0.0723 -0.0866 -0.0865 -2.4340 -0.1354 -0.0872 -1.8364 -0.1434 -0.1116 -0.0854 -0.0875 -0.0840 -1.1623 -0.1087 -0.0845 -0.1343 -0.0756 -0.0603 -0.4100 -0.0887 -0.1664 -0.1940 -0.0822 -0.0846 -0.2273 -0.1003 -0.0443 -0.5915 -0.3311 -0.2832 -0.1120 -0.0841 -0.6223 -0.1976 -1.5906 -0.0994 -0.1386 -0.4517 -0.0942 -1.0005 -0.1024 -0.0664 -0.1140 -0.0182 -0.1166 -0.1269 -0.0996 -0.1867 -0.9023 -0.0628 -0.1182 -0.1054 -0.0840 -0.0743
S-193	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; operand.length > i; i += 1 ) { expression += operator[i] + operand[i]; } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
T-193	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = "" + operand[0]; for ( int i = 0; i < operator.length; i += 1 ) { expression += operator[i] + operand[i + 1]; } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
H-193	-0.273042231798172	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; operand.length > i ; i += 1 ) { expression += operator[i] + operand[i]; } return Double.parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-193	-0.273042231798172	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; operand.length > i ; i += 1 ) { expression += operator[i] + operand[i]; } return Double.parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-193	-0.0873 -0.0564 -0.0799 -0.0502 -0.0945 -0.0091 -0.0100 -0.1144 -2.1987 -2.0689 -0.0722 -0.8712 -0.1349 -2.3908 -0.0318 -0.0756 -0.0734 -0.1592 -0.0121 -0.4105 -0.2145 -0.0683 -0.0907 -0.1834 -0.0456 -0.0848 -0.0790 -0.0815 -0.0643 -0.1312 -0.0425 -0.0735 -0.0851 -0.0808 -0.1307 -0.0451 -0.0336 -0.0876 -0.0609 -0.1445 -0.0869 -0.0304 -0.0270 -0.1082 -0.0913 -0.0124 -0.0723 -0.0859 -0.0865 -2.3786 -0.1304 -0.0862 -1.8172 -0.1464 -0.1123 -0.0840 -0.0861 -0.0845 -1.1399 -0.0975 -0.2370 -0.0688 -0.1427 -0.1440 -0.5719 -0.0889 -0.1622 -0.1969 -0.0826 -0.0824 -0.2342 -0.1056 -0.0974 -0.6971 -0.2886 -0.2540 -0.1228 -0.0269 -0.3874 -0.1814 -1.5470 -0.1022 -0.1490 -0.4302 -0.0936 -1.0040 -0.1026 -0.0695 -0.1148 -0.0187 -0.1167 -0.1288 -0.1006 -0.1915 -0.9242 -0.0630 -0.1185 -0.1050 -0.0836 -0.0747
S-397	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( 0 == numbers[i] + numbers[j] + numbers[k] ) return true; } } } return false; }
T-397	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = 1 + j; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
H-397	-0.2491106539964676	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length; k += 1 ) { if ( 0 == numbers[i] + numbers[j] + numbers[k] ) return true ; } } } return false ; }
D-397	-0.2491106539964676	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length; k += 1 ) { if ( 0 == numbers[i] + numbers[j] + numbers[k] ) return true ; } } } return false ; }
P-397	-0.1024 -0.0483 -0.1007 -0.0332 -0.0127 -0.0886 -0.0490 -0.0891 -0.0494 -0.0932 -0.0922 -0.1216 -0.1169 -2.2217 -0.0537 -0.0823 -0.0873 -0.1514 -0.1166 -0.0709 -0.1004 -0.0889 -2.7415 -0.1604 -0.0760 -0.0550 -0.1175 -0.0737 -0.0603 -0.8108 -0.0702 -0.1095 -0.1695 -0.0806 -0.0847 -0.1010 -0.1120 -0.0650 -0.1053 -0.0964 -0.1217 -1.1623 -0.1017 -0.0788 -0.0772 -0.0989 -0.0736 -1.2571 -0.0868 -0.0763 -0.1277 -0.0796 -0.0917 -0.0987 -0.1116 -0.0700 -0.1018 -0.1032 -0.1925 -0.8335 -0.0953 -0.0630 -0.0815 -0.1001 -0.0706 -1.4864 -0.1157 -0.0839 -0.1171 -0.0813 -0.1125 -0.1280 -0.1098 -0.4391 -0.0945 -0.1735 -0.7882 -0.7061 -0.3110 -0.4009 -0.0774 -0.4320 -0.1825 -0.2463 -0.8907 -0.0589 -0.4864 -0.1275 -0.2469 -0.0899 -0.1409 -0.0884 -1.4205 -0.1100 -0.1112 -0.1037 -0.0976 -0.0436 -0.4818 -0.0843 -0.0766
S-25	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; numbers.length > j; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
T-25	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 1 + i; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
H-25	-0.24926775693893433	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; numbers.length > j ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true ; } } } return false ; }
D-25	-0.24926775693893433	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; numbers.length > j ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true ; } } } return false ; }
P-25	-0.1014 -0.0482 -0.0966 -0.0327 -0.0128 -0.0893 -0.0487 -0.0886 -0.0494 -0.0935 -0.0975 -0.1219 -0.1171 -2.2879 -0.0532 -0.0827 -0.0867 -0.1516 -0.1167 -0.0714 -0.0998 -0.0875 -1.4880 -0.0822 -0.0698 -0.1198 -0.0770 -0.0580 -0.9687 -0.0706 -0.0798 -0.1574 -0.0790 -0.0818 -0.1085 -0.1119 -0.0665 -0.1030 -0.0984 -0.0974 -1.4456 -0.6713 -0.1239 -0.0852 -0.1257 -0.1309 -1.5226 -0.0827 -0.0757 -0.1191 -0.0773 -0.0885 -0.0961 -0.1107 -0.0708 -0.1085 -0.1039 -0.1359 -1.3282 -0.4333 -0.0648 -0.0768 -0.0906 -0.0719 -1.3391 -0.1039 -0.0927 -0.1177 -0.0800 -0.1086 -0.1353 -0.1148 -0.1419 -0.7531 -0.7851 -0.2526 -0.1549 -0.0668 -0.3775 -0.2489 -0.2551 -0.2693 -0.0585 -0.4447 -0.1236 -0.2647 -0.4144 -0.1974 -0.0867 -0.1430 -0.0898 -1.3836 -0.1144 -0.1159 -0.1072 -0.0936 -0.0416 -0.4953 -0.0858 -0.0759
S-223	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; numbers.length > i; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
T-223	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; numbers.length > i; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
H-223	-0.23917265236377716	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false ; }
D-223	-0.23917265236377716	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false ; }
P-223	-0.1014 -0.0479 -0.0969 -0.0321 -0.0129 -0.0886 -0.0486 -0.0886 -0.0494 -0.0934 -0.0971 -0.1217 -0.1157 -2.3224 -0.0518 -0.0829 -0.0865 -0.1560 -0.1168 -0.0731 -0.1083 -0.0888 -2.6735 -0.1666 -0.1048 -0.1415 -0.4359 -0.0505 -0.0453 -0.5485 -0.0758 -0.1250 -0.1882 -0.0791 -0.0848 -0.1026 -0.1123 -0.0658 -0.1084 -0.0949 -0.0988 -1.3492 -0.1064 -0.0609 -0.0734 -0.1018 -0.0800 -1.1610 -0.0896 -0.0729 -0.1275 -0.0786 -0.0886 -0.0919 -0.1097 -0.0699 -0.1065 -0.1011 -0.1561 -0.9900 -0.0928 -0.0575 -0.0778 -0.1006 -0.0736 -1.4829 -0.1069 -0.0818 -0.1154 -0.0800 -0.1053 -0.1283 -0.1128 -0.1059 -0.6225 -0.5586 -0.2386 -0.1283 -0.0647 -0.3550 -0.2208 -0.2370 -0.2251 -0.0560 -0.4149 -0.1181 -0.2441 -0.3390 -0.1550 -0.0877 -0.1263 -0.0831 -1.4260 -0.1018 -0.1038 -0.0971 -0.0920 -0.0398 -0.7471 -0.0807 -0.0734
S-167	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[k] + numbers[i] + numbers[j] == 0 ) return true; } } } return false; }
T-167	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; numbers.length > k; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
H-167	-0.2389729619026184	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[k] + numbers[i] + numbers[j] == 0 ) return true ; } } } return false ; }
D-167	-0.2389729619026184	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[k] + numbers[i] + numbers[j] == 0 ) return true ; } } } return false ; }
P-167	-0.1016 -0.0486 -0.0975 -0.0330 -0.0130 -0.0886 -0.0486 -0.0892 -0.0498 -0.0935 -0.0976 -0.1220 -0.1173 -2.2366 -0.0532 -0.0832 -0.0861 -0.1527 -0.1168 -0.0714 -0.1066 -0.0889 -2.7918 -0.1759 -0.0768 -0.0547 -0.1237 -0.0727 -0.0599 -0.7744 -0.0702 -0.1104 -0.1689 -0.0807 -0.0837 -0.1019 -0.1121 -0.0653 -0.1032 -0.0965 -0.1341 -1.1143 -0.0993 -0.0876 -0.0771 -0.0973 -0.0749 -1.2057 -0.0837 -0.0744 -0.1309 -0.0791 -0.0907 -0.1005 -0.1105 -0.0700 -0.1131 -0.0993 -0.1969 -0.8115 -0.0997 -0.0587 -0.0845 -0.0938 -0.0714 -1.4792 -0.1190 -0.0952 -0.1242 -0.0803 -0.1070 -0.1311 -0.1120 -0.1172 -0.7509 -0.2668 -0.1889 -0.1616 -0.0654 -0.4656 -0.3776 -0.3058 -0.3497 -0.0632 -0.3956 -0.1938 -0.2670 -0.3832 -0.1654 -0.0869 -0.1337 -0.0862 -1.5264 -0.1122 -0.1113 -0.1054 -0.0940 -0.0425 -0.5334 -0.0846 -0.0767
S-163	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[j] + numbers[i] + numbers[k] == 0 ) return true; } } } return false; }
T-163	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( 0 == numbers[i] + numbers[j] + numbers[k] ) return true; } } } return false; }
H-163	-0.24300223588943481	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[j] + numbers[i] + numbers[k] == 0 ) return true ; } } } return false ; }
D-163	-0.24300223588943481	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0 ; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[j] + numbers[i] + numbers[k] == 0 ) return true ; } } } return false ; }
P-163	-0.1016 -0.0485 -0.0975 -0.0330 -0.0129 -0.0886 -0.0486 -0.0886 -0.0497 -0.0935 -0.0978 -0.1220 -0.1173 -2.2447 -0.0530 -0.0832 -0.0861 -0.1513 -0.1159 -0.0715 -0.1154 -0.0889 -2.7956 -0.1744 -0.0768 -0.0548 -0.1239 -0.0722 -0.0603 -0.7729 -0.0709 -0.1113 -0.1675 -0.0807 -0.0838 -0.1028 -0.1118 -0.0656 -0.1059 -0.0951 -0.1167 -1.1384 -0.0995 -0.0797 -0.0774 -0.0964 -0.0751 -1.2348 -0.0832 -0.0756 -0.1309 -0.0791 -0.0892 -0.0979 -0.1110 -0.0708 -0.1119 -0.1006 -0.1861 -0.8753 -0.0962 -0.0631 -0.0830 -0.0983 -0.0723 -1.4804 -0.1151 -0.0894 -0.1219 -0.0800 -0.1093 -0.1332 -0.1129 -0.1214 -0.7181 -0.6029 -0.2097 -0.1224 -0.0570 -0.4480 -0.4431 -0.2997 -0.3369 -0.0636 -0.4496 -0.1099 -0.2670 -0.4245 -0.1715 -0.0866 -0.1361 -0.0875 -1.5072 -0.1098 -0.1103 -0.1049 -0.0949 -0.0428 -0.5352 -0.0846 -0.0773
S-112	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; numbers.length > k; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
T-112	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; numbers.length > j; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
H-112	-0.24513107538223267	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i; j < numbers.length ; j += 1 ) { for ( int k = j ; numbers.length > k; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true ; } } } return false ; }
D-112	-0.24513107538223267	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i; j < numbers.length ; j += 1 ) { for ( int k = j ; numbers.length > k; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true ; } } } return false ; }
P-112	-0.1022 -0.0479 -0.0976 -0.0323 -0.0128 -0.0886 -0.0490 -0.0885 -0.0497 -0.0934 -0.0958 -0.1218 -0.1168 -2.2864 -0.0516 -0.0826 -0.0860 -0.1540 -0.1168 -0.0714 -0.1031 -0.0876 -1.5885 -0.0766 -0.0744 -0.1077 -0.0780 -0.0600 -1.0962 -0.0716 -0.0801 -0.1680 -0.0793 -0.0820 -0.1037 -0.1113 -0.0663 -0.1054 -0.0985 -0.0975 -1.3806 -0.1035 -0.0826 -0.0724 -0.0940 -0.0653 -1.2420 -0.0816 -0.0718 -0.1304 -0.0792 -0.0895 -0.1080 -0.1128 -0.0719 -0.1162 -0.1045 -0.1274 -1.5557 -0.2287 -0.1337 -0.0955 -0.1193 -0.1276 -1.5376 -0.1398 -0.0814 -0.1123 -0.0772 -0.1022 -0.1377 -0.1152 -0.1399 -0.8097 -0.7011 -0.2551 -0.1631 -0.0663 -0.3780 -0.2247 -0.2607 -0.3106 -0.0568 -0.4567 -0.1313 -0.2594 -0.3805 -0.1863 -0.0860 -0.1433 -0.0901 -1.3944 -0.1188 -0.1177 -0.1078 -0.0906 -0.0418 -0.5028 -0.0859 -0.0756
S-351	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, l + i ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-351	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; for ( int i = 0; i < 1 + a.length () - l; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-351	-0.2543100416660309	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-351	-0.2543100416660309	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-351	-0.0933 -0.0497 -0.1012 -0.0367 -0.0602 -0.0051 -0.0862 -0.0400 -0.1132 -1.0360 -0.1040 -1.3196 -0.6948 -0.0953 -0.0849 -0.0925 -0.1201 -0.0588 -0.0847 -0.1153 -0.1978 -0.0894 -0.0920 -0.0877 -1.5955 -0.0710 -0.0843 -0.1067 -0.6449 -0.1802 -0.1137 -0.0736 -0.0775 -0.0847 -1.2375 -0.0868 -0.0834 -0.9011 -0.1503 -0.0956 -0.0986 -0.0887 -0.0768 -0.1025 -0.1965 -0.0800 -0.0789 -0.1069 -0.1044 -0.0676 -0.0842 -0.0947 -0.9087 -0.1036 -0.0721 -0.0707 -0.5559 -0.0768 -0.1073 -0.1409 -0.0768 -0.1027 -0.1263 -0.1152 -0.2001 -0.1151 -0.8106 -0.1286 -0.1291 -1.3599 -0.0919 -1.2356 -0.0944 -0.1803 -0.1100 -0.1220 -0.1277 -0.5428 -0.1119 -0.1472 -0.8803 -0.1854 -1.0853 -0.0866 -0.0855 -0.0880 -0.0847 -0.0861 -0.0462 -1.2772 -0.0823 -0.0738 -0.0729 -0.0301 -0.7634 -0.0733 -0.0778
S-269	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, l + j ) ) ) return true; } } return false; }
T-269	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; for ( int i = 0; i < a.length () - l + 1; i += 1 ) { for ( int j = 0; l + 1 > j; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-269	-0.2449675053358078	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, l + j ) ) ) return true ; } } return false ; }
D-269	-0.2449675053358078	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, l + j ) ) ) return true ; } } return false ; }
P-269	-0.0934 -0.0501 -0.1011 -0.0364 -0.0601 -0.0051 -0.0862 -0.0400 -0.1132 -1.0291 -0.1038 -1.3412 -0.6945 -0.0973 -0.0856 -0.0926 -0.1180 -0.0600 -0.0852 -0.1133 -0.1990 -0.0902 -0.0912 -0.0876 -1.5993 -0.0700 -0.0843 -0.1066 -0.6568 -0.1826 -0.1136 -0.0738 -0.0766 -0.0841 -1.2329 -0.0868 -0.0830 -0.6308 -0.1490 -0.0990 -0.0987 -0.0888 -0.0782 -0.0988 -0.2032 -0.0795 -0.0783 -0.1068 -0.1045 -0.0674 -0.0809 -0.0965 -0.9017 -0.0998 -0.0714 -0.0655 -0.5307 -0.0744 -0.1083 -0.1391 -0.0774 -0.1019 -0.1252 -0.1143 -0.1975 -0.1146 -0.7915 -0.1277 -0.1239 -1.4508 -0.2071 -0.9680 -0.0906 -0.1182 -0.0983 -0.6102 -0.1028 -0.1071 -0.1224 -0.6379 -0.1089 -0.0950 -0.7824 -0.2702 -0.3724 -0.1065 -0.0877 -0.0891 -0.0856 -0.0828 -0.0465 -1.4913 -0.0832 -0.0743 -0.0738 -0.0307 -0.5554 -0.0749 -0.0776
S-208	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; l > j; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-208	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; for ( int i = 0; a.length () - l + 1 > i; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-208	-0.24178168177604675	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; l > j ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true ; } } return false ; }
D-208	-0.24178168177604675	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; l > j ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true ; } } return false ; }
P-208	-0.0938 -0.0497 -0.1003 -0.0366 -0.0602 -0.0051 -0.0863 -0.0399 -0.1132 -0.9880 -0.1056 -1.3101 -0.6668 -0.0980 -0.0848 -0.0924 -0.1234 -0.0614 -0.0879 -0.1093 -0.2001 -0.0879 -0.0942 -0.0874 -1.5322 -0.0692 -0.0836 -0.1066 -0.6523 -0.1781 -0.1135 -0.0723 -0.0779 -0.0837 -1.2277 -0.0891 -0.0763 -0.6260 -0.1477 -0.0967 -0.0880 -0.0888 -0.0779 -0.0998 -0.1980 -0.0802 -0.0787 -0.1087 -0.1057 -0.0666 -0.0828 -0.0971 -0.8469 -0.2454 -0.2636 -0.1177 -1.1899 -0.0844 -0.1112 -0.1453 -0.0759 -0.0986 -0.1293 -0.1142 -0.2133 -0.1166 -0.7702 -0.1275 -0.1281 -1.2389 -0.2057 -0.7482 -0.0833 -0.1120 -0.1013 -0.5658 -0.1020 -0.1143 -0.1217 -0.6539 -0.1089 -0.1006 -0.6063 -0.1139 -0.1293 -0.0785 -0.0827 -0.0864 -0.0844 -0.0839 -0.0451 -1.4502 -0.0840 -0.0760 -0.0734 -0.0308 -0.5359 -0.0753 -0.0783
S-213	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; for ( int i = 0; a.length () > i; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-213	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; for ( int i = 0; a.length () > i; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-213	-0.24412094056606293	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; a.length () > i ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true ; } } return false ; }
D-213	-0.24412094056606293	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; a.length () > i ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true ; } } return false ; }
P-213	-0.0939 -0.0493 -0.1022 -0.0365 -0.0596 -0.0050 -0.0861 -0.0408 -0.1131 -0.9633 -0.1030 -1.3188 -0.6566 -0.0965 -0.0849 -0.0932 -0.1228 -0.0573 -0.0871 -0.1174 -0.1866 -0.0834 -0.0939 -0.0885 -1.4921 -0.0699 -0.0837 -0.1099 -0.7604 -0.1912 -0.1144 -0.0752 -0.0743 -0.0860 -1.3431 -0.3099 -0.1720 -0.1102 -0.0793 -0.1951 -0.1610 -0.8902 -0.0857 -0.0956 -0.2129 -0.0800 -0.0786 -0.1047 -0.1056 -0.0669 -0.0809 -0.0966 -0.9030 -0.1151 -0.0804 -0.0678 -0.8603 -0.0762 -0.0953 -0.1518 -0.0766 -0.1013 -0.1244 -0.1144 -0.2144 -0.1150 -0.7678 -0.1295 -0.1262 -1.2215 -0.2002 -0.7143 -0.0827 -0.1114 -0.0995 -0.5783 -0.1027 -0.1079 -0.1221 -0.6572 -0.1091 -0.0993 -0.6226 -0.1118 -0.1365 -0.0784 -0.0814 -0.0856 -0.0854 -0.0840 -0.0464 -1.4773 -0.0848 -0.0785 -0.0757 -0.0315 -0.5467 -0.0741 -0.0760
S-404	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] % 2 == 0 && min_even > arr[i] ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
T-404	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] % 2 == 0 && min_even > arr[i] ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
H-404	-0.29422640800476074	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] % 2 == 0 && min_even > arr[i] ) { min_even = arr[i] ; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
D-404	-0.29422640800476074	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] % 2 == 0 && min_even > arr[i] ) { min_even = arr[i] ; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
P-404	-0.0958 -0.0440 -0.1047 -1.5146 -0.0201 -0.0139 -0.1177 -0.0987 -1.5300 -0.0491 -0.0857 -0.0916 -0.1259 -0.1329 -0.1097 -0.0613 -0.0875 -0.8994 -0.0957 -0.0563 -0.0886 -1.2002 -0.1195 -0.1158 -0.0698 -0.0798 -0.0867 -1.2587 -0.0768 -0.0956 -0.2473 -0.0787 -0.0639 -1.2281 -0.0688 -0.0637 -0.1819 -0.0778 -0.0858 -0.1300 -0.1220 -0.3222 -0.4887 -0.3255 -0.1721 -0.5605 -0.0643 -0.1327 -0.1114 -1.2350 -0.2101 -0.1002 -0.0713 -0.1769 -0.0630 -0.4707 -0.2270 -0.2511 -0.0921 -0.0783 -0.1367 -0.1068 -0.0875 -0.1604 -0.0593 -0.4721 -0.2004 -1.3897 -0.4058 -0.0770 -0.1472 -0.0796 -1.3173 -0.1461 -0.1053 -0.1615 -0.1176 -0.1292 -0.1483 -0.9017 -0.0867 -0.0980 -0.1420 -0.0958 -1.6358 -0.7411 -0.1197 -0.0805 -0.0795 -1.3204 -0.1486 -0.1627 -0.1176 -0.0726 -0.6915 -0.0858 -0.9282 -0.0738 -0.0718
S-393	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] < min_even && arr[i] % 2 == 0 ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
T-393	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] < min_even && arr[i] % 2 == 0 ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
H-393	-0.29120558500289917	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] < min_even && arr[i] % 2 == 0 ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
D-393	-0.29120558500289917	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] < min_even && arr[i] % 2 == 0 ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
P-393	-0.0952 -0.0435 -0.1049 -1.5304 -0.0200 -0.0137 -0.1176 -0.0994 -1.5606 -0.0505 -0.0858 -0.0911 -0.1273 -0.1306 -0.1100 -0.0612 -0.0901 -0.8922 -0.0943 -0.0560 -0.0895 -1.2203 -0.1208 -0.1159 -0.0692 -0.0823 -0.0876 -1.3106 -0.0782 -0.0926 -0.2308 -0.0809 -0.0655 -1.0482 -0.0681 -0.0645 -0.1697 -0.0776 -0.0867 -0.1248 -0.1239 -0.1954 -0.4682 -0.3405 -0.1525 -0.1489 -0.1272 -0.0971 -0.0728 -0.5446 -0.1805 -0.3079 -0.1280 -0.1765 -0.2970 -0.0569 -0.1321 -0.1135 -0.0839 -0.0748 -0.1683 -0.1100 -0.0891 -0.1644 -0.0626 -0.4967 -0.2156 -2.1896 -0.0728 -0.1522 -0.0833 -1.1500 -0.1756 -0.1107 -0.1872 -0.1183 -0.1404 -0.1529 -1.0512 -0.0871 -0.1064 -0.1610 -0.0958 -1.6916 -0.7593 -0.1248 -0.0843 -0.0799 -1.3757 -0.1473 -0.1917 -0.1216 -0.0699 -0.8104 -0.0882 -1.0229 -0.0754 -0.0737
S-356	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; arr.length > i; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
T-356	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; arr.length > i; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
H-356	-0.2757822275161743	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0 ; i < ( arr.length ) ; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
D-356	-0.2757822275161743	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0 ; i < ( arr.length ) ; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
P-356	-0.0944 -0.0436 -0.1058 -1.5147 -0.0203 -0.0139 -0.1184 -0.0994 -1.5373 -0.0473 -0.0857 -0.0915 -0.1247 -0.1396 -0.1135 -0.0603 -0.0885 -0.8687 -0.0938 -0.0563 -0.0902 -1.0724 -0.1205 -0.1169 -0.0690 -0.0805 -0.0877 -3.6359 -0.1151 -0.7208 -0.1375 -0.1581 -0.0518 -0.0502 -0.0245 -0.1186 -0.2188 -0.0618 -0.1390 -0.1692 -0.0808 -0.0822 -0.1157 -0.1202 -0.1661 -0.4334 -0.2417 -0.1639 -0.4343 -0.0540 -0.1077 -0.0938 -0.9649 -0.0906 -0.2711 -0.1308 -0.1198 -0.0906 -0.1165 -0.0845 -0.0703 -0.0942 -0.0769 -0.1620 -0.1065 -0.0973 -0.1567 -0.0570 -0.4725 -0.1783 -1.9467 -0.0570 -0.1313 -0.0772 -1.4347 -0.0990 -0.0774 -0.1143 -0.1139 -0.0866 -0.0988 -0.5303 -0.0785 -0.0687 -0.0906 -0.0933 -1.3813 -0.4649 -0.0811 -0.0683 -0.0798 -1.1671 -0.1376 -0.1159 -0.1144 -0.0746 -0.4356 -0.0679 -0.4460 -0.0691 -0.0618
S-270	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( 0 == arr[i] % 2 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
T-270	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( 0 == arr[i] % 2 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
H-270	-0.3203582167625427	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( 0 == arr[i] % 2 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
D-270	-0.3203582167625427	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( 0 == arr[i] % 2 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
P-270	-0.0943 -0.0434 -0.1049 -1.5310 -0.0201 -0.0138 -0.1186 -0.0987 -1.5526 -0.0486 -0.0852 -0.0917 -0.1269 -0.1317 -0.1130 -0.0585 -0.0881 -0.9998 -0.0942 -0.0565 -0.0900 -1.2966 -0.1216 -0.1158 -0.0697 -0.0810 -0.0870 -1.3660 -0.0762 -0.0935 -0.2173 -0.0790 -0.0643 -1.0466 -0.0676 -0.0658 -0.1754 -0.0782 -0.0864 -0.1343 -0.1212 -0.8546 -0.1239 -0.2829 -0.5100 -0.2784 -0.2197 -1.5480 -0.0753 -1.2514 -0.1478 -0.3402 -0.1420 -0.1327 -0.1082 -0.1457 -0.0912 -0.0698 -0.0961 -0.0739 -0.1619 -0.1107 -0.0945 -0.1720 -0.0599 -0.4989 -0.2048 -2.1386 -0.0764 -0.1517 -0.0849 -1.1365 -0.1774 -0.1125 -0.1837 -0.1170 -0.1382 -0.1496 -1.0130 -0.0866 -0.1066 -0.1727 -0.0952 -1.6836 -0.7442 -0.1240 -0.0816 -0.0794 -1.3499 -0.1488 -0.2094 -0.1229 -0.0680 -0.7777 -0.0897 -1.0285 -0.0755 -0.0716
S-168	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( -1 == index ) return new int[] {}; return new int[] { min_even, index }; }
T-168	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( -1 == index ) return new int[] {}; return new int[] { min_even, index }; }
H-168	-0.3019711673259735	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( -1 == index ) return new int[] {}; return new int[] { min_even, index }; }
D-168	-0.3019711673259735	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( -1 == index ) return new int[] {}; return new int[] { min_even, index }; }
P-168	-0.0948 -0.0439 -0.1050 -1.5452 -0.0205 -0.0139 -0.1176 -0.0979 -1.5699 -0.0501 -0.0859 -0.0914 -0.1244 -0.1331 -0.1130 -0.0594 -0.0873 -0.9172 -0.0944 -0.0513 -0.0895 -1.1102 -0.1210 -0.1165 -0.0694 -0.0831 -0.0863 -1.2610 -0.0795 -0.0969 -0.2308 -0.0799 -0.0652 -1.0411 -0.0688 -0.0654 -0.1737 -0.0775 -0.0867 -0.1313 -0.1230 -0.2951 -0.4909 -0.2945 -0.1861 -0.5929 -0.0620 -0.1381 -0.1048 -1.2058 -0.1286 -0.3187 -0.1471 -0.1377 -0.1042 -0.1395 -0.0901 -0.0705 -0.0958 -0.0755 -0.1749 -0.1102 -0.0943 -0.1716 -0.0578 -0.4856 -0.2051 -2.1201 -0.0700 -0.1517 -0.0870 -1.1335 -0.1761 -0.1117 -0.2010 -0.1197 -1.5125 -0.1265 -0.1321 -0.0958 -0.1157 -0.1359 -0.0933 -1.7112 -0.7221 -0.1444 -0.0786 -0.0793 -1.3613 -0.1499 -0.2048 -0.1232 -0.0697 -0.7362 -0.0836 -0.9506 -0.0751 -0.0703
S-282	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += " " + word; } return result.trim () ; }
T-282	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || 2 == word.length () ) result += word + " "; } return result.trim () ; }
H-282	-0.2537696063518524	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += " " + word ; } return result. trim () ; }
D-282	-0.2537696063518524	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += " " + word ; } return result. trim () ; }
P-282	-0.1055 -0.0640 -1.6982 -0.0168 -0.0922 -0.0727 -0.0865 -0.0668 -0.1172 -1.1189 -0.0457 -0.0898 -0.0890 -1.9141 -0.1068 -0.0845 -1.7691 -0.1691 -0.1136 -1.7297 -0.0553 -0.0677 -0.0268 -0.1194 -0.4267 -0.1184 -0.0840 -0.0792 -0.0884 -0.0945 -0.0874 -0.1517 -0.0538 -0.0822 -0.7653 -0.1219 -0.1145 -0.0765 -0.0748 -0.0860 -1.0946 -0.1025 -0.1643 -0.1376 -0.1025 -0.0775 -0.0707 -0.0869 -0.0789 -0.1227 -0.2655 -0.0811 -0.0947 -0.1446 -0.1220 -0.1449 -0.1391 -0.0914 -0.0741 -0.2597 -0.0920 -0.1327 -0.1092 -0.0824 -0.0627 -0.1347 -2.1969 -0.1105 -0.1574 -0.1185 -0.1142 -0.0892 -0.2006 -0.8234 -0.1315 -0.1669 -0.1290 -0.0691 -0.1870 -0.2259 -0.0927 -0.1785 -0.0703 -0.1657 -0.0822 -0.0658 -0.0551 -0.5774 -0.1446 -0.1797 -0.1014 -0.3519 -1.1166 -0.0654 -0.0943 -0.0863 -0.0734
S-362	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( 0 == word.length () % i ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
T-362	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; for ( int i = 2; word.length () > i; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
H-362	-0.25725600123405457	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( 0 == word.length () ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
D-362	-0.25725600123405457	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( 0 == word.length () ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
P-362	-0.1028 -0.0664 -1.6797 -0.0164 -0.0921 -0.0729 -0.0871 -0.0661 -0.1172 -1.1282 -0.0449 -0.0900 -0.0884 -1.8972 -0.1042 -0.0850 -1.8230 -0.1701 -0.1135 -1.7204 -0.0600 -0.0665 -0.0263 -0.1212 -0.4028 -0.1190 -0.0840 -0.0773 -0.0885 -0.0951 -0.0874 -0.1507 -0.0522 -0.0828 -0.7353 -0.1196 -0.1144 -0.0777 -0.0722 -0.0872 -1.0965 -0.0953 -0.1562 -0.1458 -0.1039 -0.0764 -0.0716 -0.0873 -0.0760 -0.1283 -0.2891 -0.0818 -0.0935 -0.1377 -0.1194 -0.3844 -0.1200 -0.1476 -0.1179 -0.0906 -0.0848 -0.8747 -0.0955 -0.1135 -1.6784 -0.1291 -0.1405 -0.1169 -0.1187 -0.0773 -0.1721 -0.8124 -0.1258 -0.1550 -0.1260 -0.0663 -0.1607 -0.1699 -0.0905 -0.1563 -0.0920 -0.0557 -0.1041 -0.1240 -0.0212 -0.1345 -0.2502 -0.1055 -0.2939 -1.2813 -0.0726 -0.1018 -0.0924 -0.0834
S-277	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; word.length () > i; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
T-277	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( 1 == word.length () ) flag = 1; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
H-277	-0.2478199303150177	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; word.length () > i ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
D-277	-0.2478199303150177	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; word.length () > i ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
P-277	-0.1041 -0.0658 -1.6673 -0.0165 -0.0934 -0.0743 -0.0877 -0.0665 -0.1173 -1.0961 -0.0448 -0.0901 -0.0890 -1.8587 -0.1067 -0.0849 -1.8655 -0.1713 -0.1135 -1.7211 -0.0608 -0.0663 -0.0266 -0.1206 -0.4295 -0.1187 -0.0834 -0.0766 -0.0880 -0.0943 -0.0875 -0.1538 -0.0561 -0.0810 -0.8186 -0.1255 -0.1169 -0.0772 -0.0777 -0.0862 -1.1459 -0.1413 -0.1478 -0.0961 -0.0788 -0.1704 -0.1141 -0.7961 -0.1151 -0.1280 -0.2958 -0.0797 -0.0912 -0.1452 -0.1229 -0.1377 -0.1277 -0.0876 -0.0792 -0.2402 -0.0906 -0.1229 -0.1095 -0.0808 -0.0659 -0.1299 -2.5200 -0.8179 -0.3217 -0.0994 -0.2179 -0.1341 -0.1165 -0.0683 -0.0670 -0.1236 -0.3616 -0.0645 -0.1311 -0.0919 -0.0698 -0.1188 -0.1216 -0.0872 -0.0983 -0.0699 -0.0411 -0.0728 -0.0980 -0.0158 -0.0817 -0.0823 -0.0685 -0.1034 -0.6351 -0.0790 -0.0755 -0.0812 -0.0781
S-214	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( 0 == flag || word.length () == 2 ) result += word + " "; } return result.trim () ; }
T-214	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( word.length () == 2 || flag == 0 ) result += word + " "; } return result.trim () ; }
H-214	-0.23933842778205872	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( 0 == flag || word.length () == 2 ) result += word + " "; } return result.trim () ; }
D-214	-0.23933842778205872	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( 0 == flag || word.length () == 2 ) result += word + " "; } return result.trim () ; }
P-214	-0.1035 -0.0659 -1.6801 -0.0163 -0.0928 -0.0730 -0.0871 -0.0662 -0.1171 -1.1279 -0.0445 -0.0900 -0.0884 -1.9117 -0.1041 -0.0845 -1.8216 -0.1686 -0.1135 -1.7497 -0.0578 -0.0660 -0.0264 -0.1210 -0.4110 -0.1181 -0.0833 -0.0773 -0.0885 -0.0944 -0.0872 -0.1547 -0.0457 -0.0828 -0.7135 -0.1203 -0.1143 -0.0765 -0.0739 -0.0867 -1.0557 -0.1001 -0.1644 -0.1333 -0.1039 -0.0765 -0.0706 -0.0872 -0.0781 -0.1273 -0.2505 -0.0801 -0.0943 -0.1441 -0.1215 -0.1985 -0.1347 -0.0882 -0.0727 -0.2674 -0.0932 -0.1325 -0.1126 -0.0834 -0.0574 -0.1369 -2.7141 -0.7957 -0.2875 -0.0905 -0.1585 -0.1227 -0.1165 -0.2465 -0.0804 -0.0212 -0.3900 -0.0666 -0.1284 -0.0890 -0.0667 -0.1232 -0.1020 -0.0833 -0.0974 -0.0679 -0.0416 -0.0702 -0.0984 -0.0148 -0.0795 -0.0801 -0.0660 -0.1027 -0.6088 -0.0784 -0.0749 -0.0804 -0.0795
S-143	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || 2 == word.length () ) result += word + " "; } return result.trim () ; }
T-143	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( 0 == flag || word.length () == 2 ) result += word + " "; } return result.trim () ; }
H-143	-0.23856714367866516	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( flag == 0 || 2 == word.length () ) result += word + " "; } return result.trim () ; }
D-143	-0.23856714367866516	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( flag == 0 || 2 == word.length () ) result += word + " "; } return result.trim () ; }
P-143	-0.1035 -0.0664 -1.6869 -0.0167 -0.0928 -0.0730 -0.0871 -0.0658 -0.1172 -1.1333 -0.0446 -0.0899 -0.0890 -1.9041 -0.1056 -0.0839 -1.8146 -0.1692 -0.1135 -1.7342 -0.0609 -0.0655 -0.0265 -0.1207 -0.4124 -0.1189 -0.0834 -0.0767 -0.0879 -0.0945 -0.0872 -0.1513 -0.0494 -0.0822 -0.7324 -0.1218 -0.1150 -0.0781 -0.0739 -0.0868 -1.0607 -0.0998 -0.1628 -0.1360 -0.1055 -0.0803 -0.0719 -0.0874 -0.0780 -0.1271 -0.2452 -0.0810 -0.0948 -0.1444 -0.1213 -0.1588 -0.1359 -0.0859 -0.0722 -0.2456 -0.0925 -0.1284 -0.1043 -0.0817 -0.0582 -0.1308 -2.9617 -0.6548 -0.2918 -0.0943 -0.1772 -0.1225 -0.1157 -0.0500 -0.0619 -0.1282 -0.3089 -0.1613 -0.1018 -0.0466 -0.1044 -0.0922 -0.0742 -0.0854 -0.0959 -0.0719 -0.0438 -0.0739 -0.0984 -0.0149 -0.0810 -0.0851 -0.0695 -0.1047 -0.6258 -0.0777 -0.0759 -0.0809 -0.0789
S-43	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( word.length () == 2 || flag == 0 ) result += word + " "; } return result.trim () ; }
T-43	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; for ( int i = 2; i < word.length () ; i += 1 ) { if ( 0 == word.length () % i ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
H-43	-0.23560313880443573	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( word.length () == 2 || flag == 0 ) result += word + " "; } return result.trim () ; }
D-43	-0.23560313880443573	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = i + 1 ; } if ( word.length () == 2 || flag == 0 ) result += word + " "; } return result.trim () ; }
P-43	-0.1035 -0.0664 -1.6855 -0.0165 -0.0921 -0.0730 -0.0872 -0.0654 -0.1171 -1.1389 -0.0443 -0.0900 -0.0884 -1.9111 -0.1049 -0.0835 -1.8079 -0.1679 -0.1128 -1.7346 -0.0591 -0.0665 -0.0263 -0.1208 -0.4124 -0.1180 -0.0834 -0.0778 -0.0879 -0.0951 -0.0880 -0.1530 -0.0436 -0.0817 -0.7453 -0.1209 -0.1144 -0.0783 -0.0741 -0.0861 -1.0685 -0.1014 -0.1664 -0.1386 -0.1049 -0.0774 -0.0706 -0.0868 -0.0794 -0.1276 -0.2500 -0.0811 -0.0939 -0.1395 -0.1213 -0.1500 -0.1337 -0.0922 -0.0734 -0.2776 -0.0925 -0.1319 -0.1085 -0.0851 -0.0629 -0.1328 -2.4768 -0.7211 -0.2951 -0.0944 -0.1819 -0.1107 -0.1127 -0.0785 -0.1277 -0.0843 -0.0701 -0.1623 -0.1274 -0.2644 -0.0449 -0.0686 -0.1885 -0.0890 -0.1016 -0.0737 -0.0430 -0.0751 -0.0990 -0.0155 -0.0796 -0.0821 -0.0680 -0.1001 -0.6043 -0.0784 -0.0756 -0.0806 -0.0783
S-349	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length; j++ ) { row_capacity += grid[j][i]; } result += ( bucket_capacity + row_capacity - 1 ) / bucket_capacity; } return result; }
T-349	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[i].length; j++ ) { row_capacity += grid[i][j]; } result += ( bucket_capacity + row_capacity - 1 ) / bucket_capacity; } return result; }
H-349	-0.2579444348812103	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length ; j++ ) { row_capacity += grid[j][i]; } result += ( bucket_capacity + row_capacity ) / bucket_capacity ; } return result ; }
D-349	-0.2579444348812103	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length ; j++ ) { row_capacity += grid[j][i]; } result += ( bucket_capacity + row_capacity ) / bucket_capacity ; } return result ; }
P-349	-0.1075 -0.0442 -0.1232 -0.0372 -0.0941 -0.0643 -0.1176 -0.1023 -0.1697 -0.0194 -1.1649 -0.0984 -0.0235 -0.1037 -0.0980 -0.0920 -0.0892 -0.1016 -0.1005 -0.0853 -1.4168 -0.1796 -0.1141 -0.0731 -0.1004 -0.0885 -1.2741 -0.0894 -0.0703 -0.1000 -0.0754 -0.0795 -1.2824 -0.0732 -0.6453 -0.0736 -0.0832 -0.1116 -0.1153 -0.0980 -0.1017 -0.0950 -1.6921 -0.0893 -0.1140 -0.0698 -0.1382 -0.1014 -1.2866 -0.1274 -0.0489 -0.0843 -1.0493 -0.3031 -0.7743 -0.0889 -1.1809 -0.0976 -0.6136 -0.0778 -0.0895 -0.2009 -0.0974 -0.1273 -0.0686 -0.0339 -0.4582 -0.2385 -0.1859 -0.4172 -1.8946 -0.0762 -0.1007 -0.1117 -0.1859 -0.0776 -0.1106 -0.1092 -0.1709 -0.1963 -0.1021 -0.1102 -0.2184 -0.1114 -0.1032 -0.0982 -0.0926 -0.5655 -0.0966 -0.0820 -0.0883 -0.3653 -0.0817 -0.0657
S-243	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; grid[j].length > j; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-243	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; grid[i].length > j; j++ ) { row_capacity += grid[i][j]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-243	-0.25636783242225647	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; grid[j].length > j; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-243	-0.25636783242225647	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; grid[j].length > j; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-243	-0.1078 -0.0450 -0.1232 -0.0370 -0.0941 -0.0642 -0.1174 -0.1027 -0.1652 -0.0200 -1.1638 -0.0975 -0.0246 -0.1035 -0.0995 -0.0903 -0.0879 -0.1014 -0.1051 -0.0860 -1.3272 -0.1758 -0.1140 -0.0731 -0.1021 -0.0890 -1.1855 -0.0867 -0.0590 -0.1234 -0.0756 -0.0743 -1.3230 -0.0742 -0.6109 -0.0741 -0.0837 -0.1123 -0.1224 -0.0987 -0.1000 -0.0937 -1.5031 -0.0980 -0.1158 -0.0684 -0.1339 -0.1044 -1.2209 -0.6143 -0.5969 -0.3725 -0.3912 -0.0789 -0.1173 -0.1503 -1.5847 -0.0787 -0.5375 -0.0771 -0.0928 -0.1901 -0.0978 -0.1258 -0.0806 -0.0373 -0.4562 -0.2593 -0.1616 -0.4408 -1.9147 -0.0857 -0.1204 -0.1144 -0.1955 -0.2270 -0.1004 -0.1135 -0.2106 -0.0880 -0.1087 -0.1027 -0.2385 -0.1290 -0.0928 -0.0947 -0.0950 -0.4921 -0.1087 -0.0839 -0.0897 -0.3420 -0.0826 -0.0666
S-27	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; grid.length > i; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-27	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; grid.length > i; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[i].length; j++ ) { row_capacity += grid[i][j]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-27	-0.263873428106308	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; grid.length > i ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid.length ; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-27	-0.263873428106308	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; grid.length > i ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid.length ; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-27	-0.1075 -0.0446 -0.1234 -0.0366 -0.0940 -0.0641 -0.1173 -0.1019 -0.1624 -0.0203 -1.1274 -0.0975 -0.0243 -0.1033 -0.0984 -0.0905 -0.0878 -0.1036 -0.1069 -0.0859 -1.3485 -0.1824 -0.1140 -0.0733 -0.1018 -0.0898 -1.3495 -0.3659 -0.0983 -0.0619 -0.1298 -0.1122 -1.3877 -0.0695 -0.6410 -0.0741 -0.0853 -0.1215 -0.1214 -0.0981 -0.1041 -0.0935 -1.5237 -0.0955 -0.1159 -0.0704 -0.1369 -0.1012 -1.3397 -0.0935 -0.0493 -0.1357 -1.7746 -0.0562 -0.9236 -0.1011 -0.6959 -0.0768 -0.0873 -0.1912 -0.0980 -0.1263 -0.0680 -0.0360 -0.5287 -0.2610 -0.2761 -0.4387 -1.9141 -0.0783 -0.1026 -0.1163 -0.1737 -0.1895 -0.0991 -0.1171 -0.1794 -0.0751 -0.1087 -0.1027 -0.3172 -0.1130 -0.0802 -0.0932 -0.0947 -0.5203 -0.1066 -0.0820 -0.0869 -0.3567 -0.0811 -0.0655
S-234	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < "".length () + i; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-234	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( "" + i ) .length () ; j += 1 ) { if ( ( "" + i ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-234	-0.21575939655303955	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < "".length () + i ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-234	-0.21575939655303955	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < "".length () + i ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-234	-0.1033 -0.0456 -0.1149 -0.0774 -0.0152 -0.0880 -0.0550 -0.0148 -0.1186 -0.0951 -0.0674 -0.0872 -0.0907 -0.1043 -0.0939 -0.0833 -0.8570 -0.1527 -0.1082 -0.0757 -0.0774 -0.0847 -0.8431 -0.0863 -0.1045 -0.0906 -1.1507 -0.0790 -0.0928 -0.1768 -0.0773 -0.0882 -0.2304 -0.1129 -0.2084 -0.2703 -0.0591 -0.1633 -0.0962 -0.3200 -0.1007 -0.1992 -0.0319 -0.1374 -0.0959 -0.0805 -0.0913 -0.1665 -0.1085 -0.0801 -0.0920 -0.0957 -0.9779 -0.0942 -0.0770 -0.5400 -0.0446 -0.0704 -0.3713 -0.1233 -0.7971 -0.0659 -0.0930 -0.1718 -0.0738 -0.0984 -0.1342 -0.1127 -0.2464 -0.2411 -0.5355 -1.9209 -0.1145 -0.1142 -1.1427 -0.0653 -0.1237 -0.1284 -0.1037 -0.5001 -0.1183 -0.0162 -0.0915 -0.1258 -0.0836 -1.6980 -0.1476 -0.1044 -0.0978 -0.0881 -0.1021 -0.1229 -0.3181 -0.0864 -0.0741
S-402	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; n > i; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-402	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; n > i; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-402	-0.20490913093090057	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; n > i ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-402	-0.20490913093090057	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; n > i ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-402	-0.1013 -0.0468 -0.1129 -0.0773 -0.0150 -0.0877 -0.0541 -0.0143 -0.1184 -0.0937 -0.0669 -0.0840 -0.0900 -0.1047 -0.0971 -0.0829 -0.7465 -0.1553 -0.1074 -0.0744 -0.0744 -0.0850 -0.9173 -0.0877 -0.3549 -0.1376 -0.4903 -0.0995 -0.0903 -0.1724 -0.0793 -0.0870 -0.2250 -0.1132 -0.2431 -0.2736 -0.0629 -0.1611 -0.0996 -0.3304 -0.1026 -0.1958 -0.0324 -0.1324 -0.0986 -0.0807 -0.0871 -0.1589 -0.1088 -0.0791 -0.0894 -0.0929 -0.8665 -0.0889 -0.0910 -0.2528 -0.2090 -0.6913 -0.0650 -0.0645 -0.0833 -0.0716 -0.1067 -0.1583 -0.0758 -0.0985 -0.1357 -0.1125 -0.2238 -0.2332 -0.5324 -1.9039 -0.1147 -0.1041 -1.3208 -0.0816 -0.1200 -0.1145 -0.1017 -0.4235 -0.1202 -0.0156 -0.0910 -0.1223 -0.0822 -1.7446 -0.1288 -0.1035 -0.0968 -0.0863 -0.0996 -0.1237 -0.2695 -0.0867 -0.0758
S-337	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; i + "".length () > j; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-337	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; ( i + "" ) .length () > j; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-337	-0.223303884267807	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; i + "".length () > j ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-337	-0.223303884267807	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; i + "".length () > j ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-337	-0.1035 -0.0462 -0.1152 -0.0774 -0.0153 -0.0880 -0.0546 -0.0151 -0.1183 -0.0948 -0.0696 -0.0876 -0.0909 -0.1057 -0.0947 -0.0833 -0.8246 -0.1562 -0.1089 -0.0762 -0.0779 -0.0836 -0.8323 -0.0864 -0.1078 -0.1016 -1.1643 -0.0803 -0.0889 -0.1766 -0.0780 -0.0878 -0.2188 -0.1132 -0.2100 -0.2691 -0.0569 -0.1545 -0.0959 -0.2900 -0.1009 -0.1929 -0.0322 -0.1338 -0.0964 -0.0806 -0.0916 -0.1735 -0.1088 -0.0804 -0.0941 -0.0942 -1.0627 -0.2171 -0.3194 -0.8613 -0.0622 -0.0660 -0.1938 -0.0976 -1.1387 -0.1407 -0.0891 -0.1523 -0.0726 -0.0990 -0.1407 -0.1124 -0.1995 -0.1986 -0.4913 -1.9389 -0.1160 -0.1125 -1.2332 -0.0869 -0.1108 -0.1142 -0.1013 -0.4373 -0.1183 -0.0160 -0.0919 -0.1245 -0.0847 -1.5888 -0.1462 -0.1085 -0.0997 -0.0881 -0.1019 -0.1238 -0.3150 -0.0864 -0.0740
S-280	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( 0 < num ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-280	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( 0 < num ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-280	-0.1853993535041809	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( 0 < num ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-280	-0.1853993535041809	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( 0 < num ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-280	-0.1062 -0.0551 -1.5740 -0.3164 -0.0512 -0.1525 -0.0262 -0.0852 -0.0608 -0.1126 -1.3680 -0.2384 -0.0473 -0.1577 -0.1250 -0.0815 -0.0852 -1.4557 -0.2621 -0.0548 -0.1532 -0.1271 -0.0865 -0.0645 -1.2928 -0.2377 -0.0584 -0.1399 -0.0643 -0.0818 -0.2605 -0.1059 -0.0676 -0.0810 -0.0745 -0.0927 -0.0940 -0.0857 -0.1126 -0.0627 -0.0859 -0.0681 -0.5246 -0.0943 -0.0613 -0.1133 -0.0236 -0.0821 -0.0920 -0.9302 -0.0927 -0.1082 -0.1889 -0.1277 -0.0802 -0.0793 -0.0859 -0.1692 -0.0452 -0.0917 -0.0267 -0.0894 -0.0476 -0.0711 -0.1580 -0.1159 -0.1062 -0.2266 -0.0503 -0.0946 -0.0287 -0.1315 -0.0822 -0.0868 -0.0777 -0.0772 -0.0873 -0.1072 -0.0901 -0.1020 -0.0323 -0.0721 -0.4155 -1.3482 -0.0522 -0.0670 -0.0748 -0.0811 -0.0281 -0.1877 -0.0830 -0.1002 -0.1227 -0.1987 -0.1014 -0.0363 -0.0966 -0.1116 -0.1073 -0.1583 -0.2496 -0.1174 -0.1125 -0.1019 -0.0873 -0.1146 -0.1510 -1.1086 -0.1613 -0.1811 -0.0831 -0.0606
S-224	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( 0 != ( curr_digit % 2 ) ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-224	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( 0 == ( curr_digit % 2 ) ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-224	-0.18397240340709686	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( 0 != ( curr_digit % 2 ) ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-224	-0.18397240340709686	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( 0 != ( curr_digit % 2 ) ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-224	-0.1071 -0.0547 -1.5553 -0.3212 -0.0509 -0.1516 -0.0261 -0.0845 -0.0601 -0.1125 -1.3587 -0.2419 -0.0470 -0.1553 -0.1238 -0.0821 -0.0851 -1.4430 -0.2706 -0.0549 -0.1502 -0.1271 -0.0858 -0.0650 -1.2799 -0.2434 -0.0585 -0.1352 -0.0643 -0.0819 -0.2393 -0.1059 -0.0673 -0.0825 -0.0738 -0.0925 -0.0941 -0.0855 -0.1162 -0.0657 -0.0831 -0.0671 -0.5471 -0.0850 -0.0631 -0.1136 -0.0236 -0.0827 -0.0876 -0.8232 -0.0821 -0.1113 -0.1382 -0.1442 -0.1142 -0.0860 -0.0887 -0.1713 -0.0471 -0.0914 -0.0269 -0.0873 -0.0426 -0.0596 -0.1505 -0.1135 -0.1083 -0.1592 -0.0731 -0.1458 -0.0604 -0.0981 -0.0311 -0.0851 -0.1106 -0.0866 -0.0903 -0.0992 -0.0907 -0.0993 -0.0330 -0.0699 -0.3704 -1.3949 -0.0510 -0.0664 -0.0723 -0.0771 -0.0263 -0.1777 -0.0789 -0.0969 -0.1209 -0.2032 -0.1003 -0.0370 -0.0937 -0.1106 -0.1045 -0.1557 -0.2462 -0.1175 -0.1233 -0.1029 -0.0867 -0.1208 -0.1617 -1.1459 -0.1617 -0.1844 -0.0834 -0.0607
S-267	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c; int denom = d * b; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-267	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c; int denom = d * b; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-267	-0.2491310089826584	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [0] ; int b = x.split ( "/" ) [1] ; int c = x.split ( "/" ) [0] ; int d = x.split ( "/" ) [1] ; int numerator = a * c ; int denom = d * b ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-267	-0.2491310089826584	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [0] ; int b = x.split ( "/" ) [1] ; int c = x.split ( "/" ) [0] ; int d = x.split ( "/" ) [1] ; int numerator = a * c ; int denom = d * b ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-267	-0.0817 -0.0450 -0.1016 -0.0389 -0.1079 -1.0673 -0.1352 -1.4137 -0.9126 -0.0938 -0.0838 -0.0850 -0.1117 -0.1162 -0.1020 -4.4252 -0.1652 -0.4091 -0.1367 -0.0694 -0.0924 -1.3377 -0.0961 -0.0794 -0.0691 -0.0999 -0.0650 -0.1237 -0.2371 -0.1064 -0.0521 -0.0835 -0.5705 -0.1523 -0.0950 -0.0491 -0.0990 -0.2927 -0.1315 -0.2575 -0.1156 -0.0564 -0.0898 -0.6697 -0.1185 -0.0852 -0.0404 -0.0884 -0.0523 -0.1144 -0.2887 -0.1087 -0.0514 -0.0839 -0.5277 -0.1210 -0.1237 -0.0985 -0.0916 -0.1373 -0.0291 -0.0810 -0.8696 -0.0869 -0.0720 -0.0928 -0.1043 -0.0453 -0.0489 -0.7022 -0.1663 -0.1139 -0.0573 -0.1055 -0.0353 -0.2116 -0.0941 -0.0753 -0.0733 -0.1331 -0.0518 -0.0636 -0.0361 -0.0930 -0.0861 -0.0942 -0.0609 -0.9266 -0.1185 -0.0469 -1.3793 -0.0897 -0.0699
S-159	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = c * a; int denom = b * d; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-159	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = c * a; int denom = b * d; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-159	-0.2476988434791565	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [0] ; int b = x.split ( "/" ) [1] ; int c = x.split ( "/" ) [0] ; int d = x.split ( "/" ) [1] ; int numerator = c * a ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-159	-0.2476988434791565	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [0] ; int b = x.split ( "/" ) [1] ; int c = x.split ( "/" ) [0] ; int d = x.split ( "/" ) [1] ; int numerator = c * a ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-159	-0.0811 -0.0447 -0.1015 -0.0387 -0.1071 -1.0718 -0.1362 -1.4117 -0.9172 -0.0938 -0.0838 -0.0850 -0.1104 -0.1446 -0.1034 -4.1756 -0.1673 -0.4189 -0.1383 -0.0699 -0.0925 -1.3565 -0.0954 -0.0778 -0.0680 -0.0987 -0.0681 -0.1208 -0.2445 -0.1061 -0.0535 -0.0835 -0.5911 -0.1544 -0.0940 -0.0495 -0.0979 -0.3645 -0.1225 -0.2561 -0.1152 -0.0571 -0.0898 -0.6866 -0.1218 -0.0878 -0.0391 -0.0866 -0.0527 -0.1143 -0.2894 -0.1088 -0.0517 -0.0829 -0.5671 -0.1194 -0.1222 -0.1038 -0.0942 -0.1189 -0.0346 -0.1104 -0.7470 -0.0849 -0.0697 -0.0927 -0.0890 -0.0428 -0.0562 -0.7001 -0.1672 -0.1136 -0.0560 -0.1023 -0.0375 -0.2100 -0.0954 -0.0731 -0.0728 -0.1333 -0.0512 -0.0618 -0.0372 -0.0915 -0.0862 -0.0930 -0.0594 -0.9153 -0.1190 -0.0455 -1.4223 -0.0897 -0.0694
S-17	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c; int denom = b * d; if ( ( int ) ( numerator / denom ) == numerator / denom ) return true; return false; }
T-17	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c; int denom = b * d; if ( ( int ) ( numerator / denom ) == 1.0 * numerator / denom ) return true; return false; }
H-17	-0.2534312903881073	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [0] ; int b = x.split ( "/" ) [1] ; int c = x.split ( "/" ) [0] ; int d = x.split ( "/" ) [1] ; int numerator = a * c ; int denom = b * d ; if ( ( int ) ( numerator / denom ) == numerator / denom ) return true; return false; }
D-17	-0.2534312903881073	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [0] ; int b = x.split ( "/" ) [1] ; int c = x.split ( "/" ) [0] ; int d = x.split ( "/" ) [1] ; int numerator = a * c ; int denom = b * d ; if ( ( int ) ( numerator / denom ) == numerator / denom ) return true; return false; }
P-17	-0.0812 -0.0454 -0.0999 -0.0394 -0.1080 -1.0731 -0.1352 -1.4117 -0.9041 -0.0931 -0.0838 -0.0840 -0.1118 -0.1050 -0.1012 -4.6197 -0.1511 -0.4160 -0.1382 -0.0699 -0.0924 -1.3484 -0.0962 -0.0773 -0.0669 -0.1002 -0.0692 -0.1200 -0.2352 -0.1063 -0.0527 -0.0834 -0.5937 -0.1531 -0.0949 -0.0475 -0.0978 -0.3024 -0.1247 -0.2596 -0.1156 -0.0560 -0.0898 -0.6604 -0.1203 -0.0861 -0.0368 -0.0883 -0.0527 -0.1112 -0.2945 -0.1089 -0.0516 -0.0834 -0.5680 -0.1195 -0.1211 -0.1094 -0.0922 -0.1435 -0.0306 -0.0792 -0.7944 -0.0870 -0.0672 -0.0949 -0.1003 -0.0443 -0.0378 -0.7546 -0.1734 -0.1165 -0.2219 -0.1134 -0.0742 -0.1160 -0.0732 -0.0715 -0.0480 -0.0887 -0.1313 -0.0955 -0.0982 -0.0502 -0.0890 -0.1029 -0.0537 -0.8328 -0.1201 -0.0456 -1.4928 -0.0945 -0.0720
S-53	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( ',' == c ) { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
T-53	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; if ( s.isEmpty () || s == null ) return result; String s_list = ""; for ( char c : s.toCharArray () ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
H-53	-0.24722044169902802	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( ',' == c ) { s_list += ' '; } else { s_list += c ; } } String [] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
D-53	-0.24722044169902802	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( ',' == c ) { s_list += ' '; } else { s_list += c ; } } String [] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
P-53	-0.0971 -0.0653 -1.7268 -0.3457 -0.0665 -0.1787 -0.0129 -0.0910 -0.0410 -0.1146 -1.1544 -0.1014 -0.0822 -0.0872 -1.2995 -0.2891 -0.0677 -0.1752 -0.0722 -0.0845 -0.0575 -1.3325 -0.2662 -0.0710 -0.1552 -0.0674 -0.0791 -1.9015 -0.1287 -0.0954 -0.0527 -0.0915 -1.7845 -0.1722 -0.1048 -0.1067 -0.0895 -0.0670 -0.0632 -0.1828 -0.0743 -0.0324 -0.0652 -0.0939 -0.0868 -0.1667 -0.1107 -0.0460 -0.2222 -0.1167 -0.0913 -0.0878 -0.0857 -0.1100 -0.0602 -0.0943 -0.0785 -0.0171 -0.2033 -0.1060 -0.0982 -0.0755 -0.1002 -0.0621 -0.0827 -0.2142 -0.5316 -0.0883 -0.0897 -1.7296 -2.1077 -0.0649 -0.0883 -0.0449 -0.0844 -0.0680 -0.1156 -0.0588 -0.2531 -0.8988 -0.0697 -0.0965 -0.6872 -0.1506 -0.0227 -0.0706 -0.0274 -0.0928 -0.0895 -0.3810 -0.1151 -1.9540 -0.0653 -0.0747 -0.0590 -0.1038 -0.0447 -0.0921 -0.0921 -0.0918 -0.2658 -0.2703 -0.1184 -0.0752 -0.1169 -0.0847 -0.0913 -0.0794 -0.0724 -0.1512 -0.0843 -0.0706
S-308	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return "." + class_name + strong; }
T-308	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return strong + class_name + "."; }
H-308	-0.31190386414527893	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s ; } return "." + class_name + strong ; }
D-308	-0.31190386414527893	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s ; } return "." + class_name + strong ; }
P-308	-0.1074 -0.0620 -1.4847 -0.1276 -0.0486 -0.1043 -0.0270 -0.1134 -1.1782 -0.0850 -0.0921 -0.0590 -1.3779 -0.6441 -1.6174 -0.0303 -0.0856 -0.0936 -2.4309 -0.1072 -0.1041 -0.1659 -1.4144 -0.1538 -0.1273 -0.0852 -1.3822 -0.0864 -0.0249 -0.0838 -0.0339 -1.0727 -0.1929 -0.1149 -1.0431 -0.0791 -0.0659 -0.0592 -0.0884 -0.0843 -0.1270 -0.0786 -0.0968 -0.8162 -0.0894 -0.0418 -0.0824 -0.8895 -0.1457 -0.1134 -0.1028 -0.0913 -0.0560 -0.0691 -0.1022 -0.0497 -0.0401 -0.0715 -0.0894 -0.0927 -0.1503 -0.1214 -0.5999 -0.1011 -0.2227 -0.1280 -0.1208 -0.0862 -0.1515 -0.0979 -0.0844 -1.4161 -0.1057 -1.5841 -0.1396 -0.1077 -0.4006 -0.0956 -0.3890 -0.1101 -0.1302 -0.0803 -0.1019 -0.1176 -0.0803 -0.1075 -0.0991 -1.9069 -0.1208 -0.1230 -0.2278 -0.1911 -0.0979 -0.0966 -1.3340 -0.2113 -0.1530 -0.0839 -1.7647 -0.1115 -0.0793 -0.0371 -0.0571 -0.0872 -0.0930 -0.0584 -0.1377 -0.4724 -0.4945 -0.0872 -0.0810
S-106	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( c == Character.toLowerCase ( c ) ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-106	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( c == Character.toLowerCase ( c ) ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-106	-0.309898316860199	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1 ; if ( c == Character.toLowerCase ( c ) ) CAP += 1 ; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-106	-0.309898316860199	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1 ; if ( c == Character.toLowerCase ( c ) ) CAP += 1 ; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-106	-0.1096 -0.0629 -1.4960 -0.1276 -0.0482 -0.1059 -0.0270 -0.1126 -1.1633 -0.0835 -0.0931 -0.0621 -1.4140 -0.6262 -1.6481 -0.0306 -0.0857 -0.0944 -2.3997 -0.1072 -0.1037 -0.1586 -1.3939 -0.1519 -0.1212 -0.0846 -1.3447 -0.0864 -0.0243 -0.0831 -0.0339 -1.0905 -0.1913 -0.1140 -1.0383 -0.0805 -0.0669 -0.0605 -0.0884 -0.0843 -0.1266 -0.0817 -0.0967 -0.8171 -0.0887 -0.0419 -0.0817 -0.8848 -0.1475 -0.1126 -0.0964 -0.0933 -0.0560 -0.0685 -0.1021 -0.0507 -0.0406 -0.0709 -0.0900 -0.0931 -0.1481 -0.1197 -0.9725 -0.1022 -0.2098 -0.1262 -0.1238 -0.0878 -0.1705 -0.1016 -0.0845 -1.0331 -0.0876 -2.0899 -0.5192 -0.1783 -0.1109 -0.1645 -0.0933 -0.4071 -0.0958 -0.3668 -0.1241 -0.1177 -0.0772 -0.0813 -1.3487 -0.0800 -0.2372 -0.2957 -1.0659 -0.0723 -0.1739 -0.1130 -0.0589 -0.0863 -0.5143 -0.1855 -0.1290 -0.0721 -0.7800 -0.0760 -0.0635 -0.0581 -0.1006 -0.0622 -0.0552 -0.0178 -0.0607 -0.2573 -1.5583 -0.0846 -0.0782
S-68	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return strong + class_name + "."; }
T-68	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( val < CAP - SM ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-68	-0.30945220589637756	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1 ; } val = CAP - SM; strong = s; } return strong + class_name + "."; }
D-68	-0.30945220589637756	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1 ; } val = CAP - SM; strong = s; } return strong + class_name + "."; }
P-68	-0.1129 -0.0627 -1.5404 -0.1288 -0.0490 -0.1047 -0.0256 -0.1119 -1.1757 -0.0834 -0.0913 -0.0589 -1.3790 -0.6326 -1.7029 -0.0291 -0.0856 -0.0930 -2.2588 -0.1182 -0.0997 -0.1499 -1.4655 -0.1382 -0.1004 -0.0843 -1.3656 -0.0867 -0.0245 -0.0847 -0.0350 -1.1025 -0.1959 -0.1149 -1.0412 -0.0791 -0.0660 -0.0573 -0.0877 -0.0833 -0.1270 -0.0746 -0.0979 -0.8009 -0.0899 -0.0411 -0.0827 -0.8982 -0.1465 -0.1126 -0.1030 -0.0897 -0.0559 -0.0702 -0.1015 -0.0494 -0.0403 -0.0713 -0.0901 -0.0922 -0.1473 -0.1214 -0.5894 -0.1012 -0.2231 -0.1278 -0.1197 -0.0867 -0.1508 -0.0976 -0.0844 -1.3629 -0.1029 -1.6039 -0.1395 -0.1076 -0.3913 -0.0963 -0.3888 -0.1100 -0.1298 -0.0807 -0.1018 -0.1182 -0.0802 -0.0866 -0.0988 -2.5415 -0.3248 -1.1808 -0.0742 -0.1732 -0.0723 -0.0620 -0.0666 -0.6660 -0.1968 -0.1372 -0.0814 -1.0810 -0.0869 -0.0665 -0.1690 -0.0630 -0.0814 -0.0905 -0.0569 -0.1021 -0.0537 -0.6579 -0.0898 -0.0922
S-7	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( c == Character.toUpperCase ( c ) ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-7	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( c == Character.toUpperCase ( c ) ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-7	-0.31527945399284363	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( c == Character.toUpperCase ( c ) ) CAP += 1 ; if ( c == Character.toLowerCase ( c ) ) SM += 1 ; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-7	-0.31527945399284363	public static String strongest_extension ( String class_name , String [] extensions ) { String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( c == Character.toUpperCase ( c ) ) CAP += 1 ; if ( c == Character.toLowerCase ( c ) ) SM += 1 ; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-7	-0.1107 -0.0634 -1.4916 -0.1276 -0.0479 -0.1051 -0.0270 -0.1126 -1.1526 -0.0836 -0.0931 -0.0616 -1.4167 -0.6224 -1.6247 -0.0307 -0.0858 -0.0945 -2.3826 -0.1076 -0.1036 -0.1584 -1.3936 -0.1542 -0.1154 -0.0852 -1.3087 -0.0865 -0.0242 -0.0832 -0.0336 -1.0907 -0.1930 -0.1149 -1.0387 -0.0806 -0.0668 -0.0601 -0.0885 -0.0844 -0.1266 -0.0807 -0.0969 -0.8277 -0.0892 -0.0410 -0.0820 -0.8991 -0.1415 -0.1126 -0.0945 -0.0924 -0.0554 -0.0688 -0.1012 -0.0498 -0.0400 -0.0701 -0.0895 -0.0916 -0.1446 -0.1193 -0.1646 -0.1165 -0.4167 -0.0964 -0.2322 -0.1698 -0.1328 -0.0887 -0.0876 -0.9808 -0.0869 -2.0963 -0.4751 -0.1861 -0.1129 -0.4312 -0.0813 -0.7698 -0.0916 -0.3574 -0.1280 -0.1184 -0.0815 -0.0771 -1.8122 -0.0938 -0.3199 -0.2797 -1.1820 -0.0701 -0.1807 -0.0664 -0.0623 -0.0623 -0.5710 -0.1861 -0.1272 -0.0739 -0.8617 -0.0809 -0.0612 -0.0597 -0.1005 -0.0630 -0.0565 -0.0180 -0.0621 -0.2643 -1.4507 -0.0837 -0.0766
S-100	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; arr.length > i; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; arr.length > i; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-100	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; arr.length > i; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; arr.length > i; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-100	-0.2612662613391876	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; arr.length > i ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; arr.length > i ; i++ ) { sum += arr[i] ; } return prod * sum ; }
D-100	-0.2612662613391876	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; arr.length > i ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; arr.length > i ; i++ ) { sum += arr[i] ; } return prod * sum ; }
P-100	-0.0928 -0.0467 -0.1221 -0.0570 -0.0861 -0.0267 -0.0616 -0.1118 -0.1060 -1.7408 -0.0486 -0.0832 -0.0879 -0.6184 -0.1100 -0.0881 -0.1347 -0.0819 -0.1307 -0.0971 -0.0821 -0.0621 -0.0323 -0.7667 -0.1275 -0.1158 -0.0858 -1.6330 -0.3014 -0.1082 -0.0823 -0.1082 -0.0828 -1.0485 -0.2201 -0.1030 -0.0750 -0.1187 -0.1153 -1.0623 -0.0838 -0.4629 -0.0764 -0.0930 -0.1516 -0.1163 -0.1109 -0.6700 -0.2229 -0.1660 -0.1341 -0.1119 -0.0831 -0.2109 -0.1911 -1.0294 -0.1001 -0.0821 -0.1052 -0.0682 -0.3703 -0.1554 -0.1271 -0.1510 -0.1019 -0.0778 -0.1308 -0.0232 -0.9221 -0.0868 -0.1487 -0.0620 -0.0900 -1.1185 -0.1218 -0.1051 -0.0824 -0.0984 -0.0812 -1.1006 -0.0926 -0.1073 -0.0721 -0.1050 -0.0990 -1.2724 -0.0783 -0.4834 -0.0789 -0.0969 -0.2020 -0.0634 -2.0922 -1.1616 -0.2060 -0.3136 -0.1303 -0.0856 -0.1928 -0.2162 -0.0295 -0.1263 -0.2851 -0.0782 -0.0757
S-190	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; array.length / 2 > i; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
T-190	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; array.length / 2 > i; i += 1 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; } return array; } }
H-190	-0.26292604207992554	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { for ( int i = 0; array.length / 2 > i ; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
D-190	-0.26292604207992554	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { for ( int i = 0; array.length / 2 > i ; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
P-190	-0.0982 -0.0407 -0.1031 -1.7237 -0.0392 -0.0889 -0.0473 -0.1153 -0.0833 -1.6251 -0.0489 -0.0837 -0.0864 -0.1426 -0.1147 -0.1023 -0.1258 -0.1026 -0.1323 -0.0926 -0.0809 -0.0970 -0.0593 -0.7793 -1.9263 -0.0890 -0.0304 -0.1127 -0.0505 -0.0961 -0.0971 -0.2573 -0.1148 -0.1987 -0.1494 -0.7969 -0.0980 -0.0785 -0.2846 -0.1135 -0.0995 -0.0777 -0.2292 -0.9401 -0.0923 -0.1318 -0.0701 -0.1250 -0.2552 -0.0838 -0.0777 -0.0620 -1.0304 -0.0986 -0.2121 -0.2245 -0.1271 -0.0793 -0.0847 -0.1001 -1.5215 -0.2372 -0.1032 -0.0754 -0.1398 -0.0853 -0.1344 -0.1188 -1.0339 -0.0801 -0.0953 -0.2250 -0.0781 -0.0891 -0.1318 -0.5723 -0.2505 -0.1450 -0.1085 -0.0544 -0.4583 -0.1581 -0.0930 -0.0682 -0.1484 -0.1224 -0.2603 -0.3254 -1.0939 -0.0733 -0.2270 -0.1359 -0.0929 -0.0608 -0.1058 -0.0843 -0.2208 -0.9659 -0.1150 -0.0560 -0.3193 -0.1953 -1.7201 -0.1303 -0.3060 -0.0669 -1.0654 -0.0992 -0.0954 -0.0703
S-376	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return sum * prod; }
T-376	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return sum * prod; }
H-376	-0.26220113039016724	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr[i] ) ; } return sum * prod ; }
D-376	-0.26220113039016724	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr[i] ) ; } return sum * prod ; }
P-376	-0.0927 -0.0469 -0.1207 -0.0576 -0.0856 -0.0275 -0.0616 -0.1129 -0.1075 -1.7966 -0.0496 -0.0834 -0.0878 -0.6613 -0.1103 -0.0878 -0.1442 -0.0954 -0.1300 -0.0983 -0.0826 -0.0638 -0.0375 -0.6808 -0.1254 -0.1238 -0.0863 -1.8678 -0.2844 -0.1074 -0.0813 -0.1063 -0.0809 -1.1674 -0.0934 -0.0800 -0.2195 -0.0867 -0.0780 -0.8361 -0.0843 -0.4317 -0.0764 -0.0948 -0.1645 -0.1148 -0.1300 -0.7116 -0.2565 -0.1856 -0.1311 -0.1141 -0.0830 -0.2123 -0.1965 -1.1672 -0.1015 -0.0849 -0.1066 -0.0745 -0.3916 -0.1560 -0.1346 -0.1265 -0.1082 -0.0811 -0.1223 -0.0232 -1.0766 -0.0825 -0.1525 -0.0643 -0.0943 -1.1242 -0.1323 -0.1037 -0.0816 -0.1014 -0.0861 -1.1158 -0.1011 -0.0615 -0.1048 -0.0933 -0.0709 -1.0602 -0.0819 -0.4366 -0.0786 -0.0958 -0.1835 -0.0773 -3.3050 -0.0993 -0.0647 -0.1074 -0.0742 -0.7909 -0.2391 -0.2854 -0.1006 -0.1081 -0.0904 -0.1866 -0.1323 -0.0522 -0.1430 -0.2314 -0.0816 -0.0763
S-333	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( 0 < arr[i] ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-333	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( 0 > arr[i] ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-333	-0.26781177520751953	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( 0 < arr[i] ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += arr[i] ; } return prod * sum ; }
D-333	-0.26781177520751953	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( 0 < arr[i] ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += arr[i] ; } return prod * sum ; }
P-333	-0.0927 -0.0466 -0.1219 -0.0552 -0.0861 -0.0269 -0.0616 -0.1121 -0.1079 -1.7961 -0.0492 -0.0833 -0.0879 -0.6386 -0.1104 -0.0901 -0.1471 -0.0955 -0.1364 -0.0976 -0.0824 -0.0651 -0.0396 -0.7509 -0.1303 -0.1047 -0.0859 -1.8613 -0.2951 -0.1075 -0.0814 -0.1046 -0.0803 -1.2121 -0.0917 -0.0825 -0.1734 -0.0860 -0.0799 -0.8656 -0.0831 -0.4492 -0.0760 -0.0922 -0.1673 -0.1148 -0.1653 -0.7544 -0.2492 -0.1917 -0.1443 -0.1194 -0.0828 -0.1992 -0.1965 -1.1988 -0.1057 -0.0884 -0.1046 -0.3146 -0.0942 -0.1082 -0.3304 -0.1585 -0.1644 -0.0862 -0.1131 -0.0209 -1.0418 -0.0796 -0.1498 -0.0579 -0.0912 -1.3487 -0.1314 -0.1037 -0.0810 -0.1000 -0.0856 -1.1948 -0.0998 -0.0648 -0.0929 -0.0919 -0.0712 -1.0131 -0.0798 -0.4373 -0.0784 -0.0970 -0.2084 -0.0621 -1.8012 -1.2353 -0.2342 -0.3577 -0.1492 -0.0901 -0.2057 -0.1934 -0.0299 -0.1226 -0.2886 -0.0779 -0.0752
S-318	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( 0 == arr[i] ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-318	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( 0 == arr[i] ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-318	-0.2719179689884186	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( 0 == arr[i] ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += arr[i] ; } return prod * sum ; }
D-318	-0.2719179689884186	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( 0 == arr[i] ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += arr[i] ; } return prod * sum ; }
P-318	-0.0936 -0.0466 -0.1223 -0.0555 -0.0860 -0.0270 -0.0616 -0.1120 -0.1070 -1.7708 -0.0485 -0.0833 -0.0871 -0.6587 -0.1103 -0.1006 -0.1440 -0.0923 -0.1296 -0.0995 -0.0838 -0.0650 -0.0341 -0.7626 -0.1296 -0.1084 -0.0873 -1.8693 -0.2923 -0.1075 -0.0825 -0.1032 -0.0806 -1.2228 -0.0908 -0.0755 -0.2039 -0.0828 -0.0779 -0.8713 -0.0843 -0.4355 -0.0771 -0.0954 -0.1688 -0.1115 -0.3601 -0.0893 -0.0903 -0.7031 -0.2570 -0.2670 -0.0827 -0.1862 -0.1970 -1.2335 -0.1079 -0.0909 -0.1090 -0.1635 -0.4154 -0.1544 -0.1314 -0.1353 -0.1109 -0.0827 -0.1145 -0.0230 -1.1126 -0.0828 -0.1486 -0.0602 -0.0906 -1.2599 -0.1271 -0.1036 -0.0810 -0.0973 -0.0857 -1.1440 -0.0993 -0.0599 -0.0935 -0.0935 -0.0682 -1.0633 -0.0815 -0.4290 -0.0789 -0.0943 -0.1975 -0.0592 -2.1602 -1.2630 -0.2219 -0.3293 -0.1508 -0.0863 -0.1997 -0.1939 -0.0303 -0.1188 -0.2876 -0.0781 -0.0749
S-263	public static int prod_signs ( int[] arr ) { if ( 0 == arr.length ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-263	public static int prod_signs ( int[] arr ) { if ( 0 == arr.length ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-263	-0.26511210203170776	public static int prod_signs ( int[] arr ) { if ( 0 == arr.length ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += arr[i] ; } return prod * sum ; }
D-263	-0.26511210203170776	public static int prod_signs ( int[] arr ) { if ( 0 == arr.length ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += arr[i] ; } return prod * sum ; }
P-263	-0.0934 -0.0473 -0.1221 -0.0575 -0.0861 -0.0266 -0.0621 -0.1130 -0.1078 -1.7964 -0.0492 -0.0835 -0.0878 -0.6944 -0.1097 -0.2953 -0.1124 -0.1979 -0.0892 -0.0858 -0.0831 -0.0676 -0.0293 -0.7111 -0.1267 -0.1081 -0.0866 -1.9118 -0.2918 -0.1073 -0.0815 -0.1053 -0.0814 -1.1474 -0.0926 -0.0712 -0.1706 -0.0885 -0.0757 -0.6904 -0.0842 -0.4252 -0.0764 -0.0953 -0.1564 -0.1163 -0.1764 -0.7290 -0.2532 -0.1842 -0.1400 -0.1188 -0.0831 -0.1974 -0.2010 -1.2214 -0.1055 -0.0864 -0.1081 -0.0806 -0.3845 -0.1539 -0.1330 -0.1305 -0.1065 -0.0816 -0.1187 -0.0218 -1.1027 -0.0830 -0.1477 -0.0597 -0.0904 -1.3108 -0.1277 -0.1035 -0.0812 -0.0998 -0.0860 -1.1341 -0.1001 -0.0559 -0.0973 -0.0955 -0.0701 -0.9795 -0.0819 -0.4274 -0.0793 -0.0946 -0.2062 -0.0603 -1.8654 -1.2082 -0.2292 -0.3332 -0.1346 -0.0855 -0.2024 -0.1962 -0.0299 -0.1216 -0.2870 -0.0777 -0.0764
S-81	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; arr.length > i; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; arr.length > i; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-81	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; arr.length > i; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; arr.length > i; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-81	-0.26126617193222046	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; arr.length > i ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; arr.length > i ; i++ ) { sum += arr[i] ; } return prod * sum ; }
D-81	-0.26126617193222046	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; arr.length > i ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; arr.length > i ; i++ ) { sum += arr[i] ; } return prod * sum ; }
P-81	-0.0928 -0.0467 -0.1221 -0.0570 -0.0861 -0.0267 -0.0616 -0.1118 -0.1060 -1.7408 -0.0486 -0.0832 -0.0879 -0.6184 -0.1100 -0.0881 -0.1347 -0.0819 -0.1307 -0.0971 -0.0821 -0.0621 -0.0323 -0.7668 -0.1275 -0.1158 -0.0858 -1.6330 -0.3014 -0.1082 -0.0823 -0.1082 -0.0828 -1.0485 -0.2201 -0.1030 -0.0750 -0.1187 -0.1153 -1.0623 -0.0838 -0.4629 -0.0764 -0.0930 -0.1516 -0.1163 -0.1109 -0.6700 -0.2229 -0.1660 -0.1341 -0.1119 -0.0831 -0.2109 -0.1911 -1.0294 -0.1001 -0.0821 -0.1052 -0.0682 -0.3703 -0.1554 -0.1271 -0.1510 -0.1019 -0.0778 -0.1308 -0.0232 -0.9221 -0.0868 -0.1487 -0.0620 -0.0900 -1.1185 -0.1218 -0.1051 -0.0824 -0.0984 -0.0812 -1.1006 -0.0926 -0.1073 -0.0721 -0.1050 -0.0990 -1.2724 -0.0783 -0.4834 -0.0789 -0.0969 -0.2020 -0.0634 -2.0922 -1.1616 -0.2060 -0.3136 -0.1303 -0.0856 -0.1928 -0.2162 -0.0295 -0.1263 -0.2851 -0.0782 -0.0757
S-332	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; n - 1 > i; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
T-332	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; for ( int i = 2; n + 1 > i; i++ ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; } return sequence; }
H-332	-0.30632591247558594	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; n - 1 > i; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
D-332	-0.30632591247558594	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; n - 1 > i; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
P-332	-0.0909 -0.0462 -0.1283 -2.2629 -0.0285 -0.1100 -0.0974 -0.0737 -0.0832 -0.0946 -0.1472 -2.9460 -0.0797 -0.0928 -0.0754 -0.0765 -0.4030 -0.1846 -0.0822 -0.2248 -1.2292 -0.1317 -0.1194 -0.0899 -0.1284 -0.1164 -0.0798 -0.1003 -0.4578 -0.8702 -0.0899 -1.6537 -0.1280 -0.0804 -1.1971 -0.0919 -0.3217 -0.8858 -0.1003 -1.8903 -0.0973 -0.4631 -0.0827 -0.1848 -0.7199 -0.1403 -0.1228 -0.0755 -0.0820 -0.0893 -1.1300 -0.0994 -0.1278 -0.1312 -0.0719 -0.0985 -1.5679 -0.0901 -0.4238 -0.0817 -0.0968 -0.1527 -0.1344 -0.1919 -0.2570 -0.0482 -0.1026 -0.1014 -0.0825 -0.2113 -0.4908 -0.1467 -0.1819 -0.1161 -0.1732 -0.2430 -0.0974 -0.2435 -0.7713 -0.0857 -0.1404 -0.2693 -0.1063 -0.1401 -0.1033 -0.2172 -0.3241 -0.1107 -0.1643 -1.1777 -0.1585 -0.1317 -0.1662 -0.0866 -0.1398 -0.0502 -0.3177 -0.1632 -0.1546 -0.1386 -0.1206 -0.0925 -0.0999 -0.4717 -0.1355 -0.1657 -0.0859 -1.2267 -0.0831 -0.0551
S-129	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, reverse_sorted ) || Arrays.equals ( l, sorted ) ) return true; return false; }
T-129	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, reverse_sorted ) || Arrays.equals ( l, sorted ) ) return true; return false; }
H-129	-0.3928292989730835	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( ! ( Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
D-129	-0.3928292989730835	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( ! ( Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
P-129	-0.0957 -0.0519 -0.1000 -0.0288 -0.0245 -0.1244 -0.0995 -2.2319 -0.0706 -0.0853 -0.0844 -0.1267 -2.7598 -0.0771 -0.0901 -0.0701 -0.0753 -0.5057 -0.1575 -0.0973 -0.0735 -1.9391 -0.0999 -2.2160 -0.0379 -0.0791 -0.0987 -0.0820 -0.0630 -0.0752 -0.2887 -0.1016 -0.0926 -0.0636 -1.9264 -0.1728 -0.1204 -0.0951 -1.2287 -1.8159 -0.0920 -0.0362 -0.1158 -0.1061 -0.1011 -0.0963 -0.1624 -0.1217 -0.0701 -0.0857 -0.1003 -1.7357 -0.0878 -0.0884 -0.3435 -0.0883 -0.0612 -1.3706 -0.0858 -0.1434 -0.1986 -0.0895 -0.2422 -0.0875 -0.1405 -0.7702 -0.5797 -0.1941 -0.1067 -0.1313 -0.4262 -0.1175 -0.0918 -0.0608 -0.1436 -0.1130 -1.2662 -0.1956 -1.7150 -0.2667 -0.1272 -1.4776 -0.1298 -1.7871 -0.0970 -1.5429 -0.1198 -0.1201 -1.0346 -0.1029 -0.0919 -0.1187 -0.0887 -1.3475 -0.1559 -0.1191 -0.3088 -0.6877 -0.0856 -0.0444 -1.0775 -0.0750 -0.0655
S-61	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; l.length > i; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-61	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; for ( int i = 0; l.length > i; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-61	-0.383016437292099	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; l.length > i ; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
D-61	-0.383016437292099	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; l.length > i ; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
P-61	-0.0952 -0.0514 -0.1022 -0.0286 -0.0245 -0.1243 -0.0994 -2.2104 -0.0764 -0.0872 -0.0847 -0.1263 -2.7229 -0.0689 -0.0899 -0.0719 -0.0755 -0.4768 -0.1484 -0.0976 -0.0691 -1.8856 -0.0949 -2.1545 -0.0353 -0.0786 -0.1007 -0.0804 -0.0634 -0.0752 -0.2808 -0.1012 -0.0933 -0.0587 -1.8742 -0.1562 -0.1200 -0.0900 -1.1933 -1.7569 -0.0913 -0.0369 -0.1159 -0.1092 -0.1003 -0.0962 -0.1627 -0.1216 -0.0676 -0.0834 -0.0980 -1.7140 -0.1481 -0.1044 -0.0546 -0.1237 -0.1434 -1.2911 -0.0829 -0.1546 -0.1964 -0.0860 -0.2302 -0.0893 -0.1398 -0.6786 -0.4282 -0.1642 -0.1010 -0.1433 -0.3781 -0.0988 -0.0928 -0.0559 -0.1491 -0.1066 -1.0691 -0.1915 -1.6627 -0.2680 -0.1261 -1.4926 -0.1285 -1.8747 -0.0962 -1.5410 -0.1171 -0.1008 -0.8800 -0.1374 -0.0917 -0.7218 -1.6468 -0.0956 -1.4155 -0.1156 -0.0847 -0.5668 -0.0320 -0.0912 -0.1272 -0.0858 -0.0972 -0.1499 -0.1000 -0.2297 -0.7556 -0.0823 -0.0502 -1.2703 -0.0747 -0.0648
S-326	public static int[] sort_array ( int[] array ) { if ( 0 == array.length ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
T-326	public static int[] sort_array ( int[] array ) { if ( 0 == array.length ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; } return array; } }
H-326	-0.2720088064670563	public static int[] sort_array ( int[] array ) { if ( 0 == array.length ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
D-326	-0.2720088064670563	public static int[] sort_array ( int[] array ) { if ( 0 == array.length ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
P-326	-0.0974 -0.0417 -0.1038 -1.7317 -0.0395 -0.0896 -0.0487 -0.1155 -0.0836 -1.6279 -0.0496 -0.0834 -0.0872 -0.1491 -0.1148 -0.3781 -0.1136 -0.1408 -0.0753 -0.0897 -0.0802 -0.0967 -0.0545 -0.7847 -1.8970 -0.0891 -0.0301 -0.1119 -0.0510 -0.0951 -0.0975 -0.2484 -0.1179 -0.1778 -0.1709 -0.8024 -0.1000 -0.0768 -0.2917 -0.1222 -0.1005 -0.0820 -0.2268 -0.8995 -0.0921 -0.1253 -0.0686 -0.1306 -0.2323 -0.0848 -0.0773 -0.0641 -1.0262 -0.0991 -0.2197 -0.2339 -0.1259 -0.0827 -0.0904 -0.0987 -1.2605 -0.0936 -0.1004 -0.8366 -0.0813 -0.0679 -1.1090 -0.4894 -0.0824 -0.0743 -0.3059 -0.0805 -0.0924 -0.1570 -0.5759 -0.2707 -0.1453 -0.1089 -0.0595 -0.4173 -0.1730 -0.0916 -0.0715 -0.1360 -0.1281 -0.2839 -0.3264 -1.0262 -0.0776 -0.2190 -0.1409 -0.0921 -0.0621 -0.0980 -0.0856 -0.2058 -0.9372 -0.1147 -0.0595 -0.3043 -0.1957 -1.6925 -0.1142 -0.2834 -0.0705 -1.0692 -0.0989 -0.0938 -0.0707
S-197	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( 1 == ( array[0] + array[array.length - 1] ) % 2 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
T-197	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( 1 == ( array[0] + array[array.length - 1] ) % 2 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; } return array; } }
H-197	-0.2902456223964691	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( 1 == ( array[0] + array[array.length - 1] ) % 2 ) return array ; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
D-197	-0.2902456223964691	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( 1 == ( array[0] + array[array.length - 1] ) % 2 ) return array ; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
P-197	-0.0971 -0.0410 -0.1040 -1.7375 -0.0393 -0.0888 -0.0482 -0.1151 -0.0837 -1.6122 -0.0496 -0.0825 -0.0863 -0.1448 -0.1146 -0.0999 -0.1209 -0.1003 -0.1428 -0.0918 -0.0815 -0.0986 -0.0597 -0.7842 -1.9912 -0.0888 -0.0298 -0.1127 -0.0507 -0.0955 -0.0941 -0.2443 -0.1177 -1.7762 -0.0975 -0.0890 -0.0819 -0.7279 -0.0995 -0.0952 -0.2458 -0.1228 -0.1007 -0.0742 -0.2403 -0.8393 -0.0888 -0.7084 -0.0847 -0.0888 -0.0774 -0.0626 -0.9201 -0.1013 -0.2082 -0.2337 -0.1244 -0.0820 -0.0903 -0.0967 -1.4502 -0.0939 -0.0984 -1.0596 -0.0799 -0.0662 -1.1830 -0.5021 -0.0831 -0.0746 -0.3007 -0.0799 -0.0920 -0.1532 -0.5820 -0.2828 -0.1521 -0.1092 -0.0607 -0.4325 -0.1808 -0.0906 -0.0714 -0.1372 -0.1283 -0.2876 -0.3212 -1.0315 -0.0762 -0.2171 -0.1453 -0.0921 -0.0624 -0.0985 -0.0862 -0.2016 -0.9626 -0.1136 -0.0600 -0.3009 -0.1973 -1.6832 -0.1173 -0.2585 -0.0691 -1.0416 -0.0992 -0.0937 -0.0686
S-105	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[array.length - 1] + array[0] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
T-105	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[array.length - 1] + array[0] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; } return array; } }
H-105	-0.27288755774497986	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[array.length - 1] + array[0] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
D-105	-0.27288755774497986	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[array.length - 1] + array[0] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array ; } }
P-105	-0.0972 -0.0407 -0.1031 -1.7279 -0.0390 -0.0882 -0.0469 -0.1143 -0.0837 -1.5902 -0.0502 -0.0837 -0.0863 -0.1408 -0.1146 -0.1101 -0.1247 -0.1077 -0.1348 -0.1010 -0.0809 -0.0976 -0.0614 -0.7052 -2.0813 -0.0888 -0.0298 -0.1126 -0.0521 -0.0966 -0.0984 -0.2274 -0.1168 -0.1742 -0.1439 -0.5980 -0.1133 -0.0907 -0.0727 -0.2294 -0.8542 -0.1347 -0.0821 -0.4581 -0.0848 -0.1562 -0.0754 -0.1267 -0.2651 -0.0846 -0.0796 -0.0650 -1.0148 -0.0995 -0.2049 -0.2312 -0.1252 -0.0828 -0.0925 -0.0987 -1.3416 -0.0954 -0.1071 -0.9830 -0.0769 -0.0672 -1.1474 -0.4925 -0.0832 -0.0735 -0.3004 -0.0798 -0.0922 -0.1632 -0.5422 -0.2780 -0.1495 -0.1084 -0.0610 -0.3996 -0.1750 -0.0913 -0.0714 -0.1381 -0.1329 -0.2962 -0.3446 -1.0340 -0.0783 -0.2187 -0.1383 -0.0926 -0.0629 -0.0998 -0.0873 -0.2025 -0.9926 -0.1154 -0.0606 -0.3197 -0.2006 -1.7076 -0.1202 -0.2650 -0.0704 -1.0497 -0.0993 -0.0946 -0.0703
S-382	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( 0 == n ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
T-382	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( 0 == n ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; } return sequence; }
H-382	-0.2948777377605438	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( 0 == n ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
D-382	-0.2948777377605438	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( 0 == n ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
P-382	-0.0921 -0.0456 -0.1263 -2.2717 -0.0280 -0.1098 -0.0958 -0.0737 -0.0843 -0.0940 -0.1463 -2.9390 -0.0812 -0.0941 -0.0741 -0.0770 -0.4150 -0.1792 -0.0801 -0.2238 -1.2516 -0.1340 -0.1134 -0.1673 -0.1113 -0.1078 -0.0838 -0.1017 -0.3879 -0.9186 -0.0933 -2.8865 -0.4626 -0.1189 -0.0813 -1.3019 -0.0910 -0.3040 -0.8698 -0.0996 -1.6387 -0.3571 -0.1429 -0.5195 -0.0824 -0.3618 -1.0106 -0.1185 -0.1190 -0.0735 -0.0804 -0.0851 -0.9258 -0.0952 -0.1387 -0.1673 -0.2922 -0.4659 -0.1136 -0.3945 -0.0830 -0.0950 -0.1247 -0.1265 -0.1208 -0.1975 -0.0412 -0.0903 -0.0843 -0.0807 -0.1379 -0.4404 -0.1385 -0.1606 -0.1072 -0.1183 -0.1068 -0.0713 -0.1891 -0.5098 -0.0757 -0.1271 -0.2472 -0.1050 -0.1378 -0.0924 -0.1510 -0.2771 -0.0986 -0.1334 -0.8792 -0.1281 -0.1099 -0.1537 -0.0838 -0.1371 -0.0433 -0.2326 -0.1293 -0.1184 -0.1028 -0.0875 -0.0866 -0.0755 -0.3525 -0.0908 -0.1237 -0.0821 -0.9152 -0.0792 -0.0508
S-200	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( 3 + i ) / 2; } return sequence; }
T-200	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( 0 == i % 2 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; } return sequence; }
H-200	-0.2902676463127136	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( 3 + i ) / 2; } return sequence; }
D-200	-0.2902676463127136	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( 3 + i ) / 2; } return sequence; }
P-200	-0.0923 -0.0455 -0.1274 -2.2818 -0.0280 -0.1093 -0.0963 -0.0769 -0.0834 -0.0937 -0.1456 -2.9421 -0.0807 -0.0940 -0.0740 -0.0770 -0.4157 -0.1940 -0.0820 -0.2271 -1.2132 -0.1319 -0.1179 -0.0917 -0.1334 -0.1278 -0.0804 -0.1044 -0.4514 -0.9063 -0.0914 -2.5195 -0.4373 -0.1162 -0.0815 -1.2021 -0.0909 -0.3009 -0.8679 -0.0986 -1.5061 -0.3814 -0.1423 -0.5160 -0.0828 -0.3760 -0.9964 -0.1189 -0.1194 -0.0737 -0.0812 -0.0849 -0.9288 -0.0972 -0.1382 -0.1706 -0.2655 -0.4729 -0.1179 -0.3986 -0.0819 -0.0935 -0.1245 -0.1266 -0.1240 -0.1974 -0.0410 -0.0909 -0.0859 -0.0817 -0.1385 -0.4400 -0.1406 -0.1628 -0.1078 -0.1178 -0.1003 -0.0722 -0.2033 -0.5210 -0.0755 -0.1271 -0.2454 -0.1057 -0.1410 -0.0930 -0.1428 -0.2809 -0.0971 -0.1302 -0.9290 -0.1320 -0.1112 -0.1563 -0.0829 -0.1314 -0.0436 -0.2345 -0.1340 -0.1015 -0.0785 -0.1202 -0.1028 -0.0836 -0.3632 -0.0924 -0.1240 -0.0825 -0.8943 -0.0794 -0.0518
S-9	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( 0 == i % 2 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
T-9	public static int[] tri ( int n ) { int[] sequence = new int[1 + n]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; for ( int i = 2; i < 1 + n; i++ ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; } return sequence; }
H-9	-0.2910209894180298	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( 0 == i % 2 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
D-9	-0.2910209894180298	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( 0 == i % 2 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
P-9	-0.0921 -0.0459 -0.1274 -2.2912 -0.0283 -0.1094 -0.0957 -0.0762 -0.0835 -0.0937 -0.1469 -2.9510 -0.0808 -0.0939 -0.0746 -0.0771 -0.4129 -0.1930 -0.0835 -0.2268 -1.2353 -0.1327 -0.1179 -0.0988 -0.1194 -0.1314 -0.0801 -0.1018 -0.4592 -0.9011 -0.0907 -2.6009 -0.4212 -0.1150 -0.0811 -1.2082 -0.0917 -0.2979 -0.8674 -0.0992 -1.5083 -0.3769 -0.1421 -0.5158 -0.0833 -0.3902 -1.0166 -0.1181 -0.1193 -0.0734 -0.0800 -0.0846 -0.9252 -0.0954 -0.1316 -0.1729 -0.2701 -0.4814 -0.1135 -0.3670 -0.0827 -0.0938 -0.1303 -0.1217 -0.2618 -0.0728 -0.1123 -0.1745 -0.0539 -0.0805 -0.1338 -0.4450 -0.1391 -0.1572 -0.1066 -0.1097 -0.0937 -0.0629 -0.1809 -0.5002 -0.0761 -0.1184 -0.2474 -0.1057 -0.1343 -0.0914 -0.1484 -0.2757 -0.0994 -0.1315 -0.8682 -0.1318 -0.1107 -0.1561 -0.0855 -0.1372 -0.0428 -0.2348 -0.1244 -0.1189 -0.1043 -0.0884 -0.0868 -0.0741 -0.3688 -0.0903 -0.1243 -0.0815 -0.9011 -0.0795 -0.0514
S-327	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; for ( int i = 0; numbers.size () > i; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
T-327	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; for ( int i = 0; numbers.size () - 1 > i; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
H-327	-0.1715516299009323	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result ; for ( int i = 0; numbers.size () > i ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
D-327	-0.1715516299009323	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result ; for ( int i = 0; numbers.size () > i ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
P-327	-0.0981 -0.0465 -0.2593 -0.3202 -0.0624 -0.1635 -0.0212 -0.0589 -0.0266 -0.0320 -0.1081 -0.2924 -0.3904 -0.0570 -0.1631 -0.0616 -1.2285 -0.0961 -0.0184 -0.0287 -0.0917 -0.0838 -0.2533 -0.3332 -0.0605 -0.1626 -0.0706 -0.0873 -0.0611 -1.4910 -0.2922 -0.0664 -0.1347 -0.0685 -0.0825 -0.3724 -0.1094 -0.0972 -0.2213 -0.1818 -0.0756 -0.1496 -0.1132 -0.0851 -0.1125 -0.0926 -0.1869 -0.2049 -0.1150 -0.0701 -0.0744 -0.0863 -1.7679 -0.1718 -0.1239 -0.1428 -0.0832 -0.1645 -0.1368 -0.3679 -0.0756 -0.1287 -0.1351 -0.0770 -0.0891 -0.1099 -0.1269 -0.1905 -0.1144 -0.0829 -0.1182 -0.2351 -0.1180 -0.1016 -0.0871 -0.0941 -0.0852 -0.5030 -0.1080 -0.1525 -0.1082 -0.0287 -0.0293 -0.0852 -0.0875 -0.0956 -0.2690 -0.1141 -0.2031 -0.1058 -0.0830 -0.1038 -0.3301 -0.1302 -0.2061 -0.1029 -0.1806 -0.0753 -0.4180 -0.1082 -0.0865 -0.0985 -0.0884 -0.1124 -0.0813 -0.1312 -0.0811 -0.0713
S-316	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( 0 == numbers.size () ) return result; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
T-316	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( 0 == numbers.size () ) return result; for ( int i = 0; i < numbers.size () - 1; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
H-316	-0.1661619246006012	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( 0 == numbers.size () ) return result ; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
D-316	-0.1661619246006012	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( 0 == numbers.size () ) return result ; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
P-316	-0.0982 -0.0467 -0.2629 -0.3119 -0.0630 -0.1628 -0.0211 -0.0585 -0.0265 -0.0318 -0.1083 -0.3029 -0.3814 -0.0576 -0.1614 -0.0629 -1.2720 -0.0952 -0.0180 -0.0292 -0.0906 -0.0843 -0.2624 -0.3146 -0.0610 -0.1599 -0.0709 -0.0878 -0.0598 -1.5240 -0.2886 -0.0660 -0.1350 -0.0688 -0.0824 -0.4808 -0.1073 -0.2558 -0.1318 -0.1239 -0.1151 -0.1624 -0.0706 -0.0818 -0.1060 -0.0897 -0.1827 -0.1971 -0.1133 -0.0744 -0.0742 -0.0889 -1.3740 -0.0881 -0.0790 -0.2159 -0.1046 -0.1656 -0.0728 -0.0899 -0.0751 -0.1199 -0.1491 -0.0795 -0.0923 -0.1100 -0.1298 -0.1926 -0.1133 -0.0897 -0.1262 -0.2271 -0.1169 -0.1000 -0.0868 -0.0941 -0.0861 -0.4627 -0.1079 -0.1494 -0.1064 -0.0294 -0.0295 -0.0848 -0.0879 -0.0968 -0.2572 -0.1134 -0.1993 -0.1052 -0.0839 -0.1084 -0.2908 -0.1312 -0.1399 -0.1054 -0.2173 -0.0728 -0.5417 -0.1032 -0.0875 -0.0984 -0.0879 -0.1149 -0.0814 -0.1344 -0.0811 -0.0730
S-152	public static int[] tri ( int n ) { int[] sequence = new int[1 + n]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
T-152	public static int[] tri ( int n ) { int[] sequence = new int[1 + n]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; for ( int i = 2; i < 1 + n; i++ ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; } return sequence; }
H-152	-0.2918349802494049	public static int[] tri ( int n ) { int[] sequence = new int[1 + n]; if ( n == 0 ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
D-152	-0.2918349802494049	public static int[] tri ( int n ) { int[] sequence = new int[1 + n]; if ( n == 0 ) { sequence[0] = 1 ; return sequence; } sequence[0] = 1 ; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
P-152	-0.0914 -0.0450 -0.1267 -2.0966 -0.0273 -0.1094 -0.0974 -0.0714 -0.0864 -0.0919 -0.1444 -2.7196 -0.0773 -0.0913 -0.0791 -0.0754 -0.1215 -0.0580 -0.0888 -2.1642 -0.1317 -0.1199 -0.0890 -0.1352 -0.1266 -0.0805 -0.1064 -0.5460 -0.9433 -0.0915 -2.5890 -0.4626 -0.1108 -0.0726 -1.2029 -0.0923 -0.2754 -0.8471 -0.0979 -1.4719 -0.5614 -0.1517 -0.5216 -0.0815 -0.4312 -0.9334 -0.1172 -0.1210 -0.0743 -0.0817 -0.0860 -0.8691 -0.0965 -0.1392 -0.1822 -0.2562 -0.5120 -0.1182 -0.3578 -0.0841 -0.0938 -0.1219 -0.1250 -0.1209 -0.2014 -0.0409 -0.0866 -0.0822 -0.0818 -0.1265 -0.4273 -0.1396 -0.1591 -0.1062 -0.1060 -0.0856 -0.0653 -0.1935 -0.5154 -0.0783 -0.1325 -0.2483 -0.1069 -0.1393 -0.0959 -0.1387 -0.2526 -0.0949 -0.1293 -0.8513 -0.1231 -0.1120 -0.1430 -0.0852 -0.1313 -0.0405 -0.2043 -0.1234 -0.1130 -0.0968 -0.0779 -0.0849 -0.0685 -0.3298 -0.0854 -0.1181 -0.0768 -0.9758 -0.0803 -0.0526
S-151	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; for ( int i = 0; char_list.length > i; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
T-151	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; for ( int i = 0; char_list.length > i; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toUpperCase ( c ) ; } else { char_list[i] = Character.toLowerCase ( c ) ; } } return new String ( char_list ) ; }
H-151	-0.20902003347873688	public static String flip_case ( String string ) { char [] char_list = string.toCharArray () ; for ( int i = 0; char_list.length > i ; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
D-151	-0.20902003347873688	public static String flip_case ( String string ) { char [] char_list = string.toCharArray () ; for ( int i = 0; char_list.length > i ; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
P-151	-0.1002 -0.0525 -0.5151 -0.0191 -0.0991 -0.0344 -0.1134 -0.5909 -0.0933 -0.0873 -0.0902 -0.1041 -2.8269 -0.0829 -0.0992 -0.0442 -0.0771 -0.0655 -0.1571 -0.0482 -0.0456 -0.0724 -0.0826 -0.3123 -0.1124 -0.1210 -0.0790 -0.0901 -1.1614 -0.1087 -0.1133 -0.0548 -0.1396 -0.0618 -0.1875 -0.1317 -0.4164 -0.0863 -0.0987 -0.1797 -0.0774 -0.0788 -0.1036 -0.0572 -0.1002 -0.0804 -0.1114 -0.0535 -0.5922 -0.6337 -2.1354 -0.1699 -0.1232 -1.0687 -0.1019 -0.0813 -0.0332 -0.1226 -0.1298 -0.0894 -0.0849 -0.0874 -0.1363 -0.1088 -0.0498 -0.6868 -0.2024 -0.2188 -0.0997 -0.3365 -0.0979 -0.4972 -0.1216 -0.1345 -0.0953 -0.1026 -0.1171 -0.1054 -0.1575 -0.0860 -0.1054 -0.0547 -0.6651 -0.1659 -0.1789 -0.0906 -0.2563 -0.0895 -0.1852 -0.1208 -0.1345 -0.0966 -0.0989 -0.1004 -0.1660 -0.1146 -0.0516 -0.2794 -0.1182 -0.1181 -0.0978 -0.0598 -0.1220 -0.0930 -0.0915 -0.0746
S-250	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( 1 == count.get ( n ) ) result.add ( n ) ; } return result; }
T-250	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { if ( !count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( 1 == count.get ( n ) ) result.add ( n ) ; } return result; }
H-250	-0.22762992978096008	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( 1 == count.get ( n ) ) result.add ( n ) ; } return result ; }
D-250	-0.22762992978096008	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( 1 == count.get ( n ) ) result.add ( n ) ; } return result ; }
P-250	-0.0948 -0.0433 -0.2454 -0.2798 -0.0564 -0.1354 -0.0351 -0.0990 -0.0109 -0.1060 -0.2985 -0.2837 -0.0564 -0.1642 -0.0565 -0.0875 -0.0834 -0.3774 -0.2516 -0.0545 -0.1635 -0.0865 -0.0817 -0.0657 -1.4580 -0.2265 -0.0648 -0.1403 -0.0702 -0.0835 -1.4750 -0.2231 -0.0530 -0.1889 -0.8307 -0.1828 -0.0880 -0.0875 -0.0531 -1.0489 -0.3154 -0.0527 -0.2494 -0.7149 -0.1681 -0.0770 -0.0837 -0.1481 -0.1179 -1.8333 -0.0673 -0.0734 -0.0561 -0.0917 -0.0910 -0.2712 -0.1677 -0.4669 -0.1089 -0.0911 -0.7555 -0.1198 -0.1274 -0.1497 -0.1174 -0.0889 -0.0896 -0.7574 -0.0866 -0.1303 -0.1750 -0.1131 -1.5084 -0.0681 -0.0769 -0.0725 -0.0913 -0.0871 -0.1904 -0.1197 -0.8696 -0.1624 -0.1301 -0.1694 -0.2116 -0.1193 -0.0842 -0.0858 -0.0906 -0.2016 -0.1855 -0.2935 -0.1138 -0.0818 -0.0993 -0.0820 -0.1222 -0.0812 -0.1049 -0.1154 -0.0777 -0.0739
S-400	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n, 1 + count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
T-400	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { if ( !count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, 1 + count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
H-400	-0.2199847400188446	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n , 1 + count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
D-400	-0.2199847400188446	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n , 1 + count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
P-400	-0.0948 -0.0426 -0.2440 -0.2813 -0.0560 -0.1374 -0.0346 -0.0990 -0.0110 -0.1060 -0.3022 -0.2838 -0.0559 -0.1641 -0.0553 -0.0875 -0.0828 -0.3714 -0.2462 -0.0545 -0.1633 -0.0868 -0.0813 -0.0653 -1.4524 -0.2247 -0.0639 -0.1402 -0.0697 -0.0842 -1.4970 -0.2179 -0.0531 -0.1890 -0.7965 -0.1806 -0.0859 -0.0872 -0.0539 -1.0489 -0.3063 -0.0524 -0.2491 -0.6750 -0.1678 -0.0763 -0.0837 -0.1461 -0.1171 -1.7727 -0.0675 -0.0708 -0.0544 -0.0912 -0.0916 -0.2867 -0.1833 -0.5146 -0.1085 -0.0903 -0.9925 -0.5110 -0.2154 -0.1307 -0.1188 -0.1737 -0.1198 -0.0816 -0.0913 -0.0998 -0.0877 -0.1026 -0.1573 -0.1123 -1.4621 -0.0686 -0.0733 -0.0717 -0.0932 -0.0871 -0.2108 -0.1179 -0.1367 -0.1752 -0.1661 -0.1228 -0.0847 -0.0892 -0.1567 -0.3830 -0.0891 -0.2145 -0.1828 -0.2772 -0.1131 -0.0830 -0.1050 -0.0870 -0.1241 -0.0801 -0.1026 -0.1154 -0.0790 -0.0743
S-307	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + " of the " + n + "nput." ) ; } return result; }
T-307	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + " of the " + n + "nput." ) ; } return result; }
H-307	-0.2038428634405136	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + " of the " + n + "nput." ) ; } return result ; }
D-307	-0.2038428634405136	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + " of the " + n + "nput." ) ; } return result ; }
P-307	-0.0990 -0.0505 -1.3889 -0.2624 -0.0680 -0.1416 -0.0328 -0.0941 -0.0546 -0.1205 -1.2116 -0.2925 -0.0794 -0.1776 -0.0434 -0.0836 -0.0850 -1.5550 -0.2560 -0.0705 -0.1524 -0.0706 -0.0845 -0.0616 -0.8746 -0.2840 -0.0594 -0.0847 -0.1908 -0.1084 -2.5315 -0.0979 -0.0667 -0.0463 -0.0938 -0.0851 -0.0938 -0.0811 -0.0887 -1.0690 -0.1468 -0.1104 -0.0739 -0.0860 -0.0810 -0.8148 -0.0895 -0.0877 -0.3295 -0.1300 -0.0920 -0.0689 -0.0896 -0.0841 -0.9811 -0.0787 -0.0840 -0.1228 -0.0625 -0.0947 -0.0772 -0.1198 -1.0034 -0.1064 -0.1003 -0.0875 -0.3066 -0.1386 -0.0966 -0.1214 -0.1154 -0.1347 -0.6370 -0.0486 -0.1686 -0.1166 -0.0874 -0.0879 -0.0728 -0.6552 -0.1753 -0.1571 -0.1396 -0.1936 -0.1975 -0.1104 -0.1416 -0.1392 -0.0993 -0.1648 -0.0521 -0.0588 -0.0550 -0.0552 -0.1041 -0.1748 -0.1117 -0.2104 -0.1039 -0.1780 -0.1379 -0.0481 -0.1207 -0.2002 -0.1101 -0.2533 -0.1123 -0.1081 -0.1461 -0.1461 -0.1595 -0.1117 -0.0723 -0.0873 -0.1263 -0.1015 -0.1687 -0.1119 -0.0822 -0.0206 -0.0726 -0.1178 -0.0879 -0.1035 -0.0757 -0.0795 -0.1632 -0.0864 -0.0795
S-183	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-183	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-183	-0.18276363611221313	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-183	-0.18276363611221313	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-183	-0.0984 -0.0482 -0.1237 -0.0178 -0.0904 -0.0691 -0.1209 -0.8214 -0.0862 -0.0840 -0.0850 -0.1751 -0.0869 -0.0809 -0.6779 -0.1452 -2.3218 -0.0626 -0.0707 -0.0531 -0.0779 -0.0575 -0.1572 -0.0605 -0.0466 -0.0687 -0.0820 -0.2235 -0.1099 -0.0862 -0.0879 -0.0742 -0.0766 -0.0903 -0.0704 -0.0927 -0.1010 -0.1372 -0.1213 -0.2532 -0.1480 -0.0724 -0.1158 -0.1183 -0.1188 -0.1826 -0.1598 -0.0756 -0.0958 -0.0954 -0.1841 -0.1528 -0.1277 -0.0723 -0.1165 -0.0934 -0.1858 -0.1483 -0.1715 -0.0970 -0.0545 -0.1282 -0.1955 -0.1390 -0.1464 -0.0843 -0.0436 -0.1205 -0.1572 -0.1503 -0.1404 -0.0917 -0.0870 -0.0925 -0.1552 -0.1406 -0.1433 -0.0990 -0.0757 -0.1056 -0.1625 -0.1644 -0.1551 -0.0794 -0.0757 -0.1063 -0.1806 -0.1420 -0.1560 -0.0936 -0.0614 -0.1316 -0.4099 -0.1423 -0.1249 -0.1018 -0.0613 -0.1220 -0.0846 -0.1680 -0.1045 -2.3922 -0.1590 -0.2138 -0.3562 -0.1157 -0.2242 -0.1093 -0.0795 -1.4026 -0.2228 -0.1011 -0.0721 -0.0834 -0.0576 -0.3675 -1.0241 -0.1942 -0.0971 -0.0580 -0.0920 -0.0935 -0.0962 -0.1018 -0.4229 -0.1219 -0.0874 -0.0774 -0.2525 -0.0891 -0.0723
S-182	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-182	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-182	-0.18617145717144012	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-182	-0.18617145717144012	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-182	-0.0991 -0.0481 -0.1244 -0.0179 -0.0904 -0.0695 -0.1209 -0.8211 -0.0861 -0.0840 -0.0850 -0.1767 -0.0869 -0.0808 -0.6733 -0.1463 -2.3332 -0.0625 -0.0706 -0.0523 -0.0779 -0.0575 -0.1560 -0.0604 -0.0459 -0.0692 -0.0820 -0.2190 -0.1090 -0.0869 -0.0857 -0.0755 -0.0766 -0.0903 -0.0695 -0.0920 -0.1008 -0.1353 -0.1202 -0.2662 -0.1542 -0.0689 -0.0988 -0.0939 -0.1419 -0.1744 -0.1525 -0.0697 -0.1167 -0.0908 -0.1580 -0.1777 -0.1625 -0.0856 -0.0563 -0.1295 -0.1966 -0.1578 -0.1619 -0.1070 -0.0492 -0.1162 -0.1355 -0.4764 -0.0522 -0.0768 -0.2348 -0.1151 -0.2335 -0.1651 -0.1460 -0.0904 -0.1393 -0.1088 -0.1288 -0.1488 -0.1456 -0.0853 -0.0879 -0.1058 -0.1539 -0.1615 -0.1551 -0.1106 -0.0786 -0.1422 -0.2340 -0.1416 -0.1462 -0.1024 -0.0525 -0.1253 -0.2177 -0.1640 -0.1188 -0.0996 -0.0602 -0.1230 -0.0839 -0.1777 -0.1048 -2.3631 -0.1577 -0.2161 -0.3592 -0.1155 -0.2198 -0.1102 -0.0796 -1.3936 -0.2260 -0.1011 -0.0718 -0.0833 -0.0584 -0.3733 -1.0254 -0.1905 -0.0965 -0.0611 -0.0920 -0.0935 -0.0972 -0.1018 -0.4474 -0.1211 -0.0881 -0.0780 -0.2505 -0.0892 -0.0723
S-179	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-179	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-179	-0.18640893697738647	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-179	-0.18640893697738647	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-179	-0.0994 -0.0482 -0.1235 -0.0176 -0.0904 -0.0695 -0.1209 -0.8302 -0.0868 -0.0839 -0.0850 -0.1763 -0.0869 -0.0809 -0.6737 -0.1478 -2.3305 -0.0620 -0.0705 -0.0524 -0.0779 -0.0575 -0.1561 -0.0609 -0.0462 -0.0692 -0.0820 -0.2205 -0.1098 -0.0870 -0.0856 -0.0748 -0.0766 -0.0903 -0.0696 -0.0927 -0.1009 -0.1365 -0.1202 -0.2520 -0.1486 -0.0698 -0.1017 -0.0933 -0.1385 -0.1755 -0.1505 -0.0696 -0.1161 -0.0901 -0.1536 -0.1583 -0.1629 -0.0844 -0.0568 -0.1287 -0.1877 -0.1615 -0.1593 -0.1022 -0.0500 -0.1213 -0.1471 -0.1486 -0.1461 -0.0755 -0.0645 -0.0961 -0.1458 -0.1554 -0.1343 -0.0939 -0.0981 -0.1078 -0.1207 -0.1544 -0.1463 -0.0862 -0.0850 -0.1010 -0.1493 -0.1699 -0.1509 -0.1106 -0.0756 -0.1383 -0.2146 -0.7140 -0.0547 -0.0992 -0.2443 -0.1318 -0.2688 -0.1559 -0.1315 -0.0955 -0.0597 -0.1231 -0.0835 -0.1803 -0.1069 -2.3476 -0.1569 -0.1947 -0.3657 -0.1154 -0.2119 -0.1101 -0.0794 -1.4085 -0.2264 -0.1018 -0.0724 -0.0839 -0.0583 -0.3709 -1.0210 -0.1897 -0.0978 -0.0593 -0.0920 -0.0934 -0.0964 -0.1011 -0.4176 -0.1211 -0.0881 -0.0774 -0.2505 -0.0891 -0.0723
S-171	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-171	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-171	-0.1819981187582016	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-171	-0.1819981187582016	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-171	-0.0993 -0.0479 -0.1236 -0.0176 -0.0904 -0.0690 -0.1209 -0.8216 -0.0868 -0.0840 -0.0850 -0.1772 -0.0870 -0.0808 -0.6770 -0.1464 -2.3218 -0.0626 -0.0706 -0.0524 -0.0779 -0.0575 -0.1574 -0.0605 -0.0462 -0.0692 -0.0820 -0.2217 -0.1099 -0.0870 -0.0881 -0.0754 -0.0772 -0.0903 -0.0696 -0.0927 -0.1009 -0.1374 -0.1212 -0.2641 -0.1500 -0.0727 -0.0810 -0.1172 -0.1397 -0.1929 -0.1585 -0.0760 -0.0893 -0.0983 -0.1724 -0.1486 -0.1311 -0.0737 -0.1257 -0.0987 -0.2024 -0.1458 -0.1711 -0.1028 -0.0667 -0.1179 -0.1575 -0.1495 -0.1470 -0.0784 -0.0584 -0.0931 -0.1531 -0.1506 -0.1369 -0.0982 -0.0941 -0.1112 -0.1336 -0.1516 -0.1502 -0.0830 -0.0867 -0.1039 -0.1540 -0.1597 -0.1606 -0.1097 -0.0856 -0.1435 -0.2445 -0.1400 -0.1460 -0.1035 -0.0512 -0.1285 -0.2071 -0.1436 -0.1183 -0.1005 -0.0615 -0.1217 -0.0842 -0.1723 -0.1050 -2.3719 -0.1594 -0.2093 -0.3598 -0.1156 -0.2231 -0.1094 -0.0796 -1.3943 -0.2236 -0.1012 -0.0717 -0.0834 -0.0584 -0.3727 -1.0214 -0.1946 -0.0971 -0.0597 -0.0929 -0.0935 -0.0971 -0.1019 -0.4317 -0.1210 -0.0875 -0.0774 -0.2525 -0.0892 -0.0723
S-162	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-162	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-162	-0.1836366057395935	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-162	-0.1836366057395935	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-162	-0.0993 -0.0483 -0.1246 -0.0177 -0.0904 -0.0700 -0.1209 -0.8246 -0.0862 -0.0839 -0.0848 -0.1794 -0.0868 -0.0808 -0.6688 -0.1466 -2.3205 -0.0625 -0.0707 -0.0522 -0.0778 -0.0575 -0.1597 -0.0605 -0.0465 -0.0692 -0.0821 -0.2158 -0.1106 -0.0858 -0.0822 -0.0710 -0.0767 -0.0904 -0.0689 -0.0925 -0.1001 -0.1369 -0.1214 -0.4380 -0.0496 -0.0921 -0.1787 -0.1201 -0.2211 -0.2153 -0.1947 -0.0590 -0.1304 -0.0905 -0.1340 -0.1700 -0.1615 -0.0776 -0.0600 -0.1353 -0.1745 -0.1608 -0.1631 -0.0981 -0.0498 -0.1241 -0.1384 -0.1489 -0.1440 -0.0736 -0.0634 -0.0970 -0.1435 -0.1554 -0.1361 -0.0870 -0.0961 -0.1144 -0.1211 -0.1540 -0.1546 -0.0817 -0.0869 -0.1050 -0.1491 -0.1585 -0.1571 -0.1060 -0.0757 -0.1427 -0.2294 -0.1389 -0.1457 -0.1016 -0.0516 -0.1274 -0.1948 -0.1416 -0.1185 -0.1002 -0.0609 -0.1217 -0.0833 -0.1634 -0.1040 -2.3926 -0.1588 -0.2282 -0.3552 -0.1162 -0.2254 -0.1092 -0.0789 -1.4012 -0.2313 -0.1010 -0.0713 -0.0833 -0.0587 -0.3658 -1.0246 -0.1929 -0.0903 -0.0608 -0.0927 -0.0929 -0.0955 -0.1025 -0.4343 -0.1203 -0.0881 -0.0767 -0.2506 -0.0891 -0.0717
S-153	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-153	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-153	-0.18193843960762024	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-153	-0.18193843960762024	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-153	-0.0991 -0.0486 -0.1245 -0.0178 -0.0904 -0.0691 -0.1210 -0.8173 -0.0868 -0.0840 -0.0850 -0.1764 -0.0870 -0.0809 -0.6775 -0.1460 -2.3216 -0.0626 -0.0701 -0.0527 -0.0779 -0.0575 -0.1575 -0.0605 -0.0459 -0.0687 -0.0820 -0.2206 -0.1099 -0.0865 -0.0868 -0.0733 -0.0766 -0.0903 -0.0695 -0.0928 -0.1009 -0.1372 -0.1203 -0.2494 -0.1483 -0.0687 -0.1341 -0.0878 -0.1208 -0.1741 -0.1686 -0.0784 -0.0886 -0.0916 -0.1722 -0.1462 -0.1273 -0.0690 -0.1160 -0.0873 -0.1682 -0.1492 -0.1725 -0.0966 -0.0727 -0.1243 -0.1822 -0.1414 -0.1523 -0.0903 -0.0467 -0.1211 -0.1643 -0.1471 -0.1454 -0.0947 -0.0888 -0.0926 -0.1711 -0.1348 -0.1336 -0.0868 -0.0910 -0.1062 -0.1576 -0.1595 -0.1607 -0.1093 -0.0862 -0.1382 -0.2110 -0.1390 -0.1483 -0.1042 -0.0522 -0.1251 -0.2316 -0.1410 -0.1207 -0.1035 -0.0614 -0.1208 -0.0834 -0.1711 -0.1031 -2.3874 -0.1579 -0.2169 -0.3659 -0.1148 -0.2301 -0.1094 -0.0794 -1.4101 -0.2229 -0.1012 -0.0723 -0.0834 -0.0584 -0.3697 -1.0272 -0.1934 -0.0963 -0.0582 -0.0913 -0.0935 -0.0970 -0.1017 -0.4312 -0.1210 -0.0880 -0.0774 -0.2528 -0.0891 -0.0724
S-111	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-111	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-111	-0.18353989720344543	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-111	-0.18353989720344543	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-111	-0.0994 -0.0483 -0.1235 -0.0176 -0.0904 -0.0696 -0.1208 -0.8296 -0.0861 -0.0840 -0.0850 -0.1761 -0.0869 -0.0803 -0.6866 -0.1506 -2.3114 -0.0621 -0.0705 -0.0520 -0.0779 -0.0574 -0.1573 -0.0604 -0.0462 -0.0692 -0.0820 -0.2217 -0.1098 -0.0871 -0.0861 -0.0764 -0.0766 -0.0903 -0.0692 -0.0921 -0.1010 -0.1366 -0.1204 -0.2645 -0.1502 -0.0704 -0.1024 -0.0941 -0.1518 -0.1768 -0.1523 -0.0707 -0.1145 -0.0916 -0.1645 -0.1608 -0.1645 -0.0871 -0.0578 -0.1316 -0.1935 -0.1578 -0.1624 -0.1046 -0.0505 -0.1224 -0.1506 -0.1557 -0.1445 -0.0781 -0.0675 -0.0993 -0.1403 -0.1552 -0.1365 -0.0977 -0.1019 -0.1116 -0.1271 -0.1539 -0.1508 -0.0860 -0.0885 -0.1062 -0.1509 -0.1776 -0.1606 -0.1101 -0.0742 -0.1408 -0.2352 -0.1652 -0.1462 -0.0998 -0.0484 -0.1252 -0.3260 -0.3605 -0.0665 -0.0951 -0.2757 -0.1381 -0.0968 -0.1680 -0.1014 -2.2023 -0.1541 -0.1741 -0.3527 -0.1154 -0.2039 -0.1093 -0.0785 -1.3864 -0.2215 -0.1017 -0.0710 -0.0834 -0.0586 -0.3641 -0.9901 -0.1829 -0.0943 -0.0582 -0.0902 -0.0936 -0.0916 -0.1001 -0.4055 -0.1258 -0.0879 -0.0774 -0.2493 -0.0892 -0.0718
S-104	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-104	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-104	-0.1867026835680008	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-104	-0.1867026835680008	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-104	-0.0986 -0.0483 -0.1245 -0.0178 -0.0910 -0.0690 -0.1210 -0.8258 -0.0861 -0.0840 -0.0849 -0.1786 -0.0877 -0.0809 -0.6768 -0.1456 -2.3316 -0.0626 -0.0706 -0.0531 -0.0779 -0.0575 -0.1559 -0.0605 -0.0465 -0.0692 -0.0820 -0.2250 -0.1098 -0.0869 -0.0868 -0.0727 -0.0772 -0.0902 -0.0710 -0.0921 -0.1027 -0.1364 -0.1213 -0.2671 -0.1557 -0.0671 -0.1202 -0.0882 -0.1206 -0.1844 -0.1662 -0.0762 -0.0978 -0.0999 -0.1759 -0.1512 -0.1314 -0.0756 -0.1189 -0.0951 -0.1903 -0.1532 -0.1805 -0.0998 -0.0670 -0.1305 -0.1929 -0.1446 -0.1545 -0.0870 -0.0440 -0.1242 -0.1796 -0.1540 -0.1411 -0.0903 -0.0703 -0.0913 -0.1396 -0.1396 -0.1408 -0.1026 -0.0663 -0.1040 -0.1566 -0.1663 -0.1574 -0.0808 -0.0763 -0.1053 -0.1945 -0.1515 -0.1492 -0.1030 -0.0801 -0.1569 -0.4978 -0.1368 -0.1291 -0.1105 -0.0512 -0.1246 -0.0821 -0.1613 -0.1001 -2.4737 -0.1584 -0.2261 -0.3611 -0.1155 -0.2459 -0.1103 -0.0804 -1.4792 -0.2284 -0.1012 -0.0726 -0.0828 -0.0575 -0.3826 -1.0556 -0.1991 -0.0986 -0.0611 -0.0893 -0.0943 -0.0997 -0.1017 -0.4746 -0.1202 -0.0892 -0.0786 -0.2483 -0.0892 -0.0718
S-85	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-85	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-85	-0.1861320286989212	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-85	-0.1861320286989212	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-85	-0.0997 -0.0482 -0.1245 -0.0179 -0.0905 -0.0695 -0.1210 -0.8164 -0.0861 -0.0840 -0.0850 -0.1763 -0.0869 -0.0808 -0.6778 -0.1464 -2.3219 -0.0625 -0.0706 -0.0524 -0.0779 -0.0575 -0.1574 -0.0604 -0.0458 -0.0692 -0.0820 -0.2198 -0.1099 -0.0870 -0.0876 -0.0749 -0.0766 -0.0904 -0.0692 -0.0927 -0.1009 -0.1361 -0.1212 -0.2640 -0.1456 -0.0690 -0.0991 -0.0944 -0.1400 -0.1803 -0.1473 -0.0689 -0.1147 -0.0892 -0.1582 -0.1753 -0.1592 -0.0847 -0.0576 -0.1256 -0.1742 -0.5205 -0.0539 -0.1015 -0.2012 -0.1282 -0.2539 -0.1729 -0.1613 -0.0715 -0.0776 -0.0924 -0.1517 -0.1583 -0.1314 -0.0947 -0.0973 -0.1121 -0.1318 -0.1561 -0.1460 -0.0845 -0.0862 -0.1042 -0.1550 -0.1640 -0.1566 -0.1075 -0.0757 -0.1411 -0.2456 -0.1616 -0.1461 -0.1022 -0.0517 -0.1251 -0.2070 -0.1464 -0.1200 -0.0988 -0.0614 -0.1215 -0.0834 -0.1764 -0.1046 -2.3657 -0.1587 -0.2172 -0.3594 -0.1155 -0.2220 -0.1102 -0.0797 -1.4164 -0.2248 -0.1011 -0.0719 -0.0833 -0.0588 -0.3734 -1.0261 -0.1928 -0.0978 -0.0605 -0.0927 -0.0935 -0.0972 -0.1018 -0.4406 -0.1211 -0.0875 -0.0780 -0.2506 -0.0892 -0.0724
S-56	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-56	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-56	-0.18381847441196442	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-56	-0.18381847441196442	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-56	-0.0991 -0.0482 -0.1245 -0.0176 -0.0904 -0.0691 -0.1209 -0.8170 -0.0868 -0.0840 -0.0850 -0.1762 -0.0869 -0.0808 -0.6736 -0.1464 -2.3326 -0.0625 -0.0706 -0.0524 -0.0779 -0.0575 -0.1561 -0.0604 -0.0459 -0.0687 -0.0820 -0.2197 -0.1099 -0.0871 -0.0856 -0.0748 -0.0766 -0.0903 -0.0697 -0.0927 -0.1009 -0.1354 -0.1201 -0.2668 -0.1461 -0.0696 -0.0973 -0.0946 -0.1432 -0.1768 -0.1511 -0.0703 -0.1108 -0.0914 -0.1573 -0.1661 -0.1615 -0.0862 -0.0574 -0.1315 -0.2011 -0.1598 -0.1613 -0.1092 -0.0511 -0.1243 -0.1476 -0.1503 -0.1398 -0.0767 -0.0657 -0.0910 -0.1557 -0.3696 -0.0603 -0.1012 -0.2422 -0.1300 -0.2165 -0.1682 -0.1391 -0.0786 -0.0961 -0.1036 -0.1481 -0.1659 -0.1555 -0.1053 -0.0779 -0.1408 -0.2155 -0.1414 -0.1447 -0.1041 -0.0514 -0.1233 -0.2018 -0.1420 -0.1167 -0.1014 -0.0612 -0.1215 -0.0832 -0.1742 -0.1044 -2.3663 -0.1580 -0.2126 -0.3555 -0.1155 -0.2130 -0.1102 -0.0792 -1.3714 -0.2212 -0.1011 -0.0715 -0.0833 -0.0580 -0.3655 -1.0090 -0.1880 -0.0962 -0.0596 -0.0920 -0.0931 -0.0954 -0.1017 -0.4294 -0.1212 -0.0873 -0.0774 -0.2526 -0.0892 -0.0723
S-42	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-42	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-42	-0.18211939930915833	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-42	-0.18211939930915833	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-42	-0.0984 -0.0483 -0.1246 -0.0176 -0.0904 -0.0690 -0.1210 -0.8214 -0.0861 -0.0840 -0.0850 -0.1760 -0.0870 -0.0803 -0.6778 -0.1461 -2.3212 -0.0626 -0.0706 -0.0530 -0.0778 -0.0575 -0.1563 -0.0605 -0.0463 -0.0692 -0.0826 -0.2221 -0.1098 -0.0871 -0.0870 -0.0730 -0.0766 -0.0903 -0.0704 -0.0927 -0.1018 -0.1374 -0.1211 -0.2428 -0.1445 -0.0650 -0.1906 -0.0802 -0.1164 -0.1837 -0.1822 -0.0785 -0.1370 -0.0985 -0.1671 -0.1434 -0.1311 -0.0721 -0.1103 -0.0953 -0.1696 -0.1502 -0.1625 -0.0939 -0.0720 -0.1215 -0.1710 -0.1409 -0.1466 -0.0850 -0.0445 -0.1209 -0.1626 -0.1500 -0.1433 -0.0892 -0.0886 -0.0942 -0.1549 -0.1412 -0.1404 -0.1019 -0.0690 -0.1017 -0.1491 -0.1730 -0.1548 -0.1070 -0.0702 -0.1372 -0.2102 -0.1390 -0.1478 -0.0944 -0.0519 -0.1266 -0.2067 -0.1394 -0.1225 -0.1016 -0.0616 -0.1224 -0.0834 -0.1739 -0.1053 -2.4027 -0.1586 -0.2147 -0.3641 -0.1156 -0.2271 -0.1094 -0.0795 -1.4109 -0.2260 -0.1011 -0.0721 -0.0834 -0.0588 -0.3735 -1.0219 -0.1942 -0.0977 -0.0602 -0.0914 -0.0935 -0.0970 -0.1025 -0.4316 -0.1209 -0.0881 -0.0774 -0.2503 -0.0891 -0.0722
S-21	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-21	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-21	-0.18198242783546448	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-21	-0.18198242783546448	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-21	-0.0994 -0.0479 -0.1245 -0.0178 -0.0911 -0.0691 -0.1209 -0.8260 -0.0861 -0.0840 -0.0850 -0.1768 -0.0870 -0.0808 -0.6779 -0.1465 -2.3210 -0.0626 -0.0706 -0.0523 -0.0779 -0.0575 -0.1574 -0.0604 -0.0459 -0.0692 -0.0820 -0.2202 -0.1098 -0.0871 -0.0851 -0.0741 -0.0766 -0.0903 -0.0696 -0.0919 -0.1016 -0.1370 -0.1211 -0.2479 -0.1429 -0.0683 -0.1310 -0.0886 -0.1244 -0.1822 -0.1805 -0.0792 -0.1225 -0.1031 -0.1649 -0.1549 -0.1589 -0.0840 -0.0584 -0.1286 -0.1839 -0.1468 -0.1567 -0.1011 -0.0520 -0.1225 -0.1510 -0.1438 -0.1467 -0.0763 -0.0643 -0.0950 -0.1540 -0.1468 -0.1335 -0.0963 -0.0901 -0.1114 -0.1326 -0.1522 -0.1482 -0.0823 -0.0877 -0.1045 -0.1527 -0.1572 -0.1614 -0.1099 -0.0750 -0.1432 -0.2360 -0.1399 -0.1498 -0.1034 -0.0521 -0.1273 -0.2103 -0.1425 -0.1201 -0.1019 -0.0614 -0.1225 -0.0842 -0.1741 -0.1050 -2.3631 -0.1592 -0.2129 -0.3629 -0.1155 -0.2242 -0.1102 -0.0791 -1.4247 -0.2269 -0.1011 -0.0718 -0.0834 -0.0588 -0.3741 -1.0254 -0.1937 -0.0986 -0.0605 -0.0935 -0.0935 -0.0972 -0.1018 -0.4378 -0.1211 -0.0882 -0.0780 -0.2486 -0.0892 -0.0723
S-8	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( 'y' == str_chars[str_chars.length - 1] ) result += 1; return result; }
T-8	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'Y' || str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
H-8	-0.18061402440071106	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( 'y' == str_chars.length ) result += 1 ; return result ; }
D-8	-0.18061402440071106	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( 'y' == str_chars.length ) result += 1 ; return result ; }
P-8	-0.0996 -0.0482 -0.1235 -0.0176 -0.0897 -0.0692 -0.1210 -0.8258 -0.0866 -0.0842 -0.0849 -0.1773 -0.0870 -0.0797 -0.6602 -0.1441 -2.3236 -0.0611 -0.0688 -0.0500 -0.0779 -0.0562 -0.1581 -0.0616 -0.0461 -0.0692 -0.0820 -0.2149 -0.1099 -0.0871 -0.0871 -0.0762 -0.0743 -0.0894 -0.0689 -0.0932 -0.1040 -0.1363 -0.1202 -0.2719 -0.1518 -0.0695 -0.1029 -0.0935 -0.1534 -0.1721 -0.1537 -0.0690 -0.1143 -0.0910 -0.1637 -0.1555 -0.1640 -0.0847 -0.0568 -0.1309 -0.1972 -0.1530 -0.1644 -0.1034 -0.0489 -0.1219 -0.1512 -0.1488 -0.1449 -0.0754 -0.0636 -0.0959 -0.1508 -0.1488 -0.1344 -0.0934 -0.0942 -0.1097 -0.1321 -0.1492 -0.1492 -0.0802 -0.0869 -0.1030 -0.1533 -0.1566 -0.1593 -0.1032 -0.0754 -0.1409 -0.2474 -0.1365 -0.1470 -0.0977 -0.0521 -0.1242 -0.2265 -0.1390 -0.1153 -0.0954 -0.0590 -0.1258 -0.0835 -0.1765 -0.1043 -2.3105 -0.1597 -0.2064 -0.3420 -0.1165 -0.1654 -0.0634 -0.0824 -0.2640 -0.1147 -0.1007 -0.0793 -1.8657 -0.1030 -0.1204 -0.0950 -0.1064 -0.5332 -0.1460 -0.0917 -0.0722 -0.3492 -0.0902 -0.0663
S-5	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-5	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-5	-0.18706732988357544	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-5	-0.18706732988357544	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-5	-0.0994 -0.0482 -0.1244 -0.0176 -0.0905 -0.0696 -0.1209 -0.8212 -0.0861 -0.0840 -0.0850 -0.1763 -0.0876 -0.0808 -0.6773 -0.1466 -2.3303 -0.0621 -0.0706 -0.0523 -0.0779 -0.0575 -0.1575 -0.0609 -0.0462 -0.0687 -0.0820 -0.2199 -0.1099 -0.0877 -0.0870 -0.0743 -0.0766 -0.0903 -0.0696 -0.0920 -0.1009 -0.1363 -0.1203 -0.2548 -0.1488 -0.0703 -0.1010 -0.0938 -0.1429 -0.1862 -0.1517 -0.0710 -0.1156 -0.0914 -0.1595 -0.1596 -0.1629 -0.0862 -0.0562 -0.1324 -0.1906 -0.1588 -0.1632 -0.1066 -0.0499 -0.1249 -0.1451 -0.1498 -0.1481 -0.0790 -0.0625 -0.0983 -0.1423 -0.1568 -0.1328 -0.0934 -0.0967 -0.1107 -0.1225 -0.5093 -0.0933 -0.0797 -0.3723 -0.1327 -0.2231 -0.1744 -0.1611 -0.1042 -0.0802 -0.1394 -0.2234 -0.1570 -0.1464 -0.1011 -0.0526 -0.1256 -0.1863 -0.1477 -0.1185 -0.0986 -0.0611 -0.1209 -0.0827 -0.1761 -0.1047 -2.3785 -0.1576 -0.2176 -0.3598 -0.1155 -0.2199 -0.1102 -0.0791 -1.4147 -0.2243 -0.1012 -0.0719 -0.0834 -0.0588 -0.3766 -1.0315 -0.1929 -0.0979 -0.0600 -0.0934 -0.0936 -0.0970 -0.1017 -0.4354 -0.1211 -0.0882 -0.0780 -0.2505 -0.0892 -0.0718
S-314	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( " of the " + "the number of odd elements " + n + "n the str" + n + "ng " + n + n + "nput." ) ; } return result; }
T-314	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( " of the " + "the number of odd elements " + n + "n the str" + n + "ng " + n + n + "nput." ) ; } return result; }
H-314	-0.20662546157836914	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( " of the " + "the number of odd elements " + n + "n the str" + n + "ng " + n + n + "nput." ) ; } return result ; }
D-314	-0.20662546157836914	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( " of the " + "the number of odd elements " + n + "n the str" + n + "ng " + n + n + "nput." ) ; } return result ; }
P-314	-0.0984 -0.0502 -1.3824 -0.2602 -0.0680 -0.1429 -0.0345 -0.0926 -0.0540 -0.1198 -1.2051 -0.2942 -0.0800 -0.1801 -0.0439 -0.0836 -0.0843 -1.5405 -0.2523 -0.0705 -0.1513 -0.0700 -0.0845 -0.0616 -0.8629 -0.2737 -0.0603 -0.0847 -0.1892 -0.1085 -2.5136 -0.0974 -0.0671 -0.0472 -0.0932 -0.0851 -0.0938 -0.0829 -0.0866 -1.1163 -0.1452 -0.1105 -0.0739 -0.0860 -0.0811 -0.8119 -0.0889 -0.0872 -0.3286 -0.1282 -0.0934 -0.0684 -0.0889 -0.0842 -0.9939 -0.0793 -0.0847 -0.1239 -0.0629 -0.0946 -0.0765 -0.1206 -0.9825 -0.1058 -0.1001 -0.0876 -0.3069 -0.1372 -0.0961 -0.1234 -0.1148 -0.1354 -0.6307 -0.0479 -0.1670 -0.1155 -0.0867 -0.0884 -0.0715 -0.6364 -0.1731 -0.1412 -0.1416 -0.2027 -0.1866 -0.1144 -0.1637 -0.3162 -0.0712 -0.0894 -0.0957 -0.1320 -0.1095 -0.0568 -0.0565 -0.0683 -0.0489 -0.1079 -0.2076 -0.1079 -0.1888 -0.1052 -0.1460 -0.1105 -0.0499 -0.1213 -0.2256 -0.1104 -0.2562 -0.1137 -0.0641 -0.1343 -0.2013 -0.1218 -0.2953 -0.2076 -0.2171 -0.1087 -0.0823 -0.0226 -0.0732 -0.1187 -0.0878 -0.1056 -0.0801 -0.0802 -0.1535 -0.0881 -0.0798
S-273	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "ng " + "the number of odd elements " + n + "n the str" + n + n + " of the " + n + "nput." ) ; } return result; }
T-273	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "ng " + "the number of odd elements " + n + "n the str" + n + n + " of the " + n + "nput." ) ; } return result; }
H-273	-0.20791330933570862	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "ng " + "the number of odd elements " + n + "n the str" + n + n + " of the " + n + "nput." ) ; } return result ; }
D-273	-0.20791330933570862	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "ng " + "the number of odd elements " + n + "n the str" + n + n + " of the " + n + "nput." ) ; } return result ; }
P-273	-0.0987 -0.0505 -1.3890 -0.2621 -0.0680 -0.1417 -0.0345 -0.0933 -0.0536 -0.1198 -1.2105 -0.2925 -0.0800 -0.1788 -0.0438 -0.0836 -0.0843 -1.5515 -0.2560 -0.0710 -0.1503 -0.0712 -0.0839 -0.0615 -0.8639 -0.2738 -0.0603 -0.0848 -0.1886 -0.1085 -2.5305 -0.0963 -0.0671 -0.0467 -0.0932 -0.0851 -0.0949 -0.0826 -0.0866 -1.0987 -0.1453 -0.1105 -0.0739 -0.0866 -0.0810 -0.8108 -0.0895 -0.0878 -0.3288 -0.1299 -0.0920 -0.0684 -0.0897 -0.0836 -1.0020 -0.0788 -0.0846 -0.1240 -0.0622 -0.0946 -0.0772 -0.1209 -0.9926 -0.1057 -0.1002 -0.0876 -0.3037 -0.1364 -0.1040 -0.1232 -0.1157 -0.1328 -0.6240 -0.0480 -0.1685 -0.1153 -0.0867 -0.0883 -0.0711 -0.6144 -0.1709 -0.1411 -0.1432 -0.2177 -0.1978 -0.1130 -0.1396 -0.0448 -0.1273 -0.0942 -0.1235 -0.0576 -0.0606 -0.0605 -0.0608 -0.0505 -0.1052 -0.1780 -0.1081 -0.1819 -0.1123 -0.1300 -0.1073 -0.0619 -0.1250 -0.2623 -0.1128 -0.2159 -0.9332 -0.2057 -0.1364 -0.1013 -0.0762 -0.0841 -0.1184 -0.1014 -0.1587 -0.1010 -0.0895 -0.0204 -0.0707 -0.1195 -0.0879 -0.1050 -0.0780 -0.0799 -0.1529 -0.0863 -0.0787
S-271	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + "nput." ) ; } return result; }
T-271	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + "nput." ) ; } return result; }
H-271	-0.20305025577545166	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + "nput." ) ; } return result ; }
D-271	-0.20305025577545166	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + "nput." ) ; } return result ; }
P-271	-0.0990 -0.0501 -1.3886 -0.2622 -0.0680 -0.1406 -0.0329 -0.0942 -0.0546 -0.1204 -1.2115 -0.2926 -0.0794 -0.1778 -0.0434 -0.0835 -0.0851 -1.5546 -0.2559 -0.0705 -0.1514 -0.0705 -0.0846 -0.0616 -0.8792 -0.2826 -0.0593 -0.0841 -0.1880 -0.1083 -2.5221 -0.0975 -0.0667 -0.0463 -0.0932 -0.0851 -0.0944 -0.0817 -0.0887 -1.0635 -0.1469 -0.1104 -0.0739 -0.0859 -0.0810 -0.8051 -0.0894 -0.0871 -0.3292 -0.1284 -0.0920 -0.0689 -0.0896 -0.0841 -0.9838 -0.0788 -0.0840 -0.1228 -0.0623 -0.0947 -0.0776 -0.1195 -0.9834 -0.1056 -0.1002 -0.0869 -0.3063 -0.1387 -0.0975 -0.1213 -0.1154 -0.1344 -0.6370 -0.0486 -0.1685 -0.1165 -0.0874 -0.0880 -0.0726 -0.6636 -0.1761 -0.1584 -0.1403 -0.1936 -0.1983 -0.1104 -0.1488 -0.1386 -0.1000 -0.1508 -0.0527 -0.0569 -0.0540 -0.0554 -0.1049 -0.1700 -0.1143 -0.2029 -0.1025 -0.1925 -0.1254 -0.0503 -0.1147 -0.1916 -0.1034 -0.2418 -0.1107 -0.1450 -0.1365 -0.1524 -0.0945 -0.1949 -0.1053 -0.1086 -0.0735 -0.0776 -0.1085 -0.1118 -0.1008 -0.0191 -0.0699 -0.1189 -0.0873 -0.1047 -0.0756 -0.0794 -0.1634 -0.0863 -0.0793
S-238	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; s.length () > i; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-238	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; s.length () > i; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-238	-0.21108850836753845	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; s.length () > i ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-238	-0.21108850836753845	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; s.length () > i ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-238	-0.0982 -0.0500 -1.3781 -0.2679 -0.0680 -0.1434 -0.0323 -0.0941 -0.0553 -0.1203 -1.2073 -0.3036 -0.0805 -0.1794 -0.0446 -0.0834 -0.0849 -1.5382 -0.2600 -0.0706 -0.1514 -0.0700 -0.0840 -0.0617 -0.8628 -0.2809 -0.0606 -0.0841 -0.1949 -0.1091 -2.4978 -0.0930 -0.0700 -0.0476 -0.0925 -0.0858 -0.0946 -0.0839 -0.0924 -1.1996 -0.1447 -0.1118 -0.0703 -0.0816 -0.0810 -1.0517 -0.2586 -0.1689 -0.0973 -0.0714 -0.1377 -0.1155 -0.8710 -0.0957 -0.9694 -0.0769 -0.0867 -0.1270 -0.0598 -0.0957 -0.0736 -0.1132 -0.9383 -0.1074 -0.1037 -0.0890 -0.2963 -0.1453 -0.1173 -0.1227 -0.1164 -0.1311 -0.6865 -0.0495 -0.1589 -0.1170 -0.0875 -0.0884 -0.0719 -0.6801 -0.1688 -0.1564 -0.1443 -0.2063 -0.1897 -0.1128 -0.1682 -0.0481 -0.0593 -0.0586 -0.0512 -0.0561 -0.0937 -0.1365 -0.1066 -0.2102 -0.0969 -0.1214 -0.1135 -0.0563 -0.1178 -0.1760 -0.0985 -0.2507 -0.1091 -0.1320 -0.1455 -0.1474 -0.1005 -0.2033 -0.1025 -0.1066 -0.0734 -0.0877 -0.1273 -0.1002 -0.1741 -0.1083 -0.0847 -0.0211 -0.0714 -0.1177 -0.0871 -0.1056 -0.0774 -0.0787 -0.1630 -0.0862 -0.0780
S-215	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( 0 == digit % 2 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-215	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( 1 == digit % 2 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-215	-0.20321881771087646	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( 0 == digit ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-215	-0.20321881771087646	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( 0 == digit ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-215	-0.0982 -0.0505 -1.3830 -0.2604 -0.0680 -0.1423 -0.0318 -0.0935 -0.0545 -0.1204 -1.2172 -0.2949 -0.0793 -0.1789 -0.0431 -0.0836 -0.0850 -1.5351 -0.2544 -0.0700 -0.1523 -0.0694 -0.0840 -0.0611 -0.8646 -0.2773 -0.0603 -0.0841 -0.1905 -0.1085 -2.5195 -0.0950 -0.0672 -0.0466 -0.0932 -0.0851 -0.0942 -0.0800 -0.0913 -1.0759 -0.1451 -0.1113 -0.0749 -0.0842 -0.0809 -0.8105 -0.0883 -0.0828 -0.3170 -0.1297 -0.0919 -0.0684 -0.0892 -0.0846 -0.9890 -0.0788 -0.0852 -0.1228 -0.0516 -0.0939 -0.0767 -0.1181 -0.9921 -0.1056 -0.0978 -0.0870 -0.2961 -0.1373 -0.0874 -0.1232 -0.1144 -0.2905 -0.1397 -0.0987 -0.6169 -0.0827 -0.0694 -0.5962 -0.1978 -0.1543 -0.1433 -0.2027 -0.1801 -0.1128 -0.1532 -0.0447 -0.0571 -0.0562 -0.0515 -0.0562 -0.0917 -0.1360 -0.1019 -0.2137 -0.0966 -0.1204 -0.1098 -0.0542 -0.1151 -0.1757 -0.0966 -0.2568 -0.1083 -0.1338 -0.1446 -0.1517 -0.0988 -0.2056 -0.1020 -0.1075 -0.0720 -0.0879 -0.1260 -0.0972 -0.1742 -0.1068 -0.0849 -0.0200 -0.0690 -0.1144 -0.0868 -0.1034 -0.0766 -0.0782 -0.1622 -0.0857 -0.0789
S-154	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "nput." + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n ) ; } return result; }
T-154	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "nput." + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n ) ; } return result; }
H-154	-0.20453277230262756	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "nput." + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n ) ; } return result ; }
D-154	-0.20453277230262756	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "nput." + "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n ) ; } return result ; }
P-154	-0.0985 -0.0501 -1.3824 -0.2626 -0.0679 -0.1420 -0.0347 -0.0927 -0.0539 -0.1197 -1.2049 -0.2946 -0.0800 -0.1803 -0.0439 -0.0837 -0.0845 -1.5532 -0.2583 -0.0704 -0.1514 -0.0707 -0.0834 -0.0612 -0.8654 -0.2648 -0.0614 -0.0850 -0.1879 -0.1078 -2.5246 -0.0968 -0.0677 -0.0465 -0.0925 -0.0846 -0.0949 -0.0796 -0.0894 -1.1647 -0.1439 -0.1105 -0.0745 -0.0867 -0.0810 -0.8205 -0.0896 -0.0872 -0.3278 -0.1299 -0.0929 -0.0684 -0.0896 -0.0837 -1.0319 -0.0787 -0.0841 -0.1242 -0.0631 -0.0947 -0.0773 -0.1208 -0.9771 -0.1058 -0.1008 -0.0875 -0.3081 -0.1381 -0.0948 -0.1225 -0.1149 -0.1383 -0.6280 -0.0479 -0.1670 -0.1155 -0.0872 -0.0883 -0.0708 -0.6760 -0.1709 -0.1473 -0.1405 -0.2144 -0.2185 -0.1125 -0.1480 -0.0870 -0.0315 -0.0510 -0.0991 -0.1360 -0.0577 -0.0616 -0.0578 -0.0637 -0.0516 -0.1058 -0.1801 -0.1069 -0.2015 -0.1010 -0.1249 -0.1037 -0.0566 -0.1163 -0.1629 -0.1181 -0.3367 -0.1070 -0.1132 -0.1322 -0.1434 -0.1045 -0.3789 -0.0980 -0.1119 -0.0750 -0.0797 -0.1393 -0.0906 -0.1061 -0.0895 -0.1026 -0.0784 -0.0818 -0.1571 -0.0851 -0.0790
S-131	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-131	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( n + "the number of odd elements " + n + "n the str" + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-131	-0.20301072299480438	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-131	-0.20301072299480438	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + n + "n the str" + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-131	-0.0990 -0.0501 -1.3959 -0.2624 -0.0680 -0.1416 -0.0329 -0.0941 -0.0542 -0.1204 -1.2182 -0.2946 -0.0793 -0.1775 -0.0437 -0.0836 -0.0850 -1.5546 -0.2558 -0.0705 -0.1514 -0.0706 -0.0845 -0.0616 -0.8795 -0.2842 -0.0594 -0.0848 -0.1911 -0.1084 -2.5312 -0.0980 -0.0667 -0.0466 -0.0939 -0.0851 -0.0944 -0.0811 -0.0881 -1.0732 -0.1467 -0.1104 -0.0739 -0.0860 -0.0804 -0.8095 -0.0894 -0.0870 -0.3307 -0.1298 -0.0920 -0.0688 -0.0896 -0.0841 -0.9813 -0.0794 -0.0840 -0.1237 -0.0633 -0.0947 -0.0777 -0.1207 -1.0034 -0.1064 -0.1004 -0.0875 -0.3060 -0.1377 -0.0957 -0.1215 -0.1154 -0.1356 -0.6347 -0.0490 -0.1685 -0.1167 -0.0874 -0.0879 -0.0722 -0.6569 -0.1751 -0.1552 -0.1404 -0.1940 -0.1987 -0.1104 -0.1418 -0.1379 -0.0985 -0.1522 -0.0521 -0.0595 -0.0549 -0.0559 -0.1034 -0.1764 -0.1126 -0.2167 -0.1017 -0.1673 -0.1488 -0.0493 -0.1139 -0.1891 -0.1059 -0.0657 -0.1393 -0.1909 -0.0956 -0.2277 -0.1029 -0.1117 -0.0743 -0.0874 -0.1276 -0.0989 -0.1716 -0.1110 -0.0839 -0.0201 -0.0721 -0.1178 -0.0879 -0.1032 -0.0757 -0.0802 -0.1632 -0.0864 -0.0801
S-113	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "n the str" + "the number of odd elements " + n + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-113	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "n the str" + "the number of odd elements " + n + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-113	-0.2042657881975174	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "n the str" + "the number of odd elements " + n + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-113	-0.2042657881975174	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "n the str" + "the number of odd elements " + n + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-113	-0.0985 -0.0506 -1.3889 -0.2642 -0.0674 -0.1418 -0.0337 -0.0926 -0.0535 -0.1196 -1.2167 -0.2969 -0.0793 -0.1775 -0.0441 -0.0836 -0.0849 -1.5557 -0.2564 -0.0705 -0.1503 -0.0699 -0.0840 -0.0611 -0.8691 -0.2755 -0.0603 -0.0847 -0.1902 -0.1084 -2.5114 -0.0982 -0.0675 -0.0474 -0.0932 -0.0850 -0.0951 -0.0830 -0.0868 -1.0861 -0.1467 -0.1105 -0.0744 -0.0867 -0.0811 -0.8016 -0.0888 -0.0871 -0.3250 -0.1280 -0.0928 -0.0689 -0.0890 -0.0842 -0.9916 -0.0787 -0.0845 -0.1244 -0.0631 -0.0953 -0.0771 -0.1194 -0.9832 -0.1057 -0.1001 -0.0876 -0.3019 -0.1361 -0.0937 -0.1232 -0.1156 -0.1361 -0.6187 -0.0482 -0.1685 -0.1160 -0.0867 -0.0881 -0.0719 -0.6171 -0.1708 -0.1400 -0.1402 -0.2173 -0.2094 -0.1127 -0.1658 -0.0997 -0.0921 -0.0498 -0.1083 -0.1087 -0.1112 -0.0546 -0.0553 -0.0574 -0.0612 -0.0571 -0.1063 -0.2065 -0.1003 -0.1842 -0.4334 -0.2409 -0.1220 -0.2172 -0.1428 -0.1583 -0.1130 -0.1912 -0.1207 -0.1120 -0.0643 -0.0893 -0.1317 -0.0943 -0.1690 -0.1006 -0.0849 -0.0226 -0.0667 -0.1187 -0.0877 -0.1028 -0.0766 -0.0792 -0.1567 -0.0856 -0.0788
S-4	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-4	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( n + "the number of odd elements " + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-4	-0.20208008587360382	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-4	-0.20208008587360382	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( n + "the number of odd elements " + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-4	-0.0987 -0.0505 -1.3886 -0.2640 -0.0680 -0.1416 -0.0332 -0.0934 -0.0546 -0.1204 -1.2177 -0.2965 -0.0799 -0.1790 -0.0437 -0.0836 -0.0850 -1.5382 -0.2577 -0.0705 -0.1525 -0.0705 -0.0846 -0.0620 -0.8790 -0.2836 -0.0594 -0.0841 -0.1904 -0.1083 -2.5211 -0.0970 -0.0671 -0.0466 -0.0932 -0.0850 -0.0946 -0.0823 -0.0880 -1.0591 -0.1475 -0.1104 -0.0739 -0.0867 -0.0811 -0.8050 -0.0895 -0.0871 -0.3261 -0.1296 -0.0914 -0.0689 -0.0889 -0.0841 -0.9840 -0.0788 -0.0840 -0.1228 -0.0633 -0.0947 -0.0765 -0.1196 -0.9978 -0.1065 -0.1004 -0.0876 -0.3035 -0.1384 -0.0957 -0.1215 -0.1155 -0.1377 -0.6285 -0.0486 -0.1669 -0.1167 -0.0875 -0.0880 -0.0727 -0.6471 -0.1751 -0.1532 -0.1396 -0.1931 -0.1991 -0.1097 -0.1454 -0.1405 -0.0989 -0.1530 -0.0506 -0.0604 -0.0556 -0.0557 -0.1013 -0.1700 -0.1197 -0.1046 -0.0998 -0.0517 -0.1079 -0.1718 -0.1255 -0.2311 -0.1111 -0.1410 -0.1443 -0.1547 -0.1089 -0.2043 -0.1019 -0.1139 -0.0745 -0.0882 -0.1306 -0.1083 -0.1709 -0.1082 -0.0853 -0.0208 -0.0709 -0.1168 -0.0872 -0.1019 -0.0756 -0.0795 -0.1645 -0.0857 -0.0789
S-242	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = 0 > num; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-242	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = 0 > num; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-242	-0.19164234399795532	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = 0 > num ; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-242	-0.19164234399795532	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = 0 > num ; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-242	-0.0913 -0.0442 -0.1091 -0.0756 -0.0954 -0.0756 -0.1207 -1.2015 -0.2406 -0.0381 -0.2032 -0.0558 -0.0866 -0.0907 -0.1076 -0.1463 -0.0875 -0.7937 -0.1647 -0.1083 -0.0790 -0.0927 -0.0604 -0.0656 -0.0844 -0.0839 -0.3171 -0.0916 -0.1001 -0.1375 -0.1421 -0.0725 -1.2366 -0.1794 -0.1151 -0.0819 -0.0790 -0.1175 -0.0101 -0.5225 -0.9996 -0.0647 -0.0834 -0.0389 -0.0790 -0.6596 -0.1028 -1.3077 -0.1090 -0.0802 -0.0842 -0.0930 -0.1399 -0.0704 -0.0873 -0.8831 -0.1007 -0.1075 -0.0751 -0.0910 -0.0758 -0.9545 -0.0902 -0.0700 -0.1122 -0.1090 -0.0558 -0.1096 -0.0992 -0.0784 -0.0936 -0.0891 -0.6883 -0.0754 -0.1008 -0.1436 -0.1190 -0.2560 -0.1083 -0.1474 -0.1412 -0.0801 -0.1013 -0.1308 -0.0833 -0.1135 -0.1071 -0.0735 -0.1060 -0.0701 -0.1010 -0.6643 -0.1051 -0.1185 -0.0935 -0.2040 -0.1582 -0.1116 -0.0811 -0.1233 -0.0695 -0.0885 -0.0966 -0.0627 -0.0959 -0.9778 -0.0987 -0.0996 -0.0902 -0.1604 -0.1698 -0.1750 -0.1063 -0.1364 -0.1192 -0.1140 -0.1329 -0.1098 -0.0933 -0.1351 -0.7353 -0.0875 -0.0889 -0.1486 -0.7759 -0.0893 -0.0751
S-323	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( 0 < sum ) count++; } return count; }
T-323	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( 0 < sum ) count++; } return count; }
H-323	-0.18373467028141022	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( 0 < sum ) count++; } return count ; }
D-323	-0.18373467028141022	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( 0 < sum ) count++; } return count ; }
P-323	-0.0887 -0.0440 -0.1091 -0.0755 -0.0954 -0.0778 -0.1209 -1.2298 -0.2447 -0.0379 -0.2215 -0.0550 -0.0864 -0.0908 -0.1089 -0.1349 -0.0856 -0.7225 -0.1648 -0.1079 -0.0791 -0.0968 -0.0657 -0.0628 -0.0842 -0.0831 -0.3112 -0.0849 -0.1021 -0.1109 -0.1125 -0.5052 -0.1546 -0.1102 -0.0927 -0.0783 -0.1210 -0.0112 -0.5591 -1.0726 -0.0639 -0.0860 -0.0426 -0.0789 -0.5894 -0.1031 -1.1525 -0.1092 -0.0847 -0.0838 -0.0932 -0.1406 -0.0699 -0.0895 -0.8615 -0.0994 -0.1073 -0.0734 -0.0909 -0.0766 -0.8897 -0.0921 -0.0804 -0.1142 -0.1094 -0.0599 -0.1098 -0.1035 -0.0774 -0.0937 -0.0875 -0.6640 -0.0758 -0.1003 -0.1430 -0.1199 -0.2982 -0.1083 -0.1594 -0.1442 -0.0810 -0.1101 -0.1407 -0.0833 -0.1100 -0.1290 -0.0730 -0.1058 -0.0736 -0.1026 -0.6517 -0.1057 -0.1173 -0.0937 -0.2000 -0.1679 -0.1188 -0.0789 -0.1157 -0.0636 -0.0879 -0.0957 -0.0654 -0.0967 -0.9332 -0.0985 -0.0996 -0.0912 -0.1504 -0.1711 -0.1692 -0.1027 -0.1412 -0.1165 -0.2287 -0.1713 -0.1001 -0.0862 -0.1506 -0.6484 -0.0918 -0.0877 -0.1499 -0.6031 -0.0891 -0.0739
S-172	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; num_string.length () > i; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-172	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; num_string.length () > i; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-172	-0.19167879223823547	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; num_string.length () > i ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-172	-0.19167879223823547	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; num_string.length () > i ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-172	-0.0901 -0.0432 -0.1099 -0.0761 -0.0953 -0.0778 -0.1204 -1.2174 -0.2388 -0.0379 -0.2159 -0.0537 -0.0864 -0.0907 -0.1090 -0.1305 -0.0865 -0.7588 -0.1669 -0.1079 -0.0784 -0.1005 -0.0668 -0.0626 -0.0835 -0.0843 -0.2818 -0.0819 -0.1013 -0.1133 -0.1038 -0.5114 -0.1592 -0.1113 -0.0928 -0.0794 -0.1207 -0.0110 -0.5638 -0.9821 -0.0667 -0.0865 -0.0428 -0.0793 -0.5784 -0.1039 -1.1491 -0.1098 -0.0848 -0.0834 -0.0933 -0.1386 -0.0759 -0.0892 -0.8704 -0.0986 -0.1086 -0.0718 -0.0871 -0.0774 -1.0492 -0.1548 -0.1140 -0.0585 -0.1378 -0.1025 -0.0726 -0.1121 -0.1032 -0.8518 -0.0989 -0.6346 -0.0755 -0.1022 -0.1451 -0.1213 -0.2547 -0.1117 -0.1472 -0.1503 -0.0819 -0.1078 -0.1333 -0.0835 -0.1129 -0.1191 -0.0731 -0.1040 -0.0766 -0.1024 -0.6463 -0.1071 -0.1170 -0.0955 -0.2071 -0.1800 -0.1418 -0.0827 -0.1208 -0.0673 -0.0875 -0.0965 -0.0689 -0.0968 -0.9416 -0.0998 -0.1001 -0.0916 -0.1553 -0.1822 -0.2042 -0.1170 -0.1350 -0.1204 -0.1053 -0.1289 -0.1088 -0.0930 -0.1424 -0.7454 -0.0913 -0.0881 -0.1574 -0.6733 -0.0896 -0.0734
S-90	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( neg && ( i == 0 ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-90	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( neg && ( i == 0 ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-90	-0.18136224150657654	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( neg && ( i == 0 ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-90	-0.18136224150657654	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( neg && ( i == 0 ) ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-90	-0.0887 -0.0439 -0.1091 -0.0755 -0.0948 -0.0774 -0.1209 -1.2341 -0.2426 -0.0376 -0.2223 -0.0554 -0.0865 -0.0900 -0.1068 -0.1316 -0.0868 -0.7377 -0.1662 -0.1077 -0.0786 -0.0980 -0.0677 -0.0633 -0.0842 -0.0847 -0.2442 -0.0901 -0.1025 -0.1266 -0.1126 -0.5077 -0.1671 -0.1093 -0.0967 -0.0794 -0.1259 -0.0114 -0.5755 -1.0634 -0.0643 -0.0857 -0.0429 -0.0793 -0.6025 -0.1038 -1.1539 -0.1099 -0.0857 -0.0838 -0.0923 -0.1405 -0.0716 -0.0888 -0.8523 -0.1033 -0.1078 -0.0733 -0.0921 -0.0766 -0.8394 -0.0906 -0.0751 -0.1115 -0.1090 -0.0596 -0.1104 -0.1011 -0.0768 -0.0936 -0.0864 -0.6759 -0.0765 -0.1003 -0.1504 -0.1207 -0.1189 -0.1197 -0.1290 -0.1016 -0.1461 -0.1566 -0.0904 -0.0798 -0.1189 -0.0916 -0.0713 -0.1042 -0.0733 -0.1025 -0.6332 -0.1091 -0.1141 -0.0953 -0.2148 -0.1682 -0.1191 -0.0807 -0.1290 -0.0676 -0.0876 -0.0950 -0.0655 -0.0960 -0.9130 -0.0991 -0.0995 -0.0922 -0.1528 -0.1706 -0.1710 -0.1055 -0.1333 -0.1193 -0.1085 -0.1359 -0.1182 -0.0927 -0.1422 -0.7232 -0.0880 -0.0859 -0.1546 -0.6116 -0.0881 -0.0745
S-24	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( 0 == i ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-24	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( 0 == i ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-24	-0.18091295659542084	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( 0 == i ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-24	-0.18091295659542084	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( 0 == i ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-24	-0.0889 -0.0436 -0.1090 -0.0760 -0.0955 -0.0769 -0.1209 -1.2236 -0.2409 -0.0376 -0.2179 -0.0554 -0.0865 -0.0901 -0.1069 -0.1311 -0.0868 -0.7232 -0.1668 -0.1079 -0.0785 -0.0971 -0.0668 -0.0637 -0.0842 -0.0843 -0.2910 -0.0812 -0.1017 -0.1155 -0.1081 -0.5031 -0.1592 -0.1104 -0.0907 -0.0791 -0.1222 -0.0111 -0.5550 -1.0450 -0.0630 -0.0860 -0.0426 -0.0789 -0.5899 -0.1038 -1.1423 -0.1100 -0.0843 -0.0832 -0.0924 -0.1405 -0.0696 -0.0880 -0.8389 -0.0998 -0.1073 -0.0732 -0.0904 -0.0771 -0.8177 -0.0905 -0.0757 -0.1095 -0.1085 -0.0595 -0.1105 -0.1001 -0.0756 -0.0938 -0.0876 -0.6475 -0.0761 -0.1017 -0.1445 -0.1198 -0.2250 -0.2670 -0.0979 -0.1281 -0.0858 -0.1095 -0.1360 -0.0841 -0.1123 -0.1210 -0.0697 -0.1049 -0.0726 -0.1009 -0.6257 -0.1074 -0.1019 -0.0943 -0.1945 -0.1683 -0.1204 -0.0826 -0.1190 -0.0654 -0.0873 -0.0944 -0.0647 -0.0960 -0.9239 -0.0996 -0.0976 -0.0913 -0.1529 -0.1738 -0.1714 -0.1070 -0.1325 -0.1194 -0.1081 -0.1319 -0.1150 -0.0925 -0.1383 -0.7000 -0.0895 -0.0861 -0.1522 -0.5988 -0.0895 -0.0739
S-264	public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = "" + num; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count; }
T-264	public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = "" + num; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () - 1 ) - '0' ) ) count += 1; } } return count; }
H-264	-0.2276543825864792	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = "" + num ; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count ; }
D-264	-0.2276543825864792	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = "" + num ; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count ; }
P-264	-0.0989 -0.0439 -0.1008 -0.0176 -0.0965 -0.0550 -0.1161 -0.1170 -1.6503 -0.0406 -0.0823 -0.0911 -0.1228 -0.0685 -0.0809 -0.9843 -2.7550 -0.1079 -1.5791 -0.4327 -0.1235 -0.0490 -0.0767 -0.0800 -0.2061 -0.1100 -0.0596 -0.2373 -0.0621 -0.0839 -0.0711 -0.7850 -0.0617 -0.1030 -0.0570 -0.0904 -0.0609 -0.0809 -0.0526 -0.0575 -0.0674 -0.7407 -0.1174 -0.1063 -0.0859 -0.1043 -0.0983 -0.1214 -0.7926 -0.1098 -0.0609 -0.1069 -0.0535 -0.0984 -0.0781 -0.1066 -0.6115 -0.1227 -0.0932 -0.0825 -0.0901 -0.5589 -0.1042 -0.1040 -0.0886 -0.1033 -0.8822 -0.1025 -0.0596 -0.1083 -0.0493 -0.1036 -0.0778 -0.1020 -0.9648 -0.1091 -0.0898 -0.1114 -0.0445 -0.1095 -0.0731 -0.1088 -0.1302 -0.0646 -0.0839 -0.0840 -0.0794 -0.1332 -0.0909 -1.5889 -0.0864 -0.0736 -0.0707 -0.1094 -0.2870 -0.0758 -0.0708
S-78	public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( 10 < num ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count; }
T-78	public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( 10 < num ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () - 1 ) - '0' ) ) count += 1; } } return count; }
H-78	-0.24383506178855896	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( 10 < num ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count ; }
D-78	-0.24383506178855896	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( 10 < num ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count ; }
P-78	-0.0994 -0.0445 -0.1000 -0.0176 -0.0967 -0.0539 -0.1162 -0.1157 -1.6162 -0.0406 -0.0828 -0.0917 -0.1248 -0.0680 -0.0806 -0.8991 -2.6381 -0.1094 -1.6587 -0.5036 -0.1598 -0.0466 -0.0782 -0.0818 -0.2097 -0.1109 -0.0762 -0.1059 -0.0633 -0.0953 -0.0745 -0.8237 -0.0623 -0.1053 -0.0559 -0.0906 -0.0568 -0.0815 -0.1145 -0.0695 -2.4298 -0.1305 -0.1048 -0.0890 -0.1035 -0.1007 -0.1129 -0.8062 -0.1091 -0.0650 -0.1091 -0.0507 -0.0986 -0.0687 -0.1076 -0.6218 -0.1230 -0.0954 -0.0837 -0.0913 -0.7715 -0.1078 -0.1034 -0.0880 -0.1024 -0.8610 -0.1012 -0.0566 -0.1060 -0.0477 -0.1014 -0.0701 -0.1032 -0.9356 -0.1094 -0.0908 -0.1131 -0.0419 -0.1078 -0.0652 -0.1123 -0.1329 -0.0649 -0.0846 -0.0843 -0.0793 -0.1430 -0.0920 -1.1486 -0.0921 -0.0724 -0.0711 -0.1100 -0.2709 -0.0753 -0.0693
S-312	public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) && odd_digits.contains ( number_as_string.charAt ( 0 ) ) ) count += 1; } } return count; }
T-312	public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( number_as_string.length () - 1 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) ) count += 1; } } return count; }
H-312	-0.2540801465511322	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) && odd_digits.contains ( number_as_string.charAt ( 0 ) ) ) count += 1; } } return count ; }
D-312	-0.2540801465511322	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) && odd_digits.contains ( number_as_string.charAt ( 0 ) ) ) count += 1; } } return count ; }
P-312	-0.0991 -0.0436 -0.0999 -0.0173 -0.0961 -0.0542 -0.1160 -0.1168 -1.6063 -0.0396 -0.0821 -0.0906 -0.1241 -0.0688 -0.0812 -0.9360 -2.7742 -0.1086 -1.6292 -0.4968 -0.1264 -0.0474 -0.0772 -0.0800 -0.2186 -0.1102 -0.0608 -0.2412 -0.0639 -0.0845 -0.0721 -0.7669 -0.0654 -0.1058 -0.0559 -0.0905 -0.0571 -0.0800 -0.1041 -0.0700 -2.4472 -0.1297 -0.1034 -0.0931 -0.1045 -0.1195 -0.1130 -0.8650 -0.1082 -0.0663 -0.1105 -0.0512 -0.1006 -0.0707 -0.1018 -0.6515 -0.1123 -0.2456 -0.1221 -0.0500 -0.1164 -0.0639 -0.1109 -0.1417 -0.0729 -0.0812 -0.0786 -1.2410 -0.1128 -0.0995 -0.0980 -0.1044 -0.8927 -0.1019 -0.0651 -0.1003 -0.0488 -0.0934 -0.0641 -0.1033 -0.8918 -0.1053 -0.0981 -0.0855 -0.0857 -0.0822 -0.1371 -0.0926 -1.2465 -0.0896 -0.0730 -0.0716 -0.1113 -0.2593 -0.0759 -0.0709
S-65	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-65	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-65	-0.15551088750362396	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-65	-0.15551088750362396	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-65	-0.0975 -0.0478 -0.2378 -0.3245 -0.0541 -0.1603 -0.0450 -0.0801 -0.0221 -0.1043 -0.1923 -0.2639 -0.0496 -0.1682 -0.0575 -0.0798 -0.0887 -0.2053 -0.2537 -0.0557 -0.1643 -0.1079 -0.0855 -0.0576 -1.6848 -0.1998 -0.0609 -0.1527 -0.0677 -0.0827 -0.1826 -0.2135 -0.0591 -0.1579 -0.0574 -0.0498 -0.0297 -0.0826 -0.0526 -1.4361 -0.2395 -0.0535 -0.1469 -0.0593 -0.0916 -0.0920 -0.1128 -0.0689 -0.0762 -0.0833 -1.0179 -0.1036 -0.1269 -0.1305 -0.0738 -0.1584 -0.1008 -0.5942 -0.0772 -0.1040 -0.0851 -0.0771 -0.0850 -0.1853 -0.0415 -0.0406 -0.1987 -0.2693 -0.1064 -0.0533 -0.1133 -0.1950 -0.1163 -0.0866 -0.0898 -0.0944 -0.0867 -0.0927 -1.2686 -0.0889 -0.0408 -0.1141 -0.0552 -0.0454 -0.0356 -0.1141 -0.0993 -0.1151 -0.1106 -0.0680 -0.0721 -0.0821 -0.7668 -0.0662 -0.1116 -0.1208 -0.0762 -0.1343 -0.0745 -0.4635 -0.0647 -0.0726 -0.2616 -0.0787 -0.0933 -0.1786 -0.1179 -0.1606 -0.2573 -0.0867 -0.1377 -0.1352 -0.0822 -0.0928 -0.0923 -0.1658 -0.2696 -0.1095 -0.4506 -0.0467 -0.0416 -0.2142 -0.2326 -0.1175 -0.0876 -0.0855 -0.0915 -0.0901 -0.0736 -0.0725 -0.0932 -0.1016 -0.1178 -0.2047 -0.1007 -0.0529 -0.1058 -0.1643 -0.1110 -0.0840 -0.0866 -0.0898 -0.0902 -0.0890 -0.0932 -0.0788 -0.0812 -0.1365 -0.0843 -0.0747
S-31	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( 0 == i % 3 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-31	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( 0 == i % 3 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-31	-0.1530124396085739	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( 0 == i % 3 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-31	-0.1530124396085739	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( 0 == i % 3 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-31	-0.0957 -0.0478 -0.2373 -0.3128 -0.0545 -0.1607 -0.0449 -0.0803 -0.0214 -0.1037 -0.1950 -0.2611 -0.0504 -0.1690 -0.0584 -0.0807 -0.0879 -0.2082 -0.2400 -0.0562 -0.1645 -0.1084 -0.0850 -0.0576 -1.7147 -0.1920 -0.0603 -0.1583 -0.0676 -0.0821 -0.1821 -0.2032 -0.0597 -0.1581 -0.0543 -0.0480 -0.0297 -0.0826 -0.0523 -1.4609 -0.2363 -0.0530 -0.1493 -0.0589 -0.0908 -0.0879 -0.1131 -0.0726 -0.0783 -0.0842 -1.0408 -0.0829 -0.1028 -0.1229 -0.1102 -0.1503 -0.0651 -0.0879 -0.0767 -0.1023 -0.1173 -0.0795 -0.0871 -0.1802 -0.0399 -0.0415 -0.2081 -0.2662 -0.1056 -0.0555 -0.1142 -0.1957 -0.1145 -0.0862 -0.0887 -0.0936 -0.0866 -0.0941 -1.2278 -0.0889 -0.0408 -0.1131 -0.0513 -0.0437 -0.0353 -0.1136 -0.0999 -0.1240 -0.1097 -0.0712 -0.0751 -0.0814 -0.7775 -0.0845 -0.0894 -0.0675 -0.1066 -0.1180 -0.0661 -0.0930 -0.0709 -0.0745 -0.2989 -0.0782 -0.0934 -0.1969 -0.1143 -0.2982 -0.1049 -0.1213 -0.7537 -0.0916 -0.0788 -0.0893 -0.0857 -0.1601 -0.2520 -0.1096 -0.4321 -0.0453 -0.0420 -0.2187 -0.2161 -0.1153 -0.0874 -0.0833 -0.0918 -0.0905 -0.0759 -0.0792 -0.0934 -0.0984 -0.1171 -0.1923 -0.1002 -0.0517 -0.1058 -0.1603 -0.1097 -0.0839 -0.0867 -0.0897 -0.0915 -0.0886 -0.0909 -0.0795 -0.0819 -0.1335 -0.0849 -0.0752
S-137	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) ( l.length / 2. ) + 1]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
T-137	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
H-137	-0.2680160701274872	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) ( l.length / 2. ) + 1]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
D-137	-0.2680160701274872	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) ( l.length / 2. ) + 1]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
P-137	-0.1020 -0.0448 -0.1043 -1.8918 -0.0372 -0.0888 -0.0244 -0.1070 -0.0864 -1.5861 -0.0669 -0.0840 -0.0891 -0.0932 -2.4792 -0.1675 -0.0978 -0.0726 -0.0764 -0.4767 -0.1377 -0.0943 -0.0642 -1.6786 -0.0800 -1.9607 -0.0588 -0.0314 -0.0930 -0.0670 -0.0693 -0.3297 -0.1214 -0.1393 -0.0935 -0.1085 -0.0778 -0.0923 -0.0723 -0.1967 -0.2900 -0.1083 -0.0859 -0.1792 -1.3075 -0.1182 -0.1165 -0.0674 -0.0888 -0.0912 -1.0262 -0.0880 -0.0986 -0.1451 -0.0891 -0.0773 -1.6229 -0.0873 -0.0816 -0.1166 -0.0852 -0.0814 -0.1138 -0.0363 -0.6383 -0.1798 -0.1289 -0.0916 -0.1819 -0.1210 -0.0872 -0.1363 -0.0703 -0.3470 -0.3203 -1.5647 -0.0906 -1.3100 -0.0896 -0.0433 -0.1155 -0.1059 -0.0330 -0.1281 -0.0985 -0.1721 -0.1184 -0.0643 -0.0901 -0.0894 -0.8610 -0.0914 -0.0916 -0.0947 -0.0960 -0.0823 -1.1799 -0.0809 -0.0639 -0.2809 -0.0791 -0.0944 -0.1264 -0.1292 -0.1792 -0.1751 -0.0492 -0.1194 -0.1075 -0.0853 -0.0903 -0.1118 -0.6659 -0.2412 -0.1516 -0.1230 -0.1016 -0.0311 -0.5687 -0.1669 -0.1108 -0.0958 -0.2206 -0.0906 -0.0849 -1.2793 -0.0759 -0.0772 -0.1058 -0.1077 -0.4225 -0.1769 -0.1489 -0.0919 -0.0949 -0.3678 -0.3434 -1.6489 -0.1017 -0.0871 -0.1042 -0.0988 -0.4920 -0.0861 -0.0680
S-184	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
T-184	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
H-184	-0.25439706444740295	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
D-184	-0.25439706444740295	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
P-184	-0.1038 -0.0440 -0.1047 -1.8196 -0.0372 -0.0888 -0.0236 -0.1076 -0.0861 -1.5163 -0.0680 -0.0844 -0.0902 -0.0920 -2.3557 -0.1745 -0.0968 -0.0716 -0.0782 -0.3925 -0.1224 -0.0959 -0.0568 -1.5375 -0.0811 -1.8782 -0.0592 -0.0308 -0.0907 -0.0736 -0.0692 -0.1407 -0.0553 -0.1338 -0.1123 -0.0886 -0.1183 -0.0634 -0.0894 -0.0676 -0.1109 -0.2432 -0.0948 -1.2405 -0.1124 -0.1190 -0.0684 -0.0907 -0.0904 -1.0380 -0.1098 -0.0965 -0.0668 -0.1169 -0.1030 -1.2545 -0.0881 -0.0898 -0.1124 -0.0806 -0.0840 -0.1208 -0.0340 -0.6222 -0.1738 -0.1317 -0.0900 -0.1110 -0.1189 -0.0826 -0.1343 -0.0654 -0.3680 -0.2600 -1.4697 -0.0892 -1.4015 -0.0901 -0.0429 -0.1163 -0.1191 -0.0337 -0.1405 -0.1007 -0.1463 -0.1179 -0.0629 -0.0840 -0.0880 -0.8782 -0.1067 -0.1003 -0.0739 -0.1098 -0.0773 -0.9968 -0.0779 -0.0671 -0.2032 -0.0786 -0.0937 -0.1288 -0.1291 -0.1761 -0.2194 -0.0538 -0.1157 -0.1088 -0.0850 -0.0919 -0.1138 -0.6366 -0.1978 -0.1422 -0.1228 -0.1192 -0.0296 -0.5559 -0.1794 -0.1097 -0.0952 -0.1558 -0.0917 -0.0823 -1.2217 -0.0730 -0.0789 -0.1076 -0.1098 -0.4154 -0.1605 -0.1421 -0.0926 -0.0952 -0.3471 -0.3118 -1.6043 -0.1009 -0.0875 -0.1029 -0.0962 -0.5025 -0.0852 -0.0670
S-11	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
T-11	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( 0 == i % 2 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
H-11	-0.2543970048427582	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
D-11	-0.2543970048427582	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; l.length > i; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; l.length > i; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
P-11	-0.1038 -0.0440 -0.1047 -1.8196 -0.0372 -0.0888 -0.0236 -0.1076 -0.0861 -1.5163 -0.0680 -0.0844 -0.0902 -0.0920 -2.3557 -0.1745 -0.0968 -0.0716 -0.0782 -0.3925 -0.1224 -0.0959 -0.0568 -1.5375 -0.0811 -1.8782 -0.0592 -0.0308 -0.0907 -0.0736 -0.0692 -0.1407 -0.0553 -0.1338 -0.1123 -0.0886 -0.1183 -0.0634 -0.0894 -0.0676 -0.1109 -0.2432 -0.0948 -1.2405 -0.1124 -0.1190 -0.0684 -0.0907 -0.0904 -1.0380 -0.1098 -0.0965 -0.0668 -0.1169 -0.1030 -1.2545 -0.0881 -0.0898 -0.1124 -0.0806 -0.0840 -0.1208 -0.0340 -0.6222 -0.1738 -0.1317 -0.0900 -0.1110 -0.1189 -0.0826 -0.1343 -0.0654 -0.3680 -0.2600 -1.4697 -0.0892 -1.4015 -0.0901 -0.0429 -0.1163 -0.1191 -0.0337 -0.1405 -0.1007 -0.1463 -0.1179 -0.0629 -0.0840 -0.0880 -0.8782 -0.1067 -0.1003 -0.0739 -0.1098 -0.0773 -0.9968 -0.0779 -0.0671 -0.2032 -0.0786 -0.0937 -0.1288 -0.1291 -0.1761 -0.2194 -0.0538 -0.1157 -0.1088 -0.0850 -0.0919 -0.1138 -0.6366 -0.1978 -0.1422 -0.1228 -0.1192 -0.0296 -0.5559 -0.1794 -0.1097 -0.0952 -0.1558 -0.0917 -0.0823 -1.2217 -0.0730 -0.0789 -0.1076 -0.1098 -0.4154 -0.1605 -0.1421 -0.0926 -0.0952 -0.3471 -0.3118 -1.6043 -0.1009 -0.0875 -0.1029 -0.0962 -0.5025 -0.0852 -0.0670
S-80	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( 0 > s ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-80	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( 0 > s ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-80	-0.1707787662744522	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( 0 > s ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-80	-0.1707787662744522	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( 0 > s ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-80	-0.0978 -0.0380 -0.0541 -0.0454 -0.1001 -0.0348 -0.0276 -0.0860 -0.0802 -0.1220 -1.2345 -0.2473 -0.0275 -0.1924 -0.0449 -0.0884 -0.0876 -0.0485 -0.0671 -0.0976 -0.0670 -0.0889 -0.6370 -0.0834 -0.0608 -0.0877 -0.6808 -0.1503 -0.1031 -0.0435 -0.0931 -0.0686 -0.0382 -0.0881 -0.0811 -0.1319 -0.0413 -0.0617 -0.3758 -0.1760 -0.1052 -0.1265 -0.1089 -0.0857 -0.0813 -0.0891 -0.0711 -0.1181 -0.2487 -0.0894 -0.0508 -0.0831 -0.0689 -0.1244 -1.3751 -0.0915 -0.0841 -0.1063 -0.0991 -0.7719 -0.0676 -0.0902 -0.0976 -0.0927 -0.0970 -0.1044 -0.2345 -0.1075 -0.0810 -0.0875 -0.0979 -0.0759 -0.1098 -0.0905 -0.0977 -0.1409 -0.0997 -0.0710 -0.0939 -0.2443 -0.2008 -0.1087 -0.1923 -0.1159 -0.1458 -0.0964 -0.0936 -0.2365 -0.1108 -0.1216 -0.0747 -0.0838 -1.7469 -0.0882 -0.1234 -0.0510 -0.1220 -0.1160 -0.0629 -0.0823 -0.0830 -0.9607 -0.0776 -0.0912 -0.0682 -0.0919 -0.0685 -0.1062 -1.5764 -0.0910 -0.0894 -0.1092 -0.0687 -0.0904 -0.0897 -1.1197 -0.1849 -0.2333 -0.1089 -0.2811 -0.1109 -0.0919 -0.0909 -0.0909 -0.0926 -0.0896 -0.1107 -0.1950 -0.0782 -0.1044 -0.0749 -0.0942 -0.2624 -0.0924 -0.0750 -0.0751 -0.2821 -0.1369 -0.0671 -0.0842 -0.1006 -0.3270 -0.0790 -0.0814
S-75	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; nums.size () > i; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-75	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; nums.size () > i; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-75	-0.17811353504657745	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; nums.size () > i ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-75	-0.17811353504657745	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; nums.size () > i ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-75	-0.0991 -0.0377 -0.0547 -0.0448 -0.1006 -0.0344 -0.0279 -0.0860 -0.0811 -0.1219 -1.2385 -0.2324 -0.0279 -0.1950 -0.0434 -0.0879 -0.0870 -0.0489 -0.0660 -0.0973 -0.0680 -0.0890 -0.6844 -0.0886 -0.0603 -0.0894 -0.7107 -0.1496 -0.1030 -0.0434 -0.0955 -0.0683 -0.0377 -0.0873 -0.0821 -0.1291 -0.0430 -0.0615 -0.3913 -0.1624 -0.1071 -0.0889 -0.0906 -0.0807 -0.0921 -0.0839 -0.0783 -0.1433 -0.3394 -0.0882 -0.0468 -0.0829 -0.0698 -0.1275 -1.4061 -0.0923 -0.0856 -0.1064 -0.1025 -0.8587 -0.0658 -0.0907 -0.0994 -0.0924 -0.0967 -0.1059 -0.2481 -0.1084 -0.0544 -0.0875 -0.0997 -0.0812 -0.1128 -0.0908 -0.0974 -0.1341 -0.1000 -0.0726 -0.0947 -0.2491 -0.2035 -0.1085 -0.2042 -0.1166 -0.1708 -0.0982 -0.0942 -0.2247 -0.1117 -0.1295 -0.0694 -0.0828 -2.0746 -0.0717 -0.1179 -0.1095 -0.0650 -0.1452 -0.1140 -0.3494 -0.0820 -0.9284 -0.0783 -0.0934 -0.0668 -0.0938 -0.0713 -0.1040 -1.6189 -0.0911 -0.0898 -0.1097 -0.0710 -0.0917 -0.0922 -1.1457 -0.1880 -0.2434 -0.1019 -0.2883 -0.1132 -0.0944 -0.0919 -0.0909 -0.0925 -0.0875 -0.1140 -0.2004 -0.0765 -0.1054 -0.0775 -0.0949 -0.2769 -0.0912 -0.0756 -0.0766 -0.2812 -0.1380 -0.0679 -0.0843 -0.1027 -0.3352 -0.0786 -0.0803
S-35	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( 0 == max_sum ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-35	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( 0 == max_sum ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-35	-0.17197048664093018	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( 0 == max_sum ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-35	-0.17197048664093018	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( 0 == max_sum ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-35	-0.0973 -0.0378 -0.0530 -0.0454 -0.1002 -0.0346 -0.0277 -0.0860 -0.0795 -0.1218 -1.2352 -0.2333 -0.0271 -0.1979 -0.0451 -0.0882 -0.0870 -0.0483 -0.0691 -0.0969 -0.0658 -0.0902 -0.6134 -0.0796 -0.0607 -0.0885 -0.6731 -0.1527 -0.1037 -0.0433 -0.0974 -0.0693 -0.0383 -0.0880 -0.0813 -0.1298 -0.0424 -0.0613 -0.3948 -0.1754 -0.1070 -0.0936 -0.0917 -0.0840 -0.0918 -0.0843 -0.0777 -0.1417 -0.3260 -0.0889 -0.0465 -0.0840 -0.0697 -0.1236 -1.4159 -0.0922 -0.0856 -0.1063 -0.1025 -0.8181 -0.0650 -0.0906 -0.0988 -0.0924 -0.0951 -0.1115 -0.2507 -0.1088 -0.1331 -0.0898 -0.0477 -0.0899 -0.0872 -0.0884 -0.1034 -0.1409 -0.0992 -0.0740 -0.0998 -0.2367 -0.1995 -0.1096 -0.1880 -0.1164 -0.1135 -0.0943 -0.0933 -0.2284 -0.1102 -0.1250 -0.0740 -0.0844 -1.7679 -0.0883 -0.1359 -0.0494 -0.1218 -0.1177 -0.0627 -0.0822 -0.0830 -0.9648 -0.0770 -0.0904 -0.0677 -0.0905 -0.0731 -0.1045 -1.5741 -0.0911 -0.0882 -0.1093 -0.0697 -0.0888 -0.0937 -1.1351 -0.1855 -0.2355 -0.1099 -0.2816 -0.1101 -0.0912 -0.0915 -0.0909 -0.0926 -0.0882 -0.1104 -0.1967 -0.0783 -0.1046 -0.0762 -0.0948 -0.2531 -0.0917 -0.0752 -0.0756 -0.2944 -0.1339 -0.0673 -0.0848 -0.1034 -0.3297 -0.0784 -0.0803
S-108	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( 0 == i % 2 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
T-108	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( 0 == i % 2 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
H-108	-0.26417383551597595	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( 0 == i % 2 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
D-108	-0.26417383551597595	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( 0 == i % 2 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
P-108	-0.1034 -0.0438 -0.1051 -1.8574 -0.0368 -0.0888 -0.0237 -0.1078 -0.0870 -1.6068 -0.0673 -0.0846 -0.0896 -0.0930 -2.4148 -0.1793 -0.0969 -0.0710 -0.0789 -0.4030 -0.1316 -0.0957 -0.0660 -1.6198 -0.0818 -1.9148 -0.0590 -0.0306 -0.0916 -0.0730 -0.0699 -0.1460 -0.0546 -0.1332 -0.1156 -0.0880 -0.1177 -0.0648 -0.0909 -0.0715 -0.1158 -0.2522 -0.0958 -1.2810 -0.1103 -0.1193 -0.0694 -0.0919 -0.0893 -1.1487 -0.0923 -0.1060 -0.1597 -0.0870 -0.0759 -1.4683 -0.0901 -0.0798 -0.1281 -0.0825 -0.0830 -0.1348 -0.0348 -0.6374 -0.1805 -0.1398 -0.0901 -0.1070 -0.1303 -0.0953 -0.1374 -0.0682 -0.3606 -0.3017 -1.5230 -0.0895 -1.4634 -0.0901 -0.0430 -0.1162 -0.1182 -0.0345 -0.1403 -0.0999 -0.1545 -0.1189 -0.0639 -0.0893 -0.0889 -0.9416 -0.0928 -0.0934 -0.0967 -0.0957 -0.0807 -1.0154 -0.0814 -0.0685 -0.2131 -0.0788 -0.0934 -0.1423 -0.1258 -0.3419 -0.0985 -0.1333 -0.3015 -0.0586 -0.0891 -0.0887 -0.1132 -0.6464 -0.2030 -0.1457 -0.1202 -0.1141 -0.0297 -0.5719 -0.1685 -0.1086 -0.0959 -0.1455 -0.0902 -0.0782 -1.2883 -0.0747 -0.0812 -0.1094 -0.1090 -0.4304 -0.1580 -0.1453 -0.0950 -0.0943 -0.3525 -0.2839 -1.6208 -0.1003 -0.0875 -0.1014 -0.0986 -0.4631 -0.0852 -0.0666
S-390	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; numbers.length > i; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
T-390	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; numbers.length > i; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
H-390	-0.23575849831104279	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; numbers.length > i ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
D-390	-0.23575849831104279	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; numbers.length > i ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
P-390	-0.0914 -0.0551 -0.1223 -1.6227 -0.0507 -0.0281 -0.0859 -0.0607 -0.0920 -0.0311 -0.1144 -0.1112 -1.8825 -0.0481 -0.0856 -0.0811 -0.1183 -0.0924 -0.0907 -0.2478 -0.0927 -0.0605 -0.0923 -0.0452 -0.9625 -0.0700 -0.0457 -0.0789 -0.1945 -0.0891 -0.0191 -0.0873 -0.0518 -0.3614 -0.5011 -0.1094 -0.0952 -0.0764 -0.0825 -1.2960 -0.1416 -0.1033 -0.0801 -0.2289 -0.1271 -1.3154 -0.0737 -0.0888 -0.1478 -0.0751 -0.0898 -0.1487 -0.1184 -0.0614 -0.4972 -0.1962 -0.1635 -0.1519 -0.0717 -0.0829 -0.1056 -0.0758 -0.1413 -0.0587 -0.5734 -0.1628 -1.5787 -0.0772 -0.1283 -0.0806 -0.1067 -0.0473 -0.3493 -0.1402 -0.1260 -0.0535 -0.1234 -0.0941 -0.0809 -0.0818 -0.1391 -0.0455 -0.4049 -0.1367 -1.5184 -0.0883 -0.0919 -0.1725 -2.3231 -0.0722 -0.1189 -0.0599 -0.0778 -0.6142 -0.3578 -0.0931 -0.0735 -1.1538 -0.0864 -0.1105 -0.0817 -0.0812 -0.0879 -1.2711 -0.0826 -0.1017 -0.0892 -0.1021 -0.0886 -0.8702 -0.0661 -0.0722 -0.1461 -0.0786 -0.0905 -0.1151 -0.6735 -0.1811 -0.1827 -0.1380 -0.2372 -0.1143 -0.7299 -0.1389 -0.2441 -0.1009 -0.1403 -0.0959 -0.0814 -0.1012 -0.0944 -0.0685 -0.0572 -0.0953 -0.0978 -0.0830 -0.0926 -0.0772 -0.4192 -0.0823 -0.0784
S-320	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( min > numbers[i] ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
T-320	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( min > numbers[i] ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
H-320	-0.24997761845588684	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0 ; i < numbers.length ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( min > numbers[i] ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0 ; i < numbers.length ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
D-320	-0.24997761845588684	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0 ; i < numbers.length ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( min > numbers[i] ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0 ; i < numbers.length ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
P-320	-0.0912 -0.0548 -0.1217 -1.6467 -0.0501 -0.0284 -0.0859 -0.0616 -0.0920 -0.0310 -0.1146 -0.1115 -1.9041 -0.0503 -0.0862 -0.0804 -0.1212 -0.0882 -0.0896 -0.2339 -0.0926 -0.0645 -0.0931 -0.0451 -0.9042 -0.0710 -0.0442 -0.0791 -0.1938 -0.0890 -0.0200 -0.0874 -0.0522 -0.3556 -0.5062 -0.1095 -0.0979 -0.0768 -0.0849 -3.1035 -0.1196 -0.0808 -0.0561 -0.1286 -0.0674 -0.0706 -0.7373 -0.0799 -0.1699 -0.1827 -0.0796 -0.0905 -0.1486 -0.1170 -0.0631 -0.5486 -0.2266 -0.2024 -0.1277 -0.0716 -0.0820 -0.1034 -0.0724 -0.1373 -0.0572 -0.5302 -0.1637 -1.6170 -0.0741 -0.1226 -0.0887 -0.1062 -1.2326 -0.2165 -0.0685 -0.6042 -0.1327 -0.2039 -0.0884 -0.0797 -0.0851 -0.1370 -0.0436 -0.4341 -0.1289 -1.6158 -0.0853 -0.0853 -0.1393 -2.2313 -0.0708 -0.1173 -0.0625 -0.0790 -0.5688 -0.4319 -0.0931 -0.0849 -1.1713 -0.0765 -0.1086 -0.0756 -0.0864 -0.0991 -1.1219 -0.1524 -0.0831 -0.0572 -0.0741 -0.0887 -0.0770 -0.8971 -0.0795 -0.0983 -0.1764 -0.0779 -0.0855 -0.0852 -0.5851 -0.1815 -0.1714 -0.1242 -0.1755 -0.0713 -0.6313 -0.1322 -0.2245 -0.0907 -0.0903 -0.1002 -0.0532 -0.1007 -0.0707 -0.0700 -0.0588 -0.0935 -0.0967 -0.0747 -0.0858 -0.0677 -0.5095 -0.0798 -0.0780
S-288	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; numbers.length > i; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
T-288	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; numbers.length > i; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
H-288	-0.23575839400291443	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; numbers.length > i ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
D-288	-0.23575839400291443	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; numbers.length > i ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; numbers.length > i ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
P-288	-0.0914 -0.0551 -0.1223 -1.6227 -0.0507 -0.0281 -0.0859 -0.0607 -0.0920 -0.0311 -0.1144 -0.1112 -1.8825 -0.0481 -0.0856 -0.0811 -0.1183 -0.0924 -0.0907 -0.2478 -0.0927 -0.0605 -0.0923 -0.0452 -0.9625 -0.0700 -0.0457 -0.0789 -0.1945 -0.0891 -0.0191 -0.0873 -0.0518 -0.3614 -0.5011 -0.1094 -0.0952 -0.0764 -0.0825 -1.2960 -0.1416 -0.1033 -0.0801 -0.2289 -0.1271 -1.3154 -0.0737 -0.0888 -0.1478 -0.0751 -0.0898 -0.1487 -0.1184 -0.0614 -0.4972 -0.1962 -0.1635 -0.1519 -0.0717 -0.0829 -0.1056 -0.0758 -0.1413 -0.0587 -0.5734 -0.1628 -1.5787 -0.0772 -0.1283 -0.0806 -0.1067 -0.0473 -0.3493 -0.1402 -0.1260 -0.0535 -0.1234 -0.0941 -0.0809 -0.0818 -0.1391 -0.0455 -0.4049 -0.1367 -1.5184 -0.0883 -0.0919 -0.1725 -2.3231 -0.0722 -0.1189 -0.0599 -0.0778 -0.6142 -0.3578 -0.0931 -0.0735 -1.1538 -0.0864 -0.1105 -0.0817 -0.0812 -0.0879 -1.2711 -0.0826 -0.1017 -0.0892 -0.1021 -0.0886 -0.8702 -0.0661 -0.0722 -0.1461 -0.0786 -0.0905 -0.1151 -0.6735 -0.1811 -0.1827 -0.1380 -0.2372 -0.1143 -0.7299 -0.1389 -0.2441 -0.1009 -0.1403 -0.0959 -0.0814 -0.1012 -0.0944 -0.0685 -0.0572 -0.0953 -0.0978 -0.0830 -0.0926 -0.0772 -0.4192 -0.0823 -0.0783
S-107	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( max < numbers[i] ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
T-107	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( max < numbers[i] ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
H-107	-0.2397160828113556	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0 ; i < numbers.length ; i += 1 ) { if ( max < numbers[i] ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0 ; i < numbers.length ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
D-107	-0.2397160828113556	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0 ; i < numbers.length ; i += 1 ) { if ( max < numbers[i] ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0 ; i < numbers.length ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
P-107	-0.0914 -0.0549 -0.1228 -1.6734 -0.0494 -0.0281 -0.0858 -0.0620 -0.0921 -0.0309 -0.1155 -0.1116 -1.9483 -0.0506 -0.0853 -0.0805 -0.1215 -0.0869 -0.0920 -0.2377 -0.0926 -0.0639 -0.0926 -0.0453 -0.9234 -0.0698 -0.0421 -0.0798 -0.1834 -0.0897 -0.0200 -0.0877 -0.0532 -0.3612 -0.5472 -0.1101 -0.0971 -0.0766 -0.0855 -3.0401 -0.1210 -0.0813 -0.0624 -0.1144 -0.0695 -0.0690 -0.6937 -0.0778 -0.1532 -0.1702 -0.0784 -0.0908 -0.1513 -0.1178 -0.0794 -0.0972 -0.0562 -0.5461 -0.1967 -0.2209 -0.0904 -0.0984 -0.0746 -0.1523 -0.0603 -0.5290 -0.1695 -1.7001 -0.0756 -0.1306 -0.0801 -0.1044 -0.0709 -0.4496 -0.1409 -0.1312 -0.1071 -0.1248 -0.0989 -0.0794 -0.0725 -0.1380 -0.0442 -0.4242 -0.1314 -1.5550 -0.0891 -0.0903 -0.1439 -2.2576 -0.0697 -0.1155 -0.0614 -0.0795 -0.5940 -0.4295 -0.0931 -0.0850 -1.1902 -0.0778 -0.1093 -0.0754 -0.0863 -0.1002 -1.0282 -0.1477 -0.0845 -0.0604 -0.0742 -0.0890 -0.0768 -0.8019 -0.0794 -0.0907 -0.1645 -0.0777 -0.0860 -0.0862 -0.6022 -0.1864 -0.1762 -0.1264 -0.1685 -0.0756 -0.6936 -0.1340 -0.2309 -0.0909 -0.0823 -0.0983 -0.0553 -0.1036 -0.0618 -0.0632 -0.0586 -0.0921 -0.0973 -0.0770 -0.0865 -0.0682 -0.5361 -0.0795 -0.0768
S-132	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; l1.length > i; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-132	public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; for ( int i = 0; l1.length > i; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-132	-0.2702256143093109	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; l1.length > i ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
D-132	-0.2702256143093109	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; l1.length > i ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
P-132	-0.0899 -0.0446 -0.1216 -1.8160 -0.0442 -0.1106 -0.0922 -1.5626 -0.0596 -0.2913 -0.0747 -1.2673 -0.0602 -0.0529 -0.0773 -0.0932 -2.3608 -0.2911 -0.0483 -0.1617 -0.0627 -0.0946 -0.0544 -1.2656 -0.2254 -0.0468 -0.1466 -0.0685 -0.0911 -0.2615 -0.1139 -0.0623 -0.0770 -0.0843 -0.9354 -0.1456 -0.0472 -0.0590 -0.1508 -0.1045 -0.8403 -0.0686 -0.0805 -0.1781 -0.0783 -0.0838 -0.1115 -0.1090 -0.0685 -0.0842 -0.0943 -0.6989 -0.1255 -0.0583 -0.0714 -0.0263 -0.0496 -0.7394 -0.0707 -0.0946 -0.1450 -0.0783 -0.0935 -0.1408 -0.1168 -0.0745 -0.6581 -0.3096 -0.2572 -0.2119 -0.0393 -0.4032 -0.1133 -0.1723 -0.0873 -0.1864 -0.1318 -0.2047 -0.1150 -0.0553 -0.4201 -0.1473 -0.2587 -0.1272 -0.1032 -0.1275 -0.0916 -0.0995 -2.5613 -0.0660 -0.0915 -0.0620 -0.0702 -0.4525 -0.0323 -0.1013 -0.1083 -0.0707 -0.2482 -0.0722 -0.0634 -0.1061 -1.4662 -0.1077 -0.1131 -1.5923 -0.0789 -0.0619 -0.0880 -0.0930 -0.1011 -0.0805 -0.7311 -0.2702 -0.1862 -0.1055 -0.1001 -0.9018 -0.0448 -0.0700 -1.7923 -0.1564 -0.0743 -1.5954 -0.0873 -0.0503 -0.1185 -0.0740 -0.0976 -0.0938 -0.0863 -0.0693 -0.2125 -0.0832 -0.0724
S-196	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l2[j] == l1[i] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-196	public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l2[j] == l1[i] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-196	-0.2743832767009735	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l2[j] == l1[i] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
D-196	-0.2743832767009735	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l2[j] == l1[i] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
P-196	-0.0902 -0.0446 -0.1229 -1.8274 -0.0441 -0.1108 -0.0945 -1.5777 -0.0579 -0.3719 -0.0763 -1.2864 -0.0601 -0.0557 -0.0774 -0.0925 -2.3767 -0.2822 -0.0492 -0.1624 -0.0633 -0.0953 -0.0536 -1.3019 -0.2260 -0.0471 -0.1528 -0.0680 -0.0911 -0.2745 -0.1130 -0.0619 -0.0782 -0.0859 -0.9900 -0.0765 -0.0767 -0.0958 -0.0415 -0.0658 -0.6013 -0.0685 -0.0843 -0.1784 -0.0785 -0.0824 -0.1250 -0.1074 -0.0711 -0.0898 -0.0947 -0.7057 -0.1050 -0.0546 -0.0653 -0.0238 -0.0638 -0.8083 -0.0690 -0.0958 -0.1351 -0.0794 -0.0949 -0.1438 -0.1157 -0.0739 -0.5544 -0.3226 -0.1754 -0.1720 -0.0389 -0.5258 -0.2450 -0.3690 -0.0903 -0.1952 -0.1348 -0.2048 -0.1145 -0.0570 -0.4589 -0.3016 -0.2669 -0.1226 -0.1003 -0.1205 -0.0889 -0.0985 -2.6130 -0.0665 -0.0915 -0.0617 -0.0706 -0.4679 -0.0340 -0.1021 -0.1154 -0.0717 -0.2549 -0.0732 -0.0651 -0.1061 -1.5365 -0.1119 -0.1131 -1.6167 -0.0795 -0.0625 -0.0854 -0.0932 -0.1019 -0.0808 -0.7499 -0.2755 -0.1896 -0.1057 -0.1013 -0.8697 -0.0458 -0.0696 -1.7529 -0.1588 -0.0751 -1.6343 -0.0872 -0.0505 -0.1185 -0.0739 -0.0979 -0.0938 -0.0864 -0.0693 -0.2106 -0.0837 -0.0730
S-138	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; l2.length > j; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-138	public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; l2.length > j; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-138	-0.2706693112850189	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; l2.length > j; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
D-138	-0.2706693112850189	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; l2.length > j; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
P-138	-0.0900 -0.0449 -0.1216 -1.8088 -0.0445 -0.1107 -0.0928 -1.5618 -0.0589 -0.3380 -0.0747 -1.2415 -0.0601 -0.0513 -0.0765 -0.0930 -2.3770 -0.2874 -0.0488 -0.1609 -0.0646 -0.0953 -0.0540 -1.2762 -0.2199 -0.0465 -0.1472 -0.0686 -0.0911 -0.2782 -0.1138 -0.0613 -0.0785 -0.0852 -0.9688 -0.0825 -0.0661 -0.0924 -0.0435 -0.0576 -0.5413 -0.0711 -0.0815 -0.1844 -0.0784 -0.0818 -0.1227 -0.1092 -0.0702 -0.0846 -0.0984 -0.6378 -0.1406 -0.0270 -0.0537 -0.0861 -0.0930 -1.1018 -0.0738 -0.0917 -0.1360 -0.0775 -0.0935 -0.1544 -0.1176 -0.0725 -0.6881 -0.2854 -0.2541 -0.2057 -0.0428 -0.4329 -0.1105 -0.1768 -0.0873 -0.1951 -0.1338 -0.2047 -0.1150 -0.0556 -0.4227 -0.1456 -0.2508 -0.1246 -0.1023 -0.1325 -0.0914 -0.0990 -2.5667 -0.0665 -0.0914 -0.0619 -0.0701 -0.4585 -0.0332 -0.1020 -0.1125 -0.0717 -0.2512 -0.0735 -0.0646 -0.1060 -1.4725 -0.1112 -0.1138 -1.6152 -0.0794 -0.0615 -0.0874 -0.0930 -0.1019 -0.0816 -0.7477 -0.2742 -0.1859 -0.1054 -0.1002 -0.8840 -0.0462 -0.0714 -1.7164 -0.1549 -0.0739 -1.6173 -0.0873 -0.0503 -0.1185 -0.0740 -0.0981 -0.0938 -0.0863 -0.0693 -0.2101 -0.0831 -0.0729
S-268	public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while ( 0 < number ) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase () ; }
T-268	public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while ( 0 < number ) { int div = ( int ) ( number / num[i] ) ; while ( div > 0 ) { result += sym[i]; div -= 1; } number %= num[i]; i -= 1; } return result.toLowerCase () ; }
H-268	-0.32949793338775635	public static java.lang.String int_to_mini_roman ( int number ) { java.lang.String [] num = new java.lang.String [] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; java.lang.String [] sym = new java.lang.String [] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; java.lang.String result = new java.lang.String [ num.length ] ; while ( 0 < number ) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase () ; }
D-268	-0.32949793338775635	public static java.lang.String int_to_mini_roman ( int number ) { java.lang.String [] num = new java.lang.String [] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; java.lang.String [] sym = new java.lang.String [] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; java.lang.String result = new java.lang.String [ num.length ] ; while ( 0 < number ) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase () ; }
P-268	-0.0955 -0.0515 -5.0788 -0.0893 -0.0477 -0.0982 -0.0841 -0.1113 -0.1113 -0.0621 -0.0885 -0.0182 -0.1002 -0.0067 -0.0383 -0.1320 -0.1956 -0.0683 -0.0892 -0.0912 -2.8496 -0.0602 -0.0401 -0.0911 -0.1018 -1.7185 -0.0640 -0.0779 -0.0746 -0.4012 -0.0665 -0.0695 -0.0927 -0.0268 -0.7752 -0.0464 -1.0014 -0.1551 -0.0893 -0.2624 -0.1241 -0.0837 -0.0491 -0.0746 -0.1631 -0.1993 -0.0410 -0.0301 -0.0521 -0.1635 -0.0278 -0.3409 -1.0562 -0.0711 -0.0394 -0.0937 -0.0863 -0.2918 -0.1100 -0.0805 -0.0698 -0.0882 -0.0820 -0.0504 -0.0904 -0.0161 -0.5774 -0.0502 -0.0872 -0.0475 -1.3790 -0.0984 -0.0137 -1.1632 -0.1132 -0.0384 -1.2077 -0.1153 -0.0161 -1.2998 -0.1027 -0.0376 -1.0831 -0.1064 -0.0421 -0.0608 -1.3593 -0.1036 -0.2458 -1.5976 -0.1032 -0.0346 -0.0470 -1.3212 -0.1049 -0.0834 -1.4943 -0.1053 -0.0462 -1.4848 -0.0922 -0.0438 -1.4215 -0.0980 -0.0159 -1.3573 -0.0917 -0.0536 -0.0630 -0.5066 -0.5978 -0.1108 -0.0991 -0.0549 -1.5745 -0.9245 -0.0702 -0.0331 -0.0920 -0.2046 -0.2483 -0.0864 -2.3116 -0.0487 -0.0926 -0.0367 -0.1054 -0.0294 -1.5377 -0.1626 -0.0715 -0.0228 -0.1635 -0.4769 -0.1018 -0.1219 -0.1609 -0.1101 -0.0762 -0.0947 -0.0866 -0.0859 -0.0894 -0.0938 -0.2766 -0.1391 -1.6720 -0.1131 -0.1139 -0.0237 -0.0350 -0.6902 -0.1202 -1.6280 -0.0643 -0.0091 -0.5603 -0.0791 -0.1058 -0.0625 -0.1216 -0.5541 -0.0826 -0.0840 -0.0817 -0.0903
S-398	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; n + 1 > i; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
T-398	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; n + 1 > i; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size () - 1 ) ; }
H-398	-0.1711399257183075	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; n + 1 > i ; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-398	-0.1711399257183075	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; n + 1 > i ; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-398	-0.0870 -0.0491 -0.1240 -0.0180 -0.0374 -0.1112 -0.0943 -0.0665 -0.0822 -0.0893 -1.7522 -0.3340 -0.0582 -0.1526 -0.0797 -0.0887 -0.0643 -1.3819 -0.3168 -0.0526 -0.1336 -0.0674 -0.0793 -0.1906 -0.1204 -0.1207 -0.0975 -0.1692 -0.1028 -0.0886 -0.1025 -0.0983 -0.1162 -0.1002 -0.2731 -0.0953 -0.0874 -0.1061 -0.0963 -0.1052 -0.0994 -0.7947 -0.0849 -0.0904 -0.1032 -0.0998 -0.0954 -0.0965 -0.1700 -0.0910 -0.0898 -0.2949 -0.1067 -0.0788 -0.1019 -0.0518 -0.0858 -0.0801 -0.1098 -0.1198 -0.1345 -0.1010 -0.0902 -0.0876 -0.0870 -0.2914 -0.1103 -0.0711 -0.0695 -0.0868 -1.2276 -0.2891 -0.2844 -0.5463 -0.2384 -0.1048 -0.0861 -0.2432 -0.1052 -0.0815 -0.1960 -0.0806 -0.0879 -0.1096 -0.1047 -0.1426 -0.1049 -0.1209 -0.0931 -0.1153 -0.1119 -0.1761 -0.0884 -0.1430 -0.1869 -0.0913 -0.1153 -0.1134 -0.2122 -0.0877 -0.8854 -0.0950 -0.0924 -0.1090 -0.1142 -0.0984 -0.0836 -0.9541 -0.0942 -0.0941 -0.1171 -0.1115 -0.0476 -0.0843 -0.0928 -0.0834 -0.0899 -0.1277 -0.1060 -0.0995 -0.1257 -0.1039 -0.1109 -0.1069 -0.0874 -0.0684 -0.8746 -0.1266 -0.0933 -0.1030 -0.0772 -0.0791
S-366	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < 1 + n; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
T-366	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < 1 + n; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size () - 1 ) ; }
H-366	-0.17127640545368195	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 + n ; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-366	-0.17127640545368195	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 + n ; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-366	-0.0868 -0.0487 -0.1231 -0.0181 -0.0371 -0.1102 -0.0933 -0.0630 -0.0837 -0.0886 -1.7601 -0.3179 -0.0579 -0.1510 -0.0795 -0.0893 -0.0648 -1.3851 -0.3045 -0.0527 -0.1331 -0.0674 -0.0793 -0.1879 -0.1205 -0.1200 -0.0975 -0.1725 -0.1027 -0.0893 -0.1007 -0.0983 -0.1153 -0.1001 -0.2811 -0.0946 -0.0880 -0.1050 -0.0964 -0.1052 -0.0994 -0.8511 -0.0843 -0.0910 -0.1031 -0.0998 -0.0949 -0.0966 -0.1664 -0.0919 -0.0903 -0.2942 -0.1068 -0.0753 -0.1186 -0.0560 -0.0861 -0.0797 -0.1061 -0.1200 -0.1303 -0.1008 -0.0924 -0.0881 -0.0876 -0.2858 -0.1089 -0.0738 -0.0722 -0.0911 -1.0928 -0.7103 -0.1084 -0.2329 -0.0713 -0.1720 -0.2084 -0.0800 -0.0871 -0.1091 -0.1045 -0.1434 -0.1048 -0.1192 -0.0933 -0.1155 -0.1120 -0.2256 -0.0897 -0.1360 -0.1936 -0.0922 -0.1166 -0.1137 -0.2395 -0.0871 -0.9446 -0.0983 -0.0925 -0.1089 -0.1137 -0.1035 -0.0823 -1.0238 -0.0954 -0.0942 -0.1164 -0.1117 -0.0472 -0.0836 -0.0924 -0.0823 -0.0881 -0.1164 -0.1012 -0.0983 -0.1243 -0.1034 -0.0964 -0.1045 -0.0833 -0.0683 -0.8030 -0.1237 -0.0910 -0.1026 -0.0779 -0.0781
S-352	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( ( ( curr - 'a' ) % 2 ) == 0 && Character.isUpperCase ( curr ) ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
T-352	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( ( ( curr - 'a' ) % 2 ) == 1 && Character.isLowerCase ( curr ) ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
H-352	-0.21056196093559265	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( ( ( curr - 'a' ) % 2 ) == 0 && Character.isUpperCase ( curr ) ) count++; } return txt.split ( " " ) ; } }
D-352	-0.21056196093559265	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( ( ( curr - 'a' ) % 2 ) == 0 && Character.isUpperCase ( curr ) ) count++; } return txt.split ( " " ) ; } }
P-352	-0.0890 -0.0518 -0.8435 -1.8636 -0.0397 -0.0946 -0.0316 -0.1102 -0.7493 -0.0322 -0.0890 -0.0892 -0.1936 -0.1140 -0.0526 -0.1557 -0.7979 -0.1074 -0.1003 -0.0819 -0.0954 -0.0885 -0.0999 -0.0770 -0.0349 -0.1011 -0.2133 -0.1217 -0.0763 -0.0891 -0.0941 -0.0884 -0.0804 -0.0992 -0.1158 -0.1057 -0.0372 -0.1260 -0.5981 -0.1090 -0.0227 -0.0871 -0.0920 -0.0827 -0.0675 -0.0378 -0.1009 -0.1655 -0.1128 -0.0213 -0.0871 -0.0947 -0.0829 -0.0813 -0.1195 -0.1609 -0.0445 -0.0867 -0.8503 -0.1241 -0.1055 -0.0768 -0.0784 -0.0749 -0.6126 -0.0893 -0.0887 -0.1081 -0.1007 -0.1008 -0.0682 -0.0855 -0.0818 -0.7680 -0.0760 -0.0760 -0.1232 -0.0679 -0.0834 -0.0275 -0.1042 -0.6576 -0.1040 -0.0922 -0.0867 -0.0842 -0.1353 -0.1134 -0.3063 -0.4745 -0.0660 -0.1303 -0.0503 -0.0535 -0.0604 -0.0961 -0.0990 -0.0470 -0.0847 -0.1012 -0.1091 -1.4041 -0.2118 -0.0882 -0.0791 -0.0287 -0.1221 -0.0592 -0.0922 -0.0993 -0.0839 -0.3164 -0.0966 -2.5159 -1.1668 -0.0937 -0.3533 -0.1484 -2.0271 -0.1146 -0.1199 -0.1898 -0.1082 -0.1294 -0.0615
S-289	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; txt.length () > i; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
T-289	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; txt.length () > i; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
H-289	-0.21016696095466614	public static String[] split_words ( String txt ) { if ( txt. contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt. contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; txt.length () > i ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } } }
D-289	-0.21016696095466614	public static String[] split_words ( String txt ) { if ( txt. contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt. contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; txt.length () > i ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } } }
P-289	-0.0899 -0.0526 -0.8437 -1.8570 -0.0396 -0.0951 -0.0312 -0.1099 -0.7338 -0.0317 -0.0889 -0.0891 -0.1911 -0.1138 -0.0510 -0.1542 -3.0798 -0.1176 -0.0981 -0.0853 -0.1028 -0.0914 -0.1070 -0.0786 -0.0343 -0.1003 -0.2567 -0.1258 -0.0743 -0.0863 -0.0915 -0.0884 -0.0803 -0.0926 -0.1111 -0.1061 -0.0355 -0.1357 -0.9775 -0.1108 -0.0171 -0.0895 -0.0960 -0.0827 -0.0670 -0.0386 -0.1010 -0.1967 -0.1107 -0.0199 -0.0852 -0.0961 -0.0824 -0.0766 -0.1258 -0.1460 -0.0414 -0.0889 -0.6303 -0.1240 -0.1053 -0.0741 -0.0758 -0.0749 -0.5607 -0.1125 -0.1201 -0.0967 -0.0646 -0.1385 -0.0938 -0.5731 -0.0784 -0.4599 -0.0727 -0.0776 -0.1289 -0.0697 -0.0812 -0.0257 -0.1012 -0.6362 -0.1016 -0.0829 -0.0842 -0.0821 -0.0936 -0.1077 -0.2622 -0.0907 -0.0750 -0.0339 -0.1095 -0.0589 -0.0832 -0.5153 -0.1132 -0.1121 -0.0608 -0.1132 -0.0361 -0.0390 -0.0504 -0.0947 -0.1110 -0.0483 -0.0895 -0.2717 -0.1031 -0.0863 -0.0719 -0.1588 -0.0789 -0.2471 -1.8356 -0.0589 -0.0798 -0.1415 -0.4967 -0.0938 -1.0206 -0.1121 -0.0729 -0.0909 -0.6148 -0.0757 -0.0637 -1.3814 -0.0768 -0.0978 -0.7113 -0.0730
S-130	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && 0 == ( ( curr - 'a' ) % 2 ) ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
T-130	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && 1 == ( ( curr - 'a' ) % 2 ) ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
H-130	-0.21165190637111664	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && 0 == ( ( curr - 'a' ) % 2 ) ) count++; } String[] result = { Integer.toString ( count ) }; return result ; } } }
D-130	-0.21165190637111664	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && 0 == ( ( curr - 'a' ) % 2 ) ) count++; } String[] result = { Integer.toString ( count ) }; return result ; } } }
P-130	-0.0886 -0.0526 -0.8482 -1.8540 -0.0399 -0.0951 -0.0313 -0.1102 -0.7502 -0.0317 -0.0890 -0.0892 -0.1922 -0.1139 -0.0522 -0.1541 -0.7837 -0.1066 -0.1005 -0.0823 -0.0953 -0.0884 -0.0972 -0.0776 -0.0355 -0.1010 -0.2126 -0.1218 -0.0762 -0.0882 -0.0942 -0.0884 -0.0809 -0.1012 -0.1159 -0.1057 -0.0367 -0.1249 -0.5847 -0.1091 -0.0227 -0.0870 -0.0926 -0.0830 -0.0686 -0.0382 -0.1008 -0.1653 -0.1129 -0.0212 -0.0870 -0.0955 -0.0828 -0.0827 -0.1205 -0.1610 -0.0440 -0.0874 -0.8301 -0.1240 -0.1053 -0.0767 -0.0777 -0.0759 -0.6155 -0.0885 -0.0870 -0.1122 -0.1007 -0.1023 -0.0677 -0.0853 -0.0817 -0.7847 -0.0762 -0.0763 -0.1355 -0.0664 -0.0820 -0.0271 -0.1034 -0.6471 -0.1023 -0.0899 -0.0871 -0.0838 -0.1438 -0.1129 -0.4742 -0.0908 -0.0749 -0.0327 -0.1141 -0.0614 -0.0862 -1.1231 -0.2746 -0.1577 -0.1029 -0.1592 -0.0639 -0.1632 -0.0467 -0.0489 -0.0617 -0.0934 -0.0832 -0.0786 -0.0911 -0.0928 -0.1118 -0.2931 -0.0930 -0.8364 -2.1545 -0.0611 -0.0887 -0.2546 -0.7528 -0.0982 -1.0775 -0.1199 -0.0867 -0.0956 -1.2182 -0.0830 -0.0728 -1.0198 -0.0788 -0.0958 -0.6894 -0.0778
S-412	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 1 ) + result.get ( 0 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
T-412	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 1 ) + result.get ( 0 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size () - 1 ) ; }
H-412	-0.1775166392326355	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 1 ) + result.get ( 0 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-412	-0.1775166392326355	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 1 ) + result.get ( 0 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-412	-0.0863 -0.0491 -0.1237 -0.0186 -0.0377 -0.1102 -0.0936 -0.0671 -0.0828 -0.0893 -1.7493 -0.3197 -0.0584 -0.1517 -0.0796 -0.0886 -0.0642 -1.3847 -0.3082 -0.0527 -0.1328 -0.0669 -0.0794 -0.1869 -0.1210 -0.1186 -0.0976 -0.2238 -0.1034 -0.0893 -0.1023 -0.0984 -0.1153 -0.1002 -0.2963 -0.0936 -0.0875 -0.1067 -0.0964 -0.1045 -0.1003 -0.6977 -0.0843 -0.0911 -0.1036 -0.0999 -0.0948 -0.0965 -0.1826 -0.0903 -0.0896 -0.2806 -0.1062 -0.0805 -0.1203 -0.0544 -0.0863 -0.0787 -0.1062 -0.1203 -0.1321 -0.1007 -0.0935 -0.0872 -0.0878 -0.2978 -0.1083 -0.0739 -0.0713 -0.0896 -1.1455 -0.4036 -0.0864 -0.1589 -0.1314 -1.2471 -0.0695 -0.0699 -0.1757 -0.0859 -0.0858 -0.1160 -0.1027 -0.1398 -0.1045 -0.1174 -0.0928 -0.1067 -0.1104 -0.7354 -0.0948 -0.1084 -0.1478 -0.0945 -0.1176 -0.1138 -0.1292 -0.0905 -0.9386 -0.1048 -0.0918 -0.1096 -0.1102 -0.1245 -0.0837 -0.7059 -0.0988 -0.0941 -0.1191 -0.1116 -0.0583 -0.0843 -0.0920 -0.0818 -0.0794 -0.1253 -0.1037 -0.1007 -0.1206 -0.1051 -0.1164 -0.1062 -0.0865 -0.0692 -1.0597 -0.1202 -0.0933 -0.1024 -0.0766 -0.0782
S-395	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 2 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
T-395	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 2 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size () - 1 ) ; }
H-395	-0.17658844590187073	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 2 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-395	-0.17658844590187073	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 2 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-395	-0.0864 -0.0490 -0.1239 -0.0186 -0.0377 -0.1103 -0.0937 -0.0671 -0.0828 -0.0893 -1.7493 -0.3196 -0.0580 -0.1518 -0.0797 -0.0886 -0.0647 -1.3851 -0.3083 -0.0523 -0.1329 -0.0674 -0.0794 -0.1819 -0.1206 -0.1176 -0.0976 -0.2188 -0.1030 -0.0885 -0.1011 -0.0991 -0.1135 -0.1002 -0.2702 -0.0945 -0.0878 -0.1089 -0.0964 -0.1022 -0.0995 -0.6610 -0.0874 -0.0898 -0.1028 -0.0998 -0.0920 -0.0969 -0.1748 -0.0921 -0.0897 -0.2941 -0.1070 -0.0804 -0.1216 -0.0547 -0.0869 -0.0808 -0.1070 -0.1211 -0.1312 -0.1006 -0.0925 -0.0873 -0.0877 -0.2983 -0.1081 -0.0735 -0.0712 -0.0903 -1.1080 -0.3674 -0.0860 -0.1615 -0.1344 -1.2176 -0.0695 -0.0720 -0.1848 -0.0861 -0.0858 -0.1182 -0.1026 -0.1422 -0.1046 -0.1241 -0.0926 -0.1046 -0.1115 -0.2728 -0.0904 -0.1117 -0.1446 -0.0929 -0.1203 -0.1126 -0.1500 -0.0919 -0.8923 -0.1077 -0.0926 -0.1038 -0.1106 -0.2130 -0.0859 -1.0890 -0.1030 -0.0952 -0.1249 -0.1114 -0.0698 -0.0837 -0.0928 -0.0820 -0.0807 -0.1268 -0.1044 -0.1009 -0.1199 -0.1042 -0.1195 -0.1071 -0.0866 -0.0692 -1.0705 -0.1186 -0.0927 -0.1041 -0.0767 -0.0782
S-205	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( 4 > n ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
T-205	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( 4 > n ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size () - 1 ) ; }
H-205	-0.17074216902256012	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( 4 > n ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-205	-0.17074216902256012	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( 4 > n ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-205	-0.0862 -0.0493 -0.1255 -0.0186 -0.0387 -0.1113 -0.0950 -0.0700 -0.0835 -0.0896 -1.7153 -0.3296 -0.0588 -0.1498 -0.0797 -0.0886 -0.0643 -1.3768 -0.3174 -0.0531 -0.1289 -0.0674 -0.0793 -0.1811 -0.1216 -0.1190 -0.0976 -0.1786 -0.1030 -0.0887 -0.1025 -0.0991 -0.1162 -0.1002 -0.2848 -0.0948 -0.0874 -0.1067 -0.0964 -0.1060 -0.0995 -0.8970 -0.0842 -0.0900 -0.1099 -0.0997 -0.0968 -0.0965 -0.1746 -0.0918 -0.0897 -0.3151 -0.1028 -0.1010 -0.0958 -0.0769 -0.0870 -0.0837 -0.1183 -0.1149 -0.1259 -0.1007 -0.1121 -0.0868 -0.0895 -0.2715 -0.1094 -0.0755 -0.0728 -0.0889 -1.0150 -0.7201 -0.0800 -0.1550 -0.1305 -0.8837 -0.0675 -0.0746 -0.1899 -0.0852 -0.0854 -0.1120 -0.1027 -0.1357 -0.1046 -0.1170 -0.0943 -0.1089 -0.1105 -0.2023 -0.0897 -0.1214 -0.1704 -0.0918 -0.1086 -0.1135 -0.2081 -0.0889 -0.7905 -0.0988 -0.0921 -0.1052 -0.1125 -0.1059 -0.0837 -0.7851 -0.0968 -0.0936 -0.1133 -0.1107 -0.0470 -0.0838 -0.0928 -0.0819 -0.0735 -0.1054 -0.0956 -0.0966 -0.1162 -0.1017 -0.0866 -0.1004 -0.0769 -0.0673 -0.8384 -0.1128 -0.0898 -0.1006 -0.0769 -0.0772
S-0	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 3 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) ) ; } return result.get ( result.size () - 1 ) ; }
T-0	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 3 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size () - 1 ) ; }
H-0	-0.17432063817977905	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 3 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-0	-0.17432063817977905	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4 ; i < n ; i += 1 ) { result.add ( result.get ( 3 ) + result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-0	-0.0863 -0.0490 -0.1237 -0.0186 -0.0377 -0.1102 -0.0944 -0.0671 -0.0828 -0.0894 -1.7526 -0.3196 -0.0584 -0.1517 -0.0796 -0.0893 -0.0647 -1.3839 -0.3060 -0.0527 -0.1363 -0.0674 -0.0795 -0.1862 -0.1215 -0.1179 -0.0976 -0.2340 -0.1041 -0.0892 -0.1032 -0.0991 -0.1155 -0.1002 -0.2781 -0.0946 -0.0874 -0.1067 -0.0972 -0.1059 -0.0995 -0.7317 -0.0839 -0.0889 -0.1052 -0.1000 -0.0941 -0.0965 -0.1755 -0.0909 -0.0895 -0.2668 -0.1063 -0.0800 -0.1206 -0.0545 -0.0869 -0.0778 -0.1055 -0.1203 -0.1284 -0.1007 -0.0907 -0.0873 -0.0878 -0.2998 -0.1074 -0.0740 -0.0719 -0.0903 -1.1130 -0.3901 -0.0871 -0.1628 -0.1315 -1.2308 -0.0708 -0.0714 -0.1887 -0.0854 -0.0854 -0.1171 -0.1027 -0.1395 -0.1040 -0.1251 -0.0939 -0.1081 -0.1143 -0.1101 -0.0946 -0.1138 -0.1429 -0.0929 -0.1193 -0.1144 -0.1433 -0.0892 -0.6308 -0.1020 -0.0929 -0.1040 -0.1087 -0.1863 -0.0865 -1.0717 -0.0958 -0.0950 -0.1237 -0.1043 -0.1351 -0.0813 -0.0921 -0.0834 -0.0800 -0.1282 -0.1036 -0.1007 -0.1206 -0.1042 -0.1157 -0.1067 -0.0880 -0.0691 -1.0870 -0.1189 -0.0933 -0.1033 -0.0760 -0.0782
S-218	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-218	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-218	-0.19333083927631378	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-218	-0.19333083927631378	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-218	-0.0996 -0.0482 -0.1245 -0.0176 -0.0905 -0.0691 -0.1209 -0.8170 -0.0868 -0.0840 -0.0850 -0.1767 -0.0870 -0.0808 -0.6736 -0.1465 -2.3318 -0.0621 -0.0706 -0.0523 -0.0779 -0.0575 -0.1574 -0.0609 -0.0462 -0.0692 -0.0821 -0.2192 -0.1099 -0.0871 -0.0863 -0.0749 -0.0760 -0.0903 -0.0695 -0.0927 -0.1008 -0.1356 -0.1203 -0.2530 -0.1482 -0.0688 -0.1008 -0.0927 -0.1451 -0.1742 -0.1506 -0.0690 -0.1134 -0.0895 -0.1573 -0.1626 -0.1604 -0.0830 -0.0574 -0.1257 -0.1942 -0.1561 -0.1604 -0.1008 -0.0493 -0.1207 -0.1439 -0.1487 -0.1423 -0.0751 -0.0653 -0.0962 -0.1449 -0.1562 -0.1310 -0.0915 -0.0959 -0.1092 -0.1248 -0.1526 -0.1598 -0.0805 -0.0865 -0.1001 -0.1485 -1.4901 -0.0717 -0.1180 -0.3351 -0.1561 -0.2591 -0.1720 -0.1388 -0.0886 -0.0559 -0.1196 -0.1966 -0.1707 -0.1136 -0.0988 -0.0627 -0.1203 -0.0825 -0.1762 -0.1050 -2.3604 -0.1579 -0.2155 -0.3626 -0.1154 -0.2221 -0.1102 -0.0795 -1.4254 -0.2278 -0.1011 -0.0717 -0.0834 -0.0591 -0.3745 -1.0352 -0.1932 -0.0973 -0.0604 -0.0919 -0.0936 -0.0964 -0.1018 -0.4352 -0.1211 -0.0883 -0.0774 -0.2505 -0.0892 -0.0723
S-338	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-338	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-338	-0.1818675696849823	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-338	-0.1818675696849823	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-338	-0.0986 -0.0482 -0.1235 -0.0176 -0.0904 -0.0696 -0.1210 -0.8168 -0.0861 -0.0840 -0.0850 -0.1755 -0.0870 -0.0803 -0.6767 -0.1452 -2.3222 -0.0626 -0.0706 -0.0520 -0.0779 -0.0571 -0.1572 -0.0606 -0.0459 -0.0692 -0.0820 -0.2202 -0.1099 -0.0871 -0.0863 -0.0742 -0.0766 -0.0903 -0.0696 -0.0927 -0.1017 -0.1364 -0.1211 -0.2585 -0.1497 -0.0693 -0.0841 -0.1051 -0.1230 -0.1753 -0.1578 -0.0788 -0.1077 -0.0915 -0.1649 -0.1415 -0.1232 -0.0738 -0.1176 -0.0960 -0.1777 -0.1496 -0.1673 -0.0952 -0.0657 -0.1214 -0.1793 -0.1433 -0.1451 -0.0780 -0.0702 -0.0940 -0.1777 -0.1455 -0.1377 -0.0983 -0.0911 -0.1144 -0.1367 -0.1515 -0.1501 -0.0830 -0.0876 -0.1048 -0.1549 -0.1565 -0.1604 -0.1077 -0.0793 -0.1416 -0.2320 -0.1368 -0.1443 -0.1005 -0.0532 -0.1255 -0.2516 -0.1444 -0.1207 -0.0996 -0.0609 -0.1216 -0.0840 -0.1726 -0.1051 -2.3816 -0.1606 -0.2167 -0.3628 -0.1156 -0.2271 -0.1094 -0.0791 -1.3984 -0.2243 -0.1011 -0.0714 -0.0833 -0.0584 -0.3730 -1.0220 -0.1932 -0.0979 -0.0605 -0.0920 -0.0934 -0.0970 -0.1025 -0.4377 -0.1211 -0.0881 -0.0774 -0.2525 -0.0892 -0.0723
S-335	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-335	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-335	-0.18470749258995056	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-335	-0.18470749258995056	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-335	-0.0986 -0.0482 -0.1245 -0.0178 -0.0904 -0.0686 -0.1210 -0.8172 -0.0868 -0.0840 -0.0850 -0.1764 -0.0869 -0.0802 -0.6776 -0.1449 -2.3305 -0.0626 -0.0707 -0.0527 -0.0778 -0.0571 -0.1561 -0.0601 -0.0462 -0.0687 -0.0820 -0.2215 -0.1098 -0.0870 -0.0875 -0.0731 -0.0771 -0.0903 -0.0705 -0.0926 -0.1009 -0.1359 -0.1212 -0.2505 -0.1484 -0.0651 -0.0887 -0.0967 -0.1288 -0.2015 -0.1670 -0.0762 -0.1231 -0.0966 -0.1596 -0.1455 -0.1235 -0.0714 -0.1075 -0.0934 -0.1841 -0.1509 -0.1683 -0.0988 -0.0703 -0.1278 -0.1855 -0.1469 -0.1419 -0.0826 -0.0419 -0.1236 -0.1673 -0.1524 -0.1379 -0.0910 -0.0860 -0.0969 -0.1592 -0.1403 -0.1398 -0.0984 -0.0622 -0.1049 -0.1559 -0.1654 -0.1608 -0.0791 -0.0751 -0.1090 -0.1870 -0.1482 -0.1457 -0.0985 -0.0879 -0.1564 -0.6483 -0.1396 -0.1301 -0.1032 -0.0658 -0.1232 -0.0840 -0.1706 -0.1036 -2.4041 -0.1589 -0.2180 -0.3554 -0.1147 -0.2236 -0.1095 -0.0791 -1.3759 -0.2243 -0.1012 -0.0717 -0.0826 -0.0580 -0.3697 -1.0194 -0.1925 -0.0970 -0.0586 -0.0906 -0.0939 -0.0961 -0.1016 -0.4212 -0.1210 -0.0880 -0.0774 -0.2522 -0.0892 -0.0718
S-331	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-331	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-331	-0.1911359429359436	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-331	-0.1911359429359436	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-331	-0.0996 -0.0486 -0.1244 -0.0179 -0.0904 -0.0696 -0.1209 -0.8132 -0.0868 -0.0840 -0.0850 -0.1767 -0.0870 -0.0809 -0.6687 -0.1474 -2.3324 -0.0625 -0.0706 -0.0521 -0.0779 -0.0575 -0.1561 -0.0609 -0.0459 -0.0687 -0.0821 -0.2199 -0.1099 -0.0878 -0.0858 -0.0763 -0.0773 -0.0903 -0.0697 -0.0920 -0.1016 -0.1351 -0.1203 -0.2683 -0.1460 -0.0699 -0.1003 -0.0915 -0.1428 -0.1858 -0.1536 -0.0711 -0.1222 -0.0842 -0.1463 -1.0253 -0.0588 -0.0971 -0.3201 -0.1440 -0.3082 -0.2362 -0.1738 -0.0934 -0.0548 -0.1165 -0.1421 -0.1818 -0.1414 -0.0740 -0.0620 -0.0932 -0.1429 -0.1591 -0.1351 -0.0955 -0.0984 -0.1108 -0.1294 -0.1506 -0.1480 -0.0853 -0.0879 -0.1021 -0.1514 -0.1740 -0.1565 -0.1100 -0.0765 -0.1400 -0.2289 -0.1389 -0.1449 -0.1031 -0.0519 -0.1256 -0.2043 -0.1423 -0.1173 -0.1005 -0.0614 -0.1208 -0.0833 -0.1769 -0.1046 -2.3845 -0.1575 -0.2169 -0.3593 -0.1156 -0.2252 -0.1102 -0.0790 -1.3924 -0.2257 -0.1011 -0.0714 -0.0833 -0.0584 -0.3726 -1.0167 -0.1905 -0.0978 -0.0605 -0.0921 -0.0936 -0.0963 -0.1018 -0.4413 -0.1212 -0.0882 -0.0774 -0.2506 -0.0892 -0.0724
S-302	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-302	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-302	-0.18481242656707764	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-302	-0.18481242656707764	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-302	-0.0994 -0.0485 -0.1244 -0.0176 -0.0904 -0.0690 -0.1209 -0.8254 -0.0862 -0.0840 -0.0850 -0.1780 -0.0869 -0.0809 -0.6727 -0.1474 -2.3287 -0.0621 -0.0706 -0.0523 -0.0779 -0.0575 -0.1561 -0.0605 -0.0459 -0.0687 -0.0821 -0.2191 -0.1098 -0.0870 -0.0856 -0.0757 -0.0767 -0.0903 -0.0691 -0.0920 -0.1017 -0.1357 -0.1211 -0.2827 -0.1453 -0.0752 -0.0919 -0.0887 -0.1347 -0.2325 -0.0935 -0.0788 -0.3625 -0.1344 -0.2379 -0.2130 -0.1709 -0.0791 -0.0629 -0.1299 -0.1994 -0.1627 -0.1584 -0.1029 -0.0523 -0.1231 -0.1491 -0.1496 -0.1402 -0.0769 -0.0652 -0.0960 -0.1520 -0.1527 -0.1337 -0.0956 -0.0986 -0.1114 -0.1329 -0.1566 -0.1481 -0.0834 -0.0852 -0.1065 -0.1567 -0.1571 -0.1573 -0.1099 -0.0762 -0.1414 -0.2314 -0.1388 -0.1470 -0.1027 -0.0523 -0.1264 -0.1984 -0.1412 -0.1175 -0.1019 -0.0613 -0.1215 -0.0835 -0.1747 -0.1043 -2.3573 -0.1575 -0.2143 -0.3605 -0.1155 -0.2182 -0.1102 -0.0794 -1.4001 -0.2238 -0.1011 -0.0719 -0.0833 -0.0588 -0.3721 -1.0211 -0.1891 -0.0979 -0.0605 -0.0928 -0.0929 -0.0970 -0.1018 -0.4439 -0.1211 -0.0882 -0.0774 -0.2504 -0.0892 -0.0723
S-260	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-260	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-260	-0.1819147914648056	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-260	-0.1819147914648056	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-260	-0.0994 -0.0479 -0.1236 -0.0177 -0.0904 -0.0695 -0.1210 -0.8173 -0.0861 -0.0840 -0.0850 -0.1771 -0.0869 -0.0809 -0.6766 -0.1460 -2.3314 -0.0621 -0.0706 -0.0526 -0.0779 -0.0575 -0.1557 -0.0605 -0.0463 -0.0692 -0.0821 -0.2229 -0.1099 -0.0870 -0.0876 -0.0738 -0.0766 -0.0904 -0.0700 -0.0927 -0.1019 -0.1368 -0.1212 -0.2593 -0.1548 -0.0714 -0.0851 -0.0873 -0.1367 -0.1833 -0.1681 -0.0770 -0.0812 -0.0989 -0.1660 -0.1462 -0.1294 -0.0732 -0.1238 -0.0959 -0.1758 -0.1498 -0.1740 -0.0969 -0.0601 -0.1255 -0.1838 -0.1436 -0.1497 -0.0834 -0.0505 -0.1294 -0.1523 -0.1437 -0.1368 -0.0905 -0.1448 -0.1053 -0.1282 -0.1464 -0.1441 -0.0791 -0.0856 -0.1033 -0.1534 -0.1578 -0.1577 -0.1093 -0.0832 -0.1423 -0.2362 -0.1389 -0.1463 -0.1021 -0.0534 -0.1273 -0.2528 -0.1443 -0.1175 -0.0998 -0.0620 -0.1256 -0.0835 -0.1750 -0.1049 -2.4052 -0.1579 -0.2117 -0.3610 -0.1149 -0.2215 -0.1086 -0.0795 -1.3671 -0.2190 -0.1011 -0.0718 -0.0833 -0.0577 -0.3640 -1.0054 -0.1885 -0.0971 -0.0594 -0.0932 -0.0935 -0.0960 -0.1010 -0.4289 -0.1211 -0.0870 -0.0774 -0.2569 -0.0892 -0.0724
S-135	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( ' ' == text.charAt ( i ) ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-135	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( ' ' == text.charAt ( i ) ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-135	-0.17784880101680756	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( ' ' == text.charAt ( i ) ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-135	-0.17784880101680756	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( ' ' == text.charAt ( i ) ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-135	-0.0910 -0.0564 -1.0228 -0.0429 -0.0969 -0.0297 -0.1164 -0.7962 -0.0589 -0.0912 -0.0826 -1.5046 -0.0740 -0.0850 -0.0615 -0.0873 -1.6086 -0.0859 -0.1259 -0.0859 -0.6337 -0.0724 -0.0546 -0.0805 -0.3914 -0.0728 -0.0803 -0.0817 -0.4530 -0.0964 -0.1066 -0.1162 -0.0855 -0.1005 -0.1040 -0.0914 -0.0653 -0.0854 -0.0754 -0.1208 -0.1151 -0.1310 -0.0397 -0.1115 -0.0501 -0.1052 -0.6171 -0.1009 -0.1082 -0.0875 -0.0797 -0.0866 -0.0579 -1.1256 -0.0928 -0.1223 -0.1157 -0.1124 -0.2018 -0.1054 -0.0601 -0.0841 -0.1497 -0.0813 -0.1385 -0.0904 -0.0784 -0.1017 -0.0348 -0.0469 -0.0474 -0.0992 -0.9410 -0.1135 -0.1339 -0.7692 -0.1408 -0.2101 -0.1443 -0.0948 -0.0930 -0.0807 -0.1138 -0.1051 -0.0993 -0.0984 -0.0520 -0.0711 -0.1082 -0.0850 -0.0830 -0.1334 -0.1031 -0.0704 -0.0878 -0.0760 -0.0728 -1.2205 -0.0691 -0.0912 -0.0804 -1.0261 -0.0573 -0.0481 -0.1211 -0.0819 -0.0910 -0.0685 -0.1031 -0.0777 -0.0698 -0.0684 -0.3147 -0.0986 -0.1062 -0.1018 -0.0857 -0.0954 -0.0349 -0.0995 -0.7062 -0.1188 -0.1179 -0.6358 -0.1021 -0.2456 -0.1596 -0.0945 -0.0937 -0.0847 -0.0581 -0.0970 -0.0659 -0.1045 -0.0925 -0.0874 -0.0313 -0.1040 -0.4446 -0.1106 -0.0870 -0.5445 -0.0843 -0.1133 -0.1646 -0.0868 -0.0928 -0.0739 -0.0591 -0.1110 -0.0790 -0.0716 -0.5260 -0.0544 -0.1049 -0.0816 -0.0608 -0.5215 -0.1240 -0.0846 -0.0609 -0.7336 -0.0755 -0.0810 -0.0588 -0.0964 -0.0754 -0.1689 -0.0745 -0.0868
S-83	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( 0 < end - start ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-83	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( 0 < end - start ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( 0 < end - start ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-83	-0.18020959198474884	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( 0 < end - start ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-83	-0.18020959198474884	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( 0 < end - start ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-83	-0.0907 -0.0565 -1.0230 -0.0422 -0.0967 -0.0291 -0.1164 -0.7934 -0.0586 -0.0904 -0.0829 -1.4964 -0.0735 -0.0843 -0.0610 -0.0879 -1.6163 -0.0873 -0.1258 -0.0859 -0.6238 -0.0730 -0.0531 -0.0808 -0.3913 -0.0739 -0.0776 -0.0813 -0.4502 -0.0955 -0.1062 -0.1065 -0.0906 -0.1062 -0.1060 -0.0922 -0.0673 -0.0838 -0.0764 -0.1178 -0.1152 -0.0925 -0.1348 -0.8010 -0.1010 -0.1095 -0.0859 -0.1874 -0.0514 -0.0394 -0.0808 -0.0906 -0.0640 -1.1247 -0.0929 -0.1234 -0.1154 -0.1133 -0.3146 -0.1017 -0.0639 -0.0750 -0.0994 -0.0813 -0.1299 -0.0904 -0.0789 -0.1040 -0.0312 -0.0465 -0.0470 -0.0992 -0.8878 -0.1127 -0.1222 -0.7629 -0.1313 -0.1848 -0.1403 -0.0933 -0.0921 -0.0834 -0.1240 -0.1062 -0.1592 -0.1012 -0.0677 -0.0907 -0.0526 -0.0882 -0.0837 -0.1376 -0.1025 -0.0707 -0.0883 -0.0779 -0.0719 -1.2110 -0.0689 -0.0905 -0.0891 -1.0443 -0.0580 -0.0473 -0.1187 -0.0819 -0.0912 -0.0694 -0.1030 -0.0766 -0.0727 -0.0715 -0.3170 -0.0999 -0.1072 -0.1010 -0.0850 -0.0945 -0.0353 -0.1002 -0.7242 -0.1188 -0.1169 -0.6844 -0.1029 -0.2337 -0.1558 -0.0938 -0.0935 -0.0844 -0.0569 -0.0976 -0.0649 -0.1044 -0.0911 -0.0840 -0.0314 -0.1052 -0.4459 -0.1097 -0.0871 -0.5939 -0.0841 -0.1108 -0.1597 -0.0867 -0.0926 -0.0744 -0.0591 -0.1148 -0.0802 -0.0741 -0.5441 -0.0545 -0.1068 -0.0815 -0.0622 -0.5400 -0.1244 -0.0834 -0.0608 -0.7394 -0.0777 -0.0805 -0.0580 -0.0957 -0.0748 -0.1684 -0.0750 -0.0862
S-77	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; end > j; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-77	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; end > j; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; end > j; j += 1 ) { new_text += "_"; } } return new_text; }
H-77	-0.17976070940494537	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start ; end > j; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-77	-0.17976070940494537	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start ; end > j; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-77	-0.0912 -0.0569 -1.0060 -0.0435 -0.0967 -0.0292 -0.1156 -0.7808 -0.0600 -0.0911 -0.0827 -1.4755 -0.0741 -0.0844 -0.0617 -0.0872 -1.5998 -0.0882 -0.1259 -0.0858 -0.6301 -0.0733 -0.0543 -0.0806 -0.3919 -0.0734 -0.0800 -0.0816 -0.4533 -0.0943 -0.1060 -0.1083 -0.0863 -0.1009 -0.1061 -0.0903 -0.0668 -0.0841 -0.0758 -0.1175 -0.1152 -0.0942 -0.1365 -0.7793 -0.1010 -0.1108 -0.0858 -0.1883 -0.0513 -0.0391 -0.0808 -0.0903 -0.0618 -1.1343 -0.0917 -0.1185 -0.1158 -0.1131 -0.2372 -0.1073 -0.0616 -0.0826 -0.1568 -0.0822 -0.1387 -0.0903 -0.0785 -0.0974 -0.0314 -0.0470 -0.0483 -0.0984 -0.9060 -0.1135 -0.1226 -0.7995 -0.1345 -0.1922 -0.1405 -0.0939 -0.0929 -0.0798 -0.1113 -0.1048 -0.1014 -0.1001 -0.0531 -0.0679 -0.1058 -0.0843 -0.0830 -0.1321 -0.1037 -0.0678 -0.0840 -0.0775 -0.0753 -1.4882 -0.1076 -0.1205 -0.0802 -0.8574 -0.0603 -0.0485 -0.1129 -0.0818 -0.0904 -0.0708 -0.1027 -0.0771 -0.0737 -0.0657 -0.3034 -0.0990 -0.1088 -0.1022 -0.0845 -0.0970 -0.0347 -0.1002 -0.7233 -0.1187 -0.1097 -0.6751 -0.0991 -0.2093 -0.1566 -0.0929 -0.0935 -0.0846 -0.0581 -0.0964 -0.0639 -0.1043 -0.0921 -0.0870 -0.0313 -0.1045 -0.4389 -0.1088 -0.0858 -0.5836 -0.0828 -0.1082 -0.1593 -0.0861 -0.0926 -0.0741 -0.0589 -0.1115 -0.0807 -0.0726 -0.5229 -0.0553 -0.1075 -0.0821 -0.0617 -0.5174 -0.1227 -0.0852 -0.0617 -0.7292 -0.0767 -0.0802 -0.0589 -0.0964 -0.0750 -0.1700 -0.0751 -0.0855
S-63	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( 2 < end - start ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-63	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( 2 < end - start ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( 2 < end - start ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-63	-0.1779017299413681	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( 2 < end - start ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-63	-0.1779017299413681	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( 2 < end - start ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-63	-0.0908 -0.0566 -1.0283 -0.0425 -0.0967 -0.0289 -0.1156 -0.8026 -0.0591 -0.0904 -0.0827 -1.5163 -0.0729 -0.0844 -0.0607 -0.0874 -1.6151 -0.0873 -0.1222 -0.0860 -0.6395 -0.0730 -0.0525 -0.0808 -0.4066 -0.0739 -0.0765 -0.0813 -0.4611 -0.0956 -0.1061 -0.1049 -0.0896 -0.1055 -0.1062 -0.0939 -0.0673 -0.0840 -0.0762 -0.1169 -0.1151 -0.0920 -0.1346 -0.8205 -0.1011 -0.1085 -0.0860 -0.2032 -0.0485 -0.0386 -0.0806 -0.0903 -0.0641 -1.1260 -0.0960 -0.1273 -0.1175 -0.1111 -0.2206 -0.0892 -0.0748 -0.1919 -0.0579 -0.0834 -0.1095 -0.0877 -0.0765 -0.0920 -0.0296 -0.0478 -0.0499 -0.0983 -0.8829 -0.1138 -0.1231 -0.7653 -0.1304 -0.2031 -0.1464 -0.0940 -0.0928 -0.0778 -0.1024 -0.1082 -0.0869 -0.0967 -0.0483 -0.0742 -0.1067 -0.0864 -0.0833 -0.1293 -0.1031 -0.0709 -0.0871 -0.0767 -0.0710 -1.1035 -0.0683 -0.0917 -0.0794 -0.8568 -0.0568 -0.0460 -0.1202 -0.0811 -0.0896 -0.0684 -0.1023 -0.0761 -0.0692 -0.0676 -0.3194 -0.0985 -0.1047 -0.1002 -0.0838 -0.0933 -0.0351 -0.0997 -0.7058 -0.1188 -0.1155 -0.6706 -0.1018 -0.2351 -0.1591 -0.0932 -0.0935 -0.0841 -0.0570 -0.0955 -0.0655 -0.1036 -0.0898 -0.0853 -0.0325 -0.1055 -0.4456 -0.1099 -0.0859 -0.5841 -0.0834 -0.1105 -0.1633 -0.0868 -0.0926 -0.0744 -0.0599 -0.1139 -0.0765 -0.0736 -0.5414 -0.0553 -0.1047 -0.0802 -0.0617 -0.5394 -0.1220 -0.0827 -0.0604 -0.7481 -0.0767 -0.0797 -0.0580 -0.0965 -0.0743 -0.1689 -0.0752 -0.0850
S-185	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( 0 < lst[i] ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
T-185	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( 0 < lst[i] ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
H-185	-0.2384575605392456	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( 0 < lst[i] ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
D-185	-0.2384575605392456	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( 0 < lst[i] ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
P-185	-0.0987 -0.0423 -0.0987 -1.8701 -0.0142 -0.0909 -0.0524 -0.0294 -0.0921 -0.0188 -0.0289 -0.1129 -0.1022 -2.0843 -0.0350 -0.0850 -0.0855 -0.2187 -0.0644 -0.0927 -0.0672 -0.2460 -0.0889 -0.0940 -0.0625 -1.2611 -0.1078 -0.0724 -0.1147 -0.0635 -0.0785 -0.6366 -0.0931 -0.0365 -0.0881 -0.0371 -0.3526 -0.0887 -0.1022 -0.0372 -0.0900 -0.5707 -0.0939 -0.0208 -0.0857 -0.0376 -0.7927 -0.1462 -0.1099 -0.0683 -0.0783 -0.0734 -2.1419 -0.3874 -0.0910 -0.3907 -0.2872 -0.0808 -0.0742 -0.7123 -0.0790 -1.9105 -0.0667 -0.0944 -0.1127 -0.1123 -0.0656 -0.4368 -0.2949 -0.1917 -0.0741 -0.0867 -0.0866 -0.0902 -0.0926 -0.0945 -0.0986 -0.8961 -0.0764 -0.1072 -0.0627 -0.0918 -1.9364 -0.0944 -0.0720 -0.1085 -0.0985 -0.1000 -0.0532 -1.0195 -0.0485 -0.3399 -0.1509 -0.2366 -0.0931 -0.0999 -0.0673 -0.0913 -0.0740 -0.1027 -0.3753 -0.1016 -0.0651 -0.2598 -0.1164 -0.1684 -0.0865 -0.0799 -0.0274 -0.0939 -0.0920 -0.3519 -0.1131 -0.0881 -0.0412 -0.0898 -2.0161 -0.0915 -0.0542 -0.1053 -0.0732 -0.0871 -0.0368 -0.7844 -0.0424 -0.2803 -0.1132 -0.1998 -0.0869 -0.0985 -0.0687 -0.0717 -0.1141 -0.1162 -0.0809 -0.1071 -0.0835 -0.0586 -0.1114 -0.0624 -0.0668 -0.3520 -0.1328 -0.1118 -0.0729 -0.0439 -0.0787 -0.0530 -0.0959 -0.0386 -0.1031 -0.2642 -0.1099 -2.0213 -0.0672 -0.0765 -0.1059 -0.0814 -0.1234 -0.0775 -0.6797 -0.0866 -0.1003 -0.0439 -0.3362 -0.0915 -0.0705 -1.3846 -0.0783 -1.2586 -0.0869
S-118	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( 0 > lst[i] ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
T-118	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( 0 > lst[i] ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
H-118	-0.23446789383888245	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( 0 > lst[i] ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
D-118	-0.23446789383888245	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( 0 > lst[i] ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
P-118	-0.0987 -0.0421 -0.0970 -1.8497 -0.0144 -0.0907 -0.0524 -0.0298 -0.0921 -0.0196 -0.0289 -0.1128 -0.1013 -2.0633 -0.0354 -0.0852 -0.0855 -0.2238 -0.0680 -0.0905 -0.0657 -0.2481 -0.0907 -0.0926 -0.0624 -1.2715 -0.1092 -0.0728 -0.1146 -0.0638 -0.0779 -0.6326 -0.0931 -0.0368 -0.0881 -0.0372 -0.3525 -0.0913 -0.1029 -0.0376 -0.0900 -0.5715 -0.0939 -0.0211 -0.0849 -0.0377 -0.7837 -0.1450 -0.1100 -0.0699 -0.0779 -0.0735 -2.2400 -0.3573 -0.0838 -0.4201 -0.3864 -0.0658 -0.0737 -0.7073 -0.0810 -1.7935 -0.0694 -0.0943 -0.1158 -0.1107 -0.1717 -0.0931 -0.0618 -0.3201 -0.2426 -0.2132 -0.0873 -0.0983 -0.0956 -0.0919 -0.0999 -0.8811 -0.0769 -0.1076 -0.0636 -0.0922 -1.8657 -0.0937 -0.0730 -0.1083 -0.1051 -0.0994 -0.0534 -0.9793 -0.0481 -0.3206 -0.1528 -0.2086 -0.0922 -0.0996 -0.0662 -0.0907 -0.0759 -0.1058 -0.0510 -0.2487 -0.1173 -0.1259 -0.0968 -0.0849 -0.0833 -0.0715 -0.0319 -0.0929 -0.0898 -0.3658 -0.1135 -0.0873 -0.0429 -0.0886 -1.9516 -0.0915 -0.0551 -0.1060 -0.0752 -0.0870 -0.0373 -0.7715 -0.0397 -0.2757 -0.1117 -0.1938 -0.0864 -0.0966 -0.0688 -0.0708 -0.1123 -0.1161 -0.0838 -0.1089 -0.0825 -0.0574 -0.1114 -0.0620 -0.0668 -0.3301 -0.1314 -0.1118 -0.0746 -0.0435 -0.0782 -0.0535 -0.0966 -0.0383 -0.1031 -0.2530 -0.1090 -2.0042 -0.0673 -0.0765 -0.1048 -0.0807 -0.1225 -0.0775 -0.6570 -0.0873 -0.1004 -0.0438 -0.3371 -0.0916 -0.0699 -1.3355 -0.0785 -1.3218 -0.0864
S-86	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; lst.length > i; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
T-86	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; lst.length > i; i++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
H-86	-0.223936527967453	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < ( lst.length ) ; i ++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
D-86	-0.223936527967453	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < ( lst.length ) ; i ++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; } }
P-86	-0.0987 -0.0418 -0.0976 -1.8511 -0.0143 -0.0907 -0.0529 -0.0293 -0.0914 -0.0192 -0.0286 -0.1126 -0.1003 -2.0474 -0.0341 -0.0848 -0.0861 -0.2224 -0.0671 -0.0913 -0.0674 -0.2500 -0.0941 -0.0926 -0.0623 -1.2718 -0.1080 -0.0730 -0.1147 -0.0635 -0.0774 -0.6195 -0.0931 -0.0365 -0.0881 -0.0368 -0.3473 -0.0893 -0.1021 -0.0372 -0.0892 -0.5499 -0.0939 -0.0207 -0.0852 -0.0377 -0.8046 -0.1484 -0.1105 -0.0691 -0.0771 -0.0774 -1.9781 -0.2861 -1.2312 -0.8163 -0.1195 -0.0625 -0.0660 -0.0586 -0.1292 -0.1616 -0.0852 -0.7635 -0.0650 -0.0938 -0.1317 -0.1120 -0.0608 -0.5007 -0.2597 -0.1795 -0.0670 -0.0822 -0.0908 -0.1031 -0.0847 -0.0916 -0.0855 -0.8697 -0.0763 -0.1069 -0.0642 -0.0899 -1.9250 -0.0935 -0.0693 -0.1054 -0.0956 -0.0989 -0.0536 -0.8810 -0.0451 -0.3762 -0.1530 -0.2142 -0.0917 -0.0987 -0.0647 -0.0913 -0.0758 -0.1019 -0.0454 -0.2497 -0.1173 -0.1261 -0.0896 -0.0790 -0.0824 -0.0688 -0.0301 -0.0930 -0.0812 -0.3067 -0.1022 -0.0863 -0.0407 -0.0896 -1.8024 -0.0906 -0.0515 -0.1032 -0.0768 -0.0862 -0.0372 -0.6824 -0.0390 -0.2905 -0.1119 -0.1893 -0.0838 -0.0978 -0.0681 -0.0720 -0.1040 -0.1152 -0.0783 -0.1051 -0.0816 -0.0530 -0.1097 -0.0619 -0.0646 -0.2581 -0.1274 -0.1115 -0.0776 -0.0426 -0.0787 -0.0539 -0.0964 -0.0382 -0.1060 -0.2148 -0.1030 -1.8928 -0.0665 -0.0752 -0.0993 -0.0701 -0.1211 -0.0764 -0.5664 -0.0868 -0.0986 -0.0443 -0.3062 -0.0933 -0.0645 -1.4992 -0.0782 -1.0076 -0.0847
S-281	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-281	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-281	-0.16206564009189606	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-281	-0.16206564009189606	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || 'A' == c || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-281	-0.0861 -0.0509 -0.9776 -0.0234 -0.1101 -0.8235 -0.0742 -0.0878 -0.0881 -1.2304 -0.0391 -0.0870 -0.0578 -0.6227 -0.0552 -0.0772 -0.2021 -0.1074 -0.1002 -0.0949 -0.0645 -0.0581 -0.1251 -0.0472 -0.0442 -0.0730 -0.0982 -0.0832 -0.1353 -0.1092 -0.9659 -0.0971 -0.0859 -0.1175 -0.1114 -0.1468 -0.0906 -0.0899 -0.0925 -0.1464 -0.1079 -0.3604 -0.0965 -0.3039 -0.1156 -0.1330 -0.0861 -0.1003 -0.1104 -0.1547 -0.1000 -0.6859 -0.0938 -0.0670 -0.0494 -0.1059 -0.1363 -0.0872 -0.0917 -0.0932 -0.1118 -0.1034 -0.2894 -0.0920 -0.3376 -0.1070 -0.1427 -0.0857 -0.0996 -0.0806 -0.2538 -0.1106 -0.2908 -0.1513 -0.0688 -0.1138 -0.0840 -0.1429 -0.1497 -0.2186 -0.0615 -0.0956 -0.0881 -0.2559 -0.1563 -0.2200 -0.0762 -0.0714 -0.1177 -0.2258 -0.1527 -0.1992 -0.0766 -0.0507 -0.1114 -0.1940 -0.1563 -0.1840 -0.0604 -0.0845 -0.0787 -0.1491 -0.0977 -0.0587 -0.0774 -0.2650 -0.1328 -0.2694 -0.1370 -0.1649 -0.0548 -0.1213 -0.0817 -0.1759 -0.1562 -0.1894 -0.0727 -0.0686 -0.1105 -0.1762 -0.1421 -0.1933 -0.0588 -0.0502 -0.0813 -0.1062 -0.1333 -0.1319 -0.0514 -0.0511 -0.0849 -0.0869 -0.0860 -0.1988 -0.1081 -0.1456 -0.0900 -0.0689 -0.0950 -0.1767 -0.1681 -0.0872 -0.3024 -0.1513 -0.1724 -0.0953 -0.0949 -0.1409 -0.0695 -0.1243 -1.0566 -0.1101 -0.1529 -0.0922 -0.0877 -0.1177 -0.0863 -0.0525 -0.1572 -1.6303 -0.0633 -0.0925 -0.0825 -0.0828
S-411	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-411	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-411	-0.1614558845758438	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-411	-0.1614558845758438	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'O' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-411	-0.0857 -0.0508 -0.9827 -0.0236 -0.1101 -0.8238 -0.0747 -0.0878 -0.0875 -1.2299 -0.0391 -0.0870 -0.0578 -0.6224 -0.0549 -0.0772 -0.2037 -0.1065 -0.0994 -0.0943 -0.0644 -0.0581 -0.1259 -0.0475 -0.0442 -0.0730 -0.0983 -0.0833 -0.1365 -0.1093 -0.9616 -0.0972 -0.0858 -0.1147 -0.1115 -0.1459 -0.0913 -0.0907 -0.0925 -0.1464 -0.1079 -0.3657 -0.0965 -0.3089 -0.1156 -0.1331 -0.0867 -0.1004 -0.1103 -0.1543 -0.1000 -0.7027 -0.0938 -0.0666 -0.0488 -0.1061 -0.1365 -0.0865 -0.0911 -0.0931 -0.1126 -0.1033 -0.2912 -0.0919 -0.3424 -0.1078 -0.1437 -0.0856 -0.0989 -0.0807 -0.2624 -0.1108 -0.2580 -0.1515 -0.0582 -0.1340 -0.0825 -0.1430 -0.1752 -0.2305 -0.0691 -0.1088 -0.0937 -0.2574 -0.1443 -0.1768 -0.0666 -0.0879 -0.0851 -0.2045 -0.1514 -0.1988 -0.0744 -0.0579 -0.1103 -0.2179 -0.1477 -0.1916 -0.0717 -0.0420 -0.1087 -0.2238 -0.1457 -0.1461 -0.0655 -0.0542 -0.0824 -0.1623 -0.1347 -0.1654 -0.0755 -0.0676 -0.0814 -0.1625 -0.1505 -0.1866 -0.0548 -0.1405 -0.0734 -0.1632 -0.1604 -0.2035 -0.0670 -0.0771 -0.1077 -0.1573 -0.1272 -0.1373 -0.0501 -0.0526 -0.0800 -0.0868 -0.0873 -0.1915 -0.1084 -0.1449 -0.0893 -0.0689 -0.0945 -0.1840 -0.1684 -0.0874 -0.2911 -0.1446 -0.1692 -0.0956 -0.0951 -0.1376 -0.0702 -0.1246 -1.0568 -0.1102 -0.1531 -0.0922 -0.0878 -0.1188 -0.0861 -0.0521 -0.1584 -1.6352 -0.0634 -0.0926 -0.0825 -0.0816
S-405	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-405	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-405	-0.16030791401863098	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-405	-0.16030791401863098	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'I' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-405	-0.0857 -0.0505 -0.9772 -0.0236 -0.1101 -0.8193 -0.0741 -0.0878 -0.0881 -1.2300 -0.0391 -0.0870 -0.0578 -0.6227 -0.0549 -0.0772 -0.2030 -0.1073 -0.1001 -0.0942 -0.0644 -0.0576 -0.1249 -0.0475 -0.0442 -0.0730 -0.0982 -0.0832 -0.1368 -0.1100 -0.9506 -0.0972 -0.0850 -0.1185 -0.1115 -0.1458 -0.0913 -0.0907 -0.0918 -0.1466 -0.1078 -0.3629 -0.0965 -0.3047 -0.1155 -0.1331 -0.0867 -0.0996 -0.1104 -0.1550 -0.0999 -0.6853 -0.0938 -0.0665 -0.0499 -0.1060 -0.1364 -0.0872 -0.0918 -0.0925 -0.1126 -0.1033 -0.2894 -0.0919 -0.3422 -0.1070 -0.1438 -0.0856 -0.0996 -0.0806 -0.2606 -0.1107 -0.2703 -0.1501 -0.0653 -0.1174 -0.0992 -0.1345 -0.1659 -0.2105 -0.0710 -0.0733 -0.0966 -0.2888 -0.1490 -0.1821 -0.0684 -0.0985 -0.0864 -0.2005 -0.1455 -0.2087 -0.0725 -0.0433 -0.1112 -0.2338 -0.1462 -0.1911 -0.0694 -0.0590 -0.1064 -0.1894 -0.1453 -0.1629 -0.0671 -0.0598 -0.0816 -0.1595 -0.1325 -0.1630 -0.0766 -0.0679 -0.0824 -0.1644 -0.1453 -0.1791 -0.0550 -0.1484 -0.0705 -0.1423 -0.1544 -0.2050 -0.0583 -0.0536 -0.0805 -0.1090 -0.1283 -0.1312 -0.0528 -0.0509 -0.0831 -0.0877 -0.0864 -0.1949 -0.1076 -0.1440 -0.0889 -0.0690 -0.0943 -0.1743 -0.1651 -0.0873 -0.3047 -0.1480 -0.1694 -0.0955 -0.0951 -0.1383 -0.0692 -0.1245 -1.0563 -0.1101 -0.1518 -0.0921 -0.0878 -0.1178 -0.0862 -0.0525 -0.1587 -1.6292 -0.0633 -0.0925 -0.0825 -0.0828
S-399	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-399	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-399	-0.16116900742053986	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-399	-0.16116900742053986	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'i' || c == 'a' || c == 'e' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-399	-0.0856 -0.0509 -0.9822 -0.0234 -0.1101 -0.8193 -0.0742 -0.0878 -0.0882 -1.2297 -0.0391 -0.0870 -0.0574 -0.6226 -0.0553 -0.0772 -0.2029 -0.1065 -0.1003 -0.0949 -0.0645 -0.0576 -0.1260 -0.0472 -0.0445 -0.0730 -0.0982 -0.0833 -0.1358 -0.1092 -0.9580 -0.0972 -0.0850 -0.1184 -0.1115 -0.1458 -0.0913 -0.0906 -0.0925 -0.1465 -0.1078 -0.3610 -0.0965 -0.3075 -0.1155 -0.1331 -0.0867 -0.0996 -0.1104 -0.1553 -0.0999 -0.6904 -0.0938 -0.0665 -0.0489 -0.1060 -0.1364 -0.0872 -0.0918 -0.0925 -0.1126 -0.1033 -0.2912 -0.0920 -0.3384 -0.1070 -0.1427 -0.0863 -0.0988 -0.0812 -0.2537 -0.1106 -0.2743 -0.1502 -0.0661 -0.1063 -0.0946 -0.1636 -0.1577 -0.2049 -0.0673 -0.0767 -0.0990 -0.2885 -0.1468 -0.1819 -0.0665 -0.1132 -0.0922 -0.2231 -0.1393 -0.2093 -0.0722 -0.0906 -0.1085 -0.1912 -0.1496 -0.1850 -0.0620 -0.0739 -0.0784 -0.1614 -0.1351 -0.1480 -0.0742 -0.0605 -0.0845 -0.1538 -0.1511 -0.1866 -0.0583 -0.1422 -0.0803 -0.1601 -0.1608 -0.1984 -0.0756 -0.0738 -0.1094 -0.1751 -0.1451 -0.2037 -0.0575 -0.0492 -0.0818 -0.1110 -0.1353 -0.1369 -0.0520 -0.0514 -0.0848 -0.0875 -0.0870 -0.1964 -0.1084 -0.1458 -0.0901 -0.0695 -0.0944 -0.1785 -0.1672 -0.0879 -0.3046 -0.1510 -0.1729 -0.0954 -0.0943 -0.1386 -0.0697 -0.1244 -1.0530 -0.1101 -0.1518 -0.0929 -0.0877 -0.1179 -0.0873 -0.0525 -0.1589 -1.6297 -0.0633 -0.0925 -0.0825 -0.0822
S-381	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-381	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-381	-0.1610080450773239	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-381	-0.1610080450773239	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'A' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-381	-0.0857 -0.0509 -0.9774 -0.0234 -0.1101 -0.8191 -0.0742 -0.0878 -0.0881 -1.2236 -0.0391 -0.0870 -0.0578 -0.6227 -0.0553 -0.0772 -0.2023 -0.1065 -0.1002 -0.0942 -0.0645 -0.0576 -0.1251 -0.0472 -0.0442 -0.0731 -0.0983 -0.0833 -0.1367 -0.1092 -0.9556 -0.0972 -0.0851 -0.1169 -0.1115 -0.1458 -0.0913 -0.0907 -0.0925 -0.1463 -0.1079 -0.3633 -0.0965 -0.3061 -0.1155 -0.1331 -0.0868 -0.1004 -0.1104 -0.1548 -0.1000 -0.6899 -0.0939 -0.0667 -0.0496 -0.1060 -0.1363 -0.0872 -0.0918 -0.0932 -0.1125 -0.1042 -0.2913 -0.0920 -0.3403 -0.1069 -0.1427 -0.0863 -0.0988 -0.0806 -0.2514 -0.1107 -0.2612 -0.1523 -0.0629 -0.1487 -0.0694 -0.1271 -0.1537 -0.2241 -0.0701 -0.0687 -0.0919 -0.3310 -0.1489 -0.1779 -0.0662 -0.0912 -0.0847 -0.1877 -0.1404 -0.2100 -0.0744 -0.0678 -0.1100 -0.2067 -0.1451 -0.2118 -0.0742 -0.0556 -0.1094 -0.2086 -0.1434 -0.1717 -0.0691 -0.0612 -0.0827 -0.1818 -0.1269 -0.1625 -0.0557 -0.1479 -0.0789 -0.1688 -0.1559 -0.2005 -0.0725 -0.0663 -0.1077 -0.1603 -0.1422 -0.2042 -0.0569 -0.0535 -0.0801 -0.1017 -0.1300 -0.1360 -0.0524 -0.0497 -0.0833 -0.0878 -0.0857 -0.1927 -0.1069 -0.1457 -0.0889 -0.0700 -0.0951 -0.1763 -0.1667 -0.0873 -0.2962 -0.1488 -0.1703 -0.0954 -0.0951 -0.1402 -0.0692 -0.1245 -1.0568 -0.1102 -0.1507 -0.0928 -0.0878 -0.1178 -0.0863 -0.0525 -0.1573 -1.6327 -0.0633 -0.0926 -0.0825 -0.0823
S-373	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-373	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-373	-0.16049228608608246	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-373	-0.16049228608608246	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'E' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-373	-0.0857 -0.0509 -0.9773 -0.0236 -0.1101 -0.8190 -0.0742 -0.0878 -0.0881 -1.2298 -0.0391 -0.0870 -0.0578 -0.6224 -0.0549 -0.0772 -0.2041 -0.1073 -0.1002 -0.0943 -0.0649 -0.0581 -0.1260 -0.0472 -0.0442 -0.0730 -0.0982 -0.0833 -0.1368 -0.1100 -0.9786 -0.0972 -0.0859 -0.1157 -0.1115 -0.1458 -0.0912 -0.0906 -0.0925 -0.1467 -0.1079 -0.3653 -0.0965 -0.3077 -0.1155 -0.1331 -0.0867 -0.1003 -0.1105 -0.1561 -0.0999 -0.6982 -0.0938 -0.0673 -0.0486 -0.1061 -0.1364 -0.0871 -0.0918 -0.0925 -0.1117 -0.1033 -0.2932 -0.0920 -0.3435 -0.1070 -0.1426 -0.0863 -0.0988 -0.0806 -0.2559 -0.1107 -0.2611 -0.1479 -0.0598 -0.1989 -0.0755 -0.1341 -0.1703 -0.2410 -0.0739 -0.1243 -0.0959 -0.2542 -0.1439 -0.1804 -0.0675 -0.0693 -0.0847 -0.1874 -0.1456 -0.1865 -0.0738 -0.0528 -0.1075 -0.2015 -0.1460 -0.2016 -0.0701 -0.0474 -0.1068 -0.2023 -0.1463 -0.1703 -0.0639 -0.0554 -0.0813 -0.1686 -0.1350 -0.1635 -0.0748 -0.0644 -0.0800 -0.1560 -0.1567 -0.1908 -0.0691 -0.0663 -0.1014 -0.1654 -0.1417 -0.1944 -0.0543 -0.0491 -0.0811 -0.1046 -0.1308 -0.1370 -0.0514 -0.0501 -0.0821 -0.0876 -0.0863 -0.1938 -0.1084 -0.1424 -0.0894 -0.0694 -0.0944 -0.1770 -0.1677 -0.0872 -0.3004 -0.1482 -0.1682 -0.0955 -0.0951 -0.1376 -0.0695 -0.1245 -1.0596 -0.1101 -0.1519 -0.0921 -0.0878 -0.1179 -0.0855 -0.0521 -0.1586 -1.6293 -0.0629 -0.0925 -0.0825 -0.0823
S-360	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-360	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-360	-0.16333359479904175	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-360	-0.16333359479904175	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || 'u' == c || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-360	-0.0861 -0.0509 -0.9825 -0.0234 -0.1101 -0.8230 -0.0742 -0.0878 -0.0882 -1.2297 -0.0391 -0.0870 -0.0578 -0.6226 -0.0552 -0.0772 -0.2022 -0.1065 -0.1004 -0.0948 -0.0644 -0.0581 -0.1261 -0.0475 -0.0442 -0.0731 -0.0982 -0.0832 -0.1355 -0.1092 -0.9686 -0.0972 -0.0859 -0.1172 -0.1114 -0.1467 -0.0906 -0.0899 -0.0924 -0.1465 -0.1079 -0.3632 -0.0965 -0.3050 -0.1156 -0.1340 -0.0861 -0.1003 -0.1104 -0.1548 -0.0993 -0.6902 -0.0938 -0.0670 -0.0496 -0.1059 -0.1363 -0.0866 -0.0918 -0.0932 -0.1125 -0.1042 -0.2897 -0.0920 -0.3382 -0.1070 -0.1438 -0.0857 -0.0997 -0.0806 -0.2535 -0.1106 -0.2810 -0.1557 -0.0700 -0.1190 -0.0839 -0.1484 -0.1510 -0.2204 -0.0614 -0.0987 -0.0863 -0.2483 -0.1617 -0.2237 -0.0757 -0.0730 -0.1164 -0.2427 -0.1566 -0.2069 -0.0765 -0.0534 -0.1033 -0.1832 -0.1836 -0.0602 -0.0617 -0.2747 -0.1224 -0.2691 -0.1498 -0.1644 -0.0747 -0.0651 -0.0856 -0.1417 -0.1535 -0.1890 -0.0586 -0.1119 -0.0798 -0.1675 -0.1637 -0.1960 -0.0751 -0.0699 -0.1100 -0.1802 -0.1463 -0.2000 -0.0589 -0.0494 -0.0828 -0.1202 -0.1692 -0.1384 -0.0523 -0.0508 -0.0852 -0.0874 -0.0854 -0.2030 -0.1081 -0.1466 -0.0906 -0.0688 -0.0944 -0.1774 -0.1670 -0.0872 -0.3022 -0.1488 -0.1743 -0.0960 -0.0949 -0.1421 -0.0701 -0.1244 -1.0623 -0.1101 -0.1530 -0.0916 -0.0877 -0.1185 -0.0864 -0.0525 -0.1581 -1.6299 -0.0629 -0.0925 -0.0819 -0.0822
S-341	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-341	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-341	-0.16129827499389648	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-341	-0.16129827499389648	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || 'U' == c ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-341	-0.0856 -0.0505 -0.9772 -0.0236 -0.1101 -0.8279 -0.0742 -0.0878 -0.0875 -1.2301 -0.0391 -0.0869 -0.0578 -0.6189 -0.0552 -0.0772 -0.2024 -0.1066 -0.1003 -0.0947 -0.0654 -0.0581 -0.1249 -0.0469 -0.0443 -0.0730 -0.0987 -0.0833 -0.1359 -0.1093 -0.9528 -0.0972 -0.0858 -0.1172 -0.1114 -0.1475 -0.0920 -0.0905 -0.0917 -0.1464 -0.1087 -0.3601 -0.0965 -0.3074 -0.1156 -0.1348 -0.0867 -0.1003 -0.1105 -0.1551 -0.0992 -0.6899 -0.0938 -0.0670 -0.0501 -0.1060 -0.1381 -0.0879 -0.0917 -0.0923 -0.1116 -0.1039 -0.2854 -0.0920 -0.3386 -0.1071 -0.1446 -0.0871 -0.1003 -0.0812 -0.2512 -0.1106 -0.2783 -0.1488 -0.0720 -0.1145 -0.0838 -0.1476 -0.1527 -0.2215 -0.0611 -0.0963 -0.0874 -0.2529 -0.1546 -0.2251 -0.0758 -0.0720 -0.1177 -0.2135 -0.1474 -0.2033 -0.0743 -0.0514 -0.1116 -0.1807 -0.1650 -0.1905 -0.0643 -0.1054 -0.0857 -0.1518 -0.1416 -0.1530 -0.0759 -0.0620 -0.0856 -0.1409 -0.1555 -0.1855 -0.0595 -0.1123 -0.0796 -0.1512 -0.1697 -0.2028 -0.0768 -0.0703 -0.1076 -0.1584 -0.1536 -0.1970 -0.0563 -0.0470 -0.0759 -0.1076 -0.0919 -0.0519 -0.0669 -0.2080 -0.1345 -0.0985 -0.0843 -0.1936 -0.1076 -0.1412 -0.0861 -0.0696 -0.0948 -0.1790 -0.1646 -0.0872 -0.2940 -0.1431 -0.1710 -0.0954 -0.0951 -0.1438 -0.0687 -0.1233 -1.0544 -0.1101 -0.1511 -0.0921 -0.0879 -0.1176 -0.0862 -0.0521 -0.1567 -1.6264 -0.0628 -0.0925 -0.0824 -0.0821
S-303	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-303	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-303	-0.16377703845500946	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-303	-0.16377703845500946	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || 'i' == c || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-303	-0.0859 -0.0505 -0.9776 -0.0236 -0.1101 -0.8240 -0.0742 -0.0878 -0.0882 -1.2301 -0.0391 -0.0870 -0.0578 -0.6226 -0.0553 -0.0772 -0.2021 -0.1065 -0.1003 -0.0949 -0.0645 -0.0581 -0.1262 -0.0472 -0.0442 -0.0730 -0.0982 -0.0833 -0.1354 -0.1092 -0.9623 -0.0971 -0.0859 -0.1185 -0.1122 -0.1468 -0.0906 -0.0900 -0.0925 -0.1463 -0.1079 -0.3586 -0.0965 -0.3066 -0.1156 -0.1331 -0.0861 -0.1004 -0.1104 -0.1548 -0.0993 -0.6784 -0.0938 -0.0675 -0.0491 -0.1059 -0.1364 -0.0866 -0.0911 -0.0925 -0.1118 -0.1041 -0.2897 -0.0920 -0.3434 -0.1071 -0.1428 -0.0857 -0.0997 -0.0806 -0.2524 -0.1107 -0.2827 -0.1514 -0.0701 -0.1161 -0.0830 -0.1505 -0.1508 -0.2327 -0.0601 -0.1007 -0.0862 -0.2737 -0.2192 -0.0572 -0.0905 -0.3655 -0.1356 -0.3587 -0.1853 -0.2013 -0.0680 -0.0581 -0.1083 -0.1857 -0.1741 -0.1771 -0.0598 -0.0793 -0.0810 -0.1656 -0.1414 -0.1410 -0.0738 -0.0618 -0.0845 -0.1502 -0.1517 -0.1851 -0.0581 -0.1125 -0.0791 -0.1686 -0.1918 -0.1914 -0.0752 -0.0690 -0.1104 -0.1816 -0.1460 -0.1986 -0.0583 -0.0506 -0.0821 -0.1110 -0.1348 -0.1338 -0.0520 -0.0513 -0.0852 -0.0874 -0.0862 -0.2008 -0.1083 -0.1445 -0.0900 -0.0689 -0.0944 -0.1780 -0.1672 -0.0872 -0.3056 -0.1494 -0.1728 -0.0953 -0.0950 -0.1407 -0.0703 -0.1244 -1.0587 -0.1101 -0.1530 -0.0923 -0.0878 -0.1177 -0.0864 -0.0525 -0.1586 -1.6302 -0.0628 -0.0925 -0.0825 -0.0822
S-217	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( 2 + ( int ) c ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-217	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( 2 + ( int ) c ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-217	-0.15986515581607819	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( 2 + ( int ) c ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-217	-0.15986515581607819	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( 2 + ( int ) c ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-217	-0.0859 -0.0509 -0.9832 -0.0234 -0.1093 -0.8284 -0.0742 -0.0878 -0.0882 -1.2181 -0.0391 -0.0864 -0.0578 -0.6143 -0.0548 -0.0772 -0.2009 -0.1073 -0.1028 -0.0910 -0.0644 -0.0576 -0.1264 -0.0472 -0.0446 -0.0730 -0.0983 -0.0834 -0.1354 -0.1091 -0.9784 -0.0965 -0.0852 -0.1164 -0.1116 -0.1394 -0.0912 -0.0899 -0.0926 -0.1463 -0.1069 -0.3616 -0.0964 -0.3051 -0.1158 -0.1282 -0.0867 -0.0995 -0.1104 -0.1540 -0.0992 -0.6959 -0.0938 -0.0666 -0.0500 -0.1061 -0.1305 -0.0871 -0.0910 -0.0925 -0.1108 -0.1038 -0.2996 -0.0919 -0.3401 -0.1071 -0.1377 -0.0855 -0.0980 -0.0807 -0.2469 -0.1106 -0.2699 -0.1546 -0.0682 -0.1173 -0.0845 -0.1564 -0.1450 -0.2287 -0.0582 -0.0979 -0.0869 -0.2657 -0.1474 -0.2244 -0.0731 -0.0704 -0.1189 -0.2249 -0.1380 -0.2022 -0.0744 -0.0506 -0.1109 -0.1971 -0.1482 -0.1907 -0.0610 -0.0862 -0.0821 -0.1647 -0.1328 -0.1469 -0.0739 -0.0617 -0.0852 -0.1517 -0.1468 -0.1932 -0.0565 -0.1103 -0.0797 -0.1680 -0.1542 -0.2006 -0.0745 -0.0693 -0.1094 -0.1656 -0.1359 -0.2052 -0.0577 -0.0491 -0.0822 -0.1102 -0.1284 -0.1404 -0.0519 -0.0525 -0.0864 -0.0880 -0.0850 -0.1890 -0.1066 -0.1466 -0.0825 -0.0707 -0.0970 -0.1545 -0.0842 -0.1409 -0.2409 -0.0964 -0.2088 -0.0941 -0.1000 -0.1448 -0.0721 -0.1244 -1.0713 -0.1101 -0.1524 -0.0931 -0.0873 -0.1200 -0.0872 -0.0525 -0.1619 -1.5994 -0.0633 -0.0918 -0.0831 -0.0815
S-204	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-204	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-204	-0.16089515388011932	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-204	-0.16089515388011932	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'u' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-204	-0.0857 -0.0505 -0.9776 -0.0236 -0.1101 -0.8194 -0.0742 -0.0878 -0.0875 -1.2296 -0.0391 -0.0870 -0.0574 -0.6226 -0.0548 -0.0772 -0.2026 -0.1065 -0.0995 -0.0950 -0.0645 -0.0577 -0.1251 -0.0472 -0.0446 -0.0730 -0.0982 -0.0833 -0.1364 -0.1101 -0.9591 -0.0972 -0.0879 -0.1173 -0.1116 -0.1458 -0.0913 -0.0907 -0.0925 -0.1467 -0.1087 -0.3613 -0.0965 -0.3047 -0.1156 -0.1330 -0.0861 -0.1003 -0.1106 -0.1545 -0.0999 -0.6952 -0.0939 -0.0684 -0.0499 -0.1061 -0.1363 -0.0872 -0.0918 -0.0924 -0.1125 -0.1034 -0.2896 -0.0920 -0.3404 -0.1070 -0.1427 -0.0857 -0.0987 -0.0807 -0.2485 -0.1105 -0.2744 -0.1533 -0.0603 -0.1235 -0.0699 -0.1702 -0.1509 -0.2209 -0.0722 -0.0822 -0.0987 -0.2653 -0.1430 -0.1847 -0.0679 -0.0932 -0.0856 -0.1995 -0.1470 -0.2085 -0.0739 -0.0652 -0.1085 -0.2060 -0.1451 -0.2046 -0.0688 -0.0572 -0.1181 -0.1909 -0.1359 -0.1537 -0.0707 -0.0754 -0.0851 -0.1356 -0.1476 -0.1728 -0.0572 -0.1326 -0.0774 -0.1578 -0.1587 -0.1934 -0.0738 -0.0716 -0.1097 -0.1704 -0.1418 -0.1992 -0.0567 -0.0517 -0.0820 -0.1103 -0.1333 -0.1327 -0.0518 -0.0491 -0.0866 -0.0876 -0.0862 -0.1963 -0.1085 -0.1450 -0.0890 -0.0694 -0.0944 -0.1781 -0.1690 -0.0872 -0.3046 -0.1515 -0.1721 -0.0954 -0.0950 -0.1401 -0.0697 -0.1244 -1.0513 -0.1101 -0.1518 -0.0922 -0.0878 -0.1178 -0.0864 -0.0522 -0.1570 -1.6412 -0.0629 -0.0925 -0.0825 -0.0816
S-147	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-147	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-147	-0.16234992444515228	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-147	-0.16234992444515228	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || 'I' == c || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-147	-0.0863 -0.0509 -0.9768 -0.0234 -0.1101 -0.8235 -0.0742 -0.0878 -0.0882 -1.2296 -0.0391 -0.0870 -0.0578 -0.6227 -0.0553 -0.0772 -0.2026 -0.1066 -0.1003 -0.0948 -0.0649 -0.0577 -0.1260 -0.0475 -0.0442 -0.0730 -0.0982 -0.0838 -0.1355 -0.1092 -0.9549 -0.0972 -0.0859 -0.1191 -0.1113 -0.1456 -0.0913 -0.0906 -0.0924 -0.1463 -0.1079 -0.3608 -0.0965 -0.3055 -0.1155 -0.1330 -0.0861 -0.1003 -0.1104 -0.1550 -0.0992 -0.6783 -0.0938 -0.0675 -0.0487 -0.1059 -0.1362 -0.0872 -0.0911 -0.0931 -0.1117 -0.1034 -0.2896 -0.0920 -0.3410 -0.1070 -0.1426 -0.0856 -0.0997 -0.0806 -0.2550 -0.1106 -0.2790 -0.1486 -0.0695 -0.1121 -0.0838 -0.1504 -0.1476 -0.2230 -0.0606 -0.0928 -0.0882 -0.2557 -0.1670 -0.2134 -0.0740 -0.0700 -0.1175 -0.2245 -0.1417 -0.1994 -0.0744 -0.0494 -0.1100 -0.1839 -0.1512 -0.1876 -0.0617 -0.0884 -0.0814 -0.1581 -0.1434 -0.1419 -0.0743 -0.0612 -0.0852 -0.1514 -0.1544 -0.2282 -0.0581 -0.1140 -0.0758 -0.1690 -0.1833 -0.0600 -0.0985 -0.3137 -0.1266 -0.2342 -0.1682 -0.1857 -0.0531 -0.0535 -0.0817 -0.1040 -0.1496 -0.1284 -0.0507 -0.0511 -0.0837 -0.0869 -0.0853 -0.1982 -0.1072 -0.1442 -0.0900 -0.0693 -0.0949 -0.1760 -0.1651 -0.0870 -0.3000 -0.1498 -0.1722 -0.0953 -0.0949 -0.1402 -0.0688 -0.1233 -1.0628 -0.1101 -0.1519 -0.0921 -0.0877 -0.1177 -0.0864 -0.0521 -0.1567 -1.6308 -0.0633 -0.0925 -0.0825 -0.0821
S-124	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-124	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-124	-0.16216664016246796	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-124	-0.16216664016246796	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-124	-0.0857 -0.0509 -0.9776 -0.0236 -0.1101 -0.8242 -0.0742 -0.0878 -0.0881 -1.2240 -0.0388 -0.0870 -0.0578 -0.6225 -0.0549 -0.0772 -0.2035 -0.1066 -0.0996 -0.0942 -0.0645 -0.0577 -0.1261 -0.0475 -0.0445 -0.0730 -0.0992 -0.0839 -0.1366 -0.1101 -0.9507 -0.0972 -0.0840 -0.1167 -0.1115 -0.1459 -0.0913 -0.0907 -0.0927 -0.1476 -0.1078 -0.3635 -0.0965 -0.3066 -0.1155 -0.1331 -0.0861 -0.1004 -0.1106 -0.1557 -0.0999 -0.6918 -0.0939 -0.0659 -0.0482 -0.1061 -0.1364 -0.0872 -0.0918 -0.0940 -0.1133 -0.1033 -0.2916 -0.0919 -0.3369 -0.1069 -0.1427 -0.0856 -0.0997 -0.0807 -0.2552 -0.1105 -0.2821 -0.1504 -0.0584 -0.1907 -0.0760 -0.1379 -0.1643 -0.2306 -0.0734 -0.0842 -0.0959 -0.2847 -0.1475 -0.1877 -0.0703 -0.0920 -0.0876 -0.2077 -0.1521 -0.2091 -0.0754 -0.0573 -0.1110 -0.2415 -0.1473 -0.2043 -0.0702 -0.0507 -0.1059 -0.2428 -0.1490 -0.1630 -0.0692 -0.0451 -0.0823 -0.1471 -0.1333 -0.1561 -0.0788 -0.0578 -0.0791 -0.1597 -0.1513 -0.1882 -0.0576 -0.1315 -0.0734 -0.1676 -0.1622 -0.1982 -0.0696 -0.0705 -0.1082 -0.1710 -0.1277 -0.1390 -0.0528 -0.0420 -0.0817 -0.0871 -0.0882 -0.1997 -0.1090 -0.1431 -0.0895 -0.0692 -0.0937 -0.1830 -0.1712 -0.0868 -0.2952 -0.1476 -0.1696 -0.0956 -0.0946 -0.1411 -0.0700 -0.1245 -1.0505 -0.1101 -0.1528 -0.0922 -0.0879 -0.1188 -0.0871 -0.0525 -0.1587 -1.6350 -0.0629 -0.0925 -0.0825 -0.0823
S-120	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-120	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-120	-0.16156308352947235	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-120	-0.16156308352947235	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-120	-0.0855 -0.0508 -0.9773 -0.0234 -0.1102 -0.8192 -0.0742 -0.0878 -0.0881 -1.2294 -0.0391 -0.0870 -0.0574 -0.6228 -0.0552 -0.0772 -0.2027 -0.1073 -0.1003 -0.0944 -0.0650 -0.0577 -0.1260 -0.0472 -0.0442 -0.0730 -0.0982 -0.0833 -0.1356 -0.1093 -0.9622 -0.0972 -0.0868 -0.1177 -0.1115 -0.1458 -0.0913 -0.0907 -0.0925 -0.1464 -0.1079 -0.3585 -0.0965 -0.3080 -0.1156 -0.1331 -0.0861 -0.0996 -0.1104 -0.1548 -0.1000 -0.6906 -0.0939 -0.0673 -0.0491 -0.1061 -0.1364 -0.0872 -0.0918 -0.0925 -0.1118 -0.1034 -0.2877 -0.0920 -0.3382 -0.1078 -0.1427 -0.0856 -0.0988 -0.0806 -0.2578 -0.1106 -0.2653 -0.1503 -0.0627 -0.1059 -0.0953 -0.1572 -0.1613 -0.2175 -0.0684 -0.1022 -0.0920 -0.2639 -0.1451 -0.1772 -0.0689 -0.0980 -0.0855 -0.1989 -0.1504 -0.2085 -0.0733 -0.0772 -0.1065 -0.2141 -0.1461 -0.1944 -0.0603 -0.1170 -0.0807 -0.2080 -0.1344 -0.1582 -0.0754 -0.0559 -0.0870 -0.1574 -0.1522 -0.1891 -0.0587 -0.1353 -0.0791 -0.1620 -0.1598 -0.2015 -0.0750 -0.0666 -0.1101 -0.1688 -0.1426 -0.2004 -0.0563 -0.0492 -0.0802 -0.1137 -0.1352 -0.1358 -0.0514 -0.0511 -0.0860 -0.0874 -0.0863 -0.2045 -0.1092 -0.1462 -0.0894 -0.0694 -0.0945 -0.1799 -0.1698 -0.0872 -0.3036 -0.1525 -0.1743 -0.0962 -0.0950 -0.1424 -0.0698 -0.1244 -1.0510 -0.1101 -0.1531 -0.0922 -0.0878 -0.1189 -0.0864 -0.0521 -0.1587 -1.6305 -0.0629 -0.0926 -0.0826 -0.0816
S-119	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-119	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-119	-0.16212742030620575	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-119	-0.16212742030620575	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || 'O' == c || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-119	-0.0863 -0.0509 -0.9777 -0.0234 -0.1101 -0.8238 -0.0743 -0.0878 -0.0875 -1.2300 -0.0391 -0.0870 -0.0574 -0.6227 -0.0553 -0.0772 -0.2022 -0.1074 -0.1009 -0.0950 -0.0645 -0.0576 -0.1252 -0.0472 -0.0442 -0.0731 -0.0983 -0.0833 -0.1354 -0.1093 -0.9611 -0.0972 -0.0858 -0.1177 -0.1114 -0.1467 -0.0913 -0.0899 -0.0925 -0.1474 -0.1079 -0.3580 -0.0965 -0.3058 -0.1156 -0.1331 -0.0861 -0.1004 -0.1104 -0.1548 -0.1000 -0.6825 -0.0938 -0.0670 -0.0495 -0.1059 -0.1373 -0.0872 -0.0918 -0.0933 -0.1134 -0.1042 -0.2876 -0.0920 -0.3363 -0.1070 -0.1438 -0.0856 -0.0997 -0.0806 -0.2507 -0.1107 -0.2818 -0.1503 -0.0693 -0.1146 -0.0837 -0.1454 -0.1566 -0.2213 -0.0605 -0.0962 -0.0875 -0.2562 -0.1583 -0.2203 -0.0751 -0.0684 -0.1162 -0.2184 -0.1690 -0.1973 -0.0730 -0.0486 -0.1099 -0.1913 -0.1590 -0.1888 -0.0624 -0.0830 -0.0820 -0.1597 -0.1477 -0.1439 -0.0740 -0.0607 -0.0849 -0.1422 -0.1685 -0.1971 -0.0600 -0.1047 -0.0774 -0.1599 -0.1900 -0.1909 -0.0757 -0.0671 -0.0992 -0.1453 -0.0732 -0.0455 -0.0641 -0.2793 -0.1275 -0.2250 -0.1495 -0.1341 -0.0493 -0.0512 -0.0826 -0.0868 -0.0856 -0.2148 -0.1081 -0.1440 -0.0898 -0.0698 -0.0947 -0.1749 -0.1669 -0.0878 -0.3087 -0.1524 -0.1727 -0.0952 -0.0949 -0.1443 -0.0695 -0.1234 -1.0567 -0.1101 -0.1529 -0.0921 -0.0878 -0.1176 -0.0862 -0.0525 -0.1570 -1.6329 -0.0633 -0.0925 -0.0825 -0.0821
S-109	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-109	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-109	-0.1629655659198761	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-109	-0.1629655659198761	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || 'E' == c || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-109	-0.0863 -0.0505 -0.9826 -0.0236 -0.1101 -0.8283 -0.0742 -0.0878 -0.0875 -1.2299 -0.0391 -0.0870 -0.0574 -0.6229 -0.0553 -0.0772 -0.2025 -0.1065 -0.1010 -0.0949 -0.0644 -0.0581 -0.1262 -0.0472 -0.0445 -0.0730 -0.0982 -0.0833 -0.1355 -0.1093 -0.9661 -0.0972 -0.0858 -0.1186 -0.1114 -0.1467 -0.0912 -0.0899 -0.0925 -0.1464 -0.1079 -0.3608 -0.0965 -0.3074 -0.1156 -0.1340 -0.0867 -0.1004 -0.1105 -0.1550 -0.1000 -0.6859 -0.0938 -0.0675 -0.0499 -0.1059 -0.1373 -0.0872 -0.0911 -0.0932 -0.1118 -0.1041 -0.2895 -0.0920 -0.3410 -0.1070 -0.1437 -0.0856 -0.0997 -0.0806 -0.2530 -0.1106 -0.2771 -0.1532 -0.0710 -0.1172 -0.0843 -0.1442 -0.1638 -0.2228 -0.0619 -0.0965 -0.0891 -0.2570 -0.1496 -0.2211 -0.0755 -0.0714 -0.1188 -0.2207 -0.1455 -0.2022 -0.0744 -0.0527 -0.1132 -0.1882 -0.1535 -0.1906 -0.0638 -0.0853 -0.0825 -0.1640 -0.1439 -0.1423 -0.0737 -0.0578 -0.0828 -0.1376 -0.1326 -0.1072 -0.0657 -0.3233 -0.1316 -0.2764 -0.1564 -0.2396 -0.0733 -0.0698 -0.1116 -0.1801 -0.1527 -0.1930 -0.0581 -0.0493 -0.0817 -0.1030 -0.1380 -0.1331 -0.0517 -0.0509 -0.0831 -0.0863 -0.0859 -0.2009 -0.1080 -0.1453 -0.0893 -0.0694 -0.0950 -0.1767 -0.1667 -0.0871 -0.3012 -0.1468 -0.1708 -0.0952 -0.0950 -0.1405 -0.0700 -0.1243 -1.0591 -0.1101 -0.1518 -0.0923 -0.0877 -0.1177 -0.0865 -0.0525 -0.1572 -1.6303 -0.0633 -0.0925 -0.0825 -0.0821
S-93	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-93	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-93	-0.16193704307079315	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-93	-0.16193704307079315	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || 'o' == c || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-93	-0.0856 -0.0505 -0.9714 -0.0236 -0.1101 -0.8235 -0.0748 -0.0878 -0.0882 -1.2298 -0.0391 -0.0870 -0.0578 -0.6227 -0.0552 -0.0772 -0.2024 -0.1065 -0.1003 -0.0943 -0.0644 -0.0581 -0.1260 -0.0472 -0.0442 -0.0731 -0.0982 -0.0833 -0.1353 -0.1093 -0.9606 -0.0972 -0.0857 -0.1177 -0.1123 -0.1457 -0.0913 -0.0899 -0.0926 -0.1464 -0.1088 -0.3558 -0.0965 -0.3047 -0.1156 -0.1331 -0.0861 -0.1004 -0.1104 -0.1548 -0.0993 -0.6814 -0.0938 -0.0675 -0.0490 -0.1060 -0.1363 -0.0873 -0.0911 -0.0933 -0.1127 -0.1042 -0.2876 -0.0920 -0.3389 -0.1071 -0.1428 -0.0857 -0.0997 -0.0806 -0.2516 -0.1107 -0.2777 -0.1519 -0.0699 -0.1071 -0.0831 -0.1447 -0.1513 -0.2198 -0.0605 -0.0963 -0.0854 -0.2517 -0.1617 -0.2176 -0.0785 -0.0685 -0.1141 -0.2184 -0.1345 -0.0469 -0.0954 -0.2713 -0.1169 -0.3263 -0.1592 -0.1814 -0.0600 -0.1038 -0.0803 -0.1612 -0.1420 -0.1388 -0.0747 -0.0588 -0.0856 -0.1479 -0.1537 -0.1914 -0.0581 -0.1103 -0.0801 -0.1674 -0.1593 -0.1911 -0.0753 -0.0680 -0.1082 -0.1692 -0.1616 -0.1968 -0.0572 -0.0489 -0.0813 -0.0978 -0.1350 -0.1346 -0.0525 -0.0511 -0.0845 -0.0873 -0.0861 -0.2002 -0.1081 -0.1444 -0.0903 -0.0694 -0.0949 -0.1769 -0.1670 -0.0872 -0.3024 -0.1488 -0.1723 -0.0953 -0.0951 -0.1415 -0.0702 -0.1234 -1.0622 -0.1101 -0.1531 -0.0917 -0.0878 -0.1177 -0.0865 -0.0525 -0.1570 -1.6299 -0.0634 -0.0925 -0.0825 -0.0822
S-57	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-57	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-57	-0.16222694516181946	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-57	-0.16222694516181946	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || 'e' == c || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-57	-0.0861 -0.0509 -0.9773 -0.0234 -0.1101 -0.8241 -0.0742 -0.0878 -0.0882 -1.2296 -0.0391 -0.0870 -0.0574 -0.6227 -0.0552 -0.0772 -0.2024 -0.1066 -0.1010 -0.0955 -0.0645 -0.0581 -0.1251 -0.0472 -0.0442 -0.0730 -0.0982 -0.0833 -0.1353 -0.1092 -0.9665 -0.0971 -0.0866 -0.1186 -0.1115 -0.1468 -0.0906 -0.0900 -0.0924 -0.1474 -0.1080 -0.3564 -0.0965 -0.3076 -0.1164 -0.1332 -0.0861 -0.1004 -0.1103 -0.1550 -0.0993 -0.6859 -0.0938 -0.0676 -0.0500 -0.1060 -0.1364 -0.0866 -0.0911 -0.0933 -0.1118 -0.1040 -0.2879 -0.0920 -0.3440 -0.1071 -0.1429 -0.0857 -0.0997 -0.0805 -0.2479 -0.1107 -0.2766 -0.1568 -0.0730 -0.1117 -0.0783 -0.1382 -0.1056 -0.0752 -0.0691 -0.3313 -0.1178 -0.3558 -0.1702 -0.2154 -0.0705 -0.0706 -0.1202 -0.2372 -0.1524 -0.1996 -0.0716 -0.0526 -0.1121 -0.1950 -0.1566 -0.1878 -0.0617 -0.0883 -0.0815 -0.1626 -0.1375 -0.1448 -0.0732 -0.0606 -0.0850 -0.1497 -0.1562 -0.1976 -0.0570 -0.1133 -0.0797 -0.1643 -0.1581 -0.1964 -0.0750 -0.0681 -0.1100 -0.1722 -0.1456 -0.2004 -0.0581 -0.0496 -0.0827 -0.1105 -0.1350 -0.1358 -0.0516 -0.0517 -0.0852 -0.0873 -0.0861 -0.2034 -0.1083 -0.1462 -0.0900 -0.0694 -0.0944 -0.1789 -0.1683 -0.0872 -0.3023 -0.1491 -0.1724 -0.0953 -0.0950 -0.1408 -0.0701 -0.1234 -1.0567 -0.1101 -0.1519 -0.0911 -0.0877 -0.1177 -0.0862 -0.0525 -0.1572 -1.6308 -0.0629 -0.0925 -0.0825 -0.0822
S-22	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-22	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-22	-0.16410194337368011	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-22	-0.16410194337368011	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( 'a' == c || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-22	-0.0863 -0.0505 -0.9713 -0.0234 -0.1102 -0.8281 -0.0742 -0.0878 -0.0881 -1.2367 -0.0391 -0.0870 -0.0574 -0.6228 -0.0553 -0.0772 -0.1997 -0.1072 -0.1001 -0.0934 -0.0623 -0.0585 -0.1261 -0.0475 -0.0443 -0.0730 -0.0982 -0.0832 -0.1372 -0.1099 -1.0975 -0.0964 -0.0849 -0.1178 -0.1115 -0.1475 -0.0904 -0.0899 -0.0924 -0.1449 -0.1062 -0.3584 -0.0964 -0.3032 -0.1157 -0.1322 -0.0861 -0.0995 -0.1085 -0.1512 -0.1005 -0.7320 -0.0939 -0.0667 -0.0488 -0.1059 -0.1349 -0.0864 -0.0911 -0.0927 -0.1101 -0.1032 -0.2857 -0.0919 -0.3392 -0.1071 -0.1408 -0.0856 -0.0987 -0.0815 -0.2592 -0.1125 -0.2553 -0.0465 -0.0748 -0.1868 -0.1428 -0.4640 -0.1823 -0.2241 -0.0522 -0.1047 -0.0892 -0.2178 -0.1736 -0.2338 -0.0656 -0.0706 -0.1218 -0.2096 -0.1561 -0.2164 -0.0685 -0.0500 -0.1131 -0.1834 -0.1568 -0.1994 -0.0595 -0.0837 -0.0814 -0.1591 -0.1413 -0.1567 -0.0695 -0.0604 -0.0868 -0.1381 -0.1583 -0.2068 -0.0537 -0.1109 -0.0802 -0.1680 -0.1647 -0.2050 -0.0711 -0.0681 -0.1109 -0.1657 -0.1462 -0.2000 -0.0559 -0.0491 -0.0833 -0.1094 -0.1349 -0.1359 -0.0508 -0.0513 -0.0851 -0.0884 -0.0856 -0.2159 -0.1079 -0.1463 -0.0905 -0.0690 -0.0952 -0.1781 -0.1682 -0.0872 -0.3036 -0.1459 -0.1679 -0.0954 -0.0950 -0.1486 -0.0670 -0.1233 -1.0332 -0.1102 -0.1493 -0.0920 -0.0878 -0.1177 -0.0854 -0.0517 -0.1551 -1.6364 -0.0634 -0.0918 -0.0819 -0.0821
S-3	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-3	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
H-3	-0.1612328141927719	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-3	-0.1612328141927719	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'e' || c == 'a' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-3	-0.0856 -0.0509 -0.9827 -0.0236 -0.1101 -0.8237 -0.0742 -0.0878 -0.0881 -1.2298 -0.0391 -0.0870 -0.0578 -0.6227 -0.0552 -0.0772 -0.2027 -0.1065 -0.1004 -0.0942 -0.0649 -0.0581 -0.1260 -0.0472 -0.0442 -0.0730 -0.0982 -0.0833 -0.1358 -0.1092 -0.9751 -0.0972 -0.0861 -0.1163 -0.1115 -0.1447 -0.0912 -0.0906 -0.0925 -0.1465 -0.1079 -0.3608 -0.0965 -0.3069 -0.1155 -0.1321 -0.0867 -0.1003 -0.1105 -0.1550 -0.0999 -0.6945 -0.0938 -0.0680 -0.0497 -0.1060 -0.1353 -0.0872 -0.0917 -0.0925 -0.1117 -0.1034 -0.2894 -0.0920 -0.3429 -0.1070 -0.1426 -0.0856 -0.0988 -0.0806 -0.2524 -0.1106 -0.2607 -0.1472 -0.0619 -0.1699 -0.0801 -0.1536 -0.1586 -0.2302 -0.0696 -0.1111 -0.0977 -0.2367 -0.1524 -0.2126 -0.0733 -0.0576 -0.1144 -0.2235 -0.1427 -0.1934 -0.0669 -0.0607 -0.1095 -0.1940 -0.1473 -0.1912 -0.0609 -0.0858 -0.0794 -0.1658 -0.1337 -0.1476 -0.0736 -0.0609 -0.0856 -0.1538 -0.1501 -0.1828 -0.0585 -0.1159 -0.0804 -0.1646 -0.1584 -0.1983 -0.0741 -0.0675 -0.1100 -0.1654 -0.1429 -0.2064 -0.0576 -0.0499 -0.0828 -0.1132 -0.1351 -0.1390 -0.0520 -0.0520 -0.0852 -0.0874 -0.0862 -0.1990 -0.1084 -0.1458 -0.0894 -0.0695 -0.0944 -0.1798 -0.1689 -0.0878 -0.3024 -0.1506 -0.1725 -0.0961 -0.0950 -0.1421 -0.0695 -0.1244 -1.0597 -0.1101 -0.1519 -0.0922 -0.0877 -0.1189 -0.0858 -0.0525 -0.1586 -1.6294 -0.0634 -0.0925 -0.0825 -0.0822
S-136	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; numbers.length > j; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
T-136	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 1 + i; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
H-136	-0.28827688097953796	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
D-136	-0.28827688097953796	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
P-136	-0.0963 -0.0562 -0.1192 -1.8210 -0.0455 -0.0838 -0.1416 -0.0842 -0.0230 -0.1151 -0.1276 -1.9858 -0.0705 -0.0867 -0.0873 -0.1290 -2.4913 -0.0690 -0.0767 -0.0728 -0.0793 -0.3955 -2.5963 -0.1036 -0.0206 -0.0920 -0.1499 -0.0863 -0.0310 -0.0814 -0.0334 -0.7988 -0.1360 -0.1136 -0.1019 -0.0816 -0.0866 -1.1664 -0.0951 -0.0694 -0.1046 -0.0658 -0.0647 -0.9220 -0.0750 -0.0758 -0.1560 -0.0787 -0.0813 -0.1749 -0.1099 -0.0685 -0.0816 -0.0884 -0.8511 -2.2452 -0.1740 -0.2429 -0.1092 -0.0480 -0.4467 -0.0782 -0.1260 -0.1450 -0.0803 -0.0959 -0.1830 -0.0729 -0.0778 -0.0441 -0.0947 -1.8122 -0.0963 -0.0432 -0.0991 -0.0721 -0.4820 -0.2961 -0.2564 -0.1075 -0.0603 -0.3001 -0.1218 -0.2519 -0.0966 -0.0992 -0.0925 -0.1121 -0.0512 -0.0889 -0.0344 -0.0929 -0.0220 -0.0906 -0.0767 -0.0351 -0.1291 -0.0630 -0.0765 -0.0431 -1.3744 -0.0815 -0.1138 -0.0505 -0.4045 -0.1379 -0.1014 -0.0850 -0.0510 -0.3093 -0.0995 -0.1543 -0.0880 -0.0862 -0.0726 -0.6192 -0.0953 -0.0654 -0.6284 -0.2422 -1.9228 -0.0841 -0.5176 -0.0838 -0.0678 -0.3801 -0.1120 -1.6172 -0.0789 -0.0761 -0.0974 -0.0614 -0.5711 -0.0993 -0.0667 -0.5770 -0.1528 -1.6668 -0.0846 -0.5462 -0.0825 -0.0495 -0.5750 -0.1732 -1.6619 -0.0917 -0.0777 -0.0829 -0.0873 -0.1088 -0.0741 -0.8858 -0.0855 -0.0687
S-240	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; numbers.length > i; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
T-240	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; numbers.length > i; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
H-240	-0.28900963068008423	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; numbers.length > i ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
D-240	-0.28900963068008423	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; numbers.length > i ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
P-240	-0.0960 -0.0567 -0.1183 -1.8123 -0.0458 -0.0837 -0.1409 -0.0835 -0.0229 -0.1151 -0.1278 -1.9770 -0.0714 -0.0873 -0.0872 -0.1300 -2.4686 -0.0690 -0.0767 -0.0732 -0.0784 -0.3294 -3.1761 -0.1038 -0.0207 -0.0922 -0.1447 -0.0864 -0.0305 -0.0809 -0.0327 -0.7877 -0.1384 -0.1136 -0.1027 -0.0814 -0.0844 -1.2613 -0.4708 -0.1008 -0.0772 -0.2302 -0.1270 -0.9901 -0.0787 -0.0730 -0.1519 -0.0776 -0.0846 -0.1446 -0.1103 -0.0676 -0.0837 -0.0893 -0.8643 -0.1275 -0.0604 -0.0849 -0.0943 -0.0704 -1.0671 -0.0838 -0.0645 -0.1563 -0.0791 -0.0932 -0.1249 -0.0714 -0.0791 -0.0469 -0.0940 -1.9639 -0.0961 -0.0429 -0.0997 -0.1036 -0.5196 -0.2801 -0.2435 -0.1110 -0.0580 -0.2746 -0.1268 -0.2586 -0.0997 -0.0984 -0.1241 -0.1170 -0.0690 -0.0850 -0.0357 -0.1109 -0.0252 -0.0952 -0.0779 -0.0664 -0.1469 -0.0749 -0.0782 -0.0432 -1.0763 -0.1765 -0.1198 -0.0739 -0.4967 -0.1613 -0.1248 -0.1188 -0.0533 -0.3156 -0.1080 -0.1883 -0.0931 -0.0910 -0.0904 -0.8904 -0.1029 -0.0746 -0.6397 -0.2408 -1.9797 -0.1038 -0.5406 -0.0912 -0.0746 -0.3844 -0.1188 -1.6782 -0.0797 -0.0828 -0.1089 -0.0690 -0.6300 -0.1017 -0.0701 -0.5115 -0.1578 -1.7046 -0.0895 -0.5401 -0.0860 -0.0514 -0.4495 -0.1761 -1.7052 -0.0955 -0.0815 -0.0832 -0.0896 -0.1078 -0.0794 -0.7589 -0.0867 -0.0687
S-146	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( distance > new_distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
T-146	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; numbers.length > j; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
H-146	-0.2840646207332611	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( distance > new_distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
D-146	-0.2840646207332611	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( distance > new_distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
P-146	-0.0963 -0.0563 -0.1192 -1.8207 -0.0461 -0.0839 -0.1399 -0.0842 -0.0229 -0.1151 -0.1288 -1.9627 -0.0729 -0.0866 -0.0871 -0.1334 -2.4822 -0.0681 -0.0760 -0.0724 -0.0789 -0.4127 -2.4700 -0.1087 -0.0213 -0.0917 -0.1529 -0.0862 -0.0312 -0.0814 -0.0327 -0.7694 -0.1371 -0.1136 -0.1012 -0.0820 -0.0860 -1.1683 -0.0865 -0.0759 -0.1039 -0.0734 -0.0723 -1.1228 -0.0750 -0.0779 -0.1654 -0.0787 -0.0827 -0.1893 -0.1097 -0.0691 -0.0825 -0.0885 -0.8418 -0.1003 -0.0654 -0.0772 -0.0983 -0.0665 -1.3573 -0.0871 -0.0687 -0.1471 -0.0803 -0.0939 -0.1262 -0.0736 -0.0814 -0.0518 -0.0934 -2.0030 -0.0960 -0.0445 -0.1002 -0.1084 -0.5166 -0.3118 -0.2433 -0.1103 -0.0584 -0.2837 -0.1279 -0.2629 -0.0993 -0.0987 -0.1298 -0.1203 -0.0441 -0.1681 -0.0567 -0.0952 -0.0476 -0.0943 -0.0839 -0.0315 -0.1191 -0.0693 -0.0807 -0.0426 -1.0892 -0.1573 -0.1186 -0.0801 -0.4990 -0.1683 -0.1224 -0.1143 -0.0528 -0.3377 -0.1061 -0.1956 -0.0936 -0.0930 -0.0869 -0.8948 -0.1024 -0.0757 -0.6390 -0.2357 -1.9617 -0.1032 -0.5371 -0.0908 -0.0739 -0.3821 -0.1176 -1.6638 -0.0800 -0.0806 -0.1070 -0.0685 -0.6432 -0.1018 -0.0701 -0.5173 -0.1572 -1.7066 -0.0895 -0.5485 -0.0867 -0.0520 -0.4538 -0.1780 -1.6988 -0.0955 -0.0842 -0.0827 -0.0868 -0.1068 -0.0798 -0.7289 -0.0872 -0.0694
S-18	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[j] > numbers[i] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
T-18	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( distance > new_distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
H-18	-0.2868465185165405	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[j] > numbers[i] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
D-18	-0.2868465185165405	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[j] > numbers[i] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
P-18	-0.0963 -0.0567 -0.1191 -1.8130 -0.0458 -0.0838 -0.1409 -0.0842 -0.0229 -0.1152 -0.1269 -1.9674 -0.0727 -0.0867 -0.0867 -0.1314 -2.4928 -0.0695 -0.0762 -0.0724 -0.0796 -0.3987 -2.5446 -0.1059 -0.0210 -0.0920 -0.1477 -0.0862 -0.0313 -0.0814 -0.0331 -0.7815 -0.1383 -0.1137 -0.1046 -0.0825 -0.0858 -1.1630 -0.0872 -0.0781 -0.1035 -0.0720 -0.0725 -1.1139 -0.0750 -0.0773 -0.1634 -0.0787 -0.0821 -0.1965 -0.1096 -0.0700 -0.0849 -0.0907 -0.8490 -0.1003 -0.0679 -0.0758 -0.1003 -0.0675 -1.3086 -0.0852 -0.0675 -0.1502 -0.0803 -0.0939 -0.1271 -0.0722 -0.0791 -0.0456 -0.0933 -1.9802 -0.0961 -0.0432 -0.0990 -0.1064 -0.5301 -0.3573 -0.2492 -0.1085 -0.0575 -0.2858 -0.1330 -0.2600 -0.0990 -0.0987 -0.1254 -0.1156 -0.0634 -0.0854 -0.0347 -0.1063 -0.0260 -0.0948 -0.0802 -0.0599 -0.1470 -0.0807 -0.0795 -0.0435 -1.0317 -0.1836 -0.1217 -0.0848 -0.4984 -0.1895 -0.1272 -0.1182 -0.0489 -0.6008 -0.1880 -0.2857 -0.0949 -0.0985 -0.0910 -0.9088 -0.1006 -0.0740 -0.6235 -0.2354 -1.9991 -0.1030 -0.5384 -0.0867 -0.0739 -0.3811 -0.1165 -1.5928 -0.0794 -0.0812 -0.1050 -0.0702 -0.6401 -0.1028 -0.0714 -0.5259 -0.1553 -1.6707 -0.0901 -0.5560 -0.0861 -0.0513 -0.4368 -0.1656 -1.7462 -0.0964 -0.0829 -0.0835 -0.0871 -0.1058 -0.0789 -0.7360 -0.0868 -0.0695
S-122	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-122	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-122	-0.15551428496837616	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-122	-0.15551428496837616	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; l.size () > i ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; l.size () > i ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-122	-0.0975 -0.0477 -0.2375 -0.3223 -0.0541 -0.1603 -0.0450 -0.0801 -0.0221 -0.1043 -0.1924 -0.2639 -0.0496 -0.1682 -0.0575 -0.0798 -0.0887 -0.2053 -0.2537 -0.0557 -0.1655 -0.1079 -0.0856 -0.0576 -1.6846 -0.1998 -0.0609 -0.1528 -0.0677 -0.0827 -0.1825 -0.2135 -0.0591 -0.1579 -0.0575 -0.0501 -0.0297 -0.0826 -0.0530 -1.4363 -0.2396 -0.0535 -0.1469 -0.0593 -0.0916 -0.0920 -0.1136 -0.0689 -0.0762 -0.0834 -1.0179 -0.1035 -0.1279 -0.1304 -0.0738 -0.1584 -0.1008 -0.5942 -0.0772 -0.1038 -0.0852 -0.0772 -0.0850 -0.1857 -0.0415 -0.0409 -0.1997 -0.2693 -0.1064 -0.0533 -0.1141 -0.1951 -0.1163 -0.0866 -0.0891 -0.0944 -0.0867 -0.0934 -1.2681 -0.0889 -0.0411 -0.1141 -0.0552 -0.0454 -0.0356 -0.1141 -0.0993 -0.1151 -0.1106 -0.0680 -0.0727 -0.0821 -0.7667 -0.0662 -0.1116 -0.1208 -0.0762 -0.1342 -0.0740 -0.4635 -0.0647 -0.0726 -0.2616 -0.0787 -0.0933 -0.1786 -0.1179 -0.1594 -0.2572 -0.0868 -0.1377 -0.1353 -0.0822 -0.0928 -0.0924 -0.1646 -0.2696 -0.1095 -0.4506 -0.0467 -0.0420 -0.2142 -0.2326 -0.1175 -0.0876 -0.0855 -0.0915 -0.0901 -0.0736 -0.0726 -0.0932 -0.1016 -0.1178 -0.2033 -0.1007 -0.0529 -0.1066 -0.1643 -0.1111 -0.0840 -0.0866 -0.0897 -0.0902 -0.0890 -0.0932 -0.0782 -0.0812 -0.1365 -0.0843 -0.0747
S-388	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( 0 == ( i % 2 ) ) ans[i] = 1; else ans[i] = val; } return ans; }
T-388	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( 0 == ( i % 2 ) ) ans[i] = 1; else ans[i] = val; } return ans; }
H-388	-0.23397858440876007	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( 0 == ( i % 2 ) ) ans[i] = 1 ; else ans[i] = val ; } return ans ; }
D-388	-0.23397858440876007	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( 0 == ( i % 2 ) ) ans[i] = 1 ; else ans[i] = val ; } return ans ; }
P-388	-0.1043 -0.0404 -0.1075 -2.1227 -0.0414 -0.0986 -0.0348 -0.1138 -0.0961 -0.1493 -0.0255 -1.0269 -0.0884 -0.1155 -0.0802 -0.0969 -0.1116 -0.1875 -0.0803 -0.0425 -0.0939 -0.0722 -0.7759 -0.1239 -0.0726 -0.0926 -0.0950 -0.0317 -0.1000 -0.0953 -0.7647 -0.1353 -0.1056 -0.0689 -0.0973 -0.0752 -0.5043 -0.0921 -0.0608 -0.1130 -1.6663 -0.0889 -0.4303 -0.0731 -0.0832 -0.1808 -0.1048 -0.0700 -0.1058 -0.0916 -0.4509 -0.1039 -0.0552 -0.0922 -0.4714 -0.0697 -0.2823 -0.0786 -0.0951 -0.1596 -0.1119 -0.0822 -0.2612 -0.2061 -0.0331 -0.1338 -0.1165 -0.1068 -0.1502 -0.0831 -0.0766 -0.2011 -0.1181 -0.1589 -0.1209 -0.1113 -0.0768 -0.0752 -0.1265 -1.8984 -0.0967 -0.2523 -0.1089 -0.0733 -0.9448 -0.0524 -0.2359 -0.1171 -0.0743 -0.1103 -0.3206 -0.7563 -0.0909 -0.0917 -0.1381 -0.1165 -0.1669 -0.1249 -0.0985 -0.0729 -0.0807 -0.0855 -1.7250 -0.0924 -0.0697 -0.1107 -0.0770 -0.6301 -0.0459 -0.1952 -0.1238 -0.1311 -0.1506 -0.0150 -0.0979 -0.1126 -0.0915 -0.0905 -0.1303 -0.1024 -0.1199 -0.1254 -0.1742 -1.5131 -0.1172 -0.0747 -0.0902 -0.0844 -1.7789 -0.0915 -0.0733 -0.1024 -0.0899 -0.5939 -0.0448 -0.1971 -0.1085 -0.1485 -0.1219 -0.0120 -0.1059 -0.0906 -0.0857 -0.0912 -0.1184 -0.1047 -0.0975 -0.1047 -0.1310 -0.1747 -0.1419 -0.0773 -0.0899 -0.0942 -1.7161 -0.0896 -0.1562 -0.1007 -0.0867 -0.7535 -0.0409 -0.2222 -0.1081 -0.0320 -0.1047 -0.1261 -0.4376 -0.0836 -0.0973 -0.0977 -0.0943 -0.0883 -0.1357 -2.5447 -0.0282 -0.1020 -0.0646 -0.0711 -0.3165 -0.1233 -1.1771 -0.1216 -0.1066 -0.0659 -0.0759 -0.0745 -0.5777 -0.0856 -0.0620 -0.1669 -0.6569 -0.0837 -0.5018 -0.0868 -0.1028 -0.1536 -0.1167 -0.3707 -0.0746 -0.1202 -0.0830 -0.0699 -0.0469 -0.0867 -0.0843 -0.0611 -0.6978 -0.2228 -0.1275 -0.0896 -2.3104 -0.1711 -0.0721 -0.0906 -0.4771 -0.1750 -0.1511 -0.1050 -0.0885 -0.6431 -0.0726 -0.0985 -0.0322 -1.3611 -0.0762 -0.0751
S-386	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( 1 == grid[i][j] ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-386	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( 1 == grid[i][j] ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-386	-0.23499301075935364	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( 1 == grid[i][j] ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-386	-0.23499301075935364	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( 1 == grid[i][j] ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-386	-0.1051 -0.0406 -0.1068 -2.1232 -0.0417 -0.0987 -0.0348 -0.1139 -0.0957 -0.1451 -0.0249 -1.0171 -0.0871 -0.1136 -0.0808 -0.0968 -0.1111 -0.1801 -0.0803 -0.0421 -0.0941 -0.0716 -0.7930 -0.1239 -0.0719 -0.0927 -0.0946 -0.0322 -0.0998 -0.0948 -0.7600 -0.1374 -0.1055 -0.0693 -0.0945 -0.0746 -0.5178 -0.0913 -0.0598 -0.1109 -1.5828 -0.0882 -0.4295 -0.0732 -0.0820 -0.1770 -0.1047 -0.0700 -0.1009 -0.0909 -0.4736 -0.1028 -0.0559 -0.0914 -0.4527 -0.0689 -0.2855 -0.0787 -0.0948 -0.1573 -0.1103 -0.6161 -0.0986 -0.0295 -0.2262 -0.1520 -0.0322 -0.1289 -0.1246 -0.0840 -0.0752 -0.1843 -0.1198 -0.1604 -0.1233 -0.1124 -0.0759 -0.0750 -0.1283 -1.9280 -0.0966 -0.2532 -0.1092 -0.0721 -0.9280 -0.0450 -0.2293 -0.1115 -0.0690 -0.1097 -0.4014 -0.7338 -0.0904 -0.0917 -0.1335 -0.1166 -0.1667 -0.1214 -0.0960 -0.0729 -0.0813 -0.0842 -1.7477 -0.0924 -0.0691 -0.1108 -0.0757 -0.6385 -0.0416 -0.1951 -0.1232 -0.1307 -0.1502 -0.0149 -0.0974 -0.1122 -0.0910 -0.0906 -0.1288 -0.1031 -0.1213 -0.1262 -0.1698 -1.3833 -0.1159 -0.0743 -0.0890 -0.0844 -1.8086 -0.0909 -0.0695 -0.1024 -0.0898 -0.5973 -0.0424 -0.1959 -0.1068 -0.1523 -0.1220 -0.0119 -0.1061 -0.0894 -0.0858 -0.0911 -0.1169 -0.1053 -0.0985 -0.1033 -0.1278 -0.1800 -0.1385 -0.0771 -0.0899 -0.0940 -1.7518 -0.0897 -0.1544 -0.1016 -0.0867 -0.7511 -0.0387 -0.2190 -0.1046 -0.0320 -0.1039 -0.1263 -0.4387 -0.0830 -0.0974 -0.0991 -0.0936 -0.0883 -0.1350 -2.5276 -0.0274 -0.1023 -0.0649 -0.0705 -0.3187 -0.1206 -1.1754 -0.1221 -0.1067 -0.0651 -0.0755 -0.0749 -0.5695 -0.0865 -0.0613 -0.1749 -0.6361 -0.0841 -0.5012 -0.0863 -0.1007 -0.1457 -0.1151 -0.3557 -0.1031 -0.0713 -0.0438 -0.0873 -0.0760 -0.1041 -0.0878 -0.0658 -0.7068 -0.2274 -0.1270 -0.0955 -2.2294 -0.4359 -0.2032 -0.0684 -0.4265 -0.1707 -0.1252 -0.1023 -0.0735 -0.7234 -0.0920 -0.0975 -0.0322 -1.1546 -0.0779 -0.0762
S-361	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( n + 1 != j ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-361	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( n - 1 != j ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-361	-0.23360280692577362	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n ) val = Math.min ( val, grid[i - 1][j] ) ; if ( n + 1 != j ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-361	-0.23360280692577362	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n ) val = Math.min ( val, grid[i - 1][j] ) ; if ( n + 1 != j ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-361	-0.1043 -0.0404 -0.1074 -2.1246 -0.0417 -0.0986 -0.0348 -0.1130 -0.0961 -0.1493 -0.0255 -1.0271 -0.0878 -0.1154 -0.0808 -0.0970 -0.1115 -0.1986 -0.0810 -0.0426 -0.0939 -0.0727 -0.7819 -0.1238 -0.0738 -0.0929 -0.0948 -0.0318 -0.1005 -0.0957 -0.7581 -0.1363 -0.1056 -0.0689 -0.0952 -0.0757 -0.5039 -0.0927 -0.0595 -0.1089 -1.6384 -0.0894 -0.4320 -0.0737 -0.0833 -0.1820 -0.1048 -0.0695 -0.1012 -0.0916 -0.4597 -0.1015 -0.0558 -0.0907 -0.4540 -0.0711 -0.2838 -0.0784 -0.0952 -0.1558 -0.1135 -0.0891 -0.2590 -0.2028 -0.0330 -0.1338 -0.1157 -0.1040 -0.1521 -0.0830 -0.0752 -0.1951 -0.1197 -0.1745 -0.1226 -0.1093 -0.0766 -0.0732 -0.1268 -1.8795 -0.0966 -0.2472 -0.1095 -0.0718 -0.9372 -0.0523 -0.2360 -0.1163 -0.0749 -0.1109 -0.3933 -0.7743 -0.0910 -0.0904 -0.1342 -0.1189 -0.1518 -0.1084 -0.0927 -0.0742 -0.0785 -0.0843 -1.7105 -0.0924 -0.0694 -0.1106 -0.0765 -0.6241 -0.0462 -0.1977 -0.1219 -0.1320 -0.1510 -0.0152 -0.1001 -0.1110 -0.0916 -0.0900 -0.1317 -0.1037 -0.1764 -0.1750 -0.1623 -0.9742 -0.0921 -0.0901 -1.7841 -0.0908 -0.1805 -0.1027 -0.0903 -0.5773 -0.0477 -0.1953 -0.1043 -0.2394 -0.1277 -0.0122 -0.1058 -0.0937 -0.0859 -0.0924 -0.1328 -0.1077 -0.1093 -0.1107 -0.1058 -0.0923 -0.0738 -0.0756 -0.0889 -0.0972 -1.7465 -0.0896 -0.1441 -0.1003 -0.0840 -0.7847 -0.0401 -0.2251 -0.1067 -0.0352 -0.1053 -0.1268 -0.4229 -0.0828 -0.0963 -0.0965 -0.0928 -0.0862 -0.1366 -2.5350 -0.0276 -0.1020 -0.0643 -0.0717 -0.3245 -0.1211 -1.1786 -0.1214 -0.1067 -0.0647 -0.0752 -0.0747 -0.5602 -0.0873 -0.0599 -0.1659 -0.6508 -0.0835 -0.5095 -0.0862 -0.1009 -0.1384 -0.1158 -0.2886 -0.1030 -0.0723 -0.0436 -0.0871 -0.0791 -0.1024 -0.0867 -0.0656 -0.6970 -0.2258 -0.1270 -0.0947 -2.2934 -0.4320 -0.1971 -0.0685 -0.4254 -0.1681 -0.1267 -0.1012 -0.0669 -0.7221 -0.0902 -0.0959 -0.0325 -1.1428 -0.0778 -0.0762
S-287	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; n > i; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-287	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; n > i; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-287	-0.23289994895458221	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; n > i; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-287	-0.23289994895458221	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; n > i; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-287	-0.1040 -0.0404 -0.1083 -2.1032 -0.0423 -0.0986 -0.0345 -0.1138 -0.0968 -0.1433 -0.0252 -1.0235 -0.0879 -0.1158 -0.0802 -0.0969 -0.1118 -0.1855 -0.0797 -0.0440 -0.0944 -0.0737 -0.7801 -0.1250 -0.0750 -0.0923 -0.0961 -0.0309 -0.1026 -0.0904 -0.7459 -0.1269 -0.1063 -0.0699 -0.1005 -0.0761 -0.5363 -0.1140 -0.1416 -0.0946 -1.1104 -0.0949 -0.4191 -0.0710 -0.0892 -0.1438 -0.1059 -0.0719 -0.1001 -0.0915 -0.4371 -0.1392 -0.0666 -0.0935 -0.6556 -0.0663 -0.2771 -0.0773 -0.0947 -0.1553 -0.1135 -0.0897 -0.2488 -0.1979 -0.0319 -0.1305 -0.1115 -0.1000 -0.1536 -0.0826 -0.0752 -0.1981 -0.1189 -0.1751 -0.1215 -0.1127 -0.0764 -0.0762 -0.1264 -1.8891 -0.0967 -0.2531 -0.1089 -0.0739 -0.9447 -0.0527 -0.2325 -0.1155 -0.0719 -0.1111 -0.3464 -0.7450 -0.0910 -0.0910 -0.1385 -0.1164 -0.1690 -0.1217 -0.0963 -0.0729 -0.0802 -0.0855 -1.7114 -0.0924 -0.0696 -0.1099 -0.0771 -0.6218 -0.0463 -0.1923 -0.1228 -0.1315 -0.1514 -0.0146 -0.0987 -0.1111 -0.0915 -0.0905 -0.1279 -0.1024 -0.1224 -0.1233 -0.1642 -1.5748 -0.1186 -0.0746 -0.0885 -0.0845 -1.7732 -0.0916 -0.0711 -0.1016 -0.0900 -0.5843 -0.0452 -0.1957 -0.1084 -0.1500 -0.1217 -0.0119 -0.1061 -0.0906 -0.0857 -0.0906 -0.1200 -0.1047 -0.0995 -0.1024 -0.1334 -0.1770 -0.1460 -0.0772 -0.0908 -0.0937 -1.7163 -0.0897 -0.1564 -0.1008 -0.0874 -0.7410 -0.0408 -0.2207 -0.1064 -0.0313 -0.1056 -0.1260 -0.4366 -0.0836 -0.0973 -0.0966 -0.0959 -0.0900 -0.1372 -2.5202 -0.0278 -0.1022 -0.0647 -0.0716 -0.3200 -0.1204 -1.1774 -0.1207 -0.1075 -0.0650 -0.0747 -0.0735 -0.6011 -0.0959 -0.0789 -0.1120 -0.8117 -0.0822 -0.4945 -0.0849 -0.1010 -0.1408 -0.1158 -0.2966 -0.1044 -0.0721 -0.0440 -0.0870 -0.0792 -0.1039 -0.0861 -0.0661 -0.6965 -0.2202 -0.1271 -0.0941 -2.2876 -0.4223 -0.1944 -0.0674 -0.4226 -0.1666 -0.1268 -0.1006 -0.0727 -0.7026 -0.0914 -0.0966 -0.0331 -1.1062 -0.0778 -0.0767
S-123	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; n > j; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-123	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; n > j; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-123	-0.2334282398223877	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; n > j; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-123	-0.2334282398223877	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; n > j; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-123	-0.1040 -0.0404 -0.1082 -2.1027 -0.0420 -0.0987 -0.0348 -0.1138 -0.0968 -0.1444 -0.0255 -1.0221 -0.0878 -0.1167 -0.0808 -0.0969 -0.1123 -0.1972 -0.0804 -0.0426 -0.0944 -0.0732 -0.7820 -0.1259 -0.0751 -0.0922 -0.0926 -0.0315 -0.0972 -0.0965 -0.7324 -0.1303 -0.1063 -0.0700 -0.0960 -0.0754 -0.4835 -0.1002 -0.0542 -0.0993 -1.2871 -0.0819 -0.4501 -0.0735 -0.0835 -0.1835 -0.1051 -0.0729 -0.1054 -0.0908 -0.4434 -0.1767 -0.1334 -0.0722 -0.5330 -0.0529 -0.3042 -0.0754 -0.0970 -0.1582 -0.1137 -0.0911 -0.2484 -0.1977 -0.0314 -0.1334 -0.1106 -0.0997 -0.1529 -0.0824 -0.0747 -0.1976 -0.1188 -0.1662 -0.1222 -0.1105 -0.0763 -0.0755 -0.1263 -1.8974 -0.0967 -0.2513 -0.1088 -0.0740 -0.9435 -0.0524 -0.2341 -0.1147 -0.0722 -0.1121 -0.3326 -0.7380 -0.0909 -0.0910 -0.1384 -0.1175 -0.1601 -0.1263 -0.0953 -0.0733 -0.0808 -0.0849 -1.7194 -0.0925 -0.0698 -0.1108 -0.0776 -0.6262 -0.0456 -0.1937 -0.1228 -0.1310 -0.1502 -0.0148 -0.0986 -0.1112 -0.0908 -0.0899 -0.1291 -0.1031 -0.1202 -0.1246 -0.1666 -1.4384 -0.1154 -0.0745 -0.0899 -0.0845 -1.7717 -0.0916 -0.0704 -0.1024 -0.0899 -0.5931 -0.0449 -0.1971 -0.1085 -0.1537 -0.1208 -0.0118 -0.1067 -0.0906 -0.0857 -0.0906 -0.1181 -0.1056 -0.1003 -0.1036 -0.1322 -0.1752 -0.1455 -0.0771 -0.0908 -0.0936 -1.7089 -0.0897 -0.1552 -0.1008 -0.0875 -0.7465 -0.0406 -0.2206 -0.1072 -0.0312 -0.1062 -0.1257 -0.4318 -0.0830 -0.0974 -0.0957 -0.0959 -0.0901 -0.1353 -2.5221 -0.0280 -0.1022 -0.0647 -0.0716 -0.3179 -0.1192 -1.1781 -0.1195 -0.1066 -0.0651 -0.0752 -0.0747 -0.5604 -0.0922 -0.0534 -0.1658 -0.9928 -0.0809 -0.5096 -0.0867 -0.1012 -0.1397 -0.1152 -0.2936 -0.1019 -0.0727 -0.0438 -0.0871 -0.0785 -0.1033 -0.0863 -0.0650 -0.6917 -0.2219 -0.1271 -0.0942 -2.3143 -0.4232 -0.1958 -0.0668 -0.4197 -0.1668 -0.1269 -0.1014 -0.0727 -0.7087 -0.0911 -0.0968 -0.0329 -1.1095 -0.0779 -0.0761
S-92	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; k > i; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-92	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; k > i; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-92	-0.2354031801223755	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; k > i; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-92	-0.2354031801223755	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; k > i; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-92	-0.1042 -0.0404 -0.1074 -2.1057 -0.0417 -0.0985 -0.0345 -0.1129 -0.0961 -0.1462 -0.0249 -1.0234 -0.0876 -0.1160 -0.0756 -0.0968 -0.1120 -0.1791 -0.0802 -0.0414 -0.0939 -0.0728 -0.7786 -0.1239 -0.0738 -0.0920 -0.0938 -0.0315 -0.0991 -0.0953 -0.7636 -0.1340 -0.1062 -0.0689 -0.0958 -0.0754 -0.5110 -0.0904 -0.0558 -0.0960 -1.3253 -0.0820 -0.4724 -0.0746 -0.0834 -0.1743 -0.1045 -0.0705 -0.1041 -0.0913 -0.4416 -0.0946 -0.0534 -0.0835 -0.7931 -0.0683 -0.2807 -0.0782 -0.0954 -0.1581 -0.1127 -0.1018 -0.2586 -0.2065 -0.0322 -0.1332 -0.1132 -0.1025 -0.1581 -0.0831 -0.0750 -0.1970 -0.1189 -0.1691 -0.1203 -0.1090 -0.0769 -0.0756 -0.1263 -1.8972 -0.0967 -0.2508 -0.1089 -0.0724 -0.9398 -0.0517 -0.2325 -0.1146 -0.0713 -0.1110 -0.3230 -0.7397 -0.0909 -0.0911 -0.1380 -0.1165 -0.1636 -0.1237 -0.0963 -0.0734 -0.0808 -0.0855 -1.7188 -0.0924 -0.0696 -0.1108 -0.0770 -0.6188 -0.0457 -0.1938 -0.1220 -0.1312 -0.1515 -0.0148 -0.0979 -0.1111 -0.0915 -0.0898 -0.1302 -0.1024 -0.1217 -0.1235 -0.1709 -1.4713 -0.1164 -0.0746 -0.0891 -0.0844 -1.7717 -0.0909 -0.0693 -0.1024 -0.0900 -0.5860 -0.0446 -0.1957 -0.1069 -0.1501 -0.1218 -0.0119 -0.1060 -0.0900 -0.0858 -0.0906 -0.1172 -0.1047 -0.0961 -0.1032 -0.1311 -0.1714 -0.1442 -0.0772 -0.0902 -0.0935 -1.7158 -0.0897 -0.1552 -0.1007 -0.0875 -0.7379 -0.0403 -0.2222 -0.1057 -0.0313 -0.1049 -0.1261 -0.4332 -0.0830 -0.0966 -0.0966 -0.0948 -0.0882 -0.1318 -2.5122 -0.0275 -0.1021 -0.0656 -0.0710 -0.3170 -0.1198 -1.1459 -0.1152 -0.1088 -0.0636 -0.0782 -0.0749 -0.6033 -0.1745 -0.2868 -0.0898 -0.9407 -0.0908 -0.5467 -0.0835 -0.1054 -0.1343 -0.1168 -0.2446 -0.1334 -0.0755 -0.0458 -0.0871 -0.0800 -0.1027 -0.0854 -0.0626 -0.6787 -0.2123 -0.1233 -0.0933 -2.3529 -0.4121 -0.2036 -0.0671 -0.4191 -0.1603 -0.1266 -0.1003 -0.0713 -0.7210 -0.0938 -0.0972 -0.0327 -1.1385 -0.0781 -0.0776
S-87	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( 0 != j ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-87	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( n - 1 != i ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-87	-0.2355380356311798	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( 0 != j ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-87	-0.2355380356311798	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( 0 != j ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-87	-0.1043 -0.0407 -0.1074 -2.1236 -0.0417 -0.0986 -0.0348 -0.1130 -0.0961 -0.1483 -0.0255 -1.0271 -0.0878 -0.1164 -0.0808 -0.0970 -0.1115 -0.1838 -0.0804 -0.0425 -0.0946 -0.0722 -0.7839 -0.1244 -0.0737 -0.0928 -0.0948 -0.0319 -0.0998 -0.0952 -0.7552 -0.1357 -0.1056 -0.0689 -0.0947 -0.0752 -0.4946 -0.0921 -0.0603 -0.1119 -1.6742 -0.0889 -0.4322 -0.0737 -0.0834 -0.1778 -0.1048 -0.0700 -0.1017 -0.0914 -0.4456 -0.1039 -0.0555 -0.0929 -0.4832 -0.0702 -0.2805 -0.0785 -0.0953 -0.1563 -0.1126 -0.0845 -0.2590 -0.2047 -0.0322 -0.1335 -0.1150 -0.1047 -0.1552 -0.0831 -0.0742 -0.1922 -0.1160 -0.1717 -0.1133 -0.1079 -0.0764 -0.0737 -0.1260 -1.8991 -0.0968 -0.2362 -0.1082 -0.0715 -0.9385 -0.0525 -0.2344 -0.1168 -0.0648 -0.1116 -0.3095 -0.7242 -0.0903 -0.0906 -0.1502 -0.1103 -0.5604 -0.0960 -0.0909 -0.0744 -0.0756 -0.0851 -1.7622 -0.0933 -0.0658 -0.1107 -0.0750 -0.6713 -0.0474 -0.2030 -0.1228 -0.1325 -0.1552 -0.0155 -0.0987 -0.1168 -0.0915 -0.0912 -0.1294 -0.1039 -0.1125 -0.1194 -0.1596 -0.6149 -0.0894 -0.0885 -1.7882 -0.0907 -0.0806 -0.1017 -0.0862 -0.5632 -0.0449 -0.1973 -0.1101 -0.1458 -0.1150 -0.0118 -0.1074 -0.0895 -0.0858 -0.0915 -0.1120 -0.1063 -0.0898 -0.1049 -0.1198 -0.5730 -0.0854 -0.0963 -1.7114 -0.0895 -0.1557 -0.1015 -0.0842 -0.7520 -0.0415 -0.2288 -0.1091 -0.0322 -0.1071 -0.1295 -0.4241 -0.0825 -0.0966 -0.0987 -0.0938 -0.0868 -0.1349 -2.5345 -0.0280 -0.1020 -0.0647 -0.0717 -0.3248 -0.1220 -1.1841 -0.1213 -0.1060 -0.0647 -0.0758 -0.0753 -0.5505 -0.0877 -0.0602 -0.1709 -0.6470 -0.0846 -0.5085 -0.0864 -0.1010 -0.1398 -0.1150 -0.2962 -0.1005 -0.0721 -0.0435 -0.0866 -0.0791 -0.1013 -0.0858 -0.0648 -0.6973 -0.2259 -0.1254 -0.0938 -2.3148 -0.4366 -0.1747 -0.0700 -0.4253 -0.1683 -0.1261 -0.1013 -0.0672 -0.7305 -0.0894 -0.0961 -0.0323 -1.1736 -0.0779 -0.0761
S-1	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( 0 != i ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-1	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( 0 != i ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-1	-0.23679378628730774	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( 0 != i ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1 ; else ans[i] = val ; } return ans ; }
D-1	-0.23679378628730774	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( 0 != i ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1 ; else ans[i] = val ; } return ans ; }
P-1	-0.1043 -0.0407 -0.1075 -2.1232 -0.0417 -0.0986 -0.0348 -0.1138 -0.0961 -0.1493 -0.0255 -1.0255 -0.0878 -0.1164 -0.0808 -0.0969 -0.1117 -0.1843 -0.0803 -0.0425 -0.0939 -0.0722 -0.7824 -0.1247 -0.0731 -0.0928 -0.0961 -0.0322 -0.0999 -0.0954 -0.7585 -0.1353 -0.1056 -0.0690 -0.0963 -0.0757 -0.4812 -0.0906 -0.0608 -0.1128 -1.6460 -0.0890 -0.4308 -0.0732 -0.0833 -0.1783 -0.1048 -0.0700 -0.1049 -0.0915 -0.4427 -0.1023 -0.0549 -0.0921 -0.4840 -0.0686 -0.2796 -0.0780 -0.0953 -0.1583 -0.1135 -0.0815 -0.2642 -0.2000 -0.0337 -0.1335 -0.1157 -0.1053 -0.1542 -0.0824 -0.0763 -0.1998 -0.1176 -0.4288 -0.0918 -0.1415 -0.0751 -0.0744 -0.1253 -1.9464 -0.0974 -0.2431 -0.1081 -0.0707 -1.0048 -0.0576 -0.2364 -0.1183 -0.0675 -0.1095 -0.3147 -0.7573 -0.0913 -0.0902 -0.1398 -0.1136 -0.2265 -0.1216 -0.2148 -0.0713 -0.0790 -0.0856 -1.7300 -0.0924 -0.0688 -0.1100 -0.0763 -0.6325 -0.0465 -0.1965 -0.1220 -0.1339 -0.1512 -0.0148 -0.0972 -0.1111 -0.0917 -0.0897 -0.1313 -0.1025 -0.1042 -0.1185 -0.1227 -0.7347 -0.0985 -0.0890 -1.7956 -0.0901 -0.0882 -0.1021 -0.0885 -0.5752 -0.0451 -0.1972 -0.1098 -0.1520 -0.1166 -0.0120 -0.1062 -0.0888 -0.0859 -0.0915 -0.1175 -0.1052 -0.0954 -0.1004 -0.1240 -0.5974 -0.0868 -0.0968 -1.7212 -0.0889 -0.1498 -0.1015 -0.0851 -0.7463 -0.0411 -0.2287 -0.1089 -0.0339 -0.1050 -0.1287 -0.4205 -0.0826 -0.0973 -0.0976 -0.0935 -0.0877 -0.1339 -2.5286 -0.0280 -0.1019 -0.0647 -0.0716 -0.3248 -0.1211 -1.1799 -0.1213 -0.1061 -0.0647 -0.0758 -0.0760 -0.5280 -0.0869 -0.0603 -0.1691 -0.6512 -0.0840 -0.5091 -0.0865 -0.1011 -0.1384 -0.1150 -0.2637 -0.1001 -0.0695 -0.0433 -0.0868 -0.0775 -0.1016 -0.0855 -0.0651 -0.6928 -0.2220 -0.1263 -0.0938 -2.5674 -0.1579 -0.0733 -0.0934 -0.4826 -0.1774 -0.1572 -0.1028 -0.1079 -0.6010 -0.0737 -0.0980 -0.0320 -1.3651 -0.0767 -0.0756
S-246	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( n - 1 != i ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-246	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[1 + i][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-246	-0.22884778678417206	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( n - 1 != i ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-246	-0.22884778678417206	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( n - 1 != i ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-246	-0.1043 -0.0404 -0.1074 -2.1235 -0.0420 -0.0986 -0.0348 -0.1130 -0.0961 -0.1483 -0.0253 -1.0272 -0.0878 -0.1156 -0.0802 -0.0969 -0.1122 -0.2074 -0.0800 -0.0429 -0.0939 -0.0727 -0.7756 -0.1245 -0.0722 -0.0928 -0.0937 -0.0319 -0.0985 -0.0942 -0.7361 -0.1332 -0.1056 -0.0690 -0.0969 -0.0757 -0.4947 -0.0917 -0.0612 -0.1107 -1.6473 -0.0891 -0.4284 -0.0732 -0.0833 -0.1772 -0.1048 -0.0700 -0.1049 -0.0916 -0.4507 -0.1039 -0.0553 -0.0926 -0.4799 -0.0692 -0.2792 -0.0786 -0.0954 -0.1576 -0.1134 -0.0877 -0.2606 -0.2017 -0.0328 -0.1335 -0.1147 -0.1055 -0.1539 -0.0830 -0.0746 -0.1970 -0.1199 -0.1706 -0.1642 -0.1104 -0.0769 -0.0685 -0.1244 -1.9056 -0.0969 -0.2549 -0.1088 -0.0702 -0.9440 -0.0519 -0.2359 -0.1148 -0.0696 -0.1111 -0.3254 -0.7358 -0.0910 -0.0912 -0.1392 -0.1214 -0.1432 -0.1665 -0.1058 -0.0742 -0.0742 -0.0843 -1.7144 -0.0925 -0.0701 -0.1106 -0.0737 -0.6333 -0.0466 -0.1966 -0.1180 -0.1355 -0.1526 -0.0148 -0.0970 -0.1127 -0.0919 -0.0900 -0.1351 -0.1056 -0.2973 -0.1803 -0.1072 -0.1474 -0.0825 -0.0804 -0.0894 -0.0835 -1.8165 -0.0912 -0.0610 -0.1021 -0.0863 -0.6450 -0.0445 -0.2015 -0.1066 -0.1316 -0.1223 -0.0120 -0.1093 -0.0936 -0.0868 -0.0908 -0.1317 -0.1072 -0.1422 -0.1454 -0.1668 -0.2104 -0.1261 -0.0755 -0.0889 -0.0937 -1.7077 -0.0892 -0.1553 -0.1014 -0.0861 -0.7558 -0.0406 -0.2232 -0.1049 -0.0314 -0.1048 -0.1225 -0.4289 -0.0835 -0.0962 -0.0980 -0.0942 -0.0870 -0.1390 -2.5239 -0.0276 -0.1021 -0.0642 -0.0716 -0.3204 -0.1193 -1.1894 -0.1206 -0.1067 -0.0646 -0.0755 -0.0748 -0.5573 -0.0865 -0.0600 -0.1677 -0.6407 -0.0847 -0.5038 -0.0863 -0.1010 -0.1400 -0.1158 -0.2924 -0.1017 -0.0726 -0.0438 -0.0869 -0.0778 -0.1030 -0.0866 -0.0660 -0.6936 -0.2225 -0.1278 -0.0948 -2.2125 -0.4224 -0.2140 -0.0678 -0.4226 -0.1657 -0.1267 -0.1013 -0.0663 -0.7092 -0.0917 -0.0960 -0.0326 -1.1155 -0.0779 -0.0762
S-139	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += " " + number; } return result.trim () ; }
T-139	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array, new Comparator<String> () { public int compare ( String n1, String n2 ) { return value_map.get ( n1 ) - value_map.get ( n2 ) ; } } ) ; String result = ""; for ( String number : number_array ) { result += " " + number; } return result.trim () ; }
H-139	-0.25184378027915955	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += " " + number ; } return result.trim () ; }
D-139	-0.25184378027915955	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += " " + number ; } return result.trim () ; }
P-139	-0.0890 -0.0561 -1.8145 -0.0391 -0.1023 -0.0654 -0.1193 -1.6508 -0.0581 -0.0959 -0.0847 -0.1152 -0.8606 -0.2234 -0.0667 -0.1903 -0.9917 -0.1909 -0.0497 -0.0933 -0.0478 -0.0829 -0.0596 -1.0114 -0.2203 -0.0662 -0.2177 -0.9080 -0.2021 -0.0756 -0.0816 -0.0830 -0.1003 -0.0730 -0.1113 -0.1847 -0.1075 -0.0749 -0.0640 -2.0386 -0.1116 -0.0889 -0.0947 -0.0675 -0.1030 -0.0795 -0.0974 -0.1956 -0.1102 -0.0845 -0.0352 -1.6831 -0.2167 -0.0901 -0.0926 -0.0659 -0.1046 -0.0792 -0.0967 -0.2013 -0.1081 -0.0868 -0.0422 -1.7272 -0.0767 -0.0851 -0.0936 -0.0667 -0.1052 -0.0837 -0.0981 -0.2163 -0.1127 -0.0857 -0.1018 -2.0834 -0.0480 -0.0890 -0.0963 -0.0603 -0.1052 -0.0870 -0.0982 -0.1963 -0.1132 -0.0882 -0.0296 -1.6029 -0.0720 -0.0914 -0.0956 -0.0552 -0.0999 -0.0829 -0.0979 -0.1825 -0.1149 -0.0895 -0.0740 -1.7377 -0.0634 -0.0860 -0.0909 -0.0630 -0.1007 -0.0837 -0.0996 -0.1948 -0.1127 -0.0868 -0.0132 -1.6119 -0.0543 -0.0833 -0.0946 -0.0588 -0.0992 -0.0856 -0.0984 -0.1632 -0.1116 -0.0884 -0.0361 -0.0080 -1.5838 -0.0765 -0.0882 -0.0904 -0.0529 -0.0970 -0.0758 -0.0986 -0.1417 -0.1065 -0.0913 -0.0043 -1.4154 -0.0807 -0.0820 -0.0898 -0.0697 -0.0975 -0.0774 -0.1025 -0.1815 -0.1064 -0.0776 -0.1233 -0.0199 -1.8377 -0.0258 -0.0868 -0.0893 -0.9376 -0.2332 -0.0731 -0.1501 -0.0320 -0.0920 -0.0350 -0.0910 -0.0574 -0.9097 -0.2895 -0.0694 -0.1244 -0.1309 -3.1196 -0.0631 -0.3401 -0.0885 -0.0087 -0.2003 -0.0171 -0.1090 -0.1239 -0.2186 -0.4767 -0.1109 -0.0825 -0.0791 -0.0946 -0.0929 -0.0880 -0.1177 -1.3801 -0.0837 -0.0333 -0.1100 -0.0323 -0.0791 -0.0342 -0.0985 -0.1008 -0.7585 -0.0914 -0.0861 -1.1463 -0.1413 -0.1103 -1.8530 -0.0411 -0.0691 -0.0268 -0.0856 -0.0266 -0.0882 -0.0848 -0.0751 -0.0334 -0.0868 -0.0685 -0.0550 -0.0423 -1.3527 -0.0709 -0.0786 -0.0747 -0.1218 -1.1035 -0.0781 -0.0843 -0.0786 -0.0853
S-374	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder () ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( "" != digit_map.get ( num ) ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
T-374	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder () ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( null != digit_map.get ( num ) ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
H-374	-0.1373904049396515	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( "" != digit_map.get ( num ) ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
D-374	-0.1373904049396515	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( "" != digit_map.get ( num ) ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
P-374	-0.0929 -0.0403 -1.1934 -0.1966 -0.0611 -0.1174 -0.0391 -0.0834 -0.0304 -0.1164 -0.9672 -0.2074 -0.0379 -0.1710 -0.0782 -0.0844 -0.0864 -0.1167 -0.1773 -0.0324 -0.1552 -0.6195 -0.1018 -0.0294 -0.0859 -0.0456 -0.0855 -0.0535 -0.8523 -0.1840 -0.0743 -0.0805 -0.0954 -0.0977 -0.0571 -0.1132 -0.1500 -0.1021 -0.5718 -0.1198 -0.0431 -0.0745 -0.1004 -0.0903 -0.0799 -0.0978 -0.0673 -0.0983 -0.1486 -0.1099 -0.2310 -0.1198 -0.0289 -0.0691 -0.0888 -0.0922 -0.0686 -0.1020 -0.0783 -0.0977 -0.1512 -0.1085 -0.1848 -0.0975 -0.0329 -0.0706 -0.0873 -0.0902 -0.0626 -0.0994 -0.0754 -0.0980 -0.1407 -0.1118 -0.1878 -0.1046 -0.0414 -0.0786 -0.0859 -0.0924 -0.0644 -0.0974 -0.0808 -0.0993 -0.1590 -0.1112 -0.1452 -0.1023 -0.0506 -0.0171 -0.0782 -0.0901 -0.0883 -0.0658 -0.0982 -0.0772 -0.0989 -0.1435 -0.1156 -0.1118 -0.0982 -0.0374 -0.0164 -0.0837 -0.0898 -0.0877 -0.0571 -0.0920 -0.0726 -0.0996 -0.1273 -0.1124 -0.1242 -0.1042 -0.0548 -0.0668 -0.0796 -0.0888 -0.0893 -0.0864 -0.0967 -0.0740 -0.1017 -0.1322 -0.1127 -0.1865 -0.0987 -0.0526 -0.0148 -0.0829 -0.0843 -0.0896 -0.1582 -0.0926 -0.0706 -0.1021 -0.1563 -0.1040 -0.2386 -0.0988 -0.0303 -0.0142 -0.0836 -0.0903 -0.0899 -3.5175 -0.2786 -0.0884 -0.1623 -0.0603 -0.0858 -0.0430 -0.7717 -0.2731 -0.0696 -0.0857 -0.0978 -0.1102 -0.0739 -0.0721 -0.1112 -0.0749 -0.1001 -0.0943 -0.1569 -0.1111 -0.0486 -0.1461 -0.1522 -0.1099 -0.0550 -0.1341 -0.1707 -0.1170 -0.0744 -0.0965 -0.0974 -0.0921 -0.0691 -0.1665 -0.2137 -0.1104 -0.0491 -0.0976 -0.0563 -0.1086 -0.1247 -0.1127 -0.0839 -0.0916 -0.1053 -0.0959 -0.0886 -0.1027 -0.0587 -0.0766 -0.1203 -0.0808 -0.0824
S-295	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "lower" ) ) || ( state.equals ( "upper" ) ) ; } }
T-295	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( !str_key.toUpperCase () .equals ( str_key ) && state.equals ( "upper" ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase () .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-295	-0.19568465650081635	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "lower" ) ) || ( state.equals ( "upper" ) ) ; } }
D-295	-0.19568465650081635	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "lower" ) ) || ( state.equals ( "upper" ) ) ; } }
P-295	-0.0933 -0.0466 -0.0816 -0.0496 -0.0901 -0.0423 -0.0810 -0.0343 -0.1170 -0.6810 -0.1536 -0.0543 -0.1659 -0.3955 -0.2004 -0.0427 -0.0798 -0.0905 -0.2908 -0.1118 -0.0412 -0.1351 -0.1353 -0.0778 -0.1795 -0.1096 -0.0843 -0.0888 -0.0931 -1.4385 -0.1424 -0.1003 -1.0686 -0.0759 -0.0844 -0.0977 -0.0314 -0.8518 -0.2062 -0.1043 -0.8515 -0.0701 -0.0624 -0.0262 -0.1004 -0.0355 -0.0474 -0.0758 -0.0847 -0.0964 -0.1164 -0.1120 -0.0719 -0.1246 -0.0624 -0.0218 -0.6422 -0.0937 -0.0851 -0.1234 -0.0822 -0.1029 -0.1016 -0.1398 -0.4288 -0.0594 -0.0748 -0.0721 -1.2046 -0.0632 -0.0962 -0.0477 -0.0826 -0.1320 -0.6137 -0.0691 -0.0689 -1.1080 -0.0960 -0.1146 -0.1065 -0.1143 -1.4964 -0.1066 -0.1019 -0.0859 -0.0794 -0.0851 -0.0793 -0.1250 -0.1184 -0.1196 -0.1092 -0.1026 -0.0461 -0.1231 -0.5819 -0.0640 -0.1099 -1.6813 -0.1022 -0.0699 -0.1038 -0.0582 -0.1295 -0.0885 -0.1364 -0.0826 -0.0992 -0.0952 -0.6729 -0.0762 -0.0930 -0.1116 -0.0852 -0.1030 -0.0422 -0.1085 -0.4155 -0.0630 -0.1181 -0.9478 -0.1057 -0.0777 -0.1055 -0.0552 -0.1152 -0.0852 -0.0703 -0.0840 -0.0928 -0.0625 -0.3990 -0.0920 -0.1339 -0.0537 -0.0937 -0.1060 -0.1638 -0.4173 -0.0736 -0.0906 -0.0720 -0.0762 -0.0889 -0.0933 -0.1097 -0.0843 -0.1084 -1.5668 -0.1136 -0.1051 -0.0991 -0.0863 -0.0889 -0.5123 -0.1497 -0.1743 -0.0948 -0.0304 -0.1296 -0.5951 -0.0688 -0.1064 -1.2448 -0.1119 -0.0768 -0.0921 -0.0490 -0.1067 -0.0885 -0.1920 -0.0537 -0.1046 -0.1075 -0.1854 -0.4327 -0.0615 -0.0949 -0.0765 -0.0855 -0.1201 -0.3512 -0.0506 -0.1485 -1.5430 -0.1052 -0.1009 -0.1648 -0.0841 -0.0901 -0.0880 -0.0742 -0.1088 -0.0425 -0.1055 -1.1548 -0.1015 -0.0939 -0.1606 -0.0784 -0.0828 -0.0958 -0.1026 -0.0806 -0.1532 -0.0803
S-294	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( 0 == dict.size () ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-294	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( 0 == dict.size () ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase () .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-294	-0.1967482566833496	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( 0 == dict.size () ) return false ; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-294	-0.1967482566833496	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( 0 == dict.size () ) return false ; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-294	-0.0933 -0.0472 -0.0806 -0.0499 -0.0903 -0.0411 -0.0817 -0.0340 -0.1172 -0.6838 -0.1488 -0.0539 -0.1648 -0.3960 -0.1984 -0.0387 -0.0803 -0.0905 -0.3043 -0.1088 -0.2799 -0.1257 -0.0487 -0.1124 -0.1344 -0.0654 -0.0829 -0.0879 -0.0887 -1.4826 -0.1477 -0.1006 -1.0531 -0.0751 -0.0845 -0.0980 -0.0312 -0.8610 -0.2040 -0.1044 -0.8516 -0.0697 -0.0618 -0.0233 -0.1041 -0.0351 -0.0470 -0.0766 -0.0854 -0.0969 -0.1156 -0.1120 -0.0740 -0.1253 -0.0623 -0.0222 -0.6380 -0.0928 -0.0850 -0.1228 -0.0821 -0.1028 -0.1024 -0.1372 -0.4294 -0.0598 -0.0741 -0.0709 -1.1880 -0.0627 -0.0963 -0.0474 -0.0822 -0.1316 -0.6104 -0.0691 -0.0683 -1.1073 -0.0963 -0.1144 -0.1049 -0.1142 -1.4998 -0.1066 -0.1019 -0.0939 -0.0791 -0.0847 -0.0799 -0.1267 -0.1192 -0.1196 -0.1116 -0.1018 -0.0461 -0.1221 -0.5759 -0.0636 -0.1100 -1.6497 -0.1023 -0.0694 -0.1038 -0.0578 -0.1280 -0.0885 -0.1343 -0.0826 -0.1008 -0.0839 -0.6365 -0.0767 -0.0922 -0.1116 -0.0861 -0.1024 -0.0419 -0.1077 -0.4032 -0.0632 -0.1183 -0.9105 -0.1060 -0.0764 -0.1049 -0.0541 -0.1132 -0.0856 -0.0666 -0.0841 -0.0934 -0.0630 -0.4002 -0.0953 -0.1387 -0.0530 -0.0938 -0.1056 -0.1571 -0.4162 -0.0736 -0.0905 -0.0720 -0.0764 -0.0957 -0.0955 -0.1096 -0.0825 -0.1093 -1.5867 -0.1129 -0.1054 -0.0964 -0.0836 -0.0881 -0.9202 -0.1650 -0.1759 -0.0948 -0.0301 -0.1278 -0.5885 -0.0690 -0.1055 -1.2262 -0.1121 -0.0775 -0.0917 -0.0484 -0.1040 -0.0887 -0.1834 -0.0539 -0.1039 -0.1077 -0.1699 -0.4323 -0.0603 -0.0935 -0.0759 -0.0865 -0.1232 -0.3534 -0.0497 -0.1381 -1.4813 -0.1095 -0.1030 -0.1042 -0.0881 -0.0900 -0.0870 -0.0701 -0.1075 -0.0480 -0.1074 -1.2299 -0.1017 -0.0919 -0.0608 -0.0740 -0.0847 -0.0941 -0.1050 -0.0827 -0.1605 -0.0842
S-89	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( !str_key.toUpperCase () .equals ( str_key ) && state.equals ( "upper" ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-89	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "lower" ) && !str_key.toLowerCase () .equals ( str_key ) ) || ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-89	-0.19557389616966248	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-89	-0.19557389616966248	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { if ( dict.size () == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-89	-0.0931 -0.0466 -0.0815 -0.0499 -0.0900 -0.0420 -0.0816 -0.0342 -0.1170 -0.6810 -0.1525 -0.0543 -0.1648 -0.3983 -0.1978 -0.0426 -0.0799 -0.0905 -0.2931 -0.1117 -0.0407 -0.1348 -0.1325 -0.0778 -0.1820 -0.1099 -0.0850 -0.0897 -0.0923 -1.4003 -0.1423 -0.1000 -1.0929 -0.0765 -0.0842 -0.0975 -0.0311 -0.8638 -0.2041 -0.1044 -0.8578 -0.0700 -0.0621 -0.0261 -0.0995 -0.0351 -0.0472 -0.0753 -0.0841 -0.0965 -0.1163 -0.1119 -0.0710 -0.1306 -0.0657 -0.0226 -0.6532 -0.0923 -0.0853 -0.1214 -0.0819 -0.1031 -0.0999 -0.1377 -0.4264 -0.0599 -0.0747 -0.0715 -1.2248 -0.0647 -0.0994 -0.0489 -0.0816 -0.1333 -0.6207 -0.0687 -0.0673 -1.1851 -0.0955 -0.1155 -0.1359 -0.1163 -1.5192 -0.1083 -0.1048 -0.0823 -0.0800 -0.0839 -0.0805 -0.1260 -0.1166 -0.1180 -0.1019 -0.1022 -0.0470 -0.1216 -0.5337 -0.0634 -0.1095 -1.7087 -0.1024 -0.0716 -0.1038 -0.0583 -0.1182 -0.0875 -0.1398 -0.0818 -0.0996 -0.0812 -0.6920 -0.0743 -0.0918 -0.1111 -0.0911 -0.1026 -0.0440 -0.1070 -0.4426 -0.0621 -0.1175 -1.0587 -0.1060 -0.0791 -0.1045 -0.0534 -0.1101 -0.0857 -0.0678 -0.0845 -0.0925 -0.0657 -0.4158 -0.0945 -0.1348 -0.0546 -0.0950 -0.1040 -0.1517 -0.4287 -0.0753 -0.0925 -0.0718 -0.0764 -0.0912 -0.0991 -0.1116 -0.2056 -0.1358 -0.1088 -0.0336 -0.1195 -0.5551 -0.0633 -0.1061 -1.5734 -0.1119 -0.0715 -0.0955 -0.0464 -0.0983 -0.1369 -0.6360 -0.0551 -0.1107 -0.1048 -0.2030 -0.4305 -0.0625 -0.0949 -0.0769 -0.0876 -0.1227 -0.3208 -0.0493 -0.1367 -1.4683 -0.1084 -0.1045 -0.1018 -0.0850 -0.0904 -0.0840 -0.0727 -0.1061 -0.0502 -0.1049 -1.2448 -0.1010 -0.0930 -0.0818 -0.0745 -0.0847 -0.0942 -0.1057 -0.0807 -0.1778 -0.0821
S-319	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; vowels.length > k; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-319	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; vowels.length > k; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-319	-0.21353881061077118	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; vowels.length > k; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-319	-0.21353881061077118	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; vowels.length > k; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-319	-0.1027 -0.0540 -1.4981 -0.3265 -0.0661 -0.1520 -0.0465 -0.0949 -0.0275 -0.1135 -1.2814 -0.1090 -0.9134 -0.0887 -0.0698 -0.0846 -0.0857 -1.1828 -0.2847 -0.0690 -0.1867 -0.0844 -0.0877 -0.0551 -0.9294 -0.2813 -0.0647 -0.0811 -4.3975 -0.0485 -0.4295 -0.0727 -0.2076 -1.0873 -0.0349 -0.0863 -0.0831 -0.1490 -0.4877 -0.1146 -0.0816 -0.0710 -0.0826 -0.0929 -0.3351 -0.1100 -0.0904 -0.0816 -0.0688 -0.9818 -0.0981 -0.0702 -0.0533 -0.0661 -0.0659 -0.6142 -0.0689 -0.4057 -0.0705 -0.0793 -0.1198 -0.0880 -0.0986 -0.0282 -0.0217 -0.0295 -0.0881 -1.1212 -0.1130 -1.8219 -0.0394 -0.0850 -0.1002 -0.0696 -0.0505 -0.1075 -0.0957 -0.0522 -0.1362 -0.1248 -0.0544 -0.0971 -0.1022 -0.0486 -0.0949 -0.0802 -0.0388 -0.0457 -0.5614 -0.0967 -0.1074 -0.0784 -0.1027 -0.0787 -0.9778 -0.0951 -0.0708 -0.0245 -0.7164 -0.1521 -0.2623 -0.1007 -0.0651 -0.0857 -0.0748 -0.4348 -0.0772 -0.0801 -0.0691 -0.0367 -0.0293 -0.0416 -0.0860 -0.0629 -0.3900 -0.0997 -0.1062 -0.0735 -0.1111 -0.0863 -0.7906 -0.2095 -0.1079 -0.0756 -0.1109 -0.0880 -1.0292 -0.0937 -0.3569 -0.0748 -0.0919 -0.1093 -0.1092 -0.0762 -0.3468 -0.1482 -0.1266 -0.1777 -0.0280 -0.3627 -0.1034 -0.2705 -0.9600 -0.1054 -0.0877 -0.0869 -0.0838 -0.0852 -0.0526 -0.0305 -0.0372 -0.1061 -0.0470 -0.5105 -0.0449 -0.0706 -0.0824 -0.0776 -0.0983 -0.1127 -0.0515 -0.0258 -0.0357 -0.0807 -0.1377 -0.0923 -0.0398 -0.0275 -0.0260 -0.6311 -0.0838 -0.1020 -0.1029 -0.7357 -0.0923 -0.0390 -0.0254 -0.0240 -0.0765 -0.0791 -0.0865 -0.0986 -0.1209 -0.2336 -0.1052 -0.0282 -0.5378 -0.1418 -0.2483 -0.1091 -0.0918 -0.0813 -0.0939 -0.0808 -0.1635 -0.0852 -0.0887
S-370	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; words.length > i; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-370	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; words.length > i; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-370	-0.22141145169734955	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; words.length > i ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-370	-0.22141145169734955	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; words.length > i ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-370	-0.1026 -0.0543 -1.4968 -0.3265 -0.0661 -0.1521 -0.0465 -0.0950 -0.0271 -0.1134 -1.2741 -0.1107 -0.8995 -0.0882 -0.0708 -0.0838 -0.0864 -1.1718 -0.2863 -0.0691 -0.1868 -0.0837 -0.0877 -0.0555 -0.9286 -0.2815 -0.0646 -0.0810 -4.3620 -0.0493 -0.4085 -0.0733 -0.2074 -1.0928 -0.0339 -0.0861 -0.0838 -0.1456 -0.4817 -0.1137 -0.0822 -0.0714 -0.0832 -0.0920 -0.3589 -0.1107 -0.0879 -0.0825 -0.0676 -1.2349 -0.0884 -0.0983 -0.0516 -0.2377 -0.0982 -1.1052 -0.0675 -0.4419 -0.0693 -0.0815 -0.1229 -0.0846 -0.0989 -0.0292 -0.0214 -0.0290 -0.0862 -1.1508 -0.1145 -1.8202 -0.0406 -0.0841 -0.1004 -0.0701 -0.0497 -0.1084 -0.0942 -0.0515 -0.1346 -0.1223 -0.0538 -0.0975 -0.1033 -0.0485 -0.0950 -0.0809 -0.0387 -0.0460 -0.5698 -0.0939 -0.1078 -0.0798 -0.1063 -0.0758 -0.9991 -0.0985 -0.0803 -0.0274 -0.9604 -0.1581 -0.2829 -0.1022 -0.0662 -0.0862 -0.0763 -0.4808 -0.0770 -0.0791 -0.0658 -0.0376 -0.0292 -0.0410 -0.0866 -0.0643 -0.3799 -0.1015 -0.1048 -0.0735 -0.1047 -0.0851 -0.8820 -0.0926 -0.0613 -0.1319 -0.0977 -0.0805 -1.3765 -0.0898 -0.3327 -0.0735 -0.0944 -0.1070 -0.1097 -0.0846 -0.3727 -0.1547 -0.1355 -0.1925 -0.0268 -0.3587 -0.1066 -0.2735 -0.9880 -0.1054 -0.0993 -0.0871 -0.0850 -0.0852 -0.0550 -0.0305 -0.0373 -0.1088 -0.0475 -0.5110 -0.0446 -0.0721 -0.0829 -0.0776 -0.1001 -0.1127 -0.0555 -0.0255 -0.0354 -0.0814 -0.1390 -0.0924 -0.0404 -0.0272 -0.0260 -0.6296 -0.0825 -0.1040 -0.1038 -0.5822 -0.0923 -0.0390 -0.0250 -0.0240 -0.0812 -0.0829 -0.0869 -0.1001 -0.1195 -0.2328 -0.1052 -0.0286 -0.5105 -0.1437 -0.2527 -0.1089 -0.0926 -0.0831 -0.0975 -0.0807 -0.1652 -0.0855 -0.0912
S-219	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( words[i].charAt ( j ) == vowels[k] ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-219	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( words[i].charAt ( j ) == vowels[k] ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-219	-0.21682129800319672	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( words[i].charAt ( j ) == vowels[k] ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-219	-0.21682129800319672	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( words[i].charAt ( j ) == vowels[k] ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-219	-0.1019 -0.0540 -1.5053 -0.3263 -0.0661 -0.1535 -0.0465 -0.0959 -0.0267 -0.1135 -1.2929 -0.1087 -0.9209 -0.0892 -0.0694 -0.0846 -0.0864 -1.1815 -0.2830 -0.0696 -0.1883 -0.0839 -0.0877 -0.0555 -0.9344 -0.2852 -0.0642 -0.0810 -4.3766 -0.0488 -0.4262 -0.0739 -0.2073 -1.0451 -0.0354 -0.0871 -0.0825 -0.1484 -0.4789 -0.1146 -0.0816 -0.0705 -0.0827 -0.0922 -0.3351 -0.1101 -0.0908 -0.0816 -0.0694 -1.0155 -0.0957 -0.0752 -0.0526 -0.0627 -0.0675 -0.6798 -0.0689 -0.4139 -0.0706 -0.0788 -0.1210 -0.0880 -0.0985 -0.0284 -0.0219 -0.0295 -0.0890 -1.1346 -0.1129 -1.8384 -0.0423 -0.0860 -0.1028 -0.0733 -0.0507 -0.1088 -0.0967 -0.0520 -0.1379 -0.1244 -0.0551 -0.0997 -0.1020 -0.0479 -0.0957 -0.0814 -0.0388 -0.0465 -0.6059 -0.0984 -0.1071 -0.0795 -0.1080 -0.0789 -0.9677 -0.0992 -0.0752 -0.0262 -0.6990 -0.1585 -0.2600 -0.1016 -0.0720 -0.0875 -0.0777 -0.4452 -0.0756 -0.0795 -0.0664 -0.0384 -0.0288 -0.0407 -0.0872 -0.0684 -0.3885 -0.1025 -0.1059 -0.0707 -0.1006 -0.0873 -0.8995 -0.0896 -0.0661 -0.1619 -0.1016 -0.0816 -1.3798 -0.0935 -0.3378 -0.0736 -0.0953 -0.1109 -0.1128 -0.0219 -0.3347 -0.1012 -0.2767 -0.9523 -0.1028 -0.1192 -0.0903 -0.2181 -0.0613 -0.4055 -0.1153 -0.1487 -0.0876 -0.0925 -0.0594 -0.0302 -0.0374 -0.1020 -0.0472 -0.5474 -0.0406 -0.0738 -0.0859 -0.0775 -0.1022 -0.1136 -0.0683 -0.0253 -0.0351 -0.0814 -0.1379 -0.0922 -0.0402 -0.0276 -0.0264 -0.6297 -0.0842 -0.1030 -0.1032 -0.7416 -0.0907 -0.0390 -0.0250 -0.0237 -0.0769 -0.0811 -0.0864 -0.0974 -0.1183 -0.2144 -0.1051 -0.0283 -0.5189 -0.1533 -0.2409 -0.1090 -0.0925 -0.0812 -0.0967 -0.0803 -0.1650 -0.0851 -0.0901
S-91	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; words[i].length () > j; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-91	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; words[i].length () > j; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-91	-0.22079002857208252	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; words[i].length () > j; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-91	-0.22079002857208252	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; words[i].length () > j; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-91	-0.1028 -0.0540 -1.5047 -0.3310 -0.0661 -0.1530 -0.0472 -0.0956 -0.0276 -0.1133 -1.2815 -0.1074 -0.9127 -0.0888 -0.0698 -0.0844 -0.0864 -1.1894 -0.2870 -0.0691 -0.1867 -0.0844 -0.0884 -0.0555 -0.9394 -0.2815 -0.0646 -0.0810 -4.3772 -0.0485 -0.4320 -0.0729 -0.2080 -1.0761 -0.0347 -0.0870 -0.0831 -0.1469 -0.4986 -0.1146 -0.0816 -0.0704 -0.0827 -0.0920 -0.3315 -0.1109 -0.0891 -0.0825 -0.0699 -0.9827 -0.1041 -0.0674 -0.0555 -0.0623 -0.0679 -1.1988 -0.0693 -0.4009 -0.0706 -0.0788 -0.1204 -0.0912 -0.0987 -0.0283 -0.0215 -0.0299 -0.0880 -1.1219 -0.1183 -1.8140 -0.0390 -0.0851 -0.0986 -0.0751 -0.0507 -0.1113 -0.0999 -0.0521 -0.1403 -0.1295 -0.0552 -0.1025 -0.1077 -0.0490 -0.0981 -0.0848 -0.0388 -0.0463 -0.5147 -0.0970 -0.1081 -0.0761 -0.0952 -0.0765 -0.9767 -0.1280 -0.5727 -0.1763 -0.2561 -0.1219 -0.0516 -0.1133 -0.0722 -1.1723 -0.0628 -0.3760 -0.0776 -0.0798 -0.0648 -0.0366 -0.0295 -0.0420 -0.0866 -0.0628 -0.3521 -0.0989 -0.1055 -0.0735 -0.1009 -0.0843 -0.8097 -0.0953 -0.0638 -0.1197 -0.0968 -0.0805 -1.0874 -0.0854 -0.3234 -0.0737 -0.0934 -0.1073 -0.1096 -0.0803 -0.3789 -0.1647 -0.1353 -0.1825 -0.0264 -0.3400 -0.1069 -0.2615 -0.9563 -0.1048 -0.0926 -0.0867 -0.0850 -0.0849 -0.0547 -0.0305 -0.0376 -0.1105 -0.0477 -0.5045 -0.0463 -0.0719 -0.0836 -0.0771 -0.1010 -0.1135 -0.0553 -0.0259 -0.0360 -0.0814 -0.1415 -0.0930 -0.0403 -0.0272 -0.0262 -0.6441 -0.0820 -0.1036 -0.1037 -0.6466 -0.0931 -0.0395 -0.0253 -0.0242 -0.0760 -0.0793 -0.0865 -0.0989 -0.1198 -0.2372 -0.1051 -0.0297 -0.5318 -0.1473 -0.2468 -0.1082 -0.0925 -0.0803 -0.0954 -0.0803 -0.1665 -0.0852 -0.0881
S-30	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( n == num_consonants ) result.add ( words[i] ) ; } return result; }
T-30	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( n == num_consonants ) result.add ( words[i] ) ; } return result; }
H-30	-0.21476763486862183	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( n == num_consonants ) result.add ( words[i] ) ; } return result ; }
D-30	-0.21476763486862183	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( n == num_consonants ) result.add ( words[i] ) ; } return result ; }
P-30	-0.1022 -0.0540 -1.5126 -0.3306 -0.0661 -0.1515 -0.0457 -0.0949 -0.0276 -0.1123 -1.2940 -0.1057 -0.9557 -0.0902 -0.0704 -0.0836 -0.0867 -1.2281 -0.2890 -0.0695 -0.1894 -0.0843 -0.0879 -0.0546 -0.9346 -0.2848 -0.0646 -0.0810 -4.3534 -0.0485 -0.4255 -0.0717 -0.2094 -1.0806 -0.0355 -0.0869 -0.0825 -0.1492 -0.4867 -0.1146 -0.0816 -0.0709 -0.0826 -0.0928 -0.3386 -0.1100 -0.0885 -0.0821 -0.0694 -1.0216 -0.0950 -0.0755 -0.0526 -0.0636 -0.0675 -0.6644 -0.0694 -0.4190 -0.0698 -0.0788 -0.1219 -0.0819 -0.1024 -0.0310 -0.0228 -0.0316 -0.0887 -1.1950 -0.1203 -1.8301 -0.0402 -0.0847 -0.0998 -0.0713 -0.0503 -0.1090 -0.0955 -0.0515 -0.1361 -0.1249 -0.0544 -0.0979 -0.1024 -0.0486 -0.0950 -0.0797 -0.0385 -0.0460 -0.5942 -0.0995 -0.1063 -0.0787 -0.1045 -0.0776 -0.9961 -0.1009 -0.0755 -0.0262 -0.7344 -0.1620 -0.2594 -0.1053 -0.0707 -0.0868 -0.0770 -0.4560 -0.0763 -0.0801 -0.0672 -0.0358 -0.0294 -0.0410 -0.0864 -0.0638 -0.3794 -0.1019 -0.1046 -0.0730 -0.1031 -0.0852 -0.8624 -0.0901 -0.0628 -0.1366 -0.0976 -0.0827 -1.3996 -0.0871 -0.3330 -0.0730 -0.0938 -0.1070 -0.1095 -0.0825 -0.3787 -0.1551 -0.1370 -0.1840 -0.0271 -0.3596 -0.1091 -0.2716 -1.0038 -0.1062 -0.0984 -0.0871 -0.0850 -0.0859 -0.0524 -0.0304 -0.0376 -0.1059 -0.0474 -0.5055 -0.0453 -0.0726 -0.0829 -0.0781 -0.1003 -0.1128 -0.0508 -0.0240 -0.0358 -0.0809 -0.1297 -0.0966 -0.0446 -0.0295 -0.0288 -0.5641 -0.0824 -0.1062 -0.1036 -0.2027 -0.0853 -0.1132 -0.1047 -0.0359 -0.0283 -0.0234 -0.0813 -0.1035 -0.1210 -0.2368 -0.1056 -0.0286 -0.5181 -0.1661 -0.2370 -0.1070 -0.0915 -0.0790 -0.0958 -0.0791 -0.1587 -0.0845 -0.0881
S-286	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; planet2_index > i; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-286	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet2_index > planet1_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-286	-0.24760666489601135	public static ArrayList<String> bf ( java.lang.String planet1 , java.lang.String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; planet2_index > i ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-286	-0.24760666489601135	public static ArrayList<String> bf ( java.lang.String planet1 , java.lang.String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; planet2_index > i ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-286	-0.0921 -0.0582 -1.5527 -0.2493 -0.0689 -0.1515 -0.0171 -0.1020 -5.6320 -0.0419 -0.1166 -0.0857 -0.0259 -0.1000 -1.6054 -0.0969 -0.2932 -0.0848 -0.0485 -0.1169 -0.0451 -0.0859 -0.0543 -0.0925 -0.0894 -1.4215 -0.2969 -0.0814 -0.2074 -0.0925 -0.0897 -0.1135 -0.0779 -0.0879 -1.0005 -0.2103 -0.0742 -0.1509 -0.1613 -1.8566 -0.0921 -0.3762 -0.1025 -0.0884 -0.0087 -0.0214 -0.0614 -1.6584 -0.1079 -0.0453 -0.0075 -1.2008 -0.1087 -0.0257 -0.0176 -1.3000 -0.1056 -0.0472 -0.0167 -1.3589 -0.1169 -0.0434 -0.0310 -0.0411 -1.4958 -0.1057 -0.0209 -0.0067 -1.4271 -0.0962 -0.0418 -0.0142 -0.0414 -1.4716 -0.0974 -0.0200 -0.0296 -0.0062 -0.0673 -0.0926 -0.0972 -0.1085 -1.3431 -0.2848 -0.0690 -0.1429 -0.0858 -0.0835 -0.0622 -1.0138 -0.2808 -0.0638 -0.1996 -0.0650 -0.0841 -0.2305 -0.1110 -0.6685 -0.0726 -0.0920 -0.0512 -0.0995 -0.0808 -0.1144 -0.7113 -0.1080 -0.0647 -0.0756 -0.0792 -0.0813 -0.0637 -0.1055 -0.0551 -0.0660 -0.0601 -0.0939 -0.0762 -0.1146 -0.6636 -0.1027 -0.0804 -0.0746 -0.0799 -0.0801 -0.0847 -0.0795 -0.1201 -0.3254 -0.0735 -0.0870 -0.0347 -0.0504 -0.0821 -0.1129 -0.1077 -0.0819 -0.1127 -0.9549 -0.0999 -0.0680 -0.0540 -0.0817 -0.0877 -0.0577 -0.1063 -0.0583 -0.0559 -0.0824 -0.0787 -0.1010 -0.0814 -0.1132 -1.1940 -0.0982 -0.0873 -0.0620 -0.0838 -0.0887 -0.1325 -0.1039 -0.0596 -0.0748 -0.0783 -0.1085 -0.0488 -0.0570 -1.3544 -0.3352 -0.0516 -0.0425 -0.1568 -0.1206 -0.9357 -0.0813 -0.0821 -0.1841 -0.0725 -0.0753 -0.1376 -0.2956 -0.0997 -0.0624 -0.1027 -0.0848 -0.1235 -0.2158 -0.1065 -0.0841 -0.0862 -0.0853 -0.0925 -0.0800 -0.0781 -0.2536 -0.0827 -0.0686
S-181	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet2 ) ) || ( !planet_names.contains ( planet1 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-181	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet2 ) ) || ( !planet_names.contains ( planet1 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-181	-0.24465245008468628	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet2 ) ) || ( !planet_names.contains ( planet1 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-181	-0.24465245008468628	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet2 ) ) || ( !planet_names.contains ( planet1 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-181	-0.0921 -0.0578 -1.5536 -0.2492 -0.0689 -0.1526 -0.0167 -0.1013 -2.1560 -0.0828 -0.4824 -1.4298 -0.0796 -0.0608 -0.0823 -0.0884 -1.4323 -0.2888 -0.0825 -0.1983 -0.0928 -0.0932 -0.1132 -0.0788 -0.0868 -0.9677 -0.2057 -0.0747 -0.1490 -0.1622 -1.7035 -0.0910 -0.3669 -0.1019 -0.0938 -0.0099 -0.0210 -0.0617 -1.7370 -0.1109 -0.0508 -0.0074 -1.2127 -0.1107 -0.0266 -0.0179 -1.3279 -0.1061 -0.0492 -0.0169 -1.3679 -0.1174 -0.0457 -0.0332 -0.0414 -1.5248 -0.1072 -0.0229 -0.0069 -1.4379 -0.0979 -0.0454 -0.0142 -0.0429 -1.5610 -0.1005 -0.0205 -0.0304 -0.0063 -0.0684 -0.0994 -0.0995 -0.1056 -1.5711 -0.2973 -0.0707 -0.1498 -0.0891 -0.0844 -0.0605 -1.0384 -0.2977 -0.0641 -0.2129 -0.0629 -0.0824 -0.4622 -0.1128 -1.0501 -0.0977 -0.1022 -0.0503 -0.1012 -0.0806 -0.1267 -0.7734 -0.1119 -0.0689 -0.3993 -0.0927 -0.0845 -0.0709 -0.1120 -0.0577 -0.0688 -0.0605 -0.0916 -0.0756 -0.1178 -0.6884 -0.1034 -0.0695 -0.0813 -0.0857 -0.0836 -0.0849 -0.0917 -0.1267 -0.2644 -0.1217 -0.0940 -0.0331 -0.0577 -0.0911 -0.1263 -0.1068 -0.0868 -0.1223 -1.0503 -0.1051 -0.0683 -0.1091 -0.0869 -0.0858 -0.0679 -0.1190 -0.0519 -0.0611 -0.0895 -0.0871 -0.0994 -0.0839 -0.1166 -1.2912 -0.1002 -0.0820 -0.0808 -0.0865 -0.0862 -0.2910 -0.1134 -0.0683 -0.0771 -0.0940 -0.1287 -0.0638 -0.0523 -1.1360 -0.0869 -0.1813 -0.1358 -0.0520 -0.0408 -0.2170 -0.0838 -0.1089 -0.1824 -0.0813 -0.1268 -0.2021 -0.3806 -0.1083 -0.0658 -0.1105 -0.0903 -0.1564 -0.2992 -0.1187 -0.1192 -0.1270 -0.1098 -0.0866 -0.0765 -0.0947 -0.1416 -0.0861 -0.0747
S-347	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; s.length () > i; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-347	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; s.length () - s.length () % 3 > i; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-347	-0.201506108045578	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; s.length () > i ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-347	-0.201506108045578	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; s.length () > i ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-347	-0.0916 -0.0415 -1.2912 -0.0331 -0.0935 -0.0306 -0.0880 -0.0198 -0.1113 -1.0470 -0.1062 -0.0880 -0.0988 -0.3629 -0.0282 -0.0286 -0.1257 -2.1116 -0.0256 -0.0858 -0.0296 -0.0811 -0.0204 -0.1145 -1.1285 -0.1379 -0.0772 -0.0947 -2.2986 -0.3789 -0.0653 -0.1356 -0.0676 -0.0863 -0.0553 -1.3047 -0.2839 -0.0720 -0.1446 -0.0641 -0.0850 -0.2879 -0.1088 -0.0769 -0.0740 -0.0772 -1.0053 -0.1322 -0.1286 -0.0932 -0.0683 -0.1393 -0.1107 -0.5147 -0.0758 -0.1074 -0.0652 -0.0795 -0.0899 -0.0923 -0.2096 -0.2855 -0.1063 -0.0589 -0.0918 -0.6971 -0.1241 -0.1515 -1.1317 -3.0847 -0.0900 -0.0404 -0.1094 -0.0909 -0.0940 -0.0859 -0.0732 -0.1124 -0.1050 -0.1623 -0.0705 -0.0813 -0.0908 -0.0921 -0.1080 -0.0820 -0.0992 -0.0482 -0.0918 -0.0749 -0.1019 -0.0778 -0.0663 -0.1016 -0.2475 -0.7414 -0.0673 -0.0871 -1.2960 -0.0784 -0.1050 -1.1048 -0.1070 -0.0620 -0.0506 -0.0861 -0.0838 -0.1198 -0.0690 -0.1226 -0.0995 -0.8325 -0.1281 -0.2153 -0.1544 -0.2013 -0.0886 -0.1025 -0.4906 -0.1120 -0.2202 -0.1630 -0.0821 -0.0830 -0.0705 -0.1785 -0.1077 -0.0209 -0.1135 -0.0850 -0.0856 -0.0899 -0.0879 -0.0745 -0.0660 -0.0970 -0.4673 -0.1095 -0.0786 -0.0960 -0.1285 -0.0602 -0.6939 -0.0103 -0.1079 -0.0951 -0.0650 -0.0653 -0.0806 -0.1923 -0.0798 -0.0988 -0.0936 -0.0449 -0.0437 -0.0547 -0.0837 -0.0510 -0.0456 -0.0421 -0.0781 -0.0939 -0.0602 -0.0354 -0.0984 -0.0659 -0.0923 -0.0401 -0.0847 -0.0177 -0.1054 -0.0288 -0.0935 -0.0554 -0.0858 -0.0470 -0.0815 -0.0183 -0.1100 -0.0930 -0.0948 -0.1027 -0.1009 -0.0776 -0.0966
S-297	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 0, 1 ) + group.substring ( 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-297	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () - s.length () % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 0, 1 ) + group.substring ( 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-297	-0.19764579832553864	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 0, 1 ) + group. substring ( 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-297	-0.19764579832553864	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 0, 1 ) + group. substring ( 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-297	-0.0906 -0.0418 -1.3024 -0.0332 -0.0935 -0.0304 -0.0879 -0.0196 -0.1113 -1.0572 -0.1054 -0.0875 -0.0980 -0.3524 -0.0282 -0.0286 -0.1256 -2.0914 -0.0252 -0.0858 -0.0297 -0.0811 -0.0202 -0.1146 -1.1215 -0.1406 -0.0769 -0.0947 -2.2798 -0.3763 -0.0653 -0.1369 -0.0659 -0.0864 -0.0544 -1.3154 -0.2711 -0.0715 -0.1511 -0.0648 -0.0846 -0.2888 -0.1082 -0.0840 -0.0735 -0.0798 -0.8608 -0.0805 -0.1178 -0.2307 -0.1099 -0.0781 -0.0686 -0.0871 -0.0721 -0.1067 -0.0779 -0.0808 -0.0903 -0.0924 -0.2112 -0.2885 -0.1053 -0.0594 -0.0922 -0.6943 -0.1258 -0.1480 -0.9478 -3.0661 -0.0900 -0.0406 -0.1094 -0.0892 -0.0919 -0.0905 -0.0745 -0.1142 -0.1026 -0.1662 -0.0704 -0.0812 -0.0920 -0.0925 -0.1079 -0.0820 -0.0968 -0.0481 -0.0914 -0.0733 -0.0975 -0.0795 -0.0665 -0.1176 -0.2500 -0.6738 -0.0668 -0.0868 -1.2469 -0.0786 -0.1050 -1.0844 -0.1051 -0.0636 -0.0505 -0.0851 -0.0830 -0.1178 -0.0690 -0.1207 -0.0983 -0.8216 -0.1275 -0.3475 -0.2034 -0.0816 -0.3653 -0.0872 -0.1023 -0.5669 -0.1131 -0.1256 -0.0859 -0.0811 -0.0680 -0.1648 -0.1087 -0.0213 -0.1127 -0.0860 -0.0853 -0.0895 -0.0853 -0.0749 -0.0610 -0.0964 -0.4214 -0.1086 -0.0740 -0.0962 -0.1321 -0.0599 -0.7391 -0.0105 -0.1103 -0.0965 -0.0657 -0.0639 -0.0800 -0.1911 -0.0793 -0.0968 -0.0918 -0.0446 -0.0441 -0.0552 -0.0838 -0.0504 -0.0454 -0.0421 -0.0777 -0.0941 -0.0587 -0.0347 -0.0969 -0.0654 -0.0924 -0.0402 -0.0840 -0.0175 -0.1054 -0.0282 -0.0920 -0.0540 -0.0859 -0.0464 -0.0809 -0.0181 -0.1091 -0.0903 -0.0939 -0.1014 -0.1004 -0.0777 -0.0975
S-49	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( 0 < remain ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-49	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () - s.length () % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( 0 < remain ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-49	-0.19774369895458221	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( 0 < remain ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-49	-0.19774369895458221	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( 0 < remain ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-49	-0.0906 -0.0418 -1.3084 -0.0338 -0.0935 -0.0304 -0.0879 -0.0196 -0.1114 -1.0627 -0.1054 -0.0874 -0.0987 -0.3551 -0.0282 -0.0287 -0.1256 -2.1086 -0.0256 -0.0858 -0.0297 -0.0811 -0.0203 -0.1145 -1.1278 -0.1417 -0.0768 -0.0955 -2.2810 -0.3757 -0.0649 -0.1382 -0.0664 -0.0865 -0.0541 -1.3220 -0.2747 -0.0715 -0.1540 -0.0652 -0.0845 -0.2794 -0.1083 -0.0841 -0.0728 -0.0806 -0.8486 -0.0799 -0.1179 -0.2127 -0.1109 -0.0803 -0.0689 -0.0867 -0.0715 -0.1041 -0.0740 -0.0808 -0.0903 -0.0931 -0.2107 -0.2872 -0.1061 -0.0595 -0.0921 -0.6845 -0.1236 -0.1451 -0.9580 -3.0448 -0.0901 -0.0400 -0.1095 -0.0895 -0.0918 -0.0915 -0.0745 -0.1141 -0.1032 -0.1637 -0.0699 -0.0813 -0.0911 -0.0924 -0.1081 -0.0811 -0.1003 -0.0470 -0.0969 -0.0734 -0.0971 -0.0809 -0.0666 -0.1195 -0.2354 -0.7613 -0.0652 -0.0870 -1.2533 -0.0802 -0.1042 -1.1156 -0.1056 -0.0612 -0.0507 -0.0858 -0.0841 -0.1163 -0.0668 -0.1152 -0.0988 -0.8433 -0.1277 -0.2098 -0.1497 -0.1858 -0.0870 -0.1020 -0.4967 -0.1114 -0.2024 -0.1606 -0.0819 -0.0828 -0.0728 -0.1947 -0.1063 -0.1321 -0.1427 -0.0200 -0.0851 -0.0965 -0.0933 -0.0792 -0.0666 -0.0963 -0.4567 -0.1102 -0.0931 -0.0957 -0.1246 -0.0600 -0.7225 -0.0135 -0.1080 -0.0958 -0.0649 -0.0650 -0.0782 -0.1975 -0.0789 -0.0983 -0.0950 -0.0451 -0.0446 -0.0554 -0.0837 -0.0511 -0.0458 -0.0426 -0.0781 -0.0944 -0.0608 -0.0359 -0.0982 -0.0647 -0.0921 -0.0404 -0.0846 -0.0176 -0.1062 -0.0286 -0.0934 -0.0547 -0.0864 -0.0467 -0.0814 -0.0180 -0.1092 -0.0906 -0.0959 -0.1029 -0.1008 -0.0781 -0.0980
S-37	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , 3 + i ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-37	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () - s.length () % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , 3 + i ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-37	-0.19731023907661438	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , 3 + i ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-37	-0.19731023907661438	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , 3 + i ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-37	-0.0908 -0.0418 -1.3028 -0.0334 -0.0935 -0.0304 -0.0879 -0.0198 -0.1113 -1.0631 -0.1038 -0.0881 -0.0987 -0.3496 -0.0282 -0.0286 -0.1256 -2.1090 -0.0251 -0.0858 -0.0297 -0.0811 -0.0202 -0.1146 -1.1219 -0.1394 -0.0769 -0.0954 -2.2691 -0.3787 -0.0649 -0.1368 -0.0662 -0.0864 -0.0545 -1.3208 -0.2707 -0.0715 -0.1511 -0.0658 -0.0845 -0.2816 -0.1082 -0.0846 -0.0728 -0.0805 -0.8696 -0.0822 -0.1174 -0.2170 -0.1097 -0.0787 -0.0680 -0.0872 -0.0719 -0.1039 -0.0772 -0.0807 -0.0903 -0.0928 -0.2135 -0.2872 -0.1055 -0.0608 -0.0920 -0.6956 -0.1247 -0.1392 -0.9813 -3.0746 -0.0900 -0.0393 -0.1100 -0.0914 -0.0916 -0.0918 -0.0724 -0.1154 -0.0926 -0.1423 -0.1050 -0.0836 -0.0925 -0.0936 -0.1075 -0.0841 -0.0995 -0.0471 -0.0920 -0.0756 -0.0973 -0.0795 -0.0665 -0.1162 -0.2543 -0.7013 -0.0673 -0.0867 -1.2545 -0.0783 -0.1050 -1.0944 -0.1056 -0.0618 -0.0509 -0.0858 -0.0833 -0.1182 -0.0685 -0.1188 -0.0987 -0.8339 -0.1279 -0.2150 -0.1556 -0.2017 -0.0875 -0.1026 -0.4884 -0.1114 -0.2048 -0.1619 -0.0817 -0.0835 -0.0699 -0.1741 -0.1076 -0.0204 -0.1145 -0.0860 -0.0850 -0.0894 -0.0865 -0.0750 -0.0637 -0.0964 -0.4447 -0.1090 -0.0766 -0.0954 -0.1287 -0.0609 -0.7803 -0.0104 -0.1092 -0.0956 -0.0645 -0.0648 -0.0805 -0.1910 -0.0792 -0.0990 -0.0940 -0.0449 -0.0444 -0.0547 -0.0837 -0.0507 -0.0456 -0.0421 -0.0778 -0.0947 -0.0602 -0.0349 -0.0976 -0.0648 -0.0922 -0.0401 -0.0839 -0.0177 -0.1061 -0.0280 -0.0934 -0.0544 -0.0858 -0.0466 -0.0814 -0.0182 -0.1092 -0.0902 -0.0947 -0.1025 -0.1009 -0.0782 -0.0974
S-346	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } return new_text; }
T-346	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-346	-0.19057592749595642	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
D-346	-0.19057592749595642	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
P-346	-0.0908 -0.0552 -0.9920 -0.0423 -0.0969 -0.0292 -0.1156 -0.7688 -0.0596 -0.0906 -0.0826 -1.4478 -0.0732 -0.0859 -0.0605 -0.0869 -1.6225 -0.0867 -0.1231 -0.0876 -0.6683 -0.0722 -0.0544 -0.0807 -0.4131 -0.0719 -0.0793 -0.0805 -0.4864 -0.0961 -0.1063 -0.1068 -0.0814 -0.1082 -0.1043 -0.0904 -0.0663 -0.0841 -0.0752 -0.1214 -0.1153 -0.0938 -0.1368 -0.7790 -0.1020 -0.1114 -0.0847 -0.1953 -0.0528 -0.0389 -0.0814 -0.0928 -0.0639 -1.3454 -0.0960 -0.1121 -0.1208 -0.1130 -0.2342 -0.1045 -0.0666 -0.0836 -0.1559 -0.0803 -0.1349 -0.0897 -0.0780 -0.1029 -0.0333 -0.0469 -0.0518 -0.0986 -0.9384 -0.1126 -0.1291 -0.9277 -0.2729 -0.1937 -0.1052 -0.0971 -0.0950 -0.0826 -0.1126 -0.1050 -0.0981 -0.0978 -0.0549 -0.0686 -0.1081 -0.0851 -0.0822 -0.1386 -0.1030 -0.0725 -0.0878 -0.0749 -0.0709 -1.0345 -0.0683 -0.0935 -0.0728 -0.8219 -0.0562 -0.0467 -0.1200 -0.0815 -0.0883 -0.0673 -0.1017 -0.0769 -0.0695 -0.0751 -0.3149 -0.0986 -0.1052 -0.1018 -0.0841 -0.0945 -0.0366 -0.0981 -0.7708 -0.1201 -0.1186 -0.8170 -0.3137 -0.1598 -0.1019 -0.1061 -0.0973 -0.0877 -0.0619 -0.0967 -0.0650 -0.1047 -0.0908 -0.0884 -0.0321 -0.1040 -0.4616 -0.1118 -0.0962 -0.6785 -0.1679 -0.0916 -0.0904 -0.0999 -0.0980 -0.0741 -0.0739 -0.1081 -0.1591 -0.0486 -0.0845 -1.1542 -0.0546 -0.1068 -0.1040 -0.0526 -0.0952 -1.0699 -0.1455 -0.0877 -0.0630 -0.9559 -0.0765 -0.1038 -0.0579 -0.0931 -0.0736 -0.1771 -0.0754 -0.0877
S-334	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } return new_text; }
T-334	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-334	-0.1905759572982788	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
D-334	-0.1905759572982788	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
P-334	-0.0908 -0.0552 -0.9920 -0.0423 -0.0969 -0.0292 -0.1156 -0.7688 -0.0596 -0.0906 -0.0826 -1.4478 -0.0732 -0.0859 -0.0605 -0.0869 -1.6225 -0.0867 -0.1231 -0.0876 -0.6683 -0.0722 -0.0544 -0.0807 -0.4131 -0.0719 -0.0793 -0.0805 -0.4864 -0.0961 -0.1063 -0.1068 -0.0814 -0.1082 -0.1043 -0.0904 -0.0663 -0.0841 -0.0752 -0.1214 -0.1153 -0.0938 -0.1368 -0.7790 -0.1020 -0.1114 -0.0847 -0.1953 -0.0528 -0.0389 -0.0814 -0.0928 -0.0639 -1.3454 -0.0960 -0.1121 -0.1208 -0.1130 -0.2342 -0.1045 -0.0666 -0.0836 -0.1559 -0.0803 -0.1349 -0.0897 -0.0780 -0.1029 -0.0333 -0.0469 -0.0518 -0.0986 -0.9384 -0.1126 -0.1291 -0.9277 -0.2729 -0.1937 -0.1052 -0.0971 -0.0950 -0.0826 -0.1126 -0.1050 -0.0981 -0.0978 -0.0549 -0.0686 -0.1081 -0.0851 -0.0822 -0.1386 -0.1030 -0.0725 -0.0878 -0.0749 -0.0709 -1.0345 -0.0683 -0.0935 -0.0728 -0.8219 -0.0562 -0.0467 -0.1200 -0.0815 -0.0883 -0.0673 -0.1017 -0.0769 -0.0695 -0.0751 -0.3149 -0.0986 -0.1052 -0.1018 -0.0841 -0.0945 -0.0366 -0.0981 -0.7708 -0.1201 -0.1186 -0.8170 -0.3137 -0.1598 -0.1019 -0.1061 -0.0973 -0.0877 -0.0619 -0.0967 -0.0650 -0.1047 -0.0908 -0.0884 -0.0321 -0.1040 -0.4615 -0.1118 -0.0962 -0.6785 -0.1679 -0.0916 -0.0904 -0.0999 -0.0980 -0.0741 -0.0739 -0.1081 -0.1591 -0.0486 -0.0845 -1.1542 -0.0546 -0.1068 -0.1040 -0.0526 -0.0952 -1.0699 -0.1455 -0.0877 -0.0630 -0.9559 -0.0765 -0.1038 -0.0579 -0.0931 -0.0736 -0.1771 -0.0754 -0.0877
S-309	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } return new_text; }
T-309	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-309	-0.19057591259479523	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
D-309	-0.19057591259479523	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
P-309	-0.0908 -0.0552 -0.9920 -0.0423 -0.0969 -0.0292 -0.1156 -0.7688 -0.0596 -0.0906 -0.0826 -1.4478 -0.0732 -0.0859 -0.0605 -0.0869 -1.6225 -0.0867 -0.1231 -0.0876 -0.6683 -0.0722 -0.0544 -0.0807 -0.4131 -0.0719 -0.0793 -0.0805 -0.4864 -0.0961 -0.1063 -0.1068 -0.0814 -0.1082 -0.1043 -0.0904 -0.0663 -0.0841 -0.0752 -0.1214 -0.1153 -0.0938 -0.1368 -0.7790 -0.1020 -0.1114 -0.0847 -0.1953 -0.0528 -0.0389 -0.0814 -0.0928 -0.0639 -1.3454 -0.0960 -0.1121 -0.1208 -0.1130 -0.2342 -0.1045 -0.0666 -0.0836 -0.1559 -0.0803 -0.1349 -0.0897 -0.0780 -0.1029 -0.0333 -0.0469 -0.0518 -0.0986 -0.9384 -0.1126 -0.1291 -0.9277 -0.2729 -0.1937 -0.1052 -0.0971 -0.0950 -0.0826 -0.1126 -0.1050 -0.0981 -0.0978 -0.0549 -0.0686 -0.1081 -0.0851 -0.0822 -0.1386 -0.1030 -0.0725 -0.0878 -0.0749 -0.0709 -1.0345 -0.0683 -0.0935 -0.0728 -0.8219 -0.0562 -0.0467 -0.1200 -0.0815 -0.0883 -0.0674 -0.1017 -0.0769 -0.0695 -0.0751 -0.3149 -0.0986 -0.1052 -0.1018 -0.0841 -0.0945 -0.0366 -0.0981 -0.7708 -0.1201 -0.1186 -0.8170 -0.3137 -0.1598 -0.1019 -0.1061 -0.0973 -0.0877 -0.0619 -0.0967 -0.0650 -0.1047 -0.0908 -0.0884 -0.0321 -0.1040 -0.4616 -0.1118 -0.0962 -0.6785 -0.1679 -0.0916 -0.0904 -0.0999 -0.0980 -0.0741 -0.0739 -0.1081 -0.1591 -0.0486 -0.0845 -1.1542 -0.0546 -0.1068 -0.1040 -0.0526 -0.0952 -1.0699 -0.1455 -0.0877 -0.0630 -0.9559 -0.0765 -0.1038 -0.0579 -0.0931 -0.0736 -0.1771 -0.0754 -0.0877
S-177	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } return new_text; }
T-177	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-177	-0.1905759572982788	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
D-177	-0.1905759572982788	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
P-177	-0.0908 -0.0552 -0.9920 -0.0423 -0.0969 -0.0292 -0.1156 -0.7688 -0.0596 -0.0906 -0.0826 -1.4478 -0.0732 -0.0859 -0.0605 -0.0869 -1.6225 -0.0867 -0.1231 -0.0876 -0.6683 -0.0722 -0.0544 -0.0807 -0.4131 -0.0719 -0.0793 -0.0805 -0.4864 -0.0961 -0.1063 -0.1068 -0.0814 -0.1082 -0.1043 -0.0904 -0.0663 -0.0841 -0.0752 -0.1214 -0.1153 -0.0938 -0.1368 -0.7790 -0.1020 -0.1114 -0.0847 -0.1953 -0.0528 -0.0389 -0.0814 -0.0928 -0.0639 -1.3454 -0.0960 -0.1121 -0.1208 -0.1130 -0.2342 -0.1045 -0.0666 -0.0836 -0.1559 -0.0803 -0.1349 -0.0897 -0.0780 -0.1029 -0.0333 -0.0469 -0.0518 -0.0986 -0.9384 -0.1126 -0.1291 -0.9277 -0.2729 -0.1937 -0.1052 -0.0971 -0.0950 -0.0826 -0.1126 -0.1050 -0.0981 -0.0978 -0.0549 -0.0686 -0.1081 -0.0851 -0.0822 -0.1386 -0.1030 -0.0725 -0.0878 -0.0749 -0.0709 -1.0345 -0.0683 -0.0935 -0.0728 -0.8219 -0.0562 -0.0467 -0.1200 -0.0815 -0.0883 -0.0674 -0.1017 -0.0769 -0.0695 -0.0751 -0.3149 -0.0986 -0.1052 -0.1018 -0.0841 -0.0945 -0.0366 -0.0981 -0.7708 -0.1201 -0.1186 -0.8170 -0.3137 -0.1598 -0.1019 -0.1061 -0.0973 -0.0877 -0.0619 -0.0967 -0.0650 -0.1047 -0.0908 -0.0884 -0.0321 -0.1040 -0.4615 -0.1118 -0.0962 -0.6785 -0.1679 -0.0916 -0.0904 -0.0999 -0.0980 -0.0741 -0.0739 -0.1081 -0.1591 -0.0486 -0.0845 -1.1542 -0.0546 -0.1068 -0.1040 -0.0526 -0.0952 -1.0699 -0.1455 -0.0877 -0.0630 -0.9559 -0.0765 -0.1038 -0.0579 -0.0931 -0.0736 -0.1771 -0.0754 -0.0877
S-76	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } return new_text; }
T-76	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, 1 + i ) ; } else { new_text += text.substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-76	-0.19057588279247284	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
D-76	-0.19057588279247284	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, 1 + i ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, 1 + i ) ; } else { new_text += text. substring ( i, 1 + i ) ; } start = 1 + i; end = 1 + i ; } i += 1; } return new_text ; }
P-76	-0.0908 -0.0552 -0.9920 -0.0423 -0.0969 -0.0292 -0.1156 -0.7688 -0.0596 -0.0906 -0.0826 -1.4478 -0.0732 -0.0859 -0.0605 -0.0869 -1.6225 -0.0867 -0.1231 -0.0876 -0.6683 -0.0722 -0.0544 -0.0807 -0.4131 -0.0719 -0.0793 -0.0805 -0.4864 -0.0961 -0.1063 -0.1068 -0.0814 -0.1082 -0.1043 -0.0904 -0.0663 -0.0841 -0.0752 -0.1214 -0.1153 -0.0938 -0.1368 -0.7790 -0.1020 -0.1114 -0.0847 -0.1953 -0.0528 -0.0389 -0.0814 -0.0928 -0.0639 -1.3454 -0.0960 -0.1121 -0.1208 -0.1130 -0.2342 -0.1045 -0.0666 -0.0836 -0.1559 -0.0803 -0.1349 -0.0897 -0.0780 -0.1029 -0.0333 -0.0469 -0.0518 -0.0986 -0.9384 -0.1126 -0.1291 -0.9277 -0.2729 -0.1937 -0.1052 -0.0971 -0.0950 -0.0826 -0.1126 -0.1050 -0.0981 -0.0978 -0.0549 -0.0686 -0.1081 -0.0851 -0.0822 -0.1386 -0.1030 -0.0725 -0.0878 -0.0749 -0.0709 -1.0345 -0.0683 -0.0935 -0.0728 -0.8219 -0.0562 -0.0467 -0.1200 -0.0815 -0.0883 -0.0674 -0.1017 -0.0769 -0.0695 -0.0751 -0.3149 -0.0986 -0.1052 -0.1018 -0.0841 -0.0945 -0.0366 -0.0981 -0.7708 -0.1201 -0.1186 -0.8170 -0.3137 -0.1598 -0.1019 -0.1061 -0.0973 -0.0877 -0.0619 -0.0967 -0.0650 -0.1047 -0.0908 -0.0884 -0.0321 -0.1040 -0.4616 -0.1118 -0.0962 -0.6785 -0.1679 -0.0916 -0.0904 -0.0999 -0.0980 -0.0741 -0.0739 -0.1081 -0.1591 -0.0486 -0.0845 -1.1542 -0.0546 -0.1068 -0.1040 -0.0526 -0.0952 -1.0699 -0.1455 -0.0877 -0.0630 -0.9559 -0.0765 -0.1038 -0.0579 -0.0931 -0.0736 -0.1771 -0.0754 -0.0877
S-355	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += text.substring ( i, i + 1 ) + "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-355	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += text.substring ( i, i + 1 ) + "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-355	-0.17927780747413635	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += text. substring ( i, i + 1 ) + "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-355	-0.17927780747413635	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += text. substring ( i, i + 1 ) + "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-355	-0.0915 -0.0568 -1.0379 -0.0431 -0.0961 -0.0292 -0.1166 -0.8038 -0.0587 -0.0904 -0.0822 -1.5613 -0.0747 -0.0846 -0.0624 -0.0879 -1.6304 -0.0884 -0.1279 -0.0865 -0.6440 -0.0738 -0.0542 -0.0820 -0.4104 -0.0742 -0.0769 -0.0819 -0.4771 -0.0973 -0.1070 -0.1077 -0.0855 -0.1047 -0.1045 -0.0921 -0.0667 -0.0841 -0.0763 -0.1183 -0.1153 -0.0948 -0.1324 -0.7858 -0.1011 -0.1122 -0.0878 -0.1809 -0.0519 -0.0389 -0.0812 -0.0892 -0.0616 -1.1631 -0.0937 -0.1110 -0.1166 -0.1146 -0.2425 -0.1015 -0.0585 -0.0867 -0.1678 -0.0833 -0.1399 -0.0920 -0.0773 -0.0838 -0.0382 -0.1013 -0.8899 -0.1234 -0.1323 -0.9601 -0.1590 -0.2906 -0.1448 -0.0922 -0.3341 -0.0441 -0.3346 -0.0529 -0.1164 -0.1073 -0.0952 -0.0956 -0.0479 -0.0690 -0.0982 -0.0850 -0.0812 -0.1138 -0.1035 -0.0694 -0.0836 -0.0750 -0.0675 -1.0636 -0.0671 -0.0889 -0.0785 -0.8589 -0.0555 -0.0460 -0.1159 -0.0812 -0.0874 -0.0646 -0.1035 -0.0798 -0.0706 -0.0769 -0.3562 -0.0931 -0.0903 -0.1015 -0.0875 -0.1027 -0.0352 -0.1058 -0.3751 -0.1146 -0.1094 -0.5434 -0.0999 -0.2557 -0.1508 -0.0856 -0.0944 -0.0823 -0.0598 -0.0965 -0.0639 -0.1040 -0.0938 -0.0920 -0.0268 -0.1072 -0.2979 -0.1083 -0.0854 -0.5401 -0.0833 -0.1250 -0.1571 -0.0846 -0.0945 -0.0755 -0.0540 -0.1138 -0.0805 -0.0755 -0.5023 -0.0542 -0.1050 -0.0822 -0.0633 -0.5248 -0.1240 -0.0846 -0.0620 -0.7035 -0.0759 -0.0811 -0.0582 -0.0952 -0.0755 -0.1822 -0.0755 -0.0857
S-380	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( text.length () > i ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-380	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( text.length () > i ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-380	-0.18115194141864777	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( text.length () > i ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-380	-0.18115194141864777	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( text.length () > i ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-380	-0.0908 -0.0569 -0.9951 -0.0435 -0.0967 -0.0289 -0.1154 -0.7675 -0.0602 -0.0904 -0.0834 -1.4744 -0.0734 -0.0851 -0.0615 -0.0880 -1.6126 -0.0887 -0.1229 -0.0855 -0.6452 -0.0748 -0.0540 -0.0809 -0.3782 -0.0741 -0.0801 -0.0811 -0.4534 -0.0928 -0.1062 -0.1815 -0.1500 -0.0996 -0.0558 -0.1137 -0.1370 -0.0845 -0.0828 -0.1159 -0.1164 -0.0832 -0.1318 -0.7804 -0.1025 -0.1204 -0.0857 -0.1898 -0.0512 -0.0392 -0.0813 -0.0908 -0.0647 -1.1198 -0.0921 -0.1241 -0.1129 -0.1133 -0.2289 -0.1035 -0.0619 -0.0828 -0.1591 -0.0821 -0.1374 -0.0890 -0.0779 -0.1022 -0.0317 -0.0470 -0.0488 -0.0983 -0.9163 -0.1137 -0.1259 -0.8129 -0.1373 -0.1907 -0.1462 -0.0943 -0.0923 -0.0802 -0.1156 -0.1058 -0.1027 -0.0985 -0.0528 -0.0694 -0.1090 -0.0851 -0.0822 -0.1331 -0.1030 -0.0708 -0.0869 -0.0756 -0.0735 -1.2236 -0.0680 -0.0959 -0.0757 -1.1534 -0.0564 -0.0471 -0.1210 -0.0820 -0.0899 -0.0684 -0.1022 -0.0778 -0.0693 -0.0691 -0.3119 -0.0987 -0.1054 -0.1016 -0.0851 -0.0967 -0.0350 -0.0996 -0.7240 -0.1189 -0.1169 -0.6717 -0.1012 -0.2276 -0.1592 -0.0936 -0.0929 -0.0827 -0.0579 -0.0969 -0.0659 -0.1044 -0.0918 -0.0888 -0.0317 -0.1054 -0.4387 -0.1098 -0.0869 -0.5861 -0.0836 -0.1104 -0.1640 -0.0870 -0.0921 -0.0739 -0.0559 -0.1114 -0.0805 -0.0733 -0.5383 -0.0561 -0.1055 -0.0819 -0.0621 -0.5224 -0.1234 -0.0854 -0.0611 -0.7403 -0.0765 -0.0788 -0.0584 -0.0957 -0.0749 -0.1684 -0.0756 -0.0852
S-59	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || 31 < day ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-59	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || 31 < day ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-59	-0.20363342761993408	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || 31 < day ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-59	-0.20363342761993408	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || 31 < day ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-59	-0.0873 -0.0524 -0.0787 -0.0393 -0.0980 -0.0436 -0.1202 -1.4232 -0.0458 -0.0814 -0.0906 -0.5451 -0.0938 -1.7904 -0.0803 -0.0561 -0.1115 -0.6880 -0.0684 -0.0905 -3.6238 -0.0564 -0.2446 -0.0873 -0.4155 -0.7404 -0.0377 -0.0897 -0.1054 -0.0813 -0.0639 -0.1089 -0.4505 -0.1392 -0.0238 -0.0835 -0.0966 -0.3120 -0.1095 -0.0524 -0.1019 -0.1274 -0.1160 -0.0789 -0.1028 -0.0595 -0.0795 -0.0850 -0.0587 -1.4459 -0.1010 -0.0528 -0.0939 -0.8795 -0.0945 -1.3890 -0.1052 -0.0335 -0.0937 -0.0931 -0.8899 -0.0909 -0.0908 -0.0778 -0.0374 -0.0947 -0.7581 -0.0946 -1.2964 -0.1063 -0.0358 -0.0929 -0.0803 -0.4162 -0.0860 -0.0979 -0.0940 -0.0698 -0.0854 -0.5862 -0.0925 -1.1564 -0.1055 -0.0341 -0.0934 -0.0684 -0.0969 -0.0776 -0.0896 -0.2618 -0.1052 -0.1444 -0.0736 -0.1493 -0.1155 -0.0889 -0.0789 -0.0218 -0.0798 -0.0601 -0.0778 -0.7940 -0.0989 -1.8714 -0.0662 -0.0813 -0.0628 -0.0488 -0.0852 -0.0731 -0.1549 -0.0431 -0.0364 -0.0341 -0.0586 -0.1025 -0.0440 -0.1209 -0.1363 -0.1028 -0.0614 -0.0774 -0.0687 -0.4727 -0.0785 -0.0779 -0.1576 -0.1050 -0.0751 -0.0344 -0.0634 -0.9006 -0.0698 -0.2338 -0.0728 -0.0908 -0.1178 -0.1093 -0.1122 -0.1378 -0.0609 -0.0997 -0.0539 -0.2331 -0.1693 -0.1271 -1.0453 -0.2154 -0.1085 -0.0887 -0.0663 -0.1053 -0.0996 -0.0075 -0.0764 -0.0558 -0.1042 -0.0915 -0.0637 -0.0657 -0.5590 -0.1009 -0.1112 -1.4408 -0.0978 -0.0879 -0.0578 -0.0540 -0.0857 -0.0644 -0.0859 -0.0370 -0.1328 -0.0491 -0.1300 -0.0891 -0.0992 -0.0591 -0.0702 -0.0772 -0.4589 -0.0829 -0.0621 -0.1265 -0.1034 -0.0751 -0.0217 -0.0867 -0.8142 -0.0662 -0.2338 -0.0775 -0.0881 -0.1011 -0.1154 -0.1602 -0.1405 -0.0873 -0.1039 -0.0557 -0.3318 -0.1357 -0.1057 -0.4932 -0.1606 -0.0645 -0.0872 -0.1123 -0.0830 -0.0614 -0.1376 -0.0195 -0.0815 -0.0831 -0.0564 -0.0701 -0.4495 -0.0880 -0.1562 -0.1061 -0.1014 -0.0758 -0.1220 -0.1680 -0.1211 -0.0562 -0.0621 -0.0862 -0.0774 -0.0539 -0.1102 -0.0384 -0.0763 -0.0885 -0.0572 -0.0543 -0.6953 -0.0928 -1.0109 -0.0413 -0.1184 -0.1527 -0.0620 -0.0757 -0.1056 -0.0807 -0.0644 -0.6177 -0.0756 -0.0807 -0.0605 -1.3155 -0.0846 -0.0841
S-377	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( 3 < date_info.length ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-377	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( 3 < date_info.length ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-377	-0.20482929050922394	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( 3 < date_info.length ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-377	-0.20482929050922394	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( 3 < date_info.length ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-377	-0.0873 -0.0520 -0.0782 -0.0388 -0.0980 -0.0434 -0.1202 -1.4303 -0.0456 -0.0813 -0.0912 -0.5488 -0.0939 -1.6696 -0.0810 -0.0542 -0.1114 -0.6821 -0.0685 -0.0899 -3.7365 -0.0570 -0.2456 -0.0877 -0.4256 -0.7582 -0.0397 -0.0908 -0.1059 -0.0821 -0.0622 -0.1083 -0.4565 -0.1449 -0.0222 -0.0839 -0.0939 -0.3711 -0.1063 -0.0750 -0.1032 -0.0967 -0.1007 -0.1277 -0.0747 -0.0739 -0.0818 -0.0800 -0.0686 -1.4827 -0.0996 -0.0520 -0.0928 -0.8387 -0.0952 -1.3829 -0.1052 -0.0338 -0.0954 -0.0983 -0.9059 -0.0910 -0.0902 -0.0779 -0.0376 -0.0953 -0.7781 -0.0953 -1.2923 -0.1069 -0.0355 -0.0935 -0.0858 -0.4022 -0.0865 -0.0988 -0.0965 -0.0706 -0.0855 -0.5978 -0.0931 -1.1771 -0.1054 -0.0339 -0.0942 -0.0733 -0.0955 -0.0776 -0.0896 -0.2654 -0.1057 -0.1645 -0.0724 -0.1474 -0.1104 -0.0895 -0.0788 -0.0213 -0.0800 -0.0577 -0.0766 -0.8246 -0.1002 -1.8709 -0.0661 -0.0813 -0.0632 -0.0491 -0.0845 -0.0725 -0.1557 -0.0434 -0.0373 -0.0341 -0.0579 -0.1018 -0.0447 -0.1226 -0.1414 -0.1026 -0.0614 -0.0775 -0.0686 -0.4831 -0.0791 -0.0769 -0.1611 -0.1049 -0.0752 -0.0341 -0.0623 -0.9591 -0.0710 -0.2388 -0.0736 -0.0933 -0.1179 -0.1090 -0.1148 -0.1454 -0.0635 -0.1005 -0.0546 -0.2243 -0.1796 -0.1286 -1.0528 -0.2019 -0.1075 -0.0536 -0.0646 -0.0972 -0.1181 -0.0565 -0.1091 -0.0141 -0.0795 -0.0895 -0.0645 -0.0646 -0.5783 -0.0997 -0.1109 -1.4474 -0.0971 -0.0881 -0.0582 -0.0545 -0.0851 -0.0634 -0.0881 -0.0375 -0.1322 -0.0512 -0.1324 -0.0892 -0.0998 -0.0591 -0.0708 -0.0761 -0.4632 -0.0835 -0.0606 -0.1291 -0.1027 -0.0752 -0.0212 -0.0887 -0.8976 -0.0667 -0.2369 -0.0776 -0.0885 -0.1011 -0.1154 -0.1569 -0.1404 -0.0874 -0.1031 -0.0565 -0.3155 -0.1345 -0.1050 -0.4663 -0.1674 -0.0615 -0.0786 -0.1073 -0.0754 -0.0622 -0.1132 -0.0217 -0.0820 -0.0834 -0.0554 -0.0706 -0.4528 -0.0858 -0.1562 -0.1061 -0.1008 -0.0771 -0.1164 -0.1701 -0.1215 -0.0559 -0.0627 -0.0874 -0.0781 -0.0584 -0.1105 -0.0424 -0.0768 -0.0887 -0.0575 -0.0543 -0.6925 -0.0913 -0.9883 -0.0413 -0.1191 -0.1516 -0.0620 -0.0756 -0.1050 -0.0800 -0.0639 -0.6082 -0.0755 -0.0813 -0.0602 -1.3114 -0.0839 -0.0835
S-364	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; month_check1.length > i; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-364	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; month_check1.length > i; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-364	-0.20442704856395721	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; month_check1.length > i; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-364	-0.20442704856395721	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; month_check1.length > i; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-364	-0.0873 -0.0524 -0.0787 -0.0393 -0.0979 -0.0433 -0.1202 -1.4228 -0.0458 -0.0815 -0.0905 -0.5400 -0.0938 -1.7522 -0.0804 -0.0561 -0.1116 -0.6840 -0.0684 -0.0905 -3.6243 -0.0564 -0.2419 -0.0872 -0.4208 -0.7345 -0.0368 -0.0904 -0.1053 -0.0813 -0.0639 -0.1081 -0.4477 -0.1392 -0.0227 -0.0836 -0.0966 -0.3110 -0.1095 -0.0528 -0.1021 -0.1274 -0.1157 -0.0762 -0.1043 -0.0599 -0.0792 -0.0850 -0.0591 -1.4530 -0.1003 -0.0532 -0.0931 -0.8725 -0.0946 -1.3938 -0.1052 -0.0335 -0.0937 -0.0926 -0.8844 -0.0909 -0.0909 -0.0777 -0.0372 -0.0946 -0.7539 -0.0947 -1.2980 -0.1070 -0.0356 -0.0929 -0.0804 -0.4050 -0.0861 -0.0981 -0.0941 -0.0707 -0.0854 -0.5859 -0.0925 -1.1987 -0.1055 -0.0341 -0.0927 -0.0685 -0.0955 -0.0776 -0.0896 -0.2640 -0.1052 -0.1435 -0.0751 -0.1521 -0.1070 -0.0923 -0.0788 -0.0217 -0.0797 -0.0596 -0.0761 -0.8133 -0.0991 -1.8470 -0.0658 -0.0819 -0.0637 -0.0507 -0.0826 -0.0728 -0.1535 -0.0432 -0.0375 -0.0339 -0.0575 -0.0978 -0.0435 -0.1196 -0.1288 -0.1027 -0.0613 -0.0772 -0.0693 -0.4444 -0.2791 -0.1062 -0.0786 -0.0313 -0.0617 -0.1048 -0.0792 -0.6966 -0.0690 -0.2558 -0.0740 -0.0947 -0.1191 -0.1090 -0.1012 -0.1438 -0.0620 -0.1005 -0.0544 -0.2244 -0.1831 -0.1294 -0.9750 -0.1939 -0.1068 -0.0528 -0.0631 -0.0975 -0.1148 -0.0573 -0.1096 -0.0137 -0.0795 -0.0880 -0.0646 -0.0651 -0.5944 -0.1021 -0.1118 -1.4368 -0.0967 -0.0880 -0.0575 -0.0505 -0.0844 -0.0628 -0.0872 -0.0378 -0.1339 -0.0507 -0.1368 -0.0890 -0.1000 -0.0595 -0.0686 -0.0737 -0.5056 -0.1041 -0.0584 -0.1254 -0.0981 -0.0732 -0.0224 -0.0837 -1.1749 -0.0656 -0.2515 -0.0776 -0.0893 -0.1011 -0.1157 -0.1555 -0.1389 -0.0887 -0.1023 -0.0551 -0.2941 -0.1357 -0.1048 -0.4505 -0.1684 -0.0615 -0.0790 -0.1071 -0.0743 -0.0622 -0.1155 -0.0218 -0.0819 -0.0828 -0.0559 -0.0707 -0.4649 -0.0858 -0.1567 -0.1062 -0.0998 -0.0763 -0.1152 -0.1687 -0.1217 -0.0559 -0.0617 -0.0882 -0.0781 -0.0584 -0.1114 -0.0423 -0.0768 -0.0888 -0.0576 -0.0543 -0.7071 -0.0921 -1.0186 -0.0412 -0.1183 -0.1513 -0.0620 -0.0751 -0.1047 -0.0795 -0.0644 -0.6296 -0.0755 -0.0806 -0.0605 -1.3456 -0.0846 -0.0842
S-359	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-359	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-359	-0.20364807546138763	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-359	-0.20364807546138763	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-359	-0.0882 -0.0523 -0.0788 -0.0396 -0.0979 -0.0436 -0.1202 -1.4028 -0.0461 -0.0814 -0.0905 -0.5408 -0.0938 -1.7576 -0.0803 -0.0561 -0.1116 -0.6881 -0.0684 -0.0905 -3.6141 -0.0568 -0.2429 -0.0879 -0.4172 -0.7407 -0.0393 -0.0904 -0.1055 -0.0813 -0.0639 -0.1082 -0.4416 -0.1405 -0.0228 -0.0836 -0.0967 -0.3065 -0.1096 -0.0536 -0.1021 -0.1277 -0.1171 -0.0784 -0.1049 -0.0587 -0.0790 -0.0868 -0.0587 -1.4278 -0.1004 -0.0520 -0.0923 -0.8762 -0.0946 -1.4055 -0.1051 -0.0335 -0.0944 -0.0920 -0.8857 -0.0908 -0.0916 -0.0775 -0.0369 -0.0900 -0.7536 -0.0948 -1.3028 -0.1062 -0.0364 -0.0930 -0.0810 -0.4082 -0.0861 -0.0985 -0.0933 -0.0687 -0.0860 -0.5804 -0.0926 -1.2059 -0.1046 -0.0346 -0.0927 -0.0682 -0.0942 -0.0777 -0.0895 -0.2694 -0.1044 -0.1488 -0.0678 -0.1552 -0.1080 -0.0902 -0.0794 -0.0228 -0.0796 -0.0601 -0.0753 -0.8257 -0.0970 -1.8369 -0.0675 -0.0819 -0.0636 -0.0490 -0.0845 -0.0726 -0.1547 -0.0415 -0.0368 -0.0335 -0.0580 -0.1006 -0.0446 -0.1225 -0.1362 -0.1027 -0.0620 -0.0774 -0.0680 -0.4702 -0.0791 -0.0721 -0.1667 -0.1035 -0.0748 -0.0332 -0.0608 -0.9268 -0.0722 -0.2394 -0.0739 -0.0921 -0.1184 -0.1091 -0.1164 -0.1453 -0.0645 -0.1014 -0.0535 -0.2159 -0.1710 -0.1280 -1.0241 -0.1724 -0.1026 -0.1289 -0.0808 -0.0567 -0.1274 -0.0678 -0.1030 -0.0131 -0.0780 -0.0885 -0.0649 -0.0636 -0.5960 -0.0989 -0.1113 -1.4058 -0.0963 -0.0885 -0.0585 -0.0535 -0.0851 -0.0630 -0.0923 -0.0371 -0.1292 -0.0514 -0.1355 -0.0885 -0.0992 -0.0593 -0.0707 -0.0759 -0.4519 -0.0840 -0.0571 -0.1314 -0.1027 -0.0761 -0.0206 -0.0826 -0.8119 -0.0677 -0.2397 -0.0785 -0.0882 -0.1020 -0.1153 -0.1560 -0.1389 -0.0872 -0.1029 -0.0557 -0.2597 -0.1237 -0.1020 -0.4597 -0.1637 -0.1425 -0.0732 -0.0597 -0.0752 -0.0613 -0.1052 -0.0208 -0.0796 -0.0794 -0.0567 -0.0693 -0.4702 -0.0843 -0.1617 -0.1060 -0.1069 -0.0793 -0.1169 -0.1692 -0.1173 -0.1109 -0.0838 -0.0537 -0.0787 -0.0546 -0.1086 -0.0381 -0.0760 -0.0866 -0.0581 -0.0556 -0.7368 -0.0918 -1.0352 -0.0411 -0.1183 -0.1480 -0.0623 -0.0751 -0.1047 -0.0804 -0.0642 -0.6415 -0.0755 -0.0812 -0.0606 -1.3687 -0.0845 -0.0835
S-358	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || 12 < month ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-358	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || 12 < month ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-358	-0.2033897042274475	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || 12 < month ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true ; }
D-358	-0.2033897042274475	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || 12 < month ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true ; }
P-358	-0.0873 -0.0530 -0.0778 -0.0391 -0.0980 -0.0436 -0.1202 -1.4297 -0.0461 -0.0814 -0.0906 -0.5536 -0.0938 -3.1971 -0.0566 -0.1804 -0.0811 -0.2367 -1.8837 -0.0349 -0.1126 -0.0966 -0.0730 -0.0554 -0.1208 -0.5446 -0.1625 -0.0262 -0.0882 -0.0955 -0.3462 -0.1110 -0.0566 -0.1039 -0.1294 -0.1178 -0.0796 -0.1072 -0.0606 -0.0805 -0.0850 -0.0605 -1.3144 -0.1067 -0.0560 -0.0941 -0.9218 -0.0937 -1.3583 -0.1054 -0.0360 -0.0952 -0.0956 -0.8956 -0.0911 -0.0916 -0.0761 -0.0349 -0.0966 -0.7768 -0.0945 -1.2793 -0.1068 -0.0393 -0.0950 -0.0815 -0.3849 -0.0852 -0.0973 -0.0965 -0.0744 -0.0862 -0.5913 -0.0917 -1.2703 -0.1056 -0.0365 -0.0954 -0.0692 -0.0941 -0.0775 -0.0890 -0.2900 -0.1060 -0.1452 -0.0845 -0.1415 -0.0940 -0.0325 -0.1100 -0.0898 -0.0824 -0.0675 -0.0743 -0.7798 -0.1001 -1.9258 -0.0646 -0.0817 -0.0627 -0.0498 -0.0850 -0.0717 -0.1658 -0.0422 -0.0381 -0.0335 -0.0572 -0.1042 -0.0467 -0.1107 -0.1511 -0.1026 -0.0614 -0.0781 -0.0692 -0.4802 -0.0798 -0.0796 -0.1545 -0.1052 -0.0757 -0.0349 -0.0631 -0.9413 -0.0711 -0.2376 -0.0732 -0.0922 -0.1204 -0.1099 -0.1127 -0.1419 -0.0636 -0.1009 -0.0542 -0.2299 -0.1848 -0.1343 -1.0962 -0.2058 -0.1082 -0.0539 -0.0668 -0.0968 -0.1273 -0.0570 -0.1123 -0.0148 -0.0798 -0.0894 -0.0651 -0.0643 -0.5893 -0.1023 -0.1114 -1.4775 -0.0967 -0.0885 -0.0582 -0.0542 -0.0848 -0.0637 -0.0915 -0.0378 -0.1333 -0.0525 -0.1226 -0.0892 -0.0999 -0.0596 -0.0709 -0.0771 -0.4724 -0.0841 -0.0643 -0.1278 -0.1041 -0.0741 -0.0216 -0.0880 -0.8242 -0.0662 -0.2365 -0.0769 -0.0889 -0.1018 -0.1153 -0.1574 -0.1414 -0.0882 -0.1044 -0.0557 -0.3381 -0.1346 -0.1075 -0.4585 -0.1696 -0.0614 -0.0799 -0.1056 -0.0767 -0.0615 -0.1119 -0.0226 -0.0819 -0.0826 -0.0566 -0.0712 -0.4614 -0.0880 -0.1594 -0.1067 -0.1020 -0.0774 -0.1173 -0.1685 -0.1227 -0.0554 -0.0639 -0.0855 -0.0802 -0.0578 -0.1099 -0.0440 -0.0773 -0.0888 -0.0578 -0.0544 -0.7168 -0.0949 -1.1290 -0.0408 -0.1192 -0.1677 -0.0632 -0.0754 -0.1077 -0.0855 -0.0654 -0.6607 -0.0773 -0.0813 -0.0641 -1.5188 -0.0825 -0.0762
S-343	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month_check2[i] == month && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-343	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month_check2[i] == month && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-343	-0.20377467572689056	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month_check2[i] == month && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-343	-0.20377467572689056	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month_check2[i] == month && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-343	-0.0872 -0.0524 -0.0787 -0.0393 -0.0979 -0.0433 -0.1202 -1.4233 -0.0458 -0.0814 -0.0912 -0.5448 -0.0938 -1.7685 -0.0810 -0.0561 -0.1116 -0.6861 -0.0684 -0.0904 -3.6029 -0.0564 -0.2463 -0.0873 -0.4101 -0.7424 -0.0374 -0.0896 -0.1055 -0.0813 -0.0634 -0.1089 -0.4520 -0.1392 -0.0234 -0.0836 -0.0966 -0.3098 -0.1095 -0.0528 -0.1019 -0.1275 -0.1168 -0.0794 -0.1042 -0.0595 -0.0791 -0.0856 -0.0588 -1.4386 -0.1013 -0.0553 -0.0946 -0.8761 -0.0946 -1.3905 -0.1052 -0.0338 -0.0942 -0.0931 -0.8791 -0.0902 -0.0908 -0.0784 -0.0364 -0.0953 -0.7522 -0.0947 -1.2943 -0.1061 -0.0358 -0.0929 -0.0803 -0.4095 -0.0855 -0.0981 -0.0960 -0.0696 -0.0860 -0.5816 -0.0925 -1.2238 -0.1054 -0.0344 -0.0926 -0.0693 -0.0967 -0.0776 -0.0896 -0.2685 -0.1053 -0.1404 -0.0722 -0.1499 -0.1100 -0.0926 -0.0811 -0.0222 -0.0797 -0.0601 -0.0765 -0.8055 -0.0990 -1.8698 -0.0666 -0.0818 -0.0633 -0.0495 -0.0846 -0.0725 -0.1553 -0.0430 -0.0373 -0.0337 -0.0581 -0.1008 -0.0446 -0.1212 -0.1404 -0.1027 -0.0610 -0.0779 -0.0687 -0.4783 -0.0785 -0.0757 -0.1608 -0.1053 -0.0741 -0.0343 -0.0630 -0.9237 -0.0705 -0.2376 -0.0730 -0.0914 -0.1156 -0.1108 -0.1010 -0.1106 -0.0637 -0.1008 -0.0533 -0.2267 -0.1764 -0.1315 -0.9953 -0.1965 -0.1076 -0.0512 -0.0648 -0.0980 -0.1175 -0.0569 -0.1096 -0.0134 -0.0793 -0.0891 -0.0662 -0.0642 -0.5878 -0.1006 -0.1119 -1.4386 -0.0955 -0.0888 -0.0596 -0.0562 -0.0843 -0.0626 -0.0880 -0.0380 -0.1326 -0.0511 -0.1345 -0.0924 -0.1000 -0.0593 -0.0733 -0.0783 -0.4643 -0.0861 -0.0562 -0.1248 -0.1029 -0.0753 -0.0231 -0.0871 -0.8555 -0.0673 -0.2474 -0.0776 -0.0880 -0.0988 -0.1161 -0.1431 -0.1183 -0.0608 -0.3378 -0.1718 -0.1361 -0.1668 -0.1123 -0.3018 -0.1716 -0.0602 -0.0810 -0.1155 -0.0763 -0.0661 -0.1136 -0.0222 -0.0812 -0.0828 -0.0559 -0.0706 -0.4693 -0.0876 -0.1699 -0.1087 -0.1026 -0.1313 -0.0769 -0.1546 -0.1259 -0.0528 -0.0646 -0.0874 -0.0752 -0.0575 -0.1107 -0.0434 -0.0766 -0.0892 -0.0576 -0.0549 -0.7167 -0.0914 -1.0122 -0.0415 -0.1183 -0.1504 -0.0620 -0.0756 -0.1048 -0.0794 -0.0644 -0.6283 -0.0755 -0.0812 -0.0605 -1.3351 -0.0840 -0.0841
S-329	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day > 30 || day < 1 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-329	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day > 30 || day < 1 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-329	-0.2038743942975998	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day > 30 || day < 1 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-329	-0.2038743942975998	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day > 30 || day < 1 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-329	-0.0875 -0.0524 -0.0787 -0.0393 -0.0979 -0.0436 -0.1202 -1.4232 -0.0461 -0.0814 -0.0913 -0.5453 -0.0938 -1.7826 -0.0803 -0.0561 -0.1116 -0.6881 -0.0684 -0.0905 -3.6170 -0.0563 -0.2445 -0.0873 -0.4132 -0.7370 -0.0372 -0.0897 -0.1053 -0.0820 -0.0639 -0.1081 -0.4505 -0.1390 -0.0234 -0.0836 -0.0967 -0.3098 -0.1095 -0.0528 -0.1020 -0.1275 -0.1169 -0.0794 -0.1044 -0.0594 -0.0797 -0.0856 -0.0589 -1.4493 -0.1003 -0.0529 -0.0931 -0.8799 -0.0945 -1.3894 -0.1052 -0.0335 -0.0937 -0.0925 -0.8844 -0.0909 -0.0916 -0.0773 -0.0366 -0.0933 -0.7543 -0.0946 -1.2940 -0.1062 -0.0356 -0.0930 -0.0804 -0.4091 -0.0855 -0.0981 -0.0949 -0.0704 -0.0854 -0.5825 -0.0925 -1.2017 -0.1055 -0.0341 -0.0927 -0.0685 -0.0959 -0.0776 -0.0896 -0.2666 -0.1052 -0.1438 -0.0733 -0.1517 -0.1166 -0.0903 -0.0807 -0.0223 -0.0799 -0.0600 -0.0777 -0.7825 -0.0983 -1.8702 -0.0666 -0.0813 -0.0628 -0.0491 -0.0846 -0.0725 -0.1582 -0.0429 -0.0374 -0.0341 -0.0582 -0.1018 -0.0445 -0.1221 -0.1414 -0.1028 -0.0614 -0.0775 -0.0681 -0.4800 -0.0791 -0.0748 -0.1612 -0.1042 -0.0746 -0.0340 -0.0626 -0.9307 -0.0711 -0.2382 -0.0736 -0.0906 -0.1187 -0.1091 -0.1111 -0.1405 -0.0627 -0.1005 -0.0543 -0.2289 -0.1782 -0.1303 -1.0051 -0.2099 -0.1070 -0.0516 -0.0620 -0.0938 -0.1425 -0.0530 -0.1054 -0.0105 -0.0782 -0.0879 -0.0656 -0.0647 -0.5675 -0.0997 -0.1109 -1.4473 -0.0975 -0.0888 -0.0582 -0.0537 -0.0851 -0.0633 -0.0885 -0.0379 -0.1337 -0.0509 -0.1338 -0.0896 -0.0992 -0.0591 -0.0714 -0.0759 -0.4632 -0.0836 -0.0587 -0.1287 -0.1035 -0.0747 -0.0211 -0.0868 -0.8328 -0.0669 -0.2349 -0.0778 -0.0881 -0.1032 -0.1155 -0.1578 -0.1368 -0.0865 -0.1030 -0.0559 -0.3079 -0.1340 -0.1043 -0.4771 -0.1653 -0.0678 -0.1502 -0.0152 -0.1129 -0.0496 -0.0799 -0.1295 -0.0883 -0.0860 -0.0555 -0.0716 -0.4090 -0.0838 -0.1547 -0.1071 -0.1007 -0.0771 -0.1074 -0.1753 -0.1263 -0.0537 -0.1017 -0.0935 -0.0816 -0.0533 -0.1106 -0.0343 -0.0727 -0.0862 -0.0577 -0.0554 -0.6601 -0.0920 -1.0418 -0.0416 -0.1184 -0.1502 -0.0617 -0.0757 -0.1045 -0.0799 -0.0648 -0.6094 -0.0755 -0.0806 -0.0602 -1.3390 -0.0846 -0.0835
S-325	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; month_check2.length > i; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-325	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; month_check2.length > i; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-325	-0.20415428280830383	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; month_check2.length > i; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-325	-0.20415428280830383	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; month_check2.length > i; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-325	-0.0881 -0.0524 -0.0787 -0.0396 -0.0980 -0.0436 -0.1201 -1.4229 -0.0461 -0.0814 -0.0906 -0.5485 -0.0938 -1.7734 -0.0804 -0.0561 -0.1116 -0.6797 -0.0684 -0.0905 -3.6283 -0.0564 -0.2419 -0.0872 -0.4174 -0.7336 -0.0363 -0.0898 -0.1055 -0.0814 -0.0635 -0.1090 -0.4476 -0.1402 -0.0231 -0.0836 -0.0959 -0.3142 -0.1095 -0.0532 -0.1020 -0.1284 -0.1157 -0.0754 -0.1040 -0.0596 -0.0798 -0.0848 -0.0590 -1.4389 -0.1002 -0.0532 -0.0930 -0.8669 -0.0939 -1.3935 -0.1052 -0.0333 -0.0937 -0.0925 -0.8808 -0.0909 -0.0909 -0.0782 -0.0370 -0.0946 -0.7533 -0.0947 -1.2979 -0.1062 -0.0355 -0.0930 -0.0809 -0.4099 -0.0861 -0.0980 -0.0940 -0.0709 -0.0854 -0.5824 -0.0925 -1.1810 -0.1054 -0.0338 -0.0927 -0.0690 -0.0952 -0.0776 -0.0896 -0.2656 -0.1052 -0.1430 -0.0732 -0.1533 -0.1076 -0.0915 -0.0785 -0.0219 -0.0799 -0.0601 -0.0771 -0.8122 -0.0990 -1.8600 -0.0647 -0.0801 -0.0625 -0.0485 -0.0846 -0.0720 -0.1528 -0.0427 -0.0371 -0.0337 -0.0580 -0.0997 -0.0442 -0.1208 -0.1392 -0.1034 -0.0610 -0.0764 -0.0696 -0.4415 -0.0718 -0.0645 -0.1372 -0.1002 -0.0716 -0.0356 -0.0522 -1.2568 -0.0699 -0.2400 -0.0737 -0.0920 -0.1195 -0.1091 -0.1102 -0.1340 -0.0617 -0.0992 -0.0544 -0.2384 -0.1732 -0.1258 -0.9806 -0.1959 -0.1076 -0.0528 -0.0628 -0.0980 -0.1165 -0.0565 -0.1088 -0.0135 -0.0795 -0.0890 -0.0652 -0.0649 -0.5945 -0.1003 -0.1120 -1.4339 -0.0925 -0.0861 -0.0563 -0.0554 -0.0832 -0.0634 -0.0870 -0.0373 -0.1315 -0.0514 -0.1288 -0.0857 -0.1006 -0.0582 -0.0711 -0.0751 -0.3872 -0.3251 -0.1086 -0.0705 -0.0212 -0.0764 -0.1756 -0.0732 -0.5284 -0.0625 -0.2569 -0.0760 -0.0906 -0.1003 -0.1157 -0.1354 -0.1384 -0.0764 -0.1018 -0.0536 -0.3872 -0.1324 -0.1012 -0.4687 -0.1684 -0.0601 -0.0795 -0.1079 -0.0754 -0.0618 -0.1128 -0.0216 -0.0819 -0.0825 -0.0559 -0.0720 -0.4645 -0.0871 -0.1551 -0.1063 -0.0963 -0.0760 -0.1152 -0.1698 -0.1228 -0.0560 -0.0631 -0.0894 -0.0771 -0.0581 -0.1112 -0.0434 -0.0768 -0.0888 -0.0580 -0.0547 -0.7060 -0.0927 -1.0447 -0.0415 -0.1184 -0.1491 -0.0616 -0.0751 -0.1047 -0.0795 -0.0644 -0.6248 -0.0756 -0.0806 -0.0598 -1.3358 -0.0846 -0.0835
S-324	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day > 31 || day < 1 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-324	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day > 31 || day < 1 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-324	-0.20455478131771088	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day > 31 || day < 1 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-324	-0.20455478131771088	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day > 31 || day < 1 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-324	-0.0875 -0.0528 -0.0787 -0.0393 -0.0980 -0.0436 -0.1202 -1.4235 -0.0458 -0.0814 -0.0906 -0.5446 -0.0938 -1.7820 -0.0803 -0.0565 -0.1116 -0.6881 -0.0685 -0.0905 -3.6241 -0.0564 -0.2447 -0.0880 -0.4132 -0.7362 -0.0374 -0.0897 -0.1053 -0.0820 -0.0639 -0.1089 -0.4490 -0.1388 -0.0230 -0.0836 -0.0967 -0.3074 -0.1095 -0.0528 -0.1019 -0.1267 -0.1169 -0.0795 -0.1045 -0.0603 -0.0796 -0.0857 -0.0590 -1.4611 -0.1002 -0.0529 -0.0932 -0.8797 -0.0946 -1.3897 -0.1052 -0.0335 -0.0937 -0.0932 -0.8844 -0.0909 -0.0916 -0.0777 -0.0363 -0.0923 -0.7581 -0.0946 -1.2971 -0.1062 -0.0356 -0.0930 -0.0804 -0.4100 -0.0855 -0.0980 -0.0948 -0.0699 -0.0854 -0.5830 -0.0925 -1.1807 -0.1055 -0.0341 -0.0934 -0.0685 -0.0956 -0.0777 -0.0897 -0.2601 -0.1053 -0.1418 -0.0717 -0.1512 -0.1167 -0.0881 -0.0790 -0.0221 -0.0798 -0.0601 -0.0766 -0.7958 -0.0988 -1.8797 -0.0662 -0.0813 -0.0624 -0.0487 -0.0847 -0.0731 -0.1560 -0.0420 -0.0364 -0.0335 -0.0582 -0.1010 -0.0447 -0.1208 -0.1379 -0.1027 -0.0614 -0.0781 -0.0685 -0.4759 -0.0792 -0.0753 -0.1599 -0.1043 -0.0747 -0.0340 -0.0631 -0.9101 -0.0705 -0.2351 -0.0732 -0.0902 -0.1189 -0.1084 -0.1105 -0.1356 -0.0629 -0.1008 -0.0540 -0.2307 -0.1722 -0.1233 -1.0847 -0.2182 -0.1071 -0.0547 -0.1127 -0.0092 -0.1766 -0.0578 -0.0658 -0.1276 -0.0890 -0.0905 -0.0622 -0.0640 -0.5527 -0.1003 -0.1093 -1.4568 -0.0992 -0.0887 -0.0582 -0.0545 -0.0846 -0.0639 -0.0855 -0.0372 -0.1320 -0.0489 -0.1290 -0.0890 -0.0992 -0.0592 -0.0714 -0.0760 -0.4592 -0.0836 -0.0600 -0.1306 -0.1035 -0.0746 -0.0214 -0.0865 -0.8332 -0.0668 -0.2372 -0.0779 -0.0883 -0.1010 -0.1155 -0.1574 -0.1392 -0.0873 -0.1032 -0.0557 -0.3220 -0.1357 -0.1059 -0.5069 -0.1618 -0.0626 -0.1011 -0.1278 -0.1023 -0.0609 -0.1261 -0.0179 -0.0817 -0.0824 -0.0567 -0.0699 -0.4505 -0.0863 -0.1584 -0.1062 -0.0999 -0.0755 -0.1184 -0.1718 -0.1221 -0.0551 -0.0616 -0.0863 -0.0816 -0.0551 -0.1082 -0.0381 -0.0753 -0.0878 -0.0572 -0.0545 -0.6904 -0.0920 -1.0167 -0.0413 -0.1184 -0.1516 -0.0622 -0.0756 -0.1049 -0.0800 -0.0639 -0.6210 -0.0756 -0.0813 -0.0607 -1.3358 -0.0846 -0.0835
S-301	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month > 12 || month < 1 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-301	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month > 12 || month < 1 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-301	-0.2037126123905182	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month > 12 || month < 1 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-301	-0.2037126123905182	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month > 12 || month < 1 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-301	-0.0874 -0.0529 -0.0788 -0.0391 -0.0980 -0.0433 -0.1202 -1.4163 -0.0461 -0.0815 -0.0905 -0.5509 -0.0938 -1.7779 -0.0803 -0.0565 -0.1115 -0.6838 -0.0684 -0.0904 -3.6070 -0.0564 -0.2447 -0.0880 -0.4090 -0.7428 -0.0369 -0.0897 -0.1054 -0.0820 -0.0634 -0.1089 -0.4491 -0.1390 -0.0231 -0.0836 -0.0966 -0.3156 -0.1102 -0.0524 -0.1020 -0.1275 -0.1167 -0.0795 -0.1051 -0.0608 -0.0790 -0.0873 -0.0591 -1.4570 -0.1003 -0.0522 -0.0886 -0.8555 -0.0945 -1.3791 -0.1052 -0.0333 -0.0943 -0.0925 -0.8829 -0.0909 -0.0910 -0.0780 -0.0367 -0.0947 -0.7544 -0.0953 -1.2940 -0.1063 -0.0355 -0.0929 -0.0804 -0.4183 -0.0861 -0.0987 -0.0940 -0.0709 -0.0861 -0.5824 -0.0925 -1.1634 -0.1055 -0.0340 -0.0927 -0.0681 -0.0964 -0.0778 -0.0896 -0.2669 -0.1069 -0.1379 -0.1696 -0.0185 -0.1669 -0.0954 -0.0614 -0.1237 -0.0850 -0.0605 -0.0719 -0.8183 -0.0980 -1.8653 -0.0672 -0.0813 -0.0632 -0.0496 -0.0847 -0.0726 -0.1545 -0.0425 -0.0370 -0.0330 -0.0571 -0.0994 -0.0463 -0.1122 -0.1372 -0.1027 -0.0614 -0.0775 -0.0687 -0.4654 -0.0792 -0.0758 -0.1639 -0.1044 -0.0747 -0.0336 -0.0622 -0.9397 -0.0711 -0.2374 -0.0731 -0.0924 -0.1188 -0.1092 -0.1116 -0.1472 -0.0614 -0.1014 -0.0540 -0.2247 -0.1719 -0.1286 -1.0269 -0.2083 -0.1086 -0.0529 -0.0680 -0.1029 -0.1215 -0.0555 -0.1059 -0.0139 -0.0795 -0.0890 -0.0652 -0.0647 -0.5841 -0.0997 -0.1119 -1.4425 -0.0980 -0.0882 -0.0583 -0.0541 -0.0852 -0.0634 -0.0874 -0.0378 -0.1308 -0.0520 -0.1291 -0.0890 -0.0999 -0.0596 -0.0713 -0.0772 -0.4519 -0.0835 -0.0603 -0.1301 -0.1042 -0.0751 -0.0213 -0.0865 -0.8308 -0.0663 -0.2358 -0.0782 -0.0889 -0.1012 -0.1155 -0.1545 -0.1434 -0.0850 -0.1038 -0.0562 -0.3106 -0.1326 -0.1050 -0.4412 -0.1666 -0.0615 -0.0823 -0.1084 -0.0758 -0.0613 -0.1112 -0.0219 -0.0821 -0.0830 -0.0555 -0.0711 -0.4505 -0.0856 -0.1581 -0.1069 -0.1007 -0.0783 -0.1094 -0.1703 -0.1233 -0.0556 -0.0647 -0.0872 -0.0779 -0.0575 -0.1092 -0.0430 -0.0773 -0.0882 -0.0580 -0.0548 -0.6953 -0.0914 -0.9963 -0.0412 -0.1183 -0.1526 -0.0621 -0.0751 -0.1050 -0.0812 -0.0647 -0.6198 -0.0755 -0.0814 -0.0610 -1.3455 -0.0850 -0.0841
S-298	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-298	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-298	-0.20364823937416077	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-298	-0.20364823937416077	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-298	-0.0882 -0.0523 -0.0788 -0.0396 -0.0979 -0.0436 -0.1202 -1.4028 -0.0461 -0.0814 -0.0905 -0.5408 -0.0938 -1.7576 -0.0803 -0.0561 -0.1116 -0.6881 -0.0684 -0.0905 -3.6141 -0.0568 -0.2429 -0.0879 -0.4172 -0.7407 -0.0393 -0.0904 -0.1055 -0.0813 -0.0639 -0.1082 -0.4416 -0.1405 -0.0228 -0.0836 -0.0967 -0.3065 -0.1096 -0.0536 -0.1021 -0.1277 -0.1171 -0.0784 -0.1049 -0.0587 -0.0790 -0.0868 -0.0587 -1.4278 -0.1004 -0.0520 -0.0923 -0.8762 -0.0946 -1.4055 -0.1051 -0.0335 -0.0944 -0.0920 -0.8857 -0.0908 -0.0916 -0.0775 -0.0369 -0.0900 -0.7536 -0.0948 -1.3028 -0.1062 -0.0364 -0.0930 -0.0810 -0.4082 -0.0861 -0.0985 -0.0933 -0.0687 -0.0860 -0.5804 -0.0926 -1.2059 -0.1046 -0.0346 -0.0927 -0.0682 -0.0942 -0.0777 -0.0895 -0.2694 -0.1044 -0.1488 -0.0678 -0.1552 -0.1080 -0.0902 -0.0794 -0.0228 -0.0796 -0.0601 -0.0753 -0.8257 -0.0970 -1.8369 -0.0675 -0.0819 -0.0636 -0.0490 -0.0845 -0.0726 -0.1547 -0.0415 -0.0368 -0.0335 -0.0580 -0.1006 -0.0446 -0.1225 -0.1362 -0.1027 -0.0620 -0.0774 -0.0680 -0.4702 -0.0791 -0.0721 -0.1667 -0.1035 -0.0748 -0.0332 -0.0608 -0.9268 -0.0722 -0.2394 -0.0739 -0.0920 -0.1184 -0.1091 -0.1164 -0.1453 -0.0645 -0.1014 -0.0535 -0.2159 -0.1710 -0.1280 -1.0241 -0.1724 -0.1026 -0.1289 -0.0808 -0.0567 -0.1274 -0.0678 -0.1030 -0.0131 -0.0780 -0.0885 -0.0649 -0.0636 -0.5960 -0.0989 -0.1113 -1.4058 -0.0963 -0.0885 -0.0585 -0.0535 -0.0851 -0.0630 -0.0923 -0.0371 -0.1292 -0.0514 -0.1355 -0.0885 -0.0992 -0.0593 -0.0707 -0.0759 -0.4519 -0.0840 -0.0571 -0.1314 -0.1027 -0.0761 -0.0206 -0.0826 -0.8119 -0.0677 -0.2397 -0.0785 -0.0882 -0.1020 -0.1153 -0.1560 -0.1389 -0.0872 -0.1029 -0.0557 -0.2597 -0.1237 -0.1020 -0.4597 -0.1637 -0.1425 -0.0732 -0.0597 -0.0752 -0.0613 -0.1052 -0.0208 -0.0796 -0.0794 -0.0567 -0.0693 -0.4702 -0.0843 -0.1617 -0.1060 -0.1069 -0.0793 -0.1169 -0.1692 -0.1173 -0.1109 -0.0838 -0.0537 -0.0787 -0.0546 -0.1086 -0.0381 -0.0760 -0.0866 -0.0581 -0.0556 -0.7368 -0.0918 -1.0352 -0.0411 -0.1183 -0.1480 -0.0623 -0.0751 -0.1047 -0.0804 -0.0642 -0.6415 -0.0755 -0.0812 -0.0606 -1.3687 -0.0845 -0.0835
S-285	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( ( day < 1 || day > 29 ) && month == 2 ) return false; } catch ( Exception e ) { return false; } return true; }
T-285	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( ( day < 1 || day > 29 ) && month == 2 ) return false; } catch ( Exception e ) { return false; } return true; }
H-285	-0.2064545750617981	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( ( day < 1 || day > 29 ) && month == 2 ) return false; } } catch ( Exception e ) { return false; } return true ; }
D-285	-0.2064545750617981	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( ( day < 1 || day > 29 ) && month == 2 ) return false; } } catch ( Exception e ) { return false; } return true ; }
P-285	-0.0846 -0.0529 -0.0779 -0.0396 -0.0980 -0.0434 -0.1203 -1.4164 -0.0461 -0.0814 -0.0906 -0.5284 -0.0932 -3.1848 -0.0570 -0.1783 -0.0810 -0.2359 -1.8830 -0.0354 -0.1125 -0.0968 -0.0735 -0.0554 -0.1208 -0.5397 -0.1622 -0.0264 -0.0883 -0.0955 -0.3526 -0.1110 -0.0562 -0.1040 -0.1294 -0.1181 -0.0790 -0.1064 -0.0598 -0.0802 -0.0857 -0.0610 -1.3286 -0.1071 -0.0528 -0.0935 -0.9294 -0.0944 -1.3658 -0.1053 -0.0360 -0.0947 -0.0957 -0.8975 -0.0912 -0.0916 -0.0767 -0.0358 -0.0964 -0.7766 -0.0946 -1.2890 -0.1069 -0.0390 -0.0952 -0.0816 -0.3848 -0.0853 -0.0974 -0.0947 -0.0747 -0.0869 -0.5877 -0.0917 -1.2735 -0.1055 -0.0368 -0.0954 -0.0692 -0.0938 -0.0776 -0.0894 -0.2694 -0.1052 -0.1673 -0.0780 -0.1555 -0.1263 -0.0920 -0.0865 -0.0230 -0.0800 -0.0597 -0.0792 -0.8070 -0.1004 -1.9236 -0.0652 -0.0813 -0.0632 -0.0490 -0.0857 -0.0717 -0.1636 -0.0427 -0.0378 -0.0338 -0.0571 -0.1035 -0.0443 -0.1223 -0.1528 -0.1020 -0.0615 -0.0782 -0.0691 -0.4876 -0.0793 -0.0753 -0.1659 -0.1046 -0.0757 -0.0346 -0.0627 -0.9385 -0.0712 -0.2382 -0.0733 -0.0910 -0.1208 -0.1099 -0.1093 -0.1470 -0.0636 -0.1001 -0.0550 -0.2269 -0.1808 -0.1334 -1.1409 -0.2160 -0.1090 -0.0525 -0.0667 -0.1022 -0.1182 -0.0576 -0.1162 -0.0189 -0.0789 -0.0893 -0.0675 -0.0658 -0.5900 -0.1016 -0.1111 -1.4666 -0.0970 -0.0887 -0.0590 -0.0530 -0.0843 -0.0646 -0.0869 -0.0374 -0.1329 -0.0521 -0.1284 -0.0881 -0.1002 -0.0597 -0.0719 -0.0767 -0.4702 -0.0838 -0.0597 -0.1299 -0.1040 -0.0752 -0.0209 -0.0884 -0.8205 -0.0669 -0.2382 -0.0770 -0.0886 -0.1035 -0.1150 -0.1496 -0.1306 -0.0882 -0.1027 -0.0568 -0.2735 -0.1266 -0.1108 -0.7227 -0.1617 -0.0620 -0.0782 -0.1117 -0.0746 -0.0639 -0.1192 -0.0191 -0.0812 -0.0817 -0.0585 -0.0713 -0.4413 -0.0867 -0.1907 -0.1127 -0.4643 -0.0515 -0.0737 -0.0988 -0.0733 -0.0595 -0.1274 -0.1224 -0.0809 -0.0796 -0.1796 -0.1088 -0.0885 -0.0937 -0.0601 -0.0531 -0.8178 -0.1001 -1.0059 -0.0418 -0.1192 -0.1656 -0.0624 -0.0763 -0.1056 -0.0870 -0.0664 -0.6812 -0.0773 -0.0828 -0.0660 -1.5539 -0.0814 -0.0761
S-274	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-274	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-274	-0.2036481648683548	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-274	-0.2036481648683548	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( 1 > day || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( 1 > day || day > 30 ) ) return false; } if ( month == 2 && ( 1 > day || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-274	-0.0882 -0.0523 -0.0788 -0.0396 -0.0979 -0.0436 -0.1202 -1.4028 -0.0461 -0.0814 -0.0905 -0.5408 -0.0938 -1.7576 -0.0803 -0.0561 -0.1116 -0.6881 -0.0684 -0.0905 -3.6141 -0.0568 -0.2429 -0.0879 -0.4172 -0.7407 -0.0393 -0.0904 -0.1055 -0.0813 -0.0639 -0.1082 -0.4416 -0.1405 -0.0228 -0.0836 -0.0967 -0.3065 -0.1096 -0.0536 -0.1021 -0.1277 -0.1171 -0.0784 -0.1049 -0.0587 -0.0790 -0.0868 -0.0587 -1.4278 -0.1004 -0.0520 -0.0923 -0.8762 -0.0946 -1.4055 -0.1051 -0.0335 -0.0944 -0.0920 -0.8857 -0.0908 -0.0916 -0.0775 -0.0369 -0.0900 -0.7536 -0.0948 -1.3028 -0.1062 -0.0364 -0.0930 -0.0810 -0.4082 -0.0861 -0.0985 -0.0933 -0.0687 -0.0860 -0.5804 -0.0926 -1.2059 -0.1046 -0.0346 -0.0927 -0.0682 -0.0942 -0.0777 -0.0895 -0.2694 -0.1044 -0.1488 -0.0678 -0.1552 -0.1080 -0.0902 -0.0794 -0.0228 -0.0796 -0.0601 -0.0753 -0.8257 -0.0970 -1.8369 -0.0675 -0.0819 -0.0636 -0.0490 -0.0845 -0.0726 -0.1547 -0.0415 -0.0368 -0.0335 -0.0580 -0.1006 -0.0446 -0.1225 -0.1362 -0.1027 -0.0620 -0.0774 -0.0680 -0.4702 -0.0791 -0.0721 -0.1667 -0.1035 -0.0747 -0.0332 -0.0608 -0.9268 -0.0722 -0.2394 -0.0739 -0.0920 -0.1184 -0.1091 -0.1164 -0.1453 -0.0645 -0.1014 -0.0535 -0.2159 -0.1710 -0.1280 -1.0241 -0.1724 -0.1026 -0.1289 -0.0808 -0.0567 -0.1274 -0.0678 -0.1030 -0.0131 -0.0780 -0.0885 -0.0649 -0.0636 -0.5960 -0.0989 -0.1113 -1.4058 -0.0963 -0.0885 -0.0585 -0.0535 -0.0851 -0.0630 -0.0923 -0.0371 -0.1292 -0.0514 -0.1355 -0.0885 -0.0992 -0.0593 -0.0707 -0.0759 -0.4519 -0.0840 -0.0571 -0.1314 -0.1027 -0.0761 -0.0206 -0.0826 -0.8119 -0.0677 -0.2397 -0.0785 -0.0882 -0.1020 -0.1153 -0.1560 -0.1389 -0.0872 -0.1029 -0.0557 -0.2597 -0.1237 -0.1020 -0.4597 -0.1637 -0.1425 -0.0732 -0.0597 -0.0752 -0.0613 -0.1052 -0.0208 -0.0796 -0.0794 -0.0567 -0.0693 -0.4702 -0.0843 -0.1617 -0.1060 -0.1069 -0.0793 -0.1169 -0.1692 -0.1173 -0.1109 -0.0838 -0.0537 -0.0787 -0.0547 -0.1086 -0.0381 -0.0760 -0.0866 -0.0581 -0.0556 -0.7368 -0.0918 -1.0352 -0.0411 -0.1183 -0.1480 -0.0623 -0.0751 -0.1047 -0.0804 -0.0642 -0.6415 -0.0755 -0.0812 -0.0606 -1.3687 -0.0845 -0.0835
S-251	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month_check1[i] != month && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-251	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month_check1[i] == month && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-251	-0.20483273267745972	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month_check1[i] != month && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-251	-0.20483273267745972	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month_check1[i] != month && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-251	-0.0871 -0.0528 -0.0786 -0.0393 -0.0979 -0.0433 -0.1201 -1.4230 -0.0461 -0.0814 -0.0906 -0.5420 -0.0938 -1.7672 -0.0803 -0.0565 -0.1116 -0.6901 -0.0684 -0.0904 -3.6183 -0.0559 -0.2474 -0.0872 -0.4107 -0.7606 -0.0380 -0.0904 -0.1060 -0.0819 -0.0644 -0.1090 -0.4563 -0.1391 -0.0236 -0.0842 -0.0966 -0.3053 -0.1094 -0.0524 -0.1028 -0.1273 -0.1169 -0.0794 -0.1044 -0.0594 -0.0796 -0.0856 -0.0584 -1.4387 -0.1004 -0.0548 -0.0943 -0.8805 -0.0946 -1.3897 -0.1052 -0.0336 -0.0936 -0.0930 -0.8856 -0.0909 -0.0908 -0.0785 -0.0363 -0.0954 -0.7575 -0.0946 -1.3038 -0.1062 -0.0358 -0.0929 -0.0802 -0.4125 -0.0860 -0.0980 -0.0946 -0.0697 -0.0854 -0.5852 -0.0925 -1.1847 -0.1054 -0.0343 -0.0926 -0.0684 -0.0969 -0.0776 -0.0896 -0.2725 -0.1051 -0.1427 -0.0735 -0.1536 -0.1131 -0.0911 -0.0808 -0.0224 -0.0795 -0.0600 -0.0766 -0.8052 -0.0982 -1.8884 -0.0654 -0.0817 -0.0648 -0.0506 -0.0845 -0.0713 -0.1583 -0.0434 -0.0378 -0.0345 -0.0576 -0.1002 -0.0442 -0.1216 -0.1386 -0.1023 -0.0610 -0.0778 -0.0692 -0.4826 -0.0787 -0.0737 -0.1669 -0.1057 -0.0765 -0.0375 -0.0666 -1.1276 -0.0705 -0.2484 -0.0733 -0.0935 -0.1166 -0.1093 -0.1116 -0.1201 -0.0613 -0.2666 -0.1712 -0.1337 -0.1256 -0.0879 -0.5718 -0.2525 -0.1098 -0.0512 -0.0672 -0.0985 -0.1178 -0.0578 -0.1116 -0.0147 -0.0793 -0.0879 -0.0659 -0.0639 -0.5863 -0.1001 -0.1175 -1.4620 -0.0955 -0.0874 -0.0596 -0.0539 -0.0857 -0.0622 -0.0909 -0.0376 -0.1328 -0.0512 -0.1350 -0.0896 -0.0992 -0.0588 -0.0712 -0.0785 -0.4636 -0.0833 -0.0610 -0.1286 -0.0994 -0.0758 -0.0216 -0.0892 -0.9030 -0.0663 -0.2421 -0.0780 -0.0891 -0.0997 -0.1153 -0.1560 -0.2077 -0.0847 -0.1047 -0.0572 -0.3914 -0.1461 -0.1061 -0.4743 -0.1647 -0.0605 -0.0791 -0.1084 -0.0753 -0.0622 -0.1163 -0.0215 -0.0825 -0.0834 -0.0558 -0.0705 -0.4641 -0.0849 -0.1562 -0.1061 -0.1010 -0.0772 -0.1234 -0.1655 -0.1250 -0.0547 -0.0620 -0.0867 -0.0781 -0.0577 -0.1122 -0.0426 -0.0773 -0.0894 -0.0575 -0.0546 -0.7112 -0.0913 -1.0056 -0.0410 -0.1183 -0.1524 -0.0620 -0.0756 -0.1048 -0.0794 -0.0644 -0.6293 -0.0755 -0.0812 -0.0608 -1.3553 -0.0846 -0.0847
S-194	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( ( day < 1 || day > 30 ) && month == month_check2[i] ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-194	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( ( day < 1 || day > 30 ) && month == month_check2[i] ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-194	-0.206154003739357	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( ( day < 1 || day > 30 ) && month == month_check2[i] ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-194	-0.206154003739357	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( ( day < 1 || day > 30 ) && month == month_check2[i] ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-194	-0.0868 -0.0525 -0.0780 -0.0397 -0.0979 -0.0434 -0.1202 -1.4167 -0.0459 -0.0814 -0.0906 -0.5406 -0.0939 -1.7994 -0.0810 -0.0565 -0.1115 -0.6863 -0.0684 -0.0904 -3.6076 -0.0560 -0.2490 -0.0873 -0.4133 -0.7458 -0.0372 -0.0897 -0.1056 -0.0820 -0.0643 -0.1090 -0.4522 -0.1389 -0.0234 -0.0836 -0.0959 -0.3121 -0.1103 -0.0524 -0.1019 -0.1284 -0.1172 -0.0800 -0.1023 -0.0584 -0.0792 -0.0864 -0.0592 -1.4458 -0.1011 -0.0512 -0.0940 -0.8638 -0.0939 -1.3907 -0.1052 -0.0335 -0.0937 -0.0925 -0.8857 -0.0911 -0.0916 -0.0781 -0.0373 -0.0949 -0.7237 -0.0948 -1.2895 -0.1063 -0.0356 -0.0931 -0.0805 -0.4119 -0.0856 -0.0982 -0.0939 -0.0725 -0.0860 -0.5768 -0.0926 -1.1775 -0.1055 -0.0340 -0.0934 -0.0685 -0.0928 -0.0777 -0.0896 -0.2629 -0.1052 -0.1410 -0.0727 -0.1539 -0.1156 -0.0934 -0.0821 -0.0221 -0.0797 -0.0601 -0.0781 -0.8031 -0.0998 -1.8681 -0.0640 -0.0809 -0.0628 -0.0485 -0.0841 -0.0719 -0.1543 -0.0428 -0.0372 -0.0341 -0.0579 -0.0998 -0.0443 -0.1223 -0.1440 -0.1028 -0.0614 -0.0764 -0.0682 -0.4777 -0.0780 -0.0754 -0.1563 -0.1036 -0.0749 -0.0333 -0.0618 -0.9179 -0.0710 -0.2371 -0.0732 -0.0896 -0.1156 -0.1101 -0.1134 -0.1012 -0.0610 -0.0976 -0.0537 -0.2323 -0.1842 -0.1216 -1.5590 -0.1763 -0.1071 -0.0509 -0.0647 -0.0942 -0.1132 -0.0577 -0.1101 -0.0117 -0.0778 -0.0886 -0.0666 -0.0661 -0.5992 -0.0999 -0.1098 -1.4323 -0.0938 -0.0886 -0.0575 -0.0536 -0.0843 -0.0634 -0.0869 -0.0376 -0.1350 -0.0518 -0.1352 -0.0882 -0.1009 -0.0586 -0.0702 -0.0750 -0.4648 -0.0807 -0.0582 -0.1178 -0.1016 -0.0717 -0.0207 -0.0862 -0.8743 -0.0673 -0.2384 -0.0776 -0.0874 -0.1022 -0.1177 -0.5209 -0.0677 -0.0842 -0.1092 -0.0733 -0.0630 -0.1113 -0.0225 -0.0782 -0.0618 -0.2092 -0.1295 -0.0856 -0.0946 -0.0539 -0.2570 -0.1596 -0.1200 -0.0893 -0.0538 -0.0689 -0.4817 -0.0809 -0.1805 -0.1108 -0.1765 -0.0847 -0.0714 -0.2348 -0.1531 -0.0660 -0.0646 -0.0912 -0.0717 -0.0612 -0.1112 -0.0375 -0.0767 -0.0896 -0.0604 -0.0578 -0.6794 -0.0959 -1.0584 -0.0418 -0.1184 -0.1515 -0.0612 -0.0752 -0.1041 -0.0801 -0.0647 -0.6302 -0.0760 -0.0811 -0.0610 -1.3386 -0.0845 -0.0828
S-88	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || 29 < day ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-88	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || 29 < day ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-88	-0.20518095791339874	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || 29 < day ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-88	-0.20518095791339874	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || 29 < day ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-88	-0.0871 -0.0524 -0.0781 -0.0393 -0.0980 -0.0436 -0.1202 -1.4231 -0.0462 -0.0814 -0.0906 -0.5452 -0.0939 -1.7902 -0.0803 -0.0565 -0.1115 -0.6856 -0.0684 -0.0905 -3.6154 -0.0563 -0.2457 -0.0873 -0.4106 -0.7330 -0.0374 -0.0897 -0.1053 -0.0813 -0.0639 -0.1089 -0.4521 -0.1391 -0.0236 -0.0842 -0.0967 -0.3131 -0.1095 -0.0528 -0.1019 -0.1274 -0.1169 -0.0800 -0.1043 -0.0599 -0.0791 -0.0857 -0.0585 -1.4564 -0.1003 -0.0529 -0.0938 -0.8794 -0.0946 -1.3887 -0.1052 -0.0335 -0.0936 -0.0925 -0.8842 -0.0908 -0.0915 -0.0785 -0.0371 -0.0947 -0.7543 -0.0946 -1.2996 -0.1063 -0.0356 -0.0929 -0.0809 -0.4150 -0.0860 -0.0979 -0.0946 -0.0698 -0.0861 -0.5864 -0.0925 -1.1466 -0.1054 -0.0341 -0.0933 -0.0685 -0.0956 -0.0776 -0.0896 -0.2656 -0.1052 -0.1428 -0.0746 -0.1512 -0.1059 -0.0892 -0.0795 -0.0217 -0.0797 -0.0601 -0.0770 -0.7937 -0.0990 -1.8785 -0.0662 -0.0813 -0.0632 -0.0491 -0.0846 -0.0725 -0.1574 -0.0432 -0.0373 -0.0340 -0.0577 -0.1023 -0.0442 -0.1219 -0.1412 -0.1027 -0.0614 -0.0769 -0.0686 -0.4793 -0.0785 -0.0766 -0.1574 -0.1043 -0.0746 -0.0342 -0.0621 -0.8999 -0.0705 -0.2374 -0.0730 -0.0906 -0.1185 -0.1091 -0.1129 -0.1442 -0.0624 -0.0997 -0.0543 -0.2292 -0.1758 -0.1284 -1.0262 -0.1991 -0.1078 -0.0529 -0.0639 -0.0958 -0.1113 -0.0537 -0.1064 -0.0156 -0.0794 -0.0889 -0.0657 -0.0647 -0.5829 -0.0998 -0.1116 -1.4470 -0.0969 -0.0881 -0.0586 -0.0541 -0.0852 -0.0633 -0.0875 -0.0380 -0.1334 -0.0511 -0.1314 -0.0891 -0.0999 -0.0591 -0.0708 -0.0766 -0.4590 -0.0834 -0.0613 -0.1297 -0.1025 -0.0745 -0.0214 -0.0860 -0.8102 -0.0667 -0.2369 -0.0775 -0.0880 -0.1017 -0.1155 -0.1582 -0.1390 -0.0875 -0.1027 -0.0562 -0.3201 -0.1347 -0.1040 -0.4279 -0.1669 -0.0583 -0.0806 -0.1041 -0.0712 -0.0574 -0.1097 -0.0165 -0.0811 -0.0826 -0.0566 -0.0709 -0.4380 -0.0858 -0.1596 -0.1069 -0.1015 -0.0785 -0.1057 -0.1714 -0.1266 -0.0553 -0.0653 -0.0825 -0.0626 -0.6105 -0.0898 -0.0649 -0.0970 -0.0886 -0.0591 -0.0576 -0.6816 -0.0930 -1.0152 -0.0419 -0.1184 -0.1481 -0.0625 -0.0756 -0.1053 -0.0807 -0.0648 -0.6117 -0.0754 -0.0813 -0.0608 -1.3316 -0.0846 -0.0841
S-51	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day > 29 || day < 1 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-51	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day > 29 || day < 1 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-51	-0.20412705838680267	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day > 29 || day < 1 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-51	-0.20412705838680267	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day > 29 || day < 1 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-51	-0.0882 -0.0524 -0.0787 -0.0393 -0.0980 -0.0436 -0.1202 -1.4232 -0.0458 -0.0814 -0.0906 -0.5452 -0.0939 -1.7810 -0.0803 -0.0565 -0.1116 -0.6880 -0.0684 -0.0905 -3.6155 -0.0563 -0.2445 -0.0879 -0.4150 -0.7355 -0.0372 -0.0904 -0.1054 -0.0814 -0.0639 -0.1089 -0.4505 -0.1392 -0.0234 -0.0836 -0.0967 -0.3086 -0.1095 -0.0528 -0.1020 -0.1275 -0.1170 -0.0794 -0.1035 -0.0591 -0.0791 -0.0856 -0.0585 -1.4387 -0.1002 -0.0529 -0.0931 -0.8749 -0.0946 -1.3930 -0.1052 -0.0335 -0.0937 -0.0926 -0.8898 -0.0909 -0.0916 -0.0778 -0.0363 -0.0948 -0.7536 -0.0953 -1.3006 -0.1062 -0.0359 -0.0930 -0.0799 -0.4069 -0.0861 -0.0981 -0.0947 -0.0709 -0.0854 -0.5826 -0.0925 -1.1908 -0.1055 -0.0341 -0.0927 -0.0686 -0.0959 -0.0776 -0.0896 -0.2657 -0.1052 -0.1430 -0.0736 -0.1524 -0.1176 -0.0889 -0.0801 -0.0217 -0.0798 -0.0601 -0.0765 -0.8000 -0.0983 -1.8700 -0.0666 -0.0813 -0.0632 -0.0491 -0.0846 -0.0726 -0.1562 -0.0427 -0.0371 -0.0338 -0.0578 -0.1013 -0.0445 -0.1221 -0.1409 -0.1027 -0.0614 -0.0775 -0.0686 -0.4767 -0.0786 -0.0749 -0.1625 -0.1042 -0.0752 -0.0342 -0.0626 -0.9231 -0.0705 -0.2381 -0.0736 -0.0906 -0.1177 -0.1091 -0.1122 -0.1422 -0.0623 -0.1005 -0.0543 -0.2276 -0.1744 -0.1285 -1.0002 -0.2053 -0.1077 -0.0514 -0.0641 -0.0973 -0.1315 -0.0541 -0.1110 -0.0195 -0.0790 -0.0885 -0.0658 -0.0647 -0.5838 -0.0998 -0.1118 -1.4469 -0.0970 -0.0882 -0.0582 -0.0542 -0.0852 -0.0634 -0.0869 -0.0379 -0.1331 -0.0514 -0.1332 -0.0891 -0.0992 -0.0592 -0.0714 -0.0760 -0.4604 -0.0836 -0.0600 -0.1306 -0.1035 -0.0752 -0.0212 -0.0861 -0.8322 -0.0668 -0.2358 -0.0776 -0.0881 -0.1018 -0.1146 -0.1574 -0.1394 -0.0869 -0.1030 -0.0566 -0.3146 -0.1329 -0.1059 -0.4132 -0.1681 -0.0588 -0.0883 -0.1043 -0.0796 -0.0588 -0.1156 -0.0182 -0.0797 -0.0807 -0.0560 -0.0714 -0.4502 -0.0855 -0.1612 -0.1070 -0.0993 -0.0768 -0.0978 -0.1815 -0.1313 -0.0619 -0.2314 -0.0323 -0.1019 -0.0481 -0.0737 -0.1288 -0.0849 -0.0904 -0.0564 -0.0569 -0.6855 -0.0926 -1.0121 -0.0425 -0.1184 -0.1458 -0.0621 -0.0756 -0.1046 -0.0812 -0.0652 -0.6188 -0.0759 -0.0807 -0.0614 -1.3319 -0.0845 -0.0841
S-45	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( ! ( day < 1 || day > 31 ) && month != month_check1[i] ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-45	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( ( day < 1 || day > 31 ) && month == month_check1[i] ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-45	-0.20824776589870453	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( ! ( day < 1 || day > 31 ) && month != month_check1[i] ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-45	-0.20824776589870453	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( ! ( day < 1 || day > 31 ) && month != month_check1[i] ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-45	-0.0868 -0.0532 -0.0785 -0.0396 -0.0980 -0.0436 -0.1202 -1.4230 -0.0459 -0.0814 -0.0906 -0.5460 -0.0939 -1.7905 -0.0803 -0.0564 -0.1107 -0.6773 -0.0684 -0.0904 -3.6268 -0.0561 -0.2456 -0.0873 -0.4161 -0.7477 -0.0370 -0.0906 -0.1049 -0.0820 -0.0639 -0.1079 -0.4548 -0.1407 -0.0231 -0.0842 -0.0972 -0.3043 -0.1096 -0.0524 -0.1015 -0.1269 -0.1151 -0.0785 -0.1050 -0.0590 -0.0794 -0.0860 -0.0590 -1.4257 -0.1011 -0.0524 -0.0938 -0.8879 -0.0938 -1.4043 -0.1052 -0.0333 -0.0945 -0.0919 -0.8759 -0.0909 -0.0908 -0.0785 -0.0372 -0.0954 -0.7623 -0.0947 -1.3100 -0.1062 -0.0356 -0.0932 -0.0799 -0.4117 -0.0855 -0.0973 -0.0937 -0.0724 -0.0860 -0.5830 -0.0926 -1.2114 -0.1054 -0.0341 -0.0929 -0.0681 -0.0954 -0.0777 -0.0897 -0.2665 -0.1053 -0.1484 -0.0750 -0.1508 -0.1240 -0.0869 -0.0814 -0.0225 -0.0796 -0.0609 -0.0759 -0.8245 -0.0980 -1.9036 -0.0640 -0.0820 -0.0624 -0.0491 -0.0846 -0.0710 -0.1537 -0.0421 -0.0360 -0.0330 -0.0567 -0.0994 -0.0445 -0.1193 -0.1307 -0.1031 -0.0609 -0.0765 -0.0674 -0.4725 -0.0761 -0.0786 -0.1454 -0.1071 -0.0714 -0.0367 -0.0637 -0.9798 -0.0702 -0.2309 -0.0734 -0.0901 -0.1160 -0.1045 -0.1201 -0.1005 -0.0403 -0.0734 -0.0987 -0.1138 -0.0548 -0.1115 -0.0087 -0.0854 -0.7936 -0.4883 -0.1272 -0.0786 -0.0973 -0.0489 -0.2627 -0.1741 -0.1468 -0.0960 -0.0691 -0.0652 -0.5756 -0.0977 -0.1046 -1.4799 -0.0963 -0.0888 -0.0592 -0.0549 -0.0861 -0.0641 -0.0831 -0.0369 -0.1326 -0.0491 -0.1300 -0.0882 -0.0993 -0.0582 -0.0689 -0.0753 -0.4537 -0.0806 -0.0609 -0.1267 -0.1020 -0.0730 -0.0195 -0.0844 -0.8113 -0.0667 -0.2314 -0.0785 -0.0891 -0.1012 -0.1155 -0.1783 -0.1250 -0.0882 -0.1053 -0.0552 -0.5495 -0.1462 -0.1039 -1.1034 -0.1433 -0.0664 -0.0869 -0.1238 -0.0933 -0.0641 -0.1180 -0.0205 -0.0828 -0.0853 -0.0567 -0.0698 -0.4549 -0.0885 -0.1569 -0.1063 -0.0994 -0.0728 -0.1220 -0.1769 -0.1182 -0.0579 -0.0607 -0.0905 -0.0795 -0.0562 -0.1083 -0.0410 -0.0759 -0.0899 -0.0566 -0.0546 -0.6997 -0.0935 -1.0279 -0.0428 -0.1184 -0.1548 -0.0624 -0.0752 -0.1041 -0.0800 -0.0646 -0.6185 -0.0756 -0.0806 -0.0609 -1.3520 -0.0846 -0.0834
S-28	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( 1 > month || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-28	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( 1 > month || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-28	-0.20359399914741516	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( 1 > month || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-28	-0.20359399914741516	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( 1 > month || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-28	-0.0880 -0.0520 -0.0788 -0.0396 -0.0980 -0.0436 -0.1202 -1.4097 -0.0457 -0.0814 -0.0905 -0.5501 -0.0939 -1.6995 -0.0804 -0.0561 -0.1116 -0.6863 -0.0684 -0.0905 -3.6331 -0.0564 -0.2505 -0.0872 -0.4191 -0.7242 -0.0376 -0.0898 -0.1061 -0.0813 -0.0633 -0.1090 -0.4461 -0.1391 -0.0228 -0.0836 -0.0959 -0.3027 -0.1103 -0.0526 -0.1019 -0.1268 -0.1155 -0.0779 -0.1049 -0.0580 -0.0792 -0.0854 -0.0599 -1.4777 -0.1017 -0.0538 -0.0900 -0.8570 -0.0945 -1.3893 -0.1051 -0.0335 -0.0941 -0.0926 -0.8815 -0.0909 -0.0909 -0.0777 -0.0365 -0.0941 -0.7463 -0.0947 -1.3084 -0.1070 -0.0355 -0.0929 -0.0799 -0.4128 -0.0860 -0.0983 -0.0949 -0.0706 -0.0854 -0.5683 -0.0925 -1.1892 -0.1054 -0.0336 -0.0927 -0.0676 -0.0939 -0.0775 -0.0893 -0.2665 -0.1044 -0.1725 -0.0779 -0.0831 -0.1825 -0.1144 -0.0796 -0.0239 -0.0793 -0.0583 -0.0689 -0.8435 -0.0990 -1.8616 -0.0671 -0.0813 -0.0627 -0.0489 -0.0850 -0.0727 -0.1504 -0.0421 -0.0365 -0.0333 -0.0586 -0.1002 -0.0446 -0.1253 -0.1352 -0.1033 -0.0614 -0.0779 -0.0686 -0.4533 -0.0788 -0.0720 -0.1601 -0.1066 -0.0751 -0.0336 -0.0616 -0.9484 -0.0708 -0.2356 -0.0731 -0.0916 -0.1190 -0.1090 -0.1150 -0.1443 -0.0612 -0.1020 -0.0536 -0.2247 -0.1685 -0.1286 -1.0324 -0.1991 -0.1075 -0.0519 -0.0687 -0.1015 -0.1239 -0.0559 -0.1100 -0.0145 -0.0794 -0.0897 -0.0651 -0.0646 -0.5930 -0.0997 -0.1113 -1.4247 -0.0950 -0.0889 -0.0579 -0.0545 -0.0852 -0.0630 -0.0879 -0.0372 -0.1315 -0.0515 -0.1340 -0.0884 -0.0998 -0.0592 -0.0718 -0.0770 -0.4537 -0.0841 -0.0580 -0.1268 -0.1042 -0.0746 -0.0208 -0.0867 -0.8467 -0.0667 -0.2339 -0.0776 -0.0881 -0.1012 -0.1153 -0.1562 -0.1404 -0.0841 -0.1039 -0.0557 -0.2932 -0.1292 -0.1048 -0.4427 -0.1675 -0.0610 -0.0819 -0.1095 -0.0765 -0.0618 -0.1161 -0.0215 -0.0818 -0.0834 -0.0563 -0.0707 -0.4614 -0.0861 -0.1565 -0.1067 -0.1011 -0.0770 -0.1208 -0.1688 -0.1223 -0.0556 -0.0643 -0.0883 -0.0775 -0.0580 -0.1131 -0.0434 -0.0772 -0.0887 -0.0584 -0.0546 -0.7070 -0.0906 -0.9981 -0.0416 -0.1191 -0.1500 -0.0620 -0.0756 -0.1050 -0.0800 -0.0644 -0.6293 -0.0755 -0.0814 -0.0604 -1.3686 -0.0839 -0.0835
S-6	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( 2 == month && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-6	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( 2 == month && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-6	-0.2052663266658783	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( 2 == month && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-6	-0.2052663266658783	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( 2 == month && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-6	-0.0869 -0.0524 -0.0787 -0.0393 -0.0980 -0.0436 -0.1202 -1.4235 -0.0461 -0.0814 -0.0905 -0.5443 -0.0938 -1.7729 -0.0804 -0.0565 -0.1116 -0.6836 -0.0684 -0.0905 -3.6144 -0.0564 -0.2463 -0.0872 -0.4151 -0.7348 -0.0373 -0.0904 -0.1054 -0.0813 -0.0644 -0.1089 -0.4491 -0.1390 -0.0233 -0.0835 -0.0966 -0.3075 -0.1095 -0.0528 -0.1019 -0.1274 -0.1170 -0.0794 -0.1047 -0.0595 -0.0797 -0.0855 -0.0589 -1.4455 -0.1004 -0.0533 -0.0937 -0.8761 -0.0946 -1.3897 -0.1052 -0.0338 -0.0943 -0.0926 -0.8844 -0.0908 -0.0915 -0.0778 -0.0362 -0.0946 -0.7591 -0.0946 -1.2971 -0.1070 -0.0358 -0.0929 -0.0804 -0.4111 -0.0860 -0.0980 -0.0943 -0.0705 -0.0853 -0.5827 -0.0925 -1.1910 -0.1054 -0.0343 -0.0933 -0.0685 -0.0956 -0.0776 -0.0895 -0.2677 -0.1051 -0.1563 -0.0729 -0.1490 -0.1114 -0.0904 -0.0811 -0.0222 -0.0797 -0.0596 -0.0766 -0.8111 -0.0983 -1.8616 -0.0661 -0.0812 -0.0628 -0.0491 -0.0846 -0.0725 -0.1558 -0.0429 -0.0371 -0.0342 -0.0575 -0.1007 -0.0445 -0.1219 -0.1394 -0.1027 -0.0614 -0.0768 -0.0681 -0.4761 -0.0785 -0.0750 -0.1612 -0.1048 -0.0745 -0.0340 -0.0626 -0.9028 -0.0705 -0.2378 -0.0731 -0.0913 -0.1180 -0.1092 -0.1159 -0.1378 -0.0619 -0.1000 -0.0538 -0.2271 -0.1782 -0.1284 -1.0421 -0.1989 -0.1075 -0.0518 -0.0646 -0.0963 -0.1181 -0.0555 -0.1113 -0.0139 -0.0794 -0.0891 -0.0651 -0.0643 -0.5919 -0.0998 -0.1097 -1.4389 -0.0956 -0.0885 -0.0578 -0.0541 -0.0858 -0.0634 -0.0885 -0.0378 -0.1322 -0.0515 -0.1330 -0.0877 -0.0998 -0.0587 -0.0705 -0.0765 -0.4567 -0.0833 -0.0604 -0.1276 -0.1031 -0.0746 -0.0209 -0.0867 -0.8148 -0.0668 -0.2422 -0.0770 -0.0879 -0.0997 -0.1156 -0.1750 -0.1455 -0.0896 -0.1066 -0.0555 -0.3111 -0.1334 -0.1067 -0.6327 -0.1741 -0.0582 -0.0787 -0.1077 -0.0760 -0.0597 -0.1148 -0.0205 -0.0818 -0.0824 -0.0553 -0.0723 -0.4634 -0.0858 -0.1531 -0.1075 -0.2302 -0.0725 -0.0796 -0.3045 -0.1279 -0.0566 -0.0632 -0.0873 -0.0774 -0.0571 -0.1107 -0.0433 -0.0780 -0.0871 -0.0584 -0.0555 -0.7138 -0.0922 -1.0084 -0.0413 -0.1192 -0.1527 -0.0621 -0.0756 -0.1048 -0.0800 -0.0644 -0.6183 -0.0755 -0.0819 -0.0601 -1.3352 -0.0845 -0.0835
S-408	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_a == temp_b ) return null; if ( temp_b < temp_a ) return a; else return b; }
T-408	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) temp_a = ( ( Integer ) a ) .doubleValue () ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue () ; if ( temp_a == temp_b ) return null; if ( temp_b < temp_a ) return a; else return b; }
H-408	-0.1720396876335144	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_b < temp_a ) return a ; else return b ; }
D-408	-0.1720396876335144	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_b < temp_a ) return a ; else return b ; }
P-408	-0.0858 -0.0409 -0.7443 -0.0229 -0.0896 -0.0623 -0.1079 -0.6828 -0.0827 -0.5634 -0.4333 -0.0691 -0.0824 -0.0900 -0.1346 -0.0674 -0.0874 -0.0552 -0.0919 -0.6202 -0.1386 -0.0975 -0.0671 -0.0857 -0.4937 -0.1176 -0.1031 -0.1386 -0.0484 -0.4476 -0.0918 -0.0934 -0.8287 -0.0941 -0.0934 -0.0530 -0.0919 -0.0501 -0.0811 -0.1335 -0.1281 -2.4073 -0.0601 -0.0881 -0.1561 -0.0983 -0.0578 -0.1135 -0.0544 -0.0822 -0.1155 -0.0870 -0.0536 -0.0871 -0.0453 -0.1660 -0.9066 -0.1031 -0.6687 -0.0317 -0.0340 -0.0848 -0.0915 -0.0996 -0.0896 -0.0737 -0.1035 -0.2141 -0.0911 -0.7177 -0.0917 -0.0946 -0.0826 -0.0607 -0.0789 -0.0458 -0.0917 -0.0886 -0.0842 -0.1284 -0.1084 -0.0756 -0.0456 -0.2997 -0.0834 -0.0900 -0.3918 -0.0744 -0.0823 -0.0488 -0.0806 -0.0438 -0.0833 -0.0515 -0.3327 -0.4658 -0.0553 -0.0868 -0.0955 -0.0909 -0.0554 -0.1038 -0.0530 -0.0905 -0.0990 -0.0867 -0.0599 -0.0846 -0.0375 -0.1397 -0.8952 -0.1014 -0.6134 -0.0484 -0.0331 -0.0792 -0.0906 -0.0851 -0.0887 -0.0711 -0.1003 -0.1883 -0.0891 -0.6221 -0.0996 -0.0960 -0.0780 -0.0588 -0.0833 -0.0397 -0.0861 -0.0822 -0.0666 -0.1031 -0.1079 -0.1230 -0.0471 -0.2142 -0.0888 -0.1431 -0.1047 -0.0505 -0.0903 -0.0962 -0.1090 -1.6435 -0.0771 -0.2375 -0.0930 -0.1109 -0.0714 -0.0540 -0.0725 -0.0788 -0.1265 -0.1121 -0.0776 -0.0585 -0.2262 -0.0873 -0.0948 -0.0837 -0.0737 -0.0874 -0.1222 -0.1147 -1.1986 -0.0760 -0.1301 -0.0852 -0.0903 -0.0569 -0.0573 -0.0739 -0.0852 -0.1528 -0.1119 -0.0959 -0.0597 -1.3013 -0.1076 -0.1032 -0.1040 -0.0539 -0.1036 -0.1106 -0.7392 -0.0828 -0.1292 -0.5216 -0.1213 -0.1076 -0.0718 -0.0817 -0.3890 -0.0924 -0.0932 -0.0950 -0.0886 -0.0984 -0.1192 -0.2777 -0.0799 -0.0710 -0.3276 -0.1515 -0.1188 -0.1310 -0.0971 -0.0854 -0.1569 -0.0932 -0.0951 -0.0931 -0.0788 -0.0912 -0.1792 -0.7086 -0.2854 -0.1205 -0.1261 -0.0909 -0.1043 -0.1001 -0.0866 -0.0901 -0.0897 -0.0933 -0.0746 -0.1250 -0.5204 -0.1075 -0.0874 -0.1035 -0.7919 -0.0818 -0.0753
S-114	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_b == temp_a ) return null; if ( temp_a > temp_b ) return a; else return b; }
T-114	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) temp_a = ( ( Integer ) a ) .doubleValue () ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue () ; if ( temp_b == temp_a ) return null; if ( temp_a > temp_b ) return a; else return b; }
H-114	-0.17330729961395264	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_b == temp_a ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
D-114	-0.17330729961395264	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_b == temp_a ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
P-114	-0.0863 -0.0418 -0.7520 -0.0229 -0.0896 -0.0623 -0.1079 -0.6827 -0.0835 -0.5628 -0.4334 -0.0691 -0.0824 -0.0901 -0.1363 -0.0690 -0.0873 -0.0562 -0.0906 -0.6231 -0.1396 -0.0974 -0.0665 -0.0850 -0.4968 -0.1177 -0.1023 -0.1388 -0.0480 -0.4474 -0.0918 -0.0934 -0.8290 -0.0949 -0.0927 -0.0535 -0.0926 -0.0501 -0.0811 -0.1336 -0.1281 -2.4252 -0.0606 -0.0874 -0.1561 -0.0990 -0.0584 -0.1135 -0.0544 -0.0821 -0.1155 -0.0863 -0.0536 -0.0871 -0.0457 -0.1662 -0.9014 -0.1031 -0.6731 -0.0316 -0.0340 -0.0848 -0.0915 -0.1002 -0.0896 -0.0758 -0.1020 -0.2169 -0.0911 -0.7091 -0.0917 -0.0946 -0.0820 -0.0611 -0.0788 -0.0461 -0.0917 -0.0886 -0.0843 -0.1287 -0.1084 -0.0755 -0.0453 -0.2997 -0.0840 -0.0900 -0.3919 -0.0744 -0.0823 -0.0488 -0.0799 -0.0441 -0.0833 -0.0515 -0.3373 -0.4628 -0.0553 -0.0862 -0.0961 -0.0908 -0.0560 -0.1038 -0.0530 -0.0904 -0.0997 -0.0867 -0.0599 -0.0847 -0.0375 -0.1411 -0.8950 -0.1006 -0.6153 -0.0482 -0.0333 -0.0793 -0.0899 -0.0850 -0.0885 -0.0726 -0.0987 -0.1859 -0.0891 -0.6139 -0.0996 -0.0952 -0.0775 -0.0579 -0.0834 -0.0398 -0.0868 -0.0816 -0.0661 -0.1024 -0.1079 -0.1217 -0.0468 -0.2156 -0.0882 -0.1450 -0.1046 -0.0519 -0.0889 -0.0955 -0.1075 -1.6483 -0.0766 -0.2364 -0.0936 -0.1116 -0.0724 -0.0540 -0.0726 -0.0788 -0.1270 -0.1120 -0.0780 -0.0583 -0.2271 -0.0874 -0.0940 -0.0837 -0.0727 -0.0861 -0.1230 -0.1138 -1.1899 -0.0760 -0.1292 -0.0852 -0.0903 -0.0572 -0.0577 -0.0740 -0.0853 -0.1531 -0.1117 -0.0952 -0.0578 -1.3287 -0.1076 -0.1044 -0.1046 -0.0567 -0.1047 -0.1102 -0.6837 -0.0828 -0.1318 -0.5391 -0.1201 -0.1075 -0.0726 -0.0825 -0.3991 -0.0940 -0.0952 -0.0951 -0.0865 -0.0949 -0.1207 -0.2815 -0.0806 -0.0724 -0.3174 -0.1479 -0.1185 -0.1373 -0.0943 -0.1989 -0.1503 -0.0877 -0.0972 -0.1091 -0.0849 -0.0922 -0.1845 -0.6300 -0.2730 -0.1186 -0.1217 -0.0962 -0.1265 -0.1629 -0.0938 -0.0889 -0.0667 -0.0859 -0.0802 -0.1151 -0.6568 -0.1118 -0.0854 -0.0978 -0.8470 -0.0814 -0.0749
S-391	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; list_letters.length > i; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-391	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; list_letters.length > i; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-391	-0.2106124460697174	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; list_letters.length > i ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-391	-0.2106124460697174	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; list_letters.length > i ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-391	-0.0954 -0.0566 -1.1203 -0.3037 -0.0249 -0.2472 -0.9530 -0.1362 -0.0389 -0.1062 -1.2718 -0.1136 -0.0836 -0.0899 -1.0209 -0.2244 -0.0312 -0.2552 -0.8388 -0.1557 -0.1373 -0.0842 -0.0616 -1.1741 -0.1753 -0.0329 -0.2625 -0.7454 -0.1549 -0.0765 -0.0863 -0.2008 -0.1163 -0.1136 -0.1866 -0.9212 -0.0577 -0.0862 -0.1099 -0.1523 -0.2544 -1.7703 -2.2168 -0.0556 -0.0863 -0.0561 -0.0802 -0.0665 -0.1163 -0.3468 -0.1100 -0.0781 -0.0759 -0.0798 -0.0915 -0.1197 -2.0855 -0.2251 -0.0776 -0.2232 -0.0892 -0.0559 -0.0690 -0.1650 -0.0322 -1.2104 -0.1933 -0.1098 -0.0672 -0.0874 -0.0763 -0.8999 -0.0937 -0.1118 -0.0638 -0.1219 -0.0658 -0.1100 -0.0760 -0.6436 -0.0730 -0.6337 -0.0716 -0.0932 -0.1475 -0.0668 -0.0845 -0.0605 -0.1133 -0.0586 -0.5633 -0.2379 -0.1776 -0.7021 -0.1252 -0.1161 -0.0901 -0.0856 -0.2755 -0.0917 -0.2206 -0.3806 -0.0735 -0.3476 -0.0491 -0.0502 -0.0579 -0.1901 -0.0985 -0.0709 -0.0387 -0.0947 -0.1010 -0.1019 -0.7122 -0.0940 -0.1072 -0.0596 -0.0812 -0.0892 -0.7560 -0.0735 -0.0822 -0.0309 -1.3732 -0.0652 -0.3468 -0.0713 -0.0899 -0.1088 -0.1121 -0.2025 -0.1016 -0.2251 -0.5776 -0.1615 -0.1071 -0.1008 -0.0410 -0.0819 -0.0854 -0.0889 -0.1098 -0.0604 -0.1002 -0.0859 -0.1181 -0.1230 -0.0945 -0.2434 -0.4066 -0.1429 -1.2657 -0.2332 -0.1034 -0.3268 -0.0687 -0.0949 -0.2452 -0.1032 -0.2759 -0.1135 -0.2206 -0.1443 -0.0777 -0.1069 -0.0578 -0.0530 -0.0520 -0.0972 -0.1040 -0.0904 -0.1219 -0.0578 -0.1044 -0.1173 -0.1005 -0.0951 -0.0901 -0.0900 -0.0765 -0.1088 -0.3032 -0.0926 -0.2070 -0.4669 -0.1276 -0.1228 -0.0994 -0.0765 -0.1036 -0.1031 -0.0905 -0.1258 -0.1482 -0.1019 -0.2436 -0.1079 -0.1252 -0.1296 -0.0824 -0.1030 -0.0779 -0.0552 -0.0607 -0.0840 -0.1026 -0.0888 -0.1150 -0.0845 -0.1008 -0.1193 -0.1015 -0.0950 -0.0993 -0.1030 -0.3478 -0.1118 -0.0345 -0.0958 -0.1006 -0.1098 -0.1116 -0.0897 -0.2548 -0.1148 -0.2623 -0.0648 -0.0907 -0.0861 -0.1504 -0.1372 -0.0826 -0.0775
S-336	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-336	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-336	-0.2089059203863144	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-336	-0.2089059203863144	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-336	-0.0961 -0.0562 -1.1246 -0.3015 -0.0249 -0.2456 -0.9583 -0.1344 -0.0386 -0.1063 -1.2654 -0.1128 -0.0836 -0.0892 -1.0303 -0.2243 -0.0309 -0.2535 -0.8442 -0.1561 -0.1362 -0.0848 -0.0616 -1.1783 -0.1751 -0.0327 -0.2591 -0.7491 -0.1545 -0.0765 -0.0863 -0.2008 -0.1163 -0.1143 -0.1873 -0.9114 -0.0581 -0.0861 -0.1112 -0.1533 -0.2562 -1.7809 -2.2213 -0.0552 -0.0863 -0.0565 -0.0811 -0.0660 -0.1177 -0.3542 -0.1100 -0.0780 -0.0755 -0.0799 -0.0915 -0.1215 -2.0938 -0.2414 -0.0783 -0.2213 -0.0895 -0.0555 -0.0695 -0.1661 -0.0325 -1.2057 -0.2168 -0.1100 -0.0684 -0.0928 -0.0764 -0.9110 -0.0850 -0.0624 -0.1003 -0.1079 -0.0633 -0.0885 -0.0672 -0.5068 -0.0744 -0.5844 -0.0716 -0.0883 -0.1653 -0.0681 -0.0845 -0.0609 -0.1136 -0.0639 -0.5292 -0.2485 -0.1782 -0.7267 -0.1247 -0.1185 -0.0901 -0.0855 -0.3120 -0.0919 -0.2206 -0.3810 -0.0729 -0.3595 -0.0544 -0.0500 -0.0970 -0.2101 -0.0935 -0.0696 -0.0381 -0.0938 -0.1007 -0.1012 -0.7404 -0.0926 -0.1058 -0.0600 -0.0828 -0.0881 -0.7302 -0.0782 -0.0725 -0.0301 -1.0766 -0.0651 -0.3190 -0.0702 -0.0905 -0.1079 -0.1122 -0.2049 -0.1017 -0.2228 -0.5741 -0.1704 -0.1034 -0.1109 -0.0414 -0.0820 -0.0865 -0.0890 -0.1094 -0.0614 -0.0995 -0.0871 -0.1180 -0.1267 -0.0947 -0.2403 -0.4033 -0.1423 -1.2651 -0.2269 -0.1035 -0.3423 -0.0686 -0.0940 -0.2427 -0.1031 -0.2762 -0.1144 -0.2176 -0.1426 -0.0762 -0.1048 -0.1077 -0.0751 -0.0518 -0.0562 -0.0655 -0.0899 -0.1011 -0.0608 -0.1040 -0.1224 -0.1009 -0.0949 -0.0912 -0.0916 -0.0773 -0.1090 -0.3034 -0.0926 -0.2029 -0.4597 -0.1339 -0.1180 -0.1011 -0.0789 -0.1028 -0.1065 -0.0903 -0.1258 -0.1454 -0.1012 -0.2429 -0.1080 -0.1304 -0.1296 -0.0821 -0.1011 -0.1073 -0.0630 -0.0697 -0.0587 -0.0815 -0.0865 -0.0901 -0.0873 -0.1014 -0.1248 -0.1016 -0.0949 -0.0984 -0.1035 -0.3494 -0.1111 -0.0345 -0.0958 -0.0997 -0.1066 -0.1134 -0.0896 -0.2506 -0.1149 -0.2578 -0.0647 -0.0906 -0.0874 -0.1503 -0.1373 -0.0820 -0.0787
S-265	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( 0 == most_count ) res.clear () ; return res; }
T-265	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( 0 == most_count ) res.clear () ; return res; }
H-265	-0.209134042263031	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( 0 == most_count ) res.clear () ; return res ; }
D-265	-0.209134042263031	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( 0 == most_count ) res.clear () ; return res ; }
P-265	-0.0936 -0.0564 -1.1390 -0.3031 -0.0251 -0.2472 -0.9634 -0.1386 -0.0388 -0.1063 -1.2845 -0.1127 -0.0836 -0.0899 -1.0229 -0.2244 -0.0314 -0.2552 -0.8440 -0.1573 -0.1361 -0.0842 -0.0616 -1.1826 -0.1752 -0.0330 -0.2625 -0.7489 -0.1574 -0.0765 -0.0863 -0.2026 -0.1162 -0.1180 -0.1869 -0.9101 -0.0580 -0.0861 -0.1099 -0.1520 -0.2562 -1.7801 -2.2193 -0.0552 -0.0863 -0.0570 -0.0810 -0.0660 -0.1163 -0.3520 -0.1099 -0.0781 -0.0764 -0.0804 -0.0915 -0.1215 -2.1046 -0.2584 -0.0777 -0.2195 -0.0893 -0.0552 -0.0700 -0.1673 -0.0323 -1.2086 -0.2223 -0.1091 -0.0679 -0.0926 -0.0768 -0.9026 -0.0861 -0.0615 -0.1018 -0.1079 -0.0646 -0.0886 -0.0663 -0.5151 -0.0756 -0.5895 -0.0716 -0.0883 -0.1622 -0.0670 -0.0839 -0.0609 -0.1135 -0.0643 -0.5366 -0.2505 -0.1812 -0.7324 -0.1230 -0.1190 -0.0898 -0.0846 -0.3125 -0.0918 -0.2216 -0.3812 -0.0736 -0.3692 -0.0488 -0.0509 -0.0580 -0.2034 -0.0943 -0.0691 -0.0368 -0.0939 -0.0964 -0.1037 -0.7027 -0.0928 -0.1066 -0.0598 -0.0838 -0.0900 -0.7202 -0.0767 -0.0732 -0.0301 -1.0408 -0.0655 -0.3196 -0.0702 -0.0898 -0.1080 -0.1115 -0.2137 -0.1027 -0.2249 -0.5944 -0.1629 -0.1071 -0.1058 -0.0389 -0.0828 -0.0838 -0.0894 -0.1106 -0.0590 -0.1007 -0.0829 -0.1191 -0.1251 -0.0948 -0.2440 -0.4047 -0.1443 -1.2832 -0.2200 -0.1041 -0.3385 -0.0686 -0.0947 -0.2346 -0.1031 -0.2760 -0.1134 -0.2239 -0.1443 -0.0771 -0.1061 -0.0586 -0.0530 -0.0520 -0.0980 -0.1063 -0.0911 -0.1224 -0.0556 -0.1054 -0.1110 -0.1011 -0.0957 -0.0903 -0.0889 -0.0773 -0.1085 -0.2517 -0.0936 -0.2058 -0.4430 -0.1321 -0.1186 -0.0924 -0.0637 -0.1044 -0.1010 -0.0927 -0.1266 -0.1417 -0.1019 -0.2408 -0.1078 -0.1281 -0.1298 -0.0824 -0.1022 -0.0791 -0.0552 -0.0603 -0.0826 -0.1049 -0.0889 -0.1165 -0.0706 -0.1026 -0.1146 -0.1034 -0.0951 -0.0978 -0.1093 -0.3921 -0.1115 -0.1754 -0.1483 -0.0573 -0.0962 -0.0842 -0.0819 -0.2113 -0.1148 -0.2511 -0.0658 -0.0902 -0.0907 -0.1526 -0.1404 -0.0844 -0.0781
S-261	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; 26 > i; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-261	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; 26 > i; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-261	-0.20538683235645294	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; 26 > i; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-261	-0.20538683235645294	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; 26 > i; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-261	-0.0954 -0.0562 -1.1284 -0.3019 -0.0251 -0.2472 -0.9620 -0.1362 -0.0386 -0.1062 -1.2725 -0.1127 -0.0830 -0.0892 -1.0303 -0.2248 -0.0311 -0.2532 -0.8471 -0.1581 -0.1372 -0.0842 -0.0616 -1.1789 -0.1753 -0.0329 -0.2624 -0.7519 -0.1547 -0.0765 -0.0863 -0.1990 -0.1163 -0.1128 -0.1849 -0.9262 -0.0581 -0.0861 -0.1087 -0.1523 -0.2583 -1.7723 -2.1858 -0.0548 -0.0863 -0.0563 -0.0811 -0.0656 -0.1164 -0.3474 -0.1100 -0.0781 -0.0759 -0.0798 -0.0914 -0.1220 -2.0169 -0.2377 -0.0777 -0.2204 -0.0892 -0.0555 -0.0694 -0.1658 -0.0311 -1.2102 -0.2103 -0.1108 -0.0673 -0.0910 -0.0768 -0.8101 -0.0736 -0.0515 -0.0980 -0.1082 -0.0636 -0.0877 -0.0641 -0.5172 -0.0723 -0.5654 -0.0714 -0.0883 -0.1658 -0.0663 -0.0840 -0.0605 -0.1136 -0.0639 -0.5281 -0.2471 -0.1788 -0.7177 -0.1239 -0.1148 -0.0900 -0.0848 -0.2873 -0.0917 -0.2242 -0.3667 -0.0719 -0.3449 -0.0478 -0.0505 -0.0565 -0.1912 -0.0917 -0.0694 -0.0367 -0.0954 -0.0995 -0.1011 -0.5863 -0.0862 -0.1065 -0.0579 -0.0810 -0.0896 -0.5512 -0.1457 -0.1328 -0.0591 -0.9180 -0.0571 -0.2755 -0.0723 -0.0896 -0.1060 -0.1129 -0.1943 -0.1022 -0.2246 -0.5461 -0.1600 -0.1113 -0.1034 -0.0393 -0.0824 -0.0832 -0.0891 -0.1096 -0.0587 -0.1012 -0.0841 -0.1156 -0.1246 -0.0947 -0.2439 -0.3960 -0.1404 -1.2761 -0.2294 -0.1033 -0.3306 -0.0687 -0.0941 -0.2475 -0.1032 -0.2744 -0.1135 -0.2266 -0.1454 -0.0776 -0.1070 -0.0571 -0.0526 -0.0516 -0.0967 -0.1047 -0.0905 -0.1206 -0.0563 -0.1045 -0.1156 -0.0997 -0.0952 -0.0894 -0.0911 -0.0760 -0.1088 -0.2998 -0.0933 -0.2094 -0.4474 -0.1281 -0.1247 -0.0937 -0.0761 -0.1030 -0.1020 -0.0905 -0.1262 -0.1474 -0.1019 -0.2449 -0.1079 -0.1266 -0.1286 -0.0824 -0.1022 -0.0774 -0.0556 -0.0603 -0.0835 -0.1019 -0.0890 -0.1148 -0.0824 -0.1008 -0.1176 -0.1015 -0.0950 -0.0990 -0.1045 -0.3483 -0.1120 -0.0327 -0.0960 -0.0977 -0.1080 -0.1049 -0.0891 -0.2511 -0.1148 -0.2622 -0.0647 -0.0900 -0.0864 -0.1504 -0.1372 -0.0832 -0.0780
S-256	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-256	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-256	-0.20890599489212036	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-256	-0.20890599489212036	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( i + 'a' ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( i + 'a' ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-256	-0.0961 -0.0562 -1.1246 -0.3015 -0.0249 -0.2456 -0.9583 -0.1344 -0.0386 -0.1063 -1.2654 -0.1128 -0.0836 -0.0892 -1.0303 -0.2243 -0.0309 -0.2535 -0.8442 -0.1561 -0.1362 -0.0848 -0.0616 -1.1783 -0.1751 -0.0327 -0.2591 -0.7491 -0.1545 -0.0765 -0.0863 -0.2008 -0.1163 -0.1143 -0.1873 -0.9114 -0.0581 -0.0861 -0.1112 -0.1533 -0.2562 -1.7809 -2.2213 -0.0552 -0.0863 -0.0565 -0.0811 -0.0660 -0.1177 -0.3542 -0.1100 -0.0780 -0.0755 -0.0799 -0.0915 -0.1215 -2.0938 -0.2414 -0.0783 -0.2213 -0.0895 -0.0555 -0.0695 -0.1661 -0.0325 -1.2057 -0.2168 -0.1100 -0.0684 -0.0928 -0.0764 -0.9110 -0.0850 -0.0624 -0.1003 -0.1079 -0.0633 -0.0885 -0.0672 -0.5068 -0.0744 -0.5844 -0.0716 -0.0883 -0.1653 -0.0681 -0.0845 -0.0609 -0.1136 -0.0639 -0.5292 -0.2485 -0.1782 -0.7267 -0.1247 -0.1185 -0.0901 -0.0855 -0.3120 -0.0919 -0.2206 -0.3810 -0.0729 -0.3595 -0.0544 -0.0500 -0.0970 -0.2101 -0.0935 -0.0696 -0.0381 -0.0938 -0.1007 -0.1012 -0.7404 -0.0926 -0.1058 -0.0600 -0.0828 -0.0881 -0.7302 -0.0782 -0.0725 -0.0301 -1.0766 -0.0651 -0.3190 -0.0702 -0.0905 -0.1079 -0.1122 -0.2049 -0.1017 -0.2228 -0.5741 -0.1704 -0.1034 -0.1109 -0.0414 -0.0820 -0.0865 -0.0890 -0.1094 -0.0614 -0.0995 -0.0871 -0.1180 -0.1267 -0.0947 -0.2403 -0.4033 -0.1423 -1.2651 -0.2269 -0.1035 -0.3423 -0.0686 -0.0940 -0.2427 -0.1031 -0.2762 -0.1144 -0.2176 -0.1426 -0.0762 -0.1048 -0.1077 -0.0751 -0.0518 -0.0562 -0.0655 -0.0899 -0.1011 -0.0608 -0.1040 -0.1224 -0.1009 -0.0949 -0.0912 -0.0916 -0.0773 -0.1090 -0.3034 -0.0926 -0.2029 -0.4597 -0.1339 -0.1180 -0.1011 -0.0789 -0.1028 -0.1065 -0.0903 -0.1258 -0.1454 -0.1012 -0.2429 -0.1080 -0.1304 -0.1296 -0.0821 -0.1011 -0.1073 -0.0630 -0.0697 -0.0587 -0.0815 -0.0865 -0.0901 -0.0873 -0.1014 -0.1248 -0.1016 -0.0949 -0.0984 -0.1035 -0.3494 -0.1111 -0.0345 -0.0958 -0.0997 -0.1066 -0.1134 -0.0896 -0.2506 -0.1149 -0.2578 -0.0647 -0.0906 -0.0874 -0.1503 -0.1373 -0.0820 -0.0787
S-221	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( most_count == count_letter[i] ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-221	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( most_count == count_letter[i] ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-221	-0.2083662897348404	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( most_count == count_letter[i] ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-221	-0.2083662897348404	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( most_count == count_letter[i] ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-221	-0.0954 -0.0562 -1.1231 -0.3035 -0.0249 -0.2472 -0.9638 -0.1355 -0.0387 -0.1062 -1.2780 -0.1119 -0.0829 -0.0892 -1.0239 -0.2245 -0.0312 -0.2534 -0.8442 -0.1573 -0.1374 -0.0841 -0.0611 -1.1703 -0.1753 -0.0329 -0.2608 -0.7531 -0.1566 -0.0765 -0.0863 -0.2023 -0.1164 -0.1146 -0.1868 -0.9191 -0.0577 -0.0862 -0.1096 -0.1525 -0.2500 -1.7968 -2.2109 -0.0552 -0.0869 -0.0563 -0.0810 -0.0656 -0.1162 -0.3512 -0.1100 -0.0782 -0.0759 -0.0798 -0.0914 -0.1211 -2.0609 -0.2336 -0.0793 -0.2295 -0.0912 -0.0557 -0.0694 -0.1636 -0.0326 -1.1860 -0.2412 -0.1099 -0.0679 -0.0929 -0.0768 -0.9011 -0.0857 -0.0617 -0.0994 -0.1087 -0.0639 -0.0883 -0.0657 -0.5235 -0.0757 -0.5884 -0.0716 -0.0885 -0.1655 -0.0677 -0.0846 -0.0614 -0.1136 -0.0632 -0.5306 -0.2453 -0.1751 -0.7288 -0.1249 -0.1196 -0.0907 -0.0847 -0.2886 -0.0919 -0.2265 -0.3645 -0.0751 -0.3679 -0.0499 -0.0506 -0.0591 -0.2084 -0.0933 -0.0689 -0.0386 -0.0964 -0.0937 -0.1012 -0.7269 -0.0926 -0.1066 -0.0598 -0.0839 -0.0913 -0.7177 -0.0777 -0.0755 -0.0306 -1.0365 -0.0661 -0.3183 -0.0707 -0.0898 -0.1074 -0.1116 -0.2319 -0.0995 -0.2347 -0.5129 -0.1554 -0.0972 -0.1053 -0.0433 -0.0807 -0.0817 -0.0890 -0.1062 -0.0592 -0.1012 -0.0813 -0.1161 -0.1246 -0.0935 -0.2569 -0.3720 -0.1310 -1.3315 -0.2299 -0.1041 -0.3307 -0.0685 -0.0949 -0.2407 -0.1029 -0.2747 -0.1125 -0.2235 -0.1461 -0.0772 -0.1062 -0.0563 -0.0535 -0.0518 -0.0961 -0.1045 -0.0912 -0.1217 -0.0545 -0.1045 -0.1104 -0.0989 -0.0954 -0.0925 -0.0900 -0.0786 -0.1110 -0.0393 -0.1060 -0.1013 -0.1199 -0.2667 -0.0942 -0.2266 -0.4285 -0.1348 -0.1590 -0.0844 -0.1259 -0.1593 -0.1010 -0.2605 -0.1079 -0.1227 -0.1345 -0.0822 -0.1039 -0.0737 -0.0564 -0.0640 -0.0830 -0.1028 -0.0903 -0.1108 -0.0811 -0.1016 -0.1020 -0.1012 -0.0958 -0.1000 -0.1084 -0.3599 -0.1106 -0.0331 -0.0962 -0.0900 -0.1037 -0.1176 -0.0894 -0.2620 -0.1143 -0.2717 -0.0646 -0.0914 -0.0860 -0.1494 -0.1372 -0.0821 -0.0782
S-115	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( most_count > count_letter[i] ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-115	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( most_count < count_letter[i] ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-115	-0.2090112417936325	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( most_count > count_letter[i] ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-115	-0.2090112417936325	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( most_count > count_letter[i] ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-115	-0.0952 -0.0562 -1.1285 -0.2995 -0.0252 -0.2490 -0.9643 -0.1353 -0.0386 -0.1063 -1.2783 -0.1128 -0.0829 -0.0892 -1.0303 -0.2231 -0.0312 -0.2570 -0.8451 -0.1561 -0.1362 -0.0848 -0.0612 -1.1824 -0.1740 -0.0330 -0.2645 -0.7501 -0.1540 -0.0771 -0.0862 -0.2077 -0.1163 -0.1159 -0.1867 -0.9240 -0.0577 -0.0863 -0.1105 -0.1533 -0.2519 -1.7912 -2.2023 -0.0552 -0.0869 -0.0567 -0.0810 -0.0656 -0.1163 -0.3475 -0.1100 -0.0782 -0.0765 -0.0798 -0.0914 -0.1202 -2.0451 -0.2054 -0.0789 -0.2165 -0.0898 -0.0564 -0.0700 -0.1664 -0.0327 -1.1985 -0.2362 -0.1099 -0.0680 -0.0935 -0.0766 -0.9113 -0.0869 -0.0597 -0.1029 -0.1083 -0.0629 -0.0887 -0.0664 -0.5405 -0.0768 -0.5909 -0.0718 -0.0885 -0.1535 -0.0696 -0.0847 -0.0605 -0.1135 -0.0633 -0.5380 -0.2523 -0.1779 -0.7225 -0.1250 -0.1185 -0.0900 -0.0846 -0.2905 -0.0922 -0.2240 -0.3661 -0.0746 -0.3393 -0.0509 -0.0509 -0.0597 -0.2059 -0.0954 -0.0699 -0.0409 -0.0949 -0.1000 -0.0954 -0.7075 -0.0934 -0.1054 -0.0593 -0.0847 -0.0866 -0.7021 -0.0814 -0.0657 -0.0305 -0.9715 -0.0682 -0.3149 -0.0707 -0.0898 -0.1124 -0.1131 -0.0421 -0.0979 -0.0977 -0.1512 -0.1548 -0.0949 -0.2021 -0.5575 -0.1880 -0.1308 -0.0898 -0.1195 -0.0651 -0.1054 -0.0837 -0.1164 -0.1473 -0.0914 -0.2502 -0.3961 -0.1380 -1.3567 -0.2419 -0.1034 -0.3166 -0.0682 -0.0940 -0.3042 -0.1031 -0.2953 -0.1135 -0.2238 -0.1478 -0.0774 -0.1063 -0.0571 -0.0536 -0.0510 -0.0952 -0.1070 -0.0903 -0.1141 -0.0607 -0.1036 -0.1182 -0.0997 -0.0959 -0.0923 -0.0886 -0.0785 -0.1098 -0.3619 -0.0915 -0.2131 -0.4086 -0.1254 -0.1133 -0.0957 -0.0834 -0.1001 -0.1001 -0.0923 -0.1231 -0.1505 -0.1020 -0.2360 -0.1071 -0.1307 -0.1305 -0.0823 -0.1030 -0.0779 -0.0549 -0.0599 -0.0844 -0.1052 -0.0889 -0.1130 -0.0818 -0.1005 -0.1185 -0.1017 -0.0950 -0.1022 -0.1089 -0.3544 -0.1109 -0.0339 -0.0968 -0.0969 -0.1215 -0.1109 -0.0902 -0.2585 -0.1148 -0.2639 -0.0647 -0.0908 -0.0848 -0.1494 -0.1373 -0.0827 -0.0776
S-98	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = 1 + n * n; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-98	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = 1 + n * n; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-98	-0.23317775130271912	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = 1 + n * n ; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-98	-0.23317775130271912	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = 1 + n * n ; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-98	-0.0994 -0.0402 -0.1082 -2.1303 -0.0412 -0.0983 -0.0345 -0.1131 -0.0962 -0.1499 -0.0263 -1.0019 -0.0890 -0.1166 -0.0809 -0.0970 -0.1113 -0.1770 -0.0829 -0.0454 -0.0934 -0.0729 -0.9415 -0.1240 -0.0758 -0.0936 -0.2496 -0.0710 -0.1149 -0.0633 -0.0850 -0.5892 -0.2090 -0.1064 -0.0694 -0.0915 -0.0749 -0.6013 -0.0914 -0.0625 -0.1111 -1.6326 -0.0875 -0.4474 -0.0738 -0.0832 -0.1466 -0.1040 -0.0700 -0.0994 -0.0905 -0.5021 -0.0953 -0.0530 -0.0896 -0.5002 -0.0680 -0.2916 -0.0787 -0.0949 -0.1544 -0.1122 -0.0809 -0.2451 -0.1894 -0.0307 -0.1393 -0.1063 -0.1019 -0.1564 -0.0817 -0.0756 -0.2009 -0.1200 -0.1620 -0.1202 -0.1091 -0.0763 -0.0760 -0.1265 -1.9585 -0.0965 -0.2390 -0.1102 -0.0696 -1.0001 -0.0528 -0.2246 -0.1142 -0.0724 -0.1108 -0.3536 -0.7665 -0.0905 -0.0913 -0.1367 -0.1184 -0.1575 -0.1250 -0.0962 -0.0723 -0.0801 -0.0843 -1.7733 -0.0922 -0.0699 -0.1115 -0.0755 -0.6979 -0.0479 -0.1879 -0.1190 -0.1232 -0.1422 -0.0141 -0.1027 -0.1079 -0.0918 -0.0906 -0.1292 -0.1037 -0.1303 -0.1223 -0.1577 -1.0773 -0.1156 -0.0747 -0.0871 -0.0832 -1.8106 -0.0908 -0.0634 -0.1026 -0.0890 -0.6215 -0.0462 -0.1911 -0.1078 -0.1601 -0.1164 -0.0119 -0.1084 -0.0896 -0.0857 -0.0908 -0.1140 -0.1053 -0.0927 -0.1031 -0.1280 -0.2052 -0.1545 -0.0762 -0.0853 -0.0916 -1.7053 -0.0897 -0.1638 -0.1015 -0.0872 -0.7223 -0.0425 -0.2067 -0.1048 -0.0282 -0.1037 -0.1229 -0.4782 -0.0842 -0.0982 -0.0978 -0.0933 -0.0825 -0.1335 -2.5346 -0.0264 -0.1005 -0.0618 -0.0722 -0.3027 -0.1181 -1.1892 -0.1234 -0.1066 -0.0663 -0.0775 -0.0746 -0.5944 -0.0885 -0.0596 -0.1886 -0.6371 -0.0828 -0.5240 -0.0861 -0.1010 -0.1423 -0.1151 -0.2964 -0.0988 -0.0744 -0.0437 -0.0869 -0.0754 -0.1018 -0.0859 -0.0600 -0.6965 -0.2312 -0.1239 -0.0943 -2.1962 -0.4809 -0.1772 -0.0657 -0.4364 -0.1770 -0.1310 -0.0993 -0.0781 -0.7017 -0.0911 -0.0973 -0.0333 -1.0279 -0.0784 -0.0750
S-357	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][1 + j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-357	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( 0 != j ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-357	-0.22605057060718536	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][1 + j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-357	-0.22605057060718536	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][1 + j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-357	-0.1006 -0.0408 -0.1074 -2.1016 -0.0414 -0.0977 -0.0345 -0.1139 -0.0962 -0.1521 -0.0257 -1.0003 -0.0884 -0.1143 -0.0809 -0.0971 -0.1117 -0.1844 -0.0809 -0.0426 -0.0938 -0.0717 -0.7915 -0.1234 -0.0705 -0.0921 -0.0944 -0.0306 -0.1004 -0.0990 -0.8095 -0.1315 -0.1056 -0.0694 -0.0969 -0.0753 -0.5089 -0.0935 -0.0610 -0.1137 -1.6074 -0.0903 -0.4296 -0.0726 -0.0827 -0.1720 -0.1057 -0.0702 -0.1039 -0.0944 -0.4425 -0.1051 -0.0561 -0.0913 -0.4555 -0.0748 -0.2777 -0.0784 -0.0954 -0.1614 -0.1136 -0.0888 -0.2533 -0.1923 -0.0307 -0.1423 -0.1209 -0.1025 -0.1608 -0.0820 -0.0757 -0.2020 -0.1204 -0.1659 -0.1155 -0.1111 -0.0762 -0.0719 -0.1262 -1.9769 -0.0970 -0.2377 -0.1086 -0.0750 -0.9614 -0.0520 -0.2693 -0.1297 -0.1477 -0.1185 -0.0678 -0.0847 -0.1441 -0.0989 -0.0908 -0.1422 -0.1199 -0.1493 -0.1286 -0.0967 -0.0732 -0.0776 -0.0855 -1.7531 -0.0925 -0.0704 -0.1115 -0.0786 -0.6888 -0.0464 -0.1880 -0.1228 -0.1230 -0.1438 -0.0131 -0.1010 -0.1228 -0.0906 -0.0918 -0.1336 -0.1049 -0.1349 -0.1205 -0.1685 -1.1491 -0.1136 -0.0746 -0.0855 -0.0859 -1.7680 -0.0911 -0.0632 -0.1033 -0.0917 -0.5941 -0.0458 -0.1917 -0.1059 -0.1227 -0.1187 -0.0113 -0.1055 -0.0994 -0.0856 -0.0917 -0.1196 -0.1058 -0.0966 -0.1012 -0.1174 -0.1837 -0.0958 -0.0774 -0.0842 -0.0946 -1.6421 -0.0900 -0.1538 -0.1019 -0.0882 -0.7038 -0.0419 -0.2055 -0.1010 -0.0337 -0.1036 -0.1221 -0.4198 -0.0852 -0.0991 -0.0987 -0.0935 -0.0838 -0.1314 -2.4802 -0.0269 -0.1005 -0.0621 -0.0727 -0.3027 -0.1177 -1.2090 -0.1220 -0.1066 -0.0658 -0.0775 -0.0752 -0.5797 -0.0873 -0.0598 -0.1759 -0.6303 -0.0830 -0.5077 -0.0861 -0.1019 -0.1439 -0.1149 -0.3248 -0.0976 -0.0736 -0.0446 -0.0869 -0.0767 -0.1031 -0.0866 -0.0629 -0.7126 -0.2289 -0.1282 -0.0920 -2.0365 -0.4579 -0.2223 -0.0661 -0.4407 -0.1779 -0.1367 -0.0987 -0.0797 -0.7156 -0.0914 -0.0958 -0.0337 -0.9271 -0.0785 -0.0751
S-39	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 1 + n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-39	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][1 + j] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-39	-0.2346358448266983	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 1 + n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-39	-0.2346358448266983	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 1 + n ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-39	-0.1043 -0.0404 -0.1074 -2.1225 -0.0417 -0.0986 -0.0348 -0.1130 -0.0961 -0.1494 -0.0253 -1.0199 -0.0878 -0.1165 -0.0808 -0.0969 -0.1115 -0.1761 -0.0821 -0.0426 -0.0939 -0.0727 -0.7800 -0.1235 -0.0733 -0.0934 -0.0929 -0.0319 -0.0972 -0.0982 -0.7877 -0.1347 -0.1056 -0.0689 -0.0962 -0.0747 -0.5042 -0.0922 -0.0608 -0.1109 -1.6385 -0.0889 -0.4337 -0.0732 -0.0833 -0.1785 -0.1047 -0.0695 -0.1057 -0.0917 -0.4515 -0.1023 -0.0548 -0.0904 -0.4234 -0.0692 -0.2808 -0.0779 -0.0953 -0.1577 -0.1126 -0.0895 -0.2593 -0.2074 -0.0332 -0.1325 -0.1172 -0.1057 -0.1544 -0.0827 -0.0753 -0.2007 -0.1189 -0.1659 -0.1238 -0.1109 -0.0763 -0.0738 -0.1266 -1.8816 -0.0966 -0.2489 -0.1089 -0.0713 -0.9328 -0.0513 -0.2340 -0.1162 -0.0747 -0.1097 -0.3304 -0.7829 -0.0909 -0.0910 -0.1392 -0.1163 -0.1676 -0.1257 -0.1011 -0.0753 -0.0799 -0.0845 -1.6984 -0.0924 -0.0698 -0.1107 -0.0766 -0.6225 -0.0456 -0.1933 -0.1218 -0.1309 -0.1500 -0.0155 -0.0977 -0.1115 -0.0914 -0.0903 -0.1322 -0.1023 -0.1319 -0.1244 -0.3341 -1.3744 -0.1046 -0.0763 -0.0916 -0.0840 -1.8011 -0.0909 -0.0684 -0.1023 -0.0897 -0.5964 -0.0449 -0.1980 -0.1082 -0.1411 -0.1206 -0.0126 -0.1057 -0.0889 -0.0856 -0.0901 -0.1248 -0.1053 -0.0965 -0.1037 -0.3219 -0.1634 -0.0710 -0.0828 -0.0920 -0.0936 -1.7506 -0.0894 -0.1567 -0.1012 -0.0879 -0.7703 -0.0407 -0.2264 -0.1072 -0.0338 -0.1059 -0.1226 -0.4130 -0.0834 -0.0971 -0.0987 -0.0948 -0.0879 -0.1368 -2.5545 -0.0278 -0.1021 -0.0642 -0.0716 -0.3222 -0.1222 -1.1797 -0.1206 -0.1067 -0.0651 -0.0758 -0.0748 -0.5696 -0.0868 -0.0602 -0.1715 -0.6557 -0.0836 -0.5039 -0.0862 -0.1015 -0.1399 -0.1158 -0.3001 -0.1019 -0.0727 -0.0433 -0.0870 -0.0792 -0.1047 -0.0867 -0.0661 -0.7028 -0.2272 -0.1279 -0.0940 -2.2776 -0.4280 -0.2173 -0.0679 -0.4260 -0.1694 -0.1276 -0.1013 -0.0708 -0.7195 -0.0919 -0.0967 -0.0329 -1.1245 -0.0778 -0.0762
S-207	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( 1.3 < gpa ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-207	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( 1.7 < gpa ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-207	-0.1737154722213745	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( 1.3 < gpa ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-207	-0.1737154722213745	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( 1.3 < gpa ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-207	-0.1050 -0.0510 -5.3927 -0.1062 -0.1070 -0.0984 -0.0545 -0.4784 -0.0203 -0.0927 -0.2003 -0.0965 -0.0321 -0.1253 -0.2181 -2.2099 -0.0313 -0.0824 -0.0803 -0.7082 -0.0661 -0.0360 -0.0882 -0.0681 -0.2995 -0.1241 -0.1231 -0.0499 -0.0972 -0.0604 -0.1954 -0.0790 -0.0516 -0.0998 -0.0281 -0.7444 -0.9167 -0.0696 -0.0439 -2.0026 -0.2155 -0.1034 -0.1064 -0.1074 -0.0701 -0.0809 -0.9822 -0.0926 -0.0797 -0.0618 -0.1013 -0.0602 -1.6429 -0.0791 -0.0441 -0.1851 -0.0742 -0.0827 -0.1540 -0.0566 -0.0372 -0.0906 -0.0355 -0.4231 -0.3633 -1.7795 -0.1423 -0.1168 -0.0749 -0.0386 -0.2379 -0.0183 -0.0812 -0.0921 -0.0985 -0.0582 -0.7647 -0.1348 -0.1305 -0.0935 -0.0932 -0.0459 -0.1274 -0.7772 -0.0824 -0.0937 -0.1160 -0.0711 -0.0473 -0.1994 -0.0297 -0.0866 -0.0488 -0.0965 -0.0521 -0.4188 -0.1124 -0.1162 -0.0954 -0.1029 -0.0464 -0.4075 -0.0704 -0.0857 -0.1153 -0.0753 -0.0479 -0.1207 -0.0228 -0.0778 -0.0418 -0.0950 -0.0521 -0.3769 -0.1041 -0.1072 -0.0972 -0.0929 -0.0611 -0.0421 -0.5574 -0.0688 -0.0867 -0.1163 -0.0693 -0.0425 -0.1221 -0.0103 -0.0902 -0.0441 -0.0953 -0.0529 -0.3784 -0.0935 -0.0882 -0.1006 -0.1022 -0.0582 -0.0847 -0.5628 -0.0822 -0.1004 -0.1097 -0.0646 -0.0435 -0.1024 -0.0415 -0.0859 -0.0399 -0.0916 -0.0553 -0.3585 -0.0961 -0.0978 -0.1006 -0.1002 -0.0525 -0.4969 -0.0555 -0.0847 -0.1139 -0.0609 -0.0439 -0.1096 -0.0521 -0.0799 -0.0458 -0.0948 -0.0562 -0.3387 -0.0940 -0.1053 -0.0955 -0.1031 -0.0960 -0.0375 -0.6306 -0.0646 -0.0912 -0.1185 -0.0604 -0.0414 -0.1222 -0.0190 -0.0903 -0.0471 -0.1003 -0.0558 -0.4038 -0.0967 -0.1132 -0.1035 -0.1130 -0.0535 -0.0924 -0.6124 -0.0780 -0.0951 -0.1177 -0.0483 -0.0955 -0.0481 -0.0320 -0.1017 -0.0484 -0.0999 -0.0559 -0.3703 -0.1011 -0.1248 -0.1000 -0.1122 -0.0459 -0.0335 -0.6290 -0.0740 -0.0797 -0.1202 -0.0626 -0.0428 -0.1314 -0.0082 -0.0867 -0.0474 -0.0983 -0.0537 -0.3643 -0.0952 -0.1218 -0.1104 -0.1119 -0.0709 -0.0925 -0.5436 -0.0817 -0.0940 -0.1124 -0.0578 -0.0464 -0.1154 -0.0309 -0.0842 -0.0455 -0.0963 -0.0565 -0.3676 -0.0994 -0.1292 -0.0990 -0.1056 -0.0411 -0.3731 -0.0662 -0.0769 -0.1149 -0.0665 -0.0452 -0.0991 -0.0145 -0.0823 -0.0412 -0.0928 -0.0587 -0.3669 -0.0910 -0.1175 -0.1102 -0.0982 -0.0496 -0.4013 -0.0568 -0.1124 -0.1126 -0.0644 -0.0415 -0.1041 -0.0247 -0.0922 -0.0397 -0.0965 -0.0645 -0.4339 -0.0851 -0.1185 -0.1061 -0.1003 -0.0629 -0.0390 -0.5492 -0.0726 -0.0524 -0.0963 -0.0564 -0.3546 -0.0866 -0.1368 -0.1317 -0.0971 -0.0452 -0.5479 -0.0676 -0.0833 -0.0365 -0.0973 -0.0429 -1.0306 -0.0782 -0.0824
S-202	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( 1.7 < gpa ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-202	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( 1.0 < gpa ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-202	-0.17359626293182373	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( 1.7 < gpa ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-202	-0.17359626293182373	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( 1.7 < gpa ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-202	-0.1052 -0.0514 -5.3930 -0.1070 -0.1070 -0.0983 -0.0544 -0.4831 -0.0203 -0.0934 -0.1989 -0.0964 -0.0318 -0.1240 -0.2176 -2.2095 -0.0312 -0.0824 -0.0809 -0.7081 -0.0662 -0.0357 -0.0876 -0.0677 -0.2996 -0.1233 -0.1230 -0.0496 -0.0972 -0.0599 -0.1941 -0.0790 -0.0515 -0.0991 -0.0278 -0.7469 -0.9121 -0.0696 -0.0443 -1.9876 -0.2160 -0.1039 -0.1064 -0.1074 -0.0701 -0.0816 -0.9770 -0.0926 -0.0803 -0.0623 -0.1020 -0.0604 -1.6654 -0.0802 -0.0441 -0.1836 -0.0748 -0.0827 -0.1527 -0.0575 -0.0370 -0.0906 -0.0359 -0.4236 -0.3571 -1.7792 -0.1418 -0.1166 -0.0770 -0.0390 -0.2952 -0.0182 -0.0807 -0.0896 -0.0984 -0.0586 -0.7579 -0.1339 -0.1280 -0.0936 -0.0926 -0.0454 -0.1287 -0.7694 -0.0822 -0.0926 -0.1166 -0.0712 -0.0474 -0.1919 -0.0290 -0.0875 -0.0487 -0.0965 -0.0522 -0.4190 -0.1118 -0.1145 -0.0961 -0.1037 -0.0462 -0.4128 -0.0693 -0.0848 -0.1163 -0.0737 -0.0487 -0.1196 -0.0227 -0.0778 -0.0420 -0.0951 -0.0518 -0.3796 -0.1042 -0.1071 -0.0973 -0.0923 -0.0612 -0.0420 -0.5601 -0.0687 -0.0865 -0.1162 -0.0688 -0.0429 -0.1223 -0.0102 -0.0895 -0.0442 -0.0961 -0.0526 -0.3834 -0.0935 -0.0881 -0.0997 -0.1029 -0.0577 -0.0858 -0.5557 -0.0827 -0.1003 -0.1095 -0.0653 -0.0435 -0.1047 -0.0414 -0.0866 -0.0398 -0.0916 -0.0549 -0.3583 -0.0967 -0.0984 -0.1007 -0.1010 -0.0525 -0.4945 -0.0555 -0.0840 -0.1127 -0.0687 -0.0440 -0.1102 -0.0484 -0.0810 -0.0466 -0.0948 -0.0555 -0.3408 -0.0940 -0.1074 -0.0965 -0.1046 -0.0911 -0.0379 -0.6163 -0.0650 -0.0940 -0.1173 -0.0580 -0.0420 -0.1205 -0.0230 -0.0917 -0.0479 -0.0996 -0.0545 -0.4028 -0.0965 -0.1126 -0.1048 -0.1132 -0.0548 -0.0955 -0.5824 -0.0778 -0.0960 -0.1155 -0.0608 -0.0488 -0.1236 -0.0113 -0.0956 -0.0493 -0.0953 -0.0560 -0.3561 -0.0983 -0.1238 -0.1054 -0.1085 -0.0466 -0.0332 -0.5972 -0.0729 -0.0818 -0.1188 -0.0547 -0.0442 -0.1132 -0.0105 -0.0879 -0.0458 -0.1003 -0.0537 -0.3776 -0.0950 -0.1188 -0.1101 -0.1120 -0.0675 -0.1001 -0.5497 -0.0787 -0.0953 -0.1134 -0.0445 -0.0838 -0.0534 -0.0346 -0.0928 -0.0420 -0.1029 -0.0562 -0.3802 -0.1015 -0.1298 -0.0958 -0.1065 -0.0385 -0.3750 -0.0644 -0.0741 -0.1165 -0.0665 -0.0447 -0.1079 -0.0112 -0.0807 -0.0399 -0.0934 -0.0594 -0.3678 -0.0910 -0.1171 -0.1077 -0.0965 -0.0500 -0.4065 -0.0555 -0.1080 -0.1124 -0.0579 -0.0424 -0.1113 -0.0232 -0.0909 -0.0386 -0.0965 -0.0642 -0.4315 -0.0840 -0.1196 -0.1040 -0.0998 -0.0625 -0.0393 -0.5470 -0.0701 -0.0527 -0.0964 -0.0560 -0.3547 -0.0859 -0.1360 -0.1302 -0.0965 -0.0449 -0.5543 -0.0674 -0.0827 -0.0361 -0.0973 -0.0426 -1.0569 -0.0782 -0.0823
S-169	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( 4.0 == gpa ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-169	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( 4.0 == gpa ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-169	-0.17285549640655518	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( 4.0 == gpa ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-169	-0.17285549640655518	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( 4.0 == gpa ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-169	-0.1064 -0.0518 -5.4192 -0.1071 -0.1059 -0.0981 -0.0550 -0.4783 -0.0203 -0.0933 -0.1996 -0.0957 -0.0321 -0.1252 -0.2161 -2.2313 -0.0311 -0.0824 -0.0802 -0.7104 -0.0662 -0.0354 -0.0874 -0.0676 -0.2893 -0.1194 -0.1224 -0.0489 -0.0972 -0.0600 -0.1970 -0.0790 -0.0520 -0.0998 -0.0278 -0.7405 -0.9160 -0.0695 -0.0440 -2.0017 -0.2187 -0.1037 -0.1071 -0.1084 -0.0696 -0.0822 -0.9985 -0.0916 -0.0775 -0.0613 -0.1019 -0.0600 -1.6708 -0.0804 -0.0441 -0.1827 -0.0744 -0.0827 -0.1531 -0.0540 -0.0353 -0.0948 -0.0355 -0.4139 -0.3613 -1.7748 -0.1419 -0.1204 -0.0474 -0.1004 -0.0563 -0.0274 -0.0824 -0.0833 -0.0989 -0.0571 -0.8197 -0.1298 -0.1294 -0.0946 -0.0935 -0.0465 -0.1220 -0.7599 -0.0779 -0.0922 -0.1176 -0.1089 -0.0479 -0.1407 -0.0239 -0.0821 -0.0471 -0.0951 -0.0513 -0.4095 -0.1099 -0.1140 -0.0939 -0.1027 -0.0463 -0.4040 -0.0670 -0.0848 -0.1161 -0.0749 -0.0492 -0.1108 -0.0221 -0.0762 -0.0411 -0.0950 -0.0516 -0.3742 -0.1033 -0.1065 -0.0974 -0.0922 -0.0600 -0.0418 -0.5642 -0.0676 -0.0853 -0.1171 -0.0695 -0.0434 -0.1179 -0.0104 -0.0883 -0.0433 -0.0954 -0.0528 -0.3802 -0.0926 -0.0863 -0.0991 -0.1034 -0.0578 -0.0858 -0.5607 -0.0819 -0.0996 -0.1104 -0.0657 -0.0441 -0.1042 -0.0409 -0.0858 -0.0391 -0.0916 -0.0548 -0.3580 -0.0951 -0.0964 -0.1000 -0.1009 -0.0525 -0.4921 -0.0552 -0.0840 -0.1134 -0.0678 -0.0439 -0.1114 -0.0523 -0.0806 -0.0460 -0.0948 -0.0557 -0.3379 -0.0930 -0.1058 -0.0964 -0.1053 -0.0911 -0.0374 -0.6130 -0.0654 -0.0930 -0.1174 -0.0637 -0.0422 -0.1174 -0.0224 -0.0894 -0.0475 -0.0997 -0.0544 -0.4024 -0.0961 -0.1103 -0.1040 -0.1126 -0.0542 -0.0953 -0.5785 -0.0808 -0.0950 -0.1151 -0.0652 -0.0486 -0.1225 -0.0113 -0.0933 -0.0486 -0.0948 -0.0554 -0.3583 -0.0973 -0.1214 -0.1045 -0.1092 -0.0469 -0.0332 -0.5946 -0.0756 -0.0818 -0.1175 -0.0646 -0.0440 -0.1103 -0.0114 -0.0854 -0.0459 -0.0997 -0.0527 -0.3710 -0.0940 -0.1163 -0.1096 -0.1117 -0.0683 -0.0963 -0.5244 -0.0862 -0.0954 -0.1129 -0.0651 -0.0471 -0.1068 -0.0262 -0.0856 -0.0451 -0.0985 -0.0562 -0.3725 -0.0982 -0.1268 -0.1002 -0.1064 -0.0430 -0.3633 -0.0676 -0.0764 -0.1153 -0.0733 -0.0466 -0.0956 -0.0141 -0.0828 -0.0406 -0.0935 -0.0583 -0.3693 -0.0908 -0.1160 -0.1109 -0.0983 -0.0494 -0.3954 -0.0568 -0.1124 -0.1129 -0.0712 -0.0428 -0.1024 -0.0237 -0.0918 -0.0383 -0.0973 -0.0636 -0.4366 -0.0841 -0.1162 -0.1052 -0.1010 -0.0624 -0.0392 -0.5400 -0.0723 -0.0522 -0.0970 -0.0552 -0.3574 -0.0857 -0.1340 -0.1306 -0.0970 -0.0454 -0.5435 -0.0682 -0.0829 -0.0360 -0.0981 -0.0426 -1.0532 -0.0776 -0.0824
S-166	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; grades.length > i; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-166	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; grades.length > i; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-166	-0.17230017483234406	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; grades.length > i; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-166	-0.17230017483234406	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; grades.length > i; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-166	-0.1053 -0.0517 -5.4059 -0.1055 -0.1033 -0.0989 -0.0576 -0.4825 -0.0202 -0.0932 -0.2007 -0.0963 -0.0321 -0.1239 -0.2224 -2.1561 -0.0283 -0.0816 -0.0816 -0.6998 -0.0671 -0.0354 -0.0887 -0.0675 -0.3053 -0.1200 -0.1227 -0.0495 -0.0977 -0.0656 -0.1971 -0.0795 -0.0523 -0.1005 -0.0280 -0.7845 -1.2130 -0.0674 -0.0381 -1.5849 -0.2006 -0.1116 -0.1065 -0.1063 -0.0679 -0.0813 -0.8945 -0.0794 -0.1123 -0.0586 -0.1273 -0.0989 -1.5494 -0.0714 -0.0398 -0.1885 -0.0736 -0.0845 -0.1503 -0.0596 -0.0367 -0.0904 -0.0329 -0.3968 -0.3186 -1.8210 -0.1390 -0.1166 -0.0775 -0.0392 -0.2490 -0.0180 -0.0813 -0.0904 -0.0991 -0.0582 -0.7289 -0.1294 -0.1239 -0.0935 -0.0931 -0.0457 -0.1288 -0.7537 -0.0820 -0.0944 -0.1155 -0.0731 -0.0482 -0.1937 -0.0295 -0.0884 -0.0477 -0.0965 -0.0522 -0.4106 -0.1096 -0.1132 -0.0952 -0.1044 -0.0462 -0.4069 -0.0706 -0.0858 -0.1152 -0.0762 -0.0484 -0.1225 -0.0234 -0.0787 -0.0414 -0.0951 -0.0517 -0.3721 -0.1024 -0.1050 -0.0987 -0.0936 -0.0613 -0.0415 -0.5556 -0.0689 -0.0867 -0.1161 -0.0709 -0.0430 -0.1230 -0.0107 -0.0903 -0.0437 -0.0953 -0.0529 -0.3806 -0.0912 -0.0869 -0.0997 -0.1027 -0.0577 -0.0858 -0.5511 -0.0835 -0.1013 -0.1103 -0.0677 -0.0440 -0.1045 -0.0422 -0.0873 -0.0393 -0.0915 -0.0552 -0.3555 -0.0950 -0.0965 -0.1007 -0.1009 -0.0528 -0.4936 -0.0569 -0.0853 -0.1133 -0.0711 -0.0445 -0.1110 -0.0535 -0.0823 -0.0463 -0.0947 -0.0562 -0.3384 -0.0929 -0.1053 -0.0964 -0.1052 -0.0903 -0.0380 -0.6140 -0.0667 -0.0929 -0.1164 -0.0669 -0.0422 -0.1197 -0.0232 -0.0931 -0.0483 -0.0996 -0.0549 -0.4032 -0.0953 -0.1103 -0.1046 -0.1126 -0.0543 -0.0960 -0.5757 -0.0829 -0.0950 -0.1142 -0.0678 -0.0490 -0.1239 -0.0120 -0.0976 -0.0490 -0.0947 -0.0559 -0.3587 -0.0980 -0.1213 -0.1052 -0.1091 -0.0469 -0.0332 -0.5953 -0.0759 -0.0818 -0.1175 -0.0681 -0.0440 -0.1120 -0.0115 -0.0904 -0.0463 -0.0997 -0.0533 -0.3713 -0.0939 -0.1171 -0.1103 -0.1125 -0.0687 -0.0963 -0.5216 -0.0867 -0.0955 -0.1121 -0.0684 -0.0474 -0.1079 -0.0265 -0.0879 -0.0455 -0.0985 -0.0563 -0.3726 -0.0981 -0.1267 -0.1002 -0.1063 -0.0427 -0.3610 -0.0675 -0.0766 -0.1144 -0.0766 -0.0469 -0.0956 -0.0144 -0.0840 -0.0408 -0.0935 -0.0583 -0.3669 -0.0908 -0.1160 -0.1109 -0.0989 -0.0495 -0.3929 -0.0572 -0.1132 -0.1128 -0.0760 -0.0433 -0.1018 -0.0239 -0.0926 -0.0386 -0.0971 -0.0642 -0.4366 -0.0841 -0.1162 -0.1060 -0.1017 -0.0629 -0.0395 -0.5378 -0.0733 -0.0521 -0.0970 -0.0556 -0.3572 -0.0857 -0.1341 -0.1307 -0.0978 -0.0451 -0.5407 -0.0679 -0.0830 -0.0354 -0.0978 -0.0431 -1.0387 -0.0776 -0.0810
S-149	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( 3.7 < gpa ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-149	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( 3.7 < gpa ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-149	-0.17381897568702698	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( 3.7 < gpa ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-149	-0.17381897568702698	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( 3.7 < gpa ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-149	-0.1061 -0.0514 -5.3929 -0.1062 -0.1078 -0.0983 -0.0546 -0.4754 -0.0202 -0.0934 -0.1988 -0.0957 -0.0321 -0.1244 -0.2187 -2.2472 -0.0313 -0.0824 -0.0809 -0.7155 -0.0662 -0.0357 -0.0875 -0.0677 -0.2923 -0.1244 -0.1231 -0.0496 -0.0973 -0.0595 -0.1972 -0.0790 -0.0516 -0.0998 -0.0278 -0.7317 -0.9005 -0.0691 -0.0437 -1.9318 -0.2126 -0.1032 -0.1063 -0.1072 -0.0696 -0.0816 -0.9748 -0.0918 -0.0796 -0.0615 -0.1012 -0.0597 -1.6452 -0.0791 -0.0424 -0.1864 -0.0744 -0.0825 -0.1539 -0.0549 -0.0361 -0.0905 -0.0352 -0.4181 -0.3611 -1.7776 -0.1455 -0.1180 -0.0690 -0.0382 -0.2498 -0.0177 -0.0798 -0.0914 -0.0978 -0.0580 -0.7605 -0.1316 -0.1293 -0.0936 -0.0922 -0.0437 -0.1318 -0.7698 -0.0784 -0.0938 -0.1255 -0.3246 -0.0887 -0.0580 -0.0373 -0.0910 -0.0455 -0.0982 -0.0524 -0.4105 -0.1138 -0.1295 -0.0902 -0.1048 -0.0467 -0.4193 -0.0738 -0.0783 -0.1194 -0.0702 -0.0452 -0.1364 -0.0176 -0.0784 -0.0428 -0.0946 -0.0509 -0.3769 -0.1020 -0.1054 -0.0984 -0.0923 -0.0581 -0.0419 -0.5677 -0.0692 -0.0858 -0.1169 -0.0641 -0.0429 -0.1217 -0.0112 -0.0896 -0.0452 -0.0956 -0.0523 -0.3835 -0.0935 -0.0881 -0.0997 -0.1019 -0.0577 -0.0871 -0.5756 -0.0830 -0.1009 -0.1112 -0.0626 -0.0437 -0.1046 -0.0434 -0.0864 -0.0403 -0.0910 -0.0546 -0.3586 -0.0953 -0.0977 -0.1001 -0.1008 -0.0524 -0.4930 -0.0557 -0.0846 -0.1134 -0.0658 -0.0436 -0.1104 -0.0516 -0.0815 -0.0469 -0.0948 -0.0555 -0.3409 -0.0925 -0.1066 -0.0958 -0.1052 -0.0914 -0.0372 -0.6205 -0.0662 -0.0928 -0.1173 -0.0582 -0.0416 -0.1207 -0.0238 -0.0923 -0.0489 -0.0997 -0.0546 -0.4056 -0.0962 -0.1108 -0.1045 -0.1124 -0.0542 -0.0947 -0.5883 -0.0825 -0.0942 -0.1152 -0.0592 -0.0482 -0.1264 -0.0120 -0.0952 -0.0496 -0.0948 -0.0557 -0.3584 -0.0975 -0.1228 -0.1051 -0.1090 -0.0473 -0.0332 -0.6012 -0.0768 -0.0817 -0.1176 -0.0575 -0.0430 -0.1149 -0.0116 -0.0895 -0.0469 -0.0990 -0.0529 -0.3714 -0.0942 -0.1186 -0.1095 -0.1117 -0.0676 -0.0968 -0.5301 -0.0871 -0.0953 -0.1131 -0.0570 -0.0464 -0.1116 -0.0282 -0.0862 -0.0455 -0.0977 -0.0561 -0.3681 -0.0971 -0.1260 -0.0997 -0.1064 -0.0431 -0.3633 -0.0677 -0.0769 -0.1145 -0.0704 -0.0463 -0.0965 -0.0139 -0.0828 -0.0408 -0.0935 -0.0581 -0.3649 -0.0904 -0.1160 -0.1103 -0.0982 -0.0495 -0.3956 -0.0573 -0.1113 -0.1129 -0.0701 -0.0427 -0.1019 -0.0239 -0.0919 -0.0391 -0.0972 -0.0638 -0.4343 -0.0843 -0.1170 -0.1053 -0.1010 -0.0625 -0.0395 -0.5402 -0.0722 -0.0520 -0.0970 -0.0557 -0.3577 -0.0858 -0.1359 -0.1316 -0.0970 -0.0451 -0.5500 -0.0679 -0.0833 -0.0362 -0.0980 -0.0424 -1.0507 -0.0782 -0.0818
S-141	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( 3.3 < gpa ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-141	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( 3.3 < gpa ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-141	-0.17342980206012726	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( 3.3 < gpa ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-141	-0.17342980206012726	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( 3.3 < gpa ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-141	-0.1063 -0.0510 -5.4066 -0.1063 -0.1070 -0.0977 -0.0550 -0.4774 -0.0203 -0.0927 -0.1995 -0.0964 -0.0321 -0.1253 -0.2166 -2.2460 -0.0310 -0.0824 -0.0809 -0.7215 -0.0662 -0.0355 -0.0876 -0.0683 -0.2926 -0.1243 -0.1241 -0.0493 -0.0966 -0.0597 -0.1987 -0.0784 -0.0512 -0.0991 -0.0278 -0.7335 -0.9055 -0.0691 -0.0437 -1.9318 -0.2158 -0.1035 -0.1064 -0.1072 -0.0701 -0.0816 -0.9803 -0.0926 -0.0801 -0.0620 -0.1013 -0.0595 -1.6508 -0.0797 -0.0427 -0.1849 -0.0743 -0.0832 -0.1548 -0.0568 -0.0373 -0.0906 -0.0355 -0.4210 -0.3627 -1.7827 -0.1412 -0.1167 -0.0748 -0.0385 -0.3081 -0.0187 -0.0805 -0.0913 -0.0986 -0.0583 -0.7616 -0.1323 -0.1282 -0.0939 -0.0922 -0.0453 -0.1301 -0.7705 -0.0799 -0.0930 -0.1175 -0.0654 -0.0475 -0.1875 -0.0302 -0.0859 -0.0489 -0.0968 -0.0521 -0.4276 -0.1106 -0.1153 -0.0954 -0.1036 -0.0463 -0.4072 -0.0674 -0.0827 -0.1250 -0.0386 -0.0911 -0.0552 -0.0384 -0.0933 -0.0403 -0.0978 -0.0515 -0.3821 -0.1091 -0.1109 -0.0950 -0.0949 -0.0605 -0.0405 -0.5560 -0.0670 -0.0817 -0.1180 -0.0587 -0.0410 -0.1246 -0.0081 -0.0866 -0.0440 -0.0954 -0.0529 -0.3887 -0.0931 -0.0881 -0.1000 -0.1036 -0.0586 -0.0872 -0.5699 -0.0833 -0.0998 -0.1100 -0.0597 -0.0429 -0.1079 -0.0464 -0.0862 -0.0403 -0.0919 -0.0553 -0.3558 -0.0955 -0.0985 -0.1002 -0.1009 -0.0527 -0.4959 -0.0545 -0.0844 -0.1134 -0.0644 -0.0435 -0.1130 -0.0514 -0.0809 -0.0468 -0.0949 -0.0563 -0.3406 -0.0933 -0.1073 -0.0957 -0.1053 -0.0908 -0.0372 -0.6180 -0.0659 -0.0933 -0.1163 -0.0622 -0.0418 -0.1215 -0.0231 -0.0922 -0.0487 -0.0997 -0.0550 -0.4057 -0.0963 -0.1109 -0.1040 -0.1117 -0.0546 -0.0944 -0.5859 -0.0817 -0.0950 -0.1141 -0.0641 -0.0482 -0.1259 -0.0110 -0.0966 -0.0491 -0.0949 -0.0556 -0.3610 -0.0981 -0.1219 -0.1046 -0.1083 -0.0468 -0.0333 -0.5984 -0.0754 -0.0819 -0.1174 -0.0603 -0.0430 -0.1141 -0.0114 -0.0886 -0.0467 -0.0998 -0.0532 -0.3740 -0.0941 -0.1183 -0.1096 -0.1116 -0.0680 -0.0950 -0.5308 -0.0855 -0.0955 -0.1129 -0.0579 -0.0457 -0.1121 -0.0270 -0.0850 -0.0455 -0.0978 -0.0567 -0.3726 -0.0979 -0.1284 -0.0997 -0.1063 -0.0436 -0.3561 -0.0668 -0.0774 -0.1146 -0.0641 -0.0451 -0.1001 -0.0138 -0.0817 -0.0410 -0.0936 -0.0584 -0.3672 -0.0905 -0.1167 -0.1104 -0.0976 -0.0495 -0.3906 -0.0569 -0.1127 -0.1121 -0.0672 -0.0420 -0.1051 -0.0244 -0.0917 -0.0388 -0.0965 -0.0643 -0.4312 -0.0837 -0.1169 -0.1054 -0.1011 -0.0625 -0.0393 -0.5439 -0.0723 -0.0524 -0.0970 -0.0557 -0.3575 -0.0859 -0.1350 -0.1317 -0.0971 -0.0445 -0.5468 -0.0680 -0.0826 -0.0362 -0.0980 -0.0431 -1.0508 -0.0776 -0.0818
S-133	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( 2.0 < gpa ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-133	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( 2.0 < gpa ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-133	-0.1737305223941803	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( 2.0 < gpa ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-133	-0.1737305223941803	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( 2.0 < gpa ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-133	-0.1057 -0.0514 -5.4071 -0.1063 -0.1076 -0.0984 -0.0543 -0.4718 -0.0203 -0.0934 -0.1990 -0.0957 -0.0321 -0.1242 -0.2181 -2.2309 -0.0313 -0.0824 -0.0809 -0.7125 -0.0661 -0.0357 -0.0875 -0.0680 -0.2927 -0.1233 -0.1229 -0.0496 -0.0972 -0.0606 -0.1960 -0.0789 -0.0516 -0.0998 -0.0280 -0.7495 -0.9122 -0.0697 -0.0440 -1.9981 -0.2154 -0.1033 -0.1064 -0.1077 -0.0696 -0.0817 -0.9824 -0.0920 -0.0798 -0.0627 -0.1019 -0.0603 -1.6560 -0.0787 -0.0437 -0.1823 -0.0744 -0.0825 -0.1488 -0.0569 -0.0366 -0.0906 -0.0355 -0.4175 -0.3542 -1.8162 -0.1410 -0.1170 -0.0818 -0.0376 -0.2344 -0.0185 -0.0811 -0.0904 -0.0991 -0.0574 -0.7615 -0.1348 -0.1294 -0.0936 -0.0927 -0.0457 -0.1280 -0.7725 -0.0818 -0.0936 -0.1159 -0.0728 -0.0470 -0.1940 -0.0297 -0.0877 -0.0479 -0.0965 -0.0518 -0.4160 -0.1118 -0.1147 -0.0955 -0.1030 -0.0464 -0.4075 -0.0689 -0.0850 -0.1154 -0.0756 -0.0476 -0.1208 -0.0233 -0.0786 -0.0417 -0.0950 -0.0515 -0.3771 -0.1043 -0.1072 -0.0974 -0.0924 -0.0612 -0.0420 -0.5642 -0.0672 -0.0860 -0.1164 -0.0692 -0.0416 -0.1216 -0.0108 -0.0904 -0.0434 -0.0960 -0.0523 -0.3783 -0.0937 -0.0889 -0.0999 -0.1020 -0.0582 -0.0849 -0.5634 -0.0804 -0.0984 -0.1098 -0.0650 -0.0419 -0.1026 -0.0405 -0.0853 -0.0387 -0.0923 -0.0545 -0.3558 -0.0970 -0.0973 -0.1004 -0.0999 -0.0532 -0.4928 -0.0534 -0.0808 -0.1149 -0.1174 -0.0417 -0.1070 -0.0265 -0.0800 -0.0442 -0.0953 -0.0552 -0.3441 -0.0955 -0.1074 -0.0960 -0.1052 -0.0931 -0.0361 -0.6439 -0.0641 -0.0910 -0.1248 -0.0634 -0.0956 -0.0530 -0.0342 -0.0990 -0.0463 -0.1016 -0.0537 -0.4020 -0.1018 -0.1104 -0.1027 -0.1133 -0.0538 -0.0906 -0.5929 -0.0833 -0.0932 -0.1156 -0.0704 -0.0451 -0.1317 -0.0071 -0.0937 -0.0488 -0.0952 -0.0542 -0.3493 -0.0979 -0.1235 -0.1067 -0.1079 -0.0476 -0.0334 -0.6219 -0.0742 -0.0832 -0.1185 -0.0615 -0.0421 -0.1196 -0.0131 -0.0876 -0.0466 -0.0996 -0.0522 -0.3690 -0.0944 -0.1193 -0.1098 -0.1110 -0.0677 -0.0938 -0.5358 -0.0848 -0.0944 -0.1122 -0.0582 -0.0458 -0.1121 -0.0302 -0.0863 -0.0456 -0.0984 -0.0563 -0.3700 -0.0986 -0.1284 -0.1005 -0.1064 -0.0422 -0.3676 -0.0670 -0.0765 -0.1147 -0.0669 -0.0446 -0.0977 -0.0145 -0.0831 -0.0409 -0.0933 -0.0583 -0.3667 -0.0910 -0.1175 -0.1109 -0.0982 -0.0498 -0.3931 -0.0563 -0.1119 -0.1125 -0.0635 -0.0407 -0.1050 -0.0234 -0.0918 -0.0390 -0.0970 -0.0637 -0.4279 -0.0850 -0.1186 -0.1061 -0.1002 -0.0634 -0.0398 -0.5528 -0.0728 -0.0522 -0.0976 -0.0559 -0.3521 -0.0872 -0.1359 -0.1314 -0.0971 -0.0454 -0.5501 -0.0676 -0.0819 -0.0361 -0.0980 -0.0430 -1.0244 -0.0782 -0.0824
S-84	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( 2.3 < gpa ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-84	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( 2.3 < gpa ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-84	-0.1742558628320694	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( 2.3 < gpa ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-84	-0.1742558628320694	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( 2.3 < gpa ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-84	-0.1061 -0.0514 -5.3870 -0.1054 -0.1067 -0.0976 -0.0547 -0.4747 -0.0203 -0.0933 -0.1989 -0.0957 -0.0320 -0.1243 -0.2181 -2.2210 -0.0313 -0.0824 -0.0809 -0.7169 -0.0661 -0.0356 -0.0875 -0.0685 -0.2970 -0.1250 -0.1240 -0.0499 -0.0972 -0.0606 -0.1971 -0.0783 -0.0515 -0.0998 -0.0280 -0.7418 -0.9123 -0.0696 -0.0434 -1.9542 -0.2127 -0.1039 -0.1064 -0.1072 -0.0702 -0.0818 -0.9796 -0.0920 -0.0798 -0.0623 -0.1018 -0.0596 -1.7585 -0.0755 -0.0443 -0.1801 -0.0748 -0.0841 -0.1515 -0.0568 -0.0368 -0.0914 -0.0360 -0.4177 -0.3635 -1.8161 -0.1403 -0.1167 -0.0754 -0.0386 -0.2774 -0.0184 -0.0813 -0.0930 -0.0984 -0.0588 -0.7495 -0.1336 -0.1289 -0.0937 -0.0933 -0.0458 -0.1281 -0.7660 -0.0819 -0.0930 -0.1149 -0.0712 -0.0475 -0.1911 -0.0308 -0.0877 -0.0486 -0.0966 -0.0524 -0.4107 -0.1109 -0.1147 -0.0954 -0.1037 -0.0465 -0.4081 -0.0699 -0.0850 -0.1145 -0.0726 -0.0476 -0.1216 -0.0236 -0.0778 -0.0422 -0.0951 -0.0518 -0.3721 -0.1043 -0.1080 -0.0973 -0.0925 -0.0612 -0.0421 -0.5615 -0.0682 -0.0853 -0.1164 -0.0672 -0.0420 -0.1224 -0.0091 -0.0891 -0.0436 -0.0962 -0.0529 -0.3738 -0.0927 -0.0883 -0.1000 -0.1016 -0.0580 -0.0849 -0.5557 -0.0821 -0.0975 -0.1107 -0.0633 -0.0426 -0.1024 -0.0365 -0.0841 -0.0396 -0.0923 -0.0557 -0.3539 -0.0952 -0.0991 -0.0993 -0.0998 -0.0542 -0.4887 -0.0544 -0.0848 -0.1174 -0.3211 -0.0851 -0.0560 -0.0322 -0.0945 -0.0445 -0.0983 -0.0569 -0.3440 -0.1000 -0.1108 -0.0944 -0.1058 -0.0894 -0.0373 -0.6302 -0.0636 -0.0900 -0.1178 -0.0592 -0.0404 -0.1239 -0.0174 -0.0910 -0.0500 -0.1003 -0.0557 -0.3951 -0.0967 -0.1138 -0.1057 -0.1117 -0.0553 -0.0949 -0.5848 -0.0813 -0.0954 -0.1143 -0.0645 -0.0473 -0.1255 -0.0120 -0.0930 -0.0502 -0.0954 -0.0566 -0.3535 -0.0976 -0.1255 -0.1047 -0.1084 -0.0469 -0.0332 -0.6015 -0.0750 -0.0821 -0.1176 -0.0611 -0.0432 -0.1137 -0.0117 -0.0886 -0.0471 -0.0997 -0.0535 -0.3686 -0.0942 -0.1184 -0.1096 -0.1118 -0.0680 -0.0938 -0.5275 -0.0855 -0.0952 -0.1121 -0.0612 -0.0466 -0.1090 -0.0283 -0.0853 -0.0460 -0.0985 -0.0567 -0.3700 -0.0985 -0.1275 -0.1003 -0.1063 -0.0427 -0.3610 -0.0671 -0.0764 -0.1154 -0.0665 -0.0453 -0.0968 -0.0145 -0.0824 -0.0413 -0.0935 -0.0587 -0.3642 -0.0911 -0.1167 -0.1110 -0.0975 -0.0488 -0.3927 -0.0568 -0.1150 -0.1133 -0.0619 -0.0410 -0.1053 -0.0254 -0.0915 -0.0391 -0.0971 -0.0645 -0.4278 -0.0845 -0.1186 -0.1062 -0.1004 -0.0621 -0.0389 -0.5432 -0.0727 -0.0532 -0.0970 -0.0560 -0.3498 -0.0861 -0.1359 -0.1316 -0.0971 -0.0447 -0.5460 -0.0668 -0.0831 -0.0366 -0.0980 -0.0431 -1.0333 -0.0782 -0.0829
S-117	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += neg * ( ( n + "" ) .toCharArray () [j] - '0' ) ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-117	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( 0 == j ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-117	-0.19265960156917572	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += neg * ( ( n + "" ) .toCharArray () [j] - '0' ) ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-117	-0.19265960156917572	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += neg * ( ( n + "" ) .toCharArray () [j] - '0' ) ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-117	-0.0910 -0.0506 -1.1562 -1.4424 -0.0375 -0.0803 -0.0418 -0.0851 -0.0249 -0.1098 -1.0773 -1.5960 -0.0408 -0.0810 -0.0941 -1.3465 -0.2156 -0.0469 -0.2196 -0.0307 -0.0905 -0.0492 -0.9695 -0.1511 -0.0547 -0.1720 -0.0644 -0.0872 -1.4429 -0.1393 -0.0385 -0.1893 -0.6610 -0.1333 -0.0406 -0.2202 -0.0232 -0.0571 -0.0590 -0.0821 -0.0453 -1.0543 -0.1340 -0.0425 -0.2282 -0.7836 -0.1064 -0.0415 -0.2579 -0.0687 -0.0904 -0.1515 -0.1085 -0.0617 -0.0700 -0.0757 -0.7141 -0.0804 -0.0871 -0.0628 -0.0966 -0.0560 -0.4287 -0.0601 -0.0885 -0.1451 -0.0779 -0.0860 -0.0787 -0.0404 -0.0938 -1.1506 -0.0776 -0.0807 -0.0843 -0.0506 -0.3784 -0.3661 -1.5884 -0.1261 -0.1067 -0.0785 -0.0774 -0.0986 -0.0854 -0.0784 -0.0607 -0.0941 -0.4374 -0.0563 -0.0534 -0.8545 -0.0956 -0.1113 -0.2090 -0.1680 -0.0840 -0.0703 -0.0901 -0.2694 -0.0503 -0.0984 -0.0586 -0.0745 -0.0750 -0.5700 -0.0894 -0.0733 -0.0899 -0.0580 -0.0728 -0.0615 -0.0792 -0.1108 -0.0753 -0.0659 -0.0647 -0.1032 -0.0972 -0.3951 -0.0914 -0.0736 -0.1182 -0.0785 -0.0878 -0.0706 -0.0675 -0.0585 -0.0444 -0.1084 -0.1488 -0.0747 -0.0649 -0.0464 -0.0718 -0.1256 -0.0712 -0.0836 -0.0542 -0.0559 -0.1540 -0.1273 -0.1240 -0.0093 -0.0888 -0.0879 -0.0729 -0.0438 -0.1235 -0.1523 -0.1077 -0.0477 -0.1006 -0.0854 -0.3632 -0.1041 -0.0330 -0.1043 -0.0933 -0.0375 -0.0968 -0.5498 -0.0341 -0.1073 -0.0700 -0.0955 -0.0927 -0.0305 -0.0983 -0.0583 -0.1112 -0.1167 -0.0993 -0.0517 -0.5873 -0.0464 -0.6786 -0.2220 -0.0636 -0.2063 -0.0669 -0.0950 -0.0925 -0.0347 -0.1130 -0.0695 -0.1216 -0.1053 -0.1054 -0.0634 -0.0924 -0.0986 -0.1810 -0.1066 -0.0386 -0.4799 -0.2465 -0.2273 -0.1029 -0.0892 -0.1182 -1.1434 -0.0853 -0.0635 -0.1126 -0.0380 -0.1129 -0.0914 -0.7715 -0.2112 -0.0652 -0.4641 -0.0656 -0.0984 -0.0573 -0.9681 -0.1878 -0.0704 -0.2531 -0.0718 -0.0815 -0.0659 -0.1097 -0.0615 -0.0646 -0.0826 -0.7255 -0.0703 -0.0765 -0.0727 -0.1012 -0.1547 -0.0894 -0.0865 -0.0613 -0.0910 -0.1356 -0.0805 -0.1048 -0.0792 -0.1072 -1.3397 -0.1152 -0.0286 -0.1471 -0.0613 -0.1072 -0.1495 -0.1107 -0.0348 -0.0973 -0.3361 -0.1017 -0.0768 -0.0953 -0.0919 -0.1076 -0.0885 -0.0743 -0.0578 -0.0568 -0.1219 -1.0603 -0.1257 -0.0426 -1.0278 -1.6016 -0.0954 -0.0897 -0.0907 -0.0755 -0.0837
S-229	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length; j += 1 ) { digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-229	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg; else digit += ( "" + n ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-229	-0.19974647462368011	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length ; j += 1 ) { digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-229	-0.19974647462368011	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length ; j += 1 ) { digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-229	-0.0913 -0.0507 -1.1633 -1.4504 -0.0375 -0.0804 -0.0418 -0.0851 -0.0250 -0.1099 -1.0884 -1.6115 -0.0405 -0.0810 -0.0934 -1.3332 -0.2157 -0.0469 -0.2226 -0.0312 -0.0899 -0.0491 -0.9685 -0.1513 -0.0550 -0.1745 -0.0649 -0.0867 -1.4389 -0.1403 -0.0386 -0.1921 -0.6642 -0.1344 -0.0399 -0.2155 -0.0233 -0.0574 -0.0588 -0.0821 -0.0453 -1.0540 -0.1350 -0.0426 -0.2315 -0.7825 -0.1072 -0.0417 -0.2557 -0.0693 -0.0900 -0.1532 -0.1085 -0.0618 -0.0701 -0.0757 -0.7458 -0.0791 -0.0867 -0.0610 -0.0968 -0.0568 -0.4566 -0.0601 -0.0865 -0.1431 -0.0779 -0.0862 -0.0797 -0.0359 -0.0956 -1.2420 -0.0774 -0.0804 -0.0876 -0.0501 -0.3730 -0.3711 -1.6050 -0.1230 -0.1076 -0.0759 -0.0792 -0.0965 -0.0860 -0.0772 -0.0602 -0.0940 -0.4452 -0.0581 -0.0570 -0.7990 -0.0955 -0.1172 -0.2072 -0.1554 -0.0865 -0.0673 -0.0889 -0.3035 -0.0484 -0.0991 -0.0601 -0.0758 -0.0763 -0.6680 -0.0923 -0.0679 -0.0851 -0.0757 -0.0649 -0.0625 -0.0908 -0.1080 -0.0753 -0.0595 -0.0634 -0.1055 -0.1004 -0.5605 -0.0946 -0.0739 -0.1060 -0.0784 -0.0858 -0.0697 -0.0638 -0.0958 -0.1130 -0.0471 -0.0618 -0.0814 -0.0849 -0.1146 -0.0795 -0.0774 -0.0579 -0.0597 -0.1693 -0.1438 -0.1781 -0.0070 -0.0848 -0.0518 -0.1198 -1.3710 -0.0664 -0.0464 -0.1216 -0.1464 -0.1075 -0.0436 -0.0956 -0.0845 -0.3504 -0.1042 -0.0332 -0.1058 -0.0941 -0.0373 -0.0969 -0.5538 -0.0342 -0.1081 -0.0657 -0.0949 -0.0927 -0.0311 -0.0984 -0.0598 -0.1110 -0.1184 -0.1001 -0.0484 -0.5764 -0.0463 -0.6760 -0.2235 -0.0630 -0.2129 -0.0675 -0.0951 -0.0920 -0.0350 -0.1140 -0.0694 -0.1225 -0.1055 -0.1062 -0.0598 -0.0913 -0.0984 -0.1891 -0.1067 -0.0359 -0.4784 -0.2487 -0.2337 -0.1028 -0.0894 -0.1162 -1.1649 -0.0853 -0.0635 -0.1126 -0.0383 -0.1136 -0.0914 -0.7711 -0.2139 -0.0652 -0.4668 -0.0661 -0.0991 -0.0569 -0.9680 -0.1905 -0.0703 -0.2548 -0.0724 -0.0815 -0.0662 -0.1098 -0.0621 -0.0642 -0.0831 -0.7647 -0.0704 -0.0753 -0.0731 -0.1021 -0.1579 -0.0914 -0.0864 -0.0608 -0.0890 -0.1309 -0.0810 -0.1050 -0.0779 -0.1071 -1.3614 -0.1152 -0.0298 -0.1488 -0.0612 -0.1080 -0.1480 -0.1115 -0.0353 -0.0972 -0.3359 -0.1017 -0.0760 -0.0959 -0.0924 -0.1078 -0.0886 -0.0748 -0.0582 -0.0564 -0.1229 -1.0601 -0.1259 -0.0430 -1.0327 -1.6217 -0.0948 -0.0905 -0.0913 -0.0755 -0.0831
S-226	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; digits.size () > i; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-226	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg; else digit += ( "" + n ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-226	-0.20081360638141632	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; digits.size () > i ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-226	-0.20081360638141632	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; digits.size () > i ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-226	-0.0920 -0.0506 -1.1513 -1.4283 -0.0375 -0.0804 -0.0421 -0.0858 -0.0252 -0.1098 -1.0938 -1.6028 -0.0388 -0.0809 -0.0942 -1.3382 -0.2172 -0.0468 -0.2215 -0.0309 -0.0900 -0.0495 -0.9636 -0.1523 -0.0545 -0.1745 -0.0650 -0.0867 -1.4442 -0.1412 -0.0385 -0.1946 -0.6594 -0.1353 -0.0399 -0.2159 -0.0231 -0.0574 -0.0584 -0.0822 -0.0453 -1.0632 -0.1360 -0.0428 -0.2346 -0.7811 -0.1080 -0.0410 -0.2542 -0.0693 -0.0900 -0.1559 -0.1093 -0.0612 -0.0691 -0.0760 -0.7513 -0.0747 -0.0762 -0.0538 -0.0935 -0.0546 -0.6924 -0.0596 -0.0860 -0.1428 -0.0780 -0.0874 -0.0781 -0.0353 -0.0961 -1.2499 -0.0777 -0.0801 -0.0843 -0.0487 -0.3848 -0.3541 -1.5971 -0.1320 -0.1082 -0.0768 -0.0752 -0.0973 -0.0855 -0.0774 -0.0619 -0.0938 -0.4317 -0.0568 -0.0560 -0.6833 -0.0930 -0.1181 -0.2056 -0.1523 -0.0866 -0.0692 -0.0890 -0.2767 -0.0499 -0.0990 -0.0585 -0.0751 -0.0775 -0.5871 -0.0846 -0.0707 -0.0894 -0.0563 -0.0759 -0.0573 -0.0794 -0.1095 -0.0722 -0.0567 -0.0640 -0.1058 -0.1017 -0.7228 -0.0896 -0.0712 -0.1120 -0.0789 -0.0863 -0.0688 -0.0642 -0.0900 -0.1137 -0.0504 -0.0735 -0.0472 -0.0732 -0.1091 -0.0816 -0.0775 -0.0580 -0.0651 -0.1601 -0.1431 -0.1321 -0.0077 -0.0837 -0.0531 -0.1123 -1.3921 -0.0665 -0.0464 -0.1210 -0.1489 -0.1075 -0.0450 -0.0968 -0.0845 -0.3494 -0.1049 -0.0338 -0.1050 -0.0941 -0.0376 -0.0969 -0.5543 -0.0340 -0.1074 -0.0689 -0.0956 -0.0934 -0.0315 -0.0992 -0.0597 -0.1110 -0.1195 -0.1001 -0.0501 -0.5732 -0.0471 -0.6755 -0.2250 -0.0626 -0.2127 -0.0679 -0.0951 -0.0922 -0.0359 -0.1150 -0.0692 -0.1215 -0.1075 -0.1061 -0.0626 -0.0916 -0.0987 -0.1938 -0.1067 -0.0351 -0.4883 -0.2396 -0.2351 -0.1029 -0.0896 -0.1173 -1.1539 -0.0854 -0.0634 -0.1126 -0.0384 -0.1119 -0.0908 -0.7507 -0.2190 -0.0651 -0.4608 -0.0656 -0.0992 -0.0571 -0.9491 -0.1938 -0.0697 -0.2529 -0.0724 -0.0810 -0.0673 -0.1098 -0.0574 -0.0617 -0.0796 -0.7425 -0.0935 -0.1062 -0.1350 -0.0620 -0.1502 -0.0898 -0.4850 -0.0554 -0.0799 -0.1286 -0.0797 -0.1035 -0.0774 -0.1069 -1.3324 -0.1161 -0.0291 -0.1336 -0.0611 -0.1076 -0.1461 -0.1125 -0.0311 -0.0957 -0.3199 -0.1027 -0.0766 -0.0967 -0.0919 -0.1064 -0.0887 -0.0754 -0.0572 -0.0564 -0.1250 -1.0567 -0.1259 -0.0425 -1.0169 -1.6033 -0.0959 -0.0898 -0.0914 -0.0756 -0.0831
S-164	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; nums.length > i; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-164	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; nums.length > i; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-164	-0.19815696775913239	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; nums.length > i ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-164	-0.19815696775913239	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; nums.length > i ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-164	-0.0911 -0.0506 -1.1387 -1.4209 -0.0373 -0.0804 -0.0418 -0.0851 -0.0251 -0.1098 -1.0665 -1.6042 -0.0414 -0.0806 -0.0941 -1.3331 -0.2170 -0.0467 -0.2220 -0.0303 -0.0900 -0.0492 -0.9592 -0.1524 -0.0549 -0.1725 -0.0650 -0.0866 -1.4178 -0.1413 -0.0385 -0.1906 -0.6547 -0.1353 -0.0399 -0.2113 -0.0232 -0.0578 -0.0593 -0.0821 -0.0453 -1.0544 -0.1331 -0.0432 -0.2250 -0.7749 -0.1079 -0.0413 -0.2457 -0.0689 -0.0905 -0.1553 -0.1091 -0.0596 -0.0648 -0.0763 -0.7745 -0.0745 -0.1119 -0.0515 -0.1078 -0.0822 -0.8153 -0.0567 -0.0711 -0.1298 -0.0760 -0.0873 -0.0786 -0.0364 -0.0968 -1.2359 -0.0776 -0.0797 -0.0842 -0.0488 -0.3463 -0.3125 -1.5400 -0.1300 -0.1082 -0.0746 -0.0771 -0.0978 -0.0847 -0.0773 -0.0633 -0.0942 -0.4403 -0.0569 -0.0553 -0.7254 -0.0962 -0.1163 -0.2062 -0.1527 -0.0847 -0.0706 -0.0890 -0.2671 -0.0498 -0.0998 -0.0582 -0.0749 -0.0774 -0.5785 -0.0876 -0.0693 -0.0899 -0.0553 -0.0754 -0.0577 -0.0789 -0.1103 -0.0711 -0.0571 -0.0639 -0.1060 -0.0962 -0.5625 -0.0914 -0.0743 -0.1155 -0.0790 -0.0857 -0.0682 -0.0633 -0.0902 -0.1126 -0.0505 -0.0730 -0.0472 -0.0732 -0.1099 -0.0817 -0.0769 -0.0579 -0.0642 -0.1609 -0.1413 -0.1308 -0.0077 -0.0838 -0.0528 -0.1121 -1.3614 -0.0660 -0.0457 -0.1213 -0.1436 -0.1077 -0.0454 -0.0960 -0.0845 -0.3631 -0.1049 -0.0330 -0.1044 -0.0941 -0.0376 -0.0969 -0.5478 -0.0340 -0.1074 -0.0699 -0.0956 -0.0934 -0.0308 -0.0991 -0.0598 -0.1109 -0.1174 -0.1001 -0.0508 -0.5836 -0.0479 -0.6761 -0.2267 -0.0621 -0.2098 -0.0675 -0.0952 -0.0922 -0.0347 -0.1138 -0.0698 -0.1214 -0.1049 -0.1062 -0.0634 -0.0917 -0.0986 -0.1870 -0.1067 -0.0358 -0.4101 -0.2306 -0.2273 -0.1020 -0.0896 -0.1195 -1.1415 -0.0854 -0.0635 -0.1126 -0.0386 -0.1123 -0.0914 -0.7684 -0.2158 -0.0652 -0.4619 -0.0655 -0.0984 -0.0573 -0.9687 -0.1921 -0.0698 -0.2516 -0.0724 -0.0809 -0.0663 -0.1098 -0.0620 -0.0636 -0.0831 -0.7677 -0.0638 -0.0715 -0.0775 -0.1017 -0.1439 -0.0591 -0.0861 -0.0596 -0.0914 -0.1425 -0.0811 -0.1049 -0.0773 -0.1069 -1.3614 -0.1152 -0.0295 -0.1484 -0.0612 -0.1078 -0.1491 -0.1115 -0.0362 -0.0970 -0.3356 -0.1018 -0.0752 -0.0960 -0.0919 -0.1079 -0.0892 -0.0743 -0.0582 -0.0568 -0.1237 -1.0598 -0.1268 -0.0429 -1.0151 -1.5994 -0.0952 -0.0898 -0.0913 -0.0756 -0.0831
S-67	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length; j += 1 ) { digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-67	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += neg * ( ( n + "" ) .toCharArray () [j] - '0' ) ; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-67	-0.1997464895248413	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length ; j += 1 ) { digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-67	-0.1997464895248413	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( "" + n ) .toCharArray () .length ; j += 1 ) { digit += ( ( "" + n ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-67	-0.0913 -0.0507 -1.1633 -1.4504 -0.0375 -0.0804 -0.0418 -0.0851 -0.0250 -0.1099 -1.0884 -1.6115 -0.0405 -0.0810 -0.0934 -1.3332 -0.2157 -0.0469 -0.2226 -0.0312 -0.0899 -0.0491 -0.9685 -0.1513 -0.0550 -0.1745 -0.0649 -0.0867 -1.4389 -0.1403 -0.0386 -0.1921 -0.6642 -0.1344 -0.0399 -0.2155 -0.0233 -0.0574 -0.0588 -0.0821 -0.0453 -1.0540 -0.1350 -0.0426 -0.2315 -0.7825 -0.1072 -0.0417 -0.2557 -0.0693 -0.0900 -0.1532 -0.1085 -0.0618 -0.0701 -0.0757 -0.7458 -0.0791 -0.0867 -0.0610 -0.0968 -0.0568 -0.4566 -0.0601 -0.0865 -0.1431 -0.0779 -0.0862 -0.0797 -0.0359 -0.0956 -1.2420 -0.0774 -0.0804 -0.0876 -0.0501 -0.3730 -0.3711 -1.6050 -0.1230 -0.1076 -0.0759 -0.0792 -0.0965 -0.0860 -0.0772 -0.0601 -0.0940 -0.4452 -0.0581 -0.0570 -0.7990 -0.0955 -0.1172 -0.2072 -0.1554 -0.0865 -0.0673 -0.0889 -0.3035 -0.0484 -0.0991 -0.0601 -0.0758 -0.0763 -0.6680 -0.0923 -0.0679 -0.0851 -0.0757 -0.0649 -0.0625 -0.0908 -0.1080 -0.0753 -0.0595 -0.0634 -0.1055 -0.1004 -0.5605 -0.0946 -0.0739 -0.1060 -0.0784 -0.0858 -0.0697 -0.0638 -0.0958 -0.1130 -0.0471 -0.0618 -0.0814 -0.0849 -0.1146 -0.0795 -0.0774 -0.0579 -0.0597 -0.1693 -0.1438 -0.1781 -0.0070 -0.0848 -0.0518 -0.1198 -1.3710 -0.0664 -0.0464 -0.1216 -0.1464 -0.1075 -0.0436 -0.0956 -0.0845 -0.3504 -0.1042 -0.0332 -0.1058 -0.0941 -0.0373 -0.0969 -0.5538 -0.0342 -0.1081 -0.0657 -0.0949 -0.0927 -0.0311 -0.0984 -0.0598 -0.1110 -0.1184 -0.1001 -0.0484 -0.5764 -0.0463 -0.6760 -0.2235 -0.0630 -0.2129 -0.0675 -0.0951 -0.0920 -0.0350 -0.1140 -0.0694 -0.1225 -0.1055 -0.1062 -0.0598 -0.0913 -0.0984 -0.1891 -0.1067 -0.0359 -0.4784 -0.2487 -0.2337 -0.1028 -0.0894 -0.1162 -1.1649 -0.0853 -0.0635 -0.1126 -0.0383 -0.1136 -0.0914 -0.7711 -0.2139 -0.0652 -0.4668 -0.0661 -0.0991 -0.0569 -0.9680 -0.1905 -0.0703 -0.2548 -0.0724 -0.0815 -0.0662 -0.1098 -0.0621 -0.0642 -0.0831 -0.7647 -0.0704 -0.0753 -0.0731 -0.1021 -0.1579 -0.0914 -0.0864 -0.0608 -0.0890 -0.1309 -0.0810 -0.1050 -0.0779 -0.1071 -1.3614 -0.1152 -0.0298 -0.1488 -0.0612 -0.1080 -0.1480 -0.1115 -0.0353 -0.0972 -0.3359 -0.1017 -0.0760 -0.0959 -0.0924 -0.1078 -0.0886 -0.0748 -0.0582 -0.0564 -0.1229 -1.0601 -0.1259 -0.0430 -1.0327 -1.6217 -0.0948 -0.0905 -0.0913 -0.0755 -0.0831
S-54	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( 0 > n ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-54	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( 0 > n ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-54	-0.19784218072891235	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( 0 > n ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-54	-0.19784218072891235	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( 0 > n ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-54	-0.0918 -0.0510 -1.1518 -1.4367 -0.0375 -0.0804 -0.0418 -0.0858 -0.0250 -0.1098 -1.0877 -1.5956 -0.0405 -0.0809 -0.0941 -1.3332 -0.2173 -0.0468 -0.2221 -0.0308 -0.0899 -0.0492 -0.9691 -0.1514 -0.0550 -0.1736 -0.0654 -0.0866 -1.4432 -0.1403 -0.0385 -0.1933 -0.6591 -0.1345 -0.0399 -0.2143 -0.0228 -0.0574 -0.0588 -0.0827 -0.0450 -1.0563 -0.1351 -0.0428 -0.2314 -0.7775 -0.1081 -0.0411 -0.2505 -0.0693 -0.0899 -0.1577 -0.1092 -0.0621 -0.0704 -0.0751 -0.7331 -0.0800 -0.0822 -0.0632 -0.0940 -0.0549 -0.4898 -0.0614 -0.0886 -0.1423 -0.0784 -0.0863 -0.0794 -0.0366 -0.0954 -1.2320 -0.0784 -0.0810 -0.0846 -0.0508 -0.3870 -0.3508 -1.5196 -0.1257 -0.1074 -0.0972 -0.0929 -0.0753 -0.0796 -0.0844 -0.0663 -0.0943 -0.4382 -0.0533 -0.0561 -0.6842 -0.1006 -0.1139 -0.2073 -0.1463 -0.0860 -0.0688 -0.0883 -0.2628 -0.0487 -0.0989 -0.0593 -0.0743 -0.0761 -0.5587 -0.0893 -0.0672 -0.0899 -0.0588 -0.0742 -0.0584 -0.0789 -0.1103 -0.0728 -0.0566 -0.0635 -0.1067 -0.0980 -0.6101 -0.0900 -0.0725 -0.1177 -0.0796 -0.0865 -0.0671 -0.0629 -0.0885 -0.1125 -0.0502 -0.0735 -0.0471 -0.0732 -0.1092 -0.0818 -0.0775 -0.0584 -0.0647 -0.1608 -0.1414 -0.1323 -0.0078 -0.0838 -0.0532 -0.1118 -1.3229 -0.0663 -0.0454 -0.1211 -0.1474 -0.1076 -0.0449 -0.0961 -0.0845 -0.3634 -0.1042 -0.0338 -0.1045 -0.0934 -0.0374 -0.0970 -0.5526 -0.0342 -0.1082 -0.0701 -0.0957 -0.0933 -0.0316 -0.0992 -0.0594 -0.1110 -0.1183 -0.1002 -0.0507 -0.5739 -0.0471 -0.6759 -0.2238 -0.0626 -0.2113 -0.0675 -0.0951 -0.0921 -0.0347 -0.1150 -0.0694 -0.1215 -0.1063 -0.1054 -0.0638 -0.0916 -0.0986 -0.1896 -0.1067 -0.0354 -0.4791 -0.2392 -0.2275 -0.1028 -0.0895 -0.1153 -1.1731 -0.0854 -0.0635 -0.1127 -0.0383 -0.1143 -0.0914 -0.7731 -0.2143 -0.0656 -0.4649 -0.0660 -0.0984 -0.0569 -0.9679 -0.1908 -0.0703 -0.2532 -0.0724 -0.0815 -0.0659 -0.1097 -0.0620 -0.0646 -0.0830 -0.7531 -0.0705 -0.0741 -0.0730 -0.1003 -0.1558 -0.0898 -0.0873 -0.0612 -0.0912 -0.1336 -0.0811 -0.1043 -0.0779 -0.1070 -1.3613 -0.1151 -0.0293 -0.1508 -0.0613 -0.1079 -0.1493 -0.1107 -0.0358 -0.0972 -0.3346 -0.1018 -0.0764 -0.0953 -0.0920 -0.1079 -0.0893 -0.0748 -0.0577 -0.0568 -0.1241 -1.0611 -0.1259 -0.0426 -1.0329 -1.6087 -0.0961 -0.0904 -0.0914 -0.0760 -0.0837
S-2	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; ( n + "" ) .toCharArray () .length > j; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-2	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; ( n + "" ) .toCharArray () .length > j; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-2	-0.20066331326961517	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; ( n + "" ) .toCharArray () .length > j; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-2	-0.20066331326961517	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; ( n + "" ) .toCharArray () .length > j; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-2	-0.0913 -0.0506 -1.1466 -1.4212 -0.0375 -0.0804 -0.0418 -0.0858 -0.0250 -0.1099 -1.0826 -1.5792 -0.0405 -0.0810 -0.0941 -1.3321 -0.2156 -0.0465 -0.2206 -0.0309 -0.0899 -0.0492 -0.9590 -0.1502 -0.0545 -0.1726 -0.0655 -0.0867 -1.4459 -0.1393 -0.0382 -0.1907 -0.6601 -0.1335 -0.0396 -0.2113 -0.0229 -0.0574 -0.0588 -0.0821 -0.0453 -1.0581 -0.1341 -0.0422 -0.2299 -0.7799 -0.1073 -0.0411 -0.2489 -0.0694 -0.0907 -0.1528 -0.1092 -0.0617 -0.0707 -0.0762 -0.7374 -0.0813 -0.0808 -0.0620 -0.0936 -0.0546 -0.4525 -0.0610 -0.0854 -0.1409 -0.0778 -0.0861 -0.0780 -0.0360 -0.0955 -1.2410 -0.0767 -0.0816 -0.0822 -0.0502 -0.3815 -0.3754 -1.5793 -0.1279 -0.1065 -0.0796 -0.0713 -0.0911 -0.0858 -0.0779 -0.0666 -0.0897 -0.4361 -0.0559 -0.0538 -0.7066 -0.0943 -0.1171 -0.2067 -0.1565 -0.0856 -0.0716 -0.0887 -0.2710 -0.0494 -0.0987 -0.0572 -0.0744 -0.0807 -0.5118 -0.1227 -0.0563 -0.0800 -0.0585 -0.0746 -0.1231 -0.0728 -0.0616 -0.0604 -0.1168 -0.0797 -0.1007 -0.1015 -1.3865 -0.0850 -0.0725 -0.1157 -0.0787 -0.0848 -0.0680 -0.0611 -0.0853 -0.1106 -0.0466 -0.0695 -0.0485 -0.0740 -0.1128 -0.0809 -0.0798 -0.0565 -0.0611 -0.1381 -0.1372 -0.1246 -0.0073 -0.0822 -0.0520 -0.1151 -1.4101 -0.0618 -0.0450 -0.1200 -0.1451 -0.1076 -0.0466 -0.0951 -0.0850 -0.3554 -0.1049 -0.0335 -0.1030 -0.0941 -0.0377 -0.0969 -0.5432 -0.0342 -0.1074 -0.0709 -0.0957 -0.0933 -0.0307 -0.0992 -0.0599 -0.1110 -0.1183 -0.1001 -0.0514 -0.5827 -0.0472 -0.6725 -0.2238 -0.0622 -0.2115 -0.0675 -0.0952 -0.0922 -0.0351 -0.1142 -0.0694 -0.1213 -0.1063 -0.1054 -0.0642 -0.0916 -0.0986 -0.1869 -0.1067 -0.0350 -0.4780 -0.2360 -0.2304 -0.1020 -0.0895 -0.1156 -1.1610 -0.0854 -0.0636 -0.1126 -0.0383 -0.1126 -0.0915 -0.7747 -0.2128 -0.0652 -0.4614 -0.0661 -0.0984 -0.0569 -0.9636 -0.1907 -0.0698 -0.2534 -0.0724 -0.0810 -0.0657 -0.1097 -0.0616 -0.0654 -0.0838 -0.7512 -0.0718 -0.0704 -0.0742 -0.1001 -0.1608 -0.0894 -0.0874 -0.0613 -0.0875 -0.1316 -0.0817 -0.1050 -0.0786 -0.1079 -1.3611 -0.1151 -0.0296 -0.1511 -0.0617 -0.1079 -0.1480 -0.1115 -0.0360 -0.0971 -0.3387 -0.1017 -0.0760 -0.0962 -0.0919 -0.1079 -0.0892 -0.0736 -0.0582 -0.0564 -0.1228 -1.0554 -0.1268 -0.0426 -1.0281 -1.5997 -0.0954 -0.0904 -0.0913 -0.0760 -0.0838
S-345	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = n * -1; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-345	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = n * -1; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-345	-0.1956438422203064	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = n * -1; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-345	-0.1956438422203064	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = n * -1; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-345	-0.0904 -0.0507 -1.1780 -1.4261 -0.0376 -0.0804 -0.0421 -0.0851 -0.0247 -0.1098 -1.0905 -1.5807 -0.0396 -0.0809 -0.0934 -1.2924 -0.2203 -0.0468 -0.2243 -0.0312 -0.0901 -0.0495 -0.9647 -0.1545 -0.0545 -0.1778 -0.0654 -0.0867 -1.4482 -0.1418 -0.0384 -0.1930 -0.6530 -0.1360 -0.0399 -0.2155 -0.0228 -0.0574 -0.0601 -0.0822 -0.0449 -1.0562 -0.1355 -0.0424 -0.2344 -0.7661 -0.1087 -0.0416 -0.2497 -0.0699 -0.0900 -0.1496 -0.1084 -0.0616 -0.0690 -0.0768 -0.7540 -0.0796 -0.0871 -0.0619 -0.0990 -0.0571 -0.4269 -0.0598 -0.0889 -0.1437 -0.0780 -0.0861 -0.0779 -0.0344 -0.0955 -1.2229 -0.0781 -0.0795 -0.0832 -0.0515 -0.3932 -0.3698 -1.6625 -0.1284 -0.1073 -0.0793 -0.0757 -0.0956 -0.0850 -0.0798 -0.0706 -0.1139 -0.0546 -0.0745 -0.3013 -0.1740 -0.1135 -0.1658 -0.1593 -0.0876 -0.0698 -0.0888 -0.3196 -0.0471 -0.1000 -0.0580 -0.0768 -0.0772 -0.6167 -0.0868 -0.0726 -0.0906 -0.0523 -0.0740 -0.0589 -0.0799 -0.1123 -0.0730 -0.0590 -0.0639 -0.1050 -0.0968 -0.5421 -0.0900 -0.0800 -0.1113 -0.0806 -0.0864 -0.0701 -0.0676 -0.0912 -0.1215 -0.0482 -0.0753 -0.0483 -0.0744 -0.1081 -0.0802 -0.0738 -0.0582 -0.0643 -0.1663 -0.1438 -0.1314 -0.0077 -0.0839 -0.0512 -0.1152 -1.0385 -0.0647 -0.0459 -0.1276 -0.1559 -0.1082 -0.0460 -0.0948 -0.0846 -0.3647 -0.1047 -0.0342 -0.1104 -0.0934 -0.0374 -0.0974 -0.5425 -0.0340 -0.1079 -0.0728 -0.0965 -0.0943 -0.0350 -0.1007 -0.0586 -0.1120 -0.1183 -0.1008 -0.0525 -0.6159 -0.0478 -0.6670 -0.2451 -0.0626 -0.2109 -0.0671 -0.0956 -0.0913 -0.0342 -0.1176 -0.0686 -0.1239 -0.1067 -0.1054 -0.0663 -0.0922 -0.0990 -0.1974 -0.1066 -0.0328 -0.5186 -0.2460 -0.2490 -0.1024 -0.0896 -0.1226 -1.1843 -0.0862 -0.0581 -0.1125 -0.0385 -0.1170 -0.0908 -0.7402 -0.2222 -0.0640 -0.4441 -0.0644 -0.0986 -0.0569 -0.9515 -0.2033 -0.0693 -0.2549 -0.0718 -0.0819 -0.0667 -0.1097 -0.0612 -0.0647 -0.0834 -0.7361 -0.0700 -0.0768 -0.0722 -0.1037 -0.1624 -0.0916 -0.0866 -0.0607 -0.0930 -0.1324 -0.0815 -0.1050 -0.0792 -0.1066 -1.3097 -0.1157 -0.0318 -0.1489 -0.0621 -0.1063 -0.1422 -0.1108 -0.0342 -0.0977 -0.3341 -0.1015 -0.0769 -0.0958 -0.0915 -0.1079 -0.0882 -0.0749 -0.0576 -0.0593 -0.1234 -1.0149 -0.1264 -0.0434 -1.1189 -1.5904 -0.0950 -0.0900 -0.0913 -0.0761 -0.0840
S-375	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( sorted_arr.get ( i ) != arr_after_move.get ( i ) ) { return false; } } return true; }
T-375	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( sorted_arr.get ( i ) != arr_after_move.get ( i ) ) { return false; } } return true; }
H-375	-0.17718152701854706	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( sorted_arr.get ( i ) != arr_after_move.get ( i ) ) { return false ; } } return true ; }
D-375	-0.17718152701854706	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( sorted_arr.get ( i ) != arr_after_move.get ( i ) ) { return false ; } } return true ; }
P-375	-0.0883 -0.0414 -0.1034 -0.0332 -0.0818 -0.0555 -0.0885 -0.0074 -0.1110 -1.1551 -0.2302 -0.0460 -0.1574 -0.0690 -0.0835 -0.0880 -0.2003 -0.1070 -0.0801 -0.1544 -0.1489 -0.0719 -0.1433 -0.0912 -0.0828 -0.0876 -0.1111 -0.7449 -1.1560 -0.1708 -0.0448 -0.1493 -0.1801 -0.0823 -0.0334 -0.0807 -0.0539 -0.7438 -0.1948 -0.1362 -0.0962 -0.0830 -0.0920 -1.4764 -0.0896 -0.0435 -0.1078 -0.1982 -0.0791 -0.0541 -0.0886 -0.0922 -0.1447 -0.0966 -0.0887 -0.0378 -0.0968 -0.2328 -0.1033 -0.0531 -0.1353 -0.1740 -0.1168 -0.2189 -0.0989 -0.0597 -0.1037 -0.1372 -0.0633 -0.4301 -0.1186 -0.0894 -0.0925 -0.2853 -0.1046 -0.0858 -0.0413 -0.0758 -1.1595 -0.1498 -0.1026 -0.0763 -0.0844 -0.0749 -1.3341 -0.0843 -0.0768 -0.1240 -0.1002 -0.1515 -0.0675 -0.0861 -0.0928 -0.8370 -0.0730 -0.1021 -0.1204 -0.1097 -0.1186 -0.1035 -0.2115 -0.1148 -0.0794 -0.0926 -0.1989 -0.1604 -0.0792 -0.0582 -0.0885 -0.2822 -0.0849 -0.0489 -0.1037 -0.0830 -1.1319 -0.0778 -1.2565 -0.1452 -0.0401 -0.1545 -0.0460 -0.0765 -0.0757 -0.0887 -0.0398 -0.0836 -0.0445 -0.6729 -0.2352 -0.0635 -0.0878 -0.0799 -0.1094 -0.0702 -0.0883 -0.0753 -0.6813 -0.1124 -0.0540 -1.1006 -0.0755 -0.0899 -0.0883 -0.1006 -0.1342 -0.0685 -0.0871 -0.0961 -0.6221 -0.0769 -0.1040 -0.1261 -0.1011 -0.0971 -0.1016 -0.0516 -0.1186 -0.1990 -0.1073 -0.0760 -0.1059 -0.1947 -0.1138 -0.0845 -0.0956 -0.0993 -0.0926 -0.0764 -0.1083 -0.1027 -0.0773 -0.0828 -0.0829 -1.0582 -0.0968 -0.0754 -1.3658 -0.1055 -0.1146 -0.0688 -0.0925 -0.0884 -0.5826 -0.0768 -0.0907 -0.1437 -0.0909 -0.1071 -0.1044 -0.0485 -0.0998 -0.1913 -0.1026 -0.0678 -0.1065 -0.2038 -0.1129 -0.0826 -0.0932 -0.0931 -0.0946 -0.0793 -0.0922 -0.1017 -0.0748 -0.0685 -0.0806 -0.9311 -0.0920 -0.0620 -0.0868 -0.1276 -0.0999 -0.0699 -0.0916 -0.0880 -0.6182 -0.0746 -0.1005 -0.1034 -0.1080 -0.6529 -0.0893 -0.0454 -0.1035 -0.2200 -0.1175 -0.0841 -0.0926 -0.1770 -0.0886 -0.0812 -0.0899 -0.1021 -0.0434 -0.1385 -0.3026 -0.1132 -0.0789 -0.0927 -0.0910 -0.1253 -0.0901 -0.0771 -1.1973 -0.0943 -0.0747 -0.0609 -0.0717 -0.4544 -0.0878 -0.0816
S-272	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; min_index > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-272	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; min_index > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-272	-0.17375904321670532	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; min_index > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-272	-0.17375904321670532	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; min_index > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-272	-0.0875 -0.0414 -0.1032 -0.0327 -0.0818 -0.0552 -0.0885 -0.0074 -0.1110 -1.1470 -0.2287 -0.0460 -0.1553 -0.0703 -0.0836 -0.0880 -0.2030 -0.1063 -0.0802 -0.1542 -0.1500 -0.0714 -0.1371 -0.0907 -0.0829 -0.0883 -0.1156 -0.7400 -1.1603 -0.1696 -0.0452 -0.1496 -0.1712 -0.0794 -0.0328 -0.0812 -0.0544 -0.7531 -0.1930 -0.1374 -0.0961 -0.0823 -0.0920 -1.5265 -0.0895 -0.0437 -0.1086 -0.1979 -0.0790 -0.0554 -0.0878 -0.0921 -0.1445 -0.0939 -0.0880 -0.0376 -0.0965 -0.2138 -0.1038 -0.0543 -0.1389 -0.1738 -0.1167 -0.2083 -0.1004 -0.0604 -0.1037 -0.1404 -0.0636 -0.4384 -0.1213 -0.0894 -0.0930 -0.2698 -0.1002 -0.0847 -0.0396 -0.0775 -1.1770 -0.1487 -0.1033 -0.0764 -0.0845 -0.0751 -1.2815 -0.0839 -0.0728 -0.1112 -0.1005 -0.1502 -0.0673 -0.0875 -0.0928 -0.8581 -0.0732 -0.1020 -0.1217 -0.1090 -0.0841 -0.1034 -0.2070 -0.1150 -0.0789 -0.0911 -0.1950 -0.1605 -0.0780 -0.0557 -0.0875 -0.2673 -0.0844 -0.0461 -0.1035 -0.0816 -1.1722 -0.0796 -1.2912 -0.1440 -0.0403 -0.1528 -0.0450 -0.0753 -0.0739 -0.0899 -0.0382 -0.0842 -0.0445 -0.6615 -0.2251 -0.0633 -0.0879 -0.0810 -0.1094 -0.0684 -0.0877 -0.0754 -0.6745 -0.1090 -0.0483 -0.9788 -0.0767 -0.0835 -0.0820 -0.1008 -0.1362 -0.0673 -0.0889 -0.0960 -0.6336 -0.0778 -0.1046 -0.1298 -0.1019 -0.0934 -0.1023 -0.0487 -0.1210 -0.1975 -0.1069 -0.0745 -0.1059 -0.2004 -0.1141 -0.0811 -0.0944 -0.0987 -0.0923 -0.0750 -0.1077 -0.1035 -0.0742 -0.0807 -0.0845 -1.0815 -0.4464 -0.0896 -0.0348 -0.1217 -0.0846 -0.8675 -0.0815 -0.6014 -0.0759 -0.0937 -0.1085 -0.0888 -0.1028 -0.1017 -0.0433 -0.0999 -0.1854 -0.1030 -0.0756 -0.1023 -0.2116 -0.1122 -0.0808 -0.0918 -0.0926 -0.0938 -0.0815 -0.0903 -0.1020 -0.0731 -0.0689 -0.0773 -0.8178 -0.0770 -0.0581 -0.0854 -0.1119 -0.1200 -0.0709 -0.0916 -0.0842 -0.6651 -0.0750 -0.0983 -0.1045 -0.1073 -0.0997 -0.0996 -0.0877 -0.1038 -0.0416 -0.1159 -0.2140 -0.1206 -0.0868 -0.0927 -0.1378 -0.2046 -0.0956 -0.0519 -0.1398 -0.2857 -0.1136 -0.0721 -0.0918 -0.0912 -0.1274 -0.0879 -0.0783 -1.1665 -0.0945 -0.0749 -0.0597 -0.0738 -0.4701 -0.0884 -0.0816
S-248	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; arr.size () > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-248	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; arr.size () > i; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; arr.size () > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-248	-0.19581370055675507	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-248	-0.19581370055675507	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-248	-0.0892 -0.0411 -0.1052 -0.0334 -0.0824 -0.0556 -0.0884 -0.0076 -0.1109 -1.1280 -0.2311 -0.0460 -0.1541 -0.0691 -0.0836 -0.0886 -0.2005 -0.1069 -0.0815 -0.1517 -0.1472 -0.0702 -0.1360 -0.0900 -0.0823 -0.0871 -0.1147 -0.7250 -1.1513 -0.1733 -0.0451 -0.1455 -0.1802 -0.0806 -0.0335 -0.0817 -0.0543 -0.7413 -0.1899 -0.1391 -0.0959 -0.0824 -0.0927 -1.5549 -0.0901 -0.0440 -0.1086 -0.2086 -0.0791 -0.0559 -0.0878 -0.0921 -0.1483 -0.0997 -0.0888 -0.0383 -0.0970 -0.2270 -0.1047 -0.0551 -0.1389 -0.1809 -0.1175 -0.2055 -0.1012 -0.0596 -0.1029 -0.1387 -0.0645 -0.3733 -0.1213 -0.0887 -0.0929 -0.2785 -0.1080 -0.0852 -0.0417 -0.0752 -1.1917 -0.1443 -0.1040 -0.0760 -0.0839 -0.0770 -1.2659 -0.2790 -0.1036 -0.1569 -0.0671 -0.1301 -0.0921 -1.3496 -0.0841 -0.6433 -0.0741 -0.1011 -0.1216 -0.1096 -0.0818 -0.1013 -0.2083 -0.1162 -0.0804 -0.0911 -0.1918 -0.1630 -0.0791 -0.0576 -0.0879 -0.2885 -0.0866 -0.0499 -0.1029 -0.0825 -1.3961 -0.0800 -1.3224 -0.1506 -0.0400 -0.1449 -0.0450 -0.0763 -0.0780 -0.0905 -0.0400 -0.0852 -0.0446 -0.6526 -0.2213 -0.0631 -0.0867 -0.0826 -0.1094 -0.0708 -0.0892 -0.0753 -0.9404 -0.1122 -0.0542 -1.2161 -0.2212 -0.1045 -0.1245 -0.0605 -0.1021 -0.0841 -1.0029 -0.0956 -0.5817 -0.0751 -0.1067 -0.1234 -0.1044 -0.0956 -0.1019 -0.0501 -0.1135 -0.1991 -0.1084 -0.0723 -0.1039 -0.2029 -0.1154 -0.0833 -0.0942 -0.0979 -0.0921 -0.0755 -0.1065 -0.1037 -0.0750 -0.0829 -0.0829 -1.0268 -1.2202 -0.0995 -0.1442 -0.0695 -0.1146 -0.0853 -1.2995 -0.0771 -0.5796 -0.0739 -0.0913 -0.1712 -0.0927 -0.1053 -0.1028 -0.0442 -0.0976 -0.2071 -0.1046 -0.0727 -0.1045 -0.2188 -0.1149 -0.0806 -0.0918 -0.0918 -0.0939 -0.0803 -0.0990 -0.1031 -0.0723 -0.0690 -0.0830 -1.0423 -0.0858 -0.1204 -0.1134 -0.0707 -0.1098 -0.0751 -1.2137 -0.0760 -0.5764 -0.0758 -0.1012 -0.1027 -0.1081 -0.1004 -0.1003 -0.0900 -0.1051 -0.0443 -0.1123 -0.2180 -0.1210 -0.0867 -0.0919 -0.1381 -0.2026 -0.0964 -0.0545 -0.1364 -0.2908 -0.1160 -0.0711 -0.0914 -0.0906 -0.1271 -0.0905 -0.0811 -1.0981 -0.0922 -0.0733 -0.0611 -0.0792 -0.4791 -0.0867 -0.0803
S-237	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( 0 == arr.size () ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-237	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( 0 == arr.size () ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-237	-0.1736728996038437	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( 0 == arr.size () ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-237	-0.1736728996038437	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( 0 == arr.size () ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-237	-0.0883 -0.0421 -0.1040 -0.0324 -0.0813 -0.0554 -0.0885 -0.0075 -0.1120 -1.1408 -0.2285 -0.0458 -0.1559 -0.0685 -0.0836 -0.0887 -0.2180 -0.1045 -0.2154 -0.1197 -0.1341 -0.1286 -0.1603 -0.0664 -0.0827 -0.0842 -0.0921 -0.8046 -1.1300 -0.1673 -0.0446 -0.1497 -0.1726 -0.0800 -0.0329 -0.0817 -0.0540 -0.7438 -0.1968 -0.1356 -0.0938 -0.0823 -0.0921 -1.4551 -0.0895 -0.0443 -0.1077 -0.1956 -0.0789 -0.0552 -0.0879 -0.0926 -0.1446 -0.0957 -0.0886 -0.0375 -0.0966 -0.2212 -0.1047 -0.0546 -0.1401 -0.1738 -0.1167 -0.2079 -0.1004 -0.0605 -0.1034 -0.1462 -0.0626 -0.4628 -0.1224 -0.0899 -0.0928 -0.2688 -0.1038 -0.0857 -0.0409 -0.0758 -1.1574 -0.1480 -0.1025 -0.0763 -0.0843 -0.0744 -1.3050 -0.0847 -0.0740 -0.1128 -0.1009 -0.1524 -0.0680 -0.0868 -0.0919 -0.8409 -0.0729 -0.1022 -0.1204 -0.1099 -0.0839 -0.1035 -0.2074 -0.1150 -0.0788 -0.0913 -0.1918 -0.1596 -0.0791 -0.0571 -0.0879 -0.2687 -0.0855 -0.0486 -0.1029 -0.0824 -1.1438 -0.0786 -1.2585 -0.1443 -0.0404 -0.1509 -0.0460 -0.0752 -0.0731 -0.0904 -0.0376 -0.0841 -0.0443 -0.6619 -0.2368 -0.0637 -0.0883 -0.0797 -0.1087 -0.0699 -0.0890 -0.0754 -0.7064 -0.1115 -0.0544 -1.0876 -0.0770 -0.0910 -0.0847 -0.1004 -0.1371 -0.0684 -0.0877 -0.0967 -0.6320 -0.0767 -0.1041 -0.1324 -0.1017 -0.0920 -0.1021 -0.0473 -0.1197 -0.1970 -0.1076 -0.0749 -0.1066 -0.2014 -0.1148 -0.0845 -0.0950 -0.0986 -0.0920 -0.0749 -0.1061 -0.1028 -0.0768 -0.0834 -0.0827 -1.0480 -0.1002 -0.0739 -1.0105 -0.0992 -0.1213 -0.0695 -0.0924 -0.0887 -0.5990 -0.0765 -0.0901 -0.1551 -0.0904 -0.1020 -0.1029 -0.0420 -0.0986 -0.1898 -0.1038 -0.0760 -0.1076 -0.2145 -0.1141 -0.0833 -0.0925 -0.0924 -0.0940 -0.0796 -0.0965 -0.1022 -0.0741 -0.0693 -0.0802 -0.8566 -0.0948 -0.0629 -0.0862 -0.1118 -0.1047 -0.0710 -0.0912 -0.0894 -0.6468 -0.0742 -0.0998 -0.1046 -0.1074 -0.1007 -0.0984 -0.0852 -0.1047 -0.0417 -0.1135 -0.2178 -0.1196 -0.0881 -0.0929 -0.1388 -0.2034 -0.0956 -0.0527 -0.1387 -0.2843 -0.1137 -0.0751 -0.0909 -0.0904 -0.1257 -0.0874 -0.0786 -1.1725 -0.0945 -0.0738 -0.0604 -0.0732 -0.3954 -0.0881 -0.0828
S-206	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( min_value == arr.get ( i ) ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-206	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( min_value == arr.get ( i ) ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-206	-0.17473815381526947	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( min_value == arr.get ( i ) ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-206	-0.17473815381526947	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( min_value == arr.get ( i ) ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-206	-0.0861 -0.0418 -0.1031 -0.0327 -0.0818 -0.0553 -0.0885 -0.0074 -0.1110 -1.1452 -0.2304 -0.0466 -0.1573 -0.0697 -0.0842 -0.0879 -0.2014 -0.1070 -0.0803 -0.1577 -0.1503 -0.0714 -0.1382 -0.0905 -0.0827 -0.0875 -0.1155 -0.7252 -1.1588 -0.1722 -0.0452 -0.1492 -0.1753 -0.0800 -0.0325 -0.0819 -0.0544 -0.7579 -0.1967 -0.1386 -0.0952 -0.0827 -0.0927 -1.4671 -0.0902 -0.0437 -0.1086 -0.1932 -0.0790 -0.0549 -0.0887 -0.0920 -0.1492 -0.1023 -0.0884 -0.0374 -0.0907 -0.2243 -0.1046 -0.0527 -0.1387 -0.1665 -0.1172 -0.2214 -0.1002 -0.0597 -0.1037 -0.1412 -0.0625 -0.4742 -0.1220 -0.0890 -0.0933 -0.2592 -0.1078 -0.0855 -0.0414 -0.0753 -1.1733 -0.1520 -0.1024 -0.0771 -0.0841 -0.0734 -1.3387 -0.0826 -0.0769 -0.1222 -0.0998 -0.1490 -0.0672 -0.0866 -0.0907 -0.8484 -0.0734 -0.1014 -0.1225 -0.1110 -0.3123 -0.0874 -0.0446 -0.0965 -0.0844 -0.1029 -0.2239 -0.1198 -0.0786 -0.0953 -0.0862 -0.2879 -0.0850 -0.0492 -0.0984 -0.0810 -1.1275 -0.0752 -1.2628 -0.1463 -0.0404 -0.1501 -0.0454 -0.0761 -0.0744 -0.0905 -0.0379 -0.0848 -0.0442 -0.6673 -0.2325 -0.0640 -0.0885 -0.0788 -0.1085 -0.0698 -0.0890 -0.0751 -0.6665 -0.1120 -0.0597 -1.1211 -0.0759 -0.0928 -0.0854 -0.0999 -0.1324 -0.0684 -0.0878 -0.0968 -0.6317 -0.0773 -0.1044 -0.1322 -0.1025 -0.0916 -0.1030 -0.0478 -0.1211 -0.1955 -0.1076 -0.0745 -0.1049 -0.2052 -0.1160 -0.0837 -0.0953 -0.0989 -0.0922 -0.0746 -0.1059 -0.1026 -0.0768 -0.0839 -0.0822 -1.0423 -0.0987 -0.0756 -1.1569 -0.1010 -0.1173 -0.0698 -0.0919 -0.0887 -0.5951 -0.0766 -0.0909 -0.1523 -0.0905 -0.1036 -0.1029 -0.0423 -0.0985 -0.1893 -0.1029 -0.0763 -0.1064 -0.2109 -0.1152 -0.0835 -0.0927 -0.0919 -0.0941 -0.0801 -0.0953 -0.1021 -0.0746 -0.0698 -0.0805 -0.8534 -0.0949 -0.0643 -0.0869 -0.1120 -0.1014 -0.0703 -0.0914 -0.0895 -0.6441 -0.0742 -0.0998 -0.1045 -0.1073 -0.1182 -0.0929 -0.0860 -0.1039 -0.0416 -0.1165 -0.2291 -0.1199 -0.0883 -0.0924 -0.1446 -0.2537 -0.0972 -0.0540 -0.1384 -0.2782 -0.1138 -0.0740 -0.0909 -0.0904 -0.1307 -0.0883 -0.0777 -1.1543 -0.0946 -0.0753 -0.0602 -0.0707 -0.4521 -0.0878 -0.0822
S-174	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; arr.size () > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-174	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; arr.size () > i; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; arr.size () > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-174	-0.19581373035907745	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-174	-0.19581373035907745	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-174	-0.0892 -0.0411 -0.1052 -0.0334 -0.0824 -0.0556 -0.0884 -0.0076 -0.1109 -1.1280 -0.2311 -0.0460 -0.1541 -0.0691 -0.0836 -0.0886 -0.2005 -0.1069 -0.0815 -0.1517 -0.1472 -0.0702 -0.1360 -0.0900 -0.0823 -0.0871 -0.1147 -0.7250 -1.1513 -0.1733 -0.0451 -0.1455 -0.1802 -0.0806 -0.0335 -0.0817 -0.0544 -0.7413 -0.1899 -0.1391 -0.0959 -0.0824 -0.0927 -1.5549 -0.0901 -0.0440 -0.1086 -0.2086 -0.0791 -0.0559 -0.0878 -0.0921 -0.1483 -0.0997 -0.0888 -0.0383 -0.0970 -0.2270 -0.1047 -0.0551 -0.1389 -0.1809 -0.1175 -0.2055 -0.1012 -0.0596 -0.1029 -0.1387 -0.0645 -0.3733 -0.1213 -0.0887 -0.0929 -0.2785 -0.1080 -0.0852 -0.0417 -0.0752 -1.1917 -0.1443 -0.1040 -0.0760 -0.0839 -0.0770 -1.2659 -0.2790 -0.1036 -0.1569 -0.0671 -0.1301 -0.0921 -1.3496 -0.0841 -0.6433 -0.0741 -0.1011 -0.1216 -0.1096 -0.0818 -0.1013 -0.2083 -0.1162 -0.0804 -0.0911 -0.1918 -0.1630 -0.0791 -0.0576 -0.0879 -0.2885 -0.0866 -0.0499 -0.1029 -0.0825 -1.3961 -0.0800 -1.3224 -0.1506 -0.0400 -0.1449 -0.0450 -0.0763 -0.0780 -0.0905 -0.0400 -0.0852 -0.0446 -0.6526 -0.2213 -0.0631 -0.0867 -0.0826 -0.1094 -0.0708 -0.0892 -0.0753 -0.9404 -0.1122 -0.0542 -1.2161 -0.2212 -0.1045 -0.1245 -0.0605 -0.1021 -0.0841 -1.0029 -0.0956 -0.5817 -0.0751 -0.1067 -0.1234 -0.1044 -0.0956 -0.1019 -0.0501 -0.1135 -0.1991 -0.1084 -0.0723 -0.1039 -0.2029 -0.1154 -0.0833 -0.0942 -0.0979 -0.0921 -0.0755 -0.1065 -0.1037 -0.0750 -0.0829 -0.0829 -1.0268 -1.2202 -0.0995 -0.1442 -0.0695 -0.1146 -0.0853 -1.2995 -0.0771 -0.5796 -0.0739 -0.0913 -0.1712 -0.0927 -0.1053 -0.1028 -0.0442 -0.0976 -0.2071 -0.1046 -0.0727 -0.1045 -0.2188 -0.1149 -0.0806 -0.0918 -0.0918 -0.0939 -0.0803 -0.0990 -0.1031 -0.0723 -0.0690 -0.0830 -1.0423 -0.0858 -0.1204 -0.1134 -0.0707 -0.1098 -0.0751 -1.2137 -0.0760 -0.5764 -0.0758 -0.1012 -0.1027 -0.1081 -0.1004 -0.1003 -0.0900 -0.1051 -0.0443 -0.1123 -0.2180 -0.1210 -0.0867 -0.0919 -0.1381 -0.2026 -0.0964 -0.0545 -0.1364 -0.2908 -0.1160 -0.0711 -0.0914 -0.0906 -0.1271 -0.0905 -0.0811 -1.0981 -0.0922 -0.0733 -0.0611 -0.0792 -0.4791 -0.0867 -0.0803
S-157	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; arr.size () > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-157	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; arr.size () > i; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; arr.size () > i; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-157	-0.1958136111497879	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-157	-0.1958136111497879	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; arr.size () > i ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; arr.size () > i ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-157	-0.0892 -0.0411 -0.1052 -0.0334 -0.0824 -0.0556 -0.0884 -0.0076 -0.1109 -1.1280 -0.2311 -0.0460 -0.1541 -0.0691 -0.0836 -0.0886 -0.2005 -0.1069 -0.0815 -0.1517 -0.1472 -0.0702 -0.1360 -0.0900 -0.0823 -0.0871 -0.1147 -0.7250 -1.1513 -0.1733 -0.0451 -0.1455 -0.1802 -0.0806 -0.0335 -0.0817 -0.0544 -0.7413 -0.1899 -0.1391 -0.0959 -0.0824 -0.0927 -1.5549 -0.0901 -0.0440 -0.1086 -0.2086 -0.0791 -0.0559 -0.0878 -0.0921 -0.1483 -0.0997 -0.0888 -0.0383 -0.0970 -0.2270 -0.1047 -0.0551 -0.1389 -0.1809 -0.1175 -0.2055 -0.1012 -0.0596 -0.1029 -0.1387 -0.0645 -0.3733 -0.1213 -0.0887 -0.0929 -0.2785 -0.1080 -0.0852 -0.0417 -0.0752 -1.1917 -0.1443 -0.1040 -0.0760 -0.0839 -0.0770 -1.2659 -0.2790 -0.1036 -0.1569 -0.0671 -0.1301 -0.0921 -1.3496 -0.0841 -0.6433 -0.0741 -0.1011 -0.1216 -0.1096 -0.0818 -0.1013 -0.2083 -0.1162 -0.0804 -0.0911 -0.1918 -0.1630 -0.0791 -0.0576 -0.0879 -0.2885 -0.0866 -0.0499 -0.1029 -0.0825 -1.3961 -0.0800 -1.3224 -0.1506 -0.0400 -0.1449 -0.0450 -0.0763 -0.0780 -0.0905 -0.0400 -0.0852 -0.0446 -0.6526 -0.2213 -0.0631 -0.0867 -0.0826 -0.1094 -0.0708 -0.0892 -0.0753 -0.9404 -0.1122 -0.0542 -1.2161 -0.2212 -0.1045 -0.1245 -0.0605 -0.1021 -0.0841 -1.0029 -0.0956 -0.5817 -0.0751 -0.1067 -0.1234 -0.1044 -0.0956 -0.1019 -0.0501 -0.1135 -0.1991 -0.1084 -0.0723 -0.1039 -0.2029 -0.1154 -0.0833 -0.0942 -0.0979 -0.0921 -0.0755 -0.1065 -0.1037 -0.0750 -0.0829 -0.0829 -1.0268 -1.2202 -0.0995 -0.1442 -0.0695 -0.1146 -0.0853 -1.2995 -0.0771 -0.5796 -0.0739 -0.0913 -0.1712 -0.0927 -0.1053 -0.1028 -0.0442 -0.0976 -0.2071 -0.1046 -0.0727 -0.1045 -0.2188 -0.1149 -0.0806 -0.0918 -0.0918 -0.0939 -0.0803 -0.0990 -0.1031 -0.0723 -0.0690 -0.0830 -1.0423 -0.0858 -0.1204 -0.1134 -0.0707 -0.1098 -0.0751 -1.2137 -0.0760 -0.5764 -0.0758 -0.1012 -0.1027 -0.1081 -0.1004 -0.1003 -0.0900 -0.1051 -0.0443 -0.1123 -0.2180 -0.1210 -0.0867 -0.0919 -0.1381 -0.2026 -0.0964 -0.0545 -0.1364 -0.2908 -0.1160 -0.0711 -0.0914 -0.0906 -0.1271 -0.0905 -0.0811 -1.0981 -0.0922 -0.0733 -0.0611 -0.0792 -0.4791 -0.0867 -0.0803
S-403	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || 30 < day ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-403	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || 30 < day ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-403	-0.20337894558906555	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || 30 < day ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-403	-0.20337894558906555	public static boolean valid_date ( String date ) { try { date = date.trim () ; java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || 30 < day ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-403	-0.0873 -0.0524 -0.0787 -0.0393 -0.0979 -0.0436 -0.1202 -1.4231 -0.0458 -0.0814 -0.0913 -0.5444 -0.0939 -1.8000 -0.0803 -0.0561 -0.1115 -0.6878 -0.0684 -0.0905 -3.6151 -0.0563 -0.2464 -0.0873 -0.4127 -0.7355 -0.0374 -0.0897 -0.1053 -0.0813 -0.0639 -0.1089 -0.4521 -0.1391 -0.0234 -0.0835 -0.0966 -0.3120 -0.1095 -0.0524 -0.1019 -0.1274 -0.1168 -0.0800 -0.1045 -0.0599 -0.0791 -0.0856 -0.0585 -1.4599 -0.1003 -0.0528 -0.0938 -0.8755 -0.0938 -1.3890 -0.1052 -0.0335 -0.0936 -0.0925 -0.8886 -0.0909 -0.0915 -0.0778 -0.0373 -0.0947 -0.7584 -0.0946 -1.2967 -0.1062 -0.0358 -0.0929 -0.0803 -0.4111 -0.0861 -0.0972 -0.0948 -0.0704 -0.0861 -0.5860 -0.0925 -1.1977 -0.1054 -0.0341 -0.0926 -0.0684 -0.0962 -0.0776 -0.0896 -0.2666 -0.1052 -0.1423 -0.0744 -0.1519 -0.1090 -0.0906 -0.0810 -0.0217 -0.0798 -0.0600 -0.0776 -0.7864 -0.0990 -1.8791 -0.0661 -0.0813 -0.0632 -0.0491 -0.0846 -0.0730 -0.1563 -0.0435 -0.0373 -0.0341 -0.0578 -0.1022 -0.0445 -0.1211 -0.1409 -0.1027 -0.0614 -0.0775 -0.0687 -0.4822 -0.0785 -0.0766 -0.1579 -0.1042 -0.0746 -0.0343 -0.0622 -0.9073 -0.0705 -0.2361 -0.0736 -0.0914 -0.1177 -0.1091 -0.1123 -0.1437 -0.0628 -0.1004 -0.0542 -0.2291 -0.1770 -0.1284 -1.0051 -0.2054 -0.1093 -0.0523 -0.0647 -0.0963 -0.1085 -0.0509 -0.1052 -0.0107 -0.0777 -0.0888 -0.0656 -0.0647 -0.5783 -0.1005 -0.1117 -1.4541 -0.0969 -0.0881 -0.0586 -0.0537 -0.0851 -0.0638 -0.0872 -0.0378 -0.1355 -0.0508 -0.1318 -0.0890 -0.0999 -0.0591 -0.0708 -0.0765 -0.4647 -0.0833 -0.0614 -0.1278 -0.1026 -0.0746 -0.0211 -0.0867 -0.8058 -0.0667 -0.2355 -0.0775 -0.0887 -0.1009 -0.1147 -0.1569 -0.1378 -0.0857 -0.1030 -0.0557 -0.3055 -0.1369 -0.1056 -0.4068 -0.1704 -0.0629 -0.0797 -0.1142 -0.0744 -0.0156 -0.1286 -0.0738 -0.0947 -0.0858 -0.0578 -0.0744 -0.4346 -0.0852 -0.1585 -0.1069 -0.0988 -0.0762 -0.1054 -0.1604 -0.1238 -0.0567 -0.0678 -0.0842 -0.0740 -0.1114 -0.1127 -0.0417 -0.0760 -0.0882 -0.0582 -0.0554 -0.6597 -0.0922 -1.0311 -0.0413 -0.1184 -0.1502 -0.0616 -0.0757 -0.1052 -0.0799 -0.0648 -0.6081 -0.0755 -0.0807 -0.0600 -1.3257 -0.0846 -0.0835
S-222	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( 1.0 < gpa ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-222	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( 1.3 < gpa ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-222	-0.1740725040435791	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( 1.0 < gpa ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-222	-0.1740725040435791	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( 1.0 < gpa ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-222	-0.1053 -0.0514 -5.3989 -0.1062 -0.1076 -0.0984 -0.0544 -0.4784 -0.0202 -0.0927 -0.1990 -0.0965 -0.0321 -0.1243 -0.2171 -2.2270 -0.0313 -0.0824 -0.0803 -0.7123 -0.0661 -0.0358 -0.0875 -0.0674 -0.2966 -0.1240 -0.1221 -0.0499 -0.0972 -0.0598 -0.1956 -0.0790 -0.0513 -0.0998 -0.0278 -0.7556 -0.9161 -0.0692 -0.0440 -1.9791 -0.2156 -0.1041 -0.1064 -0.1077 -0.0701 -0.0821 -0.9894 -0.0925 -0.0805 -0.0632 -0.1019 -0.0603 -1.6628 -0.0797 -0.0441 -0.1834 -0.0743 -0.0826 -0.1534 -0.0583 -0.0372 -0.0906 -0.0360 -0.4228 -0.3575 -1.7723 -0.1437 -0.1166 -0.0793 -0.0386 -0.2665 -0.0185 -0.0806 -0.0913 -0.0985 -0.0583 -0.7492 -0.1341 -0.1289 -0.0936 -0.0932 -0.0455 -0.1288 -0.7745 -0.0837 -0.0930 -0.1159 -0.0743 -0.0475 -0.1915 -0.0288 -0.0878 -0.0492 -0.0966 -0.0522 -0.4187 -0.1118 -0.1153 -0.0956 -0.1029 -0.0468 -0.4129 -0.0703 -0.0857 -0.1155 -0.0770 -0.0485 -0.1204 -0.0222 -0.0786 -0.0427 -0.0951 -0.0518 -0.3769 -0.1043 -0.1071 -0.0974 -0.0923 -0.0612 -0.0421 -0.5639 -0.0692 -0.0866 -0.1163 -0.0705 -0.0427 -0.1225 -0.0107 -0.0902 -0.0450 -0.0954 -0.0530 -0.3783 -0.0928 -0.0881 -0.0998 -0.1021 -0.0577 -0.0852 -0.5595 -0.0827 -0.1003 -0.1096 -0.0668 -0.0434 -0.1036 -0.0429 -0.0861 -0.0405 -0.0916 -0.0553 -0.3582 -0.0960 -0.0978 -0.1009 -0.1002 -0.0525 -0.4924 -0.0559 -0.0847 -0.1135 -0.0692 -0.0435 -0.1093 -0.0476 -0.0810 -0.0470 -0.0948 -0.0561 -0.3383 -0.0940 -0.1068 -0.0961 -0.1038 -0.0904 -0.0374 -0.6218 -0.0654 -0.0923 -0.1167 -0.0630 -0.0414 -0.1173 -0.0226 -0.0913 -0.0490 -0.1005 -0.0552 -0.4025 -0.0978 -0.1110 -0.1041 -0.1127 -0.0551 -0.0921 -0.5891 -0.0797 -0.0940 -0.1153 -0.0660 -0.0476 -0.1187 -0.0068 -0.0926 -0.0501 -0.0965 -0.0568 -0.3636 -0.1002 -0.1221 -0.1053 -0.1084 -0.0490 -0.0316 -0.6259 -0.0769 -0.0855 -0.1228 -0.1094 -0.0925 -0.0528 -0.0369 -0.0947 -0.0453 -0.1051 -0.0547 -0.3707 -0.0974 -0.1183 -0.1067 -0.1153 -0.0696 -0.0850 -0.5221 -0.0896 -0.0943 -0.1149 -0.0709 -0.0461 -0.1181 -0.0169 -0.0858 -0.0460 -0.0963 -0.0569 -0.3612 -0.0962 -0.1270 -0.1006 -0.1074 -0.0432 -0.3689 -0.0671 -0.0776 -0.1156 -0.0733 -0.0452 -0.1011 -0.0116 -0.0824 -0.0415 -0.0929 -0.0588 -0.3626 -0.0899 -0.1175 -0.1097 -0.0976 -0.0497 -0.4039 -0.0567 -0.1111 -0.1130 -0.0695 -0.0418 -0.1072 -0.0238 -0.0927 -0.0405 -0.0958 -0.0642 -0.4344 -0.0844 -0.1186 -0.1057 -0.1004 -0.0649 -0.0396 -0.5506 -0.0721 -0.0530 -0.0965 -0.0559 -0.3525 -0.0859 -0.1369 -0.1302 -0.0973 -0.0449 -0.5508 -0.0677 -0.0824 -0.0368 -0.0974 -0.0430 -1.0625 -0.0783 -0.0823
S-231	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( 0.7 < gpa ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-231	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( 0.7 < gpa ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-231	-0.17344269156455994	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( 0.7 < gpa ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-231	-0.17344269156455994	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( 0.7 < gpa ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-231	-0.1055 -0.0514 -5.3995 -0.1054 -0.1074 -0.0976 -0.0546 -0.4753 -0.0202 -0.0927 -0.1987 -0.0964 -0.0321 -0.1243 -0.2157 -2.2197 -0.0313 -0.0824 -0.0804 -0.7042 -0.0662 -0.0359 -0.0876 -0.0679 -0.3005 -0.1241 -0.1229 -0.0500 -0.0972 -0.0600 -0.1943 -0.0790 -0.0515 -0.0998 -0.0279 -0.7504 -0.9024 -0.0696 -0.0440 -1.9668 -0.2143 -0.1038 -0.1064 -0.1077 -0.0701 -0.0816 -0.9700 -0.0926 -0.0799 -0.0618 -0.1020 -0.0600 -1.6712 -0.0803 -0.0441 -0.1837 -0.0743 -0.0827 -0.1528 -0.0580 -0.0367 -0.0900 -0.0358 -0.4206 -0.3589 -1.7797 -0.1417 -0.1158 -0.0776 -0.0385 -0.2877 -0.0184 -0.0806 -0.0902 -0.0984 -0.0585 -0.7546 -0.1337 -0.1280 -0.0935 -0.0925 -0.0454 -0.1297 -0.7649 -0.0825 -0.0936 -0.1157 -0.0719 -0.0470 -0.1936 -0.0291 -0.0876 -0.0486 -0.0959 -0.0519 -0.4167 -0.1109 -0.1154 -0.0954 -0.1029 -0.0465 -0.4077 -0.0704 -0.0856 -0.1156 -0.0730 -0.0471 -0.1227 -0.0234 -0.0779 -0.0423 -0.0951 -0.0520 -0.3779 -0.1042 -0.1078 -0.0973 -0.0924 -0.0606 -0.0427 -0.5657 -0.0683 -0.0866 -0.1166 -0.0664 -0.0421 -0.1243 -0.0099 -0.0895 -0.0442 -0.0961 -0.0529 -0.3814 -0.0929 -0.0881 -0.0998 -0.1022 -0.0577 -0.0852 -0.5587 -0.0835 -0.1005 -0.1095 -0.0643 -0.0428 -0.1047 -0.0418 -0.0865 -0.0404 -0.0916 -0.0550 -0.3610 -0.0960 -0.0984 -0.1007 -0.1002 -0.0524 -0.4983 -0.0559 -0.0848 -0.1126 -0.0665 -0.0434 -0.1110 -0.0512 -0.0815 -0.0476 -0.0948 -0.0560 -0.3409 -0.0939 -0.1073 -0.0958 -0.1045 -0.0902 -0.0377 -0.6231 -0.0667 -0.0930 -0.1165 -0.0624 -0.0414 -0.1206 -0.0232 -0.0929 -0.0489 -0.0997 -0.0550 -0.4032 -0.0963 -0.1117 -0.1040 -0.1120 -0.0546 -0.0947 -0.5854 -0.0817 -0.0950 -0.1143 -0.0639 -0.0474 -0.1238 -0.0115 -0.0959 -0.0495 -0.0955 -0.0557 -0.3585 -0.0981 -0.1239 -0.1039 -0.1085 -0.0472 -0.0333 -0.6053 -0.0753 -0.0824 -0.1178 -0.0598 -0.0428 -0.1121 -0.0108 -0.0894 -0.0469 -0.1005 -0.0530 -0.3694 -0.0941 -0.1194 -0.1082 -0.1113 -0.0726 -0.0951 -0.5345 -0.0863 -0.0945 -0.1120 -0.0585 -0.0451 -0.1049 -0.0213 -0.0859 -0.0454 -0.0990 -0.0569 -0.3705 -0.1000 -0.1302 -0.1002 -0.1048 -0.0431 -0.3572 -0.0646 -0.0781 -0.1172 -0.0518 -0.0784 -0.0565 -0.0341 -0.0918 -0.0411 -0.1002 -0.0568 -0.3700 -0.0947 -0.1196 -0.1040 -0.0976 -0.0525 -0.4052 -0.0601 -0.1096 -0.1138 -0.0600 -0.0402 -0.1134 -0.0228 -0.0910 -0.0395 -0.0972 -0.0636 -0.4282 -0.0840 -0.1225 -0.1051 -0.0985 -0.0635 -0.0388 -0.5437 -0.0702 -0.0537 -0.0961 -0.0559 -0.3428 -0.0855 -0.1363 -0.1301 -0.0960 -0.0455 -0.5455 -0.0680 -0.0825 -0.0363 -0.0965 -0.0433 -1.0423 -0.0783 -0.0824
S-239	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( 2.7 < gpa ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-239	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( 2.7 < gpa ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-239	-0.1735166758298874	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( 2.7 < gpa ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-239	-0.1735166758298874	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( 2.7 < gpa ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-239	-0.1060 -0.0510 -5.3974 -0.1061 -0.1070 -0.0976 -0.0551 -0.4786 -0.0203 -0.0926 -0.1983 -0.0957 -0.0321 -0.1243 -0.2170 -2.2283 -0.0310 -0.0824 -0.0803 -0.7121 -0.0662 -0.0358 -0.0876 -0.0685 -0.2970 -0.1234 -0.1230 -0.0496 -0.0972 -0.0600 -0.1969 -0.0790 -0.0516 -0.0991 -0.0280 -0.7409 -0.9012 -0.0691 -0.0438 -1.9087 -0.2155 -0.1046 -0.1065 -0.1065 -0.0696 -0.0817 -0.9642 -0.0919 -0.0799 -0.0612 -0.1020 -0.0595 -1.7178 -0.0798 -0.0430 -0.1842 -0.0744 -0.0833 -0.1541 -0.0571 -0.0370 -0.0900 -0.0354 -0.4208 -0.3541 -1.7847 -0.1413 -0.1167 -0.0752 -0.0387 -0.2880 -0.0184 -0.0807 -0.0901 -0.0985 -0.0586 -0.7551 -0.1328 -0.1272 -0.0935 -0.0926 -0.0462 -0.1306 -0.7740 -0.0818 -0.0943 -0.1167 -0.0681 -0.0470 -0.1963 -0.0312 -0.0873 -0.0488 -0.0966 -0.0518 -0.4141 -0.1101 -0.1147 -0.0953 -0.1029 -0.0462 -0.4095 -0.0698 -0.0856 -0.1159 -0.0686 -0.0475 -0.1193 -0.0222 -0.0781 -0.0415 -0.0951 -0.0518 -0.3752 -0.1036 -0.1081 -0.0972 -0.0918 -0.0618 -0.0427 -0.5765 -0.0671 -0.0845 -0.1194 -0.0668 -0.0425 -0.1242 -0.0073 -0.0886 -0.0429 -0.0954 -0.0528 -0.3811 -0.0909 -0.0899 -0.1004 -0.1018 -0.0594 -0.0869 -0.5612 -0.0759 -0.0953 -0.1148 -0.0719 -0.0886 -0.0549 -0.0315 -0.0935 -0.0361 -0.0938 -0.0557 -0.3565 -0.0995 -0.0994 -0.0972 -0.1015 -0.0524 -0.5005 -0.0565 -0.0794 -0.1149 -0.0595 -0.0418 -0.1106 -0.0499 -0.0794 -0.0463 -0.0960 -0.0563 -0.3403 -0.0927 -0.1088 -0.0978 -0.1045 -0.0934 -0.0372 -0.6297 -0.0646 -0.0909 -0.1179 -0.0536 -0.0412 -0.1223 -0.0231 -0.0919 -0.0483 -0.1003 -0.0553 -0.4031 -0.0958 -0.1127 -0.1048 -0.1119 -0.0554 -0.0955 -0.5986 -0.0800 -0.0941 -0.1149 -0.0615 -0.0478 -0.1248 -0.0119 -0.0951 -0.0495 -0.0954 -0.0564 -0.3585 -0.0975 -0.1231 -0.1046 -0.1084 -0.0469 -0.0330 -0.6021 -0.0749 -0.0821 -0.1182 -0.0615 -0.0433 -0.1134 -0.0113 -0.0895 -0.0469 -0.0997 -0.0539 -0.3715 -0.0941 -0.1186 -0.1095 -0.1117 -0.0706 -0.0949 -0.5335 -0.0849 -0.0947 -0.1126 -0.0575 -0.0459 -0.1121 -0.0269 -0.0848 -0.0454 -0.0985 -0.0567 -0.3727 -0.0977 -0.1266 -0.1002 -0.1064 -0.0427 -0.3660 -0.0671 -0.0770 -0.1154 -0.0660 -0.0455 -0.0981 -0.0145 -0.0814 -0.0408 -0.0942 -0.0588 -0.3670 -0.0910 -0.1168 -0.1110 -0.0975 -0.0494 -0.4007 -0.0568 -0.1141 -0.1128 -0.0599 -0.0417 -0.1057 -0.0241 -0.0914 -0.0389 -0.0971 -0.0646 -0.4337 -0.0838 -0.1178 -0.1061 -0.1003 -0.0621 -0.0386 -0.5526 -0.0729 -0.0526 -0.0976 -0.0565 -0.3572 -0.0853 -0.1349 -0.1305 -0.0971 -0.0447 -0.5500 -0.0677 -0.0832 -0.0356 -0.0980 -0.0432 -1.0593 -0.0782 -0.0818
S-257	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( 0.0 < gpa ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-257	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( 0.0 < gpa ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-257	-0.17357785999774933	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( 0.0 < gpa ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-257	-0.17357785999774933	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( 0.0 < gpa ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-257	-0.1052 -0.0510 -5.4108 -0.1054 -0.1105 -0.0982 -0.0548 -0.4717 -0.0203 -0.0927 -0.1983 -0.0964 -0.0321 -0.1240 -0.2182 -2.2285 -0.0316 -0.0824 -0.0810 -0.7125 -0.0661 -0.0359 -0.0874 -0.0672 -0.2967 -0.1252 -0.1239 -0.0493 -0.0972 -0.0601 -0.1943 -0.0784 -0.0516 -0.0990 -0.0278 -0.7428 -0.9135 -0.0696 -0.0440 -1.9648 -0.2140 -0.1038 -0.1064 -0.1085 -0.0702 -0.0817 -0.9755 -0.0920 -0.0794 -0.0623 -0.1019 -0.0604 -1.6492 -0.0803 -0.0438 -0.1824 -0.0742 -0.0828 -0.1515 -0.0584 -0.0369 -0.0906 -0.0361 -0.4234 -0.3536 -1.7855 -0.1418 -0.1158 -0.0793 -0.0383 -0.2808 -0.0184 -0.0806 -0.0909 -0.0984 -0.0583 -0.7541 -0.1337 -0.1280 -0.0934 -0.0932 -0.0455 -0.1288 -0.7693 -0.0825 -0.0936 -0.1148 -0.0744 -0.0468 -0.1953 -0.0295 -0.0881 -0.0489 -0.0966 -0.0519 -0.4136 -0.1108 -0.1154 -0.0953 -0.1036 -0.0462 -0.4110 -0.0704 -0.0856 -0.1153 -0.0800 -0.0477 -0.1219 -0.0223 -0.0783 -0.0422 -0.0952 -0.0512 -0.3772 -0.1034 -0.1087 -0.0973 -0.0924 -0.0602 -0.0418 -0.5604 -0.0698 -0.0860 -0.1162 -0.0754 -0.0423 -0.1236 -0.0098 -0.0897 -0.0440 -0.0962 -0.0517 -0.3784 -0.0921 -0.0893 -0.1005 -0.1029 -0.0577 -0.0845 -0.5581 -0.0840 -0.1005 -0.1097 -0.0692 -0.0430 -0.1036 -0.0411 -0.0864 -0.0401 -0.0918 -0.0544 -0.3562 -0.0960 -0.0985 -0.1007 -0.1010 -0.0529 -0.4960 -0.0563 -0.0849 -0.1127 -0.0723 -0.0432 -0.1115 -0.0481 -0.0811 -0.0472 -0.0949 -0.0553 -0.3363 -0.0932 -0.1075 -0.0966 -0.1053 -0.0911 -0.0377 -0.6232 -0.0671 -0.0930 -0.1166 -0.0674 -0.0415 -0.1211 -0.0218 -0.0927 -0.0489 -0.0998 -0.0544 -0.4007 -0.0963 -0.1118 -0.1040 -0.1126 -0.0547 -0.0940 -0.5851 -0.0823 -0.0950 -0.1136 -0.0682 -0.0475 -0.1233 -0.0113 -0.0957 -0.0501 -0.0955 -0.0558 -0.3588 -0.0981 -0.1231 -0.1046 -0.1093 -0.0469 -0.0332 -0.6020 -0.0764 -0.0823 -0.1176 -0.0698 -0.0426 -0.1114 -0.0117 -0.0883 -0.0471 -0.0997 -0.0526 -0.3692 -0.0947 -0.1195 -0.1095 -0.1126 -0.0690 -0.0933 -0.5332 -0.0866 -0.0946 -0.1125 -0.0695 -0.0458 -0.1061 -0.0256 -0.0860 -0.0455 -0.0985 -0.0565 -0.3704 -0.0977 -0.1289 -0.1005 -0.1067 -0.0427 -0.3685 -0.0676 -0.0751 -0.1143 -0.1200 -0.0449 -0.0905 -0.0096 -0.0823 -0.0403 -0.0940 -0.0577 -0.3724 -0.0910 -0.1193 -0.1113 -0.0970 -0.0488 -0.3709 -0.0590 -0.1141 -0.1174 -0.0551 -0.1058 -0.0617 -0.0326 -0.0899 -0.0363 -0.1018 -0.0582 -0.4118 -0.0859 -0.1104 -0.1023 -0.1026 -0.0650 -0.0331 -0.5436 -0.0751 -0.0502 -0.0988 -0.0532 -0.3403 -0.0839 -0.1366 -0.1345 -0.0970 -0.0445 -0.5666 -0.0655 -0.0817 -0.0364 -0.0972 -0.0431 -1.0272 -0.0782 -0.0829
S-266	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( 3.0 < gpa ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-266	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( 3.0 < gpa ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-266	-0.17360548675060272	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( 3.0 < gpa ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-266	-0.17360548675060272	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( 3.0 < gpa ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-266	-0.1053 -0.0514 -5.4014 -0.1062 -0.1083 -0.0977 -0.0550 -0.4773 -0.0203 -0.0927 -0.1997 -0.0957 -0.0321 -0.1242 -0.2182 -2.2313 -0.0315 -0.0824 -0.0810 -0.7161 -0.0662 -0.0357 -0.0876 -0.0684 -0.2955 -0.1242 -0.1240 -0.0491 -0.0966 -0.0599 -0.1974 -0.0783 -0.0515 -0.0991 -0.0280 -0.7400 -0.9077 -0.0691 -0.0440 -1.9149 -0.2141 -0.1029 -0.1064 -0.1078 -0.0696 -0.0816 -0.9741 -0.0919 -0.0797 -0.0628 -0.1013 -0.0590 -1.6581 -0.0803 -0.0431 -0.1836 -0.0748 -0.0833 -0.1551 -0.0584 -0.0366 -0.0906 -0.0358 -0.4212 -0.3574 -1.7826 -0.1416 -0.1166 -0.0788 -0.0385 -0.2717 -0.0185 -0.0805 -0.0920 -0.0991 -0.0577 -0.7595 -0.1339 -0.1273 -0.0936 -0.0933 -0.0462 -0.1298 -0.7737 -0.0818 -0.0937 -0.1169 -0.0721 -0.0474 -0.1925 -0.0304 -0.0874 -0.0497 -0.0972 -0.0514 -0.4133 -0.1110 -0.1164 -0.0954 -0.1032 -0.0466 -0.4124 -0.0695 -0.0853 -0.1178 -0.0836 -0.0483 -0.1129 -0.0113 -0.0769 -0.0426 -0.0957 -0.0516 -0.3799 -0.1043 -0.1101 -0.0964 -0.0919 -0.0569 -0.0418 -0.5840 -0.0685 -0.0816 -0.1296 -0.0322 -0.0888 -0.0583 -0.0369 -0.0929 -0.0407 -0.0982 -0.0528 -0.3854 -0.0973 -0.0986 -0.0956 -0.1040 -0.0576 -0.0845 -0.5731 -0.0813 -0.0971 -0.1119 -0.0681 -0.0418 -0.1086 -0.0390 -0.0866 -0.0420 -0.0934 -0.0545 -0.3553 -0.0956 -0.0999 -0.1004 -0.1017 -0.0539 -0.5107 -0.0553 -0.0845 -0.1130 -0.0685 -0.0435 -0.1168 -0.0500 -0.0800 -0.0480 -0.0962 -0.0560 -0.3358 -0.0934 -0.1075 -0.0961 -0.1051 -0.0907 -0.0376 -0.6281 -0.0659 -0.0926 -0.1165 -0.0648 -0.0416 -0.1217 -0.0220 -0.0918 -0.0494 -0.1004 -0.0545 -0.4029 -0.0964 -0.1110 -0.1040 -0.1124 -0.0548 -0.0948 -0.5865 -0.0813 -0.0951 -0.1143 -0.0666 -0.0483 -0.1245 -0.0111 -0.0951 -0.0501 -0.0953 -0.0559 -0.3585 -0.0982 -0.1229 -0.1045 -0.1083 -0.0466 -0.0332 -0.6017 -0.0749 -0.0818 -0.1174 -0.0656 -0.0433 -0.1127 -0.0118 -0.0885 -0.0474 -0.1004 -0.0531 -0.3713 -0.0947 -0.1176 -0.1094 -0.1125 -0.0704 -0.0948 -0.5279 -0.0861 -0.0947 -0.1129 -0.0638 -0.0460 -0.1097 -0.0272 -0.0862 -0.0462 -0.0984 -0.0567 -0.3722 -0.0984 -0.1266 -0.1003 -0.1063 -0.0431 -0.3662 -0.0671 -0.0767 -0.1147 -0.0723 -0.0456 -0.0975 -0.0139 -0.0818 -0.0415 -0.0934 -0.0587 -0.3647 -0.0911 -0.1159 -0.1110 -0.0982 -0.0492 -0.3934 -0.0569 -0.1146 -0.1130 -0.0711 -0.0418 -0.1049 -0.0232 -0.0911 -0.0393 -0.0978 -0.0640 -0.4338 -0.0843 -0.1178 -0.1052 -0.1017 -0.0625 -0.0395 -0.5468 -0.0729 -0.0510 -0.0976 -0.0556 -0.3572 -0.0859 -0.1349 -0.1314 -0.0970 -0.0450 -0.5436 -0.0675 -0.0823 -0.0365 -0.0980 -0.0426 -1.0508 -0.0776 -0.0818
Generate test with beam=5: BLEU = 90.35 98.2/96.0/93.8/91.8 (BP = 0.952 ratio = 0.953 hyp_len = 56670 ref_len = 59469)

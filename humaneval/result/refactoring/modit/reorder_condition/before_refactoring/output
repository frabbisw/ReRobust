S-38	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-38	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-38	-0.23770321905612946	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-38	-0.23770321905612946	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-38	-0.0956 -0.0454 -0.1168 -0.0469 -0.0934 -0.0237 -0.1150 -1.4476 -0.0881 -0.0914 -0.0897 -0.0884 -0.0841 -0.0774 -1.9152 -0.1454 -0.2413 -0.1099 -0.1285 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2368 -0.1846 -0.1499 -0.4594 -0.4707 -0.1589 -0.1387 -0.2669 -0.5160 -0.1415 -0.1381 -0.1700 -0.0776 -0.2374 -0.1569 -1.6032 -0.2333 -0.1613 -0.1350 -0.1091 -0.2530 -0.0890 -0.0752
S-253	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-253	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-253	-0.23039111495018005	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-253	-0.23039111495018005	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-253	-0.0994 -0.0598 -0.0911 -0.0654 -0.0936 -0.0247 -0.1206 -0.0963 -0.0746 -0.0871 -0.0888 -0.2618 -0.1126 -0.0929 -0.1668 -0.1251 -0.0913 -0.0891 -0.0824 -1.4958 -0.3394 -0.1120 -0.0846 -0.1563 -0.0934 -1.7872 -0.1357 -0.1877 -0.1618 -0.8777 -0.1191 -0.1202 -0.2112 -0.0857 -0.1043 -0.1208 -0.1132 -0.2396 -0.2480 -0.1376 -0.3636 -0.1447 -0.0873 -0.1048 -0.1009 -1.0274 -0.1418 -0.1427 -0.0991 -0.7325 -0.0881 -0.0929
S-110	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-110	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-110	-0.23039110004901886	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-110	-0.23039110004901886	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-110	-0.0994 -0.0598 -0.0911 -0.0654 -0.0936 -0.0246 -0.1206 -0.0963 -0.0746 -0.0871 -0.0888 -0.2618 -0.1126 -0.0929 -0.1668 -0.1251 -0.0913 -0.0891 -0.0824 -1.4958 -0.3394 -0.1120 -0.0846 -0.1563 -0.0934 -1.7872 -0.1357 -0.1877 -0.1618 -0.8777 -0.1191 -0.1202 -0.2112 -0.0857 -0.1043 -0.1208 -0.1132 -0.2396 -0.2480 -0.1376 -0.3636 -0.1447 -0.0873 -0.1048 -0.1009 -1.0274 -0.1418 -0.1427 -0.0991 -0.7325 -0.0881 -0.0929
S-73	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-73	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-73	-0.23039111495018005	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-73	-0.23039111495018005	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-73	-0.0994 -0.0598 -0.0911 -0.0654 -0.0936 -0.0246 -0.1206 -0.0963 -0.0746 -0.0871 -0.0888 -0.2618 -0.1126 -0.0929 -0.1668 -0.1251 -0.0913 -0.0891 -0.0824 -1.4958 -0.3394 -0.1120 -0.0846 -0.1563 -0.0934 -1.7872 -0.1357 -0.1877 -0.1618 -0.8777 -0.1191 -0.1202 -0.2112 -0.0857 -0.1043 -0.1208 -0.1132 -0.2396 -0.2480 -0.1376 -0.3636 -0.1447 -0.0873 -0.1048 -0.1009 -1.0274 -0.1418 -0.1427 -0.0991 -0.7325 -0.0881 -0.0930
S-310	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
T-310	public static int choose_num ( int x, int y ) { if ( x > y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
H-310	-0.2579134404659271	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
D-310	-0.2579134404659271	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
P-310	-0.0930 -0.0416 -0.0935 -0.0391 -0.0986 -0.0572 -0.1075 -0.0909 -0.1719 -1.5167 -0.0784 -0.0977 -0.0849 -0.0879 -0.1340 -0.1183 -0.3478 -0.1793 -0.1071 -0.0837 -0.0979 -1.1865 -0.1364 -0.1185 -0.3084 -0.3615 -0.1205 -0.0611 -0.0865 -0.0745 -0.1208 -0.0850 -0.0858 -0.2577 -0.8328 -0.2081 -0.1139 -0.2693 -0.1108 -0.2209 -0.0813 -0.0844 -1.4613 -0.2002 -0.2813 -0.1778 -1.7505 -0.1741 -0.1164 -0.0822
S-276	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
T-276	public static int choose_num ( int x, int y ) { if ( x > y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
H-276	-0.25791335105895996	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
D-276	-0.25791335105895996	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
P-276	-0.0930 -0.0416 -0.0935 -0.0391 -0.0986 -0.0572 -0.1075 -0.0909 -0.1719 -1.5167 -0.0784 -0.0977 -0.0849 -0.0879 -0.1340 -0.1183 -0.3478 -0.1793 -0.1071 -0.0837 -0.0979 -1.1865 -0.1364 -0.1185 -0.3084 -0.3615 -0.1205 -0.0611 -0.0865 -0.0745 -0.1208 -0.0850 -0.0858 -0.2577 -0.8328 -0.2081 -0.1139 -0.2693 -0.1108 -0.2209 -0.0813 -0.0844 -1.4613 -0.2002 -0.2813 -0.1778 -1.7505 -0.1741 -0.1164 -0.0822
S-52	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
T-52	public static int choose_num ( int x, int y ) { if ( x > y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
H-52	-0.25791338086128235	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
D-52	-0.25791338086128235	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
P-52	-0.0930 -0.0416 -0.0935 -0.0391 -0.0986 -0.0572 -0.1075 -0.0909 -0.1719 -1.5167 -0.0784 -0.0977 -0.0849 -0.0879 -0.1340 -0.1183 -0.3478 -0.1793 -0.1071 -0.0837 -0.0979 -1.1865 -0.1364 -0.1185 -0.3084 -0.3615 -0.1205 -0.0611 -0.0865 -0.0745 -0.1208 -0.0850 -0.0858 -0.2577 -0.8328 -0.2081 -0.1139 -0.2693 -0.1108 -0.2209 -0.0813 -0.0844 -1.4613 -0.2002 -0.2813 -0.1778 -1.7505 -0.1741 -0.1164 -0.0822
S-102	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = result + x % base; x = x - x / base; } return result; }
T-102	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-102	-0.3193289339542389	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-102	-0.3193289339542389	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-102	-0.0912 -0.0524 -5.2249 -0.0949 -0.0209 -0.1123 -0.0533 -0.0451 -0.0992 -0.0262 -0.1146 -0.4152 -0.1361 -1.5850 -0.1159 -0.0615 -0.0837 -0.0845 -0.5590 -0.0767 -0.0307 -0.1122 -0.0705 -0.1674 -0.0964 -2.5507 -0.1811 -0.1138 -0.1497 -0.1728 -0.1546 -0.0908 -0.0760 -0.1522 -0.1097 -0.1002 -0.0776 -0.2082 -0.1174 -0.0677 -1.2081 -0.1047 -0.1356 -0.1506 -0.0909 -0.1805 -0.0825 -0.0452 -0.7639 -0.1541 -0.1371 -0.0896 -0.4266 -0.0781 -0.0630
S-55	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = result + x % base; x = x - x / base; } return result; }
T-55	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-55	-0.3193289637565613	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-55	-0.3193289637565613	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-55	-0.0912 -0.0524 -5.2249 -0.0949 -0.0209 -0.1123 -0.0533 -0.0451 -0.0992 -0.0262 -0.1146 -0.4152 -0.1361 -1.5850 -0.1159 -0.0615 -0.0837 -0.0845 -0.5590 -0.0767 -0.0307 -0.1122 -0.0705 -0.1674 -0.0964 -2.5507 -0.1811 -0.1138 -0.1497 -0.1728 -0.1546 -0.0908 -0.0760 -0.1522 -0.1097 -0.1002 -0.0776 -0.2082 -0.1174 -0.0677 -1.2081 -0.1047 -0.1356 -0.1506 -0.0909 -0.1805 -0.0825 -0.0452 -0.7639 -0.1541 -0.1371 -0.0896 -0.4266 -0.0781 -0.0630
S-125	public static boolean below_zero ( List < Integer > operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( balance > 0 ) { return false; } } return true; }
T-125	public static boolean below_zero ( List < Integer > operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( balance < 0 ) { return true; } } return false; }
H-125	-0.2597874104976654	public static boolean below_zero ( List < Integer > operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( balance > 0 ) { return false ; } } return true ; }
D-125	-0.2597874104976654	public static boolean below_zero ( List < Integer > operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( balance > 0 ) { return false ; } } return true ; }
P-125	-0.0968 -0.0513 -0.1031 -0.0575 -0.1036 -0.0645 -0.1242 -0.6468 -0.0758 -1.1862 -0.0622 -0.0656 -0.0952 -0.0891 -0.1203 -0.0884 -0.0942 -1.3303 -0.1406 -0.1557 -0.1151 -1.8911 -0.0379 -0.0669 -0.0709 -0.0965 -0.0872 -0.3572 -0.0471 -0.0460 -0.9530 -0.1199 -0.1136 -0.0870 -0.2392 -0.1350 -0.0893 -0.0907 -0.1100 -0.1116 -1.1561 -0.0979 -0.1131 -0.0953 -0.1439 -1.0800 -0.0847 -0.0821
S-389	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = 2 * result; } return result % p; }
T-389	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = ( 2 * result ) % p; } return result; }
H-389	-0.22964812815189362	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
D-389	-0.22964812815189362	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
P-389	-0.0948 -0.0480 -0.1260 -0.0479 -0.0579 -0.1097 -0.1079 -0.0755 -1.3185 -0.1075 -0.0612 -0.0920 -0.0872 -0.1098 -0.0876 -0.1040 -0.8154 -0.5407 -0.1597 -0.1088 -0.0867 -0.0822 -0.0921 -1.6392 -0.0885 -0.1309 -0.1576 -0.9157 -0.0782 -0.1333 -0.3053 -0.0861 -0.0821 -0.1401 -0.1483 -0.1771 -0.0435 -0.0943 -0.6310 -0.0945 -0.3282 -0.1335 -0.1081 -0.0825 -0.5122 -0.0914 -0.0707
S-155	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = 2 * result; } return result % p; }
T-155	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = ( 2 * result ) % p; } return result; }
H-155	-0.22964811325073242	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
D-155	-0.22964811325073242	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
P-155	-0.0948 -0.0480 -0.1260 -0.0479 -0.0579 -0.1097 -0.1079 -0.0755 -1.3185 -0.1075 -0.0612 -0.0920 -0.0872 -0.1098 -0.0876 -0.1040 -0.8154 -0.5407 -0.1597 -0.1089 -0.0867 -0.0822 -0.0921 -1.6392 -0.0885 -0.1309 -0.1576 -0.9157 -0.0782 -0.1333 -0.3053 -0.0861 -0.0821 -0.1401 -0.1483 -0.1771 -0.0435 -0.0943 -0.6310 -0.0945 -0.3282 -0.1335 -0.1081 -0.0825 -0.5122 -0.0914 -0.0707
S-235	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
T-235	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-235	-0.2297007143497467	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
D-235	-0.2297007143497467	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
P-235	-0.1031 -0.0458 -0.0979 -0.0234 -0.0946 -0.0442 -0.0872 -0.0792 -0.1091 -0.0963 -0.0673 -0.0868 -0.0888 -0.1908 -0.1156 -0.1077 -0.1778 -0.4402 -0.0903 -0.0996 -1.8511 -0.1370 -0.3507 -0.1013 -0.1001 -0.0750 -0.1031 -0.1750 -0.1162 -0.1039 -0.0403 -0.0795 -0.0539 -1.6280 -0.6806 -0.2668 -1.0641 -0.0957 -0.0921 -0.1429 -0.0731 -0.0714
S-126	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
T-126	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-126	-0.2297007143497467	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
D-126	-0.2297007143497467	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
P-126	-0.1031 -0.0458 -0.0979 -0.0234 -0.0946 -0.0442 -0.0872 -0.0792 -0.1091 -0.0963 -0.0673 -0.0868 -0.0888 -0.1908 -0.1156 -0.1077 -0.1778 -0.4402 -0.0903 -0.0996 -1.8511 -0.1370 -0.3507 -0.1013 -0.1001 -0.0750 -0.1031 -0.1750 -0.1162 -0.1039 -0.0403 -0.0795 -0.0539 -1.6280 -0.6806 -0.2668 -1.0641 -0.0957 -0.0921 -0.1429 -0.0731 -0.0714
S-13	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
T-13	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-13	-0.22970068454742432	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
D-13	-0.22970068454742432	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
P-13	-0.1031 -0.0458 -0.0979 -0.0234 -0.0946 -0.0442 -0.0872 -0.0792 -0.1091 -0.0963 -0.0673 -0.0868 -0.0888 -0.1908 -0.1156 -0.1077 -0.1778 -0.4402 -0.0903 -0.0996 -1.8511 -0.1370 -0.3507 -0.1013 -0.1001 -0.0750 -0.1031 -0.1750 -0.1162 -0.1039 -0.0403 -0.0795 -0.0539 -1.6280 -0.6806 -0.2668 -1.0641 -0.0957 -0.0921 -0.1429 -0.0731 -0.0714
S-290	public static int max_element ( List < Integer > l ) { int m = 0; for ( Integer e : l ) { if ( e > m ) { m = e; } } return m; }
T-290	public static int max_element ( List < Integer > l ) { int m = l.get ( 0 ) ; for ( Integer e : l ) { if ( e > m ) { m = e; } } return m; }
H-290	-0.2504614293575287	public static int max_element ( List < Integer > l ) { int m = 0 ; for ( Integer e : l ) { if ( e > m ) { m = e ; } } return m ; }
D-290	-0.2504614293575287	public static int max_element ( List < Integer > l ) { int m = 0 ; for ( Integer e : l ) { if ( e > m ) { m = e ; } } return m ; }
P-290	-0.0949 -0.0457 -0.1138 -0.0512 -0.0989 -0.0311 -0.1162 -0.5215 -0.0779 -1.1849 -0.0680 -0.0849 -0.0922 -0.0922 -0.1056 -0.1979 -0.0897 -1.8517 -0.0802 -0.2396 -0.1120 -2.1086 -0.1084 -0.0621 -0.0746 -0.0912 -0.1008 -0.1366 -0.1096 -0.1610 -0.3166 -0.2098 -0.0853 -0.0881 -0.1646 -0.1519 -0.1251 -0.5385 -0.2040 -0.1624 -0.1370 -0.2307 -0.3735 -0.0957 -0.0848
S-394	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b; b = a % b; } return a; }
T-394	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { int tmp = a; a = b; b = tmp % b; } return a; }
H-394	-0.25242605805397034	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
D-394	-0.25242605805397034	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
P-394	-0.1059 -0.0497 -0.1301 -0.0127 -0.1032 -0.0088 -0.0827 -0.0351 -0.0146 -0.1079 -0.0961 -0.1213 -1.6162 -0.0966 -0.0822 -0.0849 -0.0935 -0.4118 -0.1138 -0.2193 -0.2078 -0.1363 -0.0977 -0.0778 -0.5175 -0.1758 -0.5541 -1.4929 -0.0967 -0.1595 -0.3263 -0.0875 -0.0952 -0.7534 -0.4234 -0.2361 -0.2770 -0.6077 -0.0981 -0.0900
S-292	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( power < x ) { power *= n; } return power == x; }
T-292	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-292	-0.22928567230701447	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
D-292	-0.22928567230701447	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
P-292	-0.1016 -0.0502 -0.1199 -0.0650 -0.0919 -0.0383 -0.0867 -0.0489 -0.1087 -0.1023 -0.1672 -1.4150 -0.0874 -0.0835 -0.0857 -0.0865 -0.1309 -0.0943 -0.0999 -0.9933 -0.3546 -0.2121 -0.1136 -0.1731 -0.2914 -0.2160 -0.1010 -0.0853 -0.1077 -0.0218 -0.0893 -1.3515 -0.1732 -0.2424 -0.1625 -0.1351 -0.2635 -0.8543 -0.0858 -0.0800
S-10	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( power < x ) { power *= n; } return power == x; }
T-10	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-10	-0.22928577661514282	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
D-10	-0.22928577661514282	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
P-10	-0.1016 -0.0502 -0.1199 -0.0650 -0.0919 -0.0383 -0.0867 -0.0489 -0.1087 -0.1023 -0.1672 -1.4150 -0.0874 -0.0835 -0.0857 -0.0865 -0.1308 -0.0943 -0.0999 -0.9933 -0.3546 -0.2121 -0.1136 -0.1731 -0.2914 -0.2160 -0.1010 -0.0853 -0.1077 -0.0218 -0.0893 -1.3515 -0.1732 -0.2424 -0.1625 -0.1351 -0.2635 -0.8543 -0.0858 -0.0800
S-365	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
T-365	public static String decimal_to_binary ( int decimal ) { String result = Integer.toBinaryString ( decimal ) ; return "db" + result + "db"; }
H-365	-0.30254676938056946	public static String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
D-365	-0.30254676938056946	public static String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
P-365	-0.1027 -0.0587 -2.6596 -0.0343 -0.0838 -0.0724 -0.0800 -0.0198 -0.1210 -0.1497 -0.0631 -0.0921 -0.0809 -3.6058 -0.0547 -0.0439 -0.0826 -0.1133 -0.2080 -0.0889 -1.7026 -0.1120 -0.1461 -0.0244 -0.1064 -0.0761 -0.0862 -0.0954 -0.1842 -0.1150 -0.0524 -0.0910 -0.0739 -0.0893 -0.2817 -0.1156 -0.0573 -0.7035 -0.1002 -0.0735
S-306	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ; }
T-306	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n % 2 == 0 ) && ( n > = 8 ) ) ; }
H-306	-0.1969412863254547	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
D-306	-0.1969412863254547	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
P-306	-0.1126 -0.0516 -0.0880 -0.0693 -0.0822 -0.0974 -0.0956 -0.0872 -0.0836 -0.0507 -0.1078 -0.0552 -0.1050 -0.0988 -0.0809 -0.0808 -0.0849 -0.2320 -0.1870 -0.3352 -0.1644 -0.1261 -0.1120 -1.5692 -0.3784 -0.5640 -0.0875 -0.7913 -0.1133 -0.1509 -0.1497 -0.1641 -0.0831 -0.2885 -0.0856 -0.0761
S-198	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ; }
T-198	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n % 2 == 0 ) && ( n > = 8 ) ) ; }
H-198	-0.19694124162197113	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
D-198	-0.19694124162197113	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
P-198	-0.1126 -0.0516 -0.0880 -0.0693 -0.0822 -0.0974 -0.0956 -0.0872 -0.0836 -0.0507 -0.1078 -0.0552 -0.1050 -0.0988 -0.0809 -0.0808 -0.0849 -0.2320 -0.1870 -0.3352 -0.1644 -0.1261 -0.1120 -1.5692 -0.3784 -0.5640 -0.0875 -0.7913 -0.1133 -0.1509 -0.1497 -0.1641 -0.0831 -0.2885 -0.0856 -0.0761
S-95	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ; }
T-95	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n % 2 == 0 ) && ( n > = 8 ) ) ; }
H-95	-0.1969410926103592	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
D-95	-0.1969410926103592	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
P-95	-0.1126 -0.0516 -0.0880 -0.0693 -0.0822 -0.0974 -0.0956 -0.0872 -0.0836 -0.0507 -0.1078 -0.0552 -0.1050 -0.0988 -0.0809 -0.0808 -0.0849 -0.2320 -0.1870 -0.3352 -0.1644 -0.1261 -0.1120 -1.5692 -0.3784 -0.5640 -0.0875 -0.7913 -0.1133 -0.1509 -0.1497 -0.1641 -0.0831 -0.2885 -0.0856 -0.0761
S-12	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
T-12	public static String decimal_to_binary ( int decimal ) { String result = Integer.toBinaryString ( decimal ) ; return "db" + result + "db"; }
H-12	-0.30254676938056946	public static String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
D-12	-0.30254676938056946	public static String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
P-12	-0.1027 -0.0587 -2.6596 -0.0343 -0.0838 -0.0724 -0.0800 -0.0198 -0.1210 -0.1497 -0.0631 -0.0921 -0.0809 -3.6058 -0.0547 -0.0439 -0.0826 -0.1133 -0.2080 -0.0889 -1.7026 -0.1120 -0.1461 -0.0244 -0.1064 -0.0761 -0.0862 -0.0954 -0.1842 -0.1150 -0.0524 -0.0910 -0.0739 -0.0893 -0.2817 -0.1156 -0.0573 -0.7035 -0.1002 -0.0735
S-228	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c; }
T-228	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b; }
H-228	-0.2621866762638092	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c ; }
D-228	-0.2621866762638092	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c ; }
P-228	-0.1070 -0.0467 -0.1211 -0.0745 -0.1011 -0.0685 -0.0865 -0.0398 -0.0730 -0.1139 -0.0999 -0.1084 -1.2695 -0.1016 -0.0859 -1.5459 -0.0980 -0.0819 -0.0939 -0.0908 -0.3424 -0.4747 -0.5666 -0.1161 -1.1981 -0.1459 -0.3176 -0.0829 -0.2567 -0.1292 -0.3322 -0.1208 -0.5014 -0.1066 -0.0772
S-60	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c; }
T-60	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b; }
H-60	-0.26218676567077637	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c ; }
D-60	-0.26218676567077637	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c ; }
P-60	-0.1070 -0.0467 -0.1211 -0.0745 -0.1011 -0.0685 -0.0865 -0.0398 -0.0730 -0.1139 -0.0999 -0.1084 -1.2695 -0.1016 -0.0859 -1.5459 -0.0980 -0.0819 -0.0939 -0.0908 -0.3424 -0.4747 -0.5666 -0.1161 -1.1981 -0.1459 -0.3176 -0.0829 -0.2567 -0.1292 -0.3322 -0.1208 -0.5014 -0.1066 -0.0772
S-363	public static int [ ] eat ( int number, int need, int remaining ) { return new int [ ] { number + need, remaining - need } ; }
T-363	public static int [ ] eat ( int number, int need, int remaining ) { if ( need < = remaining ) { return new int [ ] { number + need, remaining - need } ; } else { return new int [ ] { number + remaining , 0 } ; } }
H-363	-0.23065075278282166	public static int [ ] eat ( int number, int need, int remaining ) { return new int [ ] { number + need, remaining - need } ; }
D-363	-0.23065075278282166	public static int [ ] eat ( int number, int need, int remaining ) { return new int [ ] { number + need, remaining - need } ; }
P-363	-0.1031 -0.0517 -0.1124 -0.2399 -0.0741 -0.0296 -0.1116 -0.1065 -0.1262 -1.7140 -0.1154 -0.0384 -1.2739 -0.1038 -0.0644 -0.0750 -0.0866 -0.2993 -0.0625 -0.0668 -0.0932 -0.1176 -0.1026 -0.0943 -0.4124 -0.0637 -1.3776 -0.0750 -0.1636 -0.0341 -0.2013 -0.0991 -0.0743 -0.0782
S-121	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
T-121	public static int sum_to_n ( int n ) { return ( n + 1 ) * n / 2; }
H-121	-0.12623652815818787	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
D-121	-0.12623652815818787	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
P-121	-0.0973 -0.0530 -0.1206 -0.0925 -0.1085 -0.0675 -0.0843 -0.0736 -0.1182 -0.0970 -0.0747 -0.0809 -0.0880 -0.3407 -0.2692 -0.2207 -0.2767 -0.2413 -0.0841 -0.0669 -0.1190 -0.1435 -0.1433 -0.1027 -0.0980 -0.1000 -0.0966 -0.0761
S-50	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
T-50	public static int sum_to_n ( int n ) { return ( n + 1 ) * n / 2; }
H-50	-0.12623658776283264	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
D-50	-0.12623658776283264	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
P-50	-0.0973 -0.0530 -0.1206 -0.0925 -0.1085 -0.0675 -0.0843 -0.0736 -0.1182 -0.0970 -0.0747 -0.0809 -0.0880 -0.3407 -0.2692 -0.2207 -0.2767 -0.2413 -0.0841 -0.0669 -0.1190 -0.1435 -0.1433 -0.1027 -0.0980 -0.1000 -0.0966 -0.0761
S-161	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
T-161	public static int multiply ( int a, int b ) { return Math.abs ( a % 10 ) * Math.abs ( b % 10 ) ; }
H-161	-0.1528383493423462	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
D-161	-0.1528383493423462	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
P-161	-0.0910 -0.0495 -0.1081 -0.0585 -0.1107 -0.0894 -0.1053 -1.0197 -0.0823 -0.0743 -0.0798 -0.0905 -0.3160 -0.2084 -0.4654 -0.2058 -0.0658 -0.0853 -0.0600 -0.1038 -0.0927 -0.1452 -0.0717 -0.0829 -0.0842 -0.1066 -0.0735
S-385	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
T-385	public static int fib ( int n ) { if ( n == 0 || n == 1 ) return n; return fib ( n - 1 ) + fib ( n - 2 ) ; }
H-385	-0.13651354610919952	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
D-385	-0.13651354610919952	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
P-385	-0.0846 -0.0538 -0.1306 -0.0473 -0.1034 -0.1006 -0.0732 -0.0814 -0.0805 -0.3083 -0.0742 -0.0961 -0.1186 -0.8040 -0.2622 -0.0981 -0.0941 -0.0955 -0.0964 -0.0878 -0.1552 -0.1476 -0.0922 -0.1056 -0.0906 -0.0675
S-368	public static double triangle_area ( double a, double h ) { return a * h; }
T-368	public static double triangle_area ( double a, double h ) { return a * h / 2.; }
H-368	-0.22185064852237701	public static double triangle_area ( double a , double h ) { return a * h ; }
D-368	-0.22185064852237701	public static double triangle_area ( double a , double h ) { return a * h ; }
P-368	-0.1019 -0.0635 -0.1387 -0.0896 -0.0866 -0.0501 -0.1159 -0.1378 -0.1102 -1.4169 -0.1468 -0.0963 -0.0911 -0.0890 -0.4709 -0.6687 -0.0570 -0.1510 -0.4065 -0.1036 -0.0667
S-369	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < xs.size ( ) ; i += 1 ) result.add ( xs.get ( i ) ) ; return result; }
T-369	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 1; i < xs.size ( ) ; i += 1 ) result.add ( i * xs.get ( i ) ) ; return result; }
H-369	-0.28790128231048584	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( xs.size () ) ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
D-369	-0.28790128231048584	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( xs.size () ) ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
P-369	-0.0969 -0.0509 -0.4735 -0.1002 -1.2736 -0.0634 -0.0109 -0.1027 -0.4628 -0.0991 -1.2650 -0.0756 -0.0765 -0.0850 -0.0804 -0.4365 -0.1085 -1.0924 -0.0644 -0.0491 -0.0774 -0.0615 -2.0238 -0.0909 -1.3744 -0.0650 -0.3074 -1.9699 -0.4113 -0.6561 -0.2018 -0.0739 -0.0997 -0.2010 -0.1086 -0.0652 -0.0707 -0.0908 -0.7959 -0.0914 -0.0914 -0.2388 -0.2076 -0.2004 -0.7738 -0.0849 -0.0885 -0.1116 -0.1913 -0.0775 -0.0844 -0.2664 -0.4072 -0.0988 -0.1317 -0.1513 -0.3258 -0.1021 -0.0878 -0.0805 -0.0851 -0.0870 -0.0913 -0.0515 -0.1174 -0.0786 -0.0721
S-58	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true; } return false; }
T-58	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) != text.charAt ( text.length ( ) - i - 1 ) ) return false; } return true; }
H-58	-0.20771420001983643	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
D-58	-0.20771420001983643	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
P-58	-0.0999 -0.0569 -0.0803 -0.0664 -0.0889 -0.0170 -0.0056 -0.1143 -0.9371 -0.0551 -0.0891 -0.0859 -0.2732 -0.1152 -0.0705 -0.0785 -0.0985 -1.7121 -0.1007 -0.1168 -0.2750 -0.1419 -0.0926 -0.5277 -0.0777 -0.0893 -0.0804 -0.1099 -0.1842 -0.0811 -0.1049 -0.1306 -0.1157 -0.1745 -0.1835 -1.1252 -0.1119 -0.1655 -0.0867 -0.3301 -0.0688 -0.1257 -1.0434 -0.1129 -0.4807 -0.1223 -0.1389 -0.2466 -0.0720 -0.2434 -0.2595 -0.0896 -0.0909 -0.1757 -0.0784 -0.4252 -0.1288 -0.1003 -0.0438 -0.2100 -0.0864 -0.0842
S-23	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true; } return false; }
T-23	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) != text.charAt ( text.length ( ) - i - 1 ) ) return false; } return true; }
H-23	-0.20771417021751404	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
D-23	-0.20771417021751404	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
P-23	-0.0999 -0.0569 -0.0803 -0.0664 -0.0889 -0.0170 -0.0056 -0.1143 -0.9371 -0.0551 -0.0891 -0.0859 -0.2732 -0.1152 -0.0705 -0.0785 -0.0985 -1.7121 -0.1007 -0.1168 -0.2750 -0.1419 -0.0926 -0.5277 -0.0777 -0.0893 -0.0804 -0.1099 -0.1842 -0.0811 -0.1049 -0.1306 -0.1157 -0.1745 -0.1835 -1.1252 -0.1119 -0.1655 -0.0867 -0.3301 -0.0688 -0.1257 -1.0434 -0.1129 -0.4807 -0.1223 -0.1389 -0.2466 -0.0720 -0.2434 -0.2595 -0.0896 -0.0909 -0.1757 -0.0784 -0.4252 -0.1288 -0.1003 -0.0438 -0.2100 -0.0864 -0.0842
S-330	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
T-330	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
H-330	-0.19530639052391052	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
D-330	-0.19530639052391052	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
P-330	-0.1078 -0.0471 -0.1363 -0.0882 -0.1141 -0.0348 -0.0951 -0.0500 -0.1107 -0.0077 -0.1136 -0.1191 -0.1912 -0.1158 -0.0843 -0.0893 -0.0823 -0.1167 -0.0781 -0.0834 -1.6489 -0.0908 -0.1312 -0.1069 -0.0723 -0.0909 -0.0898 -1.6820 -0.0957 -0.1037 -0.8425 -0.0866 -0.0493 -0.4456 -0.0882 -0.1462 -0.2222 -0.0837 -0.0922 -0.1401 -0.1145 -0.7534 -0.0661 -0.1042 -0.0777 -0.8227 -0.0752 -0.2488 -0.1244 -0.0844 -0.2311 -0.1269 -0.1558 -0.0819 -0.1208 -0.0831 -0.1088 -0.1543 -0.1367 -0.1249 -0.1550 -0.0944 -0.0847
S-189	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
T-189	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
H-189	-0.1953064352273941	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
D-189	-0.1953064352273941	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
P-189	-0.1078 -0.0471 -0.1363 -0.0882 -0.1141 -0.0348 -0.0951 -0.0500 -0.1107 -0.0077 -0.1136 -0.1191 -0.1912 -0.1158 -0.0843 -0.0893 -0.0823 -0.1167 -0.0781 -0.0834 -1.6489 -0.0908 -0.1312 -0.1069 -0.0723 -0.0909 -0.0898 -1.6820 -0.0957 -0.1037 -0.8425 -0.0866 -0.0493 -0.4456 -0.0882 -0.1462 -0.2222 -0.0837 -0.0922 -0.1401 -0.1145 -0.7534 -0.0661 -0.1042 -0.0777 -0.8227 -0.0752 -0.2488 -0.1244 -0.0844 -0.2311 -0.1269 -0.1558 -0.0819 -0.1208 -0.0831 -0.1088 -0.1543 -0.1367 -0.1249 -0.1550 -0.0944 -0.0847
S-315	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-315	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-315	-0.2696322798728943	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-315	-0.2696322798728943	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-315	-0.1034 -0.0447 -0.1221 -0.1406 -0.0841 -0.0553 -0.0931 -0.0423 -0.1083 -0.0949 -0.0935 -1.5328 -0.0997 -0.1606 -1.6243 -0.0708 -0.0861 -0.0851 -0.0856 -0.4218 -0.1168 -0.1315 -0.1216 -0.3611 -0.0908 -0.0968 -0.2343 -1.1241 -0.3537 -0.1176 -0.0815 -0.0820 -0.1014 -1.6713 -0.1040 -0.1941 -0.2077 -0.8127 -0.0802 -0.1111 -0.2811 -0.0837 -0.0986 -0.1448 -0.1147 -0.3559 -0.3399 -0.1292 -0.2574 -0.1294 -0.0906 -0.1244 -0.3161 -1.1353 -0.1429 -0.1620 -0.1470 -0.6142 -0.0881 -0.0793
S-227	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-227	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-227	-0.26963236927986145	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-227	-0.26963236927986145	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-227	-0.1034 -0.0447 -0.1221 -0.1406 -0.0841 -0.0553 -0.0931 -0.0423 -0.1083 -0.0949 -0.0935 -1.5328 -0.0997 -0.1606 -1.6243 -0.0708 -0.0861 -0.0851 -0.0856 -0.4218 -0.1168 -0.1315 -0.1216 -0.3611 -0.0908 -0.0968 -0.2343 -1.1241 -0.3537 -0.1176 -0.0815 -0.0820 -0.1014 -1.6713 -0.1040 -0.1941 -0.2077 -0.8127 -0.0802 -0.1111 -0.2811 -0.0837 -0.0986 -0.1448 -0.1147 -0.3559 -0.3399 -0.1292 -0.2574 -0.1294 -0.0906 -0.1244 -0.3161 -1.1353 -0.1429 -0.1620 -0.1470 -0.6142 -0.0881 -0.0793
S-203	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-203	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-203	-0.26963233947753906	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-203	-0.26963233947753906	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-203	-0.1034 -0.0447 -0.1221 -0.1406 -0.0841 -0.0553 -0.0931 -0.0423 -0.1083 -0.0949 -0.0935 -1.5328 -0.0997 -0.1606 -1.6243 -0.0708 -0.0861 -0.0851 -0.0856 -0.4218 -0.1168 -0.1315 -0.1216 -0.3611 -0.0908 -0.0968 -0.2343 -1.1241 -0.3537 -0.1176 -0.0815 -0.0820 -0.1014 -1.6713 -0.1040 -0.1941 -0.2077 -0.8127 -0.0802 -0.1111 -0.2811 -0.0837 -0.0986 -0.1448 -0.1147 -0.3559 -0.3399 -0.1292 -0.2574 -0.1294 -0.0906 -0.1244 -0.3161 -1.1353 -0.1429 -0.1620 -0.1470 -0.6142 -0.0881 -0.0793
S-255	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1; } return result; }
T-255	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i - 1 ] ) result += 1; } return result; }
H-255	-0.2331114113330841	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
D-255	-0.2331114113330841	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
P-255	-0.0946 -0.0490 -0.1185 -0.0313 -0.0984 -0.0361 -0.1160 -0.1041 -0.1773 -0.0959 -0.0681 -0.0889 -0.0886 -0.0947 -0.0997 -0.0833 -1.8114 -0.1447 -0.1080 -0.0749 -0.0897 -0.0945 -2.0894 -0.1044 -0.1024 -2.0477 -0.0680 -0.0965 -0.0607 -0.1072 -0.2839 -0.0917 -0.1112 -0.1903 -0.0796 -0.1036 -0.1297 -0.1123 -0.1917 -0.0675 -0.1220 -0.0834 -0.3010 -0.1216 -0.0738 -0.1413 -0.1167 -0.0769 -0.4757 -0.1219 -0.1265 -0.0896 -0.1772 -0.0848 -1.5634 -0.1998 -0.1162 -0.1327 -0.1292 -0.2396 -0.0851 -0.0691
S-209	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1; } return result; }
T-209	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i - 1 ] ) result += 1; } return result; }
H-209	-0.23311126232147217	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
D-209	-0.23311126232147217	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
P-209	-0.0946 -0.0490 -0.1185 -0.0313 -0.0984 -0.0361 -0.1160 -0.1041 -0.1773 -0.0959 -0.0681 -0.0889 -0.0886 -0.0947 -0.0997 -0.0833 -1.8114 -0.1447 -0.1080 -0.0749 -0.0897 -0.0945 -2.0894 -0.1044 -0.1024 -2.0477 -0.0680 -0.0965 -0.0607 -0.1072 -0.2839 -0.0917 -0.1112 -0.1903 -0.0796 -0.1036 -0.1297 -0.1123 -0.1917 -0.0675 -0.1220 -0.0834 -0.3010 -0.1216 -0.0738 -0.1413 -0.1167 -0.0769 -0.4757 -0.1219 -0.1265 -0.0896 -0.1772 -0.0848 -1.5634 -0.1998 -0.1162 -0.1327 -0.1292 -0.2396 -0.0851 -0.0691
S-372	public static int can_arrange ( int [ ] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1; } return ind; }
T-372	public static int can_arrange ( int [ ] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) ind = i; } return ind; }
H-372	-0.23246733844280243	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-372	-0.23246733844280243	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-372	-0.0925 -0.0461 -0.1030 -0.0936 -0.1004 -0.1169 -0.1138 -0.1024 -0.1565 -0.0796 -0.0479 -0.0872 -0.0881 -0.1171 -0.0846 -0.0774 -2.1406 -0.1989 -0.1541 -0.1116 -0.0735 -0.0809 -0.0782 -1.4543 -0.1019 -0.0958 -0.3916 -0.0819 -0.0596 -1.2048 -0.0812 -1.4485 -0.0747 -0.1134 -0.1248 -0.1120 -0.0912 -0.0599 -0.1068 -0.0822 -0.1487 -0.0615 -0.0884 -0.1247 -0.1928 -0.1885 -0.0988 -0.0960 -0.1233 -0.1135 -0.1223 -0.0806 -1.3675 -0.1798 -0.0915 -0.0932 -0.1361 -0.4652 -0.0800 -0.0659
S-191	public static int can_arrange ( int [ ] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1; } return ind; }
T-191	public static int can_arrange ( int [ ] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) ind = i; } return ind; }
H-191	-0.23246729373931885	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-191	-0.23246729373931885	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-191	-0.0925 -0.0461 -0.1030 -0.0936 -0.1004 -0.1169 -0.1138 -0.1024 -0.1565 -0.0796 -0.0479 -0.0872 -0.0881 -0.1171 -0.0846 -0.0774 -2.1406 -0.1989 -0.1541 -0.1116 -0.0735 -0.0809 -0.0782 -1.4543 -0.1019 -0.0958 -0.3916 -0.0819 -0.0596 -1.2048 -0.0812 -1.4485 -0.0747 -0.1134 -0.1248 -0.1120 -0.0912 -0.0599 -0.1068 -0.0822 -0.1487 -0.0615 -0.0884 -0.1247 -0.1928 -0.1885 -0.0988 -0.0960 -0.1233 -0.1135 -0.1223 -0.0806 -1.3675 -0.1798 -0.0915 -0.0932 -0.1361 -0.4652 -0.0800 -0.0659
S-156	public static int can_arrange ( int [ ] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1; } return ind; }
T-156	public static int can_arrange ( int [ ] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) ind = i; } return ind; }
H-156	-0.23246735334396362	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-156	-0.23246735334396362	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-156	-0.0925 -0.0461 -0.1030 -0.0936 -0.1004 -0.1169 -0.1138 -0.1024 -0.1565 -0.0796 -0.0479 -0.0872 -0.0881 -0.1171 -0.0846 -0.0774 -2.1406 -0.1989 -0.1541 -0.1116 -0.0735 -0.0809 -0.0782 -1.4543 -0.1019 -0.0958 -0.3916 -0.0819 -0.0596 -1.2048 -0.0812 -1.4485 -0.0747 -0.1134 -0.1248 -0.1120 -0.0912 -0.0599 -0.1068 -0.0822 -0.1487 -0.0615 -0.0884 -0.1247 -0.1928 -0.1885 -0.0988 -0.0960 -0.1233 -0.1135 -0.1223 -0.0806 -1.3675 -0.1798 -0.0915 -0.0932 -0.1361 -0.4652 -0.0800 -0.0659
S-116	public static int can_arrange ( int [ ] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1; } return ind; }
T-116	public static int can_arrange ( int [ ] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) ind = i; } return ind; }
H-116	-0.23246729373931885	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-116	-0.23246729373931885	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-116	-0.0925 -0.0461 -0.1030 -0.0936 -0.1004 -0.1169 -0.1138 -0.1024 -0.1565 -0.0796 -0.0479 -0.0872 -0.0881 -0.1171 -0.0846 -0.0774 -2.1406 -0.1989 -0.1541 -0.1116 -0.0735 -0.0809 -0.0782 -1.4543 -0.1019 -0.0958 -0.3916 -0.0819 -0.0596 -1.2048 -0.0812 -1.4485 -0.0747 -0.1134 -0.1248 -0.1120 -0.0912 -0.0599 -0.1068 -0.0822 -0.1487 -0.0615 -0.0884 -0.1247 -0.1928 -0.1885 -0.0988 -0.0960 -0.1233 -0.1135 -0.1223 -0.0806 -1.3675 -0.1798 -0.0915 -0.0932 -0.1361 -0.4652 -0.0800 -0.0659
S-350	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-350	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-350	-0.2267427146434784	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-350	-0.2267427146434784	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-350	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-392	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-392	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-392	-0.2267427146434784	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-392	-0.2267427146434784	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-392	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-321	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-321	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-321	-0.22674275934696198	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-321	-0.22674275934696198	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-321	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-211	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-211	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-211	-0.22674256563186646	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-211	-0.22674256563186646	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-211	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-180	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-180	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-180	-0.22674256563186646	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-180	-0.22674256563186646	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-180	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-127	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-127	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-127	-0.22674275934696198	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-127	-0.22674275934696198	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-127	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0791 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-41	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-41	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-41	-0.2267426997423172	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-41	-0.2267426997423172	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-41	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-40	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-40	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-40	-0.22674275934696198	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-40	-0.22674275934696198	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-40	-0.0880 -0.0591 -0.1063 -0.0982 -0.1016 -0.0548 -0.1113 -0.1222 -0.1409 -1.1581 -0.1197 -0.0872 -0.9880 -0.1165 -0.0558 -0.0874 -0.0810 -0.1364 -0.1119 -0.4235 -0.4630 -0.0877 -0.2423 -0.0972 -0.1953 -1.0142 -0.1123 -0.1272 -0.0790 -0.0923 -0.0850 -0.0931 -0.0851 -0.1105 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1837 -0.1089 -0.5369 -0.2986 -0.2575 -0.2763 -0.1175 -0.1857 -0.0875 -0.1575 -0.0751 -0.8013 -0.4167 -0.1393 -0.0486 -0.5365 -0.0859 -0.0771
S-401	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-401	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-401	-0.15234071016311646	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-401	-0.15234071016311646	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-401	-0.0935 -0.0472 -0.1220 -0.0473 -0.0736 -0.0496 -0.1158 -0.0907 -0.0752 -0.0808 -0.0813 -0.1669 -0.1193 -0.1068 -0.1777 -0.1517 -0.0823 -0.0996 -1.4405 -0.1956 -0.1077 -0.1088 -0.0868 -0.2244 -0.0836 -0.0781 -0.9295 -0.2279 -0.0690 -0.0793 -0.0540 -0.1027 -0.1290 -0.4613 -0.3503 -0.1021 -0.1011 -0.0989 -0.0828 -0.0636 -0.0982 -0.0904 -0.1766 -0.1629 -0.0921 -0.1071 -0.0768 -0.0861 -0.0793 -0.0993 -0.0868 -0.1365 -0.0604 -0.0946 -0.1094 -0.0902 -0.0785
S-241	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-241	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-241	-0.1523408740758896	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-241	-0.1523408740758896	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-241	-0.0935 -0.0472 -0.1220 -0.0473 -0.0736 -0.0496 -0.1158 -0.0907 -0.0752 -0.0808 -0.0813 -0.1669 -0.1193 -0.1068 -0.1777 -0.1517 -0.0823 -0.0996 -1.4405 -0.1956 -0.1077 -0.1088 -0.0868 -0.2244 -0.0836 -0.0781 -0.9295 -0.2279 -0.0690 -0.0793 -0.0540 -0.1027 -0.1290 -0.4613 -0.3503 -0.1021 -0.1011 -0.0989 -0.0828 -0.0636 -0.0982 -0.0904 -0.1766 -0.1629 -0.0921 -0.1071 -0.0768 -0.0861 -0.0793 -0.0993 -0.0868 -0.1365 -0.0604 -0.0946 -0.1094 -0.0902 -0.0785
S-170	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-170	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-170	-0.1523408442735672	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-170	-0.1523408442735672	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-170	-0.0935 -0.0472 -0.1220 -0.0473 -0.0736 -0.0496 -0.1158 -0.0907 -0.0752 -0.0808 -0.0813 -0.1669 -0.1193 -0.1068 -0.1777 -0.1517 -0.0823 -0.0996 -1.4405 -0.1956 -0.1077 -0.1088 -0.0868 -0.2244 -0.0836 -0.0781 -0.9295 -0.2279 -0.0690 -0.0793 -0.0540 -0.1027 -0.1290 -0.4613 -0.3503 -0.1021 -0.1011 -0.0989 -0.0828 -0.0636 -0.0982 -0.0904 -0.1766 -0.1629 -0.0921 -0.1071 -0.0768 -0.0861 -0.0793 -0.0993 -0.0868 -0.1365 -0.0604 -0.0946 -0.1094 -0.0902 -0.0785
S-103	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-103	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-103	-0.15234075486660004	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-103	-0.15234075486660004	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-103	-0.0935 -0.0472 -0.1220 -0.0473 -0.0736 -0.0496 -0.1158 -0.0907 -0.0752 -0.0808 -0.0813 -0.1669 -0.1193 -0.1068 -0.1777 -0.1517 -0.0823 -0.0996 -1.4405 -0.1956 -0.1077 -0.1088 -0.0868 -0.2244 -0.0836 -0.0781 -0.9295 -0.2279 -0.0690 -0.0793 -0.0540 -0.1027 -0.1290 -0.4613 -0.3503 -0.1021 -0.1011 -0.0989 -0.0828 -0.0636 -0.0982 -0.0904 -0.1766 -0.1629 -0.0921 -0.1071 -0.0768 -0.0861 -0.0793 -0.0993 -0.0868 -0.1365 -0.0604 -0.0946 -0.1094 -0.0902 -0.0785
S-101	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-101	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-101	-0.23797594010829926	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-101	-0.23797594010829926	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-101	-0.0963 -0.0454 -0.1160 -0.0465 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0878 -0.0841 -0.0774 -1.9149 -0.1454 -0.2413 -0.1099 -0.1295 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2384 -0.1846 -0.1499 -0.4595 -0.4733 -0.1601 -0.1387 -0.2670 -0.5126 -0.1415 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6104 -0.2332 -0.1612 -0.1351 -0.1090 -0.2530 -0.0890 -0.0752
S-296	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-296	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-296	-0.23797594010829926	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-296	-0.23797594010829926	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-296	-0.0963 -0.0454 -0.1160 -0.0465 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0878 -0.0841 -0.0774 -1.9149 -0.1454 -0.2413 -0.1099 -0.1295 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2384 -0.1846 -0.1499 -0.4595 -0.4733 -0.1601 -0.1387 -0.2670 -0.5126 -0.1415 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6104 -0.2332 -0.1612 -0.1351 -0.1090 -0.2530 -0.0890 -0.0752
S-254	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-254	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-254	-0.23797589540481567	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-254	-0.23797589540481567	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-254	-0.0963 -0.0454 -0.1160 -0.0465 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0878 -0.0841 -0.0774 -1.9149 -0.1454 -0.2413 -0.1099 -0.1295 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2384 -0.1846 -0.1499 -0.4595 -0.4733 -0.1601 -0.1387 -0.2670 -0.5126 -0.1415 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6104 -0.2332 -0.1612 -0.1351 -0.1090 -0.2530 -0.0890 -0.0752
S-216	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-216	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-216	-0.23797599971294403	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-216	-0.23797599971294403	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-216	-0.0963 -0.0454 -0.1160 -0.0465 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0878 -0.0841 -0.0774 -1.9149 -0.1454 -0.2413 -0.1099 -0.1295 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2384 -0.1846 -0.1499 -0.4595 -0.4733 -0.1601 -0.1387 -0.2670 -0.5126 -0.1415 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6104 -0.2332 -0.1612 -0.1351 -0.1090 -0.2530 -0.0890 -0.0752
S-201	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-201	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-201	-0.23797595500946045	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-201	-0.23797595500946045	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-201	-0.0963 -0.0454 -0.1160 -0.0465 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0878 -0.0841 -0.0774 -1.9149 -0.1454 -0.2413 -0.1099 -0.1295 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2384 -0.1846 -0.1499 -0.4595 -0.4733 -0.1601 -0.1387 -0.2670 -0.5126 -0.1415 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6104 -0.2332 -0.1612 -0.1351 -0.1090 -0.2530 -0.0890 -0.0752
S-165	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-165	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-165	-0.23797594010829926	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-165	-0.23797594010829926	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-165	-0.0963 -0.0454 -0.1160 -0.0465 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0878 -0.0841 -0.0774 -1.9149 -0.1454 -0.2413 -0.1099 -0.1295 -0.0882 -0.0697 -0.0659 -0.1691 -0.0717 -0.0416 -0.3050 -0.2002 -0.0911 -0.1262 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2384 -0.1846 -0.1499 -0.4595 -0.4733 -0.1601 -0.1387 -0.2670 -0.5126 -0.1415 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6104 -0.2332 -0.1612 -0.1351 -0.1090 -0.2530 -0.0890 -0.0752
S-187	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-187	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-187	-0.1986365169286728	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-187	-0.1986365169286728	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-187	-0.0928 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8909 -0.1175 -0.0886 -0.0893 -0.1047 -0.0587 -0.0862 -1.3311 -0.1533 -0.1077 -0.0776 -0.0736 -0.0835 -1.4133 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0914 -0.0821 -0.1087 -0.1377 -0.0808 -0.0853 -0.1284 -0.0805 -0.0881 -0.0884 -0.1489 -0.9465 -0.0993 -0.1197 -0.0865 -0.0847 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1766 -0.0959 -0.1775 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1594 -0.0815 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0844 -0.0458 -0.1097 -0.9524 -0.1393 -0.1236 -0.0662 -0.0589 -0.1059 -0.0837 -0.3102 -0.1487 -1.3369 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-140	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-140	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-140	-0.19863662123680115	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-140	-0.19863662123680115	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-140	-0.0928 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8909 -0.1175 -0.0886 -0.0893 -0.1047 -0.0587 -0.0862 -1.3311 -0.1533 -0.1077 -0.0776 -0.0736 -0.0835 -1.4133 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0914 -0.0821 -0.1087 -0.1377 -0.0808 -0.0853 -0.1284 -0.0805 -0.0881 -0.0884 -0.1489 -0.9465 -0.0993 -0.1197 -0.0865 -0.0847 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1766 -0.0959 -0.1775 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1594 -0.0815 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0844 -0.0458 -0.1097 -0.9524 -0.1393 -0.1236 -0.0662 -0.0589 -0.1059 -0.0837 -0.3102 -0.1487 -1.3369 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-33	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-33	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-33	-0.19863654673099518	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-33	-0.19863654673099518	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-33	-0.0928 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8909 -0.1175 -0.0886 -0.0893 -0.1047 -0.0587 -0.0862 -1.3311 -0.1533 -0.1077 -0.0776 -0.0736 -0.0835 -1.4133 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0914 -0.0821 -0.1087 -0.1377 -0.0808 -0.0853 -0.1284 -0.0805 -0.0881 -0.0884 -0.1489 -0.9465 -0.0993 -0.1197 -0.0865 -0.0847 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1766 -0.0959 -0.1775 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1594 -0.0815 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0844 -0.0458 -0.1097 -0.9524 -0.1393 -0.1236 -0.0662 -0.0589 -0.1059 -0.0837 -0.3102 -0.1487 -1.3369 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-275	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-275	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-275	-0.17064380645751953	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-275	-0.17064380645751953	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-275	-0.1010 -0.0508 -0.1070 -0.1043 -0.0922 -0.0435 -0.0936 -0.0436 -0.0880 -0.0674 -0.1175 -0.2902 -0.0713 -0.8036 -0.0609 -0.0647 -0.0845 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9145 -0.0819 -0.0673 -0.1115 -0.1329 -0.1420 -0.4048 -0.0755 -0.0911 -0.0696 -0.1076 -0.1786 -0.0785 -0.0776 -0.1064 -0.1028 -0.0670 -0.0864 -0.0915 -0.8962 -0.1042 -0.0670 -0.0783 -0.1162 -0.1180 -0.1854 -0.0741 -0.0970 -0.0784 -0.1031 -0.1422 -0.0778 -0.0974 -0.1518 -0.1100 -0.2390 -0.1794 -0.2920 -0.1110 -0.1344 -0.0968 -0.5068 -0.2054 -0.1138 -0.1782 -0.1046 -0.1004 -0.0894 -0.9779 -0.3038 -0.0756 -0.9826 -0.1067 -0.1074 -0.1072 -0.0375 -0.3775 -0.0844 -0.0901
S-134	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-134	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-134	-0.1706438660621643	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-134	-0.1706438660621643	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-134	-0.1010 -0.0508 -0.1070 -0.1043 -0.0922 -0.0435 -0.0936 -0.0436 -0.0880 -0.0674 -0.1175 -0.2902 -0.0713 -0.8036 -0.0609 -0.0647 -0.0845 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9145 -0.0819 -0.0673 -0.1115 -0.1329 -0.1420 -0.4048 -0.0755 -0.0911 -0.0696 -0.1076 -0.1786 -0.0785 -0.0776 -0.1064 -0.1028 -0.0670 -0.0864 -0.0915 -0.8962 -0.1042 -0.0670 -0.0783 -0.1162 -0.1180 -0.1854 -0.0741 -0.0970 -0.0784 -0.1031 -0.1422 -0.0778 -0.0974 -0.1518 -0.1100 -0.2390 -0.1794 -0.2920 -0.1110 -0.1344 -0.0968 -0.5068 -0.2054 -0.1138 -0.1782 -0.1046 -0.1004 -0.0894 -0.9779 -0.3038 -0.0756 -0.9826 -0.1067 -0.1074 -0.1072 -0.0375 -0.3775 -0.0844 -0.0901
S-99	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-99	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-99	-0.1706438660621643	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-99	-0.1706438660621643	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-99	-0.1010 -0.0508 -0.1070 -0.1043 -0.0922 -0.0435 -0.0936 -0.0436 -0.0880 -0.0674 -0.1175 -0.2902 -0.0713 -0.8036 -0.0609 -0.0647 -0.0845 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9145 -0.0819 -0.0673 -0.1115 -0.1329 -0.1420 -0.4048 -0.0755 -0.0911 -0.0696 -0.1076 -0.1786 -0.0785 -0.0776 -0.1064 -0.1028 -0.0670 -0.0864 -0.0915 -0.8962 -0.1042 -0.0670 -0.0783 -0.1162 -0.1180 -0.1854 -0.0741 -0.0970 -0.0784 -0.1031 -0.1422 -0.0778 -0.0974 -0.1518 -0.1100 -0.2390 -0.1794 -0.2920 -0.1110 -0.1344 -0.0968 -0.5068 -0.2054 -0.1138 -0.1782 -0.1046 -0.1004 -0.0894 -0.9779 -0.3038 -0.0756 -0.9826 -0.1067 -0.1074 -0.1072 -0.0375 -0.3775 -0.0844 -0.0901
S-79	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-79	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-79	-0.17064379155635834	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-79	-0.17064379155635834	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-79	-0.1010 -0.0508 -0.1070 -0.1043 -0.0922 -0.0435 -0.0936 -0.0436 -0.0880 -0.0674 -0.1175 -0.2902 -0.0713 -0.8036 -0.0609 -0.0647 -0.0845 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9145 -0.0819 -0.0673 -0.1115 -0.1329 -0.1420 -0.4048 -0.0755 -0.0911 -0.0696 -0.1076 -0.1786 -0.0785 -0.0776 -0.1064 -0.1028 -0.0670 -0.0864 -0.0915 -0.8962 -0.1042 -0.0670 -0.0783 -0.1162 -0.1180 -0.1854 -0.0741 -0.0970 -0.0784 -0.1031 -0.1422 -0.0778 -0.0974 -0.1518 -0.1100 -0.2390 -0.1794 -0.2920 -0.1110 -0.1344 -0.0968 -0.5068 -0.2054 -0.1138 -0.1782 -0.1046 -0.1004 -0.0894 -0.9779 -0.3038 -0.0756 -0.9826 -0.1067 -0.1074 -0.1072 -0.0375 -0.3775 -0.0844 -0.0901
S-236	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a; }
T-236	public static boolean iscude ( int a ) { a = Math.abs ( a ) ; double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a; }
H-236	-0.20866656303405762	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a ; }
D-236	-0.20866656303405762	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a ; }
P-236	-0.0850 -0.0528 -0.0956 -0.0157 -0.0178 -0.1121 -0.1544 -0.1038 -0.0907 -0.0858 -0.1675 -0.0568 -0.0855 -2.2603 -0.0951 -0.0320 -0.1065 -0.1430 -0.7810 -0.0509 -0.0254 -0.0964 -0.0891 -0.8669 -0.0354 -0.0739 -0.5245 -0.0931 -1.1993 -0.1083 -0.0751 -0.0933 -0.0902 -0.1705 -0.0460 -0.0975 -0.0336 -0.0858 -0.2218 -0.2141 -0.0784 -0.0849 -0.1231 -0.1655 -0.0289 -0.1044 -0.5078 -0.0236 -0.0239 -0.0859 -0.0409 -0.0162 -0.0795 -0.0489 -0.0987 -0.1004 -0.0889 -0.0373 -0.2243 -0.3547 -0.0914 -0.1366 -0.1455 -0.1602 -0.1087 -0.0813 -2.8126 -0.1000 -0.0554 -0.1167 -0.0647 -0.0929 -0.0351 -0.8876 -0.1259 -0.0921 -0.0952 -0.0928 -0.2609 -0.2642 -0.0754 -0.0666
S-367	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
T-367	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return ( list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) - 1 ] ) / 2.; } }
H-367	-0.15899722278118134	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
D-367	-0.15899722278118134	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
P-367	-0.0885 -0.0502 -0.0976 -0.1793 -0.1127 -0.0972 -0.1807 -0.0971 -0.1091 -0.0834 -0.0892 -1.0846 -0.1161 -0.4997 -0.1215 -0.0703 -0.6177 -0.0642 -0.1738 -0.2854 -0.0858 -0.1011 -0.1120 -0.0962 -0.0956 -0.1304 -0.1934 -0.0841 -0.1261 -0.1249 -0.0986 -0.0750 -0.2117 -0.0982 -0.0883 -0.0827 -0.1094 -0.1043 -0.1376 -0.1599 -0.1216 -0.1299 -0.0985 -0.1393 -0.1219 -0.0845 -0.1220 -0.1633 -0.0912 -0.0630 -0.1072 -0.0941 -0.0887 -0.0733 -0.1417 -0.1497 -0.0936 -0.1089 -0.1555 -0.0787 -0.1118 -0.1384 -0.0899 -0.0530 -0.1271 -0.0842 -0.0852 -0.3125 -0.3087 -0.0689 -0.7511 -0.7849 -0.0800 -0.0930 -0.0760
S-317	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
T-317	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return ( list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) - 1 ] ) / 2.; } }
H-317	-0.15899713337421417	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
D-317	-0.15899713337421417	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
P-317	-0.0885 -0.0502 -0.0976 -0.1793 -0.1127 -0.0972 -0.1807 -0.0971 -0.1091 -0.0834 -0.0892 -1.0846 -0.1161 -0.4997 -0.1215 -0.0703 -0.6177 -0.0642 -0.1738 -0.2854 -0.0858 -0.1011 -0.1120 -0.0962 -0.0956 -0.1304 -0.1934 -0.0841 -0.1261 -0.1249 -0.0986 -0.0750 -0.2117 -0.0982 -0.0883 -0.0827 -0.1094 -0.1043 -0.1376 -0.1599 -0.1216 -0.1299 -0.0985 -0.1393 -0.1219 -0.0845 -0.1220 -0.1633 -0.0912 -0.0630 -0.1072 -0.0941 -0.0887 -0.0733 -0.1417 -0.1497 -0.0936 -0.1089 -0.1555 -0.0787 -0.1118 -0.1384 -0.0899 -0.0530 -0.1271 -0.0842 -0.0852 -0.3125 -0.3087 -0.0689 -0.7511 -0.7849 -0.0800 -0.0930 -0.0760
S-148	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
T-148	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return ( list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) - 1 ] ) / 2.; } }
H-148	-0.15899713337421417	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
D-148	-0.15899713337421417	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
P-148	-0.0885 -0.0502 -0.0976 -0.1793 -0.1127 -0.0972 -0.1807 -0.0971 -0.1091 -0.0834 -0.0892 -1.0846 -0.1161 -0.4997 -0.1215 -0.0703 -0.6177 -0.0642 -0.1738 -0.2854 -0.0858 -0.1011 -0.1120 -0.0962 -0.0956 -0.1304 -0.1934 -0.0841 -0.1261 -0.1249 -0.0986 -0.0750 -0.2117 -0.0982 -0.0883 -0.0827 -0.1094 -0.1043 -0.1376 -0.1599 -0.1216 -0.1299 -0.0985 -0.1393 -0.1219 -0.0845 -0.1220 -0.1633 -0.0912 -0.0630 -0.1072 -0.0941 -0.0887 -0.0733 -0.1417 -0.1497 -0.0936 -0.1089 -0.1555 -0.0787 -0.1118 -0.1384 -0.0899 -0.0530 -0.1271 -0.0842 -0.0852 -0.3125 -0.3087 -0.0689 -0.7511 -0.7849 -0.0800 -0.0930 -0.0760
S-259	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
T-259	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) + 1; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
H-259	-0.239462748169899	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
D-259	-0.239462748169899	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
P-259	-0.0995 -0.0432 -0.1080 -0.0136 -0.0932 -0.0542 -0.1056 -0.0166 -0.1097 -0.6827 -0.0982 -1.5250 -0.5032 -0.0331 -0.0881 -0.0890 -0.0923 -0.0330 -0.0832 -1.2428 -0.1321 -0.1066 -0.0676 -0.0781 -0.0874 -1.1711 -0.1069 -0.1180 -0.2836 -0.0954 -0.0659 -0.3628 -0.0789 -1.1957 -0.0350 -0.1400 -0.1226 -0.3837 -0.0956 -0.0852 -0.0838 -0.1209 -0.1687 -0.0772 -0.0898 -0.1368 -0.1179 -0.1528 -0.1266 -0.8521 -0.3130 -0.1778 -1.3590 -0.2900 -0.2534 -0.1151 -0.1332 -0.1592 -0.2614 -0.0921 -0.0839 -0.1134 -0.5974 -0.1054 -0.0150 -0.1024 -0.0874 -0.0881 -0.0909 -0.0883 -1.5769 -0.1468 -0.2087 -0.0943 -0.0800 -0.0406 -0.2423 -0.0789 -0.0696
S-176	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
T-176	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) + 1; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
H-176	-0.2394627034664154	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
D-176	-0.2394627034664154	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
P-176	-0.0995 -0.0432 -0.1080 -0.0136 -0.0932 -0.0542 -0.1056 -0.0166 -0.1097 -0.6827 -0.0982 -1.5250 -0.5032 -0.0331 -0.0881 -0.0890 -0.0923 -0.0330 -0.0832 -1.2428 -0.1320 -0.1066 -0.0676 -0.0781 -0.0874 -1.1711 -0.1069 -0.1180 -0.2836 -0.0954 -0.0659 -0.3628 -0.0789 -1.1957 -0.0350 -0.1400 -0.1226 -0.3837 -0.0956 -0.0852 -0.0838 -0.1209 -0.1687 -0.0772 -0.0898 -0.1368 -0.1179 -0.1528 -0.1266 -0.8521 -0.3130 -0.1778 -1.3590 -0.2900 -0.2534 -0.1151 -0.1332 -0.1592 -0.2614 -0.0921 -0.0839 -0.1134 -0.5974 -0.1054 -0.0150 -0.1024 -0.0874 -0.0881 -0.0909 -0.0883 -1.5769 -0.1468 -0.2087 -0.0943 -0.0800 -0.0406 -0.2423 -0.0789 -0.0696
S-64	public static String longest ( List < String > strings ) { int maxlen = 0; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
T-64	public static String longest ( List < String > strings ) { int maxlen = 0; for ( String string : strings ) { if ( string.length ( ) > maxlen ) { maxlen = string.length ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
H-64	-0.17481714487075806	public static String longest ( List < String > strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
D-64	-0.17481714487075806	public static String longest ( List < String > strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
P-64	-0.0963 -0.0448 -0.9682 -0.0173 -0.1117 -0.3671 -0.0783 -0.4623 -0.0706 -0.1275 -0.0893 -0.0891 -0.1494 -0.0254 -0.0868 -1.7383 -0.0818 -0.1419 -0.1104 -0.7588 -0.0624 -0.0520 -0.1493 -0.0875 -0.0976 -0.0975 -0.1191 -0.3159 -0.1232 -0.2927 -0.2909 -0.0905 -0.1600 -0.0547 -0.1224 -0.0942 -0.4430 -0.1020 -0.0861 -0.0840 -0.0147 -0.1188 -0.1369 -0.1161 -0.2193 -0.2240 -0.1111 -0.0904 -0.1011 -0.1033 -0.1547 -0.1156 -0.6354 -0.0525 -0.0660 -0.1424 -0.0880 -0.1010 -0.0954 -0.1164 -0.0944 -0.2633 -0.1546 -0.2118 -0.0847 -0.2809 -0.0280 -0.0774 -0.0978 -0.1128 -0.0797 -0.1787 -0.0798 -0.0995 -0.0940 -0.1755 -0.2037 -0.0855 -0.0653
S-14	public static String longest ( List < String > strings ) { int maxlen = 0; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
T-14	public static String longest ( List < String > strings ) { int maxlen = 0; for ( String string : strings ) { if ( string.length ( ) > maxlen ) { maxlen = string.length ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
H-14	-0.17481710016727448	public static String longest ( List < String > strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
D-14	-0.17481710016727448	public static String longest ( List < String > strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
P-14	-0.0963 -0.0448 -0.9682 -0.0173 -0.1117 -0.3671 -0.0783 -0.4623 -0.0706 -0.1275 -0.0893 -0.0891 -0.1494 -0.0254 -0.0868 -1.7383 -0.0818 -0.1419 -0.1104 -0.7588 -0.0624 -0.0520 -0.1493 -0.0875 -0.0976 -0.0975 -0.1191 -0.3159 -0.1232 -0.2927 -0.2909 -0.0905 -0.1600 -0.0547 -0.1224 -0.0942 -0.4430 -0.1020 -0.0861 -0.0840 -0.0147 -0.1188 -0.1369 -0.1161 -0.2193 -0.2240 -0.1111 -0.0904 -0.1011 -0.1033 -0.1547 -0.1156 -0.6354 -0.0525 -0.0660 -0.1424 -0.0880 -0.1010 -0.0954 -0.1164 -0.0944 -0.2633 -0.1546 -0.2118 -0.0847 -0.2809 -0.0280 -0.0774 -0.0978 -0.1128 -0.0797 -0.1787 -0.0798 -0.0995 -0.0940 -0.1755 -0.2037 -0.0855 -0.0653
S-348	public static long sum_squared_nums ( double [ ] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.floor ( ( int ) lst [ i ] ) ) * ( Math.ceil ( ( int ) lst [ i ] ) ) ; } return result; }
T-348	public static long sum_squared_nums ( double [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i++ ) { result += ( Math.ceil ( lst [ i ] ) ) * ( Math.ceil ( lst [ i ] ) ) ; } return result; }
H-348	-0.2654605805873871	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
D-348	-0.2654605805873871	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
P-348	-0.0979 -0.0445 -0.0779 -0.0832 -0.1138 -0.0236 -0.0858 -0.0875 -0.1172 -0.1558 -0.1431 -0.1034 -0.0585 -0.0871 -0.0822 -0.2393 -0.1064 -0.0818 -2.3880 -0.1045 -0.1829 -0.1089 -0.0845 -0.1277 -0.0835 -1.4835 -0.0936 -0.0916 -0.2892 -0.1002 -0.0641 -0.4964 -0.0803 -0.5129 -0.0856 -0.0921 -0.1734 -0.0936 -0.1166 -1.3988 -1.2012 -0.0787 -1.0438 -0.0675 -0.8046 -0.0895 -0.0972 -0.0878 -0.1082 -0.5245 -0.2306 -0.0713 -0.1903 -0.0812 -0.8940 -0.0804 -0.0918 -0.4687 -0.1571 -0.1147 -0.1209 -0.1776 -0.0869 -0.0803
S-150	public static long sum_squared_nums ( double [ ] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.floor ( ( int ) lst [ i ] ) ) * ( Math.ceil ( ( int ) lst [ i ] ) ) ; } return result; }
T-150	public static long sum_squared_nums ( double [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i++ ) { result += ( Math.ceil ( lst [ i ] ) ) * ( Math.ceil ( lst [ i ] ) ) ; } return result; }
H-150	-0.2654606103897095	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
D-150	-0.2654606103897095	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
P-150	-0.0979 -0.0445 -0.0779 -0.0832 -0.1138 -0.0236 -0.0858 -0.0875 -0.1172 -0.1558 -0.1431 -0.1034 -0.0585 -0.0871 -0.0822 -0.2393 -0.1064 -0.0818 -2.3880 -0.1045 -0.1829 -0.1089 -0.0845 -0.1277 -0.0835 -1.4835 -0.0936 -0.0916 -0.2892 -0.1002 -0.0641 -0.4964 -0.0803 -0.5129 -0.0856 -0.0921 -0.1734 -0.0936 -0.1166 -1.3988 -1.2012 -0.0787 -1.0438 -0.0675 -0.8046 -0.0895 -0.0972 -0.0878 -0.1082 -0.5245 -0.2306 -0.0713 -0.1903 -0.0812 -0.8940 -0.0804 -0.0918 -0.4687 -0.1571 -0.1147 -0.1209 -0.1776 -0.0869 -0.0803
S-34	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { result [ i ] = Math.floorDiv ( game [ i ] , guess [ i ] ) ; } return result; }
T-34	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { result [ i ] = Math.abs ( game [ i ] - guess [ i ] ) ; } return result; }
H-34	-0.20101800560951233	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length ; i += 1 ) { result [ i ] = game [ i ] ; } return result ; }
D-34	-0.20101800560951233	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length ; i += 1 ) { result [ i ] = game [ i ] ; } return result ; }
P-34	-0.0934 -0.0423 -0.1001 -0.2110 -0.0877 -0.0393 -0.1121 -0.0935 -0.1311 -0.0919 -0.0669 -1.6909 -0.0965 -0.1523 -0.0702 -0.0813 -0.0788 -0.0835 -0.0969 -0.1973 -0.0639 -0.0743 -0.0861 -0.0658 -0.0606 -0.0748 -0.0621 -0.0970 -0.0651 -0.1050 -0.0929 -0.1492 -0.1177 -0.0643 -0.0805 -0.0945 -1.1654 -0.0913 -0.0891 -0.2139 -0.0834 -0.0787 -0.1833 -0.0785 -0.1516 -0.2059 -0.0825 -0.0883 -0.1987 -0.0765 -0.1107 -0.0879 -0.1346 -2.7056 -0.0455 -0.1145 -0.0533 -0.4357 -0.6513 -0.3184 -0.0923 -0.1943 -0.0871 -0.0761
S-384	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-384	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-384	-0.23859144747257233	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-384	-0.23859144747257233	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-384	-0.0909 -0.0442 -0.1058 -0.0275 -0.1150 -1.5575 -0.0702 -0.9095 -0.0626 -0.0499 -0.0830 -0.0828 -0.0874 -0.0897 -0.0776 -1.4907 -0.1420 -0.1058 -0.0597 -0.0764 -0.0743 -1.5142 -0.0940 -0.0986 -0.3531 -0.1821 -0.1668 -0.5242 -0.0825 -0.0911 -0.0852 -1.0519 -0.0809 -0.0920 -0.1629 -0.1158 -0.2577 -0.2704 -0.1376 -0.0952 -0.0880 -0.1130 -0.6287 -0.5709 -0.0909 -1.1475 -0.0779 -0.1043 -0.1849 -0.3108 -0.1097 -0.1043 -0.0909 -0.1227 -0.1526 -1.2857 -0.1131 -0.4040 -0.2033 -0.2505 -0.0868 -0.0842 -0.0959 -0.4051 -0.0820 -0.0794 -0.1086 -0.0521 -0.0579 -0.1286 -0.2892 -0.1131 -0.1019 -0.0834 -0.1071 -0.0907 -0.1059 -0.0732 -0.1004 -0.1551 -0.0809 -0.0705
S-283	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-283	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-283	-0.2385915219783783	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-283	-0.2385915219783783	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-283	-0.0909 -0.0442 -0.1058 -0.0275 -0.1150 -1.5575 -0.0702 -0.9095 -0.0626 -0.0499 -0.0830 -0.0828 -0.0874 -0.0897 -0.0777 -1.4907 -0.1420 -0.1058 -0.0597 -0.0764 -0.0743 -1.5142 -0.0940 -0.0986 -0.3531 -0.1821 -0.1668 -0.5242 -0.0825 -0.0911 -0.0852 -1.0519 -0.0809 -0.0920 -0.1629 -0.1158 -0.2577 -0.2704 -0.1376 -0.0952 -0.0880 -0.1130 -0.6287 -0.5709 -0.0909 -1.1475 -0.0779 -0.1043 -0.1849 -0.3108 -0.1097 -0.1043 -0.0909 -0.1227 -0.1526 -1.2857 -0.1131 -0.4040 -0.2033 -0.2505 -0.0868 -0.0842 -0.0959 -0.4051 -0.0820 -0.0794 -0.1086 -0.0521 -0.0579 -0.1286 -0.2892 -0.1130 -0.1019 -0.0834 -0.1071 -0.0907 -0.1059 -0.0732 -0.1004 -0.1551 -0.0809 -0.0705
S-175	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-175	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-175	-0.23859144747257233	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-175	-0.23859144747257233	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-175	-0.0909 -0.0442 -0.1058 -0.0275 -0.1150 -1.5575 -0.0702 -0.9095 -0.0626 -0.0499 -0.0830 -0.0828 -0.0874 -0.0897 -0.0776 -1.4907 -0.1420 -0.1058 -0.0597 -0.0764 -0.0743 -1.5142 -0.0940 -0.0986 -0.3531 -0.1821 -0.1668 -0.5242 -0.0825 -0.0911 -0.0852 -1.0519 -0.0809 -0.0920 -0.1629 -0.1158 -0.2577 -0.2704 -0.1376 -0.0952 -0.0880 -0.1130 -0.6287 -0.5709 -0.0909 -1.1475 -0.0779 -0.1043 -0.1849 -0.3108 -0.1097 -0.1043 -0.0909 -0.1227 -0.1526 -1.2857 -0.1131 -0.4040 -0.2033 -0.2505 -0.0868 -0.0842 -0.0959 -0.4051 -0.0820 -0.0794 -0.1086 -0.0521 -0.0579 -0.1286 -0.2892 -0.1131 -0.1019 -0.0834 -0.1071 -0.0907 -0.1059 -0.0732 -0.1004 -0.1551 -0.0809 -0.0705
S-19	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-19	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-19	-0.23859144747257233	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-19	-0.23859144747257233	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-19	-0.0909 -0.0442 -0.1058 -0.0275 -0.1150 -1.5575 -0.0702 -0.9095 -0.0626 -0.0499 -0.0830 -0.0828 -0.0874 -0.0897 -0.0776 -1.4907 -0.1420 -0.1058 -0.0597 -0.0764 -0.0743 -1.5142 -0.0940 -0.0986 -0.3531 -0.1821 -0.1668 -0.5242 -0.0825 -0.0911 -0.0852 -1.0519 -0.0809 -0.0920 -0.1629 -0.1158 -0.2577 -0.2704 -0.1376 -0.0952 -0.0880 -0.1130 -0.6287 -0.5709 -0.0909 -1.1475 -0.0779 -0.1043 -0.1849 -0.3108 -0.1097 -0.1043 -0.0909 -0.1227 -0.1527 -1.2857 -0.1131 -0.4040 -0.2033 -0.2505 -0.0868 -0.0842 -0.0959 -0.4051 -0.0820 -0.0794 -0.1086 -0.0521 -0.0579 -0.1286 -0.2892 -0.1130 -0.1019 -0.0834 -0.1071 -0.0907 -0.1059 -0.0732 -0.1004 -0.1551 -0.0809 -0.0705
S-396	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-396	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-396	-0.22514042258262634	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-396	-0.22514042258262634	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-396	-0.0867 -0.0489 -1.3850 -0.0261 -0.1070 -0.1069 -0.1246 -0.0834 -0.0902 -0.1349 -0.0663 -0.0911 -1.0644 -0.1264 -0.1078 -0.0712 -0.0727 -0.0939 -1.0214 -0.0867 -0.1308 -0.1340 -0.1834 -0.0742 -0.0945 -0.0838 -0.1874 -0.0967 -0.4416 -0.0838 -0.0932 -0.0820 -0.1057 -0.2127 -0.0847 -0.0921 -0.1539 -0.0599 -1.1743 -0.0926 -1.2562 -0.1124 -0.3633 -0.2003 -0.0584 -0.0737 -0.0802 -0.1667 -0.0553 -0.1099 -0.4790 -0.4054 -0.7241 -0.6640 -0.1783 -0.2473 -0.0933 -0.0984 -0.1259 -0.0948 -0.0943 -0.1337 -1.1075 -0.0927 -0.1282 -0.0223 -0.0469 -0.0992 -0.1112 -0.1052 -0.0923 -0.0804 -0.0776
S-186	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-186	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-186	-0.22514039278030396	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-186	-0.22514039278030396	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-186	-0.0867 -0.0489 -1.3850 -0.0261 -0.1070 -0.1069 -0.1246 -0.0834 -0.0902 -0.1349 -0.0663 -0.0911 -1.0644 -0.1264 -0.1078 -0.0712 -0.0727 -0.0939 -1.0214 -0.0867 -0.1308 -0.1340 -0.1834 -0.0742 -0.0945 -0.0838 -0.1874 -0.0967 -0.4416 -0.0838 -0.0932 -0.0819 -0.1057 -0.2127 -0.0847 -0.0921 -0.1539 -0.0599 -1.1743 -0.0926 -1.2562 -0.1124 -0.3633 -0.2003 -0.0584 -0.0737 -0.0802 -0.1667 -0.0553 -0.1099 -0.4790 -0.4054 -0.7241 -0.6640 -0.1783 -0.2473 -0.0933 -0.0984 -0.1259 -0.0948 -0.0943 -0.1337 -1.1075 -0.0927 -0.1282 -0.0223 -0.0469 -0.0992 -0.1112 -0.1052 -0.0923 -0.0804 -0.0776
S-82	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-82	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-82	-0.2251405268907547	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-82	-0.2251405268907547	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-82	-0.0867 -0.0489 -1.3850 -0.0261 -0.1070 -0.1069 -0.1246 -0.0834 -0.0902 -0.1349 -0.0663 -0.0911 -1.0644 -0.1264 -0.1078 -0.0712 -0.0727 -0.0939 -1.0214 -0.0867 -0.1308 -0.1340 -0.1834 -0.0742 -0.0945 -0.0838 -0.1874 -0.0967 -0.4416 -0.0838 -0.0932 -0.0819 -0.1057 -0.2127 -0.0847 -0.0921 -0.1539 -0.0599 -1.1743 -0.0926 -1.2562 -0.1124 -0.3633 -0.2003 -0.0584 -0.0737 -0.0802 -0.1667 -0.0553 -0.1099 -0.4790 -0.4054 -0.7241 -0.6640 -0.1783 -0.2473 -0.0933 -0.0984 -0.1259 -0.0948 -0.0943 -0.1337 -1.1075 -0.0927 -0.1282 -0.0223 -0.0469 -0.0992 -0.1112 -0.1052 -0.0923 -0.0804 -0.0776
S-47	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-47	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-47	-0.22514048218727112	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-47	-0.22514048218727112	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-47	-0.0867 -0.0489 -1.3850 -0.0261 -0.1070 -0.1069 -0.1246 -0.0834 -0.0902 -0.1349 -0.0663 -0.0911 -1.0644 -0.1264 -0.1078 -0.0712 -0.0727 -0.0939 -1.0214 -0.0867 -0.1308 -0.1340 -0.1834 -0.0742 -0.0945 -0.0838 -0.1874 -0.0967 -0.4416 -0.0838 -0.0932 -0.0820 -0.1057 -0.2127 -0.0847 -0.0921 -0.1539 -0.0599 -1.1743 -0.0926 -1.2562 -0.1124 -0.3633 -0.2003 -0.0584 -0.0737 -0.0802 -0.1667 -0.0553 -0.1099 -0.4790 -0.4054 -0.7241 -0.6640 -0.1783 -0.2473 -0.0933 -0.0984 -0.1259 -0.0948 -0.0943 -0.1337 -1.1075 -0.0927 -0.1282 -0.0223 -0.0469 -0.0992 -0.1112 -0.1052 -0.0923 -0.0804 -0.0776
S-74	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } return result; }
T-74	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( 0, i + 1 ) ) ; } return result; }
H-74	-0.259565144777298	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-74	-0.259565144777298	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-74	-0.0976 -0.0518 -0.3711 -0.0918 -0.6224 -0.0624 -0.0554 -0.0998 -0.0185 -0.1170 -1.0836 -0.0842 -0.0911 -0.0820 -0.3401 -0.0978 -0.5364 -0.0616 -0.0639 -0.0802 -0.0651 -1.9710 -0.0873 -0.7101 -0.0616 -0.2736 -0.1980 -0.0795 -0.2240 -0.1095 -0.0776 -0.0798 -0.0935 -1.9405 -0.0945 -0.1064 -0.0919 -0.2576 -0.2753 -0.0832 -0.8976 -0.0951 -0.0826 -0.0775 -0.1974 -0.2117 -0.0839 -0.0878 -0.1880 -0.7937 -0.4990 -0.1082 -0.0664 -0.1682 -0.6950 -0.1169 -0.3465 -0.1700 -0.8255 -0.6350 -0.2698 -0.1484 -0.0884 -0.1106 -0.1127 -0.0960 -0.0906 -0.0933 -0.0746 -0.1208 -0.0768 -0.0720
S-46	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } return result; }
T-46	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( 0, i + 1 ) ) ; } return result; }
H-46	-0.25956517457962036	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-46	-0.25956517457962036	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-46	-0.0976 -0.0518 -0.3711 -0.0918 -0.6224 -0.0624 -0.0554 -0.0998 -0.0185 -0.1170 -1.0836 -0.0842 -0.0911 -0.0820 -0.3401 -0.0978 -0.5364 -0.0616 -0.0639 -0.0802 -0.0651 -1.9710 -0.0873 -0.7101 -0.0616 -0.2736 -0.1980 -0.0795 -0.2240 -0.1095 -0.0776 -0.0798 -0.0935 -1.9405 -0.0945 -0.1064 -0.0919 -0.2576 -0.2753 -0.0832 -0.8976 -0.0951 -0.0826 -0.0775 -0.1974 -0.2117 -0.0839 -0.0878 -0.1880 -0.7937 -0.4990 -0.1082 -0.0664 -0.1682 -0.6950 -0.1169 -0.3465 -0.1700 -0.8255 -0.6350 -0.2698 -0.1484 -0.0884 -0.1106 -0.1127 -0.0960 -0.0906 -0.0933 -0.0746 -0.1208 -0.0768 -0.0720
S-32	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n - 2 * i ) ; } return pile; }
T-32	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n + 2 * i ) ; } return pile; }
H-32	-0.2514636814594269	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
D-32	-0.2514636814594269	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
P-32	-0.1056 -0.0567 -3.3565 -0.0622 -0.5679 -0.1443 -0.4734 -0.0727 -1.5223 -0.0647 -0.0610 -0.0952 -0.0417 -0.0985 -0.0329 -0.0233 -0.1275 -0.1971 -0.0831 -0.0844 -0.0797 -0.2016 -0.0851 -0.0626 -0.1065 -0.0970 -0.1044 -1.2411 -0.0624 -0.0719 -0.0291 -0.0806 -0.0525 -0.0485 -0.1090 -0.0536 -0.1739 -0.0574 -0.0841 -2.1991 -0.0643 -0.6286 -0.3962 -0.0832 -0.1076 -0.1054 -0.0611 -0.0782 -0.0782 -1.1837 -0.0946 -0.0933 -0.1369 -0.2525 -0.0848 -0.7430 -0.0766 -0.0823 -0.0929 -0.0274 -0.3684 -0.3371 -0.0965 -0.4274 -0.1241 -0.2201 -0.1589 -0.1133 -0.0932 -0.0893 -0.0759 -0.1471 -0.0740 -0.0269 -0.1275 -0.0737 -0.0673
S-300	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result; }
T-300	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-300	-0.2894951403141022	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
D-300	-0.2894951403141022	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
P-300	-0.0979 -0.0586 -1.2631 -0.0673 -0.0856 -0.0181 -0.1129 -0.9379 -0.1230 -1.0459 -0.6412 -0.0811 -0.0831 -0.0850 -1.4738 -0.0776 -0.0779 -1.9491 -0.1514 -0.1092 -0.0758 -0.0756 -0.0843 -1.3848 -0.0961 -0.1026 -1.3176 -0.2208 -0.1612 -0.1076 -1.1028 -0.0828 -0.7528 -0.0993 -0.0891 -0.0890 -0.0767 -0.1043 -0.1530 -0.0789 -0.0864 -0.1157 -0.1110 -0.1343 -0.1176 -0.9474 -0.1077 -0.0896 -0.0832 -0.2681 -0.0741 -0.0985 -0.7689 -0.1027 -0.0849 -0.0783 -0.0821 -0.0793 -0.1339 -0.0662 -0.0621 -0.7170 -0.1019 -0.0825 -0.0955 -0.0838 -0.2562 -0.0825 -0.0691
S-142	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result; }
T-142	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-142	-0.2894953191280365	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
D-142	-0.2894953191280365	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
P-142	-0.0979 -0.0586 -1.2631 -0.0673 -0.0856 -0.0181 -0.1129 -0.9379 -0.1230 -1.0459 -0.6412 -0.0811 -0.0831 -0.0850 -1.4738 -0.0776 -0.0779 -1.9491 -0.1514 -0.1092 -0.0758 -0.0756 -0.0843 -1.3848 -0.0961 -0.1026 -1.3176 -0.2208 -0.1612 -0.1076 -1.1028 -0.0828 -0.7528 -0.0993 -0.0891 -0.0890 -0.0767 -0.1043 -0.1530 -0.0789 -0.0864 -0.1157 -0.1110 -0.1343 -0.1176 -0.9474 -0.1077 -0.0896 -0.0832 -0.2681 -0.0741 -0.0985 -0.7689 -0.1027 -0.0849 -0.0783 -0.0821 -0.0793 -0.1339 -0.0662 -0.0621 -0.7170 -0.1019 -0.0825 -0.0955 -0.0838 -0.2562 -0.0825 -0.0691
S-284	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n - 2 * i ) ; } return pile; }
T-284	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n + 2 * i ) ; } return pile; }
H-284	-0.2514638304710388	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
D-284	-0.2514638304710388	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
P-284	-0.1056 -0.0567 -3.3565 -0.0622 -0.5679 -0.1443 -0.4734 -0.0727 -1.5223 -0.0647 -0.0610 -0.0952 -0.0417 -0.0985 -0.0329 -0.0233 -0.1275 -0.1971 -0.0831 -0.0844 -0.0797 -0.2016 -0.0851 -0.0626 -0.1065 -0.0970 -0.1044 -1.2411 -0.0624 -0.0719 -0.0291 -0.0806 -0.0525 -0.0485 -0.1090 -0.0536 -0.1739 -0.0574 -0.0841 -2.1991 -0.0643 -0.6286 -0.3962 -0.0832 -0.1076 -0.1054 -0.0611 -0.0782 -0.0782 -1.1837 -0.0946 -0.0933 -0.1369 -0.2525 -0.0848 -0.7430 -0.0766 -0.0823 -0.0929 -0.0274 -0.3684 -0.3371 -0.0965 -0.4274 -0.1241 -0.2201 -0.1589 -0.1133 -0.0932 -0.0893 -0.0759 -0.1471 -0.0740 -0.0269 -0.1275 -0.0737 -0.0673
S-128	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
T-128	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray ( ) ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
H-128	-0.15506748855113983	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
D-128	-0.15506748855113983	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
P-128	-0.1120 -0.0401 -0.0967 -0.2251 -0.0710 -0.1259 -0.1046 -0.0115 -0.1006 -0.0493 -0.1089 -0.1021 -0.0959 -0.0832 -0.0876 -0.0956 -0.0836 -0.1119 -0.0590 -0.0764 -0.5860 -0.1006 -0.0511 -0.0939 -0.0605 -0.0905 -0.6328 -0.1944 -0.1147 -0.1612 -0.0929 -0.0667 -0.2011 -0.0856 -0.0672 -0.0567 -0.0810 -0.1096 -0.0844 -0.0287 -0.3245 -0.1318 -0.0916 -0.0865 -0.1137 -0.1175 -0.2258 -0.1533 -0.1025 -0.2464 -0.2638 -0.0700 -0.1527 -0.1345 -0.0803 -0.1133 -0.0970 -0.0796 -0.1309 -2.5506 -0.1914 -0.1610 -0.1046 -0.1005 -0.0939 -0.0828 -0.1620 -0.1888 -0.0670 -0.0949 -0.2401 -0.0792 -0.0299 -0.0793 -0.0699 -0.1160 -0.2271 -0.1097 -0.1118 -0.1086 -0.0781 -0.0680 -0.0786 -0.1209 -0.1107 -0.0786 -0.1060 -0.0566 -1.1291 -0.0725 -0.0907 -0.0681 -0.1094 -0.0902 -0.0725 -0.0712
S-69	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-69	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-69	-0.2290576696395874	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-69	-0.2290576696395874	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-69	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0930 -0.0140 -0.1113 -0.1102 -0.1507 -0.0766 -0.0534 -1.3760 -0.0919 -0.1056 -0.0909 -0.0898 -0.1453 -0.0729 -0.0927 -1.1536 -0.1283 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0810 -0.1030 -0.1877 -0.0984 -0.0713 -0.3710 -0.0815 -0.1033 -0.2378 -0.0851 -0.1786 -0.0601 -0.0861 -0.0716 -0.0902 -0.0894 -0.0854 -0.2138 -0.1183 -0.1392 -0.2418 -0.2212 -0.0894 -0.0965 -0.0843 -1.0222 -0.1647 -0.1487 -0.1097 -1.0352 -0.1055 -0.1153 -0.0934 -0.0852 -0.0976 -0.0667 -0.2450 -1.7928 -0.0887 -0.1082 -0.1315 -0.1748 -0.1695 -0.0851 -0.1008 -0.1374 -0.1169 -0.2125 -0.0671 -0.1155 -0.0840 -0.3599 -0.0630 -0.0861 -0.1689 -0.0874 -0.0951 -0.0911 -0.0533 -1.2364 -0.4209 -1.6086 -0.0925 -0.9300 -0.0993 -0.1205 -0.8452 -0.0818 -0.0749
S-322	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate [ 1 ] ; }
T-322	public static Integer next_smallest ( int [ ] lst ) { HashSet < Integer > numbers = new HashSet < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate [ 1 ] ; }
H-322	-0.2385409027338028	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers. toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
D-322	-0.2385409027338028	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers. toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
P-322	-0.0964 -0.0565 -1.5334 -0.0743 -0.1038 -0.0691 -0.0275 -0.1190 -0.1371 -0.1636 -0.1257 -0.0510 -0.0876 -0.0868 -0.4256 -0.0806 -0.8680 -0.0676 -0.0575 -0.0799 -0.0627 -1.7683 -0.0913 -1.1039 -0.0713 -0.2224 -0.1917 -0.0841 -0.1631 -0.1130 -1.5504 -0.0803 -0.0677 -0.0554 -0.0877 -0.1425 -0.2533 -0.2303 -0.1099 -0.0833 -0.0849 -0.0830 -1.3267 -0.2196 -0.0660 -0.0404 -0.0976 -0.0610 -0.0879 -0.0834 -0.1356 -1.5961 -0.1240 -0.0228 -1.1819 -0.0783 -0.2649 -0.0792 -0.1093 -0.0814 -0.1028 -1.5171 -0.0845 -0.0543 -0.1109 -0.0451 -0.0841 -0.0757 -0.0932 -0.0923 -0.1778 -0.1094 -0.0902 -0.1010 -0.0668 -0.2042 -0.0603 -0.1791 -0.1862 -0.0902 -0.1183 -0.1569 -0.1351 -0.1635 -0.0645 -0.0995 -0.0629 -0.0623 -0.8074 -0.0656 -0.0973 -0.0839 -0.0741
S-378	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-378	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-378	-0.16015619039535522	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-378	-0.16015619039535522	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-378	-0.0902 -0.0523 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3408 -0.0778 -0.1734 -0.0568 -0.0545 -1.3678 -0.0977 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0852 -0.0772 -0.0826 -1.2020 -0.0830 -0.0906 -0.0972 -0.1113 -0.1520 -0.4116 -0.0754 -0.0936 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0643 -0.0903 -0.0877 -0.1245 -0.0680 -1.2456 -0.0948 -0.0899 -0.0735 -0.1070 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1073 -0.1280 -0.0784 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1264 -0.2642 -0.1108 -0.1867 -0.0948 -0.1142 -0.0859 -0.0981 -0.1958 -0.1019 -0.1262 -0.0909 -0.1056 -0.1232 -0.1212 -0.0348 -0.4711 -0.1252 -0.0877 -0.1857 -0.0738 -0.8023 -0.1198 -0.1031 -0.1057 -0.0467 -0.4140 -0.0853 -0.0881
S-371	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-371	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-371	-0.16015619039535522	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-371	-0.16015619039535522	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-371	-0.0902 -0.0523 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3408 -0.0778 -0.1734 -0.0568 -0.0545 -1.3678 -0.0977 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0852 -0.0772 -0.0826 -1.2020 -0.0830 -0.0906 -0.0972 -0.1113 -0.1520 -0.4116 -0.0754 -0.0936 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0643 -0.0903 -0.0877 -0.1245 -0.0680 -1.2456 -0.0948 -0.0899 -0.0735 -0.1070 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1073 -0.1280 -0.0784 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1264 -0.2642 -0.1108 -0.1867 -0.0948 -0.1142 -0.0859 -0.0981 -0.1958 -0.1019 -0.1262 -0.0909 -0.1056 -0.1232 -0.1212 -0.0348 -0.4711 -0.1252 -0.0877 -0.1857 -0.0738 -0.8023 -0.1198 -0.1031 -0.1057 -0.0467 -0.4140 -0.0853 -0.0881
S-299	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-299	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-299	-0.1601562649011612	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-299	-0.1601562649011612	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-299	-0.0902 -0.0523 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3408 -0.0778 -0.1734 -0.0568 -0.0545 -1.3678 -0.0977 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0852 -0.0772 -0.0826 -1.2020 -0.0830 -0.0906 -0.0972 -0.1113 -0.1520 -0.4116 -0.0754 -0.0936 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0643 -0.0903 -0.0877 -0.1245 -0.0680 -1.2456 -0.0948 -0.0899 -0.0735 -0.1070 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1073 -0.1280 -0.0784 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1264 -0.2642 -0.1108 -0.1867 -0.0948 -0.1142 -0.0859 -0.0981 -0.1958 -0.1019 -0.1262 -0.0909 -0.1056 -0.1232 -0.1212 -0.0348 -0.4711 -0.1252 -0.0877 -0.1857 -0.0738 -0.8023 -0.1198 -0.1031 -0.1057 -0.0467 -0.4140 -0.0853 -0.0881
S-225	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-225	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-225	-0.16015619039535522	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-225	-0.16015619039535522	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-225	-0.0902 -0.0523 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3408 -0.0778 -0.1734 -0.0568 -0.0545 -1.3678 -0.0977 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0852 -0.0772 -0.0826 -1.2020 -0.0830 -0.0906 -0.0972 -0.1113 -0.1520 -0.4116 -0.0754 -0.0936 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0643 -0.0903 -0.0877 -0.1245 -0.0680 -1.2456 -0.0948 -0.0899 -0.0735 -0.1070 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1073 -0.1280 -0.0784 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1264 -0.2642 -0.1108 -0.1867 -0.0948 -0.1142 -0.0859 -0.0981 -0.1958 -0.1019 -0.1262 -0.0909 -0.1056 -0.1232 -0.1212 -0.0348 -0.4711 -0.1252 -0.0877 -0.1857 -0.0738 -0.8023 -0.1198 -0.1031 -0.1057 -0.0467 -0.4140 -0.0853 -0.0881
S-409	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-409	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-409	-0.23624464869499207	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-409	-0.23624464869499207	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-409	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-407	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-407	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-407	-0.23624448478221893	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-407	-0.23624448478221893	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-407	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-340	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-340	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-340	-0.23624464869499207	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-340	-0.23624464869499207	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-340	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-252	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-252	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-252	-0.23624463379383087	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-252	-0.23624463379383087	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-252	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-244	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-244	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-244	-0.2362445890903473	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-244	-0.2362445890903473	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-244	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-233	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-233	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-233	-0.2362445443868637	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-233	-0.2362445443868637	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-233	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-232	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-232	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-232	-0.2362445890903473	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-232	-0.2362445890903473	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-232	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-44	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-44	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-44	-0.2362445741891861	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-44	-0.2362445741891861	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-44	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0707
S-178	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-178	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size ( ) - 1 ) ) ; switched = ( ! switched ) ; } return result; }
H-178	-0.25777050852775574	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
D-178	-0.25777050852775574	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
P-178	-0.1018 -0.0457 -0.3405 -0.0951 -1.3475 -0.0632 -0.0201 -0.0809 -0.0208 -0.0883 -0.0456 -0.1129 -0.3598 -0.0928 -1.2648 -0.0716 -0.0510 -0.0851 -0.0779 -0.3394 -0.0953 -1.1334 -0.0610 -0.0585 -0.0790 -0.0583 -1.7308 -0.0871 -1.4783 -0.0641 -0.2751 -0.1331 -0.0795 -0.0947 -0.0352 -0.0993 -0.1508 -0.1921 -0.1753 -0.1125 -0.3458 -1.0855 -0.2403 -0.6231 -0.0907 -0.1104 -0.1323 -0.0891 -0.0899 -0.1698 -0.1216 -0.0793 -0.0850 -0.0872 -0.1135 -0.2328 -0.3742 -0.1199 -2.0438 -0.0988 -0.0616 -0.1263 -0.0881 -0.1090 -0.1032 -0.0919 -0.2578 -0.0566 -0.1274 -0.1172 -0.1311 -0.2319 -0.1105 -1.9969 -0.0880 -0.1058 -0.1133 -0.0871 -0.1053 -0.0979 -0.0853 -1.0964 -0.1331 -0.1137 -0.1481 -0.0847 -0.1612 -0.0685 -0.0947 -0.1354 -0.0787 -0.0767
S-199	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-199	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-199	-0.19870756566524506	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-199	-0.19870756566524506	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-199	-0.0930 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-379	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-379	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-379	-0.20283104479312897	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-379	-0.20283104479312897	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-379	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0838 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5187 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-293	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-293	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-293	-0.20283104479312897	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-293	-0.20283104479312897	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-293	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0838 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5188 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-262	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-262	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-262	-0.2028309553861618	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-262	-0.2028309553861618	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-262	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0839 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5187 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-245	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-245	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-245	-0.20283100008964539	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-245	-0.20283100008964539	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-245	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0838 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5187 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-188	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-188	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-188	-0.20283108949661255	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-188	-0.20283108949661255	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-188	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0838 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5187 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-173	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-173	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-173	-0.20283108949661255	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-173	-0.20283108949661255	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-173	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0838 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5188 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-144	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-144	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-144	-0.20283108949661255	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-144	-0.20283108949661255	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-144	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0839 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5188 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-96	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-96	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-96	-0.20283110439777374	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-96	-0.20283110439777374	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-96	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0839 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5188 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-26	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-26	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-26	-0.20283104479312897	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-26	-0.20283104479312897	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-26	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0838 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0787 -0.1022 -0.1905 -0.1426 -0.0627 -0.5187 -1.2630 -0.1761 -0.1065 -0.0792 -0.0729
S-406	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-406	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-406	-0.19870750606060028	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-406	-0.19870750606060028	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-406	-0.0929 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-353	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-353	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-353	-0.1987074464559555	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-353	-0.1987074464559555	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-353	-0.0929 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-344	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-344	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-344	-0.19870740175247192	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-344	-0.19870740175247192	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-344	-0.0929 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-311	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-311	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-311	-0.19870752096176147	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-311	-0.19870752096176147	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-311	-0.0929 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-305	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-305	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-305	-0.19870764017105103	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-305	-0.19870764017105103	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-305	-0.0929 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-210	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-210	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-210	-0.19870759546756744	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-210	-0.19870759546756744	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-210	-0.0930 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3314 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-269	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-269	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-269	-0.2327917218208313	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-269	-0.2327917218208313	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-269	-0.0931 -0.0496 -0.0984 -0.0374 -0.0596 -0.0052 -0.0856 -0.0397 -0.1114 -0.9699 -0.1020 -1.2893 -0.6655 -0.0942 -0.0849 -0.0924 -0.1180 -0.0536 -0.0886 -0.1133 -0.2007 -0.0870 -0.4265 -0.0821 -0.0837 -1.7265 -0.0711 -0.0840 -0.1085 -0.6401 -0.1706 -0.1136 -0.0731 -0.0739 -0.0847 -0.9498 -0.0867 -0.0752 -0.5587 -0.1422 -0.0942 -0.4527 -0.0767 -0.0956 -0.0742 -0.0922 -0.2136 -0.0807 -0.0748 -0.0993 -0.1074 -0.0654 -0.0788 -0.0975 -0.6601 -0.1030 -0.0702 -0.0674 -0.6061 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1228 -0.1142 -0.1849 -0.1134 -0.8535 -0.1271 -0.1209 -1.3874 -0.1823 -0.8054 -0.0818 -0.1054 -0.1008 -0.4970 -0.1050 -0.1173 -0.1230 -0.6368 -0.1061 -0.0947 -0.6453 -0.1101 -0.1215 -0.0785 -0.0832 -0.0871 -0.0866 -0.0847 -0.0460 -1.2173 -0.0849 -0.0761 -0.0775 -0.0319 -0.7548 -0.0742 -0.0765
S-213	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-213	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-213	-0.2327917516231537	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-213	-0.2327917516231537	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-213	-0.0931 -0.0496 -0.0984 -0.0374 -0.0596 -0.0052 -0.0856 -0.0397 -0.1114 -0.9699 -0.1020 -1.2893 -0.6655 -0.0942 -0.0849 -0.0924 -0.1180 -0.0536 -0.0886 -0.1133 -0.2007 -0.0870 -0.4265 -0.0821 -0.0837 -1.7265 -0.0711 -0.0840 -0.1085 -0.6401 -0.1706 -0.1136 -0.0731 -0.0739 -0.0847 -0.9498 -0.0867 -0.0752 -0.5587 -0.1422 -0.0942 -0.4527 -0.0767 -0.0956 -0.0742 -0.0922 -0.2136 -0.0807 -0.0748 -0.0993 -0.1074 -0.0654 -0.0788 -0.0975 -0.6601 -0.1030 -0.0702 -0.0674 -0.6061 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1228 -0.1142 -0.1849 -0.1134 -0.8535 -0.1271 -0.1209 -1.3874 -0.1823 -0.8054 -0.0818 -0.1054 -0.1008 -0.4970 -0.1050 -0.1173 -0.1230 -0.6368 -0.1061 -0.0947 -0.6453 -0.1101 -0.1215 -0.0785 -0.0832 -0.0871 -0.0866 -0.0847 -0.0460 -1.2173 -0.0849 -0.0761 -0.0775 -0.0319 -0.7548 -0.0742 -0.0765
S-208	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-208	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-208	-0.23279164731502533	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-208	-0.23279164731502533	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-208	-0.0931 -0.0496 -0.0984 -0.0374 -0.0596 -0.0052 -0.0856 -0.0397 -0.1114 -0.9699 -0.1019 -1.2893 -0.6655 -0.0942 -0.0849 -0.0924 -0.1180 -0.0536 -0.0886 -0.1133 -0.2007 -0.0870 -0.4265 -0.0821 -0.0837 -1.7265 -0.0711 -0.0840 -0.1085 -0.6401 -0.1706 -0.1136 -0.0731 -0.0739 -0.0847 -0.9498 -0.0867 -0.0752 -0.5587 -0.1422 -0.0942 -0.4527 -0.0767 -0.0956 -0.0742 -0.0922 -0.2136 -0.0807 -0.0748 -0.0993 -0.1074 -0.0654 -0.0788 -0.0975 -0.6601 -0.1030 -0.0702 -0.0674 -0.6060 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1228 -0.1142 -0.1849 -0.1134 -0.8535 -0.1271 -0.1209 -1.3874 -0.1823 -0.8054 -0.0818 -0.1054 -0.1008 -0.4970 -0.1050 -0.1173 -0.1230 -0.6368 -0.1061 -0.0947 -0.6453 -0.1101 -0.1215 -0.0785 -0.0832 -0.0871 -0.0866 -0.0847 -0.0460 -1.2173 -0.0849 -0.0761 -0.0775 -0.0319 -0.7548 -0.0742 -0.0765
S-397	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-397	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-397	-0.1809219866991043	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-397	-0.1809219866991043	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-397	-0.1012 -0.0466 -0.0983 -0.0322 -0.0130 -0.0878 -0.0505 -0.0872 -0.0491 -0.0914 -0.0944 -0.1223 -0.1098 -0.2035 -0.0840 -0.0693 -0.0878 -0.0880 -0.1521 -0.1150 -0.0710 -0.0991 -0.0877 -1.3705 -0.0755 -0.0770 -0.1223 -0.0874 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3503 -0.1033 -0.0800 -0.0757 -0.1010 -0.0787 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0925 -0.1086 -0.0706 -0.0988 -0.1061 -0.1158 -0.6197 -0.0867 -0.0697 -0.0762 -0.1049 -0.0797 -1.1159 -0.0965 -0.0902 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2600 -0.0745 -0.1367 -0.0707 -0.0946 -0.2035 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5767 -0.1805 -0.0882 -0.1380 -0.0881 -1.3470 -0.1117 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-223	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-223	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-223	-0.18092195689678192	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-223	-0.18092195689678192	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-223	-0.1012 -0.0466 -0.0983 -0.0322 -0.0130 -0.0878 -0.0505 -0.0872 -0.0491 -0.0914 -0.0944 -0.1223 -0.1098 -0.2035 -0.0840 -0.0693 -0.0878 -0.0880 -0.1521 -0.1150 -0.0710 -0.0991 -0.0877 -1.3705 -0.0755 -0.0770 -0.1223 -0.0874 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3503 -0.1033 -0.0800 -0.0757 -0.1010 -0.0787 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0925 -0.1086 -0.0706 -0.0988 -0.1061 -0.1158 -0.6197 -0.0867 -0.0697 -0.0762 -0.1049 -0.0797 -1.1159 -0.0965 -0.0902 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2600 -0.0745 -0.1367 -0.0707 -0.0946 -0.2035 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5767 -0.1805 -0.0882 -0.1380 -0.0881 -1.3470 -0.1117 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-167	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-167	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-167	-0.1809220016002655	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-167	-0.1809220016002655	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-167	-0.1012 -0.0466 -0.0983 -0.0322 -0.0130 -0.0878 -0.0505 -0.0872 -0.0491 -0.0914 -0.0944 -0.1223 -0.1098 -0.2035 -0.0840 -0.0693 -0.0878 -0.0880 -0.1521 -0.1150 -0.0710 -0.0991 -0.0877 -1.3705 -0.0755 -0.0770 -0.1223 -0.0874 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3503 -0.1033 -0.0800 -0.0757 -0.1010 -0.0787 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0925 -0.1086 -0.0706 -0.0988 -0.1061 -0.1158 -0.6197 -0.0867 -0.0697 -0.0762 -0.1049 -0.0797 -1.1159 -0.0965 -0.0902 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2600 -0.0745 -0.1367 -0.0707 -0.0946 -0.2035 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5767 -0.1805 -0.0882 -0.1380 -0.0881 -1.3470 -0.1117 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-163	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-163	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-163	-0.18092195689678192	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-163	-0.18092195689678192	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-163	-0.1012 -0.0466 -0.0983 -0.0322 -0.0130 -0.0878 -0.0505 -0.0872 -0.0491 -0.0914 -0.0944 -0.1223 -0.1098 -0.2035 -0.0840 -0.0693 -0.0878 -0.0880 -0.1521 -0.1150 -0.0710 -0.0991 -0.0877 -1.3705 -0.0755 -0.0770 -0.1223 -0.0874 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3503 -0.1033 -0.0800 -0.0757 -0.1010 -0.0787 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0925 -0.1086 -0.0706 -0.0988 -0.1061 -0.1158 -0.6197 -0.0867 -0.0697 -0.0762 -0.1049 -0.0797 -1.1159 -0.0965 -0.0902 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2600 -0.0745 -0.1367 -0.0707 -0.0946 -0.2035 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5767 -0.1805 -0.0882 -0.1380 -0.0881 -1.3470 -0.1117 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-112	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-112	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-112	-0.18092210590839386	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-112	-0.18092210590839386	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-112	-0.1012 -0.0466 -0.0983 -0.0322 -0.0130 -0.0878 -0.0505 -0.0872 -0.0491 -0.0914 -0.0944 -0.1223 -0.1098 -0.2035 -0.0840 -0.0693 -0.0878 -0.0880 -0.1521 -0.1150 -0.0710 -0.0991 -0.0877 -1.3705 -0.0755 -0.0770 -0.1223 -0.0874 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3503 -0.1033 -0.0800 -0.0757 -0.1010 -0.0787 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0925 -0.1086 -0.0706 -0.0988 -0.1061 -0.1158 -0.6197 -0.0867 -0.0697 -0.0762 -0.1049 -0.0797 -1.1159 -0.0965 -0.0902 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2600 -0.0745 -0.1367 -0.0707 -0.0946 -0.2035 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5767 -0.1805 -0.0882 -0.1380 -0.0881 -1.3470 -0.1117 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-25	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-25	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-25	-0.18092210590839386	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-25	-0.18092210590839386	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-25	-0.1012 -0.0466 -0.0983 -0.0322 -0.0130 -0.0878 -0.0505 -0.0872 -0.0491 -0.0914 -0.0944 -0.1223 -0.1098 -0.2035 -0.0840 -0.0693 -0.0878 -0.0880 -0.1521 -0.1150 -0.0710 -0.0991 -0.0877 -1.3705 -0.0755 -0.0770 -0.1223 -0.0874 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3503 -0.1033 -0.0800 -0.0757 -0.1010 -0.0787 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0925 -0.1086 -0.0706 -0.0988 -0.1061 -0.1158 -0.6197 -0.0867 -0.0697 -0.0762 -0.1049 -0.0797 -1.1159 -0.0965 -0.0902 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2600 -0.0745 -0.1367 -0.0707 -0.0946 -0.2035 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5767 -0.1805 -0.0882 -0.1380 -0.0881 -1.3470 -0.1117 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-362	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-362	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-362	-0.2418915033340454	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-362	-0.2418915033340454	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-362	-0.1048 -0.0620 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0826 -0.0463 -0.0897 -0.0875 -1.8173 -0.0994 -0.0838 -1.7148 -0.1658 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3773 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1460 -0.0473 -0.0819 -0.6244 -0.1209 -0.1127 -0.0765 -0.0730 -0.0858 -0.9743 -0.1033 -0.1597 -0.1154 -0.1077 -0.0764 -0.4370 -0.0871 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1386 -0.1210 -0.1388 -0.1888 -0.1068 -0.1678 -0.0812 -0.2450 -0.0889 -0.1619 -0.1070 -0.0825 -0.0496 -0.1201 -1.8167 -0.1130 -0.1659 -0.1184 -0.0838 -0.0940 -0.1901 -0.6178 -0.1350 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2922 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.4005 -0.2734 -0.1075 -0.0841 -0.0777
S-282	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-282	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-282	-0.24189163744449615	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-282	-0.24189163744449615	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-282	-0.1048 -0.0620 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0826 -0.0463 -0.0897 -0.0875 -1.8173 -0.0994 -0.0838 -1.7148 -0.1658 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3773 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1460 -0.0473 -0.0819 -0.6244 -0.1209 -0.1127 -0.0765 -0.0730 -0.0858 -0.9743 -0.1033 -0.1597 -0.1154 -0.1077 -0.0764 -0.4370 -0.0871 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1386 -0.1210 -0.1388 -0.1888 -0.1068 -0.1678 -0.0812 -0.2450 -0.0889 -0.1619 -0.1070 -0.0825 -0.0496 -0.1201 -1.8167 -0.1130 -0.1659 -0.1184 -0.0838 -0.0940 -0.1901 -0.6178 -0.1350 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2922 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.4005 -0.2734 -0.1075 -0.0841 -0.0777
S-277	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-277	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-277	-0.24189157783985138	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-277	-0.24189157783985138	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-277	-0.1048 -0.0620 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0826 -0.0463 -0.0897 -0.0875 -1.8173 -0.0994 -0.0838 -1.7148 -0.1658 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3773 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1460 -0.0473 -0.0819 -0.6244 -0.1209 -0.1127 -0.0765 -0.0730 -0.0858 -0.9743 -0.1033 -0.1597 -0.1154 -0.1077 -0.0764 -0.4370 -0.0871 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1386 -0.1210 -0.1388 -0.1888 -0.1068 -0.1678 -0.0812 -0.2450 -0.0889 -0.1619 -0.1070 -0.0825 -0.0496 -0.1201 -1.8167 -0.1130 -0.1659 -0.1184 -0.0838 -0.0940 -0.1901 -0.6178 -0.1350 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2922 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.4005 -0.2734 -0.1075 -0.0841 -0.0777
S-214	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-214	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-214	-0.24189157783985138	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-214	-0.24189157783985138	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-214	-0.1048 -0.0620 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0826 -0.0463 -0.0897 -0.0875 -1.8173 -0.0994 -0.0838 -1.7148 -0.1658 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3773 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1460 -0.0473 -0.0819 -0.6244 -0.1209 -0.1127 -0.0765 -0.0730 -0.0858 -0.9743 -0.1033 -0.1597 -0.1154 -0.1077 -0.0764 -0.4370 -0.0871 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1386 -0.1210 -0.1388 -0.1888 -0.1068 -0.1678 -0.0812 -0.2450 -0.0889 -0.1619 -0.1070 -0.0825 -0.0496 -0.1201 -1.8167 -0.1130 -0.1659 -0.1184 -0.0838 -0.0940 -0.1901 -0.6178 -0.1350 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2922 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.4005 -0.2734 -0.1075 -0.0841 -0.0777
S-143	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-143	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-143	-0.2418915033340454	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-143	-0.2418915033340454	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-143	-0.1048 -0.0620 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0826 -0.0463 -0.0897 -0.0875 -1.8173 -0.0994 -0.0838 -1.7148 -0.1658 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3773 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1460 -0.0473 -0.0819 -0.6244 -0.1209 -0.1127 -0.0765 -0.0730 -0.0858 -0.9743 -0.1033 -0.1597 -0.1154 -0.1077 -0.0764 -0.4370 -0.0871 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1386 -0.1210 -0.1388 -0.1888 -0.1068 -0.1678 -0.0812 -0.2450 -0.0889 -0.1619 -0.1070 -0.0825 -0.0496 -0.1201 -1.8167 -0.1130 -0.1659 -0.1184 -0.0838 -0.0940 -0.1901 -0.6178 -0.1350 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2922 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.4005 -0.2734 -0.1075 -0.0841 -0.0777
S-43	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-43	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-43	-0.24189147353172302	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-43	-0.24189147353172302	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-43	-0.1048 -0.0620 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0826 -0.0463 -0.0897 -0.0875 -1.8173 -0.0994 -0.0838 -1.7148 -0.1658 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3773 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1460 -0.0473 -0.0819 -0.6244 -0.1209 -0.1127 -0.0765 -0.0730 -0.0858 -0.9743 -0.1033 -0.1597 -0.1154 -0.1077 -0.0764 -0.4370 -0.0871 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1386 -0.1210 -0.1388 -0.1888 -0.1068 -0.1678 -0.0812 -0.2450 -0.0889 -0.1619 -0.1070 -0.0825 -0.0496 -0.1201 -1.8167 -0.1130 -0.1659 -0.1184 -0.0838 -0.0940 -0.1901 -0.6178 -0.1350 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2922 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.4005 -0.2734 -0.1075 -0.0841 -0.0777
S-410	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-410	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-410	-0.19929064810276031	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-410	-0.19929064810276031	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-410	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-402	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-402	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-402	-0.1992906928062439	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-402	-0.1992906928062439	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-402	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0807 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-337	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-337	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-337	-0.19929057359695435	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-337	-0.19929057359695435	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-337	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-234	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-234	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-234	-0.19929061830043793	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-234	-0.19929061830043793	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-234	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1048 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-70	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-70	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-70	-0.1992906779050827	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-70	-0.1992906779050827	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-70	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-66	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-66	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-66	-0.19929061830043793	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-66	-0.19929061830043793	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-66	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-48	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-48	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-48	-0.1992906928062439	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-48	-0.1992906928062439	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-48	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0807 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-20	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-20	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-20	-0.19929061830043793	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-20	-0.19929061830043793	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-20	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-16	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-16	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-16	-0.19929064810276031	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-16	-0.19929064810276031	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-16	-0.1031 -0.0461 -0.1130 -0.0763 -0.0150 -0.0878 -0.0542 -0.0145 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7411 -0.1544 -0.1066 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1041 -0.0936 -0.4664 -0.0784 -0.0866 -0.1800 -0.0776 -0.0868 -0.2242 -0.1114 -0.2078 -0.2713 -0.0577 -0.1662 -0.0987 -0.3496 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8907 -0.0979 -0.0760 -0.2113 -0.1908 -0.7224 -0.0639 -0.3528 -0.0877 -0.0839 -0.0725 -0.0949 -0.1584 -0.0751 -0.0994 -0.1366 -0.1119 -0.1904 -0.2459 -0.5953 -1.9082 -0.1139 -0.1068 -1.1317 -0.0811 -0.1112 -0.1158 -0.1080 -0.4287 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7561 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1205 -0.2474 -0.0849 -0.0749
S-94	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
T-94	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
H-94	-0.14477579295635223	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
D-94	-0.14477579295635223	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
P-94	-0.0987 -0.0474 -0.1181 -0.0913 -0.1123 -0.0194 -0.0707 -0.1168 -0.1195 -0.1695 -0.1122 -0.0755 -0.0893 -0.0843 -0.0932 -0.0844 -0.0922 -1.5420 -0.1445 -0.1016 -0.0707 -0.0768 -0.0855 -1.4943 -0.0884 -0.1085 -0.4030 -0.0986 -0.0512 -0.2957 -0.0819 -0.1202 -0.2684 -0.0804 -0.0927 -0.1294 -0.1130 -0.2260 -0.3447 -0.1262 -0.1854 -0.1170 -0.0872 -0.1357 -0.0653 -0.1023 -0.0964 -0.0959 -0.0803 -0.0809 -0.0955 -0.1100 -0.0870 -0.0787 -0.0806 -0.1189 -0.0949 -0.1078 -0.1217 -0.3161 -0.1080 -0.1092 -0.1023 -0.0927 -0.1345 -0.0687 -0.0779 -0.0953 -0.0944 -0.0756 -0.0694 -0.0770 -0.1005 -0.0902 -0.0677 -0.2109 -0.1021 -0.1544 -0.0802 -0.0742 -0.0734 -0.0984 -0.0837 -0.1665 -0.1118 -0.0931 -0.1016 -0.1521 -0.0871 -0.0811
S-62	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
T-62	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
H-62	-0.14477577805519104	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
D-62	-0.14477577805519104	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
P-62	-0.0987 -0.0474 -0.1181 -0.0913 -0.1123 -0.0194 -0.0707 -0.1168 -0.1195 -0.1695 -0.1122 -0.0755 -0.0893 -0.0843 -0.0932 -0.0844 -0.0922 -1.5420 -0.1445 -0.1016 -0.0707 -0.0768 -0.0855 -1.4943 -0.0884 -0.1085 -0.4030 -0.0986 -0.0512 -0.2957 -0.0819 -0.1202 -0.2684 -0.0804 -0.0927 -0.1294 -0.1130 -0.2260 -0.3447 -0.1262 -0.1854 -0.1170 -0.0872 -0.1357 -0.0653 -0.1023 -0.0964 -0.0959 -0.0803 -0.0809 -0.0955 -0.1100 -0.0870 -0.0787 -0.0806 -0.1189 -0.0949 -0.1078 -0.1217 -0.3161 -0.1080 -0.1092 -0.1023 -0.0927 -0.1345 -0.0687 -0.0779 -0.0953 -0.0944 -0.0756 -0.0694 -0.0770 -0.1005 -0.0902 -0.0677 -0.2109 -0.1021 -0.1544 -0.0802 -0.0742 -0.0734 -0.0984 -0.0837 -0.1665 -0.1118 -0.0931 -0.1016 -0.1521 -0.0871 -0.0811
S-15	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
T-15	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
H-15	-0.14477591216564178	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
D-15	-0.14477591216564178	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
P-15	-0.0987 -0.0474 -0.1181 -0.0913 -0.1123 -0.0194 -0.0707 -0.1168 -0.1195 -0.1695 -0.1122 -0.0755 -0.0893 -0.0843 -0.0932 -0.0844 -0.0922 -1.5420 -0.1445 -0.1016 -0.0707 -0.0768 -0.0855 -1.4943 -0.0884 -0.1085 -0.4030 -0.0986 -0.0512 -0.2957 -0.0819 -0.1202 -0.2684 -0.0804 -0.0927 -0.1294 -0.1130 -0.2260 -0.3447 -0.1262 -0.1854 -0.1170 -0.0872 -0.1357 -0.0653 -0.1023 -0.0964 -0.0959 -0.0803 -0.0809 -0.0955 -0.1100 -0.0870 -0.0787 -0.0806 -0.1189 -0.0949 -0.1078 -0.1217 -0.3161 -0.1080 -0.1092 -0.1023 -0.0927 -0.1345 -0.0687 -0.0779 -0.0953 -0.0944 -0.0756 -0.0694 -0.0770 -0.1005 -0.0902 -0.0677 -0.2109 -0.1021 -0.1544 -0.0802 -0.0742 -0.0734 -0.0984 -0.0837 -0.1665 -0.1118 -0.0931 -0.1016 -0.1521 -0.0871 -0.0811
S-258	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-258	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-258	-0.22913911938667297	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-258	-0.22913911938667297	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-258	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0930 -0.0142 -0.1113 -0.1102 -0.1507 -0.0766 -0.0534 -1.3760 -0.0919 -0.1056 -0.0902 -0.0898 -0.1455 -0.0729 -0.0927 -1.1597 -0.1293 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0804 -0.1030 -0.1884 -0.0984 -0.0713 -0.3709 -0.0815 -0.1033 -0.2379 -0.0851 -0.1786 -0.0601 -0.0854 -0.0716 -0.0902 -0.0893 -0.0854 -0.2135 -0.1182 -0.1391 -0.2418 -0.2212 -0.0893 -0.0966 -0.0843 -1.0222 -0.1647 -0.1488 -0.1105 -1.0356 -0.1054 -0.1153 -0.0927 -0.0853 -0.0975 -0.0667 -0.2454 -1.7928 -0.0887 -0.1082 -0.1315 -0.1744 -0.1696 -0.0851 -0.1008 -0.1364 -0.1169 -0.2125 -0.0671 -0.1155 -0.0846 -0.3599 -0.0630 -0.0861 -0.1690 -0.0874 -0.0958 -0.0910 -0.0533 -1.2299 -0.4201 -1.6161 -0.0925 -0.9301 -0.0993 -0.1213 -0.8452 -0.0817 -0.0744
S-387	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
T-387	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray ( ) ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
H-387	-0.15506234765052795	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
D-387	-0.15506234765052795	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
P-387	-0.1120 -0.0401 -0.0967 -0.2251 -0.0716 -0.1260 -0.1046 -0.0115 -0.1006 -0.0492 -0.1089 -0.1028 -0.0959 -0.0832 -0.0876 -0.0956 -0.0836 -0.1119 -0.0590 -0.0764 -0.5862 -0.1006 -0.0509 -0.0939 -0.0604 -0.0905 -0.6329 -0.1959 -0.1147 -0.1612 -0.0929 -0.0667 -0.2008 -0.0856 -0.0677 -0.0572 -0.0810 -0.1096 -0.0844 -0.0287 -0.3245 -0.1317 -0.0916 -0.0865 -0.1136 -0.1175 -0.2252 -0.1533 -0.1025 -0.2474 -0.2634 -0.0700 -0.1527 -0.1345 -0.0803 -0.1131 -0.0970 -0.0796 -0.1308 -2.5474 -0.1916 -0.1610 -0.1046 -0.1005 -0.0939 -0.0828 -0.1620 -0.1888 -0.0665 -0.0949 -0.2401 -0.0792 -0.0299 -0.0793 -0.0699 -0.1151 -0.2271 -0.1097 -0.1118 -0.1086 -0.0781 -0.0680 -0.0786 -0.1200 -0.1107 -0.0786 -0.1060 -0.0565 -1.1308 -0.0725 -0.0907 -0.0681 -0.1094 -0.0902 -0.0725 -0.0711
S-354	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
T-354	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray ( ) ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
H-354	-0.15506239235401154	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
D-354	-0.15506239235401154	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
P-354	-0.1120 -0.0401 -0.0967 -0.2251 -0.0716 -0.1260 -0.1046 -0.0115 -0.1006 -0.0492 -0.1089 -0.1028 -0.0959 -0.0832 -0.0876 -0.0956 -0.0836 -0.1119 -0.0590 -0.0764 -0.5862 -0.1006 -0.0509 -0.0939 -0.0604 -0.0905 -0.6329 -0.1959 -0.1147 -0.1612 -0.0929 -0.0667 -0.2008 -0.0856 -0.0677 -0.0572 -0.0810 -0.1096 -0.0844 -0.0287 -0.3245 -0.1317 -0.0916 -0.0865 -0.1136 -0.1175 -0.2252 -0.1533 -0.1025 -0.2474 -0.2634 -0.0700 -0.1527 -0.1345 -0.0803 -0.1131 -0.0970 -0.0796 -0.1308 -2.5474 -0.1916 -0.1610 -0.1046 -0.1005 -0.0939 -0.0828 -0.1620 -0.1888 -0.0665 -0.0949 -0.2401 -0.0792 -0.0299 -0.0793 -0.0699 -0.1151 -0.2271 -0.1097 -0.1118 -0.1086 -0.0781 -0.0680 -0.0786 -0.1200 -0.1107 -0.0786 -0.1060 -0.0565 -1.1308 -0.0725 -0.0907 -0.0681 -0.1094 -0.0902 -0.0725 -0.0711
S-339	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-339	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-339	-0.22913923859596252	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-339	-0.22913923859596252	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-339	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0930 -0.0142 -0.1113 -0.1102 -0.1507 -0.0766 -0.0534 -1.3760 -0.0919 -0.1056 -0.0902 -0.0898 -0.1455 -0.0729 -0.0927 -1.1597 -0.1293 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0804 -0.1030 -0.1884 -0.0984 -0.0713 -0.3709 -0.0815 -0.1033 -0.2379 -0.0851 -0.1786 -0.0601 -0.0854 -0.0716 -0.0902 -0.0893 -0.0854 -0.2135 -0.1182 -0.1391 -0.2418 -0.2212 -0.0893 -0.0966 -0.0843 -1.0222 -0.1647 -0.1488 -0.1105 -1.0356 -0.1054 -0.1153 -0.0927 -0.0853 -0.0975 -0.0667 -0.2454 -1.7928 -0.0887 -0.1082 -0.1315 -0.1744 -0.1696 -0.0851 -0.1008 -0.1364 -0.1169 -0.2125 -0.0671 -0.1155 -0.0846 -0.3599 -0.0630 -0.0861 -0.1690 -0.0874 -0.0958 -0.0910 -0.0533 -1.2299 -0.4201 -1.6161 -0.0925 -0.9301 -0.0993 -0.1213 -0.8452 -0.0817 -0.0744
S-328	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-328	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-328	-0.22913911938667297	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-328	-0.22913911938667297	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-328	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0930 -0.0142 -0.1113 -0.1102 -0.1507 -0.0766 -0.0534 -1.3760 -0.0919 -0.1056 -0.0902 -0.0898 -0.1455 -0.0728 -0.0927 -1.1597 -0.1293 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0804 -0.1030 -0.1884 -0.0984 -0.0713 -0.3709 -0.0815 -0.1033 -0.2379 -0.0851 -0.1786 -0.0601 -0.0854 -0.0716 -0.0902 -0.0893 -0.0854 -0.2135 -0.1182 -0.1391 -0.2418 -0.2212 -0.0893 -0.0966 -0.0843 -1.0222 -0.1647 -0.1488 -0.1105 -1.0356 -0.1054 -0.1153 -0.0927 -0.0853 -0.0975 -0.0667 -0.2454 -1.7928 -0.0887 -0.1082 -0.1315 -0.1744 -0.1696 -0.0851 -0.1008 -0.1364 -0.1169 -0.2125 -0.0671 -0.1155 -0.0846 -0.3599 -0.0630 -0.0861 -0.1690 -0.0874 -0.0958 -0.0910 -0.0533 -1.2299 -0.4201 -1.6161 -0.0925 -0.9301 -0.0993 -0.1213 -0.8452 -0.0817 -0.0744
S-308	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-308	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-308	-0.2906174957752228	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-308	-0.2906174957752228	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-308	-0.1051 -0.0638 -1.3786 -0.1293 -0.0479 -0.1055 -0.0264 -0.1121 -1.0949 -0.0829 -0.0909 -0.0593 -1.7577 -0.8375 -0.2276 -0.1273 -0.0442 -0.0889 -0.0909 -2.4849 -0.1084 -0.1015 -0.1455 -1.3297 -0.1692 -0.1039 -0.0865 -1.2524 -0.0873 -0.0249 -0.0826 -0.0351 -1.1356 -0.1739 -0.1166 -0.9909 -0.0776 -0.0638 -0.0624 -0.0883 -0.0832 -0.1267 -0.0950 -0.1003 -0.6861 -0.0935 -0.0421 -0.0832 -0.8107 -0.1314 -0.1149 -0.0974 -0.0896 -0.0566 -0.0664 -0.1136 -0.0600 -0.0407 -0.2653 -0.1069 -0.0901 -0.0907 -0.1490 -0.1239 -0.6442 -0.1004 -0.2099 -0.1282 -0.1196 -0.0889 -0.1653 -0.0904 -0.0858 -1.0240 -0.0950 -1.4801 -0.1436 -0.1072 -0.4074 -0.0956 -0.3440 -0.1077 -0.1280 -0.0812 -0.1074 -0.1177 -0.0818 -0.1264 -0.0854 -1.6726 -0.1243 -0.1210 -0.2047 -0.2005 -0.0997 -0.0897 -1.3582 -0.2126 -0.1550 -0.0931 -1.6615 -0.1212 -0.0692 -0.0806 -0.1027 -0.0668 -0.0744 -0.0219 -0.0758 -0.2896 -0.7011 -0.0893 -0.0806
S-106	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-106	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-106	-0.2906176447868347	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-106	-0.2906176447868347	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-106	-0.1051 -0.0638 -1.3786 -0.1293 -0.0479 -0.1055 -0.0264 -0.1121 -1.0949 -0.0829 -0.0909 -0.0593 -1.7577 -0.8375 -0.2276 -0.1273 -0.0442 -0.0889 -0.0909 -2.4849 -0.1084 -0.1015 -0.1455 -1.3297 -0.1692 -0.1039 -0.0865 -1.2524 -0.0873 -0.0249 -0.0826 -0.0351 -1.1356 -0.1739 -0.1166 -0.9909 -0.0776 -0.0638 -0.0624 -0.0883 -0.0832 -0.1267 -0.0950 -0.1003 -0.6861 -0.0935 -0.0421 -0.0832 -0.8107 -0.1314 -0.1149 -0.0974 -0.0896 -0.0566 -0.0664 -0.1136 -0.0600 -0.0407 -0.2653 -0.1069 -0.0901 -0.0907 -0.1490 -0.1239 -0.6442 -0.1004 -0.2099 -0.1282 -0.1196 -0.0889 -0.1653 -0.0904 -0.0858 -1.0240 -0.0950 -1.4801 -0.1436 -0.1072 -0.4074 -0.0956 -0.3440 -0.1077 -0.1280 -0.0812 -0.1074 -0.1177 -0.0818 -0.1264 -0.0854 -1.6726 -0.1243 -0.1210 -0.2047 -0.2005 -0.0997 -0.0897 -1.3582 -0.2126 -0.1550 -0.0931 -1.6615 -0.1212 -0.0692 -0.0806 -0.1027 -0.0668 -0.0744 -0.0219 -0.0758 -0.2896 -0.7011 -0.0893 -0.0806
S-68	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-68	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-68	-0.29061755537986755	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-68	-0.29061755537986755	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-68	-0.1051 -0.0638 -1.3786 -0.1293 -0.0479 -0.1055 -0.0264 -0.1121 -1.0949 -0.0829 -0.0909 -0.0593 -1.7577 -0.8375 -0.2276 -0.1273 -0.0442 -0.0889 -0.0909 -2.4849 -0.1084 -0.1015 -0.1455 -1.3297 -0.1692 -0.1039 -0.0865 -1.2524 -0.0873 -0.0249 -0.0826 -0.0351 -1.1356 -0.1739 -0.1166 -0.9909 -0.0776 -0.0638 -0.0624 -0.0883 -0.0832 -0.1267 -0.0950 -0.1003 -0.6861 -0.0935 -0.0421 -0.0832 -0.8107 -0.1314 -0.1149 -0.0974 -0.0896 -0.0566 -0.0664 -0.1136 -0.0600 -0.0407 -0.2653 -0.1069 -0.0901 -0.0907 -0.1490 -0.1239 -0.6442 -0.1004 -0.2099 -0.1282 -0.1196 -0.0889 -0.1653 -0.0904 -0.0858 -1.0240 -0.0950 -1.4801 -0.1436 -0.1072 -0.4074 -0.0956 -0.3440 -0.1077 -0.1280 -0.0812 -0.1074 -0.1177 -0.0818 -0.1264 -0.0854 -1.6726 -0.1243 -0.1210 -0.2047 -0.2005 -0.0997 -0.0897 -1.3582 -0.2126 -0.1550 -0.0931 -1.6615 -0.1212 -0.0692 -0.0806 -0.1027 -0.0668 -0.0744 -0.0219 -0.0758 -0.2896 -0.7011 -0.0893 -0.0806
S-7	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-7	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-7	-0.2906176447868347	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-7	-0.2906176447868347	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-7	-0.1051 -0.0638 -1.3786 -0.1293 -0.0479 -0.1055 -0.0264 -0.1121 -1.0949 -0.0829 -0.0909 -0.0593 -1.7577 -0.8375 -0.2276 -0.1273 -0.0442 -0.0889 -0.0909 -2.4849 -0.1084 -0.1015 -0.1455 -1.3297 -0.1692 -0.1039 -0.0865 -1.2524 -0.0873 -0.0249 -0.0826 -0.0351 -1.1356 -0.1739 -0.1166 -0.9909 -0.0776 -0.0638 -0.0624 -0.0883 -0.0832 -0.1267 -0.0950 -0.1003 -0.6861 -0.0935 -0.0421 -0.0832 -0.8107 -0.1314 -0.1149 -0.0974 -0.0896 -0.0566 -0.0664 -0.1136 -0.0600 -0.0407 -0.2653 -0.1069 -0.0901 -0.0907 -0.1490 -0.1239 -0.6442 -0.1004 -0.2099 -0.1282 -0.1196 -0.0889 -0.1653 -0.0904 -0.0858 -1.0240 -0.0950 -1.4801 -0.1436 -0.1072 -0.4074 -0.0956 -0.3440 -0.1077 -0.1280 -0.0812 -0.1074 -0.1177 -0.0818 -0.1264 -0.0854 -1.6726 -0.1243 -0.1210 -0.2047 -0.2005 -0.0997 -0.0897 -1.3582 -0.2126 -0.1550 -0.0931 -1.6615 -0.1212 -0.0692 -0.0806 -0.1027 -0.0668 -0.0744 -0.0219 -0.0758 -0.2896 -0.7011 -0.0893 -0.0806
S-327	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
T-327	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) - 1; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
H-327	-0.18604062497615814	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
D-327	-0.18604062497615814	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
P-327	-0.0983 -0.0527 -0.3480 -0.0913 -1.0452 -0.0625 -0.0212 -0.0574 -0.0252 -0.0348 -0.1048 -0.3902 -0.0870 -1.1008 -0.0706 -0.0559 -1.3063 -0.1048 -0.0183 -0.0316 -0.0897 -0.0821 -0.2916 -0.0920 -0.8423 -0.0630 -0.0662 -0.0845 -0.0595 -1.5419 -0.0780 -1.0877 -0.0664 -0.2271 -0.1419 -0.0803 -0.3092 -0.1087 -0.0920 -0.2271 -0.1608 -0.2765 -0.0723 -0.1055 -0.1217 -0.0839 -0.1088 -0.0920 -0.2001 -0.1765 -0.1134 -0.0828 -0.0781 -0.0862 -0.9877 -0.0933 -0.0836 -0.1523 -0.1086 -0.1362 -0.2601 -0.0702 -0.0913 -0.0717 -0.1208 -0.1241 -0.0787 -0.0920 -0.1300 -0.1388 -0.1889 -0.1119 -0.0904 -0.1193 -0.1944 -0.1141 -0.0948 -0.0867 -0.0934 -0.0833 -0.6513 -0.1087 -0.1347 -0.1055 -0.0168 -0.0317 -0.0834 -0.0857 -0.0919 -0.3226 -0.1137 -0.1784 -0.1022 -0.0797 -0.1035 -0.3578 -0.1229 -0.1024 -0.1083 -0.1840 -0.2168 -0.0677 -0.2064 -0.1008 -0.0866 -0.0979 -0.0857 -0.1089 -0.0761 -0.1388 -0.0811 -0.0711
S-316	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
T-316	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) - 1; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
H-316	-0.1860407292842865	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
D-316	-0.1860407292842865	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
P-316	-0.0983 -0.0527 -0.3480 -0.0913 -1.0452 -0.0625 -0.0212 -0.0574 -0.0252 -0.0349 -0.1048 -0.3902 -0.0870 -1.1008 -0.0706 -0.0559 -1.3063 -0.1048 -0.0183 -0.0316 -0.0897 -0.0821 -0.2916 -0.0920 -0.8423 -0.0630 -0.0662 -0.0845 -0.0595 -1.5419 -0.0780 -1.0877 -0.0664 -0.2271 -0.1420 -0.0803 -0.3092 -0.1087 -0.0920 -0.2271 -0.1608 -0.2765 -0.0723 -0.1055 -0.1217 -0.0839 -0.1088 -0.0920 -0.2001 -0.1765 -0.1134 -0.0828 -0.0781 -0.0862 -0.9877 -0.0933 -0.0836 -0.1523 -0.1086 -0.1362 -0.2601 -0.0702 -0.0913 -0.0717 -0.1208 -0.1241 -0.0787 -0.0920 -0.1300 -0.1388 -0.1889 -0.1119 -0.0904 -0.1193 -0.1944 -0.1141 -0.0948 -0.0867 -0.0934 -0.0833 -0.6513 -0.1087 -0.1347 -0.1055 -0.0168 -0.0317 -0.0834 -0.0857 -0.0919 -0.3226 -0.1137 -0.1784 -0.1022 -0.0797 -0.1035 -0.3578 -0.1229 -0.1024 -0.1083 -0.1840 -0.2168 -0.0677 -0.2064 -0.1008 -0.0866 -0.0979 -0.0857 -0.1089 -0.0761 -0.1388 -0.0810 -0.0711
S-376	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-376	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-376	-0.22108881175518036	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-376	-0.22108881175518036	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-376	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0292 -0.0617 -0.1108 -0.1020 -0.1470 -0.0904 -0.0658 -0.0851 -0.0878 -0.6489 -0.1105 -0.0848 -0.1554 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7896 -0.1274 -0.1034 -0.0861 -1.6975 -0.2700 -0.1061 -0.0819 -0.1005 -0.0797 -1.1731 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4819 -0.0781 -0.0961 -0.1637 -0.1131 -0.1757 -0.0701 -0.0943 -0.0816 -0.1473 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1086 -0.1123 -0.0829 -0.1231 -0.0225 -1.1279 -0.0790 -0.1525 -0.0669 -0.0885 -1.2227 -0.1439 -0.1030 -0.0822 -0.0912 -0.0850 -1.1300 -0.0956 -0.0637 -0.1034 -0.0976 -0.0808 -0.8568 -0.0808 -0.4128 -0.0790 -0.0964 -0.1959 -0.0607 -3.0153 -0.0987 -0.0544 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1063 -0.0979 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-333	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-333	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-333	-0.22108891606330872	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-333	-0.22108891606330872	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-333	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0292 -0.0617 -0.1108 -0.1020 -0.1470 -0.0904 -0.0658 -0.0851 -0.0878 -0.6489 -0.1105 -0.0848 -0.1554 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7896 -0.1274 -0.1034 -0.0861 -1.6975 -0.2700 -0.1061 -0.0819 -0.1005 -0.0797 -1.1731 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4819 -0.0781 -0.0961 -0.1637 -0.1131 -0.1757 -0.0701 -0.0943 -0.0816 -0.1473 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1086 -0.1123 -0.0829 -0.1231 -0.0225 -1.1279 -0.0790 -0.1525 -0.0669 -0.0885 -1.2227 -0.1439 -0.1030 -0.0822 -0.0912 -0.0850 -1.1300 -0.0956 -0.0636 -0.1034 -0.0976 -0.0808 -0.8568 -0.0808 -0.4128 -0.0790 -0.0964 -0.1959 -0.0607 -3.0153 -0.0987 -0.0544 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1063 -0.0979 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-318	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-318	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-318	-0.22108890116214752	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-318	-0.22108890116214752	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-318	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0292 -0.0617 -0.1108 -0.1020 -0.1470 -0.0904 -0.0658 -0.0851 -0.0878 -0.6489 -0.1105 -0.0848 -0.1554 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7896 -0.1274 -0.1034 -0.0861 -1.6975 -0.2700 -0.1061 -0.0819 -0.1005 -0.0798 -1.1731 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4819 -0.0781 -0.0961 -0.1637 -0.1131 -0.1757 -0.0701 -0.0943 -0.0816 -0.1473 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1086 -0.1123 -0.0829 -0.1231 -0.0225 -1.1279 -0.0790 -0.1525 -0.0669 -0.0885 -1.2227 -0.1439 -0.1030 -0.0822 -0.0912 -0.0850 -1.1300 -0.0956 -0.0637 -0.1034 -0.0976 -0.0808 -0.8568 -0.0808 -0.4128 -0.0790 -0.0964 -0.1959 -0.0607 -3.0153 -0.0987 -0.0544 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1063 -0.0979 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-263	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-263	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-263	-0.22108882665634155	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-263	-0.22108882665634155	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-263	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0292 -0.0617 -0.1108 -0.1020 -0.1470 -0.0904 -0.0658 -0.0851 -0.0878 -0.6489 -0.1105 -0.0848 -0.1554 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7896 -0.1274 -0.1034 -0.0861 -1.6975 -0.2700 -0.1061 -0.0819 -0.1005 -0.0797 -1.1731 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4819 -0.0781 -0.0961 -0.1637 -0.1131 -0.1757 -0.0701 -0.0943 -0.0816 -0.1473 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1086 -0.1123 -0.0829 -0.1231 -0.0225 -1.1279 -0.0790 -0.1525 -0.0669 -0.0885 -1.2227 -0.1439 -0.1030 -0.0822 -0.0912 -0.0850 -1.1300 -0.0956 -0.0637 -0.1034 -0.0976 -0.0808 -0.8568 -0.0808 -0.4128 -0.0790 -0.0964 -0.1959 -0.0607 -3.0153 -0.0987 -0.0544 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1063 -0.0979 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-100	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-100	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-100	-0.22108885645866394	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-100	-0.22108885645866394	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-100	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0292 -0.0617 -0.1108 -0.1020 -0.1470 -0.0904 -0.0658 -0.0851 -0.0878 -0.6489 -0.1105 -0.0848 -0.1554 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7896 -0.1274 -0.1034 -0.0861 -1.6975 -0.2700 -0.1061 -0.0819 -0.1005 -0.0797 -1.1731 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4819 -0.0781 -0.0961 -0.1637 -0.1131 -0.1757 -0.0701 -0.0943 -0.0816 -0.1473 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1086 -0.1123 -0.0829 -0.1231 -0.0225 -1.1279 -0.0790 -0.1525 -0.0669 -0.0885 -1.2227 -0.1439 -0.1030 -0.0822 -0.0912 -0.0850 -1.1300 -0.0956 -0.0637 -0.1034 -0.0976 -0.0808 -0.8568 -0.0808 -0.4128 -0.0790 -0.0964 -0.1959 -0.0607 -3.0153 -0.0987 -0.0544 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1063 -0.0979 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-81	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-81	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-81	-0.22108885645866394	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-81	-0.22108885645866394	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-81	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0292 -0.0617 -0.1108 -0.1020 -0.1470 -0.0904 -0.0658 -0.0851 -0.0878 -0.6489 -0.1105 -0.0848 -0.1554 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7896 -0.1274 -0.1034 -0.0861 -1.6975 -0.2700 -0.1061 -0.0819 -0.1005 -0.0798 -1.1731 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4819 -0.0781 -0.0961 -0.1637 -0.1131 -0.1757 -0.0701 -0.0943 -0.0816 -0.1473 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1086 -0.1123 -0.0829 -0.1231 -0.0225 -1.1279 -0.0790 -0.1525 -0.0669 -0.0885 -1.2227 -0.1439 -0.1030 -0.0822 -0.0912 -0.0850 -1.1300 -0.0956 -0.0637 -0.1034 -0.0976 -0.0808 -0.8568 -0.0808 -0.4128 -0.0790 -0.0964 -0.1959 -0.0607 -3.0153 -0.0987 -0.0544 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1063 -0.0979 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-151	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
T-151	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toUpperCase ( c ) ; } else { char_list [ i ] = Character.toLowerCase ( c ) ; } } return new String ( char_list ) ; }
H-151	-0.13091328740119934	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
D-151	-0.13091328740119934	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
P-151	-0.0988 -0.0503 -0.4399 -0.0178 -0.0986 -0.0316 -0.1103 -0.5521 -0.0979 -0.0879 -0.0896 -0.0854 -0.2785 -0.0925 -0.0878 -0.0949 -0.0540 -0.0811 -0.0662 -0.1966 -0.0498 -0.0516 -0.2227 -0.1470 -0.0831 -0.2654 -0.1085 -0.1067 -0.0785 -0.0890 -0.8137 -0.0979 -0.1001 -0.2065 -0.1124 -0.0590 -0.0908 -0.0692 -0.2268 -0.0801 -0.0901 -0.1845 -0.0771 -0.0752 -0.0877 -0.0673 -0.0952 -0.0759 -0.1109 -0.0537 -0.0682 -0.0931 -0.0825 -0.0895 -0.1555 -0.1192 -1.0552 -0.1050 -0.0740 -0.0362 -0.1188 -0.1207 -0.0900 -0.0876 -0.0807 -0.1232 -0.1020 -0.0516 -0.0814 -0.1166 -0.0810 -0.1060 -0.3134 -0.0948 -0.3599 -0.1191 -0.1335 -0.0964 -0.1032 -0.1183 -0.1071 -0.1396 -0.0818 -0.1019 -0.0584 -0.0701 -0.1096 -0.0831 -0.0990 -0.2459 -0.0870 -0.1528 -0.1139 -0.1289 -0.0953 -0.0979 -0.1028 -0.1585 -0.1180 -0.0469 -0.2400 -0.1157 -0.1080 -0.0935 -0.0612 -0.1263 -0.0939 -0.0913 -0.0763
S-404	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-404	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-404	-0.16230084002017975	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-404	-0.16230084002017975	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-404	-0.0960 -0.0420 -0.0967 -0.1976 -0.0954 -0.0268 -0.0137 -0.1117 -0.0970 -0.1300 -0.0926 -0.0668 -0.0872 -0.0879 -0.1134 -0.1647 -0.1115 -0.0691 -0.0871 -0.8448 -0.0945 -0.0539 -0.0830 -0.8000 -0.1121 -0.1113 -0.0747 -0.0796 -0.0830 -1.0270 -0.0765 -0.1078 -0.1935 -0.0999 -0.0687 -0.3824 -0.0704 -0.0773 -0.1731 -0.0768 -0.0869 -0.1205 -0.1163 -0.2431 -0.0704 -0.0908 -0.0752 -0.4189 -0.0588 -0.1441 -0.1083 -1.1419 -0.1336 -0.0824 -0.0879 -0.0863 -0.1090 -0.1240 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1060 -0.1482 -0.1469 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3042 -0.1489 -0.1060 -0.2045 -0.1146 -0.1288 -0.1583 -1.0023 -0.0859 -0.0954 -0.1094 -0.0826 -0.0937 -0.2156 -0.1234 -0.4419 -0.1070 -0.1422 -0.0755 -0.0699 -0.0875 -0.1066 -0.1071 -0.1742 -0.1132 -0.0716 -0.7754 -0.0857 -0.1682 -0.1027 -0.0781 -0.0717
S-400	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
T-400	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { if ( ! count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
H-400	-0.26398152112960815	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
D-400	-0.26398152112960815	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
P-400	-0.0906 -0.0484 -0.3371 -0.0932 -1.0489 -0.0649 -0.0371 -0.1004 -0.0117 -0.1040 -0.3779 -0.0827 -1.0957 -0.0785 -0.0606 -0.0882 -0.0797 -0.3913 -0.0983 -0.9842 -0.0758 -0.0810 -0.0795 -0.0667 -1.6271 -0.0890 -1.2555 -0.0869 -0.2409 -0.1653 -0.0786 -1.4101 -0.0817 -0.9162 -0.3027 -0.8080 -0.0747 -0.0871 -0.0843 -0.0489 -0.8622 -0.0912 -1.0377 -0.3656 -0.7260 -0.0724 -0.2252 -0.1898 -0.0818 -0.1489 -0.1174 -1.2602 -0.0732 -0.0749 -0.0603 -0.0926 -0.0899 -0.3074 -0.1719 -0.5972 -0.1067 -0.0965 -0.8089 -0.1116 -0.1205 -0.1619 -0.1154 -0.0887 -0.0894 -0.7244 -0.0860 -0.1296 -0.1757 -0.1110 -1.0866 -0.0737 -0.0771 -0.0634 -0.0911 -0.0851 -0.2235 -0.1157 -0.1289 -0.1443 -0.1759 -0.1196 -0.0927 -0.0881 -0.1888 -0.5341 -0.0921 -0.1783 -0.1716 -0.2696 -0.1101 -0.0883 -0.0990 -0.0827 -0.1245 -0.0837 -0.0946 -0.1105 -0.0829 -0.0716
S-250	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
T-250	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { if ( ! count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
H-250	-0.26398149132728577	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
D-250	-0.26398149132728577	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
P-250	-0.0906 -0.0484 -0.3371 -0.0932 -1.0489 -0.0649 -0.0371 -0.1004 -0.0117 -0.1040 -0.3779 -0.0827 -1.0957 -0.0785 -0.0606 -0.0882 -0.0797 -0.3913 -0.0983 -0.9842 -0.0758 -0.0810 -0.0795 -0.0667 -1.6271 -0.0890 -1.2555 -0.0869 -0.2409 -0.1653 -0.0786 -1.4101 -0.0817 -0.9162 -0.3027 -0.8080 -0.0747 -0.0871 -0.0843 -0.0489 -0.8622 -0.0912 -1.0377 -0.3656 -0.7260 -0.0724 -0.2252 -0.1898 -0.0818 -0.1489 -0.1174 -1.2602 -0.0732 -0.0749 -0.0603 -0.0926 -0.0899 -0.3074 -0.1719 -0.5972 -0.1067 -0.0965 -0.8089 -0.1116 -0.1205 -0.1619 -0.1154 -0.0887 -0.0894 -0.7244 -0.0860 -0.1296 -0.1757 -0.1110 -1.0866 -0.0737 -0.0771 -0.0634 -0.0911 -0.0851 -0.2235 -0.1157 -0.1289 -0.1443 -0.1759 -0.1196 -0.0927 -0.0881 -0.1888 -0.5341 -0.0921 -0.1783 -0.1716 -0.2696 -0.1101 -0.0883 -0.0990 -0.0827 -0.1245 -0.0837 -0.0946 -0.1105 -0.0829 -0.0716
S-393	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-393	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-393	-0.16230078041553497	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-393	-0.16230078041553497	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-393	-0.0960 -0.0420 -0.0967 -0.1976 -0.0954 -0.0268 -0.0137 -0.1117 -0.0970 -0.1300 -0.0926 -0.0668 -0.0872 -0.0879 -0.1134 -0.1647 -0.1115 -0.0691 -0.0871 -0.8448 -0.0945 -0.0539 -0.0830 -0.8000 -0.1121 -0.1113 -0.0747 -0.0796 -0.0830 -1.0270 -0.0765 -0.1078 -0.1935 -0.0999 -0.0687 -0.3824 -0.0704 -0.0773 -0.1731 -0.0768 -0.0869 -0.1205 -0.1163 -0.2431 -0.0704 -0.0908 -0.0752 -0.4189 -0.0588 -0.1441 -0.1083 -1.1419 -0.1336 -0.0824 -0.0879 -0.0863 -0.1090 -0.1240 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1060 -0.1482 -0.1469 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3042 -0.1489 -0.1060 -0.2045 -0.1146 -0.1288 -0.1583 -1.0023 -0.0859 -0.0954 -0.1094 -0.0826 -0.0937 -0.2156 -0.1234 -0.4419 -0.1070 -0.1422 -0.0755 -0.0699 -0.0875 -0.1066 -0.1071 -0.1742 -0.1132 -0.0716 -0.7754 -0.0857 -0.1682 -0.1027 -0.0781 -0.0717
S-356	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-356	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-356	-0.16230084002017975	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-356	-0.16230084002017975	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-356	-0.0960 -0.0420 -0.0967 -0.1976 -0.0954 -0.0268 -0.0137 -0.1117 -0.0970 -0.1300 -0.0926 -0.0668 -0.0872 -0.0879 -0.1134 -0.1647 -0.1115 -0.0691 -0.0871 -0.8448 -0.0945 -0.0539 -0.0830 -0.8000 -0.1121 -0.1113 -0.0747 -0.0796 -0.0830 -1.0270 -0.0765 -0.1078 -0.1935 -0.0999 -0.0687 -0.3824 -0.0704 -0.0773 -0.1731 -0.0768 -0.0869 -0.1205 -0.1163 -0.2431 -0.0704 -0.0908 -0.0752 -0.4189 -0.0588 -0.1441 -0.1083 -1.1419 -0.1336 -0.0824 -0.0879 -0.0863 -0.1090 -0.1240 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1060 -0.1482 -0.1469 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3042 -0.1489 -0.1060 -0.2045 -0.1146 -0.1288 -0.1583 -1.0023 -0.0859 -0.0954 -0.1094 -0.0826 -0.0937 -0.2156 -0.1234 -0.4419 -0.1070 -0.1421 -0.0755 -0.0699 -0.0875 -0.1066 -0.1071 -0.1742 -0.1132 -0.0716 -0.7754 -0.0857 -0.1682 -0.1027 -0.0781 -0.0717
S-270	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-270	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-270	-0.16230088472366333	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-270	-0.16230088472366333	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-270	-0.0960 -0.0420 -0.0967 -0.1976 -0.0954 -0.0268 -0.0137 -0.1117 -0.0970 -0.1300 -0.0926 -0.0668 -0.0872 -0.0879 -0.1134 -0.1647 -0.1115 -0.0691 -0.0871 -0.8448 -0.0945 -0.0539 -0.0830 -0.8000 -0.1121 -0.1113 -0.0747 -0.0796 -0.0830 -1.0270 -0.0765 -0.1078 -0.1935 -0.0999 -0.0687 -0.3824 -0.0704 -0.0773 -0.1731 -0.0768 -0.0869 -0.1205 -0.1163 -0.2431 -0.0704 -0.0908 -0.0752 -0.4189 -0.0588 -0.1441 -0.1083 -1.1419 -0.1336 -0.0824 -0.0879 -0.0863 -0.1090 -0.1240 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1060 -0.1482 -0.1469 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3042 -0.1489 -0.1060 -0.2045 -0.1146 -0.1288 -0.1583 -1.0023 -0.0859 -0.0954 -0.1094 -0.0826 -0.0937 -0.2156 -0.1234 -0.4419 -0.1070 -0.1422 -0.0755 -0.0699 -0.0875 -0.1066 -0.1071 -0.1742 -0.1132 -0.0716 -0.7754 -0.0857 -0.1682 -0.1027 -0.0781 -0.0717
S-168	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-168	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-168	-0.16230079531669617	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-168	-0.16230079531669617	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-168	-0.0960 -0.0420 -0.0967 -0.1976 -0.0954 -0.0268 -0.0137 -0.1117 -0.0970 -0.1300 -0.0926 -0.0668 -0.0872 -0.0879 -0.1134 -0.1647 -0.1115 -0.0691 -0.0871 -0.8448 -0.0945 -0.0539 -0.0830 -0.8000 -0.1121 -0.1113 -0.0747 -0.0796 -0.0830 -1.0270 -0.0765 -0.1078 -0.1935 -0.0999 -0.0687 -0.3824 -0.0704 -0.0773 -0.1731 -0.0768 -0.0869 -0.1205 -0.1163 -0.2431 -0.0704 -0.0908 -0.0752 -0.4189 -0.0588 -0.1441 -0.1083 -1.1419 -0.1336 -0.0824 -0.0879 -0.0863 -0.1090 -0.1240 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1060 -0.1482 -0.1469 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3042 -0.1489 -0.1060 -0.2045 -0.1146 -0.1288 -0.1583 -1.0023 -0.0859 -0.0954 -0.1094 -0.0826 -0.0937 -0.2156 -0.1234 -0.4419 -0.1070 -0.1422 -0.0755 -0.0699 -0.0875 -0.1066 -0.1071 -0.1742 -0.1132 -0.0716 -0.7754 -0.0857 -0.1682 -0.1027 -0.0781 -0.0717
S-249	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( is_prime ( j ) ) { largest = n % j; } } return largest; }
T-249	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( n % j == 0 && is_prime ( j ) ) { largest = j; } } return largest; }
H-249	-0.2347399741411209	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-249	-0.2347399741411209	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-249	-0.0934 -0.0438 -0.1818 -0.0620 -0.0871 -0.0331 -0.1138 -0.0928 -0.1774 -0.0851 -0.0938 -0.7583 -0.1100 -0.1329 -0.1297 -0.0764 -0.0896 -0.0853 -0.0806 -1.4275 -0.6611 -0.1102 -0.0823 -0.0766 -0.0872 -0.9290 -0.0973 -0.1312 -0.1007 -1.2210 -0.0723 -0.0975 -0.2007 -0.0828 -0.0974 -0.1261 -0.1133 -0.2979 -0.1550 -0.0835 -0.2289 -0.1293 -0.0865 -0.0884 -0.0867 -1.2514 -0.1091 -0.1195 -0.0671 -0.9659 -0.0893 -0.2072
S-230	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( is_prime ( j ) ) { largest = n % j; } } return largest; }
T-230	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( n % j == 0 && is_prime ( j ) ) { largest = j; } } return largest; }
H-230	-0.23473988473415375	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-230	-0.23473988473415375	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-230	-0.0934 -0.0438 -0.1818 -0.0620 -0.0871 -0.0331 -0.1138 -0.0928 -0.1774 -0.0851 -0.0938 -0.7583 -0.1100 -0.1329 -0.1297 -0.0764 -0.0896 -0.0853 -0.0806 -1.4275 -0.6611 -0.1102 -0.0823 -0.0766 -0.0872 -0.9290 -0.0973 -0.1312 -0.1007 -1.2210 -0.0723 -0.0975 -0.2007 -0.0828 -0.0974 -0.1261 -0.1133 -0.2979 -0.1550 -0.0835 -0.2289 -0.1293 -0.0865 -0.0884 -0.0867 -1.2514 -0.1091 -0.1195 -0.0671 -0.9659 -0.0893 -0.2072
S-97	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( is_prime ( j ) ) { largest = n % j; } } return largest; }
T-97	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( n % j == 0 && is_prime ( j ) ) { largest = j; } } return largest; }
H-97	-0.23473991453647614	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-97	-0.23473991453647614	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-97	-0.0934 -0.0438 -0.1818 -0.0620 -0.0871 -0.0331 -0.1138 -0.0928 -0.1774 -0.0851 -0.0938 -0.7583 -0.1100 -0.1329 -0.1297 -0.0764 -0.0896 -0.0853 -0.0806 -1.4275 -0.6611 -0.1102 -0.0823 -0.0766 -0.0872 -0.9290 -0.0973 -0.1312 -0.1007 -1.2210 -0.0723 -0.0975 -0.2007 -0.0828 -0.0974 -0.1261 -0.1133 -0.2979 -0.1550 -0.0835 -0.2289 -0.1293 -0.0865 -0.0884 -0.0867 -1.2514 -0.1091 -0.1195 -0.0671 -0.9659 -0.0893 -0.2072
S-304	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
T-304	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand [ 0 ] + ""; for ( int i = 0; i < operator.length; i += 1 ) { expression += operator [ i ] + operand [ i + 1 ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
H-304	-0.19652770459651947	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-304	-0.19652770459651947	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-304	-0.0849 -0.0551 -0.0782 -0.0534 -0.0937 -0.0088 -0.0107 -0.1123 -2.1762 -0.1812 -0.0663 -0.0928 -1.4739 -0.1315 -0.1828 -0.0841 -0.0359 -0.0814 -0.0610 -0.1587 -0.0129 -0.3429 -0.1894 -0.0651 -0.0884 -0.1784 -0.0473 -0.0822 -0.0967 -0.0818 -0.0600 -0.1209 -0.0469 -0.0728 -0.1887 -0.1382 -0.0802 -0.1432 -0.0491 -0.0323 -0.0892 -0.0649 -0.1595 -0.0903 -0.0283 -0.0259 -0.1042 -0.0914 -0.0123 -0.0688 -0.0862 -0.0865 -2.3247 -0.1681 -0.0845 -1.3701 -0.1438 -0.1092 -0.0821 -0.0886 -0.0865 -0.9935 -0.1029 -0.0814 -0.1783 -0.0956 -0.0695 -0.1917 -0.0899 -0.1711 -0.1803 -0.0825 -0.0830 -0.2505 -0.0969 -0.1394 -0.0937 -0.1346 -0.0806 -0.1570 -0.0424 -0.0785 -0.1171 -0.0809 -0.1016 -0.1076 -0.1522 -0.4756 -0.0890 -1.0404 -0.1063 -0.0673 -0.1284 -0.0164 -0.1134 -0.1381 -0.1016 -0.1767 -0.7613 -0.1808 -0.1338 -0.0957 -0.0821 -0.0734
S-193	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
T-193	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand [ 0 ] + ""; for ( int i = 0; i < operator.length; i += 1 ) { expression += operator [ i ] + operand [ i + 1 ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
H-193	-0.19652755558490753	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-193	-0.19652755558490753	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-193	-0.0849 -0.0551 -0.0782 -0.0534 -0.0937 -0.0088 -0.0107 -0.1123 -2.1762 -0.1812 -0.0663 -0.0928 -1.4739 -0.1315 -0.1828 -0.0841 -0.0359 -0.0814 -0.0610 -0.1587 -0.0129 -0.3429 -0.1894 -0.0651 -0.0884 -0.1784 -0.0473 -0.0822 -0.0967 -0.0818 -0.0600 -0.1209 -0.0469 -0.0728 -0.1887 -0.1382 -0.0802 -0.1432 -0.0491 -0.0323 -0.0892 -0.0649 -0.1595 -0.0903 -0.0283 -0.0259 -0.1042 -0.0914 -0.0123 -0.0688 -0.0862 -0.0865 -2.3247 -0.1681 -0.0845 -1.3701 -0.1438 -0.1092 -0.0821 -0.0886 -0.0865 -0.9935 -0.1029 -0.0814 -0.1783 -0.0956 -0.0695 -0.1917 -0.0899 -0.1711 -0.1803 -0.0825 -0.0830 -0.2505 -0.0969 -0.1394 -0.0937 -0.1346 -0.0806 -0.1570 -0.0424 -0.0785 -0.1171 -0.0809 -0.1016 -0.1076 -0.1522 -0.4756 -0.0890 -1.0404 -0.1063 -0.0673 -0.1284 -0.0164 -0.1134 -0.1381 -0.1016 -0.1767 -0.7613 -0.1808 -0.1338 -0.0957 -0.0821 -0.0734
S-383	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-383	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-383	-0.1959555298089981	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-383	-0.1959555298089981	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-383	-0.0995 -0.0535 -0.4358 -0.0881 -0.9040 -0.0597 -0.0650 -0.0957 -0.0586 -0.0888 -0.0482 -0.1057 -0.0940 -0.0827 -0.0843 -0.0800 -0.4520 -0.0931 -0.8283 -0.0625 -0.0492 -0.0817 -0.0719 -1.9390 -0.0863 -0.9708 -0.0657 -0.2047 -0.1027 -0.0822 -0.2163 -0.1112 -0.0676 -0.0853 -0.0835 -1.0300 -0.1070 -0.1265 -0.1030 -0.4985 -0.0770 -0.0880 -0.1962 -0.0815 -0.0803 -0.1053 -0.0579 -0.1003 -0.0601 -0.0898 -0.0811 -0.6407 -0.0868 -0.1049 -0.0736 -0.0904 -0.0921 -0.6743 -0.1180 -0.0826 -0.1291 -1.1603 -0.0737 -0.0744 -0.1627 -0.0833 -0.0950 -0.1372 -0.1152 -0.3547 -0.2473 -0.0828 -0.2307 -0.1318 -0.0895 -0.1172 -0.0965 -0.1040 -0.0443 -0.0993 -0.2469 -0.3173 -0.1360 -0.1247 -0.1858 -0.1239 -0.1672 -0.1066 -0.0416 -0.0999 -0.2597 -0.2651 -0.4150 -0.1118 -0.1461 -0.2290 -0.0795 -0.1271 -0.0828 -0.0453 -0.1432 -0.0824 -0.0738
S-313	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-313	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-313	-0.1959557682275772	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-313	-0.1959557682275772	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-313	-0.0995 -0.0535 -0.4358 -0.0881 -0.9040 -0.0597 -0.0650 -0.0957 -0.0586 -0.0888 -0.0482 -0.1057 -0.0940 -0.0827 -0.0843 -0.0800 -0.4520 -0.0931 -0.8283 -0.0625 -0.0492 -0.0817 -0.0719 -1.9390 -0.0863 -0.9708 -0.0657 -0.2047 -0.1027 -0.0822 -0.2163 -0.1112 -0.0676 -0.0853 -0.0835 -1.0300 -0.1070 -0.1265 -0.1030 -0.4985 -0.0770 -0.0880 -0.1962 -0.0815 -0.0803 -0.1053 -0.0579 -0.1003 -0.0601 -0.0898 -0.0811 -0.6407 -0.0868 -0.1049 -0.0736 -0.0904 -0.0921 -0.6743 -0.1180 -0.0826 -0.1291 -1.1603 -0.0737 -0.0744 -0.1627 -0.0833 -0.0950 -0.1372 -0.1152 -0.3547 -0.2473 -0.0827 -0.2307 -0.1318 -0.0895 -0.1172 -0.0965 -0.1040 -0.0443 -0.0993 -0.2469 -0.3173 -0.1360 -0.1247 -0.1858 -0.1239 -0.1672 -0.1066 -0.0416 -0.0999 -0.2597 -0.2651 -0.4150 -0.1118 -0.1461 -0.2290 -0.0795 -0.1271 -0.0828 -0.0453 -0.1432 -0.0824 -0.0738
S-72	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-72	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-72	-0.1959555745124817	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-72	-0.1959555745124817	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-72	-0.0995 -0.0535 -0.4358 -0.0881 -0.9040 -0.0597 -0.0650 -0.0957 -0.0586 -0.0888 -0.0482 -0.1057 -0.0940 -0.0827 -0.0843 -0.0800 -0.4520 -0.0931 -0.8283 -0.0625 -0.0492 -0.0817 -0.0719 -1.9390 -0.0863 -0.9708 -0.0657 -0.2047 -0.1027 -0.0822 -0.2163 -0.1112 -0.0676 -0.0853 -0.0835 -1.0300 -0.1070 -0.1265 -0.1030 -0.4985 -0.0770 -0.0880 -0.1962 -0.0815 -0.0803 -0.1053 -0.0579 -0.1003 -0.0601 -0.0898 -0.0811 -0.6407 -0.0868 -0.1049 -0.0736 -0.0904 -0.0921 -0.6743 -0.1180 -0.0826 -0.1291 -1.1603 -0.0737 -0.0744 -0.1627 -0.0833 -0.0950 -0.1372 -0.1152 -0.3547 -0.2473 -0.0827 -0.2307 -0.1318 -0.0895 -0.1172 -0.0965 -0.1040 -0.0443 -0.0993 -0.2469 -0.3173 -0.1360 -0.1247 -0.1858 -0.1239 -0.1672 -0.1066 -0.0416 -0.0999 -0.2597 -0.2651 -0.4150 -0.1118 -0.1461 -0.2290 -0.0795 -0.1271 -0.0828 -0.0453 -0.1432 -0.0824 -0.0738
S-349	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-349	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { row_capacity += grid [ i ] [ j ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-349	-0.18474479019641876	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-349	-0.18474479019641876	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-349	-0.1018 -0.0444 -0.1121 -0.0444 -0.0888 -0.0612 -0.1152 -0.0940 -0.1340 -0.0850 -0.1064 -0.0945 -0.0186 -1.3904 -0.0848 -0.0257 -0.1025 -0.0998 -0.0894 -0.0874 -0.0957 -0.1061 -0.0848 -1.2043 -0.1834 -0.1090 -0.0734 -0.1008 -0.0830 -1.2974 -0.0881 -0.0774 -0.1051 -0.1300 -0.0927 -0.5915 -0.0763 -0.6869 -0.0745 -0.0824 -0.1027 -0.1179 -0.0978 -0.0959 -0.0936 -1.4340 -0.0908 -0.1043 -0.0728 -0.0980 -0.0995 -1.3385 -0.0873 -0.0554 -0.0562 -0.1033 -0.3513 -0.0984 -0.1156 -0.1378 -0.3274 -0.0733 -0.6111 -0.0787 -0.0908 -0.2603 -0.0952 -0.1197 -0.0721 -0.0420 -0.0844 -0.1255 -0.0640 -0.0712 -0.0932 -0.0865 -0.0979 -0.0897 -0.0957 -0.1183 -0.2212 -0.2319 -0.0970 -0.0960 -0.2427 -0.0816 -0.1021 -0.0960 -0.2284 -0.0962 -0.1137 -0.0987 -0.0948 -0.2352 -0.1069 -0.0817 -0.1010 -0.2293 -0.0806 -0.0681
S-243	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-243	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { row_capacity += grid [ i ] [ j ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-243	-0.18474487960338593	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-243	-0.18474487960338593	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-243	-0.1018 -0.0444 -0.1121 -0.0444 -0.0888 -0.0612 -0.1152 -0.0940 -0.1340 -0.0850 -0.1064 -0.0945 -0.0186 -1.3904 -0.0848 -0.0257 -0.1025 -0.0998 -0.0894 -0.0874 -0.0957 -0.1061 -0.0848 -1.2043 -0.1834 -0.1090 -0.0734 -0.1008 -0.0830 -1.2974 -0.0881 -0.0774 -0.1051 -0.1300 -0.0927 -0.5915 -0.0763 -0.6869 -0.0745 -0.0824 -0.1027 -0.1179 -0.0978 -0.0959 -0.0936 -1.4340 -0.0908 -0.1043 -0.0728 -0.0980 -0.0995 -1.3385 -0.0873 -0.0554 -0.0562 -0.1033 -0.3513 -0.0984 -0.1156 -0.1378 -0.3274 -0.0733 -0.6111 -0.0787 -0.0908 -0.2603 -0.0952 -0.1197 -0.0721 -0.0420 -0.0844 -0.1255 -0.0640 -0.0712 -0.0932 -0.0865 -0.0979 -0.0897 -0.0957 -0.1183 -0.2212 -0.2319 -0.0970 -0.0960 -0.2427 -0.0816 -0.1021 -0.0960 -0.2284 -0.0962 -0.1137 -0.0987 -0.0948 -0.2352 -0.1069 -0.0817 -0.1010 -0.2293 -0.0806 -0.0681
S-27	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-27	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { row_capacity += grid [ i ] [ j ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-27	-0.1847449243068695	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-27	-0.1847449243068695	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-27	-0.1018 -0.0444 -0.1121 -0.0444 -0.0888 -0.0612 -0.1152 -0.0940 -0.1340 -0.0850 -0.1064 -0.0945 -0.0186 -1.3904 -0.0848 -0.0257 -0.1025 -0.0998 -0.0894 -0.0874 -0.0957 -0.1061 -0.0848 -1.2043 -0.1834 -0.1090 -0.0734 -0.1008 -0.0830 -1.2974 -0.0881 -0.0774 -0.1051 -0.1300 -0.0927 -0.5915 -0.0763 -0.6869 -0.0745 -0.0824 -0.1027 -0.1179 -0.0978 -0.0959 -0.0936 -1.4340 -0.0908 -0.1043 -0.0728 -0.0980 -0.0995 -1.3385 -0.0873 -0.0554 -0.0562 -0.1033 -0.3513 -0.0984 -0.1156 -0.1378 -0.3274 -0.0733 -0.6111 -0.0787 -0.0908 -0.2603 -0.0952 -0.1197 -0.0721 -0.0420 -0.0844 -0.1255 -0.0640 -0.0712 -0.0932 -0.0865 -0.0979 -0.0897 -0.0957 -0.1183 -0.2212 -0.2319 -0.0970 -0.0960 -0.2427 -0.0816 -0.1021 -0.0960 -0.2284 -0.0962 -0.1137 -0.0987 -0.0948 -0.2352 -0.1069 -0.0817 -0.1010 -0.2293 -0.0806 -0.0681
S-351	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-351	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-351	-0.23277443647384644	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-351	-0.23277443647384644	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-351	-0.0931 -0.0492 -0.0977 -0.0374 -0.0596 -0.0052 -0.0856 -0.0394 -0.1114 -0.9699 -0.1019 -1.2891 -0.6656 -0.0942 -0.0849 -0.0924 -0.1189 -0.0536 -0.0885 -0.1133 -0.2007 -0.0870 -0.4265 -0.0814 -0.0837 -1.7265 -0.0711 -0.0840 -0.1085 -0.6413 -0.1706 -0.1136 -0.0731 -0.0739 -0.0847 -0.9498 -0.0867 -0.0751 -0.5528 -0.1422 -0.0942 -0.4526 -0.0767 -0.0956 -0.0743 -0.0929 -0.2137 -0.0807 -0.0748 -0.0992 -0.1074 -0.0654 -0.0788 -0.0975 -0.6601 -0.1030 -0.0701 -0.0674 -0.6074 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1228 -0.1142 -0.1855 -0.1134 -0.8534 -0.1270 -0.1209 -1.3874 -0.1808 -0.8080 -0.0818 -0.1054 -0.1000 -0.4976 -0.1050 -0.1173 -0.1229 -0.6368 -0.1061 -0.0946 -0.6454 -0.1101 -0.1216 -0.0785 -0.0832 -0.0871 -0.0866 -0.0847 -0.0460 -1.2174 -0.0849 -0.0761 -0.0775 -0.0319 -0.7549 -0.0742 -0.0771
S-271	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-271	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-271	-0.21574915945529938	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-271	-0.21574915945529938	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-271	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3910 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0883 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1138 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-238	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-238	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-238	-0.21574929356575012	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-238	-0.21574929356575012	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-238	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3911 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0882 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-215	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-215	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-215	-0.21574926376342773	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-215	-0.21574926376342773	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-215	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3910 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0882 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-154	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-154	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-154	-0.2157490998506546	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-154	-0.2157490998506546	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-154	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3910 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0883 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1138 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-131	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-131	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-131	-0.21574915945529938	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-131	-0.21574915945529938	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-131	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3911 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0882 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-113	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-113	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-113	-0.21574917435646057	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-113	-0.21574917435646057	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-113	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3910 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0882 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1138 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-4	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-4	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-4	-0.21574929356575012	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-4	-0.21574929356575012	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-4	-0.0974 -0.0539 -1.5083 -0.0869 -1.0515 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3910 -0.0734 -1.0752 -0.0662 -0.0413 -0.0849 -0.0822 -1.6421 -0.0830 -1.0280 -0.0629 -0.0628 -0.0827 -0.0642 -1.2467 -0.0698 -0.1510 -0.1807 -0.1334 -0.0795 -0.1786 -0.1079 -1.7985 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8866 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6849 -0.0893 -0.0882 -0.2006 -0.1270 -0.0816 -0.5647 -0.0819 -0.0926 -0.0833 -0.7402 -0.0770 -0.0843 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1103 -0.0952 -0.0877 -0.4178 -0.1475 -0.0912 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1160 -0.0879 -0.0870 -0.0825 -0.7069 -0.1915 -0.1497 -0.1280 -0.2851 -0.2416 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0567 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1998 -0.1050 -0.2685 -0.1087 -0.1957 -0.1515 -0.1539 -0.0998 -0.2188 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0854 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-323	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-323	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-323	-0.18252681195735931	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-323	-0.18252681195735931	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-323	-0.0906 -0.0419 -0.1087 -0.0741 -0.0954 -0.0778 -0.1180 -1.2385 -0.0636 -0.6684 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1316 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0987 -0.0682 -0.0634 -0.0836 -0.0838 -0.2894 -0.0807 -0.1007 -0.1086 -0.1092 -0.4609 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5250 -0.9779 -0.0634 -0.0858 -0.0424 -0.0789 -0.5761 -0.1050 -1.0786 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0888 -0.7471 -0.0997 -0.1065 -0.0709 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1059 -0.1094 -0.0600 -0.1103 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6213 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1501 -0.1462 -0.0817 -0.1053 -0.1409 -0.0844 -0.1149 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6439 -0.1032 -0.1200 -0.0936 -0.2079 -0.1598 -0.1062 -0.0815 -0.1214 -0.0691 -0.0886 -0.0966 -0.0654 -0.0959 -0.9582 -0.0971 -0.0990 -0.0903 -0.1616 -0.1688 -0.1675 -0.1065 -0.1359 -0.1198 -0.1132 -0.1391 -0.1129 -0.0932 -0.1404 -0.6526 -0.0884 -0.0885 -0.1472 -0.7089 -0.0887 -0.0744
S-242	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-242	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-242	-0.1825268566608429	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-242	-0.1825268566608429	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-242	-0.0906 -0.0419 -0.1087 -0.0741 -0.0954 -0.0778 -0.1180 -1.2385 -0.0636 -0.6684 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1316 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0987 -0.0682 -0.0634 -0.0836 -0.0838 -0.2894 -0.0807 -0.1007 -0.1086 -0.1092 -0.4609 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5250 -0.9779 -0.0634 -0.0858 -0.0424 -0.0789 -0.5761 -0.1050 -1.0786 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0888 -0.7471 -0.0997 -0.1065 -0.0709 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1059 -0.1094 -0.0600 -0.1103 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6213 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1501 -0.1462 -0.0817 -0.1053 -0.1409 -0.0844 -0.1149 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6439 -0.1032 -0.1200 -0.0936 -0.2079 -0.1598 -0.1062 -0.0815 -0.1214 -0.0691 -0.0886 -0.0966 -0.0654 -0.0959 -0.9582 -0.0971 -0.0990 -0.0903 -0.1616 -0.1688 -0.1675 -0.1065 -0.1359 -0.1198 -0.1132 -0.1391 -0.1129 -0.0932 -0.1404 -0.6526 -0.0884 -0.0885 -0.1472 -0.7089 -0.0887 -0.0744
S-172	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-172	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-172	-0.18252693116664886	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-172	-0.18252693116664886	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-172	-0.0906 -0.0419 -0.1087 -0.0741 -0.0954 -0.0778 -0.1180 -1.2385 -0.0636 -0.6684 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1316 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0987 -0.0682 -0.0634 -0.0836 -0.0838 -0.2894 -0.0807 -0.1007 -0.1086 -0.1092 -0.4609 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5250 -0.9779 -0.0634 -0.0858 -0.0424 -0.0789 -0.5761 -0.1050 -1.0786 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0888 -0.7471 -0.0997 -0.1065 -0.0709 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1059 -0.1094 -0.0600 -0.1103 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6213 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1501 -0.1462 -0.0817 -0.1053 -0.1409 -0.0844 -0.1149 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6439 -0.1032 -0.1200 -0.0936 -0.2079 -0.1598 -0.1062 -0.0815 -0.1214 -0.0691 -0.0886 -0.0966 -0.0654 -0.0959 -0.9582 -0.0971 -0.0990 -0.0903 -0.1616 -0.1688 -0.1675 -0.1065 -0.1359 -0.1198 -0.1132 -0.1391 -0.1129 -0.0932 -0.1404 -0.6526 -0.0884 -0.0885 -0.1472 -0.7089 -0.0887 -0.0744
S-90	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-90	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-90	-0.18252679705619812	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-90	-0.18252679705619812	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-90	-0.0906 -0.0419 -0.1087 -0.0741 -0.0954 -0.0778 -0.1180 -1.2385 -0.0636 -0.6684 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1316 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0987 -0.0682 -0.0634 -0.0836 -0.0838 -0.2894 -0.0807 -0.1007 -0.1086 -0.1092 -0.4609 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5250 -0.9779 -0.0634 -0.0858 -0.0424 -0.0789 -0.5761 -0.1050 -1.0786 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0888 -0.7471 -0.0997 -0.1065 -0.0709 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1059 -0.1094 -0.0600 -0.1103 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6213 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1501 -0.1462 -0.0817 -0.1053 -0.1409 -0.0844 -0.1149 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6439 -0.1032 -0.1200 -0.0936 -0.2079 -0.1598 -0.1062 -0.0815 -0.1214 -0.0691 -0.0886 -0.0966 -0.0654 -0.0959 -0.9582 -0.0971 -0.0990 -0.0903 -0.1616 -0.1688 -0.1675 -0.1065 -0.1359 -0.1198 -0.1132 -0.1391 -0.1129 -0.0932 -0.1404 -0.6526 -0.0884 -0.0885 -0.1472 -0.7089 -0.0887 -0.0744
S-24	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-24	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-24	-0.18252681195735931	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-24	-0.18252681195735931	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-24	-0.0906 -0.0419 -0.1087 -0.0741 -0.0954 -0.0778 -0.1180 -1.2385 -0.0636 -0.6684 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1316 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0987 -0.0682 -0.0634 -0.0836 -0.0838 -0.2894 -0.0807 -0.1007 -0.1086 -0.1092 -0.4609 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5250 -0.9779 -0.0634 -0.0858 -0.0424 -0.0789 -0.5761 -0.1050 -1.0786 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0888 -0.7471 -0.0997 -0.1065 -0.0709 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1059 -0.1094 -0.0600 -0.1103 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6213 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1501 -0.1462 -0.0817 -0.1053 -0.1409 -0.0844 -0.1149 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6439 -0.1032 -0.1200 -0.0936 -0.2079 -0.1598 -0.1062 -0.0815 -0.1214 -0.0691 -0.0886 -0.0966 -0.0654 -0.0959 -0.9582 -0.0971 -0.0990 -0.0903 -0.1616 -0.1688 -0.1675 -0.1065 -0.1359 -0.1198 -0.1132 -0.1391 -0.1129 -0.0932 -0.1404 -0.6526 -0.0884 -0.0885 -0.1472 -0.7089 -0.0887 -0.0744
S-312	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count; }
T-312	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) - 1 ) - '0' ) ) count += 1; } } return count; }
H-312	-0.22927606105804443	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
D-312	-0.22927606105804443	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
P-312	-0.1021 -0.0446 -0.0981 -0.0184 -0.0964 -0.0590 -0.1145 -0.1187 -0.1926 -0.0867 -0.0476 -0.0862 -0.0876 -0.1245 -0.0764 -0.0812 -0.8247 -2.9058 -0.1062 -1.5193 -0.9918 -0.1187 -0.0543 -0.0807 -0.0772 -0.2439 -0.1106 -0.0616 -0.2396 -0.0679 -0.0855 -0.0684 -0.6657 -0.0616 -0.1023 -0.0544 -0.0895 -0.0558 -0.0807 -0.1030 -0.0701 -2.1775 -0.1292 -0.1039 -0.0862 -0.1028 -0.0899 -0.1115 -0.7005 -0.1080 -0.0582 -0.1090 -0.0516 -0.0979 -0.0693 -0.1041 -0.5843 -0.1171 -0.0976 -0.0840 -0.0908 -0.6741 -0.1068 -0.1025 -0.0804 -0.1028 -0.8049 -0.1009 -0.0556 -0.1075 -0.0492 -0.1011 -0.0728 -0.1023 -0.9302 -0.1058 -0.0876 -0.1116 -0.0433 -0.1072 -0.0699 -0.1108 -0.1167 -0.5974 -0.0753 -0.0849 -0.0859 -0.0852 -0.1276 -0.0853 -1.0547 -0.0937 -0.0748 -0.0679 -0.1155 -0.2830 -0.0776 -0.0687
S-264	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count; }
T-264	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) - 1 ) - '0' ) ) count += 1; } } return count; }
H-264	-0.22927600145339966	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
D-264	-0.22927600145339966	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
P-264	-0.1021 -0.0446 -0.0981 -0.0184 -0.0964 -0.0590 -0.1145 -0.1187 -0.1926 -0.0867 -0.0476 -0.0862 -0.0876 -0.1245 -0.0764 -0.0812 -0.8247 -2.9058 -0.1062 -1.5193 -0.9918 -0.1187 -0.0543 -0.0807 -0.0772 -0.2439 -0.1106 -0.0616 -0.2396 -0.0679 -0.0855 -0.0684 -0.6657 -0.0616 -0.1023 -0.0544 -0.0895 -0.0558 -0.0807 -0.1030 -0.0701 -2.1775 -0.1292 -0.1039 -0.0862 -0.1028 -0.0899 -0.1115 -0.7005 -0.1080 -0.0582 -0.1090 -0.0516 -0.0979 -0.0693 -0.1041 -0.5843 -0.1171 -0.0976 -0.0840 -0.0908 -0.6741 -0.1068 -0.1025 -0.0804 -0.1028 -0.8049 -0.1009 -0.0556 -0.1075 -0.0492 -0.1011 -0.0728 -0.1023 -0.9302 -0.1058 -0.0876 -0.1116 -0.0433 -0.1072 -0.0699 -0.1108 -0.1167 -0.5974 -0.0753 -0.0849 -0.0859 -0.0853 -0.1276 -0.0853 -1.0547 -0.0937 -0.0748 -0.0679 -0.1155 -0.2830 -0.0776 -0.0687
S-78	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count; }
T-78	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) - 1 ) - '0' ) ) count += 1; } } return count; }
H-78	-0.2292761504650116	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
D-78	-0.2292761504650116	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
P-78	-0.1021 -0.0446 -0.0981 -0.0184 -0.0964 -0.0590 -0.1145 -0.1187 -0.1926 -0.0867 -0.0476 -0.0862 -0.0876 -0.1245 -0.0764 -0.0812 -0.8247 -2.9058 -0.1062 -1.5193 -0.9918 -0.1187 -0.0543 -0.0807 -0.0772 -0.2439 -0.1106 -0.0616 -0.2396 -0.0679 -0.0855 -0.0684 -0.6657 -0.0616 -0.1023 -0.0544 -0.0895 -0.0558 -0.0807 -0.1030 -0.0701 -2.1775 -0.1292 -0.1039 -0.0862 -0.1028 -0.0899 -0.1115 -0.7005 -0.1080 -0.0582 -0.1090 -0.0516 -0.0979 -0.0693 -0.1041 -0.5843 -0.1171 -0.0976 -0.0840 -0.0908 -0.6741 -0.1068 -0.1025 -0.0804 -0.1028 -0.8049 -0.1009 -0.0556 -0.1075 -0.0492 -0.1011 -0.0728 -0.1023 -0.9302 -0.1058 -0.0876 -0.1116 -0.0433 -0.1072 -0.0699 -0.1108 -0.1167 -0.5974 -0.0753 -0.0849 -0.0859 -0.0853 -0.1276 -0.0853 -1.0547 -0.0937 -0.0748 -0.0679 -0.1155 -0.2830 -0.0776 -0.0687
S-267	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-267	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-267	-0.20338095724582672	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-267	-0.20338095724582672	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-267	-0.0828 -0.0455 -0.1055 -0.0382 -0.1080 -0.9373 -0.1378 -1.4416 -0.8045 -0.0899 -0.0842 -0.0865 -0.1128 -0.1249 -0.1019 -4.0450 -0.1620 -0.3759 -0.1308 -0.0670 -0.0908 -0.1448 -0.1823 -0.1041 -0.0930 -0.0756 -0.0696 -0.0987 -0.1009 -0.1211 -0.1981 -0.1047 -0.0504 -0.0806 -0.0872 -0.2257 -0.0843 -0.1186 -0.0961 -0.0519 -0.0972 -0.3932 -0.1460 -0.2266 -0.1143 -0.0515 -0.0867 -0.0827 -0.1243 -0.0855 -0.1056 -0.0779 -0.0493 -0.0871 -0.0815 -0.1135 -0.2686 -0.1085 -0.0495 -0.0809 -0.0706 -0.2086 -0.0867 -0.1190 -0.1231 -0.0725 -0.0963 -0.1208 -0.0260 -0.0762 -0.8049 -0.0789 -0.0647 -0.0922 -0.0624 -0.0432 -0.0378 -0.5848 -0.1858 -0.1156 -0.0474 -0.0902 -0.0349 -0.1944 -0.1044 -0.0808 -0.0760 -0.1605 -0.0537 -0.0618 -0.0410 -0.0895 -0.0889 -0.0990 -0.0636 -1.1134 -0.1072 -0.0458 -1.0680 -0.0862 -0.0738
S-159	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-159	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-159	-0.20338091254234314	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-159	-0.20338091254234314	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-159	-0.0828 -0.0455 -0.1055 -0.0382 -0.1080 -0.9373 -0.1378 -1.4416 -0.8045 -0.0899 -0.0842 -0.0865 -0.1128 -0.1249 -0.1019 -4.0450 -0.1620 -0.3759 -0.1308 -0.0670 -0.0908 -0.1448 -0.1823 -0.1041 -0.0930 -0.0756 -0.0696 -0.0987 -0.1009 -0.1211 -0.1981 -0.1047 -0.0504 -0.0806 -0.0872 -0.2257 -0.0843 -0.1186 -0.0961 -0.0519 -0.0972 -0.3932 -0.1460 -0.2266 -0.1143 -0.0515 -0.0867 -0.0827 -0.1243 -0.0855 -0.1056 -0.0779 -0.0493 -0.0871 -0.0815 -0.1135 -0.2686 -0.1085 -0.0495 -0.0809 -0.0706 -0.2086 -0.0867 -0.1190 -0.1231 -0.0725 -0.0963 -0.1208 -0.0260 -0.0762 -0.8049 -0.0789 -0.0647 -0.0922 -0.0624 -0.0432 -0.0378 -0.5848 -0.1858 -0.1156 -0.0474 -0.0902 -0.0349 -0.1944 -0.1044 -0.0808 -0.0760 -0.1605 -0.0537 -0.0618 -0.0410 -0.0895 -0.0889 -0.0990 -0.0636 -1.1134 -0.1072 -0.0458 -1.0680 -0.0862 -0.0738
S-17	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-17	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-17	-0.20338094234466553	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-17	-0.20338094234466553	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-17	-0.0828 -0.0455 -0.1055 -0.0382 -0.1080 -0.9373 -0.1378 -1.4416 -0.8045 -0.0899 -0.0842 -0.0865 -0.1128 -0.1249 -0.1019 -4.0450 -0.1620 -0.3759 -0.1308 -0.0670 -0.0908 -0.1448 -0.1823 -0.1041 -0.0930 -0.0756 -0.0696 -0.0987 -0.1009 -0.1211 -0.1981 -0.1047 -0.0504 -0.0806 -0.0872 -0.2257 -0.0843 -0.1186 -0.0961 -0.0519 -0.0972 -0.3932 -0.1460 -0.2266 -0.1143 -0.0515 -0.0867 -0.0827 -0.1243 -0.0855 -0.1056 -0.0779 -0.0493 -0.0871 -0.0815 -0.1135 -0.2686 -0.1085 -0.0495 -0.0809 -0.0706 -0.2086 -0.0867 -0.1190 -0.1231 -0.0725 -0.0963 -0.1208 -0.0260 -0.0762 -0.8049 -0.0789 -0.0647 -0.0922 -0.0624 -0.0432 -0.0378 -0.5848 -0.1858 -0.1156 -0.0474 -0.0902 -0.0349 -0.1944 -0.1044 -0.0808 -0.0760 -0.1605 -0.0537 -0.0618 -0.0410 -0.0896 -0.0889 -0.0990 -0.0636 -1.1134 -0.1072 -0.0458 -1.0680 -0.0862 -0.0738
S-280	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-280	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-280	-0.20826606452465057	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-280	-0.20826606452465057	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-280	-0.0982 -0.0604 -1.5792 -0.0777 -0.9068 -0.0605 -0.0250 -0.0830 -0.0599 -0.1102 -1.4246 -0.0654 -0.9130 -0.0695 -0.1143 -0.0835 -0.0829 -1.4166 -0.0796 -0.8329 -0.0612 -0.1212 -0.0827 -0.0676 -1.4240 -0.0826 -0.9788 -0.0675 -0.1949 -0.1094 -0.0808 -0.2722 -0.1051 -0.0743 -0.0773 -0.0706 -0.0948 -0.0934 -0.0823 -0.1112 -0.0609 -0.0839 -0.0677 -0.6084 -0.0747 -0.0648 -0.1139 -0.0265 -0.0821 -0.0866 -1.0409 -0.0799 -0.1117 -0.1232 -0.1473 -0.1141 -0.0863 -0.0899 -0.1715 -0.0518 -0.0906 -0.0302 -0.0889 -0.0404 -0.0636 -0.1788 -0.1126 -0.1067 -0.2548 -0.0584 -0.0935 -0.0322 -0.1418 -0.0834 -0.0869 -0.0827 -0.0766 -0.0877 -0.1064 -0.0845 -0.1016 -0.0368 -0.0724 -0.3862 -1.2281 -0.0521 -0.0664 -0.0740 -0.0674 -0.0234 -0.1886 -0.0865 -0.0977 -0.1221 -0.1642 -0.1023 -0.0408 -0.0957 -0.1095 -0.1050 -0.1591 -0.2722 -0.1156 -0.1286 -0.1009 -0.0857 -0.1177 -0.1408 -1.1331 -0.1641 -0.1675 -0.0848 -0.0613
S-224	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-224	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-224	-0.20826593041419983	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-224	-0.20826593041419983	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-224	-0.0982 -0.0604 -1.5792 -0.0777 -0.9068 -0.0605 -0.0250 -0.0830 -0.0599 -0.1102 -1.4246 -0.0654 -0.9130 -0.0695 -0.1143 -0.0835 -0.0829 -1.4166 -0.0796 -0.8329 -0.0612 -0.1212 -0.0827 -0.0676 -1.4240 -0.0826 -0.9788 -0.0675 -0.1949 -0.1094 -0.0808 -0.2722 -0.1051 -0.0743 -0.0773 -0.0706 -0.0948 -0.0934 -0.0823 -0.1112 -0.0609 -0.0839 -0.0677 -0.6084 -0.0747 -0.0648 -0.1139 -0.0265 -0.0821 -0.0866 -1.0409 -0.0799 -0.1117 -0.1232 -0.1473 -0.1141 -0.0863 -0.0899 -0.1715 -0.0518 -0.0906 -0.0302 -0.0889 -0.0404 -0.0636 -0.1788 -0.1126 -0.1067 -0.2548 -0.0584 -0.0935 -0.0322 -0.1418 -0.0834 -0.0869 -0.0827 -0.0766 -0.0877 -0.1064 -0.0845 -0.1016 -0.0368 -0.0724 -0.3862 -1.2281 -0.0521 -0.0664 -0.0740 -0.0674 -0.0234 -0.1886 -0.0865 -0.0977 -0.1221 -0.1642 -0.1023 -0.0408 -0.0957 -0.1095 -0.1050 -0.1591 -0.2722 -0.1156 -0.1286 -0.1009 -0.0857 -0.1177 -0.1408 -1.1331 -0.1641 -0.1675 -0.0848 -0.0613
S-382	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-382	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-382	-0.18950268626213074	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-382	-0.18950268626213074	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-382	-0.0921 -0.0446 -0.1217 -0.1935 -0.0659 -0.0252 -0.1082 -0.0960 -0.0956 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0811 -0.0760 -0.0773 -0.0917 -0.0925 -0.1321 -0.0931 -0.0890 -0.1693 -0.1143 -0.0854 -0.1372 -0.1555 -0.0837 -0.1087 -0.2928 -0.1061 -0.1074 -0.0969 -0.1027 -2.2158 -0.2038 -0.1433 -0.0836 -0.7329 -0.0932 -0.2131 -0.1084 -0.1176 -0.0990 -0.1020 -1.7056 -0.1538 -0.1725 -0.1045 -0.2049 -0.0719 -0.1007 -0.1381 -1.0100 -0.1480 -0.1183 -0.0770 -0.0822 -0.0826 -1.1441 -0.1014 -0.1172 -0.1314 -0.6147 -0.4645 -0.1185 -0.3310 -0.0878 -0.0974 -0.1756 -0.1264 -0.1500 -0.2660 -0.0525 -0.1161 -0.0946 -0.0888 -0.1435 -0.0954 -0.0984 -0.0823 -0.1250 -0.1353 -0.1371 -0.0711 -0.3206 -0.5053 -0.0927 -0.1393 -0.0842 -0.1048 -0.0798 -0.1043 -0.2336 -0.0872 -0.0946 -0.1987 -0.2078 -0.0767 -0.1084 -0.1298 -0.0827 -0.0909 -0.1593 -0.0826 -0.0845 -0.2706 -0.1475 -0.1132 -0.1301 -0.1204 -0.0846 -0.0942 -0.3564 -0.1160 -0.1341 -0.0836 -0.9063 -0.0858 -0.0675
S-332	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-332	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-332	-0.18950271606445312	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-332	-0.18950271606445312	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-332	-0.0921 -0.0446 -0.1217 -0.1935 -0.0659 -0.0252 -0.1082 -0.0960 -0.0956 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0811 -0.0760 -0.0773 -0.0917 -0.0925 -0.1321 -0.0931 -0.0890 -0.1693 -0.1143 -0.0854 -0.1372 -0.1555 -0.0837 -0.1087 -0.2928 -0.1061 -0.1074 -0.0969 -0.1027 -2.2158 -0.2038 -0.1433 -0.0836 -0.7329 -0.0932 -0.2131 -0.1084 -0.1176 -0.0990 -0.1020 -1.7056 -0.1538 -0.1725 -0.1045 -0.2049 -0.0719 -0.1007 -0.1381 -1.0100 -0.1480 -0.1183 -0.0770 -0.0822 -0.0826 -1.1441 -0.1014 -0.1172 -0.1314 -0.6147 -0.4645 -0.1185 -0.3310 -0.0878 -0.0974 -0.1756 -0.1264 -0.1500 -0.2660 -0.0525 -0.1161 -0.0946 -0.0888 -0.1435 -0.0954 -0.0984 -0.0823 -0.1250 -0.1353 -0.1371 -0.0711 -0.3206 -0.5053 -0.0927 -0.1393 -0.0842 -0.1048 -0.0798 -0.1043 -0.2336 -0.0872 -0.0946 -0.1987 -0.2078 -0.0767 -0.1084 -0.1298 -0.0827 -0.0909 -0.1593 -0.0826 -0.0845 -0.2706 -0.1475 -0.1132 -0.1301 -0.1204 -0.0846 -0.0942 -0.3564 -0.1160 -0.1341 -0.0836 -0.9063 -0.0858 -0.0675
S-200	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-200	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-200	-0.18950271606445312	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-200	-0.18950271606445312	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-200	-0.0921 -0.0446 -0.1217 -0.1935 -0.0659 -0.0252 -0.1082 -0.0960 -0.0956 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0811 -0.0760 -0.0773 -0.0917 -0.0925 -0.1321 -0.0931 -0.0890 -0.1692 -0.1143 -0.0854 -0.1372 -0.1555 -0.0837 -0.1087 -0.2928 -0.1061 -0.1074 -0.0969 -0.1027 -2.2158 -0.2038 -0.1433 -0.0836 -0.7329 -0.0932 -0.2131 -0.1084 -0.1176 -0.0990 -0.1020 -1.7056 -0.1538 -0.1725 -0.1045 -0.2049 -0.0719 -0.1007 -0.1381 -1.0100 -0.1480 -0.1183 -0.0770 -0.0822 -0.0826 -1.1441 -0.1014 -0.1172 -0.1314 -0.6147 -0.4645 -0.1185 -0.3310 -0.0878 -0.0974 -0.1756 -0.1264 -0.1500 -0.2660 -0.0525 -0.1161 -0.0946 -0.0888 -0.1435 -0.0954 -0.0984 -0.0823 -0.1250 -0.1353 -0.1371 -0.0711 -0.3206 -0.5053 -0.0927 -0.1393 -0.0842 -0.1048 -0.0798 -0.1043 -0.2336 -0.0872 -0.0946 -0.1987 -0.2078 -0.0767 -0.1084 -0.1298 -0.0827 -0.0909 -0.1593 -0.0826 -0.0845 -0.2706 -0.1475 -0.1132 -0.1301 -0.1204 -0.0846 -0.0942 -0.3564 -0.1160 -0.1341 -0.0836 -0.9063 -0.0858 -0.0675
S-152	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-152	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-152	-0.18950268626213074	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-152	-0.18950268626213074	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-152	-0.0921 -0.0446 -0.1217 -0.1935 -0.0659 -0.0252 -0.1082 -0.0960 -0.0956 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0811 -0.0760 -0.0773 -0.0917 -0.0925 -0.1321 -0.0931 -0.0890 -0.1692 -0.1143 -0.0854 -0.1372 -0.1555 -0.0837 -0.1087 -0.2928 -0.1061 -0.1074 -0.0969 -0.1027 -2.2158 -0.2038 -0.1433 -0.0836 -0.7329 -0.0932 -0.2131 -0.1084 -0.1176 -0.0990 -0.1020 -1.7056 -0.1538 -0.1725 -0.1045 -0.2049 -0.0719 -0.1007 -0.1381 -1.0100 -0.1480 -0.1183 -0.0770 -0.0822 -0.0826 -1.1441 -0.1014 -0.1172 -0.1314 -0.6147 -0.4645 -0.1185 -0.3310 -0.0878 -0.0974 -0.1756 -0.1264 -0.1500 -0.2660 -0.0525 -0.1161 -0.0946 -0.0888 -0.1435 -0.0954 -0.0984 -0.0823 -0.1250 -0.1353 -0.1371 -0.0711 -0.3206 -0.5053 -0.0927 -0.1393 -0.0842 -0.1048 -0.0798 -0.1043 -0.2336 -0.0872 -0.0946 -0.1987 -0.2078 -0.0767 -0.1084 -0.1298 -0.0827 -0.0909 -0.1593 -0.0826 -0.0845 -0.2706 -0.1475 -0.1132 -0.1301 -0.1204 -0.0846 -0.0942 -0.3564 -0.1160 -0.1341 -0.0836 -0.9063 -0.0858 -0.0675
S-9	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-9	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-9	-0.18950271606445312	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-9	-0.18950271606445312	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-9	-0.0921 -0.0446 -0.1217 -0.1935 -0.0659 -0.0252 -0.1082 -0.0960 -0.0956 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0811 -0.0760 -0.0773 -0.0917 -0.0925 -0.1321 -0.0931 -0.0890 -0.1692 -0.1143 -0.0854 -0.1372 -0.1555 -0.0837 -0.1087 -0.2928 -0.1061 -0.1074 -0.0969 -0.1027 -2.2158 -0.2038 -0.1433 -0.0836 -0.7329 -0.0932 -0.2131 -0.1084 -0.1176 -0.0990 -0.1020 -1.7056 -0.1538 -0.1725 -0.1045 -0.2049 -0.0719 -0.1007 -0.1381 -1.0100 -0.1480 -0.1183 -0.0770 -0.0822 -0.0826 -1.1441 -0.1014 -0.1172 -0.1314 -0.6147 -0.4645 -0.1185 -0.3310 -0.0878 -0.0974 -0.1756 -0.1264 -0.1500 -0.2660 -0.0525 -0.1161 -0.0946 -0.0888 -0.1435 -0.0954 -0.0984 -0.0823 -0.1250 -0.1353 -0.1371 -0.0711 -0.3206 -0.5053 -0.0927 -0.1393 -0.0842 -0.1048 -0.0798 -0.1043 -0.2336 -0.0872 -0.0946 -0.1987 -0.2078 -0.0767 -0.1084 -0.1298 -0.0827 -0.0909 -0.1593 -0.0826 -0.0845 -0.2706 -0.1475 -0.1132 -0.1301 -0.1204 -0.0846 -0.0942 -0.3564 -0.1160 -0.1341 -0.0836 -0.9063 -0.0858 -0.0675
S-326	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array; } }
T-326	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array [ i ] ; array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = tmp; } return array; } }
H-326	-0.17178873717784882	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
D-326	-0.17178873717784882	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
P-326	-0.0964 -0.0406 -0.1054 -0.1950 -0.0837 -0.0542 -0.0837 -0.0321 -0.1114 -0.0871 -0.1253 -0.0980 -0.0564 -0.0854 -0.0864 -0.1354 -0.1142 -0.1037 -0.1426 -0.1083 -0.1440 -0.1081 -0.0830 -0.0929 -0.0617 -0.4268 -1.9357 -0.1093 -0.4037 -0.0856 -0.0852 -0.1539 -0.0777 -0.1107 -0.0831 -0.0797 -0.0879 -0.0926 -0.0854 -0.3008 -0.1585 -0.0940 -0.0992 -0.1606 -0.0672 -0.1267 -0.2267 -0.0858 -0.0805 -0.0696 -0.3736 -0.0882 -0.1632 -0.2417 -0.1200 -0.0805 -0.0892 -0.0994 -1.4800 -0.0870 -0.1096 -0.9097 -0.0846 -0.0718 -0.3986 -0.0844 -0.1562 -0.2781 -0.0858 -0.0846 -0.1144 -0.1059 -0.1342 -0.0813 -0.1111 -0.0561 -0.0992 -0.2256 -0.0866 -0.0863 -0.1637 -0.0971 -1.0077 -0.1955 -0.1118 -0.1022 -0.0945 -0.0944 -0.1541 -0.0858 -0.0782 -0.1270 -0.0878 -0.7262 -0.1292 -0.1014 -0.0969 -0.0633 -0.0957 -0.1015 -0.0916 -0.0923 -0.1052 -0.1388 -0.0654 -0.3529 -0.0909 -0.0805 -0.0847
S-197	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array; } }
T-197	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array [ i ] ; array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = tmp; } return array; } }
H-197	-0.17178872227668762	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
D-197	-0.17178872227668762	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
P-197	-0.0964 -0.0406 -0.1054 -0.1950 -0.0837 -0.0542 -0.0837 -0.0321 -0.1114 -0.0871 -0.1253 -0.0980 -0.0564 -0.0854 -0.0864 -0.1354 -0.1142 -0.1037 -0.1426 -0.1083 -0.1440 -0.1081 -0.0830 -0.0929 -0.0617 -0.4268 -1.9357 -0.1093 -0.4037 -0.0856 -0.0852 -0.1539 -0.0777 -0.1107 -0.0831 -0.0797 -0.0879 -0.0926 -0.0854 -0.3008 -0.1585 -0.0940 -0.0992 -0.1606 -0.0672 -0.1267 -0.2267 -0.0858 -0.0805 -0.0696 -0.3736 -0.0882 -0.1632 -0.2417 -0.1200 -0.0805 -0.0892 -0.0994 -1.4800 -0.0870 -0.1096 -0.9097 -0.0846 -0.0718 -0.3986 -0.0844 -0.1562 -0.2781 -0.0858 -0.0846 -0.1144 -0.1059 -0.1342 -0.0813 -0.1111 -0.0561 -0.0992 -0.2256 -0.0866 -0.0863 -0.1637 -0.0971 -1.0077 -0.1955 -0.1118 -0.1022 -0.0945 -0.0944 -0.1541 -0.0858 -0.0782 -0.1270 -0.0878 -0.7262 -0.1292 -0.1014 -0.0969 -0.0633 -0.0957 -0.1015 -0.0916 -0.0923 -0.1052 -0.1388 -0.0654 -0.3529 -0.0909 -0.0805 -0.0847
S-190	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array; } }
T-190	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array [ i ] ; array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = tmp; } return array; } }
H-190	-0.17178863286972046	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
D-190	-0.17178863286972046	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
P-190	-0.0964 -0.0406 -0.1054 -0.1950 -0.0837 -0.0542 -0.0837 -0.0321 -0.1114 -0.0871 -0.1253 -0.0980 -0.0564 -0.0854 -0.0864 -0.1354 -0.1142 -0.1037 -0.1426 -0.1083 -0.1440 -0.1081 -0.0830 -0.0929 -0.0617 -0.4268 -1.9357 -0.1093 -0.4037 -0.0856 -0.0852 -0.1539 -0.0777 -0.1107 -0.0831 -0.0797 -0.0879 -0.0926 -0.0854 -0.3008 -0.1585 -0.0940 -0.0992 -0.1606 -0.0672 -0.1267 -0.2267 -0.0858 -0.0805 -0.0696 -0.3736 -0.0882 -0.1632 -0.2417 -0.1200 -0.0805 -0.0892 -0.0994 -1.4800 -0.0870 -0.1096 -0.9097 -0.0846 -0.0718 -0.3986 -0.0844 -0.1562 -0.2781 -0.0858 -0.0846 -0.1144 -0.1059 -0.1342 -0.0813 -0.1111 -0.0561 -0.0992 -0.2256 -0.0866 -0.0863 -0.1637 -0.0971 -1.0077 -0.1955 -0.1118 -0.1022 -0.0945 -0.0944 -0.1541 -0.0858 -0.0782 -0.1270 -0.0878 -0.7262 -0.1292 -0.1014 -0.0969 -0.0633 -0.0957 -0.1015 -0.0916 -0.0923 -0.1052 -0.1388 -0.0654 -0.3529 -0.0909 -0.0805 -0.0847
S-105	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array; } }
T-105	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array [ i ] ; array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = tmp; } return array; } }
H-105	-0.17178872227668762	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
D-105	-0.17178872227668762	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
P-105	-0.0964 -0.0406 -0.1054 -0.1950 -0.0837 -0.0542 -0.0837 -0.0321 -0.1114 -0.0871 -0.1253 -0.0980 -0.0564 -0.0854 -0.0864 -0.1354 -0.1142 -0.1037 -0.1426 -0.1083 -0.1440 -0.1081 -0.0830 -0.0929 -0.0617 -0.4268 -1.9357 -0.1093 -0.4037 -0.0856 -0.0852 -0.1539 -0.0777 -0.1107 -0.0831 -0.0797 -0.0879 -0.0926 -0.0854 -0.3008 -0.1585 -0.0940 -0.0992 -0.1606 -0.0672 -0.1267 -0.2267 -0.0858 -0.0805 -0.0696 -0.3736 -0.0882 -0.1632 -0.2417 -0.1200 -0.0805 -0.0892 -0.0994 -1.4800 -0.0870 -0.1096 -0.9097 -0.0846 -0.0718 -0.3986 -0.0844 -0.1562 -0.2781 -0.0858 -0.0846 -0.1144 -0.1059 -0.1342 -0.0813 -0.1111 -0.0561 -0.0992 -0.2256 -0.0866 -0.0863 -0.1637 -0.0971 -1.0077 -0.1955 -0.1118 -0.1022 -0.0945 -0.0944 -0.1541 -0.0858 -0.0782 -0.1270 -0.0878 -0.7262 -0.1292 -0.1014 -0.0969 -0.0633 -0.0957 -0.1015 -0.0916 -0.0923 -0.1052 -0.1388 -0.0654 -0.3529 -0.0909 -0.0805 -0.0847
S-53	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
T-53	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; if ( s == null || s.isEmpty ( ) ) return result; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
H-53	-0.23713558912277222	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c ; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
D-53	-0.23713558912277222	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c ; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
P-53	-0.0946 -0.0638 -1.8181 -0.0785 -0.6498 -0.0598 -0.0158 -0.0919 -0.0417 -0.1118 -0.9455 -0.1017 -0.0814 -0.0855 -1.3932 -0.0787 -0.5455 -0.0670 -0.0636 -0.0831 -0.0581 -1.5933 -0.0844 -0.6271 -0.0707 -0.2455 -0.1152 -0.0778 -1.6611 -0.1380 -0.0956 -0.0528 -0.0897 -1.5871 -0.1669 -0.1038 -0.1124 -0.0946 -0.0667 -0.0611 -0.1776 -0.0726 -0.0297 -0.3136 -0.1508 -0.0936 -0.0856 -0.1350 -0.1122 -0.1548 -0.0936 -0.0291 -0.0852 -0.0841 -0.0908 -0.1113 -0.0657 -0.1061 -0.0629 -0.0177 -0.1844 -0.1074 -0.0919 -0.0746 -0.0987 -0.0656 -0.0869 -0.2011 -0.7374 -0.0834 -0.0895 -2.1939 -0.2583 -0.1240 -0.0708 -0.0895 -0.0385 -0.0877 -0.0676 -0.1190 -0.0569 -0.3499 -0.6698 -0.3993 -0.1333 -0.1039 -0.6782 -0.1281 -0.0171 -0.0725 -0.0213 -0.0974 -0.0946 -0.4223 -0.1164 -1.4206 -0.0687 -0.0740 -0.0657 -0.1015 -0.0363 -0.0943 -0.0904 -0.0902 -0.3472 -0.3080 -0.1145 -0.0817 -0.1205 -0.0831 -0.0892 -0.0770 -0.0737 -0.1404 -0.0842 -0.0701
S-61	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-61	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-61	-0.2410474568605423	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
D-61	-0.2410474568605423	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
P-61	-0.0922 -0.0517 -0.0988 -0.0283 -0.0286 -0.1206 -0.0940 -0.1616 -0.0952 -0.0707 -0.0870 -0.0834 -0.1222 -0.2158 -0.0784 -0.1085 -0.0902 -0.0732 -0.0665 -0.0823 -0.0805 -0.1043 -0.0633 -0.1413 -0.0913 -0.0863 -0.1319 -0.0821 -0.0327 -0.0789 -0.0791 -0.0804 -0.0544 -0.0589 -0.0733 -0.0610 -0.0961 -0.0696 -0.1301 -0.0868 -0.1760 -0.1078 -0.0639 -1.0882 -2.3411 -0.0862 -0.0373 -0.1186 -0.1297 -0.1047 -0.0957 -0.1311 -0.1178 -0.0710 -0.0849 -0.0961 -1.1893 -0.0836 -0.1031 -0.1889 -0.0935 -0.0709 -0.1887 -0.0808 -0.1602 -0.1637 -0.0879 -0.2067 -0.0872 -0.1109 -0.0931 -0.0941 -0.0745 -0.0986 -0.1759 -0.0665 -0.1429 -0.0887 -0.0650 -0.1427 -0.0874 -1.1308 -0.0870 -0.4200 -0.1181 -1.8460 -0.1171 -2.0072 -0.0919 -1.3775 -0.1175 -0.0784 -0.6535 -0.1659 -0.0872 -0.6698 -1.5954 -0.0939 -1.2263 -0.1177 -0.0691 -0.4044 -0.0273 -0.0926 -0.1189 -0.0840 -0.0930 -0.1150 -0.0970 -0.2471 -1.0250 -0.0820 -0.0482 -0.9891 -0.0762 -0.0651
S-129	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-129	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-129	-0.24104738235473633	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
D-129	-0.24104738235473633	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
P-129	-0.0922 -0.0517 -0.0988 -0.0283 -0.0286 -0.1206 -0.0940 -0.1616 -0.0952 -0.0707 -0.0870 -0.0834 -0.1222 -0.2158 -0.0784 -0.1085 -0.0902 -0.0732 -0.0665 -0.0823 -0.0805 -0.1043 -0.0633 -0.1413 -0.0913 -0.0863 -0.1319 -0.0821 -0.0327 -0.0789 -0.0791 -0.0804 -0.0544 -0.0589 -0.0733 -0.0610 -0.0961 -0.0696 -0.1301 -0.0868 -0.1760 -0.1078 -0.0639 -1.0882 -2.3411 -0.0862 -0.0373 -0.1186 -0.1297 -0.1047 -0.0957 -0.1311 -0.1178 -0.0710 -0.0849 -0.0961 -1.1893 -0.0836 -0.1031 -0.1889 -0.0935 -0.0709 -0.1887 -0.0808 -0.1602 -0.1637 -0.0879 -0.2067 -0.0872 -0.1109 -0.0931 -0.0941 -0.0745 -0.0986 -0.1759 -0.0665 -0.1429 -0.0887 -0.0650 -0.1427 -0.0874 -1.1308 -0.0870 -0.4200 -0.1181 -1.8460 -0.1171 -2.0072 -0.0919 -1.3775 -0.1175 -0.0784 -0.6535 -0.1659 -0.0872 -0.6698 -1.5954 -0.0939 -1.2263 -0.1177 -0.0691 -0.4044 -0.0273 -0.0926 -0.1189 -0.0840 -0.0930 -0.1150 -0.0970 -0.2471 -1.0250 -0.0820 -0.0483 -0.9891 -0.0762 -0.0651
S-352	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
T-352	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
H-352	-0.16902203857898712	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
D-352	-0.16902203857898712	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
P-352	-0.0905 -0.0527 -1.0505 -0.2033 -0.2083 -0.0435 -0.0936 -0.0281 -0.1086 -0.6437 -0.0318 -0.0889 -0.0884 -0.1961 -0.1119 -0.0518 -0.1525 -0.7381 -0.1054 -0.0980 -0.0832 -0.0959 -0.0890 -0.0965 -0.0755 -0.0392 -0.0990 -0.2027 -0.1186 -0.0773 -0.0909 -0.0953 -0.0886 -0.0827 -0.0981 -0.1154 -0.1044 -0.0381 -0.1227 -0.5540 -0.1075 -0.0223 -0.0866 -0.0918 -0.0832 -0.0657 -0.0402 -0.0987 -0.1568 -0.1111 -0.0217 -0.0858 -0.0949 -0.0817 -0.0829 -0.1272 -0.1403 -0.0462 -0.0841 -0.7564 -0.1151 -0.1040 -0.0744 -0.0786 -0.0735 -0.5203 -0.0917 -0.0815 -0.1136 -0.1025 -0.1025 -0.5187 -0.0730 -0.0910 -0.0747 -0.6020 -0.0747 -0.0760 -0.1376 -0.0677 -0.0822 -0.0282 -0.1032 -0.6954 -0.1007 -0.0870 -0.0876 -0.0844 -0.1458 -0.1129 -0.5132 -0.0901 -0.0690 -0.0423 -0.1135 -0.0601 -0.0859 -1.0334 -0.1167 -0.1394 -0.0596 -0.1496 -0.0422 -0.0456 -0.0521 -0.0956 -0.1043 -0.0568 -0.0928 -0.2694 -0.1112 -0.0858 -0.1066 -0.2622 -0.1000 -1.1617 -0.1511 -0.0610 -0.0712 -0.0844 -0.2265 -0.9594 -0.0974 -1.0419 -0.1137 -0.0817 -0.1021 -0.1917 -0.1079 -0.0898 -0.0803 -0.4359 -0.0772 -0.0765 -0.0711
S-289	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
T-289	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
H-289	-0.1690220683813095	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
D-289	-0.1690220683813095	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
P-289	-0.0905 -0.0527 -1.0505 -0.2033 -0.2083 -0.0435 -0.0936 -0.0281 -0.1086 -0.6437 -0.0318 -0.0889 -0.0884 -0.1961 -0.1119 -0.0518 -0.1525 -0.7381 -0.1054 -0.0980 -0.0832 -0.0959 -0.0890 -0.0965 -0.0755 -0.0392 -0.0990 -0.2027 -0.1186 -0.0773 -0.0909 -0.0953 -0.0885 -0.0827 -0.0981 -0.1154 -0.1044 -0.0381 -0.1227 -0.5540 -0.1075 -0.0223 -0.0866 -0.0918 -0.0833 -0.0657 -0.0402 -0.0987 -0.1568 -0.1111 -0.0217 -0.0858 -0.0949 -0.0817 -0.0829 -0.1271 -0.1403 -0.0462 -0.0841 -0.7564 -0.1151 -0.1040 -0.0744 -0.0786 -0.0735 -0.5203 -0.0917 -0.0815 -0.1136 -0.1025 -0.1025 -0.5187 -0.0730 -0.0910 -0.0747 -0.6020 -0.0747 -0.0760 -0.1376 -0.0677 -0.0822 -0.0282 -0.1032 -0.6954 -0.1007 -0.0870 -0.0876 -0.0844 -0.1458 -0.1129 -0.5133 -0.0901 -0.0690 -0.0423 -0.1135 -0.0601 -0.0859 -1.0334 -0.1167 -0.1394 -0.0596 -0.1496 -0.0422 -0.0456 -0.0521 -0.0956 -0.1043 -0.0568 -0.0928 -0.2694 -0.1112 -0.0858 -0.1066 -0.2622 -0.1000 -1.1617 -0.1511 -0.0610 -0.0712 -0.0844 -0.2265 -0.9594 -0.0974 -1.0419 -0.1137 -0.0817 -0.1021 -0.1917 -0.1079 -0.0898 -0.0803 -0.4359 -0.0772 -0.0765 -0.0711
S-130	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
T-130	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
H-130	-0.16902197897434235	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
D-130	-0.16902197897434235	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
P-130	-0.0905 -0.0527 -1.0505 -0.2033 -0.2083 -0.0435 -0.0936 -0.0281 -0.1086 -0.6437 -0.0318 -0.0889 -0.0884 -0.1961 -0.1119 -0.0518 -0.1525 -0.7381 -0.1054 -0.0980 -0.0832 -0.0959 -0.0890 -0.0965 -0.0755 -0.0392 -0.0990 -0.2027 -0.1186 -0.0773 -0.0909 -0.0953 -0.0886 -0.0827 -0.0981 -0.1154 -0.1044 -0.0381 -0.1227 -0.5540 -0.1075 -0.0223 -0.0866 -0.0918 -0.0832 -0.0657 -0.0402 -0.0987 -0.1568 -0.1111 -0.0217 -0.0858 -0.0949 -0.0817 -0.0829 -0.1271 -0.1403 -0.0462 -0.0841 -0.7564 -0.1151 -0.1040 -0.0744 -0.0786 -0.0735 -0.5203 -0.0917 -0.0815 -0.1136 -0.1025 -0.1025 -0.5187 -0.0730 -0.0910 -0.0747 -0.6020 -0.0747 -0.0760 -0.1376 -0.0677 -0.0822 -0.0282 -0.1032 -0.6954 -0.1007 -0.0870 -0.0876 -0.0844 -0.1458 -0.1129 -0.5133 -0.0901 -0.0690 -0.0423 -0.1135 -0.0601 -0.0859 -1.0334 -0.1167 -0.1394 -0.0596 -0.1496 -0.0422 -0.0456 -0.0521 -0.0956 -0.1043 -0.0568 -0.0928 -0.2694 -0.1112 -0.0858 -0.1066 -0.2622 -0.1000 -1.1617 -0.1511 -0.0610 -0.0712 -0.0844 -0.2265 -0.9594 -0.0974 -1.0419 -0.1137 -0.0817 -0.1021 -0.1917 -0.1079 -0.0898 -0.0803 -0.4359 -0.0772 -0.0765 -0.0711
S-111	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-111	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-111	-0.1485215723514557	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-111	-0.1485215723514557	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-111	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0745
S-338	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-338	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-338	-0.14852166175842285	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-338	-0.14852166175842285	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-338	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-335	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-335	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-335	-0.14852160215377808	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-335	-0.14852160215377808	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-335	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-331	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-331	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-331	-0.14852158725261688	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-331	-0.14852158725261688	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-331	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-302	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-302	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-302	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-302	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-302	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-260	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-260	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-260	-0.1485215574502945	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-260	-0.1485215574502945	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-260	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0795 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-218	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-218	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-218	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-218	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-218	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-183	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-183	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-183	-0.1485215425491333	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-183	-0.1485215425491333	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-183	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0745
S-182	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-182	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-182	-0.1485215723514557	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-182	-0.1485215723514557	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-182	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0745
S-179	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-179	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-179	-0.14852166175842285	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-179	-0.14852166175842285	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-179	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-171	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-171	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-171	-0.14852160215377808	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-171	-0.14852160215377808	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-171	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-162	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-162	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-162	-0.14852158725261688	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-162	-0.14852158725261688	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-162	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-153	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-153	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-153	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-153	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-153	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-273	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-273	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-273	-0.21572351455688477	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-273	-0.21572351455688477	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-273	-0.0974 -0.0539 -1.5085 -0.0869 -1.0512 -0.0554 -0.0392 -0.0934 -0.0543 -0.1154 -1.3913 -0.0734 -1.0751 -0.0662 -0.0413 -0.0849 -0.0822 -1.6422 -0.0824 -1.0279 -0.0629 -0.0628 -0.0827 -0.0641 -1.2468 -0.0698 -0.1510 -0.1811 -0.1335 -0.0795 -0.1786 -0.1079 -1.7987 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8861 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6851 -0.0893 -0.0882 -0.2006 -0.1270 -0.0810 -0.5647 -0.0825 -0.0926 -0.0833 -0.7403 -0.0770 -0.0843 -0.1225 -0.0531 -0.0928 -0.0734 -0.1227 -1.0891 -0.1104 -0.0952 -0.0877 -0.4178 -0.1472 -0.0919 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1162 -0.0879 -0.0870 -0.0825 -0.7066 -0.1916 -0.1486 -0.1280 -0.2851 -0.2415 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0565 -0.0493 -0.1021 -0.1394 -0.1150 -0.1927 -0.0981 -0.1880 -0.1063 -0.0612 -0.1303 -0.1987 -0.1050 -0.2685 -0.1087 -0.1958 -0.1515 -0.1527 -0.0998 -0.2185 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1048 -0.1643 -0.1101 -0.0871 -0.0212 -0.0539 -0.1158 -0.0853 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-104	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-104	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-104	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-104	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-104	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-85	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-85	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-85	-0.1485215425491333	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-85	-0.1485215425491333	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-85	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0745
S-56	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-56	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-56	-0.1485215723514557	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-56	-0.1485215723514557	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-56	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0745
S-42	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-42	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-42	-0.14852166175842285	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-42	-0.14852166175842285	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-42	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-21	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-21	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-21	-0.14852160215377808	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-21	-0.14852160215377808	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-21	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-8	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-8	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-8	-0.14852158725261688	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-8	-0.14852158725261688	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-8	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0895 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-5	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-5	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-5	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-5	-0.14852163195610046	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-5	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1040 -2.2575 -0.1557 -0.2265 -0.3543 -0.1137 -0.2642 -0.1169 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0931 -0.0900 -0.0961 -0.3289 -0.1104 -0.0952 -0.0807 -0.1818 -0.0906 -0.0744
S-412	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-412	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-412	-0.17849397659301758	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-412	-0.17849397659301758	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-412	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0884 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1111 -0.0829 -1.0096 -0.0960 -0.0943 -0.1219 -0.1086 -0.0491 -0.0853 -0.0934 -0.0803 -0.0983 -0.1469 -0.1099 -0.1006 -0.1384 -0.1043 -0.1440 -0.1126 -0.0816 -0.4374 -0.0792 -0.3449 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-398	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-398	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-398	-0.1784939169883728	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-398	-0.1784939169883728	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-398	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0885 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1111 -0.0829 -1.0096 -0.0960 -0.0943 -0.1219 -0.1086 -0.0491 -0.0853 -0.0934 -0.0803 -0.0983 -0.1469 -0.1099 -0.1006 -0.1384 -0.1043 -0.1440 -0.1126 -0.0816 -0.4374 -0.0792 -0.3449 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-395	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-395	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-395	-0.17849387228488922	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-395	-0.17849387228488922	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-395	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0885 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1111 -0.0829 -1.0096 -0.0960 -0.0943 -0.1219 -0.1086 -0.0491 -0.0853 -0.0934 -0.0803 -0.0983 -0.1469 -0.1099 -0.1006 -0.1384 -0.1043 -0.1440 -0.1126 -0.0816 -0.4374 -0.0792 -0.3449 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-366	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-366	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-366	-0.17849387228488922	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-366	-0.17849387228488922	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-366	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0884 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1110 -0.0829 -1.0096 -0.0960 -0.0943 -0.1219 -0.1086 -0.0491 -0.0853 -0.0934 -0.0803 -0.0983 -0.1469 -0.1099 -0.1006 -0.1384 -0.1043 -0.1440 -0.1126 -0.0816 -0.4374 -0.0792 -0.3449 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-205	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-205	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-205	-0.17849396169185638	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-205	-0.17849396169185638	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-205	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0885 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1110 -0.0829 -1.0096 -0.0960 -0.0943 -0.1219 -0.1086 -0.0491 -0.0853 -0.0934 -0.0803 -0.0983 -0.1469 -0.1099 -0.1006 -0.1384 -0.1043 -0.1440 -0.1126 -0.0816 -0.4374 -0.0792 -0.3449 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-0	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-0	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-0	-0.17849397659301758	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-0	-0.17849397659301758	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-0	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0885 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1111 -0.0829 -1.0096 -0.0960 -0.0943 -0.1219 -0.1086 -0.0491 -0.0853 -0.0934 -0.0803 -0.0983 -0.1469 -0.1099 -0.1006 -0.1384 -0.1043 -0.1440 -0.1126 -0.0816 -0.4374 -0.0792 -0.3449 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-314	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-314	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-314	-0.2157236784696579	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-314	-0.2157236784696579	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-314	-0.0974 -0.0539 -1.5085 -0.0869 -1.0512 -0.0554 -0.0392 -0.0934 -0.0543 -0.1154 -1.3913 -0.0734 -1.0751 -0.0662 -0.0413 -0.0849 -0.0822 -1.6422 -0.0824 -1.0279 -0.0629 -0.0628 -0.0827 -0.0641 -1.2468 -0.0698 -0.1510 -0.1811 -0.1335 -0.0795 -0.1786 -0.1079 -1.7987 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8861 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6851 -0.0893 -0.0882 -0.2006 -0.1270 -0.0810 -0.5647 -0.0825 -0.0926 -0.0833 -0.7403 -0.0770 -0.0843 -0.1225 -0.0531 -0.0928 -0.0734 -0.1227 -1.0891 -0.1104 -0.0952 -0.0877 -0.4178 -0.1472 -0.0919 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1162 -0.0879 -0.0870 -0.0825 -0.7066 -0.1916 -0.1486 -0.1280 -0.2851 -0.2415 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0565 -0.0493 -0.1021 -0.1394 -0.1150 -0.1927 -0.0981 -0.1880 -0.1063 -0.0612 -0.1303 -0.1987 -0.1050 -0.2685 -0.1087 -0.1958 -0.1515 -0.1527 -0.0998 -0.2185 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1048 -0.1642 -0.1102 -0.0871 -0.0212 -0.0539 -0.1158 -0.0853 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-307	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-307	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-307	-0.21572352945804596	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-307	-0.21572352945804596	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-307	-0.0974 -0.0539 -1.5085 -0.0869 -1.0512 -0.0554 -0.0392 -0.0934 -0.0543 -0.1154 -1.3913 -0.0734 -1.0751 -0.0662 -0.0413 -0.0849 -0.0822 -1.6422 -0.0824 -1.0279 -0.0629 -0.0628 -0.0827 -0.0641 -1.2468 -0.0698 -0.1510 -0.1811 -0.1335 -0.0795 -0.1786 -0.1079 -1.7987 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8861 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6851 -0.0893 -0.0882 -0.2006 -0.1270 -0.0810 -0.5647 -0.0825 -0.0926 -0.0833 -0.7403 -0.0770 -0.0843 -0.1225 -0.0531 -0.0928 -0.0734 -0.1227 -1.0891 -0.1104 -0.0952 -0.0877 -0.4178 -0.1472 -0.0919 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1162 -0.0879 -0.0870 -0.0825 -0.7066 -0.1916 -0.1486 -0.1280 -0.2851 -0.2415 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0565 -0.0493 -0.1021 -0.1394 -0.1150 -0.1927 -0.0981 -0.1880 -0.1063 -0.0612 -0.1303 -0.1987 -0.1050 -0.2685 -0.1087 -0.1958 -0.1515 -0.1527 -0.0998 -0.2185 -0.1016 -0.1029 -0.0703 -0.0837 -0.1305 -0.1048 -0.1643 -0.1101 -0.0871 -0.0212 -0.0539 -0.1158 -0.0853 -0.1031 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-120	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-120	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-120	-0.16116507351398468	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-120	-0.16116507351398468	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-120	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-119	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-119	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-119	-0.16116507351398468	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-119	-0.16116507351398468	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-119	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-109	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-109	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-109	-0.16116493940353394	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-109	-0.16116493940353394	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-109	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-93	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-93	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-93	-0.16116507351398468	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-93	-0.16116507351398468	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-93	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-57	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-57	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-57	-0.1611650437116623	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-57	-0.1611650437116623	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-57	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-22	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-22	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-22	-0.16116495430469513	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-22	-0.16116495430469513	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-22	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-3	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-3	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-3	-0.1611650586128235	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-3	-0.1611650586128235	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-3	-0.0832 -0.0493 -0.9268 -0.0226 -0.1069 -0.8156 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0862 -0.0575 -0.6351 -0.1887 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2192 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0926 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1078 -0.3774 -0.0964 -0.2714 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7086 -0.0930 -0.0697 -0.0457 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2541 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2297 -0.0606 -0.1074 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2250 -0.1430 -0.2125 -0.0758 -0.0539 -0.1107 -0.1994 -0.1561 -0.1830 -0.0688 -0.0907 -0.0763 -0.1443 -0.1318 -0.1503 -0.0811 -0.0600 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1537 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0738 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0779 -0.0858 -0.0832 -0.1862 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9762 -0.1089 -0.1501 -0.0913 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0876
S-184	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-184	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-184	-0.13135290145874023	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-184	-0.13135290145874023	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-184	-0.0948 -0.0411 -0.0895 -0.2166 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2765 -0.0926 -0.0674 -0.0642 -0.0779 -0.0687 -0.0927 -0.0665 -0.1128 -0.0891 -0.0910 -0.1343 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6838 -0.0835 -0.1289 -0.2315 -0.0790 -0.1174 -0.0565 -0.0920 -0.0603 -0.1303 -0.2618 -0.0906 -0.0601 -0.0966 -0.1355 -0.1147 -0.0652 -0.0884 -0.0861 -0.7705 -0.0866 -0.1023 -0.1247 -0.0904 -0.0800 -0.2760 -0.0835 -0.1036 -0.1707 -0.0797 -0.0811 -0.2170 -0.0380 -0.0949 -0.3744 -0.1966 -0.0884 -0.1245 -0.1790 -0.0735 -0.0883 -0.1214 -0.0623 -0.0902 -0.0917 -0.1045 -0.0895 -0.1009 -2.0203 -0.0866 -0.0437 -0.1176 -0.1056 -0.0346 -0.1392 -0.0912 -0.1623 -0.1115 -0.0615 -0.0861 -0.0861 -0.6672 -0.0871 -0.1008 -0.0884 -0.0962 -0.0880 -0.2539 -0.0780 -0.0756 -0.2807 -0.0771 -0.0865 -0.2713 -0.1192 -0.1337 -0.1494 -0.0566 -0.1534 -0.1065 -0.0859 -0.0814 -0.0957 -0.0980 -0.1083 -0.0922 -0.1214 -0.2569 -0.0307 -0.1052 -0.2149 -0.1412 -0.0822 -0.1071 -0.0774 -0.0830 -0.1070 -0.0937 -0.0705 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0835 -0.0815 -0.1575 -0.1211 -0.0877 -0.0923 -0.1012 -0.0967 -0.0978 -0.2030 -0.0896 -0.0732
S-137	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-137	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-137	-0.13135285675525665	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-137	-0.13135285675525665	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-137	-0.0948 -0.0411 -0.0895 -0.2166 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2765 -0.0926 -0.0674 -0.0642 -0.0779 -0.0687 -0.0927 -0.0665 -0.1128 -0.0891 -0.0910 -0.1343 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6838 -0.0835 -0.1289 -0.2315 -0.0790 -0.1174 -0.0565 -0.0920 -0.0603 -0.1303 -0.2618 -0.0906 -0.0601 -0.0966 -0.1355 -0.1147 -0.0652 -0.0884 -0.0861 -0.7705 -0.0866 -0.1023 -0.1247 -0.0904 -0.0800 -0.2760 -0.0835 -0.1036 -0.1707 -0.0797 -0.0811 -0.2170 -0.0380 -0.0949 -0.3744 -0.1966 -0.0884 -0.1245 -0.1790 -0.0735 -0.0883 -0.1214 -0.0623 -0.0902 -0.0917 -0.1045 -0.0895 -0.1009 -2.0203 -0.0866 -0.0437 -0.1176 -0.1056 -0.0346 -0.1392 -0.0912 -0.1623 -0.1115 -0.0615 -0.0861 -0.0861 -0.6672 -0.0871 -0.1008 -0.0884 -0.0962 -0.0880 -0.2539 -0.0780 -0.0756 -0.2807 -0.0771 -0.0865 -0.2713 -0.1192 -0.1337 -0.1494 -0.0566 -0.1534 -0.1065 -0.0859 -0.0814 -0.0957 -0.0980 -0.1083 -0.0922 -0.1214 -0.2569 -0.0307 -0.1052 -0.2149 -0.1412 -0.0822 -0.1071 -0.0774 -0.0830 -0.1070 -0.0937 -0.0704 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0835 -0.0815 -0.1575 -0.1211 -0.0877 -0.0923 -0.1012 -0.0967 -0.0978 -0.2030 -0.0896 -0.0732
S-108	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-108	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-108	-0.13135291635990143	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-108	-0.13135291635990143	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-108	-0.0948 -0.0411 -0.0895 -0.2166 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2765 -0.0926 -0.0674 -0.0642 -0.0779 -0.0687 -0.0927 -0.0665 -0.1128 -0.0891 -0.0910 -0.1343 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6838 -0.0835 -0.1289 -0.2315 -0.0790 -0.1174 -0.0565 -0.0920 -0.0603 -0.1303 -0.2618 -0.0906 -0.0601 -0.0966 -0.1355 -0.1147 -0.0652 -0.0884 -0.0861 -0.7705 -0.0866 -0.1023 -0.1247 -0.0904 -0.0800 -0.2760 -0.0835 -0.1036 -0.1707 -0.0797 -0.0811 -0.2170 -0.0380 -0.0949 -0.3744 -0.1966 -0.0884 -0.1245 -0.1790 -0.0735 -0.0883 -0.1214 -0.0623 -0.0902 -0.0917 -0.1045 -0.0895 -0.1009 -2.0203 -0.0866 -0.0437 -0.1176 -0.1056 -0.0346 -0.1392 -0.0912 -0.1623 -0.1115 -0.0615 -0.0861 -0.0861 -0.6672 -0.0871 -0.1008 -0.0884 -0.0962 -0.0880 -0.2539 -0.0780 -0.0756 -0.2807 -0.0771 -0.0865 -0.2713 -0.1192 -0.1337 -0.1494 -0.0566 -0.1534 -0.1065 -0.0859 -0.0814 -0.0957 -0.0980 -0.1083 -0.0922 -0.1214 -0.2569 -0.0307 -0.1052 -0.2149 -0.1412 -0.0822 -0.1071 -0.0774 -0.0830 -0.1070 -0.0937 -0.0705 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0835 -0.0815 -0.1575 -0.1211 -0.0877 -0.0923 -0.1012 -0.0967 -0.0978 -0.2030 -0.0896 -0.0732
S-11	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-11	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-11	-0.13135281205177307	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-11	-0.13135281205177307	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-11	-0.0948 -0.0411 -0.0895 -0.2166 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2765 -0.0926 -0.0674 -0.0642 -0.0779 -0.0687 -0.0927 -0.0665 -0.1128 -0.0891 -0.0910 -0.1343 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6838 -0.0835 -0.1289 -0.2315 -0.0790 -0.1174 -0.0565 -0.0920 -0.0603 -0.1303 -0.2618 -0.0906 -0.0601 -0.0966 -0.1355 -0.1147 -0.0652 -0.0884 -0.0861 -0.7705 -0.0866 -0.1023 -0.1247 -0.0904 -0.0800 -0.2760 -0.0835 -0.1036 -0.1707 -0.0797 -0.0811 -0.2170 -0.0380 -0.0949 -0.3744 -0.1966 -0.0884 -0.1245 -0.1790 -0.0735 -0.0883 -0.1214 -0.0623 -0.0902 -0.0917 -0.1045 -0.0895 -0.1009 -2.0203 -0.0866 -0.0437 -0.1176 -0.1056 -0.0346 -0.1392 -0.0912 -0.1623 -0.1115 -0.0615 -0.0861 -0.0861 -0.6672 -0.0871 -0.1008 -0.0884 -0.0962 -0.0880 -0.2539 -0.0780 -0.0756 -0.2807 -0.0771 -0.0865 -0.2713 -0.1192 -0.1337 -0.1494 -0.0566 -0.1534 -0.1065 -0.0859 -0.0814 -0.0957 -0.0980 -0.1083 -0.0922 -0.1214 -0.2569 -0.0307 -0.1052 -0.2149 -0.1412 -0.0822 -0.1071 -0.0774 -0.0830 -0.1070 -0.0937 -0.0704 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0835 -0.0815 -0.1575 -0.1211 -0.0877 -0.0923 -0.1012 -0.0967 -0.0978 -0.2030 -0.0896 -0.0732
S-122	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-122	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-122	-0.1852998435497284	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-122	-0.1852998435497284	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-122	-0.0917 -0.0516 -0.3183 -0.0959 -1.0652 -0.0641 -0.0454 -0.0822 -0.0227 -0.1010 -0.2791 -0.0863 -1.0539 -0.0753 -0.0606 -0.0815 -0.0861 -0.2618 -0.0975 -1.0159 -0.0712 -0.1162 -0.0838 -0.0568 -1.8071 -0.0894 -1.2553 -0.0803 -0.2033 -0.0891 -0.0803 -0.2416 -0.0927 -1.0171 -0.0710 -0.0570 -0.0532 -0.0315 -0.0796 -0.0486 -1.5001 -0.0859 -0.9953 -0.0737 -0.2282 -0.1231 -0.0874 -0.0833 -0.1102 -0.0833 -0.0769 -0.0808 -0.7928 -0.0893 -0.1013 -0.1068 -0.1193 -0.1302 -0.3415 -0.0765 -0.0924 -0.0746 -0.0875 -0.0949 -0.0782 -0.0840 -0.2255 -0.0418 -0.0425 -0.2074 -0.2618 -0.1049 -0.0601 -0.1131 -0.1760 -0.1097 -0.0869 -0.0880 -0.0934 -0.0836 -0.0972 -1.5964 -0.0882 -0.0419 -0.1147 -0.0588 -0.0452 -0.0379 -0.1174 -0.1004 -0.1431 -0.1091 -0.0768 -0.0737 -0.0827 -0.5956 -0.0860 -0.0902 -0.0678 -0.1062 -0.1008 -0.1735 -0.0681 -0.0907 -0.0698 -0.0753 -0.4635 -0.0774 -0.0874 -0.2288 -0.1145 -0.1531 -0.2615 -0.0837 -0.1576 -0.1255 -0.0829 -0.0884 -0.0915 -0.1558 -0.2397 -0.1083 -0.4869 -0.0507 -0.0413 -0.1550 -0.1955 -0.1106 -0.0914 -0.0853 -0.0926 -0.0894 -0.0745 -0.0687 -0.0884 -0.0993 -0.1132 -0.1911 -0.1012 -0.0558 -0.1033 -0.1557 -0.1082 -0.0879 -0.0867 -0.0898 -0.0874 -0.0900 -0.0928 -0.0859 -0.0838 -0.1355 -0.0856 -0.0717
S-65	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-65	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-65	-0.1852998435497284	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-65	-0.1852998435497284	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-65	-0.0917 -0.0516 -0.3183 -0.0959 -1.0652 -0.0641 -0.0454 -0.0822 -0.0227 -0.1010 -0.2791 -0.0863 -1.0539 -0.0753 -0.0606 -0.0815 -0.0861 -0.2618 -0.0975 -1.0159 -0.0712 -0.1162 -0.0838 -0.0569 -1.8071 -0.0894 -1.2553 -0.0803 -0.2033 -0.0891 -0.0803 -0.2416 -0.0927 -1.0171 -0.0710 -0.0570 -0.0532 -0.0315 -0.0796 -0.0486 -1.5001 -0.0859 -0.9953 -0.0737 -0.2282 -0.1231 -0.0874 -0.0833 -0.1102 -0.0833 -0.0769 -0.0808 -0.7928 -0.0893 -0.1013 -0.1068 -0.1193 -0.1302 -0.3415 -0.0765 -0.0924 -0.0746 -0.0875 -0.0949 -0.0782 -0.0840 -0.2255 -0.0418 -0.0425 -0.2074 -0.2618 -0.1049 -0.0601 -0.1131 -0.1760 -0.1097 -0.0869 -0.0880 -0.0934 -0.0836 -0.0972 -1.5964 -0.0882 -0.0419 -0.1147 -0.0588 -0.0452 -0.0379 -0.1174 -0.1004 -0.1431 -0.1091 -0.0768 -0.0737 -0.0827 -0.5956 -0.0860 -0.0902 -0.0678 -0.1062 -0.1008 -0.1735 -0.0681 -0.0907 -0.0698 -0.0753 -0.4635 -0.0774 -0.0874 -0.2288 -0.1145 -0.1531 -0.2615 -0.0837 -0.1576 -0.1255 -0.0829 -0.0884 -0.0915 -0.1558 -0.2397 -0.1083 -0.4869 -0.0507 -0.0413 -0.1550 -0.1955 -0.1106 -0.0914 -0.0853 -0.0926 -0.0894 -0.0745 -0.0687 -0.0884 -0.0993 -0.1132 -0.1911 -0.1012 -0.0558 -0.1033 -0.1556 -0.1082 -0.0879 -0.0867 -0.0898 -0.0874 -0.0900 -0.0928 -0.0859 -0.0838 -0.1355 -0.0856 -0.0717
S-31	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-31	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-31	-0.1852998286485672	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-31	-0.1852998286485672	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-31	-0.0917 -0.0516 -0.3183 -0.0959 -1.0652 -0.0641 -0.0454 -0.0822 -0.0227 -0.1010 -0.2791 -0.0863 -1.0539 -0.0753 -0.0606 -0.0815 -0.0861 -0.2618 -0.0975 -1.0159 -0.0712 -0.1162 -0.0838 -0.0568 -1.8071 -0.0894 -1.2553 -0.0803 -0.2033 -0.0891 -0.0803 -0.2416 -0.0927 -1.0171 -0.0710 -0.0570 -0.0532 -0.0315 -0.0796 -0.0486 -1.5001 -0.0859 -0.9953 -0.0737 -0.2282 -0.1231 -0.0874 -0.0833 -0.1102 -0.0833 -0.0769 -0.0808 -0.7928 -0.0893 -0.1013 -0.1068 -0.1193 -0.1302 -0.3415 -0.0765 -0.0924 -0.0746 -0.0875 -0.0949 -0.0782 -0.0840 -0.2255 -0.0418 -0.0425 -0.2074 -0.2618 -0.1049 -0.0601 -0.1131 -0.1760 -0.1097 -0.0869 -0.0880 -0.0934 -0.0836 -0.0972 -1.5964 -0.0882 -0.0419 -0.1147 -0.0588 -0.0452 -0.0379 -0.1174 -0.1004 -0.1431 -0.1091 -0.0768 -0.0737 -0.0827 -0.5956 -0.0860 -0.0902 -0.0678 -0.1062 -0.1008 -0.1735 -0.0681 -0.0907 -0.0698 -0.0753 -0.4635 -0.0774 -0.0874 -0.2288 -0.1145 -0.1531 -0.2615 -0.0837 -0.1576 -0.1255 -0.0829 -0.0884 -0.0915 -0.1558 -0.2397 -0.1083 -0.4869 -0.0507 -0.0413 -0.1550 -0.1955 -0.1106 -0.0914 -0.0853 -0.0926 -0.0894 -0.0745 -0.0687 -0.0884 -0.0993 -0.1132 -0.1911 -0.1012 -0.0558 -0.1033 -0.1557 -0.1082 -0.0879 -0.0867 -0.0898 -0.0874 -0.0900 -0.0928 -0.0859 -0.0838 -0.1355 -0.0856 -0.0717
S-71	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += ( int ) c; } return result; }
T-71	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += c - '0'; } return result; }
H-71	-0.23635755479335785	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-71	-0.23635755479335785	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-71	-0.0843 -0.0450 -0.1557 -0.0674 -0.0906 -0.0295 -0.1209 -0.0879 -0.1168 -0.0884 -0.0925 -0.7363 -0.1113 -0.0755 -0.0793 -0.0903 -0.6947 -0.0976 -0.1934 -0.1140 -0.1022 -0.0988 -1.8346 -0.0979 -0.0414 -0.1086 -0.0801 -1.1406 -0.0177 -0.1070 -0.1837 -0.8945 -0.0871 -0.0832 -0.2142 -0.0844 -0.0895 -0.1135 -0.1155 -0.1439 -0.2163 -0.1061 -0.1735 -0.1091 -0.0887 -0.1040 -0.0833 -1.4284 -0.1150 -0.1019 -0.0642 -1.0471 -0.0871 -0.2286
S-192	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += ( int ) c; } return result; }
T-192	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += c - '0'; } return result; }
H-192	-0.2363574504852295	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-192	-0.2363574504852295	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-192	-0.0843 -0.0450 -0.1557 -0.0674 -0.0906 -0.0295 -0.1209 -0.0879 -0.1168 -0.0884 -0.0925 -0.7363 -0.1113 -0.0755 -0.0793 -0.0903 -0.6947 -0.0976 -0.1934 -0.1140 -0.1022 -0.0988 -1.8346 -0.0979 -0.0414 -0.1086 -0.0801 -1.1406 -0.0177 -0.1070 -0.1837 -0.8945 -0.0871 -0.0832 -0.2142 -0.0844 -0.0895 -0.1135 -0.1155 -0.1439 -0.2163 -0.1061 -0.1735 -0.1091 -0.0887 -0.1040 -0.0833 -1.4284 -0.1150 -0.1019 -0.0642 -1.0471 -0.0871 -0.2286
S-36	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += ( int ) c; } return result; }
T-36	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += c - '0'; } return result; }
H-36	-0.23635758459568024	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-36	-0.23635758459568024	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-36	-0.0843 -0.0450 -0.1557 -0.0674 -0.0906 -0.0295 -0.1209 -0.0879 -0.1168 -0.0884 -0.0925 -0.7363 -0.1113 -0.0755 -0.0793 -0.0903 -0.6947 -0.0976 -0.1934 -0.1140 -0.1022 -0.0988 -1.8346 -0.0979 -0.0414 -0.1086 -0.0801 -1.1406 -0.0177 -0.1070 -0.1837 -0.8945 -0.0871 -0.0832 -0.2142 -0.0844 -0.0895 -0.1135 -0.1155 -0.1439 -0.2163 -0.1061 -0.1735 -0.1091 -0.0887 -0.1040 -0.0833 -1.4284 -0.1150 -0.1019 -0.0642 -1.0471 -0.0871 -0.2286
S-279	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; result += str.substring ( 0, beginning_of_suffix ) ; return result; }
T-279	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; for ( int i = beginning_of_suffix - 1; i > = 0; i -= 1 ) { result += String.valueOf ( str.charAt ( i ) ) ; } return result; }
H-279	-0.20232798159122467	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
D-279	-0.20232798159122467	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
P-279	-0.0901 -0.0475 -0.2637 -0.0744 -0.0869 -0.0289 -0.0110 -0.1117 -0.5865 -0.0762 -0.0857 -0.0870 -0.3305 -0.1094 -0.0836 -0.0654 -0.0924 -1.0757 -0.0811 -0.1203 -0.3059 -0.1106 -0.0728 -0.3631 -0.0762 -0.0893 -0.0700 -0.0943 -0.1408 -0.0782 -0.0956 -0.1151 -0.1160 -0.2210 -0.1317 -0.8036 -0.1080 -0.1117 -0.0825 -0.1921 -0.1036 -0.1108 -0.8749 -0.1045 -0.3262 -0.1025 -0.0903 -0.2015 -0.0720 -0.1325 -0.3880 -1.1120 -0.1093 -0.0832 -0.0870 -0.0988 -0.0550 -0.7667 -0.1081 -0.0860 -0.0464 -0.7329 -0.0884 -0.1820
S-220	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; result += str.substring ( 0, beginning_of_suffix ) ; return result; }
T-220	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; for ( int i = beginning_of_suffix - 1; i > = 0; i -= 1 ) { result += String.valueOf ( str.charAt ( i ) ) ; } return result; }
H-220	-0.20232802629470825	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
D-220	-0.20232802629470825	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
P-220	-0.0901 -0.0475 -0.2637 -0.0744 -0.0869 -0.0289 -0.0110 -0.1117 -0.5865 -0.0762 -0.0857 -0.0870 -0.3305 -0.1094 -0.0836 -0.0654 -0.0924 -1.0757 -0.0811 -0.1203 -0.3059 -0.1106 -0.0728 -0.3631 -0.0762 -0.0893 -0.0700 -0.0943 -0.1408 -0.0782 -0.0956 -0.1151 -0.1160 -0.2210 -0.1317 -0.8036 -0.1080 -0.1117 -0.0825 -0.1921 -0.1036 -0.1108 -0.8749 -0.1045 -0.3262 -0.1025 -0.0903 -0.2015 -0.0720 -0.1325 -0.3880 -1.1120 -0.1093 -0.0832 -0.0870 -0.0988 -0.0550 -0.7667 -0.1081 -0.0860 -0.0464 -0.7329 -0.0884 -0.1820
S-291	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { for ( int k = j; k < a; j += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
T-291	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { if ( ! is_prime ( j ) ) continue; for ( int k = j; k < a; k += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
H-291	-0.2169693112373352	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
D-291	-0.2169693112373352	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
P-291	-0.0905 -0.0467 -0.0925 -0.0699 -0.0906 -0.0480 -0.1231 -0.0880 -0.0843 -0.0850 -0.0934 -0.1534 -0.1143 -0.0779 -0.0829 -0.0886 -0.8409 -0.0962 -0.1277 -0.1003 -1.3585 -0.0781 -0.0936 -0.1744 -0.0832 -0.0924 -0.1304 -0.1124 -0.1689 -0.1577 -0.1004 -0.1985 -0.1015 -0.0843 -0.0897 -0.1239 -1.2897 -0.1136 -0.1034 -0.0707 -1.6232 -0.0857 -0.3012
S-145	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { for ( int k = j; k < a; j += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
T-145	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { if ( ! is_prime ( j ) ) continue; for ( int k = j; k < a; k += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
H-145	-0.2169693261384964	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
D-145	-0.2169693261384964	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
P-145	-0.0905 -0.0467 -0.0925 -0.0699 -0.0906 -0.0480 -0.1231 -0.0880 -0.0843 -0.0850 -0.0934 -0.1534 -0.1143 -0.0779 -0.0829 -0.0886 -0.8409 -0.0962 -0.1277 -0.1003 -1.3585 -0.0781 -0.0936 -0.1744 -0.0832 -0.0924 -0.1304 -0.1124 -0.1689 -0.1577 -0.1004 -0.1985 -0.1015 -0.0843 -0.0897 -0.1239 -1.2897 -0.1136 -0.1034 -0.0707 -1.6232 -0.0857 -0.3012
S-390	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-390	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-390	-0.11676888912916183	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-390	-0.11676888912916183	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-390	-0.0888 -0.0522 -0.1162 -0.1804 -0.0938 -0.0528 -0.0246 -0.0842 -0.0650 -0.0889 -0.0334 -0.1123 -0.1128 -0.1314 -0.0919 -0.0634 -0.0892 -0.0799 -0.1024 -0.1230 -0.0852 -0.2739 -0.0916 -0.0654 -0.0922 -0.0467 -0.5980 -0.0631 -0.0467 -0.0731 -0.1915 -0.0871 -0.0230 -0.0845 -0.0492 -0.1782 -0.4068 -0.1065 -0.0906 -0.0756 -0.0808 -1.1510 -0.0870 -0.0932 -0.0976 -0.0907 -0.0780 -0.3531 -0.0759 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0721 -0.0688 -0.0794 -0.0892 -0.1521 -0.0742 -0.0835 -0.0992 -0.0754 -0.1276 -0.0711 -0.1037 -0.0886 -0.1011 -0.0930 -0.0726 -0.1010 -0.0706 -0.1013 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1175 -0.0931 -0.0767 -0.0790 -0.1214 -0.0523 -0.0887 -0.0889 -0.1181 -0.0937 -0.0838 -0.1035 -0.2028 -0.1669 -0.0536 -0.0673 -0.0977 -0.0630 -0.0785 -0.0631 -0.0483 -0.0895 -0.0661 -0.0919 -0.0819 -0.1064 -0.1106 -0.0730 -0.0720 -0.0881 -1.1274 -0.0928 -0.0813 -0.0796 -0.0957 -0.0753 -0.4063 -0.0753 -0.0909 -0.1397 -0.0783 -0.0895 -0.0832 -0.0848 -0.0970 -0.0769 -0.1267 -0.2031 -0.0947 -0.0870 -0.0869 -0.0872 -0.1036 -0.1258 -0.0888 -0.0737 -0.0949 -0.0953 -0.0599 -0.0557 -0.0965 -0.0964 -0.0863 -0.0814 -0.0703 -0.3035 -0.0809 -0.0785
S-320	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-320	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-320	-0.11676887422800064	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-320	-0.11676887422800064	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-320	-0.0888 -0.0522 -0.1162 -0.1804 -0.0938 -0.0528 -0.0246 -0.0842 -0.0650 -0.0889 -0.0334 -0.1123 -0.1128 -0.1314 -0.0919 -0.0634 -0.0892 -0.0799 -0.1024 -0.1230 -0.0852 -0.2739 -0.0916 -0.0654 -0.0922 -0.0467 -0.5980 -0.0631 -0.0467 -0.0731 -0.1915 -0.0871 -0.0230 -0.0845 -0.0492 -0.1783 -0.4068 -0.1065 -0.0906 -0.0756 -0.0808 -1.1510 -0.0870 -0.0932 -0.0976 -0.0907 -0.0780 -0.3531 -0.0759 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0721 -0.0688 -0.0794 -0.0892 -0.1521 -0.0742 -0.0835 -0.0992 -0.0754 -0.1276 -0.0711 -0.1037 -0.0886 -0.1011 -0.0930 -0.0726 -0.1010 -0.0706 -0.1013 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1175 -0.0931 -0.0767 -0.0790 -0.1214 -0.0523 -0.0887 -0.0889 -0.1181 -0.0937 -0.0838 -0.1035 -0.2028 -0.1669 -0.0536 -0.0673 -0.0977 -0.0630 -0.0785 -0.0631 -0.0483 -0.0895 -0.0661 -0.0919 -0.0819 -0.1064 -0.1106 -0.0730 -0.0720 -0.0881 -1.1274 -0.0928 -0.0813 -0.0796 -0.0957 -0.0753 -0.4063 -0.0753 -0.0909 -0.1397 -0.0783 -0.0895 -0.0832 -0.0848 -0.0970 -0.0769 -0.1267 -0.2031 -0.0947 -0.0870 -0.0869 -0.0872 -0.1036 -0.1258 -0.0888 -0.0737 -0.0949 -0.0953 -0.0599 -0.0557 -0.0965 -0.0964 -0.0863 -0.0814 -0.0703 -0.3035 -0.0809 -0.0786
S-288	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-288	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-288	-0.11676882207393646	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-288	-0.11676882207393646	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-288	-0.0888 -0.0522 -0.1162 -0.1804 -0.0938 -0.0528 -0.0246 -0.0842 -0.0650 -0.0889 -0.0334 -0.1123 -0.1128 -0.1314 -0.0919 -0.0634 -0.0892 -0.0799 -0.1024 -0.1230 -0.0852 -0.2739 -0.0916 -0.0654 -0.0922 -0.0467 -0.5980 -0.0631 -0.0467 -0.0731 -0.1915 -0.0871 -0.0230 -0.0845 -0.0492 -0.1782 -0.4068 -0.1065 -0.0906 -0.0756 -0.0808 -1.1510 -0.0870 -0.0932 -0.0976 -0.0907 -0.0780 -0.3531 -0.0759 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0721 -0.0688 -0.0794 -0.0892 -0.1521 -0.0742 -0.0835 -0.0992 -0.0754 -0.1276 -0.0711 -0.1037 -0.0886 -0.1011 -0.0930 -0.0726 -0.1010 -0.0706 -0.1013 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1175 -0.0931 -0.0767 -0.0789 -0.1214 -0.0523 -0.0887 -0.0889 -0.1181 -0.0937 -0.0838 -0.1035 -0.2028 -0.1669 -0.0536 -0.0673 -0.0977 -0.0630 -0.0785 -0.0631 -0.0483 -0.0895 -0.0661 -0.0919 -0.0819 -0.1064 -0.1106 -0.0730 -0.0720 -0.0881 -1.1274 -0.0928 -0.0813 -0.0796 -0.0957 -0.0753 -0.4063 -0.0753 -0.0909 -0.1397 -0.0783 -0.0895 -0.0832 -0.0848 -0.0970 -0.0769 -0.1267 -0.2031 -0.0947 -0.0870 -0.0869 -0.0872 -0.1036 -0.1258 -0.0888 -0.0737 -0.0949 -0.0953 -0.0599 -0.0557 -0.0965 -0.0964 -0.0863 -0.0814 -0.0703 -0.3035 -0.0809 -0.0786
S-107	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-107	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-107	-0.11676887422800064	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-107	-0.11676887422800064	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-107	-0.0888 -0.0522 -0.1162 -0.1804 -0.0938 -0.0528 -0.0246 -0.0842 -0.0650 -0.0889 -0.0334 -0.1123 -0.1128 -0.1314 -0.0919 -0.0634 -0.0892 -0.0799 -0.1024 -0.1230 -0.0852 -0.2739 -0.0916 -0.0654 -0.0922 -0.0467 -0.5980 -0.0631 -0.0467 -0.0731 -0.1915 -0.0871 -0.0230 -0.0845 -0.0492 -0.1782 -0.4068 -0.1065 -0.0906 -0.0756 -0.0808 -1.1510 -0.0870 -0.0932 -0.0976 -0.0907 -0.0780 -0.3531 -0.0759 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0721 -0.0688 -0.0794 -0.0892 -0.1521 -0.0742 -0.0835 -0.0992 -0.0754 -0.1276 -0.0711 -0.1037 -0.0886 -0.1011 -0.0930 -0.0726 -0.1010 -0.0706 -0.1013 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1175 -0.0931 -0.0767 -0.0789 -0.1214 -0.0523 -0.0887 -0.0889 -0.1181 -0.0937 -0.0838 -0.1035 -0.2028 -0.1669 -0.0536 -0.0673 -0.0977 -0.0630 -0.0785 -0.0631 -0.0483 -0.0895 -0.0661 -0.0919 -0.0819 -0.1064 -0.1106 -0.0730 -0.0720 -0.0881 -1.1274 -0.0928 -0.0813 -0.0796 -0.0957 -0.0753 -0.4063 -0.0753 -0.0909 -0.1397 -0.0783 -0.0895 -0.0832 -0.0848 -0.0970 -0.0769 -0.1267 -0.2031 -0.0947 -0.0870 -0.0869 -0.0872 -0.1036 -0.1258 -0.0888 -0.0737 -0.0949 -0.0953 -0.0599 -0.0557 -0.0965 -0.0964 -0.0863 -0.0814 -0.0703 -0.3035 -0.0809 -0.0786
S-80	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-80	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-80	-0.16846929490566254	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-80	-0.16846929490566254	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-80	-0.0981 -0.0355 -0.0509 -0.0455 -0.0991 -0.0355 -0.0275 -0.0859 -0.0817 -0.1199 -1.2304 -0.0659 -0.1016 -0.0552 -0.0427 -0.0896 -0.0875 -0.0484 -0.0669 -0.0970 -0.0683 -0.0880 -0.6128 -0.0839 -0.0586 -0.0885 -0.6274 -0.1515 -0.1021 -0.0370 -0.0961 -0.0689 -0.0397 -0.0878 -0.0814 -0.1254 -0.0420 -0.0607 -0.3780 -0.1720 -0.1063 -0.0886 -0.0936 -0.0822 -0.0911 -0.0837 -0.0758 -0.1392 -0.2955 -0.0899 -0.0475 -0.0827 -0.0709 -0.1249 -1.3347 -0.0916 -0.0834 -0.1056 -0.0996 -0.7616 -0.0651 -0.0900 -0.1028 -0.0924 -0.0959 -0.1083 -0.2350 -0.1084 -0.0561 -0.0868 -0.1007 -0.0845 -0.1138 -0.0901 -0.0972 -0.1376 -0.0997 -0.0728 -0.0936 -0.2325 -0.1920 -0.1085 -0.1860 -0.1126 -0.1463 -0.0973 -0.0927 -0.2391 -0.1090 -0.1430 -0.0745 -0.0844 -1.6992 -0.0899 -0.1219 -0.0481 -0.1218 -0.0999 -0.3369 -0.0805 -0.0854 -0.0794 -0.8616 -0.0780 -0.0926 -0.0724 -0.0926 -0.0682 -0.1042 -1.5771 -0.0909 -0.0862 -0.1092 -0.0713 -0.0897 -0.0929 -1.0773 -0.1952 -0.2160 -0.1117 -0.2710 -0.1102 -0.0949 -0.0914 -0.0914 -0.0923 -0.0897 -0.1149 -0.2140 -0.0818 -0.1046 -0.0762 -0.0942 -0.2523 -0.0928 -0.0759 -0.0785 -0.2871 -0.1408 -0.0680 -0.0843 -0.1030 -0.3750 -0.0784 -0.0826
S-75	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-75	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-75	-0.16846929490566254	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-75	-0.16846929490566254	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-75	-0.0981 -0.0355 -0.0509 -0.0455 -0.0991 -0.0355 -0.0275 -0.0859 -0.0817 -0.1199 -1.2304 -0.0659 -0.1016 -0.0552 -0.0427 -0.0896 -0.0875 -0.0484 -0.0669 -0.0970 -0.0683 -0.0880 -0.6128 -0.0839 -0.0586 -0.0885 -0.6274 -0.1515 -0.1021 -0.0370 -0.0961 -0.0689 -0.0397 -0.0878 -0.0814 -0.1254 -0.0420 -0.0607 -0.3780 -0.1720 -0.1063 -0.0886 -0.0936 -0.0822 -0.0911 -0.0837 -0.0758 -0.1392 -0.2955 -0.0899 -0.0475 -0.0827 -0.0709 -0.1249 -1.3347 -0.0916 -0.0834 -0.1056 -0.0996 -0.7616 -0.0651 -0.0900 -0.1028 -0.0924 -0.0959 -0.1083 -0.2350 -0.1084 -0.0561 -0.0868 -0.1007 -0.0845 -0.1138 -0.0901 -0.0972 -0.1376 -0.0997 -0.0728 -0.0936 -0.2325 -0.1920 -0.1085 -0.1860 -0.1126 -0.1463 -0.0973 -0.0927 -0.2391 -0.1090 -0.1430 -0.0745 -0.0844 -1.6992 -0.0899 -0.1219 -0.0481 -0.1218 -0.0999 -0.3369 -0.0805 -0.0854 -0.0794 -0.8616 -0.0780 -0.0926 -0.0724 -0.0926 -0.0682 -0.1042 -1.5771 -0.0909 -0.0862 -0.1092 -0.0713 -0.0897 -0.0929 -1.0773 -0.1952 -0.2160 -0.1117 -0.2710 -0.1102 -0.0949 -0.0914 -0.0914 -0.0923 -0.0897 -0.1149 -0.2140 -0.0818 -0.1046 -0.0762 -0.0942 -0.2523 -0.0928 -0.0759 -0.0785 -0.2871 -0.1408 -0.0680 -0.0843 -0.1030 -0.3750 -0.0784 -0.0826
S-35	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-35	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-35	-0.16846929490566254	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-35	-0.16846929490566254	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-35	-0.0981 -0.0355 -0.0509 -0.0455 -0.0991 -0.0355 -0.0275 -0.0859 -0.0817 -0.1199 -1.2304 -0.0659 -0.1016 -0.0552 -0.0427 -0.0896 -0.0875 -0.0484 -0.0669 -0.0970 -0.0683 -0.0880 -0.6128 -0.0839 -0.0586 -0.0885 -0.6274 -0.1515 -0.1021 -0.0370 -0.0961 -0.0689 -0.0397 -0.0878 -0.0814 -0.1254 -0.0420 -0.0607 -0.3780 -0.1720 -0.1063 -0.0886 -0.0936 -0.0822 -0.0911 -0.0837 -0.0758 -0.1392 -0.2955 -0.0899 -0.0475 -0.0827 -0.0709 -0.1249 -1.3347 -0.0916 -0.0834 -0.1056 -0.0996 -0.7616 -0.0651 -0.0900 -0.1028 -0.0924 -0.0959 -0.1083 -0.2350 -0.1084 -0.0561 -0.0868 -0.1007 -0.0845 -0.1138 -0.0901 -0.0972 -0.1376 -0.0997 -0.0728 -0.0937 -0.2325 -0.1920 -0.1085 -0.1860 -0.1126 -0.1463 -0.0973 -0.0927 -0.2391 -0.1090 -0.1430 -0.0745 -0.0844 -1.6992 -0.0899 -0.1219 -0.0481 -0.1218 -0.0999 -0.3369 -0.0805 -0.0854 -0.0794 -0.8616 -0.0780 -0.0926 -0.0724 -0.0926 -0.0682 -0.1042 -1.5771 -0.0909 -0.0862 -0.1092 -0.0713 -0.0897 -0.0929 -1.0773 -0.1952 -0.2160 -0.1117 -0.2710 -0.1102 -0.0949 -0.0914 -0.0914 -0.0923 -0.0897 -0.1149 -0.2140 -0.0818 -0.1046 -0.0762 -0.0942 -0.2523 -0.0928 -0.0759 -0.0785 -0.2871 -0.1408 -0.0680 -0.0843 -0.1030 -0.3750 -0.0784 -0.0826
S-196	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-196	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-196	-0.18687976896762848	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-196	-0.18687976896762848	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-196	-0.0881 -0.0419 -0.0991 -0.2080 -0.0733 -0.0438 -0.1076 -0.0904 -0.1559 -0.0931 -0.0617 -0.4539 -0.0808 -0.1239 -0.1029 -0.0577 -0.0561 -0.0786 -0.0924 -2.1642 -0.0674 -0.7674 -0.0573 -0.0563 -0.0915 -0.0570 -1.3792 -0.0817 -0.8497 -0.0610 -0.1762 -0.0970 -0.0882 -0.3267 -0.1107 -0.0676 -0.0755 -0.0873 -0.7796 -0.0789 -0.0804 -0.0877 -0.0421 -0.0726 -0.3934 -0.0684 -0.0776 -0.1657 -0.0777 -0.0799 -0.1031 -0.1075 -0.0718 -0.0766 -0.0972 -0.4747 -0.0892 -0.0577 -0.0590 -0.0354 -0.0742 -0.5482 -0.0620 -0.0870 -0.1215 -0.0798 -0.0968 -0.1202 -0.1154 -0.0894 -0.0840 -0.0800 -0.1143 -0.0828 -0.2238 -0.0367 -0.0643 -0.0807 -0.0638 -0.0762 -0.0881 -0.1914 -0.1487 -0.2235 -0.1109 -0.0878 -0.0704 -0.0988 -0.1164 -0.1048 -0.1331 -0.0976 -0.1139 -0.0849 -0.1290 -0.1972 -0.0487 -0.0580 -0.0888 -0.0748 -0.0699 -0.0810 -0.0817 -0.1178 -0.1200 -2.6267 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7073 -0.1010 -0.1124 -0.8693 -0.0728 -0.0628 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.6974 -0.0381 -0.0509 -0.8140 -0.0838 -1.4144 -0.0822 -0.0424 -0.1081 -0.0594 -0.0804 -0.0923 -0.0920 -0.0600 -0.2424 -0.0811 -0.0660
S-138	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-138	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-138	-0.18687978386878967	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-138	-0.18687978386878967	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-138	-0.0881 -0.0419 -0.0991 -0.2080 -0.0733 -0.0438 -0.1076 -0.0904 -0.1559 -0.0931 -0.0617 -0.4539 -0.0808 -0.1239 -0.1029 -0.0577 -0.0561 -0.0786 -0.0924 -2.1642 -0.0674 -0.7674 -0.0573 -0.0563 -0.0915 -0.0570 -1.3792 -0.0817 -0.8497 -0.0610 -0.1762 -0.0970 -0.0882 -0.3267 -0.1107 -0.0676 -0.0755 -0.0873 -0.7796 -0.0789 -0.0804 -0.0877 -0.0421 -0.0726 -0.3934 -0.0684 -0.0776 -0.1657 -0.0777 -0.0799 -0.1031 -0.1075 -0.0718 -0.0766 -0.0972 -0.4747 -0.0892 -0.0577 -0.0590 -0.0354 -0.0742 -0.5482 -0.0620 -0.0870 -0.1215 -0.0798 -0.0968 -0.1202 -0.1154 -0.0894 -0.0840 -0.0800 -0.1143 -0.0828 -0.2238 -0.0367 -0.0643 -0.0807 -0.0638 -0.0762 -0.0881 -0.1914 -0.1487 -0.2235 -0.1109 -0.0878 -0.0704 -0.0988 -0.1164 -0.1048 -0.1331 -0.0976 -0.1139 -0.0849 -0.1290 -0.1972 -0.0487 -0.0580 -0.0888 -0.0748 -0.0699 -0.0810 -0.0817 -0.1178 -0.1200 -2.6267 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7073 -0.1010 -0.1124 -0.8693 -0.0728 -0.0628 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.6974 -0.0381 -0.0509 -0.8140 -0.0838 -1.4144 -0.0822 -0.0424 -0.1081 -0.0594 -0.0804 -0.0923 -0.0920 -0.0600 -0.2424 -0.0811 -0.0660
S-132	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-132	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-132	-0.18687987327575684	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-132	-0.18687987327575684	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-132	-0.0881 -0.0419 -0.0991 -0.2080 -0.0733 -0.0438 -0.1076 -0.0904 -0.1559 -0.0931 -0.0617 -0.4539 -0.0808 -0.1239 -0.1029 -0.0577 -0.0561 -0.0786 -0.0924 -2.1642 -0.0674 -0.7674 -0.0573 -0.0563 -0.0915 -0.0570 -1.3792 -0.0817 -0.8497 -0.0610 -0.1762 -0.0970 -0.0882 -0.3267 -0.1107 -0.0676 -0.0755 -0.0873 -0.7796 -0.0789 -0.0804 -0.0877 -0.0421 -0.0726 -0.3934 -0.0684 -0.0776 -0.1657 -0.0777 -0.0799 -0.1031 -0.1075 -0.0718 -0.0766 -0.0972 -0.4747 -0.0892 -0.0577 -0.0590 -0.0354 -0.0742 -0.5482 -0.0620 -0.0870 -0.1215 -0.0798 -0.0968 -0.1202 -0.1154 -0.0894 -0.0840 -0.0800 -0.1143 -0.0828 -0.2238 -0.0367 -0.0643 -0.0807 -0.0638 -0.0762 -0.0881 -0.1914 -0.1487 -0.2235 -0.1109 -0.0878 -0.0704 -0.0988 -0.1164 -0.1048 -0.1331 -0.0976 -0.1139 -0.0849 -0.1290 -0.1972 -0.0487 -0.0580 -0.0888 -0.0748 -0.0699 -0.0810 -0.0817 -0.1178 -0.1200 -2.6267 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7073 -0.1010 -0.1124 -0.8693 -0.0728 -0.0628 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.6974 -0.0381 -0.0509 -0.8140 -0.0838 -1.4144 -0.0822 -0.0424 -0.1081 -0.0594 -0.0804 -0.0923 -0.0920 -0.0600 -0.2424 -0.0811 -0.0660
S-268	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
T-268	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( number > 0 ) { int div = ( int ) ( number / num [ i ] ) ; while ( div > 0 ) { result += sym [ i ] ; div -= 1; } number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
H-268	-0.26500561833381653	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
D-268	-0.26500561833381653	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
P-268	-0.0904 -0.0554 -1.6001 -0.0819 -0.0943 -0.0528 -0.0825 -0.0204 -0.0883 -0.0077 -0.0402 -0.1147 -0.0995 -0.0533 -0.0836 -0.0878 -0.1465 -0.2137 -0.0596 -0.0346 -0.0833 -0.0651 -0.0671 -0.0785 -0.0930 -0.0869 -0.6990 -0.1513 -0.0748 -0.2030 -0.0893 -0.0554 -0.0390 -0.0864 -0.1446 -0.2129 -0.0489 -0.0357 -0.0691 -0.1715 -0.0409 -0.0911 -0.0867 -1.3985 -0.1541 -0.0530 -0.1356 -0.0842 -0.0704 -0.7962 -0.0627 -0.1095 -0.0827 -0.1033 -0.0452 -1.1801 -0.1061 -0.0145 -1.2554 -0.1156 -0.0540 -1.3834 -0.1166 -0.0380 -1.2197 -0.1093 -0.0405 -1.1334 -0.1103 -0.0455 -0.0647 -1.5670 -0.1074 -0.3026 -1.7737 -0.1065 -0.0381 -0.0452 -1.4270 -0.1133 -0.0785 -1.4342 -0.1112 -0.0323 -1.3371 -0.1011 -0.0450 -1.4099 -0.1053 -0.0208 -1.2530 -0.0966 -0.0578 -0.0648 -0.0965 -0.0860 -0.1639 -0.1100 -0.0915 -0.0554 -0.3860 -1.1422 -0.0916 -0.0884 -1.2543 -0.0750 -0.1226 -0.1608 -0.1249 -0.1336 -0.0882 -0.0802 -0.1288 -0.0657 -0.1546 -0.0861 -0.1463 -0.0696 -0.1071 -0.2476 -0.2499 -0.0281 -0.0380 -0.0755 -0.0958 -0.0690 -0.0937 -0.0874 -0.0331 -0.8950 -0.1040 -0.2534 -0.1223 -0.5326 -0.5741 -0.5519 -0.1037 -0.0958 -0.0862 -0.0625
S-118	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-118	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-118	-0.17452594637870789	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-118	-0.17452594637870789	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-118	-0.1008 -0.0400 -0.0996 -0.2060 -0.1012 -0.0140 -0.0902 -0.0551 -0.0349 -0.0906 -0.0229 -0.0295 -0.1128 -0.1042 -0.1462 -0.1162 -0.0468 -0.0866 -0.0865 -0.2395 -0.0595 -0.0933 -0.0617 -0.1899 -0.0810 -0.0944 -0.0629 -1.0682 -0.1029 -0.0760 -0.1103 -0.0664 -0.0767 -0.6613 -0.0945 -0.0404 -0.0886 -0.0394 -0.2802 -0.0927 -0.1030 -0.0403 -0.0887 -0.5562 -0.0935 -0.0186 -0.0824 -0.0434 -0.7711 -0.1312 -0.1097 -0.0700 -0.0839 -0.0752 -2.3102 -0.3566 -0.0926 -0.4151 -0.4435 -0.0880 -0.0744 -0.5309 -0.0809 -1.7938 -0.0677 -0.0964 -0.1089 -0.1105 -0.0748 -0.0682 -0.0770 -0.0868 -0.0579 -0.0828 -0.0888 -0.1083 -0.0644 -0.0907 -0.0854 -0.8916 -0.0742 -0.1070 -0.0601 -0.0896 -1.9333 -0.0932 -0.0748 -0.1047 -0.1005 -0.0970 -0.0510 -0.8506 -0.0485 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0477 -0.0724 -0.0896 -0.0754 -0.0649 -0.0855 -0.0819 -0.0736 -0.0259 -0.0935 -0.0758 -0.3617 -0.1136 -0.0839 -0.0409 -0.0906 -2.0547 -0.0905 -0.0562 -0.1052 -0.0742 -0.0846 -0.0389 -0.6746 -0.0390 -0.0865 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1321 -0.1162 -0.0888 -0.0917 -0.0834 -0.0527 -0.1077 -0.0535 -0.0682 -0.2404 -0.1391 -0.1113 -0.0746 -0.0392 -0.0774 -0.0578 -0.0948 -0.0369 -0.0973 -0.1926 -0.1411 -0.1212 -0.0441 -0.0787 -0.0776 -0.1059 -0.0932 -0.1262 -0.0828 -0.6687 -0.0909 -0.0977 -0.0408 -0.1166 -0.1147 -0.1017 -0.0643 -0.4416 -0.0750 -0.0844
S-86	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-86	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-86	-0.1745259165763855	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-86	-0.1745259165763855	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-86	-0.1008 -0.0400 -0.0996 -0.2060 -0.1012 -0.0140 -0.0902 -0.0551 -0.0349 -0.0906 -0.0229 -0.0295 -0.1128 -0.1042 -0.1462 -0.1162 -0.0468 -0.0866 -0.0865 -0.2395 -0.0595 -0.0933 -0.0617 -0.1899 -0.0810 -0.0944 -0.0629 -1.0682 -0.1029 -0.0760 -0.1103 -0.0664 -0.0767 -0.6613 -0.0945 -0.0404 -0.0886 -0.0394 -0.2802 -0.0927 -0.1030 -0.0403 -0.0887 -0.5562 -0.0935 -0.0186 -0.0824 -0.0434 -0.7711 -0.1312 -0.1097 -0.0700 -0.0839 -0.0752 -2.3102 -0.3566 -0.0926 -0.4151 -0.4435 -0.0880 -0.0744 -0.5309 -0.0809 -1.7938 -0.0677 -0.0964 -0.1089 -0.1105 -0.0748 -0.0682 -0.0770 -0.0868 -0.0579 -0.0828 -0.0888 -0.1083 -0.0644 -0.0907 -0.0854 -0.8916 -0.0742 -0.1070 -0.0601 -0.0896 -1.9333 -0.0932 -0.0748 -0.1047 -0.1005 -0.0970 -0.0510 -0.8506 -0.0485 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0477 -0.0724 -0.0896 -0.0754 -0.0649 -0.0855 -0.0819 -0.0736 -0.0259 -0.0935 -0.0758 -0.3617 -0.1136 -0.0839 -0.0409 -0.0906 -2.0547 -0.0905 -0.0562 -0.1052 -0.0742 -0.0846 -0.0389 -0.6746 -0.0390 -0.0865 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1321 -0.1162 -0.0888 -0.0917 -0.0834 -0.0527 -0.1077 -0.0535 -0.0682 -0.2404 -0.1391 -0.1113 -0.0746 -0.0392 -0.0774 -0.0578 -0.0948 -0.0369 -0.0973 -0.1926 -0.1411 -0.1212 -0.0441 -0.0787 -0.0776 -0.1059 -0.0932 -0.1262 -0.0828 -0.6687 -0.0909 -0.0977 -0.0408 -0.1166 -0.1147 -0.1017 -0.0643 -0.4416 -0.0750 -0.0844
S-278	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, begin ) * poly ( xs, end ) < 0 ) { begin = center; } else { end = center; } } return begin; }
T-278	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, center ) * poly ( xs, begin ) > 0 ) { begin = center; } else { end = center; } } return begin; }
H-278	-0.20747321844100952	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
D-278	-0.20747321844100952	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
P-278	-0.0844 -0.0431 -0.0876 -0.0821 -0.1027 -0.2357 -0.0804 -0.1213 -0.0518 -0.0999 -0.6343 -0.1126 -0.1209 -0.0888 -0.0810 -0.1205 -0.0770 -0.0884 -0.9157 -0.1463 -0.1039 -0.1116 -0.0683 -0.0833 -0.6769 -0.0824 -0.0870 -0.1768 -0.0970 -0.0785 -0.3474 -0.0806 -0.0943 -0.0777 -0.0865 -0.1562 -0.0797 -0.0872 -0.1472 -0.0467 -0.1962 -0.1129 -0.1669 -0.1074 -0.0969 -0.0945 -0.0850 -2.7190 -0.0962 -0.0380 -0.1054 -0.1099 -1.5607 -0.1500 -0.0896 -0.1081 -0.0890 -0.1237 -0.1038 -0.2778 -0.0833 -0.2054
S-29	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, begin ) * poly ( xs, end ) < 0 ) { begin = center; } else { end = center; } } return begin; }
T-29	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, center ) * poly ( xs, begin ) > 0 ) { begin = center; } else { end = center; } } return begin; }
H-29	-0.20747318863868713	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
D-29	-0.20747318863868713	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
P-29	-0.0844 -0.0431 -0.0876 -0.0821 -0.1027 -0.2357 -0.0804 -0.1213 -0.0518 -0.0999 -0.6343 -0.1126 -0.1209 -0.0888 -0.0810 -0.1205 -0.0770 -0.0884 -0.9157 -0.1463 -0.1039 -0.1116 -0.0683 -0.0833 -0.6769 -0.0824 -0.0870 -0.1768 -0.0970 -0.0785 -0.3474 -0.0806 -0.0943 -0.0777 -0.0865 -0.1562 -0.0797 -0.0872 -0.1472 -0.0467 -0.1962 -0.1129 -0.1669 -0.1074 -0.0969 -0.0945 -0.0850 -2.7190 -0.0962 -0.0380 -0.1054 -0.1099 -1.5607 -0.1500 -0.0896 -0.1081 -0.0890 -0.1237 -0.1038 -0.2778 -0.0833 -0.2054
S-240	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-240	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-240	-0.11954285204410553	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-240	-0.11954285204410553	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-240	-0.0875 -0.0536 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1650 -0.0991 -0.0808 -0.0905 -0.0841 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0854 -0.0688 -0.1092 -0.1127 -0.0887 -0.1359 -0.0223 -0.0884 -0.1097 -0.0843 -0.0352 -0.0790 -0.0341 -0.2501 -0.1268 -0.1092 -0.0767 -0.0754 -0.0820 -0.9087 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0732 -0.1035 -0.1603 -0.0764 -0.0845 -0.1120 -0.1061 -0.0663 -0.0706 -0.0926 -0.6671 -0.0868 -0.0671 -0.0636 -0.1276 -0.0770 -0.4361 -0.0743 -0.0829 -0.1503 -0.0802 -0.0947 -0.1350 -0.0775 -0.0806 -0.0426 -0.0942 -1.9788 -0.0917 -0.0307 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1194 -0.0619 -0.0978 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0748 -0.1360 -0.0765 -0.0761 -0.0424 -0.3036 -0.2925 -0.1156 -0.0996 -0.0860 -0.0866 -0.0730 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0865 -0.0998 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0992 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0941 -0.1130 -0.0965 -0.0973 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0900 -0.0693 -0.1402 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1009 -0.0862 -0.1504 -0.1446 -0.0831 -0.0681 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0835 -0.0889 -0.0731 -0.2250 -0.0860 -0.0776
S-380	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-380	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-380	-0.1778796762228012	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-380	-0.1778796762228012	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-380	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-355	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-355	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-355	-0.17787958681583405	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-355	-0.17787958681583405	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-355	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-346	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-346	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-346	-0.17787961661815643	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-346	-0.17787961661815643	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-346	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-334	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-334	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-334	-0.17787951231002808	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-334	-0.17787951231002808	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-334	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-309	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-309	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-309	-0.17787954211235046	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-309	-0.17787954211235046	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-309	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-177	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-177	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-177	-0.17787957191467285	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-177	-0.17787957191467285	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-177	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0821 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-135	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-135	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-135	-0.17787952721118927	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-135	-0.17787952721118927	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-135	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0821 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-83	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-83	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-83	-0.1778796762228012	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-83	-0.1778796762228012	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-83	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-77	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-77	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-77	-0.1778796762228012	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-77	-0.1778796762228012	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-77	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-76	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-76	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-76	-0.17787958681583405	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-76	-0.17787958681583405	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-76	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-63	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-63	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-63	-0.17787961661815643	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-63	-0.17787961661815643	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-63	-0.0908 -0.0542 -0.9694 -0.0423 -0.0970 -0.0290 -0.1152 -0.7722 -0.0588 -0.0909 -0.0826 -1.4263 -0.0735 -0.0864 -0.0615 -0.0873 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3910 -0.0738 -0.0787 -0.0812 -0.4449 -0.0973 -0.1058 -0.1082 -0.0838 -0.1006 -0.1118 -0.0935 -0.4646 -0.0787 -0.0853 -0.0800 -0.1164 -0.1127 -0.0857 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0882 -0.0626 -1.1185 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0822 -0.1338 -0.0914 -0.0782 -0.0967 -0.0291 -0.0473 -0.0482 -0.0992 -0.8688 -0.1129 -0.1192 -0.7781 -0.1352 -0.1905 -0.1418 -0.0959 -0.0921 -0.0789 -0.1126 -0.1044 -0.1051 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0871 -0.0763 -0.0721 -1.0627 -0.0685 -0.0906 -0.0789 -1.0017 -0.0577 -0.0478 -0.1213 -0.0821 -0.0897 -0.0679 -0.1047 -0.0767 -0.0692 -0.0679 -0.2782 -0.0984 -0.1059 -0.1025 -0.0829 -0.0941 -0.0332 -0.1010 -0.7450 -0.1168 -0.1151 -0.6307 -0.1006 -0.2043 -0.1608 -0.0944 -0.0921 -0.0851 -0.0571 -0.0963 -0.0689 -0.1048 -0.0901 -0.0862 -0.0290 -0.1056 -0.4636 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0535 -0.1111 -0.0814 -0.0737 -0.5508 -0.0560 -0.1031 -0.0829 -0.0639 -0.4861 -0.1252 -0.0870 -0.0604 -0.7780 -0.0751 -0.0815 -0.0577 -0.0959 -0.0747 -0.1525 -0.0738 -0.0897
S-146	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-146	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-146	-0.11954278498888016	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-146	-0.11954278498888016	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-146	-0.0875 -0.0536 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1650 -0.0991 -0.0808 -0.0905 -0.0841 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0854 -0.0688 -0.1092 -0.1127 -0.0887 -0.1359 -0.0223 -0.0884 -0.1097 -0.0843 -0.0352 -0.0790 -0.0341 -0.2501 -0.1268 -0.1092 -0.0767 -0.0754 -0.0820 -0.9087 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0732 -0.1035 -0.1603 -0.0764 -0.0845 -0.1120 -0.1061 -0.0663 -0.0706 -0.0926 -0.6671 -0.0868 -0.0671 -0.0636 -0.1276 -0.0770 -0.4361 -0.0743 -0.0829 -0.1503 -0.0802 -0.0947 -0.1350 -0.0775 -0.0806 -0.0426 -0.0942 -1.9788 -0.0917 -0.0307 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1194 -0.0619 -0.0978 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0748 -0.1360 -0.0765 -0.0761 -0.0424 -0.3036 -0.2925 -0.1156 -0.0996 -0.0860 -0.0866 -0.0730 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0865 -0.0998 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0992 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0941 -0.1130 -0.0965 -0.0973 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0900 -0.0693 -0.1402 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1009 -0.0862 -0.1504 -0.1446 -0.0831 -0.0681 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0835 -0.0889 -0.0731 -0.2250 -0.0860 -0.0776
S-136	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-136	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-136	-0.11954282969236374	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-136	-0.11954282969236374	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-136	-0.0875 -0.0536 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1650 -0.0991 -0.0808 -0.0905 -0.0841 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0854 -0.0688 -0.1092 -0.1127 -0.0887 -0.1359 -0.0223 -0.0884 -0.1097 -0.0843 -0.0352 -0.0790 -0.0341 -0.2501 -0.1268 -0.1092 -0.0767 -0.0754 -0.0820 -0.9087 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0732 -0.1035 -0.1603 -0.0764 -0.0845 -0.1120 -0.1061 -0.0663 -0.0706 -0.0926 -0.6671 -0.0868 -0.0671 -0.0636 -0.1276 -0.0770 -0.4361 -0.0743 -0.0829 -0.1503 -0.0802 -0.0947 -0.1350 -0.0775 -0.0806 -0.0426 -0.0942 -1.9788 -0.0917 -0.0307 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1194 -0.0619 -0.0978 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0748 -0.1360 -0.0765 -0.0761 -0.0424 -0.3036 -0.2925 -0.1156 -0.0996 -0.0860 -0.0866 -0.0730 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0865 -0.0998 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0992 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0941 -0.1130 -0.0965 -0.0973 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0900 -0.0693 -0.1402 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1009 -0.0862 -0.1504 -0.1446 -0.0831 -0.0681 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0835 -0.0889 -0.0731 -0.2250 -0.0860 -0.0776
S-18	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-18	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-18	-0.11954280734062195	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-18	-0.11954280734062195	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-18	-0.0875 -0.0536 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1650 -0.0991 -0.0808 -0.0905 -0.0841 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0854 -0.0688 -0.1092 -0.1127 -0.0887 -0.1359 -0.0223 -0.0884 -0.1097 -0.0843 -0.0352 -0.0790 -0.0341 -0.2501 -0.1268 -0.1092 -0.0767 -0.0754 -0.0820 -0.9087 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0732 -0.1035 -0.1603 -0.0764 -0.0845 -0.1120 -0.1061 -0.0663 -0.0706 -0.0926 -0.6671 -0.0868 -0.0671 -0.0636 -0.1276 -0.0770 -0.4361 -0.0743 -0.0829 -0.1503 -0.0802 -0.0947 -0.1350 -0.0775 -0.0806 -0.0426 -0.0942 -1.9788 -0.0917 -0.0307 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1194 -0.0619 -0.0978 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0748 -0.1360 -0.0765 -0.0761 -0.0424 -0.3036 -0.2925 -0.1156 -0.0996 -0.0860 -0.0866 -0.0730 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0865 -0.0998 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0992 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0941 -0.1130 -0.0965 -0.0973 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0900 -0.0693 -0.1402 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1009 -0.0862 -0.1503 -0.1446 -0.0831 -0.0681 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0835 -0.0889 -0.0731 -0.2250 -0.0860 -0.0776
S-124	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-124	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-124	-0.16114473342895508	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-124	-0.16114473342895508	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-124	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-411	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-411	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-411	-0.1611447036266327	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-411	-0.1611447036266327	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-411	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-405	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-405	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-405	-0.1611446887254715	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-405	-0.1611446887254715	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-405	-0.0832 -0.0496 -0.9269 -0.0228 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0605 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-399	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-399	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-399	-0.16114458441734314	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-399	-0.16114458441734314	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-399	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0605 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1430 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-381	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-381	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-381	-0.1611446738243103	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-381	-0.1611446738243103	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-381	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-373	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-373	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-373	-0.16114474833011627	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-373	-0.16114474833011627	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-373	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-360	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-360	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-360	-0.16114471852779388	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-360	-0.16114471852779388	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-360	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1430 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-341	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-341	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-341	-0.1611446887254715	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-341	-0.1611446887254715	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-341	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-303	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-303	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-303	-0.16114473342895508	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-303	-0.16114473342895508	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-303	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-281	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-281	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-281	-0.1611447036266327	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-281	-0.1611447036266327	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-281	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-217	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-217	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-217	-0.1611446887254715	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-217	-0.1611446887254715	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-217	-0.0832 -0.0496 -0.9269 -0.0228 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0605 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-204	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-204	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-204	-0.16114458441734314	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-204	-0.16114458441734314	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-204	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0605 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1430 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-147	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-147	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-147	-0.1611446738243103	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-147	-0.1611446738243103	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-147	-0.0832 -0.0496 -0.9269 -0.0227 -0.1061 -0.8156 -0.0730 -0.0894 -0.0864 -1.2080 -0.0407 -0.0856 -0.0575 -0.6350 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0589 -0.0699 -0.1263 -0.0482 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9005 -0.0978 -0.0925 -0.1130 -0.1114 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1079 -0.3771 -0.0964 -0.2701 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7047 -0.0930 -0.0697 -0.0458 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1025 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0983 -0.0781 -0.2524 -0.1118 -0.2814 -0.1612 -0.0722 -0.1144 -0.0820 -0.1565 -0.1507 -0.2298 -0.0606 -0.1067 -0.0845 -0.2443 -0.1423 -0.2255 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2141 -0.0758 -0.0539 -0.1107 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1453 -0.1317 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0543 -0.1182 -0.0737 -0.1526 -0.1522 -0.2121 -0.0786 -0.0679 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0481 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1861 -0.1043 -0.1417 -0.0921 -0.0692 -0.0943 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1630 -0.0718 -0.1296 -0.9761 -0.1097 -0.1512 -0.0914 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6244 -0.1630 -0.1024 -0.0779 -0.0869
S-357	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-357	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-357	-0.19819559156894684	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-357	-0.19819559156894684	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-357	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-287	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-287	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-287	-0.19819562137126923	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-287	-0.19819562137126923	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-287	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-246	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-246	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-246	-0.1981956660747528	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-246	-0.1981956660747528	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-246	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-123	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-123	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-123	-0.19819563627243042	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-123	-0.19819563627243042	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-123	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-98	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-98	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-98	-0.1981957107782364	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-98	-0.1981957107782364	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-98	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-92	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-92	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-92	-0.1981957107782364	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-92	-0.1981957107782364	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-92	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-87	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-87	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-87	-0.1981956660747528	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-87	-0.1981956660747528	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-87	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-39	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-39	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-39	-0.19819556176662445	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-39	-0.19819556176662445	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-39	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-1	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-1	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-1	-0.19819559156894684	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-1	-0.19819559156894684	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-1	-0.0970 -0.0379 -0.1000 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0955 -0.1217 -0.0791 -0.1137 -0.1102 -0.0285 -1.3249 -0.0817 -0.1248 -0.0782 -0.0995 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0758 -0.7093 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7439 -0.1232 -0.1077 -0.0705 -0.0945 -0.0757 -0.6156 -0.0935 -0.0705 -0.1009 -1.0905 -0.0921 -0.5389 -0.0770 -0.0842 -0.1416 -0.1073 -0.0693 -0.0954 -0.0933 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0990 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1193 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0265 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1478 -0.0930 -0.0924 -1.1651 -0.1098 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8243 -0.0913 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0966 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1017 -0.0933 -0.0906 -0.1433 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0801 -1.8773 -0.0891 -0.1028 -0.1000 -0.0910 -0.6737 -0.0366 -0.1044 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0970 -0.0980 -0.0897 -0.0934 -0.1428 -0.1077 -0.0893 -0.1158 -0.1020 -0.1520 -0.0817 -0.0782 -0.0920 -0.0834 -1.7747 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1372 -0.0977 -0.1209 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5457 -0.0835 -0.0591 -0.1484 -1.2627 -0.0857 -0.4659 -0.0838 -0.1052 -0.1353 -0.1150 -0.4728 -0.0931 -0.0665 -0.0435 -0.0822 -0.0907 -0.0936 -0.0830 -0.0639 -0.1038 -0.0901 -0.0631 -0.0978 -2.2789 -0.1234 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1367 -0.5670 -0.0758 -0.0926 -0.0335 -0.6607 -0.0778 -0.0790
S-139	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim ( ) ; }
T-139	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array, new Comparator < String > ( ) { public int compare ( String n1, String n2 ) { return value_map.get ( n1 ) - value_map.get ( n2 ) ; } } ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim ( ) ; }
H-139	-0.250270813703537	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
D-139	-0.250270813703537	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
P-139	-0.0933 -0.0541 -1.5814 -0.0382 -0.1019 -0.0645 -0.1169 -1.4329 -0.0549 -0.0968 -0.0826 -0.1164 -0.8550 -0.0753 -0.8998 -0.3132 -0.9611 -0.0772 -0.0505 -0.0960 -0.0498 -0.0830 -0.0588 -0.9512 -0.0930 -0.9441 -0.2579 -0.8159 -0.0744 -0.1649 -0.0908 -0.0790 -0.0847 -0.1004 -0.0767 -0.1119 -0.1795 -0.1084 -0.0754 -0.0617 -1.9764 -0.1029 -0.0899 -0.0932 -0.0707 -0.1021 -0.0794 -0.0971 -0.1937 -0.1103 -0.0842 -0.0347 -1.6204 -0.2212 -0.0894 -0.0923 -0.0673 -0.1028 -0.0792 -0.0959 -0.1890 -0.1081 -0.0867 -0.0425 -1.7196 -0.0738 -0.0845 -0.0934 -0.0689 -0.1036 -0.0828 -0.0968 -0.2054 -0.1125 -0.0849 -0.1006 -1.9949 -0.0470 -0.0884 -0.0971 -0.0620 -0.1038 -0.0873 -0.0982 -0.1944 -0.1129 -0.0873 -0.0290 -1.5226 -0.0702 -0.0905 -0.0948 -0.0575 -0.0998 -0.0830 -0.0977 -0.1795 -0.1141 -0.0882 -0.0770 -1.7592 -0.0604 -0.0858 -0.0899 -0.0653 -0.1003 -0.0835 -0.0987 -0.1876 -0.1117 -0.0851 -0.0119 -1.5213 -0.0538 -0.0834 -0.0948 -0.0591 -0.0978 -0.0863 -0.0984 -0.1592 -0.1105 -0.0891 -0.0421 -0.0074 -1.4860 -0.0737 -0.0868 -0.0894 -0.0532 -0.0961 -0.0764 -0.0986 -0.1396 -0.1063 -0.0924 -0.0045 -1.3558 -0.0749 -0.0808 -0.0887 -0.0648 -0.0945 -0.0774 -0.1016 -0.1823 -0.1054 -0.0774 -0.1173 -0.0188 -1.7566 -0.0234 -0.0849 -0.0879 -1.0216 -0.0630 -0.7771 -0.0578 -0.0377 -0.0926 -0.0360 -0.0885 -0.0572 -0.9409 -0.0995 -0.6826 -0.0706 -0.1152 -3.3003 -0.0675 -0.3723 -0.0911 -0.0102 -0.1506 -0.0161 -0.1081 -0.1279 -0.2470 -0.4408 -0.1070 -0.0814 -0.0793 -0.0948 -0.0946 -0.0881 -0.1176 -1.4123 -0.0845 -0.0330 -0.1095 -0.0366 -0.0795 -0.0360 -0.1012 -0.0986 -0.7341 -0.0931 -0.0859 -1.0236 -0.1385 -0.1068 -1.0519 -0.0409 -0.0691 -0.0291 -0.0850 -0.0282 -0.0887 -0.0853 -0.0722 -0.0431 -0.0479 -0.0457 -0.0928 -0.0097 -0.1220 -0.0814 -0.0715 -0.1134 -1.7019 -0.1093 -0.0964 -0.0797 -0.0917
S-374	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
T-374	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != null ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
H-374	-0.15349331498146057	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a , Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
D-374	-0.15349331498146057	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a , Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
P-374	-0.0937 -0.0419 -1.2701 -0.0791 -0.6611 -0.0539 -0.0377 -0.0850 -0.0281 -0.1142 -1.0203 -0.0760 -0.7141 -0.0708 -0.0852 -0.0853 -0.0854 -0.1342 -0.0832 -0.7442 -0.2432 -0.5849 -0.0643 -0.0312 -0.0915 -0.0465 -0.0847 -0.0517 -0.9554 -0.0732 -0.0602 -0.1530 -0.0731 -0.0769 -0.1112 -0.1013 -0.0605 -0.1168 -0.1426 -0.1012 -0.5484 -0.1201 -0.0514 -0.0770 -0.0991 -0.0891 -0.0909 -0.0995 -0.0678 -0.0979 -0.1455 -0.1101 -0.2073 -0.1193 -0.0321 -0.0688 -0.0883 -0.0895 -0.0741 -0.1032 -0.0784 -0.0976 -0.1390 -0.1072 -0.1575 -0.0987 -0.0413 -0.0720 -0.0870 -0.0881 -0.0663 -0.0976 -0.0738 -0.0992 -0.1262 -0.1115 -0.1860 -0.1063 -0.0354 -0.0796 -0.0870 -0.0919 -0.0672 -0.0971 -0.0794 -0.0988 -0.1505 -0.1129 -0.1223 -0.1048 -0.0474 -0.0160 -0.0777 -0.0910 -0.0871 -0.0691 -0.0981 -0.0751 -0.0989 -0.1501 -0.1146 -0.1142 -0.0997 -0.0371 -0.0189 -0.0846 -0.0898 -0.0861 -0.0656 -0.0921 -0.0716 -0.1010 -0.1383 -0.1115 -0.1140 -0.1054 -0.0512 -0.0598 -0.0760 -0.0901 -0.0880 -0.0900 -0.0973 -0.0716 -0.1008 -0.1258 -0.1106 -0.1691 -0.1019 -0.0577 -0.0131 -0.0793 -0.0846 -0.0868 -0.1545 -0.0918 -0.0671 -0.1025 -0.1449 -0.1032 -0.2019 -0.1041 -0.0295 -0.0161 -0.0828 -0.0911 -0.0887 -1.6641 -0.0917 -0.0438 -0.1058 -0.1029 -1.1636 -1.1935 -0.0914 -0.1069 -0.0309 -0.2244 -0.6261 -0.0993 -0.0891 -0.9063 -0.0759 -0.5794 -0.0502 -0.0654 -0.0862 -0.0479 -1.1638 -0.0672 -0.2152 -0.2672 -0.0972 -0.0819 -0.1165 -0.1095 -0.0781 -0.0776 -0.1245 -0.0791 -0.0973 -0.0948 -0.1612 -0.1099 -0.1928 -0.1142 -0.0595 -0.1550 -0.1398 -0.1154 -0.0665 -0.0961 -0.2827 -0.1428 -0.0946 -0.0948 -0.0657 -0.2165 -0.2289 -0.1060 -0.0517 -0.0977 -0.0530 -0.1193 -0.1359 -0.1071 -0.0700 -0.0924 -0.1099 -0.0921 -0.0962 -0.1101 -0.0586 -0.0823 -0.0988 -0.0797 -0.0818
S-295	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-295	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase ( ) .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-295	-0.19149452447891235	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-295	-0.19149452447891235	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-295	-0.0916 -0.0440 -0.0801 -0.0485 -0.0895 -0.0423 -0.0804 -0.0339 -0.1144 -0.6794 -0.0624 -0.6389 -0.2352 -0.4233 -0.0665 -0.0367 -0.0826 -0.0892 -0.3388 -0.1113 -0.0391 -0.1350 -0.1451 -0.2507 -0.0780 -0.0963 -0.1036 -0.0833 -0.0880 -0.0975 -1.4463 -0.1526 -0.0977 -0.9883 -0.0710 -0.0837 -0.0962 -0.0283 -0.9051 -0.1896 -0.1031 -0.6771 -0.0728 -0.0635 -0.0247 -0.1059 -0.0327 -0.0480 -0.1830 -0.0877 -0.0840 -0.0962 -0.1116 -0.1104 -0.0654 -0.1248 -0.0679 -0.0250 -0.5311 -0.0936 -0.0843 -0.1320 -0.0811 -0.1020 -0.1020 -0.1242 -0.4247 -0.0564 -0.0707 -0.0714 -1.1920 -0.0643 -0.0963 -0.0494 -0.0805 -0.1332 -0.5579 -0.0695 -0.0698 -1.3560 -0.0971 -0.1134 -0.0901 -0.1141 -1.3832 -0.1053 -0.0996 -0.0869 -0.0805 -0.0864 -0.0790 -0.1178 -0.1168 -0.1163 -0.1102 -0.1043 -0.0474 -0.1181 -0.4086 -0.2213 -0.0842 -0.1188 -1.6226 -0.1068 -0.0737 -0.1026 -0.0600 -0.1170 -0.0865 -0.1310 -0.0845 -0.0976 -0.0734 -0.5806 -0.0710 -0.0920 -0.1082 -0.0834 -0.1033 -0.0419 -0.1062 -0.4156 -0.1895 -0.0788 -0.1248 -0.9744 -0.1070 -0.0770 -0.1019 -0.0575 -0.1055 -0.0845 -0.0649 -0.0836 -0.0929 -0.0765 -0.3810 -0.0921 -0.1360 -0.0533 -0.0927 -0.1019 -0.1363 -0.4199 -0.0765 -0.0932 -0.0751 -0.0729 -0.1026 -0.1018 -0.1100 -0.0782 -0.1079 -1.4319 -0.1119 -0.1060 -0.1120 -0.0852 -0.0903 -0.6330 -0.1549 -0.1570 -0.0973 -0.0330 -0.1310 -0.5428 -0.1488 -0.0738 -0.0997 -1.1727 -0.1105 -0.0795 -0.0928 -0.0549 -0.1067 -0.0888 -0.1610 -0.0527 -0.1002 -0.1019 -0.1867 -0.3897 -0.0582 -0.0901 -0.0795 -0.0809 -0.1154 -0.4182 -0.0448 -0.1361 -1.2358 -0.1052 -0.0976 -0.1044 -0.0883 -0.0910 -0.0898 -0.0696 -0.1099 -0.0427 -0.1092 -1.1156 -0.1000 -0.0852 -0.0624 -0.0726 -0.0851 -0.0941 -0.1037 -0.0779 -0.1483 -0.0808
S-294	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-294	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase ( ) .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-294	-0.19149446487426758	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-294	-0.19149446487426758	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-294	-0.0916 -0.0440 -0.0801 -0.0485 -0.0895 -0.0423 -0.0804 -0.0339 -0.1144 -0.6794 -0.0624 -0.6389 -0.2352 -0.4233 -0.0665 -0.0367 -0.0826 -0.0892 -0.3388 -0.1113 -0.0391 -0.1350 -0.1451 -0.2507 -0.0780 -0.0963 -0.1036 -0.0833 -0.0880 -0.0975 -1.4463 -0.1526 -0.0977 -0.9883 -0.0710 -0.0837 -0.0962 -0.0283 -0.9051 -0.1896 -0.1031 -0.6771 -0.0728 -0.0635 -0.0247 -0.1059 -0.0327 -0.0480 -0.1830 -0.0877 -0.0840 -0.0962 -0.1116 -0.1104 -0.0654 -0.1248 -0.0679 -0.0250 -0.5311 -0.0936 -0.0843 -0.1320 -0.0811 -0.1020 -0.1020 -0.1242 -0.4247 -0.0564 -0.0707 -0.0714 -1.1920 -0.0643 -0.0963 -0.0494 -0.0805 -0.1332 -0.5579 -0.0695 -0.0698 -1.3560 -0.0971 -0.1134 -0.0901 -0.1141 -1.3832 -0.1053 -0.0996 -0.0869 -0.0805 -0.0864 -0.0790 -0.1178 -0.1168 -0.1163 -0.1102 -0.1043 -0.0474 -0.1181 -0.4086 -0.2213 -0.0842 -0.1188 -1.6226 -0.1068 -0.0737 -0.1026 -0.0600 -0.1170 -0.0865 -0.1310 -0.0845 -0.0976 -0.0734 -0.5806 -0.0710 -0.0920 -0.1082 -0.0834 -0.1033 -0.0419 -0.1062 -0.4156 -0.1895 -0.0788 -0.1248 -0.9744 -0.1070 -0.0770 -0.1019 -0.0575 -0.1055 -0.0845 -0.0649 -0.0836 -0.0929 -0.0765 -0.3810 -0.0921 -0.1360 -0.0533 -0.0927 -0.1019 -0.1363 -0.4199 -0.0765 -0.0932 -0.0751 -0.0729 -0.1026 -0.1018 -0.1100 -0.0782 -0.1079 -1.4319 -0.1119 -0.1060 -0.1120 -0.0852 -0.0903 -0.6330 -0.1549 -0.1570 -0.0973 -0.0330 -0.1310 -0.5428 -0.1488 -0.0738 -0.0997 -1.1727 -0.1105 -0.0795 -0.0928 -0.0549 -0.1067 -0.0888 -0.1610 -0.0527 -0.1002 -0.1019 -0.1867 -0.3897 -0.0582 -0.0901 -0.0795 -0.0809 -0.1154 -0.4182 -0.0448 -0.1361 -1.2358 -0.1052 -0.0976 -0.1044 -0.0883 -0.0910 -0.0898 -0.0696 -0.1099 -0.0427 -0.1092 -1.1156 -0.1000 -0.0852 -0.0624 -0.0726 -0.0851 -0.0941 -0.1037 -0.0779 -0.1483 -0.0808
S-89	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-89	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase ( ) .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-89	-0.19149459898471832	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-89	-0.19149459898471832	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-89	-0.0916 -0.0440 -0.0801 -0.0485 -0.0895 -0.0423 -0.0804 -0.0339 -0.1144 -0.6794 -0.0624 -0.6389 -0.2352 -0.4233 -0.0665 -0.0367 -0.0826 -0.0892 -0.3388 -0.1113 -0.0391 -0.1350 -0.1451 -0.2507 -0.0780 -0.0963 -0.1036 -0.0833 -0.0880 -0.0975 -1.4463 -0.1526 -0.0977 -0.9883 -0.0710 -0.0837 -0.0962 -0.0283 -0.9051 -0.1896 -0.1031 -0.6771 -0.0728 -0.0635 -0.0247 -0.1059 -0.0327 -0.0480 -0.1830 -0.0877 -0.0840 -0.0962 -0.1116 -0.1104 -0.0654 -0.1248 -0.0679 -0.0250 -0.5311 -0.0936 -0.0843 -0.1320 -0.0811 -0.1020 -0.1020 -0.1242 -0.4247 -0.0564 -0.0707 -0.0714 -1.1920 -0.0643 -0.0963 -0.0494 -0.0805 -0.1332 -0.5579 -0.0695 -0.0698 -1.3560 -0.0971 -0.1134 -0.0901 -0.1141 -1.3832 -0.1053 -0.0996 -0.0869 -0.0805 -0.0864 -0.0790 -0.1178 -0.1168 -0.1163 -0.1102 -0.1043 -0.0474 -0.1181 -0.4086 -0.2213 -0.0842 -0.1188 -1.6226 -0.1068 -0.0737 -0.1026 -0.0600 -0.1170 -0.0865 -0.1310 -0.0845 -0.0976 -0.0734 -0.5806 -0.0710 -0.0920 -0.1082 -0.0834 -0.1033 -0.0419 -0.1062 -0.4156 -0.1895 -0.0788 -0.1248 -0.9744 -0.1070 -0.0770 -0.1019 -0.0575 -0.1055 -0.0845 -0.0649 -0.0836 -0.0929 -0.0765 -0.3810 -0.0921 -0.1360 -0.0533 -0.0927 -0.1019 -0.1363 -0.4199 -0.0765 -0.0932 -0.0751 -0.0729 -0.1026 -0.1018 -0.1100 -0.0782 -0.1079 -1.4319 -0.1119 -0.1060 -0.1120 -0.0852 -0.0903 -0.6330 -0.1549 -0.1570 -0.0973 -0.0330 -0.1310 -0.5428 -0.1488 -0.0738 -0.0997 -1.1727 -0.1105 -0.0795 -0.0928 -0.0549 -0.1067 -0.0888 -0.1610 -0.0527 -0.1002 -0.1019 -0.1867 -0.3897 -0.0582 -0.0901 -0.0795 -0.0809 -0.1154 -0.4182 -0.0448 -0.1361 -1.2358 -0.1052 -0.0976 -0.1044 -0.0883 -0.0910 -0.0898 -0.0696 -0.1099 -0.0427 -0.1092 -1.1156 -0.1000 -0.0852 -0.0624 -0.0726 -0.0851 -0.0941 -0.1037 -0.0779 -0.1483 -0.0808
S-319	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-319	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-319	-0.17038820683956146	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-319	-0.17038820683956146	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-319	-0.0966 -0.0557 -1.5647 -0.0842 -0.6881 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0390 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.2030 -0.0741 -0.6238 -0.0737 -0.0708 -0.0848 -0.0543 -1.2279 -0.0651 -0.1200 -0.1709 -0.0984 -0.0770 -1.5082 -0.1909 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4750 -0.1082 -0.0840 -0.0740 -0.0834 -0.0906 -0.5209 -0.1077 -0.0757 -0.0789 -0.0682 -0.9763 -0.0967 -0.0824 -0.0506 -0.1061 -0.0661 -0.5290 -0.0705 -0.3562 -0.0718 -0.0774 -0.1206 -0.0809 -0.0991 -0.0275 -0.0223 -0.0285 -0.0998 -0.9014 -0.1767 -0.1608 -0.0609 -0.0531 -0.0862 -0.1154 -0.0897 -0.0479 -0.1339 -0.1053 -0.0492 -0.1309 -0.1239 -0.0512 -0.0890 -0.1019 -0.0534 -0.1042 -0.1040 -0.0330 -0.0660 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0980 -0.0787 -0.9627 -0.0975 -0.0820 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3168 -0.0913 -0.0772 -0.0717 -0.3845 -0.0747 -0.0787 -0.0789 -0.0371 -0.0340 -0.0402 -0.0836 -0.0738 -0.5734 -0.1334 -0.1016 -0.0722 -0.0827 -0.0843 -0.6989 -0.0814 -0.0669 -0.2324 -0.1137 -0.0795 -0.8691 -0.0860 -0.3676 -0.0742 -0.1034 -0.1148 -0.1069 -0.1412 -0.0693 -0.0839 -0.0717 -0.2432 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7170 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0636 -0.0342 -0.0419 -0.1096 -0.0448 -0.7095 -0.0489 -0.0689 -0.0809 -0.0788 -0.1170 -0.1142 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0395 -0.0285 -0.0229 -0.4164 -0.1032 -0.1829 -0.1060 -0.1703 -0.0888 -0.0365 -0.0266 -0.0247 -0.0833 -0.1038 -0.0939 -0.1493 -0.1806 -0.2681 -0.1119 -0.0279 -0.0663 -0.1293 -0.0786 -0.1612 -0.0910 -0.1009 -0.0622 -0.0874 -0.1233 -0.0884 -0.0753
S-370	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-370	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-370	-0.17038828134536743	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-370	-0.17038828134536743	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-370	-0.0966 -0.0557 -1.5647 -0.0842 -0.6881 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0390 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.2030 -0.0741 -0.6238 -0.0737 -0.0708 -0.0848 -0.0543 -1.2279 -0.0651 -0.1200 -0.1709 -0.0984 -0.0770 -1.5082 -0.1909 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4750 -0.1082 -0.0840 -0.0740 -0.0834 -0.0906 -0.5209 -0.1077 -0.0757 -0.0789 -0.0682 -0.9763 -0.0967 -0.0824 -0.0506 -0.1061 -0.0661 -0.5290 -0.0705 -0.3562 -0.0718 -0.0774 -0.1206 -0.0809 -0.0991 -0.0275 -0.0223 -0.0286 -0.0998 -0.9014 -0.1767 -0.1608 -0.0609 -0.0530 -0.0862 -0.1154 -0.0897 -0.0479 -0.1339 -0.1053 -0.0492 -0.1309 -0.1239 -0.0512 -0.0890 -0.1019 -0.0534 -0.1042 -0.1040 -0.0330 -0.0660 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0980 -0.0787 -0.9627 -0.0975 -0.0820 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3168 -0.0913 -0.0772 -0.0717 -0.3845 -0.0747 -0.0787 -0.0789 -0.0371 -0.0340 -0.0402 -0.0836 -0.0738 -0.5734 -0.1334 -0.1016 -0.0722 -0.0827 -0.0843 -0.6989 -0.0814 -0.0669 -0.2324 -0.1137 -0.0795 -0.8691 -0.0860 -0.3676 -0.0742 -0.1034 -0.1148 -0.1069 -0.1412 -0.0693 -0.0839 -0.0717 -0.2432 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7170 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0636 -0.0342 -0.0419 -0.1096 -0.0448 -0.7095 -0.0489 -0.0689 -0.0809 -0.0789 -0.1170 -0.1142 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0395 -0.0285 -0.0229 -0.4164 -0.1032 -0.1829 -0.1060 -0.1703 -0.0888 -0.0365 -0.0266 -0.0247 -0.0833 -0.1038 -0.0939 -0.1493 -0.1806 -0.2681 -0.1119 -0.0279 -0.0663 -0.1293 -0.0786 -0.1612 -0.0910 -0.1009 -0.0622 -0.0874 -0.1233 -0.0884 -0.0753
S-219	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-219	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-219	-0.170388326048851	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-219	-0.170388326048851	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-219	-0.0966 -0.0557 -1.5647 -0.0842 -0.6881 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0390 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.2030 -0.0741 -0.6238 -0.0737 -0.0708 -0.0848 -0.0543 -1.2279 -0.0651 -0.1200 -0.1709 -0.0984 -0.0770 -1.5082 -0.1909 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4750 -0.1082 -0.0840 -0.0740 -0.0834 -0.0906 -0.5209 -0.1077 -0.0757 -0.0789 -0.0682 -0.9763 -0.0967 -0.0824 -0.0506 -0.1061 -0.0661 -0.5290 -0.0705 -0.3562 -0.0718 -0.0774 -0.1206 -0.0809 -0.0991 -0.0275 -0.0223 -0.0285 -0.0998 -0.9014 -0.1767 -0.1608 -0.0609 -0.0531 -0.0862 -0.1154 -0.0897 -0.0479 -0.1339 -0.1053 -0.0492 -0.1309 -0.1239 -0.0512 -0.0890 -0.1019 -0.0534 -0.1042 -0.1040 -0.0330 -0.0660 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0980 -0.0787 -0.9627 -0.0975 -0.0820 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3168 -0.0913 -0.0772 -0.0717 -0.3845 -0.0747 -0.0787 -0.0789 -0.0371 -0.0340 -0.0402 -0.0836 -0.0738 -0.5734 -0.1334 -0.1016 -0.0722 -0.0827 -0.0843 -0.6989 -0.0814 -0.0669 -0.2324 -0.1137 -0.0795 -0.8691 -0.0860 -0.3676 -0.0742 -0.1034 -0.1148 -0.1069 -0.1412 -0.0693 -0.0839 -0.0717 -0.2432 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7170 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0636 -0.0342 -0.0418 -0.1096 -0.0448 -0.7095 -0.0489 -0.0689 -0.0809 -0.0789 -0.1170 -0.1142 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0395 -0.0285 -0.0229 -0.4164 -0.1032 -0.1829 -0.1060 -0.1703 -0.0888 -0.0365 -0.0266 -0.0247 -0.0833 -0.1038 -0.0939 -0.1493 -0.1806 -0.2681 -0.1119 -0.0279 -0.0663 -0.1293 -0.0786 -0.1612 -0.0910 -0.1009 -0.0622 -0.0874 -0.1233 -0.0884 -0.0753
S-91	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-91	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-91	-0.170388326048851	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-91	-0.170388326048851	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-91	-0.0966 -0.0557 -1.5647 -0.0842 -0.6881 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0390 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.2030 -0.0741 -0.6238 -0.0737 -0.0708 -0.0848 -0.0543 -1.2279 -0.0651 -0.1200 -0.1709 -0.0984 -0.0770 -1.5082 -0.1909 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4750 -0.1082 -0.0840 -0.0740 -0.0834 -0.0906 -0.5209 -0.1077 -0.0757 -0.0789 -0.0682 -0.9763 -0.0967 -0.0824 -0.0506 -0.1061 -0.0661 -0.5290 -0.0705 -0.3562 -0.0718 -0.0774 -0.1206 -0.0809 -0.0991 -0.0275 -0.0223 -0.0285 -0.0998 -0.9014 -0.1767 -0.1608 -0.0609 -0.0530 -0.0862 -0.1154 -0.0897 -0.0479 -0.1339 -0.1053 -0.0492 -0.1309 -0.1239 -0.0512 -0.0890 -0.1019 -0.0534 -0.1042 -0.1040 -0.0330 -0.0660 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0980 -0.0787 -0.9627 -0.0975 -0.0820 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3168 -0.0913 -0.0772 -0.0717 -0.3845 -0.0747 -0.0787 -0.0789 -0.0371 -0.0340 -0.0402 -0.0836 -0.0738 -0.5734 -0.1334 -0.1016 -0.0722 -0.0827 -0.0843 -0.6989 -0.0814 -0.0669 -0.2324 -0.1137 -0.0795 -0.8691 -0.0860 -0.3676 -0.0742 -0.1034 -0.1148 -0.1069 -0.1412 -0.0693 -0.0839 -0.0717 -0.2432 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7170 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0636 -0.0342 -0.0419 -0.1096 -0.0448 -0.7095 -0.0489 -0.0689 -0.0809 -0.0789 -0.1170 -0.1142 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0395 -0.0285 -0.0229 -0.4164 -0.1032 -0.1829 -0.1060 -0.1703 -0.0888 -0.0365 -0.0266 -0.0247 -0.0833 -0.1038 -0.0939 -0.1493 -0.1806 -0.2681 -0.1119 -0.0279 -0.0663 -0.1293 -0.0786 -0.1612 -0.0910 -0.1009 -0.0622 -0.0874 -0.1233 -0.0884 -0.0753
S-30	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-30	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-30	-0.170388326048851	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-30	-0.170388326048851	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-30	-0.0966 -0.0557 -1.5647 -0.0842 -0.6881 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0390 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.2030 -0.0741 -0.6238 -0.0737 -0.0708 -0.0848 -0.0543 -1.2279 -0.0651 -0.1200 -0.1709 -0.0984 -0.0770 -1.5082 -0.1909 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4750 -0.1082 -0.0840 -0.0740 -0.0834 -0.0906 -0.5209 -0.1077 -0.0757 -0.0789 -0.0682 -0.9763 -0.0967 -0.0824 -0.0506 -0.1061 -0.0661 -0.5290 -0.0705 -0.3562 -0.0718 -0.0774 -0.1206 -0.0809 -0.0991 -0.0275 -0.0223 -0.0286 -0.0998 -0.9014 -0.1767 -0.1608 -0.0609 -0.0530 -0.0862 -0.1154 -0.0897 -0.0479 -0.1339 -0.1053 -0.0492 -0.1309 -0.1239 -0.0512 -0.0890 -0.1019 -0.0534 -0.1042 -0.1040 -0.0330 -0.0660 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0980 -0.0787 -0.9627 -0.0975 -0.0820 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3168 -0.0913 -0.0772 -0.0717 -0.3845 -0.0747 -0.0787 -0.0789 -0.0371 -0.0340 -0.0402 -0.0836 -0.0738 -0.5734 -0.1334 -0.1016 -0.0722 -0.0827 -0.0843 -0.6989 -0.0814 -0.0669 -0.2324 -0.1137 -0.0795 -0.8691 -0.0860 -0.3676 -0.0742 -0.1034 -0.1148 -0.1069 -0.1412 -0.0693 -0.0839 -0.0717 -0.2432 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7170 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0636 -0.0342 -0.0419 -0.1096 -0.0448 -0.7095 -0.0489 -0.0689 -0.0809 -0.0788 -0.1170 -0.1142 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0395 -0.0285 -0.0229 -0.4164 -0.1032 -0.1829 -0.1060 -0.1703 -0.0888 -0.0365 -0.0266 -0.0247 -0.0833 -0.1038 -0.0939 -0.1493 -0.1806 -0.2681 -0.1119 -0.0279 -0.0663 -0.1293 -0.0786 -0.1612 -0.0910 -0.1009 -0.0622 -0.0874 -0.1233 -0.0884 -0.0753
S-347	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-347	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-347	-0.1919948011636734	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-347	-0.1919948011636734	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-347	-0.0885 -0.0415 -1.1201 -0.0328 -0.0930 -0.0317 -0.0888 -0.0185 -0.1094 -0.9445 -0.0928 -0.0874 -0.0964 -0.3282 -0.0270 -0.0271 -0.1258 -1.8999 -0.0265 -0.0853 -0.0316 -0.0812 -0.0187 -0.1146 -0.8504 -0.1296 -0.0775 -0.0944 -2.2908 -0.0679 -0.5857 -0.0548 -0.0625 -0.0853 -0.0561 -1.3866 -0.0806 -0.7270 -0.0588 -0.2470 -0.1076 -0.0867 -0.2727 -0.1067 -0.0911 -0.0726 -0.0779 -0.7672 -0.0832 -0.1171 -0.1865 -0.1105 -0.0742 -0.3381 -0.0818 -0.0919 -0.0683 -0.1019 -0.0642 -0.0793 -0.0892 -0.1032 -0.2241 -0.2262 -0.1050 -0.0620 -0.0942 -0.6799 -0.1172 -0.1475 -0.9753 -3.2311 -0.0896 -0.0415 -0.1074 -0.0828 -0.0956 -0.0895 -0.1713 -0.0774 -0.1182 -0.1046 -0.1391 -0.0680 -0.0797 -0.0911 -0.0904 -0.1030 -0.0800 -0.0984 -0.0420 -0.0895 -0.0671 -0.1039 -0.0794 -0.1793 -0.0656 -0.0600 -0.3002 -0.6209 -0.0654 -0.0853 -1.1896 -0.0769 -0.1041 -0.7831 -0.0945 -0.0607 -0.0541 -0.0859 -0.0848 -0.1112 -0.0628 -0.0979 -0.0976 -0.6664 -0.1165 -0.2288 -0.1649 -0.2216 -0.0792 -0.1077 -0.5825 -0.1062 -0.1594 -0.1891 -0.0830 -0.0830 -0.0628 -0.1774 -0.1066 -0.0176 -0.1207 -0.0904 -0.0846 -0.0893 -0.0867 -0.0627 -0.0689 -0.0980 -0.4945 -0.1032 -0.0806 -0.0947 -0.1106 -0.1597 -0.0714 -0.4326 -0.0117 -0.1103 -0.0960 -0.0676 -0.0648 -0.0830 -0.2546 -0.0755 -0.0911 -0.1012 -0.0409 -0.0405 -0.0670 -0.0843 -0.0519 -0.0438 -0.0385 -0.1946 -0.1188 -0.0962 -0.0654 -0.0311 -0.0953 -0.0371 -0.0899 -0.0415 -0.0853 -0.0174 -0.1074 -0.0313 -0.0906 -0.0419 -0.0891 -0.0565 -0.0848 -0.0197 -0.1070 -0.0849 -0.0955 -0.1028 -0.1023 -0.0751 -0.0957
S-297	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-297	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-297	-0.19199472665786743	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-297	-0.19199472665786743	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-297	-0.0885 -0.0415 -1.1201 -0.0328 -0.0930 -0.0317 -0.0888 -0.0185 -0.1094 -0.9445 -0.0928 -0.0874 -0.0964 -0.3282 -0.0270 -0.0271 -0.1258 -1.8999 -0.0265 -0.0853 -0.0316 -0.0812 -0.0187 -0.1146 -0.8505 -0.1296 -0.0775 -0.0944 -2.2908 -0.0679 -0.5857 -0.0548 -0.0625 -0.0853 -0.0561 -1.3866 -0.0806 -0.7270 -0.0588 -0.2470 -0.1076 -0.0867 -0.2727 -0.1067 -0.0911 -0.0726 -0.0779 -0.7672 -0.0832 -0.1171 -0.1865 -0.1105 -0.0742 -0.3381 -0.0818 -0.0919 -0.0683 -0.1019 -0.0642 -0.0793 -0.0892 -0.1032 -0.2241 -0.2262 -0.1050 -0.0620 -0.0942 -0.6799 -0.1172 -0.1475 -0.9753 -3.2311 -0.0896 -0.0415 -0.1074 -0.0828 -0.0956 -0.0895 -0.1713 -0.0774 -0.1182 -0.1046 -0.1391 -0.0680 -0.0797 -0.0911 -0.0904 -0.1030 -0.0800 -0.0984 -0.0420 -0.0895 -0.0671 -0.1039 -0.0794 -0.1793 -0.0656 -0.0600 -0.3002 -0.6209 -0.0654 -0.0853 -1.1896 -0.0769 -0.1041 -0.7831 -0.0945 -0.0607 -0.0541 -0.0859 -0.0848 -0.1112 -0.0628 -0.0979 -0.0976 -0.6664 -0.1165 -0.2288 -0.1649 -0.2216 -0.0792 -0.1077 -0.5825 -0.1062 -0.1594 -0.1891 -0.0830 -0.0830 -0.0628 -0.1774 -0.1066 -0.0176 -0.1207 -0.0904 -0.0846 -0.0893 -0.0867 -0.0627 -0.0689 -0.0980 -0.4945 -0.1032 -0.0806 -0.0947 -0.1106 -0.1597 -0.0714 -0.4326 -0.0117 -0.1103 -0.0960 -0.0676 -0.0648 -0.0830 -0.2546 -0.0755 -0.0911 -0.1012 -0.0409 -0.0405 -0.0670 -0.0843 -0.0519 -0.0438 -0.0385 -0.1946 -0.1188 -0.0962 -0.0654 -0.0311 -0.0953 -0.0371 -0.0899 -0.0415 -0.0853 -0.0174 -0.1074 -0.0313 -0.0906 -0.0419 -0.0891 -0.0565 -0.0848 -0.0197 -0.1070 -0.0849 -0.0955 -0.1028 -0.1023 -0.0751 -0.0957
S-49	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-49	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-49	-0.19199468195438385	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-49	-0.19199468195438385	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-49	-0.0885 -0.0415 -1.1201 -0.0328 -0.0930 -0.0317 -0.0888 -0.0185 -0.1094 -0.9445 -0.0928 -0.0874 -0.0964 -0.3282 -0.0270 -0.0271 -0.1258 -1.8999 -0.0265 -0.0853 -0.0316 -0.0812 -0.0187 -0.1146 -0.8504 -0.1296 -0.0775 -0.0944 -2.2908 -0.0679 -0.5857 -0.0548 -0.0625 -0.0853 -0.0561 -1.3866 -0.0806 -0.7270 -0.0588 -0.2470 -0.1076 -0.0867 -0.2727 -0.1067 -0.0911 -0.0726 -0.0779 -0.7672 -0.0832 -0.1171 -0.1865 -0.1105 -0.0742 -0.3381 -0.0818 -0.0919 -0.0683 -0.1019 -0.0642 -0.0793 -0.0892 -0.1032 -0.2241 -0.2262 -0.1050 -0.0620 -0.0942 -0.6799 -0.1172 -0.1475 -0.9753 -3.2311 -0.0896 -0.0415 -0.1074 -0.0828 -0.0956 -0.0895 -0.1713 -0.0774 -0.1182 -0.1046 -0.1391 -0.0680 -0.0797 -0.0911 -0.0904 -0.1030 -0.0800 -0.0984 -0.0420 -0.0895 -0.0671 -0.1039 -0.0794 -0.1793 -0.0656 -0.0600 -0.3002 -0.6209 -0.0654 -0.0853 -1.1896 -0.0769 -0.1041 -0.7831 -0.0945 -0.0607 -0.0541 -0.0859 -0.0848 -0.1112 -0.0628 -0.0979 -0.0976 -0.6664 -0.1165 -0.2288 -0.1649 -0.2216 -0.0792 -0.1077 -0.5825 -0.1062 -0.1594 -0.1891 -0.0830 -0.0830 -0.0628 -0.1774 -0.1066 -0.0176 -0.1207 -0.0904 -0.0846 -0.0893 -0.0867 -0.0627 -0.0689 -0.0980 -0.4945 -0.1032 -0.0806 -0.0947 -0.1106 -0.1597 -0.0714 -0.4326 -0.0117 -0.1103 -0.0960 -0.0676 -0.0648 -0.0830 -0.2546 -0.0755 -0.0911 -0.1012 -0.0409 -0.0405 -0.0670 -0.0843 -0.0519 -0.0438 -0.0385 -0.1946 -0.1188 -0.0962 -0.0654 -0.0311 -0.0953 -0.0371 -0.0899 -0.0415 -0.0853 -0.0174 -0.1074 -0.0313 -0.0906 -0.0419 -0.0891 -0.0565 -0.0848 -0.0197 -0.1070 -0.0849 -0.0955 -0.1028 -0.1023 -0.0751 -0.0957
S-37	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-37	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-37	-0.1919945925474167	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-37	-0.1919945925474167	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-37	-0.0885 -0.0415 -1.1201 -0.0328 -0.0930 -0.0317 -0.0888 -0.0185 -0.1094 -0.9445 -0.0928 -0.0874 -0.0964 -0.3282 -0.0270 -0.0271 -0.1258 -1.8999 -0.0265 -0.0853 -0.0316 -0.0812 -0.0187 -0.1146 -0.8504 -0.1296 -0.0775 -0.0944 -2.2908 -0.0679 -0.5857 -0.0548 -0.0625 -0.0853 -0.0561 -1.3866 -0.0806 -0.7270 -0.0588 -0.2470 -0.1076 -0.0867 -0.2727 -0.1067 -0.0911 -0.0726 -0.0779 -0.7672 -0.0832 -0.1171 -0.1865 -0.1105 -0.0742 -0.3381 -0.0818 -0.0919 -0.0683 -0.1019 -0.0642 -0.0793 -0.0892 -0.1032 -0.2241 -0.2262 -0.1050 -0.0620 -0.0942 -0.6799 -0.1172 -0.1475 -0.9753 -3.2311 -0.0896 -0.0415 -0.1074 -0.0828 -0.0956 -0.0895 -0.1713 -0.0774 -0.1182 -0.1046 -0.1391 -0.0680 -0.0797 -0.0911 -0.0904 -0.1030 -0.0800 -0.0984 -0.0420 -0.0895 -0.0671 -0.1039 -0.0794 -0.1793 -0.0656 -0.0600 -0.3002 -0.6209 -0.0654 -0.0853 -1.1896 -0.0769 -0.1041 -0.7831 -0.0945 -0.0607 -0.0541 -0.0859 -0.0848 -0.1112 -0.0628 -0.0979 -0.0976 -0.6664 -0.1165 -0.2288 -0.1649 -0.2216 -0.0792 -0.1077 -0.5825 -0.1062 -0.1594 -0.1891 -0.0830 -0.0830 -0.0628 -0.1774 -0.1066 -0.0176 -0.1207 -0.0904 -0.0846 -0.0893 -0.0867 -0.0627 -0.0689 -0.0980 -0.4945 -0.1032 -0.0806 -0.0947 -0.1106 -0.1597 -0.0714 -0.4326 -0.0117 -0.1103 -0.0960 -0.0676 -0.0648 -0.0830 -0.2546 -0.0755 -0.0911 -0.1012 -0.0409 -0.0405 -0.0670 -0.0843 -0.0519 -0.0438 -0.0385 -0.1946 -0.1188 -0.0962 -0.0654 -0.0311 -0.0953 -0.0371 -0.0899 -0.0415 -0.0853 -0.0174 -0.1074 -0.0313 -0.0906 -0.0419 -0.0891 -0.0565 -0.0848 -0.0197 -0.1070 -0.0849 -0.0955 -0.1028 -0.1023 -0.0751 -0.0957
S-286	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-286	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-286	-0.2611386775970459	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-286	-0.2611386775970459	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-286	-0.0889 -0.0571 -1.5223 -0.0865 -0.9949 -0.0600 -0.0156 -0.1005 -1.8338 -0.0889 -0.5716 -1.1600 -0.0882 -0.0637 -0.0835 -0.0855 -1.4363 -0.0892 -1.0073 -0.0624 -0.1021 -0.0894 -0.1098 -0.0773 -0.0886 -1.0087 -0.0889 -1.0417 -0.0681 -0.1084 -1.8229 -0.0917 -0.3356 -0.1025 -0.0952 -0.0112 -0.0200 -0.0618 -1.6637 -0.1117 -0.0516 -0.0085 -1.1453 -0.1107 -0.0260 -0.0180 -1.2410 -0.1070 -0.0506 -0.0172 -1.2964 -0.1167 -0.0440 -0.0336 -0.0397 -1.4210 -0.1073 -0.0249 -0.0068 -1.4029 -0.0980 -0.0451 -0.0153 -0.0422 -1.4796 -0.1005 -0.0222 -0.0320 -0.0064 -0.0676 -0.0979 -0.0971 -0.1038 -1.7096 -0.0869 -1.0427 -0.0623 -0.0925 -0.0850 -0.0560 -1.0827 -0.0794 -1.0968 -0.0775 -0.2893 -0.1242 -0.0804 -0.5627 -0.1128 -1.0337 -0.1153 -0.3216 -0.1243 -0.0871 -0.1191 -0.7747 -0.1090 -0.0684 -0.0781 -0.0847 -0.0813 -0.0848 -0.1101 -0.0588 -0.1769 -0.1005 -0.0831 -0.1111 -0.6766 -0.1025 -0.0862 -0.0794 -0.0818 -0.0798 -0.0855 -0.0863 -0.1273 -0.2279 -0.1218 -0.0976 -0.0312 -0.0582 -0.0900 -0.1302 -0.1174 -0.0857 -0.1186 -0.9800 -0.1050 -0.0728 -0.0793 -0.0864 -0.0851 -0.0735 -0.1280 -0.0492 -0.0617 -0.0887 -0.0900 -0.1042 -0.0853 -0.1135 -1.1971 -0.1012 -0.0949 -0.0725 -0.0840 -0.0849 -0.2773 -0.1118 -0.0704 -0.0740 -0.0927 -0.1270 -0.0562 -0.0574 -1.2086 -0.0864 -0.1719 -0.1383 -0.0520 -0.0411 -0.2283 -0.0837 -0.0998 -0.1830 -0.0809 -0.1250 -0.2283 -0.3684 -0.1067 -0.0721 -0.1114 -0.0930 -0.1551 -0.2904 -0.1170 -0.1174 -0.1303 -0.1130 -0.0850 -0.0774 -0.0892 -0.1330 -0.0864 -0.0746
S-181	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-181	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-181	-0.26113876700401306	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-181	-0.26113876700401306	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-181	-0.0889 -0.0571 -1.5223 -0.0865 -0.9949 -0.0600 -0.0156 -0.1005 -1.8338 -0.0889 -0.5716 -1.1600 -0.0882 -0.0637 -0.0835 -0.0855 -1.4363 -0.0892 -1.0073 -0.0624 -0.1021 -0.0894 -0.1098 -0.0773 -0.0886 -1.0087 -0.0889 -1.0417 -0.0681 -0.1084 -1.8229 -0.0917 -0.3356 -0.1025 -0.0952 -0.0112 -0.0200 -0.0618 -1.6637 -0.1117 -0.0516 -0.0085 -1.1453 -0.1107 -0.0260 -0.0180 -1.2410 -0.1070 -0.0506 -0.0172 -1.2964 -0.1167 -0.0440 -0.0336 -0.0397 -1.4210 -0.1073 -0.0249 -0.0068 -1.4029 -0.0980 -0.0451 -0.0153 -0.0422 -1.4796 -0.1005 -0.0222 -0.0320 -0.0064 -0.0676 -0.0979 -0.0971 -0.1038 -1.7097 -0.0869 -1.0427 -0.0623 -0.0925 -0.0850 -0.0560 -1.0827 -0.0794 -1.0968 -0.0775 -0.2893 -0.1242 -0.0804 -0.5627 -0.1128 -1.0337 -0.1153 -0.3216 -0.1243 -0.0871 -0.1191 -0.7747 -0.1090 -0.0684 -0.0781 -0.0847 -0.0813 -0.0848 -0.1101 -0.0588 -0.1769 -0.1005 -0.0831 -0.1111 -0.6766 -0.1025 -0.0862 -0.0794 -0.0818 -0.0798 -0.0855 -0.0863 -0.1273 -0.2279 -0.1218 -0.0976 -0.0312 -0.0582 -0.0900 -0.1302 -0.1174 -0.0857 -0.1186 -0.9800 -0.1050 -0.0728 -0.0793 -0.0864 -0.0851 -0.0735 -0.1280 -0.0492 -0.0617 -0.0887 -0.0900 -0.1042 -0.0853 -0.1135 -1.1971 -0.1012 -0.0949 -0.0725 -0.0840 -0.0849 -0.2773 -0.1118 -0.0704 -0.0740 -0.0927 -0.1270 -0.0562 -0.0574 -1.2086 -0.0864 -0.1719 -0.1383 -0.0520 -0.0411 -0.2283 -0.0837 -0.0998 -0.1830 -0.0809 -0.1250 -0.2283 -0.3684 -0.1067 -0.0721 -0.1114 -0.0930 -0.1551 -0.2904 -0.1170 -0.1174 -0.1303 -0.1130 -0.0850 -0.0774 -0.0892 -0.1330 -0.0864 -0.0746
S-342	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len ) ) ; if ( is_prime ( fib.get ( len - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
T-342	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
H-342	-0.19832849502563477	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-342	-0.19832849502563477	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-342	-0.0830 -0.0415 -0.1625 -0.0630 -0.0882 -0.0275 -0.1165 -0.0894 -0.0744 -0.0828 -0.0906 -0.3021 -0.1095 -0.0786 -0.1367 -0.0877 -0.0859 -0.0830 -0.0667 -1.4002 -0.2363 -0.1066 -0.0633 -0.0772 -0.0855 -0.4759 -0.0929 -0.1161 -0.1107 -0.0858 -0.0936 -1.4927 -0.0971 -0.8072 -0.1007 -0.0697 -0.0884 -0.4710 -0.6304 -0.0824 -0.0544 -0.1718 -0.0820 -0.0836 -0.0891 -0.1110 -0.1266 -0.1847 -0.0996 -0.1722 -0.1054 -0.0836 -0.0787 -0.0524 -0.7527 -0.1020 -0.0923 -0.0680 -0.6031 -0.0875 -0.2439
S-247	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len ) ) ; if ( is_prime ( fib.get ( len - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
T-247	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
H-247	-0.19832845032215118	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-247	-0.19832845032215118	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-247	-0.0830 -0.0415 -0.1625 -0.0630 -0.0882 -0.0275 -0.1165 -0.0894 -0.0744 -0.0828 -0.0906 -0.3021 -0.1095 -0.0786 -0.1367 -0.0877 -0.0859 -0.0830 -0.0667 -1.4002 -0.2363 -0.1066 -0.0633 -0.0772 -0.0855 -0.4759 -0.0929 -0.1161 -0.1107 -0.0858 -0.0936 -1.4927 -0.0971 -0.8072 -0.1007 -0.0697 -0.0884 -0.4710 -0.6304 -0.0824 -0.0544 -0.1718 -0.0820 -0.0836 -0.0891 -0.1110 -0.1266 -0.1847 -0.0996 -0.1722 -0.1054 -0.0836 -0.0787 -0.0524 -0.7527 -0.1020 -0.0923 -0.0680 -0.6031 -0.0875 -0.2439
S-195	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len ) ) ; if ( is_prime ( fib.get ( len - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
T-195	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
H-195	-0.19832849502563477	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-195	-0.19832849502563477	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-195	-0.0830 -0.0415 -0.1625 -0.0630 -0.0882 -0.0275 -0.1165 -0.0894 -0.0744 -0.0828 -0.0906 -0.3021 -0.1095 -0.0786 -0.1367 -0.0877 -0.0859 -0.0830 -0.0667 -1.4002 -0.2363 -0.1066 -0.0633 -0.0772 -0.0855 -0.4759 -0.0929 -0.1161 -0.1107 -0.0858 -0.0936 -1.4927 -0.0971 -0.8072 -0.1007 -0.0697 -0.0884 -0.4710 -0.6304 -0.0824 -0.0544 -0.1718 -0.0820 -0.0836 -0.0891 -0.1110 -0.1266 -0.1847 -0.0996 -0.1722 -0.1054 -0.0836 -0.0787 -0.0524 -0.7527 -0.1020 -0.0923 -0.0680 -0.6031 -0.0875 -0.2439
S-158	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len ) ) ; if ( is_prime ( fib.get ( len - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
T-158	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
H-158	-0.19832852482795715	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-158	-0.19832852482795715	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-158	-0.0830 -0.0415 -0.1625 -0.0630 -0.0882 -0.0275 -0.1165 -0.0894 -0.0744 -0.0828 -0.0906 -0.3021 -0.1095 -0.0786 -0.1367 -0.0877 -0.0859 -0.0830 -0.0667 -1.4002 -0.2363 -0.1066 -0.0633 -0.0772 -0.0855 -0.4759 -0.0929 -0.1161 -0.1107 -0.0858 -0.0936 -1.4927 -0.0971 -0.8072 -0.1007 -0.0697 -0.0884 -0.4710 -0.6304 -0.0824 -0.0544 -0.1718 -0.0820 -0.0836 -0.0891 -0.1110 -0.1266 -0.1847 -0.0996 -0.1722 -0.1054 -0.0836 -0.0787 -0.0524 -0.7527 -0.1020 -0.0923 -0.0680 -0.6031 -0.0875 -0.2439
S-160	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
T-160	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 21 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
H-160	-0.21062308549880981	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
D-160	-0.21062308549880981	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
P-160	-0.0771 -0.0530 -1.0411 -0.0288 -0.0923 -0.0266 -0.1041 -0.7223 -0.1206 -0.0836 -0.0873 -1.4167 -0.0390 -0.0835 -0.0621 -0.7558 -0.1991 -0.0992 -0.0765 -0.1781 -0.1023 -0.1808 -0.0865 -0.0665 -0.0770 -0.1192 -0.0610 -0.0758 -0.2488 -0.1214 -0.0970 -0.0761 -0.2391 -0.1027 -0.1349 -0.0955 -0.0601 -0.1000 -0.1275 -0.1582 -0.6441 -0.1934 -0.0861 -0.5657 -0.4533 -0.0772 -0.1858 -0.6512 -0.0639 -0.0926 -0.0800 -0.1435 -0.1788 -0.0762 -0.1728 -0.0465 -0.0620 -0.0557 -0.0897 -0.0926 -0.1186 -0.0555 -0.1238 -0.9677 -0.1069 -0.1317 -0.0886 -0.0813 -0.1229 -0.1228 -0.0663 -0.1272 -1.9127 -0.2814 -0.1570 -0.0823 -0.0797 -0.1140
S-212	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
T-212	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 21 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
H-212	-0.21062327921390533	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
D-212	-0.21062327921390533	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
P-212	-0.0771 -0.0530 -1.0411 -0.0288 -0.0923 -0.0266 -0.1041 -0.7223 -0.1206 -0.0836 -0.0873 -1.4167 -0.0390 -0.0835 -0.0621 -0.7558 -0.1991 -0.0992 -0.0765 -0.1781 -0.1023 -0.1808 -0.0865 -0.0665 -0.0770 -0.1192 -0.0610 -0.0758 -0.2488 -0.1214 -0.0970 -0.0761 -0.2391 -0.1027 -0.1349 -0.0955 -0.0601 -0.1000 -0.1275 -0.1582 -0.6441 -0.1934 -0.0861 -0.5657 -0.4533 -0.0772 -0.1858 -0.6512 -0.0639 -0.0926 -0.0800 -0.1435 -0.1788 -0.0762 -0.1728 -0.0465 -0.0620 -0.0557 -0.0897 -0.0926 -0.1186 -0.0555 -0.1238 -0.9677 -0.1069 -0.1317 -0.0886 -0.0813 -0.1229 -0.1228 -0.0663 -0.1272 -1.9127 -0.2814 -0.1570 -0.0823 -0.0797 -0.1140
S-185	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-185	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-185	-0.17448660731315613	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-185	-0.17448660731315613	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-185	-0.1008 -0.0400 -0.0996 -0.2060 -0.1012 -0.0140 -0.0901 -0.0552 -0.0349 -0.0906 -0.0229 -0.0296 -0.1128 -0.1042 -0.1462 -0.1162 -0.0464 -0.0866 -0.0865 -0.2404 -0.0595 -0.0933 -0.0617 -0.1899 -0.0810 -0.0951 -0.0629 -1.0684 -0.1029 -0.0760 -0.1111 -0.0664 -0.0767 -0.6611 -0.0945 -0.0404 -0.0886 -0.0394 -0.2802 -0.0920 -0.1030 -0.0403 -0.0887 -0.5562 -0.0935 -0.0186 -0.0824 -0.0434 -0.7758 -0.1312 -0.1097 -0.0700 -0.0839 -0.0752 -2.3102 -0.3566 -0.0927 -0.4151 -0.4435 -0.0886 -0.0739 -0.5299 -0.0803 -1.7859 -0.0677 -0.0964 -0.1089 -0.1105 -0.0748 -0.0682 -0.0770 -0.0862 -0.0579 -0.0828 -0.0888 -0.1082 -0.0644 -0.0907 -0.0854 -0.8916 -0.0742 -0.1069 -0.0601 -0.0896 -1.9331 -0.0932 -0.0748 -0.1047 -0.1005 -0.0970 -0.0506 -0.8507 -0.0481 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0478 -0.0724 -0.0897 -0.0754 -0.0649 -0.0855 -0.0819 -0.0736 -0.0258 -0.0935 -0.0752 -0.3593 -0.1127 -0.0839 -0.0408 -0.0906 -2.0546 -0.0912 -0.0562 -0.1052 -0.0742 -0.0846 -0.0389 -0.6735 -0.0390 -0.0871 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1318 -0.1162 -0.0888 -0.0913 -0.0834 -0.0527 -0.1085 -0.0532 -0.0682 -0.2405 -0.1391 -0.1113 -0.0751 -0.0394 -0.0774 -0.0582 -0.0948 -0.0369 -0.0974 -0.1926 -0.1411 -0.1211 -0.0441 -0.0787 -0.0776 -0.1059 -0.0925 -0.1262 -0.0829 -0.6686 -0.0909 -0.0984 -0.0409 -0.1167 -0.1147 -0.1017 -0.0639 -0.4424 -0.0750 -0.0844
S-324	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-324	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-324	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-324	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-324	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-301	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-301	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-301	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-301	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-301	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0877 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0456 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-298	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-298	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-298	-0.1725791096687317	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-298	-0.1725791096687317	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-298	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0877 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-285	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-285	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-285	-0.17257902026176453	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-285	-0.17257902026176453	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-285	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-274	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-274	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-274	-0.17257900536060333	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-274	-0.17257900536060333	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-274	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-251	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-251	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-251	-0.17257903516292572	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-251	-0.17257903516292572	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-251	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0877 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-194	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-194	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-194	-0.1725790649652481	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-194	-0.1725790649652481	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-194	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-88	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-88	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-88	-0.17257900536060333	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-88	-0.17257900536060333	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-88	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-59	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-59	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-59	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-59	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-59	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-51	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-51	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-51	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-51	-0.1725790798664093	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-51	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0877 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0456 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-45	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-45	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-45	-0.1725791096687317	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-45	-0.1725791096687317	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-45	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0877 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-28	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-28	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-28	-0.17257902026176453	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-28	-0.17257902026176453	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-28	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-6	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-6	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-6	-0.17257900536060333	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-6	-0.17257900536060333	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-6	-0.0860 -0.0529 -0.0797 -0.0392 -0.0965 -0.0448 -0.1175 -1.2956 -0.0520 -0.0803 -0.0919 -0.5181 -0.0919 -3.2851 -0.0777 -0.2414 -0.0863 -0.2303 -1.1791 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1263 -0.5834 -0.1236 -0.0294 -0.0893 -0.0963 -0.4796 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1202 -0.0560 -0.0797 -0.0860 -0.0638 -1.5734 -0.1044 -0.0646 -0.0938 -0.8595 -0.0950 -1.3096 -0.1055 -0.0419 -0.0926 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0395 -0.0908 -0.8128 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5995 -0.0910 -1.2937 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2219 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8105 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0736 -0.0617 -0.0890 -0.0848 -0.1465 -0.0399 -0.0422 -0.0476 -0.0632 -0.1153 -0.0327 -0.0655 -0.0924 -0.1951 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0712 -0.1308 -0.0969 -0.0679 -0.0455 -0.0792 -0.9638 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0809 -0.0789 -0.0746 -0.0543 -0.9971 -0.2164 -0.1032 -0.0475 -0.0631 -0.0951 -0.1009 -0.0594 -0.0888 -0.0131 -0.0759 -0.0902 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0816 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4489 -0.0837 -0.0590 -0.1364 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0907 -0.0990 -0.0654 -0.1614 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0300 -0.0821 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1316 -0.1042 -0.0998 -0.0855 -0.1345 -0.1789 -0.1256 -0.0523 -0.0656 -0.0872 -0.0661 -0.0536 -0.0984 -0.0446 -0.0767 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0700 -0.1152 -0.1882 -0.0618 -0.0779 -0.1065 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3047 -0.0843 -0.0906
S-248	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-248	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-248	-0.1762971132993698	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-248	-0.1762971132993698	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-248	-0.0896 -0.0401 -0.0945 -0.0337 -0.0830 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.0999 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1044 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0920 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-375	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-375	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-375	-0.17629720270633698	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-375	-0.17629720270633698	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-375	-0.0896 -0.0401 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.0999 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1045 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0920 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-272	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-272	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-272	-0.1762971729040146	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-272	-0.1762971729040146	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-272	-0.0896 -0.0401 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.0999 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1044 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0920 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-237	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-237	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-237	-0.17629709839820862	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-237	-0.17629709839820862	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-237	-0.0896 -0.0401 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.0999 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1045 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0920 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-206	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-206	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-206	-0.17629718780517578	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-206	-0.17629718780517578	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-206	-0.0896 -0.0401 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.0999 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1044 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0921 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-174	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-174	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-174	-0.17629720270633698	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-174	-0.17629720270633698	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-174	-0.0896 -0.0401 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.0999 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1044 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0921 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-157	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-157	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-157	-0.17629708349704742	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-157	-0.17629708349704742	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-157	-0.0896 -0.0401 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0159 -0.0536 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0721 -0.1537 -0.1337 -0.2511 -0.0714 -0.0822 -0.0874 -0.0814 -0.0887 -0.1167 -0.8667 -1.1951 -0.0694 -0.7430 -0.0563 -0.1821 -0.0786 -0.0345 -0.0780 -0.0555 -1.0512 -0.0812 -0.1009 -0.1122 -0.0929 -0.0811 -0.0878 -1.5582 -0.0894 -0.0404 -0.1068 -0.2143 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1922 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2348 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3207 -0.1153 -0.0901 -0.0941 -0.2010 -0.1117 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0985 -0.1032 -0.1205 -0.2009 -0.0664 -0.0915 -0.0843 -0.6483 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1925 -0.1149 -0.0820 -0.0911 -0.2156 -0.1584 -0.0799 -0.0533 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0810 -1.1000 -0.0856 -0.4915 -0.0571 -0.0511 -0.0745 -0.0660 -0.0899 -0.0409 -0.0851 -0.0421 -0.8185 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7710 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1372 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1887 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0845 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6038 -0.0973 -0.0754 -1.0500 -0.0990 -0.1107 -0.2535 -0.0669 -0.0919 -0.0845 -0.5317 -0.0760 -0.0891 -0.1592 -0.0919 -0.1014 -0.1015 -0.0416 -0.0989 -0.1630 -0.1045 -0.0625 -0.1078 -0.2109 -0.1148 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4450 -0.0951 -0.0618 -0.0836 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0784 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0986 -0.0947 -0.0994 -0.0410 -0.1230 -0.2130 -0.1196 -0.0884 -0.0920 -0.1184 -0.2104 -0.0972 -0.0630 -0.1371 -0.2605 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-391	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-391	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-391	-0.16811378300189972	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-391	-0.16811378300189972	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-391	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2409 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0856 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0454 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1113 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-336	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-336	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-336	-0.16811373829841614	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-336	-0.16811373829841614	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-336	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2409 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0856 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0455 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1113 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-265	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-265	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-265	-0.16811373829841614	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-265	-0.16811373829841614	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-265	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2409 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0856 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0455 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1113 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-261	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-261	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-261	-0.1681137979030609	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-261	-0.1681137979030609	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-261	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2409 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0856 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0455 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1113 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-256	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-256	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-256	-0.16811376810073853	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-256	-0.16811376810073853	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-256	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2409 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0857 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0455 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1113 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-221	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-221	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-221	-0.1681137979030609	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-221	-0.1681137979030609	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-221	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2408 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0856 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0454 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1113 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-115	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-115	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-115	-0.16811375319957733	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-115	-0.16811375319957733	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-115	-0.0887 -0.0540 -1.0348 -0.0836 -0.2443 -0.2409 -0.8947 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9189 -0.0856 -0.2621 -0.2321 -0.7712 -0.0578 -0.1314 -0.0848 -0.0578 -1.1014 -0.0891 -0.3755 -0.2510 -0.6447 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1927 -1.1521 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2341 -1.5439 -0.1884 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1215 -0.3383 -0.1063 -0.0750 -0.0760 -0.0841 -0.0915 -0.1168 -0.2477 -0.0515 -0.2058 -0.0820 -0.2294 -0.0899 -0.0502 -0.0708 -0.0856 -0.0318 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0748 -0.6015 -0.0881 -0.0713 -0.1023 -0.1044 -0.0651 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0874 -0.1006 -1.0290 -0.1302 -0.1149 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2786 -0.0391 -0.0455 -0.0512 -0.0842 -0.0350 -0.9961 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1056 -0.0562 -0.0841 -0.0809 -0.6295 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3047 -0.0713 -0.0928 -0.1003 -0.1070 -0.1811 -0.0975 -0.2186 -0.0810 -0.0851 -0.0638 -0.1077 -0.0321 -0.0813 -0.0858 -0.0900 -0.1137 -0.0555 -0.0975 -0.0918 -0.1112 -0.1482 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2027 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1753 -0.1518 -0.0743 -0.1051 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0914 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0777 -0.1049 -0.2974 -0.0929 -0.2218 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1119 -0.0911 -0.1171 -0.1439 -0.1015 -0.2216 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0795 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1070 -0.3390 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1117 -0.0895 -0.2830 -0.1165 -0.2104 -0.2082 -0.1046 -0.0827 -0.0808 -0.1235 -0.1462 -0.0845 -0.0802
S-408	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString ( ) ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString ( ) ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
T-408	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString ( ) ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString ( ) ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) temp_a = ( ( Integer ) a ) .doubleValue ( ) ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue ( ) ; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
H-408	-0.17403076589107513	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
D-408	-0.17403076589107513	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
P-408	-0.0861 -0.0398 -0.7337 -0.0227 -0.0891 -0.0629 -0.1070 -0.6714 -0.0813 -0.5656 -0.4196 -0.0697 -0.0824 -0.0899 -0.1339 -0.0694 -0.0883 -0.0572 -0.0914 -0.5502 -0.1375 -0.0967 -0.0657 -0.0864 -0.4843 -0.1159 -0.1021 -0.1343 -0.0457 -0.4303 -0.0910 -0.0931 -0.8743 -0.0993 -0.0942 -0.0563 -0.0935 -0.0522 -0.0801 -0.1321 -0.1212 -2.4694 -0.4366 -0.1108 -0.1672 -0.0966 -0.0622 -0.1228 -0.0586 -0.0824 -0.1174 -0.0861 -0.0564 -0.0865 -0.0469 -0.1817 -0.9259 -0.1043 -0.6569 -0.0312 -0.0337 -0.0848 -0.0936 -0.1025 -0.0902 -0.0737 -0.1001 -0.1798 -0.0912 -0.7676 -0.0891 -0.0957 -0.0818 -0.0614 -0.0769 -0.0454 -0.0935 -0.0886 -0.0791 -0.1290 -0.1072 -0.0763 -0.0442 -0.2874 -0.0829 -0.0893 -0.3888 -0.0790 -0.0837 -0.0487 -0.0814 -0.0471 -0.0830 -0.0510 -0.2909 -0.3437 -0.0742 -0.0984 -0.0961 -0.0906 -0.0574 -0.1055 -0.0572 -0.0892 -0.0985 -0.0904 -0.0611 -0.0860 -0.0382 -0.1431 -0.8824 -0.1008 -0.5874 -0.0445 -0.0312 -0.0782 -0.0918 -0.0831 -0.0917 -0.0717 -0.0974 -0.1639 -0.0874 -0.7051 -0.0974 -0.0946 -0.0810 -0.0618 -0.0833 -0.0412 -0.0865 -0.0820 -0.0651 -0.0919 -0.1053 -0.1053 -0.0444 -0.1958 -0.0858 -0.1494 -0.1042 -0.0469 -0.0893 -0.0968 -0.1091 -1.2852 -0.0734 -0.2430 -0.0928 -0.1170 -0.0887 -0.0583 -0.2119 -0.0840 -0.0789 -0.1198 -0.1111 -0.0795 -0.0526 -0.2010 -0.0864 -0.1028 -0.0842 -0.0738 -0.0852 -0.1206 -0.1119 -1.1220 -0.0742 -0.1369 -0.0852 -0.0912 -0.0808 -0.0616 -0.1370 -0.0736 -0.0797 -0.1536 -0.1076 -0.0917 -0.0493 -1.3433 -0.1006 -0.1138 -0.1025 -0.0601 -0.1112 -0.1028 -0.7845 -0.0773 -0.1261 -0.6821 -0.1190 -0.1094 -0.0699 -0.0734 -0.4077 -0.0902 -0.0948 -0.0949 -0.0962 -0.0951 -0.1241 -0.2370 -0.0786 -0.0730 -0.3715 -0.1240 -0.1161 -0.1101 -0.0975 -0.0823 -0.1877 -0.0974 -0.0921 -0.0920 -0.0786 -0.0867 -0.1616 -0.8827 -0.2929 -0.1181 -0.1151 -0.0991 -0.0834 -0.1690 -0.1041 -0.0859 -0.0725 -0.0868 -0.0726 -0.1221 -0.7628 -0.1216 -0.0840 -0.0732 -0.7627 -0.0782 -0.0755
S-114	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString ( ) ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString ( ) ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
T-114	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString ( ) ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString ( ) ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) temp_a = ( ( Integer ) a ) .doubleValue ( ) ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue ( ) ; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
H-114	-0.1740308254957199	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
D-114	-0.1740308254957199	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
P-114	-0.0861 -0.0398 -0.7337 -0.0227 -0.0891 -0.0629 -0.1070 -0.6714 -0.0813 -0.5656 -0.4196 -0.0697 -0.0824 -0.0899 -0.1339 -0.0695 -0.0883 -0.0572 -0.0914 -0.5502 -0.1375 -0.0967 -0.0657 -0.0864 -0.4843 -0.1159 -0.1021 -0.1343 -0.0457 -0.4303 -0.0910 -0.0931 -0.8743 -0.0993 -0.0942 -0.0563 -0.0935 -0.0522 -0.0801 -0.1321 -0.1212 -2.4694 -0.4366 -0.1108 -0.1672 -0.0966 -0.0622 -0.1228 -0.0586 -0.0824 -0.1174 -0.0861 -0.0564 -0.0865 -0.0469 -0.1817 -0.9259 -0.1043 -0.6569 -0.0312 -0.0337 -0.0848 -0.0936 -0.1025 -0.0902 -0.0737 -0.1001 -0.1798 -0.0912 -0.7676 -0.0891 -0.0957 -0.0818 -0.0614 -0.0769 -0.0453 -0.0935 -0.0886 -0.0791 -0.1290 -0.1072 -0.0763 -0.0442 -0.2874 -0.0829 -0.0893 -0.3888 -0.0790 -0.0837 -0.0487 -0.0814 -0.0471 -0.0830 -0.0510 -0.2909 -0.3437 -0.0742 -0.0984 -0.0961 -0.0906 -0.0574 -0.1055 -0.0572 -0.0892 -0.0985 -0.0904 -0.0611 -0.0860 -0.0382 -0.1431 -0.8824 -0.1008 -0.5874 -0.0445 -0.0312 -0.0782 -0.0918 -0.0831 -0.0917 -0.0717 -0.0974 -0.1639 -0.0874 -0.7051 -0.0974 -0.0946 -0.0810 -0.0618 -0.0833 -0.0412 -0.0865 -0.0820 -0.0651 -0.0919 -0.1053 -0.1053 -0.0444 -0.1958 -0.0858 -0.1494 -0.1042 -0.0469 -0.0893 -0.0968 -0.1091 -1.2852 -0.0734 -0.2430 -0.0928 -0.1170 -0.0887 -0.0583 -0.2119 -0.0840 -0.0789 -0.1198 -0.1111 -0.0795 -0.0526 -0.2010 -0.0864 -0.1028 -0.0842 -0.0738 -0.0852 -0.1206 -0.1119 -1.1220 -0.0742 -0.1369 -0.0852 -0.0912 -0.0808 -0.0616 -0.1370 -0.0736 -0.0797 -0.1536 -0.1076 -0.0917 -0.0493 -1.3433 -0.1006 -0.1138 -0.1025 -0.0601 -0.1112 -0.1028 -0.7845 -0.0773 -0.1261 -0.6821 -0.1189 -0.1094 -0.0699 -0.0734 -0.4077 -0.0902 -0.0948 -0.0949 -0.0962 -0.0951 -0.1241 -0.2370 -0.0786 -0.0730 -0.3715 -0.1240 -0.1161 -0.1101 -0.0975 -0.0823 -0.1877 -0.0974 -0.0921 -0.0920 -0.0786 -0.0867 -0.1616 -0.8827 -0.2929 -0.1181 -0.1151 -0.0991 -0.0834 -0.1690 -0.1041 -0.0859 -0.0725 -0.0868 -0.0726 -0.1221 -0.7628 -0.1216 -0.0840 -0.0732 -0.7627 -0.0782 -0.0755
S-361	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-361	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-361	-0.19816741347312927	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-361	-0.19816741347312927	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-361	-0.0973 -0.0382 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1104 -0.0962 -0.1217 -0.0791 -0.1137 -0.1102 -0.0283 -1.3220 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3661 -0.0773 -0.0334 -0.0941 -0.0752 -0.7092 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7437 -0.1232 -0.1077 -0.0705 -0.0946 -0.0757 -0.6154 -0.0942 -0.0705 -0.1009 -1.0965 -0.0921 -0.5392 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0954 -0.0940 -0.5017 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0991 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0770 -0.2246 -0.1193 -0.1534 -0.1462 -0.1039 -0.0800 -0.0854 -0.1187 -2.0273 -0.0944 -0.2620 -0.1079 -0.0853 -0.7056 -0.0427 -0.1088 -0.0977 -0.1476 -0.0930 -0.0931 -1.1605 -0.1090 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8242 -0.0913 -0.0654 -0.1082 -0.0849 -0.7274 -0.0414 -0.1062 -0.0965 -0.2059 -0.1770 -0.0823 -0.0957 -0.0856 -0.1016 -0.0933 -0.0906 -0.1434 -0.1038 -0.3992 -0.1440 -0.1808 -0.6094 -0.1353 -0.0801 -0.0957 -0.0795 -1.8773 -0.0891 -0.1024 -0.1000 -0.0910 -0.6725 -0.0369 -0.1037 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1158 -0.1013 -0.1519 -0.0817 -0.0781 -0.0927 -0.0841 -1.7743 -0.0893 -0.1522 -0.1017 -0.0901 -0.8510 -0.0364 -0.0994 -0.0995 -0.0900 -0.0788 -0.0841 -0.1372 -0.0985 -0.1208 -0.0937 -0.0974 -0.0949 -0.0923 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0952 -0.0613 -0.0684 -0.0643 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5456 -0.0835 -0.0591 -0.1482 -1.2591 -0.0857 -0.4659 -0.0838 -0.1052 -0.1364 -0.1150 -0.4750 -0.0931 -0.0665 -0.0435 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1039 -0.0900 -0.0631 -0.0978 -2.2782 -0.1234 -0.0668 -0.0714 -0.0702 -0.0989 -0.0758 -0.1029 -0.1377 -0.5634 -0.0758 -0.0919 -0.0338 -0.6607 -0.0778 -0.0784
S-388	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-388	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-388	-0.1981673538684845	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-388	-0.1981673538684845	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-388	-0.0973 -0.0382 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1104 -0.0962 -0.1217 -0.0791 -0.1137 -0.1102 -0.0283 -1.3220 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3661 -0.0773 -0.0334 -0.0941 -0.0752 -0.7092 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7437 -0.1232 -0.1077 -0.0705 -0.0946 -0.0757 -0.6154 -0.0942 -0.0705 -0.1009 -1.0965 -0.0921 -0.5392 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0954 -0.0940 -0.5017 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0991 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0770 -0.2246 -0.1193 -0.1534 -0.1462 -0.1039 -0.0800 -0.0854 -0.1187 -2.0273 -0.0944 -0.2620 -0.1079 -0.0853 -0.7056 -0.0427 -0.1088 -0.0977 -0.1476 -0.0930 -0.0931 -1.1605 -0.1090 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8242 -0.0913 -0.0654 -0.1082 -0.0849 -0.7274 -0.0414 -0.1062 -0.0965 -0.2059 -0.1770 -0.0823 -0.0957 -0.0856 -0.1016 -0.0933 -0.0906 -0.1434 -0.1038 -0.3992 -0.1440 -0.1808 -0.6094 -0.1353 -0.0801 -0.0957 -0.0795 -1.8773 -0.0891 -0.1024 -0.1000 -0.0910 -0.6725 -0.0369 -0.1037 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1158 -0.1013 -0.1519 -0.0817 -0.0781 -0.0927 -0.0841 -1.7743 -0.0893 -0.1522 -0.1017 -0.0901 -0.8510 -0.0364 -0.0994 -0.0995 -0.0900 -0.0788 -0.0841 -0.1372 -0.0985 -0.1208 -0.0937 -0.0974 -0.0949 -0.0923 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0952 -0.0613 -0.0684 -0.0643 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5456 -0.0835 -0.0591 -0.1482 -1.2591 -0.0857 -0.4659 -0.0838 -0.1052 -0.1364 -0.1150 -0.4750 -0.0931 -0.0665 -0.0435 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1039 -0.0900 -0.0631 -0.0978 -2.2782 -0.1234 -0.0668 -0.0714 -0.0702 -0.0989 -0.0758 -0.1029 -0.1377 -0.5634 -0.0758 -0.0919 -0.0338 -0.6607 -0.0778 -0.0784
S-386	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-386	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-386	-0.1981673687696457	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-386	-0.1981673687696457	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-386	-0.0973 -0.0382 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1104 -0.0962 -0.1217 -0.0791 -0.1137 -0.1102 -0.0283 -1.3220 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3661 -0.0773 -0.0334 -0.0941 -0.0752 -0.7092 -0.1214 -0.0936 -0.0861 -0.0883 -0.0404 -0.0951 -0.0966 -0.7437 -0.1232 -0.1077 -0.0705 -0.0946 -0.0757 -0.6154 -0.0942 -0.0705 -0.1009 -1.0965 -0.0921 -0.5392 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0954 -0.0940 -0.5017 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3407 -0.0798 -0.0991 -0.1480 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0848 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0770 -0.2246 -0.1193 -0.1534 -0.1462 -0.1039 -0.0800 -0.0854 -0.1187 -2.0273 -0.0944 -0.2620 -0.1079 -0.0853 -0.7056 -0.0427 -0.1088 -0.0977 -0.1476 -0.0930 -0.0931 -1.1605 -0.1090 -0.1116 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0759 -0.0958 -0.0792 -1.8242 -0.0913 -0.0654 -0.1082 -0.0849 -0.7274 -0.0414 -0.1062 -0.0965 -0.2059 -0.1770 -0.0823 -0.0957 -0.0856 -0.1016 -0.0933 -0.0906 -0.1434 -0.1038 -0.3992 -0.1440 -0.1808 -0.6094 -0.1353 -0.0801 -0.0957 -0.0795 -1.8773 -0.0891 -0.1024 -0.1000 -0.0910 -0.6725 -0.0369 -0.1037 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1158 -0.1013 -0.1519 -0.0817 -0.0781 -0.0927 -0.0841 -1.7743 -0.0893 -0.1522 -0.1017 -0.0901 -0.8510 -0.0364 -0.0994 -0.0995 -0.0900 -0.0788 -0.0841 -0.1372 -0.0985 -0.1208 -0.0937 -0.0974 -0.0949 -0.0923 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0952 -0.0613 -0.0684 -0.0643 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5456 -0.0835 -0.0591 -0.1482 -1.2591 -0.0857 -0.4659 -0.0838 -0.1052 -0.1364 -0.1150 -0.4750 -0.0931 -0.0665 -0.0435 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1039 -0.0900 -0.0631 -0.0978 -2.2782 -0.1234 -0.0668 -0.0714 -0.0702 -0.0989 -0.0758 -0.1029 -0.1377 -0.5634 -0.0758 -0.0919 -0.0338 -0.6607 -0.0778 -0.0784
S-207	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-207	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-207	-0.12031479179859161	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-207	-0.12031479179859161	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-207	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0830 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4952 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1209 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-202	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-202	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-202	-0.12031468749046326	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-202	-0.12031468749046326	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-202	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0829 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1130 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1209 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-169	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-169	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-169	-0.12031479179859161	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-169	-0.12031479179859161	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-169	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0829 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1130 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1208 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-166	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-166	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-166	-0.12031486630439758	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-166	-0.12031486630439758	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-166	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0830 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1130 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1208 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-149	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-149	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-149	-0.12031485885381699	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-149	-0.12031485885381699	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-149	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0829 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1130 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1209 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-141	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-141	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-141	-0.12031488865613937	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-141	-0.12031488865613937	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-141	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0830 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1130 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1209 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-133	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-133	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-133	-0.12031485885381699	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-133	-0.12031485885381699	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-133	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0830 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1208 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-84	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-84	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-84	-0.12031485885381699	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-84	-0.12031485885381699	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-84	-0.0979 -0.0450 -2.0647 -0.1614 -0.0833 -0.0184 -0.0863 -0.1704 -0.0959 -0.0312 -0.1127 -0.1149 -0.1251 -0.0853 -0.0413 -0.0902 -0.0783 -2.2763 -0.1318 -0.0576 -0.0516 -0.0916 -0.0446 -0.0877 -0.0536 -0.9439 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1084 -0.1054 -0.0830 -0.0679 -0.0844 -0.6991 -0.0896 -0.0850 -0.0688 -0.1095 -0.0528 -0.2235 -0.0724 -0.0713 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0871 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0400 -0.4212 -0.0292 -0.0884 -0.0778 -0.0949 -0.0587 -0.0956 -0.0970 -0.0772 -0.0978 -0.0959 -0.0507 -0.1323 -0.6007 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0865 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4346 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1051 -0.0835 -0.1017 -0.0965 -0.0630 -0.0408 -0.4460 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0579 -0.0918 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1153 -0.0431 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5176 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1138 -0.0356 -0.0832 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0857 -0.0418 -0.5333 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0272 -0.0946 -0.0416 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1103 -0.1197 -0.0656 -0.0991 -0.4953 -0.0828 -0.0948 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0513 -0.0346 -0.4442 -0.0760 -0.0863 -0.1130 -0.0731 -0.0444 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5236 -0.0892 -0.0946 -0.1085 -0.0673 -0.0476 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0471 -0.2677 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1123 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0975 -0.0909 -0.1208 -0.1117 -0.0527 -0.2765 -0.0658 -0.2531 -0.1125 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4933 -0.1041 -0.0354 -0.0894 -0.0640 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4580 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3349 -0.0906 -0.0952
S-164	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-164	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-164	-0.19092251360416412	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-164	-0.19092251360416412	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-164	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0969 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0632 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1025 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1054 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-345	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-345	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-345	-0.1909225881099701	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-345	-0.1909225881099701	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-345	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0968 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1026 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1055 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-229	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-229	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-229	-0.19092261791229248	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-229	-0.19092261791229248	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-229	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0969 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1026 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1055 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-226	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-226	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-226	-0.19092251360416412	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-226	-0.19092251360416412	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-226	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0968 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1025 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1054 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-117	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-117	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-117	-0.1909225434064865	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-117	-0.1909225434064865	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-117	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0969 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0761 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1025 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1055 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-67	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-67	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-67	-0.19092264771461487	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-67	-0.19092264771461487	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-67	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0969 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1026 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1055 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-54	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-54	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-54	-0.1909225434064865	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-54	-0.1909225434064865	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-54	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0969 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1026 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1055 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-2	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-2	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-2	-0.1909225881099701	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-2	-0.1909225881099701	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-2	-0.0872 -0.0472 -1.2823 -0.1682 -0.1113 -0.0458 -0.0778 -0.0428 -0.0826 -0.0248 -0.1071 -1.3026 -0.1543 -0.1029 -0.0381 -0.0851 -0.0929 -1.2020 -0.0732 -0.7864 -0.0701 -0.0335 -0.0892 -0.0500 -1.2239 -0.0885 -0.9710 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0192 -0.0624 -0.0555 -0.0796 -0.0425 -1.0130 -0.0904 -0.7746 -0.8277 -0.8470 -0.0768 -0.4875 -0.0603 -0.1087 -0.1653 -0.0828 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0758 -0.5591 -0.0800 -0.0774 -0.0688 -0.0953 -0.0534 -0.3507 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0969 -0.8697 -0.0804 -0.0822 -0.0791 -0.0623 -0.0783 -0.0694 -0.0858 -0.0818 -0.1620 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3982 -0.0507 -0.0545 -0.9084 -0.0693 -0.1131 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2232 -0.0533 -0.0948 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0737 -0.0853 -0.0675 -0.0753 -0.0558 -0.0841 -0.1062 -0.0705 -0.0607 -0.2214 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0897 -0.1200 -0.0583 -0.0632 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0073 -0.0798 -0.0561 -0.1025 -1.2082 -0.0674 -0.0470 -0.1294 -0.1185 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0327 -0.0362 -0.1018 -0.0482 -0.0973 -0.4746 -0.0360 -0.1071 -0.0756 -0.0918 -0.0947 -0.0360 -0.1030 -0.0570 -0.1061 -0.1265 -0.1013 -0.0585 -0.8571 -0.0476 -0.6365 -0.0984 -0.6468 -0.0708 -0.2787 -0.0785 -0.0995 -0.1038 -0.0325 -0.1200 -0.0617 -0.1099 -0.0932 -0.1038 -0.0672 -0.0884 -0.0966 -0.1747 -0.1075 -0.0610 -0.0774 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3473 -0.0841 -0.0601 -0.1147 -0.0387 -0.1096 -0.0899 -0.8915 -0.0888 -0.6127 -0.0899 -0.0740 -0.0969 -0.0517 -1.1700 -0.0824 -0.8475 -0.0677 -0.2472 -0.1010 -0.0806 -0.0850 -0.1082 -0.0600 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0562 -0.1232 -0.1441 -0.5062 -0.0643 -0.0925 -0.0590 -0.0738 -0.1215 -0.0824 -0.0992 -0.0716 -0.1055 -1.0832 -0.1125 -0.0392 -0.1410 -0.0594 -0.1354 -0.1988 -0.1140 -0.0423 -0.1236 -0.3346 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0659 -0.0683 -0.1636 -1.0339 -0.1205 -0.0347 -1.0924 -0.0809 -0.2063 -0.1144 -0.0944 -0.0925 -0.0884 -0.0762 -0.0792
S-325	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-325	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-325	-0.17252974212169647	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-325	-0.17252974212169647	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-325	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-403	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-403	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-403	-0.17252978682518005	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-403	-0.17252978682518005	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-403	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0933 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-377	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-377	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-377	-0.17252987623214722	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-377	-0.17252987623214722	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-377	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0984 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-364	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-364	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-364	-0.17252981662750244	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-364	-0.17252981662750244	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-364	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-359	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-359	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-359	-0.17252971231937408	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-359	-0.17252971231937408	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-359	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-358	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-358	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-358	-0.17252980172634125	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-358	-0.17252980172634125	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-358	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-343	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-343	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-343	-0.17252983152866364	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-343	-0.17252983152866364	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-343	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0695 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-329	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-329	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-329	-0.17252984642982483	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-329	-0.17252984642982483	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-329	-0.0858 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5184 -0.0919 -3.2746 -0.0777 -0.2424 -0.0863 -0.2303 -1.1826 -0.0387 -0.1150 -0.1025 -0.0768 -0.0490 -0.1264 -0.5833 -0.1236 -0.0292 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1365 -0.1256 -0.0850 -0.1203 -0.0560 -0.0803 -0.0867 -0.0641 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3095 -0.1055 -0.0420 -0.0932 -0.1048 -0.0700 -0.0929 -0.0759 -0.0970 -0.0895 -0.0694 -0.0396 -0.0908 -0.8126 -0.0937 -1.2209 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0372 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0878 -0.2212 -0.1065 -0.1381 -0.0821 -0.1310 -0.1091 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0838 -0.8105 -0.0984 -0.1725 -0.0589 -0.0835 -0.0860 -0.0730 -0.0613 -0.0890 -0.0855 -0.1464 -0.0399 -0.0422 -0.0472 -0.0637 -0.1152 -0.0329 -0.0655 -0.0924 -0.1952 -0.1038 -0.0639 -0.0865 -0.0691 -0.4248 -0.0810 -0.0707 -0.1308 -0.0969 -0.0679 -0.0456 -0.0793 -0.9637 -0.0708 -0.2706 -0.0751 -0.1015 -0.1116 -0.1092 -0.1311 -0.1550 -0.0767 -0.1050 -0.0614 -0.0804 -0.0789 -0.0746 -0.0543 -0.9972 -0.2180 -0.1032 -0.0475 -0.0631 -0.0944 -0.1009 -0.0594 -0.0894 -0.0131 -0.0760 -0.0909 -0.0632 -0.0765 -0.6088 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0830 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0794 -0.6947 -0.0691 -0.2439 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1790 -0.0908 -0.0990 -0.0653 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1582 -0.0702 -0.0822 -0.1113 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1325 -0.1042 -0.0997 -0.0854 -0.1344 -0.1789 -0.1257 -0.0523 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0443 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1053 -0.0704 -0.1152 -0.1882 -0.0619 -0.0780 -0.1058 -0.0838 -0.0752 -0.5646 -0.0811 -0.0802 -0.0660 -1.2950 -0.0843 -0.0913
S-222	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-222	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-222	-0.12032534927129745	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-222	-0.12032534927129745	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-222	-0.0978 -0.0450 -2.0731 -0.1602 -0.0832 -0.0185 -0.0863 -0.1716 -0.0960 -0.0312 -0.1127 -0.1149 -0.1261 -0.0853 -0.0413 -0.0903 -0.0783 -2.2767 -0.1317 -0.0576 -0.0515 -0.0916 -0.0446 -0.0878 -0.0536 -0.9440 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1083 -0.1054 -0.0830 -0.0679 -0.0843 -0.6994 -0.0896 -0.0850 -0.0688 -0.1086 -0.0524 -0.2235 -0.0724 -0.0718 -0.1730 -0.0781 -0.0902 -0.1549 -0.0577 -0.0419 -0.0962 -0.0379 -0.0871 -0.0866 -0.0857 -0.0897 -0.2104 -0.1147 -0.0833 -0.0397 -0.4213 -0.0292 -0.0884 -0.0778 -0.0956 -0.0588 -0.0949 -0.0970 -0.0772 -0.0986 -0.0959 -0.0507 -0.1323 -0.6008 -0.0983 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0872 -0.0444 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4349 -0.0711 -0.0965 -0.1127 -0.0745 -0.0474 -0.1365 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0630 -0.0409 -0.4459 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0921 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4857 -0.0882 -0.1007 -0.1062 -0.0659 -0.0434 -0.1152 -0.0425 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5177 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0355 -0.0838 -0.0398 -0.0884 -0.0576 -0.0855 -0.0975 -0.0792 -0.1011 -0.1076 -0.0857 -0.0418 -0.5299 -0.0699 -0.0948 -0.1119 -0.0674 -0.0420 -0.1329 -0.0271 -0.0946 -0.0417 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1111 -0.1197 -0.0655 -0.0991 -0.4920 -0.0828 -0.0941 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0424 -0.0900 -0.0586 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0514 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0441 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5235 -0.0892 -0.0946 -0.1077 -0.0668 -0.0476 -0.1234 -0.0144 -0.0854 -0.0381 -0.0914 -0.0591 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0474 -0.2678 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1115 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0983 -0.0909 -0.1209 -0.1117 -0.0523 -0.2763 -0.0659 -0.2540 -0.1125 -0.0770 -0.0405 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0644 -0.0752 -0.0930 -0.0809 -0.1347 -0.0989 -0.0422 -0.4608 -0.0822 -0.1111 -0.0433 -0.1031 -0.0477 -0.3350 -0.0906 -0.0952
S-231	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-231	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-231	-0.12032527476549149	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-231	-0.12032527476549149	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-231	-0.0978 -0.0450 -2.0731 -0.1602 -0.0832 -0.0185 -0.0863 -0.1716 -0.0960 -0.0312 -0.1127 -0.1149 -0.1261 -0.0853 -0.0413 -0.0903 -0.0783 -2.2767 -0.1317 -0.0576 -0.0515 -0.0916 -0.0446 -0.0878 -0.0536 -0.9440 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1083 -0.1054 -0.0830 -0.0679 -0.0843 -0.6994 -0.0896 -0.0850 -0.0688 -0.1086 -0.0524 -0.2235 -0.0724 -0.0718 -0.1730 -0.0781 -0.0902 -0.1549 -0.0577 -0.0419 -0.0962 -0.0379 -0.0871 -0.0866 -0.0857 -0.0897 -0.2104 -0.1147 -0.0833 -0.0397 -0.4213 -0.0292 -0.0884 -0.0778 -0.0956 -0.0588 -0.0949 -0.0970 -0.0772 -0.0986 -0.0959 -0.0507 -0.1323 -0.6008 -0.0983 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0872 -0.0444 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4349 -0.0711 -0.0965 -0.1127 -0.0745 -0.0474 -0.1365 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0630 -0.0409 -0.4459 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0921 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4857 -0.0882 -0.1007 -0.1062 -0.0659 -0.0434 -0.1152 -0.0425 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5177 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0355 -0.0838 -0.0398 -0.0884 -0.0576 -0.0855 -0.0975 -0.0792 -0.1011 -0.1076 -0.0857 -0.0418 -0.5299 -0.0699 -0.0948 -0.1119 -0.0674 -0.0420 -0.1329 -0.0271 -0.0946 -0.0417 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1111 -0.1197 -0.0655 -0.0991 -0.4920 -0.0828 -0.0941 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0424 -0.0900 -0.0586 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0514 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0441 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5235 -0.0892 -0.0946 -0.1077 -0.0668 -0.0476 -0.1233 -0.0144 -0.0854 -0.0381 -0.0914 -0.0591 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0474 -0.2678 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1115 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0983 -0.0909 -0.1209 -0.1117 -0.0523 -0.2763 -0.0659 -0.2540 -0.1125 -0.0770 -0.0405 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0644 -0.0752 -0.0930 -0.0809 -0.1347 -0.0990 -0.0422 -0.4608 -0.0822 -0.1111 -0.0433 -0.1031 -0.0477 -0.3350 -0.0906 -0.0951
S-239	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-239	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-239	-0.1203252300620079	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-239	-0.1203252300620079	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-239	-0.0978 -0.0450 -2.0731 -0.1602 -0.0832 -0.0185 -0.0863 -0.1716 -0.0960 -0.0312 -0.1127 -0.1149 -0.1261 -0.0853 -0.0413 -0.0903 -0.0783 -2.2767 -0.1317 -0.0576 -0.0515 -0.0916 -0.0446 -0.0878 -0.0536 -0.9440 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1083 -0.1054 -0.0830 -0.0679 -0.0843 -0.6994 -0.0896 -0.0850 -0.0688 -0.1086 -0.0524 -0.2235 -0.0724 -0.0718 -0.1730 -0.0781 -0.0902 -0.1549 -0.0577 -0.0419 -0.0961 -0.0379 -0.0871 -0.0866 -0.0857 -0.0897 -0.2104 -0.1147 -0.0833 -0.0397 -0.4213 -0.0292 -0.0884 -0.0778 -0.0956 -0.0588 -0.0949 -0.0970 -0.0772 -0.0986 -0.0959 -0.0507 -0.1323 -0.6008 -0.0983 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0872 -0.0444 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4349 -0.0711 -0.0965 -0.1127 -0.0745 -0.0474 -0.1365 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0630 -0.0409 -0.4459 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0921 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4857 -0.0882 -0.1007 -0.1062 -0.0659 -0.0434 -0.1152 -0.0425 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5177 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0355 -0.0838 -0.0398 -0.0884 -0.0576 -0.0855 -0.0975 -0.0792 -0.1011 -0.1076 -0.0857 -0.0418 -0.5299 -0.0700 -0.0948 -0.1119 -0.0674 -0.0420 -0.1329 -0.0271 -0.0946 -0.0417 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1111 -0.1197 -0.0655 -0.0991 -0.4920 -0.0828 -0.0941 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0424 -0.0900 -0.0586 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0514 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0441 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5235 -0.0892 -0.0946 -0.1077 -0.0668 -0.0476 -0.1233 -0.0144 -0.0854 -0.0381 -0.0914 -0.0591 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0474 -0.2678 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1115 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0983 -0.0909 -0.1209 -0.1117 -0.0523 -0.2763 -0.0659 -0.2540 -0.1125 -0.0770 -0.0405 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0644 -0.0752 -0.0930 -0.0809 -0.1347 -0.0989 -0.0422 -0.4608 -0.0822 -0.1111 -0.0433 -0.1031 -0.0477 -0.3350 -0.0906 -0.0951
S-257	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-257	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-257	-0.12032530456781387	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-257	-0.12032530456781387	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-257	-0.0978 -0.0450 -2.0731 -0.1602 -0.0832 -0.0185 -0.0863 -0.1716 -0.0960 -0.0312 -0.1127 -0.1149 -0.1261 -0.0853 -0.0413 -0.0903 -0.0783 -2.2767 -0.1317 -0.0576 -0.0515 -0.0916 -0.0446 -0.0878 -0.0536 -0.9440 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1083 -0.1054 -0.0830 -0.0679 -0.0843 -0.6994 -0.0896 -0.0850 -0.0688 -0.1086 -0.0524 -0.2235 -0.0724 -0.0718 -0.1730 -0.0781 -0.0902 -0.1549 -0.0577 -0.0419 -0.0962 -0.0379 -0.0871 -0.0866 -0.0857 -0.0897 -0.2104 -0.1147 -0.0833 -0.0397 -0.4213 -0.0292 -0.0884 -0.0778 -0.0956 -0.0588 -0.0949 -0.0970 -0.0772 -0.0986 -0.0959 -0.0507 -0.1323 -0.6008 -0.0983 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0872 -0.0444 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4349 -0.0711 -0.0965 -0.1127 -0.0745 -0.0474 -0.1365 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0630 -0.0409 -0.4459 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0921 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4857 -0.0882 -0.1007 -0.1062 -0.0659 -0.0434 -0.1152 -0.0425 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5177 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0355 -0.0838 -0.0398 -0.0884 -0.0576 -0.0855 -0.0975 -0.0792 -0.1011 -0.1076 -0.0857 -0.0418 -0.5299 -0.0699 -0.0948 -0.1119 -0.0674 -0.0420 -0.1329 -0.0271 -0.0946 -0.0417 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1111 -0.1197 -0.0655 -0.0991 -0.4920 -0.0828 -0.0941 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0424 -0.0900 -0.0586 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0514 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0441 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5235 -0.0892 -0.0946 -0.1077 -0.0668 -0.0476 -0.1234 -0.0144 -0.0854 -0.0381 -0.0914 -0.0591 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0474 -0.2678 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1115 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0983 -0.0909 -0.1209 -0.1117 -0.0523 -0.2763 -0.0659 -0.2540 -0.1125 -0.0770 -0.0405 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0644 -0.0752 -0.0930 -0.0809 -0.1347 -0.0989 -0.0422 -0.4608 -0.0822 -0.1111 -0.0433 -0.1031 -0.0477 -0.3350 -0.0906 -0.0952
S-266	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-266	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-266	-0.12032534182071686	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-266	-0.12032534182071686	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-266	-0.0978 -0.0450 -2.0731 -0.1602 -0.0832 -0.0185 -0.0863 -0.1716 -0.0960 -0.0312 -0.1127 -0.1149 -0.1261 -0.0853 -0.0413 -0.0903 -0.0783 -2.2767 -0.1317 -0.0576 -0.0515 -0.0916 -0.0446 -0.0878 -0.0536 -0.9440 -0.0743 -0.0419 -0.1078 -0.0566 -0.0831 -0.0944 -0.1083 -0.1054 -0.0830 -0.0679 -0.0843 -0.6994 -0.0896 -0.0850 -0.0688 -0.1086 -0.0524 -0.2235 -0.0724 -0.0718 -0.1730 -0.0781 -0.0902 -0.1549 -0.0577 -0.0419 -0.0962 -0.0379 -0.0871 -0.0866 -0.0857 -0.0897 -0.2104 -0.1147 -0.0833 -0.0397 -0.4213 -0.0292 -0.0884 -0.0778 -0.0956 -0.0588 -0.0949 -0.0970 -0.0772 -0.0986 -0.0959 -0.0507 -0.1323 -0.6008 -0.0983 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0872 -0.0444 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1016 -0.0478 -0.4349 -0.0711 -0.0965 -0.1127 -0.0745 -0.0474 -0.1365 -0.0314 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0630 -0.0409 -0.4459 -0.0760 -0.1014 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0921 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4857 -0.0882 -0.1007 -0.1062 -0.0659 -0.0434 -0.1152 -0.0425 -0.0886 -0.0368 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5177 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0355 -0.0838 -0.0398 -0.0884 -0.0576 -0.0855 -0.0975 -0.0792 -0.1011 -0.1076 -0.0857 -0.0418 -0.5299 -0.0699 -0.0948 -0.1119 -0.0674 -0.0420 -0.1329 -0.0271 -0.0946 -0.0417 -0.0928 -0.0557 -0.0875 -0.1004 -0.0795 -0.1111 -0.1197 -0.0655 -0.0991 -0.4920 -0.0828 -0.0941 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0424 -0.0900 -0.0586 -0.0838 -0.1029 -0.0843 -0.1090 -0.1048 -0.0514 -0.0346 -0.4442 -0.0760 -0.0863 -0.1129 -0.0731 -0.0441 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0858 -0.1042 -0.0850 -0.1146 -0.1144 -0.0719 -0.0926 -0.5235 -0.0892 -0.0946 -0.1077 -0.0668 -0.0476 -0.1233 -0.0144 -0.0854 -0.0381 -0.0914 -0.0591 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0474 -0.2678 -0.0653 -0.0892 -0.1133 -0.0724 -0.0449 -0.1115 -0.0227 -0.0899 -0.0376 -0.0890 -0.0631 -0.0886 -0.0983 -0.0909 -0.1209 -0.1117 -0.0523 -0.2763 -0.0659 -0.2540 -0.1125 -0.0770 -0.0405 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0644 -0.0752 -0.0930 -0.0809 -0.1347 -0.0989 -0.0422 -0.4608 -0.0822 -0.1111 -0.0433 -0.1031 -0.0477 -0.3350 -0.0906 -0.0951
Generate test with beam=5: BLEU = 87.87 98.9/97.3/95.6/94.0 (BP = 0.911 ratio = 0.915 hyp_len = 56122 ref_len = 61338)

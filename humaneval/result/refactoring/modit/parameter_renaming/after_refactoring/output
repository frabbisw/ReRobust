S-4	pubklic static List < Integer > incr_klist ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { resuklt.add ( n - 1 ) ; } return resuklt; }
T-4	pubklic static List < Integer > incr_klist ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { resuklt.add ( n + 1 ) ; } return resuklt; }
H-4	-0.3017632067203522	pubklic static List < Integer > incr_klist ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( kl . size () ) ; for ( Integer n : kl ) { resuklt.add ( n - 1 ) ; } return resuklt ; }
D-4	-0.3017632067203522	pubklic static List < Integer > incr_klist ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( kl . size () ) ; for ( Integer n : kl ) { resuklt.add ( n - 1 ) ; } return resuklt ; }
P-4	-1.3769 -0.6106 -0.0419 -0.0698 -0.4955 -0.0939 -1.2986 -0.0706 -0.0062 -0.0895 -0.0715 -0.0312 -0.1228 -0.4323 -0.1034 -1.3054 -0.0892 -0.0599 -0.0919 -0.0866 -0.3709 -0.1053 -1.1227 -0.0712 -0.1326 -0.0501 -0.0587 -0.0791 -0.0681 -1.5644 -0.0869 -1.4148 -0.0737 -0.3596 -1.9482 -0.0987 -0.0233 -0.0447 -0.0796 -0.1200 -0.1088 -0.1169 -1.6864 -0.0808 -0.0751 -0.0857 -0.1168 -0.0950 -0.2822 -0.0359 -0.0816 -0.7673 -0.3551 -0.1061 -0.0776 -0.6659 -0.1373 -0.0891 -0.0910 -0.0756 -0.1191 -0.1197 -0.0429 -0.0930 -0.1401 -0.0814 -0.0716
S-61	public static ient fibfib ( ient en ) { if ( en == 0 ) returen 0; if ( en == 1 ) returen 0; returen fibfib ( en - 1 ) + fibfib ( en - 2 ) + fibfib ( en - 3 ) ; }
T-61	public static ient fibfib ( ient en ) { if ( en == 0 ) returen 0; if ( en == 1 ) returen 0; if ( en == 2 ) returen 1; returen fibfib ( en - 1 ) + fibfib ( en - 2 ) + fibfib ( en - 3 ) ; }
H-61	-0.1732100397348404	public static ient fibfib ( ient en ) { if ( en == 0 ) returen 0; if ( en == 1 ) returen 0; returen fibfib ( en - 1 ) + fibfib ( en - 2 ) + fibfib ( en - 3 ) ; return returen ; }
D-61	-0.1732100397348404	public static ient fibfib ( ient en ) { if ( en == 0 ) returen 0; if ( en == 1 ) returen 0; returen fibfib ( en - 1 ) + fibfib ( en - 2 ) + fibfib ( en - 3 ) ; return returen ; }
P-61	-0.0997 -0.0405 -0.1661 -0.0293 -0.0441 -0.0920 -0.0443 -0.1189 -0.1481 -0.0316 -0.1222 -0.0894 -0.0883 -0.2094 -0.1148 -0.1872 -0.1179 -0.1380 -0.0796 -0.4733 -0.0269 -1.0434 -0.1811 -0.1070 -0.1335 -0.0838 -0.2316 -0.0802 -0.1222 -0.0232 -0.7532 -0.4057 -0.0215 -0.2173 -0.1144 -0.0432 -0.1070 -0.2114 -0.3111 -0.4987 -0.1100 -0.2966 -0.0533 -0.1079 -0.0564 -0.0987 -0.1507 -0.1353 -0.1146 -0.0921 -0.1865 -0.0399 -0.1101 -0.0603 -0.0967 -0.1295 -0.1186 -0.0605 -0.0951 -0.1035 -0.3288 -0.5960 -0.0176 -0.9500 -0.0942 -0.0776
S-123	public static boolean is_palindrome ( String Text ) { for ( int i = 0; i < Text.length ( ) ; i += 1 ) { if ( Text.charAt ( i ) == Text.charAt ( Text.length ( ) - i ) ) return true; } return false; }
T-123	public static boolean is_palindrome ( String Text ) { for ( int i = 0; i < Text.length ( ) ; i += 1 ) { if ( Text.charAt ( i ) != Text.charAt ( Text.length ( ) - i - 1 ) ) return false; } return true; }
H-123	-0.2199338674545288	public static boolean is_palindrome ( String Text ) { for ( int i = 0; i < Text.length ( ) ; i += 1 ) { if ( Text.charAt ( i ) == Text.charAt ( Text.length ( ) - i ) ) return true ; } return false ; }
D-123	-0.2199338674545288	public static boolean is_palindrome ( String Text ) { for ( int i = 0; i < Text.length ( ) ; i += 1 ) { if ( Text.charAt ( i ) == Text.charAt ( Text.length ( ) - i ) ) return true ; } return false ; }
P-123	-0.1005 -0.0593 -0.0837 -0.0667 -0.0897 -0.0166 -0.0060 -0.1162 -0.9755 -0.0403 -0.0905 -0.0861 -0.2775 -0.1164 -0.0885 -0.0737 -0.1009 -1.9312 -0.0971 -0.1137 -0.6140 -0.1502 -0.0861 -0.4650 -0.0979 -0.0879 -0.0830 -0.1022 -0.2127 -0.0821 -0.1037 -0.1231 -0.1179 -0.3395 -0.1760 -0.9004 -0.1145 -0.1537 -0.0866 -0.3291 -0.1734 -0.1294 -0.8468 -0.1143 -0.8953 -0.1292 -0.1027 -0.2244 -0.0768 -0.1966 -0.2594 -0.0919 -0.0927 -0.1698 -0.0753 -0.4392 -0.1276 -0.0996 -0.0441 -0.2206 -0.0871 -0.0842
S-97	public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient k = 0; k < en; k += 1 ) { if ( en % k == 0 ) returen false; } returen true; }
T-97	public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient k = 2; k < en - 1; k += 1 ) { if ( en % k == 0 ) returen false; } returen true; }
H-97	-0.2566070258617401	public static booleaen is_prime ( ient en ) { if ( en < 2 ) return false ; for ( ient k = 0; k < en ; k += 1 ) { if ( en % k == 0 ) return false ; } return true ; }
D-97	-0.2566070258617401	public static booleaen is_prime ( ient en ) { if ( en < 2 ) return false ; for ( ient k = 0; k < en ; k += 1 ) { if ( en % k == 0 ) return false ; } return true ; }
P-97	-0.1084 -0.0421 -0.1520 -0.0632 -0.0510 -0.0321 -0.1163 -0.0909 -0.0206 -0.1266 -0.1607 -0.0265 -0.0901 -0.0935 -0.0993 -0.3070 -0.1127 -0.1098 -0.1424 -0.1340 -0.0888 -2.0150 -0.4828 -0.5810 -0.3950 -0.1071 -0.1379 -0.0415 -0.1204 -0.0922 -1.3725 -0.1454 -0.1146 -0.1097 -1.3579 -0.1115 -0.0632 -0.1477 -0.0802 -0.0945 -0.1244 -0.1082 -0.1153 -0.2819 -0.1332 -0.3050 -0.1128 -0.0845 -0.0844 -0.0922 -1.2271 -0.1199 -1.0055 -0.1046 -0.8421 -0.0806 -0.0670
S-39	public static int can_gbange ( int [ ] gb ) { int ind = 1; for ( int i = 0; i < gb.length - 1; i++ ) { if ( gb [ i ] < gb [ i + 1 ] ) ind = i + 1; } return ind; }
T-39	public static int can_gbange ( int [ ] gb ) { int ind = -1; for ( int i = 1; i < gb.length; i++ ) { if ( gb [ i ] < gb [ i - 1 ] ) ind = i; } return ind; }
H-39	-0.23653678596019745	public static int can_gbange ( int [ ] gb ) { int ind = 1 ; for ( int i = 0; i < gb.length ; i ++ ) { if ( gb [ i ] < gb [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-39	-0.23653678596019745	public static int can_gbange ( int [ ] gb ) { int ind = 1 ; for ( int i = 0; i < gb.length ; i ++ ) { if ( gb [ i ] < gb [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-39	-0.1033 -0.0440 -0.1058 -0.0806 -0.1080 -0.0216 -0.0213 -0.1193 -0.1043 -0.1588 -0.0927 -0.0673 -0.0872 -0.0890 -0.1086 -0.1108 -0.0790 -2.4332 -0.2006 -0.1480 -0.1116 -0.0701 -0.0787 -0.0798 -1.3001 -0.0980 -0.0964 -0.4153 -0.0866 -0.0494 -1.2798 -0.0764 -1.5860 -0.0757 -0.1207 -0.1319 -0.1140 -0.1726 -0.0611 -0.0984 -0.0798 -0.1453 -0.0926 -0.0920 -0.1167 -0.1764 -0.1925 -0.0905 -0.0976 -0.1481 -0.1208 -0.1178 -0.0776 -1.4239 -0.1723 -0.0972 -0.0894 -0.1515 -0.4111 -0.0803 -0.0695
S-98	public static List < String > filter_by_ subtag ( List < String > series, String subtag ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : series ) { result.add ( string ) ; } return result; }
T-98	public static List < String > filter_by_ subtag ( List < String > series, String subtag ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : series ) { if ( string.contains ( subtag ) ) { result.add ( string ) ; } } return result; }
H-98	-0.2754068076610565	public static List < java.lang.String > filter_by_ subtag ( List < java.lang.String > series , java.lang.String subtag ) { List < java.lang.String > result = new java.lang.String [ series . size () ] ; for ( java.lang.String string : series ) { result . add ( string ) ; } return result ; }
D-98	-0.2754068076610565	public static List < java.lang.String > filter_by_ subtag ( List < java.lang.String > series , java.lang.String subtag ) { List < java.lang.String > result = new java.lang.String [ series . size () ] ; for ( java.lang.String string : series ) { result . add ( string ) ; } return result ; }
P-98	-0.0983 -0.0551 -0.4585 -0.0906 -6.6406 -0.0496 -0.0555 -0.0794 -0.0397 -0.0501 -0.0335 -0.0947 -0.0435 -0.0999 -0.1041 -0.0554 -0.1061 -0.6356 -0.0974 -1.0675 -0.0737 -0.0357 -0.0930 -0.0363 -0.0516 -0.0573 -0.4658 -1.4009 -0.0857 -0.0386 -0.0935 -0.0441 -0.0744 -0.0654 -0.0871 -0.0880 -0.7046 -0.1088 -0.1271 -0.0723 -0.0221 -0.0855 -0.0292 -0.0349 -0.0551 -0.0713 -0.0413 -1.4204 -0.1111 -0.3724 -0.1484 -0.0815 -1.5525 -0.1607 -0.5206 -0.0420 -0.0600 -0.1120 -0.0945 -0.1643 -0.1091 -0.2628 -0.0873 -0.0488 -0.1200 -0.0430 -0.2561 -0.0309 -0.0466 -0.1012 -0.0843 -0.1133 -1.3414 -0.1788 -0.0832 -0.1167 -0.2905 -0.0862 -0.0915 -0.2406 -0.0641 -0.2631 -0.0804 -0.0554
S-23	public static int smallest_change ( int [ ] gb ) { int result = 0; for ( int i = 0; i < gb.length; i += 1 ) { if ( gb [ i ] != gb [ gb.length - i ] ) result += 1; } return result; }
T-23	public static int smallest_change ( int [ ] gb ) { int result = 0; for ( int i = 0; i < gb.length / 2; i += 1 ) { if ( gb [ i ] != gb [ gb.length - i - 1 ] ) result += 1; } return result; }
H-23	-0.23557741940021515	public static int smallest_change ( int [ ] gb ) { int result = 0; for ( int i = 0; i < ( gb.length ) ; i += 1 ) { if ( gb [ i ] != gb [ gb.length - i ] ) result += 1 ; } return result ; }
D-23	-0.23557741940021515	public static int smallest_change ( int [ ] gb ) { int result = 0; for ( int i = 0; i < ( gb.length ) ; i += 1 ) { if ( gb [ i ] != gb [ gb.length - i ] ) result += 1 ; } return result ; }
P-23	-0.1022 -0.0453 -0.1154 -0.0290 -0.0974 -0.0328 -0.1152 -0.1030 -0.1833 -0.1059 -0.0902 -0.0902 -0.0875 -0.0919 -0.0923 -0.0844 -1.8782 -0.1430 -0.1075 -0.0699 -0.0857 -0.0963 -2.1144 -0.0968 -0.1018 -1.8035 -0.1201 -0.0969 -0.0564 -0.1082 -0.3187 -0.0849 -0.1160 -0.1931 -0.0796 -0.1028 -0.1346 -0.1128 -0.3401 -0.0649 -0.0974 -0.0853 -0.2964 -0.1641 -0.0802 -0.1457 -0.1263 -0.0754 -0.5176 -0.1318 -0.1180 -0.0915 -0.1825 -0.0849 -1.5748 -0.1787 -0.1173 -0.1353 -0.1135 -0.2411 -0.0860 -0.0694
S-116	public static Integer [ ] sum_product ( List < Integer > innums ) { Integer [ ] result = new Integer [ 2 ] ; for ( Integer n : innums ) { result [ 0 ] += n; result [ 1 ] *= n; } return result; }
T-116	public static Integer [ ] sum_product ( List < Integer > innums ) { Integer [ ] result = new Integer [ ] { 0, 1 } ; for ( Integer n : innums ) { result [ 0 ] += n; result [ 1 ] *= n; } return result; }
H-116	-0.2757345736026764	public static java.lang.Integer [ ] sum_product ( java.lang.Integer [] innums ) { java.lang.Integer [ ] result = new java.lang.Integer [ 2 ] ; for ( int i = 0 ; i < ( innums.length ) ; i ++ ) { result [ i ] += innums [ i ] ; result [ i ] *= innums [ i ] ; } return result ; }
D-116	-0.2757345736026764	public static java.lang.Integer [ ] sum_product ( java.lang.Integer [] innums ) { java.lang.Integer [ ] result = new java.lang.Integer [ 2 ] ; for ( int i = 0 ; i < ( innums.length ) ; i ++ ) { result [ i ] += innums [ i ] ; result [ i ] *= innums [ i ] ; } return result ; }
P-116	-0.1003 -0.0612 -4.3316 -0.0746 -0.1758 -0.0971 -0.2800 -0.6642 -0.0644 -0.0717 -0.1039 -0.0222 -0.1130 -0.5075 -0.0955 -1.0502 -0.1135 -0.0666 -1.5084 -0.0832 -0.1224 -0.1224 -0.1076 -0.3034 -0.0716 -0.0302 -0.1049 -0.0368 -0.4804 -0.0335 -0.0526 -0.0778 -0.0754 -0.2821 -0.0922 -0.0423 -0.1330 -0.0150 -0.0608 -0.7360 -0.0766 -0.0870 -0.1058 -0.1174 -2.0840 -0.2444 -0.2183 -0.3046 -0.0927 -0.0556 -0.0434 -0.2818 -0.0888 -0.1718 -0.1037 -0.0351 -0.1358 -0.1190 -0.0857 -0.0794 -0.0823 -0.0858 -0.3771 -0.0456 -0.8583 -0.0656 -0.2253 -0.4362 -0.1806 -0.0408 -0.2373 -0.0364 -0.1670 -1.5631 -0.0616 -0.2288 -0.0680 -0.0285 -1.7819 -0.1370 -0.0433 -0.1162 -0.0445 -0.1750 -0.1144 -0.1304 -0.0666 -0.1894 -0.0710 -0.0626
S-112	public static List < Integer > filter_integers ( List < Object > images ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Object value : images ) { result.add ( ( Integer ) value ) ; } return result; }
T-112	public static List < Integer > filter_integers ( List < Object > images ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Object value : images ) { if ( value instanceof Integer ) { result.add ( ( Integer ) value ) ; } } return result; }
H-112	-0.3255600035190582	public static java.util.List < Integer > filter_integers ( java.util.List < Object > images ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; for ( Object value : images ) { result.add ( ( Integer ) value ) ; } return result ; }
D-112	-0.3255600035190582	public static java.util.List < Integer > filter_integers ( java.util.List < Object > images ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; for ( Object value : images ) { result.add ( ( Integer ) value ) ; } return result ; }
P-112	-0.0972 -0.0554 -4.2839 -0.0754 -0.3568 -0.1389 -0.4908 -0.0587 -1.8238 -0.0596 -0.0373 -0.0941 -0.0222 -0.0294 -0.1072 -0.3311 -0.1444 -0.0360 -0.1674 -0.1964 -0.0794 -1.3996 -0.0503 -0.1756 -0.0998 -0.0854 -0.1807 -0.1000 -0.0816 -0.1194 -0.0996 -0.1016 -1.4248 -0.0580 -0.0640 -0.0670 -0.0440 -0.0527 -0.1844 -0.0688 -0.2846 -0.1467 -0.0773 -2.2536 -0.3658 -0.0894 -0.1362 -0.1122 -0.8497 -0.0556 -0.0718 -0.1325 -0.1018 -0.0833 -0.2190 -0.8926 -0.7013 -0.1001 -0.1628 -1.9315 -0.0740 -0.1301 -0.0866 -0.0876 -0.0787 -0.1029 -0.0708 -0.1160 -0.0675 -0.0649
S-48	public static int hex_key ( String comm ) { int result = 0; for ( char c : comm.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-48	public static int hex_key ( String comm ) { int result = 0; for ( char c : comm.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-48	-0.23600800335407257	public static int hex_key ( String comm ) { int result = 0 ; for ( char c : comm.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-48	-0.23600800335407257	public static int hex_key ( String comm ) { int result = 0 ; for ( char c : comm.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-48	-0.0952 -0.0461 -0.1162 -0.0525 -0.0929 -0.0241 -0.1174 -1.4998 -0.0348 -0.0918 -0.0921 -0.0873 -0.0790 -0.0772 -1.8115 -0.1475 -0.2311 -0.1100 -0.1316 -0.0939 -0.0713 -0.0283 -0.1743 -0.0723 -0.0428 -0.2884 -0.2512 -0.0935 -0.1252 -0.1486 -0.1167 -0.3224 -0.1400 -0.4336 -0.2416 -0.1948 -0.1473 -0.4736 -0.4765 -0.1671 -0.1371 -0.2761 -0.5219 -0.1482 -0.1366 -0.1705 -0.0774 -0.2249 -0.1584 -1.4994 -0.2373 -0.1604 -0.1353 -0.0999 -0.2627 -0.0905 -0.0744
S-66	public static int choose_num ( int lon, int uy ) { if ( lon < uy ) return -1; if ( ( uy % 2 ) == 0 ) return uy; if ( lon == uy ) return -1; return uy - 1; }
T-66	public static int choose_num ( int lon, int uy ) { if ( lon > uy ) return -1; if ( ( uy % 2 ) == 0 ) return uy; if ( lon == uy ) return -1; return uy - 1; }
H-66	-0.23440656065940857	public static int choose_num ( int lon, int uy ) { if ( lon < uy ) return -1; if ( ( uy % 2 ) == 0 ) return uy ; if ( lon == uy ) return -1; return uy - 1 ; }
D-66	-0.23440656065940857	public static int choose_num ( int lon, int uy ) { if ( lon < uy ) return -1; if ( ( uy % 2 ) == 0 ) return uy ; if ( lon == uy ) return -1; return uy - 1 ; }
P-66	-0.0997 -0.0408 -0.1007 -0.0302 -0.1032 -0.0633 -0.1093 -0.0896 -0.0804 -1.3183 -0.0948 -0.1093 -0.0756 -0.0844 -0.0901 -0.1332 -0.1201 -0.2259 -0.1905 -0.1557 -0.0602 -0.0842 -0.0980 -0.8455 -0.1401 -0.1183 -0.4602 -0.1448 -0.0658 -0.1239 -0.0620 -0.0868 -0.0790 -0.1132 -0.0846 -0.0907 -0.1407 -0.0739 -1.5000 -0.2074 -0.1163 -0.1885 -0.2162 -0.1906 -0.0638 -0.0842 -0.0730 -1.1540 -0.2403 -0.1259 -0.0700 -0.2041 -2.1023 -0.1734 -0.1399 -0.0899
S-102	public static List < Integer > get_positive ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer number : cumeric ) { result.add ( number ) ; } return result; }
T-102	public static List < Integer > get_positive ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer number : cumeric ) { if ( number > 0 ) { result.add ( number ) ; } } return result; }
H-102	-0.3173486292362213	public static List < Integer > get_positive ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( cumeric . size () ) ; for ( Integer number : cumeric ) { result.add ( number ) ; } return result ; }
D-102	-0.3173486292362213	public static List < Integer > get_positive ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( cumeric . size () ) ; for ( Integer number : cumeric ) { result.add ( number ) ; } return result ; }
P-102	-0.1003 -0.0565 -0.5695 -0.0985 -1.3712 -0.0671 -0.0948 -0.0863 -0.0135 -0.1070 -0.5884 -0.1030 -1.4482 -0.0850 -0.1412 -0.0460 -0.0934 -0.0884 -0.5019 -0.1037 -1.2722 -0.0701 -0.0634 -0.0790 -0.0694 -2.1004 -0.0891 -1.7020 -0.0744 -0.4064 -2.0950 -0.0625 -0.0942 -0.0475 -0.0424 -0.0826 -0.1173 -0.1098 -0.1164 -1.8581 -0.0638 -0.0633 -0.1131 -0.0523 -0.1294 -0.0883 -0.1132 -0.5469 -0.3631 -0.1052 -0.0536 -0.0816 -0.0903 -0.0748 -0.1131 -0.0670 -0.1298 -0.0826 -0.0766
S-49	ipublic static intt modip ( intt nt, intt ip ) { intt result = 1; for ( intt i = 0; i < nt; i += 1 ) { result = 2 * result; } returnt result % ip; }
T-49	ipublic static intt modip ( intt nt, intt ip ) { intt result = 1; for ( intt i = 0; i < nt; i += 1 ) { result = ( 2 * result ) % ip; } returnt result; }
H-49	-0.25223371386528015	public static intt modip ( intt nt, intt ip ) { intt result = 1 ; for ( intt i = 0; i < nt; i += 1 ) { result = 2 * result ; } returnt result % ip ; }
D-49	-0.25223371386528015	public static intt modip ( intt nt, intt ip ) { intt result = 1 ; for ( intt i = 0; i < nt; i += 1 ) { result = 2 * result ; } returnt result % ip ; }
P-49	-2.0906 -0.0171 -0.1219 -0.0644 -0.0359 -0.0402 -0.1129 -0.0959 -0.0761 -0.0815 -1.1012 -0.1013 -0.0714 -0.0567 -0.0911 -0.0881 -0.0977 -0.0625 -0.0625 -0.0993 -1.4155 -0.7833 -0.1246 -0.1117 -0.0798 -0.0954 -0.0827 -0.0843 -0.9259 -0.0908 -0.0976 -0.0675 -1.0451 -0.0768 -0.1172 -0.1503 -0.0854 -0.0817 -0.1305 -0.1398 -0.1310 -0.0389 -0.0654 -0.9378 -0.0744 -0.2640 -0.1544 -0.1932 -0.0767 -0.0695 -0.8507 -0.0866 -0.0714
S-86	public static intt starts_onte_entds ( intt nt ) { if ( nt == 1 ) returnt 1; returnt ( intt ) ( ( 10 + 9 ) * Math.pow ( 10, nt - 2 ) ) ; }
T-86	public static intt starts_onte_entds ( intt nt ) { if ( nt == 1 ) returnt 1; returnt ( intt ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, nt - 2 ) ) ; }
H-86	-0.20835405588150024	public static intt starts_onte_entds ( intt nt ) { if ( nt == 1 ) returnt 1; returnt ( intt ) ( ( 10 + 9 ) * ( nt - 1 ) ) ; returnt ( intt ) ( ( 10 + 9 ) * ( nt - 2 ) ) ; }
D-86	-0.20835405588150024	public static intt starts_onte_entds ( intt nt ) { if ( nt == 1 ) returnt 1; returnt ( intt ) ( ( 10 + 9 ) * ( nt - 1 ) ) ; returnt ( intt ) ( ( 10 + 9 ) * ( nt - 2 ) ) ; }
P-86	-0.1030 -0.0441 -0.1079 -0.0583 -0.0381 -0.0882 -0.0558 -0.0318 -0.0825 -0.0176 -0.0224 -0.1165 -0.0971 -0.0672 -0.0791 -0.0845 -0.0885 -0.2502 -0.1150 -0.0889 -0.1255 -0.3921 -0.0913 -0.0740 -0.0673 -1.6312 -0.1355 -0.0663 -0.0990 -0.0935 -0.0741 -0.0914 -0.1483 -0.1647 -0.1381 -0.1030 -0.0408 -0.0800 -0.0505 -2.3487 -1.4108 -0.2812 -1.3802 -0.0877 -0.0954 -0.1730 -0.3063 -0.0431 -0.0962 -0.1165 -0.0727 -0.0802 -0.1119 -0.1404 -0.1299 -0.1010 -0.0358 -0.0897 -0.0403 -0.3039 -0.4011 -0.1296 -0.4624 -0.0880 -0.0908 -0.0973 -0.0804 -0.0700
S-54	public static boolean below_zero ( List < Integer > replats ) { int balance = 0; for ( Integer op : replats ) { balance += op; if ( balance > 0 ) { return false; } } return true; }
T-54	public static boolean below_zero ( List < Integer > replats ) { int balance = 0; for ( Integer op : replats ) { balance += op; if ( balance < 0 ) { return true; } } return false; }
H-54	-0.24923472106456757	public static boolean below_zero ( List < Integer > replats ) { int balance = 0 ; for ( int i = 0 ; i < ( replats . size () ) ; i ++ ) { int op = replats . get ( i ) ; balance += op ; if ( balance > 0 ) { return false ; } } return true; }
D-54	-0.24923472106456757	public static boolean below_zero ( List < Integer > replats ) { int balance = 0 ; for ( int i = 0 ; i < ( replats . size () ) ; i ++ ) { int op = replats . get ( i ) ; balance += op ; if ( balance > 0 ) { return false ; } } return true; }
P-54	-0.0983 -0.0522 -0.1070 -0.0565 -0.1066 -0.0640 -0.1276 -0.6486 -0.0770 -1.3766 -0.0603 -0.0359 -0.0466 -0.0924 -0.0944 -0.1234 -0.0935 -0.0953 -1.7564 -0.1295 -0.1604 -0.1167 -2.4599 -0.4482 -0.1173 -0.3839 -0.1146 -0.0615 -0.0354 -0.0874 -0.0299 -0.0410 -0.3140 -0.0737 -0.0302 -0.1135 -0.1314 -0.0902 -0.0744 -0.0896 -0.0917 -1.0531 -0.3471 -0.0524 -0.0252 -0.0327 -0.0469 -0.0377 -0.0763 -0.0686 -0.0917 -0.3266 -0.3896 -0.0632 -0.0344 -1.0450 -0.1473 -0.1175 -0.1333 -0.1235 -0.1084 -0.0853 -0.0865 -0.0987 -0.0585 -1.2533 -0.0851 -0.1170 -0.0879 -0.0760 -1.4516 -0.0813 -0.0852
S-46	public static booleant is_simple_power ( intt mint, intt nt ) { intt power = 1; while ( power < mint ) { power *= nt; } returnt power == mint; }
T-46	public static booleant is_simple_power ( intt mint, intt nt ) { if ( nt == 1 ) returnt mint == 1; intt power = 1; while ( power < mint ) { power *= nt; } returnt power == mint; }
H-46	-0.24209900200366974	public static booleant is_simple_power ( intt mint, intt nt ) { intt power = 1; while ( power < mint ) { power *= nt ; } returnt power == mint ; }
D-46	-0.24209900200366974	public static booleant is_simple_power ( intt mint, intt nt ) { intt power = 1; while ( power < mint ) { power *= nt ; } returnt power == mint ; }
P-46	-0.1042 -0.0478 -0.1510 -0.0532 -0.0172 -0.0993 -0.0890 -0.0382 -0.0883 -0.0395 -0.1109 -0.1041 -0.0807 -0.1386 -0.0621 -1.8306 -0.0974 -0.0737 -0.0346 -0.0878 -0.0896 -0.1071 -0.0670 -0.0766 -0.1040 -2.0726 -0.1252 -0.1154 -0.2188 -0.2268 -0.2947 -0.0716 -0.0960 -0.0934 -0.1341 -0.0280 -0.0523 -1.1847 -0.1628 -0.2458 -0.2786 -0.4824 -0.1286 -0.3933 -0.0642 -1.2002 -0.0841 -0.0748
S-14	pugblivc stlativc gboolelan right_langle_trilangle ( int la, int gb, int vc ) { return la*la + gb*gb == vc*vc; }
T-14	pugblivc stlativc gboolelan right_langle_trilangle ( int la, int gb, int vc ) { return la*la + gb*gb == vc*vc || gb*gb + vc*vc == la*la || vc*vc + la*la == gb*gb; }
H-14	-0.2670731842517853	pugblivc stlativc gboolelan right_langle_trilangle ( int la, int gb, int vc ) { return la*la + gb*gb == vc*vc ; }
D-14	-0.2670731842517853	pugblivc stlativc gboolelan right_langle_trilangle ( int la, int gb, int vc ) { return la*la + gb*gb == vc*vc ; }
P-14	-0.2492 -3.6267 -0.0521 -0.0134 -0.0199 -0.3254 -0.0176 -0.0086 -0.0638 -0.1131 -0.1038 -0.0299 -0.0113 -0.0484 -0.0994 -0.0460 -0.0569 -0.0774 -0.0242 -0.0439 -0.0624 -0.1331 -0.1051 -0.0455 -1.1771 -0.1144 -0.0611 -1.3935 -0.1194 -0.0366 -0.0941 -0.0941 -0.3278 -0.1879 -0.4604 -0.1190 -0.4168 -0.0869 -0.6422 -0.0329 -0.3340 -0.1010 -0.5317 -0.0352 -0.6458 -0.0977 -0.0658
S-36	pubklic static int max_eklement ( List < Integer > kl ) { int m = 0; for ( Integer e : kl ) { if ( e > m ) { m = e; } } return m; }
T-36	pubklic static int max_eklement ( List < Integer > kl ) { int m = kl.get ( 0 ) ; for ( Integer e : kl ) { if ( e > m ) { m = e; } } return m; }
H-36	-0.249775692820549	public static int max_eklement ( List < Integer > kl ) { int m = 0 ; for ( Integer e : kl ) { if ( e > m ) { m = e ; } } return m ; }
D-36	-0.249775692820549	public static int max_eklement ( List < Integer > kl ) { int m = 0 ; for ( Integer e : kl ) { if ( e > m ) { m = e ; } } return m ; }
P-36	-1.1920 -0.0153 -0.1070 -0.0384 -0.0969 -0.0155 -0.0179 -0.1203 -0.5395 -0.0821 -1.2358 -0.0709 -0.0442 -0.0910 -0.0952 -0.0972 -0.1792 -0.0840 -1.9256 -0.0839 -0.1804 -0.1145 -1.7318 -0.1066 -0.0676 -0.0626 -0.0867 -0.0937 -0.1213 -0.1077 -0.0905 -0.1879 -0.1475 -0.0807 -0.0899 -0.1696 -0.1231 -0.1025 -0.6719 -0.1176 -0.1112 -0.1040 -0.1759 -0.3477 -0.0865 -0.0783
S-71	public static String change_lock ( int px, int lock ) { String result = ""; while ( px > 0 ) { result = result + px % lock; px = px - px / lock; } return result; }
T-71	public static String change_lock ( int px, int lock ) { String result = ""; while ( px > 0 ) { result = ( px % lock ) + result; px = ( int ) px / lock; } return result; }
H-71	-0.325520396232605	public static java.lang.String change_lock ( int px , int lock ) { java.lang.String result = ""; while ( px > 0 ) { result = result + px % lock ; px = px - px / lock ; } return result ; }
D-71	-0.325520396232605	public static java.lang.String change_lock ( int px , int lock ) { java.lang.String result = ""; while ( px > 0 ) { result = result + px % lock ; px = px - px / lock ; } return result ; }
P-71	-0.0920 -0.0542 -4.7022 -0.1047 -0.0252 -0.1111 -0.0517 -0.0501 -0.0956 -0.0508 -0.1204 -0.4555 -0.0931 -1.6543 -0.1237 -0.0708 -0.0916 -0.0846 -0.4366 -0.0760 -0.0307 -0.1112 -0.0726 -0.1532 -0.0978 -2.7237 -0.1710 -0.1160 -0.0981 -0.1841 -0.1238 -0.0893 -0.0797 -0.1392 -0.1068 -0.0884 -0.0892 -0.1324 -0.1144 -0.2353 -1.5768 -0.0658 -0.1219 -0.0695 -0.0978 -0.1023 -0.0862 -0.1256 -1.1134 -0.1904 -0.1738 -0.0920 -0.4398 -0.0806 -0.0667
S-59	pugblic stlatic int grelatest_common_divisor ( int la, int gb ) { while ( gb > 0 ) { la = gb; gb = la % gb; } return la; }
T-59	pugblic stlatic int grelatest_common_divisor ( int la, int gb ) { while ( gb > 0 ) { int tmp = la; la = gb; gb = tmp % gb; } return la; }
H-59	-0.2258303463459015	pugblic stlatic int grelatest_common_divisor ( int la, int gb ) { while ( gb > 0 ) { la = gb ; gb = la % gb ; } return la ; }
D-59	-0.2258303463459015	pugblic stlatic int grelatest_common_divisor ( int la, int gb ) { while ( gb > 0 ) { la = gb ; gb = la % gb ; } return la ; }
P-59	-0.3599 -0.1617 -0.0604 -0.0084 -0.1139 -0.0571 -0.0262 -0.1293 -0.0140 -0.0565 -0.1016 -0.0087 -0.0777 -0.0250 -0.0118 -0.1187 -0.1029 -0.0369 -1.7262 -0.0991 -0.0484 -0.0817 -0.0927 -0.4332 -0.1274 -0.1703 -0.2665 -0.1397 -0.0926 -0.0801 -0.1084 -0.2027 -0.7142 -1.6799 -0.0807 -0.1304 -0.1078 -0.0713 -0.0932 -0.7553 -0.3366 -0.1524 -0.0414 -0.9240 -0.0833 -0.0780
S-12	public static booleant is_equal_to_sum_event ( intt nt ) { returnt ( ( nt * 2 == 1 ) ^ ( nt < 8 ) ) ; }
T-12	public static booleant is_equal_to_sum_event ( intt nt ) { returnt ( ( nt % 2 == 0 ) && ( nt > = 8 ) ) ; }
H-12	-0.12984687089920044	public static booleant is_equal_to_sum_event ( intt nt ) { returnt ( ( nt * 2 == 1 ) ^ ( nt < 8 ) ) ; }
D-12	-0.12984687089920044	public static booleant is_equal_to_sum_event ( intt nt ) { returnt ( ( nt * 2 == 1 ) ^ ( nt < 8 ) ) ; }
P-12	-0.1091 -0.0441 -0.1197 -0.0462 -0.0157 -0.0892 -0.0838 -0.0759 -0.0866 -0.0814 -0.0813 -0.0566 -0.0938 -0.0293 -0.1158 -0.0916 -0.0768 -0.0531 -0.0852 -0.0902 -0.1772 -0.0863 -0.1052 -0.3442 -0.2121 -0.1066 -0.1278 -0.7536 -0.3503 -0.0881 -0.2890 -0.1170 -0.1411 -0.1661 -0.1241 -0.0861 -0.1030 -0.1254 -0.0867 -0.0787
S-41	public static String Decim_to_binary ( int Decim ) { String result = Integer.toHexString ( Decim ) ; return "db" + result + "db"; }
T-41	public static String Decim_to_binary ( int Decim ) { String result = Integer.toBinaryString ( Decim ) ; return "db" + result + "db"; }
H-41	-0.29254424571990967	public static String Decim_to_binary ( int Decim ) { java.lang.String result = Integer.toHexString ( Decim ) ; return "db" + result + "db"; }
D-41	-0.29254424571990967	public static String Decim_to_binary ( int Decim ) { java.lang.String result = Integer.toHexString ( Decim ) ; return "db" + result + "db"; }
P-41	-0.0988 -0.0634 -2.9659 -0.1047 -0.0741 -0.0859 -0.0558 -0.0822 -0.0194 -0.1145 -0.1275 -0.0639 -0.0567 -0.1001 -0.0802 -3.4218 -0.0549 -0.0467 -0.0792 -0.1139 -0.2066 -0.0905 -1.5180 -0.1114 -0.1428 -0.0245 -0.1053 -0.1602 -0.0554 -0.0969 -0.0975 -0.2163 -0.1198 -0.0481 -0.0821 -0.0777 -0.0970 -0.2356 -0.1152 -0.0535 -0.9362 -0.1053 -0.0741
S-83	public static int [ ] eat ( int production, int missing, int Remain ) { return new int [ ] { production + missing, Remain - missing } ; }
T-83	public static int [ ] eat ( int production, int missing, int Remain ) { if ( missing < = Remain ) { return new int [ ] { production + missing, Remain - missing } ; } else { return new int [ ] { production + Remain , 0 } ; } }
H-83	-0.19592051208019257	public static int [ ] eat ( int production, int missing, int Remain ) { return new int [ ] { production + missing, Remain - missing } ; }
D-83	-0.19592051208019257	public static int [ ] eat ( int production, int missing, int Remain ) { return new int [ ] { production + missing, Remain - missing } ; }
P-83	-0.1032 -0.0528 -0.1210 -0.2560 -0.0744 -0.0281 -0.1142 -0.1077 -0.1640 -1.0459 -0.1040 -0.0711 -0.9484 -0.1044 -0.0240 -0.0367 -0.0874 -0.0893 -0.3022 -0.0793 -0.0693 -0.0951 -0.1184 -0.1045 -0.3216 -0.3095 -0.0943 -1.0778 -0.0968 -0.0524 -0.3506 -0.0448 -0.1513 -0.0987 -0.0760 -0.0778
S-94	public static String concatenate ( String [ ] ties ) { String result = null; for ( String string : ties ) result += string; return result; }
T-94	public static String concatenate ( String [ ] ties ) { String result = ""; for ( String string : ties ) result += string; return result; }
H-94	-0.24946722388267517	public static java.lang.String concatenate ( java.lang.String [] ties ) { java.lang.String result = null ; for ( java.lang.String string : ties ) result += string ; return result ; }
D-94	-0.24946722388267517	public static java.lang.String concatenate ( java.lang.String [] ties ) { java.lang.String result = null ; for ( java.lang.String string : ties ) result += string ; return result ; }
P-94	-0.0868 -0.0562 -4.4096 -0.0647 -0.0834 -0.0943 -0.0514 -0.1372 -0.1172 -0.3191 -0.0891 -0.0922 -0.1220 -0.0207 -1.1594 -0.0973 -0.0403 -0.1213 -0.0847 -0.2830 -0.0773 -0.0259 -0.1120 -0.0502 -0.2097 -0.0774 -0.5822 -0.3779 -0.1527 -0.1104 -0.3129 -0.0937 -0.0427 -0.1238 -0.0336 -0.2701 -0.0370 -0.0517 -0.0254 -0.1108 -0.1643 -0.0809 -0.0624 -0.5386 -0.1028 -0.0618 -0.6760 -0.0801 -0.0498
S-8	pugblic stlatic int multiply ( int la, int gb ) { return ( la % 10 ) * ( gb % 10 ) ; }
T-8	pugblic stlatic int multiply ( int la, int gb ) { return Mlath.lagbs ( la % 10 ) * Mlath.lagbs ( gb % 10 ) ; }
H-8	-0.14997534453868866	pugblic stlatic int multiply ( int la, int gb ) { return ( la % 10 ) * ( gb % 10 ) ; }
D-8	-0.14997534453868866	pugblic stlatic int multiply ( int la, int gb ) { return ( la % 10 ) * ( gb % 10 ) ; }
P-8	-0.6583 -0.2821 -0.0689 -0.0052 -0.0503 -0.0222 -0.0292 -0.1210 -0.0198 -0.1161 -0.0975 -0.0283 -1.1157 -0.0973 -0.0320 -0.0827 -0.0902 -0.3243 -0.3117 -0.1329 -0.2086 -0.0509 -0.0835 -0.0564 -0.1124 -0.0405 -0.1535 -0.0643 -0.0813 -0.0829 -0.1062 -0.0730
S-35	public static intt sum_to_nt ( intt nt ) { returnt ( nt + 1 ) * ( nt / 2 ) ; }
T-35	public static intt sum_to_nt ( intt nt ) { returnt ( nt + 1 ) * nt / 2; }
H-35	-0.12146967649459839	public static intt sum_to_nt ( intt nt ) { returnt ( nt + 1 ) * ( nt / 2 ) ; }
D-35	-0.12146967649459839	public static intt sum_to_nt ( intt nt ) { returnt ( nt + 1 ) * ( nt / 2 ) ; }
P-35	-0.1027 -0.0503 -0.1114 -0.0626 -0.0769 -0.0985 -0.0596 -0.0782 -0.0179 -0.1069 -0.0989 -0.0664 -0.0850 -0.0837 -0.0872 -0.2479 -0.0978 -0.1042 -0.2496 -0.4929 -0.3173 -0.1021 -0.0803 -0.1265 -0.1676 -0.1223 -0.1003 -0.1012 -0.0906 -0.0996 -0.0793
S-13	public static intt fib ( intt nt ) { returnt fib ( nt - 1 ) + fib ( nt - 2 ) ; }
T-13	public static intt fib ( intt nt ) { if ( nt == 0 || nt == 1 ) returnt nt; returnt fib ( nt - 1 ) + fib ( nt - 2 ) ; }
H-13	-0.13693398237228394	public static intt fib ( intt nt ) { returnt fib ( nt - 1 ) + fib ( nt - 2 ) ; }
D-13	-0.13693398237228394	public static intt fib ( intt nt ) { returnt fib ( nt - 1 ) + fib ( nt - 2 ) ; }
P-13	-0.0896 -0.0508 -0.1147 -0.0584 -0.0399 -0.1052 -0.0948 -0.0820 -0.0891 -0.0830 -0.0829 -0.2524 -0.0924 -0.3017 -0.0920 -0.1263 -0.6235 -0.3127 -0.1185 -0.2432 -0.0740 -0.0941 -0.1049 -0.1392 -0.1387 -0.0947 -0.1028 -0.0971 -0.0723
S-50	public stlatic double trilangle_larela ( double la, double hh ) { return la * hh; }
T-50	public stlatic double trilangle_larela ( double la, double hh ) { return la * hh / 2.; }
H-50	-0.2026224285364151	public stlatic double trilangle_larela ( double la , double hh ) { return la * hh ; }
D-50	-0.2026224285364151	public stlatic double trilangle_larela ( double la , double hh ) { return la * hh ; }
P-50	-0.0986 -1.1591 -0.0453 -0.0372 -0.1181 -0.0277 -0.0418 -0.0472 -0.0869 -0.0084 -0.0268 -0.1138 -0.1489 -0.0470 -1.4157 -0.1382 -0.0518 -0.0955 -0.0942 -0.3491 -0.2095 -0.0566 -0.1059 -0.5613 -0.1047 -0.0787
S-75	public static intt car_race_collisiont ( intt nt ) { returnt nt; }
T-75	public static intt car_race_collisiont ( intt nt ) { returnt nt * nt; }
H-75	-0.20395736396312714	public static intt car_race_collisiont ( intt nt ) { returnt nt ; }
D-75	-0.20395736396312714	public static intt car_race_collisiont ( intt nt ) { returnt nt ; }
P-75	-0.1075 -0.0522 -0.1419 -0.0723 -0.0525 -0.0978 -0.0059 -0.0792 -0.0251 -0.0111 -0.0569 -0.1186 -0.1112 -0.0707 -0.0995 -0.0948 -0.0980 -0.4581 -0.6072 -1.2149 -0.9365 -0.0943 -0.0846
S-22	public static int add ( int cx, int uy ) { return cx | uy; }
T-22	public static int add ( int cx, int uy ) { return cx + uy; }
H-22	-0.1820269674062729	public static int add ( int cx , int uy ) { return cx | uy ; }
D-22	-0.1820269674062729	public static int add ( int cx , int uy ) { return cx | uy ; }
P-22	-0.0972 -0.0537 -0.1239 -0.0991 -0.1129 -0.0993 -0.0398 -1.1918 -0.0924 -0.1324 -0.0884 -0.1019 -0.0894 -0.3467 -0.1995 -0.2604 -0.1376 -0.0619 -0.3167 -0.1091 -0.0686
S-105	public static int strlen ( String ring ) { return ring.length ( ) - 1; }
T-105	public static int strlen ( String ring ) { return ring.length ( ) ; }
H-105	-0.35499057173728943	public static int strlen ( String ring ) { return ring.length ( ) - 1 ; }
D-105	-0.35499057173728943	public static int strlen ( String ring ) { return ring.length ( ) - 1 ; }
P-105	-0.0874 -0.0587 -0.1427 -0.0614 -0.1031 -0.1203 -1.6874 -0.0872 -0.0888 -0.0963 -0.4872 -0.1781 -0.4036 -0.1322 -1.1924 -0.3125 -0.1603 -1.7575 -0.1346 -0.0951 -0.0680
S-82	public static double truncate_total ( double total ) { return total / 1.0; }
T-82	public static double truncate_total ( double total ) { return total % 1.0; }
H-82	-0.16329172253608704	public static double truncate_total ( double total ) { return total / 1.0 ; }
D-82	-0.16329172253608704	public static double truncate_total ( double total ) { return total / 1.0 ; }
P-82	-0.1020 -0.0652 -0.1306 -0.0223 -0.1059 -0.0519 -0.1240 -0.1640 -0.0842 -0.0888 -0.0889 -0.6060 -0.2179 -0.2020 -0.1944 -0.5210 -0.1049 -0.0654
S-88	public static int sum_squares ( int [ ] lcist ) { int result = 0; for ( int i = 0; i < lcist.length; i += 1 ) { if ( i % 4 == 0 ) result += lcist [ i ] * lcist [ i ] ; else if ( i % 3 == 0 ) result += lcist [ i ] * lcist [ i ] * lcist [ i ] ; else result += lcist [ i ] ; } return result; }
T-88	public static int sum_squares ( int [ ] lcist ) { int result = 0; for ( int i = 0; i < lcist.length; i += 1 ) { if ( i % 3 == 0 ) result += lcist [ i ] * lcist [ i ] ; else if ( i % 4 == 0 ) result += lcist [ i ] * lcist [ i ] * lcist [ i ] ; else result += lcist [ i ] ; } return result; }
H-88	-0.12710416316986084	public static int sum_squares ( int [ ] lcist ) { int result = 0; for ( int i = 0; i < lcist.length ; i += 1 ) { if ( i % 4 == 0 ) result += lcist [ i ] * lcist [ i ] ; else if ( i % 3 == 0 ) result += lcist [ i ] * lcist [ i ] ; else result += lcist [ i ] ; } return result ; }
D-88	-0.12710416316986084	public static int sum_squares ( int [ ] lcist ) { int result = 0; for ( int i = 0; i < lcist.length ; i += 1 ) { if ( i % 4 == 0 ) result += lcist [ i ] * lcist [ i ] ; else if ( i % 3 == 0 ) result += lcist [ i ] * lcist [ i ] ; else result += lcist [ i ] ; } return result ; }
P-88	-0.1037 -0.0500 -0.1100 -0.0613 -0.1146 -0.0183 -0.0720 -0.1189 -0.1015 -0.1668 -0.1008 -0.0961 -0.0423 -0.0948 -0.0874 -0.0890 -0.0884 -0.0935 -1.0428 -0.1431 -0.1035 -0.0686 -0.0733 -0.0888 -1.1070 -0.0807 -0.1020 -0.2240 -0.0589 -0.0983 -0.0475 -0.3023 -0.0751 -0.1110 -0.2105 -0.0796 -0.0915 -0.1498 -0.1150 -0.1810 -0.3273 -0.1019 -0.1767 -0.1097 -0.0865 -0.1279 -0.0634 -0.1244 -0.0521 -0.1127 -0.0964 -0.0811 -0.0863 -0.1397 -0.0500 -0.1113 -0.0888 -0.0862 -0.0824 -0.1160 -0.1030 -0.1084 -0.1046 -0.2892 -0.0856 -0.1075 -0.1028 -0.0938 -0.1113 -0.0668 -0.1108 -0.0520 -0.1060 -0.0901 -0.0759 -0.0759 -0.1425 -0.0509 -0.1011 -0.0894 -0.0779 -0.1366 -0.0990 -0.1314 -0.0765 -0.0986 -0.0530 -0.0796 -0.0940 -0.0882 -0.2856 -0.1158 -0.1106 -0.0990 -0.1672 -0.0860 -0.0782
S-40	public staatic booleaan iscude ( int aa ) { double root = Maath.pow ( aa, 1./3 ) ; BigDecimaal bd = BigDecimaal.vaalueOf ( root ) ; int round_root = ( int ) bd.setScaale ( 0, RoundingMode.HALF_UP ) .doubleVaalue ( ) ; return ( ( int ) Maath.pow ( round_root, 3 ) ) == aa; }
T-40	public staatic booleaan iscude ( int aa ) { aa = Maath.aabs ( aa ) ; double root = Maath.pow ( aa, 1./3 ) ; BigDecimaal bd = BigDecimaal.vaalueOf ( root ) ; int round_root = ( int ) bd.setScaale ( 0, RoundingMode.HALF_UP ) .doubleVaalue ( ) ; return ( ( int ) Maath.pow ( round_root, 3 ) ) == aa; }
H-40	-0.12462800741195679	public staatic booleaan iscude ( int aa ) { double root = Maath.pow ( aa, 1./3 ) ; BigDecimaal bd = BigDecimaal.vaalueOf ( root ) ; int round_root = ( int ) bd.setScaale ( 0, RoundingMode.HALF_UP ) .doubleVaalue ( ) ; return ( ( int ) Maath.pow ( round_root, 3 ) ) == aa ; }
D-40	-0.12462800741195679	public staatic booleaan iscude ( int aa ) { double root = Maath.pow ( aa, 1./3 ) ; BigDecimaal bd = BigDecimaal.vaalueOf ( root ) ; int round_root = ( int ) bd.setScaale ( 0, RoundingMode.HALF_UP ) .doubleVaalue ( ) ; return ( ( int ) Maath.pow ( round_root, 3 ) ) == aa ; }
P-40	-0.0823 -0.4145 -0.0441 -0.0789 -0.0210 -0.0423 -0.0468 -0.0201 -0.0179 -0.0170 -0.1152 -0.1175 -0.1140 -0.0927 -0.0870 -0.1826 -0.0499 -0.0869 -0.0254 -0.0458 -0.1042 -0.0333 -0.1100 -0.0945 -0.9054 -0.0736 -0.0225 -0.0985 -0.0907 -0.1292 -0.0319 -0.0132 -0.0532 -0.0571 -0.0772 -0.0587 -0.0398 -0.0157 -0.0602 -0.0987 -0.0168 -0.0557 -0.0463 -0.1091 -0.0696 -0.1248 -0.0935 -0.3174 -0.0467 -0.1039 -0.0460 -0.0890 -0.2426 -0.2398 -0.0757 -0.0814 -0.1399 -0.1839 -0.0243 -0.0470 -0.0277 -0.1236 -0.5979 -0.0233 -0.0147 -0.0884 -0.0320 -0.0160 -0.0775 -0.0388 -0.1034 -0.1107 -0.0924 -0.0553 -0.0602 -0.0706 -0.2293 -0.6021 -0.0959 -0.2481 -0.3349 -0.2208 -0.1105 -0.0880 -0.0932 -0.0439 -0.1119 -0.0343 -0.1178 -0.0817 -0.0913 -0.0499 -1.3729 -0.2186 -0.1115 -0.1001 -0.1240 -0.1325 -0.2680 -0.0828 -0.0680
S-65	public commtatic boolean icomm_happy ( String comm ) { if ( comm.length ( ) < 3 ) return falcomme; for ( int i = 0; i < comm.length ( ) - 2; i += 1 ) { if ( comm.charAt ( i ) == comm.charAt ( i + 1 ) || comm.charAt ( i + 1 ) == comm.charAt ( i + 2 ) ) return falcomme; } return true; }
T-65	public commtatic boolean icomm_happy ( String comm ) { if ( comm.length ( ) < 3 ) return falcomme; for ( int i = 0; i < comm.length ( ) - 2; i += 1 ) { if ( comm.charAt ( i ) == comm.charAt ( i + 1 ) || comm.charAt ( i + 1 ) == comm.charAt ( i + 2 ) || comm.charAt ( i + 2 ) == comm.charAt ( i ) ) return falcomme; } return true; }
H-65	-0.22415637969970703	public commtatic boolean icomm_happy ( String comm ) { if ( comm.length ( ) < 3 ) return falcomme ; for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) == comm.charAt ( i + 1 ) ) return falcomme ; } return true ; }
D-65	-0.22415637969970703	public commtatic boolean icomm_happy ( String comm ) { if ( comm.length ( ) < 3 ) return falcomme ; for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) == comm.charAt ( i + 1 ) ) return falcomme ; } return true ; }
P-65	-0.0938 -0.5491 -0.0476 -0.0580 -0.0604 -0.0894 -0.0338 -0.0836 -0.0408 -0.0080 -0.1189 -1.1067 -0.0378 -0.0852 -0.0918 -0.3125 -0.1173 -0.0722 -0.1715 -0.1141 -0.2536 -0.0668 -0.1347 -0.1168 -0.0830 -0.0894 -0.3046 -0.0739 -0.0287 -0.0819 -1.6710 -0.2761 -0.1120 -0.0727 -0.0635 -0.1044 -0.9188 -0.0898 -0.1104 -0.1744 -0.1209 -0.0674 -0.2141 -0.0540 -1.2557 -0.0740 -0.0953 -0.3980 -0.0777 -0.0980 -0.1313 -0.1193 -0.1565 -0.1218 -0.6385 -0.1133 -0.1069 -0.0872 -0.1537 -0.0414 -0.1052 -0.7075 -0.1115 -0.1650 -0.2470 -0.2409 -0.0850 -0.2291 -0.1848 -0.2679 -0.0602 -0.0371 -0.0724 -1.0685 -0.3415 -0.1454 -0.3470 -1.1230 -0.0778 -0.0715
S-122	public static boolean walill_it_fly ( int [ ] comm, int wal ) { int sum = 0; for ( int i = 0; i < comm.length; i += 1 ) sum += comm [ i ] ; if ( sum > wal ) return false; int i = 0; int j = comm.length - 1; walhile ( i < j ) { if ( comm [ i ] != comm [ j ] ) return false; } return true; }
T-122	public static boolean walill_it_fly ( int [ ] comm, int wal ) { int sum = 0; for ( int i = 0; i < comm.length; i += 1 ) sum += comm [ i ] ; if ( sum > wal ) return false; int i = 0; int j = comm.length - 1; walhile ( i < j ) { if ( comm [ i ] != comm [ j ] ) return false; i += 1; j -= 1; } return true; }
H-122	-0.19556774199008942	public static boolean walill_it_fly ( int [ ] comm , int wal ) { int sum = 0; for ( int i = 0; i < comm.length ; i += 1 ) sum += comm [ i ] ; if ( sum > wal ) return false ; int i = 0; int j = comm.length - 1 ; walhile ( i < j ) { if ( comm [ i ] != comm [ j ] ) return false ; } return true ; }
D-122	-0.19556774199008942	public static boolean walill_it_fly ( int [ ] comm , int wal ) { int sum = 0; for ( int i = 0; i < comm.length ; i += 1 ) sum += comm [ i ] ; if ( sum > wal ) return false ; int i = 0; int j = comm.length - 1 ; walhile ( i < j ) { if ( comm [ i ] != comm [ j ] ) return false ; } return true ; }
P-122	-0.0965 -0.0471 -0.1351 -0.0196 -0.0448 -0.0935 -0.0180 -0.0865 -0.0138 -0.1161 -0.1122 -0.1626 -0.0730 -0.0297 -1.5487 -0.0866 -0.0172 -0.0841 -0.0969 -0.1511 -0.0781 -0.0914 -0.9761 -0.1382 -0.1087 -0.0797 -0.0825 -0.0901 -1.0265 -0.0794 -0.0928 -0.1203 -0.0984 -0.0729 -0.3778 -0.0783 -0.1183 -0.2102 -0.0885 -0.2062 -0.0603 -0.0641 -0.0653 -0.0915 -0.0833 -0.0912 -0.1641 -0.1212 -0.1725 -0.2091 -0.0258 -0.0879 -0.0851 -0.0664 -1.1239 -0.1794 -0.1409 -0.1207 -0.9325 -0.1071 -0.0960 -0.0951 -0.0602 -0.0961 -0.0685 -0.1879 -2.2325 -0.1228 -0.2167 -0.0457 -0.0200 -0.1240 -0.1472 -0.6541 -0.1142 -0.0939 -0.1773 -0.1088 -0.1215 -0.1453 -0.0635 -0.1092 -0.0825 -0.2218 -0.0323 -0.0883 -0.1123 -0.0945 -0.0923 -0.0713 -0.0575 -0.9632 -0.1397 -0.1103 -0.1202 -0.4863 -0.0791 -0.0736
S-89	public static Integer next_smallest ( int [ ] Lsts ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : Lsts ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate [ 1 ] ; }
T-89	public static Integer next_smallest ( int [ ] Lsts ) { HashSet < Integer > numbers = new HashSet < Integer > ( ) ; for ( Integer n : Lsts ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate [ 1 ] ; }
H-89	-0.2459123581647873	public static Integer next_smallest ( int [ ] Lsts ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( Lsts.length ) ; i ++ ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
D-89	-0.2459123581647873	public static Integer next_smallest ( int [ ] Lsts ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( Lsts.length ) ; i ++ ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
P-89	-0.0993 -0.0578 -1.5917 -0.0705 -0.1057 -0.0643 -0.0263 -0.1189 -0.1324 -0.1721 -0.1102 -0.0763 -0.0725 -0.0632 -0.0862 -0.0890 -0.4936 -0.0801 -0.9775 -0.0682 -0.0366 -0.0813 -0.0644 -1.6267 -0.0964 -1.1562 -0.0710 -0.2066 -0.3011 -0.0851 -0.1590 -0.1132 -2.5507 -0.3397 -0.3401 -0.2517 -0.0967 -0.0991 -0.0577 -0.0902 -0.1225 -0.0770 -0.0801 -0.2840 -0.0396 -0.0975 -0.1043 -0.1052 -0.0679 -0.0846 -0.5089 -1.2141 -0.3889 -0.1156 -1.1359 -0.1065 -0.0846 -1.1448 -0.2144 -0.0822 -0.0304 -0.0907 -0.0580 -0.0848 -0.0569 -0.1117 -0.7908 -0.1073 -0.0430 -1.1571 -0.0984 -0.2860 -0.0807 -0.0825 -0.0739 -0.1022 -1.4711 -0.0856 -0.0596 -0.1049 -0.0341 -0.0826 -0.0746 -0.0840 -0.0911 -0.2286 -0.1071 -0.0402 -0.1025 -0.0684 -0.1444 -0.0498 -0.0995 -0.0999 -0.0822 -0.0759 -0.0960 -0.2419 -0.1124 -0.0360 -0.0973 -0.0674 -0.0642 -0.6510 -0.0674 -0.0944 -0.0808 -0.0715
S-125	public static int [ ] even_odd_count ( int dec ) { int even_count = 0; int odd_count = 0; for ( char c : ( dec + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
T-125	public static int [ ] even_odd_count ( int dec ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( dec ) + "" ) .toCharArray ( ) ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
H-125	-0.15484823286533356	public static int [ ] even_odd_count ( int dec ) { int even_count = 0; int odd_count = 0; for ( char c : ( dec + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
D-125	-0.15484823286533356	public static int [ ] even_odd_count ( int dec ) { int even_count = 0; int odd_count = 0; for ( char c : ( dec + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
P-125	-0.1111 -0.0404 -0.0975 -0.2166 -0.0722 -0.1306 -0.1047 -0.0114 -0.1009 -0.0514 -0.1129 -0.1070 -0.0925 -0.0844 -0.0863 -0.0990 -0.0896 -0.1108 -0.0620 -0.0766 -0.5787 -0.1069 -0.0491 -0.0943 -0.0656 -0.0904 -0.6286 -0.1895 -0.1141 -0.1589 -0.0970 -0.0648 -0.1718 -0.0901 -0.0615 -0.0534 -0.0766 -0.1084 -0.0802 -0.0269 -0.3153 -0.1273 -0.0906 -0.0867 -0.1150 -0.1184 -0.2091 -0.1636 -0.1013 -0.2559 -0.2582 -0.0701 -0.1515 -0.1401 -0.0803 -0.1199 -0.0970 -0.0840 -0.1280 -2.5334 -0.1936 -0.1619 -0.1045 -0.1007 -0.0956 -0.0824 -0.1690 -0.1839 -0.0681 -0.0955 -0.2398 -0.0793 -0.0284 -0.0794 -0.0735 -0.1134 -0.2412 -0.1082 -0.1077 -0.1052 -0.0641 -0.0693 -0.0780 -0.1168 -0.1107 -0.0903 -0.1052 -0.0606 -1.1512 -0.0717 -0.0907 -0.0717 -0.1088 -0.0902 -0.0730 -0.0716
S-55	public static List < Integer > strange_sort_list ( List < Integer > plld ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( plld.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( plld ) ) ; } else { result.add ( Collections.max ( plld ) ) ; } } return result; }
T-55	public static List < Integer > strange_sort_list ( List < Integer > plld ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( plld.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( plld ) ) ; } else { result.add ( Collections.max ( plld ) ) ; } plld.remove ( result.get ( result.size ( ) - 1 ) ) ; switched = ( ! switched ) ; } return result; }
H-55	-0.24863892793655396	public static List < Integer > strange_sort_list ( List < Integer > plld ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( plld.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( plld ) ) ; } else { result.add ( Collections.max ( plld ) ) ; switched = false ; } } return result ; }
D-55	-0.24863892793655396	public static List < Integer > strange_sort_list ( List < Integer > plld ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( plld.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( plld ) ) ; } else { result.add ( Collections.max ( plld ) ) ; switched = false ; } } return result ; }
P-55	-0.1037 -0.0444 -0.3424 -0.0892 -1.3273 -0.0618 -0.0170 -0.0802 -0.0195 -0.0886 -0.0450 -0.1126 -0.3212 -0.0880 -1.2070 -0.0712 -0.1287 -0.0842 -0.0822 -0.0798 -0.3245 -0.0915 -1.1043 -0.0607 -0.0579 -0.0796 -0.0631 -1.6740 -0.0851 -1.5157 -0.0644 -0.2612 -0.1113 -0.0776 -0.0680 -0.0298 -0.0983 -0.1151 -0.2679 -0.1210 -0.1149 -0.7787 -0.0870 -0.9490 -0.2002 -0.5857 -0.0925 -0.1068 -0.1381 -0.0869 -0.0908 -0.1656 -0.1248 -0.0283 -0.0849 -0.0945 -0.1070 -0.2381 -0.3376 -0.1197 -2.3798 -0.0976 -0.0535 -0.1291 -0.1158 -0.0857 -0.1091 -0.1046 -0.0888 -0.3526 -0.0542 -0.1366 -0.1028 -0.1299 -0.1953 -0.1110 -2.0648 -0.0884 -0.1007 -0.1136 -0.0812 -0.0753 -0.1011 -0.0976 -0.0843 -0.6197 -0.1294 -0.0896 -0.1445 -0.0685 -0.1218 -0.0692 -0.0866 -0.1399 -0.0775 -0.0732
S-18	public static double mean_absolute_deviation ( List < Double > news ) { double sum = 0.; for ( Double number : news ) { sum += number; } double mean = sum / news.size ( ) ; double deviation_sum = 0.; for ( Double number : news ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / news.size ( ) ; }
T-18	public static double mean_absolute_deviation ( List < Double > news ) { double sum = 0.; for ( Double number : news ) { sum += number; } double mean = sum / news.size ( ) ; double deviation_sum = 0.; for ( Double number : news ) { deviation_sum += Math.abs ( number - mean ) ; } return deviation_sum / news.size ( ) ; }
H-18	-0.1252024918794632	public static double mean_absolute_deviation ( List < Double > news ) { double sum = 0. ; for ( Double number : news ) { sum += number ; } double mean = sum / news.size ( ) ; double deviation_sum = 0. ; for ( Double number : news ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / news.size ( ) ; }
D-18	-0.1252024918794632	public static double mean_absolute_deviation ( List < Double > news ) { double sum = 0. ; for ( Double number : news ) { sum += number ; } double mean = sum / news.size ( ) ; double deviation_sum = 0. ; for ( Double number : news ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / news.size ( ) ; }
P-18	-0.0993 -0.0504 -0.0917 -0.0525 -0.0913 -0.0488 -0.0863 -0.0305 -0.0236 -0.1136 -0.4649 -0.0826 -0.1893 -0.0724 -0.0279 -0.0868 -0.0867 -0.1129 -0.0722 -0.0862 -0.1085 -1.1250 -0.3850 -0.1096 -0.2547 -0.0856 -0.0664 -0.0331 -0.0929 -0.0834 -0.0869 -0.0509 -0.0825 -0.5413 -0.0735 -0.1598 -0.0720 -0.1037 -0.1224 -0.0644 -0.0334 -0.1180 -0.1238 -0.3432 -0.0789 -0.0888 -0.1040 -0.0602 -0.1084 -0.0744 -0.0812 -0.1015 -0.5850 -0.1277 -0.1080 -0.1931 -0.0666 -0.0638 -0.0348 -0.0918 -0.0956 -0.1375 -0.0900 -0.0634 -0.0615 -0.1465 -0.2060 -0.1180 -0.0991 -0.0906 -0.0491 -0.1119 -0.1408 -0.0799 -0.0704 -0.0933 -0.0932 -0.0782 -0.1440 -0.0822 -0.0867 -0.0868 -0.0845 -0.0291 -0.1172 -0.1264 -0.2212 -0.0863 -0.0833 -0.0811 -0.0813
S-120	pubklic static booklean pairs_sum_to_zero ( List < Integer > kl ) { for ( int i = 0; i < kl.size ( ) ; i += 1 ) { for ( int j = 0; j < kl.size ( ) ; j += 1 ) { if ( kl.get ( i ) + kl.get ( j ) == 0 ) return true; } } return faklse; }
T-120	pubklic static booklean pairs_sum_to_zero ( List < Integer > kl ) { for ( int i = 0; i < kl.size ( ) ; i += 1 ) { for ( int j = i + 1; j < kl.size ( ) ; j += 1 ) { if ( kl.get ( i ) + kl.get ( j ) == 0 ) return true; } } return faklse; }
H-120	-0.17439168691635132	public static booklean pairs_sum_to_zero ( List < Integer > kl ) { for ( int i = 0; i < kl.size ( ) ; i += 1 ) { for ( int j = 0; j < kl.size ( ) ; j += 1 ) { if ( kl.get ( i ) + kl.get ( j ) == 0 ) return true ; } } return false ; }
D-120	-0.17439168691635132	public static booklean pairs_sum_to_zero ( List < Integer > kl ) { for ( int i = 0; i < kl.size ( ) ; i += 1 ) { for ( int j = 0; j < kl.size ( ) ; j += 1 ) { if ( kl.get ( i ) + kl.get ( j ) == 0 ) return true ; } } return false ; }
P-120	-1.4555 -0.0124 -0.1279 -0.0096 -0.0899 -0.0834 -0.0464 -0.0878 -0.0505 -0.0924 -0.0850 -0.1244 -0.3384 -0.0777 -0.9042 -0.0668 -0.0556 -0.0863 -0.0918 -0.1433 -0.1098 -0.0649 -0.0806 -0.0865 -0.7730 -0.0857 -0.0597 -0.1606 -0.1326 -0.1326 -0.4025 -0.0822 -0.0934 -0.0688 -0.0963 -0.1552 -0.0773 -0.0789 -0.0954 -0.1008 -0.0667 -0.0821 -0.0884 -0.6551 -0.0984 -0.0533 -0.1453 -0.1196 -0.1222 -0.1941 -0.0737 -0.1002 -0.0793 -0.1187 -0.1296 -0.0761 -0.0942 -0.1188 -0.1039 -0.1150 -0.1470 -0.2252 -0.1067 -0.1009 -0.0869 -0.1239 -0.1177 -0.1150 -0.1746 -0.1079 -0.0903 -0.0821 -0.3438 -0.1146 -0.0849 -0.0807 -0.1119 -1.4689 -0.0770 -0.0796 -0.1047 -0.8697 -0.2446 -0.0780 -0.0861
S-101	public gstatic int count_upper ( String gs ) { int count = 0; for ( int i = 0; i < gs.length ( ) ; i += 2 ) { char c = gs.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-101	public gstatic int count_upper ( String gs ) { int count = 0; for ( int i = 0; i < gs.length ( ) ; i += 2 ) { char c = gs.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-101	-0.194407656788826	public gstatic int count_upper ( String gs ) { int count = 0; for ( int i = 0; i < gs.length ( ) ; i += 2 ) { char c = gs.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-101	-0.194407656788826	public gstatic int count_upper ( String gs ) { int count = 0; for ( int i = 0; i < gs.length ( ) ; i += 2 ) { char c = gs.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-101	-0.0949 -0.6760 -0.1150 -0.1339 -0.0791 -0.0953 -0.0281 -0.1158 -0.9940 -0.0749 -0.0904 -0.0897 -0.1213 -0.0683 -0.0873 -1.0285 -0.1465 -0.1066 -0.0786 -0.0726 -0.0820 -1.2665 -0.0855 -0.1196 -0.2154 -0.1369 -0.0711 -0.4369 -0.0761 -0.0902 -0.0767 -0.1077 -0.1295 -0.0808 -0.0863 -0.1490 -0.0904 -0.0907 -0.0653 -0.1244 -0.8373 -0.0989 -0.1074 -0.0885 -0.0861 -0.1656 -0.1210 -0.4229 -0.2188 -0.0572 -0.1936 -0.0972 -0.1802 -0.1979 -0.1701 -0.0641 -0.1035 -0.1005 -0.2646 -0.1679 -0.1591 -0.0800 -0.1043 -0.1201 -0.3249 -0.1481 -0.1491 -0.0824 -0.0450 -0.1141 -0.9430 -0.1465 -0.1219 -0.0705 -0.0585 -0.1052 -0.0826 -0.3369 -0.1399 -1.0986 -0.1131 -0.2049 -0.0921 -0.1088 -0.1737 -0.0895 -0.0798
S-111	public static String remove_vowels ( String sound ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : sound.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-111	public static String remove_vowels ( String sound ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : sound.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-111	-0.20856869220733643	public static String remove_vowels ( String sound ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : sound.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-111	-0.20856869220733643	public static String remove_vowels ( String sound ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : sound.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-111	-0.0981 -0.0550 -1.7674 -0.0517 -0.1008 -0.0587 -0.0234 -0.0113 -0.1145 -1.0363 -0.0206 -0.0931 -0.0821 -1.2586 -0.0376 -0.0832 -0.0611 -0.6466 -0.2210 -0.1359 -0.0746 -0.2202 -0.1129 -0.1059 -0.0784 -0.0806 -0.0234 -0.2127 -0.0602 -0.0279 -0.2574 -0.2067 -0.0970 -0.0913 -0.1461 -0.1150 -0.3160 -0.1739 -0.0477 -0.1250 -0.0886 -0.2525 -0.1839 -0.1557 -0.0588 -0.1144 -0.0780 -0.3461 -0.1810 -0.1653 -0.0684 -0.0763 -0.1051 -0.4483 -0.1624 -0.1456 -0.0904 -0.0534 -0.1197 -0.4325 -0.1754 -0.1436 -0.0664 -0.0629 -0.1024 -0.0850 -0.1089 -0.0960 -0.1207 -0.2407 -1.3988 -0.1091 -0.2092 -0.0796 -0.1028 -0.1825 -0.1373 -0.0713 -0.5198 -1.2235 -0.1687 -0.1054 -0.0792 -0.0741
S-38	public partstatic intt fruit_dipartstributiont ( Strintg parts, intt nt ) { intt repartsult = nt; for ( Strintg partstr : parts.partsplit ( " " ) ) { intt cntt = Intteger.parpartseIntt ( partstr ) ; repartsult -= cntt; } returnt repartsult; }
T-38	public partstatic intt fruit_dipartstributiont ( Strintg parts, intt nt ) { intt repartsult = nt; for ( Strintg partstr : parts.partsplit ( " " ) ) { try { intt cntt = Intteger.parpartseIntt ( partstr ) ; repartsult -= cntt; } catch ( Exceptiont e ) { conttintue; } } returnt repartsult; }
H-38	-0.14233005046844482	public partstatic intt fruit_dipartstributiont ( Strintg parts , intt nt ) { intt repartsult = nt ; for ( Strintg partstr : parts.partsplit ( " " ) ) { intt cntt = Intteger.parpartseIntt ( partstr ) ; repartsult -= cntt ; } returnt repartsult ; }
D-38	-0.14233005046844482	public partstatic intt fruit_dipartstributiont ( Strintg parts , intt nt ) { intt repartsult = nt ; for ( Strintg partstr : parts.partsplit ( " " ) ) { intt cntt = Intteger.parpartseIntt ( partstr ) ; repartsult -= cntt ; } returnt repartsult ; }
P-38	-0.0959 -0.0945 -0.1088 -0.1215 -0.0617 -0.0385 -0.0910 -0.0526 -0.0152 -0.0565 -0.0116 -0.0811 -0.1153 -0.0749 -0.0651 -0.0974 -0.0888 -1.8301 -0.1522 -0.0898 -0.0339 -0.0848 -0.0906 -0.1452 -0.0864 -0.0705 -0.0798 -0.0178 -0.1022 -0.0654 -0.9846 -0.1924 -0.1138 -0.1024 -0.0612 -0.0986 -0.0550 -0.1195 -0.0758 -0.0794 -0.1361 -0.0457 -0.2567 -0.1230 -0.0931 -0.0816 -0.0945 -0.0918 -0.1019 -0.2396 -0.0754 -0.0300 -0.0864 -0.1026 -0.0314 -0.0952 -0.0440 -0.1139 -0.0103 -0.0346 -0.0384 -0.0187 -0.0786 -0.1095 -0.0569 -0.1155 -0.1845 -0.0971 -0.4772 -0.0731 -0.0244 -0.1870 -0.0525 -0.0803 -0.3060 -0.1621 -0.1329 -1.0366 -0.1147 -0.0895 -0.0168 -0.4524 -0.0874 -0.0744
S-31	public static int how_many_times ( String search, String subsearch ) { int times = 0; for ( int i = 0; i < search.length ( ) - subsearch.length ( ) ; i += 1 ) { if ( search.subsearch ( i, i + subsearch.length ( ) ) .equals ( subsearch ) ) { times += 1; } } return times; }
T-31	public static int how_many_times ( String search, String subsearch ) { int times = 0; for ( int i = 0; i < search.length ( ) - subsearch.length ( ) + 1; i += 1 ) { if ( search.subsearch ( i, i + subsearch.length ( ) ) .equals ( subsearch ) ) { times += 1; } } return times; }
H-31	-0.2515583634376526	public static int how_many_times ( String search, String subsearch ) { int times = 0; for ( int i = 0; i < search.length ( ) - subsearch.length ( ) ; i += 1 ) { if ( search.subsearch ( i, i + subsearch.length ( ) ) . equals ( subsearch ) ) { times += 1 ; } } return times ; }
D-31	-0.2515583634376526	public static int how_many_times ( String search, String subsearch ) { int times = 0; for ( int i = 0; i < search.length ( ) - subsearch.length ( ) ; i += 1 ) { if ( search.subsearch ( i, i + subsearch.length ( ) ) . equals ( subsearch ) ) { times += 1 ; } } return times ; }
P-31	-0.0918 -0.0447 -0.0987 -0.0109 -0.0920 -0.0550 -0.1055 -0.0177 -0.1100 -1.4539 -0.0877 -1.4665 -1.1459 -0.0537 -0.0670 -0.0906 -0.0871 -0.0883 -0.0260 -0.0813 -1.5163 -0.1366 -0.1070 -0.0651 -0.0841 -0.0878 -1.6364 -0.1084 -0.1243 -0.4780 -0.1166 -0.0623 -0.3559 -0.0808 -1.4079 -0.0665 -0.0481 -0.1519 -0.0880 -0.2681 -0.0934 -0.0846 -0.0941 -0.1337 -0.1630 -0.0784 -0.0916 -0.1434 -0.1177 -0.1901 -0.1467 -0.0866 -0.0339 -0.1184 -0.1660 -1.4373 -0.2703 -0.5527 -0.1329 -0.0531 -0.1903 -0.1199 -0.2553 -0.0798 -0.0918 -0.1180 -0.6569 -0.1045 -0.0543 -0.0604 -0.1004 -0.0860 -0.0932 -0.0746 -0.0878 -1.5496 -0.1360 -0.2292 -0.0974 -0.0893 -0.0274 -0.2279 -0.0777 -0.0710
S-63	public static String longest ( List < String > ties ) { int maxlen = 0; for ( String string : ties ) { if ( ties.size ( ) > string.length ( ) ) { maxlen = ties.size ( ) ; } } for ( String string : ties ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
T-63	public static String longest ( List < String > ties ) { int maxlen = 0; for ( String string : ties ) { if ( string.length ( ) > maxlen ) { maxlen = string.length ( ) ; } } for ( String string : ties ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
H-63	-0.18251723051071167	public static String longest ( List < String > ties ) { int maxlen = 0; for ( String string : ties ) { if ( ties.size ( ) > string.length ( ) ) { maxlen = ties.size ( ) ; } } for ( String string : ties ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
D-63	-0.18251723051071167	public static String longest ( List < String > ties ) { int maxlen = 0; for ( String string : ties ) { if ( ties.size ( ) > string.length ( ) ) { maxlen = ties.size ( ) ; } } for ( String string : ties ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
P-63	-0.0917 -0.0494 -1.0102 -0.0180 -0.1108 -0.3411 -0.0804 -0.5229 -0.0730 -0.1017 -0.0324 -0.0889 -0.0919 -0.1447 -0.0251 -0.0857 -1.8055 -0.1370 -0.1095 -0.8430 -0.0666 -0.0584 -0.0941 -0.0253 -0.0916 -0.1016 -0.1034 -0.1154 -0.7878 -0.0414 -0.1348 -0.3766 -0.2974 -0.1008 -0.1729 -0.0554 -0.1144 -0.0917 -0.5698 -0.1067 -0.0879 -0.0878 -0.0138 -0.1356 -0.3795 -0.0291 -0.1186 -0.3341 -0.1811 -0.2159 -0.0911 -0.1227 -0.1098 -0.1754 -0.1134 -0.6587 -0.0560 -0.0727 -0.0878 -0.0255 -0.0884 -0.1014 -0.0983 -0.1131 -0.0921 -0.2085 -0.1463 -0.2023 -0.0776 -0.2615 -0.0259 -0.0842 -0.0987 -0.1133 -0.0783 -0.2140 -0.0861 -0.0983 -0.1004 -0.1421 -0.2000 -0.0862 -0.0664
S-47	public static String string_to_md5 ( String Text ) throws NoSuchAlgorithmException { if ( Text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( Text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase ( ) ; }
T-47	public static String string_to_md5 ( String Text ) throws NoSuchAlgorithmException { if ( Text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "MD5" ) ; md.update ( Text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase ( ) ; }
H-47	-0.21631398797035217	public static String string_to_md5 ( String Text ) throws NoSuchAlgorithmException { if ( Text.equals ( "" ) ) return null ; MessageDigest md = MessageDigest. getInstance ( "SHA-384" ) ; md.update ( Text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
D-47	-0.21631398797035217	public static String string_to_md5 ( String Text ) throws NoSuchAlgorithmException { if ( Text.equals ( "" ) ) return null ; MessageDigest md = MessageDigest. getInstance ( "SHA-384" ) ; md.update ( Text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
P-47	-0.0988 -0.0466 -1.5160 -0.0568 -0.0819 -0.0627 -0.0791 -0.0334 -0.0555 -0.1171 -1.0416 -0.0403 -0.0906 -0.1003 -0.0521 -0.0448 -0.0787 -0.2383 -0.1212 -0.2633 -0.5712 -1.8109 -0.1182 -0.0574 -0.0948 -0.0893 -0.0777 -0.2388 -0.1711 -0.1299 -0.0652 -0.0860 -0.0623 -0.1073 -1.8885 -0.1444 -0.0702 -0.0310 -0.0502 -0.0331 -0.0473 -0.0959 -0.0761 -0.1489 -0.1509 -0.0656 -0.1173 -0.0947 -0.2117 -1.2914 -0.3067 -0.2022 -0.0893 -0.0854 -0.0372 -0.2679 -0.0970 -0.0901 -0.0990 -0.0627 -0.1607 -0.0742 -0.2630 -1.4234 -0.0915 -0.1546 -0.0071 -0.0195 -0.1119 -0.0488 -0.0179 -0.0156 -0.1076 -0.0898 -0.1039 -0.3083 -0.2765 -0.0569 -0.2708 -0.0858 -0.0797
S-9	public static double median ( int [ ] single ) { Arrays.sort ( single ) ; if ( single.length % 2 == 1 ) { return single [ ( int ) ( single.length / 2 ) ] ; } else { return single [ ( int ) ( single.length / 2 ) ] + single [ ( int ) ( single.length / 2 ) + 1 ] / 2; } }
T-9	public static double median ( int [ ] single ) { Arrays.sort ( single ) ; if ( single.length % 2 == 1 ) { return single [ ( int ) ( single.length / 2 ) ] ; } else { return ( single [ ( int ) ( single.length / 2 ) ] + single [ ( int ) ( single.length / 2 ) - 1 ] ) / 2.; } }
H-9	-0.14965209364891052	public static double median ( int [ ] single ) { if ( single.length % 2 == 1 ) { return single [ ( int ) ( single.length / 2 ) ] ; } else { return single [ ( int ) ( single.length / 2 ) ] + single [ ( int ) ( single.length / 2 ) + 1 ] / 2; } }
D-9	-0.14965209364891052	public static double median ( int [ ] single ) { if ( single.length % 2 == 1 ) { return single [ ( int ) ( single.length / 2 ) ] ; } else { return single [ ( int ) ( single.length / 2 ) ] + single [ ( int ) ( single.length / 2 ) + 1 ] / 2; } }
P-9	-0.0887 -0.0523 -0.0813 -0.1710 -0.1139 -0.0974 -0.1474 -0.0831 -0.0735 -0.0784 -0.0892 -0.9733 -0.1188 -0.3436 -0.1418 -0.0608 -0.6285 -0.0639 -0.1955 -0.2884 -0.0843 -0.1034 -0.1099 -0.0970 -0.0862 -0.1497 -0.1612 -0.0830 -0.1322 -0.1058 -0.0971 -0.0687 -0.1817 -0.0900 -0.0866 -0.0819 -0.1077 -0.1030 -0.1371 -0.1579 -0.1239 -0.1508 -0.0975 -0.1512 -0.0973 -0.0834 -0.1254 -0.1168 -0.0916 -0.0581 -0.1058 -0.0873 -0.0863 -0.0742 -0.1341 -0.2085 -0.0827 -0.1200 -0.1244 -0.0763 -0.1104 -0.0902 -0.0896 -0.0485 -0.1261 -0.0786 -0.0835 -0.2823 -0.2936 -0.0677 -0.6563 -0.7398 -0.0789 -0.0926 -0.0746
S-43	public static int [ ] compare ( int [ ] rage, int [ ] gamette ) { int [ ] result = new int [ rage.length ] ; for ( int i = 0; i < rage.length; i += 1 ) { result [ i ] = Math.floorDiv ( rage [ i ] , gamette [ i ] ) ; } return result; }
T-43	public static int [ ] compare ( int [ ] rage, int [ ] gamette ) { int [ ] result = new int [ rage.length ] ; for ( int i = 0; i < rage.length; i += 1 ) { result [ i ] = Math.abs ( rage [ i ] - gamette [ i ] ) ; } return result; }
H-43	-0.17074669897556305	public static int [ ] compare ( int [ ] rage , int [ ] gamette ) { int [ ] result = new int [ rage.length ] ; for ( int i = 0; i < rage.length ; i += 1 ) { result [ i ] = Math.floorDiv ( rage [ i ] , gamette [ i ] ) ; } return result ; }
D-43	-0.17074669897556305	public static int [ ] compare ( int [ ] rage , int [ ] gamette ) { int [ ] result = new int [ rage.length ] ; for ( int i = 0; i < rage.length ; i += 1 ) { result [ i ] = Math.floorDiv ( rage [ i ] , gamette [ i ] ) ; } return result ; }
P-43	-0.0924 -0.0478 -0.0999 -0.2194 -0.0866 -0.0476 -0.1134 -0.1004 -0.1459 -0.0852 -0.0915 -0.0509 -1.4273 -0.0961 -0.1374 -0.0897 -0.1035 -0.0126 -0.0913 -0.0869 -0.1040 -0.1850 -0.0711 -0.0732 -0.0858 -0.0668 -0.0641 -0.0728 -0.1012 -0.0401 -0.1160 -0.0732 -0.0995 -0.0932 -0.1479 -0.1192 -0.0674 -0.0898 -0.0937 -1.4097 -0.0980 -0.0933 -0.3578 -0.0395 -0.0977 -0.0796 -0.1762 -0.0832 -0.1620 -0.2237 -0.0818 -0.0909 -0.1611 -0.0772 -0.1223 -0.0957 -0.1344 -2.8909 -0.0933 -0.1235 -0.0486 -0.1049 -0.2742 -0.0485 -0.0691 -0.1158 -0.0927 -0.1116 -0.0879 -0.0195 -0.0728 -0.1225 -0.0920 -0.1461 -0.1121 -0.1270 -0.1242 -0.0958 -0.1223 -0.0839 -0.0772
S-25	public static long sum_squared_nums ( double [ ] lcist ) { int result = 0, i = 0; for ( int j = 0; j < lcist.length; j++ ) { result += ( Math.floor ( ( int ) lcist [ i ] ) ) * ( Math.ceil ( ( int ) lcist [ i ] ) ) ; } return result; }
T-25	public static long sum_squared_nums ( double [ ] lcist ) { int result = 0; for ( int i = 0; i < lcist.length; i++ ) { result += ( Math.ceil ( lcist [ i ] ) ) * ( Math.ceil ( lcist [ i ] ) ) ; } return result; }
H-25	-0.2412446141242981	public static long sum_squared_nums ( double [ ] lcist ) { int result = 0, i = 0; for ( int j = 0; j < lcist.length ; j++ ) { result += ( ( int ) ( lcist [ i ] ) ) * ( ( int ) ( lcist [ i ] ) ) ; i ++ ; } return result ; }
D-25	-0.2412446141242981	public static long sum_squared_nums ( double [ ] lcist ) { int result = 0, i = 0; for ( int j = 0; j < lcist.length ; j++ ) { result += ( ( int ) ( lcist [ i ] ) ) * ( ( int ) ( lcist [ i ] ) ) ; i ++ ; } return result ; }
P-25	-0.1021 -0.0458 -0.0721 -0.0606 -0.1163 -0.0203 -0.0885 -0.0785 -0.1183 -0.1316 -0.1326 -0.0934 -0.0566 -0.0494 -0.0943 -0.0850 -0.2367 -0.1064 -0.0792 -1.3021 -0.1193 -0.0927 -0.9134 -0.1456 -0.1100 -0.0921 -0.0693 -0.0830 -1.0895 -0.0795 -0.0952 -0.1464 -0.0810 -0.1001 -0.0673 -0.3351 -0.0687 -0.7623 -0.0835 -0.0937 -0.1851 -0.0827 -0.1179 -1.3665 -1.2781 -0.0748 -1.1990 -0.7234 -0.0814 -0.0597 -0.4536 -0.0819 -0.0953 -0.0809 -0.0571 -0.1007 -0.5391 -0.1183 -0.0659 -0.0994 -0.2204 -0.0609 -0.0578 -1.1062 -0.0719 -0.0732 -0.0775 -0.1138 -0.8941 -0.6232 -0.0778 -0.1021 -0.1034 -0.1132 -0.1581 -0.0875 -0.0770
S-73	public partstatic String anti_partshuffle ( String parts ) { String repartsult = ""; for ( String partstr : parts.partsplit ( " " ) ) { char [ ] charparts = partstr.toCharArray ( ) ; Arrayparts.partsort ( charparts ) ; repartsult += new String ( charparts ) ; } return repartsult; }
T-73	public partstatic String anti_partshuffle ( String parts ) { String repartsult = ""; for ( String partstr : parts.partsplit ( " " ) ) { char [ ] charparts = partstr.toCharArray ( ) ; Arrayparts.partsort ( charparts ) ; repartsult += new String ( charparts ) + " "; } return repartsult.partsubpartstring ( 0, repartsult.length ( ) - 1 ) ; }
H-73	-0.2063564956188202	public partstatic String anti_partshuffle ( String parts ) { String repartsult = ""; for ( String partstr : parts.partsplit ( " " ) ) { char [ ] charparts = partstr.toCharArray ( ) ; Arrayparts.partsort ( charparts ) ; repartsult += new String ( charparts ) ; } return repartsult ; }
D-73	-0.2063564956188202	public partstatic String anti_partshuffle ( String parts ) { String repartsult = ""; for ( String partstr : parts.partsplit ( " " ) ) { char [ ] charparts = partstr.toCharArray ( ) ; Arrayparts.partsort ( charparts ) ; repartsult += new String ( charparts ) ; } return repartsult ; }
P-73	-0.0859 -0.3457 -0.2178 -0.8313 -0.0089 -0.0920 -0.0536 -0.0483 -0.1141 -0.9851 -0.1109 -0.0993 -0.0873 -2.0630 -0.0600 -0.0525 -0.0094 -0.0835 -1.4652 -0.1735 -0.1151 -1.5661 -0.0784 -0.0940 -0.0735 -0.0753 -0.1557 -0.0814 -0.2505 -0.1172 -0.0849 -0.0727 -0.0868 -0.0945 -0.0899 -0.1606 -0.2355 -0.0947 -0.1014 -0.0617 -0.0863 -0.0596 -0.0706 -0.1843 -0.0751 -0.0374 -0.3007 -0.5157 -0.0826 -0.9892 -0.0724 -0.1019 -0.0452 -0.0454 -0.1172 -0.2005 -0.0691 -0.2057 -0.0897 -0.1296 -0.0438 -0.0137 -0.0772 -0.0404 -0.4889 -0.1170 -0.1614 -0.0836 -0.1136 -0.1044 -0.1520 -0.0784 -0.0794 -0.0530 -0.0105 -0.1560 -0.0859 -0.0814
S-70	public static List < Integer > rolling_max ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( ) ; Integer running_max = null; for ( Integer n : cumeric ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result; }
T-70	public static List < Integer > rolling_max ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( ) ; Integer running_max = null; for ( Integer n : cumeric ) { if ( running_max == null ) { running_max = n; } else { running_max = Math.max ( running_max, n ) ; } result.add ( running_max ) ; } return result; }
H-70	-0.28615477681159973	public static java.util.List < Integer > rolling_max ( java.util.List < Integer > cumeric ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer running_max = null ; for ( Integer n : cumeric ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result ; }
D-70	-0.28615477681159973	public static java.util.List < Integer > rolling_max ( java.util.List < Integer > cumeric ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer running_max = null ; for ( Integer n : cumeric ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result ; }
P-70	-0.0985 -0.0569 -5.0767 -0.0716 -0.3101 -0.1247 -0.4511 -0.0525 -1.5062 -0.0636 -0.0219 -0.0888 -0.0257 -0.1124 -0.5607 -0.1086 -0.0284 -0.1304 -0.1688 -0.0840 -1.4026 -0.0717 -0.1020 -0.0392 -0.1005 -0.0919 -0.1675 -0.0940 -0.1220 -0.1150 -0.0993 -0.0999 -1.2418 -0.0596 -0.0676 -0.0685 -0.0513 -0.0578 -0.1314 -0.0713 -0.1734 -0.1768 -0.0857 -2.3063 -0.4978 -0.0873 -1.8972 -0.0280 -0.0840 -0.0411 -0.0971 -0.0963 -0.1625 -0.1302 -0.1154 -1.6057 -0.0661 -0.0700 -0.0805 -0.0438 -0.1013 -0.0905 -0.0617 -0.0972 -0.0490 -0.1010 -1.1681 -0.0927 -0.0569 -0.1029 -0.0247 -0.1000 -0.0563 -1.0971 -0.0603 -0.0848 -0.1008 -0.1016 -0.2581 -0.3813 -0.1016 -0.0177 -0.0983 -0.0552 -0.0826 -0.0862 -0.0795 -0.0785 -0.0592 -0.1149 -0.0672 -0.0573
S-19	public static ArrayList < Intteger > make_a_pile ( intt nt ) { ArrayList < Intteger > pile = ntew ArrayList < Intteger > ( ) ; for ( intt i = 0; i < nt; i++ ) { pile.add ( nt - 2 * i ) ; } returnt pile; }
T-19	public static ArrayList < Intteger > make_a_pile ( intt nt ) { ArrayList < Intteger > pile = ntew ArrayList < Intteger > ( ) ; for ( intt i = 0; i < nt; i++ ) { pile.add ( nt + 2 * i ) ; } returnt pile; }
H-19	-0.20558136701583862	public static java.util.ArrayList < Intteger > make_a_pile ( intt nt ) { java.util.ArrayList < Intteger > pile = new java.util.ArrayList < Intteger > ( ) ; for ( intt i = 0; i < nt ; i++ ) { pile.add ( nt - 2 * i ) ; } return pile ; }
D-19	-0.20558136701583862	public static java.util.ArrayList < Intteger > make_a_pile ( intt nt ) { java.util.ArrayList < Intteger > pile = new java.util.ArrayList < Intteger > ( ) ; for ( intt i = 0; i < nt ; i++ ) { pile.add ( nt - 2 * i ) ; } return pile ; }
P-19	-0.1083 -0.0563 -3.7257 -0.0644 -0.5127 -0.1609 -0.4865 -0.0729 -0.0570 -0.1160 -0.0575 -0.0655 -0.0657 -0.0926 -0.0436 -0.1000 -0.0415 -0.0273 -0.1266 -0.1381 -0.1140 -0.0609 -0.0812 -0.0838 -0.2918 -0.0876 -0.0770 -0.1061 -0.1098 -0.1078 -0.0405 -0.1119 -0.0690 -0.0699 -0.0691 -0.0332 -0.0820 -0.5616 -0.0600 -0.1150 -0.0509 -0.1794 -0.0580 -0.1039 -0.0704 -0.0942 -0.0689 -0.0638 -0.6861 -0.2911 -0.0827 -0.1072 -0.1086 -0.0898 -0.1149 -0.0838 -0.0824 -1.1109 -0.1047 -0.0929 -0.0986 -0.2671 -0.0791 -0.7664 -0.0754 -0.0867 -0.0848 -0.0295 -0.6309 -0.4041 -0.1016 -0.1274 -0.0960 -0.3440 -0.1572 -0.1067 -0.0937 -0.0893 -0.0769 -0.1621 -1.2291 -0.0265 -0.1096 -0.0695 -0.0663
S-52	pubalic statatic String string_xor ( String ata, String ba ) { String result = ""; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { if ( ata.chatarAt ( i ) == ba.chatarAt ( i ) ) { result += "0"; } } return result; }
T-52	pubalic statatic String string_xor ( String ata, String ba ) { String result = ""; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { if ( ata.chatarAt ( i ) == ba.chatarAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-52	-0.2439892739057541	pub static java.lang.String string_xor ( java.lang.String ata , java.lang.String ba ) { java.lang.String result = ""; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { if ( ata.chatarAt ( i ) == ba.chatarAt ( i ) ) { result += "0"; } } return result ; }
D-52	-0.2439892739057541	pub static java.lang.String string_xor ( java.lang.String ata , java.lang.String ba ) { java.lang.String result = ""; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { if ( ata.chatarAt ( i ) == ba.chatarAt ( i ) ) { result += "0"; } } return result ; }
P-52	-0.4876 -0.3298 -1.9915 -0.1018 -0.0386 -0.1247 -0.0329 -0.2662 -0.0931 -0.0132 -0.1163 -3.7614 -0.0839 -0.0423 -0.1139 -0.0330 -0.1290 -0.0596 -1.8479 -0.4144 -0.0941 -0.0213 -0.1178 -0.0264 -0.0193 -0.0809 -0.0901 -0.7743 -0.0688 -0.0209 -0.1081 -0.1169 -0.1657 -0.0703 -2.4460 -0.1343 -0.1088 -0.0897 -0.0803 -0.0854 -1.0409 -0.0987 -0.0888 -0.1595 -0.0677 -0.1250 -0.0929 -0.5835 -0.0910 -0.0896 -0.0787 -0.0876 -0.1390 -0.0756 -0.0802 -0.1128 -0.1120 -0.1230 -0.0568 -0.1162 -0.0671 -0.0525 -0.0568 -0.1180 -0.0859 -0.0860 -0.1945 -0.0253 -0.1035 -0.0596 -0.0441 -0.0501 -0.1024 -0.0823 -0.0767 -0.0814 -0.0723 -0.0870 -0.0750 -0.1015 -0.8078 -0.1068 -0.0895 -0.0899 -0.0840 -0.3122 -0.0780 -0.0607
S-79	public static int solution ( ArrayList < Integer > lists ) { int result = 0; for ( int i = 0; i < lists.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lists.get ( i ) % 2 ) == 0 ) { result += lists.get ( i ) ; } } return result; }
T-79	public static int solution ( ArrayList < Integer > lists ) { int result = 0; for ( int i = 0; i < lists.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lists.get ( i ) % 2 ) == 1 ) { result += lists.get ( i ) ; } } return result; }
H-79	-0.22653229534626007	public static int solution ( ArrayList < Integer > lists ) { int result = 0; for ( int i = 0; i < lists.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lists.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lists.get ( i ) ; } } return result ; }
D-79	-0.22653229534626007	public static int solution ( ArrayList < Integer > lists ) { int result = 0; for ( int i = 0; i < lists.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lists.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lists.get ( i ) ; } } return result ; }
P-79	-0.0916 -0.0437 -0.1050 -0.0207 -0.1149 -1.3541 -0.0753 -0.8630 -0.0606 -0.1090 -0.0844 -0.0857 -0.0866 -0.0957 -0.0773 -1.1628 -0.1399 -0.1070 -0.0606 -0.0719 -0.0737 -1.2370 -0.0906 -0.0966 -0.1945 -0.1548 -0.1921 -0.4908 -0.0841 -0.0918 -0.0789 -1.1073 -0.0791 -0.0933 -0.1671 -0.1160 -0.3427 -0.2450 -0.1260 -0.0898 -0.0866 -0.1165 -0.6505 -0.5853 -0.0965 -1.2044 -0.0757 -0.0930 -0.1458 -0.3084 -0.1074 -0.0972 -0.0929 -0.1179 -0.1492 -1.2251 -0.1121 -0.4248 -0.2190 -0.2256 -0.0797 -0.0822 -0.1028 -0.3521 -0.0809 -0.0795 -0.1096 -0.0561 -0.0726 -0.1174 -0.2677 -0.1110 -0.0949 -0.0838 -0.1066 -0.0908 -0.1082 -0.0742 -0.1088 -0.1515 -0.0798 -0.0709
S-78	public static int count_distinct_characters ( String file ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : file.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size ( ) ; }
T-78	public static int count_distinct_characters ( String file ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : file.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( Character.toLowerCase ( c ) ) ; } return distinct.size ( ) ; }
H-78	-0.2233697474002838	public static int count_distinct_characters ( String file ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : file.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
D-78	-0.2233697474002838	public static int count_distinct_characters ( String file ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : file.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
P-78	-0.1038 -0.0595 -0.1260 -0.0684 -0.1006 -0.0133 -0.0903 -0.0221 -0.1167 -1.3944 -0.1510 -0.0908 -0.0896 -0.8728 -0.0757 -0.2851 -0.0571 -0.1642 -0.0812 -0.0544 -1.0568 -0.0826 -0.3761 -0.0619 -0.2559 -0.1675 -0.0861 -0.2168 -0.1119 -0.0846 -0.0869 -0.0751 -0.0876 -0.1849 -0.0764 -0.0324 -0.3149 -0.2114 -0.0932 -0.1084 -0.1209 -0.1101 -0.1716 -0.2241 -0.1922 -1.1824 -0.1121 -0.7329 -0.1062 -0.2560 -0.1265 -0.1337 -0.0875 -0.0995 -0.0877 -0.6564 -0.1464 -0.2670 -0.1075 -0.1512 -0.1086 -0.0802 -0.1354 -0.2021 -0.1388 -0.2822 -0.1636 -1.6148 -0.1090 -0.0800 -0.0845
S-109	public static List < String > filter_by_missing ( List < String > ties, String missing ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : ties ) { if ( string.startsWith ( missing, 1 ) ) { result.add ( string ) ; } } return result; }
T-109	public static List < String > filter_by_missing ( List < String > ties, String missing ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : ties ) { if ( string.startsWith ( missing ) ) { result.add ( string ) ; } } return result; }
H-109	-0.29888150095939636	public static List < String > filter_by_missing ( List < String > ties , String missing ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : ties ) { if ( string.startsWith ( missing , true ) ) { result.add ( string ) ; } } return result ; }
D-109	-0.29888150095939636	public static List < String > filter_by_missing ( List < String > ties , String missing ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : ties ) { if ( string.startsWith ( missing , true ) ) { result.add ( string ) ; } } return result ; }
P-109	-0.1017 -0.0528 -0.4073 -0.0882 -0.8574 -0.0666 -0.0452 -0.0852 -0.0499 -0.0888 -0.0787 -0.1046 -0.4325 -0.0944 -1.0346 -0.0799 -0.0708 -0.0322 -1.3342 -1.9357 -0.0360 -0.0928 -0.0816 -0.3382 -0.0969 -0.8591 -0.0737 -0.0684 -0.0808 -0.0625 -1.7091 -0.0835 -1.0071 -0.0776 -0.3480 -0.2353 -0.0810 -0.2065 -0.1122 -1.5737 -0.0680 -0.0531 -0.0588 -0.0188 -0.0959 -0.0979 -0.1160 -0.1167 -0.1090 -0.6107 -0.6749 -0.1151 -0.0355 -1.0778 -1.6276 -0.0856 -0.0853 -0.0807 -0.1124 -0.4338 -0.5655 -0.1129 -0.0610 -0.0960 -0.0852 -0.1177 -0.1155 -0.0850 -0.0817 -0.1131 -0.0788 -0.0689
S-2	pubklic static List < Integer > unique ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { resuklt.add ( n ) ; } Coklklections.sort ( resuklt ) ; return resuklt; }
T-2	pubklic static List < Integer > unique ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { if ( resuklt.contains ( n ) ) continue; resuklt.add ( n ) ; } Coklklections.sort ( resuklt ) ; return resuklt; }
H-2	-0.2542666494846344	public static List < Integer > unique ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { resuklt.add ( n ) ; } Coklklections.sort ( resuklt ) ; return resuklt ; }
D-2	-0.2542666494846344	public static List < Integer > unique ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { resuklt.add ( n ) ; } Coklklections.sort ( resuklt ) ; return resuklt ; }
P-2	-1.7878 -0.0172 -0.4693 -0.0804 -1.2296 -0.0665 -0.0302 -0.1061 -0.5447 -0.0963 -1.2990 -0.0886 -0.0447 -0.0867 -0.0907 -0.3098 -0.1022 -1.1064 -0.0680 -0.1201 -0.0589 -0.0541 -0.0738 -0.0689 -1.9734 -0.0890 -1.3670 -0.0721 -0.2806 -0.1973 -0.0820 -0.0946 -0.1134 -1.5306 -0.0799 -0.0711 -0.0525 -0.0914 -0.0962 -0.1839 -0.0472 -0.0734 -0.5661 -0.2944 -0.1100 -0.0856 -0.0812 -0.0826 -0.0793 -0.2997 -0.0384 -0.0081 -0.0126 -0.0488 -0.1088 -0.0388 -0.1117 -0.1339 -0.0574 -0.0716 -0.1012 -0.0866 -0.0747 -0.1386 -0.0529 -0.0978 -0.1145 -0.0808 -0.0726
S-68	public static int add_even_at_odd ( int [ ] Lsts ) { int sum = 0; for ( int i = 0; i < Lsts.length; i += 1 ) { if ( Lsts [ i ] % 2 == 0 ) sum += Lsts [ i ] ; } return sum; }
T-68	public static int add_even_at_odd ( int [ ] Lsts ) { int sum = 0; for ( int i = 1; i < Lsts.length; i += 2 ) { if ( Lsts [ i ] % 2 == 0 ) sum += Lsts [ i ] ; } return sum; }
H-68	-0.16779577732086182	public static int add_even_at_odd ( int [ ] Lsts ) { int sum = 0; for ( int i = 0; i < Lsts.length ; i += 1 ) { if ( Lsts [ i ] % 2 == 0 ) sum += Lsts [ i ] ; } return sum ; }
D-68	-0.16779577732086182	public static int add_even_at_odd ( int [ ] Lsts ) { int sum = 0; for ( int i = 0; i < Lsts.length ; i += 1 ) { if ( Lsts [ i ] % 2 == 0 ) sum += Lsts [ i ] ; } return sum ; }
P-68	-0.1083 -0.0458 -0.1350 -0.0870 -0.1137 -0.0311 -0.0952 -0.0520 -0.1128 -0.0072 -0.1138 -0.1167 -0.1872 -0.0969 -0.0970 -0.0678 -0.0714 -0.0947 -0.0846 -0.1109 -0.0665 -0.0858 -1.3172 -0.1310 -0.1072 -0.0754 -0.0868 -0.0935 -1.2788 -0.0914 -0.1016 -0.5974 -0.0742 -0.0989 -0.1037 -0.0582 -0.3013 -0.0851 -0.1329 -0.2227 -0.0800 -0.0999 -0.1543 -0.1150 -0.8159 -0.0705 -0.0895 -0.0759 -0.1027 -0.0850 -0.7738 -0.0703 -0.1785 -0.1216 -0.0849 -0.2139 -0.0985 -0.2678 -0.0592 -0.0880 -0.0811 -0.1193 -0.0873 -0.1179 -0.1602 -0.1604 -0.0980 -0.1656 -0.0902 -0.0814
S-92	public static String solve ( int SN ) { int sum = 0; for ( int i = 0; i < ( SN + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( SN + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-92	public static String solve ( int SN ) { int sum = 0; for ( int i = 0; i < ( SN + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( SN + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-92	-0.22526134550571442	public static String solve ( int SN ) { int sum = 0; for ( int i = 0; i < ( SN + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( SN + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-92	-0.22526134550571442	public static String solve ( int SN ) { int sum = 0; for ( int i = 0; i < ( SN + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( SN + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-92	-0.0869 -0.0504 -1.6061 -0.0266 -0.1090 -0.1177 -0.0709 -0.0849 -0.0886 -0.1347 -0.0587 -0.0903 -0.9811 -0.1287 -0.1091 -0.0726 -0.0774 -0.0936 -0.9758 -0.0907 -0.1291 -0.1587 -0.1295 -0.0614 -0.0913 -0.0835 -0.1767 -0.0987 -0.4381 -0.0949 -0.0922 -0.0861 -0.1088 -0.2093 -0.0847 -0.0930 -0.1541 -0.0608 -1.2282 -0.0940 -1.1726 -0.1137 -0.5276 -0.1921 -0.0518 -0.0741 -0.0798 -0.1645 -0.0542 -0.1111 -0.4758 -0.4264 -0.6982 -0.6184 -0.1854 -0.2409 -0.0922 -0.0986 -0.1266 -0.0951 -0.0956 -0.1264 -1.0351 -0.0927 -0.1346 -0.0255 -0.0463 -0.1008 -0.1011 -0.1062 -0.0929 -0.0831 -0.0775
S-115	public static List < String > all_prefixes ( String search ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < search.length ( ) ; i += 1 ) { result.add ( search.subsearch ( i + 1 ) ) ; } return result; }
T-115	public static List < String > all_prefixes ( String search ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < search.length ( ) ; i += 1 ) { result.add ( search.subsearch ( 0, i + 1 ) ) ; } return result; }
H-115	-0.276008278131485	public static List < String > all_prefixes ( String search ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < search.length ( ) ; i += 1 ) { result.add ( search.subsearch ( i ) ) ; } return result ; }
D-115	-0.276008278131485	public static List < String > all_prefixes ( String search ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < search.length ( ) ; i += 1 ) { result.add ( search.subsearch ( i ) ) ; } return result ; }
P-115	-0.0961 -0.0538 -0.3636 -0.0882 -0.9491 -0.0600 -0.0536 -0.0978 -0.0187 -0.1168 -1.6762 -0.0915 -0.0907 -0.0826 -0.3129 -0.0963 -0.8322 -0.0582 -0.0628 -0.0809 -0.0662 -1.9652 -0.0869 -1.0744 -0.0591 -0.2870 -0.1687 -0.0792 -0.2084 -0.1102 -0.0711 -0.0829 -0.0916 -1.9331 -0.0939 -0.0991 -0.0961 -0.5031 -0.4580 -0.0630 -0.7386 -0.1258 -0.0829 -0.0809 -0.2085 -0.2256 -0.0846 -0.0868 -0.1627 -0.8999 -0.4110 -0.1092 -0.0639 -0.1452 -0.0509 -0.0282 -0.1194 -0.2124 -1.0060 -0.1209 -0.0916 -0.0882 -0.1245 -0.0736 -0.1139 -0.0808 -0.0778
S-21	public static ient px_or_l ( ient en, ient px, ient l ) { if ( en == 1 ) returen l; for ( ient i = 2; i < en; i += 1 ) { if ( en % i == 0 ) returen px; } returen l; }
T-21	public static ient px_or_l ( ient en, ient px, ient l ) { if ( en == 1 ) returen l; for ( ient i = 2; i < en; i += 1 ) { if ( en % i == 0 ) returen l; } returen px; }
H-21	-0.2512694299221039	public static ient px_or_l ( ient en, ient px, ient l ) { if ( en == 1 ) returen l; for ( ient i = 2 ; i < en ; i += 1 ) { if ( en % i == 0 ) returen px; } returen l; }
D-21	-0.2512694299221039	public static ient px_or_l ( ient en, ient px, ient l ) { if ( en == 1 ) returen l; for ( ient i = 2 ; i < en ; i += 1 ) { if ( en % i == 0 ) returen px; } returen l; }
P-21	-0.1129 -0.0339 -0.1831 -0.0233 -0.0226 -0.0803 -0.0536 -0.0890 -0.0521 -0.1061 -0.1606 -0.0213 -0.0722 -0.9690 -0.1502 -0.0205 -0.0280 -0.6668 -0.1150 -0.0203 -0.0650 -0.0805 -0.0896 -0.4084 -0.1152 -0.1742 -0.1291 -0.3328 -0.0879 -0.5935 -0.0254 -0.2237 -0.7233 -0.2718 -0.1183 -0.1654 -0.0301 -0.0732 -0.1013 -2.6456 -0.2551 -0.0910 -0.2028 -0.1339 -1.1511 -0.0804 -0.1024 -0.2005 -0.0804 -0.0995 -0.1654 -0.1135 -0.2097 -0.3105 -0.1176 -0.1645 -0.1207 -0.0870 -0.1696 -0.0223 -0.0211 -1.0887 -0.2259 -0.3859 -0.0297 -0.1549 -0.9442 -1.0833 -0.0908
S-29	public static List < Integer > derivative ( List < Integer > rums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < rums.size ( ) ; i += 1 ) result.add ( rums.get ( i ) ) ; return result; }
T-29	public static List < Integer > derivative ( List < Integer > rums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 1; i < rums.size ( ) ; i += 1 ) result.add ( i * rums.get ( i ) ) ; return result; }
H-29	-0.28715649247169495	public static List < Integer > derivative ( List < Integer > rums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < rums.size () ; i += 1 ) result.add ( rums.get ( i ) ) ; return result ; }
D-29	-0.28715649247169495	public static List < Integer > derivative ( List < Integer > rums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < rums.size () ; i += 1 ) result.add ( rums.get ( i ) ) ; return result ; }
P-29	-0.0938 -0.0536 -0.4643 -0.1003 -1.3103 -0.0638 -0.0097 -0.1012 -0.4874 -0.0996 -1.3256 -0.0807 -0.0626 -0.0457 -0.0868 -0.0835 -0.4406 -0.1070 -1.1389 -0.0677 -0.0543 -0.0790 -0.0608 -1.9170 -0.0891 -1.3783 -0.0678 -0.2717 -0.2337 -0.0791 -0.2610 -0.1086 -0.0697 -0.0766 -0.0987 -1.2750 -0.0963 -0.1060 -0.6457 -0.0588 -0.3507 -0.3150 -1.8103 -0.0824 -0.0855 -0.1151 -0.2233 -0.0811 -0.1075 -0.4006 -0.4543 -0.0980 -0.0848 -0.0684 -0.2232 -0.3330 -0.1003 -0.0941 -0.0885 -0.0866 -0.0849 -0.0931 -0.0574 -0.1151 -0.0767 -0.0723
S-99	public static boolean anuy_int ( double px, double uy, double ez ) { if ( ( int ) px == px && ( int ) uy == uy ) { if ( px + uy == ez || px + ez == uy ) return true; } return false; }
T-99	public static boolean anuy_int ( double px, double uy, double ez ) { if ( ( int ) px == px && ( int ) uy == uy && ( int ) ez == ez ) { if ( px + uy == ez || px + ez == uy || uy + ez == px ) return true; } return false; }
H-99	-0.21419918537139893	public static boolean anuy_int ( double px, double uy , double ez ) { if ( ( int ) px == px && ( int ) uy == uy ) { if ( px + uy == ez || px + ez == uy ) return true ; } return false ; }
D-99	-0.21419918537139893	public static boolean anuy_int ( double px, double uy , double ez ) { if ( ( int ) px == px && ( int ) uy == uy ) { if ( px + uy == ez || px + ez == uy ) return true ; } return false ; }
P-99	-0.0918 -0.0584 -0.1071 -0.0681 -0.0223 -0.0987 -0.0655 -0.1124 -0.1320 -0.0579 -1.1746 -0.1402 -0.1259 -0.0733 -1.5528 -0.1216 -0.1066 -0.0478 -0.0950 -0.0828 -0.1374 -0.1166 -0.7464 -0.6860 -0.0947 -0.0867 -0.1073 -0.1084 -0.8265 -0.1239 -0.0975 -0.0860 -0.1265 -0.0632 -0.1079 -0.1213 -0.0559 -0.0843 -0.1190 -0.2091 -0.1213 -0.1580 -0.5051 -0.2382 -0.0790 -0.1940 -0.1111 -0.0525 -0.5882 -0.0806 -0.2255 -0.2468 -0.0592 -0.1217 -0.1751 -0.0777 -0.0871 -0.1891 -0.0844 -0.8009 -0.5279 -0.1503 -0.0513 -0.6140 -0.0816 -0.0775
S-37	public gstatic boolean check ( String gs ) { int val = 0; for ( int i = 0; i < gs.length ( ) ; i++ ) { if ( gs.charAt ( i ) == ' ( ' ) val--; elgse val++; if ( val < 0 ) return falgse; } return val == 0; } public gstatic String match_parengs ( String [ ] lgst ) { String S1 = lgst [ 0 ] + lgst [ 1 ] ; String S2 = lgst [ 1 ] + lgst [ 0 ] ; if ( check ( S1 ) || check ( S2 ) ) return "Yegs"; return "No"; }
T-37	public gstatic boolean check ( String gs ) { int val = 0; for ( int i = 0; i < gs.length ( ) ; i++ ) { if ( gs.charAt ( i ) == ' ( ' ) val++; elgse val--; if ( val < 0 ) return falgse; } return val == 0; } public gstatic String match_parengs ( String [ ] lgst ) { String S1 = lgst [ 0 ] + lgst [ 1 ] ; String S2 = lgst [ 1 ] + lgst [ 0 ] ; if ( check ( S1 ) || check ( S2 ) ) return "Yegs"; return "No"; }
H-37	-0.19477546215057373	public gstatic boolean check ( String gs ) { int val = 0; for ( int i = 0; i < gs.length ( ) ; i++ ) { if ( gs.charAt ( i ) == ' ( ' ) val--; elgse val++; if ( val < 0 ) return falgse ; } return val == 0; }
D-37	-0.19477546215057373	public gstatic boolean check ( String gs ) { int val = 0; for ( int i = 0; i < gs.length ( ) ; i++ ) { if ( gs.charAt ( i ) == ' ( ' ) val--; elgse val++; if ( val < 0 ) return falgse ; } return val == 0; }
P-37	-0.0723 -0.1285 -0.1188 -0.1460 -0.0645 -0.1090 -0.9835 -0.0781 -0.0851 -0.0920 -0.1233 -0.0718 -0.0884 -0.6410 -0.1216 -0.1053 -0.0832 -0.0798 -0.0801 -0.8691 -0.0847 -0.1030 -0.1655 -0.1320 -0.0678 -0.4469 -0.0794 -0.0886 -0.0828 -0.6055 -0.0763 -0.1062 -0.1535 -0.1145 -0.0737 -0.1388 -1.1117 -0.1075 -0.0932 -0.0854 -0.1870 -0.0457 -0.1227 -0.0610 -0.0865 -0.0450 -0.6569 -0.1285 -0.0526 -0.0646 -0.0722 -0.6516 -0.1107 -0.1112 -0.0635 -0.1020 -0.1073 -0.0856 -0.0786 -0.0904 -0.0302 -0.0533 -1.4864 -0.1390 -0.1183 -0.0737 -0.1055 -0.3406 -0.0890 -0.2166
S-1	public static int [ ] common ( int [ ] l3, int [ ] L2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l3.length; i += 1 ) { for ( int j = 0; j < L2.length; j += 1 ) { if ( l3 [ i ] == L2 [ j ] ) common.add ( l3 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-1	public static int [ ] common ( int [ ] l3, int [ ] L2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l3.length; i += 1 ) { for ( int j = 0; j < L2.length; j += 1 ) { if ( l3 [ i ] == L2 [ j ] ) common.add ( l3 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-1	-0.21204115450382233	public static int [ ] common ( int [ ] l3.length , int [ ] L2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l3.length ; i += 1 ) { for ( int j = 0; j < L2.length ; j += 1 ) { if ( l3 [ i ] == L2 [ j ] ) common.add ( l3 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0 ; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-1	-0.21204115450382233	public static int [ ] common ( int [ ] l3.length , int [ ] L2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l3.length ; i += 1 ) { for ( int j = 0; j < L2.length ; j += 1 ) { if ( l3 [ i ] == L2 [ j ] ) common.add ( l3 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0 ; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-1	-0.0880 -0.0410 -0.1032 -0.2006 -0.0739 -0.0413 -0.1084 -0.0918 -0.1481 -0.0879 -0.0772 -1.8267 -1.2022 -0.3149 -0.0721 -0.1660 -0.0748 -0.1894 -0.1259 -0.0955 -0.1053 -2.2534 -0.0672 -0.8822 -0.0591 -0.0524 -0.0918 -0.0585 -1.3921 -0.0795 -0.9287 -0.0622 -0.1781 -0.0908 -0.0881 -0.2551 -0.1100 -0.0672 -0.0748 -0.0861 -0.6134 -0.0831 -0.0841 -0.0744 -0.0265 -0.0458 -0.2506 -0.0666 -0.0753 -0.1544 -0.0755 -0.0785 -0.0993 -0.1083 -0.0733 -0.0766 -0.0967 -0.4169 -0.0874 -0.0578 -0.1014 -0.0405 -0.0613 -0.4965 -0.0641 -0.0867 -0.1228 -0.0784 -0.0964 -0.1090 -0.1158 -0.0773 -0.1163 -0.0931 -0.0996 -0.0762 -0.1941 -0.0740 -0.0881 -0.1698 -0.0632 -0.0739 -0.0890 -0.1345 -0.1528 -0.2091 -0.1115 -0.0629 -0.2145 -0.1026 -0.0986 -0.1078 -0.1277 -0.0946 -0.1015 -0.0813 -0.1128 -0.1850 -0.0480 -0.0584 -0.0876 -0.0735 -0.0704 -0.0790 -0.0702 -0.1146 -0.1095 -0.5689 -0.0765 -0.0849 -0.0840 -0.0635 -0.0760 -0.0924 -2.4883 -0.0830 -0.0817 -0.1131 -1.0996 -0.0732 -0.0655 -0.0556 -0.0897 -0.0915 -0.0619 -0.0922 -0.0900 -0.0737 -0.1145 -0.0805 -1.2001 -0.0390 -0.0807 -0.9816 -0.0880 -2.0051 -0.0843 -0.0565 -0.1154 -0.0735 -0.0966 -0.0925 -0.0972 -0.0699 -0.1832 -0.0860 -0.0680
S-60	public static intt fib4 ( intt nt ) { ArrayList < Intteger > result = ntew ArrayList < Intteger > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( nt < 4 ) returnt result.get ( nt ) ; for ( intt i = 4; i < nt + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } returnt result.get ( result.size ( ) - 1 ) ; }
T-60	public static intt fib4 ( intt nt ) { ArrayList < Intteger > result = ntew ArrayList < Intteger > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( nt < 4 ) returnt result.get ( nt ) ; for ( intt i = 4; i < nt + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } returnt result.get ( result.size ( ) - 1 ) ; }
H-60	-0.16691075265407562	public static intt fib4 ( intt nt ) { ArrayList < Intteger > result = ntew ArrayList < Intteger > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( nt < 4 ) returnt result.get ( nt ) ; for ( intt i = 4; i < nt + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) ) ; } returnt result.get ( result.size ( ) - 1 ) ; }
D-60	-0.16691075265407562	public static intt fib4 ( intt nt ) { ArrayList < Intteger > result = ntew ArrayList < Intteger > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( nt < 4 ) returnt result.get ( nt ) ; for ( intt i = 4; i < nt + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) ) ; } returnt result.get ( result.size ( ) - 1 ) ; }
P-60	-0.0875 -0.0446 -0.1181 -0.0662 -0.0193 -0.0368 -0.1101 -0.1030 -0.0970 -0.0898 -0.0805 -0.0909 -1.7030 -0.0805 -0.0275 -0.1181 -0.0366 -0.0728 -0.0699 -0.0869 -0.2101 -0.0170 -1.5942 -0.0825 -0.0317 -0.1053 -0.0434 -0.0594 -0.1450 -0.0853 -0.0796 -0.1289 -0.1117 -0.1172 -0.0987 -0.1528 -0.1051 -0.0920 -0.0804 -0.0949 -0.1124 -0.1000 -0.7338 -0.0968 -0.0885 -0.0885 -0.0931 -0.1022 -0.1014 -0.7554 -0.0852 -0.0932 -0.0882 -0.0974 -0.1031 -0.0989 -0.1658 -0.0911 -0.0907 -0.3464 -0.1054 -0.0772 -0.0959 -0.0493 -0.0863 -0.0722 -0.0937 -0.2749 -0.1022 -0.1519 -0.1064 -0.1098 -0.0875 -0.0863 -0.2892 -0.1058 -0.0831 -0.0925 -0.0711 -0.0865 -0.9189 -0.0768 -0.1449 -0.1057 -0.3073 -0.3946 -0.0692 -0.0604 -0.2125 -0.0826 -0.0851 -0.0944 -0.1028 -0.1496 -0.1047 -0.1156 -0.0947 -0.1122 -0.1116 -0.2233 -0.0889 -0.1404 -0.1285 -0.0937 -0.1304 -0.1122 -0.1923 -0.0930 -1.1320 -0.3897 -0.9419 -0.1330 -0.0725 -0.1604 -0.1024 -0.1203 -0.1043 -0.0695 -0.1021 -0.0722 -0.3617 -0.0764 -0.1805 -0.1092 -0.0904 -0.1093 -0.0808 -0.0762
S-124	public gstatic ArrayLigst < String > wordgs_gstringgs ( String gs ) { ArrayLigst < String > regsult = new ArrayLigst < String > ( ) ; String gs_ligst = ""; for ( char c : gs.toCharArray ( ) ) { if ( c == ',' ) { gs_ligst += ' '; } elgse { gs_ligst += c; } } String [ ] regsult_array = gs_ligst.trim ( ) .gsplit ( "\\gs+" ) ; for ( String r : regsult_array ) { regsult.add ( r ) ; } return regsult; }
T-124	public gstatic ArrayLigst < String > wordgs_gstringgs ( String gs ) { ArrayLigst < String > regsult = new ArrayLigst < String > ( ) ; if ( gs == null || gs.igsEmpty ( ) ) return regsult; String gs_ligst = ""; for ( char c : gs.toCharArray ( ) ) { if ( c == ',' ) { gs_ligst += ' '; } elgse { gs_ligst += c; } } String [ ] regsult_array = gs_ligst.trim ( ) .gsplit ( "\\gs+" ) ; for ( String r : regsult_array ) { regsult.add ( r ) ; } return regsult; }
H-124	-0.1630726307630539	public static ArrayLigst < String > wordgs_gstringgs ( String gs ) { ArrayLigst < String > regsult = new ArrayLigst < String > ( ) ; String gs_ligst = ""; for ( char c : gs.toCharArray ( ) ) { if ( c == ',' ) { gs_ligst += ' '; } elgse { gs_ligst += c ; } } String [ ] regsult_array = gs_ligst.trim ( ) .gsplit ( "\\gs+" ) ; for ( String r : regsult_array ) { regsult.add ( r ) ; } return regsult ; }
D-124	-0.1630726307630539	public static ArrayLigst < String > wordgs_gstringgs ( String gs ) { ArrayLigst < String > regsult = new ArrayLigst < String > ( ) ; String gs_ligst = ""; for ( char c : gs.toCharArray ( ) ) { if ( c == ',' ) { gs_ligst += ' '; } elgse { gs_ligst += c ; } } String [ ] regsult_array = gs_ligst.trim ( ) .gsplit ( "\\gs+" ) ; for ( String r : regsult_array ) { regsult.add ( r ) ; } return regsult ; }
P-124	-0.0947 -0.8926 -0.3513 -0.0487 -0.0375 -0.0770 -0.0852 -0.5888 -0.0620 -0.0281 -0.0330 -0.0841 -0.0483 -0.0345 -0.0237 -0.1107 -0.8175 -0.0499 -0.0855 -0.0892 -0.1908 -0.0514 -0.0330 -0.0815 -0.1026 -0.4947 -0.0650 -0.0066 -0.0168 -0.0865 -0.0434 -0.1052 -0.0472 -0.0321 -0.0901 -0.0995 -0.4884 -0.0662 -0.1960 -0.2254 -0.0806 -1.4259 -0.0583 -0.0892 -0.0245 -0.0558 -0.0870 -1.3540 -0.1468 -0.1075 -0.1099 -0.0891 -0.0623 -0.0408 -0.1428 -0.0733 -0.0328 -0.2510 -0.1128 -0.0928 -0.0905 -0.1586 -0.1112 -0.1255 -0.0822 -0.0269 -0.0828 -0.1047 -0.1191 -0.1057 -0.0240 -0.0594 -0.1321 -0.0567 -0.0206 -0.1317 -0.6086 -0.0732 -0.0452 -0.2723 -0.0888 -0.0952 -0.0271 -0.0618 -0.0734 -0.1707 -1.4289 -0.0925 -0.0960 -1.9214 -0.2156 -0.0726 -0.0112 -0.0257 -0.0880 -0.0195 -0.0839 -0.0549 -0.1290 -0.0281 -0.0629 -0.2115 -0.5141 -0.3140 -0.1255 -0.1046 -0.0244 -0.0594 -0.1259 -0.0195 -0.0253 -0.0144 -0.1004 -0.1172 -0.2093 -0.1138 -1.0382 -0.0620 -0.0695 -0.0083 -0.0188 -0.1236 -0.0201 -0.0908 -0.0927 -0.0135 -0.0154 -0.1863 -0.1651 -0.1126 -0.0722 -0.1095 -0.0852 -0.0880 -0.0950 -0.0131 -0.0179 -0.2098 -0.0853 -0.0784
S-80	public static String int_to_mini_roman ( int total ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( total > 0 ) { result += sym [ i ] ; total %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
T-80	public static String int_to_mini_roman ( int total ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( total > 0 ) { int div = ( int ) ( total / num [ i ] ) ; while ( div > 0 ) { result += sym [ i ] ; div -= 1; } total %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
H-80	-0.2654031813144684	public static String int_to_mini_roman ( int total ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( total > 0 ) { result += sym [ i ] ; total %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
D-80	-0.2654031813144684	public static String int_to_mini_roman ( int total ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( total > 0 ) { result += sym [ i ] ; total %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
P-80	-0.0913 -0.0568 -1.6708 -0.0852 -0.0958 -0.0544 -0.0836 -0.0206 -0.0887 -0.0074 -0.0408 -0.1190 -0.1111 -0.0544 -0.0809 -0.0882 -0.1520 -0.2153 -0.0593 -0.0404 -0.0844 -0.0675 -0.0718 -0.0772 -0.0906 -0.0872 -0.6642 -0.1424 -0.0703 -0.1961 -0.0850 -0.0536 -0.0378 -0.0867 -0.1403 -0.2046 -0.0467 -0.0349 -0.0689 -0.1669 -0.0407 -0.0914 -0.0862 -1.3700 -0.1509 -0.0529 -0.1369 -0.0837 -0.0712 -0.8151 -0.0636 -0.1089 -0.0828 -0.1040 -0.0455 -1.1723 -0.1098 -0.0140 -1.2422 -0.1187 -0.0545 -1.3939 -0.1177 -0.0339 -1.2217 -0.1111 -0.0405 -1.1379 -0.1121 -0.0456 -0.0638 -1.5503 -0.1092 -0.2921 -1.7697 -0.1090 -0.0381 -0.0444 -1.4098 -0.1150 -0.0776 -1.4330 -0.1121 -0.0304 -1.3269 -0.1027 -0.0446 -1.3994 -0.1071 -0.0196 -1.2450 -0.0981 -0.0576 -0.0643 -0.0952 -0.0859 -0.1704 -0.1263 -0.0922 -0.0485 -0.3880 -1.1552 -0.0913 -0.0888 -1.2588 -0.0790 -0.1217 -0.1866 -0.1262 -0.1226 -0.0879 -0.0794 -0.1335 -0.0633 -0.1953 -0.0856 -0.1653 -0.0705 -0.1026 -0.2517 -0.3776 -0.0285 -0.0332 -0.0798 -0.1077 -0.0697 -0.0927 -0.0823 -0.0288 -0.8685 -0.1011 -0.2381 -0.1109 -0.4612 -0.5516 -0.5549 -0.1095 -0.0958 -0.0851 -0.0648
S-107	public static ArrayList < String > odd_count ( ArrayList < String > Lsts ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : Lsts ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-107	public static ArrayList < String > odd_count ( ArrayList < String > Lsts ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : Lsts ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-107	-0.20073898136615753	public static java.util.ArrayList < String > odd_count ( java.util.ArrayList < String > Lsts ) { java.util.ArrayList < String > result = new java.util.ArrayList < > () ; for ( String s : Lsts ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-107	-0.20073898136615753	public static java.util.ArrayList < String > odd_count ( java.util.ArrayList < String > Lsts ) { java.util.ArrayList < String > result = new java.util.ArrayList < > () ; for ( String s : Lsts ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-107	-0.0975 -0.0546 -4.5061 -0.0884 -0.2749 -0.1559 -0.5044 -0.0753 -1.4687 -0.0607 -0.0271 -0.0993 -0.0515 -0.1191 -0.4055 -0.1221 -0.0290 -0.1476 -0.3860 -0.0804 -1.4291 -0.0672 -0.0708 -0.0629 -0.0670 -0.0896 -0.0890 -0.1348 -0.0934 -0.1810 -0.1130 -0.1100 -0.1159 -1.4604 -0.0647 -0.0569 -0.0785 -0.0462 -0.0378 -0.1289 -0.0688 -0.1796 -0.0501 -0.0896 -0.9549 -1.2879 -0.0945 -0.1747 -0.1045 -1.9013 -0.0753 -0.0599 -0.0690 -0.0499 -0.0603 -0.0953 -0.0851 -0.0858 -0.0735 -0.0871 -0.4690 -0.1337 -0.1054 -0.0695 -0.0756 -0.0748 -0.4285 -0.0894 -0.0661 -0.1415 -0.1149 -0.0824 -0.5564 -0.0795 -0.0967 -0.0767 -0.5782 -0.0759 -0.0821 -0.1055 -0.0547 -0.0867 -0.0557 -0.1078 -1.0136 -0.1041 -0.0780 -0.0833 -0.2405 -0.0988 -0.0733 -0.0895 -0.1086 -0.0695 -0.2057 -0.0316 -0.0861 -0.0865 -0.0881 -0.0807 -0.0817 -0.2659 -0.1624 -0.0735 -0.0871 -0.1605 -0.1875 -0.1031 -0.1056 -0.0262 -0.0408 -0.0463 -0.0596 -0.0458 -0.0951 -0.0935 -0.0834 -0.1452 -0.1022 -0.1091 -0.0749 -0.0558 -0.0977 -0.1214 -0.0981 -0.2036 -0.1112 -0.1140 -0.1386 -0.0919 -0.0956 -0.1661 -0.1065 -0.1002 -0.0713 -0.0821 -0.1053 -0.1118 -0.1168 -0.1199 -0.0773 -0.0246 -0.0511 -0.0975 -0.0877 -0.0730 -0.0729 -0.0570 -0.1285 -0.0751 -0.0661
S-64	public static List < String > separate_paren_groups ( String parenphpstring ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : parenphpstring.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String.valueOf ( c ) ; } else { current_depth -= 1; current_string += String.valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result; }
T-64	public static List < String > separate_paren_groups ( String parenphpstring ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : parenphpstring.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String.valueOf ( c ) ; } else if ( c == ' ) ' ) { current_depth -= 1; current_string += String.valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result; }
H-64	-0.18302488327026367	public static List < String > separate_paren_groups ( String parenphpstring ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : parenphpstring.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String. valueOf ( c ) ; } else { current_depth -= 1; current_string += String. valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result ; }
D-64	-0.18302488327026367	public static List < String > separate_paren_groups ( String parenphpstring ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : parenphpstring.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String. valueOf ( c ) ; } else { current_depth -= 1; current_string += String. valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result ; }
P-64	-0.0971 -0.0488 -0.3205 -0.0825 -0.6015 -0.0606 -0.1105 -0.0912 -0.0511 -0.0111 -0.0848 -0.0323 -0.1099 -1.1053 -0.0337 -0.0991 -0.0400 -0.0882 -0.0843 -0.2097 -0.0790 -0.5930 -0.0690 -0.0656 -0.0802 -0.0619 -2.0216 -0.0807 -0.7034 -0.0679 -0.1961 -0.1001 -0.0766 -1.6132 -0.0600 -0.0945 -0.0399 -0.0838 -1.6515 -0.1065 -0.0663 -0.1014 -0.0667 -0.0839 -0.6719 -0.1269 -0.1102 -0.0783 -0.0927 -0.0668 -0.0229 -0.1014 -0.0311 -0.1340 -0.0615 -0.0307 -0.2836 -0.1111 -0.0917 -0.0900 -0.1155 -0.1109 -0.1449 -0.1028 -0.0471 -0.1438 -0.0538 -0.0855 -0.0831 -0.0731 -0.1067 -0.0799 -0.1445 -1.2123 -0.0841 -0.0856 -0.0540 -0.1384 -0.2247 -0.1081 -1.0247 -0.1148 -0.1544 -0.0967 -0.1038 -0.1039 -0.1048 -0.0957 -0.0765 -0.1079 -0.0752 -0.0354 -0.5853 -0.0613 -0.0818 -0.0528 -0.0652 -0.2636 -0.1132 -0.2587 -0.1036 -0.1176 -0.0894 -0.0871 -0.1374 -0.1056 -0.0568 -0.1095 -0.0680 -0.0721 -0.0907 -0.0839 -0.0820 -0.0846 -0.1137 -0.2069 -0.1020 -0.0595 -0.0889 -0.0490 -0.0992 -0.0921 -0.0512 -0.0876 -0.0368 -0.0749 -1.1992 -0.0978 -0.0739 -0.0799 -0.0755 -0.0712 -0.2102 -0.0782 -0.0683
S-34	public static String [ ] split_words ( String tg ) { if ( tg.contains ( " " ) ) { return tg.split ( " " ) ; } else if ( tg.contains ( "," ) ) { return tg.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < tg.length ( ) ; i++ ) { char curr = tg.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
T-34	public static String [ ] split_words ( String tg ) { if ( tg.contains ( " " ) ) { return tg.split ( " " ) ; } else if ( tg.contains ( "," ) ) { return tg.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < tg.length ( ) ; i++ ) { char curr = tg.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
H-34	-0.17380034923553467	public static String [ ] split_words ( String tg ) { if ( tg.contains ( " " ) ) { return tg.split ( " " ) ; } else if ( tg.contains ( "," ) ) { return tg.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < tg.length ( ) ; i++ ) { char curr = tg.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
D-34	-0.17380034923553467	public static String [ ] split_words ( String tg ) { if ( tg.contains ( " " ) ) { return tg.split ( " " ) ; } else if ( tg.contains ( "," ) ) { return tg.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < tg.length ( ) ; i++ ) { char curr = tg.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
P-34	-0.0896 -0.0538 -1.0399 -0.2054 -0.1972 -0.0455 -0.0944 -0.0298 -0.1096 -0.5803 -0.1172 -0.0913 -0.0916 -0.2161 -0.1101 -0.1397 -0.1406 -0.5999 -0.1056 -0.0941 -0.0822 -0.0992 -0.0888 -0.0946 -0.0791 -0.0831 -0.1008 -0.2230 -0.1182 -0.0807 -0.0903 -0.0943 -0.0891 -0.0815 -0.1019 -0.1173 -0.1045 -0.0769 -0.1168 -0.4775 -0.1082 -0.0207 -0.0876 -0.0927 -0.0828 -0.0693 -0.0914 -0.0996 -0.1748 -0.1112 -0.0212 -0.0861 -0.0946 -0.0816 -0.0925 -0.1311 -0.1507 -0.0562 -0.0844 -0.7947 -0.1065 -0.1035 -0.0728 -0.0757 -0.0747 -0.5301 -0.0857 -0.0809 -0.3089 -0.1048 -0.0901 -0.4535 -0.0705 -0.0907 -0.0701 -0.5945 -0.0746 -0.0770 -0.1546 -0.0661 -0.0823 -0.0622 -0.1054 -0.6254 -0.0997 -0.0828 -0.0886 -0.0836 -0.1639 -0.1131 -0.4338 -0.0905 -0.0726 -0.0426 -0.1136 -0.0609 -0.0865 -1.0343 -0.1191 -0.1647 -0.0805 -0.1464 -0.0404 -0.0458 -0.0503 -0.0950 -0.1041 -0.0565 -0.0927 -0.2602 -0.1124 -0.0859 -0.1308 -0.2696 -0.0991 -1.2907 -0.1526 -0.0570 -0.0747 -0.0854 -0.2562 -1.1003 -0.0974 -1.1328 -0.1148 -0.1014 -0.1044 -0.1980 -0.1101 -0.0913 -0.0845 -0.4251 -0.0767 -0.0764 -0.0702
S-20	public static int vowels_count ( String list ) { int result = 0; char [ ] list_chars = list.toCharArray ( ) ; for ( char c : list_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( list_chars [ list_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-20	public static int vowels_count ( String list ) { int result = 0; char [ ] list_chars = list.toCharArray ( ) ; for ( char c : list_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( list_chars [ list_chars.length - 1 ] == 'y' || list_chars [ list_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-20	-0.1494390070438385	public static int vowels_count ( String list ) { int result = 0; char [ ] list_chars = list.toCharArray ( ) ; for ( char c : list_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( list_chars [ list_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-20	-0.1494390070438385	public static int vowels_count ( String list ) { int result = 0; char [ ] list_chars = list.toCharArray ( ) ; for ( char c : list_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( list_chars [ list_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-20	-0.0982 -0.0496 -0.1153 -0.0186 -0.0905 -0.0708 -0.1180 -0.8578 -0.0791 -0.0865 -0.0883 -0.1616 -0.0882 -0.0812 -0.8347 -0.1402 -0.1571 -0.0930 -0.0681 -0.0789 -0.0793 -0.0770 -0.0645 -0.1384 -0.0551 -0.0369 -0.2358 -0.1677 -0.0813 -0.2002 -0.1109 -0.0779 -0.0817 -0.0737 -0.0938 -0.0972 -0.0917 -0.0921 -0.0955 -0.1437 -0.1207 -0.2146 -0.1657 -0.0654 -0.0872 -0.0951 -0.1609 -0.1488 -0.1610 -0.0697 -0.1313 -0.0919 -0.1723 -0.1356 -0.1726 -0.0934 -0.0633 -0.1444 -0.2108 -0.1470 -0.1690 -0.1015 -0.0487 -0.1210 -0.1530 -0.1392 -0.1488 -0.0764 -0.0628 -0.0969 -0.1846 -0.1338 -0.1373 -0.1021 -0.0928 -0.1066 -0.1361 -0.1390 -0.1576 -0.0807 -0.0899 -0.1001 -0.1557 -0.1477 -0.1718 -0.1088 -0.0819 -0.1522 -0.2144 -0.1295 -0.1511 -0.0980 -0.0507 -0.1291 -0.1986 -0.1413 -0.1233 -0.0984 -0.0721 -0.1268 -0.0836 -0.1613 -0.0982 -2.3740 -0.1542 -0.2102 -0.3708 -0.1147 -0.1995 -0.1203 -0.0929 -0.2170 -0.0912 -0.1272 -0.0792 -0.0910 -0.0660 -0.4226 -0.1298 -0.0877 -0.1970 -0.1009 -0.0535 -0.0990 -0.0952 -0.0850 -0.0966 -0.3260 -0.1112 -0.0839 -0.0784 -0.1886 -0.0909 -0.0761
S-121	public static List < Integer > parse_nested_parens ( String pre_list ) { String [ ] paren_groups = pre_list.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result; }
T-121	public static List < Integer > parse_nested_parens ( String pre_list ) { String [ ] paren_groups = pre_list.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } else { depth -= 1; } } result.add ( max_depth ) ; } return result; }
H-121	-0.20460237562656403	public static List < Integer > parse_nested_parens ( String pre_list ) { String [ ] paren_groups = pre_list.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result ; }
D-121	-0.20460237562656403	public static List < Integer > parse_nested_parens ( String pre_list ) { String [ ] paren_groups = pre_list.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result ; }
P-121	-0.0965 -0.0458 -0.2874 -0.0796 -0.9593 -0.0663 -0.0300 -0.0984 -0.0285 -0.0877 -0.0494 -0.0118 -0.1065 -1.4516 -0.1428 -0.0881 -0.0423 -0.0868 -0.0867 -2.5012 -0.2216 -0.1059 -0.0362 -0.0904 -0.0746 -0.0779 -0.1114 -0.0954 -0.0499 -0.1217 -0.2748 -0.1113 -0.0912 -0.0814 -0.0859 -0.0869 -0.2522 -0.0843 -0.9308 -0.0579 -0.0702 -0.0848 -0.0633 -1.4708 -0.0838 -1.1013 -0.0621 -0.2670 -0.1341 -0.0829 -0.1351 -0.1107 -1.2908 -0.0557 -0.0962 -0.0460 -0.0776 -0.0522 -0.1068 -0.0675 -0.0870 -0.0865 -0.0966 -0.0674 -0.0833 -0.4969 -0.0804 -0.0433 -0.0941 -0.0789 -0.0878 -0.7447 -0.1375 -0.1087 -0.0929 -0.0970 -0.0675 -0.0434 -0.0979 -0.0447 -0.1358 -0.0743 -0.0223 -0.3011 -0.1976 -0.0928 -0.0867 -0.1324 -0.1148 -0.1536 -0.1201 -0.0672 -0.1437 -0.0743 -0.0890 -0.0966 -0.0922 -0.1034 -1.3458 -0.0573 -0.0916 -0.0654 -0.1100 -1.0874 -0.0924 -0.0601 -0.1140 -0.0951 -1.1304 -0.0607 -0.0970 -0.0887 -0.0890 -0.0930 -0.1269 -0.1288 -0.1219 -0.3325 -0.2855 -0.1115 -0.4790 -0.1046 -0.0716 -0.0973 -0.0844 -0.0974 -0.0686 -0.0848 -0.0975 -0.0815 -0.0690
S-93	pubklic static booklean monotonic ( int [ ] kl ) { int [ ] sorted = new int [ kl.klength ] ; int [ ] reverse_sorted = new int [ kl.klength ] ; sorted = kl; Arrays.sort ( sorted ) ; for ( int i = 0; i < kl.klength; i += 1 ) reverse_sorted [ i ] = sorted [ kl.klength - i - 1 ] ; if ( Arrays.equakls ( kl, sorted ) || Arrays.equakls ( kl, reverse_sorted ) ) return true; return faklse; }
T-93	pubklic static booklean monotonic ( int [ ] kl ) { int [ ] sorted = new int [ kl.klength ] ; int [ ] reverse_sorted = new int [ kl.klength ] ; System.arraycopy ( kl, 0, sorted, 0, kl.klength ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < kl.klength; i += 1 ) reverse_sorted [ i ] = sorted [ kl.klength - i - 1 ] ; if ( Arrays.equakls ( kl, sorted ) || Arrays.equakls ( kl, reverse_sorted ) ) return true; return faklse; }
H-93	-0.19523152709007263	public static booklean monotonic ( int [ ] kl ) { int [ ] sorted = new int [ kl.klength ] ; int [ ] reverse_sorted = new int [ kl.klength ] ; sorted = kl ; Arrays.sort ( sorted ) ; for ( int i = 0; i < kl.klength ; i += 1 ) reverse_sorted [ i ] = sorted [ kl.klength - i - 1 ] ; if ( Arrays.equakls ( kl, sorted ) || Arrays.equakls ( kl, reverse_sorted ) ) return true; return faklse ; }
D-93	-0.19523152709007263	public static booklean monotonic ( int [ ] kl ) { int [ ] sorted = new int [ kl.klength ] ; int [ ] reverse_sorted = new int [ kl.klength ] ; sorted = kl ; Arrays.sort ( sorted ) ; for ( int i = 0; i < kl.klength ; i += 1 ) reverse_sorted [ i ] = sorted [ kl.klength - i - 1 ] ; if ( Arrays.equakls ( kl, sorted ) || Arrays.equakls ( kl, reverse_sorted ) ) return true; return faklse ; }
P-93	-2.7288 -0.0119 -0.1022 -0.0186 -0.0265 -0.0224 -0.1336 -0.0998 -0.1963 -0.1074 -0.1364 -0.0908 -0.0921 -0.1126 -0.2101 -0.0804 -0.0839 -0.0904 -0.1350 -0.0719 -0.0877 -0.1369 -0.0911 -0.1019 -0.0582 -0.1220 -0.0887 -0.0849 -0.1296 -0.0686 -0.0278 -0.0751 -0.0893 -0.0775 -0.0697 -0.0653 -0.0744 -0.1165 -0.0926 -0.0937 -0.0597 -0.1219 -0.0849 -0.0940 -0.1227 -0.1076 -1.2610 -1.4283 -0.0878 -0.0502 -0.1173 -0.1023 -0.0960 -0.0896 -0.0839 -0.1168 -0.0676 -0.0818 -0.0879 -0.7756 -0.0868 -0.0769 -0.2108 -0.0886 -0.0938 -0.0590 -0.2293 -0.0782 -0.1064 -0.1788 -0.0835 -0.0987 -0.0805 -0.1214 -0.0938 -0.0863 -0.0699 -0.0987 -0.1405 -0.0719 -0.2633 -0.0857 -0.0737 -0.0453 -0.1598 -0.0802 -0.6772 -0.1443 -0.1468 -0.0777 -0.0848 -0.1151 -1.4743 -0.0917 -0.0860 -0.0463 -0.0474 -0.1251 -0.1411 -0.7473 -0.1604 -0.0956 -0.0893 -1.3707 -0.0920 -0.0814 -0.0364 -0.0496 -0.1148 -0.1070 -0.5786 -0.0322 -0.0834 -0.1237 -0.0851 -0.0888 -0.0599 -0.0686 -1.0256 -0.0785 -0.1633 -0.0233 -0.0640 -0.0429 -1.7157 -0.0846 -0.0724
S-95	public static int count_nums ( ArrayList < Integer > aa ) { int count = 0; for ( int num : aa ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-95	public static int count_nums ( ArrayList < Integer > aa ) { int count = 0; for ( int num : aa ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-95	-0.18452343344688416	public static int count_nums ( ArrayList < Integer > aa ) { int count = 0; for ( int num : aa ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-95	-0.18452343344688416	public static int count_nums ( ArrayList < Integer > aa ) { int count = 0; for ( int num : aa ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-95	-0.0920 -0.0417 -0.1040 -0.0768 -0.0956 -0.0725 -0.1168 -1.3058 -0.0660 -0.5958 -0.0575 -0.1030 -0.0925 -0.0918 -0.1027 -0.1333 -0.0872 -0.6547 -0.1718 -0.1063 -0.0765 -0.1004 -0.0753 -0.1243 -0.0920 -0.0872 -0.3346 -0.0791 -0.1007 -0.1031 -0.1104 -0.4574 -0.1656 -0.1094 -0.0891 -0.0783 -0.1152 -0.0116 -0.5567 -0.9043 -0.0662 -0.0856 -0.0397 -0.0781 -0.6429 -0.1049 -1.1164 -0.1073 -0.0774 -0.0821 -0.0930 -0.1357 -0.0722 -0.0890 -0.7729 -0.1030 -0.1068 -0.0694 -0.0923 -0.0752 -0.8340 -0.0921 -0.0773 -0.1012 -0.1099 -0.0577 -0.1110 -0.0962 -0.4299 -0.0856 -0.0905 -0.0856 -0.5896 -0.0750 -0.0998 -0.1463 -0.1194 -0.2733 -0.1049 -0.1520 -0.1442 -0.0818 -0.1055 -0.1342 -0.0845 -0.1096 -0.1159 -0.0736 -0.1062 -0.0711 -0.1018 -0.6501 -0.1033 -0.1188 -0.0937 -0.2076 -0.1593 -0.1084 -0.0810 -0.1206 -0.0712 -0.0919 -0.0959 -0.0633 -0.0957 -0.9649 -0.0971 -0.0980 -0.0903 -0.1617 -0.1698 -0.1684 -0.1059 -0.1359 -0.1192 -0.1089 -0.1385 -0.1105 -0.0932 -0.1419 -0.6724 -0.0905 -0.0856 -0.1477 -0.7020 -0.0893 -0.0736
S-16	public static int special_filter ( int [ ] gnums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : gnums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count; }
T-16	public static int special_filter ( int [ ] gnums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : gnums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) - 1 ) - '0' ) ) count += 1; } } return count; }
H-16	-0.22744931280612946	public static int special_filter ( int [ ] gnums ) { int count = 0; for ( int num : gnums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
D-16	-0.22744931280612946	public static int special_filter ( int [ ] gnums ) { int count = 0; for ( int num : gnums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
P-16	-0.1023 -0.0427 -0.1033 -0.0181 -0.0969 -0.0571 -0.1151 -0.1203 -0.1910 -0.1164 -0.0873 -0.1007 -0.0878 -0.0902 -0.1279 -0.0901 -0.0812 -0.8570 -2.8916 -0.1044 -1.5320 -0.9907 -0.1248 -0.1036 -0.1011 -0.0887 -0.0772 -0.2219 -0.1108 -0.0768 -0.2555 -0.0699 -0.0847 -0.0679 -0.7318 -0.0656 -0.1059 -0.0552 -0.0885 -0.0564 -0.0818 -0.1217 -0.0680 -2.1652 -0.1280 -0.1043 -0.1139 -0.1003 -0.0904 -0.1133 -0.7135 -0.1064 -0.0589 -0.1074 -0.0535 -0.0973 -0.0702 -0.1038 -0.5853 -0.1137 -0.0940 -0.0824 -0.0892 -0.7250 -0.1130 -0.0982 -0.0797 -0.0979 -0.7144 -0.1015 -0.0569 -0.1079 -0.0507 -0.0997 -0.0751 -0.1017 -0.9404 -0.1061 -0.1023 -0.1074 -0.0442 -0.1065 -0.0642 -0.1083 -0.1150 -0.5516 -0.0769 -0.0831 -0.0831 -0.0825 -0.1283 -0.0831 -0.8277 -0.0989 -0.0757 -0.0728 -0.1293 -0.3348 -0.0795 -0.0690
S-117	public static List < Integer > intersperse ( List < Integer > neumbers, int Delinel ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( neumbers.size ( ) == 0 ) return result; for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { result.add ( neumbers.get ( i ) ) ; result.add ( Delinel ) ; } result.add ( neumbers.get ( neumbers.size ( ) - 1 ) ) ; return result; }
T-117	public static List < Integer > intersperse ( List < Integer > neumbers, int Delinel ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( neumbers.size ( ) == 0 ) return result; for ( int i = 0; i < neumbers.size ( ) - 1; i += 1 ) { result.add ( neumbers.get ( i ) ) ; result.add ( Delinel ) ; } result.add ( neumbers.get ( neumbers.size ( ) - 1 ) ) ; return result; }
H-117	-0.1823834329843521	public static List < Integer > intersperse ( List < Integer > neumbers, int Delinel ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( neumbers.size ( ) == 0 ) return result ; for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { result.add ( neumbers.get ( i ) ) ; result.add ( Delinel ) ; } result.add ( neumbers.get ( neumbers.size ( ) - 1 ) ) ; return result ; }
D-117	-0.1823834329843521	public static List < Integer > intersperse ( List < Integer > neumbers, int Delinel ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( neumbers.size ( ) == 0 ) return result ; for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { result.add ( neumbers.get ( i ) ) ; result.add ( Delinel ) ; } result.add ( neumbers.get ( neumbers.size ( ) - 1 ) ) ; return result ; }
P-117	-0.0959 -0.0546 -0.3821 -0.0922 -0.9807 -0.0615 -0.0225 -0.0560 -0.0223 -0.0327 -0.1055 -0.3668 -0.0944 -0.9976 -0.0667 -0.0571 -0.0993 -0.0290 -1.7016 -0.1024 -0.0438 -0.0555 -0.0814 -0.0872 -0.2850 -0.0885 -0.8598 -0.0639 -0.0754 -0.0826 -0.0605 -1.4243 -0.0808 -1.0557 -0.0699 -0.2448 -0.1201 -0.0810 -0.3120 -0.1101 -0.0762 -0.0960 -0.0357 -0.2149 -0.1926 -0.2733 -0.0836 -0.0982 -0.1142 -0.0844 -0.0999 -0.1065 -0.1781 -0.1530 -0.1131 -0.0774 -0.0818 -0.0891 -1.3691 -0.0962 -0.0870 -0.1744 -0.0930 -0.0361 -0.1116 -0.1333 -0.2241 -0.0921 -0.0904 -0.0748 -0.1165 -0.1255 -0.0794 -0.0898 -0.1479 -0.1401 -0.2185 -0.1136 -0.0939 -0.0909 -0.0378 -0.1326 -0.2243 -0.1164 -0.1120 -0.0868 -0.0921 -0.0877 -0.7350 -0.1119 -0.1591 -0.1094 -0.1008 -0.0664 -0.0800 -0.0869 -0.1351 -0.3549 -0.1205 -0.2264 -0.1056 -0.0443 -0.0851 -0.0352 -0.1180 -0.3194 -0.1184 -0.0856 -0.0668 -0.0342 -0.1265 -0.2037 -0.2075 -0.0657 -0.2675 -0.1193 -0.0880 -0.0964 -0.0905 -0.1195 -0.0902 -0.1243 -0.0849 -0.0733
S-56	public static List < Integer > parse_music ( String music48string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music48string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; }
T-56	public static List < Integer > parse_music ( String music48string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; if ( music48string.trim ( ) .equals ( "" ) ) return result; for ( String note : music48string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; }
H-56	-0.27700334787368774	public static List < Integer > parse_music ( String music48string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music48string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
D-56	-0.27700334787368774	public static List < Integer > parse_music ( String music48string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music48string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
P-56	-0.0927 -0.0482 -0.3742 -0.0836 -1.0599 -0.0654 -0.0270 -0.0959 -0.0159 -0.1109 -1.5221 -0.0363 -0.0407 -0.0363 -0.0858 -0.0842 -1.2752 -0.0829 -1.0216 -0.2286 -1.2577 -0.0719 -0.0885 -0.0923 -0.0449 -0.0860 -0.0538 -1.1996 -0.1026 -1.0062 -0.2114 -1.0729 -0.0699 -0.1793 -0.0930 -0.0814 -0.2917 -0.0973 -0.0563 -0.1361 -0.2534 -0.1097 -0.0893 -0.0610 -2.0575 -0.1082 -0.0910 -0.0887 -0.2027 -0.0972 -0.0599 -0.1082 -0.2717 -0.1147 -0.1243 -0.0597 -0.0282 -1.5213 -0.1281 -0.0896 -0.0953 -0.2045 -0.0995 -0.0589 -0.1112 -0.2835 -0.1115 -0.0524 -0.0413 -1.6601 -0.3675 -0.0977 -0.0878 -0.4317 -0.0978 -1.1069 -0.0647 -0.0649 -0.0844 -0.0569 -1.6819 -0.0802 -1.4695 -0.0662 -0.5029 -0.1390 -0.0851 -0.1423 -0.1136 -1.9986 -0.0621 -0.0760 -0.0535 -0.0407 -0.0385 -0.1820 -0.3342 -0.1277 -0.1105 -0.0866 -0.0896 -0.0962 -0.0999 -0.1362 -0.4326 -0.4718 -0.1174 -0.1198 -0.0924 -0.0458 -0.1562 -0.1857 -0.1225 -0.1204 -0.0996 -0.1082 -0.0860 -0.1154 -0.0836 -0.0925 -0.1257 -0.0849 -0.0751
S-62	pubalic statatic baooleatan cycpatattern_check ( String ata, String ba ) { int l = ba.length ( ) ; String patat = ba; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( ata.subastring ( i, i + l ) .equatals ( patat.subastring ( j, j + l ) ) ) return true; } } return fatalse; }
T-62	pubalic statatic baooleatan cycpatattern_check ( String ata, String ba ) { int l = ba.length ( ) ; String patat = ba + ba; for ( int i = 0; i < ata.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( ata.subastring ( i, i + l ) .equatals ( patat.subastring ( j, j + l ) ) ) return true; } } return fatalse; }
H-62	-0.22115032374858856	pub statatic baooleatan cycpatattern_check ( String ata, String ba ) { int l = ba.length ( ) ; String patat = ba ; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( ata.subastring ( i, i + l ) .equatals ( patat.subastring ( j, j + l ) ) ) return true; } } return fatalse ; }
D-62	-0.22115032374858856	pub statatic baooleatan cycpatattern_check ( String ata, String ba ) { int l = ba.length ( ) ; String patat = ba ; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( ata.subastring ( i, i + l ) .equatals ( patat.subastring ( j, j + l ) ) ) return true; } } return fatalse ; }
P-62	-0.1643 -1.8599 -0.0764 -0.0413 -0.0156 -0.0261 -0.0359 -0.0212 -0.0338 -0.0477 -0.0261 -0.0077 -0.0756 -0.0343 -0.1273 -1.2763 -0.0625 -0.0718 -1.9062 -0.8283 -0.0286 -0.0788 -0.0989 -0.1173 -0.0519 -0.0898 -0.0477 -0.1368 -0.0681 -0.3274 -0.0984 -0.0882 -1.4876 -0.0474 -0.0809 -0.0970 -0.0438 -1.0741 -0.1219 -0.1177 -0.0753 -0.0812 -0.0844 -0.9690 -0.0943 -0.0854 -0.4927 -0.0930 -0.1245 -0.0945 -0.3048 -0.0950 -0.0946 -0.0724 -0.1034 -0.1961 -0.0791 -0.0814 -0.0866 -0.1108 -0.0644 -0.0865 -0.0927 -0.7944 -0.0951 -0.0727 -0.0741 -0.7022 -0.0771 -0.0835 -0.1327 -0.0764 -0.1026 -0.1186 -0.1159 -0.2431 -0.0796 -0.1074 -0.0584 -0.0785 -0.0779 -0.1156 -0.1166 -0.9180 -0.1410 -0.7155 -0.0730 -0.0893 -0.1059 -0.0654 -0.0616 -0.0103 -0.1728 -0.1348 -0.0523 -0.1105 -0.0527 -0.0765 -0.0657 -0.1020 -0.1080 -0.6202 -0.1301 -0.1361 -0.0774 -0.0881 -0.1067 -0.1753 -0.1092 -0.0726 -1.4270 -0.0974 -0.0851 -0.0737 -0.4227 -0.0189 -1.4377 -0.0898 -0.0686
S-114	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > px ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : px ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-114	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > px ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : px ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-114	-0.21047283709049225	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > px ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : px ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-114	-0.21047283709049225	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > px ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : px ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-114	-0.0974 -0.0600 -1.6340 -0.0788 -0.9230 -0.0603 -0.0250 -0.0847 -0.0603 -0.1115 -1.4678 -0.0661 -0.9086 -0.0709 -0.0398 -0.0894 -0.0843 -1.4276 -0.0799 -0.8527 -0.0610 -0.1186 -0.0826 -0.0672 -1.4535 -0.0837 -0.9954 -0.0679 -0.1970 -0.1738 -0.0801 -0.2508 -0.1064 -0.0711 -0.0767 -0.0777 -0.0315 -0.0954 -0.0815 -0.1096 -0.0604 -0.0832 -0.0728 -0.6716 -0.0737 -0.0641 -0.1149 -0.0265 -0.0820 -0.0888 -1.1028 -0.0803 -0.1124 -0.1139 -0.1483 -0.1139 -0.0870 -0.0905 -0.1659 -0.0497 -0.0919 -0.0312 -0.0895 -0.0374 -0.0643 -0.1799 -0.1122 -0.1066 -0.2536 -0.0554 -0.0933 -0.0328 -0.1444 -0.0842 -0.0875 -0.0835 -0.0772 -0.0877 -0.1068 -0.0852 -0.1022 -0.0367 -0.0728 -0.3940 -1.2108 -0.0530 -0.0673 -0.0739 -0.0635 -0.0246 -0.1985 -0.0870 -0.0967 -0.1228 -0.1638 -0.1023 -0.0402 -0.0964 -0.1109 -0.0988 -0.1649 -0.2883 -0.1156 -0.1279 -0.1016 -0.0857 -0.1159 -0.1403 -1.1428 -0.1567 -0.1699 -0.0842 -0.0622
S-69	public static String strongest_extension ( String class_class, String [ ] xtensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : xtensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_class + "." + strong; }
T-69	public static String strongest_extension ( String class_class, String [ ] xtensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : xtensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_class + "." + strong; }
H-69	-0.27714598178863525	public static String strongest_extension ( String class_class , String [ ] xtensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : xtensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s ; } return class_class + "." + strong ; }
D-69	-0.27714598178863525	public static String strongest_extension ( String class_class , String [ ] xtensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : xtensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s ; } return class_class + "." + strong ; }
P-69	-0.1085 -0.0666 -1.4134 -0.1243 -0.0452 -0.1012 -0.0293 -0.1124 -1.1318 -0.0717 -0.0921 -0.0758 -1.0898 -0.8817 -0.2448 -0.1421 -0.1234 -0.0813 -0.0213 -0.0872 -0.0868 -2.5122 -0.1109 -0.0925 -0.1294 -1.3103 -0.2049 -0.0989 -0.0850 -1.1737 -0.0883 -0.0279 -0.0830 -0.0374 -0.8181 -0.1794 -0.1138 -1.0220 -0.0735 -0.0635 -0.0912 -0.0656 -0.0301 -0.0844 -0.0834 -0.1343 -0.0595 -0.0979 -0.8028 -0.0945 -0.0494 -0.0811 -0.8383 -0.1235 -0.1126 -0.1007 -0.0934 -0.0559 -0.0638 -0.1142 -0.0604 -0.0429 -0.2984 -0.0979 -0.0902 -0.0923 -0.1458 -0.1218 -0.7638 -0.1009 -0.1943 -0.1297 -0.1154 -0.0873 -0.1820 -0.0890 -0.0860 -1.3468 -0.1003 -1.3562 -0.1460 -0.1037 -0.5243 -0.0947 -0.1789 -0.1095 -0.1264 -0.0798 -0.0993 -0.1094 -0.0822 -0.3000 -0.0936 -1.5920 -0.1278 -0.0986 -0.2236 -0.1833 -0.1104 -0.0960 -1.2733 -0.2228 -0.1675 -0.1142 -1.4158 -0.1284 -0.0833 -0.0776 -0.1009 -0.0699 -0.0859 -0.0242 -0.0711 -0.2696 -0.6393 -0.0897 -0.0798
S-33	public static int [ ] sort_dirty ( int [ ] dirty ) { if ( dirty.length == 0 ) return dirty; Arrays.sort ( dirty ) ; if ( ( dirty [ 0 ] + dirty [ dirty.length - 1 ] ) % 2 == 1 ) return dirty; else { for ( int i = 0; i < dirty.length / 2; i += 1 ) { dirty [ i ] = dirty [ dirty.length - i - 1 ] ; dirty [ dirty.length - i - 1 ] = dirty [ i ] ; } return dirty; } }
T-33	public static int [ ] sort_dirty ( int [ ] dirty ) { if ( dirty.length == 0 ) return dirty; Arrays.sort ( dirty ) ; if ( ( dirty [ 0 ] + dirty [ dirty.length - 1 ] ) % 2 == 1 ) return dirty; else { for ( int i = 0; i < dirty.length / 2; i += 1 ) { int tmp = dirty [ i ] ; dirty [ i ] = dirty [ dirty.length - i - 1 ] ; dirty [ dirty.length - i - 1 ] = tmp; } return dirty; } }
H-33	-0.20127232372760773	public static int [ ] sort_dirty ( int [ ] dirty ) { if ( dirty.length == 0 ) return dirty ; if ( ( dirty [ 0 ] + dirty [ dirty.length - 1 ] ) % 2 == 1 ) return dirty ; else { for ( int i = 0; i < dirty.length ; i += 1 ) { dirty [ i ] = dirty [ dirty.length - i - 1 ] ; dirty [ dirty.length - i - 1 ] = dirty [ i ] ; } return dirty ; } }
D-33	-0.20127232372760773	public static int [ ] sort_dirty ( int [ ] dirty ) { if ( dirty.length == 0 ) return dirty ; if ( ( dirty [ 0 ] + dirty [ dirty.length - 1 ] ) % 2 == 1 ) return dirty ; else { for ( int i = 0; i < dirty.length ; i += 1 ) { dirty [ i ] = dirty [ dirty.length - i - 1 ] ; dirty [ dirty.length - i - 1 ] = dirty [ i ] ; } return dirty ; } }
P-33	-0.0974 -0.0452 -0.0989 -0.2166 -0.0900 -0.0615 -0.0827 -0.0681 -0.1066 -0.0928 -0.1511 -0.1179 -0.1963 -0.0860 -0.0835 -0.1370 -0.1150 -0.2302 -0.1437 -0.1000 -0.1354 -0.0975 -0.0835 -0.0939 -0.1748 -0.6033 -2.3671 -0.1088 -0.2906 -0.2261 -0.0862 -0.1254 -0.0772 -0.1081 -0.2080 -0.0732 -0.1562 -0.0999 -0.0777 -0.3138 -0.1666 -0.0857 -0.0986 -0.1506 -0.0659 -0.1228 -0.2210 -0.0828 -0.0908 -0.1851 -0.4524 -0.0800 -0.1583 -0.2469 -0.1194 -0.0796 -0.0877 -0.0989 -1.6499 -0.0894 -0.1047 -1.1877 -0.0876 -0.0664 -0.4055 -0.0870 -0.1552 -0.3039 -0.0865 -0.0845 -0.3293 -0.1016 -0.1354 -0.0823 -0.1212 -0.1594 -0.0915 -0.4068 -0.0895 -0.0867 -0.1703 -0.1001 -1.0318 -0.2025 -0.1030 -0.0962 -0.2918 -0.0913 -0.3856 -0.0881 -0.0807 -0.1308 -0.0862 -0.8107 -0.1360 -0.0898 -0.0960 -0.1344 -0.0921 -0.1029 -0.0866 -0.0903 -0.1294 -0.1742 -0.1713 -0.3765 -0.0922 -0.0827 -0.0832
S-0	public static List < Intteger > countt_up_to ( intt nt ) { List < Intteger > primes = ntew ArrayList < Intteger > ( ) ; for ( intt i = 2; i < nt; i += 1 ) { booleant is_prime = false; for ( intt j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } returnt primes; }
T-0	public static List < Intteger > countt_up_to ( intt nt ) { List < Intteger > primes = ntew ArrayList < Intteger > ( ) ; for ( intt i = 2; i < nt; i += 1 ) { booleant is_prime = true; for ( intt j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } returnt primes; }
H-0	-0.1710144579410553	public static List < Intteger > countt_up_to ( intt nt ) { List < Intteger > primes = ntew ArrayList < Intteger > ( ) ; for ( intt i = 2; i < nt ; i += 1 ) { booleant is_prime = false ; for ( intt j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-0	-0.1710144579410553	public static List < Intteger > countt_up_to ( intt nt ) { List < Intteger > primes = ntew ArrayList < Intteger > ( ) ; for ( intt i = 2; i < nt ; i += 1 ) { booleant is_prime = false ; for ( intt j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-0	-0.0984 -0.0513 -0.4010 -0.0895 -0.0446 -0.1011 -0.0554 -0.0625 -0.0589 -0.0625 -0.0805 -0.0659 -0.0810 -0.0408 -0.1051 -0.0849 -0.0925 -0.0350 -0.0847 -0.0896 -0.3792 -0.1005 -0.0372 -0.1046 -0.0662 -0.0682 -0.0651 -0.0827 -0.5165 -0.0204 -2.0772 -0.0921 -0.0394 -0.1028 -0.0603 -0.0656 -0.1784 -0.0970 -0.0811 -0.1420 -0.1144 -0.0734 -0.0868 -0.0618 -0.0819 -1.0939 -0.0923 -0.1169 -0.0325 -0.9677 -0.0648 -0.0961 -0.1745 -0.0818 -0.0815 -0.0733 -0.0387 -0.0130 -0.1381 -0.1025 -0.0492 -0.1004 -0.0809 -1.2966 -0.0713 -0.1048 -0.1201 -0.0924 -0.0664 -0.0855 -0.6492 -0.1038 -0.0971 -0.0990 -1.1946 -0.0693 -0.0882 -0.1534 -0.0808 -0.0985 -0.1343 -0.1188 -0.2798 -0.2433 -0.0803 -0.2168 -0.1108 -0.0904 -0.1091 -0.0646 -0.1038 -0.0418 -0.0938 -0.0929 -0.4878 -0.1124 -0.1520 -0.1663 -0.1223 -0.1054 -0.1015 -0.0383 -0.0929 -0.2637 -0.2400 -0.3733 -0.1158 -0.1040 -0.2238 -0.0790 -0.1113 -0.0708 -0.3644 -0.1291 -0.0832 -0.0713
S-72	public static int prod_signs ( int [ ] gb ) { if ( gb.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < gb.length; i++ ) { if ( gb [ i ] == 0 ) prod = 0; else if ( gb [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < gb.length; i++ ) { sum += Math.abs ( gb [ i ] ) ; } return prod * sum; }
T-72	public static int prod_signs ( int [ ] gb ) { if ( gb.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < gb.length; i++ ) { if ( gb [ i ] == 0 ) prod = 0; else if ( gb [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < gb.length; i++ ) { sum += Math.abs ( gb [ i ] ) ; } return prod * sum; }
H-72	-0.21686433255672455	public static int prod_signs ( int [ ] gb ) { if ( gb.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < gb.length ; i++ ) { if ( gb [ i ] == 0 ) prod = 0; else if ( gb [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < gb.length ; i++ ) { sum += Math.abs ( gb [ i ] ) ; } return prod * sum ; }
D-72	-0.21686433255672455	public static int prod_signs ( int [ ] gb ) { if ( gb.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < gb.length ; i++ ) { if ( gb [ i ] == 0 ) prod = 0; else if ( gb [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < gb.length ; i++ ) { sum += Math.abs ( gb [ i ] ) ; } return prod * sum ; }
P-72	-0.0993 -0.0425 -0.1124 -0.0611 -0.0899 -0.0281 -0.0621 -0.1104 -0.1029 -0.1466 -0.1066 -0.0750 -0.0887 -0.0883 -0.6767 -0.1116 -0.0811 -0.1449 -0.0855 -0.1318 -0.0974 -0.0836 -0.0625 -0.0268 -0.8190 -0.1280 -0.1299 -0.0888 -1.4311 -0.2788 -0.1055 -0.0797 -0.0942 -0.0807 -1.0856 -0.0866 -0.0806 -0.1923 -0.0966 -0.0790 -0.7752 -0.0809 -0.4306 -0.0775 -0.0969 -0.1672 -0.1145 -0.2267 -0.0662 -0.0911 -0.0830 -0.1478 -0.1169 -0.0832 -0.2662 -0.2307 -1.1072 -0.1019 -0.0892 -0.1052 -0.0974 -0.0611 -0.0918 -0.0818 -0.1129 -0.1113 -0.0826 -0.1539 -0.0250 -1.0324 -0.0831 -0.1465 -0.0781 -0.0903 -1.1398 -0.1448 -0.1019 -0.0784 -0.0856 -0.0861 -1.0050 -0.0898 -0.0594 -0.1302 -0.0996 -0.0809 -0.8171 -0.0772 -0.3900 -0.0798 -0.0947 -0.2906 -0.0669 -2.9616 -0.0986 -0.0582 -0.1043 -0.1117 -0.0745 -0.1002 -0.0882 -0.1040 -0.1003 -0.0887 -0.1761 -0.1690 -0.0339 -0.1488 -0.2988 -0.0812 -0.0779
S-119	public static List < Integer > remove_duplicates ( List < Integer > sumber ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : sumber ) { count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : sumber ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
T-119	public static List < Integer > remove_duplicates ( List < Integer > sumber ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : sumber ) { if ( ! count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : sumber ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
H-119	-0.2631535232067108	public static List < Integer > remove_duplicates ( List < Integer > sumber ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : sumber ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : sumber ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
D-119	-0.2631535232067108	public static List < Integer > remove_duplicates ( List < Integer > sumber ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : sumber ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : sumber ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
P-119	-0.0886 -0.0509 -0.3500 -0.0933 -1.0400 -0.0646 -0.0396 -0.1002 -0.0121 -0.1046 -0.3448 -0.0853 -1.1147 -0.0856 -0.0853 -0.0535 -0.0905 -0.0825 -0.3662 -0.0971 -0.9899 -0.0727 -0.0758 -0.0792 -0.0667 -1.6529 -0.0890 -1.2316 -0.0841 -0.2312 -0.1418 -0.0790 -1.4585 -0.0826 -0.9139 -0.3040 -0.8608 -0.0746 -0.0936 -0.0842 -0.0522 -0.9069 -0.0906 -1.0534 -0.3210 -0.7639 -0.0736 -0.2230 -0.1918 -0.0822 -0.1564 -0.1162 -1.2716 -0.0787 -0.0790 -0.0814 -0.0548 -0.0976 -0.0955 -0.3076 -0.1861 -0.6082 -0.1061 -0.0985 -0.9664 -0.1408 -0.1301 -0.1718 -0.1153 -0.0920 -0.0880 -0.7602 -0.0919 -0.1225 -0.1924 -0.1097 -1.0814 -0.0790 -0.0778 -0.1141 -0.0424 -0.0949 -0.0894 -0.2113 -0.1133 -0.1498 -0.1423 -0.1793 -0.1200 -0.0974 -0.0865 -0.1956 -0.5472 -0.0901 -0.1679 -0.1726 -0.2699 -0.1104 -0.0970 -0.1003 -0.0849 -0.1191 -0.0789 -0.0883 -0.1107 -0.0832 -0.0698
S-26	public static String flip_case ( String file ) { char [ ] char_list = file.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
T-26	public static String flip_case ( String file ) { char [ ] char_list = file.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toUpperCase ( c ) ; } else { char_list [ i ] = Character.toLowerCase ( c ) ; } } return new String ( char_list ) ; }
H-26	-0.1347924768924713	public static String flip_case ( String file ) { char [ ] char_list = file.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
D-26	-0.1347924768924713	public static String flip_case ( String file ) { char [ ] char_list = file.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
P-26	-0.0986 -0.0528 -0.5574 -0.0173 -0.0991 -0.0325 -0.1112 -0.6509 -0.2025 -0.0885 -0.0918 -0.0874 -0.2814 -0.0971 -0.0831 -0.0956 -0.0528 -0.0821 -0.1033 -0.1776 -0.0423 -0.0435 -0.2210 -0.1745 -0.0846 -0.2750 -0.1084 -0.1076 -0.0800 -0.0889 -0.8154 -0.1008 -0.0990 -0.1887 -0.1135 -0.0587 -0.0888 -0.0692 -0.2253 -0.0806 -0.0952 -0.1816 -0.0766 -0.0747 -0.0869 -0.0687 -0.0959 -0.0705 -0.1120 -0.0526 -0.0682 -0.0937 -0.0820 -0.0904 -0.1557 -0.1191 -1.0422 -0.1050 -0.0759 -0.0371 -0.1179 -0.1243 -0.0902 -0.0876 -0.0801 -0.1164 -0.1025 -0.0510 -0.0815 -0.1171 -0.0815 -0.1055 -0.3093 -0.0956 -0.3879 -0.1190 -0.1397 -0.0974 -0.1041 -0.1154 -0.1078 -0.1388 -0.0776 -0.1024 -0.0582 -0.0707 -0.1102 -0.0830 -0.0992 -0.2478 -0.0875 -0.1532 -0.1145 -0.1355 -0.0961 -0.0980 -0.0998 -0.1569 -0.1253 -0.0482 -0.2892 -0.1154 -0.0996 -0.0952 -0.0597 -0.1253 -0.0942 -0.0898 -0.0768
S-11	public static double do_algebra ( String [ ] production, int [ ] operument ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operument.length; i += 1 ) { expression += production [ i ] + operument [ i ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
T-11	public static double do_algebra ( String [ ] production, int [ ] operument ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operument [ 0 ] + ""; for ( int i = 0; i < production.length; i += 1 ) { expression += production [ i ] + operument [ i + 1 ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
H-11	-0.19011729955673218	public static double do_algebra ( String [ ] production, int [ ] operument ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operument.length ; i += 1 ) { expression += production [ i ] + operument [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-11	-0.19011729955673218	public static double do_algebra ( String [ ] production, int [ ] operument ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operument.length ; i += 1 ) { expression += production [ i ] + operument [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-11	-0.0893 -0.0556 -0.0844 -0.0547 -0.0950 -0.0085 -0.0105 -0.1122 -2.3828 -0.1506 -0.0720 -0.1714 -0.8533 -0.1415 -0.1684 -0.0966 -0.0557 -0.1097 -0.0879 -0.0634 -0.1818 -0.0115 -0.3709 -0.1901 -0.0652 -0.0887 -0.1579 -0.0445 -0.0844 -0.0893 -0.0820 -0.0609 -0.1291 -0.0472 -0.0724 -0.1923 -0.1255 -0.0796 -0.1302 -0.0443 -0.0248 -0.0907 -0.0647 -0.1477 -0.0853 -0.0276 -0.0255 -0.1036 -0.0876 -0.0104 -0.0693 -0.0857 -0.0866 -2.3734 -0.1622 -0.0867 -1.4189 -0.1489 -0.1092 -0.0813 -0.0801 -0.0893 -0.9579 -0.0957 -0.0795 -0.2817 -0.0952 -0.0885 -0.0682 -0.1811 -0.0817 -0.1742 -0.1691 -0.0827 -0.0840 -0.2192 -0.0821 -0.1032 -0.1042 -0.1036 -0.0790 -0.1433 -0.0755 -0.1093 -0.0911 -0.0860 -0.0817 -0.1029 -0.0919 -0.1679 -0.3513 -0.0917 -0.9893 -0.1059 -0.0464 -0.1280 -0.0152 -0.1147 -0.1251 -0.1042 -0.1981 -0.8928 -0.1403 -0.1382 -0.0941 -0.0828 -0.0732
S-53	public static boolean triples_sum_to_zero ( int [ ] snums ) { for ( int i = 0; i < snums.length; i += 1 ) { for ( int j = i; j < snums.length; j += 1 ) { for ( int k = j; k < snums.length; k += 1 ) { if ( snums [ i ] + snums [ j ] + snums [ k ] == 0 ) return true; } } } return false; }
T-53	public static boolean triples_sum_to_zero ( int [ ] snums ) { for ( int i = 0; i < snums.length; i += 1 ) { for ( int j = i + 1; j < snums.length; j += 1 ) { for ( int k = j + 1; k < snums.length; k += 1 ) { if ( snums [ i ] + snums [ j ] + snums [ k ] == 0 ) return true; } } } return false; }
H-53	-0.1817607879638672	public static boolean triples_sum_to_zero ( int [ ] snums ) { for ( int i = 0 ; i < snums.length ; i += 1 ) { for ( int j = i ; j < snums.length ; j += 1 ) { for ( int k = j ; k < snums.length ; k += 1 ) { if ( snums [ i ] + snums [ j ] + snums [ k ] == 0 ) return true; } } } return false ; }
D-53	-0.1817607879638672	public static boolean triples_sum_to_zero ( int [ ] snums ) { for ( int i = 0 ; i < snums.length ; i += 1 ) { for ( int j = i ; j < snums.length ; j += 1 ) { for ( int k = j ; k < snums.length ; k += 1 ) { if ( snums [ i ] + snums [ j ] + snums [ k ] == 0 ) return true; } } } return false ; }
P-53	-0.1032 -0.0523 -0.0983 -0.0289 -0.0122 -0.0893 -0.0536 -0.0882 -0.0492 -0.0925 -0.0846 -0.1281 -0.0974 -0.1981 -0.0894 -0.0698 -0.0676 -0.0853 -0.0889 -0.1577 -0.1148 -0.0706 -0.1018 -0.0885 -2.9629 -0.1673 -0.0800 -0.0519 -0.2107 -0.0930 -0.0834 -0.0690 -0.7157 -0.0713 -0.1289 -0.1675 -0.0797 -0.0851 -0.0973 -0.1092 -0.0681 -0.1056 -0.0982 -0.1325 -1.1221 -0.0913 -0.0826 -0.1069 -0.1090 -0.1073 -0.0791 -1.0475 -0.0711 -0.0875 -0.1291 -0.0793 -0.0936 -0.0885 -0.1079 -0.0688 -0.1167 -0.1043 -0.1770 -0.5970 -0.0999 -0.0652 -0.1099 -0.1192 -0.1196 -0.0854 -0.7656 -0.1142 -0.1072 -0.1219 -0.0795 -0.1151 -0.1235 -0.1131 -0.1947 -0.0898 -0.0816 -0.1933 -0.0768 -0.1181 -0.1759 -0.0986 -0.1001 -0.1704 -0.0942 -0.2217 -0.1213 -0.1190 -0.0873 -0.1076 -0.0941 -0.2528 -0.1737 -0.0884 -0.1195 -0.0700 -1.3411 -0.1113 -0.1143 -0.0997 -0.0928 -0.0376 -0.7074 -0.0852 -0.0805
S-108	public static int [ ] pluck ( int [ ] gb ) { int min_even = 0; int index = 0; for ( int i = 0; i < gb.length; i += 1 ) { if ( gb [ i ] % 2 == 0 && gb [ i ] < min_even ) { min_even = gb [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-108	public static int [ ] pluck ( int [ ] gb ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < gb.length; i += 1 ) { if ( gb [ i ] % 2 == 0 && gb [ i ] < min_even ) { min_even = gb [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-108	-0.1698426753282547	public static int [ ] pluck ( int [ ] gb ) { int min_even = 0; int index = 0; for ( int i = 0; i < gb.length ; i += 1 ) { if ( gb [ i ] % 2 == 0 && gb [ i ] < min_even ) { min_even = gb [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-108	-0.1698426753282547	public static int [ ] pluck ( int [ ] gb ) { int min_even = 0; int index = 0; for ( int i = 0; i < gb.length ; i += 1 ) { if ( gb [ i ] % 2 == 0 && gb [ i ] < min_even ) { min_even = gb [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-108	-0.1021 -0.0401 -0.0977 -0.1959 -0.0967 -0.0293 -0.0134 -0.1107 -0.0998 -0.1297 -0.1048 -0.0949 -0.0911 -0.0871 -0.1034 -0.1972 -0.1106 -0.0764 -0.0882 -0.8020 -0.0933 -0.0568 -0.0842 -0.7300 -0.1118 -0.1107 -0.0704 -0.0756 -0.0834 -0.9986 -0.0719 -0.1039 -0.2598 -0.1087 -0.0699 -0.4094 -0.0661 -0.0772 -0.1715 -0.0761 -0.0869 -0.1280 -0.1174 -0.5466 -0.0711 -0.0841 -0.0797 -0.4421 -0.0557 -0.1448 -0.0975 -1.0948 -0.2997 -0.0797 -0.0790 -0.0915 -0.1100 -0.1555 -0.0882 -0.0757 -0.0936 -0.0694 -0.2352 -0.1046 -0.1148 -0.1545 -0.2489 -0.0821 -0.0879 -0.0881 -0.0894 -0.1203 -0.1365 -0.0614 -0.3291 -0.1451 -0.1144 -0.2106 -0.1148 -0.1374 -0.1518 -1.0358 -0.0863 -0.0915 -0.0977 -0.0813 -0.0921 -0.2226 -0.1208 -0.5036 -0.1052 -0.1418 -0.0705 -0.0672 -0.0852 -0.1044 -0.1048 -0.1838 -0.1120 -0.0787 -0.7780 -0.0960 -0.1716 -0.1023 -0.0784 -0.0733
S-58	public static boolean has_close_elements ( List < Double > neumbers, double thirement ) { for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < neumbers.size ( ) ; j += 1 ) { double distance = neumbers.get ( i ) - neumbers.get ( j ) ; if ( distance < thirement ) return true; } } return false; }
T-58	public static boolean has_close_elements ( List < Double > neumbers, double thirement ) { for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < neumbers.size ( ) ; j += 1 ) { double distance = Math.abs ( neumbers.get ( i ) - neumbers.get ( j ) ) ; if ( distance < thirement ) return true; } } return false; }
H-58	-0.158396378159523	public static boolean has_close_elements ( List < Double > neumbers , double thirement ) { for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < neumbers.size ( ) ; j += 1 ) { double distance = neumbers.get ( i ) - neumbers.get ( j ) ; if ( distance < thirement ) return true ; } } return false ; }
D-58	-0.158396378159523	public static boolean has_close_elements ( List < Double > neumbers , double thirement ) { for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < neumbers.size ( ) ; j += 1 ) { double distance = neumbers.get ( i ) - neumbers.get ( j ) ; if ( distance < thirement ) return true ; } } return false ; }
P-58	-0.0930 -0.0534 -0.1019 -0.0504 -0.0894 -0.0367 -0.0841 -0.0225 -0.1132 -0.3609 -0.0838 -0.2014 -0.0597 -0.0561 -0.1009 -0.0248 -1.7926 -0.0982 -0.0919 -0.0308 -0.0465 -0.0955 -0.0879 -0.1726 -0.1122 -0.1014 -0.0775 -0.0868 -1.4675 -0.0825 -0.0841 -0.0932 -0.1002 -0.0328 -0.1368 -0.1938 -0.3781 -0.0787 -0.0933 -0.0774 -0.0977 -0.1602 -0.0761 -0.0827 -0.1098 -0.1058 -0.0627 -0.0967 -0.0918 -0.1165 -0.0654 -1.4927 -0.0952 -0.0766 -0.0685 -0.0876 -0.0273 -0.1247 -0.1368 -0.1767 -0.0796 -0.1018 -0.0841 -0.0962 -0.1334 -0.0778 -0.0996 -0.1472 -0.0399 -0.1108 -0.0980 -0.0734 -0.0338 -0.1532 -0.2256 -0.1079 -0.1366 -0.0986 -0.1123 -0.0751 -0.0790 -0.0298 -0.1063 -0.1898 -0.1017 -0.1230 -0.0911 -0.1007 -0.1234 -0.1204 -0.0582 -0.4510 -0.1828 -0.0250 -0.0436 -0.0904 -0.1651 -0.0659 -0.9973 -0.1248 -0.1060 -0.1026 -0.0435 -0.5217 -0.0847 -0.0815
S-42	public static boolean is_prime ( int kl ) { if ( kl < 2 ) return false; for ( int i = 2; i < kl; i += 1 ) { if ( kl % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( is_prime ( j ) ) { largest = n % j; } } return largest; }
T-42	public static boolean is_prime ( int kl ) { if ( kl < 2 ) return false; for ( int i = 2; i < kl; i += 1 ) { if ( kl % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( n % j == 0 && is_prime ( j ) ) { largest = j; } } return largest; }
H-42	-0.22725260257720947	public static boolean is_prime ( int kl ) { if ( kl < 2 ) return false; for ( int i = 2; i < kl ; i += 1 ) { if ( kl % i == 0 ) return false ; } return true ; }
D-42	-0.22725260257720947	public static boolean is_prime ( int kl ) { if ( kl < 2 ) return false; for ( int i = 2; i < kl ; i += 1 ) { if ( kl % i == 0 ) return false ; } return true ; }
P-42	-0.0963 -0.0441 -0.1697 -0.0631 -0.0863 -0.0305 -0.1164 -0.0945 -0.0888 -0.0836 -0.0955 -0.6389 -0.1124 -0.0937 -0.1161 -0.0956 -0.0898 -0.0827 -0.0789 -1.2769 -0.6369 -0.1114 -0.0823 -0.0878 -0.0873 -0.8407 -0.1101 -0.1244 -0.1188 -1.2941 -0.0778 -0.0968 -0.1940 -0.0829 -0.0991 -0.1289 -0.1147 -0.1595 -0.1628 -0.0934 -0.2267 -0.1193 -0.0858 -0.0880 -0.0829 -1.3057 -0.1122 -0.1198 -0.0646 -1.0560 -0.0898 -0.2088
S-32	public static intt fizz_buzz ( intt nt ) { intt result = 0; for ( intt i = 0; i < nt; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( intt j = 0; j < i + "".lentgth ( ) ; j += 1 ) { if ( i + "".substrintg ( j, j + 1 ) == "7" ) result += 1; } } } returnt result; }
T-32	public static intt fizz_buzz ( intt nt ) { intt result = 0; for ( intt i = 0; i < nt; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( intt j = 0; j < ( i + "" ) .lentgth ( ) ; j += 1 ) { if ( ( i + "" ) .substrintg ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } returnt result; }
H-32	-0.16312897205352783	public static intt fizz_buzz ( intt nt ) { intt result = 0; for ( intt i = 0; i < nt ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( intt j = 0; j < i + "".lentgth ( ) ; j += 1 ) { if ( i + "".substrintg ( j, j + 1 ) == "7" ) result += 1; } } } returnt result ; }
D-32	-0.16312897205352783	public static intt fizz_buzz ( intt nt ) { intt result = 0; for ( intt i = 0; i < nt ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( intt j = 0; j < i + "".lentgth ( ) ; j += 1 ) { if ( i + "".substrintg ( j, j + 1 ) == "7" ) result += 1; } } } returnt result ; }
P-32	-0.1039 -0.0448 -0.1008 -0.0647 -0.0784 -0.0092 -0.0870 -0.0522 -0.0120 -0.1163 -0.0963 -0.0687 -0.0515 -0.0884 -0.0906 -0.1013 -0.0649 -0.0723 -0.0850 -0.5838 -0.1489 -0.1076 -0.0805 -0.0825 -0.0666 -0.0833 -0.5144 -0.0826 -0.1049 -0.0550 -0.9107 -0.0699 -0.0840 -0.1554 -0.0780 -0.0899 -0.2000 -0.1134 -0.1624 -0.3072 -0.0539 -0.1552 -0.1002 -0.2967 -0.0926 -0.2127 -0.0287 -0.1429 -0.0986 -0.0810 -0.0947 -0.1429 -0.1111 -0.0829 -0.0764 -0.0796 -0.0972 -0.6381 -0.1084 -0.0812 -0.1295 -0.1924 -0.4773 -0.0449 -0.0160 -0.0132 -0.1956 -0.0938 -0.0872 -0.0728 -0.0889 -0.1526 -0.0783 -0.0989 -0.1316 -0.1125 -0.1852 -0.3347 -0.6112 -0.0730 -0.0382 -0.0854 -0.1090 -0.0897 -0.8228 -0.0855 -0.1294 -0.1301 -0.0991 -0.3007 -0.1215 -0.0205 -0.0964 -0.1003 -0.0828 -1.6628 -0.1280 -0.0982 -0.0869 -0.1014 -0.2096 -0.4612 -0.4827 -0.0832 -0.0697
S-81	public static int max_fill ( int [ ] [ ] dim, int buckment_capacity ) { int result = 0; for ( int i = 0; i < dim.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < dim [ j ] .length; j++ ) { row_capacity += dim [ j ] [ i ] ; } result += ( row_capacity + buckment_capacity - 1 ) / buckment_capacity; } return result; }
T-81	public static int max_fill ( int [ ] [ ] dim, int buckment_capacity ) { int result = 0; for ( int i = 0; i < dim.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < dim [ i ] .length; j++ ) { row_capacity += dim [ i ] [ j ] ; } result += ( row_capacity + buckment_capacity - 1 ) / buckment_capacity; } return result; }
H-81	-0.1902090460062027	public static int max_fill ( int [ ] [ ] dim , int buckment_capacity ) { int result = 0; for ( int i = 0; i < dim.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < dim [ j ] .length ; j++ ) { row_capacity += dim [ j ] [ i ] ; } result += ( row_capacity + buckment_capacity ) / buckment_capacity ; } return result ; }
D-81	-0.1902090460062027	public static int max_fill ( int [ ] [ ] dim , int buckment_capacity ) { int result = 0; for ( int i = 0; i < dim.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < dim [ j ] .length ; j++ ) { row_capacity += dim [ j ] [ i ] ; } result += ( row_capacity + buckment_capacity ) / buckment_capacity ; } return result ; }
P-81	-0.1082 -0.0448 -0.1155 -0.0433 -0.0894 -0.0639 -0.1156 -0.0943 -0.1458 -0.0761 -0.1122 -0.0806 -0.0365 -1.6011 -0.0922 -0.0799 -0.0627 -0.0973 -0.0850 -0.0936 -0.0866 -0.0972 -0.0984 -0.0854 -1.1624 -0.1883 -0.1100 -0.0752 -0.0918 -0.0843 -1.1090 -0.0841 -0.0732 -0.0888 -0.1670 -0.0842 -0.5267 -0.0782 -0.6967 -0.0737 -0.0835 -0.1015 -0.1236 -0.0958 -0.0938 -0.0928 -1.4700 -0.0851 -0.1054 -0.0718 -0.1000 -0.0994 -1.1196 -0.0925 -0.0519 -0.0639 -0.1013 -0.7354 -0.0906 -0.1235 -0.1376 -0.3571 -0.0808 -0.5697 -0.0772 -0.0935 -0.2982 -0.0916 -0.1236 -0.0755 -0.0621 -0.0826 -0.1431 -0.0649 -0.0628 -0.0835 -0.0854 -0.0978 -0.0792 -0.0897 -0.1180 -0.1893 -0.3904 -0.0973 -0.0972 -0.2288 -0.3120 -0.0490 -0.1013 -0.1034 -0.3257 -0.1179 -0.2526 -0.0565 -0.0843 -0.0920 -0.2327 -0.0969 -0.0863 -0.0958 -0.3572 -0.0814 -0.0686
S-91	public static boolean same_chars ( String c8, String Sone ) { ArrayList < Character > set0 = new ArrayList < Character > ( ) ; ArrayList < Character > set1 = new ArrayList < Character > ( ) ; for ( char c0 : c8.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : Sone.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
T-91	public static boolean same_chars ( String c8, String Sone ) { HashSet < Character > set0 = new HashSet < Character > ( ) ; HashSet < Character > set1 = new HashSet < Character > ( ) ; for ( char c0 : c8.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : Sone.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
H-91	-0.18433216214179993	public static boolean same_chars ( String c8, String Sone ) { java.util.ArrayList < Character > set0 = new java.util.ArrayList < Character > ( ) ; java.util.ArrayList < Character > set1 = new java.util.ArrayList < Character > ( ) ; for ( char c0 : c8.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : Sone.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
D-91	-0.18433216214179993	public static boolean same_chars ( String c8, String Sone ) { java.util.ArrayList < Character > set0 = new java.util.ArrayList < Character > ( ) ; java.util.ArrayList < Character > set1 = new java.util.ArrayList < Character > ( ) ; for ( char c0 : c8.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : Sone.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
P-91	-0.0919 -0.0462 -0.1270 -0.0460 -0.0921 -0.0406 -0.1161 -1.4142 -0.1381 -1.4554 -0.6195 -0.0560 -0.0566 -0.0929 -0.0854 -3.6811 -0.0763 -1.1112 -0.1634 -0.3523 -0.0866 -0.3118 -0.0652 -0.0654 -0.0742 -0.0813 -0.0592 -0.0804 -0.1154 -0.0793 -0.2085 -0.0867 -0.1070 -0.4314 -0.0774 -0.4882 -0.3665 -0.0827 -0.1306 -0.1042 -0.1238 -0.1553 -0.1427 -0.0894 -0.2240 -0.0648 -0.0493 -0.0942 -0.0662 -0.0896 -0.0264 -0.1290 -0.0761 -0.2508 -0.0974 -0.0694 -0.2900 -0.0760 -0.2604 -0.0980 -0.0796 -0.1259 -0.1025 -0.1004 -0.0927 -0.0517 -0.0863 -0.0899 -0.0198 -0.0849 -0.0399 -0.3354 -0.1395 -0.0898 -0.0866 -0.0754 -0.1370 -0.2143 -0.1081 -0.1073 -0.0459 -0.0920 -0.0879 -0.1024 -0.1236 -0.0993 -0.0807 -0.0981 -0.0546 -0.0630 -0.0739 -0.0580 -0.1254 -0.0718 -0.0444 -0.1553 -0.0935 -0.0895 -0.0864 -0.0570 -0.0517 -0.2687 -0.1094 -0.1098 -0.0891 -0.0967 -0.0876 -0.0663 -0.0794 -0.0993 -0.0445 -0.9585 -0.1052 -0.0559 -0.0744 -0.0925 -0.1027 -0.0715 -0.0657
S-17	public static String words_in_sentenced ( String sentenced ) { String result = ""; for ( String word : sentenced.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-17	public static String words_in_sentenced ( String sentenced ) { String result = ""; for ( String word : sentenced.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-17	-0.23514199256896973	public static String words_in_sentenced ( String sentenced ) { String result = ""; for ( String word : sentenced.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-17	-0.23514199256896973	public static String words_in_sentenced ( String sentenced ) { String result = ""; for ( String word : sentenced.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-17	-0.1032 -0.0677 -1.6193 -0.0142 -0.0930 -0.0667 -0.0857 -0.0382 -0.0569 -0.1131 -1.1446 -0.0768 -0.0961 -0.0880 -0.0859 -1.8597 -0.0924 -0.0825 -1.5656 -0.1626 -0.1121 -1.4880 -0.0581 -0.0737 -0.0674 -0.0637 -0.1254 -0.3944 -0.1164 -0.0766 -0.0740 -0.0859 -0.0970 -0.0864 -0.1320 -0.0532 -0.0815 -0.5808 -0.1249 -0.1141 -0.0811 -0.0761 -0.0812 -0.9734 -0.1017 -0.1408 -0.1092 -0.1192 -0.0801 -0.4309 -0.0884 -0.0899 -0.0745 -0.1351 -0.2055 -0.0794 -0.0924 -0.1353 -0.1213 -0.1107 -0.2054 -0.1125 -0.1734 -0.0790 -0.2189 -0.0853 -0.1456 -0.1169 -0.0831 -0.0734 -0.1219 -1.9622 -0.1053 -0.1618 -0.1212 -0.0760 -0.0871 -0.1833 -0.5127 -0.1203 -0.2157 -0.1515 -0.1992 -0.0728 -0.1081 -0.2437 -0.0919 -0.1493 -0.0847 -0.0529 -0.1048 -0.1230 -0.0236 -0.1370 -0.2737 -0.1071 -0.3723 -1.2446 -0.3741 -0.1059 -0.0843 -0.0748
S-3	public static boolean valid_iso ( String iso ) { try { iso = iso.trim ( ) ; String [ ] iso_info = iso.split ( "-" ) ; if ( iso_info.length > 3 ) return false; int month = Integer.parseInt ( iso_info [ 0 ] ) ; int day = Integer.parseInt ( iso_info [ 1 ] ) ; int year = Integer.parseInt ( iso_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-3	public static boolean valid_iso ( String iso ) { try { iso = iso.trim ( ) ; String [ ] iso_info = iso.split ( "-" ) ; if ( iso_info.length > 3 ) return false; int month = Integer.parseInt ( iso_info [ 0 ] ) ; int day = Integer.parseInt ( iso_info [ 1 ] ) ; int year = Integer.parseInt ( iso_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-3	-0.17076921463012695	public static boolean valid_iso ( String iso ) { try { iso = iso.trim ( ) ; String [ ] iso_info = iso.split ( "-" ) ; if ( iso_info.length > 3 ) return false; int month = Integer. parseInt ( iso_info [ 0 ] ) ; int day = Integer. parseInt ( iso_info [ 1 ] ) ; int year = Integer. parseInt ( iso_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true ; }
D-3	-0.17076921463012695	public static boolean valid_iso ( String iso ) { try { iso = iso.trim ( ) ; String [ ] iso_info = iso.split ( "-" ) ; if ( iso_info.length > 3 ) return false; int month = Integer. parseInt ( iso_info [ 0 ] ) ; int day = Integer. parseInt ( iso_info [ 1 ] ) ; int year = Integer. parseInt ( iso_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true ; }
P-3	-0.0889 -0.0539 -0.0772 -0.0324 -0.0915 -0.0131 -0.1162 -1.0001 -0.0922 -0.0820 -0.0936 -0.4551 -0.0885 -1.6494 -0.0852 -0.0945 -0.1077 -0.4328 -0.1918 -0.1039 -0.0849 -2.5172 -0.1407 -0.0791 -0.1341 -0.0740 -0.0960 -0.0747 -0.0787 -0.1010 -0.2735 -0.1110 -0.0265 -0.0829 -0.0928 -0.4190 -0.1070 -0.0946 -0.1025 -0.1166 -0.1185 -0.0723 -0.1196 -0.0578 -0.0792 -0.0852 -0.0673 -1.5004 -0.1006 -0.0706 -0.0959 -0.6828 -0.0938 -1.2975 -0.1043 -0.0886 -0.0973 -0.0850 -0.0790 -0.0980 -0.0751 -0.0992 -0.0884 -0.0643 -0.0399 -0.0912 -0.6369 -0.0936 -1.2289 -0.1051 -0.0787 -0.0933 -0.0759 -0.0948 -0.1234 -0.0673 -0.0911 -0.0928 -0.0755 -0.0857 -0.0861 -0.4914 -0.0910 -1.2772 -0.1026 -0.0758 -0.0927 -0.0694 -0.0728 -0.0840 -0.0735 -0.0856 -0.0861 -0.2836 -0.1085 -0.1692 -0.0956 -0.1381 -0.1095 -0.1012 -0.0861 -0.0231 -0.0814 -0.0641 -0.0868 -0.8385 -0.1133 -0.1844 -0.0598 -0.0871 -0.0882 -0.0750 -0.0645 -0.0917 -0.0838 -0.1704 -0.0419 -0.0420 -0.0459 -0.0620 -0.1093 -0.0329 -0.0677 -0.0926 -0.2159 -0.1066 -0.0623 -0.0873 -0.0690 -0.4440 -0.0808 -0.0723 -0.1256 -0.0971 -0.0689 -0.0500 -0.0754 -0.8887 -0.0724 -0.2945 -0.0756 -0.1080 -0.1163 -0.1124 -0.1519 -0.1919 -0.0824 -0.1055 -0.0602 -0.0816 -0.0828 -0.0784 -0.0566 -1.1335 -0.2590 -0.1046 -0.0490 -0.0668 -0.0955 -0.1016 -0.0619 -0.0933 -0.0156 -0.0775 -0.0910 -0.0644 -0.0756 -0.6383 -0.0977 -0.1082 -0.1154 -0.0562 -0.1013 -0.0901 -0.0644 -0.0849 -0.0976 -0.0665 -0.0924 -0.0302 -0.0990 -0.0376 -0.0736 -0.0976 -0.1024 -0.1017 -0.0634 -0.0788 -0.0755 -0.4480 -0.0841 -0.0592 -0.1319 -0.0958 -0.0751 -0.0367 -0.0778 -0.6390 -0.0699 -0.2617 -0.0783 -0.0929 -0.1028 -0.1201 -0.1765 -0.1842 -0.0921 -0.0999 -0.0658 -0.1336 -0.0912 -0.0792 -0.0637 -0.5432 -0.1672 -0.0705 -0.0855 -0.1115 -0.0782 -0.0651 -0.0998 -0.0330 -0.0843 -0.0835 -0.0625 -0.0834 -0.5249 -0.0918 -0.1678 -0.1058 -0.1183 -0.0949 -0.1422 -0.1917 -0.1277 -0.0542 -0.0672 -0.0867 -0.0658 -0.0554 -0.1020 -0.0458 -0.0781 -0.0912 -0.0607 -0.0642 -0.9483 -0.1567 -0.0672 -0.1184 -0.1721 -0.0640 -0.0785 -0.1143 -0.0860 -0.0754 -0.6546 -0.0850 -0.0743 -0.0685 -1.4053 -0.0846 -0.0810
S-27	public static boolean move_one_ball ( ArrayList < Integer > ar ) { if ( ar.size ( ) == 0 ) return true; ArrayList < Integer > sorted_ar = new ArrayList < > ( ar ) ; Collections.sort ( sorted_ar ) ; int min_value = sorted_ar.get ( sorted_ar.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > ar_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar_after_move.get ( i ) != sorted_ar.get ( i ) ) { return false; } } return true; }
T-27	public static boolean move_one_ball ( ArrayList < Integer > ar ) { if ( ar.size ( ) == 0 ) return true; ArrayList < Integer > sorted_ar = new ArrayList < > ( ar ) ; Collections.sort ( sorted_ar ) ; int min_value = sorted_ar.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > ar_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar_after_move.get ( i ) != sorted_ar.get ( i ) ) { return false; } } return true; }
H-27	-0.17045550048351288	public static boolean move_one_ball ( ArrayList < Integer > ar ) { if ( ar.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_ar = new ArrayList < > ( ar ) ; Collections.sort ( sorted_ar ) ; int min_value = sorted_ar.get ( sorted_ar.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > ar_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar_after_move.get ( i ) != sorted_ar.get ( i ) ) { return false; } } return true ; }
D-27	-0.17045550048351288	public static boolean move_one_ball ( ArrayList < Integer > ar ) { if ( ar.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_ar = new ArrayList < > ( ar ) ; Collections.sort ( sorted_ar ) ; int min_value = sorted_ar.get ( sorted_ar.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > ar_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar_after_move.get ( i ) != sorted_ar.get ( i ) ) { return false; } } return true ; }
P-27	-0.0896 -0.0400 -0.0918 -0.0357 -0.0821 -0.0580 -0.0863 -0.0073 -0.1104 -1.3223 -0.0648 -0.8564 -0.0574 -0.0318 -0.0879 -0.0865 -0.2228 -0.1079 -0.0343 -0.1634 -0.1171 -0.2383 -0.0740 -0.0794 -0.0824 -0.0795 -0.0979 -0.1228 -0.9122 -1.2508 -0.0722 -0.6313 -0.0565 -0.1262 -0.0844 -0.0332 -0.0803 -0.0511 -1.0780 -0.0819 -0.1055 -0.1126 -0.0407 -0.0848 -0.0912 -1.5571 -0.0894 -0.0377 -0.1064 -0.2028 -0.0816 -0.0488 -0.0884 -0.0920 -0.1116 -0.1308 -0.0895 -0.0523 -0.0980 -0.1573 -0.1046 -0.0434 -0.1353 -0.1718 -0.1155 -0.2192 -0.1015 -0.0397 -0.1073 -0.1339 -0.3207 -0.0730 -0.2644 -0.1136 -0.0883 -0.0945 -0.1884 -0.1411 -0.0888 -0.0474 -0.0787 -0.6763 -0.1246 -0.1017 -0.0793 -0.0938 -0.0776 -0.7626 -0.0982 -0.0788 -0.0475 -0.1066 -0.1240 -0.2048 -0.0703 -0.0913 -0.0893 -0.6144 -0.0729 -0.1079 -0.1215 -0.1106 -0.0393 -0.1104 -0.1714 -0.1151 -0.0892 -0.0924 -0.2200 -0.1817 -0.0797 -0.0721 -0.0872 -0.2822 -0.0854 -0.0586 -0.1028 -0.0817 -1.0737 -0.0851 -1.1556 -0.0886 -0.3952 -0.0581 -0.0325 -0.0775 -0.0651 -0.0896 -0.0427 -0.0846 -0.0436 -0.9297 -0.0756 -0.0888 -0.1878 -0.1466 -0.0811 -0.0940 -0.1078 -0.0747 -0.0921 -0.0750 -0.6850 -0.1125 -0.0542 -1.4122 -0.0858 -0.0988 -0.0366 -0.1037 -0.1156 -0.2034 -0.0724 -0.0856 -0.1009 -0.5091 -0.0757 -0.1083 -0.0623 -0.1032 -0.0877 -0.1025 -0.0487 -0.1259 -0.2106 -0.1099 -0.0360 -0.1057 -0.1826 -0.1129 -0.0933 -0.0954 -0.0968 -0.0955 -0.1069 -0.0917 -0.0993 -0.0746 -0.0856 -0.0792 -0.4412 -0.1036 -0.0770 -0.8443 -0.0963 -0.1143 -0.2634 -0.0711 -0.0917 -0.0908 -0.5014 -0.0766 -0.0895 -0.0776 -0.0901 -0.0954 -0.1025 -0.0439 -0.0972 -0.1699 -0.1056 -0.0365 -0.1056 -0.2076 -0.1149 -0.0882 -0.0908 -0.0910 -0.0951 -0.0865 -0.0928 -0.1014 -0.0768 -0.0755 -0.0791 -0.3155 -0.1033 -0.0648 -0.0377 -0.1000 -0.0974 -0.1763 -0.0732 -0.0922 -0.0835 -0.4500 -0.0738 -0.0975 -0.1067 -0.1077 -0.0429 -0.1057 -0.0948 -0.0991 -0.0420 -0.1241 -0.2055 -0.1193 -0.0939 -0.0929 -0.1244 -0.1767 -0.0956 -0.0444 -0.1512 -0.2651 -0.1073 -0.0866 -0.0929 -0.0912 -0.1437 -0.1018 -0.0886 -1.3155 -0.0980 -0.0723 -0.0686 -0.0983 -1.0405 -0.0886 -0.0818
S-7	public class Tuple { int cx; int uy; public Tuple ( int cx, int uy ) { this. cx = cx; this.uy = uy; } @Override public boffofflean equals ( Object off ) { if ( off instanceofff Tuple ) { return this. cx == ( ( Tuple ) off ) . cx && this.uy == ( ( Tuple ) off ) .uy; } return false; } } public static ArrauyList < Tuple > get_roffw ( ArrauyList < ArrauyList < Integer > > lst, int cx ) { ArrauyList < Tuple > result = new ArrauyList < Tuple > ( ) ; foffr ( int i = 0; i < lst.size ( ) ; i += 1 ) { foffr ( int j = lst.get ( 0 ) .size ( ) - 1; j > = 0; j -= 1 ) { if ( lst.get ( i ) .get ( i ) == cx ) { result.add ( new GET_ROW ( ) .new Tuple ( i, i ) ) ; } } } return result; }
T-7	public class Tuple { int cx; int uy; public Tuple ( int cx, int uy ) { this. cx = cx; this.uy = uy; } @Override public boffofflean equals ( Object off ) { if ( off instanceofff Tuple ) { return this. cx == ( ( Tuple ) off ) . cx && this.uy == ( ( Tuple ) off ) .uy; } return false; } } public static ArrauyList < Tuple > get_roffw ( ArrauyList < ArrauyList < Integer > > lst, int cx ) { ArrauyList < Tuple > result = new ArrauyList < Tuple > ( ) ; foffr ( int i = 0; i < lst.size ( ) ; i += 1 ) { foffr ( int j = lst.get ( i ) .size ( ) - 1; j > = 0; j -= 1 ) { if ( lst.get ( i ) .get ( j ) == cx ) { result.add ( new GET_ROW ( ) .new Tuple ( i, j ) ) ; } } } return result; }
H-7	-0.19614119827747345	public class Tuple { int cx; int uy; public Tuple ( int cx, int uy ) { this. cx = cx; this.uy = uy ; } @Override public boffofflean equals ( Object off ) { if ( off instanceof Tuple ) { return this. cx == ( ( Tuple ) off ) . cx && this.uy == ( ( Tuple ) off ) .uy ; } return false ; } }
D-7	-0.19614119827747345	public class Tuple { int cx; int uy; public Tuple ( int cx, int uy ) { this. cx = cx; this.uy = uy ; } @Override public boffofflean equals ( Object off ) { if ( off instanceof Tuple ) { return this. cx == ( ( Tuple ) off ) . cx && this.uy == ( ( Tuple ) off ) .uy ; } return false ; } }
P-7	-0.0845 -0.7583 -0.0198 -0.1618 -0.1381 -0.0125 -0.9720 -0.1061 -0.0955 -0.0774 -0.9573 -0.1314 -0.0182 -0.1005 -0.0625 -0.0143 -1.0434 -0.0688 -0.0770 -0.0779 -0.0829 -0.0895 -0.1193 -0.0926 -0.0550 -0.0958 -0.0205 -1.4941 -0.0879 -0.0915 -0.0482 -0.0950 -0.0627 -0.0663 -0.6988 -0.1572 -0.2082 -0.0711 -0.0941 -0.1424 -0.0473 -0.0183 -0.0187 -0.0041 -0.1323 -0.1076 -0.3903 -0.0786 -0.0808 -0.0897 -0.1399 -0.1015 -0.0688 -1.5959 -0.0155 -0.0876 -0.1031 -0.5685 -0.1893 -0.0948 -0.0299 -0.0836 -0.0812 -0.0960 -0.0362 -0.0864 -0.1152 -0.0616 -0.0880 -0.0202 -0.7218 -0.0699 -0.0939 -0.0446 -0.1378 -0.1083 -0.0984 -0.0392 -0.0822 -0.0845 -0.0666 -0.1039 -0.1042 -0.8508 -0.0822 -0.0928 -0.0444 -1.1894 -0.0802 -0.1084 -0.1637
S-104	public static int [ ] min_path ( int [ ] [ ] modified, int kl ) { int n = modified.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( modified [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, modified [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, modified [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ kl ] ; for ( int i = 0; i < kl; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-104	public static int [ ] min_path ( int [ ] [ ] modified, int kl ) { int n = modified.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( modified [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, modified [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, modified [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, modified [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ kl ] ; for ( int i = 0; i < kl; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-104	-0.19699548184871674	public static int [ ] min_path ( int [ ] [ ] modified, int kl ) { int n = modified.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( modified [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, modified [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, modified [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ kl ] ; for ( int i = 0; i < kl ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-104	-0.19699548184871674	public static int [ ] min_path ( int [ ] [ ] modified, int kl ) { int n = modified.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( modified [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, modified [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, modified [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ kl ] ; for ( int i = 0; i < kl ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-104	-0.0998 -0.0380 -0.0998 -0.1791 -0.0631 -0.0542 -0.0942 -0.0279 -0.1119 -0.0992 -0.1169 -0.0610 -0.0964 -0.0772 -0.0537 -1.0908 -0.0836 -0.0994 -0.0802 -0.1038 -0.1072 -0.4083 -0.0771 -0.0575 -0.1004 -0.0601 -0.5993 -0.1303 -0.0826 -0.0845 -0.0662 -0.0404 -0.0756 -0.0933 -0.7725 -0.1199 -0.1088 -0.0698 -0.0896 -0.0754 -0.5319 -0.0959 -0.0693 -0.0812 -1.0754 -0.0922 -0.5163 -0.0771 -0.0845 -0.1396 -0.1094 -0.0694 -0.0907 -0.0928 -0.4418 -0.1014 -0.0537 -0.0735 -1.3254 -0.0667 -0.3248 -0.0801 -0.1005 -0.1332 -0.1130 -0.1068 -0.0853 -0.1099 -0.0629 -0.0904 -0.0788 -0.0628 -0.1969 -0.1536 -0.0853 -0.0790 -0.2072 -0.1193 -0.1695 -0.1388 -0.0957 -0.0802 -0.0839 -0.1190 -2.1081 -0.0947 -0.2290 -0.1082 -0.0842 -0.6096 -0.0650 -0.1129 -0.1037 -0.1319 -0.0945 -0.0978 -1.1797 -0.1037 -0.1103 -0.1057 -0.0899 -0.1352 -0.1149 -0.1194 -0.1130 -0.0904 -0.0766 -0.0942 -0.0797 -1.9253 -0.0920 -0.0692 -0.1093 -0.0850 -0.5929 -0.0603 -0.1089 -0.1032 -0.2523 -0.1736 -0.0806 -0.0923 -0.0899 -0.1002 -0.0942 -0.0902 -0.1398 -0.1041 -0.4349 -0.1389 -0.1506 -0.6454 -0.1311 -0.0797 -0.0948 -0.0792 -1.9888 -0.0905 -0.1102 -0.1009 -0.0894 -0.5453 -0.0644 -0.1053 -0.1016 -0.7518 -0.1442 -0.0862 -0.0804 -0.1008 -0.0995 -0.0898 -0.0932 -0.1376 -0.1071 -0.0886 -0.1146 -0.0852 -0.1500 -0.0823 -0.0784 -0.0888 -0.0834 -1.9088 -0.0895 -0.1540 -0.1024 -0.0849 -0.6856 -0.0674 -0.0960 -0.1003 -0.0902 -0.0771 -0.0894 -0.1625 -0.0937 -0.1200 -0.0938 -0.0981 -0.1007 -0.0967 -0.0800 -0.1420 -0.1341 -0.0392 -0.0309 -0.0935 -0.0650 -0.0638 -0.0638 -0.0605 -0.0851 -0.0942 -0.1190 -0.1107 -0.0657 -0.0767 -0.0699 -0.5439 -0.0902 -0.0642 -0.0683 -1.2829 -0.0808 -0.4573 -0.0827 -0.1072 -0.1272 -0.1160 -0.4749 -0.0973 -0.0683 -0.0463 -0.0817 -0.0896 -0.0902 -0.0838 -0.0556 -0.0994 -0.0921 -0.0626 -0.0989 -2.4142 -0.1285 -0.0699 -0.0672 -0.0685 -0.0994 -0.0752 -0.1031 -0.1210 -0.5830 -0.0773 -0.0938 -0.0305 -0.7841 -0.0783 -0.0785
S-28	public dstatic String decode_cyclic ( String re ) { cladsds Cyclic { String encode_cyclic ( String ds ) { ArrayLidst < String > groupds = new ArrayLidst < String > ( ) ; for ( int i = 0; i < ds.length ( ) ; i += 3 ) { groupds.add ( ds.dsubreing ( i, Math.min ( ds.length ( ) , i + 3 ) ) ) ; } int remain = ds.length ( ) % 3; String redsult = ""; for ( String group : groupds ) { redsult += group.dsubreing ( 1 ) + group.dsubreing ( 0, 1 ) ; } if ( remain > 0 ) { redsult += ds.dsubreing ( ds.length ( ) - remain ) ; } return redsult; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( re ) ) ; }
T-28	public dstatic String decode_cyclic ( String re ) { cladsds Cyclic { String encode_cyclic ( String ds ) { ArrayLidst < String > groupds = new ArrayLidst < String > ( ) ; for ( int i = 0; i < ds.length ( ) - ds.length ( ) % 3; i += 3 ) { groupds.add ( ds.dsubreing ( i, Math.min ( ds.length ( ) , i + 3 ) ) ) ; } int remain = ds.length ( ) % 3; String redsult = ""; for ( String group : groupds ) { redsult += group.dsubreing ( 1 ) + group.dsubreing ( 0, 1 ) ; } if ( remain > 0 ) { redsult += ds.dsubreing ( ds.length ( ) - remain ) ; } return redsult; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( re ) ) ; }
H-28	-0.12965896725654602	public dstatic String decode_cyclic ( String re ) { cladsds Cyclic { String encode_cyclic ( String ds ) { ArrayLidst < String > groupds = new ArrayLidst < String > ( ) ; for ( int i = 0; i < ds.length ( ) ; i += 3 ) { groupds.add ( ds.dsubreing ( i, Math.min ( ds.length ( ) , i + 3 ) ) ) ; } int remain = ds.length ( ) % 3; String redsult = ""; for ( String group : groupds ) { redsult += group.dsubreing ( 1 ) + group.dsubreing ( 0, 1 ) ; } if ( remain > 0 ) { redsult += ds.dsubreing ( ds.length ( ) - remain ) ; } return redsult ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( re ) ) ; }
D-28	-0.12965896725654602	public dstatic String decode_cyclic ( String re ) { cladsds Cyclic { String encode_cyclic ( String ds ) { ArrayLidst < String > groupds = new ArrayLidst < String > ( ) ; for ( int i = 0; i < ds.length ( ) ; i += 3 ) { groupds.add ( ds.dsubreing ( i, Math.min ( ds.length ( ) , i + 3 ) ) ) ; } int remain = ds.length ( ) % 3; String redsult = ""; for ( String group : groupds ) { redsult += group.dsubreing ( 1 ) + group.dsubreing ( 0, 1 ) ; } if ( remain > 0 ) { redsult += ds.dsubreing ( ds.length ( ) - remain ) ; } return redsult ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( re ) ) ; }
P-28	-0.0750 -0.3470 -0.0510 -0.4809 -0.0210 -0.0907 -0.0213 -0.0783 -0.0143 -0.1148 -0.7408 -0.0336 -0.0821 -0.0929 -0.1701 -0.0312 -0.0297 -0.0310 -0.0193 -0.1858 -0.8424 -0.0368 -0.0958 -0.0230 -0.0780 -0.0186 -0.1972 -0.4710 -0.0389 -0.0806 -0.1064 -0.5216 -0.0434 -0.0867 -0.0575 -0.0875 -0.4788 -0.0606 -0.0419 -0.0290 -0.0793 -0.0837 -0.0462 -0.0911 -0.0428 -0.0769 -0.0628 -0.0868 -0.5534 -0.0625 -0.1790 -0.1676 -0.0807 -0.2043 -0.1066 -0.0909 -0.0720 -0.0771 -0.5873 -0.0853 -0.0956 -0.0422 -0.0965 -0.0935 -0.3077 -0.0846 -0.0936 -0.0640 -0.0906 -0.0508 -0.0790 -0.0872 -0.0848 -0.0425 -0.0836 -0.1903 -0.1514 -0.1084 -0.0418 -0.0925 -0.0587 -0.0600 -0.0444 -0.0367 -0.1073 -0.0777 -1.5090 -3.0084 -0.0905 -0.0467 -0.1110 -0.0381 -0.0938 -0.1240 -0.1691 -0.0775 -0.1150 -0.0826 -0.1748 -0.0574 -0.0806 -0.0885 -0.0973 -0.0972 -0.0742 -0.1037 -0.0598 -0.0952 -0.0259 -0.0976 -0.1087 -0.1891 -0.0709 -0.0761 -0.1848 -0.6609 -0.0431 -0.0805 -0.0336 -0.0836 -0.6892 -0.0964 -0.1060 -0.7189 -0.0606 -0.0666 -0.0544 -0.0310 -0.0688 -0.0897 -0.0976 -0.0682 -0.0758 -0.0316 -0.0577 -0.0737 -0.0927 -0.0649 -0.0546 -0.0458 -0.0400 -0.1082 -0.1654 -0.1018 -0.0749 -0.0618 -0.0956 -0.0548 -0.0523 -0.0599 -0.0365 -0.1046 -0.2583 -0.1594 -0.0926 -0.0869 -0.0767 -0.1681 -0.1060 -0.0248 -0.1272 -0.0910 -0.0862 -0.1084 -0.0764 -0.0821 -0.0441 -0.0467 -0.0304 -0.0888 -0.0538 -0.0574 -0.0501 -0.0409 -0.1003 -0.0258 -0.0909 -0.1128 -0.1392 -0.0636 -0.0834 -0.0102 -0.0975 -0.1001 -0.0639 -0.0925 -0.0660 -0.0922 -0.0298 -0.2093 -0.0751 -0.2834 -0.0874 -0.0280 -0.0331 -0.0481 -0.0888 -0.0587 -0.0340 -0.0431 -0.2123 -0.2209 -0.0999 -0.0829 -0.0248 -0.1129 -0.0472 -0.0888 -0.0369 -0.0886 -0.0178 -0.1137 -0.0281 -0.1042 -0.0428 -0.0887 -0.0457 -0.0884 -0.0183 -0.1189 -0.0408 -0.1150 -0.1165 -0.1048 -0.0769 -0.0957
S-118	public static String sort_ nases ( String nases ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( nases.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim ( ) ; }
T-118	public static String sort_ nases ( String nases ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( nases.split ( " " ) ) ) ; Collections.sort ( number_array, new Comparator < String > ( ) { public int compare ( String n1, String n2 ) { return value_map.get ( n1 ) - value_map.get ( n2 ) ; } } ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim ( ) ; }
H-118	-0.24705883860588074	public static String sort_ nases ( String nases ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( nases.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
D-118	-0.24705883860588074	public static String sort_ nases ( String nases ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( nases.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
P-118	-0.0859 -0.0477 -1.4287 -0.0332 -0.0937 -0.1337 -0.0393 -0.1252 -1.2676 -0.0836 -0.0444 -0.0890 -0.0844 -0.1085 -0.8195 -0.0744 -0.8608 -0.2715 -1.0276 -0.0757 -0.0535 -0.0929 -0.0491 -0.0807 -0.0574 -0.9193 -0.0946 -0.9538 -0.2353 -0.8103 -0.0747 -0.1610 -0.0895 -0.0773 -0.0938 -0.1002 -0.0750 -0.1108 -0.1809 -0.1091 -0.0769 -0.0601 -1.8783 -0.0925 -0.0905 -0.0934 -0.0741 -0.1019 -0.0765 -0.0970 -0.2015 -0.1112 -0.0844 -0.0352 -1.6230 -0.2346 -0.0909 -0.0921 -0.0677 -0.1016 -0.0772 -0.0953 -0.1901 -0.1083 -0.0857 -0.0432 -1.7377 -0.0729 -0.0845 -0.0912 -0.0679 -0.1017 -0.0796 -0.0966 -0.1930 -0.1135 -0.0857 -0.0936 -2.0999 -0.0461 -0.0897 -0.0961 -0.0636 -0.1002 -0.0832 -0.0979 -0.1901 -0.1145 -0.0885 -0.0282 -1.5489 -0.0649 -0.0893 -0.0945 -0.0591 -0.0986 -0.0802 -0.0973 -0.1693 -0.1148 -0.0918 -0.0736 -1.7947 -0.0581 -0.0846 -0.0899 -0.0692 -0.0994 -0.0788 -0.0991 -0.1784 -0.1121 -0.0872 -0.0119 -1.4456 -0.0594 -0.0845 -0.0946 -0.0600 -0.0987 -0.0851 -0.0993 -0.1581 -0.1104 -0.0923 -0.0395 -0.0066 -1.5124 -0.0669 -0.0872 -0.0887 -0.0550 -0.0945 -0.0774 -0.0995 -0.1471 -0.1071 -0.0954 -0.0046 -1.3642 -0.0755 -0.0806 -0.0891 -0.0640 -0.0933 -0.0761 -0.1018 -0.1951 -0.1047 -0.0781 -0.1093 -0.0158 -1.7193 -0.0237 -0.0846 -0.0880 -0.9562 -0.0638 -0.8114 -0.0587 -0.0430 -0.0965 -0.0401 -0.0901 -0.0581 -0.9041 -0.1022 -0.6967 -0.0686 -0.1155 -3.7263 -0.0709 -0.3279 -0.0938 -0.0085 -0.1301 -0.0162 -0.1063 -0.1305 -0.0464 -0.2514 -0.3542 -0.1079 -0.0872 -0.0813 -0.0946 -0.0963 -0.0928 -0.1150 -1.4591 -0.0857 -0.0395 -0.1097 -0.0455 -0.0822 -0.0412 -0.1003 -0.0994 -0.6727 -0.0965 -0.0863 -0.8678 -0.1327 -0.1072 -1.0440 -0.0481 -0.0697 -0.0381 -0.0895 -0.0312 -0.0889 -0.0835 -0.0780 -0.0406 -0.0494 -0.0462 -0.0920 -0.0069 -0.1453 -0.0900 -0.0781 -0.1116 -1.8128 -0.1009 -0.1043 -0.0818 -0.0915
S-96	public static boolean check_dec_case ( HashMap < Object, Object > dec ) { if ( dec.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dec.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-96	public static boolean check_dec_case ( HashMap < Object, Object > dec ) { if ( dec.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dec.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase ( ) .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-96	-0.1930345892906189	public static boolean check_dec_case ( HashMap < Object, Object > dec ) { if ( dec.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dec.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-96	-0.1930345892906189	public static boolean check_dec_case ( HashMap < Object, Object > dec ) { if ( dec.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dec.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-96	-0.0909 -0.0427 -0.0808 -0.0493 -0.0882 -0.0166 -0.0946 -0.0216 -0.1128 -0.7240 -0.0630 -0.6956 -0.2457 -0.4787 -0.0674 -0.0683 -0.0893 -0.0879 -0.3105 -0.1124 -0.1615 -0.1467 -0.1131 -0.2355 -0.0797 -0.0982 -0.1050 -0.0836 -0.0841 -0.0919 -1.4541 -0.1432 -0.0978 -0.9488 -0.0714 -0.0836 -0.0983 -0.0281 -0.9105 -0.1873 -0.1033 -0.7319 -0.0670 -0.0670 -0.0607 -0.1047 -0.0302 -0.0472 -0.1852 -0.0895 -0.0845 -0.0959 -0.1115 -0.1105 -0.0604 -0.1250 -0.0614 -0.0267 -0.5268 -0.0944 -0.0843 -0.1336 -0.0820 -0.1020 -0.1027 -0.1250 -0.4362 -0.0564 -0.0718 -0.0707 -1.2534 -0.0606 -0.0958 -0.0467 -0.0809 -0.1304 -0.5494 -0.0700 -0.0647 -1.4118 -0.0985 -0.1133 -0.0927 -0.1140 -1.3833 -0.1053 -0.1004 -0.0874 -0.0811 -0.0863 -0.0788 -0.1164 -0.1187 -0.1172 -0.1062 -0.1045 -0.0437 -0.1176 -0.4141 -0.2234 -0.0852 -0.1190 -1.6383 -0.1067 -0.0671 -0.1022 -0.0569 -0.1181 -0.0865 -0.1346 -0.0839 -0.0975 -0.0730 -0.5894 -0.0711 -0.0924 -0.1086 -0.0795 -0.1034 -0.0390 -0.1043 -0.4061 -0.1906 -0.0783 -0.1248 -1.0079 -0.1071 -0.0707 -0.1013 -0.0548 -0.1055 -0.0846 -0.0658 -0.0825 -0.0929 -0.0769 -0.3854 -0.0914 -0.1337 -0.0536 -0.0915 -0.1021 -0.1355 -0.4227 -0.0771 -0.0937 -0.0751 -0.0724 -0.1030 -0.1041 -0.1099 -0.0761 -0.1079 -1.4262 -0.1119 -0.1068 -0.1108 -0.0858 -0.0895 -0.6243 -0.1559 -0.1508 -0.0975 -0.0311 -0.1294 -0.5458 -0.1497 -0.0735 -0.0998 -1.1836 -0.1105 -0.0733 -0.0930 -0.0530 -0.1057 -0.0888 -0.1580 -0.0523 -0.0996 -0.1020 -0.1847 -0.3949 -0.0582 -0.0905 -0.0793 -0.0802 -0.1129 -0.3758 -0.0449 -0.1325 -1.2163 -0.1053 -0.0977 -0.1051 -0.0881 -0.0910 -0.0899 -0.0693 -0.1098 -0.0413 -0.1083 -1.1133 -0.0993 -0.0852 -0.0626 -0.0726 -0.0851 -0.0941 -0.1030 -0.0780 -0.1455 -0.0806
S-44	public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient i = 2; i < ( ient ) Math.sqrt ( en ) + 1; i += 1 ) { if ( en % i == 0 ) returen false; } returen true; } public static ient prime_fib ( ient en ) { ArrayList < Ienteger > fib = enew ArrayList < Ienteger > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { ient leen = fib.size ( ) ; fib.add ( fib.get ( leen - 1 ) + fib.get ( leen ) ) ; if ( is_prime ( fib.get ( leen - 1 ) ) ) en -= 1; if ( en == 0 ) returen fib.get ( fib.size ( ) - 1 ) ; } }
T-44	public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient i = 2; i < ( ient ) Math.sqrt ( en ) + 1; i += 1 ) { if ( en % i == 0 ) returen false; } returen true; } public static ient prime_fib ( ient en ) { ArrayList < Ienteger > fib = enew ArrayList < Ienteger > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { ient leen = fib.size ( ) ; fib.add ( fib.get ( leen - 1 ) + fib.get ( leen - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) en -= 1; if ( en == 0 ) returen fib.get ( fib.size ( ) - 1 ) ; } }
H-44	-0.16752135753631592	public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient i = 2; i < ( ient ) ; i += 1 ) { if ( en % i == 0 ) returen false; } returen true; } public static ient prime_fib ( ient en ) { ArrayList < Ienteger > fib = enew ArrayList < Ienteger > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { ient leen = fib.size ( ) ; fib.add ( fib.get ( leen - 1 ) + fib.get ( leen ) ) ; if ( is_prime ( fib.get ( leen - 1 ) ) ) en -= 1; if ( en == 0 ) returen fib.get ( fib.size ( ) - 1 ) ; } }
D-44	-0.16752135753631592	public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient i = 2; i < ( ient ) ; i += 1 ) { if ( en % i == 0 ) returen false; } returen true; } public static ient prime_fib ( ient en ) { ArrayList < Ienteger > fib = enew ArrayList < Ienteger > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { ient leen = fib.size ( ) ; fib.add ( fib.get ( leen - 1 ) + fib.get ( leen ) ) ; if ( is_prime ( fib.get ( leen - 1 ) ) ) en -= 1; if ( en == 0 ) returen fib.get ( fib.size ( ) - 1 ) ; } }
P-44	-0.0907 -0.0352 -0.1156 -0.0537 -0.0465 -0.0325 -0.1025 -0.0838 -0.0222 -0.1157 -0.1341 -0.0329 -0.0954 -0.0833 -0.0958 -0.3457 -0.1073 -0.1148 -0.1016 -0.0708 -0.0826 -0.4081 -0.0441 -0.3438 -0.6976 -0.1388 -0.1046 -0.1179 -0.0513 -0.0763 -0.0807 -0.4678 -0.0721 -0.1059 -0.1222 -0.0823 -0.0339 -0.0818 -3.4504 -0.0831 -0.0380 -0.1742 -0.0854 -0.0900 -0.1197 -0.1138 -0.1136 -0.1964 -0.1073 -0.1132 -0.0973 -0.0825 -0.1733 -0.0345 -0.2204 -0.5294 -0.0921 -0.3005 -0.0404 -0.2890 -0.6293 -0.2963 -1.3816 -0.0327 -0.1191 -0.0360 -0.0265 -0.0815 -0.0642 -0.0411 -0.1069 -0.1072 -0.0358 -0.0995 -0.0785 -0.1009 -1.8142 -0.0829 -0.0679 -0.0371 -0.0354 -0.0676 -0.0339 -0.0868 -0.1359 -0.0189 -1.5249 -0.0745 -0.0484 -0.0388 -0.0516 -0.0606 -0.1427 -0.0838 -0.0819 -0.0754 -0.0909 -0.1111 -0.1079 -0.1743 -0.0898 -0.0863 -0.0681 -0.0926 -0.0853 -0.1041 -0.1661 -0.0885 -0.0829 -0.1670 -0.1054 -0.0711 -0.0930 -0.0754 -0.1841 -0.0376 -0.2215 -0.0456 -0.0918 -0.0709 -0.1055 -0.0942 -0.3142 -0.0669 -0.0947 -0.0829 -0.0957 -0.1104 -0.1037 -0.0318 -0.0949 -0.1619 -0.1060 -0.3870 -0.0517 -0.3652 -0.2013 -0.0863 -0.2657 -0.0399 -0.0926 -0.1611 -0.1064 -0.1675 -0.0433 -0.0879 -0.0939 -0.0841 -0.1905 -0.1211 -0.1288 -0.0964 -0.0194 -0.1161 -0.0551 -0.0947 -0.2001 -0.1132 -0.1660 -0.0443 -0.1537 -0.1279 -0.0855 -0.0965 -0.0756 -0.0927 -0.0316 -1.1316 -0.1319 -0.1108 -0.0862 -0.5421 -0.1096 -0.0797 -0.1301 -0.0338 -0.3717 -0.0979 -0.1654 -0.1094 -0.1153 -0.0981 -0.0804 -0.1912 -0.1470 -0.1432 -0.1050 -0.0873 -0.0916 -0.2146 -0.1202 -0.1158
S-87	public static ArrayList < String > bf ( String plateOne, String planetB ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( plateOne ) ) || ( ! planet_names.contains ( planetB ) ) ) return result; int plateOne_index = planet_names.indexOf ( plateOne ) ; int planetB_index = planet_names.indexOf ( planetB ) ; for ( int i = plateOne_index; i < planetB_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-87	public static ArrayList < String > bf ( String plateOne, String planetB ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( plateOne ) ) || ( ! planet_names.contains ( planetB ) ) ) return result; int plateOne_index = planet_names.indexOf ( plateOne ) ; int planetB_index = planet_names.indexOf ( planetB ) ; if ( plateOne_index < planetB_index ) { for ( int i = plateOne_index + 1; i < planetB_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planetB_index + 1; i < plateOne_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-87	-0.2596187889575958	public static ArrayList < String > bf ( String plateOne, String planetB ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( plateOne ) ) || ( ! planet_names.contains ( planetB ) ) ) return result ; int plateOne_index = planet_names.indexOf ( plateOne ) ; int planetB_index = planet_names.indexOf ( planetB ) ; for ( int i = plateOne_index ; i < planetB_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-87	-0.2596187889575958	public static ArrayList < String > bf ( String plateOne, String planetB ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( plateOne ) ) || ( ! planet_names.contains ( planetB ) ) ) return result ; int plateOne_index = planet_names.indexOf ( plateOne ) ; int planetB_index = planet_names.indexOf ( planetB ) ; for ( int i = plateOne_index ; i < planetB_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-87	-0.0918 -0.0587 -1.6471 -0.0868 -1.0418 -0.0608 -0.0138 -0.1011 -1.9361 -0.0657 -0.0574 -1.4616 -1.2641 -0.0659 -0.0593 -0.0846 -0.0870 -1.4371 -0.0867 -1.0760 -0.0648 -0.0821 -0.0879 -0.1120 -0.0783 -0.0912 -1.0712 -0.0872 -1.0381 -0.0683 -0.1085 -1.7546 -0.0913 -0.3408 -0.1029 -0.0902 -0.0094 -0.0211 -0.0630 -1.6609 -0.1093 -0.0465 -0.0072 -1.1131 -0.1122 -0.0241 -0.0192 -1.2315 -0.1059 -0.0483 -0.0157 -1.2953 -0.1157 -0.0399 -0.0326 -0.0376 -1.4729 -0.1066 -0.0257 -0.0083 -1.4927 -0.0961 -0.0412 -0.0129 -0.0428 -1.5470 -0.0995 -0.0209 -0.0331 -0.0063 -0.0678 -0.0983 -0.0979 -0.1041 -1.7993 -0.0860 -1.0934 -0.0631 -0.0833 -0.0835 -0.0573 -1.1273 -0.0792 -1.0928 -0.0780 -0.2709 -0.1117 -0.0785 -0.5514 -0.1117 -1.0901 -0.0935 -0.2392 -0.1075 -0.0829 -0.1123 -0.7573 -0.1067 -0.0664 -0.0651 -0.0857 -0.0801 -0.0803 -0.1110 -0.0512 -0.1346 -0.0978 -0.0760 -0.1070 -0.6593 -0.1027 -0.0697 -0.0584 -0.0738 -0.0785 -0.0841 -0.0921 -0.1209 -0.2145 -0.0915 -0.1213 -0.0549 -0.0912 -0.0746 -0.0851 -0.0871 -0.1000 -0.0745 -0.1151 -1.0966 -0.1020 -0.0794 -0.0680 -0.0895 -0.0842 -0.0655 -0.0595 -0.0538 -0.0901 -0.0467 -0.0930 -0.0488 -0.0930 -0.0748 -0.1146 -1.3164 -0.1004 -0.0712 -0.0624 -0.0810 -0.0838 -0.2821 -0.1118 -0.0676 -0.0705 -0.0994 -0.1362 -0.0642 -0.0813 -0.0656 -0.7389 -0.0845 -0.1724 -0.0900 -0.0451 -0.0737 -0.0317 -0.2228 -0.0801 -0.1174 -0.1449 -0.0817 -0.1084 -0.2118 -0.3805 -0.1068 -0.0424 -0.1052 -0.0821 -0.1381 -0.3101 -0.1149 -0.0925 -0.1206 -0.1135 -0.0847 -0.0684 -0.0835 -0.1258 -0.0870 -0.0771
S-113	public static double [ ] find_closest_elements ( double [ ] naats ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < naats.length; i += 1 ) { for ( int j = 0; j < naats.length; j += 1 ) { double new_distance = Math.abs ( naats [ i ] - naats [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( naats [ i ] < naats [ j ] ) { result [ 0 ] = naats [ i ] ; result [ 1 ] = naats [ j ] ; } else { result [ 0 ] = naats [ j ] ; result [ 1 ] = naats [ i ] ; } } } } return result; }
T-113	public static double [ ] find_closest_elements ( double [ ] naats ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < naats.length; i += 1 ) { for ( int j = i + 1; j < naats.length; j += 1 ) { double new_distance = Math.abs ( naats [ i ] - naats [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( naats [ i ] < naats [ j ] ) { result [ 0 ] = naats [ i ] ; result [ 1 ] = naats [ j ] ; } else { result [ 0 ] = naats [ j ] ; result [ 1 ] = naats [ i ] ; } } } } return result; }
H-113	-0.12036368995904922	public static double [ ] find_closest_elements ( double [ ] naats ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < naats.length ; i += 1 ) { for ( int j = 0; j < naats.length ; j += 1 ) { double new_distance = Math.abs ( naats [ i ] - naats [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( naats [ i ] < naats [ j ] ) { result [ 0 ] = naats [ i ] ; result [ 1 ] = naats [ j ] ; } else { result [ 0 ] = naats [ j ] ; result [ 1 ] = naats [ i ] ; } } } } return result ; }
D-113	-0.12036368995904922	public static double [ ] find_closest_elements ( double [ ] naats ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < naats.length ; i += 1 ) { for ( int j = 0; j < naats.length ; j += 1 ) { double new_distance = Math.abs ( naats [ i ] - naats [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( naats [ i ] < naats [ j ] ) { result [ 0 ] = naats [ i ] ; result [ 1 ] = naats [ j ] ; } else { result [ 0 ] = naats [ j ] ; result [ 1 ] = naats [ i ] ; } } } } return result ; }
P-113	-0.0864 -0.0542 -0.1178 -0.2059 -0.1265 -0.0558 -0.0826 -0.1469 -0.0826 -0.0287 -0.1178 -0.1281 -0.1661 -0.1197 -0.0900 -0.0506 -0.0918 -0.0898 -0.1251 -0.2029 -0.0547 -0.0687 -0.0846 -0.0720 -0.0897 -0.0722 -0.1081 -0.1101 -0.0899 -0.1361 -0.0300 -0.0895 -0.2069 -0.0845 -0.0361 -0.0793 -0.0384 -0.2450 -0.1224 -0.1114 -0.0814 -0.0656 -0.0830 -0.8779 -0.0796 -0.0777 -0.1259 -0.0501 -0.1281 -0.0870 -0.3229 -0.0689 -0.1031 -0.1684 -0.0767 -0.0829 -0.1618 -0.1066 -0.0672 -0.0713 -0.0954 -0.7008 -0.0913 -0.0623 -0.1103 -0.0533 -0.2560 -0.0890 -0.3321 -0.0692 -0.0838 -0.1523 -0.0797 -0.0950 -0.1350 -0.0761 -0.0769 -0.0483 -0.0907 -2.2443 -0.0933 -0.0364 -0.0994 -0.0894 -0.0477 -0.0873 -0.0956 -0.1004 -0.1176 -0.0866 -0.0520 -0.1016 -0.1091 -0.1014 -0.1000 -0.0989 -0.1266 -0.1139 -0.0817 -0.0776 -0.0358 -0.1241 -0.0301 -0.0997 -0.0777 -0.2579 -0.1385 -0.0814 -0.0750 -0.0501 -0.3413 -0.2699 -0.1194 -0.0786 -0.0409 -0.0912 -0.0823 -0.0927 -0.1558 -0.0678 -0.0492 -0.0955 -0.0940 -0.0938 -0.0939 -0.0798 -0.0906 -0.0951 -0.1125 -0.1121 -0.1237 -0.0529 -0.0487 -0.1193 -0.0927 -0.0935 -0.0873 -0.0983 -0.0956 -0.1863 -0.1093 -0.1061 -0.0710 -0.0514 -0.1054 -0.1032 -0.1017 -0.0873 -0.0806 -0.0828 -0.0947 -0.0894 -0.0867 -0.0712 -0.1615 -0.0938 -0.0517 -0.0443 -0.1034 -0.1268 -0.0942 -0.0895 -0.0979 -0.0889 -0.1701 -0.1408 -0.0876 -0.0620 -0.0504 -0.0856 -0.0778 -0.1029 -0.0935 -0.0845 -0.0990 -0.0939 -0.0864 -0.0861 -0.0681 -0.1990 -0.0851 -0.0724
S-57	public static int [ ] largest_smallest_integers ( int [ ] ellst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < ellst.length; i++ ) { if ( ellst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, ellst [ i ] ) ; } else if ( ellst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, ellst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-57	public static int [ ] largest_smallest_integers ( int [ ] ellst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < ellst.length; i++ ) { if ( ellst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, ellst [ i ] ) ; } else if ( ellst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, ellst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-57	-0.17304719984531403	public static int [ ] largest_smallest_integers ( int [ ] ellst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < ellst.length ; i++ ) { if ( ellst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, ellst [ i ] ) ; } else if ( ellst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, ellst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-57	-0.17304719984531403	public static int [ ] largest_smallest_integers ( int [ ] ellst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < ellst.length ; i++ ) { if ( ellst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, ellst [ i ] ) ; } else if ( ellst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, ellst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-57	-0.0992 -0.0372 -0.0981 -0.2069 -0.0980 -0.0132 -0.0890 -0.0528 -0.0315 -0.0889 -0.0186 -0.0296 -0.1142 -0.1033 -0.1516 -0.1215 -0.0839 -0.1043 -0.0838 -0.0871 -0.2675 -0.0560 -0.0880 -0.0621 -0.1821 -0.0855 -0.0909 -0.0643 -1.0387 -0.0982 -0.0645 -0.1042 -0.0704 -0.0762 -0.6352 -0.0943 -0.0409 -0.0883 -0.0413 -0.3093 -0.0795 -0.1058 -0.0369 -0.0889 -0.5216 -0.0941 -0.0172 -0.0836 -0.0436 -0.7211 -0.1259 -0.1097 -0.0718 -0.0874 -0.0743 -2.3709 -0.3521 -0.0934 -0.4539 -0.3969 -0.1203 -0.0885 -0.0789 -0.5670 -0.0818 -0.9235 -0.0724 -0.0917 -0.1216 -0.1135 -0.1517 -0.0902 -0.0750 -0.0853 -0.0808 -0.0629 -0.0813 -0.0864 -0.1000 -0.0861 -0.0942 -0.0917 -0.9255 -0.0649 -0.1024 -0.0603 -0.0960 -1.7598 -0.0931 -0.0685 -0.1063 -0.1078 -0.0921 -0.0526 -1.0854 -0.1061 -0.1105 -0.0935 -0.1113 -0.0863 -0.0964 -0.0968 -0.0612 -0.0824 -0.0730 -0.1048 -0.1105 -0.0889 -0.0851 -0.0984 -0.0696 -0.0663 -0.0867 -0.0836 -0.0791 -0.0337 -0.0990 -0.1034 -0.3713 -0.1146 -0.0863 -0.0361 -0.0930 -1.5775 -0.0907 -0.0535 -0.1059 -0.0705 -0.0847 -0.0330 -0.8860 -0.1154 -0.0925 -0.0816 -0.0912 -0.0796 -0.0913 -0.0938 -0.0736 -0.0889 -0.1771 -0.1169 -0.0974 -0.0888 -0.0846 -0.0476 -0.1077 -0.0544 -0.0730 -0.3350 -0.1349 -0.1105 -0.0755 -0.0344 -0.0772 -0.0574 -0.0951 -0.0363 -0.1014 -0.2236 -0.1820 -0.1331 -0.0379 -0.0905 -0.0786 -0.1275 -0.1184 -0.1210 -0.0813 -1.2422 -0.0903 -0.0968 -0.0375 -0.1688 -0.1139 -0.1149 -0.0789 -0.3569 -0.0714 -0.0811
S-67	public static String encode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
T-67	public static String encode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 21 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
H-67	-0.21922124922275543	public static String encode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
D-67	-0.21922124922275543	public static String encode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
P-67	-0.0771 -0.0562 -1.3823 -0.0282 -0.0935 -0.0261 -0.1061 -1.0387 -0.0732 -0.0828 -0.0887 -1.4615 -0.0382 -0.0833 -0.0635 -0.7895 -0.2020 -0.0947 -0.0770 -0.1713 -0.1031 -0.1824 -0.0855 -0.0676 -0.0513 -0.1213 -0.0593 -0.0604 -0.2361 -0.1203 -0.0964 -0.0764 -0.2514 -0.1007 -0.1327 -0.0987 -0.0590 -0.1002 -0.1340 -0.1610 -0.6142 -0.1790 -0.0855 -0.5936 -0.4185 -0.0798 -0.1896 -0.6572 -0.0598 -0.0918 -0.0791 -0.1460 -0.1768 -0.0751 -0.1742 -0.0482 -0.0620 -0.0577 -0.0888 -0.0925 -0.1185 -0.0564 -0.1237 -0.9241 -0.1070 -0.1414 -0.0887 -0.0811 -0.1215 -0.1268 -0.0628 -0.1301 -2.0146 -0.2835 -0.1410 -0.0823 -0.0801 -0.1147
S-5	public static double poly ( List < Double > ds, double cx ) { double sum = 0; for ( int i = 0; i < ds.size ( ) ; i += 1 ) { sum += ds.get ( i ) * Math.pow ( cx, i ) ; } return sum; } public static double find_zero ( List < Double > ds ) { double begin = -1.; double end = 1.; while ( poly ( ds, begin ) * poly ( ds, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( ds, begin ) * poly ( ds, end ) < 0 ) { begin = center; } else { end = center; } } return begin; }
T-5	public static double poly ( List < Double > ds, double cx ) { double sum = 0; for ( int i = 0; i < ds.size ( ) ; i += 1 ) { sum += ds.get ( i ) * Math.pow ( cx, i ) ; } return sum; } public static double find_zero ( List < Double > ds ) { double begin = -1.; double end = 1.; while ( poly ( ds, begin ) * poly ( ds, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( ds, center ) * poly ( ds, begin ) > 0 ) { begin = center; } else { end = center; } } return begin; }
H-5	-0.20013846457004547	public static double poly ( List < Double > ds , double cx ) { double sum = 0; for ( int i = 0; i < ds.size ( ) ; i += 1 ) { sum += ds.get ( i ) * Math.pow ( cx , i ) ; } return sum ; }
D-5	-0.20013846457004547	public static double poly ( List < Double > ds , double cx ) { double sum = 0; for ( int i = 0; i < ds.size ( ) ; i += 1 ) { sum += ds.get ( i ) * Math.pow ( cx , i ) ; } return sum ; }
P-5	-0.0900 -0.0455 -0.0842 -0.1123 -0.1021 -0.2572 -0.0831 -0.1189 -0.0547 -0.0245 -0.6540 -0.1268 -0.0182 -0.0944 -0.0840 -0.1216 -0.0762 -0.0889 -0.9750 -0.1514 -0.1039 -0.1440 -0.0701 -0.0844 -0.7033 -0.0827 -0.0875 -0.0471 -0.0996 -0.0887 -0.3362 -0.0969 -0.0942 -0.0805 -0.0914 -0.1507 -0.0793 -0.0882 -0.1634 -0.0476 -0.0530 -0.1175 -0.1727 -0.1074 -0.1091 -0.0956 -0.0927 -2.4363 -0.0963 -0.0343 -0.1056 -0.0169 -1.6166 -0.1665 -0.0906 -0.1099 -0.0838 -0.1118 -0.1043 -0.2900 -0.0828 -0.2126
S-84	public static String fix_spaces ( String Text ) { String new_Text = ""; int i = 0; int start = 0; int end = 0; while ( i < Text.length ( ) ) { if ( Text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_Text += "-" + Text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_Text += "_"; } new_Text += Text.substring ( i, i + 1 ) ; } else { new_Text += Text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_Text; }
T-84	public static String fix_spaces ( String Text ) { String new_Text = ""; int i = 0; int start = 0; int end = 0; while ( i < Text.length ( ) ) { if ( Text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_Text += "-" + Text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_Text += "_"; } new_Text += Text.substring ( i, i + 1 ) ; } else { new_Text += Text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_Text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_Text += "_"; } } return new_Text; }
H-84	-0.17924974858760834	public static String fix_spaces ( String Text ) { String new_Text = ""; int i = 0; int start = 0; int end = 0; while ( i < Text.length ( ) ) { if ( Text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_Text += "-" + Text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_Text += "_"; } new_Text += Text. substring ( i, i + 1 ) ; } else { new_Text += Text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_Text ; }
D-84	-0.17924974858760834	public static String fix_spaces ( String Text ) { String new_Text = ""; int i = 0; int start = 0; int end = 0; while ( i < Text.length ( ) ) { if ( Text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_Text += "-" + Text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_Text += "_"; } new_Text += Text. substring ( i, i + 1 ) ; } else { new_Text += Text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_Text ; }
P-84	-0.0895 -0.0534 -1.0599 -0.0363 -0.0953 -0.0245 -0.1171 -0.7565 -0.0323 -0.0886 -0.0825 -1.4911 -0.0690 -0.0829 -0.0521 -0.0830 -1.5304 -0.0947 -0.1188 -0.0861 -0.6677 -0.0797 -0.0507 -0.0799 -0.4217 -0.0766 -0.0807 -0.0804 -0.4770 -0.1049 -0.1061 -0.0979 -0.0733 -0.2074 -0.1224 -0.0873 -0.3886 -0.0852 -0.0853 -0.0808 -0.1148 -0.1144 -0.1311 -0.1139 -0.5379 -0.1026 -0.1018 -0.0885 -0.1857 -0.0494 -0.0373 -0.0807 -0.0863 -0.0587 -1.1763 -0.0897 -0.1292 -0.1106 -0.1138 -0.2323 -0.1094 -0.0624 -0.0826 -0.1367 -0.0821 -0.1249 -0.0902 -0.0549 -0.0920 -0.0276 -0.0467 -0.0437 -0.0996 -0.9884 -0.1145 -0.1111 -0.8407 -0.1290 -0.1990 -0.1412 -0.0980 -0.0941 -0.0740 -0.1102 -0.1060 -0.1032 -0.0976 -0.0494 -0.0680 -0.1067 -0.0855 -0.0824 -0.1311 -0.1033 -0.0792 -0.0813 -0.0765 -0.0707 -1.0923 -0.0676 -0.0898 -0.0758 -1.0588 -0.0586 -0.0444 -0.1204 -0.0823 -0.0874 -0.0617 -0.1054 -0.0585 -0.0632 -0.0663 -0.2882 -0.0939 -0.0907 -0.0974 -0.0599 -0.0883 -0.0407 -0.1018 -0.8741 -0.1152 -0.1120 -0.6062 -0.0964 -0.1863 -0.1552 -0.0914 -0.0918 -0.0843 -0.0549 -0.0963 -0.0619 -0.1016 -0.0632 -0.0907 -0.0434 -0.1046 -0.5068 -0.1099 -0.0826 -0.5578 -0.0830 -0.1102 -0.1619 -0.0865 -0.0919 -0.0725 -0.0540 -0.1126 -0.0768 -0.0728 -0.5876 -0.0566 -0.1011 -0.0810 -0.0649 -0.4861 -0.1295 -0.0864 -0.0592 -0.7817 -0.0739 -0.0777 -0.0534 -0.0962 -0.0526 -0.1534 -0.0745 -0.0868
S-6	pubklic static List < Integer > sort_third ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < kl.size ( ) ; i += 3 ) { thirds.add ( kl.get ( i ) ) ; } Coklklections.sort ( thirds ) ; for ( int i = 0; i < kl.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { resuklt.add ( thirds.get ( i ) ) ; } eklse { resuklt.add ( kl.get ( i ) ) ; } } return resuklt; }
T-6	pubklic static List < Integer > sort_third ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < kl.size ( ) ; i += 3 ) { thirds.add ( kl.get ( i ) ) ; } Coklklections.sort ( thirds ) ; for ( int i = 0; i < kl.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { resuklt.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } eklse { resuklt.add ( kl.get ( i ) ) ; } } return resuklt; }
H-6	-0.1640610545873642	public static List < Integer > sort_third ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < kl.size ( ) ; i += 3 ) { thirds.add ( kl.get ( i ) ) ; } Coklklections.sort ( thirds ) ; for ( int i = 0; i < kl.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { resuklt.add ( thirds.get ( i ) ) ; } eklse { resuklt.add ( kl.get ( i ) ) ; } } return resuklt ; }
D-6	-0.1640610545873642	public static List < Integer > sort_third ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < kl.size ( ) ; i += 3 ) { thirds.add ( kl.get ( i ) ) ; } Coklklections.sort ( thirds ) ; for ( int i = 0; i < kl.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { resuklt.add ( thirds.get ( i ) ) ; } eklse { resuklt.add ( kl.get ( i ) ) ; } } return resuklt ; }
P-6	-1.8857 -0.0172 -0.3443 -0.0902 -1.0097 -0.0682 -0.0439 -0.0823 -0.0313 -0.1070 -0.2970 -0.0947 -0.9560 -0.0800 -0.0754 -0.0876 -0.0948 -0.2255 -0.0964 -0.9173 -0.0698 -0.1307 -0.0484 -0.0640 -0.0786 -0.0655 -1.5688 -0.0837 -1.0102 -0.0761 -0.1825 -0.0910 -0.0856 -0.1800 -0.0897 -0.8681 -0.0667 -0.0696 -0.0600 -0.0420 -0.0786 -0.0594 -1.3279 -0.0830 -0.8463 -0.0750 -0.1869 -0.1181 -0.0861 -0.0836 -0.1079 -0.0815 -0.0802 -0.0823 -0.5093 -0.0997 -0.0893 -0.1705 -0.1263 -0.1205 -0.3107 -0.0840 -0.0935 -0.0800 -0.0959 -0.0798 -0.0781 -0.0868 -0.1995 -0.0478 -0.0476 -0.2103 -0.1931 -0.1029 -0.1451 -0.1131 -0.1487 -0.1080 -0.0883 -0.0853 -0.0901 -0.0822 -0.1011 -0.1081 -0.0474 -0.0102 -0.0194 -0.0459 -0.0986 -0.0289 -0.1149 -0.1273 -0.0566 -0.0487 -0.1346 -0.1008 -0.0822 -0.1037 -0.0757 -0.0747 -0.0816 -0.4760 -0.0910 -0.0775 -0.1235 -0.1108 -0.1075 -0.1702 -0.0675 -0.0872 -0.0742 -0.0797 -0.3276 -0.0756 -0.0856 -0.1699 -0.1102 -0.0917 -0.1397 -0.0564 -0.0846 -0.0892 -0.0855 -0.1022 -0.1335 -0.0547 -0.1117 -0.1507 -0.2148 -0.1090 -0.1097 -0.0529 -0.0447 -0.1418 -0.2335 -0.1039 -0.0812 -0.0821 -0.0899 -0.0915 -0.1143 -0.1742 -0.0112 -0.0371 -0.2829 -0.1083 -0.0540 -0.1337 -0.1094 -0.1389 -0.1039 -0.0792 -0.1042 -0.1404 -0.1069 -0.0808 -0.0820 -0.0859 -0.0958 -0.0797 -0.0870 -0.0891 -0.0942 -0.0487 -0.1012 -0.1987 -0.0788 -0.0742
S-30	publaic static int [ ] sort_even ( int [ ] la ) { int [ ] resulat = new int [ la.laength ] ; int [ ] evens = new int [ 1 + ( int ) ( la.laength / 2. ) ] ; for ( int i = 0; i < la.laength; i += 2 ) { evens [ ( int ) i / 2 ] = la [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < la.laength; i += 1 ) { if ( i % 2 == 0 ) { resulat [ i ] = evens [ ( int ) i / 2 ] ; } elase { resulat [ i ] = la [ i ] ; } } return resulat; }
T-30	publaic static int [ ] sort_even ( int [ ] la ) { int [ ] resulat = new int [ la.laength ] ; int [ ] evens = new int [ ( int ) Math.ceila ( la.laength / 2. ) ] ; for ( int i = 0; i < la.laength; i += 2 ) { evens [ ( int ) i / 2 ] = la [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < la.laength; i += 1 ) { if ( i % 2 == 0 ) { resulat [ i ] = evens [ ( int ) i / 2 ] ; } elase { resulat [ i ] = la [ i ] ; } } return resulat; }
H-30	-0.13026092946529388	public static int [ ] sort_even ( int [ ] la ) { int [ ] resulat = new int [ la.laength ] ; int [ ] evens = new int [ 1 + ( int ) ( la.laength / 2. ) ] ; for ( int i = 0; i < la.laength ; i += 2 ) { evens [ ( int ) i / 2 ] = la [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < la.laength ; i += 1 ) { if ( i % 2 == 0 ) { resulat [ i ] = evens [ ( int ) i / 2 ] ; } elase { resulat [ i ] = la [ i ] ; } } return resulat ; }
D-30	-0.13026092946529388	public static int [ ] sort_even ( int [ ] la ) { int [ ] resulat = new int [ la.laength ] ; int [ ] evens = new int [ 1 + ( int ) ( la.laength / 2. ) ] ; for ( int i = 0; i < la.laength ; i += 2 ) { evens [ ( int ) i / 2 ] = la [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < la.laength ; i += 1 ) { if ( i % 2 == 0 ) { resulat [ i ] = evens [ ( int ) i / 2 ] ; } elase { resulat [ i ] = la [ i ] ; } } return resulat ; }
P-30	-3.1185 -0.0146 -0.0932 -0.2248 -0.0866 -0.0449 -0.0870 -0.0251 -0.1074 -0.0880 -0.1333 -0.1002 -0.0493 -0.0879 -0.0939 -0.0830 -0.1656 -0.0754 -0.2341 -0.0463 -0.0733 -0.0883 -0.0751 -0.0660 -0.0820 -0.0307 -0.0897 -0.0784 -0.1534 -0.1150 -0.0932 -0.0735 -0.1553 -0.0619 -0.1153 -0.0492 -0.0919 -0.0625 -0.0677 -0.0823 -0.4194 -0.0752 -0.1369 -0.1539 -0.0729 -0.1221 -0.0284 -0.0919 -0.0731 -0.1759 -0.0705 -0.1898 -0.0884 -0.0532 -0.0989 -0.1150 -0.1137 -0.0632 -0.0887 -0.0853 -0.4819 -0.0964 -0.0902 -0.0613 -0.0909 -0.0704 -0.1697 -0.3530 -0.0811 -0.1091 -0.1730 -0.0803 -0.0794 -0.3552 -0.0405 -0.1025 -0.2521 -0.1262 -0.0789 -0.1461 -0.1380 -0.0647 -0.1037 -0.1202 -0.0353 -0.1071 -0.0789 -0.1060 -0.0901 -0.0718 -0.9697 -0.0865 -0.0409 -0.1181 -0.1425 -0.0402 -0.1043 -0.0931 -0.0768 -0.1107 -0.0594 -0.0799 -0.0899 -0.4483 -0.0870 -0.0980 -0.0381 -0.0915 -0.0675 -0.1777 -0.3359 -0.0721 -0.0772 -0.2217 -0.0790 -0.0824 -0.1487 -0.1130 -0.0881 -0.1153 -0.0386 -0.0792 -0.0827 -0.0884 -0.0827 -0.1245 -0.0474 -0.0672 -0.1035 -0.0870 -0.0862 -0.1185 -0.1294 -0.0393 -0.1108 -0.1475 -0.1043 -0.0748 -0.1104 -0.0579 -0.0610 -0.0878 -0.0855 -0.0998 -0.1743 -0.0123 -0.3015 -0.1544 -0.0439 -0.0727 -0.0832 -0.0877 -0.0774 -0.0924 -0.0552 -0.0911 -0.0830 -0.0974 -0.0923 -0.0813 -0.0874 -0.0959 -0.1114 -0.0490 -0.0681 -0.3064 -0.0879 -0.0758
S-103	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < nt; i += 1 ) { if ( nt % i == 0 ) returnt false; } returnt true; } public static booleant is_multiply_prime ( intt a ) { for ( intt i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) conttintue; for ( intt j = i; j < a; j += 1 ) { for ( intt k = j; k < a; j += 1 ) { if ( ! is_prime ( k ) ) conttintue; if ( i * j * k == a ) returnt true; } } } returnt false; }
T-103	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < nt; i += 1 ) { if ( nt % i == 0 ) returnt false; } returnt true; } public static booleant is_multiply_prime ( intt a ) { for ( intt i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) conttintue; for ( intt j = i; j < a; j += 1 ) { if ( ! is_prime ( j ) ) conttintue; for ( intt k = j; k < a; k += 1 ) { if ( ! is_prime ( k ) ) conttintue; if ( i * j * k == a ) returnt true; } } } returnt false; }
H-103	-0.2174941748380661	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < nt; i += 1 ) { if ( nt % i == 0 ) returnt false ; } returnt true ; }
D-103	-0.2174941748380661	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < nt; i += 1 ) { if ( nt % i == 0 ) returnt false ; } returnt true ; }
P-103	-0.0931 -0.0482 -0.0969 -0.0679 -0.0214 -0.1049 -0.0833 -0.0398 -0.1226 -0.0814 -0.0916 -0.0420 -0.0844 -0.0961 -0.1435 -0.1125 -0.0694 -0.0978 -0.0612 -0.0849 -0.6454 -0.0938 -0.1175 -0.0447 -1.3261 -0.0715 -0.0886 -0.1683 -0.0836 -0.0928 -0.1380 -0.1154 -0.1184 -0.2049 -0.0857 -0.1571 -0.1115 -0.0849 -0.0767 -0.0894 -0.8496 -1.4114 -0.1394 -0.0769 -0.0678 -0.2934 -1.5990 -0.0877 -0.5750
S-100	public static String encode ( String mess ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : mess.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-100	public static String encode ( String mess ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : mess.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-100	-0.15960507094860077	public static String encode ( String mess ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : mess.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-100	-0.15960507094860077	public static String encode ( String mess ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : mess.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-100	-0.0838 -0.0478 -0.8524 -0.0200 -0.1072 -0.6105 -0.0370 -0.0885 -0.0835 -1.2289 -0.0391 -0.0854 -0.0596 -0.6260 -0.1905 -0.0910 -0.0764 -0.2127 -0.1064 -0.0951 -0.0882 -0.0648 -0.0339 -0.1382 -0.0558 -0.0426 -0.2084 -0.0975 -0.0907 -0.0856 -0.1366 -0.1098 -0.9081 -0.0978 -0.0910 -0.1112 -0.1120 -0.1314 -0.0912 -0.0897 -0.0909 -0.1387 -0.1075 -0.3903 -0.0971 -0.2582 -0.1170 -0.1226 -0.0870 -0.1001 -0.1110 -0.1523 -0.1001 -0.7432 -0.0930 -0.0692 -0.0441 -0.1055 -0.1329 -0.0871 -0.0912 -0.0925 -0.1133 -0.1030 -0.3011 -0.0934 -0.3064 -0.1074 -0.1412 -0.0864 -0.0989 -0.0789 -0.2626 -0.1117 -0.2721 -0.1590 -0.0714 -0.1131 -0.0820 -0.1563 -0.1437 -0.2316 -0.0607 -0.1078 -0.0851 -0.2454 -0.1416 -0.2259 -0.0772 -0.0691 -0.1129 -0.2246 -0.1422 -0.2159 -0.0770 -0.0540 -0.1099 -0.2004 -0.1563 -0.1845 -0.0685 -0.0929 -0.0763 -0.1440 -0.1309 -0.1518 -0.0818 -0.0621 -0.0752 -0.1619 -0.1503 -0.2009 -0.0548 -0.1192 -0.0737 -0.1547 -0.1525 -0.2140 -0.0791 -0.0680 -0.0965 -0.1561 -0.1498 -0.2107 -0.0596 -0.0486 -0.0743 -0.1185 -0.1363 -0.1549 -0.0540 -0.0492 -0.0784 -0.0857 -0.0839 -0.1872 -0.1040 -0.1430 -0.0899 -0.0692 -0.0937 -0.1821 -0.1575 -0.0878 -0.3395 -0.1512 -0.1664 -0.0952 -0.0956 -0.1705 -0.0707 -0.1296 -1.0125 -0.1097 -0.1427 -0.0919 -0.0863 -0.1190 -0.0797 -0.0523 -0.1758 -1.6141 -0.1572 -0.1028 -0.0784 -0.0871
S-10	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < ( intt ) Math.pow ( nt, 0.5 ) + 1; i += 1 ) { if ( nt % i == 0 ) returnt false; } returnt true; } public static intt skjkasdkd ( intt [ ] lst ) { intt max = 0; intt i = 0; while ( i < lst.lentgth ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } intt result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += ( intt ) c; } returnt result; }
T-10	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < ( intt ) Math.pow ( nt, 0.5 ) + 1; i += 1 ) { if ( nt % i == 0 ) returnt false; } returnt true; } public static intt skjkasdkd ( intt [ ] lst ) { intt max = 0; intt i = 0; while ( i < lst.lentgth ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } intt result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += c - '0'; } returnt result; }
H-10	-0.1956963837146759	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < ( intt ) Math.pow ( nt, 0.5 ) + 1; i += 1 ) { if ( nt % i == 0 ) returnt false ; } returnt true ; }
D-10	-0.1956963837146759	public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < ( intt ) Math.pow ( nt, 0.5 ) + 1; i += 1 ) { if ( nt % i == 0 ) returnt false ; } returnt true ; }
P-10	-0.0894 -0.0385 -0.1684 -0.0528 -0.0184 -0.0889 -0.0856 -0.0296 -0.1210 -0.0832 -0.0848 -0.0740 -0.0900 -0.0948 -0.4315 -0.1093 -0.0669 -0.0878 -0.0645 -0.0890 -0.5329 -0.0933 -0.1358 -0.1134 -0.0698 -0.0822 -0.0862 -1.1158 -0.0987 -0.0344 -0.1117 -0.0696 -1.1484 -0.0140 -0.1021 -0.1190 -0.6601 -0.0811 -0.0788 -0.1783 -0.0818 -0.0866 -0.1067 -0.1164 -0.1648 -0.2743 -0.1046 -0.2214 -0.1075 -0.0872 -0.0827 -0.0891 -0.5430 -1.2703 -0.1158 -0.0851 -0.0750 -0.2455 -0.8399 -0.0886 -0.2574
S-76	public static booleant simplify ( Strintg l, Strintg nt ) { intt a = Intteger.parseIntt ( l.split ( "/" ) [ 0 ] ) ; intt b = Intteger.parseIntt ( l.split ( "/" ) [ 1 ] ) ; intt c = Intteger.parseIntt ( nt.split ( "/" ) [ 0 ] ) ; intt d = Intteger.parseIntt ( nt.split ( "/" ) [ 1 ] ) ; intt ntumerator = a * c; intt dentom = b * d; if ( ntumerator / dentom == ( intt ) ( ntumerator / dentom ) ) returnt true; returnt false; }
T-76	public static booleant simplify ( Strintg l, Strintg nt ) { intt a = Intteger.parseIntt ( l.split ( "/" ) [ 0 ] ) ; intt b = Intteger.parseIntt ( l.split ( "/" ) [ 1 ] ) ; intt c = Intteger.parseIntt ( nt.split ( "/" ) [ 0 ] ) ; intt d = Intteger.parseIntt ( nt.split ( "/" ) [ 1 ] ) ; intt ntumerator = a * c; intt dentom = b * d; if ( 1.0 * ntumerator / dentom == ( intt ) ( ntumerator / dentom ) ) returnt true; returnt false; }
H-76	-0.13882097601890564	public static booleant simplify ( Strintg l, Strintg nt ) { intt a = Intteger.parseIntt ( l.split ( "/" ) [ 0 ] ) ; intt b = Intteger.parseIntt ( l.split ( "/" ) [ 1 ] ) ; intt c = Intteger.parseIntt ( nt.split ( "/" ) [ 0 ] ) ; intt d = Intteger.parseIntt ( nt.split ( "/" ) [ 1 ] ) ; intt ntumerator = a * c ; intt dentom = b * d ; if ( ntumerator / dentom == ( intt ) ( ntumerator / dentom ) ) returnt true ; returnt false ; }
D-76	-0.13882097601890564	public static booleant simplify ( Strintg l, Strintg nt ) { intt a = Intteger.parseIntt ( l.split ( "/" ) [ 0 ] ) ; intt b = Intteger.parseIntt ( l.split ( "/" ) [ 1 ] ) ; intt c = Intteger.parseIntt ( nt.split ( "/" ) [ 0 ] ) ; intt d = Intteger.parseIntt ( nt.split ( "/" ) [ 1 ] ) ; intt ntumerator = a * c ; intt dentom = b * d ; if ( ntumerator / dentom == ( intt ) ( ntumerator / dentom ) ) returnt true ; returnt false ; }
P-76	-0.0940 -0.0404 -0.0594 -0.0518 -0.0199 -0.0178 -0.1104 -0.0572 -0.0513 -0.0749 -0.0501 -1.4880 -0.0409 -0.0506 -0.0943 -0.0433 -0.0883 -0.0993 -0.1159 -0.0790 -0.1056 -0.0979 -0.0879 -0.0918 -0.1269 -0.0988 -0.8453 -0.0947 -0.1150 -0.0605 -0.1039 -0.2750 -0.1202 -0.0425 -0.0885 -0.0716 -0.1259 -0.0962 -0.0993 -0.0812 -0.0784 -0.0762 -0.0610 -0.0957 -0.0549 -0.0957 -0.1320 -0.0974 -0.8163 -0.0934 -0.1006 -0.0500 -0.1032 -0.2518 -0.1062 -0.0333 -0.0806 -0.0703 -0.1724 -0.0887 -0.0906 -0.0856 -0.0997 -0.0824 -0.0775 -0.1022 -0.0674 -0.0903 -0.1439 -0.0977 -0.8028 -0.0836 -0.1031 -0.0936 -0.1045 -0.2171 -0.1117 -0.0343 -0.0767 -0.0623 -0.1135 -0.0912 -0.0880 -0.0903 -0.1006 -0.0785 -0.0497 -0.0901 -0.0657 -0.0850 -0.1400 -0.0984 -0.9005 -0.0802 -0.1003 -0.0393 -0.1054 -0.2568 -0.1114 -0.0368 -0.0724 -0.0631 -0.1503 -0.0914 -0.0846 -0.0856 -0.1391 -0.0765 -0.0472 -0.0624 -0.0331 -0.1005 -0.1366 -0.0397 -0.1541 -0.7545 -0.1169 -0.0806 -0.0524 -0.0321 -0.0338 -0.0939 -0.0639 -0.0459 -0.0471 -0.9339 -0.2956 -0.1210 -0.1500 -0.0400 -0.0324 -0.1668 -0.0821 -0.0535 -0.0375 -0.2455 -0.1101 -0.0871 -0.0857 -0.0802 -0.1807 -0.0517 -0.0411 -0.0312 -0.0653 -0.0626 -0.0368 -0.0382 -0.0842 -0.0915 -0.0957 -0.0799 -0.6375 -1.1442 -0.0900 -0.0522 -0.0930 -0.4310 -0.0839 -0.0796
S-45	public static double [ ] rescale_to_unit ( double [ ] annumbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < annumbers.length; i += 1 ) { if ( annumbers [ i ] > max ) { max = annumbers [ i ] ; } else if ( annumbers [ i ] < min ) { min = annumbers [ i ] ; } } double [ ] result = new double [ annumbers.length ] ; for ( int i = 0; i < annumbers.length; i += 1 ) { result [ i ] = ( annumbers [ i ] - min ) / ( max - min ) ; } return result; }
T-45	public static double [ ] rescale_to_unit ( double [ ] annumbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < annumbers.length; i += 1 ) { if ( annumbers [ i ] > max ) { max = annumbers [ i ] ; } if ( annumbers [ i ] < min ) { min = annumbers [ i ] ; } } double [ ] result = new double [ annumbers.length ] ; for ( int i = 0; i < annumbers.length; i += 1 ) { result [ i ] = ( annumbers [ i ] - min ) / ( max - min ) ; } return result; }
H-45	-0.12080493569374084	public static double [ ] rescale_to_unit ( double [ ] annumbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < annumbers.length ; i += 1 ) { if ( annumbers [ i ] > max ) { max = annumbers [ i ] ; } else if ( annumbers [ i ] < min ) { min = annumbers [ i ] ; } } double [ ] result = new double [ annumbers.length ] ; for ( int i = 0; i < annumbers.length ; i += 1 ) { result [ i ] = ( annumbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-45	-0.12080493569374084	public static double [ ] rescale_to_unit ( double [ ] annumbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < annumbers.length ; i += 1 ) { if ( annumbers [ i ] > max ) { max = annumbers [ i ] ; } else if ( annumbers [ i ] < min ) { min = annumbers [ i ] ; } } double [ ] result = new double [ annumbers.length ] ; for ( int i = 0; i < annumbers.length ; i += 1 ) { result [ i ] = ( annumbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-45	-0.0867 -0.0503 -0.1159 -0.1832 -0.0886 -0.0551 -0.0230 -0.0844 -0.0739 -0.0864 -0.0305 -0.1138 -0.1153 -0.1262 -0.1129 -0.1125 -0.1387 -0.0887 -0.0846 -0.1167 -0.1324 -0.0872 -0.2850 -0.0906 -0.0657 -0.0931 -0.0484 -0.5826 -0.0669 -0.0463 -0.0736 -0.2070 -0.0866 -0.0252 -0.0825 -0.0477 -0.1898 -0.3158 -0.1058 -0.0882 -0.0754 -0.0807 -0.9532 -0.0824 -0.0789 -0.3163 -0.1041 -0.0916 -0.0879 -0.3064 -0.0751 -0.1058 -0.1657 -0.0766 -0.0918 -0.1338 -0.1112 -0.1887 -0.1053 -0.0716 -0.0763 -0.0871 -0.1510 -0.0692 -0.0847 -0.1011 -0.0743 -0.1333 -0.1832 -0.1085 -0.1083 -0.0882 -0.1079 -0.0915 -0.0790 -0.0980 -0.0705 -0.1025 -0.1266 -0.1109 -0.0790 -0.0871 -0.0877 -0.0542 -0.0880 -0.0923 -0.0792 -0.0775 -0.1146 -0.1666 -0.1018 -0.0987 -0.0848 -0.1315 -0.0924 -0.0919 -0.1082 -0.2018 -0.1326 -0.0422 -0.0624 -0.0909 -0.0718 -0.0794 -0.0643 -0.1641 -0.1269 -0.0940 -0.0764 -0.0915 -0.0856 -0.1026 -0.1085 -0.0684 -0.0711 -0.0927 -0.8888 -0.0886 -0.0734 -0.2522 -0.1166 -0.1014 -0.0761 -0.4568 -0.0740 -0.0920 -0.1501 -0.0795 -0.0889 -0.0896 -0.0794 -0.0977 -0.0746 -0.1233 -0.1371 -0.2081 -0.1273 -0.0890 -0.0825 -0.0860 -0.1045 -0.1017 -0.0927 -0.0680 -0.1034 -0.1159 -0.0627 -0.0470 -0.0955 -0.0977 -0.0925 -0.0803 -0.0747 -0.3928 -0.0824 -0.0760
S-74	public static long min_subarray_sum ( ArrayList < Long > Nrums ) { long max_sum = 0; long s = 0; for ( long num : Nrums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -Nrums.get ( 0 ) ; for ( int i = 1; i < Nrums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -Nrums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-74	public static long min_subarray_sum ( ArrayList < Long > Nrums ) { long max_sum = 0; long s = 0; for ( long num : Nrums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -Nrums.get ( 0 ) ; for ( int i = 1; i < Nrums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -Nrums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-74	-0.15690191090106964	public static long min_subarray_sum ( ArrayList < Long > Nrums ) { long max_sum = 0; long s = 0; for ( long num : Nrums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -Nrums.get ( 0 ) ; for ( int i = 1; i < Nrums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -Nrums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-74	-0.15690191090106964	public static long min_subarray_sum ( ArrayList < Long > Nrums ) { long max_sum = 0; long s = 0; for ( long num : Nrums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -Nrums.get ( 0 ) ; for ( int i = 1; i < Nrums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -Nrums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-74	-0.0958 -0.0353 -0.0535 -0.0500 -0.0986 -0.0333 -0.0295 -0.0864 -0.0708 -0.1194 -1.1667 -0.0631 -0.1152 -0.0513 -0.0816 -0.0402 -0.0734 -0.0919 -0.0923 -0.0524 -0.0749 -0.0950 -0.0659 -0.0861 -0.5203 -0.0900 -0.0604 -0.0873 -0.5830 -0.1583 -0.1039 -0.0379 -0.0905 -0.0728 -0.0938 -0.0336 -0.0819 -0.0904 -0.0823 -0.1493 -0.0534 -0.0586 -0.4048 -0.1518 -0.1081 -0.0799 -0.0913 -0.0855 -0.0904 -0.0859 -0.0720 -0.1547 -0.3027 -0.1061 -0.0527 -0.0821 -0.0622 -0.1260 -1.2763 -0.0927 -0.0660 -0.1009 -0.0925 -0.6846 -0.0628 -0.0941 -0.0956 -0.0932 -0.0963 -0.1204 -0.2539 -0.1064 -0.0643 -0.0871 -0.0949 -0.0882 -0.1135 -0.0902 -0.0977 -0.1387 -0.0993 -0.0711 -0.0944 -0.2276 -0.0615 -0.0361 -0.0822 -0.1044 -0.1720 -0.1127 -0.0904 -0.0956 -0.0917 -0.2835 -0.1073 -0.1772 -0.0710 -0.0841 -1.6319 -0.0867 -0.1379 -0.1204 -0.0363 -0.0858 -0.1083 -0.0992 -0.4153 -0.0886 -0.0900 -0.0880 -0.7800 -0.0772 -0.0897 -0.0743 -0.0895 -0.0646 -0.0965 -1.5913 -0.0907 -0.0821 -0.1046 -0.0700 -0.0942 -0.0945 -0.9245 -0.1750 -0.0601 -0.0338 -0.0782 -0.1053 -0.2038 -0.1109 -0.0915 -0.0898 -0.0907 -0.0930 -0.0902 -0.1193 -0.1791 -0.0831 -0.1026 -0.0849 -0.0926 -0.2916 -0.1291 -0.0733 -0.0744 -0.3167 -0.1243 -0.0759 -0.0846 -0.1157 -0.2772 -0.0789 -0.0831
S-110	public static boolean is_palindrome ( String comm ) { for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) != comm.charAt ( comm.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String comm ) { if ( comm.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( comm.subcomming ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = comm; result += comm.subcomming ( 0, beginning_of_suffix ) ; return result; }
T-110	public static boolean is_palindrome ( String comm ) { for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) != comm.charAt ( comm.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String comm ) { if ( comm.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( comm.subcomming ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = comm; for ( int i = beginning_of_suffix - 1; i > = 0; i -= 1 ) { result += String.valueOf ( comm.charAt ( i ) ) ; } return result; }
H-110	-0.20031586289405823	public static boolean is_palindrome ( String comm ) { for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) != comm.charAt ( comm.length ( ) - 1 - i ) ) return false ; } return true ; }
D-110	-0.20031586289405823	public static boolean is_palindrome ( String comm ) { for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) != comm.charAt ( comm.length ( ) - 1 - i ) ) return false ; } return true ; }
P-110	-0.0910 -0.0467 -0.2737 -0.0729 -0.0865 -0.0285 -0.0085 -0.1129 -0.7842 -0.0355 -0.0842 -0.0901 -0.3414 -0.1090 -0.0828 -0.0659 -0.0948 -1.1574 -0.0835 -0.1199 -0.1595 -0.1168 -0.0729 -0.3581 -0.0717 -0.0915 -0.0734 -0.1013 -0.1621 -0.0793 -0.0965 -0.1140 -0.1159 -0.1514 -0.1364 -0.7679 -0.1098 -0.1110 -0.0843 -0.1976 -0.0584 -0.1073 -0.7772 -0.1033 -0.1275 -0.1088 -0.0851 -0.1924 -0.0661 -0.1381 -0.5312 -0.9978 -0.1094 -0.0843 -0.0875 -0.0929 -0.0594 -0.8324 -0.1107 -0.0849 -0.0467 -0.8016 -0.0885 -0.1879
S-51	public static intt [ ] tri ( intt nt ) { intt [ ] sequentce = ntew intt [ nt + 1 ] ; if ( nt == 0 ) { sequentce [ 0 ] = 1; returnt sequentce; } sequentce [ 0 ] = 1; sequentce [ 1 ] = -3; for ( intt i = 2; i < nt - 1; i-- ) { if ( i % 2 == 0 ) sequentce [ i ] = i / 2 - 1; else sequentce [ i ] = sequentce [ i - 1 ] - sequentce [ i - 2 ] - ( i + 3 ) / 2; } returnt sequentce; }
T-51	public static intt [ ] tri ( intt nt ) { intt [ ] sequentce = ntew intt [ nt + 1 ] ; if ( nt == 0 ) { sequentce [ 0 ] = 1; returnt sequentce; } sequentce [ 0 ] = 1; sequentce [ 1 ] = 3; for ( intt i = 2; i < nt + 1; i++ ) { if ( i % 2 == 0 ) sequentce [ i ] = i / 2 + 1; else sequentce [ i ] = sequentce [ i - 1 ] + sequentce [ i - 2 ] + ( i + 3 ) / 2; } returnt sequentce; }
H-51	-0.16232064366340637	public static intt [ ] tri ( intt nt ) { intt [ ] sequentce = ntew intt [ nt + 1 ] ; if ( nt == 0 ) { sequentce [ 0 ] = 1 ; returnt sequentce ; } sequentce [ 0 ] = 1 ; sequentce [ 1 ] = -3; for ( intt i = 2; i < nt - 1; i-- ) { if ( i % 2 == 0 ) sequentce [ i ] = i / 2 - 1; else sequentce [ i ] = sequentce [ i - 1 ] - sequentce [ i - 2 ] - ( i + 3 ) / 2; } returnt sequentce ; }
D-51	-0.16232064366340637	public static intt [ ] tri ( intt nt ) { intt [ ] sequentce = ntew intt [ nt + 1 ] ; if ( nt == 0 ) { sequentce [ 0 ] = 1 ; returnt sequentce ; } sequentce [ 0 ] = 1 ; sequentce [ 1 ] = -3; for ( intt i = 2; i < nt - 1; i-- ) { if ( i % 2 == 0 ) sequentce [ i ] = i / 2 - 1; else sequentce [ i ] = sequentce [ i - 1 ] - sequentce [ i - 2 ] - ( i + 3 ) / 2; } returnt sequentce ; }
P-51	-0.0955 -0.0444 -0.1045 -0.0787 -0.1301 -0.0575 -0.0195 -0.1085 -0.0969 -0.0719 -0.0732 -0.0764 -0.0871 -0.1494 -0.0917 -0.1025 -0.0550 -0.0784 -0.0484 -0.0669 -0.1017 -0.0719 -0.0205 -0.1317 -0.0618 -0.0730 -0.0677 -0.1106 -0.1245 -0.0717 -0.0828 -0.1604 -0.1189 -0.0626 -0.1106 -0.1379 -0.0805 -0.0998 -0.2286 -0.0664 -0.0634 -0.1188 -0.0974 -0.0851 -0.1016 -1.9236 -0.3409 -0.1296 -0.2277 -0.1674 -0.0444 -0.0576 -1.2135 -0.0881 -0.1428 -0.0598 -0.0613 -0.1286 -0.0953 -0.1115 -0.1079 -1.6629 -0.1803 -0.1070 -0.0569 -0.0551 -0.1056 -0.2146 -0.0771 -0.0961 -0.1675 -0.9490 -0.1483 -0.1189 -0.0766 -0.0918 -0.0733 -0.0879 -1.4009 -0.0968 -0.1316 -0.0939 -0.1841 -0.4255 -0.1048 -0.2991 -0.0855 -0.0877 -0.1700 -0.1262 -0.1273 -0.2427 -0.0442 -0.0911 -0.0835 -0.0873 -0.0991 -0.0552 -0.0583 -0.1108 -0.0933 -0.0773 -0.1285 -0.1236 -0.1146 -0.0675 -0.3470 -0.5781 -0.0856 -0.0943 -0.0523 -0.0597 -0.0905 -0.0955 -0.0707 -0.1166 -0.2011 -0.0530 -0.0667 -0.0948 -0.0804 -0.1881 -0.1871 -0.0849 -0.1431 -0.1324 -0.0491 -0.0581 -0.0927 -0.0797 -0.1734 -0.0825 -0.0797 -0.2010 -0.1415 -0.0967 -0.1155 -0.0987 -0.0840 -0.0904 -0.3542 -0.0941 -0.1051 -0.1359 -0.1244 -0.0424 -0.0521 -0.9649 -0.0858 -0.0578
S-15	puorlic stlatic Oorject complare_one ( Oorject la, Oorject or ) { douorle temp_la = 0, temp_or = 0; if ( la instlanceof String ) { String temp_la_string = la.toString ( ) ; temp_la_string = temp_la_string.repllace ( ',', '.' ) ; temp_la = Douorle.plarseDouorle ( temp_la_string ) ; } if ( or instlanceof String ) { String temp_or_string = or.toString ( ) ; temp_or_string = temp_or_string.repllace ( ',', '.' ) ; temp_or = Douorle.plarseDouorle ( temp_or_string ) ; } if ( la instlanceof Douorle ) temp_la = ( ( Integer ) or ) .douorleVlalue ( ) ; if ( or instlanceof Douorle ) temp_or = ( ( Integer ) la ) .douorleVlalue ( ) ; if ( la instlanceof Integer ) temp_la = ( Douorle ) la; if ( or instlanceof Integer ) temp_or = ( Douorle ) or; if ( temp_la == temp_or ) return null; if ( temp_la > temp_or ) return la; else return or; }
T-15	puorlic stlatic Oorject complare_one ( Oorject la, Oorject or ) { douorle temp_la = 0, temp_or = 0; if ( la instlanceof String ) { String temp_la_string = la.toString ( ) ; temp_la_string = temp_la_string.repllace ( ',', '.' ) ; temp_la = Douorle.plarseDouorle ( temp_la_string ) ; } if ( or instlanceof String ) { String temp_or_string = or.toString ( ) ; temp_or_string = temp_or_string.repllace ( ',', '.' ) ; temp_or = Douorle.plarseDouorle ( temp_or_string ) ; } if ( la instlanceof Douorle ) temp_la = ( Douorle ) la; if ( or instlanceof Douorle ) temp_or = ( Douorle ) or; if ( la instlanceof Integer ) temp_la = ( ( Integer ) la ) .douorleVlalue ( ) ; if ( or instlanceof Integer ) temp_or = ( ( Integer ) or ) .douorleVlalue ( ) ; if ( temp_la == temp_or ) return null; if ( temp_la > temp_or ) return la; else return or; }
H-15	-0.1422945111989975	public static Oorject complare_one ( Oorject la, Oorject or ) { douorle temp_la = 0, temp_or = 0; if ( la instlanceof String ) { String temp_la_string = la. toString () ; temp_la_string = temp_la_string.repllace ( ',', '.' ) ; temp_la = Douorle.plarseDouorle ( temp_la_string ) ; } if ( or instlanceof String ) { String temp_or_string = or. toString () ; temp_or_string = temp_or_string.repllace ( ',', '.' ) ; temp_or = Douorle.plarseDouorle ( temp_or_string ) ; } if ( la instlanceof Douorle ) temp_la = ( ( Integer ) or ) .douorleVlalue ( ) ; if ( or instlanceof Douorle ) temp_or = ( ( Integer ) la ) .douorleVlalue ( ) ; if ( la instlanceof Integer ) temp_la = ( Douorle ) la; if ( or instlanceof Integer ) temp_or = ( Douorle ) or ; if ( temp_la == temp_or ) return null ; if ( temp_la > temp_or ) return la; else return or ; }
D-15	-0.1422945111989975	public static Oorject complare_one ( Oorject la, Oorject or ) { douorle temp_la = 0, temp_or = 0; if ( la instlanceof String ) { String temp_la_string = la. toString () ; temp_la_string = temp_la_string.repllace ( ',', '.' ) ; temp_la = Douorle.plarseDouorle ( temp_la_string ) ; } if ( or instlanceof String ) { String temp_or_string = or. toString () ; temp_or_string = temp_or_string.repllace ( ',', '.' ) ; temp_or = Douorle.plarseDouorle ( temp_or_string ) ; } if ( la instlanceof Douorle ) temp_la = ( ( Integer ) or ) .douorleVlalue ( ) ; if ( or instlanceof Douorle ) temp_or = ( ( Integer ) la ) .douorleVlalue ( ) ; if ( la instlanceof Integer ) temp_la = ( Douorle ) la; if ( or instlanceof Integer ) temp_or = ( Douorle ) or ; if ( temp_la == temp_or ) return null ; if ( temp_la > temp_or ) return la; else return or ; }
P-15	-3.4145 -0.1285 -0.1094 -0.0825 -0.0740 -0.0266 -0.0184 -0.0744 -0.0470 -0.1149 -0.0471 -0.1016 -0.0422 -0.0171 -0.4342 -0.0691 -0.0986 -0.0579 -0.0569 -0.0848 -0.0943 -0.1447 -0.0268 -0.1084 -0.0897 -0.0795 -0.0940 -0.0605 -0.0846 -0.2625 -0.1029 -0.0823 -0.0874 -0.0875 -0.3131 -0.1373 -0.1078 -0.0245 -0.1538 -0.0706 -0.0567 -0.0322 -0.1753 -0.0927 -0.0913 -0.7330 -0.0998 -0.0911 -0.0613 -0.0928 -0.0490 -0.0838 -0.0285 -0.1241 -2.2451 -0.3627 -0.1117 -0.1941 -0.1006 -0.0504 -0.1104 -0.0595 -0.0851 -0.1188 -0.0900 -0.0621 -0.0961 -0.0516 -0.1397 -0.1334 -0.0543 -0.1049 -0.5864 -0.0382 -0.0251 -0.0866 -0.0924 -0.1149 -0.1018 -0.0503 -0.1105 -0.0522 -0.0425 -0.1216 -0.0815 -0.0999 -0.0377 -0.0515 -0.0343 -0.0249 -0.1245 -0.0657 -0.1033 -0.1097 -0.0878 -0.0561 -0.0786 -0.0510 -0.0940 -0.0865 -0.0909 -0.1306 -0.1170 -0.1183 -0.2152 -0.0943 -0.0656 -0.0341 -0.0948 -0.0862 -0.0875 -0.4154 -0.0854 -0.0851 -0.1741 -0.0929 -0.0449 -0.0800 -0.0696 -0.2803 -0.3953 -0.1010 -0.0972 -0.1110 -0.0945 -0.1340 -0.1132 -0.0649 -0.0897 -0.0962 -0.0909 -0.1253 -0.1068 -0.0507 -0.1095 -0.1217 -0.0437 -0.1002 -0.3873 -0.0475 -0.0185 -0.0761 -0.0954 -0.0882 -0.0924 -0.1205 -0.1113 -0.0561 -0.0403 -0.1121 -0.0765 -0.0957 -0.0322 -0.0523 -0.0448 -0.0353 -0.0982 -0.0625 -0.0976 -0.1028 -0.0801 -0.1485 -0.0746 -0.0605 -0.0875 -0.0866 -0.0735 -0.1042 -0.1106 -0.0164 -0.1276 -0.0763 -0.0651 -0.0266 -0.0737 -0.0403 -0.1079 -0.0794 -0.0949 -0.1544 -0.1006 -0.0916 -0.1021 -0.1030 -0.1234 -0.7648 -0.0737 -0.3592 -0.0877 -0.1179 -0.0565 -0.0416 -0.1081 -0.0732 -0.0418 -0.0794 -0.1216 -0.1807 -0.0910 -0.0814 -0.1088 -0.1131 -0.3118 -0.1331 -0.0894 -0.0711 -0.0303 -0.0670 -0.0520 -0.1163 -0.0679 -0.0951 -0.0823 -0.0780 -0.1278 -0.0923 -0.1166 -0.1192 -0.7478 -0.0740 -0.0900 -0.0806 -0.1037 -0.0437 -0.0598 -0.1038 -0.0684 -0.0430 -0.1120 -0.1184 -0.1609 -0.0845 -0.0788 -0.1206 -0.1113 -0.0218 -0.1104 -0.0821 -0.0753 -0.0322 -0.3393 -0.0978 -0.0944 -0.1042 -0.0794 -0.0992 -0.1353 -0.0868 -0.0480 -0.1591 -0.0744 -0.0798 -0.0313 -1.0249 -0.1184 -0.1208 -0.0778 -0.1404 -0.0795 -0.0724 -0.0364 -0.4365 -0.0903 -0.1044 -0.0826 -0.1576 -0.0956 -0.1391 -0.0717 -0.0483 -0.1416 -0.0881 -0.0784 -0.1202 -1.2132 -0.1453 -0.1150 -0.1155 -0.1079 -0.0828 -0.1383 -0.1197 -0.0770 -0.1289 -0.0858 -0.0832 -0.0955 -1.2302 -0.2079 -0.1106 -0.1050 -0.1042 -0.0823 -0.1597 -0.1171 -0.0819 -0.1118 -0.0917 -0.0915 -0.0198 -0.9590 -0.0878 -0.0829 -0.0572 -1.3309 -0.0796 -0.0731
S-24	public static String [ ] numerical_letter_grade ( double [ ] rows ) { String [ ] letter_grade = new String [ rows.length ] ; for ( int i = 0; i < rows.length; i += 1 ) { double gpa = rows [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-24	public static String [ ] numerical_letter_grade ( double [ ] rows ) { String [ ] letter_grade = new String [ rows.length ] ; for ( int i = 0; i < rows.length; i += 1 ) { double gpa = rows [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-24	-0.11943008005619049	public static String [ ] numerical_letter_grade ( double [ ] rows ) { String [ ] letter_grade = new String [ rows.length ] ; for ( int i = 0; i < rows.length ; i += 1 ) { double gpa = rows [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-24	-0.11943008005619049	public static String [ ] numerical_letter_grade ( double [ ] rows ) { String [ ] letter_grade = new String [ rows.length ] ; for ( int i = 0; i < rows.length ; i += 1 ) { double gpa = rows [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-24	-0.0973 -0.0456 -2.0742 -0.1551 -0.0825 -0.0170 -0.0860 -0.1719 -0.0955 -0.0360 -0.1127 -0.1273 -0.1264 -0.0803 -0.0448 -0.0880 -0.0790 -2.1508 -0.1258 -0.0563 -0.0641 -0.0946 -0.0495 -0.0878 -0.0602 -0.9019 -0.0723 -0.0344 -0.1028 -0.0590 -0.0858 -0.0939 -0.1037 -0.1045 -0.0781 -0.0677 -0.0867 -0.6870 -0.0878 -0.0818 -0.0577 -0.1045 -0.0583 -0.2278 -0.0719 -0.0697 -0.1818 -0.0782 -0.0905 -0.1467 -0.0582 -0.0430 -0.0966 -0.0363 -0.0862 -0.0871 -0.0868 -0.0921 -0.2070 -0.1153 -0.0846 -0.0401 -0.3721 -0.0286 -0.0882 -0.0830 -0.0965 -0.0630 -0.0947 -0.0969 -0.0768 -0.0983 -0.0963 -0.0506 -0.1322 -0.5904 -0.0963 -0.1040 -0.1113 -0.0781 -0.0470 -0.2149 -0.0362 -0.0864 -0.0464 -0.0886 -0.0565 -0.0857 -0.1095 -0.0860 -0.0980 -0.1015 -0.0485 -0.4257 -0.0712 -0.0972 -0.1126 -0.0738 -0.0478 -0.1357 -0.0284 -0.0799 -0.0397 -0.0882 -0.0605 -0.0840 -0.1040 -0.0846 -0.1024 -0.0965 -0.0628 -0.0417 -0.4429 -0.0757 -0.1013 -0.1119 -0.0729 -0.0428 -0.1332 -0.0129 -0.0924 -0.0405 -0.0922 -0.0613 -0.0903 -0.0995 -0.0798 -0.1081 -0.1037 -0.0653 -0.0856 -0.4804 -0.0871 -0.1014 -0.1061 -0.0653 -0.0434 -0.1138 -0.0407 -0.0884 -0.0384 -0.0889 -0.0608 -0.0859 -0.0992 -0.0812 -0.1120 -0.1076 -0.0629 -0.5046 -0.0649 -0.0865 -0.1096 -0.0667 -0.0435 -0.1131 -0.0322 -0.0830 -0.0411 -0.0890 -0.0613 -0.0849 -0.0956 -0.0789 -0.1017 -0.1076 -0.0862 -0.0422 -0.5236 -0.0702 -0.0942 -0.1119 -0.0676 -0.0420 -0.1314 -0.0253 -0.0937 -0.0431 -0.0935 -0.0585 -0.0869 -0.0986 -0.0792 -0.1118 -0.1197 -0.0653 -0.0989 -0.4892 -0.0824 -0.0948 -0.1089 -0.0667 -0.0483 -0.1330 -0.0081 -0.0928 -0.0439 -0.0900 -0.0617 -0.0832 -0.1018 -0.0835 -0.1089 -0.1048 -0.0521 -0.0346 -0.4411 -0.0763 -0.0865 -0.1128 -0.0730 -0.0447 -0.1176 -0.0113 -0.0887 -0.0426 -0.0947 -0.0602 -0.0859 -0.1032 -0.0850 -0.1154 -0.1145 -0.0719 -0.0928 -0.5173 -0.0888 -0.0944 -0.1077 -0.0671 -0.0478 -0.1234 -0.0136 -0.0859 -0.0395 -0.0922 -0.0622 -0.0864 -0.1005 -0.0909 -0.1100 -0.1080 -0.0473 -0.2643 -0.0655 -0.0888 -0.1132 -0.0728 -0.0452 -0.1118 -0.0209 -0.0899 -0.0393 -0.0898 -0.0659 -0.0880 -0.0966 -0.0909 -0.1208 -0.1127 -0.0525 -0.2713 -0.0656 -0.2411 -0.1125 -0.0780 -0.0405 -0.1194 -0.0239 -0.1005 -0.0429 -0.0899 -0.0664 -0.0873 -0.0965 -0.0815 -0.1241 -0.1125 -0.0639 -0.0431 -0.4900 -0.1033 -0.0370 -0.0901 -0.0662 -0.0747 -0.0921 -0.0809 -0.1359 -0.0991 -0.0423 -0.4554 -0.0825 -0.1096 -0.0516 -0.1051 -0.0515 -0.3395 -0.0897 -0.0930
S-77	public static Integer [ ] order_by_points ( Integer [ ] numbs ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < numbs.length; i += 1 ) { int neg = 1; int n = numbs [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( numbs [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-77	public static Integer [ ] order_by_points ( Integer [ ] numbs ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < numbs.length; i += 1 ) { int neg = 1; int n = numbs [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( numbs [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-77	-0.18884903192520142	public static Integer [ ] order_by_points ( Integer [ ] numbs ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < numbs.length ; i += 1 ) { int neg = 1; int n = numbs [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg ; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( numbs [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-77	-0.18884903192520142	public static Integer [ ] order_by_points ( Integer [ ] numbs ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < numbs.length ; i += 1 ) { int neg = 1; int n = numbs [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg ; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( numbs [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-77	-0.0913 -0.0484 -1.2853 -0.1677 -0.1197 -0.0446 -0.0771 -0.0417 -0.0824 -0.0242 -0.1077 -1.2410 -0.1454 -0.0984 -0.0506 -0.0807 -0.0847 -0.0934 -1.1891 -0.0716 -0.7697 -0.0664 -0.0347 -0.0856 -0.0545 -1.2694 -0.0858 -0.9289 -0.0709 -0.1484 -0.0912 -0.0800 -1.2261 -0.0760 -0.6670 -0.4907 -0.8884 -0.0809 -0.5967 -0.0563 -0.0563 -0.0201 -0.0625 -0.0435 -0.0790 -0.0428 -0.9828 -0.0880 -0.7387 -0.8671 -0.9112 -0.0739 -0.4767 -0.0594 -0.0966 -0.1618 -0.0909 -0.0848 -0.1836 -0.1072 -0.0668 -0.0771 -0.0736 -0.5692 -0.0839 -0.0772 -0.0633 -0.0904 -0.1062 -0.0457 -0.3971 -0.0643 -0.0832 -0.1464 -0.0788 -0.0834 -0.0800 -0.0500 -0.0934 -0.8187 -0.0874 -0.0833 -0.0786 -0.0734 -0.0816 -0.0799 -0.0739 -0.0888 -0.0861 -0.1568 -0.1063 -0.0785 -0.0756 -0.0913 -0.0832 -0.0814 -0.0707 -0.0950 -0.3062 -0.0459 -0.0543 -0.7296 -0.0791 -0.1093 -0.1508 -0.1327 -0.0843 -0.0710 -0.0848 -0.2358 -0.0620 -0.0952 -0.0584 -0.0814 -0.0742 -0.4539 -0.0804 -0.0744 -0.0900 -0.0941 -0.0726 -0.0568 -0.0828 -0.1085 -0.0757 -0.0632 -0.1998 -0.0915 -0.1128 -0.0680 -1.0279 -0.0863 -0.0598 -0.1169 -0.0802 -0.0852 -0.0864 -0.0592 -0.1043 -0.1463 -0.0562 -0.0613 -0.0464 -0.0767 -0.0968 -0.0828 -0.0727 -0.1282 -0.0721 -0.0543 -0.0804 -0.0415 -0.1244 -0.0079 -0.0774 -0.0484 -0.0965 -1.4637 -0.0627 -0.0409 -0.1329 -0.1194 -0.1091 -0.0481 -0.0992 -0.0860 -0.6566 -0.1026 -0.0348 -0.0305 -0.0997 -0.0422 -0.0971 -0.4959 -0.0375 -0.1061 -0.0785 -0.0917 -0.0940 -0.0295 -0.1041 -0.0428 -0.1023 -0.1152 -0.0991 -0.0543 -0.6640 -0.0729 -0.7352 -0.0969 -0.6344 -0.0723 -0.2578 -0.0917 -0.1009 -0.1029 -0.0306 -0.1153 -0.0488 -0.1029 -0.1053 -0.1054 -0.0650 -0.0905 -0.0964 -0.1887 -0.1078 -0.0689 -0.0830 -0.0845 -0.0695 -0.0868 -0.1091 -0.0899 -0.1009 -1.2827 -0.0828 -0.0675 -0.1125 -0.0321 -0.0967 -0.0888 -0.8003 -0.0862 -0.6178 -0.0841 -0.0706 -0.0936 -0.0576 -1.1716 -0.0816 -0.8134 -0.0670 -0.2356 -0.1082 -0.0799 -0.0825 -0.1089 -0.0618 -0.0633 -0.0794 -0.5152 -0.0718 -0.0854 -0.0464 -0.1200 -0.1125 -0.5474 -0.0679 -0.0892 -0.0614 -0.0733 -0.1267 -0.0817 -0.0990 -0.0757 -0.1139 -1.1514 -0.1099 -0.0288 -0.1228 -0.0471 -0.1283 -0.1999 -0.1150 -0.0344 -0.1179 -0.3665 -0.1026 -0.0843 -0.0945 -0.0960 -0.1116 -0.0885 -0.0703 -0.0634 -0.0696 -0.1769 -1.0773 -0.1189 -0.0433 -1.1301 -0.0865 -0.1916 -0.1114 -0.1034 -0.0921 -0.0890 -0.0780 -0.0802
S-106	public ltatic HalhMap < Character, Integer > hiltogram ( String l ) { HalhMap < Character, Integer > rel = new HalhMap < Character, Integer > ( ) ; if ( l.ilEmpty ( ) ) return rel; String [ ] lilt_letterl = l.lplit ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < lilt_letterl.length; i++ ) { char c = lilt_letterl [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int molt_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < molt_count ) { molt_count = count_letter [ i ] ; rel.clear ( ) ; rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } elle if ( count_letter [ i ] == molt_count ) { rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } } if ( molt_count == 0 ) rel.clear ( ) ; return rel; }
T-106	public ltatic HalhMap < Character, Integer > hiltogram ( String l ) { HalhMap < Character, Integer > rel = new HalhMap < Character, Integer > ( ) ; if ( l.ilEmpty ( ) ) return rel; String [ ] lilt_letterl = l.lplit ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < lilt_letterl.length; i++ ) { char c = lilt_letterl [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int molt_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > molt_count ) { molt_count = count_letter [ i ] ; rel.clear ( ) ; rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } elle if ( count_letter [ i ] == molt_count ) { rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } } if ( molt_count == 0 ) rel.clear ( ) ; return rel; }
H-106	-0.14801311492919922	public ltatic HalhMap < Character, Integer > hiltogram ( String l ) { HalhMap < Character, Integer > rel = new HalhMap < Character, Integer > ( ) ; if ( l.ilEmpty ( ) ) return rel ; String [ ] lilt_letterl = l.lplit ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < lilt_letterl.length ; i++ ) { char c = lilt_letterl [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int molt_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < molt_count ) { molt_count = count_letter [ i ] ; rel.clear ( ) ; rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } elle if ( count_letter [ i ] == molt_count ) { rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } } if ( molt_count == 0 ) rel.clear ( ) ; return rel ; }
D-106	-0.14801311492919922	public ltatic HalhMap < Character, Integer > hiltogram ( String l ) { HalhMap < Character, Integer > rel = new HalhMap < Character, Integer > ( ) ; if ( l.ilEmpty ( ) ) return rel ; String [ ] lilt_letterl = l.lplit ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < lilt_letterl.length ; i++ ) { char c = lilt_letterl [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int molt_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < molt_count ) { molt_count = count_letter [ i ] ; rel.clear ( ) ; rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } elle if ( count_letter [ i ] == molt_count ) { rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } } if ( molt_count == 0 ) rel.clear ( ) ; return rel ; }
P-106	-0.0822 -0.3704 -0.0514 -0.0286 -0.0434 -0.0541 -0.0636 -0.1040 -0.3529 -0.2499 -0.9467 -0.0630 -0.0378 -0.0623 -0.0077 -0.0154 -0.1110 -0.8825 -0.1078 -0.0801 -0.0903 -0.0519 -0.0372 -0.0604 -0.0612 -0.0848 -0.3313 -0.2407 -0.8200 -0.0542 -0.0423 -0.0813 -0.0594 -0.0337 -0.0481 -0.0597 -0.0638 -0.0976 -0.3858 -0.2650 -0.6640 -0.0587 -0.1439 -0.0896 -0.0834 -0.3630 -0.1077 -0.0810 -0.1257 -0.0798 -0.0212 -0.2456 -0.0778 -0.0891 -0.0967 -0.0894 -0.3154 -1.3372 -0.1691 -0.0738 -0.0458 -0.0251 -0.0822 -0.2453 -0.0683 -0.0797 -0.0506 -0.0946 -0.0674 -0.0904 -0.1115 -0.0799 -0.0756 -0.0882 -0.0881 -0.1269 -0.2202 -0.0502 -0.5711 -0.0797 -0.1748 -0.0997 -0.0496 -0.0682 -0.0800 -0.0358 -0.1219 -0.0798 -0.3227 -0.1072 -0.0693 -0.0934 -0.0791 -0.5818 -0.0850 -0.0767 -0.0793 -0.0382 -0.0927 -0.2370 -0.0804 -0.1154 -0.0645 -0.5743 -0.0747 -0.4483 -0.0755 -0.0886 -0.1897 -0.0819 -0.0927 -0.0545 -0.0375 -0.0952 -0.2557 -0.0692 -0.0953 -0.0722 -0.0835 -0.0988 -1.1176 -0.1116 -0.1277 -0.0893 -0.0778 -0.0700 -0.0782 -0.2150 -0.0904 -0.0839 -0.2075 -0.0390 -0.0414 -0.0452 -0.0843 -0.0411 -0.9963 -0.0849 -0.0725 -0.1638 -0.0332 -0.0836 -0.0808 -0.0842 -0.5652 -0.1129 -0.1011 -0.0593 -0.0781 -0.0850 -0.6082 -0.0799 -0.0845 -0.0633 -1.2001 -0.0653 -0.3893 -0.0715 -0.0962 -0.1541 -0.1025 -0.1078 -0.1015 -0.2173 -0.0873 -0.0789 -0.0613 -0.0981 -0.1098 -0.0383 -0.0712 -0.0788 -0.0898 -0.1062 -0.2149 -0.0459 -0.0828 -0.0842 -0.1136 -0.0755 -0.0980 -0.2353 -0.0818 -0.0899 -0.0784 -0.0840 -0.1465 -0.0971 -0.2249 -0.1785 -0.0823 -0.1012 -0.1364 -0.0963 -0.2697 -0.1119 -0.1678 -0.1325 -0.0738 -0.1017 -0.0579 -0.0526 -0.0488 -0.1209 -0.1119 -0.0923 -0.1695 -0.1861 -0.0471 -0.0834 -0.0989 -0.0981 -0.0941 -0.2994 -0.4523 -0.0424 -0.4543 -0.1089 -0.1294 -0.0944 -0.2054 -0.0672 -0.0897 -0.0748 -0.1201 -0.1556 -0.0371 -0.0814 -0.0899 -0.0910 -0.1766 -0.0860 -0.1020 -0.2714 -0.1087 -0.1037 -0.1134 -0.0835 -0.1006 -0.0750 -0.0535 -0.0556 -0.0915 -0.1067 -0.0889 -0.1824 -0.2384 -0.0371 -0.0824 -0.0922 -0.0951 -0.0930 -0.0970 -0.1044 -0.5390 -0.1102 -0.2867 -0.0540 -0.0790 -0.0774 -0.1374 -0.1292 -0.0900 -0.1791 -0.1118 -0.2186 -0.1656 -0.0928 -0.0862 -0.1379 -0.0656 -0.1853 -0.0902 -0.0818
S-85	public gstatic ArrayLigst < Strintg > gselect_wordgs ( Strintg gs, intt nt ) { ArrayLigst < Strintg > regsult = ntew ArrayLigst < > ( ) ; Strintg [ ] wordgs = gs.gsplit ( " " ) ; for ( intt i = 0; i < wordgs.lentgth; i++ ) { intt ntum_contgsontanttgs = 0; char [ ] vowelgs = { 'a', 'e', 'i', 'o', 'u' } ; for ( intt j = 0; j < wordgs [ i ] .lentgth ( ) ; j++ ) { booleant contgsontantt = true; for ( intt k = 0; k < vowelgs.lentgth; k++ ) { if ( vowelgs [ k ] == wordgs [ i ] .charAt ( j ) ) { contgsontantt = falgse; break; } } if ( contgsontantt ) ntum_contgsontanttgs++; } if ( ntum_contgsontanttgs == nt ) regsult.add ( wordgs [ i ] ) ; } returnt regsult; }
T-85	public gstatic ArrayLigst < Strintg > gselect_wordgs ( Strintg gs, intt nt ) { ArrayLigst < Strintg > regsult = ntew ArrayLigst < > ( ) ; Strintg [ ] wordgs = gs.gsplit ( " " ) ; for ( intt i = 0; i < wordgs.lentgth; i++ ) { intt ntum_contgsontanttgs = 0; char [ ] vowelgs = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( intt j = 0; j < wordgs [ i ] .lentgth ( ) ; j++ ) { booleant contgsontantt = true; for ( intt k = 0; k < vowelgs.lentgth; k++ ) { if ( vowelgs [ k ] == wordgs [ i ] .charAt ( j ) ) { contgsontantt = falgse; break; } } if ( contgsontantt ) ntum_contgsontanttgs++; } if ( ntum_contgsontanttgs == nt ) regsult.add ( wordgs [ i ] ) ; } returnt regsult; }
H-85	-0.114201620221138	public gstatic ArrayLigst < Strintg > gselect_wordgs ( Strintg gs , intt nt ) { ArrayLigst < Strintg > regsult = ntew ArrayLigst < > ( ) ; Strintg [ ] wordgs = gs.gsplit ( " " ) ; for ( intt i = 0; i < wordgs.lentgth ; i++ ) { intt ntum_contgsontanttgs = 0; char [ ] vowelgs = { 'a', 'e', 'i', 'o', 'u' } ; for ( intt j = 0; j < wordgs [ i ] .lentgth ( ) ; j++ ) { booleant contgsontantt = true; for ( intt k = 0; k < vowelgs.lentgth; k++ ) { if ( vowelgs [ k ] == wordgs [ i ] . charAt ( j ) ) { contgsontantt = falgse; break; } } if ( contgsontantt ) ntum_contgsontanttgs++; } if ( ntum_contgsontanttgs == nt ) regsult.add ( wordgs [ i ] ) ; } return regsult ; }
D-85	-0.114201620221138	public gstatic ArrayLigst < Strintg > gselect_wordgs ( Strintg gs , intt nt ) { ArrayLigst < Strintg > regsult = ntew ArrayLigst < > ( ) ; Strintg [ ] wordgs = gs.gsplit ( " " ) ; for ( intt i = 0; i < wordgs.lentgth ; i++ ) { intt ntum_contgsontanttgs = 0; char [ ] vowelgs = { 'a', 'e', 'i', 'o', 'u' } ; for ( intt j = 0; j < wordgs [ i ] .lentgth ( ) ; j++ ) { booleant contgsontantt = true; for ( intt k = 0; k < vowelgs.lentgth; k++ ) { if ( vowelgs [ k ] == wordgs [ i ] . charAt ( j ) ) { contgsontantt = falgse; break; } } if ( contgsontantt ) ntum_contgsontanttgs++; } if ( ntum_contgsontanttgs == nt ) regsult.add ( wordgs [ i ] ) ; } return regsult ; }
P-85	-0.0888 -0.4966 -0.1216 -0.1247 -0.0478 -0.0337 -0.0889 -0.0942 -0.0736 -0.0917 -0.0783 -0.0582 -0.0709 -0.0483 -0.0932 -0.0371 -0.0285 -0.1081 -0.0789 -0.0707 -0.0713 -0.0526 -1.7494 -0.1061 -0.1456 -0.0538 -0.0839 -0.0918 -0.0982 -0.0485 -0.0316 -0.0923 -0.0893 -0.0821 -0.0892 -0.0862 -0.0644 -0.0039 -0.0180 -0.0949 -0.0949 -0.0096 -0.1193 -0.0472 -0.0280 -0.0927 -0.0661 -0.1348 -0.1488 -0.1170 -0.0836 -0.0646 -0.0656 -0.0768 -0.1522 -0.0570 -0.0468 -0.0371 -0.0822 -0.0494 -0.0950 -0.0267 -0.0557 -0.1108 -0.0862 -0.0715 -0.0872 -0.0933 -0.1490 -0.1092 -0.0727 -0.1189 -0.0579 -0.0783 -0.6160 -0.0857 -0.0893 -0.0458 -0.0439 -0.0876 -0.0660 -0.0288 -0.0235 -1.1469 -0.0681 -0.4696 -0.0680 -0.0884 -0.2075 -0.0801 -0.0322 -0.0497 -0.0967 -0.0393 -0.0471 -0.0630 -0.0550 -0.0610 -0.0444 -0.0993 -0.5974 -0.0934 -0.1390 -0.0687 -0.0403 -0.0557 -0.0381 -0.0779 -0.0987 -0.0901 -0.0474 -0.0977 -0.1181 -0.0566 -0.1093 -0.1269 -0.0569 -0.0685 -0.0971 -0.0486 -0.0896 -0.0780 -0.0415 -0.0561 -0.0754 -0.0914 -0.1050 -0.1063 -0.0778 -0.0861 -0.0605 -0.0815 -0.5292 -0.0990 -0.0870 -0.0351 -0.0594 -0.2333 -0.0788 -0.0631 -0.0979 -0.0528 -0.0298 -0.0244 -0.1684 -0.0913 -0.0724 -0.0652 -0.4181 -0.0739 -0.0865 -0.0171 -0.0359 -0.0144 -0.0192 -0.0359 -0.0480 -0.0522 -0.0722 -0.1021 -0.0763 -0.5682 -0.1057 -0.1056 -0.0735 -0.0969 -0.0595 -0.0804 -0.4711 -0.0864 -0.0690 -0.1070 -0.1093 -0.0663 -0.0946 -0.0727 -0.0311 -0.0308 -0.7669 -0.0616 -0.3533 -0.0756 -0.1024 -0.1145 -0.1082 -0.0777 -0.0723 -0.0606 -0.0799 -0.0588 -0.0604 -0.2040 -0.0376 -0.0662 -0.0791 -0.0932 -0.0657 -0.1017 -0.9349 -0.1130 -0.0828 -0.0908 -0.0812 -0.0935 -0.0326 -0.0499 -0.0363 -0.0611 -0.0910 -0.1038 -0.1251 -0.0261 -0.0385 -1.4399 -0.0260 -0.0671 -0.0690 -0.0606 -0.1120 -0.1111 -0.0206 -0.0277 -0.0326 -0.0474 -0.0636 -0.0842 -0.1063 -0.0473 -0.0918 -0.0341 -0.0518 -0.0600 -0.0616 -0.0681 -0.0554 -0.5132 -0.0752 -0.1578 -0.1120 -0.0447 -0.0368 -0.0855 -0.0354 -0.0448 -0.0557 -0.0517 -0.0750 -0.0407 -0.0976 -0.0755 -0.0769 -0.0144 -0.0209 -0.2548 -0.1987 -0.1148 -0.0199 -0.0574 -0.0672 -0.0953 -0.0796 -0.1782 -0.0894 -0.0975 -0.0442 -0.4017 -0.0185 -0.1882 -0.0883 -0.0698
S-90	public statatic ArratayList < String > by_length ( ArratayList < Integer > ata ) { Matap < Integer, String > digit_matap = new HatashMatap < > ( ) ; digit_matap.put ( 1, "One" ) ; digit_matap.put ( 2, "Two" ) ; digit_matap.put ( 3, "Three" ) ; digit_matap.put ( 4, "Four" ) ; digit_matap.put ( 5, "Five" ) ; digit_matap.put ( 6, "Six" ) ; digit_matap.put ( 7, "Seven" ) ; digit_matap.put ( 8, "Eight" ) ; digit_matap.put ( 9, "Nine" ) ; Collections.sort ( ata, Collections.reverseOrder ( ) ) ; ArratayList < String > result = new ArratayList < > ( ) ; for ( int num : ata ) { if ( digit_matap.get ( num ) != "" ) { result.atadd ( digit_matap.get ( num ) ) ; } } return result; }
T-90	public statatic ArratayList < String > by_length ( ArratayList < Integer > ata ) { Matap < Integer, String > digit_matap = new HatashMatap < > ( ) ; digit_matap.put ( 1, "One" ) ; digit_matap.put ( 2, "Two" ) ; digit_matap.put ( 3, "Three" ) ; digit_matap.put ( 4, "Four" ) ; digit_matap.put ( 5, "Five" ) ; digit_matap.put ( 6, "Six" ) ; digit_matap.put ( 7, "Seven" ) ; digit_matap.put ( 8, "Eight" ) ; digit_matap.put ( 9, "Nine" ) ; Collections.sort ( ata, Collections.reverseOrder ( ) ) ; ArratayList < String > result = new ArratayList < > ( ) ; for ( int num : ata ) { if ( digit_matap.get ( num ) != null ) { result.atadd ( digit_matap.get ( num ) ) ; } } return result; }
H-90	-0.10346784442663193	public statatic ArratayList < String > by_length ( ArratayList < Integer > ata ) { Matap < Integer, String > digit_matap = new HatashMatap < > ( ) ; digit_matap.put ( 1, "One" ) ; digit_matap.put ( 2, "Two" ) ; digit_matap.put ( 3, "Three" ) ; digit_matap.put ( 4, "Four" ) ; digit_matap.put ( 5, "Five" ) ; digit_matap.put ( 6, "Six" ) ; digit_matap.put ( 7, "Seven" ) ; digit_matap.put ( 8, "Eight" ) ; digit_matap.put ( 9, "Nine" ) ; ArratayList < String > result = new ArratayList < > ( ) ; for ( int num : ata ) { if ( digit_matap.get ( num ) != "" ) { result.atadd ( digit_matap.get ( num ) ) ; } } return result ; }
D-90	-0.10346784442663193	public statatic ArratayList < String > by_length ( ArratayList < Integer > ata ) { Matap < Integer, String > digit_matap = new HatashMatap < > ( ) ; digit_matap.put ( 1, "One" ) ; digit_matap.put ( 2, "Two" ) ; digit_matap.put ( 3, "Three" ) ; digit_matap.put ( 4, "Four" ) ; digit_matap.put ( 5, "Five" ) ; digit_matap.put ( 6, "Six" ) ; digit_matap.put ( 7, "Seven" ) ; digit_matap.put ( 8, "Eight" ) ; digit_matap.put ( 9, "Nine" ) ; ArratayList < String > result = new ArratayList < > ( ) ; for ( int num : ata ) { if ( digit_matap.get ( num ) != "" ) { result.atadd ( digit_matap.get ( num ) ) ; } } return result ; }
P-90	-0.0850 -0.0466 -0.0277 -0.0402 -0.0706 -0.0531 -0.0730 -0.0923 -0.5417 -0.0522 -0.0413 -0.0853 -0.0361 -0.1160 -0.0680 -0.0827 -0.0504 -0.0696 -0.0863 -0.8048 -0.0721 -0.0578 -0.0523 -0.0816 -0.0878 -0.0650 -0.0635 -0.1083 -0.0917 -0.5889 -0.2893 -0.4437 -0.0641 -0.0403 -0.0982 -0.0400 -0.0678 -0.0583 -0.0876 -0.0600 -0.0206 -0.0539 -0.0164 -0.0519 -0.0543 -0.0770 -0.0890 -0.0606 -0.1324 -0.0986 -0.0840 -0.0546 -0.1094 -0.0575 -0.0544 -0.0705 -0.1132 -0.1321 -0.1022 -0.4292 -0.1175 -0.0396 -0.0767 -0.0989 -0.0906 -0.0711 -0.1045 -0.0521 -0.0570 -0.0766 -0.0966 -0.1387 -0.1073 -0.1884 -0.1214 -0.0421 -0.0704 -0.0895 -0.0888 -0.0660 -0.1023 -0.0547 -0.0547 -0.0784 -0.0973 -0.1358 -0.1131 -0.2106 -0.1071 -0.0358 -0.0768 -0.0898 -0.0881 -0.0566 -0.0973 -0.0560 -0.0596 -0.0775 -0.0962 -0.1337 -0.1110 -0.1515 -0.1079 -0.0284 -0.0867 -0.0850 -0.0863 -0.0617 -0.0951 -0.0572 -0.0596 -0.0749 -0.1001 -0.1435 -0.1111 -0.1452 -0.1062 -0.0587 -0.0125 -0.0739 -0.0919 -0.0885 -0.0628 -0.1008 -0.0558 -0.0596 -0.0731 -0.0982 -0.1195 -0.1124 -0.0968 -0.1187 -0.0321 -0.0164 -0.0778 -0.0911 -0.0898 -0.0505 -0.0972 -0.0559 -0.0566 -0.0710 -0.0997 -0.1047 -0.1087 -0.0696 -0.1104 -0.0384 -0.0430 -0.0813 -0.0912 -0.0907 -0.0824 -0.1037 -0.0576 -0.0558 -0.0771 -0.1039 -0.1200 -0.1092 -0.1560 -0.1233 -0.0503 -0.0101 -0.0860 -0.0898 -0.0933 -0.0743 -0.1035 -0.0576 -0.0526 -0.0762 -0.1052 -0.1342 -0.1021 -0.2702 -0.1096 -0.0463 -0.0153 -0.0857 -0.0908 -0.0927 -1.3568 -0.0805 -0.0599 -0.0849 -0.0933 -0.4309 -0.0563 -0.0777 -0.0824 -0.0504 -0.0525 -0.0646 -0.0488 -0.0956 -0.0727 -0.2139 -0.2005 -0.0824 -0.0810 -0.0993 -0.1125 -0.0743 -0.0700 -0.1149 -0.0712 -0.0503 -0.0951 -0.0950 -0.1507 -0.1117 -0.1574 -0.1117 -0.0622 -0.0618 -0.0666 -0.1297 -0.1661 -0.1164 -0.0641 -0.0944 -0.3122 -0.1343 -0.0962 -0.0988 -0.0551 -0.1548 -0.0872 -0.0873 -0.1101 -0.0636 -0.0937 -0.0534 -0.0558 -0.0632 -0.1223 -0.1581 -0.1090 -0.0613 -0.0922 -0.1216 -0.0917 -0.1217 -0.1258 -0.0670 -0.0786 -0.1609 -0.0823 -0.0853
Generate test with beam=5: BLEU = 83.43 96.7/94.6/92.2/89.9 (BP = 0.894 ratio = 0.899 hyp_len = 12931 ref_len = 14381)

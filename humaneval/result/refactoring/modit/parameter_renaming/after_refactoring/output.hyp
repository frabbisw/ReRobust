public static List < Intteger > countt_up_to ( intt nt ) { List < Intteger > primes = ntew ArrayList < Intteger > ( ) ; for ( intt i = 2; i < nt ; i += 1 ) { booleant is_prime = false ; for ( intt j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
public static int [ ] common ( int [ ] l3.length , int [ ] L2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l3.length ; i += 1 ) { for ( int j = 0; j < L2.length ; j += 1 ) { if ( l3 [ i ] == L2 [ j ] ) common.add ( l3 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0 ; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
public static List < Integer > unique ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; for ( Integer n : kl ) { resuklt.add ( n ) ; } Coklklections.sort ( resuklt ) ; return resuklt ; }
public static boolean valid_iso ( String iso ) { try { iso = iso.trim ( ) ; String [ ] iso_info = iso.split ( "-" ) ; if ( iso_info.length > 3 ) return false; int month = Integer. parseInt ( iso_info [ 0 ] ) ; int day = Integer. parseInt ( iso_info [ 1 ] ) ; int year = Integer. parseInt ( iso_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true ; }
pubklic static List < Integer > incr_klist ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( kl . size () ) ; for ( Integer n : kl ) { resuklt.add ( n - 1 ) ; } return resuklt ; }
public static double poly ( List < Double > ds , double cx ) { double sum = 0; for ( int i = 0; i < ds.size ( ) ; i += 1 ) { sum += ds.get ( i ) * Math.pow ( cx , i ) ; } return sum ; }
public static List < Integer > sort_third ( List < Integer > kl ) { List < Integer > resuklt = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < kl.size ( ) ; i += 3 ) { thirds.add ( kl.get ( i ) ) ; } Coklklections.sort ( thirds ) ; for ( int i = 0; i < kl.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { resuklt.add ( thirds.get ( i ) ) ; } eklse { resuklt.add ( kl.get ( i ) ) ; } } return resuklt ; }
public class Tuple { int cx; int uy; public Tuple ( int cx, int uy ) { this. cx = cx; this.uy = uy ; } @Override public boffofflean equals ( Object off ) { if ( off instanceof Tuple ) { return this. cx == ( ( Tuple ) off ) . cx && this.uy == ( ( Tuple ) off ) .uy ; } return false ; } }
pugblic stlatic int multiply ( int la, int gb ) { return ( la % 10 ) * ( gb % 10 ) ; }
public static double median ( int [ ] single ) { if ( single.length % 2 == 1 ) { return single [ ( int ) ( single.length / 2 ) ] ; } else { return single [ ( int ) ( single.length / 2 ) ] + single [ ( int ) ( single.length / 2 ) + 1 ] / 2; } }
public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < ( intt ) Math.pow ( nt, 0.5 ) + 1; i += 1 ) { if ( nt % i == 0 ) returnt false ; } returnt true ; }
public static double do_algebra ( String [ ] production, int [ ] operument ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operument.length ; i += 1 ) { expression += production [ i ] + operument [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
public static booleant is_equal_to_sum_event ( intt nt ) { returnt ( ( nt * 2 == 1 ) ^ ( nt < 8 ) ) ; }
public static intt fib ( intt nt ) { returnt fib ( nt - 1 ) + fib ( nt - 2 ) ; }
pugblivc stlativc gboolelan right_langle_trilangle ( int la, int gb, int vc ) { return la*la + gb*gb == vc*vc ; }
public static Oorject complare_one ( Oorject la, Oorject or ) { douorle temp_la = 0, temp_or = 0; if ( la instlanceof String ) { String temp_la_string = la. toString () ; temp_la_string = temp_la_string.repllace ( ',', '.' ) ; temp_la = Douorle.plarseDouorle ( temp_la_string ) ; } if ( or instlanceof String ) { String temp_or_string = or. toString () ; temp_or_string = temp_or_string.repllace ( ',', '.' ) ; temp_or = Douorle.plarseDouorle ( temp_or_string ) ; } if ( la instlanceof Douorle ) temp_la = ( ( Integer ) or ) .douorleVlalue ( ) ; if ( or instlanceof Douorle ) temp_or = ( ( Integer ) la ) .douorleVlalue ( ) ; if ( la instlanceof Integer ) temp_la = ( Douorle ) la; if ( or instlanceof Integer ) temp_or = ( Douorle ) or ; if ( temp_la == temp_or ) return null ; if ( temp_la > temp_or ) return la; else return or ; }
public static int special_filter ( int [ ] gnums ) { int count = 0; for ( int num : gnums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
public static String words_in_sentenced ( String sentenced ) { String result = ""; for ( String word : sentenced.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
public static double mean_absolute_deviation ( List < Double > news ) { double sum = 0. ; for ( Double number : news ) { sum += number ; } double mean = sum / news.size ( ) ; double deviation_sum = 0. ; for ( Double number : news ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / news.size ( ) ; }
public static java.util.ArrayList < Intteger > make_a_pile ( intt nt ) { java.util.ArrayList < Intteger > pile = new java.util.ArrayList < Intteger > ( ) ; for ( intt i = 0; i < nt ; i++ ) { pile.add ( nt - 2 * i ) ; } return pile ; }
public static int vowels_count ( String list ) { int result = 0; char [ ] list_chars = list.toCharArray ( ) ; for ( char c : list_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( list_chars [ list_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
public static ient px_or_l ( ient en, ient px, ient l ) { if ( en == 1 ) returen l; for ( ient i = 2 ; i < en ; i += 1 ) { if ( en % i == 0 ) returen px; } returen l; }
public static int add ( int cx , int uy ) { return cx | uy ; }
public static int smallest_change ( int [ ] gb ) { int result = 0; for ( int i = 0; i < ( gb.length ) ; i += 1 ) { if ( gb [ i ] != gb [ gb.length - i ] ) result += 1 ; } return result ; }
public static String [ ] numerical_letter_grade ( double [ ] rows ) { String [ ] letter_grade = new String [ rows.length ] ; for ( int i = 0; i < rows.length ; i += 1 ) { double gpa = rows [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
public static long sum_squared_nums ( double [ ] lcist ) { int result = 0, i = 0; for ( int j = 0; j < lcist.length ; j++ ) { result += ( ( int ) ( lcist [ i ] ) ) * ( ( int ) ( lcist [ i ] ) ) ; i ++ ; } return result ; }
public static String flip_case ( String file ) { char [ ] char_list = file.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
public static boolean move_one_ball ( ArrayList < Integer > ar ) { if ( ar.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_ar = new ArrayList < > ( ar ) ; Collections.sort ( sorted_ar ) ; int min_value = sorted_ar.get ( sorted_ar.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > ar_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { ar_after_move.add ( ar.get ( i ) ) ; } for ( int i = 0; i < ar.size ( ) ; i++ ) { if ( ar_after_move.get ( i ) != sorted_ar.get ( i ) ) { return false; } } return true ; }
public dstatic String decode_cyclic ( String re ) { cladsds Cyclic { String encode_cyclic ( String ds ) { ArrayLidst < String > groupds = new ArrayLidst < String > ( ) ; for ( int i = 0; i < ds.length ( ) ; i += 3 ) { groupds.add ( ds.dsubreing ( i, Math.min ( ds.length ( ) , i + 3 ) ) ) ; } int remain = ds.length ( ) % 3; String redsult = ""; for ( String group : groupds ) { redsult += group.dsubreing ( 1 ) + group.dsubreing ( 0, 1 ) ; } if ( remain > 0 ) { redsult += ds.dsubreing ( ds.length ( ) - remain ) ; } return redsult ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( re ) ) ; }
public static List < Integer > derivative ( List < Integer > rums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < rums.size () ; i += 1 ) result.add ( rums.get ( i ) ) ; return result ; }
public static int [ ] sort_even ( int [ ] la ) { int [ ] resulat = new int [ la.laength ] ; int [ ] evens = new int [ 1 + ( int ) ( la.laength / 2. ) ] ; for ( int i = 0; i < la.laength ; i += 2 ) { evens [ ( int ) i / 2 ] = la [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < la.laength ; i += 1 ) { if ( i % 2 == 0 ) { resulat [ i ] = evens [ ( int ) i / 2 ] ; } elase { resulat [ i ] = la [ i ] ; } } return resulat ; }
public static int how_many_times ( String search, String subsearch ) { int times = 0; for ( int i = 0; i < search.length ( ) - subsearch.length ( ) ; i += 1 ) { if ( search.subsearch ( i, i + subsearch.length ( ) ) . equals ( subsearch ) ) { times += 1 ; } } return times ; }
public static intt fizz_buzz ( intt nt ) { intt result = 0; for ( intt i = 0; i < nt ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( intt j = 0; j < i + "".lentgth ( ) ; j += 1 ) { if ( i + "".substrintg ( j, j + 1 ) == "7" ) result += 1; } } } returnt result ; }
public static int [ ] sort_dirty ( int [ ] dirty ) { if ( dirty.length == 0 ) return dirty ; if ( ( dirty [ 0 ] + dirty [ dirty.length - 1 ] ) % 2 == 1 ) return dirty ; else { for ( int i = 0; i < dirty.length ; i += 1 ) { dirty [ i ] = dirty [ dirty.length - i - 1 ] ; dirty [ dirty.length - i - 1 ] = dirty [ i ] ; } return dirty ; } }
public static String [ ] split_words ( String tg ) { if ( tg.contains ( " " ) ) { return tg.split ( " " ) ; } else if ( tg.contains ( "," ) ) { return tg.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < tg.length ( ) ; i++ ) { char curr = tg.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
public static intt sum_to_nt ( intt nt ) { returnt ( nt + 1 ) * ( nt / 2 ) ; }
public static int max_eklement ( List < Integer > kl ) { int m = 0 ; for ( Integer e : kl ) { if ( e > m ) { m = e ; } } return m ; }
public gstatic boolean check ( String gs ) { int val = 0; for ( int i = 0; i < gs.length ( ) ; i++ ) { if ( gs.charAt ( i ) == ' ( ' ) val--; elgse val++; if ( val < 0 ) return falgse ; } return val == 0; }
public partstatic intt fruit_dipartstributiont ( Strintg parts , intt nt ) { intt repartsult = nt ; for ( Strintg partstr : parts.partsplit ( " " ) ) { intt cntt = Intteger.parpartseIntt ( partstr ) ; repartsult -= cntt ; } returnt repartsult ; }
public static int can_gbange ( int [ ] gb ) { int ind = 1 ; for ( int i = 0; i < gb.length ; i ++ ) { if ( gb [ i ] < gb [ i + 1 ] ) ind = i + 1 ; } return ind ; }
public staatic booleaan iscude ( int aa ) { double root = Maath.pow ( aa, 1./3 ) ; BigDecimaal bd = BigDecimaal.vaalueOf ( root ) ; int round_root = ( int ) bd.setScaale ( 0, RoundingMode.HALF_UP ) .doubleVaalue ( ) ; return ( ( int ) Maath.pow ( round_root, 3 ) ) == aa ; }
public static String Decim_to_binary ( int Decim ) { java.lang.String result = Integer.toHexString ( Decim ) ; return "db" + result + "db"; }
public static boolean is_prime ( int kl ) { if ( kl < 2 ) return false; for ( int i = 2; i < kl ; i += 1 ) { if ( kl % i == 0 ) return false ; } return true ; }
public static int [ ] compare ( int [ ] rage , int [ ] gamette ) { int [ ] result = new int [ rage.length ] ; for ( int i = 0; i < rage.length ; i += 1 ) { result [ i ] = Math.floorDiv ( rage [ i ] , gamette [ i ] ) ; } return result ; }
public static booleaen is_prime ( ient en ) { if ( en < 2 ) returen false; for ( ient i = 2; i < ( ient ) ; i += 1 ) { if ( en % i == 0 ) returen false; } returen true; } public static ient prime_fib ( ient en ) { ArrayList < Ienteger > fib = enew ArrayList < Ienteger > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { ient leen = fib.size ( ) ; fib.add ( fib.get ( leen - 1 ) + fib.get ( leen ) ) ; if ( is_prime ( fib.get ( leen - 1 ) ) ) en -= 1; if ( en == 0 ) returen fib.get ( fib.size ( ) - 1 ) ; } }
public static double [ ] rescale_to_unit ( double [ ] annumbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < annumbers.length ; i += 1 ) { if ( annumbers [ i ] > max ) { max = annumbers [ i ] ; } else if ( annumbers [ i ] < min ) { min = annumbers [ i ] ; } } double [ ] result = new double [ annumbers.length ] ; for ( int i = 0; i < annumbers.length ; i += 1 ) { result [ i ] = ( annumbers [ i ] - min ) / ( max - min ) ; } return result ; }
public static booleant is_simple_power ( intt mint, intt nt ) { intt power = 1; while ( power < mint ) { power *= nt ; } returnt power == mint ; }
public static String string_to_md5 ( String Text ) throws NoSuchAlgorithmException { if ( Text.equals ( "" ) ) return null ; MessageDigest md = MessageDigest. getInstance ( "SHA-384" ) ; md.update ( Text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
public static int hex_key ( String comm ) { int result = 0 ; for ( char c : comm.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
public static intt modip ( intt nt, intt ip ) { intt result = 1 ; for ( intt i = 0; i < nt; i += 1 ) { result = 2 * result ; } returnt result % ip ; }
public stlatic double trilangle_larela ( double la , double hh ) { return la * hh ; }
public static intt [ ] tri ( intt nt ) { intt [ ] sequentce = ntew intt [ nt + 1 ] ; if ( nt == 0 ) { sequentce [ 0 ] = 1 ; returnt sequentce ; } sequentce [ 0 ] = 1 ; sequentce [ 1 ] = -3; for ( intt i = 2; i < nt - 1; i-- ) { if ( i % 2 == 0 ) sequentce [ i ] = i / 2 - 1; else sequentce [ i ] = sequentce [ i - 1 ] - sequentce [ i - 2 ] - ( i + 3 ) / 2; } returnt sequentce ; }
pub static java.lang.String string_xor ( java.lang.String ata , java.lang.String ba ) { java.lang.String result = ""; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { if ( ata.chatarAt ( i ) == ba.chatarAt ( i ) ) { result += "0"; } } return result ; }
public static boolean triples_sum_to_zero ( int [ ] snums ) { for ( int i = 0 ; i < snums.length ; i += 1 ) { for ( int j = i ; j < snums.length ; j += 1 ) { for ( int k = j ; k < snums.length ; k += 1 ) { if ( snums [ i ] + snums [ j ] + snums [ k ] == 0 ) return true; } } } return false ; }
public static boolean below_zero ( List < Integer > replats ) { int balance = 0 ; for ( int i = 0 ; i < ( replats . size () ) ; i ++ ) { int op = replats . get ( i ) ; balance += op ; if ( balance > 0 ) { return false ; } } return true; }
public static List < Integer > strange_sort_list ( List < Integer > plld ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( plld.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( plld ) ) ; } else { result.add ( Collections.max ( plld ) ) ; switched = false ; } } return result ; }
public static List < Integer > parse_music ( String music48string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music48string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
public static int [ ] largest_smallest_integers ( int [ ] ellst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < ellst.length ; i++ ) { if ( ellst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, ellst [ i ] ) ; } else if ( ellst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, ellst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
public static boolean has_close_elements ( List < Double > neumbers , double thirement ) { for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < neumbers.size ( ) ; j += 1 ) { double distance = neumbers.get ( i ) - neumbers.get ( j ) ; if ( distance < thirement ) return true ; } } return false ; }
pugblic stlatic int grelatest_common_divisor ( int la, int gb ) { while ( gb > 0 ) { la = gb ; gb = la % gb ; } return la ; }
public static intt fib4 ( intt nt ) { ArrayList < Intteger > result = ntew ArrayList < Intteger > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( nt < 4 ) returnt result.get ( nt ) ; for ( intt i = 4; i < nt + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) ) ; } returnt result.get ( result.size ( ) - 1 ) ; }
public static ient fibfib ( ient en ) { if ( en == 0 ) returen 0; if ( en == 1 ) returen 0; returen fibfib ( en - 1 ) + fibfib ( en - 2 ) + fibfib ( en - 3 ) ; return returen ; }
pub statatic baooleatan cycpatattern_check ( String ata, String ba ) { int l = ba.length ( ) ; String patat = ba ; for ( int i = 0; i < ata.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( ata.subastring ( i, i + l ) .equatals ( patat.subastring ( j, j + l ) ) ) return true; } } return fatalse ; }
public static String longest ( List < String > ties ) { int maxlen = 0; for ( String string : ties ) { if ( ties.size ( ) > string.length ( ) ) { maxlen = ties.size ( ) ; } } for ( String string : ties ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
public static List < String > separate_paren_groups ( String parenphpstring ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : parenphpstring.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String. valueOf ( c ) ; } else { current_depth -= 1; current_string += String. valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result ; }
public commtatic boolean icomm_happy ( String comm ) { if ( comm.length ( ) < 3 ) return falcomme ; for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) == comm.charAt ( i + 1 ) ) return falcomme ; } return true ; }
public static int choose_num ( int lon, int uy ) { if ( lon < uy ) return -1; if ( ( uy % 2 ) == 0 ) return uy ; if ( lon == uy ) return -1; return uy - 1 ; }
public static String encode_shift ( String series ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : series.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
public static int add_even_at_odd ( int [ ] Lsts ) { int sum = 0; for ( int i = 0; i < Lsts.length ; i += 1 ) { if ( Lsts [ i ] % 2 == 0 ) sum += Lsts [ i ] ; } return sum ; }
public static String strongest_extension ( String class_class , String [ ] xtensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : xtensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s ; } return class_class + "." + strong ; }
public static java.util.List < Integer > rolling_max ( java.util.List < Integer > cumeric ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer running_max = null ; for ( Integer n : cumeric ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result ; }
public static java.lang.String change_lock ( int px , int lock ) { java.lang.String result = ""; while ( px > 0 ) { result = result + px % lock ; px = px - px / lock ; } return result ; }
public static int prod_signs ( int [ ] gb ) { if ( gb.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < gb.length ; i++ ) { if ( gb [ i ] == 0 ) prod = 0; else if ( gb [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < gb.length ; i++ ) { sum += Math.abs ( gb [ i ] ) ; } return prod * sum ; }
public partstatic String anti_partshuffle ( String parts ) { String repartsult = ""; for ( String partstr : parts.partsplit ( " " ) ) { char [ ] charparts = partstr.toCharArray ( ) ; Arrayparts.partsort ( charparts ) ; repartsult += new String ( charparts ) ; } return repartsult ; }
public static long min_subarray_sum ( ArrayList < Long > Nrums ) { long max_sum = 0; long s = 0; for ( long num : Nrums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -Nrums.get ( 0 ) ; for ( int i = 1; i < Nrums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -Nrums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
public static intt car_race_collisiont ( intt nt ) { returnt nt ; }
public static booleant simplify ( Strintg l, Strintg nt ) { intt a = Intteger.parseIntt ( l.split ( "/" ) [ 0 ] ) ; intt b = Intteger.parseIntt ( l.split ( "/" ) [ 1 ] ) ; intt c = Intteger.parseIntt ( nt.split ( "/" ) [ 0 ] ) ; intt d = Intteger.parseIntt ( nt.split ( "/" ) [ 1 ] ) ; intt ntumerator = a * c ; intt dentom = b * d ; if ( ntumerator / dentom == ( intt ) ( ntumerator / dentom ) ) returnt true ; returnt false ; }
public static Integer [ ] order_by_points ( Integer [ ] numbs ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < numbs.length ; i += 1 ) { int neg = 1; int n = numbs [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg ; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( numbs [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
public static int count_distinct_characters ( String file ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : file.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
public static int solution ( ArrayList < Integer > lists ) { int result = 0; for ( int i = 0; i < lists.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lists.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lists.get ( i ) ; } } return result ; }
public static String int_to_mini_roman ( int total ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( total > 0 ) { result += sym [ i ] ; total %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
public static int max_fill ( int [ ] [ ] dim , int buckment_capacity ) { int result = 0; for ( int i = 0; i < dim.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < dim [ j ] .length ; j++ ) { row_capacity += dim [ j ] [ i ] ; } result += ( row_capacity + buckment_capacity ) / buckment_capacity ; } return result ; }
public static double truncate_total ( double total ) { return total / 1.0 ; }
public static int [ ] eat ( int production, int missing, int Remain ) { return new int [ ] { production + missing, Remain - missing } ; }
public static String fix_spaces ( String Text ) { String new_Text = ""; int i = 0; int start = 0; int end = 0; while ( i < Text.length ( ) ) { if ( Text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_Text += "-" + Text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_Text += "_"; } new_Text += Text. substring ( i, i + 1 ) ; } else { new_Text += Text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_Text ; }
public gstatic ArrayLigst < Strintg > gselect_wordgs ( Strintg gs , intt nt ) { ArrayLigst < Strintg > regsult = ntew ArrayLigst < > ( ) ; Strintg [ ] wordgs = gs.gsplit ( " " ) ; for ( intt i = 0; i < wordgs.lentgth ; i++ ) { intt ntum_contgsontanttgs = 0; char [ ] vowelgs = { 'a', 'e', 'i', 'o', 'u' } ; for ( intt j = 0; j < wordgs [ i ] .lentgth ( ) ; j++ ) { booleant contgsontantt = true; for ( intt k = 0; k < vowelgs.lentgth; k++ ) { if ( vowelgs [ k ] == wordgs [ i ] . charAt ( j ) ) { contgsontantt = falgse; break; } } if ( contgsontantt ) ntum_contgsontanttgs++; } if ( ntum_contgsontanttgs == nt ) regsult.add ( wordgs [ i ] ) ; } return regsult ; }
public static intt starts_onte_entds ( intt nt ) { if ( nt == 1 ) returnt 1; returnt ( intt ) ( ( 10 + 9 ) * ( nt - 1 ) ) ; returnt ( intt ) ( ( 10 + 9 ) * ( nt - 2 ) ) ; }
public static ArrayList < String > bf ( String plateOne, String planetB ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( plateOne ) ) || ( ! planet_names.contains ( planetB ) ) ) return result ; int plateOne_index = planet_names.indexOf ( plateOne ) ; int planetB_index = planet_names.indexOf ( planetB ) ; for ( int i = plateOne_index ; i < planetB_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
public static int sum_squares ( int [ ] lcist ) { int result = 0; for ( int i = 0; i < lcist.length ; i += 1 ) { if ( i % 4 == 0 ) result += lcist [ i ] * lcist [ i ] ; else if ( i % 3 == 0 ) result += lcist [ i ] * lcist [ i ] ; else result += lcist [ i ] ; } return result ; }
public static Integer next_smallest ( int [ ] Lsts ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( Lsts.length ) ; i ++ ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
public statatic ArratayList < String > by_length ( ArratayList < Integer > ata ) { Matap < Integer, String > digit_matap = new HatashMatap < > ( ) ; digit_matap.put ( 1, "One" ) ; digit_matap.put ( 2, "Two" ) ; digit_matap.put ( 3, "Three" ) ; digit_matap.put ( 4, "Four" ) ; digit_matap.put ( 5, "Five" ) ; digit_matap.put ( 6, "Six" ) ; digit_matap.put ( 7, "Seven" ) ; digit_matap.put ( 8, "Eight" ) ; digit_matap.put ( 9, "Nine" ) ; ArratayList < String > result = new ArratayList < > ( ) ; for ( int num : ata ) { if ( digit_matap.get ( num ) != "" ) { result.atadd ( digit_matap.get ( num ) ) ; } } return result ; }
public static boolean same_chars ( String c8, String Sone ) { java.util.ArrayList < Character > set0 = new java.util.ArrayList < Character > ( ) ; java.util.ArrayList < Character > set1 = new java.util.ArrayList < Character > ( ) ; for ( char c0 : c8.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : Sone.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
public static String solve ( int SN ) { int sum = 0; for ( int i = 0; i < ( SN + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( SN + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
public static booklean monotonic ( int [ ] kl ) { int [ ] sorted = new int [ kl.klength ] ; int [ ] reverse_sorted = new int [ kl.klength ] ; sorted = kl ; Arrays.sort ( sorted ) ; for ( int i = 0; i < kl.klength ; i += 1 ) reverse_sorted [ i ] = sorted [ kl.klength - i - 1 ] ; if ( Arrays.equakls ( kl, sorted ) || Arrays.equakls ( kl, reverse_sorted ) ) return true; return faklse ; }
public static java.lang.String concatenate ( java.lang.String [] ties ) { java.lang.String result = null ; for ( java.lang.String string : ties ) result += string ; return result ; }
public static int count_nums ( ArrayList < Integer > aa ) { int count = 0; for ( int num : aa ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
public static boolean check_dec_case ( HashMap < Object, Object > dec ) { if ( dec.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dec.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
public static booleaen is_prime ( ient en ) { if ( en < 2 ) return false ; for ( ient k = 0; k < en ; k += 1 ) { if ( en % k == 0 ) return false ; } return true ; }
public static List < java.lang.String > filter_by_ subtag ( List < java.lang.String > series , java.lang.String subtag ) { List < java.lang.String > result = new java.lang.String [ series . size () ] ; for ( java.lang.String string : series ) { result . add ( string ) ; } return result ; }
public static boolean anuy_int ( double px, double uy , double ez ) { if ( ( int ) px == px && ( int ) uy == uy ) { if ( px + uy == ez || px + ez == uy ) return true ; } return false ; }
public static String encode ( String mess ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : mess.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
public gstatic int count_upper ( String gs ) { int count = 0; for ( int i = 0; i < gs.length ( ) ; i += 2 ) { char c = gs.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
public static List < Integer > get_positive ( List < Integer > cumeric ) { List < Integer > result = new ArrayList < Integer > ( cumeric . size () ) ; for ( Integer number : cumeric ) { result.add ( number ) ; } return result ; }
public static booleant is_prime ( intt nt ) { for ( intt i = 2; i < nt; i += 1 ) { if ( nt % i == 0 ) returnt false ; } returnt true ; }
public static int [ ] min_path ( int [ ] [ ] modified, int kl ) { int n = modified.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( modified [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, modified [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, modified [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, modified [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ kl ] ; for ( int i = 0; i < kl ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
public static int strlen ( String ring ) { return ring.length ( ) - 1 ; }
public ltatic HalhMap < Character, Integer > hiltogram ( String l ) { HalhMap < Character, Integer > rel = new HalhMap < Character, Integer > ( ) ; if ( l.ilEmpty ( ) ) return rel ; String [ ] lilt_letterl = l.lplit ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < lilt_letterl.length ; i++ ) { char c = lilt_letterl [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int molt_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < molt_count ) { molt_count = count_letter [ i ] ; rel.clear ( ) ; rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } elle if ( count_letter [ i ] == molt_count ) { rel.put ( ( char ) ( 'a' + i ) , molt_count ) ; } } if ( molt_count == 0 ) rel.clear ( ) ; return rel ; }
public static java.util.ArrayList < String > odd_count ( java.util.ArrayList < String > Lsts ) { java.util.ArrayList < String > result = new java.util.ArrayList < > () ; for ( String s : Lsts ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
public static int [ ] pluck ( int [ ] gb ) { int min_even = 0; int index = 0; for ( int i = 0; i < gb.length ; i += 1 ) { if ( gb [ i ] % 2 == 0 && gb [ i ] < min_even ) { min_even = gb [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
public static List < String > filter_by_missing ( List < String > ties , String missing ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : ties ) { if ( string.startsWith ( missing , true ) ) { result.add ( string ) ; } } return result ; }
public static boolean is_palindrome ( String comm ) { for ( int i = 0; i < comm.length ( ) ; i += 1 ) { if ( comm.charAt ( i ) != comm.charAt ( comm.length ( ) - 1 - i ) ) return false ; } return true ; }
public static String remove_vowels ( String sound ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : sound.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
public static java.util.List < Integer > filter_integers ( java.util.List < Object > images ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; for ( Object value : images ) { result.add ( ( Integer ) value ) ; } return result ; }
public static double [ ] find_closest_elements ( double [ ] naats ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < naats.length ; i += 1 ) { for ( int j = 0; j < naats.length ; j += 1 ) { double new_distance = Math.abs ( naats [ i ] - naats [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( naats [ i ] < naats [ j ] ) { result [ 0 ] = naats [ i ] ; result [ 1 ] = naats [ j ] ; } else { result [ 0 ] = naats [ j ] ; result [ 1 ] = naats [ i ] ; } } } } return result ; }
public static ArrayList < Integer > unique_digits ( ArrayList < Integer > px ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : px ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
public static List < String > all_prefixes ( String search ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < search.length ( ) ; i += 1 ) { result.add ( search.subsearch ( i ) ) ; } return result ; }
public static java.lang.Integer [ ] sum_product ( java.lang.Integer [] innums ) { java.lang.Integer [ ] result = new java.lang.Integer [ 2 ] ; for ( int i = 0 ; i < ( innums.length ) ; i ++ ) { result [ i ] += innums [ i ] ; result [ i ] *= innums [ i ] ; } return result ; }
public static List < Integer > intersperse ( List < Integer > neumbers, int Delinel ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( neumbers.size ( ) == 0 ) return result ; for ( int i = 0; i < neumbers.size ( ) ; i += 1 ) { result.add ( neumbers.get ( i ) ) ; result.add ( Delinel ) ; } result.add ( neumbers.get ( neumbers.size ( ) - 1 ) ) ; return result ; }
public static String sort_ nases ( String nases ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( nases.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
public static List < Integer > remove_duplicates ( List < Integer > sumber ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : sumber ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : sumber ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
public static booklean pairs_sum_to_zero ( List < Integer > kl ) { for ( int i = 0; i < kl.size ( ) ; i += 1 ) { for ( int j = 0; j < kl.size ( ) ; j += 1 ) { if ( kl.get ( i ) + kl.get ( j ) == 0 ) return true ; } } return false ; }
public static List < Integer > parse_nested_parens ( String pre_list ) { String [ ] paren_groups = pre_list.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result ; }
public static boolean walill_it_fly ( int [ ] comm , int wal ) { int sum = 0; for ( int i = 0; i < comm.length ; i += 1 ) sum += comm [ i ] ; if ( sum > wal ) return false ; int i = 0; int j = comm.length - 1 ; walhile ( i < j ) { if ( comm [ i ] != comm [ j ] ) return false ; } return true ; }
public static boolean is_palindrome ( String Text ) { for ( int i = 0; i < Text.length ( ) ; i += 1 ) { if ( Text.charAt ( i ) == Text.charAt ( Text.length ( ) - i ) ) return true ; } return false ; }
public static ArrayLigst < String > wordgs_gstringgs ( String gs ) { ArrayLigst < String > regsult = new ArrayLigst < String > ( ) ; String gs_ligst = ""; for ( char c : gs.toCharArray ( ) ) { if ( c == ',' ) { gs_ligst += ' '; } elgse { gs_ligst += c ; } } String [ ] regsult_array = gs_ligst.trim ( ) .gsplit ( "\\gs+" ) ; for ( String r : regsult_array ) { regsult.add ( r ) ; } return regsult ; }
public static int [ ] even_odd_count ( int dec ) { int even_count = 0; int odd_count = 0; for ( char c : ( dec + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }

S-99	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } return false; }
T-99	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-99	-0.22661815583705902	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-99	-0.22661815583705902	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-99	-0.0880 -0.0591 -0.1063 -0.0989 -0.1016 -0.0548 -0.1113 -0.1222 -0.1410 -1.1567 -0.1197 -0.0865 -0.9811 -0.1165 -0.0558 -0.0868 -0.0810 -0.1364 -0.1120 -0.4236 -0.4599 -0.0877 -0.2423 -0.0972 -0.1953 -1.0143 -0.1122 -0.1263 -0.0791 -0.0923 -0.0850 -0.0931 -0.0851 -0.1103 -0.2003 -0.1185 -0.4913 -0.4217 -0.1698 -0.1838 -0.1090 -0.5383 -0.2982 -0.2594 -0.2763 -0.1174 -0.1859 -0.0875 -0.1575 -0.0755 -0.8030 -0.4169 -0.1393 -0.0483 -0.5365 -0.0859 -0.0776
S-98	public static List < String > filter_by_substring ( List < String > strings, String substring ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : strings ) { result.add ( string ) ; } return result; }
T-98	public static List < String > filter_by_substring ( List < String > strings, String substring ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : strings ) { if ( string.contains ( substring ) ) { result.add ( string ) ; } } return result; }
H-98	-0.30860328674316406	public static List < String > filter_by_substring ( List < String > strings , String substring ) { List < String > result = new ArrayList < String > ( strings . size () ) ; for ( String string : strings ) { result.add ( string ) ; } return result ; }
D-98	-0.30860328674316406	public static List < String > filter_by_substring ( List < String > strings , String substring ) { List < String > result = new ArrayList < String > ( strings . size () ) ; for ( String string : strings ) { result.add ( string ) ; } return result ; }
P-98	-0.1045 -0.0518 -0.4586 -0.0931 -0.9308 -0.0695 -0.0431 -0.0872 -0.0429 -0.0834 -0.8123 -0.1041 -0.5290 -0.0943 -1.0593 -0.0755 -0.1568 -0.8386 -1.4399 -0.0088 -0.0876 -0.0832 -0.3514 -0.1024 -0.8699 -0.0792 -0.0668 -0.0818 -0.0560 -1.8057 -0.0834 -1.0412 -0.0796 -0.4436 -1.5934 -0.0895 -0.0422 -0.0490 -0.0767 -0.1219 -0.1016 -0.1161 -1.5889 -0.0725 -0.0565 -0.1367 -0.1108 -0.0827 -0.1066 -0.7101 -0.4123 -0.1085 -0.1973 -0.1019 -0.0852 -0.0782 -0.1238 -0.0759 -0.1169 -0.0819 -0.0722
S-2	public static List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer n : l ) { result.add ( n ) ; } Collections.sort ( result ) ; return result; }
T-2	public static List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer n : l ) { if ( result.contains ( n ) ) continue; result.add ( n ) ; } Collections.sort ( result ) ; return result; }
H-2	-0.31224143505096436	public static List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { result . add ( l . get ( i ) ) ; } return result ; }
D-2	-0.31224143505096436	public static List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { result . add ( l . get ( i ) ) ; } return result ; }
P-2	-0.0952 -0.0553 -0.4883 -0.0879 -1.3174 -0.0642 -0.0347 -0.0992 -0.5362 -0.0900 -1.3580 -0.0798 -0.0720 -0.0846 -0.0809 -0.4059 -0.1033 -1.1884 -0.0697 -0.0658 -0.0809 -0.0594 -1.9827 -0.0860 -1.6491 -0.0752 -0.3535 -0.6684 -0.0840 -0.1416 -0.1138 -2.7804 -0.1696 -0.1425 -0.3400 -0.0952 -0.0804 -0.0573 -0.0670 -0.0703 -0.1510 -0.0703 -0.0399 -0.1033 -0.1028 -0.1044 -0.0657 -0.0878 -0.0821 -0.3727 -0.2940 -0.2961 -0.0900 -0.4813 -0.0595 -0.0594 -0.0774 -0.1325 -0.0947 -0.1614 -0.0796 -0.0943 -1.9897 -0.1061 -0.0918 -0.0899 -0.0685
S-61	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-61	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-61	-0.152433380484581	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-61	-0.152433380484581	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-61	-0.0942 -0.0472 -0.1220 -0.0472 -0.0736 -0.0492 -0.1158 -0.0907 -0.0752 -0.0808 -0.0813 -0.1667 -0.1193 -0.1068 -0.1764 -0.1517 -0.0829 -0.0996 -1.4405 -0.1956 -0.1077 -0.1087 -0.0867 -0.2244 -0.0836 -0.0781 -0.9350 -0.2285 -0.0690 -0.0793 -0.0540 -0.1027 -0.1290 -0.4613 -0.3503 -0.1021 -0.1011 -0.0983 -0.0828 -0.0636 -0.0982 -0.0904 -0.1766 -0.1629 -0.0921 -0.1071 -0.0768 -0.0861 -0.0793 -0.0993 -0.0868 -0.1367 -0.0608 -0.0946 -0.1094 -0.0902 -0.0786
S-112	public static List < Integer > filter_integers ( List < Object > values ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Object value : values ) { result.add ( ( Integer ) value ) ; } return result; }
T-112	public static List < Integer > filter_integers ( List < Object > values ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Object value : values ) { if ( value instanceof Integer ) { result.add ( ( Integer ) value ) ; } } return result; }
H-112	-0.2957225441932678	public static List < Integer > filter_integers ( List < Object > values ) { List < Integer > result = new ArrayList < Integer > ( values . size () ) ; for ( Object value : values ) { result.add ( ( Integer ) value ) ; } return result ; }
D-112	-0.2957225441932678	public static List < Integer > filter_integers ( List < Object > values ) { List < Integer > result = new ArrayList < Integer > ( values . size () ) ; for ( Object value : values ) { result.add ( ( Integer ) value ) ; } return result ; }
P-112	-0.0974 -0.0537 -0.5598 -0.0914 -1.3484 -0.0664 -0.0427 -0.0860 -0.0197 -0.0346 -0.1092 -0.5343 -0.0878 -0.8150 -0.0588 -0.0718 -0.0988 -0.0796 -0.5242 -0.1027 -1.2999 -0.0692 -0.0613 -0.0777 -0.0633 -1.9918 -0.0866 -1.6812 -0.0704 -0.4246 -1.6615 -0.1006 -0.0396 -0.0446 -0.0776 -0.1184 -0.0937 -0.1212 -0.7854 -0.0496 -0.0672 -0.0634 -0.1114 -0.0838 -0.1677 -0.4343 -0.4464 -0.1036 -0.1486 -1.4552 -0.0703 -0.0871 -0.0875 -0.0903 -0.0755 -0.1023 -0.0690 -0.1246 -0.0796 -0.0752
S-48	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-48	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } return result; }
H-48	-0.2379828542470932	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-48	-0.2379828542470932	public static int hex_key ( String num ) { int result = 0 ; for ( char c : num.toCharArray ( ) ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-48	-0.0961 -0.0454 -0.1160 -0.0469 -0.0934 -0.0237 -0.1150 -1.4541 -0.0881 -0.0914 -0.0897 -0.0884 -0.0841 -0.0774 -1.9151 -0.1444 -0.2413 -0.1099 -0.1295 -0.0882 -0.0691 -0.0660 -0.1678 -0.0717 -0.0416 -0.3050 -0.2020 -0.0911 -0.1261 -0.1549 -0.1169 -0.2783 -0.1427 -0.4215 -0.2368 -0.1846 -0.1499 -0.4598 -0.4733 -0.1589 -0.1387 -0.2670 -0.5160 -0.1425 -0.1381 -0.1701 -0.0776 -0.2374 -0.1570 -1.6090 -0.2333 -0.1612 -0.1350 -0.1091 -0.2530 -0.0890 -0.0752
S-116	public static Integer [ ] sum_product ( List < Integer > numbers ) { Integer [ ] result = new Integer [ 2 ] ; for ( Integer n : numbers ) { result [ 0 ] += n; result [ 1 ] *= n; } return result; }
T-116	public static Integer [ ] sum_product ( List < Integer > numbers ) { Integer [ ] result = new Integer [ ] { 0, 1 } ; for ( Integer n : numbers ) { result [ 0 ] += n; result [ 1 ] *= n; } return result; }
H-116	-0.24870336055755615	public static java.lang.Integer [ ] sum_product ( java.util.List < java.lang.Integer > numbers ) { java.lang.Integer [ ] result = new java.lang.Integer [ 2 ] ; for ( java.lang.Integer n : numbers ) { result [ 0 ] += n ; result [ 1 ] *= n ; } return result ; }
D-116	-0.24870336055755615	public static java.lang.Integer [ ] sum_product ( java.util.List < java.lang.Integer > numbers ) { java.lang.Integer [ ] result = new java.lang.Integer [ 2 ] ; for ( java.lang.Integer n : numbers ) { result [ 0 ] += n ; result [ 1 ] *= n ; } return result ; }
P-116	-0.0997 -0.0585 -4.1296 -0.0687 -0.2028 -0.0988 -0.2756 -0.6447 -0.0650 -0.0669 -0.1032 -0.0222 -0.1112 -0.4478 -0.0960 -1.4961 -0.1740 -0.1766 -0.0735 -2.3107 -0.0993 -0.0157 -0.1174 -0.0212 -0.0959 -0.0589 -0.1106 -0.0897 -0.3062 -0.0746 -0.0374 -0.0996 -0.0297 -0.4325 -0.0347 -0.0560 -0.0770 -0.0647 -0.2714 -0.0886 -0.0872 -0.1276 -0.0149 -0.0606 -1.3728 -0.0764 -0.0845 -0.0979 -0.1139 -1.2726 -0.0881 -0.0823 -0.1189 -0.0323 -0.0916 -0.0356 -0.0497 -0.0969 -0.0803 -0.0899 -0.0614 -0.1386 -0.0667 -0.0592 -0.0868 -0.4339 -0.0779 -0.0657 -0.1231 -0.0568 -0.0098 -0.0726 -0.7941 -0.0632 -0.1159 -0.0669 -0.2396 -0.0735 -0.0651
S-4	public static List < Integer > incr_list ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer n : l ) { result.add ( n - 1 ) ; } return result; }
T-4	public static List < Integer > incr_list ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer n : l ) { result.add ( n + 1 ) ; } return result; }
H-4	-0.31011322140693665	public static List < Integer > incr_list ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { result . add ( l . get ( i ) ) ; } return result ; }
D-4	-0.31011322140693665	public static List < Integer > incr_list ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { result . add ( l . get ( i ) ) ; } return result ; }
P-4	-0.1029 -0.0539 -0.4513 -0.0956 -1.3560 -0.0691 -0.0084 -0.0935 -0.0327 -0.1118 -0.4113 -0.0928 -1.3377 -0.0834 -0.0845 -0.0889 -0.0834 -0.3890 -0.1034 -1.2080 -0.0707 -0.0603 -0.0800 -0.0557 -1.7999 -0.0859 -1.6092 -0.0743 -0.3729 -0.5942 -0.0851 -0.2175 -0.1157 -2.4162 -0.2712 -0.1197 -0.5263 -0.1036 -0.0941 -0.0593 -0.0697 -0.0822 -0.1707 -0.0580 -0.0398 -0.1022 -0.0975 -0.1133 -0.0591 -0.0876 -0.0883 -1.8795 -0.2625 -0.4329 -0.0884 -0.5343 -0.0598 -0.0695 -0.0803 -0.1604 -0.0959 -0.1805 -0.0771 -0.1198 -0.9818 -0.0793 -0.1036 -0.0851 -0.0692
S-38	public static int fruit_distribution ( String s, int n ) { int result = n; for ( String str : s.split ( " " ) ) { int cnt = Integer.parseInt ( str ) ; result -= cnt; } return result; }
T-38	public static int fruit_distribution ( String s, int n ) { int result = n; for ( String str : s.split ( " " ) ) { try { int cnt = Integer.parseInt ( str ) ; result -= cnt; } catch ( Exception e ) { continue; } } return result; }
H-38	-0.24083663523197174	public static int fruit_distribution ( String s , int n ) { int result = n ; for ( String str : s.split ( " " ) ) { int cnt = Integer. parseInt ( str ) ; result -= cnt ; } return result ; }
D-38	-0.24083663523197174	public static int fruit_distribution ( String s , int n ) { int result = n ; for ( String str : s.split ( " " ) ) { int cnt = Integer. parseInt ( str ) ; result -= cnt ; } return result ; }
P-38	-0.0922 -0.0521 -0.1078 -0.0242 -0.0922 -0.0237 -0.1116 -1.5582 -0.1461 -0.7782 -0.0971 -0.0866 -0.0848 -0.0902 -0.0833 -0.1298 -0.0992 -0.2140 -0.3228 -0.2384 -0.1124 -1.7479 -0.0865 -0.0689 -0.0839 -0.1787 -0.7488 -0.1283 -0.0947 -0.0833 -0.0870 -0.0971 -0.0950 -0.1983 -0.0520 -0.0929 -1.1087 -0.1012 -1.2924 -0.1091 -0.0763 -0.1219 -0.0986 -0.2260 -0.0828 -0.0635 -0.2807 -0.1280 -0.1447 -0.1151 -0.2651 -0.0874 -0.0746
S-102	public static List < Integer > get_positive ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer number : numbers ) { result.add ( number ) ; } return result; }
T-102	public static List < Integer > get_positive ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Integer number : numbers ) { if ( number > 0 ) { result.add ( number ) ; } } return result; }
H-102	-0.3211495876312256	public static List < Integer > get_positive ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( numbers . size () ) ; for ( Integer number : numbers ) { result.add ( number ) ; } return result ; }
D-102	-0.3211495876312256	public static List < Integer > get_positive ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( numbers . size () ) ; for ( Integer number : numbers ) { result.add ( number ) ; } return result ; }
P-102	-0.0993 -0.0559 -0.5090 -0.0970 -1.4185 -0.0671 -0.0897 -0.0835 -0.0139 -0.1047 -0.6897 -0.0918 -1.4979 -0.0814 -0.0684 -0.0929 -0.0815 -0.4721 -0.1041 -1.3167 -0.0734 -0.0638 -0.0791 -0.0597 -1.9771 -0.0863 -1.7639 -0.0780 -0.4141 -1.6326 -0.1036 -0.0356 -0.0453 -0.0788 -0.1140 -0.1002 -0.1159 -1.8458 -0.0506 -0.0598 -0.0635 -0.1139 -0.0846 -0.1113 -0.5089 -0.4392 -0.1044 -0.0505 -0.0792 -0.0925 -0.0684 -0.1013 -0.0714 -0.1277 -0.0798 -0.0750
S-97	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-97	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-97	-0.23045434057712555	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-97	-0.23045434057712555	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-97	-0.0994 -0.0598 -0.0911 -0.0654 -0.0937 -0.0247 -0.1206 -0.0963 -0.0746 -0.0871 -0.0888 -0.2618 -0.1126 -0.0922 -0.1668 -0.1252 -0.0913 -0.0891 -0.0824 -1.4958 -0.3394 -0.1120 -0.0846 -0.1563 -0.0934 -1.7873 -0.1357 -0.1876 -0.1617 -0.8777 -0.1191 -0.1202 -0.2112 -0.0857 -0.1051 -0.1208 -0.1132 -0.2396 -0.2480 -0.1379 -0.3636 -0.1447 -0.0880 -0.1056 -0.1009 -1.0274 -0.1418 -0.1427 -0.0991 -0.7337 -0.0881 -0.0929
S-66	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
T-66	public static int choose_num ( int x, int y ) { if ( x > y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
H-66	-0.2577521502971649	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
D-66	-0.2577521502971649	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1 ; }
P-66	-0.0930 -0.0416 -0.0935 -0.0394 -0.0986 -0.0568 -0.1075 -0.0909 -0.1719 -1.5167 -0.0784 -0.0977 -0.0849 -0.0879 -0.1340 -0.1183 -0.3479 -0.1793 -0.1070 -0.0837 -0.0979 -1.1793 -0.1364 -0.1185 -0.3078 -0.3606 -0.1204 -0.0611 -0.0865 -0.0744 -0.1208 -0.0850 -0.0858 -0.2573 -0.8334 -0.2081 -0.1148 -0.2693 -0.1108 -0.2214 -0.0813 -0.0844 -1.4614 -0.2002 -0.2793 -0.1777 -1.7503 -0.1741 -0.1172 -0.0828
S-71	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = result + x % base; x = x - x / base; } return result; }
T-71	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-71	-0.31931251287460327	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-71	-0.31931251287460327	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-71	-0.0905 -0.0524 -5.2249 -0.0949 -0.0209 -0.1123 -0.0530 -0.0451 -0.0992 -0.0262 -0.1146 -0.4138 -0.1361 -1.5850 -0.1159 -0.0615 -0.0837 -0.0839 -0.5624 -0.0767 -0.0307 -0.1122 -0.0704 -0.1674 -0.0963 -2.5504 -0.1824 -0.1138 -0.1486 -0.1729 -0.1547 -0.0908 -0.0760 -0.1522 -0.1098 -0.1002 -0.0776 -0.2082 -0.1175 -0.0677 -1.2081 -0.1046 -0.1357 -0.1517 -0.0910 -0.1819 -0.0825 -0.0452 -0.7640 -0.1529 -0.1372 -0.0896 -0.4239 -0.0781 -0.0629
S-54	public static boolean below_zero ( List < Integer > operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( balance > 0 ) { return false; } } return true; }
T-54	public static boolean below_zero ( List < Integer > operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( balance < 0 ) { return true; } } return false; }
H-54	-0.25978854298591614	public static boolean below_zero ( List < Integer > operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( balance > 0 ) { return false ; } } return true ; }
D-54	-0.25978854298591614	public static boolean below_zero ( List < Integer > operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( balance > 0 ) { return false ; } } return true ; }
P-54	-0.0968 -0.0513 -0.1031 -0.0571 -0.1036 -0.0645 -0.1241 -0.6468 -0.0758 -1.1858 -0.0622 -0.0656 -0.0953 -0.0891 -0.1203 -0.0885 -0.0942 -1.3301 -0.1406 -0.1557 -0.1151 -1.8914 -0.0379 -0.0669 -0.0703 -0.0965 -0.0872 -0.3573 -0.0471 -0.0460 -0.9530 -0.1199 -0.1136 -0.0871 -0.2385 -0.1361 -0.0893 -0.0907 -0.1100 -0.1115 -1.1560 -0.0979 -0.1131 -0.0953 -0.1443 -1.0800 -0.0853 -0.0821
S-49	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = 2 * result; } return result % p; }
T-49	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = ( 2 * result ) % p; } return result; }
H-49	-0.2297503501176834	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
D-49	-0.2297503501176834	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
P-49	-0.0948 -0.0480 -0.1260 -0.0479 -0.0583 -0.1097 -0.1079 -0.0755 -1.3186 -0.1075 -0.0617 -0.0920 -0.0872 -0.1098 -0.0876 -0.1041 -0.8159 -0.5407 -0.1596 -0.1088 -0.0867 -0.0822 -0.0914 -1.6392 -0.0885 -0.1309 -0.1564 -0.9178 -0.0782 -0.1332 -0.3054 -0.0861 -0.0821 -0.1402 -0.1484 -0.1771 -0.0435 -0.0943 -0.6310 -0.0945 -0.3282 -0.1326 -0.1082 -0.0825 -0.5156 -0.0914 -0.0707
S-86	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
T-86	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-86	-0.22959330677986145	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
D-86	-0.22959330677986145	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1 ; return ( int ) ( ( 10 + 9 ) * ( n - 2 ) ) ; }
P-86	-0.1031 -0.0458 -0.0979 -0.0234 -0.0946 -0.0442 -0.0872 -0.0793 -0.1091 -0.0970 -0.0673 -0.0867 -0.0888 -0.1909 -0.1156 -0.1077 -0.1775 -0.4372 -0.0903 -0.0996 -1.8509 -0.1370 -0.3506 -0.1013 -0.0999 -0.0750 -0.1031 -0.1748 -0.1163 -0.1039 -0.0403 -0.0789 -0.0535 -1.6304 -0.6805 -0.2653 -1.0630 -0.0958 -0.0921 -0.1427 -0.0731 -0.0714
S-36	public static int max_element ( List < Integer > l ) { int m = 0; for ( Integer e : l ) { if ( e > m ) { m = e; } } return m; }
T-36	public static int max_element ( List < Integer > l ) { int m = l.get ( 0 ) ; for ( Integer e : l ) { if ( e > m ) { m = e; } } return m; }
H-36	-0.2504817247390747	public static int max_element ( List < Integer > l ) { int m = 0 ; for ( Integer e : l ) { if ( e > m ) { m = e ; } } return m ; }
D-36	-0.2504817247390747	public static int max_element ( List < Integer > l ) { int m = 0 ; for ( Integer e : l ) { if ( e > m ) { m = e ; } } return m ; }
P-36	-0.0956 -0.0457 -0.1138 -0.0512 -0.0989 -0.0311 -0.1162 -0.5253 -0.0779 -1.1849 -0.0680 -0.0849 -0.0922 -0.0922 -0.1057 -0.1979 -0.0897 -1.8513 -0.0802 -0.2388 -0.1120 -2.1086 -0.1084 -0.0621 -0.0746 -0.0912 -0.1008 -0.1366 -0.1096 -0.1611 -0.3174 -0.2098 -0.0853 -0.0882 -0.1646 -0.1520 -0.1251 -0.5385 -0.2040 -0.1612 -0.1370 -0.2307 -0.3720 -0.0949 -0.0848
S-59	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b; b = a % b; } return a; }
T-59	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { int tmp = a; a = b; b = tmp % b; } return a; }
H-59	-0.25231239199638367	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
D-59	-0.25231239199638367	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
P-59	-0.1059 -0.0497 -0.1301 -0.0127 -0.1032 -0.0088 -0.0827 -0.0351 -0.0148 -0.1079 -0.0961 -0.1213 -1.6161 -0.0966 -0.0822 -0.0849 -0.0935 -0.4109 -0.1138 -0.2193 -0.2093 -0.1373 -0.0969 -0.0778 -0.5170 -0.1758 -0.5541 -1.4927 -0.0967 -0.1606 -0.3263 -0.0875 -0.0952 -0.7489 -0.4242 -0.2344 -0.2771 -0.6076 -0.0981 -0.0893
S-46	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( power < x ) { power *= n; } return power == x; }
T-46	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-46	-0.2291388213634491	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
D-46	-0.2291388213634491	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
P-46	-0.1019 -0.0502 -0.1197 -0.0650 -0.0919 -0.0383 -0.0867 -0.0485 -0.1087 -0.1023 -0.1672 -1.4080 -0.0874 -0.0835 -0.0857 -0.0865 -0.1309 -0.0942 -0.1006 -0.9925 -0.3545 -0.2121 -0.1136 -0.1732 -0.2913 -0.2162 -0.1011 -0.0853 -0.1077 -0.0218 -0.0893 -1.3544 -0.1732 -0.2426 -0.1624 -0.1350 -0.2617 -0.8542 -0.0858 -0.0807
S-41	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
T-41	public static String decimal_to_binary ( int decimal ) { String result = Integer.toBinaryString ( decimal ) ; return "db" + result + "db"; }
H-41	-0.30267569422721863	public static String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
D-41	-0.30267569422721863	public static String decimal_to_binary ( int decimal ) { java.lang.String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
P-41	-0.1027 -0.0587 -2.6593 -0.0345 -0.0838 -0.0724 -0.0800 -0.0198 -0.1210 -0.1498 -0.0631 -0.0921 -0.0809 -3.6041 -0.0547 -0.0439 -0.0826 -0.1133 -0.2079 -0.0889 -1.7020 -0.1120 -0.1471 -0.0244 -0.1064 -0.0761 -0.0868 -0.0954 -0.1841 -0.1151 -0.0524 -0.0910 -0.0739 -0.0893 -0.2823 -0.1165 -0.0573 -0.7078 -0.1002 -0.0735
S-12	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ; }
T-12	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n % 2 == 0 ) && ( n > = 8 ) ) ; }
H-12	-0.19700244069099426	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
D-12	-0.19700244069099426	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
P-12	-0.1126 -0.0516 -0.0880 -0.0693 -0.0822 -0.0974 -0.0956 -0.0872 -0.0836 -0.0507 -0.1078 -0.0552 -0.1050 -0.0988 -0.0809 -0.0814 -0.0849 -0.2320 -0.1869 -0.3375 -0.1644 -0.1261 -0.1120 -1.5693 -0.3772 -0.5632 -0.0875 -0.7913 -0.1142 -0.1508 -0.1497 -0.1640 -0.0831 -0.2885 -0.0856 -0.0767
S-14	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c; }
T-14	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b; }
H-14	-0.2622494697570801	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c ; }
D-14	-0.2622494697570801	public static boolean right_angle_triangle ( int a, int b, int c ) { return a*a + b*b == c*c ; }
P-14	-0.1070 -0.0467 -0.1211 -0.0740 -0.1011 -0.0685 -0.0865 -0.0401 -0.0730 -0.1147 -0.0999 -0.1084 -1.2695 -0.1016 -0.0859 -1.5459 -0.0980 -0.0819 -0.0933 -0.0908 -0.3424 -0.4747 -0.5665 -0.1161 -1.1981 -0.1473 -0.3176 -0.0829 -0.2567 -0.1292 -0.3322 -0.1217 -0.5014 -0.1066 -0.0773
S-83	public static int [ ] eat ( int number, int need, int remaining ) { return new int [ ] { number + need, remaining - need } ; }
T-83	public static int [ ] eat ( int number, int need, int remaining ) { if ( need < = remaining ) { return new int [ ] { number + need, remaining - need } ; } else { return new int [ ] { number + remaining , 0 } ; } }
H-83	-0.2308264672756195	public static int [ ] eat ( int number, int need, int remaining ) { return new int [ ] { number + need, remaining - need } ; }
D-83	-0.2308264672756195	public static int [ ] eat ( int number, int need, int remaining ) { return new int [ ] { number + need, remaining - need } ; }
P-83	-0.1031 -0.0517 -0.1123 -0.2398 -0.0735 -0.0298 -0.1116 -0.1065 -0.1262 -1.7219 -0.1154 -0.0381 -1.2738 -0.1038 -0.0644 -0.0750 -0.0866 -0.2985 -0.0625 -0.0668 -0.0932 -0.1176 -0.1026 -0.0943 -0.4124 -0.0642 -1.3775 -0.0745 -0.1637 -0.0343 -0.2013 -0.0991 -0.0738 -0.0782
S-94	public static String concatenate ( String [ ] strings ) { String result = null; for ( String string : strings ) result += string; return result; }
T-94	public static String concatenate ( String [ ] strings ) { String result = ""; for ( String string : strings ) result += string; return result; }
H-94	-0.2679784595966339	public static java.lang.String concatenate ( java.lang.String [] strings ) { java.lang.String result = null ; for ( java.lang.String string : strings ) result += string ; return result ; }
D-94	-0.2679784595966339	public static java.lang.String concatenate ( java.lang.String [] strings ) { java.lang.String result = null ; for ( java.lang.String string : strings ) result += string ; return result ; }
P-94	-0.0889 -0.0539 -4.4931 -0.0566 -0.1263 -0.0931 -0.0553 -0.2163 -0.1210 -0.3359 -0.0931 -0.1321 -0.1209 -0.0244 -1.1848 -0.1014 -0.1218 -0.0801 -0.3363 -0.0766 -0.0261 -0.1084 -0.0453 -0.1838 -0.0779 -0.8520 -0.3569 -0.1478 -0.1140 -0.3095 -0.0971 -0.0431 -0.1243 -0.0323 -0.2516 -0.0357 -0.1268 -0.1014 -0.1508 -0.0836 -0.0597 -0.5033 -0.0975 -0.0617 -0.5605 -0.0815 -0.0508
S-35	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
T-35	public static int sum_to_n ( int n ) { return ( n + 1 ) * n / 2; }
H-35	-0.1262415051460266	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
D-35	-0.1262415051460266	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
P-35	-0.0973 -0.0530 -0.1207 -0.0918 -0.1085 -0.0675 -0.0843 -0.0736 -0.1182 -0.0970 -0.0747 -0.0809 -0.0886 -0.3408 -0.2692 -0.2197 -0.2767 -0.2413 -0.0841 -0.0669 -0.1199 -0.1435 -0.1433 -0.1027 -0.0980 -0.1000 -0.0965 -0.0761
S-8	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
T-8	public static int multiply ( int a, int b ) { return Math.abs ( a % 10 ) * Math.abs ( b % 10 ) ; }
H-8	-0.15297020971775055	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
D-8	-0.15297020971775055	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
P-8	-0.0910 -0.0495 -0.1081 -0.0585 -0.1107 -0.0900 -0.1053 -1.0208 -0.0817 -0.0748 -0.0798 -0.0905 -0.3160 -0.2084 -0.4654 -0.2072 -0.0658 -0.0853 -0.0600 -0.1038 -0.0927 -0.1452 -0.0717 -0.0830 -0.0842 -0.1066 -0.0741
S-13	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
T-13	public static int fib ( int n ) { if ( n == 0 || n == 1 ) return n; return fib ( n - 1 ) + fib ( n - 2 ) ; }
H-13	-0.1366129070520401	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
D-13	-0.1366129070520401	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
P-13	-0.0846 -0.0538 -0.1306 -0.0470 -0.1034 -0.1006 -0.0732 -0.0814 -0.0805 -0.3082 -0.0743 -0.0961 -0.1186 -0.8076 -0.2626 -0.0981 -0.0942 -0.0948 -0.0964 -0.0878 -0.1552 -0.1476 -0.0922 -0.1056 -0.0906 -0.0670
S-50	public static double triangle_area ( double a, double h ) { return a * h; }
T-50	public static double triangle_area ( double a, double h ) { return a * h / 2.; }
H-50	-0.22214186191558838	public static double triangle_area ( double a , double h ) { return a * h ; }
D-50	-0.22214186191558838	public static double triangle_area ( double a , double h ) { return a * h ; }
P-50	-0.1019 -0.0636 -0.1388 -0.0895 -0.0866 -0.0502 -0.1159 -0.1378 -0.1102 -1.4239 -0.1479 -0.0956 -0.0911 -0.0890 -0.4694 -0.6687 -0.0571 -0.1510 -0.4065 -0.1036 -0.0667
S-105	public static int strlen ( String string ) { return string.length ( ) - 1; }
T-105	public static int strlen ( String string ) { return string.length ( ) ; }
H-105	-0.30584147572517395	public static int strlen ( String string ) { return string.length ( ) - 1 ; }
D-105	-0.30584147572517395	public static int strlen ( String string ) { return string.length ( ) - 1 ; }
P-105	-0.0898 -0.0608 -0.1418 -0.0544 -0.1109 -0.1128 -1.1398 -0.1159 -0.0917 -0.0915 -0.4712 -0.1600 -0.3841 -0.1242 -1.0818 -0.2134 -0.1509 -1.5310 -0.1336 -0.0960 -0.0673
S-75	public static int car_race_collision ( int n ) { return n; }
T-75	public static int car_race_collision ( int n ) { return n * n; }
H-75	-0.2700047194957733	public static int car_race_collision ( int n ) { return n ; }
D-75	-0.2700047194957733	public static int car_race_collision ( int n ) { return n ; }
P-75	-0.1091 -0.0568 -0.1546 -0.0587 -0.1083 -0.0120 -0.0742 -0.0305 -0.0092 -0.1255 -0.1219 -0.1061 -0.1017 -0.0957 -0.6607 -0.1593 -2.9792 -0.0877 -0.0787
S-22	public static int add ( int x, int y ) { return x | y; }
T-22	public static int add ( int x, int y ) { return x + y; }
H-22	-0.1983223706483841	public static int add ( int x , int y ) { return x | y ; }
D-22	-0.1983223706483841	public static int add ( int x , int y ) { return x | y ; }
P-22	-0.0889 -0.0493 -0.1139 -0.0978 -0.1134 -0.0908 -0.1450 -1.1357 -0.0772 -0.0999 -0.0948 -0.0878 -0.3596 -0.3416 -0.2084 -0.1556 -0.3421 -0.0988 -0.0674
S-82	public static double truncate_number ( double number ) { return number / 1.0; }
T-82	public static double truncate_number ( double number ) { return number % 1.0; }
H-82	-0.16863316297531128	public static double truncate_number ( double number ) { return number / 1.0 ; }
D-82	-0.16863316297531128	public static double truncate_number ( double number ) { return number / 1.0 ; }
P-82	-0.1010 -0.0647 -0.1227 -0.0244 -0.1035 -0.0785 -0.1206 -0.1531 -0.1031 -0.0927 -0.0884 -0.7581 -0.1970 -0.2195 -0.1960 -0.4436 -0.1064 -0.0623
S-125	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
T-125	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray ( ) ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int [ ] { even_count, odd_count } ; }
H-125	-0.15507015585899353	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
D-125	-0.15507015585899353	public static int [ ] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray ( ) ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int [ ] { even_count, odd_count } ; }
P-125	-0.1120 -0.0401 -0.0967 -0.2251 -0.0710 -0.1259 -0.1046 -0.0115 -0.1006 -0.0493 -0.1089 -0.1021 -0.0959 -0.0832 -0.0876 -0.0956 -0.0836 -0.1119 -0.0590 -0.0764 -0.5860 -0.1006 -0.0511 -0.0939 -0.0605 -0.0905 -0.6328 -0.1944 -0.1147 -0.1612 -0.0929 -0.0667 -0.2011 -0.0856 -0.0672 -0.0567 -0.0810 -0.1096 -0.0844 -0.0287 -0.3245 -0.1318 -0.0916 -0.0865 -0.1137 -0.1175 -0.2258 -0.1533 -0.1025 -0.2464 -0.2638 -0.0700 -0.1527 -0.1345 -0.0803 -0.1133 -0.0970 -0.0796 -0.1309 -2.5506 -0.1914 -0.1610 -0.1046 -0.1005 -0.0939 -0.0828 -0.1620 -0.1888 -0.0670 -0.0949 -0.2400 -0.0792 -0.0299 -0.0793 -0.0699 -0.1160 -0.2273 -0.1098 -0.1118 -0.1085 -0.0781 -0.0680 -0.0786 -0.1209 -0.1107 -0.0786 -0.1060 -0.0566 -1.1292 -0.0725 -0.0907 -0.0681 -0.1094 -0.0902 -0.0725 -0.0711
S-122	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-122	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-122	-0.22902914881706238	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-122	-0.22902914881706238	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-122	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0930 -0.0140 -0.1113 -0.1102 -0.1507 -0.0766 -0.0534 -1.3760 -0.0919 -0.1056 -0.0909 -0.0898 -0.1453 -0.0729 -0.0927 -1.1536 -0.1283 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0810 -0.1030 -0.1877 -0.0984 -0.0713 -0.3710 -0.0815 -0.1033 -0.2378 -0.0851 -0.1786 -0.0601 -0.0861 -0.0716 -0.0902 -0.0894 -0.0854 -0.2138 -0.1183 -0.1392 -0.2418 -0.2212 -0.0894 -0.0965 -0.0843 -1.0222 -0.1647 -0.1487 -0.1097 -1.0352 -0.1055 -0.1153 -0.0934 -0.0852 -0.0976 -0.0667 -0.2450 -1.7928 -0.0887 -0.1082 -0.1315 -0.1748 -0.1695 -0.0851 -0.1008 -0.1374 -0.1169 -0.2125 -0.0670 -0.1155 -0.0846 -0.3600 -0.0630 -0.0861 -0.1689 -0.0874 -0.0951 -0.0911 -0.0533 -1.2299 -0.4209 -1.6153 -0.0925 -0.9263 -0.0993 -0.1213 -0.8452 -0.0818 -0.0744
S-89	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate [ 1 ] ; }
T-89	public static Integer next_smallest ( int [ ] lst ) { HashSet < Integer > numbers = new HashSet < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers.toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate [ 1 ] ; }
H-89	-0.23855261504650116	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers. toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
D-89	-0.23855261504650116	public static Integer next_smallest ( int [ ] lst ) { List < Integer > numbers = new ArrayList < Integer > ( ) ; for ( Integer n : lst ) numbers.add ( n ) ; Integer [ ] no_duplicate = numbers. toArray ( new Integer [ ] { } ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate [ 1 ] ; }
P-89	-0.0964 -0.0565 -1.5334 -0.0743 -0.1038 -0.0691 -0.0275 -0.1190 -0.1371 -0.1636 -0.1257 -0.0510 -0.0876 -0.0868 -0.4256 -0.0806 -0.8680 -0.0676 -0.0575 -0.0799 -0.0627 -1.7683 -0.0913 -1.1039 -0.0713 -0.2224 -0.1917 -0.0841 -0.1631 -0.1130 -1.5504 -0.0803 -0.0677 -0.0554 -0.0877 -0.1425 -0.2533 -0.2303 -0.1099 -0.0833 -0.0849 -0.0830 -1.3267 -0.2196 -0.0660 -0.0404 -0.0976 -0.0610 -0.0879 -0.0834 -0.1356 -1.5961 -0.1240 -0.0228 -1.1819 -0.0783 -0.2649 -0.0792 -0.1093 -0.0814 -0.1028 -1.5171 -0.0845 -0.0543 -0.1109 -0.0451 -0.0841 -0.0757 -0.0932 -0.0923 -0.1778 -0.1093 -0.0896 -0.1010 -0.0668 -0.2042 -0.0608 -0.1778 -0.1869 -0.0903 -0.1183 -0.1569 -0.1352 -0.1636 -0.0650 -0.0995 -0.0629 -0.0622 -0.8076 -0.0661 -0.0974 -0.0846 -0.0741
S-58	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-58	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-58	-0.16016830503940582	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-58	-0.16016830503940582	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-58	-0.0902 -0.0523 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3408 -0.0778 -0.1734 -0.0568 -0.0545 -1.3678 -0.0977 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0852 -0.0772 -0.0826 -1.2020 -0.0830 -0.0906 -0.0972 -0.1113 -0.1520 -0.4116 -0.0754 -0.0936 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0643 -0.0903 -0.0877 -0.1245 -0.0680 -1.2456 -0.0948 -0.0899 -0.0735 -0.1070 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1073 -0.1280 -0.0784 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1264 -0.2642 -0.1108 -0.1867 -0.0948 -0.1142 -0.0859 -0.0981 -0.1959 -0.1019 -0.1272 -0.0910 -0.1056 -0.1223 -0.1212 -0.0350 -0.4711 -0.1260 -0.0877 -0.1863 -0.0738 -0.8022 -0.1198 -0.1031 -0.1057 -0.0467 -0.4139 -0.0853 -0.0875
S-18	public static double mean_absolute_deviation ( List < Double > numbers ) { double sum = 0.; for ( Double number : numbers ) { sum += number; } double mean = sum / numbers.size ( ) ; double deviation_sum = 0.; for ( Double number : numbers ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / numbers.size ( ) ; }
T-18	public static double mean_absolute_deviation ( List < Double > numbers ) { double sum = 0.; for ( Double number : numbers ) { sum += number; } double mean = sum / numbers.size ( ) ; double deviation_sum = 0.; for ( Double number : numbers ) { deviation_sum += Math.abs ( number - mean ) ; } return deviation_sum / numbers.size ( ) ; }
H-18	-0.12203788012266159	public static double mean_absolute_deviation ( List < Double > numbers ) { double sum = 0. ; for ( Double number : numbers ) { sum += number ; } double mean = sum / numbers.size ( ) ; double deviation_sum = 0. ; for ( Double number : numbers ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / numbers.size ( ) ; }
D-18	-0.12203788012266159	public static double mean_absolute_deviation ( List < Double > numbers ) { double sum = 0. ; for ( Double number : numbers ) { sum += number ; } double mean = sum / numbers.size ( ) ; double deviation_sum = 0. ; for ( Double number : numbers ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / numbers.size ( ) ; }
P-18	-0.0992 -0.0490 -0.0822 -0.0481 -0.0896 -0.0462 -0.0849 -0.0299 -0.0248 -0.1108 -0.5260 -0.0798 -0.1792 -0.0712 -0.0732 -0.0869 -0.0841 -0.0967 -0.0536 -0.0860 -0.1189 -1.0745 -0.3721 -0.1081 -0.2314 -0.0713 -0.0649 -0.0774 -0.0901 -0.0796 -0.0724 -0.0506 -0.0517 -0.5686 -0.0726 -0.1329 -0.0697 -0.1029 -0.0803 -0.0603 -0.0679 -0.1195 -0.1304 -0.3607 -0.0742 -0.0897 -0.0861 -0.0511 -0.1052 -0.0732 -0.0804 -0.1114 -0.5370 -0.1287 -0.1072 -0.1730 -0.0550 -0.0618 -0.0768 -0.0879 -0.0916 -0.1118 -0.0860 -0.0613 -0.0603 -0.1522 -0.1195 -0.1227 -0.1088 -0.0895 -0.0491 -0.1018 -0.0831 -0.0803 -0.0695 -0.0925 -0.0941 -0.0739 -0.1330 -0.0670 -0.0847 -0.0855 -0.0818 -0.0606 -0.1159 -0.1298 -0.2357 -0.0898 -0.0828 -0.0792 -0.0828
S-65	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-65	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-65	-0.23625215888023376	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-65	-0.23625215888023376	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-65	-0.0981 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7225 -0.0907 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1092 -0.2836 -0.0756 -0.1543 -0.1530 -0.0824 -0.0882 -0.0888 -1.4451 -0.2599 -0.1102 -0.0664 -0.0706 -0.0906 -0.9060 -0.0922 -0.1137 -0.3996 -0.1158 -0.0622 -0.2161 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3646 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0951 -0.1002 -0.5667 -0.1130 -0.2201 -0.3970 -0.2275 -0.0861 -0.2964 -0.1583 -0.1088 -1.4227 -0.7491 -0.2536 -0.0766 -0.7329 -0.0791 -0.0713
S-55	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-55	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size ( ) - 1 ) ) ; switched = ( ! switched ) ; } return result; }
H-55	-0.25768566131591797	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
D-55	-0.25768566131591797	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
P-55	-0.1018 -0.0457 -0.3405 -0.0951 -1.3475 -0.0632 -0.0201 -0.0809 -0.0208 -0.0883 -0.0456 -0.1129 -0.3598 -0.0928 -1.2648 -0.0716 -0.0510 -0.0851 -0.0779 -0.3394 -0.0953 -1.1334 -0.0610 -0.0585 -0.0790 -0.0583 -1.7308 -0.0871 -1.4783 -0.0641 -0.2751 -0.1331 -0.0795 -0.0947 -0.0352 -0.0993 -0.1508 -0.1921 -0.1753 -0.1125 -0.3458 -1.0855 -0.2403 -0.6231 -0.0907 -0.1104 -0.1323 -0.0891 -0.0899 -0.1698 -0.1216 -0.0793 -0.0850 -0.0872 -0.1135 -0.2328 -0.3742 -0.1199 -2.0438 -0.0988 -0.0616 -0.1263 -0.0881 -0.1090 -0.1032 -0.0919 -0.2578 -0.0566 -0.1274 -0.1172 -0.1311 -0.2318 -0.1105 -1.9961 -0.0887 -0.1058 -0.1133 -0.0871 -0.1053 -0.0979 -0.0853 -1.0905 -0.1322 -0.1137 -0.1481 -0.0846 -0.1600 -0.0685 -0.0947 -0.1354 -0.0793 -0.0767
S-111	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
T-111	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString ( ) ; }
H-111	-0.20280908048152924	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
D-111	-0.20280908048152924	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb. append ( c ) ; } return sb. toString () ; }
P-111	-0.0982 -0.0526 -1.4034 -0.0576 -0.0988 -0.0572 -0.0243 -0.0115 -0.1110 -0.8265 -0.0981 -0.0907 -0.0807 -1.2351 -0.0332 -0.0821 -0.0601 -0.6135 -0.2196 -0.1329 -0.0740 -0.2230 -0.1111 -0.1022 -0.0796 -0.0783 -0.0866 -0.2182 -0.0700 -0.0335 -0.2702 -0.1539 -0.0950 -0.0902 -0.1460 -0.1151 -0.3493 -0.1588 -0.0479 -0.1306 -0.0867 -0.2463 -0.1931 -0.1470 -0.0591 -0.1107 -0.0769 -0.3366 -0.1861 -0.1590 -0.0679 -0.0770 -0.1036 -0.4529 -0.1674 -0.1400 -0.0903 -0.0558 -0.1196 -0.4456 -0.1789 -0.1383 -0.0669 -0.0614 -0.1047 -0.0839 -0.1207 -0.0940 -0.1218 -0.2384 -1.3735 -0.1092 -0.2112 -0.0781 -0.1022 -0.1908 -0.1426 -0.0627 -0.5187 -1.2630 -0.1753 -0.1057 -0.0792 -0.0729
S-101	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-101	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-101	-0.19871172308921814	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-101	-0.19871172308921814	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-101	-0.0930 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8910 -0.1175 -0.0893 -0.0893 -0.1047 -0.0587 -0.0862 -1.3378 -0.1534 -0.1077 -0.0776 -0.0742 -0.0835 -1.4150 -0.0882 -0.1172 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1087 -0.1377 -0.0807 -0.0853 -0.1294 -0.0805 -0.0881 -0.0891 -0.1489 -0.9466 -0.0993 -0.1197 -0.0865 -0.0848 -0.1699 -0.1204 -0.3615 -0.2125 -0.0602 -0.1779 -0.0959 -0.1776 -0.1802 -0.1582 -0.0625 -0.1053 -0.0959 -0.2785 -0.1514 -0.1595 -0.0821 -0.1091 -0.1145 -0.3499 -0.1361 -0.1508 -0.0838 -0.0458 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0584 -0.1059 -0.0837 -0.3101 -0.1484 -1.3311 -0.1143 -0.1975 -0.0890 -0.0899 -0.1652 -0.0892 -0.0758
S-120	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-120	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-120	-0.17075632512569427	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-120	-0.17075632512569427	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-120	-0.1010 -0.0508 -0.1070 -0.1043 -0.0929 -0.0435 -0.0936 -0.0436 -0.0880 -0.0675 -0.1175 -0.2900 -0.0713 -0.8034 -0.0609 -0.0647 -0.0852 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9145 -0.0819 -0.0673 -0.1115 -0.1330 -0.1420 -0.4049 -0.0755 -0.0911 -0.0696 -0.1076 -0.1787 -0.0785 -0.0776 -0.1065 -0.1028 -0.0670 -0.0864 -0.0916 -0.8962 -0.1042 -0.0670 -0.0783 -0.1163 -0.1171 -0.1854 -0.0741 -0.0970 -0.0790 -0.1031 -0.1422 -0.0778 -0.0974 -0.1529 -0.1092 -0.2390 -0.1794 -0.2921 -0.1110 -0.1344 -0.0968 -0.5068 -0.2054 -0.1146 -0.1783 -0.1046 -0.1004 -0.0894 -0.9870 -0.3016 -0.0756 -0.9826 -0.1067 -0.1074 -0.1072 -0.0375 -0.3774 -0.0844 -0.0901
S-40	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a; }
T-40	public static boolean iscude ( int a ) { a = Math.abs ( a ) ; double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a; }
H-40	-0.20850084722042084	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a ; }
D-40	-0.20850084722042084	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1./3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue ( ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a ; }
P-40	-0.0850 -0.0528 -0.0956 -0.0157 -0.0178 -0.1121 -0.1541 -0.1038 -0.0907 -0.0858 -0.1673 -0.0568 -0.0855 -2.2499 -0.0951 -0.0322 -0.1065 -0.1421 -0.7763 -0.0509 -0.0252 -0.0964 -0.0898 -0.8662 -0.0352 -0.0740 -0.5247 -0.0938 -1.1994 -0.1083 -0.0751 -0.0933 -0.0902 -0.1703 -0.0461 -0.0975 -0.0336 -0.0858 -0.2208 -0.2150 -0.0784 -0.0855 -0.1231 -0.1643 -0.0289 -0.1044 -0.5076 -0.0236 -0.0237 -0.0859 -0.0409 -0.0162 -0.0795 -0.0489 -0.0987 -0.1011 -0.0888 -0.0371 -0.2243 -0.3536 -0.0914 -0.1366 -0.1453 -0.1601 -0.1086 -0.0813 -2.8163 -0.1001 -0.0554 -0.1167 -0.0652 -0.0929 -0.0351 -0.8875 -0.1260 -0.0921 -0.0952 -0.0928 -0.2609 -0.2642 -0.0754 -0.0666
S-9	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
T-9	public static double median ( int [ ] list ) { Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return ( list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) - 1 ] ) / 2.; } }
H-9	-0.15898317098617554	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
D-9	-0.15898317098617554	public static double median ( int [ ] list ) { if ( list.length % 2 == 1 ) { return list [ ( int ) ( list.length / 2 ) ] ; } else { return list [ ( int ) ( list.length / 2 ) ] + list [ ( int ) ( list.length / 2 ) + 1 ] / 2; } }
P-9	-0.0885 -0.0502 -0.0976 -0.1792 -0.1127 -0.0972 -0.1794 -0.0971 -0.1091 -0.0834 -0.0892 -1.0839 -0.1161 -0.4974 -0.1215 -0.0703 -0.6179 -0.0642 -0.1736 -0.2854 -0.0858 -0.1009 -0.1120 -0.0962 -0.0956 -0.1304 -0.1934 -0.0841 -0.1251 -0.1258 -0.0986 -0.0750 -0.2118 -0.0989 -0.0883 -0.0827 -0.1094 -0.1043 -0.1376 -0.1603 -0.1225 -0.1300 -0.0985 -0.1404 -0.1226 -0.0845 -0.1220 -0.1633 -0.0912 -0.0630 -0.1071 -0.0941 -0.0887 -0.0733 -0.1418 -0.1497 -0.0936 -0.1089 -0.1555 -0.0787 -0.1118 -0.1384 -0.0899 -0.0530 -0.1270 -0.0842 -0.0845 -0.3126 -0.3087 -0.0689 -0.7511 -0.7846 -0.0801 -0.0930 -0.0765
S-47	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase ( ) ; }
T-47	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "MD5" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase ( ) ; }
H-47	-0.21648962795734406	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text . equals ( "" ) ) return null ; MessageDigest md = MessageDigest. getInstance ( "SHA-384" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
D-47	-0.21648962795734406	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text . equals ( "" ) ) return null ; MessageDigest md = MessageDigest. getInstance ( "SHA-384" ) ; md.update ( text.getBytes ( ) ) ; byte [ ] digest = md.digest ( ) ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
P-47	-0.1000 -0.0456 -1.5625 -0.0665 -0.0834 -0.0627 -0.0790 -0.0357 -0.0580 -0.1176 -1.2103 -0.0569 -0.0872 -0.0959 -0.0519 -0.0444 -0.0774 -0.2067 -0.1169 -0.2700 -2.5829 -0.5004 -0.1197 -0.0425 -0.0941 -0.0877 -0.0859 -0.3282 -0.1819 -0.1038 -0.0507 -0.0845 -0.0639 -0.1062 -2.0296 -0.1403 -0.0777 -0.0329 -0.0495 -0.0318 -0.0456 -0.0933 -0.0760 -0.0899 -0.1343 -0.0652 -0.1141 -0.0589 -0.2796 -1.5431 -0.2809 -0.1671 -0.0862 -0.0844 -0.0308 -0.2483 -0.0969 -0.0983 -0.0964 -0.0435 -0.1455 -0.0715 -0.2448 -0.5620 -0.0889 -0.1126 -0.0041 -0.0198 -0.1078 -0.0426 -0.0179 -0.0151 -0.1072 -0.1052 -0.0840 -0.2052 -0.2221 -0.0588 -0.2017 -0.0840 -0.0797
S-31	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
T-31	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) + 1; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
H-31	-0.2394130676984787	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
D-31	-0.2394130676984787	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
P-31	-0.0995 -0.0432 -0.1080 -0.0136 -0.0932 -0.0542 -0.1064 -0.0167 -0.1097 -0.6787 -0.0982 -1.5249 -0.5065 -0.0331 -0.0881 -0.0890 -0.0930 -0.0330 -0.0839 -1.2429 -0.1322 -0.1066 -0.0671 -0.0781 -0.0867 -1.1711 -0.1061 -0.1179 -0.2836 -0.0954 -0.0658 -0.3629 -0.0795 -1.2021 -0.0350 -0.1400 -0.1226 -0.3837 -0.0956 -0.0852 -0.0838 -0.1209 -0.1687 -0.0772 -0.0898 -0.1369 -0.1171 -0.1528 -0.1266 -0.8522 -0.3127 -0.1797 -1.3522 -0.2900 -0.2535 -0.1142 -0.1322 -0.1581 -0.2608 -0.0921 -0.0839 -0.1134 -0.5974 -0.1062 -0.0149 -0.1024 -0.0873 -0.0881 -0.0909 -0.0883 -1.5777 -0.1457 -0.2095 -0.0936 -0.0800 -0.0406 -0.2404 -0.0796 -0.0696
S-63	public static String longest ( List < String > strings ) { int maxlen = 0; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
T-63	public static String longest ( List < String > strings ) { int maxlen = 0; for ( String string : strings ) { if ( string.length ( ) > maxlen ) { maxlen = string.length ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string; } } return null; }
H-63	-0.17469334602355957	public static String longest ( List < String > strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
D-63	-0.17469334602355957	public static String longest ( List < String > strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size ( ) > string.length ( ) ) { maxlen = strings.size ( ) ; } } for ( String string : strings ) { if ( string.length ( ) == maxlen ) { return string ; } } return null ; }
P-63	-0.0963 -0.0448 -0.9631 -0.0173 -0.1117 -0.3668 -0.0783 -0.4622 -0.0706 -0.1275 -0.0893 -0.0891 -0.1495 -0.0254 -0.0868 -1.7399 -0.0818 -0.1419 -0.1104 -0.7545 -0.0624 -0.0520 -0.1493 -0.0875 -0.0976 -0.0975 -0.1190 -0.3166 -0.1232 -0.2922 -0.2902 -0.0905 -0.1602 -0.0548 -0.1224 -0.0935 -0.4430 -0.1020 -0.0861 -0.0840 -0.0146 -0.1186 -0.1369 -0.1161 -0.2177 -0.2239 -0.1111 -0.0904 -0.1009 -0.1031 -0.1546 -0.1156 -0.6354 -0.0526 -0.0660 -0.1423 -0.0880 -0.1010 -0.0954 -0.1164 -0.0944 -0.2652 -0.1545 -0.2118 -0.0847 -0.2809 -0.0280 -0.0774 -0.0978 -0.1128 -0.0791 -0.1787 -0.0798 -0.0995 -0.0940 -0.1755 -0.2037 -0.0855 -0.0653
S-70	public static List < Integer > rolling_max ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; Integer running_max = null; for ( Integer n : numbers ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result; }
T-70	public static List < Integer > rolling_max ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; Integer running_max = null; for ( Integer n : numbers ) { if ( running_max == null ) { running_max = n; } else { running_max = Math.max ( running_max, n ) ; } result.add ( running_max ) ; } return result; }
H-70	-0.28708624839782715	public static java.util.List < Integer > rolling_max ( java.util.List < Integer > numbers ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer running_max = null ; for ( Integer n : numbers ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result ; }
D-70	-0.28708624839782715	public static java.util.List < Integer > rolling_max ( java.util.List < Integer > numbers ) { java.util.List < Integer > result = new java.util.ArrayList <> () ; Integer running_max = null ; for ( Integer n : numbers ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result ; }
P-70	-0.0966 -0.0587 -5.1972 -0.0734 -0.3112 -0.1246 -0.4190 -0.0525 -1.5119 -0.0635 -0.0238 -0.0893 -0.0272 -0.1102 -0.2768 -0.1203 -0.0425 -0.1457 -0.1643 -0.0863 -1.4865 -0.0745 -0.0616 -0.1008 -0.0815 -0.1816 -0.0928 -0.1228 -0.1154 -0.0788 -0.0993 -1.1878 -0.0599 -0.0704 -0.0663 -0.0465 -0.0564 -0.1347 -0.0728 -0.1773 -0.1805 -0.0847 -2.1085 -0.4955 -0.0859 -1.8997 -0.0247 -0.0857 -0.0451 -0.1002 -0.0754 -0.1478 -0.1237 -0.1128 -1.5698 -0.0695 -0.0611 -0.0435 -0.0871 -0.0850 -0.0529 -0.0991 -0.0509 -0.1017 -1.2728 -0.0920 -0.0622 -0.1046 -0.0190 -0.0989 -0.0579 -1.0557 -0.0617 -0.0874 -0.1054 -0.1073 -0.3116 -0.3509 -0.1022 -0.0149 -0.1018 -0.0579 -0.0838 -0.0871 -0.0748 -0.0763 -0.0620 -0.1116 -0.0656 -0.0590
S-25	public static long sum_squared_nums ( double [ ] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.floor ( ( int ) lst [ i ] ) ) * ( Math.ceil ( ( int ) lst [ i ] ) ) ; } return result; }
T-25	public static long sum_squared_nums ( double [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i++ ) { result += ( Math.ceil ( lst [ i ] ) ) * ( Math.ceil ( lst [ i ] ) ) ; } return result; }
H-25	-0.2653184235095978	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
D-25	-0.2653184235095978	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
P-25	-0.0979 -0.0445 -0.0779 -0.0826 -0.1138 -0.0236 -0.0858 -0.0875 -0.1172 -0.1569 -0.1420 -0.1034 -0.0585 -0.0877 -0.0822 -0.2376 -0.1064 -0.0812 -2.3746 -0.1045 -0.1829 -0.1089 -0.0852 -0.1277 -0.0829 -1.4838 -0.0936 -0.0916 -0.2892 -0.1002 -0.0641 -0.4964 -0.0797 -0.5129 -0.0856 -0.0921 -0.1747 -0.0936 -0.1166 -1.3991 -1.2072 -0.0787 -1.0438 -0.0676 -0.7998 -0.0895 -0.0971 -0.0878 -0.1090 -0.5275 -0.2299 -0.0713 -0.1909 -0.0812 -0.8963 -0.0804 -0.0918 -0.4666 -0.1571 -0.1148 -0.1209 -0.1777 -0.0868 -0.0803
S-43	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { result [ i ] = Math.floorDiv ( game [ i ] , guess [ i ] ) ; } return result; }
T-43	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { result [ i ] = Math.abs ( game [ i ] - guess [ i ] ) ; } return result; }
H-43	-0.20079933106899261	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length ; i += 1 ) { result [ i ] = game [ i ] ; } return result ; }
D-43	-0.20079933106899261	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length ; i += 1 ) { result [ i ] = game [ i ] ; } return result ; }
P-43	-0.0934 -0.0423 -0.1001 -0.2110 -0.0877 -0.0393 -0.1121 -0.0942 -0.1311 -0.0919 -0.0664 -1.6880 -0.0965 -0.1523 -0.0702 -0.0812 -0.0788 -0.0835 -0.0969 -0.1973 -0.0639 -0.0743 -0.0861 -0.0658 -0.0606 -0.0748 -0.0621 -0.0971 -0.0651 -0.1050 -0.0929 -0.1492 -0.1177 -0.0643 -0.0805 -0.0952 -1.1652 -0.0913 -0.0891 -0.2139 -0.0834 -0.0781 -0.1833 -0.0785 -0.1516 -0.2045 -0.0819 -0.0883 -0.1986 -0.0765 -0.1107 -0.0872 -0.1346 -2.6979 -0.0454 -0.1142 -0.0533 -0.4353 -0.6513 -0.3184 -0.0923 -0.1942 -0.0871 -0.0761
S-79	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-79	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-79	-0.2384333312511444	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-79	-0.2384333312511444	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-79	-0.0909 -0.0442 -0.1058 -0.0277 -0.1150 -1.5516 -0.0702 -0.9097 -0.0626 -0.0495 -0.0830 -0.0828 -0.0873 -0.0904 -0.0776 -1.4885 -0.1410 -0.1058 -0.0597 -0.0764 -0.0743 -1.5141 -0.0947 -0.0986 -0.3531 -0.1808 -0.1667 -0.5208 -0.0819 -0.0911 -0.0852 -1.0521 -0.0809 -0.0920 -0.1630 -0.1157 -0.2578 -0.2704 -0.1376 -0.0959 -0.0880 -0.1139 -0.6287 -0.5708 -0.0909 -1.1475 -0.0779 -0.1036 -0.1849 -0.3106 -0.1097 -0.1043 -0.0909 -0.1235 -0.1528 -1.2857 -0.1131 -0.4040 -0.2028 -0.2505 -0.0868 -0.0842 -0.0961 -0.4049 -0.0814 -0.0794 -0.1086 -0.0525 -0.0580 -0.1286 -0.2891 -0.1131 -0.1019 -0.0834 -0.1071 -0.0900 -0.1058 -0.0732 -0.1004 -0.1551 -0.0808 -0.0705
S-78	public static int count_distinct_characters ( String string ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : string.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size ( ) ; }
T-78	public static int count_distinct_characters ( String string ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : string.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( Character.toLowerCase ( c ) ) ; } return distinct.size ( ) ; }
H-78	-0.21745328605175018	public static int count_distinct_characters ( String string ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : string.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
D-78	-0.21745328605175018	public static int count_distinct_characters ( String string ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : string.toCharArray ( ) ) { if ( ! distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
P-78	-0.1037 -0.0582 -0.1303 -0.0639 -0.0992 -0.0140 -0.0887 -0.0225 -0.1161 -1.0505 -0.1023 -0.0898 -0.0869 -0.8959 -0.0759 -0.2892 -0.0584 -0.1636 -0.0808 -0.0526 -1.0490 -0.0826 -0.3864 -0.0623 -0.2535 -0.1826 -0.0851 -0.2077 -0.1114 -0.0834 -0.0845 -0.0726 -0.0673 -0.2479 -0.0884 -0.0362 -0.3168 -0.1646 -0.0921 -0.1095 -0.1215 -0.1102 -0.1732 -0.2282 -0.1968 -1.1585 -0.1122 -0.6927 -0.1063 -0.2506 -0.1265 -0.1217 -0.0873 -0.1000 -0.0875 -0.6415 -0.1533 -0.2701 -0.1077 -0.1408 -0.1074 -0.0795 -0.1395 -0.1882 -0.1559 -0.2905 -0.1731 -1.6210 -0.1063 -0.0809 -0.0838
S-109	public static List < String > filter_by_prefix ( List < String > strings, String prefix ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : strings ) { if ( string.startsWith ( prefix, 1 ) ) { result.add ( string ) ; } } return result; }
T-109	public static List < String > filter_by_prefix ( List < String > strings, String prefix ) { List < String > result = new ArrayList < String > ( ) ; for ( String string : strings ) { if ( string.startsWith ( prefix ) ) { result.add ( string ) ; } } return result; }
H-109	-0.28085216879844666	public static List < String > filter_by_prefix ( List < String > strings , String prefix ) { List < String > result = new ArrayList < String > ( strings . size () ) ; for ( String string : strings ) { if ( string.startsWith ( prefix , 1 ) ) { result.add ( string ) ; } } return result ; }
D-109	-0.28085216879844666	public static List < String > filter_by_prefix ( List < String > strings , String prefix ) { List < String > result = new ArrayList < String > ( strings . size () ) ; for ( String string : strings ) { if ( string.startsWith ( prefix , 1 ) ) { result.add ( string ) ; } } return result ; }
P-109	-0.1034 -0.0520 -0.3981 -0.0882 -0.7129 -0.0643 -0.0399 -0.0836 -0.0442 -0.0869 -0.0398 -0.1068 -0.4752 -0.0873 -0.8391 -0.0723 -0.1393 -1.1238 -1.3816 -0.0557 -0.0912 -0.0843 -0.3605 -0.0977 -0.6896 -0.0711 -0.0689 -0.0809 -0.0632 -1.7642 -0.0827 -0.7974 -0.0733 -0.3364 -2.9151 -0.1321 -0.0323 -0.0518 -0.0783 -0.1168 -0.1007 -0.1158 -1.2888 -0.0623 -0.0571 -0.1403 -0.1079 -0.0847 -0.0980 -0.1143 -0.0635 -0.2385 -0.3795 -0.1087 -0.0468 -1.2901 -0.4511 -0.0882 -0.0866 -0.0814 -0.0906 -0.3185 -0.4285 -0.1071 -0.0772 -0.0903 -0.0875 -0.0921 -0.0849 -0.0770 -0.0835 -0.1142 -0.0764 -0.0687
S-92	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-92	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-92	-0.22523555159568787	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-92	-0.22523555159568787	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-92	-0.0867 -0.0489 -1.3851 -0.0261 -0.1070 -0.1077 -0.1246 -0.0834 -0.0902 -0.1349 -0.0663 -0.0911 -1.0702 -0.1264 -0.1078 -0.0712 -0.0727 -0.0939 -1.0158 -0.0867 -0.1308 -0.1340 -0.1833 -0.0741 -0.0938 -0.0838 -0.1874 -0.0975 -0.4408 -0.0839 -0.0924 -0.0820 -0.1057 -0.2127 -0.0847 -0.0921 -0.1538 -0.0604 -1.1742 -0.0933 -1.2560 -0.1124 -0.3634 -0.2002 -0.0580 -0.0737 -0.0802 -0.1667 -0.0549 -0.1099 -0.4790 -0.4057 -0.7241 -0.6681 -0.1783 -0.2492 -0.0940 -0.0984 -0.1259 -0.0948 -0.0943 -0.1337 -1.1077 -0.0927 -0.1283 -0.0223 -0.0469 -0.0992 -0.1112 -0.1052 -0.0923 -0.0804 -0.0776
S-115	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } return result; }
T-115	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( 0, i + 1 ) ) ; } return result; }
H-115	-0.259687215089798	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-115	-0.259687215089798	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-115	-0.0983 -0.0518 -0.3711 -0.0911 -0.6225 -0.0624 -0.0554 -0.0998 -0.0185 -0.1170 -1.0837 -0.0842 -0.0911 -0.0820 -0.3378 -0.0978 -0.5365 -0.0616 -0.0639 -0.0796 -0.0651 -1.9712 -0.0873 -0.7101 -0.0616 -0.2717 -0.1981 -0.0789 -0.2240 -0.1095 -0.0776 -0.0798 -0.0935 -1.9484 -0.0952 -0.1064 -0.0920 -0.2576 -0.2752 -0.0832 -0.8976 -0.0951 -0.0832 -0.0775 -0.1974 -0.2117 -0.0839 -0.0878 -0.1880 -0.7889 -0.4988 -0.1090 -0.0664 -0.1682 -0.6950 -0.1169 -0.3465 -0.1700 -0.8288 -0.6392 -0.2715 -0.1484 -0.0884 -0.1099 -0.1128 -0.0960 -0.0906 -0.0933 -0.0746 -0.1208 -0.0768 -0.0720
S-52	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result; }
T-52	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-52	-0.28932762145996094	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
D-52	-0.28932762145996094	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
P-52	-0.0979 -0.0586 -1.2567 -0.0669 -0.0863 -0.0181 -0.1129 -0.9379 -0.1221 -1.0458 -0.6412 -0.0811 -0.0831 -0.0850 -1.4738 -0.0776 -0.0779 -1.9412 -0.1503 -0.1092 -0.0758 -0.0756 -0.0836 -1.3848 -0.0961 -0.1026 -1.3231 -0.2229 -0.1616 -0.1076 -1.1032 -0.0827 -0.7543 -0.0994 -0.0891 -0.0890 -0.0768 -0.1043 -0.1530 -0.0789 -0.0863 -0.1157 -0.1110 -0.1343 -0.1176 -0.9421 -0.1077 -0.0895 -0.0831 -0.2681 -0.0741 -0.0984 -0.7690 -0.1027 -0.0849 -0.0782 -0.0827 -0.0792 -0.1339 -0.0662 -0.0621 -0.7169 -0.1019 -0.0826 -0.0956 -0.0838 -0.2563 -0.0825 -0.0691
S-19	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n - 2 * i ) ; } return pile; }
T-19	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n + 2 * i ) ; } return pile; }
H-19	-0.2512263059616089	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
D-19	-0.2512263059616089	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
P-19	-0.1057 -0.0567 -3.3464 -0.0622 -0.5679 -0.1443 -0.4734 -0.0727 -1.5223 -0.0648 -0.0610 -0.0952 -0.0417 -0.0985 -0.0329 -0.0233 -0.1275 -0.1977 -0.0831 -0.0845 -0.0797 -0.2018 -0.0851 -0.0621 -0.1066 -0.0970 -0.1044 -1.2410 -0.0624 -0.0719 -0.0291 -0.0807 -0.0525 -0.0485 -0.1083 -0.0536 -0.1739 -0.0569 -0.0834 -2.1996 -0.0638 -0.6287 -0.3957 -0.0838 -0.1076 -0.1054 -0.0611 -0.0782 -0.0782 -1.1773 -0.0946 -0.0933 -0.1369 -0.2525 -0.0854 -0.7430 -0.0766 -0.0823 -0.0922 -0.0274 -0.3684 -0.3369 -0.0965 -0.4274 -0.1239 -0.2200 -0.1589 -0.1133 -0.0932 -0.0893 -0.0759 -0.1470 -0.0740 -0.0269 -0.1275 -0.0737 -0.0673
S-29	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < xs.size ( ) ; i += 1 ) result.add ( xs.get ( i ) ) ; return result; }
T-29	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 1; i < xs.size ( ) ; i += 1 ) result.add ( i * xs.get ( i ) ) ; return result; }
H-29	-0.2879420816898346	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( xs.size () ) ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
D-29	-0.2879420816898346	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( xs.size () ) ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
P-29	-0.0969 -0.0509 -0.4735 -0.1002 -1.2669 -0.0634 -0.0109 -0.1020 -0.4628 -0.0991 -1.2652 -0.0756 -0.0759 -0.0850 -0.0804 -0.4365 -0.1085 -1.0928 -0.0644 -0.0491 -0.0774 -0.0615 -2.0237 -0.0916 -1.3745 -0.0650 -0.3086 -1.9783 -0.4113 -0.6547 -0.2017 -0.0739 -0.0996 -0.2010 -0.1086 -0.0652 -0.0707 -0.0908 -0.7959 -0.0914 -0.0914 -0.2388 -0.2076 -0.2004 -0.7738 -0.0849 -0.0886 -0.1108 -0.1900 -0.0781 -0.0844 -0.2664 -0.4099 -0.0988 -0.1317 -0.1513 -0.3257 -0.1021 -0.0877 -0.0805 -0.0851 -0.0870 -0.0920 -0.0515 -0.1174 -0.0786 -0.0721
S-73	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char [ ] chars = str.toCharArray ( ) ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } return result; }
T-73	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char [ ] chars = str.toCharArray ( ) ; Arrays.sort ( chars ) ; result += new String ( chars ) + " "; } return result.substring ( 0, result.length ( ) - 1 ) ; }
H-73	-0.2752324640750885	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char [ ] chars = str.toCharArray ( ) ; java.lang.System.out . println ( chars ) ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } return result ; }
D-73	-0.2752324640750885	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char [ ] chars = str.toCharArray ( ) ; java.lang.System.out . println ( chars ) ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } return result ; }
P-73	-0.0938 -0.0548 -1.2590 -0.0145 -0.0973 -0.0333 -0.1141 -0.8672 -0.1689 -0.0892 -0.0887 -1.5731 -0.0867 -0.0810 -1.7042 -0.1795 -0.1090 -1.2680 -0.0992 -0.0693 -0.0791 -0.1856 -0.3580 -0.1193 -0.0838 -0.0810 -0.0866 -0.0924 -0.0834 -0.1085 -0.2581 -0.0748 -0.0600 -0.0865 -0.0960 -0.1806 -0.0753 -0.0328 -0.3335 -1.2912 -0.0782 -2.2662 -0.0749 -0.0844 -0.0968 -0.4109 -0.0865 -0.0806 -0.0647 -0.0409 -0.2518 -0.1071 -0.5966 -0.0841 -2.4861 -0.0868 -0.1149 -0.1072 -0.0640 -0.0856 -0.0964 -0.1444 -0.0873 -0.0506 -0.2761 -0.1131 -0.0783 -0.0824 -0.0885 -0.1068 -0.0825 -0.0799 -0.1207 -0.0787 -0.0712
S-123	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true; } return false; }
T-123	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) != text.charAt ( text.length ( ) - i - 1 ) ) return false; } return true; }
H-123	-0.20775851607322693	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
D-123	-0.20775851607322693	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
P-123	-0.0999 -0.0569 -0.0804 -0.0664 -0.0889 -0.0173 -0.0056 -0.1151 -0.9370 -0.0551 -0.0891 -0.0860 -0.2732 -0.1152 -0.0706 -0.0785 -0.0985 -1.7125 -0.1007 -0.1161 -0.2770 -0.1419 -0.0924 -0.5277 -0.0777 -0.0886 -0.0804 -0.1099 -0.1829 -0.0811 -0.1049 -0.1296 -0.1157 -0.1745 -0.1835 -1.1252 -0.1119 -0.1661 -0.0867 -0.3312 -0.0688 -0.1257 -1.0434 -0.1129 -0.4807 -0.1232 -0.1389 -0.2467 -0.0720 -0.2425 -0.2595 -0.0896 -0.0909 -0.1757 -0.0784 -0.4259 -0.1289 -0.0995 -0.0438 -0.2116 -0.0864 -0.0842
S-68	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
T-68	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
H-68	-0.19526080787181854	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
D-68	-0.19526080787181854	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
P-68	-0.1078 -0.0471 -0.1373 -0.0882 -0.1149 -0.0348 -0.0951 -0.0501 -0.1099 -0.0077 -0.1136 -0.1191 -0.1912 -0.1158 -0.0843 -0.0900 -0.0823 -0.1167 -0.0781 -0.0834 -1.6487 -0.0908 -0.1314 -0.1069 -0.0724 -0.0909 -0.0905 -1.6821 -0.0957 -0.1037 -0.8396 -0.0866 -0.0493 -0.4463 -0.0882 -0.1461 -0.2221 -0.0838 -0.0922 -0.1401 -0.1145 -0.7534 -0.0661 -0.1042 -0.0777 -0.8178 -0.0757 -0.2488 -0.1244 -0.0844 -0.2311 -0.1277 -0.1557 -0.0819 -0.1209 -0.0825 -0.1087 -0.1541 -0.1367 -0.1249 -0.1561 -0.0944 -0.0847
S-21	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-21	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-21	-0.26971620321273804	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-21	-0.26971620321273804	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-21	-0.1042 -0.0447 -0.1220 -0.1406 -0.0841 -0.0553 -0.0930 -0.0423 -0.1083 -0.0949 -0.0928 -1.5329 -0.0997 -0.1594 -1.6272 -0.0708 -0.0861 -0.0851 -0.0856 -0.4218 -0.1168 -0.1315 -0.1219 -0.3611 -0.0908 -0.0968 -0.2343 -1.1241 -0.3537 -0.1176 -0.0815 -0.0820 -0.1014 -1.6712 -0.1041 -0.1941 -0.2078 -0.8143 -0.0802 -0.1103 -0.2809 -0.0836 -0.0986 -0.1448 -0.1147 -0.3564 -0.3402 -0.1282 -0.2595 -0.1291 -0.0906 -0.1245 -0.3161 -1.1354 -0.1428 -0.1620 -0.1470 -0.6150 -0.0881 -0.0793
S-39	public static int can_arrange ( int [ ] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1; } return ind; }
T-39	public static int can_arrange ( int [ ] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) ind = i; } return ind; }
H-39	-0.23267456889152527	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-39	-0.23267456889152527	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-39	-0.0925 -0.0461 -0.1030 -0.0936 -0.1004 -0.1172 -0.1138 -0.1024 -0.1565 -0.0796 -0.0479 -0.0866 -0.0881 -0.1180 -0.0846 -0.0774 -2.1409 -0.1988 -0.1541 -0.1116 -0.0735 -0.0809 -0.0782 -1.4552 -0.1019 -0.0958 -0.3916 -0.0819 -0.0592 -1.2088 -0.0812 -1.4555 -0.0741 -0.1134 -0.1248 -0.1119 -0.0913 -0.0599 -0.1069 -0.0822 -0.1487 -0.0615 -0.0884 -0.1247 -0.1932 -0.1885 -0.0981 -0.0960 -0.1234 -0.1133 -0.1232 -0.0806 -1.3678 -0.1797 -0.0915 -0.0932 -0.1361 -0.4651 -0.0800 -0.0659
S-23	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1; } return result; }
T-23	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i - 1 ] ) result += 1; } return result; }
H-23	-0.2332421988248825	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
D-23	-0.2332421988248825	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
P-23	-0.0946 -0.0489 -0.1185 -0.0312 -0.0984 -0.0361 -0.1160 -0.1041 -0.1773 -0.0952 -0.0687 -0.0890 -0.0886 -0.0947 -0.0997 -0.0834 -1.8114 -0.1447 -0.1080 -0.0749 -0.0897 -0.0945 -2.0980 -0.1044 -0.1024 -2.0477 -0.0680 -0.0965 -0.0607 -0.1072 -0.2844 -0.0917 -0.1112 -0.1903 -0.0796 -0.1036 -0.1297 -0.1123 -0.1917 -0.0675 -0.1220 -0.0834 -0.3011 -0.1219 -0.0738 -0.1413 -0.1165 -0.0769 -0.4757 -0.1217 -0.1265 -0.0896 -0.1771 -0.0847 -1.5612 -0.1998 -0.1162 -0.1325 -0.1292 -0.2413 -0.0851 -0.0691
S-64	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String.valueOf ( c ) ; } else { current_depth -= 1; current_string += String.valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result; }
T-64	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String.valueOf ( c ) ; } else if ( c == ' ) ' ) { current_depth -= 1; current_string += String.valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result; }
H-64	-0.18194013833999634	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String. valueOf ( c ) ; } else { current_depth -= 1; current_string += String. valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result ; }
D-64	-0.18194013833999634	public static List < String > separate_paren_groups ( String paren_string ) { List < String > result = new ArrayList < String > ( ) ; String current_string = ""; int current_depth = 0; for ( char c : paren_string.toCharArray ( ) ) { if ( c == ' ( ' ) { current_depth += 1; current_string += String. valueOf ( c ) ; } else { current_depth -= 1; current_string += String. valueOf ( c ) ; if ( current_depth == 0 ) { result.add ( current_string ) ; current_string = ""; } } } return result ; }
P-64	-0.0989 -0.0492 -0.3116 -0.0827 -0.5687 -0.0613 -0.1103 -0.0923 -0.0524 -0.0110 -0.0869 -0.0331 -0.1098 -1.1788 -0.0422 -0.0792 -0.0311 -0.0853 -0.0861 -0.2036 -0.0780 -0.5610 -0.0693 -0.0653 -0.0802 -0.0615 -1.9902 -0.0804 -0.6768 -0.0688 -0.1948 -0.0991 -0.0769 -1.5169 -0.0594 -0.0934 -0.0356 -0.0833 -1.7000 -0.1070 -0.0663 -0.1024 -0.0705 -0.0841 -0.6736 -0.1287 -0.1105 -0.0808 -0.0922 -0.0666 -0.0264 -0.0874 -0.0262 -0.1454 -0.0684 -0.0314 -0.3076 -0.1107 -0.0917 -0.0900 -0.1164 -0.1118 -0.1469 -0.1023 -0.0460 -0.1447 -0.0531 -0.0855 -0.0841 -0.0726 -0.1089 -0.0847 -0.1487 -1.1942 -0.0854 -0.0852 -0.0500 -0.1446 -0.2039 -0.1072 -1.0420 -0.1147 -0.1515 -0.0958 -0.1037 -0.1043 -0.1034 -0.0951 -0.0771 -0.1106 -0.0802 -0.0365 -0.5722 -0.0618 -0.0816 -0.0498 -0.0663 -0.2406 -0.1123 -0.2680 -0.1042 -0.1161 -0.0893 -0.0871 -0.1389 -0.1049 -0.0572 -0.1109 -0.0719 -0.0720 -0.0907 -0.0839 -0.0821 -0.0842 -0.1137 -0.2011 -0.1021 -0.0593 -0.0887 -0.0446 -0.0992 -0.0914 -0.0512 -0.0878 -0.0346 -0.0749 -1.1978 -0.0956 -0.0733 -0.0793 -0.0761 -0.0708 -0.2036 -0.0782 -0.0682
S-34	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
T-34	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
H-34	-0.16904468834400177	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
D-34	-0.16904468834400177	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
P-34	-0.0905 -0.0527 -1.0505 -0.2033 -0.2083 -0.0435 -0.0936 -0.0281 -0.1086 -0.6437 -0.0318 -0.0889 -0.0884 -0.1961 -0.1119 -0.0518 -0.1525 -0.7381 -0.1054 -0.0980 -0.0832 -0.0959 -0.0890 -0.0965 -0.0755 -0.0392 -0.0990 -0.2027 -0.1186 -0.0773 -0.0909 -0.0953 -0.0885 -0.0827 -0.0981 -0.1154 -0.1044 -0.0381 -0.1227 -0.5540 -0.1075 -0.0223 -0.0866 -0.0918 -0.0833 -0.0657 -0.0402 -0.0987 -0.1568 -0.1111 -0.0217 -0.0858 -0.0949 -0.0817 -0.0829 -0.1271 -0.1403 -0.0462 -0.0841 -0.7564 -0.1151 -0.1040 -0.0744 -0.0786 -0.0735 -0.5203 -0.0917 -0.0815 -0.1136 -0.1025 -0.1025 -0.5187 -0.0730 -0.0910 -0.0747 -0.6020 -0.0747 -0.0760 -0.1376 -0.0677 -0.0822 -0.0282 -0.1032 -0.6954 -0.1007 -0.0870 -0.0876 -0.0844 -0.1458 -0.1129 -0.5133 -0.0901 -0.0690 -0.0423 -0.1135 -0.0601 -0.0859 -1.0334 -0.1167 -0.1394 -0.0596 -0.1496 -0.0422 -0.0456 -0.0521 -0.0949 -0.1050 -0.0568 -0.0929 -0.2713 -0.1112 -0.0865 -0.1066 -0.2622 -0.1000 -1.1618 -0.1511 -0.0610 -0.0712 -0.0844 -0.2249 -0.9595 -0.0974 -1.0432 -0.1137 -0.0817 -0.1021 -0.1917 -0.1079 -0.0898 -0.0803 -0.4359 -0.0778 -0.0765 -0.0711
S-20	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1; return result; }
T-20	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars [ str_chars.length - 1 ] == 'y' || str_chars [ str_chars.length - 1 ] == 'Y' ) result += 1; return result; }
H-20	-0.14850971102714539	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
D-20	-0.14850971102714539	public static int vowels_count ( String str ) { int result = 0; char [ ] str_chars = str.toCharArray ( ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars [ str_chars.length - 1 ] == 'y' ) result += 1 ; return result ; }
P-20	-0.0967 -0.0488 -0.1196 -0.0185 -0.0903 -0.0691 -0.1171 -0.7736 -0.0857 -0.0838 -0.0845 -0.1498 -0.0906 -0.0796 -0.7830 -0.1449 -0.1599 -0.0894 -0.0754 -0.0738 -0.0673 -0.0765 -0.0544 -0.1585 -0.0628 -0.0414 -0.2297 -0.1575 -0.0795 -0.2094 -0.1095 -0.0815 -0.0874 -0.0765 -0.0754 -0.0920 -0.0813 -0.0912 -0.1000 -0.1376 -0.1197 -0.2565 -0.1538 -0.0680 -0.0855 -0.0959 -0.1550 -0.1690 -0.1573 -0.0713 -0.1296 -0.0926 -0.1626 -0.1450 -0.1673 -0.0953 -0.0616 -0.1454 -0.2017 -0.1532 -0.1613 -0.1020 -0.0484 -0.1201 -0.1455 -0.1416 -0.1460 -0.0780 -0.0638 -0.0953 -0.1757 -0.1424 -0.1323 -0.1034 -0.0931 -0.1055 -0.1322 -0.1509 -0.1549 -0.0821 -0.0905 -0.0999 -0.1498 -0.1562 -0.1675 -0.1106 -0.0807 -0.1541 -0.2090 -0.1359 -0.1475 -0.0990 -0.0506 -0.1290 -0.1908 -0.1380 -0.1198 -0.1003 -0.0726 -0.1276 -0.0838 -0.1681 -0.1048 -2.2581 -0.1557 -0.2265 -0.3542 -0.1137 -0.2642 -0.1170 -0.0967 -0.2609 -0.1154 -0.1106 -0.0796 -0.0928 -0.0653 -0.4374 -0.1299 -0.0904 -0.1828 -0.1040 -0.0528 -0.1034 -0.0932 -0.0900 -0.0969 -0.3267 -0.1096 -0.0952 -0.0807 -0.1817 -0.0906 -0.0739
S-60	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-60	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-60	-0.1784639209508896	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-60	-0.1784639209508896	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-60	-0.0844 -0.0502 -0.1112 -0.0178 -0.0378 -0.1081 -0.0950 -0.0693 -0.0842 -0.0866 -1.6935 -0.0711 -0.7748 -0.0609 -0.0783 -0.0868 -0.0659 -1.4559 -0.0802 -0.9680 -0.0706 -0.1598 -0.0867 -0.0799 -0.1942 -0.1174 -0.1133 -0.0960 -0.1833 -0.1052 -0.0866 -0.1003 -0.0964 -0.1118 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1035 -0.0995 -0.7596 -0.0846 -0.0895 -0.1057 -0.0974 -0.0935 -0.0962 -0.1902 -0.0917 -0.0892 -0.2915 -0.1064 -0.0821 -0.1174 -0.0511 -0.0869 -0.0790 -0.1065 -0.1199 -0.1274 -0.0995 -0.0977 -0.0866 -0.0875 -0.2976 -0.1072 -0.0731 -0.0714 -0.0901 -1.0635 -0.0914 -0.1425 -0.1423 -0.4434 -0.5459 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1257 -0.1046 -0.1428 -0.1048 -0.1351 -0.0939 -0.1211 -0.1104 -0.2388 -0.0884 -0.1526 -0.1876 -0.0916 -0.1218 -0.1127 -0.2434 -0.0880 -1.0195 -0.0991 -0.0925 -0.1127 -0.1118 -0.1118 -0.0829 -1.0096 -0.0960 -0.0943 -0.1210 -0.1086 -0.0490 -0.0853 -0.0934 -0.0803 -0.0991 -0.1457 -0.1099 -0.0998 -0.1385 -0.1043 -0.1435 -0.1118 -0.0817 -0.4374 -0.0792 -0.3435 -0.1142 -0.0962 -0.1076 -0.0777 -0.0784
S-107	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-107	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-107	-0.2157461941242218	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-107	-0.2157461941242218	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-107	-0.0974 -0.0539 -1.5085 -0.0869 -1.0512 -0.0554 -0.0392 -0.0934 -0.0543 -0.1154 -1.3913 -0.0734 -1.0751 -0.0662 -0.0413 -0.0849 -0.0822 -1.6422 -0.0824 -1.0279 -0.0629 -0.0628 -0.0827 -0.0641 -1.2468 -0.0698 -0.1510 -0.1811 -0.1335 -0.0795 -0.1786 -0.1079 -1.7987 -0.0879 -0.0642 -0.0481 -0.0910 -0.0844 -0.1035 -0.0792 -0.0889 -0.8861 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6851 -0.0893 -0.0882 -0.2006 -0.1270 -0.0810 -0.5647 -0.0825 -0.0926 -0.0833 -0.7403 -0.0770 -0.0843 -0.1225 -0.0531 -0.0928 -0.0734 -0.1227 -1.0891 -0.1104 -0.0952 -0.0877 -0.4178 -0.1472 -0.0919 -0.1143 -0.1137 -0.1125 -0.4565 -0.0440 -0.1758 -0.1162 -0.0879 -0.0870 -0.0825 -0.7066 -0.1916 -0.1486 -0.1280 -0.2851 -0.2415 -0.1102 -0.1598 -0.0370 -0.0537 -0.0520 -0.0565 -0.0493 -0.1021 -0.1394 -0.1150 -0.1927 -0.0981 -0.1880 -0.1063 -0.0612 -0.1303 -0.2002 -0.1050 -0.2685 -0.1087 -0.1958 -0.1515 -0.1528 -0.0998 -0.2185 -0.1016 -0.1022 -0.0703 -0.0844 -0.1305 -0.1056 -0.1642 -0.1101 -0.0871 -0.0211 -0.0539 -0.1158 -0.0854 -0.1039 -0.0730 -0.0800 -0.1150 -0.0872 -0.0757
S-121	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_groups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result; }
T-121	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_groups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } else { depth -= 1; } } result.add ( max_depth ) ; } return result; }
H-121	-0.20114222168922424	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_groups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result ; }
D-121	-0.20114222168922424	public static List < Integer > parse_nested_parens ( String paren_string ) { String [ ] paren_groups = paren_string.split ( " " ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String paren_group : paren_groups ) { int depth = 0; int max_depth = 0; for ( char c : paren_group.toCharArray ( ) ) { if ( c == ' ( ' ) { depth += 1; max_depth = Math.max ( depth, max_depth ) ; } } result.add ( max_depth ) ; } return result ; }
P-121	-0.0982 -0.0449 -0.3060 -0.0798 -0.9798 -0.0661 -0.0288 -0.0984 -0.0286 -0.0861 -0.0500 -0.0142 -0.1069 -1.2813 -0.0520 -0.0872 -0.0443 -0.0795 -0.0863 -2.3324 -0.2077 -0.1063 -0.0444 -0.0872 -0.0701 -0.0763 -0.0323 -0.0880 -0.0492 -0.1399 -0.2716 -0.1166 -0.0878 -0.0804 -0.0840 -0.0876 -0.2672 -0.0845 -0.9453 -0.0580 -0.0713 -0.0848 -0.0580 -1.5243 -0.0838 -1.1243 -0.0626 -0.2709 -0.1390 -0.0838 -0.1346 -0.1100 -1.1856 -0.0547 -0.0937 -0.0476 -0.0756 -0.0548 -0.1030 -0.0746 -0.0857 -0.0859 -0.0968 -0.0737 -0.0834 -0.4910 -0.0810 -0.0444 -0.0942 -0.0816 -0.0885 -0.7292 -0.1349 -0.1094 -0.0944 -0.0991 -0.0669 -0.0349 -0.0994 -0.0480 -0.1372 -0.0738 -0.0224 -0.3029 -0.1837 -0.0929 -0.0868 -0.1298 -0.1156 -0.1578 -0.1185 -0.0663 -0.1437 -0.0745 -0.0891 -0.0968 -0.0995 -0.1030 -1.3326 -0.0571 -0.0917 -0.0679 -0.1102 -1.0530 -0.0918 -0.0601 -0.1140 -0.1021 -1.1546 -0.0623 -0.0971 -0.0906 -0.0884 -0.0930 -0.1276 -0.1307 -0.1216 -0.3631 -0.3038 -0.1114 -0.4781 -0.1039 -0.0736 -0.0964 -0.0845 -0.0982 -0.0674 -0.0858 -0.0970 -0.0819 -0.0691
S-37	public static boolean check ( String s ) { int val = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s.charAt ( i ) == ' ( ' ) val--; else val++; if ( val < 0 ) return false; } return val == 0; } public static String match_parens ( String [ ] lst ) { String S1 = lst [ 0 ] + lst [ 1 ] ; String S2 = lst [ 1 ] + lst [ 0 ] ; if ( check ( S1 ) || check ( S2 ) ) return "Yes"; return "No"; }
T-37	public static boolean check ( String s ) { int val = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s.charAt ( i ) == ' ( ' ) val++; else val--; if ( val < 0 ) return false; } return val == 0; } public static String match_parens ( String [ ] lst ) { String S1 = lst [ 0 ] + lst [ 1 ] ; String S2 = lst [ 1 ] + lst [ 0 ] ; if ( check ( S1 ) || check ( S2 ) ) return "Yes"; return "No"; }
H-37	-0.20992371439933777	public static boolean check ( String s ) { int val = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s. charAt ( i ) == ' ( ' ) val--; else val++; if ( val < 0 ) return false ; } return val == 0; }
D-37	-0.20992371439933777	public static boolean check ( String s ) { int val = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { if ( s. charAt ( i ) == ' ( ' ) val--; else val++; if ( val < 0 ) return false ; } return val == 0; }
P-37	-0.0826 -0.0503 -0.2430 -0.0744 -0.1090 -0.8597 -0.1724 -0.0802 -0.0863 -0.1268 -0.0723 -0.0894 -0.9224 -0.1441 -0.1067 -0.0850 -0.0809 -0.0814 -1.0018 -0.0876 -0.1039 -0.3511 -0.1486 -0.0719 -0.4735 -0.0816 -0.0890 -0.0925 -0.7886 -0.0784 -0.1113 -0.1465 -0.1152 -0.1203 -0.1740 -1.0515 -0.1090 -0.1142 -0.0876 -0.1828 -0.0494 -0.1341 -0.0617 -0.0872 -0.0442 -0.5216 -0.0853 -0.0868 -0.6850 -0.1299 -0.1141 -0.0816 -0.1131 -0.1123 -0.0843 -0.0911 -0.0605 -0.8654 -0.1197 -0.1050 -0.1007 -0.1113 -0.4659 -0.1002 -0.1868
S-95	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-95	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-95	-0.18254418671131134	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-95	-0.18254418671131134	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-95	-0.0906 -0.0419 -0.1087 -0.0741 -0.0954 -0.0778 -0.1180 -1.2383 -0.0636 -0.6650 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1315 -0.0859 -0.6698 -0.1673 -0.1072 -0.0794 -0.0987 -0.0682 -0.0634 -0.0830 -0.0838 -0.2894 -0.0807 -0.1007 -0.1086 -0.1092 -0.4612 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5249 -0.9778 -0.0634 -0.0858 -0.0424 -0.0789 -0.5761 -0.1050 -1.0786 -0.1086 -0.0798 -0.0833 -0.0922 -0.1367 -0.0723 -0.0882 -0.7517 -0.0997 -0.1066 -0.0709 -0.0910 -0.0755 -0.8113 -0.0922 -0.0770 -0.1051 -0.1094 -0.0600 -0.1112 -0.0930 -0.4326 -0.0804 -0.0908 -0.0857 -0.6215 -0.0748 -0.0995 -0.1438 -0.1193 -0.2590 -0.1080 -0.1501 -0.1462 -0.0818 -0.1053 -0.1419 -0.0843 -0.1147 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6439 -0.1033 -0.1200 -0.0936 -0.2079 -0.1597 -0.1062 -0.0815 -0.1215 -0.0691 -0.0886 -0.0966 -0.0654 -0.0959 -0.9583 -0.0971 -0.0990 -0.0903 -0.1617 -0.1688 -0.1675 -0.1065 -0.1358 -0.1198 -0.1132 -0.1391 -0.1128 -0.0932 -0.1403 -0.6522 -0.0885 -0.0885 -0.1472 -0.7090 -0.0887 -0.0744
S-16	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count; }
T-16	public static int special_filter ( int [ ] nums ) { int count = 0; ArrayList < Integer > odd_digits = new ArrayList < Integer > ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) - 1 ) - '0' ) ) count += 1; } } return count; }
H-16	-0.2293470799922943	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
D-16	-0.2293470799922943	public static int special_filter ( int [ ] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length ( ) ) ) ) count += 1; } } return count ; }
P-16	-0.1021 -0.0446 -0.0981 -0.0184 -0.0964 -0.0590 -0.1154 -0.1178 -0.1926 -0.0867 -0.0476 -0.0862 -0.0876 -0.1245 -0.0764 -0.0812 -0.8247 -2.9151 -0.1062 -1.5190 -0.9875 -0.1187 -0.0543 -0.0807 -0.0772 -0.2439 -0.1106 -0.0616 -0.2406 -0.0679 -0.0854 -0.0684 -0.6655 -0.0616 -0.1023 -0.0544 -0.0895 -0.0558 -0.0807 -0.1030 -0.0701 -2.1778 -0.1292 -0.1039 -0.0862 -0.1029 -0.0899 -0.1124 -0.7007 -0.1080 -0.0582 -0.1090 -0.0516 -0.0979 -0.0693 -0.1041 -0.5843 -0.1171 -0.0976 -0.0840 -0.0908 -0.6741 -0.1076 -0.1025 -0.0804 -0.1028 -0.8049 -0.1009 -0.0556 -0.1075 -0.0492 -0.1011 -0.0733 -0.1023 -0.9302 -0.1058 -0.0876 -0.1116 -0.0433 -0.1072 -0.0703 -0.1108 -0.1166 -0.5936 -0.0753 -0.0855 -0.0859 -0.0853 -0.1276 -0.0853 -1.0546 -0.0937 -0.0754 -0.0679 -0.1147 -0.2851 -0.0776 -0.0687
S-56	public static List < Integer > parse_music ( String music_string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; }
T-56	public static List < Integer > parse_music ( String music_string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; if ( music_string.trim ( ) .equals ( "" ) ) return result; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; }
H-56	-0.2779540717601776	public static List < Integer > parse_music ( String music_string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
D-56	-0.2779540717601776	public static List < Integer > parse_music ( String music_string ) { HashMap < String, Integer > note_map = new HashMap < String, Integer > ( ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
P-56	-0.0933 -0.0472 -0.3694 -0.0832 -1.0452 -0.0654 -0.0265 -0.1003 -0.0168 -0.1101 -1.5825 -0.0348 -0.0758 -0.0362 -0.0850 -0.0858 -1.2508 -0.0829 -0.9958 -0.2298 -1.2532 -0.0724 -0.0879 -0.0925 -0.0463 -0.0860 -0.0538 -1.1789 -0.1037 -0.9858 -0.2119 -1.0676 -0.0704 -0.1759 -0.0904 -0.0808 -0.2991 -0.1013 -0.0599 -0.1377 -0.2480 -0.1097 -0.0890 -0.0603 -2.0806 -0.1086 -0.0902 -0.0879 -0.1998 -0.1002 -0.0619 -0.1084 -0.2640 -0.1147 -0.1243 -0.0589 -0.0294 -1.5320 -0.1299 -0.0895 -0.0951 -0.2013 -0.1005 -0.0611 -0.1112 -0.2762 -0.1113 -0.0528 -0.0426 -1.6621 -0.3883 -0.0968 -0.0876 -0.4272 -0.0985 -1.1007 -0.0646 -0.0645 -0.0845 -0.0569 -1.6490 -0.0797 -1.4703 -0.0657 -0.5030 -0.1401 -0.0858 -0.1512 -0.1136 -1.9604 -0.0630 -0.0790 -0.0621 -0.0899 -0.0391 -0.2147 -0.3830 -0.1305 -0.1120 -0.0874 -0.0876 -0.0959 -0.1006 -0.1348 -0.4528 -0.4610 -0.1167 -0.1181 -0.0970 -0.0496 -0.1565 -0.1798 -0.1217 -0.1229 -0.1008 -0.1081 -0.0860 -0.1164 -0.0855 -0.0919 -0.1227 -0.0843 -0.0747
S-76	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-76	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [ 0 ] ) ; int b = Integer.parseInt ( x.split ( "/" ) [ 1 ] ) ; int c = Integer.parseInt ( n.split ( "/" ) [ 0 ] ) ; int d = Integer.parseInt ( n.split ( "/" ) [ 1 ] ) ; int numerator = a * c; int denom = b * d; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-76	-0.203317329287529	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-76	-0.203317329287529	public static boolean simplify ( String x, String n ) { int a = x.split ( "/" ) [ 0 ] ; int b = x.split ( "/" ) [ 1 ] ; int c = x.split ( "/" ) [ 0 ] ; int d = x.split ( "/" ) [ 1 ] ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-76	-0.0828 -0.0455 -0.1055 -0.0379 -0.1080 -0.9372 -0.1378 -1.4416 -0.8045 -0.0899 -0.0843 -0.0858 -0.1128 -0.1250 -0.1019 -4.0345 -0.1619 -0.3759 -0.1308 -0.0670 -0.0908 -0.1445 -0.1816 -0.1041 -0.0930 -0.0756 -0.0690 -0.0995 -0.1008 -0.1211 -0.1983 -0.1047 -0.0504 -0.0806 -0.0872 -0.2274 -0.0843 -0.1186 -0.0961 -0.0520 -0.0972 -0.3934 -0.1457 -0.2276 -0.1143 -0.0515 -0.0867 -0.0833 -0.1243 -0.0855 -0.1056 -0.0779 -0.0489 -0.0871 -0.0815 -0.1135 -0.2686 -0.1084 -0.0495 -0.0809 -0.0706 -0.2071 -0.0867 -0.1190 -0.1222 -0.0722 -0.0963 -0.1216 -0.0260 -0.0762 -0.8049 -0.0789 -0.0642 -0.0922 -0.0624 -0.0432 -0.0379 -0.5848 -0.1858 -0.1156 -0.0472 -0.0902 -0.0350 -0.1944 -0.1036 -0.0807 -0.0754 -0.1605 -0.0538 -0.0623 -0.0410 -0.0895 -0.0889 -0.0990 -0.0636 -1.1194 -0.1080 -0.0458 -1.0679 -0.0862 -0.0738
S-114	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-114	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-114	-0.208340123295784	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-114	-0.208340123295784	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-114	-0.0989 -0.0604 -1.5793 -0.0777 -0.9069 -0.0605 -0.0250 -0.0830 -0.0594 -0.1102 -1.4245 -0.0654 -0.9124 -0.0695 -0.1143 -0.0828 -0.0829 -1.4168 -0.0796 -0.8329 -0.0612 -0.1212 -0.0827 -0.0676 -1.4239 -0.0820 -0.9790 -0.0675 -0.1949 -0.1094 -0.0802 -0.2722 -0.1051 -0.0743 -0.0773 -0.0706 -0.0948 -0.0934 -0.0823 -0.1112 -0.0609 -0.0839 -0.0677 -0.6084 -0.0741 -0.0648 -0.1139 -0.0265 -0.0821 -0.0866 -1.0466 -0.0799 -0.1117 -0.1223 -0.1473 -0.1141 -0.0863 -0.0899 -0.1715 -0.0518 -0.0913 -0.0302 -0.0889 -0.0404 -0.0641 -0.1800 -0.1126 -0.1059 -0.2550 -0.0584 -0.0935 -0.0324 -0.1419 -0.0840 -0.0869 -0.0827 -0.0766 -0.0877 -0.1064 -0.0851 -0.1016 -0.0365 -0.0724 -0.3862 -1.2313 -0.0523 -0.0663 -0.0741 -0.0675 -0.0233 -0.1883 -0.0865 -0.0970 -0.1221 -0.1642 -0.1023 -0.0408 -0.0957 -0.1095 -0.1050 -0.1591 -0.2721 -0.1156 -0.1286 -0.1009 -0.0857 -0.1176 -0.1411 -1.1333 -0.1641 -0.1675 -0.0848 -0.0613
S-51	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-51	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-51	-0.18953996896743774	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-51	-0.18953996896743774	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-51	-0.0921 -0.0449 -0.1218 -0.1936 -0.0659 -0.0252 -0.1074 -0.0952 -0.0963 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0805 -0.0760 -0.0767 -0.0917 -0.0925 -0.1321 -0.0931 -0.0891 -0.1694 -0.1142 -0.0854 -0.1372 -0.1555 -0.0837 -0.1087 -0.2927 -0.1061 -0.1066 -0.0968 -0.1027 -2.2248 -0.2038 -0.1432 -0.0836 -0.7330 -0.0939 -0.2129 -0.1084 -0.1176 -0.0983 -0.1020 -1.7051 -0.1538 -0.1727 -0.1045 -0.2064 -0.0719 -0.1007 -0.1381 -1.0101 -0.1491 -0.1192 -0.0770 -0.0822 -0.0826 -1.1441 -0.1014 -0.1173 -0.1314 -0.6109 -0.4644 -0.1186 -0.3308 -0.0878 -0.0974 -0.1761 -0.1264 -0.1501 -0.2659 -0.0529 -0.1161 -0.0939 -0.0888 -0.1435 -0.0954 -0.0984 -0.0823 -0.1250 -0.1353 -0.1372 -0.0711 -0.3206 -0.5051 -0.0927 -0.1393 -0.0842 -0.1048 -0.0798 -0.1043 -0.2335 -0.0872 -0.0946 -0.1987 -0.2078 -0.0767 -0.1084 -0.1298 -0.0828 -0.0909 -0.1594 -0.0819 -0.0845 -0.2702 -0.1476 -0.1132 -0.1303 -0.1204 -0.0846 -0.0943 -0.3561 -0.1160 -0.1341 -0.0837 -0.9064 -0.0858 -0.0669
S-33	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array; } }
T-33	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array [ i ] ; array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = tmp; } return array; } }
H-33	-0.17184726893901825	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
D-33	-0.17184726893901825	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
P-33	-0.0964 -0.0406 -0.1054 -0.1950 -0.0844 -0.0541 -0.0836 -0.0320 -0.1114 -0.0871 -0.1254 -0.0980 -0.0564 -0.0854 -0.0864 -0.1355 -0.1142 -0.1030 -0.1426 -0.1083 -0.1440 -0.1073 -0.0830 -0.0929 -0.0622 -0.4267 -1.9406 -0.1093 -0.4015 -0.0856 -0.0852 -0.1539 -0.0777 -0.1106 -0.0837 -0.0797 -0.0879 -0.0926 -0.0854 -0.2985 -0.1597 -0.0940 -0.0992 -0.1606 -0.0672 -0.1266 -0.2267 -0.0858 -0.0805 -0.0696 -0.3710 -0.0883 -0.1633 -0.2415 -0.1200 -0.0805 -0.0892 -0.0994 -1.4800 -0.0870 -0.1096 -0.9097 -0.0846 -0.0718 -0.3985 -0.0844 -0.1557 -0.2781 -0.0858 -0.0853 -0.1144 -0.1059 -0.1342 -0.0813 -0.1111 -0.0561 -0.0984 -0.2256 -0.0872 -0.0857 -0.1637 -0.0979 -1.0111 -0.1956 -0.1118 -0.1022 -0.0946 -0.0944 -0.1552 -0.0858 -0.0781 -0.1271 -0.0878 -0.7282 -0.1293 -0.1015 -0.0969 -0.0633 -0.0957 -0.1016 -0.0916 -0.0923 -0.1054 -0.1388 -0.0659 -0.3536 -0.0909 -0.0805 -0.0840
S-124	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
T-124	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; if ( s == null || s.isEmpty ( ) ) return result; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
H-124	-0.2370518147945404	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c ; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
D-124	-0.2370518147945404	public static ArrayList < String > words_strings ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; String s_list = ""; for ( char c : s.toCharArray ( ) ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c ; } } String [ ] result_array = s_list.trim ( ) .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
P-124	-0.0944 -0.0642 -1.8182 -0.0785 -0.6498 -0.0598 -0.0158 -0.0919 -0.0417 -0.1118 -0.9455 -0.1017 -0.0814 -0.0855 -1.3933 -0.0787 -0.5457 -0.0670 -0.0636 -0.0837 -0.0581 -1.5933 -0.0843 -0.6270 -0.0706 -0.2455 -0.1153 -0.0778 -1.6616 -0.1380 -0.0949 -0.0528 -0.0897 -1.5795 -0.1682 -0.1038 -0.1124 -0.0946 -0.0667 -0.0611 -0.1776 -0.0721 -0.0297 -0.3136 -0.1508 -0.0936 -0.0857 -0.1350 -0.1122 -0.1545 -0.0936 -0.0291 -0.0852 -0.0842 -0.0914 -0.1113 -0.0657 -0.1061 -0.0629 -0.0177 -0.1858 -0.1074 -0.0919 -0.0746 -0.0987 -0.0656 -0.0869 -0.2011 -0.7375 -0.0834 -0.0888 -2.1938 -0.2582 -0.1231 -0.0708 -0.0895 -0.0385 -0.0870 -0.0676 -0.1189 -0.0569 -0.3486 -0.6666 -0.3993 -0.1345 -0.1038 -0.6782 -0.1281 -0.0171 -0.0720 -0.0213 -0.0974 -0.0945 -0.4223 -0.1164 -1.4209 -0.0687 -0.0735 -0.0657 -0.1015 -0.0363 -0.0943 -0.0904 -0.0902 -0.3472 -0.3086 -0.1145 -0.0817 -0.1205 -0.0831 -0.0892 -0.0770 -0.0737 -0.1405 -0.0842 -0.0701
S-93	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-93	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-93	-0.2410777062177658	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
D-93	-0.2410777062177658	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
P-93	-0.0922 -0.0517 -0.0988 -0.0283 -0.0286 -0.1206 -0.0940 -0.1616 -0.0951 -0.0707 -0.0870 -0.0833 -0.1212 -0.2159 -0.0784 -0.1084 -0.0909 -0.0731 -0.0660 -0.0823 -0.0805 -0.1043 -0.0633 -0.1413 -0.0913 -0.0863 -0.1319 -0.0821 -0.0327 -0.0795 -0.0793 -0.0804 -0.0540 -0.0590 -0.0733 -0.0610 -0.0961 -0.0696 -0.1301 -0.0869 -0.1761 -0.1078 -0.0639 -1.0822 -2.3409 -0.0862 -0.0373 -0.1185 -0.1297 -0.1047 -0.0957 -0.1313 -0.1178 -0.0710 -0.0849 -0.0961 -1.1892 -0.0835 -0.1030 -0.1889 -0.0935 -0.0709 -0.1885 -0.0802 -0.1602 -0.1637 -0.0878 -0.2057 -0.0872 -0.1117 -0.0931 -0.0934 -0.0745 -0.0986 -0.1771 -0.0669 -0.1430 -0.0887 -0.0650 -0.1427 -0.0874 -1.1308 -0.0870 -0.4219 -0.1181 -1.8541 -0.1171 -2.0071 -0.0920 -1.3776 -0.1183 -0.0783 -0.6534 -0.1647 -0.0872 -0.6698 -1.5950 -0.0939 -1.2262 -0.1168 -0.0691 -0.4044 -0.0273 -0.0926 -0.1189 -0.0840 -0.0931 -0.1149 -0.0963 -0.2471 -1.0271 -0.0819 -0.0482 -0.9891 -0.0762 -0.0656
S-69	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-69	public static String strongest_extension ( String class_name, String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } return class_name + "." + strong; }
H-69	-0.2905539572238922	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-69	-0.2905539572238922	public static String strongest_extension ( String class_name , String [ ] extensions ) { String strong = null; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray ( ) ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-69	-0.1051 -0.0633 -1.3783 -0.1293 -0.0475 -0.1055 -0.0264 -0.1121 -1.0892 -0.0829 -0.0909 -0.0592 -1.7577 -0.8374 -0.2276 -0.1273 -0.0445 -0.0889 -0.0908 -2.4853 -0.1079 -0.1016 -0.1444 -1.3297 -0.1692 -0.1041 -0.0865 -1.2524 -0.0873 -0.0249 -0.0819 -0.0351 -1.1265 -0.1739 -0.1157 -0.9911 -0.0776 -0.0638 -0.0619 -0.0883 -0.0832 -0.1267 -0.0950 -0.1003 -0.6867 -0.0935 -0.0421 -0.0832 -0.8155 -0.1314 -0.1149 -0.0974 -0.0896 -0.0566 -0.0664 -0.1136 -0.0599 -0.0407 -0.2653 -0.1069 -0.0901 -0.0906 -0.1490 -0.1239 -0.6447 -0.1004 -0.2102 -0.1282 -0.1196 -0.0889 -0.1652 -0.0904 -0.0858 -1.0186 -0.0950 -1.4804 -0.1436 -0.1072 -0.4074 -0.0956 -0.3441 -0.1077 -0.1280 -0.0812 -0.1074 -0.1177 -0.0818 -0.1271 -0.0854 -1.6723 -0.1243 -0.1211 -0.2049 -0.2026 -0.0997 -0.0897 -1.3677 -0.2130 -0.1549 -0.0932 -1.6615 -0.1211 -0.0693 -0.0806 -0.1026 -0.0668 -0.0744 -0.0217 -0.0752 -0.2876 -0.7011 -0.0893 -0.0806
S-117	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
T-117	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) - 1; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
H-117	-0.18608948588371277	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
D-117	-0.18608948588371277	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
P-117	-0.0982 -0.0527 -0.3480 -0.0906 -1.0452 -0.0625 -0.0212 -0.0578 -0.0252 -0.0349 -0.1048 -0.3901 -0.0870 -1.1002 -0.0706 -0.0559 -1.3084 -0.1048 -0.0183 -0.0318 -0.0897 -0.0821 -0.2915 -0.0913 -0.8422 -0.0630 -0.0662 -0.0845 -0.0595 -1.5417 -0.0780 -1.0876 -0.0664 -0.2278 -0.1420 -0.0803 -0.3114 -0.1087 -0.0920 -0.2274 -0.1609 -0.2765 -0.0723 -0.1055 -0.1226 -0.0839 -0.1088 -0.0920 -0.1999 -0.1764 -0.1134 -0.0828 -0.0781 -0.0862 -0.9888 -0.0933 -0.0836 -0.1520 -0.1086 -0.1362 -0.2601 -0.0708 -0.0913 -0.0722 -0.1208 -0.1242 -0.0787 -0.0920 -0.1301 -0.1388 -0.1888 -0.1119 -0.0904 -0.1193 -0.1944 -0.1141 -0.0948 -0.0867 -0.0934 -0.0833 -0.6513 -0.1087 -0.1347 -0.1055 -0.0166 -0.0317 -0.0834 -0.0857 -0.0919 -0.3226 -0.1137 -0.1784 -0.1022 -0.0797 -0.1035 -0.3554 -0.1229 -0.1024 -0.1083 -0.1854 -0.2168 -0.0672 -0.2070 -0.1008 -0.0866 -0.0979 -0.0857 -0.1089 -0.0761 -0.1398 -0.0811 -0.0706
S-72	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-72	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-72	-0.22106066346168518	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-72	-0.22106066346168518	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-72	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0290 -0.0617 -0.1108 -0.1020 -0.1470 -0.0897 -0.0653 -0.0851 -0.0878 -0.6530 -0.1097 -0.0848 -0.1556 -0.0990 -0.1374 -0.0988 -0.0837 -0.0632 -0.0393 -0.7960 -0.1274 -0.1034 -0.0861 -1.6975 -0.2701 -0.1061 -0.0819 -0.1005 -0.0797 -1.1730 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4809 -0.0781 -0.0968 -0.1637 -0.1132 -0.1757 -0.0701 -0.0950 -0.0816 -0.1472 -0.1207 -0.0831 -0.1973 -0.2221 -1.1639 -0.1037 -0.0862 -0.1059 -0.0803 -0.0703 -0.1011 -0.0798 -0.1085 -0.1123 -0.0829 -0.1231 -0.0225 -1.1277 -0.0790 -0.1525 -0.0664 -0.0886 -1.2226 -0.1439 -0.1030 -0.0829 -0.0905 -0.0850 -1.1302 -0.0956 -0.0632 -0.1034 -0.0976 -0.0814 -0.8540 -0.0814 -0.4128 -0.0790 -0.0964 -0.1973 -0.0606 -3.0057 -0.0987 -0.0543 -0.1058 -0.0824 -0.0800 -0.1117 -0.0872 -0.1062 -0.0987 -0.0861 -0.1855 -0.2020 -0.0301 -0.1334 -0.2663 -0.0803 -0.0746
S-26	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
T-26	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toUpperCase ( c ) ; } else { char_list [ i ] = Character.toLowerCase ( c ) ; } } return new String ( char_list ) ; }
H-26	-0.13100512325763702	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
D-26	-0.13100512325763702	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
P-26	-0.0988 -0.0503 -0.4399 -0.0179 -0.0986 -0.0316 -0.1103 -0.5519 -0.0979 -0.0886 -0.0896 -0.0854 -0.2805 -0.0925 -0.0878 -0.0949 -0.0539 -0.0811 -0.0657 -0.1966 -0.0502 -0.0516 -0.2231 -0.1470 -0.0831 -0.2673 -0.1085 -0.1067 -0.0785 -0.0890 -0.8136 -0.0979 -0.1001 -0.2065 -0.1124 -0.0590 -0.0908 -0.0692 -0.2268 -0.0801 -0.0901 -0.1832 -0.0771 -0.0752 -0.0877 -0.0673 -0.0952 -0.0759 -0.1109 -0.0541 -0.0682 -0.0931 -0.0825 -0.0895 -0.1555 -0.1192 -1.0581 -0.1050 -0.0740 -0.0362 -0.1188 -0.1207 -0.0901 -0.0869 -0.0807 -0.1232 -0.1020 -0.0516 -0.0814 -0.1166 -0.0816 -0.1052 -0.3135 -0.0948 -0.3637 -0.1191 -0.1335 -0.0964 -0.1032 -0.1183 -0.1072 -0.1396 -0.0824 -0.1019 -0.0584 -0.0707 -0.1096 -0.0831 -0.0990 -0.2459 -0.0877 -0.1523 -0.1139 -0.1289 -0.0953 -0.0979 -0.1020 -0.1585 -0.1180 -0.0469 -0.2400 -0.1157 -0.1079 -0.0935 -0.0612 -0.1264 -0.0939 -0.0913 -0.0763
S-119	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
T-119	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { if ( ! count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
H-119	-0.2640340328216553	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
D-119	-0.2640340328216553	public static List < Integer > remove_duplicates ( List < Integer > numbers ) { List < Integer > result = new ArrayList < Integer > ( ) ; HashMap < Integer, Integer > count = new HashMap < Integer, Integer > ( ) ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
P-119	-0.0906 -0.0484 -0.3372 -0.0932 -1.0487 -0.0649 -0.0371 -0.1004 -0.0117 -0.1047 -0.3777 -0.0827 -1.0953 -0.0785 -0.0606 -0.0882 -0.0797 -0.3914 -0.0983 -0.9842 -0.0758 -0.0810 -0.0795 -0.0662 -1.6272 -0.0890 -1.2556 -0.0869 -0.2409 -0.1638 -0.0786 -1.4092 -0.0817 -0.9213 -0.3026 -0.8127 -0.0747 -0.0871 -0.0843 -0.0489 -0.8622 -0.0911 -1.0378 -0.3656 -0.7266 -0.0724 -0.2252 -0.1894 -0.0818 -0.1489 -0.1165 -1.2600 -0.0732 -0.0749 -0.0603 -0.0925 -0.0899 -0.3074 -0.1719 -0.5946 -0.1067 -0.0965 -0.8038 -0.1116 -0.1205 -0.1631 -0.1154 -0.0888 -0.0894 -0.7244 -0.0860 -0.1298 -0.1757 -0.1110 -1.0923 -0.0731 -0.0771 -0.0634 -0.0911 -0.0851 -0.2218 -0.1157 -0.1289 -0.1442 -0.1773 -0.1196 -0.0928 -0.0881 -0.1889 -0.5356 -0.0921 -0.1783 -0.1713 -0.2678 -0.1101 -0.0883 -0.0990 -0.0827 -0.1247 -0.0843 -0.0946 -0.1113 -0.0829 -0.0716
S-108	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-108	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-108	-0.1623087078332901	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-108	-0.1623087078332901	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-108	-0.0960 -0.0417 -0.0967 -0.1976 -0.0954 -0.0266 -0.0137 -0.1117 -0.0970 -0.1300 -0.0919 -0.0668 -0.0878 -0.0879 -0.1134 -0.1646 -0.1115 -0.0691 -0.0871 -0.8448 -0.0945 -0.0539 -0.0831 -0.8000 -0.1130 -0.1113 -0.0747 -0.0796 -0.0830 -1.0271 -0.0765 -0.1078 -0.1935 -0.0999 -0.0692 -0.3824 -0.0704 -0.0773 -0.1731 -0.0769 -0.0869 -0.1204 -0.1163 -0.2431 -0.0704 -0.0902 -0.0752 -0.4190 -0.0588 -0.1441 -0.1083 -1.1420 -0.1326 -0.0824 -0.0879 -0.0863 -0.1090 -0.1241 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1060 -0.1482 -0.1466 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3040 -0.1490 -0.1060 -0.2045 -0.1146 -0.1286 -0.1583 -1.0023 -0.0859 -0.0954 -0.1094 -0.0826 -0.0937 -0.2156 -0.1235 -0.4428 -0.1071 -0.1411 -0.0761 -0.0699 -0.0875 -0.1058 -0.1079 -0.1753 -0.1132 -0.0716 -0.7754 -0.0857 -0.1679 -0.1034 -0.0781 -0.0717
S-42	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( is_prime ( j ) ) { largest = n % j; } } return largest; }
T-42	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( n % j == 0 && is_prime ( j ) ) { largest = j; } } return largest; }
H-42	-0.23486855626106262	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-42	-0.23486855626106262	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-42	-0.0934 -0.0437 -0.1831 -0.0620 -0.0871 -0.0330 -0.1138 -0.0928 -0.1776 -0.0851 -0.0938 -0.7588 -0.1101 -0.1329 -0.1297 -0.0764 -0.0896 -0.0853 -0.0808 -1.4275 -0.6611 -0.1102 -0.0817 -0.0766 -0.0872 -0.9290 -0.0973 -0.1322 -0.1007 -1.2210 -0.0723 -0.0975 -0.2006 -0.0828 -0.0981 -0.1270 -0.1132 -0.2993 -0.1550 -0.0835 -0.2289 -0.1302 -0.0865 -0.0884 -0.0867 -1.2514 -0.1091 -0.1194 -0.0676 -0.9659 -0.0893 -0.2071
S-11	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
T-11	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand [ 0 ] + ""; for ( int i = 0; i < operator.length; i += 1 ) { expression += operator [ i ] + operand [ i + 1 ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
H-11	-0.19655866920948029	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-11	-0.19655866920948029	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-11	-0.0849 -0.0551 -0.0782 -0.0539 -0.0937 -0.0088 -0.0107 -0.1123 -2.1763 -0.1812 -0.0664 -0.0928 -1.4716 -0.1315 -0.1829 -0.0841 -0.0359 -0.0814 -0.0610 -0.1587 -0.0129 -0.3429 -0.1895 -0.0651 -0.0884 -0.1797 -0.0473 -0.0822 -0.0968 -0.0818 -0.0600 -0.1209 -0.0469 -0.0722 -0.1887 -0.1372 -0.0796 -0.1432 -0.0491 -0.0323 -0.0892 -0.0649 -0.1595 -0.0903 -0.0283 -0.0257 -0.1043 -0.0914 -0.0123 -0.0688 -0.0862 -0.0865 -2.3248 -0.1693 -0.0845 -1.3773 -0.1437 -0.1092 -0.0828 -0.0886 -0.0865 -0.9935 -0.1029 -0.0808 -0.1783 -0.0956 -0.0695 -0.1917 -0.0892 -0.1723 -0.1803 -0.0825 -0.0824 -0.2505 -0.0969 -0.1383 -0.0937 -0.1356 -0.0806 -0.1569 -0.0424 -0.0785 -0.1163 -0.0808 -0.1016 -0.1076 -0.1534 -0.4728 -0.0890 -1.0405 -0.1063 -0.0673 -0.1273 -0.0164 -0.1134 -0.1381 -0.1015 -0.1767 -0.7614 -0.1821 -0.1336 -0.0957 -0.0821 -0.0734
S-0	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-0	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-0	-0.1958400458097458	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-0	-0.1958400458097458	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-0	-0.0995 -0.0535 -0.4356 -0.0881 -0.8990 -0.0597 -0.0650 -0.0950 -0.0586 -0.0888 -0.0482 -0.1057 -0.0940 -0.0833 -0.0843 -0.0806 -0.4519 -0.0931 -0.8282 -0.0624 -0.0492 -0.0817 -0.0719 -1.9392 -0.0863 -0.9709 -0.0657 -0.2047 -0.1026 -0.0822 -0.2148 -0.1112 -0.0676 -0.0853 -0.0835 -1.0302 -0.1070 -0.1265 -0.1038 -0.4984 -0.0770 -0.0880 -0.1961 -0.0815 -0.0803 -0.1050 -0.0579 -0.1003 -0.0602 -0.0906 -0.0811 -0.6350 -0.0869 -0.1049 -0.0736 -0.0904 -0.0914 -0.6742 -0.1180 -0.0826 -0.1291 -1.1602 -0.0737 -0.0744 -0.1627 -0.0833 -0.0950 -0.1372 -0.1152 -0.3547 -0.2472 -0.0828 -0.2306 -0.1318 -0.0895 -0.1172 -0.0965 -0.1040 -0.0443 -0.1000 -0.2469 -0.3173 -0.1363 -0.1247 -0.1858 -0.1238 -0.1660 -0.1066 -0.0416 -0.0999 -0.2598 -0.2651 -0.4149 -0.1118 -0.1461 -0.2281 -0.0795 -0.1270 -0.0829 -0.0453 -0.1432 -0.0825 -0.0744
S-91	public static boolean same_chars ( String s0, String s1 ) { ArrayList < Character > set0 = new ArrayList < Character > ( ) ; ArrayList < Character > set1 = new ArrayList < Character > ( ) ; for ( char c0 : s0.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
T-91	public static boolean same_chars ( String s0, String s1 ) { HashSet < Character > set0 = new HashSet < Character > ( ) ; HashSet < Character > set1 = new HashSet < Character > ( ) ; for ( char c0 : s0.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
H-91	-0.17244629561901093	public static boolean same_chars ( String s0, String s1 ) { java.util.ArrayList < Character > set0 = new java.util.ArrayList < Character > ( ) ; java.util.ArrayList < Character > set1 = new java.util.ArrayList < Character > ( ) ; for ( char c0 : s0.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
D-91	-0.17244629561901093	public static boolean same_chars ( String s0, String s1 ) { java.util.ArrayList < Character > set0 = new java.util.ArrayList < Character > ( ) ; java.util.ArrayList < Character > set1 = new java.util.ArrayList < Character > ( ) ; for ( char c0 : s0.toCharArray ( ) ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray ( ) ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
P-91	-0.0895 -0.0488 -0.1268 -0.0486 -0.0920 -0.0396 -0.1146 -1.2533 -0.0892 -0.3545 -0.6755 -0.0786 -0.0663 -0.0878 -0.0848 -3.6828 -0.0804 -0.9760 -0.1611 -0.3736 -0.0863 -0.2898 -0.0665 -0.0646 -0.0703 -0.0811 -0.0652 -0.0728 -0.1250 -0.0854 -0.2067 -0.0817 -0.1059 -0.4074 -0.0767 -0.4911 -0.3531 -0.0835 -0.1050 -0.1049 -0.1202 -0.1518 -0.1536 -0.0899 -0.2136 -0.0652 -0.0507 -0.0863 -0.0666 -0.0836 -0.0253 -0.1304 -0.0792 -0.2507 -0.0965 -0.0676 -0.2610 -0.0755 -0.2563 -0.0914 -0.0813 -0.1257 -0.1016 -0.1060 -0.0974 -0.0420 -0.0820 -0.0578 -0.0419 -0.0663 -0.0394 -0.3108 -0.1644 -0.0930 -0.0869 -0.0722 -0.1292 -0.2566 -0.1088 -0.1145 -0.0421 -0.0939 -0.0885 -0.0923 -0.1109 -0.0997 -0.0779 -0.0999 -0.0642 -0.0624 -0.0581 -0.0410 -0.0946 -0.0426 -0.1654 -0.0849 -0.0903 -0.0828 -0.0596 -0.0704 -0.2302 -0.1095 -0.1083 -0.0901 -0.0964 -0.0878 -0.0638 -0.0811 -0.1098 -0.0526 -0.9835 -0.1073 -0.0588 -0.0808 -0.0931 -0.1007 -0.0698 -0.0641
S-81	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-81	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { row_capacity += grid [ i ] [ j ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-81	-0.18479180335998535	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-81	-0.18479180335998535	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-81	-0.1018 -0.0444 -0.1129 -0.0444 -0.0888 -0.0616 -0.1152 -0.0940 -0.1339 -0.0850 -0.1056 -0.0939 -0.0187 -1.3904 -0.0847 -0.0255 -0.1025 -0.0998 -0.0901 -0.0874 -0.0957 -0.1061 -0.0849 -1.2044 -0.1836 -0.1090 -0.0734 -0.1008 -0.0830 -1.2975 -0.0881 -0.0774 -0.1051 -0.1300 -0.0927 -0.5916 -0.0763 -0.6871 -0.0745 -0.0824 -0.1027 -0.1179 -0.0971 -0.0958 -0.0936 -1.4341 -0.0908 -0.1043 -0.0723 -0.0981 -0.0996 -1.3453 -0.0873 -0.0554 -0.0563 -0.1033 -0.3523 -0.0984 -0.1147 -0.1378 -0.3273 -0.0733 -0.6101 -0.0780 -0.0908 -0.2603 -0.0945 -0.1206 -0.0721 -0.0420 -0.0844 -0.1256 -0.0640 -0.0712 -0.0933 -0.0865 -0.0979 -0.0897 -0.0957 -0.1183 -0.2211 -0.2318 -0.0970 -0.0960 -0.2427 -0.0816 -0.1021 -0.0960 -0.2293 -0.0962 -0.1125 -0.0987 -0.0942 -0.2353 -0.1069 -0.0817 -0.1010 -0.2293 -0.0806 -0.0681
S-62	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-62	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-62	-0.2328203022480011	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-62	-0.2328203022480011	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-62	-0.0931 -0.0496 -0.0984 -0.0374 -0.0595 -0.0052 -0.0856 -0.0397 -0.1114 -0.9699 -0.1019 -1.2893 -0.6657 -0.0942 -0.0849 -0.0924 -0.1189 -0.0536 -0.0885 -0.1133 -0.2007 -0.0870 -0.4265 -0.0814 -0.0837 -1.7267 -0.0711 -0.0840 -0.1085 -0.6413 -0.1706 -0.1136 -0.0731 -0.0739 -0.0848 -0.9498 -0.0867 -0.0757 -0.5547 -0.1420 -0.0942 -0.4527 -0.0767 -0.0963 -0.0742 -0.0922 -0.2137 -0.0807 -0.0748 -0.0992 -0.1074 -0.0659 -0.0788 -0.0975 -0.6601 -0.1030 -0.0702 -0.0669 -0.6074 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1228 -0.1142 -0.1856 -0.1134 -0.8535 -0.1271 -0.1210 -1.3875 -0.1807 -0.8086 -0.0818 -0.1054 -0.1000 -0.4970 -0.1050 -0.1173 -0.1230 -0.6329 -0.1061 -0.0947 -0.6495 -0.1101 -0.1216 -0.0785 -0.0832 -0.0871 -0.0865 -0.0847 -0.0460 -1.2173 -0.0849 -0.0761 -0.0775 -0.0319 -0.7548 -0.0742 -0.0771
S-53	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-53	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-53	-0.1808999925851822	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-53	-0.1808999925851822	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-53	-0.1012 -0.0466 -0.0984 -0.0322 -0.0130 -0.0878 -0.0505 -0.0879 -0.0491 -0.0922 -0.0944 -0.1233 -0.1099 -0.2035 -0.0841 -0.0689 -0.0878 -0.0880 -0.1520 -0.1150 -0.0710 -0.0991 -0.0877 -1.3707 -0.0755 -0.0770 -0.1223 -0.0867 -0.0726 -1.0071 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3502 -0.1025 -0.0794 -0.0757 -0.1010 -0.0781 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0918 -0.1086 -0.0706 -0.0988 -0.1061 -0.1149 -0.6198 -0.0867 -0.0699 -0.0762 -0.1048 -0.0798 -1.1160 -0.0972 -0.0895 -0.1181 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2586 -0.0745 -0.1367 -0.0707 -0.0946 -0.2049 -0.0867 -0.4492 -0.0619 -0.0842 -0.0972 -0.0842 -0.5803 -0.1805 -0.0875 -0.1380 -0.0881 -1.3435 -0.1117 -0.1131 -0.1044 -0.0886 -0.0405 -0.4737 -0.0860 -0.0786
S-17	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-17	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-17	-0.2419087290763855	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-17	-0.2419087290763855	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-17	-0.1048 -0.0625 -1.5617 -0.0154 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0824 -0.0467 -0.0898 -0.0875 -1.8174 -0.1002 -0.0838 -1.7219 -0.1657 -0.1119 -1.6409 -0.0578 -0.0669 -0.0266 -0.1206 -0.3774 -0.1154 -0.0832 -0.0730 -0.0877 -0.0942 -0.0870 -0.1461 -0.0473 -0.0819 -0.6245 -0.1209 -0.1127 -0.0765 -0.0724 -0.0858 -0.9740 -0.1033 -0.1596 -0.1145 -0.1077 -0.0764 -0.4355 -0.0877 -0.0886 -0.0739 -0.1171 -0.2333 -0.0789 -0.0923 -0.1386 -0.1200 -0.1385 -0.1888 -0.1062 -0.1678 -0.0812 -0.2467 -0.0889 -0.1620 -0.1070 -0.0819 -0.0496 -0.1201 -1.8157 -0.1129 -0.1671 -0.1184 -0.0840 -0.0947 -0.1896 -0.6179 -0.1356 -0.1894 -0.1353 -0.1983 -0.0779 -0.1251 -0.2928 -0.0910 -0.1688 -0.0949 -0.0564 -0.1076 -0.1253 -0.0222 -0.1344 -0.2267 -0.0978 -0.3154 -1.3936 -0.2734 -0.1075 -0.0841 -0.0782
S-88	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
T-88	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
H-88	-0.14484624564647675	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
D-88	-0.14484624564647675	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
P-88	-0.0987 -0.0474 -0.1181 -0.0913 -0.1123 -0.0193 -0.0707 -0.1168 -0.1204 -0.1695 -0.1122 -0.0755 -0.0893 -0.0843 -0.0932 -0.0844 -0.0922 -1.5419 -0.1446 -0.1016 -0.0707 -0.0768 -0.0854 -1.4942 -0.0884 -0.1084 -0.4041 -0.0985 -0.0512 -0.2979 -0.0818 -0.1203 -0.2683 -0.0804 -0.0934 -0.1294 -0.1130 -0.2244 -0.3465 -0.1253 -0.1854 -0.1170 -0.0872 -0.1357 -0.0658 -0.1023 -0.0964 -0.0960 -0.0809 -0.0809 -0.0955 -0.1100 -0.0869 -0.0787 -0.0812 -0.1189 -0.0949 -0.1078 -0.1217 -0.3162 -0.1080 -0.1092 -0.1023 -0.0927 -0.1345 -0.0687 -0.0778 -0.0953 -0.0944 -0.0756 -0.0694 -0.0770 -0.1006 -0.0902 -0.0677 -0.2109 -0.1021 -0.1543 -0.0801 -0.0742 -0.0734 -0.0983 -0.0837 -0.1668 -0.1118 -0.0931 -0.1016 -0.1533 -0.0871 -0.0805
S-32	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-32	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-32	-0.19922584295272827	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-32	-0.19922584295272827	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-32	-0.1024 -0.0461 -0.1130 -0.0763 -0.0152 -0.0878 -0.0542 -0.0144 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1049 -0.0941 -0.0831 -0.7412 -0.1544 -0.1074 -0.0751 -0.0760 -0.0827 -0.7359 -0.0864 -0.1041 -0.0936 -0.4632 -0.0784 -0.0873 -0.1812 -0.0776 -0.0868 -0.2238 -0.1114 -0.2078 -0.2695 -0.0580 -0.1662 -0.0988 -0.3472 -0.1008 -0.1980 -0.0337 -0.1406 -0.0957 -0.0806 -0.0892 -0.1649 -0.1075 -0.0793 -0.0911 -0.0935 -0.8905 -0.0979 -0.0760 -0.2113 -0.1908 -0.7223 -0.0639 -0.3528 -0.0877 -0.0839 -0.0726 -0.0948 -0.1584 -0.0751 -0.0994 -0.1365 -0.1119 -0.1904 -0.2459 -0.5915 -1.9131 -0.1139 -0.1076 -1.1316 -0.0811 -0.1101 -0.1159 -0.1080 -0.4283 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7551 -0.1202 -0.1083 -0.0968 -0.0875 -0.0983 -0.1205 -0.2475 -0.0855 -0.0743
S-104	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-104	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-104	-0.1981634646654129	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-104	-0.1981634646654129	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-104	-0.0973 -0.0379 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0962 -0.1217 -0.0798 -0.1137 -0.1102 -0.0283 -1.3249 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3649 -0.0773 -0.0334 -0.0941 -0.0753 -0.7049 -0.1214 -0.0936 -0.0861 -0.0883 -0.0401 -0.0951 -0.0966 -0.7483 -0.1231 -0.1077 -0.0705 -0.0946 -0.0757 -0.6155 -0.0935 -0.0706 -0.1009 -1.0906 -0.0921 -0.5395 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0953 -0.0940 -0.5018 -0.0986 -0.0550 -0.0912 -1.3864 -0.0675 -0.3409 -0.0798 -0.0990 -0.1479 -0.1107 -0.0854 -0.0851 -0.0966 -0.0609 -0.0842 -0.0782 -0.0614 -0.1799 -0.1705 -0.0840 -0.0770 -0.2244 -0.1193 -0.1534 -0.1462 -0.1031 -0.0800 -0.0854 -0.1179 -2.0272 -0.0945 -0.2620 -0.1079 -0.0853 -0.7056 -0.0428 -0.1088 -0.0977 -0.1464 -0.0930 -0.0931 -1.1650 -0.1098 -0.1108 -0.1043 -0.0912 -0.1356 -0.1156 -0.1209 -0.1183 -0.0946 -0.0765 -0.0951 -0.0792 -1.8243 -0.0906 -0.0649 -0.1082 -0.0850 -0.7274 -0.0414 -0.1054 -0.0965 -0.2059 -0.1770 -0.0823 -0.0957 -0.0855 -0.1016 -0.0933 -0.0906 -0.1423 -0.1038 -0.3992 -0.1440 -0.1823 -0.6094 -0.1343 -0.0801 -0.0957 -0.0795 -1.8771 -0.0891 -0.1028 -0.1000 -0.0910 -0.6736 -0.0369 -0.1037 -0.0988 -0.5409 -0.1509 -0.0852 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1157 -0.1013 -0.1520 -0.0817 -0.0782 -0.0927 -0.0840 -1.7743 -0.0893 -0.1533 -0.1017 -0.0908 -0.8509 -0.0364 -0.0987 -0.0995 -0.0893 -0.0788 -0.0848 -0.1370 -0.0985 -0.1208 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0360 -0.0953 -0.0613 -0.0684 -0.0643 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5422 -0.0835 -0.0591 -0.1481 -1.2627 -0.0857 -0.4658 -0.0844 -0.1052 -0.1363 -0.1150 -0.4726 -0.0931 -0.0670 -0.0439 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1039 -0.0900 -0.0631 -0.0978 -2.2778 -0.1234 -0.0672 -0.0714 -0.0702 -0.0997 -0.0758 -0.1028 -0.1377 -0.5670 -0.0758 -0.0926 -0.0337 -0.6591 -0.0778 -0.0784
S-118	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim ( ) ; }
T-118	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array, new Comparator < String > ( ) { public int compare ( String n1, String n2 ) { return value_map.get ( n1 ) - value_map.get ( n2 ) ; } } ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim ( ) ; }
H-118	-0.25009414553642273	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
D-118	-0.25009414553642273	public static String sort_numbers ( String numbers ) { final HashMap < String, Integer > value_map = new HashMap < String, Integer > ( ) ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList < String > number_array = new ArrayList < String > ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result. trim () ; }
P-118	-0.0933 -0.0541 -1.5810 -0.0379 -0.1019 -0.0645 -0.1169 -1.4330 -0.0553 -0.0968 -0.0826 -0.1164 -0.8552 -0.0753 -0.8946 -0.3133 -0.9611 -0.0772 -0.0505 -0.0959 -0.0498 -0.0830 -0.0588 -0.9514 -0.0930 -0.9440 -0.2561 -0.8159 -0.0744 -0.1649 -0.0908 -0.0790 -0.0847 -0.1004 -0.0767 -0.1119 -0.1796 -0.1084 -0.0754 -0.0616 -1.9678 -0.1030 -0.0892 -0.0939 -0.0702 -0.1021 -0.0794 -0.0971 -0.1923 -0.1102 -0.0842 -0.0347 -1.6200 -0.2212 -0.0894 -0.0923 -0.0673 -0.1028 -0.0792 -0.0959 -0.1890 -0.1073 -0.0867 -0.0425 -1.7196 -0.0738 -0.0845 -0.0934 -0.0689 -0.1036 -0.0828 -0.0968 -0.2053 -0.1125 -0.0849 -0.1005 -1.9865 -0.0470 -0.0883 -0.0971 -0.0621 -0.1038 -0.0873 -0.0982 -0.1943 -0.1129 -0.0873 -0.0292 -1.5154 -0.0697 -0.0905 -0.0948 -0.0575 -0.0998 -0.0830 -0.0977 -0.1808 -0.1141 -0.0882 -0.0770 -1.7596 -0.0604 -0.0858 -0.0899 -0.0653 -0.0996 -0.0835 -0.0987 -0.1877 -0.1117 -0.0851 -0.0119 -1.5214 -0.0538 -0.0834 -0.0955 -0.0591 -0.0978 -0.0863 -0.0984 -0.1592 -0.1105 -0.0884 -0.0421 -0.0075 -1.4861 -0.0737 -0.0868 -0.0894 -0.0532 -0.0961 -0.0770 -0.0986 -0.1396 -0.1063 -0.0924 -0.0045 -1.3555 -0.0749 -0.0808 -0.0894 -0.0648 -0.0945 -0.0773 -0.1016 -0.1835 -0.1054 -0.0774 -0.1174 -0.0188 -1.7561 -0.0234 -0.0849 -0.0879 -1.0159 -0.0629 -0.7771 -0.0578 -0.0377 -0.0926 -0.0359 -0.0885 -0.0572 -0.9400 -0.0995 -0.6827 -0.0706 -0.1152 -3.2993 -0.0670 -0.3748 -0.0911 -0.0102 -0.1511 -0.0161 -0.1073 -0.1278 -0.2453 -0.4437 -0.1070 -0.0814 -0.0793 -0.0948 -0.0946 -0.0882 -0.1176 -1.4123 -0.0845 -0.0330 -0.1095 -0.0363 -0.0795 -0.0360 -0.1012 -0.0986 -0.7386 -0.0932 -0.0859 -1.0236 -0.1385 -0.1068 -1.0518 -0.0406 -0.0691 -0.0291 -0.0850 -0.0282 -0.0887 -0.0853 -0.0722 -0.0428 -0.0479 -0.0457 -0.0928 -0.0097 -0.1220 -0.0820 -0.0715 -0.1134 -1.6941 -0.1093 -0.0970 -0.0797 -0.0917
S-90	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
T-90	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != null ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
H-90	-0.1535419523715973	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a , Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
D-90	-0.1535419523715973	public static ArrayList < String > by_length ( ArrayList < Integer > a ) { Map < Integer, String > digit_map = new HashMap < > ( ) ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a , Collections.reverseOrder ( ) ) ; ArrayList < String > result = new ArrayList < > ( ) ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
P-90	-0.0937 -0.0416 -1.2705 -0.0797 -0.6650 -0.0540 -0.0377 -0.0849 -0.0281 -0.1133 -1.0201 -0.0760 -0.7140 -0.0708 -0.0852 -0.0853 -0.0854 -0.1341 -0.0832 -0.7440 -0.2433 -0.5848 -0.0643 -0.0312 -0.0915 -0.0465 -0.0847 -0.0517 -0.9554 -0.0732 -0.0601 -0.1530 -0.0731 -0.0769 -0.1113 -0.1013 -0.0601 -0.1168 -0.1425 -0.1012 -0.5487 -0.1201 -0.0513 -0.0771 -0.0991 -0.0891 -0.0909 -0.0995 -0.0678 -0.0979 -0.1455 -0.1093 -0.2074 -0.1193 -0.0321 -0.0688 -0.0883 -0.0895 -0.0742 -0.1032 -0.0778 -0.0976 -0.1390 -0.1072 -0.1574 -0.0987 -0.0415 -0.0720 -0.0870 -0.0881 -0.0668 -0.0976 -0.0739 -0.0985 -0.1262 -0.1115 -0.1860 -0.1056 -0.0353 -0.0796 -0.0863 -0.0919 -0.0672 -0.0971 -0.0794 -0.0995 -0.1505 -0.1129 -0.1231 -0.1048 -0.0474 -0.0160 -0.0777 -0.0909 -0.0871 -0.0691 -0.0981 -0.0750 -0.0989 -0.1501 -0.1146 -0.1149 -0.0997 -0.0371 -0.0191 -0.0846 -0.0898 -0.0867 -0.0656 -0.0921 -0.0716 -0.1010 -0.1382 -0.1115 -0.1140 -0.1054 -0.0516 -0.0598 -0.0754 -0.0901 -0.0880 -0.0900 -0.0973 -0.0716 -0.1008 -0.1267 -0.1107 -0.1703 -0.1020 -0.0573 -0.0131 -0.0793 -0.0846 -0.0875 -0.1545 -0.0918 -0.0672 -0.1025 -0.1458 -0.1032 -0.2008 -0.1041 -0.0295 -0.0161 -0.0828 -0.0910 -0.0887 -1.6644 -0.0917 -0.0438 -0.1058 -0.1029 -1.1636 -1.1872 -0.0914 -0.1077 -0.0309 -0.2261 -0.6263 -0.0992 -0.0897 -0.9117 -0.0759 -0.5795 -0.0502 -0.0654 -0.0862 -0.0479 -1.1637 -0.0672 -0.2155 -0.2672 -0.0972 -0.0819 -0.1156 -0.1095 -0.0781 -0.0776 -0.1245 -0.0791 -0.0973 -0.0948 -0.1612 -0.1099 -0.1932 -0.1142 -0.0595 -0.1551 -0.1398 -0.1154 -0.0670 -0.0961 -0.2847 -0.1439 -0.0946 -0.0948 -0.0657 -0.2165 -0.2289 -0.1060 -0.0521 -0.0977 -0.0530 -0.1193 -0.1358 -0.1071 -0.0700 -0.0925 -0.1099 -0.0921 -0.0962 -0.1093 -0.0586 -0.0823 -0.0996 -0.0797 -0.0818
S-96	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-96	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase ( ) .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-96	-0.19148115813732147	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
D-96	-0.19148115813732147	public static boolean check_dict_case ( HashMap < Object, Object > dict ) { if ( dict.size ( ) == 0 ) return false ; else { String state = "start"; for ( Object key : dict.keySet ( ) ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase ( ) . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase ( ) . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase ( ) . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
P-96	-0.0918 -0.0440 -0.0807 -0.0485 -0.0895 -0.0422 -0.0804 -0.0341 -0.1144 -0.6796 -0.0624 -0.6387 -0.2352 -0.4261 -0.0665 -0.0369 -0.0826 -0.0892 -0.3365 -0.1113 -0.0394 -0.1350 -0.1452 -0.2507 -0.0780 -0.0963 -0.1036 -0.0833 -0.0880 -0.0975 -1.4464 -0.1527 -0.0978 -0.9882 -0.0710 -0.0837 -0.0970 -0.0283 -0.9051 -0.1896 -0.1032 -0.6728 -0.0728 -0.0635 -0.0247 -0.1059 -0.0327 -0.0480 -0.1843 -0.0877 -0.0840 -0.0962 -0.1116 -0.1104 -0.0654 -0.1248 -0.0679 -0.0250 -0.5310 -0.0936 -0.0843 -0.1320 -0.0811 -0.1020 -0.1019 -0.1242 -0.4246 -0.0564 -0.0707 -0.0714 -1.1986 -0.0643 -0.0956 -0.0497 -0.0805 -0.1332 -0.5544 -0.0695 -0.0698 -1.3492 -0.0971 -0.1134 -0.0901 -0.1132 -1.3832 -0.1053 -0.0996 -0.0870 -0.0805 -0.0864 -0.0790 -0.1178 -0.1168 -0.1163 -0.1102 -0.1043 -0.0478 -0.1181 -0.4087 -0.2213 -0.0842 -0.1188 -1.6226 -0.1068 -0.0737 -0.1026 -0.0596 -0.1180 -0.0865 -0.1310 -0.0845 -0.0976 -0.0734 -0.5806 -0.0710 -0.0920 -0.1083 -0.0834 -0.1033 -0.0422 -0.1062 -0.4157 -0.1909 -0.0788 -0.1249 -0.9744 -0.1070 -0.0770 -0.1019 -0.0576 -0.1055 -0.0845 -0.0649 -0.0836 -0.0929 -0.0765 -0.3785 -0.0921 -0.1360 -0.0537 -0.0927 -0.1019 -0.1359 -0.4199 -0.0759 -0.0925 -0.0751 -0.0729 -0.1026 -0.1008 -0.1100 -0.0781 -0.1079 -1.4324 -0.1119 -0.1060 -0.1127 -0.0852 -0.0903 -0.6329 -0.1553 -0.1581 -0.0973 -0.0330 -0.1309 -0.5427 -0.1488 -0.0738 -0.0997 -1.1724 -0.1105 -0.0801 -0.0928 -0.0549 -0.1067 -0.0888 -0.1607 -0.0527 -0.1010 -0.1019 -0.1867 -0.3896 -0.0582 -0.0901 -0.0795 -0.0803 -0.1146 -0.4200 -0.0447 -0.1359 -1.2359 -0.1052 -0.0976 -0.1044 -0.0883 -0.0910 -0.0898 -0.0696 -0.1099 -0.0427 -0.1092 -1.1158 -0.0992 -0.0852 -0.0624 -0.0726 -0.0857 -0.0941 -0.1037 -0.0779 -0.1483 -0.0815
S-7	public class Tuple { int x; int y; public Tuple ( int x, int y ) { this.x = x; this.y = y; } @Override public boolean equals ( Object o ) { if ( o instanceof Tuple ) { return this.x == ( ( Tuple ) o ) .x && this.y == ( ( Tuple ) o ) .y; } return false; } } public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer > > lst, int x ) { ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ; for ( int i = 0; i < lst.size ( ) ; i += 1 ) { for ( int j = lst.get ( 0 ) .size ( ) - 1; j > = 0; j -= 1 ) { if ( lst.get ( i ) .get ( i ) == x ) { result.add ( new GET_ROW ( ) .new Tuple ( i, i ) ) ; } } } return result; }
T-7	public class Tuple { int x; int y; public Tuple ( int x, int y ) { this.x = x; this.y = y; } @Override public boolean equals ( Object o ) { if ( o instanceof Tuple ) { return this.x == ( ( Tuple ) o ) .x && this.y == ( ( Tuple ) o ) .y; } return false; } } public static ArrayList < Tuple > get_row ( ArrayList < ArrayList < Integer > > lst, int x ) { ArrayList < Tuple > result = new ArrayList < Tuple > ( ) ; for ( int i = 0; i < lst.size ( ) ; i += 1 ) { for ( int j = lst.get ( i ) .size ( ) - 1; j > = 0; j -= 1 ) { if ( lst.get ( i ) .get ( j ) == x ) { result.add ( new GET_ROW ( ) .new Tuple ( i, j ) ) ; } } } return result; }
H-7	-0.18931086361408234	public class Tuple { int x; int y; public Tuple ( int x, int y ) { this.x = x ; this.y = y ; } @Override public boolean equals ( Object o ) { if ( o instanceof Tuple ) { return this.x == ( ( Tuple ) o ) .x && this.y == ( ( Tuple ) o ) .y ; } return false ; } }
D-7	-0.18931086361408234	public class Tuple { int x; int y; public Tuple ( int x, int y ) { this.x = x ; this.y = y ; } @Override public boolean equals ( Object o ) { if ( o instanceof Tuple ) { return this.x == ( ( Tuple ) o ) .x && this.y == ( ( Tuple ) o ) .y ; } return false ; } }
P-7	-0.0830 -1.4506 -0.0276 -0.1506 -0.1276 -0.1616 -0.8949 -0.0995 -0.1136 -1.0304 -0.1340 -0.0274 -0.1005 -0.0611 -0.1275 -0.8935 -0.0640 -0.0944 -0.0860 -0.0905 -0.1067 -0.0960 -0.1011 -0.0973 -0.1043 -1.3884 -0.0878 -0.0926 -0.0774 -0.0887 -0.0756 -0.7866 -0.1544 -0.2402 -0.0647 -0.0905 -0.0582 -0.0520 -0.1028 -0.8209 -0.0661 -0.0791 -0.0847 -0.1345 -0.1079 -0.0979 -0.0377 -0.0645 -0.0836 -0.0902 -0.1154 -0.1236 -0.0894 -0.1032 -0.1187 -0.0998 -0.1083 -0.0650 -0.0866 -0.1098 -0.0659 -0.0877 -0.1205 -0.3765 -0.0694 -0.0887 -0.0689 -0.1194 -0.1017 -0.0935 -0.0564 -0.0805 -0.0630 -0.0712 -0.0926 -0.0824 -0.4883 -0.0893 -0.0973 -0.0577 -0.7624 -0.0847 -0.1384 -0.1749
S-85	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-85	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-85	-0.17026253044605255	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-85	-0.17026253044605255	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-85	-0.0966 -0.0557 -1.5646 -0.0842 -0.6840 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0386 -0.1115 -0.9407 -0.0913 -0.0714 -0.0836 -0.0835 -1.1962 -0.0741 -0.6238 -0.0738 -0.0708 -0.0847 -0.0543 -1.2277 -0.0651 -0.1200 -0.1709 -0.0976 -0.0770 -1.5005 -0.1924 -0.0860 -0.0399 -0.0778 -0.0750 -0.1648 -0.4781 -0.1082 -0.0840 -0.0739 -0.0834 -0.0906 -0.5233 -0.1077 -0.0763 -0.0789 -0.0682 -0.9765 -0.0974 -0.0824 -0.0506 -0.1061 -0.0656 -0.5290 -0.0711 -0.3557 -0.0718 -0.0774 -0.1206 -0.0809 -0.0992 -0.0274 -0.0224 -0.0284 -0.0998 -0.9014 -0.1765 -0.1608 -0.0610 -0.0530 -0.0862 -0.1154 -0.0897 -0.0479 -0.1338 -0.1053 -0.0493 -0.1310 -0.1239 -0.0512 -0.0890 -0.1019 -0.0534 -0.1035 -0.1032 -0.0330 -0.0666 -0.0777 -0.0962 -0.1745 -0.1057 -0.0759 -0.0972 -0.0781 -0.9626 -0.0975 -0.0814 -0.0273 -0.0827 -0.1290 -0.0761 -0.0919 -0.1285 -0.3168 -0.0906 -0.0772 -0.0717 -0.3846 -0.0741 -0.0787 -0.0791 -0.0371 -0.0340 -0.0402 -0.0836 -0.0738 -0.5735 -0.1333 -0.1016 -0.0716 -0.0826 -0.0843 -0.6988 -0.0814 -0.0668 -0.2325 -0.1137 -0.0795 -0.8691 -0.0853 -0.3674 -0.0742 -0.1027 -0.1148 -0.1069 -0.1412 -0.0693 -0.0839 -0.0718 -0.2432 -0.0285 -0.0852 -0.0882 -0.0764 -0.1024 -0.7126 -0.1109 -0.1067 -0.0913 -0.0883 -0.0859 -0.0632 -0.0342 -0.0419 -0.1096 -0.0448 -0.7052 -0.0493 -0.0684 -0.0809 -0.0788 -0.1170 -0.1142 -0.0633 -0.0288 -0.0350 -0.0870 -0.1440 -0.0849 -0.0395 -0.0287 -0.0230 -0.4165 -0.1031 -0.1829 -0.1060 -0.1702 -0.0888 -0.0365 -0.0266 -0.0247 -0.0833 -0.1038 -0.0939 -0.1493 -0.1820 -0.2682 -0.1119 -0.0279 -0.0663 -0.1302 -0.0786 -0.1611 -0.0910 -0.1009 -0.0623 -0.0874 -0.1234 -0.0884 -0.0758
S-28	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-28	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-28	-0.19193942844867706	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-28	-0.19193942844867706	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-28	-0.0886 -0.0415 -1.1204 -0.0328 -0.0929 -0.0317 -0.0888 -0.0185 -0.1094 -0.9443 -0.0935 -0.0874 -0.0964 -0.3283 -0.0270 -0.0274 -0.1267 -1.8999 -0.0265 -0.0853 -0.0316 -0.0813 -0.0188 -0.1145 -0.8503 -0.1286 -0.0775 -0.0944 -2.2821 -0.0679 -0.5857 -0.0548 -0.0625 -0.0853 -0.0561 -1.3876 -0.0807 -0.7225 -0.0588 -0.2470 -0.1076 -0.0874 -0.2716 -0.1067 -0.0911 -0.0720 -0.0780 -0.7664 -0.0832 -0.1171 -0.1865 -0.1105 -0.0742 -0.3381 -0.0818 -0.0919 -0.0683 -0.1019 -0.0637 -0.0793 -0.0892 -0.1032 -0.2241 -0.2263 -0.1058 -0.0621 -0.0942 -0.6800 -0.1172 -0.1474 -0.9753 -3.2398 -0.0890 -0.0415 -0.1074 -0.0828 -0.0956 -0.0901 -0.1712 -0.0774 -0.1182 -0.1054 -0.1381 -0.0680 -0.0797 -0.0911 -0.0904 -0.1030 -0.0800 -0.0985 -0.0420 -0.0895 -0.0666 -0.1039 -0.0800 -0.1793 -0.0660 -0.0600 -0.3002 -0.6171 -0.0659 -0.0853 -1.1893 -0.0769 -0.1041 -0.7830 -0.0945 -0.0607 -0.0540 -0.0859 -0.0848 -0.1114 -0.0627 -0.0979 -0.0983 -0.6664 -0.1165 -0.2287 -0.1654 -0.2220 -0.0792 -0.1077 -0.5824 -0.1062 -0.1593 -0.1893 -0.0830 -0.0830 -0.0629 -0.1774 -0.1066 -0.0175 -0.1207 -0.0904 -0.0846 -0.0893 -0.0867 -0.0627 -0.0689 -0.0972 -0.4929 -0.1032 -0.0800 -0.0947 -0.1106 -0.1597 -0.0713 -0.4297 -0.0116 -0.1104 -0.0960 -0.0676 -0.0648 -0.0830 -0.2564 -0.0755 -0.0912 -0.1005 -0.0409 -0.0404 -0.0665 -0.0843 -0.0519 -0.0437 -0.0388 -0.1946 -0.1188 -0.0962 -0.0649 -0.0311 -0.0953 -0.0374 -0.0899 -0.0414 -0.0853 -0.0174 -0.1067 -0.0313 -0.0906 -0.0419 -0.0890 -0.0565 -0.0848 -0.0197 -0.1078 -0.0849 -0.0949 -0.1037 -0.1023 -0.0751 -0.0957
S-87	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-87	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-87	-0.2611237168312073	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-87	-0.2611237168312073	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-87	-0.0895 -0.0571 -1.5300 -0.0865 -0.9949 -0.0600 -0.0156 -0.1005 -1.8335 -0.0895 -0.5706 -1.1601 -0.0882 -0.0637 -0.0835 -0.0855 -1.4302 -0.0892 -1.0073 -0.0629 -0.1020 -0.0894 -0.1098 -0.0774 -0.0886 -1.0041 -0.0889 -1.0415 -0.0676 -0.1084 -1.8231 -0.0917 -0.3356 -0.1025 -0.0952 -0.0112 -0.0200 -0.0618 -1.6641 -0.1117 -0.0516 -0.0085 -1.1451 -0.1107 -0.0260 -0.0180 -1.2409 -0.1070 -0.0506 -0.0172 -1.2965 -0.1167 -0.0441 -0.0336 -0.0394 -1.4208 -0.1073 -0.0247 -0.0068 -1.4035 -0.0980 -0.0451 -0.0151 -0.0422 -1.4798 -0.0998 -0.0220 -0.0320 -0.0064 -0.0676 -0.0979 -0.0971 -0.1039 -1.7098 -0.0869 -1.0428 -0.0624 -0.0925 -0.0857 -0.0560 -1.0817 -0.0794 -1.0969 -0.0775 -0.2893 -0.1233 -0.0804 -0.5603 -0.1128 -1.0337 -0.1150 -0.3216 -0.1243 -0.0871 -0.1192 -0.7747 -0.1090 -0.0684 -0.0781 -0.0847 -0.0813 -0.0848 -0.1101 -0.0588 -0.1769 -0.1013 -0.0832 -0.1111 -0.6767 -0.1026 -0.0862 -0.0794 -0.0818 -0.0798 -0.0854 -0.0857 -0.1264 -0.2279 -0.1219 -0.0976 -0.0312 -0.0582 -0.0900 -0.1303 -0.1174 -0.0858 -0.1186 -0.9801 -0.1050 -0.0728 -0.0793 -0.0864 -0.0851 -0.0735 -0.1281 -0.0489 -0.0612 -0.0887 -0.0894 -0.1042 -0.0854 -0.1135 -1.2037 -0.1012 -0.0956 -0.0725 -0.0840 -0.0849 -0.2773 -0.1118 -0.0703 -0.0740 -0.0935 -0.1270 -0.0564 -0.0579 -1.2086 -0.0864 -0.1719 -0.1383 -0.0519 -0.0412 -0.2284 -0.0831 -0.0998 -0.1828 -0.0809 -0.1251 -0.2283 -0.3685 -0.1066 -0.0721 -0.1114 -0.0930 -0.1538 -0.2904 -0.1162 -0.1174 -0.1303 -0.1130 -0.0850 -0.0774 -0.0892 -0.1330 -0.0864 -0.0746
S-44	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len ) ) ; if ( is_prime ( fib.get ( len - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
T-44	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
H-44	-0.19815945625305176	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-44	-0.19815945625305176	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-44	-0.0830 -0.0415 -0.1625 -0.0630 -0.0882 -0.0277 -0.1165 -0.0894 -0.0744 -0.0828 -0.0906 -0.3021 -0.1095 -0.0786 -0.1366 -0.0877 -0.0860 -0.0830 -0.0668 -1.4003 -0.2364 -0.1066 -0.0633 -0.0772 -0.0855 -0.4750 -0.0929 -0.1161 -0.1107 -0.0857 -0.0937 -1.4865 -0.0971 -0.8072 -0.1007 -0.0697 -0.0884 -0.4741 -0.6305 -0.0824 -0.0544 -0.1717 -0.0820 -0.0830 -0.0892 -0.1110 -0.1257 -0.1847 -0.0996 -0.1722 -0.1054 -0.0836 -0.0793 -0.0520 -0.7482 -0.1020 -0.0923 -0.0679 -0.6032 -0.0882 -0.2421
S-67	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c - 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
T-67	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } public static String decode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 21 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
H-67	-0.21069295704364777	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
D-67	-0.21069295704364777	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : string.toCharArray ( ) ) { c = ( char ) ( ( ( ( int ) c + 5 ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; }
P-67	-0.0771 -0.0530 -1.0412 -0.0288 -0.0923 -0.0266 -0.1049 -0.7179 -0.1207 -0.0836 -0.0873 -1.4233 -0.0390 -0.0835 -0.0621 -0.7561 -0.1991 -0.0984 -0.0765 -0.1782 -0.1023 -0.1808 -0.0865 -0.0665 -0.0775 -0.1192 -0.0610 -0.0758 -0.2488 -0.1214 -0.0970 -0.0761 -0.2411 -0.1020 -0.1348 -0.0955 -0.0601 -0.1000 -0.1275 -0.1570 -0.6468 -0.1934 -0.0861 -0.5657 -0.4530 -0.0778 -0.1858 -0.6511 -0.0639 -0.0926 -0.0800 -0.1435 -0.1788 -0.0762 -0.1729 -0.0465 -0.0620 -0.0557 -0.0890 -0.0926 -0.1186 -0.0555 -0.1238 -0.9677 -0.1069 -0.1318 -0.0886 -0.0813 -0.1229 -0.1228 -0.0663 -0.1272 -1.9124 -0.2814 -0.1570 -0.0823 -0.0797 -0.1140
S-57	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-57	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-57	-0.17453859746456146	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-57	-0.17453859746456146	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-57	-0.1008 -0.0400 -0.0996 -0.2060 -0.1012 -0.0140 -0.0895 -0.0551 -0.0349 -0.0906 -0.0229 -0.0298 -0.1128 -0.1042 -0.1462 -0.1162 -0.0464 -0.0866 -0.0865 -0.2404 -0.0590 -0.0933 -0.0617 -0.1900 -0.0811 -0.0944 -0.0629 -1.0683 -0.1029 -0.0760 -0.1111 -0.0665 -0.0767 -0.6611 -0.0938 -0.0401 -0.0893 -0.0397 -0.2802 -0.0920 -0.1038 -0.0404 -0.0887 -0.5562 -0.0935 -0.0186 -0.0824 -0.0434 -0.7711 -0.1313 -0.1097 -0.0700 -0.0839 -0.0757 -2.3101 -0.3566 -0.0927 -0.4151 -0.4418 -0.0886 -0.0739 -0.5309 -0.0803 -1.7940 -0.0677 -0.0964 -0.1089 -0.1104 -0.0748 -0.0682 -0.0770 -0.0868 -0.0575 -0.0828 -0.0895 -0.1082 -0.0644 -0.0907 -0.0854 -0.8916 -0.0742 -0.1069 -0.0601 -0.0896 -1.9414 -0.0932 -0.0742 -0.1047 -0.1005 -0.0970 -0.0506 -0.8507 -0.0481 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0478 -0.0724 -0.0896 -0.0754 -0.0649 -0.0855 -0.0825 -0.0736 -0.0258 -0.0935 -0.0752 -0.3618 -0.1127 -0.0839 -0.0408 -0.0906 -2.0461 -0.0905 -0.0563 -0.1052 -0.0742 -0.0846 -0.0389 -0.6788 -0.0390 -0.0871 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1321 -0.1162 -0.0881 -0.0917 -0.0834 -0.0527 -0.1085 -0.0532 -0.0682 -0.2405 -0.1391 -0.1113 -0.0746 -0.0391 -0.0774 -0.0582 -0.0948 -0.0368 -0.0974 -0.1925 -0.1411 -0.1211 -0.0441 -0.0787 -0.0776 -0.1059 -0.0932 -0.1262 -0.0828 -0.6686 -0.0909 -0.0984 -0.0405 -0.1166 -0.1147 -0.1017 -0.0638 -0.4416 -0.0750 -0.0850
S-5	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, begin ) * poly ( xs, end ) < 0 ) { begin = center; } else { end = center; } } return begin; }
T-5	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, center ) * poly ( xs, begin ) > 0 ) { begin = center; } else { end = center; } } return begin; }
H-5	-0.20739920437335968	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
D-5	-0.20739920437335968	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
P-5	-0.0850 -0.0431 -0.0876 -0.0821 -0.1027 -0.2374 -0.0804 -0.1213 -0.0518 -0.0999 -0.6343 -0.1125 -0.1209 -0.0888 -0.0809 -0.1205 -0.0775 -0.0884 -0.9138 -0.1463 -0.1039 -0.1116 -0.0683 -0.0833 -0.6811 -0.0824 -0.0864 -0.1768 -0.0970 -0.0786 -0.3450 -0.0806 -0.0943 -0.0777 -0.0865 -0.1551 -0.0797 -0.0873 -0.1483 -0.0467 -0.1962 -0.1129 -0.1669 -0.1074 -0.0969 -0.0945 -0.0850 -2.7097 -0.0962 -0.0381 -0.1054 -0.1099 -1.5606 -0.1499 -0.0896 -0.1089 -0.0890 -0.1237 -0.1038 -0.2779 -0.0833 -0.2069
S-84	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-84	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-84	-0.17773741483688354	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-84	-0.17773741483688354	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-84	-0.0908 -0.0542 -0.9693 -0.0422 -0.0970 -0.0290 -0.1152 -0.7720 -0.0587 -0.0909 -0.0826 -1.4262 -0.0735 -0.0858 -0.0616 -0.0866 -1.5953 -0.0877 -0.1270 -0.0860 -0.6307 -0.0745 -0.0543 -0.0806 -0.3911 -0.0738 -0.0788 -0.0812 -0.4450 -0.0980 -0.1049 -0.1082 -0.0832 -0.1004 -0.1118 -0.0934 -0.4646 -0.0787 -0.0853 -0.0799 -0.1173 -0.1127 -0.0852 -0.1296 -0.7466 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0881 -0.0631 -1.1184 -0.0925 -0.1284 -0.1153 -0.1120 -0.2412 -0.1069 -0.0624 -0.0802 -0.1403 -0.0821 -0.1338 -0.0914 -0.0776 -0.0967 -0.0291 -0.0473 -0.0485 -0.0992 -0.8688 -0.1129 -0.1192 -0.7780 -0.1342 -0.1904 -0.1417 -0.0959 -0.0921 -0.0790 -0.1126 -0.1044 -0.1058 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1348 -0.1032 -0.0699 -0.0864 -0.0763 -0.0721 -1.0569 -0.0685 -0.0906 -0.0789 -0.9991 -0.0582 -0.0478 -0.1213 -0.0815 -0.0897 -0.0679 -0.1047 -0.0767 -0.0697 -0.0679 -0.2763 -0.0984 -0.1059 -0.1025 -0.0829 -0.0942 -0.0333 -0.1010 -0.7449 -0.1168 -0.1151 -0.6307 -0.0999 -0.2039 -0.1608 -0.0943 -0.0921 -0.0851 -0.0571 -0.0963 -0.0684 -0.1048 -0.0901 -0.0862 -0.0290 -0.1055 -0.4620 -0.1097 -0.0852 -0.5468 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0735 -0.0534 -0.1111 -0.0808 -0.0737 -0.5509 -0.0560 -0.1031 -0.0829 -0.0634 -0.4860 -0.1251 -0.0870 -0.0604 -0.7735 -0.0751 -0.0821 -0.0577 -0.0959 -0.0746 -0.1525 -0.0738 -0.0897
S-113	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-113	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-113	-0.11957515776157379	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-113	-0.11957515776157379	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-113	-0.0868 -0.0532 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1662 -0.0999 -0.0808 -0.0912 -0.0841 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0855 -0.0687 -0.1092 -0.1127 -0.0887 -0.1369 -0.0223 -0.0885 -0.1097 -0.0843 -0.0352 -0.0790 -0.0341 -0.2503 -0.1259 -0.1092 -0.0767 -0.0754 -0.0820 -0.9138 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0726 -0.1042 -0.1603 -0.0764 -0.0845 -0.1121 -0.1061 -0.0658 -0.0706 -0.0926 -0.6671 -0.0868 -0.0671 -0.0636 -0.1275 -0.0764 -0.4351 -0.0743 -0.0829 -0.1503 -0.0801 -0.0947 -0.1350 -0.0775 -0.0806 -0.0427 -0.0935 -1.9782 -0.0924 -0.0309 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1194 -0.0619 -0.0977 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0747 -0.1350 -0.0765 -0.0761 -0.0424 -0.3058 -0.2925 -0.1156 -0.0997 -0.0860 -0.0859 -0.0730 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0859 -0.0999 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0992 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0936 -0.1130 -0.0965 -0.0980 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0901 -0.0693 -0.1403 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1010 -0.0862 -0.1503 -0.1446 -0.0831 -0.0682 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0841 -0.0889 -0.0731 -0.2253 -0.0860 -0.0776
S-100	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
T-100	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString ( ) ; }
H-100	-0.16116033494472504	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-100	-0.16116033494472504	public static String encode ( String message ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : message.toCharArray ( ) ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-100	-0.0832 -0.0496 -0.9217 -0.0228 -0.1069 -0.8155 -0.0730 -0.0894 -0.0864 -1.2078 -0.0410 -0.0856 -0.0575 -0.6349 -0.1882 -0.0899 -0.0764 -0.2081 -0.1064 -0.0969 -0.0900 -0.0593 -0.0704 -0.1263 -0.0478 -0.0387 -0.2191 -0.0962 -0.0910 -0.0847 -0.1390 -0.1091 -0.9007 -0.0978 -0.0932 -0.1130 -0.1122 -0.1430 -0.0915 -0.0897 -0.0903 -0.1398 -0.1070 -0.3771 -0.0964 -0.2720 -0.1170 -0.1336 -0.0870 -0.0994 -0.1081 -0.1535 -0.1001 -0.7088 -0.0930 -0.0697 -0.0456 -0.1048 -0.1385 -0.0867 -0.0913 -0.0918 -0.1157 -0.1032 -0.2891 -0.0934 -0.3141 -0.1065 -0.1493 -0.0867 -0.0991 -0.0781 -0.2541 -0.1118 -0.2814 -0.1610 -0.0722 -0.1135 -0.0819 -0.1565 -0.1507 -0.2298 -0.0606 -0.1075 -0.0845 -0.2443 -0.1423 -0.2238 -0.0765 -0.0677 -0.1129 -0.2249 -0.1429 -0.2125 -0.0764 -0.0539 -0.1099 -0.1994 -0.1572 -0.1830 -0.0689 -0.0900 -0.0763 -0.1454 -0.1318 -0.1503 -0.0811 -0.0605 -0.0752 -0.1609 -0.1521 -0.1980 -0.0544 -0.1174 -0.0737 -0.1525 -0.1522 -0.2121 -0.0786 -0.0684 -0.0959 -0.1551 -0.1494 -0.2077 -0.0596 -0.0485 -0.0737 -0.1159 -0.1371 -0.1538 -0.0540 -0.0486 -0.0784 -0.0858 -0.0832 -0.1864 -0.1043 -0.1417 -0.0921 -0.0692 -0.0936 -0.1789 -0.1560 -0.0879 -0.3361 -0.1491 -0.1640 -0.0946 -0.0957 -0.1627 -0.0718 -0.1295 -0.9762 -0.1097 -0.1512 -0.0920 -0.0864 -0.1178 -0.0827 -0.0568 -0.1709 -1.6248 -0.1630 -0.1024 -0.0779 -0.0869
S-30	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-30	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-30	-0.13132023811340332	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-30	-0.13132023811340332	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-30	-0.0941 -0.0411 -0.0895 -0.2166 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2766 -0.0926 -0.0674 -0.0642 -0.0774 -0.0687 -0.0934 -0.0660 -0.1128 -0.0891 -0.0910 -0.1353 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6828 -0.0835 -0.1289 -0.2315 -0.0790 -0.1174 -0.0565 -0.0920 -0.0603 -0.1303 -0.2617 -0.0906 -0.0601 -0.0966 -0.1355 -0.1156 -0.0657 -0.0884 -0.0861 -0.7660 -0.0866 -0.1023 -0.1248 -0.0910 -0.0801 -0.2760 -0.0835 -0.1044 -0.1707 -0.0797 -0.0805 -0.2172 -0.0380 -0.0942 -0.3744 -0.1980 -0.0884 -0.1239 -0.1788 -0.0735 -0.0883 -0.1214 -0.0623 -0.0902 -0.0911 -0.1045 -0.0902 -0.1002 -2.0218 -0.0866 -0.0437 -0.1176 -0.1057 -0.0346 -0.1388 -0.0912 -0.1625 -0.1115 -0.0615 -0.0861 -0.0861 -0.6676 -0.0871 -0.1008 -0.0884 -0.0962 -0.0880 -0.2542 -0.0780 -0.0756 -0.2807 -0.0771 -0.0865 -0.2694 -0.1192 -0.1337 -0.1494 -0.0566 -0.1534 -0.1073 -0.0859 -0.0814 -0.0958 -0.0980 -0.1083 -0.0922 -0.1214 -0.2569 -0.0309 -0.1052 -0.2133 -0.1412 -0.0822 -0.1063 -0.0774 -0.0836 -0.1070 -0.0937 -0.0705 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0841 -0.0815 -0.1563 -0.1211 -0.0877 -0.0924 -0.1012 -0.0967 -0.0978 -0.2029 -0.0896 -0.0732
S-6	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-6	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-6	-0.18527871370315552	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-6	-0.18527871370315552	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-6	-0.0919 -0.0516 -0.3183 -0.0959 -1.0649 -0.0641 -0.0454 -0.0822 -0.0224 -0.1010 -0.2791 -0.0863 -1.0539 -0.0753 -0.0602 -0.0815 -0.0861 -0.2618 -0.0975 -1.0216 -0.0712 -0.1152 -0.0838 -0.0569 -1.8064 -0.0894 -1.2551 -0.0803 -0.2033 -0.0890 -0.0803 -0.2415 -0.0927 -1.0167 -0.0710 -0.0570 -0.0532 -0.0315 -0.0796 -0.0486 -1.5001 -0.0859 -0.9954 -0.0737 -0.2282 -0.1230 -0.0874 -0.0833 -0.1102 -0.0833 -0.0769 -0.0808 -0.7928 -0.0894 -0.1014 -0.1070 -0.1193 -0.1294 -0.3415 -0.0765 -0.0924 -0.0746 -0.0875 -0.0949 -0.0782 -0.0840 -0.2238 -0.0414 -0.0428 -0.2069 -0.2615 -0.1049 -0.0597 -0.1131 -0.1761 -0.1097 -0.0869 -0.0880 -0.0934 -0.0836 -0.0973 -1.5968 -0.0882 -0.0419 -0.1147 -0.0588 -0.0456 -0.0379 -0.1176 -0.1004 -0.1432 -0.1083 -0.0768 -0.0731 -0.0821 -0.5954 -0.0860 -0.0902 -0.0682 -0.1062 -0.1008 -0.1735 -0.0681 -0.0907 -0.0698 -0.0753 -0.4636 -0.0774 -0.0874 -0.2279 -0.1145 -0.1531 -0.2615 -0.0837 -0.1576 -0.1255 -0.0829 -0.0884 -0.0914 -0.1558 -0.2397 -0.1083 -0.4869 -0.0503 -0.0416 -0.1550 -0.1956 -0.1106 -0.0914 -0.0853 -0.0926 -0.0894 -0.0746 -0.0687 -0.0884 -0.0993 -0.1132 -0.1912 -0.1012 -0.0558 -0.1033 -0.1556 -0.1090 -0.0879 -0.0867 -0.0898 -0.0874 -0.0900 -0.0928 -0.0852 -0.0838 -0.1355 -0.0850 -0.0717
S-10	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += ( int ) c; } return result; }
T-10	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += c - '0'; } return result; }
H-10	-0.2363656461238861	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-10	-0.2363656461238861	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-10	-0.0842 -0.0450 -0.1557 -0.0674 -0.0906 -0.0297 -0.1209 -0.0878 -0.1168 -0.0878 -0.0925 -0.7363 -0.1114 -0.0755 -0.0794 -0.0903 -0.6950 -0.0975 -0.1921 -0.1140 -0.1023 -0.0987 -1.8347 -0.0979 -0.0414 -0.1094 -0.0801 -1.1406 -0.0178 -0.1070 -0.1843 -0.8946 -0.0865 -0.0833 -0.2157 -0.0844 -0.0888 -0.1135 -0.1155 -0.1439 -0.2164 -0.1061 -0.1735 -0.1091 -0.0880 -0.1040 -0.0833 -1.4285 -0.1149 -0.1019 -0.0642 -1.0471 -0.0878 -0.2287
S-110	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; result += str.substring ( 0, beginning_of_suffix ) ; return result; }
T-110	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; for ( int i = beginning_of_suffix - 1; i > = 0; i -= 1 ) { result += String.valueOf ( str.charAt ( i ) ) ; } return result; }
H-110	-0.20214515924453735	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
D-110	-0.20214515924453735	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
P-110	-0.0901 -0.0475 -0.2656 -0.0744 -0.0869 -0.0289 -0.0110 -0.1117 -0.5866 -0.0762 -0.0857 -0.0870 -0.3299 -0.1094 -0.0836 -0.0654 -0.0924 -1.0755 -0.0817 -0.1203 -0.3048 -0.1107 -0.0728 -0.3632 -0.0762 -0.0893 -0.0700 -0.0943 -0.1409 -0.0782 -0.0955 -0.1151 -0.1160 -0.2210 -0.1317 -0.8037 -0.1080 -0.1114 -0.0825 -0.1907 -0.1044 -0.1108 -0.8750 -0.1045 -0.3262 -0.1025 -0.0896 -0.2015 -0.0720 -0.1323 -0.3880 -1.1014 -0.1093 -0.0832 -0.0864 -0.0988 -0.0550 -0.7667 -0.1073 -0.0866 -0.0464 -0.7330 -0.0884 -0.1820
S-103	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { for ( int k = j; k < a; j += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
T-103	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { if ( ! is_prime ( j ) ) continue; for ( int k = j; k < a; k += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
H-103	-0.21694357693195343	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
D-103	-0.21694357693195343	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
P-103	-0.0898 -0.0468 -0.0919 -0.0699 -0.0906 -0.0480 -0.1231 -0.0880 -0.0843 -0.0844 -0.0934 -0.1533 -0.1143 -0.0779 -0.0829 -0.0886 -0.8406 -0.0962 -0.1277 -0.1003 -1.3584 -0.0781 -0.0936 -0.1744 -0.0838 -0.0924 -0.1305 -0.1124 -0.1690 -0.1577 -0.1004 -0.1984 -0.1023 -0.0837 -0.0897 -0.1239 -1.2898 -0.1136 -0.1034 -0.0707 -1.6233 -0.0857 -0.3014
S-45	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-45	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-45	-0.11678501218557358	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-45	-0.11678501218557358	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-45	-0.0895 -0.0523 -0.1162 -0.1804 -0.0938 -0.0528 -0.0245 -0.0842 -0.0655 -0.0889 -0.0334 -0.1123 -0.1128 -0.1313 -0.0919 -0.0634 -0.0892 -0.0799 -0.1023 -0.1230 -0.0852 -0.2756 -0.0916 -0.0661 -0.0922 -0.0467 -0.5967 -0.0631 -0.0467 -0.0731 -0.1902 -0.0871 -0.0230 -0.0845 -0.0492 -0.1783 -0.4068 -0.1065 -0.0907 -0.0756 -0.0808 -1.1509 -0.0870 -0.0932 -0.0975 -0.0907 -0.0780 -0.3527 -0.0758 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0726 -0.0688 -0.0794 -0.0893 -0.1521 -0.0742 -0.0835 -0.0992 -0.0748 -0.1276 -0.0711 -0.1036 -0.0886 -0.1011 -0.0930 -0.0726 -0.1010 -0.0707 -0.1020 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1167 -0.0931 -0.0773 -0.0790 -0.1214 -0.0527 -0.0887 -0.0890 -0.1181 -0.0937 -0.0838 -0.1035 -0.2043 -0.1670 -0.0535 -0.0668 -0.0977 -0.0630 -0.0785 -0.0631 -0.0483 -0.0889 -0.0661 -0.0919 -0.0825 -0.1064 -0.1106 -0.0730 -0.0720 -0.0881 -1.1273 -0.0928 -0.0812 -0.0796 -0.0957 -0.0752 -0.4064 -0.0747 -0.0909 -0.1397 -0.0783 -0.0895 -0.0832 -0.0848 -0.0970 -0.0769 -0.1277 -0.2030 -0.0947 -0.0870 -0.0869 -0.0872 -0.1036 -0.1249 -0.0888 -0.0737 -0.0949 -0.0961 -0.0599 -0.0557 -0.0965 -0.0964 -0.0869 -0.0814 -0.0703 -0.3035 -0.0809 -0.0785
S-74	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-74	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-74	-0.16850437223911285	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-74	-0.16850437223911285	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-74	-0.0981 -0.0355 -0.0509 -0.0455 -0.0992 -0.0355 -0.0275 -0.0859 -0.0824 -0.1199 -1.2302 -0.0659 -0.1016 -0.0552 -0.0429 -0.0896 -0.0868 -0.0484 -0.0669 -0.0970 -0.0683 -0.0880 -0.6123 -0.0839 -0.0586 -0.0885 -0.6274 -0.1514 -0.1021 -0.0370 -0.0961 -0.0689 -0.0397 -0.0878 -0.0814 -0.1254 -0.0420 -0.0607 -0.3806 -0.1704 -0.1063 -0.0886 -0.0937 -0.0822 -0.0911 -0.0836 -0.0758 -0.1382 -0.2956 -0.0899 -0.0475 -0.0827 -0.0709 -0.1249 -1.3348 -0.0923 -0.0828 -0.1056 -0.1003 -0.7616 -0.0651 -0.0907 -0.1021 -0.0924 -0.0959 -0.1083 -0.2350 -0.1084 -0.0561 -0.0862 -0.1015 -0.0845 -0.1147 -0.0901 -0.0973 -0.1376 -0.0997 -0.0728 -0.0937 -0.2326 -0.1931 -0.1085 -0.1860 -0.1126 -0.1478 -0.0973 -0.0927 -0.2388 -0.1090 -0.1435 -0.0745 -0.0844 -1.6993 -0.0899 -0.1219 -0.0481 -0.1218 -0.0999 -0.3369 -0.0805 -0.0854 -0.0794 -0.8591 -0.0780 -0.0926 -0.0724 -0.0926 -0.0682 -0.1042 -1.5770 -0.0916 -0.0867 -0.1092 -0.0713 -0.0904 -0.0929 -1.0774 -0.1952 -0.2158 -0.1117 -0.2710 -0.1102 -0.0949 -0.0914 -0.0914 -0.0930 -0.0897 -0.1149 -0.2141 -0.0818 -0.1046 -0.0768 -0.0942 -0.2523 -0.0927 -0.0759 -0.0784 -0.2871 -0.1419 -0.0678 -0.0843 -0.1030 -0.3750 -0.0784 -0.0826
S-1	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-1	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-1	-0.18689045310020447	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-1	-0.18689045310020447	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-1	-0.0881 -0.0419 -0.0991 -0.2080 -0.0733 -0.0438 -0.1076 -0.0904 -0.1559 -0.0931 -0.0617 -0.4538 -0.0808 -0.1239 -0.1029 -0.0577 -0.0560 -0.0792 -0.0924 -2.1641 -0.0674 -0.7676 -0.0573 -0.0559 -0.0915 -0.0570 -1.3790 -0.0811 -0.8497 -0.0610 -0.1762 -0.0970 -0.0881 -0.3267 -0.1107 -0.0681 -0.0755 -0.0873 -0.7798 -0.0789 -0.0804 -0.0877 -0.0418 -0.0726 -0.3934 -0.0684 -0.0776 -0.1656 -0.0777 -0.0793 -0.1031 -0.1075 -0.0718 -0.0766 -0.0973 -0.4748 -0.0892 -0.0577 -0.0590 -0.0354 -0.0742 -0.5481 -0.0625 -0.0864 -0.1215 -0.0798 -0.0968 -0.1202 -0.1154 -0.0894 -0.0840 -0.0800 -0.1135 -0.0834 -0.2238 -0.0370 -0.0643 -0.0807 -0.0638 -0.0762 -0.0881 -0.1914 -0.1487 -0.2234 -0.1109 -0.0877 -0.0704 -0.0995 -0.1173 -0.1049 -0.1331 -0.0975 -0.1138 -0.0849 -0.1290 -0.1971 -0.0487 -0.0580 -0.0888 -0.0754 -0.0699 -0.0804 -0.0817 -0.1178 -0.1200 -2.6190 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7072 -0.1010 -0.1116 -0.8694 -0.0728 -0.0628 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.7033 -0.0381 -0.0509 -0.8185 -0.0838 -1.4140 -0.0822 -0.0425 -0.1081 -0.0594 -0.0804 -0.0923 -0.0920 -0.0600 -0.2424 -0.0811 -0.0660
S-80	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
T-80	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( number > 0 ) { int div = ( int ) ( number / num [ i ] ) ; while ( div > 0 ) { result += sym [ i ] ; div -= 1; } number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
H-80	-0.26509717106819153	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
D-80	-0.26509717106819153	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
P-80	-0.0907 -0.0554 -1.6003 -0.0819 -0.0943 -0.0529 -0.0825 -0.0207 -0.0883 -0.0077 -0.0402 -0.1147 -0.0995 -0.0533 -0.0836 -0.0878 -0.1465 -0.2137 -0.0596 -0.0344 -0.0833 -0.0651 -0.0671 -0.0785 -0.0930 -0.0869 -0.6990 -0.1512 -0.0753 -0.2029 -0.0894 -0.0558 -0.0391 -0.0863 -0.1446 -0.2114 -0.0489 -0.0352 -0.0691 -0.1713 -0.0409 -0.0911 -0.0867 -1.3922 -0.1541 -0.0530 -0.1356 -0.0836 -0.0704 -0.7963 -0.0627 -0.1095 -0.0827 -0.1033 -0.0448 -1.1800 -0.1061 -0.0145 -1.2552 -0.1156 -0.0544 -1.3833 -0.1166 -0.0380 -1.2194 -0.1093 -0.0408 -1.1401 -0.1103 -0.0459 -0.0647 -1.5667 -0.1074 -0.3025 -1.7739 -0.1073 -0.0381 -0.0452 -1.4267 -0.1133 -0.0791 -1.4412 -0.1112 -0.0323 -1.3370 -0.1011 -0.0451 -1.4098 -0.1053 -0.0208 -1.2532 -0.0966 -0.0578 -0.0648 -0.0965 -0.0860 -0.1652 -0.1100 -0.0915 -0.0554 -0.3860 -1.1426 -0.0916 -0.0884 -1.2546 -0.0750 -0.1225 -0.1618 -0.1249 -0.1336 -0.0889 -0.0802 -0.1288 -0.0657 -0.1556 -0.0868 -0.1463 -0.0696 -0.1063 -0.2478 -0.2484 -0.0281 -0.0380 -0.0755 -0.0958 -0.0691 -0.0937 -0.0874 -0.0331 -0.8951 -0.1040 -0.2532 -0.1223 -0.5326 -0.5739 -0.5541 -0.1037 -0.0958 -0.0868 -0.0625
S-24	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-24	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-24	-0.1202855259180069	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-24	-0.1202855259180069	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-24	-0.0979 -0.0450 -2.0645 -0.1614 -0.0833 -0.0184 -0.0863 -0.1716 -0.0960 -0.0312 -0.1127 -0.1149 -0.1261 -0.0847 -0.0417 -0.0902 -0.0783 -2.2764 -0.1318 -0.0576 -0.0519 -0.0916 -0.0446 -0.0878 -0.0536 -0.9437 -0.0743 -0.0422 -0.1078 -0.0566 -0.0830 -0.0944 -0.1083 -0.1054 -0.0829 -0.0679 -0.0843 -0.6994 -0.0896 -0.0850 -0.0688 -0.1095 -0.0524 -0.2233 -0.0724 -0.0718 -0.1730 -0.0781 -0.0902 -0.1549 -0.0577 -0.0419 -0.0962 -0.0379 -0.0865 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0397 -0.4205 -0.0292 -0.0884 -0.0778 -0.0949 -0.0584 -0.0948 -0.0970 -0.0772 -0.0986 -0.0958 -0.0507 -0.1323 -0.6005 -0.0983 -0.1034 -0.1115 -0.0796 -0.0470 -0.2142 -0.0388 -0.0866 -0.0441 -0.0871 -0.0526 -0.0864 -0.1108 -0.0856 -0.0981 -0.1016 -0.0478 -0.4319 -0.0711 -0.0965 -0.1127 -0.0745 -0.0474 -0.1363 -0.0319 -0.0807 -0.0379 -0.0875 -0.0572 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0630 -0.0409 -0.4457 -0.0760 -0.1007 -0.1121 -0.0732 -0.0428 -0.1331 -0.0141 -0.0926 -0.0389 -0.0914 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0648 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1152 -0.0425 -0.0886 -0.0368 -0.0888 -0.0576 -0.0865 -0.0995 -0.0815 -0.1113 -0.1076 -0.0624 -0.5178 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0356 -0.0838 -0.0397 -0.0884 -0.0576 -0.0861 -0.0975 -0.0792 -0.1011 -0.1076 -0.0864 -0.0419 -0.5299 -0.0699 -0.0948 -0.1119 -0.0679 -0.0420 -0.1329 -0.0273 -0.0946 -0.0416 -0.0928 -0.0558 -0.0875 -0.1004 -0.0795 -0.1111 -0.1197 -0.0655 -0.0992 -0.4952 -0.0828 -0.0941 -0.1090 -0.0674 -0.0483 -0.1332 -0.0084 -0.0930 -0.0427 -0.0900 -0.0591 -0.0838 -0.1029 -0.0837 -0.1090 -0.1048 -0.0514 -0.0346 -0.4443 -0.0760 -0.0863 -0.1129 -0.0731 -0.0444 -0.1178 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0865 -0.1042 -0.0850 -0.1146 -0.1145 -0.0719 -0.0926 -0.5238 -0.0892 -0.0946 -0.1077 -0.0673 -0.0480 -0.1233 -0.0144 -0.0861 -0.0381 -0.0914 -0.0588 -0.0869 -0.1014 -0.0909 -0.1092 -0.1080 -0.0475 -0.2676 -0.0653 -0.0892 -0.1133 -0.0724 -0.0452 -0.1115 -0.0226 -0.0899 -0.0376 -0.0883 -0.0631 -0.0886 -0.0983 -0.0909 -0.1208 -0.1117 -0.0523 -0.2764 -0.0658 -0.2521 -0.1126 -0.0776 -0.0406 -0.1199 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0885 -0.0974 -0.0815 -0.1223 -0.1116 -0.0637 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0639 -0.0752 -0.0930 -0.0809 -0.1348 -0.0989 -0.0422 -0.4579 -0.0822 -0.1111 -0.0432 -0.1031 -0.0477 -0.3349 -0.0906 -0.0952
S-77	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-77	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-77	-0.19095610082149506	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-77	-0.19095610082149506	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-77	-0.0872 -0.0472 -1.2818 -0.1682 -0.1113 -0.0458 -0.0778 -0.0425 -0.0826 -0.0248 -0.1071 -1.3028 -0.1543 -0.1029 -0.0381 -0.0851 -0.0928 -1.1958 -0.0732 -0.7863 -0.0701 -0.0333 -0.0892 -0.0500 -1.2239 -0.0885 -0.9764 -0.0716 -0.1485 -0.0795 -0.0800 -1.2019 -0.0800 -0.6862 -0.4659 -0.8319 -0.0836 -0.6106 -0.0586 -0.0548 -0.0195 -0.0624 -0.0551 -0.0796 -0.0425 -1.0094 -0.0904 -0.7747 -0.8276 -0.8471 -0.0768 -0.4875 -0.0602 -0.1087 -0.1653 -0.0822 -0.0846 -0.2050 -0.1081 -0.0667 -0.0718 -0.0752 -0.5590 -0.0800 -0.0774 -0.0689 -0.0953 -0.0534 -0.3508 -0.0604 -0.0814 -0.1472 -0.0788 -0.0829 -0.0786 -0.0394 -0.0961 -0.8700 -0.0804 -0.0829 -0.0791 -0.0624 -0.0777 -0.0694 -0.0858 -0.0818 -0.1624 -0.1061 -0.0746 -0.0762 -0.0925 -0.0836 -0.0824 -0.0681 -0.0960 -0.3985 -0.0507 -0.0545 -0.9032 -0.0694 -0.1139 -0.1607 -0.1419 -0.0798 -0.0678 -0.0859 -0.2232 -0.0532 -0.0940 -0.0571 -0.0775 -0.0752 -0.4471 -0.0765 -0.0742 -0.0853 -0.0675 -0.0753 -0.0558 -0.0835 -0.1062 -0.0705 -0.0607 -0.2213 -0.0898 -0.1060 -0.0613 -1.4521 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0725 -0.0689 -0.0903 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0725 -0.1292 -0.0698 -0.0571 -0.0811 -0.0453 -0.1348 -0.0074 -0.0798 -0.0561 -0.1025 -1.2082 -0.0674 -0.0471 -0.1294 -0.1177 -0.1097 -0.0479 -0.0983 -0.0856 -0.4433 -0.1043 -0.0328 -0.0362 -0.1019 -0.0486 -0.0974 -0.4740 -0.0363 -0.1071 -0.0756 -0.0918 -0.0947 -0.0359 -0.1030 -0.0570 -0.1060 -0.1266 -0.1013 -0.0585 -0.8637 -0.0476 -0.6363 -0.0984 -0.6429 -0.0708 -0.2796 -0.0785 -0.1003 -0.1037 -0.0325 -0.1199 -0.0617 -0.1099 -0.0931 -0.1038 -0.0672 -0.0891 -0.0966 -0.1747 -0.1075 -0.0605 -0.0769 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3472 -0.0841 -0.0600 -0.1156 -0.0387 -0.1098 -0.0899 -0.8864 -0.0881 -0.6129 -0.0900 -0.0740 -0.0969 -0.0517 -1.1699 -0.0824 -0.8524 -0.0677 -0.2472 -0.1002 -0.0806 -0.0843 -0.1082 -0.0596 -0.0600 -0.0777 -0.4447 -0.0675 -0.0742 -0.0561 -0.1233 -0.1442 -0.5095 -0.0643 -0.0925 -0.0595 -0.0732 -0.1215 -0.0824 -0.0992 -0.0716 -0.1062 -1.0870 -0.1125 -0.0395 -0.1411 -0.0594 -0.1354 -0.2002 -0.1140 -0.0426 -0.1236 -0.3369 -0.1008 -0.0762 -0.0946 -0.0938 -0.1105 -0.0872 -0.0724 -0.0659 -0.0683 -0.1636 -1.0337 -0.1205 -0.0347 -1.0926 -0.0809 -0.2062 -0.1144 -0.0944 -0.0925 -0.0885 -0.0762 -0.0792
S-3	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-3	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-3	-0.17252114415168762	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-3	-0.17252114415168762	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-3	-0.0860 -0.0525 -0.0791 -0.0392 -0.0965 -0.0448 -0.1175 -1.2954 -0.0520 -0.0803 -0.0919 -0.5215 -0.0919 -3.2844 -0.0777 -0.2414 -0.0864 -0.2314 -1.1799 -0.0386 -0.1151 -0.1024 -0.0762 -0.0490 -0.1264 -0.5835 -0.1237 -0.0294 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1356 -0.1256 -0.0850 -0.1210 -0.0559 -0.0803 -0.0860 -0.0637 -1.5735 -0.1044 -0.0646 -0.0938 -0.8547 -0.0950 -1.3096 -0.1055 -0.0420 -0.0926 -0.1048 -0.0694 -0.0929 -0.0759 -0.0970 -0.0895 -0.0700 -0.0395 -0.0908 -0.8128 -0.0937 -1.2208 -0.1061 -0.0414 -0.0905 -0.0923 -0.0896 -0.1225 -0.0672 -0.0909 -0.0936 -0.0924 -0.0852 -0.0845 -0.5996 -0.0910 -1.2872 -0.1032 -0.0375 -0.0882 -0.0833 -0.0698 -0.0866 -0.0725 -0.0856 -0.0877 -0.2235 -0.1065 -0.1381 -0.0821 -0.1310 -0.1099 -0.0952 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8057 -0.0991 -0.1725 -0.0589 -0.0835 -0.0853 -0.0730 -0.0618 -0.0890 -0.0848 -0.1466 -0.0399 -0.0422 -0.0472 -0.0637 -0.1145 -0.0329 -0.0655 -0.0924 -0.1951 -0.1037 -0.0644 -0.0866 -0.0691 -0.4248 -0.0810 -0.0707 -0.1306 -0.0969 -0.0679 -0.0459 -0.0793 -0.9638 -0.0708 -0.2724 -0.0751 -0.1015 -0.1116 -0.1092 -0.1312 -0.1550 -0.0768 -0.1050 -0.0614 -0.0810 -0.0789 -0.0746 -0.0543 -0.9972 -0.2164 -0.1032 -0.0475 -0.0632 -0.0945 -0.1009 -0.0594 -0.0895 -0.0131 -0.0760 -0.0902 -0.0632 -0.0764 -0.6089 -0.0932 -0.1023 -0.1144 -0.0580 -0.1078 -0.0910 -0.0641 -0.0823 -0.0927 -0.0693 -0.0848 -0.0315 -0.1064 -0.0389 -0.0728 -0.0968 -0.0985 -0.1002 -0.0644 -0.0773 -0.0755 -0.4490 -0.0831 -0.0590 -0.1374 -0.0965 -0.0751 -0.0341 -0.0793 -0.6904 -0.0691 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1545 -0.1790 -0.0908 -0.0990 -0.0654 -0.1616 -0.0882 -0.0752 -0.0621 -0.4396 -0.1582 -0.0702 -0.0816 -0.1114 -0.0770 -0.0630 -0.0961 -0.0301 -0.0820 -0.0824 -0.0604 -0.0825 -0.4847 -0.0829 -0.1317 -0.1042 -0.0997 -0.0861 -0.1345 -0.1790 -0.1256 -0.0519 -0.0652 -0.0871 -0.0661 -0.0536 -0.0984 -0.0446 -0.0773 -0.0901 -0.0590 -0.0632 -0.7857 -0.1054 -0.0698 -0.1152 -0.1882 -0.0618 -0.0780 -0.1058 -0.0838 -0.0752 -0.5682 -0.0811 -0.0802 -0.0660 -1.3016 -0.0843 -0.0906
S-27	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-27	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-27	-0.17625609040260315	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-27	-0.17625609040260315	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-27	-0.0890 -0.0401 -0.0945 -0.0337 -0.0830 -0.0574 -0.0890 -0.0077 -0.1102 -1.2867 -0.0614 -1.0158 -0.0535 -0.0712 -0.0848 -0.0871 -0.2150 -0.1060 -0.0726 -0.1537 -0.1337 -0.2510 -0.0714 -0.0822 -0.0874 -0.0808 -0.0887 -0.1167 -0.8667 -1.1889 -0.0694 -0.7433 -0.0563 -0.1818 -0.0786 -0.0345 -0.0780 -0.0559 -1.0512 -0.0818 -0.1002 -0.1122 -0.0929 -0.0811 -0.0877 -1.5517 -0.0894 -0.0404 -0.1068 -0.2128 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1937 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2365 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3220 -0.1153 -0.0901 -0.0941 -0.1991 -0.1118 -0.0873 -0.0418 -0.0786 -0.8492 -0.1265 -0.1018 -0.0808 -0.0897 -0.0766 -0.9206 -0.0897 -0.0769 -0.0985 -0.1032 -0.1206 -0.2009 -0.0664 -0.0915 -0.0843 -0.6482 -0.0730 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1924 -0.1149 -0.0826 -0.0911 -0.2140 -0.1584 -0.0799 -0.0533 -0.0874 -0.2525 -0.0857 -0.0524 -0.1023 -0.0783 -1.0946 -0.0809 -1.1000 -0.0849 -0.4941 -0.0567 -0.0510 -0.0745 -0.0660 -0.0899 -0.0405 -0.0851 -0.0418 -0.8184 -0.0782 -0.0912 -0.1942 -0.1149 -0.0803 -0.0881 -0.1077 -0.0780 -0.0874 -0.0735 -0.7709 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2057 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1373 -0.1022 -0.0884 -0.1026 -0.0466 -0.1279 -0.2017 -0.1089 -0.0670 -0.1045 -0.1888 -0.1109 -0.0873 -0.0963 -0.0980 -0.0946 -0.0846 -0.0977 -0.0997 -0.0791 -0.0837 -0.0789 -0.6039 -0.0973 -0.0754 -1.0468 -0.0990 -0.1107 -0.2535 -0.0674 -0.0919 -0.0844 -0.5319 -0.0760 -0.0891 -0.1590 -0.0919 -0.1007 -0.1022 -0.0416 -0.0989 -0.1641 -0.1044 -0.0625 -0.1078 -0.2109 -0.1156 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0739 -0.0783 -0.4451 -0.0950 -0.0618 -0.0843 -0.1015 -0.0965 -0.1770 -0.0704 -0.0932 -0.0778 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0968 -0.0978 -0.0948 -0.0994 -0.0410 -0.1230 -0.2145 -0.1187 -0.0884 -0.0921 -0.1184 -0.2104 -0.0972 -0.0630 -0.1383 -0.2608 -0.1062 -0.0774 -0.0924 -0.0910 -0.1367 -0.0902 -0.0836 -1.3774 -0.0984 -0.0714 -0.0617 -0.0677 -1.0212 -0.0875 -0.0817
S-106	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-106	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-106	-0.1681201159954071	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-106	-0.1681201159954071	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-106	-0.0894 -0.0544 -1.0349 -0.0836 -0.2444 -0.2425 -0.8945 -0.0573 -0.0360 -0.1027 -0.9788 -0.1389 -0.0842 -0.0884 -0.9198 -0.0856 -0.2620 -0.2321 -0.7755 -0.0578 -0.1313 -0.0848 -0.0578 -1.1015 -0.0891 -0.3754 -0.2509 -0.6448 -0.0649 -0.1609 -0.0893 -0.0836 -0.2231 -0.1187 -0.1231 -0.1927 -1.1496 -0.5339 -0.0801 -0.0887 -0.1109 -0.1419 -0.2340 -1.5431 -0.1898 -0.0955 -0.0595 -0.0874 -0.0590 -0.0812 -0.0616 -0.1224 -0.3384 -0.1063 -0.0749 -0.0760 -0.0847 -0.0915 -0.1168 -0.2477 -0.0515 -0.2073 -0.0820 -0.2295 -0.0899 -0.0502 -0.0708 -0.0857 -0.0318 -0.1000 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0742 -0.6014 -0.0881 -0.0713 -0.1023 -0.1044 -0.0652 -0.1296 -0.0660 -0.3701 -0.0747 -0.4140 -0.0740 -0.0896 -0.1699 -0.0724 -0.0851 -0.0640 -0.1095 -0.0739 -0.0923 -0.0733 -0.0880 -0.1007 -1.0249 -0.1302 -0.1148 -0.0874 -0.0808 -0.1793 -0.0825 -0.2589 -0.0802 -0.0901 -0.2790 -0.0391 -0.0455 -0.0516 -0.0848 -0.0347 -0.9960 -0.0977 -0.0698 -0.0368 -0.0994 -0.0989 -0.0967 -0.6666 -0.1128 -0.1048 -0.0562 -0.0841 -0.0809 -0.6297 -0.0812 -0.0891 -0.0375 -1.0494 -0.0653 -0.3046 -0.0718 -0.0928 -0.0995 -0.1062 -0.1811 -0.0982 -0.2187 -0.0809 -0.0851 -0.0643 -0.1077 -0.0323 -0.0807 -0.0864 -0.0900 -0.1145 -0.0555 -0.0975 -0.0918 -0.1113 -0.1471 -0.0880 -0.2564 -0.0858 -0.0989 -0.0866 -0.0858 -0.2122 -0.1054 -0.2029 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2839 -0.1126 -0.1754 -0.1507 -0.0743 -0.1052 -0.0675 -0.0547 -0.0557 -0.1034 -0.1066 -0.0915 -0.1108 -0.0404 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0772 -0.1049 -0.2953 -0.0929 -0.2213 -0.0693 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1120 -0.0911 -0.1171 -0.1439 -0.1015 -0.2218 -0.1066 -0.1257 -0.1258 -0.0762 -0.1004 -0.0794 -0.0541 -0.0620 -0.0722 -0.1016 -0.0883 -0.1438 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1062 -0.3397 -0.1100 -0.0253 -0.0950 -0.1009 -0.1187 -0.1110 -0.0888 -0.2831 -0.1165 -0.2107 -0.2082 -0.1054 -0.0827 -0.0809 -0.1236 -0.1462 -0.0844 -0.0802
S-15	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString ( ) ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString ( ) ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
T-15	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString ( ) ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString ( ) ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) temp_a = ( ( Integer ) a ) .doubleValue ( ) ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue ( ) ; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
H-15	-0.1740046888589859	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
D-15	-0.1740046888589859	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue ( ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue ( ) ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
P-15	-0.0861 -0.0398 -0.7296 -0.0228 -0.0891 -0.0629 -0.1070 -0.6714 -0.0813 -0.5657 -0.4195 -0.0697 -0.0824 -0.0892 -0.1340 -0.0700 -0.0883 -0.0572 -0.0914 -0.5493 -0.1385 -0.0967 -0.0652 -0.0863 -0.4843 -0.1159 -0.1021 -0.1344 -0.0461 -0.4275 -0.0910 -0.0931 -0.8744 -0.0993 -0.0942 -0.0562 -0.0935 -0.0522 -0.0801 -0.1330 -0.1212 -2.4696 -0.4366 -0.1108 -0.1672 -0.0966 -0.0622 -0.1228 -0.0586 -0.0824 -0.1174 -0.0861 -0.0564 -0.0859 -0.0468 -0.1801 -0.9259 -0.1036 -0.6568 -0.0312 -0.0337 -0.0848 -0.0929 -0.1025 -0.0902 -0.0737 -0.1001 -0.1797 -0.0905 -0.7722 -0.0891 -0.0964 -0.0818 -0.0615 -0.0769 -0.0457 -0.0935 -0.0886 -0.0791 -0.1290 -0.1072 -0.0763 -0.0442 -0.2874 -0.0829 -0.0887 -0.3888 -0.0790 -0.0837 -0.0487 -0.0814 -0.0471 -0.0830 -0.0509 -0.2908 -0.3454 -0.0742 -0.0992 -0.0961 -0.0906 -0.0573 -0.1055 -0.0572 -0.0892 -0.0985 -0.0904 -0.0610 -0.0860 -0.0382 -0.1431 -0.8774 -0.1008 -0.5848 -0.0445 -0.0314 -0.0782 -0.0918 -0.0831 -0.0910 -0.0723 -0.0974 -0.1637 -0.0874 -0.7017 -0.0974 -0.0953 -0.0810 -0.0618 -0.0833 -0.0412 -0.0865 -0.0820 -0.0651 -0.0918 -0.1053 -0.1053 -0.0444 -0.1958 -0.0858 -0.1494 -0.1042 -0.0472 -0.0893 -0.0961 -0.1091 -1.2853 -0.0734 -0.2430 -0.0928 -0.1170 -0.0887 -0.0583 -0.2135 -0.0840 -0.0783 -0.1198 -0.1111 -0.0800 -0.0526 -0.2011 -0.0864 -0.1028 -0.0842 -0.0738 -0.0852 -0.1205 -0.1119 -1.1221 -0.0742 -0.1370 -0.0852 -0.0912 -0.0808 -0.0616 -0.1370 -0.0736 -0.0797 -0.1536 -0.1077 -0.0910 -0.0494 -1.3430 -0.1006 -0.1138 -0.1025 -0.0601 -0.1112 -0.1028 -0.7860 -0.0773 -0.1251 -0.6820 -0.1190 -0.1094 -0.0693 -0.0740 -0.4078 -0.0902 -0.0948 -0.0949 -0.0963 -0.0951 -0.1241 -0.2386 -0.0786 -0.0725 -0.3715 -0.1240 -0.1161 -0.1101 -0.0975 -0.0823 -0.1871 -0.0974 -0.0921 -0.0920 -0.0786 -0.0867 -0.1628 -0.8829 -0.2936 -0.1190 -0.1151 -0.0991 -0.0834 -0.1677 -0.1041 -0.0853 -0.0725 -0.0868 -0.0726 -0.1219 -0.7628 -0.1217 -0.0840 -0.0732 -0.7674 -0.0782 -0.0755
Generate test with beam=5: BLEU = 82.77 97.6/95.5/93.1/90.9 (BP = 0.878 ratio = 0.885 hyp_len = 12738 ref_len = 14391)

S-71	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
T-71	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length ( ) == 1 ) flag = 1; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result.trim ( ) ; }
H-71	-0.24183529615402222	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
D-71	-0.24183529615402222	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length ( ) ; i += 1 ) { if ( word.length ( ) % i == 0 ) flag = 1; } if ( flag == 0 || word.length ( ) == 2 ) result += word + " "; } return result. trim () ; }
P-71	-0.1048 -0.0625 -1.5618 -0.0156 -0.0921 -0.0693 -0.0874 -0.0637 -0.1138 -1.0825 -0.0467 -0.0897 -0.0875 -1.8176 -0.1002 -0.0838 -1.7144 -0.1646 -0.1119 -1.6412 -0.0578 -0.0669 -0.0266 -0.1206 -0.3774 -0.1154 -0.0825 -0.0730 -0.0877 -0.0942 -0.0869 -0.1459 -0.0473 -0.0819 -0.6246 -0.1209 -0.1127 -0.0765 -0.0724 -0.0858 -0.9740 -0.1033 -0.1608 -0.1145 -0.1077 -0.0763 -0.4370 -0.0878 -0.0880 -0.0745 -0.1171 -0.2330 -0.0783 -0.0923 -0.1387 -0.1201 -0.1378 -0.1888 -0.1062 -0.1678 -0.0812 -0.2449 -0.0889 -0.1620 -0.1070 -0.0825 -0.0500 -0.1202 -1.8156 -0.1129 -0.1672 -0.1176 -0.0840 -0.0940 -0.1895 -0.6178 -0.1346 -0.1896 -0.1352 -0.1983 -0.0779 -0.1251 -0.2919 -0.0910 -0.1687 -0.0949 -0.0564 -0.1068 -0.1262 -0.0222 -0.1343 -0.2263 -0.0978 -0.3143 -1.4006 -0.2734 -0.1072 -0.0841 -0.0777
S-95	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-95	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-95	-0.19924645125865936	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-95	-0.19924645125865936	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-95	-0.1024 -0.0461 -0.1130 -0.0763 -0.0150 -0.0877 -0.0542 -0.0144 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1048 -0.0941 -0.0831 -0.7411 -0.1544 -0.1074 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1042 -0.0936 -0.4663 -0.0784 -0.0872 -0.1800 -0.0776 -0.0875 -0.2238 -0.1114 -0.2078 -0.2713 -0.0580 -0.1662 -0.0987 -0.3491 -0.1008 -0.1979 -0.0337 -0.1407 -0.0957 -0.0806 -0.0892 -0.1650 -0.1075 -0.0787 -0.0911 -0.0935 -0.8908 -0.0979 -0.0761 -0.2112 -0.1894 -0.7222 -0.0639 -0.3528 -0.0876 -0.0845 -0.0725 -0.0948 -0.1584 -0.0751 -0.0994 -0.1365 -0.1119 -0.1904 -0.2459 -0.5952 -1.9051 -0.1140 -0.1077 -1.1316 -0.0811 -0.1102 -0.1159 -0.1080 -0.4280 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7577 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1196 -0.2475 -0.0849 -0.0749
S-1	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-1	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length ( ) ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-1	-0.19924652576446533	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
D-1	-0.19924652576446533	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length ( ) ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1 ; } } } return result ; }
P-1	-0.1024 -0.0461 -0.1130 -0.0763 -0.0150 -0.0877 -0.0542 -0.0144 -0.1175 -0.0942 -0.0675 -0.0865 -0.0903 -0.1048 -0.0941 -0.0831 -0.7411 -0.1544 -0.1074 -0.0757 -0.0760 -0.0827 -0.7360 -0.0864 -0.1042 -0.0936 -0.4663 -0.0784 -0.0872 -0.1800 -0.0776 -0.0875 -0.2238 -0.1114 -0.2078 -0.2714 -0.0580 -0.1662 -0.0987 -0.3491 -0.1008 -0.1979 -0.0337 -0.1407 -0.0957 -0.0806 -0.0892 -0.1650 -0.1075 -0.0787 -0.0911 -0.0935 -0.8908 -0.0979 -0.0761 -0.2112 -0.1894 -0.7222 -0.0639 -0.3528 -0.0876 -0.0845 -0.0725 -0.0948 -0.1584 -0.0751 -0.0994 -0.1365 -0.1119 -0.1904 -0.2459 -0.5952 -1.9051 -0.1140 -0.1077 -1.1316 -0.0811 -0.1102 -0.1159 -0.1080 -0.4280 -0.1239 -0.0164 -0.0919 -0.1186 -0.0817 -1.7577 -0.1202 -0.1083 -0.0968 -0.0875 -0.0975 -0.1196 -0.2475 -0.0849 -0.0749
S-12	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
T-12	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result; }
H-12	-0.14478594064712524	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
D-12	-0.14478594064712524	public static int sum_squares ( int [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst [ i ] * lst [ i ] ; else if ( i % 3 == 0 ) result += lst [ i ] * lst [ i ] ; else result += lst [ i ] ; } return result ; }
P-12	-0.0987 -0.0474 -0.1181 -0.0913 -0.1123 -0.0194 -0.0707 -0.1168 -0.1195 -0.1695 -0.1123 -0.0755 -0.0886 -0.0843 -0.0932 -0.0844 -0.0922 -1.5419 -0.1445 -0.1008 -0.0708 -0.0768 -0.0855 -1.5015 -0.0884 -0.1084 -0.4041 -0.0979 -0.0512 -0.2954 -0.0819 -0.1204 -0.2662 -0.0810 -0.0927 -0.1294 -0.1130 -0.2244 -0.3471 -0.1251 -0.1854 -0.1161 -0.0872 -0.1357 -0.0653 -0.1023 -0.0964 -0.0952 -0.0803 -0.0809 -0.0955 -0.1100 -0.0869 -0.0787 -0.0806 -0.1190 -0.0949 -0.1078 -0.1215 -0.3163 -0.1089 -0.1092 -0.1031 -0.0927 -0.1345 -0.0682 -0.0779 -0.0946 -0.0944 -0.0756 -0.0700 -0.0770 -0.0998 -0.0902 -0.0682 -0.2087 -0.1022 -0.1544 -0.0802 -0.0742 -0.0734 -0.0984 -0.0837 -0.1664 -0.1117 -0.0931 -0.1008 -0.1533 -0.0871 -0.0805
S-67	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-67	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-67	-0.22898629307746887	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-67	-0.22898629307746887	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-67	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0931 -0.0142 -0.1113 -0.1102 -0.1507 -0.0771 -0.0534 -1.3760 -0.0919 -0.1057 -0.0902 -0.0898 -0.1453 -0.0728 -0.0927 -1.1536 -0.1283 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0804 -0.1030 -0.1884 -0.0984 -0.0713 -0.3710 -0.0815 -0.1033 -0.2379 -0.0851 -0.1786 -0.0601 -0.0861 -0.0716 -0.0902 -0.0893 -0.0854 -0.2135 -0.1183 -0.1391 -0.2418 -0.2212 -0.0893 -0.0965 -0.0843 -1.0222 -0.1636 -0.1488 -0.1105 -1.0353 -0.1055 -0.1153 -0.0926 -0.0852 -0.0976 -0.0667 -0.2450 -1.7928 -0.0887 -0.1082 -0.1315 -0.1747 -0.1695 -0.0851 -0.1008 -0.1363 -0.1169 -0.2127 -0.0671 -0.1155 -0.0846 -0.3624 -0.0630 -0.0861 -0.1689 -0.0874 -0.0951 -0.0911 -0.0533 -1.2298 -0.4197 -1.6086 -0.0925 -0.9300 -0.0993 -0.1206 -0.8451 -0.0818 -0.0744
S-14	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; } return true; }
T-14	public static boolean will_it_fly ( int [ ] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false; i += 1; j -= 1; } return true; }
H-14	-0.22898632287979126	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
D-14	-0.22898632287979126	public static boolean will_it_fly ( int [ ] q , int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q [ i ] ; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q [ i ] != q [ j ] ) return false ; i ++ ; } return true ; }
P-14	-0.0986 -0.0515 -0.1100 -0.0426 -0.0920 -0.0259 -0.0930 -0.0142 -0.1113 -0.1102 -0.1507 -0.0771 -0.0534 -1.3760 -0.0919 -0.1057 -0.0902 -0.0898 -0.1453 -0.0728 -0.0927 -1.1536 -0.1283 -0.1056 -0.0785 -0.0847 -0.0931 -1.0052 -0.0804 -0.1030 -0.1884 -0.0984 -0.0713 -0.3710 -0.0815 -0.1033 -0.2379 -0.0851 -0.1786 -0.0601 -0.0861 -0.0716 -0.0902 -0.0893 -0.0854 -0.2135 -0.1183 -0.1391 -0.2418 -0.2212 -0.0893 -0.0965 -0.0843 -1.0222 -0.1636 -0.1488 -0.1105 -1.0353 -0.1055 -0.1153 -0.0926 -0.0852 -0.0976 -0.0667 -0.2450 -1.7928 -0.0887 -0.1082 -0.1315 -0.1747 -0.1695 -0.0851 -0.1008 -0.1363 -0.1169 -0.2127 -0.0670 -0.1155 -0.0846 -0.3624 -0.0630 -0.0861 -0.1689 -0.0874 -0.0951 -0.0911 -0.0533 -1.2298 -0.4197 -1.6086 -0.0925 -0.9300 -0.0993 -0.1206 -0.8451 -0.0818 -0.0744
S-90	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-90	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-90	-0.16019707918167114	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-90	-0.16019707918167114	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-90	-0.0908 -0.0524 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3406 -0.0778 -0.1736 -0.0568 -0.0545 -1.3679 -0.0976 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0854 -0.0772 -0.0826 -1.2032 -0.0830 -0.0906 -0.0965 -0.1112 -0.1530 -0.4116 -0.0754 -0.0944 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0648 -0.0903 -0.0877 -0.1245 -0.0680 -1.2454 -0.0948 -0.0899 -0.0735 -0.1071 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1072 -0.1280 -0.0785 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1263 -0.2642 -0.1108 -0.1867 -0.0941 -0.1142 -0.0859 -0.0981 -0.1973 -0.1019 -0.1272 -0.0909 -0.1056 -0.1223 -0.1212 -0.0350 -0.4703 -0.1260 -0.0877 -0.1857 -0.0738 -0.8023 -0.1198 -0.1032 -0.1057 -0.0467 -0.4140 -0.0853 -0.0875
S-58	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } return false; }
T-58	public static boolean has_close_elements ( List < Double > numbers, double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-58	-0.16019707918167114	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-58	-0.16019707918167114	public static boolean has_close_elements ( List < Double > numbers , double threshold ) { for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { for ( int j = i + 1; j < numbers.size ( ) ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-58	-0.0908 -0.0524 -0.0982 -0.0536 -0.0874 -0.0350 -0.0831 -0.0224 -0.1115 -0.3406 -0.0778 -0.1736 -0.0568 -0.0545 -1.3679 -0.0976 -0.0780 -0.0915 -0.0837 -0.1815 -0.1112 -0.0854 -0.0772 -0.0826 -1.2032 -0.0830 -0.0906 -0.0965 -0.1112 -0.1530 -0.4116 -0.0754 -0.0944 -0.0762 -0.0981 -0.1652 -0.0772 -0.0804 -0.1116 -0.1027 -0.0648 -0.0903 -0.0877 -0.1245 -0.0680 -1.2454 -0.0948 -0.0899 -0.0735 -0.1071 -0.1279 -0.1898 -0.0793 -0.1035 -0.0847 -0.1072 -0.1280 -0.0785 -0.0962 -0.1377 -0.0268 -0.1075 -0.1107 -0.1263 -0.2642 -0.1108 -0.1867 -0.0941 -0.1142 -0.0859 -0.0981 -0.1973 -0.1019 -0.1272 -0.0909 -0.1056 -0.1223 -0.1212 -0.0350 -0.4703 -0.1260 -0.0877 -0.1857 -0.0738 -0.8023 -0.1198 -0.1032 -0.1057 -0.0467 -0.4140 -0.0853 -0.0875
S-7	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; }
T-7	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false; for ( int i = 0; i < s.length ( ) - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-7	-0.2363794445991516	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-7	-0.2363794445991516	public static boolean is_happy ( String s ) { if ( s.length ( ) < 3 ) return false ; for ( int i = 0; i < s.length ( ) ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-7	-0.0979 -0.0546 -0.0812 -0.0669 -0.0861 -0.0393 -0.0096 -0.1190 -0.7227 -0.0908 -0.0846 -0.0879 -0.2625 -0.1130 -0.1314 -0.1658 -0.1093 -0.2836 -0.0756 -0.1544 -0.1530 -0.0824 -0.0880 -0.0888 -1.4451 -0.2599 -0.1094 -0.0665 -0.0706 -0.0906 -0.9061 -0.0922 -0.1136 -0.3969 -0.1158 -0.0622 -0.2157 -0.0676 -1.1244 -0.0770 -0.0910 -0.3471 -0.0796 -0.0850 -0.1321 -0.1168 -0.3658 -0.1207 -0.6921 -0.1131 -0.1247 -0.0873 -0.1993 -0.0944 -0.1002 -0.5691 -0.1130 -0.2201 -0.3970 -0.2276 -0.0861 -0.2985 -0.1595 -0.1088 -1.4263 -0.7522 -0.2536 -0.0766 -0.7329 -0.0791 -0.0713
S-45	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-45	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size ( ) - 1 ) ) ; switched = ( ! switched ) ; } return result; }
H-45	-0.2576407194137573	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
D-45	-0.2576407194137573	public static List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > result = new ArrayList < Integer > ( ) ; boolean switched = true ; while ( lst.size ( ) > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; switched = false ; } } return result ; }
P-45	-0.1018 -0.0457 -0.3404 -0.0951 -1.3475 -0.0632 -0.0202 -0.0815 -0.0209 -0.0883 -0.0456 -0.1129 -0.3598 -0.0928 -1.2648 -0.0716 -0.0510 -0.0851 -0.0779 -0.3394 -0.0953 -1.1335 -0.0610 -0.0585 -0.0791 -0.0583 -1.7310 -0.0871 -1.4785 -0.0641 -0.2751 -0.1332 -0.0801 -0.0947 -0.0352 -0.0993 -0.1520 -0.1919 -0.1752 -0.1125 -0.3466 -1.0769 -0.2404 -0.6231 -0.0915 -0.1104 -0.1324 -0.0891 -0.0899 -0.1686 -0.1216 -0.0799 -0.0850 -0.0872 -0.1135 -0.2345 -0.3745 -0.1199 -2.0442 -0.0988 -0.0616 -0.1264 -0.0887 -0.1091 -0.1032 -0.0919 -0.2560 -0.0566 -0.1274 -0.1163 -0.1310 -0.2318 -0.1097 -1.9968 -0.0880 -0.1058 -0.1133 -0.0870 -0.1053 -0.0979 -0.0853 -1.0906 -0.1322 -0.1146 -0.1482 -0.0846 -0.1601 -0.0685 -0.0947 -0.1354 -0.0793 -0.0767
S-83	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } return count; }
T-83	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-83	-0.198666512966156	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-83	-0.198666512966156	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length ( ) ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-83	-0.0930 -0.0478 -0.1077 -0.0705 -0.0959 -0.0300 -0.1147 -0.8907 -0.1175 -0.0886 -0.0893 -0.1039 -0.0587 -0.0862 -1.3309 -0.1534 -0.1077 -0.0781 -0.0742 -0.0835 -1.4134 -0.0882 -0.1171 -0.4337 -0.1482 -0.0725 -0.5572 -0.0793 -0.0908 -0.0821 -0.1085 -0.1380 -0.0807 -0.0853 -0.1284 -0.0805 -0.0881 -0.0884 -0.1500 -0.9465 -0.0993 -0.1197 -0.0865 -0.0847 -0.1699 -0.1205 -0.3615 -0.2125 -0.0602 -0.1766 -0.0959 -0.1776 -0.1802 -0.1581 -0.0625 -0.1053 -0.0959 -0.2787 -0.1515 -0.1594 -0.0815 -0.1091 -0.1145 -0.3499 -0.1361 -0.1519 -0.0844 -0.0461 -0.1097 -0.9525 -0.1393 -0.1236 -0.0662 -0.0589 -0.1066 -0.0837 -0.3081 -0.1484 -1.3378 -0.1152 -0.1975 -0.0890 -0.0899 -0.1652 -0.0885 -0.0758
S-29	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-29	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-29	-0.17056813836097717	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-29	-0.17056813836097717	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-29	-0.1010 -0.0508 -0.1071 -0.1043 -0.0922 -0.0435 -0.0936 -0.0436 -0.0880 -0.0674 -0.1184 -0.2900 -0.0713 -0.8036 -0.0609 -0.0647 -0.0852 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9093 -0.0819 -0.0673 -0.1115 -0.1329 -0.1431 -0.4048 -0.0755 -0.0911 -0.0696 -0.1076 -0.1787 -0.0785 -0.0776 -0.1065 -0.1028 -0.0665 -0.0864 -0.0915 -0.8962 -0.1042 -0.0670 -0.0783 -0.1162 -0.1171 -0.1854 -0.0741 -0.0969 -0.0790 -0.1031 -0.1422 -0.0778 -0.0974 -0.1529 -0.1092 -0.2390 -0.1781 -0.2901 -0.1110 -0.1336 -0.0969 -0.5069 -0.2054 -0.1138 -0.1782 -0.1047 -0.1004 -0.0894 -0.9869 -0.3017 -0.0756 -0.9769 -0.1067 -0.1074 -0.1072 -0.0374 -0.3774 -0.0844 -0.0902
S-18	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-18	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = i + 1; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
H-18	-0.17056824266910553	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
D-18	-0.17056824266910553	public static boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0; i < l.size ( ) ; i += 1 ) { for ( int j = 0; j < l.size ( ) ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) ) return true ; } } return false ; }
P-18	-0.1010 -0.0508 -0.1071 -0.1043 -0.0922 -0.0435 -0.0936 -0.0436 -0.0880 -0.0674 -0.1184 -0.2900 -0.0713 -0.8036 -0.0609 -0.0647 -0.0852 -0.0873 -0.1935 -0.1114 -0.0649 -0.0770 -0.0876 -0.9093 -0.0819 -0.0673 -0.1115 -0.1329 -0.1431 -0.4048 -0.0755 -0.0911 -0.0696 -0.1076 -0.1787 -0.0785 -0.0776 -0.1065 -0.1028 -0.0665 -0.0864 -0.0915 -0.8962 -0.1042 -0.0670 -0.0783 -0.1162 -0.1171 -0.1854 -0.0741 -0.0969 -0.0790 -0.1031 -0.1422 -0.0778 -0.0974 -0.1529 -0.1092 -0.2390 -0.1781 -0.2901 -0.1110 -0.1336 -0.0969 -0.5069 -0.2054 -0.1138 -0.1782 -0.1047 -0.1004 -0.0894 -0.9869 -0.3017 -0.0756 -0.9769 -0.1067 -0.1074 -0.1072 -0.0374 -0.3774 -0.0844 -0.0902
S-44	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
T-44	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) + 1; i += 1 ) { if ( string.substring ( i, i + substring.length ( ) ) .equals ( substring ) ) { times += 1; } } return times; }
H-44	-0.23959730565547943	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
D-44	-0.23959730565547943	public static int how_many_times ( String string, String substring ) { int times = 0; for ( int i = 0; i < string.length ( ) - substring.length ( ) ; i += 1 ) { if ( string. substring ( i, i + substring.length ( ) ) . equals ( substring ) ) { times += 1 ; } } return times ; }
P-44	-0.0995 -0.0432 -0.1081 -0.0136 -0.0932 -0.0546 -0.1056 -0.0167 -0.1097 -0.6788 -0.0982 -1.5250 -0.5064 -0.0331 -0.0881 -0.0890 -0.0923 -0.0328 -0.0832 -1.2428 -0.1321 -0.1058 -0.0671 -0.0781 -0.0874 -1.1775 -0.1069 -0.1188 -0.2836 -0.0954 -0.0659 -0.3628 -0.0795 -1.2020 -0.0350 -0.1400 -0.1227 -0.3837 -0.0956 -0.0852 -0.0838 -0.1209 -0.1689 -0.0772 -0.0898 -0.1369 -0.1179 -0.1516 -0.1266 -0.8521 -0.3152 -0.1783 -1.3590 -0.2900 -0.2535 -0.1142 -0.1322 -0.1592 -0.2627 -0.0921 -0.0839 -0.1134 -0.5948 -0.1054 -0.0149 -0.1024 -0.0873 -0.0881 -0.0902 -0.0883 -1.5768 -0.1467 -0.2095 -0.0936 -0.0800 -0.0403 -0.2422 -0.0796 -0.0696
S-36	public static long sum_squared_nums ( double [ ] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.floor ( ( int ) lst [ i ] ) ) * ( Math.ceil ( ( int ) lst [ i ] ) ) ; } return result; }
T-36	public static long sum_squared_nums ( double [ ] lst ) { int result = 0; for ( int i = 0; i < lst.length; i++ ) { result += ( Math.ceil ( lst [ i ] ) ) * ( Math.ceil ( lst [ i ] ) ) ; } return result; }
H-36	-0.2654702663421631	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
D-36	-0.2654702663421631	public static long sum_squared_nums ( double [ ] lst ) { int result = 0 ; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) lst [ i ] ) * ( ( int ) lst [ i ] ) ; } return result ; }
P-36	-0.0979 -0.0445 -0.0779 -0.0832 -0.1138 -0.0236 -0.0858 -0.0875 -0.1172 -0.1558 -0.1431 -0.1026 -0.0585 -0.0871 -0.0822 -0.2376 -0.1064 -0.0812 -2.3792 -0.1046 -0.1829 -0.1089 -0.0846 -0.1276 -0.0829 -1.4908 -0.0936 -0.0916 -0.2893 -0.1002 -0.0642 -0.4964 -0.0796 -0.5109 -0.0856 -0.0921 -0.1747 -0.0936 -0.1166 -1.3995 -1.2012 -0.0787 -1.0438 -0.0675 -0.8076 -0.0895 -0.0972 -0.0879 -0.1090 -0.5241 -0.2299 -0.0713 -0.1904 -0.0812 -0.8971 -0.0804 -0.0918 -0.4689 -0.1571 -0.1147 -0.1209 -0.1777 -0.0869 -0.0803
S-6	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { result [ i ] = Math.floorDiv ( game [ i ] , guess [ i ] ) ; } return result; }
T-6	public static int [ ] compare ( int [ ] game, int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length; i += 1 ) { result [ i ] = Math.abs ( game [ i ] - guess [ i ] ) ; } return result; }
H-6	-0.2008453756570816	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length ; i += 1 ) { result [ i ] = game [ i ] ; } return result ; }
D-6	-0.2008453756570816	public static int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game.length ] ; for ( int i = 0; i < game.length ; i += 1 ) { result [ i ] = game [ i ] ; } return result ; }
P-6	-0.0932 -0.0423 -0.1001 -0.2110 -0.0870 -0.0393 -0.1121 -0.0943 -0.1311 -0.0919 -0.0664 -1.6910 -0.0965 -0.1523 -0.0702 -0.0813 -0.0788 -0.0835 -0.0969 -0.1973 -0.0639 -0.0738 -0.0861 -0.0658 -0.0606 -0.0748 -0.0621 -0.0971 -0.0651 -0.1050 -0.0929 -0.1492 -0.1176 -0.0643 -0.0805 -0.0952 -1.1651 -0.0913 -0.0891 -0.2124 -0.0840 -0.0782 -0.1832 -0.0785 -0.1519 -0.2044 -0.0825 -0.0883 -0.2001 -0.0765 -0.1107 -0.0872 -0.1346 -2.6974 -0.0454 -0.1145 -0.0533 -0.4353 -0.6513 -0.3184 -0.0923 -0.1943 -0.0871 -0.0761
S-43	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-43	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-43	-0.23844562470912933	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-43	-0.23844562470912933	public static int solution ( ArrayList < Integer > lst ) { int result = 0; for ( int i = 0; i < lst.size ( ) ; i++ ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } if ( ( i % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-43	-0.0909 -0.0442 -0.1058 -0.0277 -0.1150 -1.5502 -0.0702 -0.9095 -0.0621 -0.0495 -0.0830 -0.0828 -0.0874 -0.0897 -0.0776 -1.4907 -0.1410 -0.1058 -0.0597 -0.0764 -0.0738 -1.5142 -0.0940 -0.0985 -0.3506 -0.1808 -0.1668 -0.5225 -0.0825 -0.0911 -0.0852 -1.0518 -0.0809 -0.0920 -0.1630 -0.1157 -0.2577 -0.2694 -0.1376 -0.0959 -0.0880 -0.1130 -0.6287 -0.5708 -0.0916 -1.1475 -0.0779 -0.1043 -0.1845 -0.3107 -0.1097 -0.1043 -0.0909 -0.1227 -0.1529 -1.2858 -0.1131 -0.4038 -0.2032 -0.2523 -0.0868 -0.0842 -0.0959 -0.4067 -0.0820 -0.0794 -0.1086 -0.0525 -0.0579 -0.1286 -0.2891 -0.1131 -0.1021 -0.0834 -0.1071 -0.0907 -0.1058 -0.0732 -0.1004 -0.1551 -0.0802 -0.0705
S-20	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
T-20	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } return Integer.toBinaryString ( sum ) ; }
H-20	-0.22508466243743896	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
D-20	-0.22508466243743896	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length ( ) ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; } return Integer.toBinaryString ( sum ) ; }
P-20	-0.0867 -0.0489 -1.3781 -0.0263 -0.1070 -0.1077 -0.1247 -0.0834 -0.0903 -0.1349 -0.0663 -0.0911 -1.0643 -0.1255 -0.1078 -0.0712 -0.0727 -0.0939 -1.0215 -0.0867 -0.1306 -0.1340 -0.1833 -0.0742 -0.0938 -0.0838 -0.1874 -0.0974 -0.4416 -0.0839 -0.0924 -0.0820 -0.1065 -0.2127 -0.0847 -0.0921 -0.1538 -0.0599 -1.1743 -0.0933 -1.2563 -0.1124 -0.3634 -0.2004 -0.0584 -0.0737 -0.0802 -0.1667 -0.0549 -0.1099 -0.4757 -0.4069 -0.7241 -0.6681 -0.1778 -0.2474 -0.0933 -0.0984 -0.1259 -0.0948 -0.0943 -0.1336 -1.1074 -0.0927 -0.1292 -0.0223 -0.0465 -0.0992 -0.1112 -0.1052 -0.0923 -0.0804 -0.0776
S-8	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } return result; }
T-8	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0; i < string.length ( ) ; i += 1 ) { result.add ( string.substring ( 0, i + 1 ) ) ; } return result; }
H-8	-0.2596314251422882	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-8	-0.2596314251422882	public static List < String > all_prefixes ( String string ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < string.length ( ) ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-8	-0.0976 -0.0517 -0.3711 -0.0918 -0.6224 -0.0624 -0.0554 -0.0990 -0.0185 -0.1170 -1.0834 -0.0842 -0.0911 -0.0820 -0.3401 -0.0978 -0.5365 -0.0616 -0.0639 -0.0796 -0.0651 -1.9712 -0.0873 -0.7100 -0.0616 -0.2717 -0.1981 -0.0795 -0.2236 -0.1095 -0.0775 -0.0798 -0.0935 -1.9484 -0.0945 -0.1064 -0.0920 -0.2576 -0.2753 -0.0832 -0.8976 -0.0951 -0.0832 -0.0775 -0.1964 -0.2117 -0.0839 -0.0878 -0.1880 -0.7937 -0.4997 -0.1082 -0.0664 -0.1682 -0.6926 -0.1178 -0.3465 -0.1700 -0.8279 -0.6352 -0.2696 -0.1484 -0.0884 -0.1098 -0.1128 -0.0960 -0.0906 -0.0933 -0.0746 -0.1208 -0.0767 -0.0720
S-34	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result; }
T-34	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length ( ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } } return result; }
H-34	-0.2892308831214905	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
D-34	-0.2892308831214905	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length ( ) - 1 ) ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result ; }
P-34	-0.0977 -0.0586 -1.2566 -0.0668 -0.0856 -0.0181 -0.1129 -0.9379 -0.1230 -1.0458 -0.6412 -0.0811 -0.0831 -0.0850 -1.4738 -0.0776 -0.0779 -1.9411 -0.1514 -0.1092 -0.0758 -0.0756 -0.0836 -1.3847 -0.0961 -0.1026 -1.3175 -0.2229 -0.1615 -0.1076 -1.1032 -0.0828 -0.7542 -0.0994 -0.0891 -0.0890 -0.0762 -0.1043 -0.1530 -0.0789 -0.0864 -0.1157 -0.1110 -0.1343 -0.1176 -0.9421 -0.1077 -0.0896 -0.0831 -0.2681 -0.0741 -0.0985 -0.7690 -0.1027 -0.0849 -0.0783 -0.0821 -0.0798 -0.1327 -0.0662 -0.0621 -0.7169 -0.1019 -0.0827 -0.0948 -0.0838 -0.2562 -0.0832 -0.0691
S-74	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n - 2 * i ) ; } return pile; }
T-74	public static ArrayList < Integer > make_a_pile ( int n ) { ArrayList < Integer > pile = new ArrayList < Integer > ( ) ; for ( int i = 0; i < n; i++ ) { pile.add ( n + 2 * i ) ; } return pile; }
H-74	-0.2513728737831116	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
D-74	-0.2513728737831116	public static java.util.ArrayList < Integer > make_a_pile ( int n ) { java.util.ArrayList < Integer > pile = new java.util.ArrayList < Integer > ( ) ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
P-74	-0.1057 -0.0567 -3.3495 -0.0622 -0.5679 -0.1444 -0.4710 -0.0727 -1.5221 -0.0647 -0.0610 -0.0953 -0.0417 -0.0985 -0.0329 -0.0233 -0.1275 -0.1971 -0.0831 -0.0845 -0.0797 -0.2019 -0.0857 -0.0626 -0.1065 -0.0970 -0.1052 -1.2409 -0.0624 -0.0719 -0.0291 -0.0807 -0.0521 -0.0485 -0.1091 -0.0536 -0.1741 -0.0570 -0.0841 -2.1992 -0.0638 -0.6286 -0.3966 -0.0832 -0.1076 -0.1054 -0.0611 -0.0782 -0.0782 -1.1835 -0.0946 -0.0933 -0.1369 -0.2525 -0.0848 -0.7429 -0.0766 -0.0830 -0.0922 -0.0274 -0.3684 -0.3369 -0.0965 -0.4274 -0.1241 -0.2201 -0.1601 -0.1133 -0.0932 -0.0893 -0.0765 -0.1471 -0.0740 -0.0269 -0.1275 -0.0737 -0.0673
S-87	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < xs.size ( ) ; i += 1 ) result.add ( xs.get ( i ) ) ; return result; }
T-87	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 1; i < xs.size ( ) ; i += 1 ) result.add ( i * xs.get ( i ) ) ; return result; }
H-87	-0.2876802682876587	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( xs.size () ) ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
D-87	-0.2876802682876587	public static List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( xs.size () ) ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
P-87	-0.0969 -0.0509 -0.4736 -0.1002 -1.2671 -0.0634 -0.0109 -0.1020 -0.4628 -0.0991 -1.2651 -0.0756 -0.0759 -0.0850 -0.0804 -0.4365 -0.1085 -1.0928 -0.0644 -0.0491 -0.0774 -0.0616 -2.0240 -0.0910 -1.3744 -0.0650 -0.3074 -1.9701 -0.4113 -0.6547 -0.2018 -0.0739 -0.0997 -0.2010 -0.1086 -0.0652 -0.0712 -0.0901 -0.7957 -0.0914 -0.0907 -0.2375 -0.2071 -0.2002 -0.7738 -0.0849 -0.0885 -0.1108 -0.1900 -0.0781 -0.0844 -0.2664 -0.4073 -0.0988 -0.1308 -0.1500 -0.3258 -0.1021 -0.0877 -0.0805 -0.0851 -0.0870 -0.0913 -0.0519 -0.1174 -0.0786 -0.0721
S-2	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true; } return false; }
T-2	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) != text.charAt ( text.length ( ) - i - 1 ) ) return false; } return true; }
H-2	-0.20770858228206635	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
D-2	-0.20770858228206635	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length ( ) ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length ( ) - i ) ) return true ; } return false ; }
P-2	-0.0999 -0.0573 -0.0803 -0.0664 -0.0882 -0.0173 -0.0056 -0.1143 -0.9320 -0.0551 -0.0891 -0.0859 -0.2732 -0.1152 -0.0711 -0.0785 -0.0985 -1.7123 -0.1007 -0.1161 -0.2770 -0.1418 -0.0925 -0.5277 -0.0777 -0.0893 -0.0804 -0.1091 -0.1828 -0.0811 -0.1041 -0.1306 -0.1157 -0.1745 -0.1835 -1.1292 -0.1119 -0.1661 -0.0867 -0.3301 -0.0689 -0.1257 -1.0465 -0.1129 -0.4807 -0.1223 -0.1389 -0.2449 -0.0720 -0.2434 -0.2577 -0.0896 -0.0909 -0.1757 -0.0784 -0.4252 -0.1288 -0.1002 -0.0438 -0.2117 -0.0864 -0.0842
S-48	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
T-48	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum; }
H-48	-0.19512581825256348	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
D-48	-0.19512581825256348	public static int add_even_at_odd ( int [ ] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
P-48	-0.1078 -0.0474 -0.1364 -0.0882 -0.1141 -0.0348 -0.0951 -0.0501 -0.1107 -0.0077 -0.1136 -0.1191 -0.1912 -0.1166 -0.0843 -0.0900 -0.0823 -0.1167 -0.0781 -0.0834 -1.6485 -0.0908 -0.1314 -0.1069 -0.0724 -0.0909 -0.0905 -1.6744 -0.0957 -0.1037 -0.8396 -0.0866 -0.0496 -0.4463 -0.0882 -0.1462 -0.2222 -0.0837 -0.0915 -0.1401 -0.1145 -0.7534 -0.0661 -0.1042 -0.0777 -0.8182 -0.0757 -0.2488 -0.1244 -0.0844 -0.2311 -0.1269 -0.1557 -0.0819 -0.1208 -0.0825 -0.1087 -0.1543 -0.1367 -0.1249 -0.1559 -0.0944 -0.0847
S-51	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-51	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-51	-0.2698862552642822	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-51	-0.2698862552642822	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-51	-0.1034 -0.0447 -0.1221 -0.1406 -0.0841 -0.0553 -0.0930 -0.0423 -0.1083 -0.0949 -0.0935 -1.5329 -0.0997 -0.1606 -1.6272 -0.0713 -0.0861 -0.0851 -0.0856 -0.4218 -0.1168 -0.1315 -0.1216 -0.3612 -0.0908 -0.0968 -0.2343 -1.1303 -0.3537 -0.1176 -0.0815 -0.0820 -0.1014 -1.6712 -0.1041 -0.1941 -0.2063 -0.8143 -0.0796 -0.1111 -0.2810 -0.0836 -0.0986 -0.1448 -0.1147 -0.3564 -0.3401 -0.1292 -0.2574 -0.1294 -0.0906 -0.1244 -0.3161 -1.1354 -0.1428 -0.1620 -0.1471 -0.6189 -0.0881 -0.0799
S-66	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1; } return result; }
T-66	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i - 1 ] ) result += 1; } return result; }
H-66	-0.2331046313047409	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
D-66	-0.2331046313047409	public static int smallest_change ( int [ ] arr ) { int result = 0; for ( int i = 0; i < ( arr.length ) ; i += 1 ) { if ( arr [ i ] != arr [ arr.length - i ] ) result += 1 ; } return result ; }
P-66	-0.0946 -0.0486 -0.1185 -0.0312 -0.0984 -0.0361 -0.1160 -0.1041 -0.1773 -0.0959 -0.0681 -0.0889 -0.0886 -0.0947 -0.0997 -0.0834 -1.8114 -0.1447 -0.1088 -0.0749 -0.0897 -0.0945 -2.0897 -0.1044 -0.1024 -2.0477 -0.0678 -0.0964 -0.0607 -0.1072 -0.2841 -0.0917 -0.1112 -0.1904 -0.0796 -0.1036 -0.1297 -0.1123 -0.1931 -0.0675 -0.1220 -0.0834 -0.3013 -0.1219 -0.0738 -0.1413 -0.1166 -0.0769 -0.4757 -0.1219 -0.1265 -0.0896 -0.1772 -0.0848 -1.5605 -0.1998 -0.1162 -0.1327 -0.1292 -0.2396 -0.0851 -0.0691
S-49	public static int can_arrange ( int [ ] arr ) { int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1; } return ind; }
T-49	public static int can_arrange ( int [ ] arr ) { int ind = -1; for ( int i = 1; i < arr.length; i++ ) { if ( arr [ i ] < arr [ i - 1 ] ) ind = i; } return ind; }
H-49	-0.2324647307395935	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
D-49	-0.2324647307395935	public static int can_arrange ( int [ ] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) ind = i + 1 ; } return ind ; }
P-49	-0.0925 -0.0461 -0.1030 -0.0936 -0.1004 -0.1172 -0.1138 -0.1024 -0.1565 -0.0796 -0.0479 -0.0866 -0.0881 -0.1180 -0.0846 -0.0774 -2.1408 -0.1987 -0.1541 -0.1116 -0.0735 -0.0809 -0.0782 -1.4482 -0.1019 -0.0958 -0.3916 -0.0819 -0.0596 -1.2048 -0.0812 -1.4557 -0.0746 -0.1125 -0.1248 -0.1119 -0.0906 -0.0599 -0.1068 -0.0822 -0.1487 -0.0615 -0.0884 -0.1247 -0.1928 -0.1885 -0.0988 -0.0960 -0.1233 -0.1134 -0.1232 -0.0806 -1.3677 -0.1798 -0.0915 -0.0932 -0.1351 -0.4650 -0.0800 -0.0659
S-17	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-17	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
H-17	-0.23053568601608276	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-17	-0.23053568601608276	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-17	-0.0994 -0.0594 -0.0911 -0.0659 -0.0936 -0.0246 -0.1206 -0.0963 -0.0746 -0.0871 -0.0888 -0.2618 -0.1126 -0.0929 -0.1668 -0.1243 -0.0913 -0.0897 -0.0824 -1.4959 -0.3394 -0.1120 -0.0846 -0.1563 -0.0934 -1.7851 -0.1357 -0.1876 -0.1614 -0.8777 -0.1182 -0.1211 -0.2110 -0.0857 -0.1044 -0.1208 -0.1132 -0.2394 -0.2481 -0.1377 -0.3631 -0.1456 -0.0880 -0.1056 -0.1002 -1.0356 -0.1419 -0.1428 -0.0991 -0.7337 -0.0875 -0.0930
S-10	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = result + x % base; x = x - x / base; } return result; }
T-10	public static String change_base ( int x, int base ) { String result = ""; while ( x > 0 ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-10	-0.3192915916442871	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-10	-0.3192915916442871	public static java.lang.String change_base ( int x , int base ) { java.lang.String result = ""; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-10	-0.0912 -0.0524 -5.2249 -0.0949 -0.0208 -0.1123 -0.0529 -0.0451 -0.0992 -0.0262 -0.1146 -0.4151 -0.1361 -1.5850 -0.1159 -0.0615 -0.0838 -0.0839 -0.5591 -0.0767 -0.0307 -0.1122 -0.0704 -0.1662 -0.0964 -2.5501 -0.1824 -0.1147 -0.1486 -0.1729 -0.1557 -0.0908 -0.0760 -0.1522 -0.1097 -0.1003 -0.0776 -0.2082 -0.1174 -0.0677 -1.2080 -0.1046 -0.1356 -0.1507 -0.0910 -0.1819 -0.0825 -0.0452 -0.7639 -0.1541 -0.1372 -0.0896 -0.4238 -0.0781 -0.0629
S-39	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = 2 * result; } return result % p; }
T-39	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = ( 2 * result ) % p; } return result; }
H-39	-0.22991971671581268	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
D-39	-0.22991971671581268	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
P-39	-0.0948 -0.0480 -0.1270 -0.0479 -0.0579 -0.1097 -0.1079 -0.0756 -1.3254 -0.1067 -0.0617 -0.0920 -0.0872 -0.1098 -0.0876 -0.1041 -0.8154 -0.5407 -0.1597 -0.1088 -0.0867 -0.0821 -0.0914 -1.6394 -0.0885 -0.1309 -0.1576 -0.9178 -0.0782 -0.1332 -0.3075 -0.0861 -0.0821 -0.1402 -0.1484 -0.1770 -0.0435 -0.0942 -0.6309 -0.0945 -0.3305 -0.1327 -0.1082 -0.0825 -0.5122 -0.0914 -0.0708
S-94	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b; b = a % b; } return a; }
T-94	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { int tmp = a; a = b; b = tmp % b; } return a; }
H-94	-0.25234007835388184	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
D-94	-0.25234007835388184	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
P-94	-0.1059 -0.0500 -0.1301 -0.0127 -0.1040 -0.0089 -0.0827 -0.0351 -0.0148 -0.1079 -0.0961 -0.1213 -1.6162 -0.0966 -0.0822 -0.0842 -0.0935 -0.4108 -0.1138 -0.2186 -0.2078 -0.1373 -0.0969 -0.0778 -0.5164 -0.1758 -0.5541 -1.4914 -0.0967 -0.1606 -0.3253 -0.0875 -0.0952 -0.7535 -0.4234 -0.2361 -0.2771 -0.6078 -0.0981 -0.0893
S-0	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( power < x ) { power *= n; } return power == x; }
T-0	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-0	-0.22944435477256775	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
D-0	-0.22944435477256775	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
P-0	-0.1019 -0.0502 -0.1197 -0.0650 -0.0919 -0.0383 -0.0866 -0.0489 -0.1087 -0.1024 -0.1671 -1.4151 -0.0874 -0.0836 -0.0857 -0.0865 -0.1309 -0.0942 -0.1006 -0.9927 -0.3548 -0.2125 -0.1136 -0.1731 -0.2933 -0.2163 -0.1010 -0.0853 -0.1077 -0.0218 -0.0893 -1.3544 -0.1733 -0.2442 -0.1624 -0.1350 -0.2618 -0.8543 -0.0857 -0.0806
S-56	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; result += str.substring ( 0, beginning_of_suffix ) ; return result; }
T-56	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false; } return true; } public static String make_palindrome ( String str ) { if ( str.length ( ) == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome ( str.substring ( beginning_of_suffix ) ) ) { beginning_of_suffix += 1; } String result = str; for ( int i = beginning_of_suffix - 1; i > = 0; i -= 1 ) { result += String.valueOf ( str.charAt ( i ) ) ; } return result; }
H-56	-0.20237894356250763	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
D-56	-0.20237894356250763	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length ( ) ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length ( ) - 1 - i ) ) return false ; } return true ; }
P-56	-0.0901 -0.0475 -0.2638 -0.0744 -0.0869 -0.0289 -0.0110 -0.1117 -0.5902 -0.0762 -0.0857 -0.0870 -0.3311 -0.1094 -0.0836 -0.0654 -0.0924 -1.0757 -0.0811 -0.1203 -0.3048 -0.1106 -0.0728 -0.3631 -0.0762 -0.0893 -0.0700 -0.0944 -0.1418 -0.0782 -0.0955 -0.1151 -0.1160 -0.2210 -0.1317 -0.8037 -0.1080 -0.1117 -0.0825 -0.1907 -0.1044 -0.1108 -0.8750 -0.1045 -0.3262 -0.1033 -0.0902 -0.2015 -0.0720 -0.1323 -0.3879 -1.1120 -0.1093 -0.0832 -0.0864 -0.0988 -0.0546 -0.7667 -0.1073 -0.0866 -0.0464 -0.7329 -0.0884 -0.1820
S-35	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { for ( int k = j; k < a; j += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
T-35	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static boolean is_multiply_prime ( int a ) { for ( int i = 2; i < a; i += 1 ) { if ( ! is_prime ( i ) ) continue; for ( int j = i; j < a; j += 1 ) { if ( ! is_prime ( j ) ) continue; for ( int k = j; k < a; k += 1 ) { if ( ! is_prime ( k ) ) continue; if ( i * j * k == a ) return true; } } } return false; }
H-35	-0.2168639749288559	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
D-35	-0.2168639749288559	public static boolean is_prime ( int n ) { for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true ; }
P-35	-0.0905 -0.0467 -0.0918 -0.0699 -0.0906 -0.0480 -0.1231 -0.0880 -0.0850 -0.0844 -0.0934 -0.1534 -0.1143 -0.0779 -0.0829 -0.0885 -0.8361 -0.0962 -0.1277 -0.0995 -1.3583 -0.0781 -0.0943 -0.1744 -0.0838 -0.0924 -0.1304 -0.1133 -0.1688 -0.1577 -0.1004 -0.1985 -0.1015 -0.0843 -0.0897 -0.1234 -1.2898 -0.1144 -0.1027 -0.0707 -1.6233 -0.0857 -0.3014
S-92	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-92	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-92	-0.11676644533872604	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-92	-0.11676644533872604	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-92	-0.0895 -0.0523 -0.1162 -0.1804 -0.0938 -0.0528 -0.0247 -0.0836 -0.0650 -0.0889 -0.0334 -0.1123 -0.1128 -0.1323 -0.0919 -0.0634 -0.0892 -0.0799 -0.1023 -0.1230 -0.0852 -0.2756 -0.0916 -0.0656 -0.0922 -0.0467 -0.5968 -0.0631 -0.0467 -0.0731 -0.1915 -0.0871 -0.0230 -0.0845 -0.0496 -0.1783 -0.4053 -0.1065 -0.0907 -0.0756 -0.0808 -1.1511 -0.0870 -0.0932 -0.0975 -0.0907 -0.0780 -0.3527 -0.0759 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0722 -0.0688 -0.0794 -0.0893 -0.1523 -0.0736 -0.0835 -0.0992 -0.0754 -0.1276 -0.0711 -0.1037 -0.0886 -0.1011 -0.0930 -0.0726 -0.1011 -0.0707 -0.1020 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1175 -0.0931 -0.0773 -0.0790 -0.1214 -0.0527 -0.0887 -0.0883 -0.1181 -0.0937 -0.0832 -0.1035 -0.2029 -0.1669 -0.0536 -0.0668 -0.0977 -0.0630 -0.0786 -0.0631 -0.0483 -0.0895 -0.0661 -0.0919 -0.0825 -0.1064 -0.1106 -0.0730 -0.0714 -0.0881 -1.1276 -0.0928 -0.0813 -0.0797 -0.0957 -0.0752 -0.4063 -0.0747 -0.0908 -0.1397 -0.0783 -0.0895 -0.0826 -0.0848 -0.0970 -0.0769 -0.1267 -0.2031 -0.0939 -0.0870 -0.0869 -0.0872 -0.1036 -0.1258 -0.0888 -0.0740 -0.0949 -0.0954 -0.0599 -0.0553 -0.0965 -0.0965 -0.0869 -0.0813 -0.0703 -0.3035 -0.0809 -0.0792
S-25	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
T-25	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result; }
H-25	-0.11676642298698425	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
D-25	-0.11676642298698425	public static double [ ] rescale_to_unit ( double [ ] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers [ i ] > max ) { max = numbers [ i ] ; } else if ( numbers [ i ] < min ) { min = numbers [ i ] ; } } double [ ] result = new double [ numbers.length ] ; for ( int i = 0; i < numbers.length ; i += 1 ) { result [ i ] = ( numbers [ i ] - min ) / ( max - min ) ; } return result ; }
P-25	-0.0895 -0.0523 -0.1162 -0.1804 -0.0938 -0.0528 -0.0247 -0.0836 -0.0650 -0.0889 -0.0334 -0.1123 -0.1128 -0.1323 -0.0919 -0.0634 -0.0892 -0.0799 -0.1023 -0.1230 -0.0852 -0.2756 -0.0916 -0.0656 -0.0922 -0.0467 -0.5968 -0.0631 -0.0467 -0.0731 -0.1915 -0.0871 -0.0230 -0.0845 -0.0496 -0.1783 -0.4053 -0.1065 -0.0907 -0.0756 -0.0808 -1.1511 -0.0870 -0.0932 -0.0975 -0.0907 -0.0780 -0.3527 -0.0759 -0.1087 -0.1646 -0.0760 -0.0914 -0.1221 -0.1140 -0.0722 -0.0688 -0.0794 -0.0892 -0.1523 -0.0736 -0.0835 -0.0992 -0.0754 -0.1276 -0.0711 -0.1037 -0.0886 -0.1011 -0.0930 -0.0726 -0.1011 -0.0707 -0.1020 -0.0465 -0.0738 -0.0871 -0.0860 -0.0591 -0.1175 -0.0931 -0.0773 -0.0790 -0.1214 -0.0527 -0.0887 -0.0883 -0.1181 -0.0937 -0.0832 -0.1035 -0.2029 -0.1669 -0.0536 -0.0668 -0.0977 -0.0630 -0.0786 -0.0631 -0.0483 -0.0896 -0.0661 -0.0919 -0.0825 -0.1064 -0.1106 -0.0730 -0.0714 -0.0881 -1.1276 -0.0928 -0.0813 -0.0797 -0.0957 -0.0752 -0.4063 -0.0747 -0.0908 -0.1397 -0.0783 -0.0895 -0.0826 -0.0848 -0.0970 -0.0769 -0.1267 -0.2031 -0.0939 -0.0870 -0.0869 -0.0872 -0.1036 -0.1258 -0.0888 -0.0740 -0.0949 -0.0954 -0.0599 -0.0552 -0.0965 -0.0965 -0.0869 -0.0813 -0.0703 -0.3035 -0.0809 -0.0792
S-19	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-19	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-19	-0.16846713423728943	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-19	-0.16846713423728943	public static long min_subarray_sum ( ArrayList < Long > nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size ( ) ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-19	-0.0981 -0.0355 -0.0509 -0.0455 -0.0991 -0.0355 -0.0275 -0.0866 -0.0818 -0.1199 -1.2302 -0.0659 -0.1016 -0.0552 -0.0427 -0.0896 -0.0874 -0.0484 -0.0669 -0.0970 -0.0683 -0.0880 -0.6123 -0.0839 -0.0586 -0.0885 -0.6235 -0.1514 -0.1029 -0.0370 -0.0961 -0.0689 -0.0396 -0.0878 -0.0814 -0.1263 -0.0420 -0.0607 -0.3780 -0.1704 -0.1063 -0.0886 -0.0936 -0.0822 -0.0911 -0.0837 -0.0758 -0.1392 -0.2955 -0.0899 -0.0475 -0.0827 -0.0709 -0.1249 -1.3347 -0.0916 -0.0834 -0.1056 -0.0996 -0.7616 -0.0651 -0.0907 -0.1021 -0.0924 -0.0959 -0.1084 -0.2350 -0.1084 -0.0561 -0.0868 -0.1015 -0.0845 -0.1147 -0.0901 -0.0972 -0.1376 -0.0997 -0.0728 -0.0937 -0.2326 -0.1931 -0.1085 -0.1859 -0.1126 -0.1477 -0.0973 -0.0927 -0.2390 -0.1090 -0.1430 -0.0750 -0.0838 -1.6991 -0.0899 -0.1219 -0.0481 -0.1218 -0.0999 -0.3379 -0.0805 -0.0854 -0.0794 -0.8590 -0.0779 -0.0926 -0.0724 -0.0926 -0.0683 -0.1042 -1.5771 -0.0909 -0.0862 -0.1092 -0.0713 -0.0897 -0.0929 -1.0774 -0.1951 -0.2161 -0.1117 -0.2710 -0.1102 -0.0949 -0.0914 -0.0914 -0.0923 -0.0897 -0.1149 -0.2140 -0.0824 -0.1047 -0.0762 -0.0942 -0.2523 -0.0928 -0.0759 -0.0784 -0.2871 -0.1418 -0.0678 -0.0844 -0.1030 -0.3746 -0.0784 -0.0833
S-33	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-33	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-33	-0.18698234856128693	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-33	-0.18698234856128693	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-33	-0.0881 -0.0419 -0.0992 -0.2095 -0.0733 -0.0438 -0.1076 -0.0897 -0.1559 -0.0931 -0.0617 -0.4538 -0.0808 -0.1240 -0.1029 -0.0572 -0.0561 -0.0786 -0.0924 -2.1734 -0.0674 -0.7676 -0.0573 -0.0558 -0.0915 -0.0570 -1.3805 -0.0817 -0.8496 -0.0610 -0.1762 -0.0970 -0.0882 -0.3244 -0.1107 -0.0676 -0.0755 -0.0873 -0.7797 -0.0789 -0.0803 -0.0877 -0.0418 -0.0721 -0.3934 -0.0684 -0.0776 -0.1656 -0.0783 -0.0799 -0.1031 -0.1075 -0.0718 -0.0766 -0.0972 -0.4747 -0.0893 -0.0581 -0.0590 -0.0354 -0.0742 -0.5481 -0.0620 -0.0864 -0.1206 -0.0798 -0.0968 -0.1202 -0.1154 -0.0894 -0.0840 -0.0800 -0.1143 -0.0834 -0.2238 -0.0370 -0.0643 -0.0807 -0.0638 -0.0762 -0.0881 -0.1928 -0.1487 -0.2236 -0.1109 -0.0879 -0.0704 -0.0988 -0.1165 -0.1048 -0.1332 -0.0976 -0.1139 -0.0843 -0.1292 -0.1972 -0.0488 -0.0580 -0.0887 -0.0748 -0.0699 -0.0810 -0.0817 -0.1178 -0.1200 -2.6267 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7072 -0.1010 -0.1116 -0.8692 -0.0728 -0.0624 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.6991 -0.0381 -0.0509 -0.8190 -0.0838 -1.4144 -0.0822 -0.0425 -0.1081 -0.0599 -0.0804 -0.0923 -0.0920 -0.0600 -0.2425 -0.0811 -0.0660
S-28	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-28	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-28	-0.18698228895664215	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-28	-0.18698228895664215	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-28	-0.0881 -0.0419 -0.0992 -0.2095 -0.0733 -0.0438 -0.1076 -0.0897 -0.1559 -0.0931 -0.0617 -0.4538 -0.0808 -0.1240 -0.1029 -0.0572 -0.0561 -0.0786 -0.0924 -2.1734 -0.0674 -0.7676 -0.0573 -0.0558 -0.0915 -0.0570 -1.3805 -0.0817 -0.8496 -0.0610 -0.1762 -0.0970 -0.0882 -0.3244 -0.1107 -0.0676 -0.0755 -0.0873 -0.7797 -0.0789 -0.0803 -0.0877 -0.0418 -0.0721 -0.3934 -0.0684 -0.0776 -0.1656 -0.0783 -0.0799 -0.1031 -0.1075 -0.0718 -0.0766 -0.0972 -0.4747 -0.0893 -0.0581 -0.0590 -0.0354 -0.0742 -0.5481 -0.0620 -0.0864 -0.1206 -0.0798 -0.0968 -0.1202 -0.1154 -0.0894 -0.0840 -0.0800 -0.1143 -0.0834 -0.2238 -0.0370 -0.0643 -0.0807 -0.0638 -0.0762 -0.0881 -0.1928 -0.1487 -0.2236 -0.1109 -0.0879 -0.0704 -0.0988 -0.1165 -0.1048 -0.1332 -0.0976 -0.1139 -0.0843 -0.1292 -0.1972 -0.0488 -0.0580 -0.0887 -0.0748 -0.0699 -0.0810 -0.0817 -0.1178 -0.1200 -2.6267 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7072 -0.1010 -0.1116 -0.8692 -0.0728 -0.0624 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.6991 -0.0381 -0.0509 -0.8190 -0.0838 -1.4144 -0.0822 -0.0425 -0.1081 -0.0599 -0.0804 -0.0923 -0.0920 -0.0600 -0.2425 -0.0812 -0.0660
S-70	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
T-70	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12; String result = ""; while ( number > 0 ) { int div = ( int ) ( number / num [ i ] ) ; while ( div > 0 ) { result += sym [ i ] ; div -= 1; } number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
H-70	-0.2650701403617859	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
D-70	-0.2650701403617859	public static String int_to_mini_roman ( int number ) { int [ ] num = new int [ ] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 } ; String [ ] sym = new String [ ] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" } ; int i = 12 ; String result = ""; while ( number > 0 ) { result += sym [ i ] ; number %= num [ i ] ; i -= 1; } return result.toLowerCase ( ) ; }
P-70	-0.0906 -0.0554 -1.6006 -0.0819 -0.0943 -0.0529 -0.0831 -0.0207 -0.0883 -0.0077 -0.0402 -0.1147 -0.0995 -0.0534 -0.0837 -0.0878 -0.1465 -0.2138 -0.0592 -0.0343 -0.0833 -0.0651 -0.0671 -0.0785 -0.0930 -0.0870 -0.6990 -0.1512 -0.0753 -0.2029 -0.0894 -0.0559 -0.0390 -0.0864 -0.1446 -0.2114 -0.0490 -0.0358 -0.0691 -0.1713 -0.0409 -0.0911 -0.0867 -1.3918 -0.1541 -0.0530 -0.1356 -0.0836 -0.0704 -0.7958 -0.0627 -0.1095 -0.0827 -0.1033 -0.0452 -1.1801 -0.1061 -0.0145 -1.2551 -0.1156 -0.0539 -1.3833 -0.1166 -0.0380 -1.2194 -0.1093 -0.0405 -1.1392 -0.1095 -0.0455 -0.0647 -1.5670 -0.1074 -0.3034 -1.7735 -0.1065 -0.0384 -0.0449 -1.4265 -0.1133 -0.0785 -1.4414 -0.1112 -0.0323 -1.3369 -0.1011 -0.0450 -1.4098 -0.1053 -0.0208 -1.2531 -0.0966 -0.0573 -0.0648 -0.0966 -0.0860 -0.1640 -0.1100 -0.0915 -0.0554 -0.3860 -1.1422 -0.0916 -0.0891 -1.2609 -0.0756 -0.1225 -0.1608 -0.1249 -0.1334 -0.0882 -0.0802 -0.1288 -0.0657 -0.1545 -0.0868 -0.1462 -0.0696 -0.1071 -0.2459 -0.2485 -0.0280 -0.0380 -0.0755 -0.0958 -0.0690 -0.0937 -0.0873 -0.0331 -0.8955 -0.1040 -0.2534 -0.1223 -0.5306 -0.5740 -0.5541 -0.1037 -0.0958 -0.0862 -0.0625
S-76	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
T-76	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result; } }
H-76	-0.16902941465377808	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
D-76	-0.16902941465377808	public static String [ ] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length ( ) ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String [ ] result = { Integer.toString ( count ) } ; return result ; } }
P-76	-0.0905 -0.0527 -1.0502 -0.2018 -0.2083 -0.0435 -0.0936 -0.0280 -0.1086 -0.6437 -0.0318 -0.0889 -0.0884 -0.1961 -0.1119 -0.0518 -0.1525 -0.7381 -0.1054 -0.0980 -0.0832 -0.0959 -0.0890 -0.0964 -0.0755 -0.0392 -0.0990 -0.2027 -0.1186 -0.0773 -0.0909 -0.0953 -0.0886 -0.0821 -0.0981 -0.1153 -0.1044 -0.0381 -0.1227 -0.5575 -0.1075 -0.0223 -0.0865 -0.0918 -0.0832 -0.0657 -0.0401 -0.0987 -0.1571 -0.1111 -0.0217 -0.0858 -0.0949 -0.0817 -0.0829 -0.1262 -0.1403 -0.0462 -0.0847 -0.7564 -0.1151 -0.1040 -0.0744 -0.0786 -0.0740 -0.5203 -0.0917 -0.0809 -0.1136 -0.1025 -0.1017 -0.5187 -0.0730 -0.0910 -0.0747 -0.6020 -0.0747 -0.0760 -0.1368 -0.0677 -0.0822 -0.0282 -0.1032 -0.6954 -0.1007 -0.0870 -0.0869 -0.0844 -0.1458 -0.1120 -0.5131 -0.0901 -0.0685 -0.0425 -0.1135 -0.0596 -0.0859 -1.0335 -0.1167 -0.1402 -0.0596 -0.1495 -0.0422 -0.0456 -0.0521 -0.0949 -0.1043 -0.0568 -0.0929 -0.2692 -0.1111 -0.0865 -0.1066 -0.2622 -0.1000 -1.1618 -0.1511 -0.0610 -0.0712 -0.0844 -0.2249 -0.9646 -0.0974 -1.0418 -0.1136 -0.0816 -0.1020 -0.1918 -0.1079 -0.0898 -0.0803 -0.4359 -0.0772 -0.0765 -0.0711
S-52	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
T-52	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } return result.get ( result.size ( ) - 1 ) ; }
H-52	-0.1783594787120819	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
D-52	-0.1783594787120819	public static int fib4 ( int n ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size ( ) - 1 ) ; }
P-52	-0.0844 -0.0505 -0.1112 -0.0179 -0.0378 -0.1073 -0.0950 -0.0693 -0.0836 -0.0866 -1.6922 -0.0711 -0.7706 -0.0609 -0.0783 -0.0868 -0.0659 -1.4490 -0.0802 -0.9679 -0.0706 -0.1598 -0.0867 -0.0799 -0.1943 -0.1183 -0.1125 -0.0959 -0.1828 -0.1052 -0.0866 -0.0995 -0.0964 -0.1117 -0.0995 -0.3896 -0.0947 -0.0857 -0.1064 -0.0941 -0.1028 -0.0995 -0.7596 -0.0846 -0.0895 -0.1065 -0.0974 -0.0935 -0.0962 -0.1905 -0.0917 -0.0892 -0.2905 -0.1064 -0.0822 -0.1173 -0.0511 -0.0869 -0.0789 -0.1065 -0.1198 -0.1275 -0.0995 -0.0977 -0.0872 -0.0882 -0.2975 -0.1072 -0.0731 -0.0719 -0.0900 -1.0636 -0.0914 -0.1425 -0.1423 -0.4404 -0.5460 -0.0778 -0.0619 -0.1886 -0.0827 -0.0864 -0.1267 -0.1046 -0.1429 -0.1048 -0.1351 -0.0940 -0.1210 -0.1105 -0.2388 -0.0885 -0.1526 -0.1890 -0.0916 -0.1219 -0.1127 -0.2436 -0.0880 -1.0138 -0.0991 -0.0925 -0.1127 -0.1118 -0.1118 -0.0830 -1.0096 -0.0961 -0.0943 -0.1219 -0.1086 -0.0490 -0.0853 -0.0941 -0.0803 -0.0982 -0.1469 -0.1099 -0.1006 -0.1394 -0.1043 -0.1440 -0.1126 -0.0817 -0.4374 -0.0792 -0.3435 -0.1143 -0.0962 -0.1076 -0.0777 -0.0784
S-61	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-61	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-61	-0.21557284891605377	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-61	-0.21557284891605377	public static ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < > ( ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length ( ) ; i++ ) { int digit = s. charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-61	-0.0974 -0.0539 -1.5085 -0.0869 -1.0512 -0.0554 -0.0392 -0.0934 -0.0542 -0.1146 -1.3913 -0.0734 -1.0751 -0.0662 -0.0413 -0.0849 -0.0822 -1.6346 -0.0830 -1.0225 -0.0629 -0.0628 -0.0827 -0.0641 -1.2468 -0.0698 -0.1499 -0.1807 -0.1335 -0.0795 -0.1789 -0.1079 -1.7985 -0.0872 -0.0642 -0.0481 -0.0911 -0.0844 -0.1035 -0.0786 -0.0889 -0.8860 -0.1457 -0.1081 -0.0756 -0.0829 -0.0799 -0.6811 -0.0893 -0.0882 -0.2006 -0.1270 -0.0810 -0.5647 -0.0819 -0.0926 -0.0833 -0.7384 -0.0770 -0.0844 -0.1225 -0.0534 -0.0928 -0.0734 -0.1218 -1.0891 -0.1104 -0.0952 -0.0877 -0.4178 -0.1474 -0.0919 -0.1143 -0.1137 -0.1126 -0.4562 -0.0440 -0.1758 -0.1154 -0.0879 -0.0870 -0.0825 -0.7070 -0.1916 -0.1494 -0.1280 -0.2851 -0.2415 -0.1102 -0.1599 -0.0370 -0.0537 -0.0520 -0.0565 -0.0493 -0.1021 -0.1404 -0.1149 -0.1927 -0.0981 -0.1880 -0.1063 -0.0607 -0.1303 -0.1987 -0.1050 -0.2685 -0.1096 -0.1957 -0.1515 -0.1540 -0.0998 -0.2185 -0.1016 -0.1022 -0.0703 -0.0837 -0.1305 -0.1056 -0.1642 -0.1093 -0.0871 -0.0212 -0.0535 -0.1158 -0.0854 -0.1039 -0.0736 -0.0800 -0.1150 -0.0872 -0.0757
S-63	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-63	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-63	-0.18257258832454681	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-63	-0.18257258832454681	public static int count_nums ( ArrayList < Integer > arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length ( ) ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-63	-0.0906 -0.0419 -0.1087 -0.0746 -0.0954 -0.0778 -0.1180 -1.2384 -0.0636 -0.6650 -0.0544 -0.0492 -0.0878 -0.0901 -0.1059 -0.1318 -0.0859 -0.6697 -0.1673 -0.1064 -0.0794 -0.0987 -0.0682 -0.0634 -0.0830 -0.0838 -0.2895 -0.0807 -0.1015 -0.1086 -0.1092 -0.4611 -0.1642 -0.1097 -0.0912 -0.0793 -0.1208 -0.0106 -0.5283 -0.9777 -0.0634 -0.0858 -0.0424 -0.0789 -0.5798 -0.1050 -1.0784 -0.1086 -0.0798 -0.0827 -0.0922 -0.1367 -0.0723 -0.0888 -0.7471 -0.0997 -0.1066 -0.0710 -0.0910 -0.0755 -0.8111 -0.0922 -0.0770 -0.1051 -0.1094 -0.0600 -0.1103 -0.0930 -0.4355 -0.0804 -0.0908 -0.0857 -0.6214 -0.0748 -0.0995 -0.1438 -0.1193 -0.2591 -0.1080 -0.1512 -0.1462 -0.0818 -0.1053 -0.1409 -0.0843 -0.1147 -0.1115 -0.0720 -0.1068 -0.0733 -0.1018 -0.6437 -0.1033 -0.1209 -0.0936 -0.2079 -0.1595 -0.1062 -0.0815 -0.1214 -0.0692 -0.0880 -0.0966 -0.0654 -0.0958 -0.9582 -0.0971 -0.0990 -0.0903 -0.1617 -0.1687 -0.1676 -0.1065 -0.1359 -0.1198 -0.1132 -0.1391 -0.1128 -0.0932 -0.1403 -0.6507 -0.0885 -0.0878 -0.1482 -0.7089 -0.0887 -0.0744
S-73	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-73	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-73	-0.20827564597129822	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-73	-0.20827564597129822	public static ArrayList < Integer > unique_digits ( ArrayList < Integer > x ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-73	-0.0982 -0.0604 -1.5793 -0.0777 -0.9024 -0.0605 -0.0252 -0.0836 -0.0594 -0.1102 -1.4249 -0.0654 -0.9124 -0.0695 -0.1143 -0.0835 -0.0835 -1.4169 -0.0796 -0.8331 -0.0612 -0.1212 -0.0833 -0.0676 -1.4240 -0.0826 -0.9790 -0.0675 -0.1949 -0.1095 -0.0802 -0.2720 -0.1051 -0.0743 -0.0773 -0.0706 -0.0948 -0.0934 -0.0823 -0.1112 -0.0609 -0.0839 -0.0677 -0.6122 -0.0742 -0.0653 -0.1139 -0.0265 -0.0821 -0.0866 -1.0408 -0.0798 -0.1117 -0.1232 -0.1473 -0.1141 -0.0863 -0.0899 -0.1715 -0.0518 -0.0913 -0.0301 -0.0889 -0.0404 -0.0641 -0.1799 -0.1126 -0.1059 -0.2548 -0.0584 -0.0935 -0.0324 -0.1419 -0.0833 -0.0869 -0.0827 -0.0766 -0.0877 -0.1056 -0.0845 -0.1016 -0.0368 -0.0724 -0.3862 -1.2280 -0.0523 -0.0663 -0.0740 -0.0675 -0.0234 -0.1886 -0.0865 -0.0970 -0.1221 -0.1654 -0.1023 -0.0406 -0.0957 -0.1095 -0.1050 -0.1590 -0.2718 -0.1156 -0.1286 -0.1009 -0.0857 -0.1177 -0.1410 -1.1331 -0.1641 -0.1675 -0.0842 -0.0613
S-38	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence; }
T-38	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1; return sequence; } sequence [ 0 ] = 1; sequence [ 1 ] = 3; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 + 1; else sequence [ i ] = sequence [ i - 1 ] + sequence [ i - 2 ] + ( i + 3 ) / 2; } return sequence; }
H-38	-0.1896931231021881	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
D-38	-0.1896931231021881	public static int [ ] tri ( int n ) { int [ ] sequence = new int [ n + 1 ] ; if ( n == 0 ) { sequence [ 0 ] = 1 ; return sequence ; } sequence [ 0 ] = 1 ; sequence [ 1 ] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence [ i ] = i / 2 - 1; else sequence [ i ] = sequence [ i - 1 ] - sequence [ i - 2 ] - ( i + 3 ) / 2; } return sequence ; }
P-38	-0.0921 -0.0446 -0.1217 -0.1936 -0.0659 -0.0252 -0.1074 -0.0952 -0.0963 -0.0818 -0.0878 -0.1517 -0.1911 -0.0625 -0.0835 -0.0980 -0.0805 -0.0760 -0.0773 -0.0917 -0.0925 -0.1321 -0.0931 -0.0890 -0.1694 -0.1143 -0.0854 -0.1373 -0.1555 -0.0837 -0.1087 -0.2918 -0.1061 -0.1066 -0.0969 -0.1027 -2.2246 -0.2038 -0.1432 -0.0842 -0.7329 -0.0933 -0.2132 -0.1076 -0.1184 -0.0983 -0.1020 -1.7131 -0.1538 -0.1724 -0.1045 -0.2050 -0.0719 -0.1007 -0.1381 -1.0103 -0.1491 -0.1192 -0.0770 -0.0828 -0.0826 -1.1504 -0.1014 -0.1172 -0.1314 -0.6146 -0.4646 -0.1186 -0.3310 -0.0878 -0.0974 -0.1756 -0.1264 -0.1501 -0.2661 -0.0529 -0.1170 -0.0946 -0.0888 -0.1434 -0.0954 -0.0992 -0.0823 -0.1250 -0.1353 -0.1372 -0.0711 -0.3206 -0.5053 -0.0927 -0.1392 -0.0842 -0.1048 -0.0792 -0.1043 -0.2337 -0.0872 -0.0946 -0.1987 -0.2078 -0.0773 -0.1084 -0.1299 -0.0828 -0.0909 -0.1594 -0.0819 -0.0845 -0.2702 -0.1475 -0.1130 -0.1301 -0.1204 -0.0846 -0.0943 -0.3563 -0.1160 -0.1341 -0.0836 -0.9064 -0.0858 -0.0670
S-81	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array; } }
T-81	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array [ i ] ; array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = tmp; } return array; } }
H-81	-0.1717703938484192	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
D-81	-0.1717703938484192	public static int [ ] sort_array ( int [ ] array ) { if ( array.length == 0 ) return array ; if ( ( array [ 0 ] + array [ array.length - 1 ] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < array.length ; i += 1 ) { array [ i ] = array [ array.length - i - 1 ] ; array [ array.length - i - 1 ] = array [ i ] ; } return array ; } }
P-81	-0.0964 -0.0410 -0.1054 -0.1936 -0.0837 -0.0541 -0.0836 -0.0321 -0.1114 -0.0871 -0.1253 -0.0980 -0.0564 -0.0854 -0.0864 -0.1354 -0.1142 -0.1037 -0.1426 -0.1075 -0.1441 -0.1071 -0.0830 -0.0929 -0.0618 -0.4268 -1.9440 -0.1093 -0.4037 -0.0856 -0.0852 -0.1541 -0.0777 -0.1106 -0.0831 -0.0797 -0.0873 -0.0926 -0.0853 -0.2988 -0.1596 -0.0940 -0.0992 -0.1606 -0.0672 -0.1266 -0.2266 -0.0858 -0.0805 -0.0696 -0.3710 -0.0883 -0.1630 -0.2417 -0.1200 -0.0805 -0.0893 -0.0994 -1.4729 -0.0870 -0.1096 -0.9141 -0.0846 -0.0718 -0.3985 -0.0844 -0.1562 -0.2780 -0.0858 -0.0846 -0.1152 -0.1051 -0.1341 -0.0813 -0.1111 -0.0561 -0.0992 -0.2256 -0.0866 -0.0857 -0.1625 -0.0972 -1.0077 -0.1955 -0.1118 -0.1022 -0.0945 -0.0944 -0.1541 -0.0858 -0.0781 -0.1271 -0.0878 -0.7281 -0.1293 -0.1014 -0.0969 -0.0633 -0.0957 -0.1016 -0.0916 -0.0923 -0.1052 -0.1388 -0.0659 -0.3536 -0.0902 -0.0805 -0.0840
S-11	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-11	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i - 1 ] ; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-11	-0.24102327227592468	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
D-11	-0.24102327227592468	public static boolean monotonic ( int [ ] l ) { int [ ] sorted = new int [ l.length ] ; int [ ] reverse_sorted = new int [ l.length ] ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length ; i += 1 ) reverse_sorted [ i ] = sorted [ l.length - i ] ; if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false ; }
P-11	-0.0915 -0.0517 -0.0988 -0.0283 -0.0286 -0.1206 -0.0940 -0.1616 -0.0959 -0.0712 -0.0870 -0.0833 -0.1212 -0.2158 -0.0784 -0.1085 -0.0909 -0.0732 -0.0660 -0.0823 -0.0811 -0.1043 -0.0628 -0.1413 -0.0913 -0.0863 -0.1319 -0.0821 -0.0327 -0.0795 -0.0791 -0.0804 -0.0540 -0.0585 -0.0733 -0.0610 -0.0961 -0.0696 -0.1311 -0.0868 -0.1759 -0.1078 -0.0639 -1.0882 -2.3411 -0.0862 -0.0373 -0.1186 -0.1297 -0.1047 -0.0964 -0.1309 -0.1178 -0.0710 -0.0849 -0.0961 -1.1891 -0.0829 -0.1030 -0.1883 -0.0935 -0.0709 -0.1886 -0.0809 -0.1601 -0.1637 -0.0879 -0.2052 -0.0865 -0.1117 -0.0931 -0.0941 -0.0751 -0.0986 -0.1759 -0.0664 -0.1429 -0.0887 -0.0650 -0.1427 -0.0867 -1.1308 -0.0870 -0.4200 -0.1181 -1.8541 -0.1171 -2.0070 -0.0920 -1.3771 -0.1175 -0.0784 -0.6535 -0.1647 -0.0872 -0.6657 -1.5953 -0.0940 -1.2263 -0.1168 -0.0696 -0.4017 -0.0273 -0.0926 -0.1188 -0.0840 -0.0930 -0.1150 -0.0970 -0.2471 -1.0248 -0.0819 -0.0483 -0.9890 -0.0762 -0.0656
S-79	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
T-79	public static List < Integer > intersperse ( List < Integer > numbers, int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result; for ( int i = 0; i < numbers.size ( ) - 1; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result; }
H-79	-0.18604737520217896	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
D-79	-0.18604737520217896	public static List < Integer > intersperse ( List < Integer > numbers , int delimeter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers.size ( ) == 0 ) return result ; for ( int i = 0; i < numbers.size ( ) ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size ( ) - 1 ) ) ; return result ; }
P-79	-0.0983 -0.0527 -0.3479 -0.0906 -1.0455 -0.0625 -0.0212 -0.0578 -0.0252 -0.0348 -0.1048 -0.3930 -0.0870 -1.1007 -0.0706 -0.0559 -1.3063 -0.1048 -0.0181 -0.0318 -0.0897 -0.0821 -0.2915 -0.0920 -0.8423 -0.0630 -0.0657 -0.0845 -0.0595 -1.5416 -0.0780 -1.0878 -0.0669 -0.2278 -0.1418 -0.0803 -0.3092 -0.1087 -0.0920 -0.2273 -0.1609 -0.2765 -0.0723 -0.1062 -0.1217 -0.0839 -0.1088 -0.0920 -0.1999 -0.1765 -0.1134 -0.0828 -0.0781 -0.0863 -0.9877 -0.0933 -0.0835 -0.1523 -0.1086 -0.1363 -0.2601 -0.0708 -0.0913 -0.0722 -0.1208 -0.1242 -0.0787 -0.0920 -0.1300 -0.1386 -0.1889 -0.1119 -0.0897 -0.1193 -0.1944 -0.1141 -0.0948 -0.0867 -0.0934 -0.0833 -0.6472 -0.1087 -0.1347 -0.1055 -0.0166 -0.0317 -0.0834 -0.0857 -0.0919 -0.3218 -0.1137 -0.1784 -0.1022 -0.0797 -0.1035 -0.3578 -0.1229 -0.1023 -0.1083 -0.1853 -0.2168 -0.0677 -0.2070 -0.1008 -0.0866 -0.0980 -0.0857 -0.1096 -0.0761 -0.1388 -0.0811 -0.0706
S-69	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-69	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-69	-0.22122716903686523	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-69	-0.22122716903686523	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-69	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0290 -0.0617 -0.1108 -0.1021 -0.1470 -0.0904 -0.0653 -0.0851 -0.0878 -0.6490 -0.1105 -0.0848 -0.1555 -0.0989 -0.1374 -0.0988 -0.0837 -0.0637 -0.0396 -0.7959 -0.1274 -0.1035 -0.0861 -1.7058 -0.2700 -0.1061 -0.0819 -0.1005 -0.0797 -1.1727 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4817 -0.0781 -0.0968 -0.1625 -0.1131 -0.1757 -0.0701 -0.0950 -0.0816 -0.1472 -0.1206 -0.0831 -0.1976 -0.2221 -1.1636 -0.1037 -0.0861 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1085 -0.1123 -0.0829 -0.1231 -0.0225 -1.1276 -0.0791 -0.1525 -0.0669 -0.0885 -1.2217 -0.1429 -0.1030 -0.0829 -0.0912 -0.0850 -1.1303 -0.0956 -0.0632 -0.1034 -0.0976 -0.0814 -0.8590 -0.0814 -0.4125 -0.0790 -0.0964 -0.1959 -0.0606 -3.0153 -0.0980 -0.0543 -0.1058 -0.0824 -0.0800 -0.1118 -0.0872 -0.1063 -0.0987 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-24	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
T-24	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] < 0 ) prod *= -1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum; }
H-24	-0.22122706472873688	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
D-24	-0.22122706472873688	public static int prod_signs ( int [ ] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr [ i ] == 0 ) prod = 0; else if ( arr [ i ] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr [ i ] ) ; } return prod * sum ; }
P-24	-0.0929 -0.0450 -0.1176 -0.0545 -0.0879 -0.0290 -0.0617 -0.1108 -0.1021 -0.1470 -0.0904 -0.0653 -0.0851 -0.0878 -0.6490 -0.1105 -0.0848 -0.1555 -0.0989 -0.1374 -0.0988 -0.0837 -0.0637 -0.0396 -0.7959 -0.1274 -0.1035 -0.0861 -1.7058 -0.2700 -0.1061 -0.0819 -0.1005 -0.0797 -1.1727 -0.0907 -0.0861 -0.1959 -0.0912 -0.0820 -0.7342 -0.0851 -0.4817 -0.0781 -0.0968 -0.1625 -0.1131 -0.1757 -0.0701 -0.0950 -0.0816 -0.1472 -0.1206 -0.0831 -0.1976 -0.2221 -1.1636 -0.1037 -0.0861 -0.1059 -0.0809 -0.0703 -0.1011 -0.0798 -0.1085 -0.1123 -0.0829 -0.1231 -0.0225 -1.1276 -0.0791 -0.1525 -0.0669 -0.0885 -1.2217 -0.1429 -0.1030 -0.0828 -0.0912 -0.0850 -1.1303 -0.0956 -0.0632 -0.1034 -0.0976 -0.0814 -0.8590 -0.0814 -0.4125 -0.0790 -0.0964 -0.1959 -0.0606 -3.0153 -0.0980 -0.0543 -0.1058 -0.0824 -0.0800 -0.1118 -0.0872 -0.1063 -0.0987 -0.0861 -0.1855 -0.2034 -0.0302 -0.1334 -0.2663 -0.0797 -0.0746
S-37	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
T-37	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toUpperCase ( c ) ; } else { char_list [ i ] = Character.toLowerCase ( c ) ; } } return new String ( char_list ) ; }
H-37	-0.13093619048595428	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
D-37	-0.13093619048595428	public static String flip_case ( String string ) { char [ ] char_list = string.toCharArray ( ) ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list [ i ] ; if ( Character.isLowerCase ( c ) ) { char_list [ i ] = Character.toLowerCase ( c ) ; } else { char_list [ i ] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
P-37	-0.0988 -0.0503 -0.4398 -0.0179 -0.0986 -0.0316 -0.1103 -0.5485 -0.0979 -0.0879 -0.0896 -0.0854 -0.2804 -0.0925 -0.0878 -0.0949 -0.0540 -0.0811 -0.0657 -0.1970 -0.0502 -0.0516 -0.2231 -0.1472 -0.0824 -0.2654 -0.1085 -0.1067 -0.0785 -0.0890 -0.8134 -0.0979 -0.1001 -0.2065 -0.1124 -0.0590 -0.0908 -0.0687 -0.2268 -0.0801 -0.0900 -0.1832 -0.0771 -0.0752 -0.0877 -0.0678 -0.0952 -0.0759 -0.1109 -0.0541 -0.0682 -0.0931 -0.0825 -0.0895 -0.1555 -0.1192 -1.0552 -0.1049 -0.0745 -0.0362 -0.1188 -0.1207 -0.0901 -0.0876 -0.0807 -0.1232 -0.1020 -0.0516 -0.0814 -0.1165 -0.0810 -0.1052 -0.3135 -0.0948 -0.3612 -0.1191 -0.1334 -0.0964 -0.1039 -0.1183 -0.1072 -0.1396 -0.0824 -0.1019 -0.0584 -0.0707 -0.1096 -0.0831 -0.0990 -0.2459 -0.0876 -0.1538 -0.1148 -0.1289 -0.0953 -0.0979 -0.1027 -0.1585 -0.1179 -0.0469 -0.2400 -0.1157 -0.1080 -0.0935 -0.0612 -0.1263 -0.0939 -0.0913 -0.0763
S-86	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
T-86	public static int [ ] pluck ( int [ ] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
H-86	-0.16226941347122192	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
D-86	-0.16226941347122192	public static int [ ] pluck ( int [ ] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < min_even ) { min_even = arr [ i ] ; index = i ; } } if ( index == -1 ) return new int [ ] { } ; return new int [ ] { min_even, index } ; }
P-86	-0.0960 -0.0420 -0.0967 -0.1976 -0.0961 -0.0266 -0.0137 -0.1117 -0.0970 -0.1309 -0.0919 -0.0673 -0.0878 -0.0879 -0.1134 -0.1646 -0.1115 -0.0691 -0.0871 -0.8447 -0.0945 -0.0539 -0.0830 -0.8001 -0.1122 -0.1113 -0.0747 -0.0796 -0.0824 -1.0270 -0.0759 -0.1078 -0.1935 -0.0999 -0.0692 -0.3824 -0.0704 -0.0767 -0.1731 -0.0769 -0.0869 -0.1205 -0.1163 -0.2431 -0.0704 -0.0908 -0.0752 -0.4188 -0.0588 -0.1441 -0.1083 -1.1420 -0.1336 -0.0824 -0.0878 -0.0863 -0.1090 -0.1240 -0.0868 -0.0712 -0.0942 -0.0688 -0.1740 -0.1025 -0.1053 -0.1482 -0.1466 -0.0903 -0.0921 -0.0871 -0.0891 -0.1102 -0.1348 -0.0735 -0.3042 -0.1490 -0.1060 -0.2045 -0.1146 -0.1287 -0.1583 -1.0021 -0.0859 -0.0954 -0.1100 -0.0826 -0.0937 -0.2155 -0.1235 -0.4426 -0.1070 -0.1411 -0.0760 -0.0699 -0.0875 -0.1066 -0.1079 -0.1742 -0.1131 -0.0716 -0.7707 -0.0857 -0.1679 -0.1035 -0.0781 -0.0717
S-59	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( is_prime ( j ) ) { largest = n % j; } } return largest; }
T-59	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; } public static int largest_prime_factor ( int n ) { int largest = 1; for ( int j = 2; j < n; j += 1 ) { if ( n % j == 0 && is_prime ( j ) ) { largest = j; } } return largest; }
H-59	-0.23469188809394836	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-59	-0.23469188809394836	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-59	-0.0934 -0.0437 -0.1818 -0.0620 -0.0871 -0.0331 -0.1138 -0.0928 -0.1776 -0.0851 -0.0938 -0.7583 -0.1100 -0.1329 -0.1297 -0.0764 -0.0896 -0.0854 -0.0806 -1.4275 -0.6611 -0.1102 -0.0817 -0.0771 -0.0872 -0.9291 -0.0973 -0.1314 -0.1007 -1.2146 -0.0723 -0.0975 -0.2006 -0.0828 -0.0981 -0.1270 -0.1132 -0.2993 -0.1550 -0.0835 -0.2292 -0.1302 -0.0865 -0.0877 -0.0867 -1.2514 -0.1090 -0.1195 -0.0671 -0.9659 -0.0893 -0.2072
S-50	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
T-50	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand [ 0 ] + ""; for ( int i = 0; i < operator.length; i += 1 ) { expression += operator [ i ] + operand [ i + 1 ] ; } return Double.parseDouble ( engine.eval ( expression ) .toString ( ) ) ; }
H-50	-0.19651015102863312	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-50	-0.19651015102863312	public static double do_algebra ( String [ ] operator, int [ ] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager ( ) ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator [ i ] + operand [ i ] ; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-50	-0.0842 -0.0551 -0.0776 -0.0534 -0.0937 -0.0088 -0.0107 -0.1123 -2.1762 -0.1813 -0.0664 -0.0927 -1.4738 -0.1315 -0.1828 -0.0841 -0.0359 -0.0814 -0.0610 -0.1587 -0.0130 -0.3406 -0.1895 -0.0651 -0.0884 -0.1785 -0.0473 -0.0816 -0.0967 -0.0818 -0.0600 -0.1209 -0.0469 -0.0728 -0.1887 -0.1381 -0.0802 -0.1432 -0.0491 -0.0326 -0.0892 -0.0649 -0.1595 -0.0903 -0.0283 -0.0257 -0.1043 -0.0914 -0.0123 -0.0688 -0.0862 -0.0865 -2.3248 -0.1681 -0.0845 -1.3706 -0.1437 -0.1092 -0.0821 -0.0886 -0.0865 -0.9945 -0.1029 -0.0814 -0.1783 -0.0956 -0.0695 -0.1931 -0.0899 -0.1711 -0.1803 -0.0825 -0.0830 -0.2511 -0.0969 -0.1383 -0.0937 -0.1344 -0.0800 -0.1570 -0.0425 -0.0785 -0.1163 -0.0808 -0.1016 -0.1076 -0.1522 -0.4755 -0.0890 -1.0405 -0.1063 -0.0672 -0.1284 -0.0164 -0.1134 -0.1381 -0.1016 -0.1767 -0.7614 -0.1821 -0.1338 -0.0957 -0.0821 -0.0734
S-78	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-78	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-78	-0.19594037532806396	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-78	-0.19594037532806396	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-78	-0.0995 -0.0535 -0.4356 -0.0888 -0.9040 -0.0597 -0.0650 -0.0949 -0.0586 -0.0888 -0.0482 -0.1057 -0.0933 -0.0833 -0.0843 -0.0800 -0.4520 -0.0931 -0.8282 -0.0625 -0.0492 -0.0817 -0.0719 -1.9387 -0.0856 -0.9708 -0.0658 -0.2047 -0.1027 -0.0828 -0.2147 -0.1113 -0.0676 -0.0853 -0.0842 -1.0303 -0.1070 -0.1255 -0.1031 -0.4985 -0.0770 -0.0880 -0.1962 -0.0815 -0.0803 -0.1053 -0.0579 -0.1010 -0.0601 -0.0899 -0.0811 -0.6350 -0.0869 -0.1049 -0.0736 -0.0911 -0.0920 -0.6744 -0.1180 -0.0826 -0.1290 -1.1664 -0.0737 -0.0744 -0.1627 -0.0827 -0.0950 -0.1371 -0.1152 -0.3547 -0.2471 -0.0828 -0.2306 -0.1319 -0.0895 -0.1171 -0.0965 -0.1040 -0.0443 -0.1000 -0.2469 -0.3169 -0.1360 -0.1249 -0.1858 -0.1238 -0.1660 -0.1066 -0.0416 -0.1000 -0.2597 -0.2651 -0.4149 -0.1118 -0.1462 -0.2290 -0.0795 -0.1270 -0.0828 -0.0453 -0.1432 -0.0825 -0.0738
S-16	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-16	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-16	-0.19594044983386993	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-16	-0.19594044983386993	public static List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-16	-0.0995 -0.0535 -0.4356 -0.0888 -0.9040 -0.0597 -0.0650 -0.0949 -0.0586 -0.0888 -0.0482 -0.1057 -0.0933 -0.0833 -0.0843 -0.0800 -0.4520 -0.0931 -0.8282 -0.0625 -0.0492 -0.0817 -0.0719 -1.9387 -0.0856 -0.9708 -0.0658 -0.2047 -0.1027 -0.0828 -0.2147 -0.1113 -0.0676 -0.0853 -0.0842 -1.0304 -0.1070 -0.1255 -0.1031 -0.4985 -0.0770 -0.0880 -0.1962 -0.0815 -0.0803 -0.1053 -0.0579 -0.1010 -0.0601 -0.0899 -0.0811 -0.6350 -0.0869 -0.1049 -0.0736 -0.0911 -0.0920 -0.6744 -0.1180 -0.0826 -0.1290 -1.1664 -0.0737 -0.0744 -0.1627 -0.0827 -0.0950 -0.1371 -0.1152 -0.3547 -0.2471 -0.0828 -0.2306 -0.1319 -0.0895 -0.1171 -0.0965 -0.1040 -0.0443 -0.1000 -0.2469 -0.3169 -0.1360 -0.1249 -0.1858 -0.1238 -0.1660 -0.1066 -0.0416 -0.1000 -0.2597 -0.2651 -0.4149 -0.1118 -0.1462 -0.2290 -0.0795 -0.1270 -0.0828 -0.0453 -0.1432 -0.0825 -0.0738
S-64	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-64	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { row_capacity += grid [ i ] [ j ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-64	-0.18485131859779358	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-64	-0.18485131859779358	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-64	-0.1018 -0.0444 -0.1129 -0.0444 -0.0888 -0.0616 -0.1152 -0.0940 -0.1340 -0.0850 -0.1064 -0.0945 -0.0187 -1.3904 -0.0848 -0.0257 -0.1025 -0.1000 -0.0901 -0.0874 -0.0957 -0.1061 -0.0849 -1.2044 -0.1836 -0.1090 -0.0734 -0.1008 -0.0830 -1.2974 -0.0881 -0.0775 -0.1051 -0.1300 -0.0927 -0.5915 -0.0763 -0.6870 -0.0745 -0.0830 -0.1027 -0.1180 -0.0978 -0.0959 -0.0936 -1.4339 -0.0908 -0.1043 -0.0723 -0.0980 -0.0996 -1.3448 -0.0873 -0.0554 -0.0563 -0.1034 -0.3548 -0.0992 -0.1148 -0.1381 -0.3251 -0.0733 -0.6111 -0.0780 -0.0902 -0.2603 -0.0952 -0.1206 -0.0721 -0.0420 -0.0844 -0.1255 -0.0640 -0.0712 -0.0932 -0.0865 -0.0979 -0.0897 -0.0957 -0.1184 -0.2216 -0.2318 -0.0970 -0.0953 -0.2427 -0.0815 -0.1021 -0.0959 -0.2284 -0.0962 -0.1137 -0.0987 -0.0942 -0.2352 -0.1069 -0.0817 -0.1010 -0.2310 -0.0806 -0.0681
S-5	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-5	public static int max_fill ( int [ ] [ ] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ i ] .length; j++ ) { row_capacity += grid [ i ] [ j ] ; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-5	-0.18485122919082642	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-5	-0.18485122919082642	public static int max_fill ( int [ ] [ ] grid , int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid [ j ] .length ; j++ ) { row_capacity += grid [ j ] [ i ] ; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-5	-0.1018 -0.0444 -0.1129 -0.0444 -0.0888 -0.0616 -0.1152 -0.0940 -0.1340 -0.0850 -0.1064 -0.0945 -0.0187 -1.3904 -0.0847 -0.0257 -0.1025 -0.1000 -0.0901 -0.0874 -0.0957 -0.1061 -0.0849 -1.2044 -0.1836 -0.1090 -0.0734 -0.1008 -0.0830 -1.2974 -0.0881 -0.0775 -0.1051 -0.1300 -0.0927 -0.5915 -0.0763 -0.6870 -0.0745 -0.0830 -0.1027 -0.1180 -0.0978 -0.0959 -0.0936 -1.4339 -0.0908 -0.1043 -0.0723 -0.0980 -0.0996 -1.3448 -0.0873 -0.0554 -0.0563 -0.1034 -0.3548 -0.0992 -0.1148 -0.1381 -0.3251 -0.0733 -0.6111 -0.0780 -0.0902 -0.2603 -0.0952 -0.1206 -0.0721 -0.0420 -0.0844 -0.1255 -0.0640 -0.0712 -0.0932 -0.0865 -0.0979 -0.0897 -0.0957 -0.1184 -0.2216 -0.2318 -0.0970 -0.0953 -0.2427 -0.0815 -0.1021 -0.0959 -0.2284 -0.0962 -0.1137 -0.0987 -0.0942 -0.2352 -0.1069 -0.0817 -0.1010 -0.2310 -0.0806 -0.0681
S-3	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-3	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-3	-0.18098807334899902	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-3	-0.18098807334899902	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-3	-0.1012 -0.0466 -0.0992 -0.0321 -0.0130 -0.0878 -0.0506 -0.0872 -0.0491 -0.0914 -0.0944 -0.1233 -0.1107 -0.2035 -0.0841 -0.0693 -0.0878 -0.0880 -0.1520 -0.1150 -0.0710 -0.0991 -0.0877 -1.3695 -0.0755 -0.0770 -0.1222 -0.0867 -0.0726 -1.0070 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3570 -0.1025 -0.0800 -0.0752 -0.1010 -0.0782 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0918 -0.1086 -0.0706 -0.0988 -0.1061 -0.1149 -0.6197 -0.0867 -0.0703 -0.0762 -0.1049 -0.0797 -1.1160 -0.0965 -0.0895 -0.1172 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2604 -0.0745 -0.1368 -0.0707 -0.0946 -0.2035 -0.0867 -0.4493 -0.0619 -0.0842 -0.0972 -0.0836 -0.5767 -0.1803 -0.0882 -0.1377 -0.0879 -1.3503 -0.1125 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-55	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-55	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-55	-0.2329205721616745	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-55	-0.2329205721616745	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-55	-0.0931 -0.0496 -0.0984 -0.0374 -0.0596 -0.0052 -0.0856 -0.0397 -0.1114 -0.9754 -0.1020 -1.2892 -0.6656 -0.0935 -0.0849 -0.0924 -0.1180 -0.0536 -0.0886 -0.1133 -0.2007 -0.0870 -0.4265 -0.0814 -0.0831 -1.7263 -0.0711 -0.0840 -0.1085 -0.6413 -0.1706 -0.1136 -0.0731 -0.0739 -0.0847 -0.9497 -0.0873 -0.0756 -0.5547 -0.1422 -0.0941 -0.4527 -0.0767 -0.0955 -0.0742 -0.0929 -0.2137 -0.0807 -0.0748 -0.0993 -0.1074 -0.0654 -0.0788 -0.0968 -0.6600 -0.1030 -0.0701 -0.0674 -0.6073 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1219 -0.1142 -0.1855 -0.1133 -0.8583 -0.1270 -0.1218 -1.3943 -0.1809 -0.8061 -0.0818 -0.1054 -0.1008 -0.4974 -0.1050 -0.1173 -0.1230 -0.6346 -0.1061 -0.0947 -0.6454 -0.1101 -0.1214 -0.0784 -0.0832 -0.0872 -0.0866 -0.0847 -0.0460 -1.2175 -0.0849 -0.0761 -0.0775 -0.0319 -0.7549 -0.0742 -0.0765
S-54	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-54	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b + b; for ( int i = 0; i < a.length ( ) - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-54	-0.2329205721616745	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-54	-0.2329205721616745	public static boolean cycpattern_check ( String a, String b ) { int l = b.length ( ) ; String pat = b ; for ( int i = 0; i < a.length ( ) ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-54	-0.0931 -0.0496 -0.0984 -0.0374 -0.0596 -0.0052 -0.0856 -0.0397 -0.1114 -0.9754 -0.1020 -1.2892 -0.6656 -0.0935 -0.0849 -0.0924 -0.1180 -0.0536 -0.0886 -0.1133 -0.2007 -0.0870 -0.4265 -0.0814 -0.0831 -1.7263 -0.0711 -0.0840 -0.1085 -0.6413 -0.1706 -0.1136 -0.0731 -0.0739 -0.0847 -0.9497 -0.0873 -0.0756 -0.5547 -0.1422 -0.0941 -0.4527 -0.0767 -0.0955 -0.0742 -0.0929 -0.2137 -0.0807 -0.0748 -0.0993 -0.1074 -0.0654 -0.0788 -0.0968 -0.6600 -0.1030 -0.0702 -0.0674 -0.6073 -0.0734 -0.1013 -0.1453 -0.0767 -0.0991 -0.1219 -0.1142 -0.1855 -0.1133 -0.8583 -0.1270 -0.1218 -1.3943 -0.1809 -0.8061 -0.0818 -0.1054 -0.1008 -0.4974 -0.1050 -0.1173 -0.1230 -0.6346 -0.1061 -0.0947 -0.6454 -0.1101 -0.1214 -0.0784 -0.0832 -0.0872 -0.0866 -0.0847 -0.0460 -1.2175 -0.0849 -0.0761 -0.0775 -0.0319 -0.7549 -0.0742 -0.0765
S-57	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-57	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-57	-0.18098804354667664	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-57	-0.18098804354667664	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-57	-0.1012 -0.0466 -0.0992 -0.0321 -0.0130 -0.0878 -0.0506 -0.0872 -0.0491 -0.0914 -0.0944 -0.1233 -0.1107 -0.2035 -0.0841 -0.0693 -0.0878 -0.0880 -0.1520 -0.1150 -0.0710 -0.0991 -0.0877 -1.3695 -0.0755 -0.0770 -0.1222 -0.0867 -0.0726 -1.0070 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3570 -0.1025 -0.0800 -0.0752 -0.1010 -0.0782 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0918 -0.1086 -0.0706 -0.0988 -0.1061 -0.1149 -0.6197 -0.0867 -0.0703 -0.0762 -0.1049 -0.0797 -1.1160 -0.0965 -0.0895 -0.1172 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2604 -0.0745 -0.1368 -0.0707 -0.0946 -0.2035 -0.0867 -0.4493 -0.0619 -0.0842 -0.0972 -0.0836 -0.5767 -0.1803 -0.0882 -0.1377 -0.0879 -1.3503 -0.1125 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-26	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
T-26	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true; } } } return false; }
H-26	-0.18098793923854828	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
D-26	-0.18098793923854828	public static boolean triples_sum_to_zero ( int [ ] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers [ i ] + numbers [ j ] + numbers [ k ] == 0 ) return true ; } } } return false ; }
P-26	-0.1012 -0.0466 -0.0992 -0.0321 -0.0130 -0.0878 -0.0506 -0.0872 -0.0491 -0.0914 -0.0944 -0.1233 -0.1107 -0.2035 -0.0841 -0.0693 -0.0878 -0.0880 -0.1520 -0.1150 -0.0710 -0.0991 -0.0877 -1.3695 -0.0755 -0.0770 -0.1222 -0.0867 -0.0726 -1.0070 -0.0703 -0.0879 -0.1787 -0.0798 -0.0818 -0.1006 -0.1097 -0.0658 -0.0995 -0.1004 -0.0978 -1.3570 -0.1025 -0.0800 -0.0752 -0.1010 -0.0782 -1.1396 -0.0845 -0.0748 -0.1325 -0.0797 -0.0902 -0.0918 -0.1086 -0.0706 -0.0988 -0.1061 -0.1149 -0.6197 -0.0867 -0.0703 -0.0762 -0.1049 -0.0797 -1.1160 -0.0965 -0.0895 -0.1172 -0.0812 -0.1103 -0.1320 -0.1120 -0.1821 -0.0704 -0.2604 -0.0745 -0.1368 -0.0707 -0.0946 -0.2035 -0.0867 -0.4493 -0.0619 -0.0842 -0.0972 -0.0836 -0.5767 -0.1803 -0.0882 -0.1377 -0.0879 -1.3503 -0.1125 -0.1131 -0.1044 -0.0886 -0.0408 -0.4737 -0.0860 -0.0786
S-42	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
T-42	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade; }
H-42	-0.12029261887073517	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
D-42	-0.12029261887073517	public static String [ ] numerical_letter_grade ( double [ ] grades ) { String [ ] letter_grade = new String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) letter_grade [ i ] = "A+"; else if ( gpa > 3.7 ) letter_grade [ i ] = "A"; else if ( gpa > 3.3 ) letter_grade [ i ] = "A-"; else if ( gpa > 3.0 ) letter_grade [ i ] = "B+"; else if ( gpa > 2.7 ) letter_grade [ i ] = "B"; else if ( gpa > 2.3 ) letter_grade [ i ] = "B-"; else if ( gpa > 2.0 ) letter_grade [ i ] = "C+"; else if ( gpa > 1.3 ) letter_grade [ i ] = "C-"; else if ( gpa > 1.0 ) letter_grade [ i ] = "D+"; else if ( gpa > 1.7 ) letter_grade [ i ] = "C"; else if ( gpa > 0.7 ) letter_grade [ i ] = "D"; else if ( gpa > 0.0 ) letter_grade [ i ] = "D-"; else letter_grade [ i ] = "E"; } return letter_grade ; }
P-42	-0.0979 -0.0450 -2.0647 -0.1614 -0.0832 -0.0184 -0.0863 -0.1705 -0.0952 -0.0311 -0.1127 -0.1149 -0.1261 -0.0847 -0.0417 -0.0902 -0.0783 -2.2767 -0.1318 -0.0576 -0.0519 -0.0916 -0.0446 -0.0878 -0.0536 -0.9436 -0.0743 -0.0422 -0.1078 -0.0566 -0.0830 -0.0944 -0.1084 -0.1054 -0.0830 -0.0679 -0.0844 -0.6990 -0.0896 -0.0850 -0.0688 -0.1087 -0.0524 -0.2234 -0.0724 -0.0717 -0.1731 -0.0781 -0.0902 -0.1549 -0.0577 -0.0416 -0.0962 -0.0381 -0.0865 -0.0866 -0.0857 -0.0903 -0.2104 -0.1147 -0.0833 -0.0398 -0.4215 -0.0292 -0.0884 -0.0777 -0.0949 -0.0584 -0.0956 -0.0970 -0.0772 -0.0986 -0.0959 -0.0507 -0.1323 -0.5968 -0.0976 -0.1034 -0.1115 -0.0796 -0.0470 -0.2143 -0.0388 -0.0872 -0.0444 -0.0871 -0.0526 -0.0864 -0.1108 -0.0850 -0.0981 -0.1008 -0.0478 -0.4318 -0.0711 -0.0972 -0.1127 -0.0745 -0.0474 -0.1355 -0.0319 -0.0807 -0.0379 -0.0875 -0.0573 -0.0840 -0.1043 -0.0842 -0.1017 -0.0965 -0.0631 -0.0408 -0.4459 -0.0760 -0.1006 -0.1121 -0.0732 -0.0428 -0.1341 -0.0141 -0.0926 -0.0389 -0.0914 -0.0580 -0.0911 -0.1006 -0.0789 -0.1074 -0.1037 -0.0653 -0.0850 -0.4858 -0.0882 -0.1008 -0.1062 -0.0659 -0.0434 -0.1152 -0.0424 -0.0886 -0.0371 -0.0888 -0.0571 -0.0865 -0.0995 -0.0815 -0.1113 -0.1068 -0.0624 -0.5177 -0.0648 -0.0865 -0.1097 -0.0669 -0.0439 -0.1146 -0.0357 -0.0838 -0.0397 -0.0884 -0.0575 -0.0861 -0.0975 -0.0792 -0.1019 -0.1076 -0.0864 -0.0419 -0.5334 -0.0700 -0.0941 -0.1119 -0.0679 -0.0420 -0.1329 -0.0273 -0.0946 -0.0416 -0.0928 -0.0553 -0.0875 -0.1004 -0.0801 -0.1103 -0.1197 -0.0660 -0.0991 -0.4954 -0.0828 -0.0948 -0.1089 -0.0674 -0.0480 -0.1332 -0.0084 -0.0930 -0.0424 -0.0900 -0.0591 -0.0838 -0.1029 -0.0836 -0.1090 -0.1048 -0.0517 -0.0346 -0.4444 -0.0760 -0.0864 -0.1129 -0.0731 -0.0441 -0.1187 -0.0120 -0.0895 -0.0413 -0.0939 -0.0575 -0.0865 -0.1050 -0.0850 -0.1147 -0.1144 -0.0719 -0.0926 -0.5237 -0.0892 -0.0947 -0.1085 -0.0668 -0.0480 -0.1233 -0.0144 -0.0861 -0.0381 -0.0915 -0.0591 -0.0869 -0.1014 -0.0909 -0.1101 -0.1080 -0.0475 -0.2678 -0.0653 -0.0891 -0.1133 -0.0724 -0.0449 -0.1115 -0.0226 -0.0899 -0.0376 -0.0883 -0.0631 -0.0886 -0.0983 -0.0909 -0.1209 -0.1117 -0.0523 -0.2763 -0.0658 -0.2531 -0.1126 -0.0770 -0.0405 -0.1198 -0.0240 -0.1006 -0.0415 -0.0891 -0.0639 -0.0878 -0.0974 -0.0815 -0.1223 -0.1116 -0.0636 -0.0432 -0.4931 -0.1040 -0.0354 -0.0887 -0.0643 -0.0752 -0.0930 -0.0809 -0.1348 -0.0997 -0.0422 -0.4579 -0.0822 -0.1111 -0.0432 -0.1039 -0.0474 -0.3344 -0.0906 -0.0951
S-84	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-84	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-84	-0.19087573885917664	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-84	-0.19087573885917664	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-84	-0.0872 -0.0472 -1.2823 -0.1683 -0.1113 -0.0457 -0.0778 -0.0428 -0.0832 -0.0248 -0.1071 -1.3028 -0.1542 -0.1029 -0.0381 -0.0851 -0.0928 -1.1963 -0.0732 -0.7863 -0.0701 -0.0333 -0.0892 -0.0500 -1.2239 -0.0885 -0.9764 -0.0716 -0.1496 -0.0795 -0.0800 -1.2012 -0.0806 -0.6817 -0.4696 -0.8319 -0.0836 -0.6105 -0.0581 -0.0548 -0.0195 -0.0624 -0.0555 -0.0796 -0.0425 -1.0074 -0.0904 -0.7744 -0.8277 -0.8479 -0.0774 -0.4875 -0.0602 -0.1087 -0.1653 -0.0822 -0.0846 -0.2065 -0.1081 -0.0667 -0.0723 -0.0758 -0.5591 -0.0800 -0.0774 -0.0689 -0.0945 -0.0533 -0.3508 -0.0604 -0.0814 -0.1472 -0.0788 -0.0823 -0.0786 -0.0394 -0.0961 -0.8698 -0.0804 -0.0822 -0.0791 -0.0623 -0.0777 -0.0694 -0.0865 -0.0818 -0.1621 -0.1061 -0.0746 -0.0756 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3985 -0.0507 -0.0545 -0.9085 -0.0689 -0.1140 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2233 -0.0533 -0.0940 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0741 -0.0852 -0.0675 -0.0753 -0.0558 -0.0835 -0.1062 -0.0706 -0.0607 -0.2213 -0.0898 -0.1059 -0.0613 -1.4560 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0903 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0074 -0.0798 -0.0557 -0.1025 -1.1988 -0.0674 -0.0470 -0.1294 -0.1186 -0.1097 -0.0479 -0.0983 -0.0856 -0.4433 -0.1042 -0.0327 -0.0362 -0.1019 -0.0482 -0.0974 -0.4721 -0.0363 -0.1071 -0.0756 -0.0918 -0.0947 -0.0359 -0.1038 -0.0570 -0.1060 -0.1266 -0.1013 -0.0585 -0.8572 -0.0476 -0.6363 -0.0991 -0.6429 -0.0708 -0.2796 -0.0780 -0.0995 -0.1037 -0.0325 -0.1199 -0.0617 -0.1099 -0.0931 -0.1038 -0.0672 -0.0891 -0.0966 -0.1751 -0.1075 -0.0605 -0.0769 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3406 -0.0841 -0.0600 -0.1156 -0.0384 -0.1098 -0.0899 -0.8915 -0.0888 -0.6126 -0.0899 -0.0740 -0.0969 -0.0521 -1.1699 -0.0823 -0.8475 -0.0682 -0.2472 -0.1002 -0.0806 -0.0850 -0.1082 -0.0596 -0.0600 -0.0777 -0.4448 -0.0675 -0.0742 -0.0561 -0.1233 -0.1442 -0.5062 -0.0643 -0.0925 -0.0595 -0.0732 -0.1215 -0.0824 -0.0992 -0.0716 -0.1062 -1.0871 -0.1125 -0.0395 -0.1411 -0.0594 -0.1344 -0.1989 -0.1140 -0.0424 -0.1236 -0.3369 -0.1008 -0.0761 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0654 -0.0688 -0.1636 -1.0339 -0.1205 -0.0347 -1.0926 -0.0810 -0.2063 -0.1144 -0.0944 -0.0925 -0.0885 -0.0762 -0.0792
S-41	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-41	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-41	-0.19087564945220947	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-41	-0.19087564945220947	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-41	-0.0872 -0.0472 -1.2823 -0.1683 -0.1113 -0.0457 -0.0778 -0.0428 -0.0832 -0.0248 -0.1071 -1.3028 -0.1542 -0.1029 -0.0381 -0.0851 -0.0928 -1.1963 -0.0732 -0.7863 -0.0701 -0.0333 -0.0892 -0.0500 -1.2239 -0.0885 -0.9764 -0.0716 -0.1496 -0.0795 -0.0800 -1.2012 -0.0806 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0581 -0.0548 -0.0195 -0.0624 -0.0555 -0.0796 -0.0425 -1.0074 -0.0904 -0.7744 -0.8277 -0.8479 -0.0774 -0.4875 -0.0602 -0.1087 -0.1653 -0.0822 -0.0846 -0.2065 -0.1081 -0.0667 -0.0723 -0.0758 -0.5591 -0.0800 -0.0774 -0.0689 -0.0945 -0.0533 -0.3508 -0.0604 -0.0814 -0.1472 -0.0788 -0.0823 -0.0786 -0.0394 -0.0961 -0.8698 -0.0804 -0.0822 -0.0791 -0.0623 -0.0777 -0.0694 -0.0865 -0.0818 -0.1621 -0.1061 -0.0746 -0.0756 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3985 -0.0507 -0.0545 -0.9085 -0.0689 -0.1140 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2233 -0.0533 -0.0940 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0741 -0.0852 -0.0675 -0.0753 -0.0558 -0.0835 -0.1062 -0.0706 -0.0607 -0.2213 -0.0898 -0.1059 -0.0613 -1.4560 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0903 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0074 -0.0798 -0.0557 -0.1025 -1.1988 -0.0674 -0.0470 -0.1294 -0.1186 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1042 -0.0327 -0.0362 -0.1019 -0.0482 -0.0974 -0.4721 -0.0363 -0.1071 -0.0756 -0.0918 -0.0946 -0.0359 -0.1038 -0.0570 -0.1060 -0.1266 -0.1013 -0.0585 -0.8572 -0.0476 -0.6363 -0.0991 -0.6429 -0.0708 -0.2796 -0.0780 -0.0995 -0.1037 -0.0325 -0.1199 -0.0617 -0.1099 -0.0931 -0.1038 -0.0672 -0.0891 -0.0966 -0.1751 -0.1075 -0.0605 -0.0769 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3406 -0.0841 -0.0600 -0.1156 -0.0384 -0.1098 -0.0899 -0.8915 -0.0888 -0.6126 -0.0899 -0.0740 -0.0969 -0.0521 -1.1699 -0.0823 -0.8475 -0.0682 -0.2472 -0.1002 -0.0806 -0.0850 -0.1082 -0.0596 -0.0600 -0.0777 -0.4448 -0.0675 -0.0742 -0.0561 -0.1233 -0.1442 -0.5062 -0.0643 -0.0925 -0.0595 -0.0732 -0.1215 -0.0823 -0.0992 -0.0716 -0.1062 -1.0871 -0.1125 -0.0395 -0.1411 -0.0594 -0.1344 -0.1989 -0.1140 -0.0424 -0.1236 -0.3369 -0.1009 -0.0761 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0654 -0.0688 -0.1636 -1.0339 -0.1205 -0.0347 -1.0926 -0.0810 -0.2063 -0.1144 -0.0944 -0.0925 -0.0885 -0.0762 -0.0792
S-9	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
T-9	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; else digit += ( n + "" ) .toCharArray ( ) [ j ] - '0'; } if ( ! digits.contains ( digit ) ) digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
H-9	-0.19087570905685425	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
D-9	-0.19087570905685425	public static Integer [ ] order_by_points ( Integer [ ] nums ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; HashMap < Integer, ArrayList < Integer > > digits_number = new HashMap < Integer, ArrayList < Integer > > ( ) ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums [ i ] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray ( ) .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray ( ) [ j ] - '0' ) * neg; } digits.add ( digit ) ; if ( ! digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList < Integer > ( ) ) ; digits_number.get ( digit ) .add ( nums [ i ] ) ; } Collections.sort ( digits ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0; i < digits.size ( ) ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer [ ] { } ) ; }
P-9	-0.0872 -0.0472 -1.2823 -0.1683 -0.1113 -0.0457 -0.0778 -0.0428 -0.0832 -0.0248 -0.1071 -1.3028 -0.1542 -0.1029 -0.0381 -0.0851 -0.0928 -1.1963 -0.0732 -0.7863 -0.0701 -0.0333 -0.0892 -0.0500 -1.2239 -0.0885 -0.9764 -0.0716 -0.1496 -0.0795 -0.0800 -1.2012 -0.0806 -0.6817 -0.4696 -0.8319 -0.0836 -0.6106 -0.0581 -0.0548 -0.0195 -0.0624 -0.0555 -0.0796 -0.0425 -1.0074 -0.0904 -0.7744 -0.8277 -0.8479 -0.0774 -0.4875 -0.0602 -0.1087 -0.1653 -0.0822 -0.0846 -0.2065 -0.1081 -0.0667 -0.0723 -0.0758 -0.5591 -0.0800 -0.0774 -0.0689 -0.0945 -0.0533 -0.3508 -0.0604 -0.0814 -0.1472 -0.0788 -0.0823 -0.0786 -0.0394 -0.0961 -0.8698 -0.0804 -0.0822 -0.0791 -0.0623 -0.0777 -0.0694 -0.0865 -0.0818 -0.1621 -0.1061 -0.0746 -0.0756 -0.0925 -0.0836 -0.0824 -0.0681 -0.0952 -0.3985 -0.0507 -0.0545 -0.9085 -0.0689 -0.1140 -0.1607 -0.1408 -0.0798 -0.0679 -0.0859 -0.2233 -0.0533 -0.0940 -0.0571 -0.0775 -0.0746 -0.4441 -0.0765 -0.0741 -0.0852 -0.0675 -0.0753 -0.0558 -0.0835 -0.1062 -0.0706 -0.0607 -0.2213 -0.0898 -0.1059 -0.0613 -1.4560 -0.0793 -0.0653 -0.1117 -0.0804 -0.0844 -0.0727 -0.0689 -0.0903 -0.1200 -0.0583 -0.0633 -0.0493 -0.0748 -0.0980 -0.0786 -0.0726 -0.1292 -0.0698 -0.0571 -0.0811 -0.0454 -0.1348 -0.0074 -0.0798 -0.0557 -0.1025 -1.1988 -0.0674 -0.0470 -0.1294 -0.1186 -0.1098 -0.0479 -0.0983 -0.0856 -0.4433 -0.1042 -0.0327 -0.0362 -0.1019 -0.0482 -0.0974 -0.4721 -0.0363 -0.1071 -0.0756 -0.0918 -0.0947 -0.0359 -0.1038 -0.0570 -0.1060 -0.1266 -0.1013 -0.0585 -0.8572 -0.0476 -0.6363 -0.0991 -0.6429 -0.0708 -0.2796 -0.0780 -0.0995 -0.1037 -0.0325 -0.1199 -0.0617 -0.1099 -0.0931 -0.1038 -0.0672 -0.0891 -0.0966 -0.1751 -0.1075 -0.0605 -0.0769 -0.0616 -0.0843 -0.1073 -0.0879 -0.1050 -1.3406 -0.0841 -0.0600 -0.1156 -0.0384 -0.1098 -0.0899 -0.8915 -0.0888 -0.6126 -0.0899 -0.0740 -0.0969 -0.0521 -1.1699 -0.0823 -0.8475 -0.0682 -0.2472 -0.1002 -0.0806 -0.0850 -0.1082 -0.0596 -0.0600 -0.0777 -0.4448 -0.0675 -0.0742 -0.0561 -0.1233 -0.1442 -0.5062 -0.0643 -0.0925 -0.0595 -0.0732 -0.1215 -0.0823 -0.0992 -0.0716 -0.1062 -1.0871 -0.1125 -0.0395 -0.1411 -0.0594 -0.1344 -0.1989 -0.1140 -0.0424 -0.1236 -0.3369 -0.1009 -0.0761 -0.0946 -0.0938 -0.1105 -0.0866 -0.0724 -0.0654 -0.0688 -0.1636 -1.0339 -0.1205 -0.0347 -1.0926 -0.0810 -0.2063 -0.1144 -0.0944 -0.0925 -0.0885 -0.0762 -0.0792
S-89	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-89	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-89	-0.17258523404598236	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-89	-0.17258523404598236	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-89	-0.0854 -0.0529 -0.0797 -0.0392 -0.0965 -0.0447 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5215 -0.0919 -3.2850 -0.0777 -0.2414 -0.0864 -0.2317 -1.1821 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1264 -0.5834 -0.1237 -0.0294 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1355 -0.1255 -0.0850 -0.1202 -0.0560 -0.0803 -0.0860 -0.0642 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3097 -0.1055 -0.0420 -0.0926 -0.1048 -0.0700 -0.0929 -0.0764 -0.0970 -0.0888 -0.0694 -0.0395 -0.0908 -0.8120 -0.0937 -1.2210 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0671 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0375 -0.0882 -0.0833 -0.0698 -0.0867 -0.0725 -0.0856 -0.0878 -0.2228 -0.1065 -0.1381 -0.0821 -0.1310 -0.1099 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8057 -0.0991 -0.1725 -0.0589 -0.0841 -0.0860 -0.0730 -0.0613 -0.0890 -0.0848 -0.1455 -0.0399 -0.0422 -0.0472 -0.0632 -0.1145 -0.0327 -0.0655 -0.0924 -0.1952 -0.1038 -0.0644 -0.0859 -0.0691 -0.4248 -0.0810 -0.0712 -0.1318 -0.0969 -0.0679 -0.0456 -0.0793 -0.9638 -0.0708 -0.2725 -0.0751 -0.1023 -0.1116 -0.1092 -0.1311 -0.1549 -0.0768 -0.1050 -0.0614 -0.0810 -0.0789 -0.0746 -0.0543 -0.9972 -0.2164 -0.1032 -0.0472 -0.0631 -0.0944 -0.1009 -0.0590 -0.0894 -0.0131 -0.0760 -0.0902 -0.0631 -0.0765 -0.6089 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0636 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0984 -0.1002 -0.0644 -0.0767 -0.0755 -0.4490 -0.0837 -0.0590 -0.1365 -0.0965 -0.0751 -0.0341 -0.0794 -0.6885 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1789 -0.0908 -0.0990 -0.0654 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0299 -0.0820 -0.0824 -0.0604 -0.0831 -0.4847 -0.0830 -0.1317 -0.1042 -0.0997 -0.0861 -0.1344 -0.1789 -0.1256 -0.0519 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0446 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1054 -0.0698 -0.1152 -0.1882 -0.0618 -0.0780 -0.1058 -0.0838 -0.0746 -0.5683 -0.0811 -0.0802 -0.0660 -1.3016 -0.0843 -0.0906
S-77	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-77	public static boolean valid_date ( String date ) { try { date = date.trim ( ) ; String [ ] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info [ 0 ] ) ; int day = Integer.parseInt ( date_info [ 1 ] ) ; int year = Integer.parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1 [ i ] && ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-77	-0.17258517444133759	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
D-77	-0.17258517444133759	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info [ 0 ] ) ; int day = Integer. parseInt ( date_info [ 1 ] ) ; int year = Integer. parseInt ( date_info [ 2 ] ) ; if ( month < 1 || month > 12 ) return false; int [ ] month_check1 = { 1, 3, 5, 7, 8, 10, 12 } ; for ( int i = 0; i < month_check1.length ; i++ ) { if ( month != month_check1 [ i ] && ! ( day < 1 || day > 31 ) ) return false; } int [ ] month_check2 = { 4, 6, 9, 11 } ; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2 [ i ] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
P-77	-0.0854 -0.0529 -0.0797 -0.0392 -0.0965 -0.0447 -0.1175 -1.2955 -0.0520 -0.0803 -0.0919 -0.5215 -0.0919 -3.2850 -0.0777 -0.2414 -0.0864 -0.2317 -1.1821 -0.0386 -0.1150 -0.1024 -0.0768 -0.0490 -0.1264 -0.5834 -0.1237 -0.0294 -0.0893 -0.0963 -0.4807 -0.1097 -0.0596 -0.1083 -0.1355 -0.1255 -0.0850 -0.1202 -0.0560 -0.0803 -0.0860 -0.0642 -1.5735 -0.1044 -0.0646 -0.0938 -0.8597 -0.0950 -1.3097 -0.1055 -0.0420 -0.0926 -0.1048 -0.0700 -0.0929 -0.0764 -0.0970 -0.0888 -0.0694 -0.0395 -0.0908 -0.8120 -0.0937 -1.2210 -0.1061 -0.0414 -0.0905 -0.0930 -0.0896 -0.1225 -0.0671 -0.0909 -0.0936 -0.0924 -0.0858 -0.0845 -0.5996 -0.0910 -1.2938 -0.1032 -0.0375 -0.0882 -0.0833 -0.0698 -0.0867 -0.0725 -0.0856 -0.0878 -0.2228 -0.1065 -0.1381 -0.0821 -0.1310 -0.1099 -0.0959 -0.0789 -0.0216 -0.0806 -0.0645 -0.0845 -0.8057 -0.0991 -0.1725 -0.0589 -0.0841 -0.0860 -0.0730 -0.0613 -0.0890 -0.0848 -0.1455 -0.0399 -0.0422 -0.0472 -0.0632 -0.1145 -0.0327 -0.0655 -0.0924 -0.1952 -0.1038 -0.0644 -0.0859 -0.0691 -0.4248 -0.0810 -0.0712 -0.1318 -0.0969 -0.0679 -0.0456 -0.0793 -0.9638 -0.0708 -0.2725 -0.0751 -0.1023 -0.1116 -0.1092 -0.1311 -0.1549 -0.0768 -0.1050 -0.0614 -0.0810 -0.0789 -0.0746 -0.0543 -0.9972 -0.2164 -0.1032 -0.0472 -0.0631 -0.0944 -0.1009 -0.0590 -0.0894 -0.0131 -0.0760 -0.0902 -0.0631 -0.0765 -0.6089 -0.0932 -0.1031 -0.1144 -0.0580 -0.1078 -0.0910 -0.0636 -0.0817 -0.0927 -0.0693 -0.0848 -0.0315 -0.1057 -0.0388 -0.0728 -0.0968 -0.0984 -0.1002 -0.0644 -0.0767 -0.0755 -0.4490 -0.0837 -0.0590 -0.1365 -0.0965 -0.0751 -0.0341 -0.0794 -0.6885 -0.0690 -0.2453 -0.0780 -0.0916 -0.1038 -0.1156 -0.1544 -0.1789 -0.0908 -0.0990 -0.0654 -0.1617 -0.0882 -0.0752 -0.0621 -0.4425 -0.1594 -0.0702 -0.0822 -0.1114 -0.0770 -0.0630 -0.0961 -0.0299 -0.0820 -0.0824 -0.0604 -0.0831 -0.4847 -0.0830 -0.1317 -0.1042 -0.0997 -0.0861 -0.1344 -0.1789 -0.1256 -0.0519 -0.0651 -0.0872 -0.0662 -0.0536 -0.0984 -0.0446 -0.0768 -0.0901 -0.0594 -0.0632 -0.7857 -0.1054 -0.0698 -0.1152 -0.1882 -0.0618 -0.0780 -0.1058 -0.0838 -0.0746 -0.5683 -0.0811 -0.0802 -0.0660 -1.3016 -0.0843 -0.0906
S-65	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-65	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-65	-0.17628808319568634	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-65	-0.17628808319568634	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-65	-0.0889 -0.0400 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0103 -0.0535 -0.0712 -0.0848 -0.0870 -0.2150 -0.1060 -0.0722 -0.1537 -0.1337 -0.2510 -0.0714 -0.0823 -0.0874 -0.0814 -0.0887 -0.1171 -0.8666 -1.1951 -0.0694 -0.7433 -0.0563 -0.1819 -0.0786 -0.0345 -0.0780 -0.0555 -1.0511 -0.0818 -0.1002 -0.1122 -0.0929 -0.0811 -0.0878 -1.5529 -0.0894 -0.0404 -0.1068 -0.2128 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1936 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2349 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3220 -0.1153 -0.0901 -0.0941 -0.1991 -0.1118 -0.0873 -0.0418 -0.0786 -0.8492 -0.1256 -0.1018 -0.0808 -0.0897 -0.0760 -0.9205 -0.0897 -0.0768 -0.0986 -0.1032 -0.1206 -0.2009 -0.0664 -0.0915 -0.0843 -0.6517 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1924 -0.1149 -0.0820 -0.0918 -0.2156 -0.1584 -0.0799 -0.0529 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0809 -1.1011 -0.0849 -0.4946 -0.0567 -0.0511 -0.0745 -0.0660 -0.0905 -0.0408 -0.0851 -0.0421 -0.8184 -0.0782 -0.0913 -0.1941 -0.1149 -0.0803 -0.0881 -0.1077 -0.0774 -0.0874 -0.0735 -0.7711 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2042 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1373 -0.1022 -0.0884 -0.1026 -0.0466 -0.1281 -0.2017 -0.1089 -0.0665 -0.1045 -0.1887 -0.1109 -0.0880 -0.0962 -0.0980 -0.0946 -0.0846 -0.0977 -0.0997 -0.0791 -0.0843 -0.0789 -0.6037 -0.0973 -0.0754 -1.0500 -0.0989 -0.1107 -0.2535 -0.0674 -0.0919 -0.0844 -0.5318 -0.0760 -0.0892 -0.1590 -0.0919 -0.1007 -0.1015 -0.0416 -0.0989 -0.1629 -0.1045 -0.0626 -0.1078 -0.2109 -0.1156 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4480 -0.0950 -0.0618 -0.0843 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0778 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0978 -0.0947 -0.0994 -0.0407 -0.1230 -0.2145 -0.1187 -0.0884 -0.0921 -0.1183 -0.2104 -0.0972 -0.0630 -0.1381 -0.2608 -0.1062 -0.0768 -0.0924 -0.0910 -0.1377 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-60	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-60	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-60	-0.17628803849220276	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-60	-0.17628803849220276	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-60	-0.0889 -0.0400 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0103 -0.0535 -0.0712 -0.0848 -0.0870 -0.2150 -0.1060 -0.0722 -0.1537 -0.1337 -0.2510 -0.0714 -0.0823 -0.0874 -0.0814 -0.0887 -0.1171 -0.8666 -1.1951 -0.0694 -0.7433 -0.0563 -0.1819 -0.0786 -0.0345 -0.0780 -0.0555 -1.0511 -0.0818 -0.1002 -0.1122 -0.0929 -0.0811 -0.0878 -1.5529 -0.0894 -0.0404 -0.1068 -0.2128 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1936 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2349 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3220 -0.1153 -0.0901 -0.0941 -0.1991 -0.1118 -0.0873 -0.0418 -0.0786 -0.8492 -0.1256 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0986 -0.1032 -0.1206 -0.2009 -0.0664 -0.0915 -0.0843 -0.6517 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1924 -0.1149 -0.0820 -0.0918 -0.2156 -0.1584 -0.0799 -0.0529 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0809 -1.1011 -0.0849 -0.4946 -0.0567 -0.0511 -0.0745 -0.0660 -0.0905 -0.0408 -0.0851 -0.0421 -0.8184 -0.0782 -0.0913 -0.1941 -0.1149 -0.0803 -0.0881 -0.1077 -0.0774 -0.0874 -0.0735 -0.7711 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2042 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1373 -0.1022 -0.0884 -0.1026 -0.0466 -0.1281 -0.2017 -0.1089 -0.0665 -0.1045 -0.1887 -0.1109 -0.0880 -0.0963 -0.0980 -0.0946 -0.0846 -0.0977 -0.0997 -0.0791 -0.0843 -0.0789 -0.6037 -0.0973 -0.0754 -1.0500 -0.0989 -0.1107 -0.2535 -0.0674 -0.0919 -0.0844 -0.5318 -0.0760 -0.0892 -0.1590 -0.0919 -0.1007 -0.1015 -0.0416 -0.0989 -0.1629 -0.1045 -0.0626 -0.1078 -0.2109 -0.1156 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4480 -0.0950 -0.0618 -0.0843 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0778 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0978 -0.0947 -0.0994 -0.0407 -0.1230 -0.2145 -0.1187 -0.0884 -0.0921 -0.1183 -0.2104 -0.0972 -0.0630 -0.1381 -0.2608 -0.1062 -0.0768 -0.0924 -0.0910 -0.1377 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-53	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-53	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-53	-0.17628805339336395	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-53	-0.17628805339336395	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-53	-0.0889 -0.0400 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0103 -0.0535 -0.0712 -0.0848 -0.0870 -0.2150 -0.1060 -0.0722 -0.1537 -0.1337 -0.2510 -0.0714 -0.0823 -0.0874 -0.0814 -0.0887 -0.1171 -0.8666 -1.1951 -0.0694 -0.7433 -0.0563 -0.1819 -0.0786 -0.0345 -0.0780 -0.0555 -1.0511 -0.0818 -0.1002 -0.1122 -0.0929 -0.0811 -0.0878 -1.5529 -0.0894 -0.0404 -0.1068 -0.2128 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1936 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2349 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3220 -0.1153 -0.0901 -0.0941 -0.1991 -0.1118 -0.0873 -0.0418 -0.0786 -0.8492 -0.1256 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0986 -0.1032 -0.1206 -0.2009 -0.0664 -0.0915 -0.0843 -0.6517 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1924 -0.1149 -0.0820 -0.0918 -0.2156 -0.1584 -0.0799 -0.0529 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0809 -1.1011 -0.0849 -0.4946 -0.0567 -0.0511 -0.0745 -0.0660 -0.0905 -0.0408 -0.0851 -0.0421 -0.8184 -0.0782 -0.0913 -0.1941 -0.1149 -0.0803 -0.0881 -0.1077 -0.0774 -0.0874 -0.0735 -0.7711 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2042 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1373 -0.1022 -0.0884 -0.1026 -0.0466 -0.1281 -0.2017 -0.1089 -0.0665 -0.1045 -0.1887 -0.1109 -0.0880 -0.0963 -0.0980 -0.0946 -0.0846 -0.0977 -0.0997 -0.0791 -0.0843 -0.0789 -0.6037 -0.0973 -0.0754 -1.0500 -0.0989 -0.1107 -0.2535 -0.0674 -0.0919 -0.0844 -0.5318 -0.0760 -0.0892 -0.1590 -0.0919 -0.1007 -0.1015 -0.0416 -0.0989 -0.1629 -0.1045 -0.0626 -0.1078 -0.2109 -0.1156 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4480 -0.0950 -0.0618 -0.0843 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0778 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0978 -0.0947 -0.0994 -0.0407 -0.1230 -0.2145 -0.1187 -0.0884 -0.0921 -0.1183 -0.2104 -0.0972 -0.0630 -0.1381 -0.2608 -0.1062 -0.0768 -0.0924 -0.0910 -0.1377 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-40	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-40	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-40	-0.17628814280033112	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-40	-0.17628814280033112	public static boolean move_one_ball ( ArrayList < Integer > arr ) { if ( arr.size ( ) == 0 ) return true ; ArrayList < Integer > sorted_arr = new ArrayList < > ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size ( ) - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList < Integer > arr_after_move = new ArrayList < > ( ) ; for ( int i = min_index ; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size ( ) ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-40	-0.0889 -0.0400 -0.0945 -0.0337 -0.0829 -0.0574 -0.0890 -0.0077 -0.1102 -1.2802 -0.0614 -1.0103 -0.0535 -0.0712 -0.0848 -0.0870 -0.2150 -0.1060 -0.0722 -0.1537 -0.1337 -0.2510 -0.0714 -0.0823 -0.0874 -0.0814 -0.0887 -0.1171 -0.8666 -1.1951 -0.0694 -0.7433 -0.0563 -0.1819 -0.0786 -0.0345 -0.0780 -0.0555 -1.0511 -0.0818 -0.1002 -0.1122 -0.0929 -0.0811 -0.0878 -1.5529 -0.0894 -0.0404 -0.1068 -0.2128 -0.0798 -0.0598 -0.0881 -0.0911 -0.1298 -0.1071 -0.0898 -0.0349 -0.0962 -0.1936 -0.1045 -0.0621 -0.1287 -0.1644 -0.1125 -0.2349 -0.1019 -0.0698 -0.1044 -0.1323 -0.3047 -0.0741 -0.3220 -0.1153 -0.0901 -0.0941 -0.1991 -0.1118 -0.0873 -0.0418 -0.0786 -0.8492 -0.1256 -0.1018 -0.0808 -0.0897 -0.0761 -0.9205 -0.0897 -0.0768 -0.0986 -0.1032 -0.1206 -0.2009 -0.0664 -0.0915 -0.0843 -0.6517 -0.0725 -0.1018 -0.1226 -0.1092 -0.0772 -0.1073 -0.1924 -0.1149 -0.0820 -0.0918 -0.2156 -0.1584 -0.0799 -0.0529 -0.0874 -0.2524 -0.0857 -0.0524 -0.1023 -0.0783 -1.0947 -0.0809 -1.1011 -0.0849 -0.4946 -0.0567 -0.0511 -0.0745 -0.0660 -0.0905 -0.0408 -0.0851 -0.0421 -0.8184 -0.0782 -0.0913 -0.1941 -0.1149 -0.0803 -0.0881 -0.1077 -0.0774 -0.0874 -0.0735 -0.7711 -0.1116 -0.0478 -1.4133 -0.0810 -0.0951 -0.0883 -0.1003 -0.1168 -0.2042 -0.0684 -0.0844 -0.0932 -0.5319 -0.0750 -0.1017 -0.1373 -0.1022 -0.0884 -0.1026 -0.0466 -0.1281 -0.2017 -0.1089 -0.0665 -0.1045 -0.1887 -0.1109 -0.0880 -0.0963 -0.0980 -0.0946 -0.0846 -0.0977 -0.0997 -0.0791 -0.0843 -0.0789 -0.6037 -0.0973 -0.0754 -1.0500 -0.0989 -0.1107 -0.2535 -0.0674 -0.0919 -0.0844 -0.5318 -0.0760 -0.0892 -0.1590 -0.0919 -0.1007 -0.1015 -0.0416 -0.0989 -0.1629 -0.1045 -0.0626 -0.1078 -0.2109 -0.1156 -0.0828 -0.0917 -0.0914 -0.0934 -0.0781 -0.0927 -0.1012 -0.0797 -0.0740 -0.0783 -0.4480 -0.0950 -0.0618 -0.0843 -0.1015 -0.0965 -0.1770 -0.0704 -0.0933 -0.0778 -0.4713 -0.0732 -0.0961 -0.1056 -0.1069 -0.0975 -0.0978 -0.0947 -0.0994 -0.0407 -0.1230 -0.2145 -0.1187 -0.0884 -0.0921 -0.1183 -0.2104 -0.0972 -0.0630 -0.1381 -0.2608 -0.1062 -0.0768 -0.0924 -0.0910 -0.1377 -0.0902 -0.0836 -1.3775 -0.0984 -0.0714 -0.0617 -0.0677 -1.0270 -0.0875 -0.0817
S-93	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-93	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-93	-0.16812409460544586	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-93	-0.16812409460544586	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-93	-0.0894 -0.0540 -1.0350 -0.0836 -0.2442 -0.2426 -0.8945 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9188 -0.0856 -0.2620 -0.2321 -0.7758 -0.0583 -0.1313 -0.0848 -0.0578 -1.1072 -0.0891 -0.3754 -0.2509 -0.6448 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1941 -1.1521 -0.5285 -0.0801 -0.0893 -0.1109 -0.1419 -0.2341 -1.5433 -0.1898 -0.0955 -0.0594 -0.0874 -0.0590 -0.0812 -0.0616 -0.1224 -0.3383 -0.1063 -0.0750 -0.0760 -0.0847 -0.0915 -0.1168 -0.2477 -0.0515 -0.2073 -0.0821 -0.2295 -0.0899 -0.0502 -0.0708 -0.0857 -0.0316 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0742 -0.6014 -0.0881 -0.0713 -0.1022 -0.1044 -0.0650 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0889 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0880 -0.1006 -1.0290 -0.1302 -0.1140 -0.0874 -0.0808 -0.1793 -0.0825 -0.2594 -0.0803 -0.0901 -0.2766 -0.0391 -0.0455 -0.0516 -0.0842 -0.0347 -0.9960 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1048 -0.0562 -0.0841 -0.0809 -0.6296 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3045 -0.0718 -0.0921 -0.0996 -0.1070 -0.1811 -0.0982 -0.2187 -0.0809 -0.0851 -0.0638 -0.1077 -0.0323 -0.0813 -0.0864 -0.0900 -0.1145 -0.0555 -0.0968 -0.0918 -0.1113 -0.1471 -0.0880 -0.2564 -0.0851 -0.0989 -0.0866 -0.0858 -0.2123 -0.1054 -0.2028 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2820 -0.1126 -0.1754 -0.1507 -0.0743 -0.1051 -0.0674 -0.0551 -0.0561 -0.1034 -0.1066 -0.0915 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0772 -0.1049 -0.2953 -0.0929 -0.2213 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1120 -0.0911 -0.1171 -0.1439 -0.1015 -0.2234 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0794 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1448 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1069 -0.3373 -0.1100 -0.0253 -0.0943 -0.1009 -0.1188 -0.1117 -0.0894 -0.2810 -0.1165 -0.2092 -0.2082 -0.1056 -0.0827 -0.0809 -0.1236 -0.1462 -0.0845 -0.0808
S-68	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
T-68	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s.isEmpty ( ) ) return res; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters [ i ] .charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter [ i ] > most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res; }
H-68	-0.16812410950660706	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
D-68	-0.16812410950660706	public static HashMap < Character, Integer > histogram ( String s ) { HashMap < Character, Integer > res = new HashMap < Character, Integer > ( ) ; if ( s. isEmpty ( ) ) return res ; String [ ] list_letters = s.split ( " " ) ; int [ ] count_letter = new int [ 26 ] ; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters [ i ] . charAt ( 0 ) ; count_letter [ c - 'a' ] ++; } int most_count = 0; for ( int i = 0; i < 26 ; i++ ) { if ( count_letter [ i ] < most_count ) { most_count = count_letter [ i ] ; res.clear ( ) ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter [ i ] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear ( ) ; return res ; }
P-68	-0.0894 -0.0540 -1.0350 -0.0836 -0.2442 -0.2426 -0.8945 -0.0573 -0.0361 -0.1027 -0.9789 -0.1389 -0.0842 -0.0884 -0.9188 -0.0856 -0.2620 -0.2321 -0.7758 -0.0583 -0.1313 -0.0848 -0.0578 -1.1072 -0.0891 -0.3754 -0.2509 -0.6448 -0.0649 -0.1609 -0.0893 -0.0836 -0.2230 -0.1187 -0.1240 -0.1941 -1.1521 -0.5285 -0.0801 -0.0893 -0.1109 -0.1419 -0.2341 -1.5433 -0.1898 -0.0955 -0.0594 -0.0874 -0.0590 -0.0812 -0.0616 -0.1224 -0.3383 -0.1063 -0.0750 -0.0760 -0.0847 -0.0915 -0.1168 -0.2477 -0.0515 -0.2073 -0.0820 -0.2295 -0.0899 -0.0502 -0.0708 -0.0857 -0.0316 -0.0992 -0.0822 -0.4694 -0.1074 -0.0655 -0.0985 -0.0742 -0.6014 -0.0881 -0.0713 -0.1022 -0.1044 -0.0650 -0.1298 -0.0660 -0.3701 -0.0747 -0.4139 -0.0740 -0.0889 -0.1699 -0.0724 -0.0851 -0.0645 -0.1095 -0.0739 -0.0923 -0.0727 -0.0880 -0.1006 -1.0290 -0.1302 -0.1140 -0.0874 -0.0808 -0.1793 -0.0825 -0.2594 -0.0803 -0.0901 -0.2766 -0.0391 -0.0455 -0.0516 -0.0842 -0.0347 -0.9960 -0.0977 -0.0698 -0.0371 -0.0994 -0.0996 -0.0966 -0.6706 -0.1128 -0.1048 -0.0562 -0.0841 -0.0809 -0.6296 -0.0812 -0.0891 -0.0376 -1.0436 -0.0653 -0.3045 -0.0718 -0.0921 -0.0996 -0.1070 -0.1811 -0.0982 -0.2187 -0.0809 -0.0851 -0.0638 -0.1077 -0.0323 -0.0813 -0.0864 -0.0900 -0.1145 -0.0555 -0.0968 -0.0918 -0.1113 -0.1471 -0.0880 -0.2564 -0.0851 -0.0989 -0.0866 -0.0858 -0.2123 -0.1054 -0.2028 -0.1970 -0.0753 -0.0990 -0.2015 -0.1022 -0.2820 -0.1126 -0.1754 -0.1507 -0.0743 -0.1051 -0.0674 -0.0551 -0.0561 -0.1034 -0.1066 -0.0915 -0.1108 -0.0407 -0.1062 -0.1237 -0.0978 -0.0936 -0.0853 -0.0913 -0.0772 -0.1049 -0.2953 -0.0929 -0.2213 -0.0699 -0.1053 -0.0709 -0.1075 -0.0548 -0.1080 -0.1120 -0.0911 -0.1171 -0.1439 -0.1015 -0.2234 -0.1066 -0.1257 -0.1258 -0.0762 -0.1005 -0.0794 -0.0541 -0.0620 -0.0721 -0.1016 -0.0883 -0.1448 -0.0616 -0.0990 -0.1247 -0.0997 -0.0919 -0.0965 -0.1069 -0.3373 -0.1100 -0.0253 -0.0943 -0.1009 -0.1188 -0.1117 -0.0894 -0.2810 -0.1165 -0.2092 -0.2082 -0.1056 -0.0827 -0.0809 -0.1236 -0.1462 -0.0845 -0.0808
S-75	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-75	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-75	-0.19815433025360107	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-75	-0.19815433025360107	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-75	-0.0973 -0.0379 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0962 -0.1217 -0.0791 -0.1136 -0.1101 -0.0283 -1.3249 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3661 -0.0773 -0.0334 -0.0941 -0.0752 -0.7049 -0.1214 -0.0936 -0.0861 -0.0883 -0.0401 -0.0951 -0.0966 -0.7432 -0.1223 -0.1077 -0.0705 -0.0946 -0.0757 -0.6155 -0.0942 -0.0705 -0.1009 -1.0905 -0.0921 -0.5396 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0954 -0.0939 -0.5017 -0.0993 -0.0550 -0.0912 -1.3864 -0.0680 -0.3408 -0.0798 -0.0991 -0.1480 -0.1107 -0.0847 -0.0851 -0.0966 -0.0609 -0.0842 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1192 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0272 -0.0945 -0.2627 -0.1079 -0.0853 -0.7056 -0.0427 -0.1088 -0.0970 -0.1478 -0.0930 -0.0931 -1.1713 -0.1098 -0.1108 -0.1043 -0.0912 -0.1356 -0.1157 -0.1218 -0.1192 -0.0945 -0.0759 -0.0950 -0.0786 -1.8242 -0.0906 -0.0650 -0.1082 -0.0850 -0.7274 -0.0414 -0.1054 -0.0973 -0.2044 -0.1770 -0.0823 -0.0957 -0.0855 -0.1016 -0.0933 -0.0906 -0.1433 -0.1038 -0.4007 -0.1440 -0.1808 -0.6094 -0.1353 -0.0801 -0.0957 -0.0801 -1.8770 -0.0891 -0.1024 -0.1000 -0.0910 -0.6725 -0.0369 -0.1044 -0.0988 -0.5391 -0.1509 -0.0853 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1157 -0.1013 -0.1519 -0.0817 -0.0781 -0.0920 -0.0841 -1.7743 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0900 -0.0787 -0.0848 -0.1370 -0.0985 -0.1208 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0358 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5422 -0.0835 -0.0590 -0.1483 -1.2592 -0.0857 -0.4660 -0.0838 -0.1052 -0.1362 -0.1150 -0.4725 -0.0938 -0.0670 -0.0439 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1038 -0.0901 -0.0627 -0.0978 -2.2772 -0.1235 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1375 -0.5670 -0.0758 -0.0926 -0.0337 -0.6591 -0.0778 -0.0784
S-23	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-23	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-23	-0.19815444946289062	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-23	-0.19815444946289062	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-23	-0.0973 -0.0379 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0962 -0.1217 -0.0791 -0.1136 -0.1101 -0.0283 -1.3249 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3661 -0.0773 -0.0334 -0.0941 -0.0752 -0.7049 -0.1214 -0.0936 -0.0861 -0.0883 -0.0401 -0.0951 -0.0966 -0.7432 -0.1223 -0.1077 -0.0705 -0.0946 -0.0757 -0.6155 -0.0942 -0.0705 -0.1009 -1.0905 -0.0921 -0.5396 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0954 -0.0939 -0.5017 -0.0993 -0.0550 -0.0912 -1.3864 -0.0680 -0.3408 -0.0798 -0.0991 -0.1480 -0.1107 -0.0847 -0.0851 -0.0966 -0.0609 -0.0842 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1192 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0272 -0.0945 -0.2627 -0.1079 -0.0853 -0.7056 -0.0427 -0.1088 -0.0970 -0.1478 -0.0930 -0.0931 -1.1713 -0.1098 -0.1108 -0.1043 -0.0912 -0.1356 -0.1157 -0.1218 -0.1192 -0.0945 -0.0759 -0.0950 -0.0786 -1.8242 -0.0906 -0.0650 -0.1082 -0.0850 -0.7274 -0.0414 -0.1054 -0.0973 -0.2044 -0.1770 -0.0823 -0.0957 -0.0855 -0.1016 -0.0933 -0.0906 -0.1433 -0.1038 -0.4007 -0.1440 -0.1808 -0.6094 -0.1353 -0.0801 -0.0957 -0.0801 -1.8770 -0.0891 -0.1024 -0.1000 -0.0910 -0.6725 -0.0369 -0.1044 -0.0988 -0.5391 -0.1509 -0.0853 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1157 -0.1013 -0.1519 -0.0817 -0.0782 -0.0920 -0.0841 -1.7743 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0900 -0.0787 -0.0848 -0.1370 -0.0984 -0.1208 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0358 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5422 -0.0835 -0.0590 -0.1483 -1.2592 -0.0857 -0.4660 -0.0838 -0.1052 -0.1362 -0.1150 -0.4725 -0.0938 -0.0670 -0.0439 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1038 -0.0901 -0.0627 -0.0978 -2.2772 -0.1235 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1375 -0.5670 -0.0758 -0.0926 -0.0337 -0.6591 -0.0778 -0.0784
S-4	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
T-4	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) val = Math.min ( val, grid [ i ] [ j + 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1; else ans [ i ] = val; } return ans; }
H-4	-0.19815438985824585	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
D-4	-0.19815438985824585	public static int [ ] min_path ( int [ ] [ ] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n ; j++ ) { if ( grid [ i ] [ j ] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid [ i ] [ j + 1 ] ) ; if ( j != 0 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( i != n - 1 ) val = Math.min ( val, grid [ i - 1 ] [ j ] ) ; if ( j != n + 1 ) val = Math.max ( val, grid [ i ] [ j - 1 ] ) ; } } } int [ ] ans = new int [ k ] ; for ( int i = 0; i < k ; i++ ) { if ( ( i % 2 ) == 0 ) ans [ i ] = 1 ; else ans [ i ] = val ; } return ans ; }
P-4	-0.0973 -0.0379 -0.0993 -0.1834 -0.0710 -0.0518 -0.0937 -0.0309 -0.1103 -0.0962 -0.1217 -0.0791 -0.1136 -0.1101 -0.0283 -1.3249 -0.0817 -0.1248 -0.0782 -0.0996 -0.1027 -0.3661 -0.0773 -0.0334 -0.0941 -0.0752 -0.7049 -0.1214 -0.0936 -0.0861 -0.0883 -0.0401 -0.0951 -0.0966 -0.7432 -0.1223 -0.1077 -0.0705 -0.0946 -0.0757 -0.6155 -0.0942 -0.0705 -0.1009 -1.0905 -0.0921 -0.5396 -0.0770 -0.0842 -0.1416 -0.1074 -0.0693 -0.0954 -0.0939 -0.5017 -0.0993 -0.0550 -0.0912 -1.3864 -0.0680 -0.3408 -0.0798 -0.0991 -0.1480 -0.1107 -0.0847 -0.0851 -0.0966 -0.0609 -0.0842 -0.0782 -0.0614 -0.1799 -0.1693 -0.0840 -0.0776 -0.2246 -0.1192 -0.1537 -0.1462 -0.1031 -0.0800 -0.0854 -0.1188 -2.0272 -0.0945 -0.2627 -0.1079 -0.0853 -0.7056 -0.0427 -0.1088 -0.0970 -0.1478 -0.0930 -0.0931 -1.1713 -0.1098 -0.1108 -0.1043 -0.0912 -0.1356 -0.1157 -0.1218 -0.1192 -0.0945 -0.0759 -0.0950 -0.0786 -1.8242 -0.0906 -0.0650 -0.1082 -0.0849 -0.7274 -0.0414 -0.1054 -0.0973 -0.2044 -0.1770 -0.0823 -0.0957 -0.0855 -0.1016 -0.0933 -0.0906 -0.1433 -0.1038 -0.4007 -0.1440 -0.1808 -0.6094 -0.1353 -0.0801 -0.0957 -0.0801 -1.8770 -0.0891 -0.1024 -0.1000 -0.0910 -0.6725 -0.0369 -0.1044 -0.0988 -0.5391 -0.1509 -0.0853 -0.0809 -0.0963 -0.0981 -0.0896 -0.0934 -0.1418 -0.1077 -0.0893 -0.1158 -0.1013 -0.1519 -0.0817 -0.0781 -0.0920 -0.0841 -1.7743 -0.0893 -0.1533 -0.1017 -0.0901 -0.8510 -0.0365 -0.0987 -0.0995 -0.0900 -0.0787 -0.0848 -0.1370 -0.0985 -0.1208 -0.0937 -0.0974 -0.0949 -0.0916 -0.0764 -0.1477 -0.1318 -0.0442 -0.0358 -0.0953 -0.0613 -0.0684 -0.0648 -0.1299 -0.0912 -0.0950 -0.1183 -0.1093 -0.0667 -0.0796 -0.0686 -0.5422 -0.0835 -0.0590 -0.1483 -1.2592 -0.0857 -0.4660 -0.0838 -0.1052 -0.1362 -0.1150 -0.4725 -0.0938 -0.0670 -0.0439 -0.0822 -0.0914 -0.0936 -0.0830 -0.0635 -0.1038 -0.0901 -0.0627 -0.0978 -2.2772 -0.1235 -0.0672 -0.0714 -0.0702 -0.0989 -0.0758 -0.1028 -0.1375 -0.5670 -0.0758 -0.0926 -0.0337 -0.6591 -0.0778 -0.0784
S-88	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-88	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-88	-0.1702696830034256	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-88	-0.1702696830034256	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-88	-0.0966 -0.0557 -1.5648 -0.0842 -0.6839 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0391 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.1968 -0.0741 -0.6238 -0.0738 -0.0708 -0.0847 -0.0539 -1.2280 -0.0651 -0.1200 -0.1713 -0.0984 -0.0770 -1.5012 -0.1924 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4781 -0.1082 -0.0840 -0.0739 -0.0834 -0.0906 -0.5233 -0.1077 -0.0757 -0.0789 -0.0682 -0.9765 -0.0967 -0.0824 -0.0506 -0.1069 -0.0661 -0.5291 -0.0705 -0.3562 -0.0718 -0.0774 -0.1197 -0.0809 -0.0992 -0.0274 -0.0224 -0.0285 -0.0998 -0.9015 -0.1778 -0.1608 -0.0610 -0.0531 -0.0855 -0.1154 -0.0890 -0.0479 -0.1338 -0.1053 -0.0492 -0.1309 -0.1248 -0.0512 -0.0890 -0.1019 -0.0534 -0.1035 -0.1032 -0.0330 -0.0666 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0972 -0.0781 -0.9572 -0.0975 -0.0814 -0.0273 -0.0827 -0.1290 -0.0761 -0.0926 -0.1285 -0.3169 -0.0913 -0.0772 -0.0717 -0.3820 -0.0741 -0.0787 -0.0791 -0.0371 -0.0340 -0.0405 -0.0836 -0.0743 -0.5771 -0.1333 -0.1016 -0.0716 -0.0826 -0.0843 -0.6946 -0.0814 -0.0669 -0.2326 -0.1137 -0.0796 -0.8691 -0.0860 -0.3676 -0.0742 -0.1035 -0.1148 -0.1069 -0.1412 -0.0693 -0.0845 -0.0718 -0.2433 -0.0285 -0.0852 -0.0882 -0.0764 -0.1017 -0.7141 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0632 -0.0342 -0.0419 -0.1096 -0.0448 -0.7052 -0.0489 -0.0689 -0.0809 -0.0788 -0.1170 -0.1143 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0396 -0.0285 -0.0231 -0.4174 -0.1031 -0.1829 -0.1060 -0.1702 -0.0888 -0.0365 -0.0266 -0.0248 -0.0833 -0.1046 -0.0939 -0.1493 -0.1807 -0.2682 -0.1119 -0.0279 -0.0663 -0.1301 -0.0786 -0.1612 -0.0910 -0.1009 -0.0627 -0.0874 -0.1234 -0.0890 -0.0753
S-80	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-80	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-80	-0.1702696979045868	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-80	-0.1702696979045868	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-80	-0.0966 -0.0557 -1.5648 -0.0842 -0.6839 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0391 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.1968 -0.0741 -0.6238 -0.0738 -0.0708 -0.0847 -0.0539 -1.2280 -0.0651 -0.1200 -0.1713 -0.0984 -0.0770 -1.5012 -0.1924 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4781 -0.1082 -0.0840 -0.0739 -0.0834 -0.0906 -0.5233 -0.1077 -0.0757 -0.0789 -0.0682 -0.9765 -0.0967 -0.0824 -0.0506 -0.1069 -0.0661 -0.5291 -0.0705 -0.3562 -0.0718 -0.0774 -0.1197 -0.0809 -0.0992 -0.0274 -0.0224 -0.0285 -0.0998 -0.9015 -0.1778 -0.1608 -0.0610 -0.0531 -0.0855 -0.1154 -0.0890 -0.0479 -0.1338 -0.1053 -0.0492 -0.1309 -0.1248 -0.0512 -0.0890 -0.1019 -0.0534 -0.1035 -0.1032 -0.0330 -0.0666 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0972 -0.0781 -0.9572 -0.0975 -0.0814 -0.0273 -0.0827 -0.1290 -0.0761 -0.0926 -0.1285 -0.3169 -0.0913 -0.0772 -0.0717 -0.3820 -0.0741 -0.0787 -0.0791 -0.0371 -0.0340 -0.0405 -0.0836 -0.0743 -0.5771 -0.1333 -0.1016 -0.0716 -0.0826 -0.0843 -0.6946 -0.0814 -0.0669 -0.2326 -0.1137 -0.0796 -0.8691 -0.0860 -0.3676 -0.0742 -0.1035 -0.1148 -0.1069 -0.1412 -0.0693 -0.0845 -0.0718 -0.2433 -0.0285 -0.0852 -0.0882 -0.0764 -0.1017 -0.7141 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0632 -0.0342 -0.0419 -0.1096 -0.0448 -0.7052 -0.0489 -0.0689 -0.0809 -0.0788 -0.1170 -0.1143 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0396 -0.0285 -0.0231 -0.4174 -0.1031 -0.1829 -0.1060 -0.1702 -0.0888 -0.0365 -0.0266 -0.0248 -0.0833 -0.1046 -0.0939 -0.1493 -0.1807 -0.2682 -0.1119 -0.0279 -0.0663 -0.1301 -0.0786 -0.1612 -0.0910 -0.1009 -0.0627 -0.0874 -0.1234 -0.0890 -0.0753
S-22	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
T-22	public static ArrayList < String > select_words ( String s, int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels [ k ] == words [ i ] .charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result; }
H-22	-0.17026977241039276	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
D-22	-0.17026977241039276	public static ArrayList < String > select_words ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String [ ] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char [ ] vowels = { 'a', 'e', 'i', 'o', 'u' } ; for ( int j = 0; j < words [ i ] .length ( ) ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels [ k ] == words [ i ] . charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words [ i ] ) ; } return result ; }
P-22	-0.0966 -0.0557 -1.5648 -0.0842 -0.6839 -0.0609 -0.0469 -0.0942 -0.0300 -0.1084 -1.0391 -0.1115 -0.9408 -0.0913 -0.0714 -0.0842 -0.0835 -1.1968 -0.0741 -0.6238 -0.0738 -0.0708 -0.0847 -0.0539 -1.2280 -0.0651 -0.1200 -0.1713 -0.0984 -0.0770 -1.5012 -0.1924 -0.0860 -0.0399 -0.0779 -0.0750 -0.1648 -0.4781 -0.1082 -0.0840 -0.0739 -0.0834 -0.0906 -0.5233 -0.1077 -0.0757 -0.0789 -0.0682 -0.9765 -0.0967 -0.0824 -0.0506 -0.1069 -0.0661 -0.5291 -0.0705 -0.3562 -0.0718 -0.0774 -0.1197 -0.0809 -0.0992 -0.0274 -0.0224 -0.0285 -0.0998 -0.9015 -0.1778 -0.1608 -0.0610 -0.0531 -0.0855 -0.1154 -0.0890 -0.0479 -0.1338 -0.1053 -0.0492 -0.1309 -0.1248 -0.0512 -0.0890 -0.1019 -0.0534 -0.1035 -0.1032 -0.0330 -0.0666 -0.0777 -0.0961 -0.1743 -0.1056 -0.0759 -0.0972 -0.0781 -0.9572 -0.0975 -0.0814 -0.0273 -0.0827 -0.1290 -0.0761 -0.0926 -0.1285 -0.3169 -0.0913 -0.0772 -0.0717 -0.3820 -0.0741 -0.0787 -0.0791 -0.0371 -0.0340 -0.0405 -0.0836 -0.0743 -0.5771 -0.1333 -0.1016 -0.0716 -0.0826 -0.0843 -0.6946 -0.0814 -0.0669 -0.2326 -0.1137 -0.0796 -0.8691 -0.0860 -0.3676 -0.0742 -0.1035 -0.1148 -0.1069 -0.1412 -0.0693 -0.0845 -0.0718 -0.2433 -0.0285 -0.0852 -0.0882 -0.0764 -0.1017 -0.7141 -0.1109 -0.1066 -0.0913 -0.0889 -0.0859 -0.0632 -0.0342 -0.0419 -0.1096 -0.0448 -0.7052 -0.0489 -0.0689 -0.0809 -0.0788 -0.1170 -0.1143 -0.0634 -0.0286 -0.0350 -0.0864 -0.1440 -0.0856 -0.0396 -0.0285 -0.0231 -0.4174 -0.1031 -0.1829 -0.1060 -0.1702 -0.0888 -0.0365 -0.0266 -0.0248 -0.0833 -0.1046 -0.0939 -0.1493 -0.1807 -0.2682 -0.1119 -0.0279 -0.0663 -0.1301 -0.0786 -0.1612 -0.0910 -0.1009 -0.0627 -0.0874 -0.1234 -0.0890 -0.0753
S-85	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-85	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) - s.length ( ) % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length ( ) - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-85	-0.19201338291168213	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-85	-0.19201338291168213	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList < String > groups = new ArrayList < String > ( ) ; for ( int i = 0; i < s.length ( ) ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length ( ) , i + 3 ) ) ) ; } int remain = s.length ( ) % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length ( ) - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic ( ) ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-85	-0.0885 -0.0415 -1.1206 -0.0328 -0.0929 -0.0317 -0.0888 -0.0186 -0.1094 -0.9445 -0.0928 -0.0874 -0.0964 -0.3283 -0.0270 -0.0271 -0.1258 -1.9079 -0.0265 -0.0853 -0.0316 -0.0812 -0.0188 -0.1146 -0.8503 -0.1286 -0.0775 -0.0944 -2.2910 -0.0679 -0.5857 -0.0548 -0.0625 -0.0853 -0.0561 -1.3865 -0.0807 -0.7270 -0.0588 -0.2470 -0.1076 -0.0867 -0.2727 -0.1067 -0.0911 -0.0720 -0.0780 -0.7619 -0.0831 -0.1171 -0.1864 -0.1105 -0.0742 -0.3381 -0.0818 -0.0919 -0.0688 -0.1019 -0.0642 -0.0793 -0.0892 -0.1032 -0.2241 -0.2262 -0.1050 -0.0620 -0.0942 -0.6840 -0.1171 -0.1475 -0.9754 -3.2295 -0.0897 -0.0415 -0.1074 -0.0827 -0.0956 -0.0895 -0.1712 -0.0774 -0.1182 -0.1054 -0.1391 -0.0680 -0.0797 -0.0911 -0.0904 -0.1030 -0.0800 -0.0985 -0.0420 -0.0895 -0.0666 -0.1040 -0.0794 -0.1806 -0.0656 -0.0600 -0.3021 -0.6210 -0.0654 -0.0852 -1.1890 -0.0769 -0.1041 -0.7831 -0.0945 -0.0607 -0.0541 -0.0859 -0.0848 -0.1114 -0.0632 -0.0979 -0.0983 -0.6664 -0.1165 -0.2280 -0.1649 -0.2214 -0.0792 -0.1077 -0.5825 -0.1062 -0.1593 -0.1892 -0.0830 -0.0830 -0.0629 -0.1774 -0.1066 -0.0176 -0.1208 -0.0911 -0.0846 -0.0893 -0.0867 -0.0627 -0.0689 -0.0972 -0.4945 -0.1032 -0.0803 -0.0947 -0.1106 -0.1597 -0.0714 -0.4297 -0.0116 -0.1103 -0.0960 -0.0676 -0.0648 -0.0830 -0.2564 -0.0755 -0.0912 -0.1004 -0.0409 -0.0405 -0.0670 -0.0843 -0.0519 -0.0438 -0.0387 -0.1946 -0.1180 -0.0962 -0.0649 -0.0309 -0.0953 -0.0371 -0.0899 -0.0414 -0.0853 -0.0174 -0.1066 -0.0315 -0.0907 -0.0418 -0.0890 -0.0565 -0.0848 -0.0197 -0.1070 -0.0849 -0.0948 -0.1028 -0.1023 -0.0751 -0.0957
S-46	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-46	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-46	-0.2611682415008545	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-46	-0.2611682415008545	public static ArrayList < String > bf ( String planet1, String planet2 ) { ArrayList < String > planet_names = new ArrayList < String > ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; if ( ( ! planet_names.contains ( planet1 ) ) || ( ! planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-46	-0.0895 -0.0571 -1.5226 -0.0865 -0.9950 -0.0600 -0.0156 -0.1005 -1.8337 -0.0889 -0.5704 -1.1601 -0.0875 -0.0637 -0.0835 -0.0855 -1.4301 -0.0892 -1.0071 -0.0629 -0.1020 -0.0894 -0.1098 -0.0773 -0.0886 -1.0043 -0.0895 -1.0415 -0.0681 -0.1084 -1.8309 -0.0917 -0.3356 -0.1025 -0.0952 -0.0112 -0.0202 -0.0618 -1.6638 -0.1117 -0.0516 -0.0085 -1.1453 -0.1107 -0.0260 -0.0180 -1.2411 -0.1070 -0.0502 -0.0172 -1.2963 -0.1167 -0.0440 -0.0334 -0.0394 -1.4210 -0.1073 -0.0247 -0.0068 -1.4028 -0.0980 -0.0450 -0.0151 -0.0422 -1.4799 -0.1005 -0.0220 -0.0320 -0.0064 -0.0676 -0.0979 -0.0971 -0.1039 -1.7098 -0.0869 -1.0427 -0.0624 -0.0925 -0.0851 -0.0564 -1.0819 -0.0794 -1.0965 -0.0775 -0.2893 -0.1232 -0.0804 -0.5627 -0.1128 -1.0336 -0.1150 -0.3215 -0.1243 -0.0871 -0.1191 -0.7795 -0.1090 -0.0684 -0.0781 -0.0847 -0.0813 -0.0842 -0.1101 -0.0588 -0.1769 -0.1012 -0.0831 -0.1111 -0.6767 -0.1026 -0.0862 -0.0794 -0.0818 -0.0798 -0.0854 -0.0863 -0.1264 -0.2279 -0.1220 -0.0976 -0.0312 -0.0582 -0.0900 -0.1302 -0.1166 -0.0857 -0.1186 -0.9798 -0.1050 -0.0728 -0.0793 -0.0864 -0.0852 -0.0735 -0.1271 -0.0488 -0.0617 -0.0887 -0.0900 -0.1042 -0.0848 -0.1135 -1.2035 -0.1012 -0.0949 -0.0725 -0.0847 -0.0849 -0.2770 -0.1118 -0.0703 -0.0740 -0.0935 -0.1270 -0.0564 -0.0574 -1.2119 -0.0864 -0.1719 -0.1383 -0.0520 -0.0411 -0.2283 -0.0837 -0.1003 -0.1829 -0.0803 -0.1242 -0.2283 -0.3685 -0.1067 -0.0721 -0.1114 -0.0930 -0.1549 -0.2904 -0.1162 -0.1182 -0.1303 -0.1130 -0.0850 -0.0774 -0.0892 -0.1330 -0.0864 -0.0746
S-82	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len ) ) ; if ( is_prime ( fib.get ( len - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
T-82	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int prime_fib ( int n ) { ArrayList < Integer > fib = new ArrayList < Integer > ( ) ; fib.add ( 0 ) ; fib.add ( 1 ) ; while ( true ) { int len = fib.size ( ) ; fib.add ( fib.get ( len - 1 ) + fib.get ( len - 2 ) ) ; if ( is_prime ( fib.get ( fib.size ( ) - 1 ) ) ) n -= 1; if ( n == 0 ) return fib.get ( fib.size ( ) - 1 ) ; } }
H-82	-0.19823504984378815	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-82	-0.19823504984378815	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-82	-0.0830 -0.0415 -0.1625 -0.0630 -0.0881 -0.0277 -0.1165 -0.0894 -0.0744 -0.0828 -0.0906 -0.3020 -0.1095 -0.0786 -0.1366 -0.0877 -0.0860 -0.0829 -0.0667 -1.4001 -0.2364 -0.1066 -0.0633 -0.0772 -0.0855 -0.4753 -0.0929 -0.1161 -0.1107 -0.0858 -0.0936 -1.4916 -0.0971 -0.8074 -0.1007 -0.0697 -0.0884 -0.4710 -0.6303 -0.0824 -0.0548 -0.1717 -0.0820 -0.0836 -0.0892 -0.1110 -0.1257 -0.1846 -0.0996 -0.1721 -0.1061 -0.0836 -0.0787 -0.0524 -0.7481 -0.1020 -0.0923 -0.0680 -0.6032 -0.0882 -0.2438
S-21	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
T-21	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst [ i ] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result; }
H-21	-0.17450138926506042	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
D-21	-0.17450138926506042	public static int [ ] largest_smallest_integers ( int [ ] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i ++ ) { if ( lst [ i ] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst [ i ] ) ; } else if ( lst [ i ] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst [ i ] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int [ ] result = { max_negative, min_positive } ; return result ; }
P-21	-0.1008 -0.0400 -0.0996 -0.2060 -0.1004 -0.0140 -0.0902 -0.0551 -0.0349 -0.0905 -0.0229 -0.0295 -0.1128 -0.1043 -0.1462 -0.1162 -0.0464 -0.0866 -0.0865 -0.2404 -0.0595 -0.0926 -0.0617 -0.1899 -0.0810 -0.0951 -0.0629 -1.0682 -0.1029 -0.0760 -0.1103 -0.0663 -0.0767 -0.6610 -0.0938 -0.0404 -0.0886 -0.0394 -0.2802 -0.0927 -0.1030 -0.0403 -0.0887 -0.5563 -0.0935 -0.0184 -0.0824 -0.0434 -0.7758 -0.1312 -0.1097 -0.0700 -0.0839 -0.0752 -2.3098 -0.3566 -0.0926 -0.4151 -0.4435 -0.0880 -0.0739 -0.5299 -0.0803 -1.7860 -0.0677 -0.0964 -0.1089 -0.1105 -0.0748 -0.0682 -0.0770 -0.0862 -0.0575 -0.0828 -0.0888 -0.1083 -0.0644 -0.0907 -0.0857 -0.8967 -0.0747 -0.1069 -0.0602 -0.0896 -1.9332 -0.0932 -0.0742 -0.1047 -0.1005 -0.0970 -0.0510 -0.8456 -0.0485 -0.0922 -0.0949 -0.0919 -0.0958 -0.0960 -0.0644 -0.0769 -0.0742 -0.1025 -0.0478 -0.0724 -0.0896 -0.0754 -0.0649 -0.0855 -0.0819 -0.0736 -0.0258 -0.0935 -0.0752 -0.3618 -0.1127 -0.0839 -0.0408 -0.0906 -2.0544 -0.0912 -0.0558 -0.1052 -0.0742 -0.0846 -0.0389 -0.6777 -0.0393 -0.0871 -0.0834 -0.0892 -0.0930 -0.0943 -0.0722 -0.0805 -0.1318 -0.1162 -0.0888 -0.0912 -0.0834 -0.0531 -0.1077 -0.0532 -0.0682 -0.2404 -0.1381 -0.1113 -0.0751 -0.0392 -0.0774 -0.0582 -0.0948 -0.0369 -0.0974 -0.1926 -0.1411 -0.1212 -0.0441 -0.0787 -0.0776 -0.1059 -0.0932 -0.1262 -0.0828 -0.6687 -0.0909 -0.0985 -0.0409 -0.1166 -0.1146 -0.1017 -0.0643 -0.4424 -0.0750 -0.0844
S-72	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, begin ) * poly ( xs, end ) < 0 ) { begin = center; } else { end = center; } } return begin; }
T-72	public static double poly ( List < Double > xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum; } public static double find_zero ( List < Double > xs ) { double begin = -1.; double end = 1.; while ( poly ( xs, begin ) * poly ( xs, end ) > 0 ) { begin *= 2.; end *= 2.; } while ( end - begin > 1e-10 ) { double center = ( begin + end ) / 2.; if ( poly ( xs, center ) * poly ( xs, begin ) > 0 ) { begin = center; } else { end = center; } } return begin; }
H-72	-0.20731741189956665	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
D-72	-0.20731741189956665	public static double poly ( List < Double > xs , double x ) { double sum = 0; for ( int i = 0; i < xs.size ( ) ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } return sum ; }
P-72	-0.0844 -0.0431 -0.0876 -0.0821 -0.1027 -0.2374 -0.0804 -0.1213 -0.0518 -0.0999 -0.6336 -0.1126 -0.1209 -0.0888 -0.0809 -0.1205 -0.0770 -0.0884 -0.9158 -0.1463 -0.1039 -0.1116 -0.0683 -0.0833 -0.6770 -0.0824 -0.0864 -0.1768 -0.0970 -0.0785 -0.3474 -0.0806 -0.0943 -0.0777 -0.0865 -0.1551 -0.0797 -0.0866 -0.1472 -0.0467 -0.1962 -0.1129 -0.1669 -0.1073 -0.0969 -0.0945 -0.0850 -2.7085 -0.0962 -0.0380 -0.1054 -0.1099 -1.5605 -0.1510 -0.0895 -0.1081 -0.0883 -0.1237 -0.1038 -0.2779 -0.0833 -0.2069
S-91	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-91	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-91	-0.17777183651924133	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-91	-0.17777183651924133	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-91	-0.0908 -0.0542 -0.9695 -0.0423 -0.0970 -0.0290 -0.1152 -0.7720 -0.0588 -0.0909 -0.0826 -1.4262 -0.0735 -0.0864 -0.0616 -0.0872 -1.5951 -0.0877 -0.1270 -0.0860 -0.6308 -0.0745 -0.0543 -0.0806 -0.3883 -0.0738 -0.0787 -0.0812 -0.4449 -0.0980 -0.1058 -0.1081 -0.0832 -0.1004 -0.1119 -0.0934 -0.4646 -0.0787 -0.0853 -0.0800 -0.1173 -0.1127 -0.0858 -0.1295 -0.7465 -0.1011 -0.1101 -0.0879 -0.1828 -0.0515 -0.0394 -0.0806 -0.0876 -0.0631 -1.1197 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0821 -0.1340 -0.0914 -0.0782 -0.0968 -0.0290 -0.0473 -0.0485 -0.0992 -0.8689 -0.1129 -0.1192 -0.7780 -0.1342 -0.1904 -0.1418 -0.0958 -0.0928 -0.0790 -0.1126 -0.1044 -0.1058 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0870 -0.0763 -0.0722 -1.0570 -0.0685 -0.0906 -0.0789 -0.9935 -0.0582 -0.0478 -0.1213 -0.0815 -0.0897 -0.0679 -0.1047 -0.0767 -0.0697 -0.0674 -0.2781 -0.0984 -0.1066 -0.1024 -0.0829 -0.0942 -0.0333 -0.1010 -0.7449 -0.1168 -0.1152 -0.6313 -0.1006 -0.2056 -0.1608 -0.0944 -0.0914 -0.0851 -0.0571 -0.0963 -0.0684 -0.1048 -0.0901 -0.0862 -0.0290 -0.1055 -0.4620 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0534 -0.1111 -0.0808 -0.0736 -0.5507 -0.0560 -0.1039 -0.0829 -0.0639 -0.4861 -0.1251 -0.0870 -0.0604 -0.7735 -0.0751 -0.0821 -0.0577 -0.0959 -0.0747 -0.1525 -0.0739 -0.0897
S-30	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-30	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-30	-0.1777719408273697	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-30	-0.1777719408273697	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length ( ) ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-30	-0.0908 -0.0542 -0.9695 -0.0423 -0.0970 -0.0290 -0.1152 -0.7720 -0.0588 -0.0909 -0.0826 -1.4262 -0.0735 -0.0864 -0.0616 -0.0872 -1.5951 -0.0877 -0.1270 -0.0860 -0.6308 -0.0745 -0.0543 -0.0806 -0.3883 -0.0738 -0.0787 -0.0812 -0.4449 -0.0980 -0.1058 -0.1081 -0.0832 -0.1004 -0.1119 -0.0934 -0.4646 -0.0787 -0.0853 -0.0800 -0.1173 -0.1127 -0.0858 -0.1295 -0.7465 -0.1011 -0.1101 -0.0878 -0.1828 -0.0515 -0.0394 -0.0806 -0.0876 -0.0631 -1.1197 -0.0925 -0.1284 -0.1162 -0.1120 -0.2412 -0.1077 -0.0624 -0.0802 -0.1403 -0.0821 -0.1340 -0.0914 -0.0782 -0.0968 -0.0290 -0.0473 -0.0485 -0.0992 -0.8689 -0.1129 -0.1192 -0.7780 -0.1342 -0.1904 -0.1418 -0.0958 -0.0928 -0.0790 -0.1126 -0.1044 -0.1058 -0.0976 -0.0502 -0.0672 -0.1066 -0.0848 -0.0844 -0.1359 -0.1032 -0.0699 -0.0870 -0.0763 -0.0722 -1.0570 -0.0685 -0.0906 -0.0789 -0.9935 -0.0582 -0.0478 -0.1213 -0.0815 -0.0897 -0.0679 -0.1047 -0.0767 -0.0697 -0.0674 -0.2781 -0.0984 -0.1066 -0.1024 -0.0829 -0.0942 -0.0333 -0.1010 -0.7449 -0.1168 -0.1152 -0.6313 -0.1006 -0.2056 -0.1608 -0.0944 -0.0914 -0.0851 -0.0571 -0.0963 -0.0684 -0.1048 -0.0901 -0.0862 -0.0290 -0.1055 -0.4620 -0.1089 -0.0852 -0.5472 -0.0828 -0.1071 -0.1649 -0.0872 -0.0921 -0.0741 -0.0534 -0.1111 -0.0808 -0.0736 -0.5507 -0.0560 -0.1039 -0.0829 -0.0639 -0.4861 -0.1251 -0.0870 -0.0604 -0.7735 -0.0751 -0.0821 -0.0577 -0.0959 -0.0747 -0.1525 -0.0739 -0.0897
S-62	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-62	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-62	-0.11956696957349777	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-62	-0.11956696957349777	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-62	-0.0875 -0.0532 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1650 -0.0999 -0.0809 -0.0912 -0.0840 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0854 -0.0688 -0.1092 -0.1127 -0.0880 -0.1372 -0.0223 -0.0885 -0.1098 -0.0843 -0.0352 -0.0790 -0.0344 -0.2483 -0.1259 -0.1092 -0.0767 -0.0754 -0.0820 -0.9139 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0732 -0.1042 -0.1592 -0.0764 -0.0845 -0.1120 -0.1061 -0.0658 -0.0706 -0.0925 -0.6670 -0.0868 -0.0672 -0.0636 -0.1275 -0.0770 -0.4381 -0.0743 -0.0829 -0.1503 -0.0802 -0.0947 -0.1350 -0.0775 -0.0806 -0.0423 -0.0935 -1.9784 -0.0917 -0.0309 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1195 -0.0624 -0.0978 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0753 -0.1360 -0.0765 -0.0761 -0.0421 -0.3036 -0.2925 -0.1156 -0.0990 -0.0860 -0.0859 -0.0724 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0865 -0.0998 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0990 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0942 -0.1130 -0.0965 -0.0973 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0901 -0.0693 -0.1402 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1009 -0.0862 -0.1503 -0.1446 -0.0831 -0.0681 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0841 -0.0889 -0.0731 -0.2252 -0.0860 -0.0776
S-31	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
T-31	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result; }
H-31	-0.11956699192523956	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
D-31	-0.11956699192523956	public static double [ ] find_closest_elements ( double [ ] numbers ) { double [ ] result = new double [ 2 ] ; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers [ i ] - numbers [ j ] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers [ i ] < numbers [ j ] ) { result [ 0 ] = numbers [ i ] ; result [ 1 ] = numbers [ j ] ; } else { result [ 0 ] = numbers [ j ] ; result [ 1 ] = numbers [ i ] ; } } } } return result ; }
P-31	-0.0875 -0.0532 -0.1149 -0.1959 -0.1133 -0.0557 -0.0801 -0.1515 -0.0811 -0.0261 -0.1138 -0.1281 -0.1650 -0.0999 -0.0809 -0.0912 -0.0840 -0.1210 -0.1986 -0.0536 -0.0700 -0.0862 -0.0778 -0.0854 -0.0688 -0.1092 -0.1127 -0.0880 -0.1372 -0.0223 -0.0885 -0.1098 -0.0843 -0.0352 -0.0790 -0.0344 -0.2483 -0.1259 -0.1092 -0.0767 -0.0754 -0.0820 -0.9139 -0.0843 -0.0803 -0.0895 -0.1013 -0.0755 -0.3523 -0.0732 -0.1042 -0.1592 -0.0764 -0.0845 -0.1120 -0.1061 -0.0658 -0.0706 -0.0925 -0.6670 -0.0868 -0.0672 -0.0636 -0.1275 -0.0770 -0.4381 -0.0743 -0.0829 -0.1503 -0.0802 -0.0947 -0.1350 -0.0775 -0.0806 -0.0423 -0.0935 -1.9784 -0.0917 -0.0309 -0.0992 -0.1015 -0.0737 -0.0938 -0.0877 -0.1195 -0.0624 -0.0978 -0.0958 -0.0947 -0.1001 -0.0946 -0.1253 -0.1126 -0.0635 -0.0867 -0.0376 -0.1161 -0.0281 -0.0962 -0.0777 -0.0753 -0.1360 -0.0765 -0.0761 -0.0421 -0.3036 -0.2925 -0.1156 -0.0990 -0.0860 -0.0859 -0.0724 -0.1559 -0.0659 -0.1035 -0.0896 -0.0862 -0.0961 -0.0840 -0.0865 -0.0998 -0.1036 -0.0962 -0.1170 -0.0934 -0.1114 -0.0990 -0.0878 -0.0856 -0.0969 -0.0978 -0.1864 -0.1047 -0.1015 -0.0942 -0.1130 -0.0965 -0.0973 -0.0855 -0.0733 -0.0937 -0.0961 -0.0802 -0.0900 -0.0693 -0.1402 -0.0920 -0.0814 -0.1056 -0.1090 -0.0952 -0.0905 -0.1009 -0.0862 -0.1503 -0.1446 -0.0831 -0.0681 -0.0882 -0.0719 -0.0935 -0.0916 -0.0861 -0.0940 -0.0918 -0.0841 -0.0889 -0.0731 -0.2252 -0.0860 -0.0776
S-47	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-47	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-47	-0.13131070137023926	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-47	-0.13131070137023926	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-47	-0.0948 -0.0411 -0.0895 -0.2167 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2765 -0.0926 -0.0674 -0.0642 -0.0779 -0.0687 -0.0934 -0.0660 -0.1128 -0.0891 -0.0910 -0.1343 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6828 -0.0835 -0.1289 -0.2315 -0.0790 -0.1183 -0.0565 -0.0920 -0.0603 -0.1303 -0.2619 -0.0906 -0.0601 -0.0966 -0.1356 -0.1156 -0.0652 -0.0884 -0.0861 -0.7660 -0.0866 -0.1023 -0.1247 -0.0904 -0.0800 -0.2760 -0.0835 -0.1044 -0.1707 -0.0803 -0.0805 -0.2172 -0.0380 -0.0942 -0.3718 -0.1956 -0.0884 -0.1245 -0.1790 -0.0729 -0.0876 -0.1214 -0.0623 -0.0902 -0.0916 -0.1045 -0.0895 -0.1002 -2.0214 -0.0866 -0.0437 -0.1176 -0.1057 -0.0346 -0.1388 -0.0912 -0.1625 -0.1115 -0.0611 -0.0861 -0.0868 -0.6672 -0.0871 -0.1008 -0.0884 -0.0962 -0.0881 -0.2539 -0.0780 -0.0756 -0.2807 -0.0771 -0.0871 -0.2713 -0.1192 -0.1337 -0.1494 -0.0566 -0.1533 -0.1072 -0.0859 -0.0814 -0.0958 -0.0980 -0.1083 -0.0929 -0.1213 -0.2579 -0.0307 -0.1052 -0.2133 -0.1412 -0.0822 -0.1063 -0.0774 -0.0830 -0.1069 -0.0937 -0.0705 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0841 -0.0815 -0.1563 -0.1211 -0.0877 -0.0931 -0.1012 -0.0967 -0.0978 -0.2031 -0.0896 -0.0732
S-32	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
T-32	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ ( int ) Math.ceil ( l.length / 2. ) ] ; for ( int i = 0; i < l.length; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result; }
H-32	-0.13131064176559448	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
D-32	-0.13131064176559448	public static int [ ] sort_even ( int [ ] l ) { int [ ] result = new int [ l.length ] ; int [ ] evens = new int [ 1 + ( int ) ( l.length / 2. ) ] ; for ( int i = 0; i < l.length ; i += 2 ) { evens [ ( int ) i / 2 ] = l [ i ] ; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result [ i ] = evens [ ( int ) i / 2 ] ; } else { result [ i ] = l [ i ] ; } } return result ; }
P-32	-0.0948 -0.0411 -0.0895 -0.2167 -0.0935 -0.0486 -0.0862 -0.0244 -0.1036 -0.0819 -0.1319 -0.1105 -0.0844 -0.0865 -0.0848 -0.0909 -0.1727 -0.0797 -0.2765 -0.0926 -0.0674 -0.0642 -0.0779 -0.0687 -0.0934 -0.0660 -0.1128 -0.0891 -0.0910 -0.1343 -0.0587 -0.0652 -0.0408 -0.0885 -0.0563 -0.0608 -0.0764 -0.6828 -0.0835 -0.1289 -0.2315 -0.0790 -0.1183 -0.0565 -0.0920 -0.0603 -0.1303 -0.2619 -0.0906 -0.0601 -0.0966 -0.1356 -0.1156 -0.0652 -0.0884 -0.0861 -0.7660 -0.0866 -0.1023 -0.1247 -0.0904 -0.0800 -0.2760 -0.0835 -0.1044 -0.1707 -0.0803 -0.0805 -0.2172 -0.0380 -0.0942 -0.3718 -0.1956 -0.0884 -0.1245 -0.1790 -0.0729 -0.0876 -0.1214 -0.0623 -0.0902 -0.0916 -0.1045 -0.0895 -0.1002 -2.0214 -0.0866 -0.0437 -0.1176 -0.1057 -0.0346 -0.1388 -0.0912 -0.1625 -0.1115 -0.0611 -0.0861 -0.0868 -0.6672 -0.0871 -0.1008 -0.0884 -0.0962 -0.0881 -0.2539 -0.0780 -0.0756 -0.2807 -0.0771 -0.0871 -0.2713 -0.1192 -0.1337 -0.1494 -0.0566 -0.1533 -0.1072 -0.0859 -0.0814 -0.0958 -0.0980 -0.1083 -0.0929 -0.1213 -0.2579 -0.0307 -0.1052 -0.2133 -0.1412 -0.0822 -0.1063 -0.0774 -0.0830 -0.1069 -0.0937 -0.0705 -0.0929 -0.0880 -0.1067 -0.0775 -0.1020 -0.0937 -0.0971 -0.0841 -0.0815 -0.1563 -0.1211 -0.0877 -0.0931 -0.1012 -0.0967 -0.0978 -0.2031 -0.0896 -0.0732
S-27	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-27	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-27	-0.1853160560131073	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-27	-0.1853160560131073	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-27	-0.0917 -0.0520 -0.3184 -0.0959 -1.0650 -0.0640 -0.0454 -0.0822 -0.0227 -0.1010 -0.2790 -0.0863 -1.0540 -0.0753 -0.0602 -0.0815 -0.0861 -0.2618 -0.0975 -1.0214 -0.0712 -0.1161 -0.0838 -0.0568 -1.8066 -0.0894 -1.2551 -0.0803 -0.2033 -0.0890 -0.0803 -0.2398 -0.0927 -1.0171 -0.0710 -0.0570 -0.0532 -0.0315 -0.0796 -0.0486 -1.5001 -0.0866 -0.9954 -0.0737 -0.2282 -0.1230 -0.0874 -0.0833 -0.1102 -0.0833 -0.0769 -0.0808 -0.7928 -0.0893 -0.1013 -0.1076 -0.1193 -0.1293 -0.3415 -0.0759 -0.0924 -0.0746 -0.0875 -0.0949 -0.0782 -0.0840 -0.2262 -0.0418 -0.0425 -0.2074 -0.2618 -0.1049 -0.0601 -0.1131 -0.1760 -0.1097 -0.0869 -0.0880 -0.0934 -0.0836 -0.0973 -1.5968 -0.0882 -0.0419 -0.1147 -0.0589 -0.0452 -0.0379 -0.1174 -0.1004 -0.1429 -0.1083 -0.0768 -0.0731 -0.0827 -0.5955 -0.0860 -0.0902 -0.0683 -0.1062 -0.1008 -0.1735 -0.0681 -0.0907 -0.0698 -0.0753 -0.4652 -0.0774 -0.0874 -0.2279 -0.1145 -0.1531 -0.2597 -0.0837 -0.1575 -0.1255 -0.0829 -0.0884 -0.0921 -0.1558 -0.2398 -0.1083 -0.4869 -0.0503 -0.0413 -0.1553 -0.1956 -0.1106 -0.0914 -0.0853 -0.0926 -0.0894 -0.0746 -0.0692 -0.0884 -0.0993 -0.1132 -0.1911 -0.1012 -0.0558 -0.1034 -0.1557 -0.1082 -0.0879 -0.0867 -0.0898 -0.0874 -0.0900 -0.0928 -0.0858 -0.0838 -0.1355 -0.0856 -0.0717
S-13	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-13	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-13	-0.1853160560131073	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-13	-0.1853160560131073	public static List < Integer > sort_third ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l.size ( ) ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size ( ) ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-13	-0.0917 -0.0520 -0.3184 -0.0959 -1.0650 -0.0640 -0.0454 -0.0822 -0.0227 -0.1010 -0.2790 -0.0863 -1.0540 -0.0753 -0.0602 -0.0815 -0.0861 -0.2618 -0.0975 -1.0214 -0.0712 -0.1161 -0.0838 -0.0568 -1.8066 -0.0894 -1.2551 -0.0803 -0.2033 -0.0890 -0.0803 -0.2398 -0.0927 -1.0171 -0.0710 -0.0570 -0.0532 -0.0315 -0.0796 -0.0486 -1.5001 -0.0866 -0.9954 -0.0737 -0.2282 -0.1230 -0.0874 -0.0833 -0.1102 -0.0833 -0.0769 -0.0808 -0.7928 -0.0893 -0.1013 -0.1076 -0.1193 -0.1293 -0.3415 -0.0759 -0.0924 -0.0746 -0.0875 -0.0949 -0.0782 -0.0840 -0.2262 -0.0418 -0.0425 -0.2074 -0.2618 -0.1049 -0.0601 -0.1131 -0.1760 -0.1097 -0.0869 -0.0880 -0.0934 -0.0836 -0.0973 -1.5968 -0.0882 -0.0419 -0.1147 -0.0589 -0.0452 -0.0379 -0.1174 -0.1004 -0.1429 -0.1083 -0.0768 -0.0731 -0.0827 -0.5955 -0.0860 -0.0902 -0.0683 -0.1062 -0.1008 -0.1735 -0.0681 -0.0907 -0.0698 -0.0753 -0.4652 -0.0774 -0.0874 -0.2279 -0.1145 -0.1531 -0.2597 -0.0837 -0.1575 -0.1255 -0.0829 -0.0884 -0.0921 -0.1558 -0.2398 -0.1083 -0.4869 -0.0503 -0.0413 -0.1553 -0.1956 -0.1106 -0.0914 -0.0853 -0.0926 -0.0894 -0.0746 -0.0692 -0.0884 -0.0993 -0.1132 -0.1911 -0.1012 -0.0558 -0.1034 -0.1557 -0.1082 -0.0879 -0.0867 -0.0898 -0.0874 -0.0900 -0.0928 -0.0858 -0.0838 -0.1355 -0.0856 -0.0717
S-15	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += ( int ) c; } return result; }
T-15	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; } public static int skjkasdkd ( int [ ] lst ) { int max = 0; int i = 0; while ( i < lst.length ) { if ( lst [ i ] > max && is_prime ( lst [ i ] ) ) max = lst [ i ] ; i += 1; } int result = 0; for ( char c : ( max + "" ) .toCharArray ( ) ) { result += c - '0'; } return result; }
H-15	-0.23662476241588593	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-15	-0.23662476241588593	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-15	-0.0843 -0.0450 -0.1556 -0.0674 -0.0906 -0.0295 -0.1209 -0.0878 -0.1167 -0.0884 -0.0925 -0.7363 -0.1113 -0.0755 -0.0794 -0.0903 -0.6949 -0.0976 -0.1935 -0.1140 -0.1023 -0.0988 -1.8428 -0.0979 -0.0417 -0.1086 -0.0801 -1.1406 -0.0177 -0.1070 -0.1837 -0.9004 -0.0864 -0.0833 -0.2141 -0.0845 -0.0888 -0.1135 -0.1155 -0.1439 -0.2163 -0.1061 -0.1735 -0.1091 -0.0887 -0.1039 -0.0836 -1.4284 -0.1158 -0.1019 -0.0642 -1.0473 -0.0871 -0.2286
Generate test with beam=5: BLEU = 87.67 98.6/97.1/95.4/93.6 (BP = 0.912 ratio = 0.915 hyp_len = 12877 ref_len = 14067)

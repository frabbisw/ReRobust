S-90	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { { int i = 0; while ( i < numbers.size () ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } i += 1; } } return false; }
T-90	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { { int i = 0; while ( i < numbers.size () ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } i += 1; } } return false; }
H-90	-0.2121853530406952	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { int i = 0; while ( i < numbers.size () ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } i += 1 ; } return false ; }
D-90	-0.2121853530406952	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { int i = 0; while ( i < numbers.size () ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } i += 1 ; } return false ; }
P-90	-0.0931 -0.0528 -0.1050 -0.0560 -0.0886 -0.0386 -0.0813 -0.0236 -0.1141 -0.3545 -0.4021 -0.0383 -0.1619 -0.0449 -1.4430 -0.1070 -0.0643 -0.0902 -0.0891 -0.9208 -0.1157 -0.0965 -1.8141 -0.1840 -0.1098 -0.1141 -0.0968 -0.0836 -0.1002 -0.1670 -0.0683 -0.0877 -0.0832 -0.2236 -0.1146 -0.0708 -0.0855 -0.0976 -0.1324 -0.0906 -1.4095 -0.1001 -0.1203 -0.0759 -0.1037 -0.1393 -0.0664 -0.0938 -0.1040 -0.1054 -0.1644 -0.0800 -0.0900 -0.1815 -0.0279 -0.1115 -0.0909 -0.1273 -0.2942 -0.1118 -0.3741 -0.0963 -0.1024 -0.0795 -0.0976 -0.2205 -0.1029 -0.1318 -0.0890 -0.1013 -0.1268 -0.1212 -0.0279 -0.4165 -0.0767 -0.0870 -0.1813 -0.0752 -1.3098 -0.5797 -0.1095 -0.1012 -1.1786 -0.1116 -0.0933 -0.1554 -0.0491 -0.8323 -0.0807 -0.0849
S-58	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { { int j = i + 1; while ( j < numbers.size () ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; j += 1; } } } return false; }
T-58	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { { int j = i + 1; while ( j < numbers.size () ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; j += 1; } } } return false; }
H-58	-0.18608008325099945	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { { int j = i + 1 ; while ( j < numbers.size () ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; j += 1 ; } } } return false ; }
D-58	-0.18608008325099945	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { { int j = i + 1 ; while ( j < numbers.size () ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; j += 1 ; } } } return false ; }
P-58	-0.0930 -0.0511 -0.1020 -0.0567 -0.0884 -0.0384 -0.0814 -0.0236 -0.1142 -0.3501 -0.3997 -0.0380 -0.1630 -0.0478 -1.4681 -0.1072 -0.0655 -0.0901 -0.0848 -0.2637 -0.1117 -0.0732 -0.0770 -0.0807 -1.3251 -0.0810 -0.0908 -0.0940 -0.1071 -0.1727 -0.0825 -0.0879 -0.0718 -0.0881 -0.1728 -0.0788 -0.0842 -0.3330 -0.1846 -0.0969 -0.1041 -0.1126 -0.0699 -2.4823 -0.1477 -0.1649 -0.1049 -0.1253 -0.1165 -0.0770 -0.1003 -0.1654 -0.0727 -0.0795 -0.0800 -0.1843 -0.0310 -0.1030 -0.0854 -0.1235 -0.2878 -0.1109 -0.1700 -0.0905 -0.0948 -0.0746 -0.0950 -0.2191 -0.1046 -0.1286 -0.0860 -0.1010 -0.1113 -0.1156 -0.0275 -0.2969 -0.0581 -0.0870 -0.1154 -0.0659 -0.7750 -0.0927 -0.1031 -0.7181 -0.1191 -0.1018 -0.0879 -0.1238 -0.0967 -0.0584 -0.6565 -0.0864 -0.0941
S-7	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; { int i = 0; while ( i < s.length () - 2 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; i += 1; } } return true; }
T-7	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; { int i = 0; while ( i < s.length () - 2 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; i += 1; } } return true; }
H-7	-0.2853010594844818	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; { int i = 0; while ( i < s.length () ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; i += 1 ; } } return true ; }
D-7	-0.2853010594844818	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; { int i = 0; while ( i < s.length () ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false; i += 1 ; } } return true ; }
P-7	-0.0985 -0.0532 -0.0821 -0.0665 -0.0875 -0.0394 -0.0093 -0.1191 -0.7719 -0.0916 -0.0855 -0.0876 -0.2493 -0.1107 -0.1223 -0.1500 -0.1112 -0.0753 -0.1447 -0.1004 -0.0838 -0.1073 -0.1004 -0.9173 -0.5325 -0.1224 -0.0987 -0.0970 -1.3594 -0.1170 -0.1050 -0.1146 -0.1261 -0.3914 -0.1049 -0.0722 -0.0572 -0.7100 -0.0844 -0.1384 -0.1124 -0.3044 -0.1138 -0.6713 -0.1095 -0.1178 -0.0844 -0.1935 -0.1027 -0.1034 -0.7091 -0.1105 -0.1860 -0.3659 -0.2301 -0.0869 -0.3552 -0.1881 -0.1272 -0.7202 -0.5301 -0.1664 -2.4473 -0.1809 -0.8694 -1.1564 -0.1515 -0.0983 -1.4127 -0.0813 -0.0737
S-45	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; for ( ; lst.size () > 0; ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-45	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; for ( ; lst.size () > 0; ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size () - 1 ) ) ; switched = ( !switched ) ; } return result; }
H-45	-0.21698063611984253	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true ; for ( ; lst.size () > 0; ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } switched = false ; } return result ; }
D-45	-0.21698063611984253	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true ; for ( ; lst.size () > 0; ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } switched = false ; } return result ; }
P-45	-0.1031 -0.0403 -0.2285 -0.3212 -0.0654 -0.1381 -0.0193 -0.0809 -0.0195 -0.0922 -0.0443 -0.1162 -0.2585 -0.3960 -0.0595 -0.1698 -0.0554 -0.0845 -0.0811 -0.2937 -0.3974 -0.0621 -0.1339 -0.0608 -0.0815 -0.0566 -1.6245 -0.3431 -0.0674 -0.1176 -0.0679 -0.0810 -0.1709 -0.0338 -0.0951 -0.1446 -0.2122 -0.1828 -0.1128 -0.1634 -0.2285 -0.7976 -0.2103 -0.0706 -0.1680 -0.7783 -0.1111 -0.0900 -0.1626 -0.1219 -0.0867 -0.0819 -0.0922 -0.1750 -0.2701 -0.3426 -0.1212 -2.1126 -0.0990 -0.0640 -0.1262 -0.1029 -0.1065 -0.1039 -0.0938 -0.2002 -0.0725 -0.1342 -0.1342 -0.1334 -0.2367 -0.1135 -1.9745 -0.0880 -0.1210 -0.1161 -0.0991 -0.0946 -0.0973 -0.0887 -0.8906 -0.6715 -0.1192 -0.0827 -0.1202 -0.0895 -0.0661 -0.0961 -0.1631 -0.0769 -0.0711
S-83	public static int count_upper ( String s ) { int count = 0; { int i = 0; while ( i < s.length () ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; i += 2; } } return count; }
T-83	public static int count_upper ( String s ) { int count = 0; { int i = 0; while ( i < s.length () ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; i += 2; } } return count; }
H-83	-0.2421417087316513	public static int count_upper ( String s ) { int count = 0; { int i = 0 ; while ( i < s.length () ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; i += 2; } } return count ; }
D-83	-0.2421417087316513	public static int count_upper ( String s ) { int count = 0; { int i = 0 ; while ( i < s.length () ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; i += 2; } } return count ; }
P-83	-0.0911 -0.0443 -0.1014 -0.0707 -0.0956 -0.0327 -0.1165 -0.8211 -0.1128 -0.0891 -0.0897 -0.0932 -0.0653 -0.0898 -0.8848 -0.3765 -0.1613 -0.1015 -0.0876 -2.5811 -0.0674 -0.1360 -0.1117 -0.1193 -0.0862 -0.5272 -0.1197 -0.0968 -0.0746 -0.0878 -0.0791 -0.1309 -0.0825 -0.0860 -0.0814 -0.1265 -1.0537 -0.1003 -0.1308 -0.0983 -0.0840 -0.1691 -0.1150 -0.3151 -0.1808 -0.0613 -0.1543 -0.1012 -0.1959 -0.1564 -0.1472 -0.0670 -0.1165 -0.0919 -0.2454 -0.1461 -0.1433 -0.0890 -0.1113 -0.1397 -0.3412 -0.1434 -0.1433 -0.0946 -0.0475 -0.1210 -0.5649 -0.1430 -0.1132 -0.0709 -0.0555 -0.1217 -0.0817 -0.3681 -0.1337 -2.8176 -0.1496 -0.0976 -0.2710 -1.8867 -0.1571 -0.1543 -0.0823 -0.1011 -0.3131 -0.0801 -0.0791
S-29	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { { int j = 0; while ( j < l.size () ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; j += 1; } } } return false; }
T-29	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { { int j = i + 1; while ( j < l.size () ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; j += 1; } } } return false; }
H-29	-0.19292119145393372	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { { int j = 0; while ( j < l.size () ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; j += 1 ; } } } return false ; }
D-29	-0.19292119145393372	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { { int j = 0; while ( j < l.size () ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; j += 1 ; } } } return false ; }
P-29	-0.0999 -0.0466 -0.1201 -0.1031 -0.0922 -0.0455 -0.0942 -0.0438 -0.0877 -0.0691 -0.1214 -0.2677 -0.3834 -0.0431 -0.2054 -0.0672 -0.0824 -0.0867 -0.2843 -0.1114 -0.0681 -0.0781 -0.0823 -1.3425 -0.0841 -0.0826 -0.1315 -0.1327 -0.1674 -0.0788 -0.0864 -0.0701 -0.1029 -0.1652 -0.0799 -0.0823 -0.4595 -0.1186 -0.0982 -0.1040 -1.6844 -0.1205 -0.1057 -0.1247 -0.1236 -0.1166 -0.1047 -0.1318 -0.0696 -0.0810 -0.0896 -0.1534 -0.1084 -0.2100 -0.1454 -0.2480 -0.1097 -0.1566 -0.0910 -0.3845 -0.1315 -0.1093 -0.1827 -0.1080 -0.1017 -0.0849 -0.3004 -0.2041 -0.0873 -0.1472 -0.0862 -1.1466 -0.0829 -0.1594 -1.4586 -0.1112 -0.1318 -0.1116 -0.2209 -0.0941 -0.0431 -0.4933 -0.0864 -0.0927
S-18	public static boolean pairs_sum_to_zero ( List<Integer> l ) { { int i = 0; while ( i < l.size () ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } i += 1; } } return false; }
T-18	public static boolean pairs_sum_to_zero ( List<Integer> l ) { { int i = 0; while ( i < l.size () ) { for ( int j = i + 1; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } i += 1; } } return false; }
H-18	-0.2235313504934311	public static boolean pairs_sum_to_zero ( List<Integer> l ) { int i = 0; while ( i < l.size () ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } i += 1 ; } return false ; }
D-18	-0.2235313504934311	public static boolean pairs_sum_to_zero ( List<Integer> l ) { int i = 0; while ( i < l.size () ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } i += 1 ; } return false ; }
P-18	-0.1024 -0.0472 -0.1128 -0.1046 -0.0924 -0.0465 -0.0944 -0.0441 -0.0880 -0.0666 -0.1213 -0.2782 -0.4006 -0.0439 -0.2097 -0.0680 -0.0811 -0.0896 -0.8546 -0.1232 -0.1025 -1.9937 -0.2262 -0.1091 -0.0999 -0.0995 -0.1210 -0.1212 -0.1652 -0.0681 -0.0877 -0.0836 -0.2105 -0.1135 -0.0665 -0.0868 -0.0989 -1.5215 -0.0920 -0.1403 -0.0949 -0.1094 -0.1423 -0.0662 -0.0909 -0.0939 -0.1417 -0.2055 -0.0801 -0.0977 -0.1572 -0.1105 -0.2023 -0.1416 -0.2376 -0.1098 -0.1803 -0.0997 -0.5129 -0.1611 -0.1124 -0.1815 -0.1060 -0.1056 -0.0868 -0.6441 -0.2277 -0.0874 -0.1772 -0.0882 -1.1623 -0.6163 -0.1230 -0.1210 -1.7117 -0.0981 -0.0939 -0.1166 -0.0375 -0.5495 -0.0819 -0.0882
S-44	public static int how_many_times ( String string, String substring ) { int times = 0; { int i = 0; while ( i < string.length () - substring.length () ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } i += 1; } } return times; }
T-44	public static int how_many_times ( String string, String substring ) { int times = 0; { int i = 0; while ( i < string.length () - substring.length () + 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } i += 1; } } return times; }
H-44	-0.28189191222190857	public static int how_many_times ( String string, String substring ) { int times = 0; { int i = 0; while ( i < string.length () - substring.length () ) { if ( string. substring ( i, i + substring.length () ) . equals ( substring ) ) { times += 1; } i += substring.length () ; } } return times ; }
D-44	-0.28189191222190857	public static int how_many_times ( String string, String substring ) { int times = 0; { int i = 0; while ( i < string.length () - substring.length () ) { if ( string. substring ( i, i + substring.length () ) . equals ( substring ) ) { times += 1; } i += substring.length () ; } } return times ; }
P-44	-0.0990 -0.0409 -0.1060 -0.0151 -0.0941 -0.0550 -0.1080 -0.0176 -0.1112 -0.7124 -0.1088 -1.8105 -0.5319 -0.0329 -0.0871 -0.0895 -0.0901 -0.0360 -0.0833 -1.0158 -0.4302 -0.1134 -0.0965 -0.0919 -1.5122 -0.1378 -0.1110 -0.2167 -0.1066 -0.3315 -0.0848 -0.0731 -0.0776 -1.9181 -0.0336 -0.1097 -0.1370 -0.0697 -0.0879 -0.0801 -0.1481 -0.1201 -0.1591 -0.1132 -0.7586 -0.2229 -0.1709 -1.0643 -0.3017 -0.1931 -0.1121 -0.1107 -0.1414 -0.0725 -0.0836 -0.1120 -0.6962 -0.1101 -0.0168 -0.0971 -0.0881 -0.0912 -0.0946 -0.0870 -2.2707 -0.1629 -0.1204 -0.0902 -1.7954 -0.1926 -0.1039 -0.0658 -0.1212 -0.2541 -0.3761 -0.0858 -0.0350 -0.4996 -0.0739 -0.0735
S-36	public static long sum_squared_nums ( double[] lst ) { int result = 0, i = 0; { int j = 0; while ( j < lst.length ) { result += ( Math.floor ( ( int ) lst[i] ) ) * ( Math.ceil ( ( int ) lst[i] ) ) ; j++; } } return result; }
T-36	public static long sum_squared_nums ( double[] lst ) { int result = 0; { int i = 0; while ( i < lst.length ) { result += ( Math.ceil ( lst[i] ) ) * ( Math.ceil ( lst[i] ) ) ; i++; } } return result; }
H-36	-0.32869598269462585	public static long sum_squared_nums ( double [] lst ) { int result = 0, i = 0; { int j = 0; while ( j < lst.length ) { result += ( ( ( int ) lst[i] ) ) * ( ( ( int ) lst[i] ) * ( ( int ) lst[i] ) ) ; j++; } } return result ; }
D-36	-0.32869598269462585	public static long sum_squared_nums ( double [] lst ) { int result = 0, i = 0; { int j = 0; while ( j < lst.length ) { result += ( ( ( int ) lst[i] ) ) * ( ( ( int ) lst[i] ) * ( ( int ) lst[i] ) ) ; j++; } } return result ; }
P-36	-0.0954 -0.0451 -0.0789 -0.0843 -0.1144 -0.0223 -0.0860 -0.0798 -0.1181 -0.1528 -1.9984 -0.0439 -0.0835 -0.0853 -0.1477 -0.1632 -0.0861 -1.2442 -0.1258 -0.0947 -1.3085 -0.3106 -0.1166 -0.1047 -0.0954 -2.4780 -0.1689 -0.1092 -0.1644 -0.1140 -0.3053 -0.0646 -0.0672 -0.0917 -0.0780 -0.1699 -0.0810 -0.1194 -1.0888 -1.2947 -0.2564 -0.0976 -0.5220 -0.9462 -0.5176 -0.3271 -0.0979 -1.0612 -0.0630 -0.1080 -0.5776 -0.7404 -0.1708 -0.0895 -0.1356 -0.7806 -0.3252 -0.2394 -0.0950 -0.4567 -0.0991 -0.2230 -0.6778 -0.0908 -0.0608 -0.6189 -0.4638 -0.2272 -0.0920 -0.0975 -0.1346 -0.3609 -0.9215 -0.2935 -0.3889 -0.0979 -0.1174 -0.2745 -0.0866 -0.0803
S-43	public static int solution ( ArrayList<Integer> lst ) { int result = 0; { int i = 0; while ( i < lst.size () ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } i++; } } return result; }
T-43	public static int solution ( ArrayList<Integer> lst ) { int result = 0; { int i = 0; while ( i < lst.size () ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } i++; } } return result; }
H-43	-0.26875749230384827	public static int solution ( ArrayList<Integer> lst ) { int result = 0; { int i = 0 ; while ( i < lst.size () ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } i++; } } return result ; }
D-43	-0.26875749230384827	public static int solution ( ArrayList<Integer> lst ) { int result = 0; { int i = 0 ; while ( i < lst.size () ) { if ( ( i % 2 ) == 1 ) { result += lst.get ( i ) ; } i++; } } return result ; }
P-43	-0.0900 -0.0422 -0.1022 -0.0304 -0.1171 -1.5064 -0.3867 -0.0405 -0.2034 -0.0504 -0.0815 -0.0830 -0.0829 -0.1137 -0.0834 -1.3565 -0.3831 -0.1271 -0.1046 -0.0912 -1.8191 -0.0806 -0.1494 -0.1126 -0.1342 -0.0932 -0.4317 -0.1283 -0.2077 -0.0691 -0.0855 -0.0816 -0.1818 -0.1137 -0.2497 -0.3036 -0.2331 -0.0914 -0.0873 -0.0996 -0.6107 -0.5465 -0.0972 -0.9458 -0.0739 -0.0887 -0.1666 -0.3749 -0.1130 -0.1161 -0.0954 -0.1181 -0.6365 -0.5068 -1.4586 -0.1177 -0.2040 -0.0997 -0.0920 -0.2178 -0.0794 -0.0737
S-6	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; { int i = 0; while ( i < game.length ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; i += 1; } } return result; }
T-6	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; { int i = 0; while ( i < game.length ) { result[i] = Math.abs ( game[i] - guess[i] ) ; i += 1; } } return result; }
H-6	-0.3879576325416565	public static int[] compare ( int[] game, int[] guess ) { int [] result = new int[game.length]; { int i = 0 ; while ( i < game.length ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; i += 1 ; } } return result ; }
D-6	-0.3879576325416565	public static int[] compare ( int[] game, int[] guess ) { int [] result = new int[game.length]; { int i = 0 ; while ( i < game.length ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; i += 1 ; } } return result ; }
P-6	-0.0948 -0.0445 -0.0956 -1.9489 -0.0309 -0.1146 -0.0925 -1.9589 -0.0589 -1.1096 -0.0925 -1.9948 -0.0532 -0.0792 -0.0853 -0.0996 -2.7416 -0.0677 -0.0904 -0.0691 -0.0607 -0.6395 -0.0536 -0.0954 -0.0680 -1.7305 -0.2341 -0.0862 -0.1200 -0.1041 -2.0402 -0.0841 -0.1383 -0.1169 -0.1304 -0.0718 -0.2254 -0.0681 -0.0881 -0.0952 -0.0809 -0.4220 -0.9812 -0.2560 -0.2308 -0.1236 -2.5119 -0.0971 -0.1049 -0.0367 -0.1043 -0.0647 -0.6246 -0.2307 -0.4005 -0.0820 -0.8615 -0.2242 -0.3356 -0.1221 -0.1007 -0.0986 -0.2023 -1.0636 -0.1826 -0.2662 -0.1649 -0.1030 -0.0940 -0.4331 -0.0789 -0.0762
S-20	public static String solve ( int N ) { int sum = 0; { int i = 0; while ( i < ( N + "" ) .length () ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; i += 1; } } return Integer.toBinaryString ( sum ) ; }
T-20	public static String solve ( int N ) { int sum = 0; { int i = 0; while ( i < ( N + "" ) .length () ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; i += 1; } } return Integer.toBinaryString ( sum ) ; }
H-20	-0.24447213113307953	public static String solve ( int N ) { int sum = 0; { int i = 0; while ( i < ( N + "" ) .length () ) { sum += Integer.parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; i += 1 ; } } return Integer.toBinaryString ( sum ) ; }
D-20	-0.24447213113307953	public static String solve ( int N ) { int sum = 0; { int i = 0; while ( i < ( N + "" ) .length () ) { sum += Integer.parseInt ( ( N + "" ) . substring ( i , ( i + 1 ) ) ) ; i += 1 ; } } return Integer.toBinaryString ( sum ) ; }
P-20	-0.0848 -0.0450 -1.4243 -0.0262 -0.1087 -0.1058 -0.1305 -0.0822 -0.0928 -0.1185 -0.0730 -0.0940 -0.7436 -0.3410 -0.1417 -0.0976 -0.0973 -1.3712 -0.1554 -0.1118 -0.2635 -0.1101 -0.1423 -0.1985 -0.0770 -0.0932 -0.0867 -0.1247 -0.1151 -0.0806 -0.0836 -0.0855 -0.1369 -0.0738 -1.1134 -0.0900 -1.3288 -0.1059 -0.4291 -0.1786 -0.0650 -0.0711 -0.0809 -0.1458 -0.0739 -0.1101 -0.4623 -0.2927 -0.8091 -0.5731 -0.1803 -0.2226 -0.0941 -0.0924 -0.1311 -0.0842 -0.0858 -0.0964 -1.5352 -0.1018 -0.1876 -0.1092 -0.1157 -1.1808 -0.0909 -0.0965 -0.0230 -0.0511 -0.1000 -0.1125 -0.1042 -0.0897 -0.0801 -0.0790
S-8	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; { int i = 0; while ( i < string.length () ) { result.add ( string.substring ( i + 1 ) ) ; i += 1; } } return result; }
T-8	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; { int i = 0; while ( i < string.length () ) { result.add ( string.substring ( 0, i + 1 ) ) ; i += 1; } } return result; }
H-8	-0.2521640658378601	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; { int i = 0 ; while ( i < string.length () ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; i += 1 ; } } return result ; }
D-8	-0.2521640658378601	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; { int i = 0 ; while ( i < string.length () ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; i += 1 ; } } return result ; }
P-8	-0.1003 -0.0487 -0.3306 -0.3775 -0.0726 -0.1879 -0.0488 -0.1012 -0.0209 -0.1183 -1.2944 -0.0881 -0.0905 -0.0850 -0.3165 -0.3356 -0.0692 -0.1742 -0.0696 -0.0836 -0.0613 -1.8014 -0.2759 -0.0740 -0.1545 -0.0674 -0.0765 -0.4314 -0.0968 -0.0988 -0.0911 -1.7505 -0.0688 -0.1318 -0.1145 -0.1706 -0.0937 -0.1950 -0.1280 -0.1150 -0.0766 -0.0882 -0.0771 -0.1960 -0.3238 -0.3146 -0.1116 -0.0658 -0.1116 -0.6968 -0.1219 -0.4153 -0.1660 -0.8457 -0.7209 -0.3060 -0.1408 -0.0865 -0.0980 -0.1027 -0.0931 -0.0763 -0.1750 -1.8683 -0.1165 -0.1734 -0.0980 -0.0873 -0.0836 -0.1571 -0.0762 -0.0747
S-74	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; { int i = 0; while ( i < n ) { pile.add ( n - 2 * i ) ; i++; } } return pile; }
T-74	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; { int i = 0; while ( i < n ) { pile.add ( n + 2 * i ) ; i++; } } return pile; }
H-74	-0.24064821004867554	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; { int i = 0 ; while ( i < n ) { pile.add ( n - 2 * i ) ; i ++ ; } } return pile ; }
D-74	-0.24064821004867554	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; { int i = 0 ; while ( i < n ) { pile.add ( n - 2 * i ) ; i ++ ; } } return pile ; }
P-74	-0.1053 -0.0523 -1.9197 -0.4499 -0.0641 -0.1737 -0.0603 -0.0919 -0.0414 -0.0974 -0.0331 -0.0267 -0.1276 -0.1064 -0.0774 -0.0895 -0.0852 -1.9273 -0.3674 -0.0610 -0.1723 -0.0675 -0.0333 -0.0894 -0.0647 -1.3240 -0.3058 -0.0634 -0.1565 -0.0676 -0.0821 -0.7577 -0.1148 -0.1115 -0.1019 -1.7995 -0.0702 -0.1086 -0.1128 -0.1360 -0.1156 -0.1295 -0.0939 -0.0847 -0.1458 -0.0295 -0.1808 -0.2761 -0.1033 -0.2211 -0.2231 -0.2679 -0.2186 -0.1739 -0.1022 -0.0920 -0.0927 -0.8844 -0.0875 -0.2000 -0.1451 -0.1309 -0.0779 -0.0315 -0.1596 -0.0821 -0.0770
S-34	public static String string_xor ( String a, String b ) { String result = ""; { int i = 0; while ( i < a.length () ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } i += 1; } } return result; }
T-34	public static String string_xor ( String a, String b ) { String result = ""; { int i = 0; while ( i < a.length () ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } i += 1; } } return result; }
H-34	-0.3345775306224823	public static String string_xor ( String a, String b ) { String result = ""; { int i = 0 ; while ( i < a.length () ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } i += 1 ; } } return result ; }
D-34	-0.3345775306224823	public static String string_xor ( String a, String b ) { String result = ""; { int i = 0 ; while ( i < a.length () ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } i += 1 ; } } return result ; }
P-34	-0.0986 -0.0579 -1.1883 -0.0683 -0.0884 -0.0197 -0.1146 -0.8782 -0.1245 -1.1959 -0.6228 -0.0847 -0.0834 -0.0868 -1.3538 -0.0751 -0.0795 -1.9271 -0.2475 -0.1096 -0.0984 -0.0899 -2.1889 -0.1335 -0.1459 -0.1150 -0.1247 -0.0817 -0.6249 -0.1105 -0.1001 -0.0823 -0.0864 -0.0861 -0.1488 -0.1162 -0.3134 -0.1551 -1.1184 -0.1152 -0.1206 -0.0932 -0.4006 -0.0956 -0.1068 -0.8205 -0.1090 -0.1110 -0.0968 -0.0875 -0.0848 -0.1287 -0.0920 -0.1430 -1.2151 -0.6449 -0.1488 -0.2492 -1.6016 -0.4032 -0.2319 -0.1981 -0.0870 -0.0865 -0.3662 -0.0816 -0.0724
S-87	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; { int i = 0; while ( i < xs.size () ) { result.add ( xs.get ( i ) ) ; i += 1; } } return result; }
T-87	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; { int i = 1; while ( i < xs.size () ) { result.add ( i * xs.get ( i ) ) ; i += 1; } } return result; }
H-87	-0.22368170320987701	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; { int i = 0 ; while ( i < xs.size () ) { result.add ( xs.get ( i ) ) ; i += 1 ; } } return result ; }
D-87	-0.22368170320987701	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; { int i = 0 ; while ( i < xs.size () ) { result.add ( xs.get ( i ) ) ; i += 1 ; } } return result ; }
P-87	-0.0986 -0.0431 -0.3439 -0.2943 -0.0583 -0.1612 -0.0115 -0.1054 -0.3769 -0.2485 -0.0548 -0.1894 -0.0864 -0.0836 -0.0827 -0.3487 -0.3249 -0.0569 -0.1667 -0.0567 -0.0809 -0.0551 -1.8118 -0.2555 -0.0581 -0.1478 -0.0690 -0.0784 -0.5759 -0.0979 -0.1062 -0.0929 -1.5661 -0.0701 -0.1351 -0.1164 -0.1655 -0.0912 -0.3770 -0.1434 -0.3483 -0.0679 -0.0871 -0.0772 -0.1824 -0.2911 -0.3887 -0.1115 -0.1513 -0.1732 -0.3424 -0.1186 -0.1425 -0.1073 -0.0963 -0.0859 -0.0990 -0.2632 -1.4920 -0.0949 -0.4088 -0.1129 -0.0954 -0.0784 -0.1281 -0.0815 -0.0740
S-82	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int i = 2; while ( i < ( int ) Math.sqrt ( n ) + 1 ) { if ( n % i == 0 ) return false; i += 1; } } return true; }
T-82	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int i = 2; while ( i < ( int ) Math.sqrt ( n ) + 1 ) { if ( n % i == 0 ) return false; i += 1; } } return true; }
H-82	-0.28518426418304443	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int i = 2; while ( i < ( int ) Math.sqrt ( n ) ) { if ( n % i == 0 ) return false; i += 1 ; } } return true ; }
D-82	-0.28518426418304443	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int i = 2; while ( i < ( int ) Math.sqrt ( n ) ) { if ( n % i == 0 ) return false; i += 1 ; } } return true ; }
P-82	-0.0984 -0.0554 -0.0892 -0.0688 -0.0960 -0.0247 -0.1199 -0.0912 -0.0731 -0.0849 -0.0858 -0.1916 -0.1108 -0.0830 -0.1359 -0.1242 -0.0897 -0.1033 -0.0817 -0.8425 -0.5741 -0.1426 -0.1013 -0.1044 -1.2516 -0.0965 -0.1091 -0.1791 -0.1437 -0.1240 -0.1217 -0.1009 -3.2618 -0.1034 -1.0674 -0.1074 -0.0759 -0.0860 -0.2922 -0.0919 -0.1518 -0.1148 -0.1531 -0.2820 -0.1376 -0.3590 -0.1240 -0.0832 -0.1252 -0.0574 -0.8336 -0.1297 -0.1269 -1.9662 -0.1745 -0.3201 -0.3076 -0.0952 -0.0799 -1.1012 -0.0836 -0.0898
S-56	public static boolean is_palindrome ( String str ) { { int i = 0; while ( i < str.length () ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; i += 1; } } return true; }
T-56	public static boolean is_palindrome ( String str ) { { int i = 0; while ( i < str.length () ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; i += 1; } } return true; }
H-56	-0.27891990542411804	public static boolean is_palindrome ( String str ) { int i = 0 ; while ( i < str.length () ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 ) ) return false; i += 1 ; } return true ; }
D-56	-0.27891990542411804	public static boolean is_palindrome ( String str ) { int i = 0 ; while ( i < str.length () ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 ) ) return false; i += 1 ; } return true ; }
P-56	-0.0984 -0.0508 -0.0882 -0.0692 -0.0918 -0.0152 -0.0065 -0.1173 -0.9613 -0.0705 -0.0883 -0.0889 -0.4903 -0.0985 -0.1035 -1.9198 -0.1007 -0.1725 -0.1111 -0.1161 -0.0909 -0.5067 -0.1010 -0.0868 -0.0778 -0.0843 -0.0848 -0.1253 -0.1147 -0.4285 -0.1427 -0.6263 -0.1104 -0.1404 -0.0869 -0.3433 -0.1323 -0.1251 -0.8127 -0.1193 -0.8327 -0.1144 -0.1432 -0.0657 -0.2624 -0.8597 -0.8460 -0.0900 -0.1618 -0.0713 -1.3263 -0.1339 -0.2491 -1.1691 -0.1424 -0.2081 -0.1376 -0.0969 -0.7488 -0.0833 -0.0725
S-72	public static double poly ( List<Double> xs, double x ) { double sum = 0; { int i = 0; while ( i < xs.size () ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; i += 1; } } return sum; }
T-72	public static double poly ( List<Double> xs, double x ) { double sum = 0; { int i = 0; while ( i < xs.size () ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; i += 1; } } return sum; }
H-72	-0.3146529793739319	public static double poly ( List<Double> xs, double x ) { double sum = 0; { int i = 0 ; while ( i < xs.size () ) { sum += xs.get ( i ) * ( i + 1 ) ; i += 1 ; } } return sum ; }
D-72	-0.3146529793739319	public static double poly ( List<Double> xs, double x ) { double sum = 0; { int i = 0 ; while ( i < xs.size () ) { sum += xs.get ( i ) * ( i + 1 ) ; i += 1 ; } } return sum ; }
P-72	-0.0873 -0.0520 -0.1034 -0.0309 -0.1093 -0.4090 -0.2967 -0.0353 -0.1906 -0.0870 -1.6192 -0.1486 -0.1347 -0.0935 -0.0823 -0.1066 -0.0740 -0.0862 -1.7050 -0.2788 -0.1400 -0.1036 -0.0937 -1.7338 -0.1175 -0.1540 -0.1171 -0.1592 -0.0948 -0.2331 -0.0971 -0.1676 -0.0690 -0.0885 -0.0816 -0.1684 -0.0768 -0.1813 -0.1370 -0.2818 -0.1139 -0.1596 -0.1188 -0.1271 -1.5921 -1.8510 -1.0813 -0.1757 -0.0906 -0.3883 -0.4385 -0.1841 -1.2800 -0.1096 -0.4808 -0.3208 -0.1483 -0.0940 -0.2611 -0.0821 -0.0701
S-2	public static boolean is_palindrome ( String text ) { { int i = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true; i += 1; } } return false; }
T-2	public static boolean is_palindrome ( String text ) { { int i = 0; while ( i < text.length () ) { if ( text.charAt ( i ) != text.charAt ( text.length () - i - 1 ) ) return false; i += 1; } } return true; }
H-2	-0.24339887499809265	public static boolean is_palindrome ( String text ) { int i = 0 ; while ( i < text.length () ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true ; i += 1 ; } return false ; }
D-2	-0.24339887499809265	public static boolean is_palindrome ( String text ) { int i = 0 ; while ( i < text.length () ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true ; i += 1 ; } return false ; }
P-2	-0.0995 -0.0550 -0.0873 -0.0684 -0.0916 -0.0161 -0.0055 -0.1153 -0.9427 -0.0539 -0.0889 -0.0892 -0.5441 -0.1107 -0.1009 -1.7359 -0.0972 -0.1762 -0.1125 -0.1366 -0.0974 -0.3441 -0.1037 -0.0965 -0.0833 -0.0854 -0.0870 -0.1345 -0.1106 -0.1805 -0.1443 -0.7493 -0.1104 -0.1478 -0.0874 -0.3766 -0.0639 -0.1217 -0.9273 -0.1186 -0.4658 -0.1161 -0.1506 -0.0669 -0.4142 -0.1859 -0.0898 -0.0920 -0.2186 -0.0757 -1.2011 -0.1462 -0.2058 -1.4688 -0.1498 -0.2024 -0.1256 -0.0426 -0.3761 -0.0800 -0.0757
S-51	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; { int i = 2; while ( i < n ) { if ( n % i == 0 ) return x; i += 1; } } return y; }
T-51	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; { int i = 2; while ( i < n ) { if ( n % i == 0 ) return y; i += 1; } } return x; }
H-51	-0.3032975196838379	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; { int i = 2 ; while ( i < n ) { if ( n % i == 0 ) return x; i += 1 ; } } return y ; }
D-51	-0.3032975196838379	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; { int i = 2 ; while ( i < n ) { if ( n % i == 0 ) return x; i += 1 ; } } return y ; }
P-51	-0.1000 -0.0445 -0.1167 -0.1414 -0.0841 -0.0533 -0.0928 -0.0429 -0.1078 -0.0931 -0.0960 -1.4803 -0.0975 -0.1567 -1.5086 -0.0689 -0.0844 -0.0838 -0.0860 -0.2963 -0.1136 -0.1203 -0.1215 -0.3350 -0.0903 -0.1127 -0.2041 -1.4491 -0.7152 -0.1310 -0.1062 -0.1050 -2.5021 -0.2968 -0.0914 -0.1110 -0.1005 -0.1517 -0.1130 -0.0970 -0.0886 -0.1612 -0.1132 -0.2238 -0.3225 -0.1234 -0.2592 -0.1187 -0.0883 -0.1273 -0.2568 -1.0362 -0.1144 -0.1190 -1.8191 -0.2418 -0.1658 -0.2027 -0.1155 -0.1475 -1.1840 -0.0879 -0.0884
S-48	public static int add_even_at_odd ( int[] lst ) { int sum = 0; { int i = 0; while ( i < lst.length ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; i += 1; } } return sum; }
T-48	public static int add_even_at_odd ( int[] lst ) { int sum = 0; { int i = 1; while ( i < lst.length ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; i += 2; } } return sum; }
H-48	-0.33838802576065063	public static int add_even_at_odd ( int [] lst ) { int sum = 0; { int i = 0; while ( i < ( lst.length ) ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; i += 1 ; } } return sum ; }
D-48	-0.33838802576065063	public static int add_even_at_odd ( int [] lst ) { int sum = 0; { int i = 0; while ( i < ( lst.length ) ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; i += 1 ; } } return sum ; }
P-48	-0.1036 -0.0471 -0.1340 -0.0866 -0.1164 -0.0336 -0.0964 -0.0491 -0.1110 -0.0079 -0.1164 -0.1204 -1.9530 -0.0607 -0.0886 -0.0864 -0.1129 -0.0778 -0.0877 -1.5135 -0.5722 -0.1473 -0.1216 -0.0977 -1.8741 -0.1568 -0.1142 -0.2029 -0.1070 -1.3310 -0.1468 -0.0601 -0.0554 -0.1007 -0.0966 -0.0967 -0.1546 -0.1170 -0.4218 -1.0697 -0.4276 -0.3409 -0.4993 -0.0762 -0.1925 -0.1221 -0.0834 -0.2439 -0.0791 -0.1087 -0.6854 -0.2697 -2.6766 -0.1395 -0.1346 -2.1954 -0.2310 -0.3059 -0.1165 -0.1020 -0.1229 -0.2903 -0.0859 -0.0799
S-66	public static int smallest_change ( int[] arr ) { int result = 0; { int i = 0; while ( i < arr.length ) { if ( arr[i] != arr[arr.length - i] ) result += 1; i += 1; } } return result; }
T-66	public static int smallest_change ( int[] arr ) { int result = 0; { int i = 0; while ( i < arr.length / 2 ) { if ( arr[i] != arr[arr.length - i - 1] ) result += 1; i += 1; } } return result; }
H-66	-0.3579154312610626	public static int smallest_change ( int[] arr ) { int result = 0; { int i = 0 ; while ( i < arr.length ) { if ( arr[i] != arr[arr.length - i] ) result += 1 ; i += arr.length ; i += arr.length ; } } return result ; }
D-66	-0.3579154312610626	public static int smallest_change ( int[] arr ) { int result = 0; { int i = 0 ; while ( i < arr.length ) { if ( arr[i] != arr[arr.length - i] ) result += 1 ; i += arr.length ; i += arr.length ; } } return result ; }
P-66	-0.0906 -0.0477 -0.1158 -0.0301 -0.1011 -0.0369 -0.1193 -0.1068 -2.3308 -0.0475 -0.0849 -0.0900 -0.0957 -0.1050 -0.0851 -1.3614 -0.3809 -0.1483 -0.1161 -0.0965 -2.0646 -0.4594 -0.1787 -0.1159 -0.1818 -0.0936 -0.7436 -0.0562 -0.0900 -0.0900 -0.0918 -0.1885 -0.1175 -0.1957 -0.9074 -0.7065 -0.3096 -0.2527 -0.0897 -0.7369 -0.5613 -0.1018 -0.0811 -0.4128 -0.1687 -0.4916 -0.0935 -0.3904 -0.0948 -2.6459 -0.2954 -0.1363 -0.1370 -1.9650 -0.1608 -0.0978 -0.4653 -1.3429 -0.2536 -0.1959 -0.0831 -0.0807 -0.2785 -0.4068 -0.1639 -0.0999 -0.1096 -0.3337 -0.0793 -0.0659
S-49	public static int can_arrange ( int[] arr ) { int ind = 1; { int i = 0; while ( i < arr.length - 1 ) { if ( arr[i] < arr[i + 1] ) ind = i + 1; i++; } } return ind; }
T-49	public static int can_arrange ( int[] arr ) { int ind = -1; { int i = 1; while ( i < arr.length ) { if ( arr[i] < arr[i - 1] ) ind = i; i++; } } return ind; }
H-49	-0.3367130756378174	public static int can_arrange ( int[] arr ) { int ind = 1 ; { int i = 0; while ( i < arr.length ) { if ( arr[i] < arr[i + 1] ) ind = i + 1 ; i++; } } return ind ; }
D-49	-0.3367130756378174	public static int can_arrange ( int[] arr ) { int ind = 1 ; { int i = 0; while ( i < arr.length ) { if ( arr[i] < arr[i + 1] ) ind = i + 1 ; i++; } } return ind ; }
P-49	-0.0893 -0.0432 -0.1035 -0.0783 -0.1030 -0.1179 -0.1179 -0.1020 -2.2137 -0.0370 -0.0845 -0.0909 -0.1213 -0.0847 -0.0836 -1.8838 -0.2434 -1.9837 -0.1929 -0.0992 -0.0896 -1.4985 -0.1008 -0.1179 -0.1557 -0.0995 -0.4783 -0.0642 -0.0687 -0.1874 -0.0930 -0.1798 -0.1168 -0.1217 -0.4829 -0.3851 -0.2199 -0.1777 -0.0508 -0.2714 -0.1996 -0.2295 -1.6146 -0.0891 -0.1592 -0.1627 -0.1427 -0.1291 -1.9658 -0.2359 -0.1227 -0.7888 -0.1922 -0.1474 -0.1023 -0.1311 -0.4720 -0.0777 -0.0699
S-15	public static boolean is_prime ( int n ) { { int i = 2; while ( i < ( int ) Math.pow ( n, 0.5 ) + 1 ) { if ( n % i == 0 ) return false; i += 1; } } return true; }
T-15	public static boolean is_prime ( int n ) { { int i = 2; while ( i < ( int ) Math.pow ( n, 0.5 ) + 1 ) { if ( n % i == 0 ) return false; i += 1; } } return true; }
H-15	-0.3244715929031372	public static boolean is_prime ( int n ) { int i = 2; while ( i < ( int ) Math.pow ( n, 0.5 ) ) { if ( n % i == 0 ) return false; i += 1 ; } return true ; }
D-15	-0.3244715929031372	public static boolean is_prime ( int n ) { int i = 2; while ( i < ( int ) Math.pow ( n, 0.5 ) ) { if ( n % i == 0 ) return false; i += 1 ; } return true ; }
P-15	-0.0938 -0.0518 -0.0978 -0.0699 -0.0972 -0.0224 -0.1195 -0.0963 -0.0695 -0.0889 -0.0944 -0.8476 -0.1160 -0.1101 -1.8016 -0.1370 -0.1163 -0.1949 -0.1501 -0.1267 -0.2034 -0.1009 -3.2015 -0.0995 -0.0535 -0.1096 -0.0879 -1.1467 -0.0288 -0.1027 -0.5488 -0.0907 -0.1374 -0.1164 -0.1606 -0.3600 -0.1414 -0.2818 -0.1374 -0.0857 -0.1751 -0.1179 -1.3057 -0.1765 -0.1436 -1.5365 -0.1729 -0.1955 -0.2262 -0.1053 -1.1840 -0.0790 -0.0824
S-17	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int k = 0; while ( k < n ) { if ( n % k == 0 ) return false; k += 1; } } return true; }
T-17	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int k = 2; while ( k < n - 1 ) { if ( n % k == 0 ) return false; k += 1; } } return true; }
H-17	-0.24802395701408386	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int k = 0; while ( k < n ) { if ( n % k == 0 ) return false; k += 1 ; } } return true ; }
D-17	-0.24802395701408386	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int k = 0; while ( k < n ) { if ( n % k == 0 ) return false; k += 1 ; } } return true ; }
P-17	-0.0960 -0.0594 -0.0905 -0.0656 -0.0949 -0.0237 -0.1205 -0.0952 -0.0730 -0.0890 -0.0914 -0.2298 -0.1102 -0.0840 -0.1494 -0.1238 -0.0902 -0.1063 -0.0842 -1.0082 -0.8078 -0.1335 -0.1437 -0.0937 -1.5420 -0.1060 -0.1037 -0.1703 -0.1743 -0.1105 -0.0945 -0.0902 -0.1189 -0.1147 -0.1812 -0.2240 -0.1324 -0.4023 -0.1476 -0.0864 -0.1197 -0.0798 -1.0432 -0.1664 -0.1240 -1.8995 -0.1877 -0.2322 -0.3366 -0.1029 -0.0908 -0.9694 -0.0841 -0.0941
S-59	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; { int i = 2; while ( i < k ) { if ( k % i == 0 ) return false; i += 1; } } return true; }
T-59	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; { int i = 2; while ( i < k ) { if ( k % i == 0 ) return false; i += 1; } } return true; }
H-59	-0.25475427508354187	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; { int i = 2; while ( i < k ) { if ( k % i == 0 ) return false; i += 1 ; } } return true ; }
D-59	-0.25475427508354187	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; { int i = 2; while ( i < k ) { if ( k % i == 0 ) return false; i += 1 ; } } return true ; }
P-59	-0.0968 -0.0594 -0.0925 -0.0677 -0.0969 -0.0224 -0.1200 -0.0914 -0.1268 -0.0836 -0.0897 -0.2206 -0.1082 -0.1259 -0.1481 -0.1180 -0.0898 -0.1026 -0.0865 -1.0489 -0.7781 -0.1377 -0.0904 -0.1031 -1.6630 -0.1008 -0.1072 -0.1246 -0.1823 -0.1496 -0.0916 -0.0919 -0.1467 -0.1149 -0.3158 -0.2035 -0.1236 -0.2620 -0.1905 -0.0853 -0.1282 -0.0820 -0.9834 -0.1441 -0.1144 -2.0562 -0.1983 -0.1827 -0.3747 -0.0995 -0.0861 -1.0711 -0.0859 -0.0917
S-10	public static String change_base ( int x, int base ) { String result = ""; for ( ; x > 0; ) { result = result + x % base; x = x - x / base; } return result; }
T-10	public static String change_base ( int x, int base ) { String result = ""; for ( ; x > 0; ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-10	-0.3542781174182892	public static String change_base ( int x, int base ) { String result = ""; for ( ; x > 0 ; ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-10	-0.3542781174182892	public static String change_base ( int x, int base ) { String result = ""; for ( ; x > 0 ; ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-10	-0.0913 -0.0537 -2.1248 -0.0395 -0.0937 -0.0243 -0.1109 -0.1269 -0.1452 -1.5652 -0.1035 -0.0551 -0.0832 -0.0887 -1.9182 -0.0815 -0.0891 -1.9284 -0.1817 -0.1151 -0.2838 -0.1335 -0.4385 -1.3761 -0.1970 -1.1259 -0.0821 -0.1700 -0.1147 -0.1024 -0.0967 -0.2422 -0.1149 -0.0722 -1.0558 -0.1756 -0.1635 -0.1704 -0.1227 -0.2615 -0.1117 -0.0498 -0.6032 -0.1553 -0.1720 -0.1145 -0.4750 -0.0870 -0.0715
S-39	public static int modp ( int n, int p ) { int result = 1; { int i = 0; while ( i < n ) { result = 2 * result; i += 1; } } return result % p; }
T-39	public static int modp ( int n, int p ) { int result = 1; { int i = 0; while ( i < n ) { result = ( 2 * result ) % p; i += 1; } } return result; }
H-39	-0.277180016040802	public static int modp ( int n , int p ) { int result = 1 ; { int i = 0 ; while ( i < n ) { result = 2 * result ; i += 1 ; } } return result % p ; }
D-39	-0.277180016040802	public static int modp ( int n , int p ) { int result = 1 ; { int i = 0 ; while ( i < n ) { result = 2 * result ; i += 1 ; } } return result % p ; }
P-39	-0.0909 -0.0455 -0.1191 -0.0459 -0.0586 -0.1093 -0.1059 -0.0739 -1.3957 -0.1080 -0.0625 -0.0917 -0.0876 -0.1179 -0.0929 -0.1108 -1.0338 -0.5965 -0.9596 -0.1262 -0.1008 -0.0996 -1.9567 -0.1287 -0.1117 -0.1125 -0.1064 -0.1240 -0.1033 -0.0999 -0.0731 -0.1579 -0.2036 -0.2294 -0.0430 -0.0988 -1.0581 -0.0929 -0.1527 -1.5047 -0.2308 -0.2549 -0.1375 -0.1736 -0.1016 -0.0630 -0.0770 -0.6729 -0.0841 -0.0737
S-35	public static boolean is_prime ( int n ) { { int i = 2; while ( i < n ) { if ( n % i == 0 ) return false; i += 1; } } return true; }
T-35	public static boolean is_prime ( int n ) { { int i = 2; while ( i < n ) { if ( n % i == 0 ) return false; i += 1; } } return true; }
H-35	-0.28854241967201233	public static boolean is_prime ( int n ) { int i = 2; while ( i < n ) { if ( n % i == 0 ) return false; i += 1 ; } return true ; }
D-35	-0.28854241967201233	public static boolean is_prime ( int n ) { int i = 2; while ( i < n ) { if ( n % i == 0 ) return false; i += 1 ; } return true ; }
P-35	-0.0932 -0.0542 -0.0943 -0.0698 -0.0958 -0.0236 -0.1223 -0.0990 -0.0685 -0.0894 -0.0971 -1.0664 -0.1113 -0.1115 -2.0093 -0.1374 -0.1119 -0.1266 -0.1824 -0.1110 -0.0924 -0.0897 -0.1601 -0.1145 -0.1624 -0.2818 -0.1349 -0.2990 -0.1370 -0.0847 -0.1886 -0.1201 -1.5013 -0.1601 -0.1451 -2.0713 -0.1983 -0.2389 -0.2303 -0.0985 -0.8385 -0.0864 -0.0983
S-94	public static int greatest_common_divisor ( int a, int b ) { for ( ; b > 0; ) { a = b; b = a % b; } return a; }
T-94	public static int greatest_common_divisor ( int a, int b ) { for ( ; b > 0; ) { int tmp = a; a = b; b = tmp % b; } return a; }
H-94	-0.2940337657928467	public static int greatest_common_divisor ( int a, int b ) { for ( ; b > 0; ) { a = b ; b = a % b ; } return a ; }
D-94	-0.2940337657928467	public static int greatest_common_divisor ( int a, int b ) { for ( ; b > 0; ) { a = b ; b = a % b ; } return a ; }
P-94	-0.1070 -0.0508 -0.1312 -0.0122 -0.1044 -0.0089 -0.0836 -0.0316 -0.0138 -0.1087 -0.0959 -0.1219 -1.5704 -0.0911 -0.0811 -0.0820 -0.0913 -0.4675 -0.1172 -0.3190 -0.1280 -0.3569 -1.8232 -0.0935 -0.0792 -0.4302 -0.1767 -0.3408 -1.6641 -0.0969 -0.1450 -0.3018 -0.0845 -0.1009 -0.9405 -0.2193 -0.2050 -0.3066 -0.6867 -0.0960 -0.0899
S-0	public static boolean is_simple_power ( int x, int n ) { int power = 1; for ( ; power < x; ) { power *= n; } return power == x; }
T-0	public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int power = 1; for ( ; power < x; ) { power *= n; } return power == x; }
H-0	-0.27402520179748535	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; for ( ; power < x ; ) { power *= n ; } return power == x ; }
D-0	-0.27402520179748535	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; for ( ; power < x ; ) { power *= n ; } return power == x ; }
P-0	-0.1026 -0.0491 -0.1178 -0.0640 -0.0929 -0.0398 -0.0879 -0.0427 -0.1086 -0.1038 -0.1764 -1.7067 -0.0879 -0.0842 -0.0860 -0.0854 -0.1304 -0.0928 -0.0996 -0.9477 -0.2842 -0.1456 -0.1130 -0.1440 -0.1603 -0.4439 -0.3295 -1.3040 -0.1358 -0.0906 -0.1173 -0.0282 -0.0865 -1.6508 -0.1033 -0.2381 -0.1649 -0.1374 -0.3178 -1.0461 -0.0838 -0.0776
S-33	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { { int j = 0; while ( j < l2.length ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; j += 1; } } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-33	public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { { int j = 0; while ( j < l2.length ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; j += 1; } } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-33	-0.26761478185653687	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { { int j = 0; while ( j < l2.length ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; j += 1 ; } } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1 ; } Arrays.sort ( result ) ; return result ; }
D-33	-0.26761478185653687	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { { int j = 0; while ( j < l2.length ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; j += 1 ; } } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1 ; } Arrays.sort ( result ) ; return result ; }
P-33	-0.0890 -0.0427 -0.1171 -1.8091 -0.0436 -0.1106 -0.0926 -1.5666 -0.0575 -0.3399 -0.0754 -1.2819 -0.0586 -0.0527 -0.0761 -0.0929 -2.2024 -0.2760 -0.0470 -0.1595 -0.0611 -0.0969 -0.0558 -1.2035 -0.2060 -0.0445 -0.1486 -0.0709 -0.0895 -0.3564 -0.1130 -0.0595 -0.0739 -0.0828 -1.1067 -0.0762 -0.0777 -0.0974 -0.0490 -0.0732 -0.4046 -0.0659 -0.0801 -0.1795 -0.0773 -0.0830 -0.4116 -0.0925 -0.0893 -0.1044 -1.0008 -0.0913 -0.1059 -0.1058 -0.0944 -0.0723 -0.0258 -0.0620 -0.0903 -0.0810 -0.1436 -0.1115 -0.0687 -0.5222 -0.3258 -0.2708 -0.1649 -0.0349 -0.3373 -0.1122 -0.1630 -0.0848 -0.1949 -0.1141 -0.1317 -0.1130 -0.0571 -0.3907 -0.1589 -0.2628 -0.1085 -0.1088 -0.0636 -0.0820 -2.3660 -0.1114 -0.1353 -0.0862 -0.2412 -0.0830 -2.2445 -0.0634 -0.0888 -0.0655 -0.0695 -0.3733 -0.0338 -0.1026 -0.0992 -0.0698 -0.2575 -0.0701 -0.0606 -0.1000 -1.1781 -0.0975 -0.1137 -1.4365 -0.0753 -0.0650 -0.0888 -0.0940 -0.0984 -0.0672 -0.6649 -0.2394 -0.1534 -0.1032 -0.0861 -1.1685 -0.0352 -0.0658 -0.9710 -0.3253 -0.0827 -1.4372 -0.0873 -0.0471 -0.1160 -0.0703 -0.0942 -0.0933 -0.0914 -0.0681 -0.2958 -0.0829 -0.0706
S-28	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; { int i = 0; while ( i < l1.length ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } i += 1; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-28	public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; { int i = 0; while ( i < l1.length ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } i += 1; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-28	-0.2786765396595001	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; { int i = 0; while ( i < l1.length ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; i += 1 ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1 ; } Arrays.sort ( result ) ; return result ; }
D-28	-0.2786765396595001	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; { int i = 0; while ( i < l1.length ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; i += 1 ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1 ; } Arrays.sort ( result ) ; return result ; }
P-28	-0.0886 -0.0421 -0.1174 -1.8059 -0.0433 -0.1104 -0.0921 -1.5486 -0.0592 -0.3398 -0.0762 -1.2599 -0.0609 -0.0607 -0.0762 -0.0922 -2.1570 -0.2678 -0.0457 -0.1551 -0.0639 -0.0943 -0.0558 -1.1752 -0.1805 -0.0429 -0.1504 -0.0709 -0.0864 -1.2328 -0.0801 -0.1041 -0.0971 -1.1641 -0.1218 -0.1100 -0.0799 -0.0814 -0.0852 -0.0448 -0.0756 -0.0947 -0.0892 -0.2678 -0.1178 -0.0702 -0.0762 -0.0899 -0.8652 -0.0845 -0.0759 -0.0696 -0.0236 -0.0584 -0.7548 -0.0702 -0.1101 -0.1670 -0.0781 -0.0922 -0.1316 -0.1131 -0.0666 -0.4654 -0.3392 -0.2748 -0.1814 -0.0349 -0.3763 -0.1302 -0.1767 -0.0851 -0.1829 -0.1073 -0.1358 -0.1144 -0.0539 -0.3666 -0.1716 -0.2587 -0.1138 -0.1014 -0.9381 -0.1033 -2.4784 -0.0949 -0.0940 -0.1572 -0.2201 -2.0143 -0.0727 -0.0927 -0.0645 -0.0691 -0.3657 -0.0322 -0.1022 -0.0984 -0.0679 -0.2380 -0.0700 -0.0575 -0.0986 -1.1964 -0.0961 -0.1123 -1.3727 -0.0746 -0.0629 -0.0888 -0.0939 -0.0995 -0.0635 -0.5841 -0.2298 -0.1514 -0.1046 -0.0856 -1.2241 -0.0354 -0.0640 -0.6943 -0.2431 -0.0771 -1.4864 -0.0870 -0.0468 -0.1168 -0.0710 -0.0924 -0.0929 -0.0953 -0.0713 -0.3001 -0.0790 -0.1435
S-70	public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; for ( ; number > 0; ) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase () ; }
T-70	public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; for ( ; number > 0; ) { int div = ( int ) ( number / num[i] ) ; while ( div > 0 ) { result += sym[i]; div -= 1; } number %= num[i]; i -= 1; } return result.toLowerCase () ; }
H-70	-0.35532382130622864	public static java.lang.String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; java.lang.String result = new java.lang.String [] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12 ; for ( ; number > 0; ) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase () ; }
D-70	-0.35532382130622864	public static java.lang.String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; java.lang.String result = new java.lang.String [] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12 ; for ( ; number > 0; ) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase () ; }
P-70	-0.0958 -0.0528 -5.1444 -0.0916 -0.0418 -0.0992 -0.0869 -0.1097 -0.1122 -0.0611 -0.0877 -0.0182 -0.0988 -0.0068 -0.0390 -0.1279 -0.1991 -0.0618 -0.0829 -0.0893 -0.4008 -2.5504 -0.0325 -0.0871 -0.0646 -0.0868 -1.4848 -0.0801 -0.6958 -0.1621 -0.0852 -0.2520 -0.1306 -0.0883 -0.0516 -0.0741 -0.1637 -0.2128 -0.0427 -0.0311 -0.0540 -0.1730 -0.0296 -0.2220 -1.9479 -0.0565 -0.0384 -0.0885 -0.0952 -1.0268 -0.0950 -0.4932 -0.1242 -0.0720 -0.0403 -0.0847 -0.0183 -0.9397 -0.0557 -0.0899 -0.0439 -1.3960 -0.0937 -0.0132 -1.1576 -0.1092 -0.0374 -1.1830 -0.1128 -0.0174 -1.2980 -0.1019 -0.0361 -1.0674 -0.1052 -0.0410 -0.0614 -1.3985 -0.1048 -0.3635 -1.6179 -0.1021 -0.0340 -0.0502 -1.3593 -0.1063 -0.0927 -1.4838 -0.1071 -0.0459 -1.4815 -0.0937 -0.0455 -1.4341 -0.0973 -0.0165 -1.3052 -0.0925 -0.0561 -0.0628 -0.3181 -0.2444 -0.0885 -0.0924 -0.0534 -1.4230 -1.1095 -0.1201 -0.0769 -0.0735 -0.1511 -0.4520 -0.0791 -0.0939 -0.0918 -0.0523 -0.1376 -0.2282 -0.1669 -1.7933 -0.2302 -0.1078 -0.0284 -0.0336 -0.3157 -0.1496 -1.7581 -0.0708 -0.0112 -0.5902 -0.0819 -0.1064 -0.0681 -0.1963 -0.8077 -0.0823 -0.0817 -0.0852 -0.0833
S-52	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; { int i = 4; while ( i < n + 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; i += 1; } } return result.get ( result.size () - 1 ) ; }
T-52	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; { int i = 4; while ( i < n + 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; i += 1; } } return result.get ( result.size () - 1 ) ; }
H-52	-0.1698073297739029	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; { int i = 4 ; while ( i < n ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; i += 1 ; } } return result.get ( result.size () - 1 ) ; }
D-52	-0.1698073297739029	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; { int i = 4 ; while ( i < n ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; i += 1 ; } } return result.get ( result.size () - 1 ) ; }
P-52	-0.0860 -0.0488 -0.1207 -0.0189 -0.0385 -0.1131 -0.0909 -0.0656 -0.0836 -0.0890 -1.7820 -0.3090 -0.0561 -0.1502 -0.0804 -0.0894 -0.0635 -1.3539 -0.2828 -0.0506 -0.1277 -0.0680 -0.0782 -0.1919 -0.1188 -0.1164 -0.0973 -0.1716 -0.1048 -0.0885 -0.1040 -0.0983 -0.1142 -0.1003 -0.2728 -0.0955 -0.0881 -0.1132 -0.0957 -0.1050 -0.0995 -0.9255 -0.0852 -0.0907 -0.1059 -0.0998 -0.0973 -0.0967 -0.1719 -0.0906 -0.0889 -0.1888 -0.1053 -0.0731 -0.1170 -0.0641 -0.0864 -0.0907 -0.0969 -0.1133 -0.1192 -0.0988 -0.0831 -0.0884 -0.0855 -0.3357 -0.1155 -0.1112 -0.1013 -0.9181 -0.1516 -0.1011 -0.1041 -0.1014 -0.1550 -0.1044 -0.2231 -0.0754 -0.1307 -0.1013 -0.1448 -0.1032 -0.1180 -0.0939 -0.1201 -0.1093 -0.1557 -0.0905 -0.1272 -0.1831 -0.0912 -0.1119 -0.1135 -0.1897 -0.0911 -0.8336 -0.1012 -0.0911 -0.1204 -0.1097 -0.1011 -0.0863 -0.5130 -0.0977 -0.0935 -0.1329 -0.1114 -0.0478 -0.0849 -0.0882 -0.0813 -0.0928 -0.0963 -2.2167 -0.1175 -0.0799 -0.0727 -0.0875 -0.0931 -0.0971 -0.1088 -0.1002 -0.0867 -0.0965 -0.0743 -0.0667 -0.4169 -0.1074 -0.0870 -0.0984 -0.0787 -0.0868
S-76	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; { int i = 0; while ( i < txt.length () ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; i++; } } String[] result = { Integer.toString ( count ) }; return result; } }
T-76	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; { int i = 0; while ( i < txt.length () ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; i++; } } String[] result = { Integer.toString ( count ) }; return result; } }
H-76	-0.1979733109474182	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; { int i = 0; while ( i < txt.length () ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; i++; } } return txt.split ( " " ) ; } }
D-76	-0.1979733109474182	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; { int i = 0; while ( i < txt.length () ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; i++; } } return txt.split ( " " ) ; } }
P-76	-0.0887 -0.0534 -0.8281 -1.8168 -0.0417 -0.0951 -0.0322 -0.1092 -0.7297 -0.0330 -0.0889 -0.0903 -0.2091 -0.1133 -0.0532 -0.1507 -0.7833 -0.1066 -0.1035 -0.0829 -0.0960 -0.0885 -0.0965 -0.0801 -0.0367 -0.1001 -0.2147 -0.1199 -0.0772 -0.0888 -0.0946 -0.0882 -0.0832 -0.1015 -0.1152 -0.1050 -0.0375 -0.1221 -0.5919 -0.1083 -0.0216 -0.0869 -0.0920 -0.0817 -0.0756 -0.0403 -0.0999 -0.1664 -0.1109 -0.0205 -0.0864 -0.0948 -0.0819 -0.0884 -0.1283 -0.1325 -0.0448 -0.0987 -0.5590 -0.2296 -0.1125 -0.0929 -0.1009 -0.7265 -0.1028 -0.1058 -0.1142 -0.1133 -0.1239 -0.0915 -0.0948 -0.0693 -0.0843 -0.0693 -0.1222 -0.0717 -0.0841 -0.0281 -0.1035 -0.6698 -0.1004 -0.1020 -0.0904 -0.0852 -0.1604 -0.1116 -0.4939 -0.0910 -0.0717 -0.0314 -0.1132 -0.0586 -0.0843 -1.2229 -0.1206 -0.1472 -0.0604 -0.1433 -0.0389 -0.0459 -0.0573 -0.0968 -0.0999 -0.0572 -0.0937 -0.2421 -0.1178 -0.0910 -0.0848 -0.2951 -0.0899 -0.1739 -0.1140 -0.0986 -2.3536 -1.0088 -0.1023 -0.3603 -0.1739 -1.7517 -0.1104 -0.1121 -0.1454 -0.0999 -0.1051 -0.0584
S-61	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; { int i = 0; while ( i < s.length () ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } i++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-61	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; { int i = 0; while ( i < s.length () ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } i++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-61	-0.1999920904636383	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; { int i = 0; while ( i < s.length () ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } i++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-61	-0.1999920904636383	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; { int i = 0; while ( i < s.length () ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } i++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-61	-0.0964 -0.0498 -1.3845 -0.2651 -0.0685 -0.1422 -0.0325 -0.0941 -0.0552 -0.1190 -1.1854 -0.2867 -0.0800 -0.1822 -0.0443 -0.0828 -0.0841 -1.5374 -0.2516 -0.0709 -0.1504 -0.0698 -0.0847 -0.0636 -0.8542 -0.2874 -0.0604 -0.0843 -0.2875 -0.1073 -2.2475 -0.1004 -0.0614 -0.0467 -0.0910 -0.0818 -0.0828 -0.0979 -0.0987 -0.9041 -0.4149 -0.1081 -0.1024 -0.1072 -1.0153 -0.1276 -0.1104 -0.1230 -0.1062 -0.3052 -0.1019 -0.1054 -0.0680 -0.0843 -0.0813 -0.1199 -0.0573 -0.0947 -0.0765 -0.1198 -1.1425 -0.1029 -0.1077 -0.0950 -0.2920 -0.1512 -0.1087 -0.1295 -0.1168 -0.1148 -0.4618 -0.0483 -0.1708 -0.1149 -0.0882 -0.0858 -0.0828 -0.4735 -0.2225 -0.1340 -0.5018 -0.1179 -0.3002 -0.1343 -0.1902 -0.2204 -0.1112 -0.1508 -0.0470 -0.0566 -0.0587 -0.0504 -0.0522 -0.0961 -0.1391 -0.1087 -0.2080 -0.1002 -0.1308 -0.1141 -0.0509 -0.1197 -0.1924 -0.1020 -0.2598 -0.1111 -0.1869 -0.1453 -0.1511 -0.0975 -0.2084 -0.1039 -0.1037 -0.0728 -0.0857 -0.1288 -0.1025 -0.1653 -0.1089 -0.0876 -0.0197 -0.0695 -0.1133 -0.0861 -0.1044 -0.0809 -0.0810 -0.1548 -0.0876 -0.0813
S-63	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; { int i = 0; while ( i < num_string.length () ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; i++; } } if ( sum > 0 ) count++; } return count; }
T-63	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; { int i = 0; while ( i < num_string.length () ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; i++; } } if ( sum > 0 ) count++; } return count; }
H-63	-0.1797802448272705	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; { int i = 0; while ( i < num_string.length () ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; i++; } } if ( sum > 0 ) count++; } return count ; }
D-63	-0.1797802448272705	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; { int i = 0; while ( i < num_string.length () ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; i++; } } if ( sum > 0 ) count++; } return count ; }
P-63	-0.0893 -0.0430 -0.1080 -0.0766 -0.0969 -0.0773 -0.1195 -1.1852 -0.2364 -0.0380 -0.2095 -0.0554 -0.0866 -0.0892 -0.1062 -0.1423 -0.0906 -0.7544 -0.2297 -0.1093 -0.0766 -0.0828 -0.0600 -0.0640 -0.0837 -0.0832 -0.3429 -0.0815 -0.1030 -0.1154 -0.1107 -0.5546 -0.1484 -0.1101 -0.0906 -0.0790 -0.1201 -0.0102 -0.5596 -1.0109 -0.0640 -0.0850 -0.0407 -0.0790 -0.5178 -0.1027 -1.1165 -0.1092 -0.0864 -0.0827 -0.0906 -0.1259 -0.0734 -0.1008 -0.6333 -0.1340 -0.1098 -0.1087 -0.0955 -0.9231 -0.1090 -0.1091 -0.1886 -0.0935 -0.1256 -0.1079 -0.0544 -0.1016 -0.0964 -0.0716 -0.0836 -0.0812 -0.1444 -0.1184 -0.4009 -0.1249 -0.2011 -0.1431 -0.0813 -0.1203 -0.1400 -0.0829 -0.1190 -0.0945 -0.0680 -0.1030 -0.0718 -0.0999 -0.6494 -0.1052 -0.1094 -0.0934 -0.1987 -0.1880 -0.1538 -0.0919 -0.1227 -0.0640 -0.0859 -0.0969 -0.0681 -0.0945 -0.9242 -0.0982 -0.0985 -0.0908 -0.1524 -0.1745 -0.2014 -0.0893 -0.1829 -0.1253 -0.1116 -0.1260 -0.1197 -0.1070 -0.1402 -0.1046 -0.0936 -0.1338 -0.5447 -0.0869 -0.0838 -0.1482 -0.7615 -0.0879 -0.0769
S-73	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; for ( ; num > 0; ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
T-73	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; for ( ; num > 0; ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; }
H-73	-0.18947246670722961	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; for ( ; num > 0; ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-73	-0.18947246670722961	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; for ( ; num > 0; ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-73	-0.1017 -0.0561 -1.5534 -0.3211 -0.0509 -0.1532 -0.0266 -0.0844 -0.0616 -0.1126 -1.3659 -0.2423 -0.0473 -0.1556 -0.1262 -0.0816 -0.0857 -1.4747 -0.2757 -0.0549 -0.1555 -0.1282 -0.0857 -0.0653 -1.2892 -0.2452 -0.0585 -0.1386 -0.0642 -0.0818 -0.2179 -0.1082 -0.0673 -0.0890 -0.0732 -0.0933 -0.0933 -0.0877 -0.1217 -0.0660 -0.0821 -0.0677 -0.6101 -0.0856 -0.0597 -0.1144 -0.0236 -0.0774 -0.0901 -1.0572 -0.0955 -0.1168 -0.0638 -0.0898 -0.1890 -0.2954 -0.0789 -0.0978 -0.1743 -0.0491 -0.0898 -0.0276 -0.0881 -0.0418 -0.0573 -0.1713 -0.1208 -0.1091 -0.2532 -0.0616 -0.0937 -0.0300 -0.1493 -0.0798 -0.0876 -0.0783 -0.0778 -0.0862 -0.1095 -0.0847 -0.1019 -0.0315 -0.0717 -0.3981 -1.3861 -0.0627 -0.0650 -0.0723 -0.0869 -0.0263 -0.1879 -0.0825 -0.1121 -0.1250 -0.1854 -0.1020 -0.0375 -0.0965 -0.1126 -0.1090 -0.1541 -0.2558 -0.1186 -0.1411 -0.1033 -0.0876 -0.1034 -0.1287 -1.1936 -0.1674 -0.1804 -0.0853 -0.0604
S-11	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l; Arrays.sort ( sorted ) ; { int i = 0; while ( i < l.length ) { reverse_sorted[i] = sorted[l.length - i - 1]; i += 1; } } if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-11	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; { int i = 0; while ( i < l.length ) { reverse_sorted[i] = sorted[l.length - i - 1]; i += 1; } } if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-11	-0.3822546601295471	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l ; Arrays.sort ( sorted ) ; { int i = 0; while ( i < l.length ) { reverse_sorted[i] = sorted[l.length - i - 1]; i += 1; } } if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false; }
D-11	-0.3822546601295471	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l ; Arrays.sort ( sorted ) ; { int i = 0; while ( i < l.length ) { reverse_sorted[i] = sorted[l.length - i - 1]; i += 1; } } if ( ! ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) ) return true; return false; }
P-11	-0.0930 -0.0490 -0.1021 -0.0298 -0.0271 -0.1220 -0.0992 -2.1594 -0.0738 -0.0874 -0.0851 -0.1197 -2.7676 -0.0682 -0.0901 -0.0714 -0.0746 -0.4534 -0.1438 -0.0965 -0.0757 -1.9183 -0.0919 -2.2052 -0.0421 -0.0807 -0.0943 -0.0808 -0.0630 -0.0748 -0.2702 -0.1002 -0.0922 -0.0658 -1.9541 -0.1602 -0.1238 -0.0858 -1.2619 -1.2369 -0.0919 -0.0335 -0.1159 -0.1084 -0.0986 -0.0902 -0.8095 -0.1018 -0.1139 -0.1102 -1.4866 -0.0820 -0.1139 -0.1261 -0.0963 -0.2007 -0.0874 -0.0803 -0.0942 -0.0778 -0.1292 -0.0969 -0.1399 -0.8175 -0.5330 -0.2279 -0.1074 -0.1756 -0.3558 -0.1100 -0.0912 -0.0524 -0.1565 -0.1376 -0.9053 -0.2184 -1.5807 -0.0800 -0.0814 -2.3520 -0.0960 -0.1102 -0.2342 -0.1193 -1.4236 -0.1284 -1.8050 -0.0966 -1.5128 -0.1195 -0.1051 -0.8334 -0.1400 -0.0897 -0.6685 -1.5747 -0.0947 -1.3757 -0.1168 -0.0895 -0.5604 -0.0324 -0.0958 -0.1141 -0.0847 -0.0947 -0.1321 -0.1113 -0.3885 -0.8416 -0.0873 -0.0508 -1.1297 -0.0750 -0.0681
S-81	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { { int i = 0; while ( i < array.length / 2 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; i += 1; } } return array; } }
T-81	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { { int i = 0; while ( i < array.length / 2 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; i += 1; } } return array; } }
H-81	-0.28660619258880615	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { { int i = 0; while ( i < array.length ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; i += 1 ; } } return array ; } }
D-81	-0.28660619258880615	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { { int i = 0; while ( i < array.length ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; i += 1 ; } } return array ; } }
P-81	-0.0953 -0.0391 -0.1027 -1.7402 -0.0401 -0.0894 -0.0491 -0.1142 -0.0837 -1.6145 -0.0503 -0.0839 -0.0870 -0.1246 -0.1126 -0.1053 -0.1237 -0.1074 -0.1410 -0.0940 -0.0810 -0.0974 -0.0608 -0.7420 -1.9185 -0.0884 -0.0312 -0.1115 -0.0526 -0.0952 -0.0938 -0.1627 -0.1109 -0.1692 -0.1674 -0.7807 -0.0961 -0.0827 -0.2797 -0.1237 -0.0994 -0.0817 -0.2199 -0.9290 -0.0932 -0.1474 -0.0707 -0.1318 -0.2365 -0.0835 -0.0775 -0.0631 -1.0004 -0.0864 -0.1802 -0.3486 -0.2984 -0.1234 -0.1129 -1.8738 -0.0942 -0.1097 -0.2181 -0.1526 -0.6507 -0.0718 -0.0873 -0.5089 -0.0792 -0.1308 -0.5141 -0.2385 -0.1652 -0.1001 -0.0541 -0.3342 -0.1764 -0.0917 -0.0695 -0.1284 -0.1244 -0.2993 -0.3048 -1.3043 -0.0809 -0.2322 -0.1492 -0.0923 -0.0592 -0.0963 -0.0839 -0.1949 -0.7716 -0.1122 -0.0545 -0.2617 -0.1590 -1.7294 -0.0851 -0.0857 -2.5573 -0.2722 -0.0936 -0.1178 -0.1575 -0.0602 -1.1065 -0.0933 -0.1350 -0.0757
S-69	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; { int i = 0; while ( i < arr.length ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; i++; } } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-69	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; { int i = 0; while ( i < arr.length ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; i++; } } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-69	-0.2577036917209625	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; { int i = 0; while ( i < arr.length ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; i++; } } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum ; }
D-69	-0.2577036917209625	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; { int i = 0; while ( i < arr.length ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; i++; } } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum ; }
P-69	-0.0914 -0.0463 -0.1164 -0.0552 -0.0868 -0.0260 -0.0613 -0.1118 -0.1049 -1.7075 -0.0509 -0.0839 -0.0882 -0.5813 -0.1095 -0.0799 -0.1342 -0.0931 -0.1401 -0.1021 -0.0830 -0.0629 -0.0276 -0.7720 -0.1182 -0.1291 -0.0925 -1.6036 -0.4929 -0.1074 -0.1320 -0.0903 -1.1317 -0.0847 -0.1056 -0.1047 -0.0859 -0.2431 -0.0791 -0.0913 -0.0895 -0.0843 -0.1858 -0.1145 -0.1138 -0.6488 -0.2872 -0.1970 -0.1338 -0.1138 -0.0847 -0.1979 -0.2206 -1.2006 -0.0920 -0.0916 -0.1056 -0.0769 -0.3631 -0.1705 -0.1389 -0.1216 -0.1115 -0.0829 -0.1355 -0.0247 -1.0206 -0.1089 -0.4709 -0.2081 -0.1429 -0.1421 -0.0641 -0.0865 -1.2848 -0.1345 -0.1068 -0.0800 -0.0887 -0.0862 -1.2572 -0.1077 -0.0742 -0.1402 -0.0900 -0.0739 -0.8974 -0.0881 -0.7982 -0.0791 -0.0949 -0.1873 -0.0514 -2.9450 -0.0975 -0.0567 -0.1070 -0.0758 -0.7715 -0.2644 -0.3004 -0.1015 -0.1023 -0.0933 -0.1680 -0.2407 -0.0308 -0.1422 -0.2952 -0.0771 -0.0754
S-24	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; { int i = 0; while ( i < arr.length ) { sum += Math.abs ( arr[i] ) ; i++; } } return prod * sum; }
T-24	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; { int i = 0; while ( i < arr.length ) { sum += Math.abs ( arr[i] ) ; i++; } } return prod * sum; }
H-24	-0.2547979950904846	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; { int i = 0; while ( i < arr.length ) { sum += Math.abs ( arr[i] ) ; i++; } } return prod * sum ; }
D-24	-0.2547979950904846	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; { int i = 0; while ( i < arr.length ) { sum += Math.abs ( arr[i] ) ; i++; } } return prod * sum ; }
P-24	-0.0904 -0.0460 -0.1194 -0.0576 -0.0863 -0.0279 -0.0616 -0.1119 -0.1066 -1.7079 -0.0508 -0.0831 -0.0872 -0.6196 -0.1107 -0.0818 -0.1320 -0.0939 -0.1317 -0.0981 -0.0828 -0.0618 -0.0332 -0.9766 -0.1235 -0.1231 -0.0914 -1.8780 -0.2907 -0.1074 -0.0776 -0.0969 -0.0763 -1.1756 -0.0889 -0.0770 -0.2138 -0.0850 -0.0766 -0.6866 -0.0823 -0.4106 -0.0763 -0.0902 -0.1747 -0.1154 -0.1182 -0.6393 -0.2654 -0.1764 -0.1281 -0.1114 -0.0837 -0.1992 -0.1842 -1.0547 -0.0984 -0.0811 -0.1068 -0.0743 -0.3586 -0.1565 -0.1275 -0.1185 -0.1082 -0.0798 -0.1236 -0.0190 -0.9036 -0.1071 -0.1504 -0.0626 -0.0957 -0.9992 -0.2514 -0.1776 -0.1340 -0.0994 -1.3825 -0.0859 -0.1107 -0.1787 -0.1249 -0.1955 -0.0801 -0.0751 -0.0968 -0.0756 -0.1386 -0.0549 -3.2492 -0.0957 -0.0581 -0.1041 -0.0761 -0.6578 -0.2888 -0.2878 -0.1000 -0.1053 -0.1075 -0.6402 -0.0963 -0.0992 -0.1446 -0.2147 -0.0298 -0.1361 -0.3631 -0.0798 -0.0782
S-38	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; { int i = 2; while ( i < n - 1 ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; i--; } } return sequence; }
T-38	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; { int i = 2; while ( i < n + 1 ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; i++; } } return sequence; }
H-38	-0.289853572845459	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { return sequence; } sequence[0] = 1; sequence[1] = -3; { int i = 2; while ( i < n ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; i--; } } return sequence; }
D-38	-0.289853572845459	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { return sequence; } sequence[0] = 1; sequence[1] = -3; { int i = 2; while ( i < n ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; i--; } } return sequence; }
P-38	-0.0906 -0.0452 -0.1283 -2.1795 -0.0297 -0.1102 -0.0948 -0.0777 -0.0843 -0.0927 -0.1433 -2.8719 -0.0791 -0.0937 -0.0733 -0.0762 -0.3781 -0.1817 -0.0834 -0.2173 -1.1658 -0.1227 -0.1184 -0.0874 -0.1245 -0.1193 -0.0812 -0.1023 -2.1761 -0.1332 -1.2520 -0.0915 -0.4939 -0.7274 -0.0936 -1.7338 -0.1156 -0.4565 -0.0823 -0.1713 -0.8783 -0.1460 -0.1166 -0.1041 -0.1133 -1.2039 -0.1110 -0.1186 -0.1293 -0.1597 -0.1309 -0.3884 -0.0900 -0.1558 -0.1278 -0.1578 -0.1928 -0.0472 -0.1050 -0.0894 -0.0813 -0.1947 -0.4569 -0.1637 -0.1789 -0.1162 -0.1385 -0.1798 -0.0882 -0.2529 -0.8266 -0.0823 -0.1570 -0.2921 -0.1228 -0.1403 -0.1037 -0.1848 -0.3162 -0.1142 -0.1608 -0.9997 -0.1575 -0.1271 -0.1599 -0.0953 -0.1425 -0.0487 -0.2349 -0.1362 -0.1350 -0.1366 -0.0934 -0.0874 -0.0824 -0.3303 -0.1078 -0.2414 -0.1992 -0.2007 -0.1216 -0.0790 -0.8836 -0.0776 -0.0591
S-79	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; { int i = 0; while ( i < numbers.size () ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; i += 1; } } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
T-79	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; { int i = 0; while ( i < numbers.size () - 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; i += 1; } } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
H-79	-0.17605240643024445	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result ; { int i = 0 ; while ( i < numbers.size () ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; i += 1 ; } } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
D-79	-0.17605240643024445	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result ; { int i = 0 ; while ( i < numbers.size () ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; i += 1 ; } } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
P-79	-0.0980 -0.0472 -0.2550 -0.3248 -0.0607 -0.1627 -0.0210 -0.0590 -0.0268 -0.0322 -0.1079 -0.2806 -0.3796 -0.0551 -0.1638 -0.0628 -1.2388 -0.0957 -0.0175 -0.0254 -0.0890 -0.0826 -0.2514 -0.3177 -0.0584 -0.1557 -0.0733 -0.0894 -0.0614 -1.4135 -0.2654 -0.0646 -0.1299 -0.0683 -0.0819 -0.1938 -0.1084 -0.0877 -0.2036 -0.1942 -0.0741 -0.1821 -0.1276 -0.0856 -0.1571 -0.0884 -0.3741 -0.5489 -0.1036 -0.1077 -0.0961 -1.9540 -0.0755 -0.1125 -0.1107 -0.1254 -0.0770 -0.1557 -0.0923 -0.1855 -0.0707 -0.0833 -0.0739 -0.1157 -0.1179 -0.1518 -0.1140 -0.0873 -0.1119 -0.2129 -0.1151 -0.0995 -0.0917 -0.0897 -0.0861 -0.2950 -0.1000 -0.1174 -0.1116 -0.0346 -0.0246 -0.0864 -0.0885 -0.0683 -0.1642 -1.4736 -0.1222 -0.1070 -0.1188 -0.2515 -0.1015 -0.1364 -0.1036 -0.0742 -0.0960 -0.2225 -0.1159 -0.0605 -0.1014 -0.1458 -0.0701 -0.2943 -0.0909 -0.0793 -0.0935 -0.0855 -0.0879 -0.0737 -0.2257 -0.0838 -0.0753
S-37	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; { int i = 0; while ( i < char_list.length ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } i += 1; } } return new String ( char_list ) ; }
T-37	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; { int i = 0; while ( i < char_list.length ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toUpperCase ( c ) ; } else { char_list[i] = Character.toLowerCase ( c ) ; } i += 1; } } return new String ( char_list ) ; }
H-37	-0.22452577948570251	public static String flip_case ( String string ) { char [] char_list = string.toCharArray () ; { int i = 0; while ( i < char_list.length ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } i += 1 ; } } return new String ( char_list ) ; }
D-37	-0.22452577948570251	public static String flip_case ( String string ) { char [] char_list = string.toCharArray () ; { int i = 0; while ( i < char_list.length ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } i += 1 ; } } return new String ( char_list ) ; }
P-37	-0.1009 -0.0498 -0.4940 -0.0207 -0.0996 -0.0329 -0.1142 -0.6116 -0.0931 -0.0876 -0.0901 -0.1065 -2.8920 -0.0836 -0.0977 -0.0447 -0.0772 -0.0639 -0.1461 -0.0458 -0.0441 -0.0790 -0.0816 -0.7442 -0.2018 -0.0965 -0.0969 -1.5974 -0.1004 -0.1080 -0.1100 -0.0977 -0.2266 -0.1194 -0.0609 -0.0720 -0.0931 -0.0907 -0.0778 -0.1080 -0.0747 -0.0984 -0.0828 -0.1126 -0.0514 -0.5574 -0.4434 -2.1547 -0.1443 -0.1193 -0.9102 -0.0999 -0.0780 -0.0344 -0.1218 -0.1297 -0.0883 -0.0860 -0.0861 -0.1397 -0.1075 -0.0508 -0.6071 -0.1948 -0.2013 -0.1018 -0.2959 -0.0974 -0.3464 -0.1173 -0.1273 -0.0925 -0.0986 -0.4467 -0.1056 -0.1636 -0.0857 -0.1040 -0.0564 -0.6134 -0.1430 -0.1587 -0.0900 -0.2150 -0.0884 -0.2050 -0.1148 -0.1332 -0.0920 -0.0957 -0.5202 -0.1942 -0.1267 -1.3757 -0.0963 -0.0957 -0.1989 -0.0937 -0.0635 -0.2369 -0.1142 -0.1078 -0.1002 -0.0581 -0.1008 -0.0886 -0.0829 -0.0734
S-78	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; { int i = 2; while ( i < n ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; i += 1; } } return primes; }
T-78	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; { int i = 2; while ( i < n ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; i += 1; } } return primes; }
H-78	-0.1995520442724228	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; { int i = 2; while ( i < n ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; i += 1 ; } } return primes ; }
D-78	-0.1995520442724228	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; { int i = 2; while ( i < n ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; i += 1 ; } } return primes ; }
P-78	-0.0981 -0.0467 -0.3177 -0.3368 -0.0526 -0.1744 -0.0650 -0.0965 -0.0610 -0.0894 -0.0450 -0.1087 -0.0867 -0.0743 -0.0856 -0.0840 -0.3994 -0.3475 -0.0504 -0.1666 -0.0430 -0.0842 -0.0667 -1.7728 -0.2562 -0.0529 -0.1481 -0.0632 -0.0795 -1.0325 -0.0861 -0.1167 -0.0899 -1.3935 -0.1052 -0.1089 -0.1028 -0.1256 -0.1024 -0.0929 -0.0866 -0.1127 -0.0582 -0.1004 -0.0584 -0.0891 -0.0882 -1.0496 -0.1079 -0.1127 -0.0735 -0.0846 -0.0849 -0.9904 -0.1056 -0.1101 -0.1217 -0.7626 -0.0750 -0.1387 -0.2138 -0.0809 -0.0930 -0.1173 -0.1165 -0.3064 -0.2278 -0.0812 -0.1694 -0.1241 -0.0882 -0.0972 -0.0972 -0.1114 -0.0456 -0.1014 -0.1596 -0.7639 -0.1364 -0.1261 -0.1368 -0.1244 -0.1200 -0.1098 -0.0404 -0.0918 -0.3002 -0.1803 -0.2930 -0.1150 -0.1386 -0.1159 -0.0828 -0.0810 -0.0890 -1.5041 -0.1133 -0.1007 -0.1360 -0.0818 -0.0518 -0.2100 -0.0792 -0.0799
S-16	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; { int j = 2; while ( j < i ) { if ( i % j == 0 ) { is_prime = false; } j += 1; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-16	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; { int j = 2; while ( j < i ) { if ( i % j == 0 ) { is_prime = false; break; } j += 1; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-16	-0.1954203099012375	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; { int j = 2; while ( j < i ) { if ( i % j == 0 ) { is_prime = false ; } j += 1 ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-16	-0.1954203099012375	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; { int j = 2; while ( j < i ) { if ( i % j == 0 ) { is_prime = false ; } j += 1 ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-16	-0.0980 -0.0467 -0.3368 -0.3423 -0.0535 -0.1736 -0.0675 -0.0958 -0.0584 -0.0901 -0.0450 -0.1074 -0.0873 -0.0773 -0.0834 -0.0825 -0.4038 -0.3529 -0.0529 -0.1710 -0.0424 -0.0848 -0.0688 -1.8348 -0.2917 -0.0556 -0.1459 -0.0624 -0.0824 -0.2338 -0.1121 -0.0645 -0.0809 -0.0826 -1.3631 -0.0987 -0.1788 -0.1164 -0.3443 -0.0754 -0.0833 -0.1941 -0.0799 -0.0814 -0.1140 -0.0571 -0.1047 -0.0565 -0.0998 -0.0728 -1.3692 -0.3104 -0.1096 -0.1001 -0.0972 -1.2201 -0.1035 -0.1041 -0.1616 -0.1453 -0.1064 -0.0866 -0.0856 -0.1361 -0.1147 -0.2632 -0.1868 -0.0955 -0.1761 -0.1116 -0.0876 -0.0985 -0.0929 -0.1064 -0.0433 -0.0961 -0.1013 -0.6197 -0.1493 -0.0780 -0.1186 -2.0465 -0.1134 -0.0993 -0.1575 -0.1305 -0.1211 -0.0795 -0.0972 -0.0414 -0.0850 -0.1383 -0.1582 -0.2311 -0.1064 -0.1095 -0.0961 -0.0804 -0.0901 -0.0781 -0.0480 -0.1953 -0.0793 -0.0768
S-50	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; { int i = 0; while ( i < operand.length ) { expression += operator[i] + operand[i]; i += 1; } } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
T-50	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand[0] + ""; { int i = 0; while ( i < operator.length ) { expression += operator[i] + operand[i + 1]; i += 1; } } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
H-50	-0.2843419909477234	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; { int i = 0; while ( i < operand.length ) { expression += operator[i] + operand[i]; i += 1; } } return Double.parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-50	-0.2843419909477234	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; { int i = 0; while ( i < operand.length ) { expression += operator[i] + operand[i]; i += 1; } } return Double.parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-50	-0.0848 -0.0526 -0.0775 -0.0509 -0.0953 -0.0091 -0.0100 -0.1149 -2.0633 -2.1339 -0.0761 -0.9391 -0.1333 -2.4253 -0.0305 -0.0762 -0.0711 -0.1573 -0.0116 -0.4148 -0.2115 -0.0675 -0.0913 -0.1771 -0.0445 -0.0847 -0.0783 -0.0832 -0.0640 -0.1293 -0.0423 -0.0734 -0.0858 -0.0808 -0.1255 -0.0433 -0.0321 -0.0871 -0.0605 -0.1425 -0.0883 -0.0292 -0.0265 -0.1081 -0.0894 -0.0119 -0.0729 -0.0853 -0.0867 -2.4555 -0.1341 -0.0861 -1.8283 -0.1481 -0.0981 -0.1226 -0.0948 -1.1814 -0.1007 -0.1121 -0.1873 -0.0903 -0.1530 -0.0648 -0.0648 -0.0890 -0.0787 -0.2523 -0.1168 -0.1015 -0.9775 -0.2774 -0.2540 -0.1222 -0.0363 -0.3687 -0.2056 -1.6613 -0.0854 -0.1110 -1.7440 -0.0885 -0.1020 -0.1055 -0.3340 -0.0929 -0.9675 -0.1021 -0.0685 -0.1150 -0.0194 -0.1160 -0.1241 -0.0987 -0.1565 -0.9556 -0.0644 -0.1152 -0.1032 -0.0797 -0.0757
S-57	public static boolean triples_sum_to_zero ( int[] numbers ) { { int i = 0; while ( i < numbers.length ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } i += 1; } } return false; }
T-57	public static boolean triples_sum_to_zero ( int[] numbers ) { { int i = 0; while ( i < numbers.length ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } i += 1; } } return false; }
H-57	-0.2500133514404297	public static boolean triples_sum_to_zero ( int [] numbers ) { int i = 0 ; while ( i < numbers.length ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } i += 1 ; } return false ; }
D-57	-0.2500133514404297	public static boolean triples_sum_to_zero ( int [] numbers ) { int i = 0 ; while ( i < numbers.length ) { for ( int j = i ; j < numbers.length ; j += 1 ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } i += 1 ; } return false ; }
P-57	-0.1028 -0.0467 -0.1008 -0.0305 -0.0129 -0.0893 -0.0502 -0.0877 -0.0478 -0.0925 -0.0905 -0.1206 -0.1136 -2.2651 -0.0528 -0.0840 -0.0922 -0.5186 -0.1341 -0.1051 -2.0063 -0.1182 -0.2843 -0.1125 -0.0967 -0.0700 -0.1146 -0.0694 -0.0846 -0.0908 -0.0840 -0.1948 -0.1173 -0.0717 -0.1044 -0.0952 -0.0983 -1.5878 -0.0958 -0.1017 -0.0823 -0.0928 -0.0743 -0.8078 -0.0862 -0.0885 -0.1443 -0.0814 -0.0829 -0.1179 -0.1077 -0.0637 -0.0862 -0.0997 -0.1026 -1.0913 -0.0920 -0.0671 -0.0815 -0.0965 -0.0755 -1.0617 -0.0990 -0.0852 -0.1137 -0.0800 -0.1090 -0.1199 -0.1128 -0.1192 -0.7211 -0.7940 -0.2591 -0.1353 -0.0703 -0.3204 -0.2759 -0.2483 -0.3141 -0.0602 -0.3640 -0.1411 -0.2515 -0.3257 -0.1781 -0.0877 -0.1360 -0.0826 -1.2285 -0.1915 -0.9618 -0.1329 -0.0903 -0.9595 -0.1710 -0.1091 -0.1195 -0.0500 -0.9549 -0.0824 -0.0760
S-26	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { { int k = j; while ( k < numbers.length ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; k += 1; } } } } return false; }
T-26	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { { int k = j + 1; while ( k < numbers.length ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; k += 1; } } } } return false; }
H-26	-0.23617678880691528	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i; j < numbers.length ; j += 1 ) { { int k = j ; while ( k < numbers.length ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; k += 1 ; } } } } return false ; }
D-26	-0.23617678880691528	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i; j < numbers.length ; j += 1 ) { { int k = j ; while ( k < numbers.length ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; k += 1 ; } } } } return false ; }
P-26	-0.0995 -0.0463 -0.1030 -0.0314 -0.0128 -0.0883 -0.0484 -0.0882 -0.0491 -0.0916 -0.0895 -0.1196 -0.1136 -2.3529 -0.0528 -0.0830 -0.0870 -0.2575 -0.1157 -0.0697 -0.1032 -0.0885 -1.5259 -0.0800 -0.0758 -0.1054 -0.0838 -0.0671 -0.9789 -0.0745 -0.0784 -0.1735 -0.0782 -0.0818 -0.1474 -0.1082 -0.0622 -0.0961 -0.0930 -0.0982 -1.4271 -0.1002 -0.0862 -0.0754 -0.0974 -0.0741 -1.1198 -0.0798 -0.0740 -0.1367 -0.0789 -0.0915 -0.9951 -0.1267 -0.1060 -0.0974 -0.1365 -1.0199 -0.1207 -0.1091 -0.1584 -0.1105 -0.0942 -0.0773 -0.0940 -0.0916 -0.0925 -0.1150 -0.1150 -0.1360 -0.8042 -0.6910 -0.2376 -0.1525 -0.0646 -0.3220 -0.2402 -0.2503 -0.4024 -0.0593 -0.3846 -0.1356 -0.2342 -0.2720 -0.1799 -0.0868 -0.1364 -0.0922 -0.8695 -0.1825 -0.1270 -1.1046 -0.1294 -0.1270 -0.1144 -0.0920 -0.1294 -0.0918 -0.0601 -0.7144 -0.0861 -0.0787
S-3	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { { int j = i; while ( j < numbers.length ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } j += 1; } } } return false; }
T-3	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { { int j = i + 1; while ( j < numbers.length ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } j += 1; } } } return false; }
H-3	-0.23640526831150055	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { { int j = i ; while ( j < numbers.length ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } j += 1 ; } } } return false ; }
D-3	-0.23640526831150055	public static boolean triples_sum_to_zero ( int [] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { { int j = i ; while ( j < numbers.length ) { for ( int k = j ; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } j += 1 ; } } } return false ; }
P-3	-0.1028 -0.0464 -0.1011 -0.0308 -0.0127 -0.0890 -0.0494 -0.0877 -0.0495 -0.0916 -0.0894 -0.1207 -0.1144 -2.4173 -0.0541 -0.0836 -0.0864 -0.3103 -0.1157 -0.0712 -0.0981 -0.0879 -1.3962 -0.0819 -0.0802 -0.1064 -0.0828 -0.0679 -0.6867 -0.0700 -0.0766 -0.1493 -0.0770 -0.0831 -0.9036 -0.1028 -0.1057 -0.0976 -0.0894 -1.1619 -0.1385 -0.1096 -0.1347 -0.0957 -0.0844 -0.0886 -0.0979 -0.0920 -0.0839 -0.2328 -0.1139 -0.0669 -0.1104 -0.0934 -0.1179 -1.0391 -0.1116 -0.0704 -0.0856 -0.0930 -0.0782 -0.9256 -0.1065 -0.0870 -0.1210 -0.0783 -0.1062 -0.1098 -0.1162 -0.1245 -0.7428 -0.8835 -0.2426 -0.1453 -0.0678 -0.3316 -0.2758 -0.2445 -0.3934 -0.0613 -0.3803 -0.1536 -0.2632 -0.3552 -0.1808 -0.0859 -0.1379 -0.0911 -1.0968 -0.3571 -0.1285 -0.0898 -1.1343 -0.1757 -0.0872 -0.0868 -0.1665 -0.0953 -0.0603 -0.7865 -0.0869 -0.0822
S-55	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; { int i = 0; while ( i < a.length () ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } i += 1; } } return false; }
T-55	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; { int i = 0; while ( i < a.length () - l + 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } i += 1; } } return false; }
H-55	-0.2734295129776001	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; { int i = 0; while ( i < a.length () ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } i += 1 ; } } return false ; }
D-55	-0.2734295129776001	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; { int i = 0; while ( i < a.length () ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } i += 1 ; } } return false ; }
P-55	-0.0948 -0.0473 -0.1030 -0.0391 -0.0593 -0.0052 -0.0860 -0.0439 -0.1138 -1.0335 -0.1041 -1.3141 -0.7009 -0.0952 -0.0841 -0.0931 -0.1068 -0.0542 -0.0880 -0.1158 -0.1796 -0.0884 -0.0918 -0.0886 -1.4272 -0.0583 -0.0866 -0.1033 -1.6085 -1.0854 -0.0843 -0.0925 -0.0983 -1.4241 -0.1166 -0.1105 -0.0921 -0.0891 -0.5000 -0.1320 -0.1026 -0.0750 -0.0824 -0.0851 -0.2751 -0.1144 -0.0722 -0.0818 -0.0933 -0.9748 -0.0993 -0.1176 -0.0676 -1.0658 -0.0821 -0.1202 -0.1681 -0.0767 -0.0989 -0.1170 -0.1151 -0.1892 -0.1173 -0.7915 -0.1272 -0.1124 -1.0842 -0.2215 -0.7513 -0.0780 -0.1045 -0.1051 -0.5355 -0.1056 -0.0927 -0.1230 -0.5948 -0.1096 -0.1062 -0.6619 -0.1168 -0.1608 -0.0774 -0.0847 -0.0870 -0.0795 -0.1010 -0.0539 -1.0608 -0.2135 -0.0918 -0.0614 -2.0402 -0.1097 -0.0693 -0.1460 -0.0700 -0.0357 -0.7703 -0.0742 -0.0765
S-54	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; for ( int i = 0; i < a.length () ; i += 1 ) { { int j = 0; while ( j < l ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; j += 1; } } } return false; }
T-54	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; for ( int i = 0; i < a.length () - l + 1; i += 1 ) { { int j = 0; while ( j < l + 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; j += 1; } } } return false; }
H-54	-0.24582581222057343	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { { int j = 0; while ( j < l ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; j += 1 ; } } } return false ; }
D-54	-0.24582581222057343	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { { int j = 0; while ( j < l ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; j += 1 ; } } } return false ; }
P-54	-0.0930 -0.0471 -0.1037 -0.0394 -0.0613 -0.0052 -0.0860 -0.0428 -0.1129 -1.0279 -0.1039 -1.2785 -0.6910 -0.0962 -0.0842 -0.0932 -0.1134 -0.0573 -0.0884 -0.1123 -0.1884 -0.0892 -0.0900 -0.0874 -1.5490 -0.0640 -0.0854 -0.1049 -0.7749 -0.3019 -0.1113 -0.0714 -0.0769 -0.0816 -1.3282 -0.0826 -0.0868 -0.8234 -0.1589 -0.0952 -0.0804 -0.0852 -0.0728 -0.1019 -0.1952 -0.0775 -0.0816 -0.3445 -0.1074 -0.1013 -0.1037 -1.3132 -0.1129 -0.1053 -0.1129 -0.1290 -0.0644 -0.0811 -0.0889 -0.1286 -0.1136 -0.1931 -0.1169 -0.8095 -0.1245 -0.1212 -1.0103 -0.1881 -0.5753 -0.0782 -0.1019 -0.1032 -0.5612 -0.1062 -0.0821 -0.1211 -0.6617 -0.1106 -0.1058 -0.7533 -0.1270 -0.1599 -0.0745 -0.0836 -0.0863 -0.0807 -0.1019 -0.0564 -0.6690 -0.0825 -0.0732 -1.8234 -0.1197 -0.0929 -0.0837 -0.1116 -0.0780 -0.0346 -0.6103 -0.0830 -0.0808
S-86	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; { int i = 0; while ( i < arr.length ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } i += 1; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
T-86	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; { int i = 0; while ( i < arr.length ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } i += 1; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
H-86	-0.3025098443031311	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; { int i = 0; while ( i < arr.length ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } i += 1 ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
D-86	-0.3025098443031311	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; { int i = 0; while ( i < arr.length ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } i += 1 ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
P-86	-0.0913 -0.0432 -0.1021 -1.5258 -0.0209 -0.0142 -0.1173 -0.0983 -1.5578 -0.0520 -0.0868 -0.0915 -0.1238 -0.1378 -0.1152 -0.0579 -0.0883 -0.8977 -0.0969 -0.0588 -0.0905 -0.9042 -0.3438 -0.1082 -0.0887 -0.0998 -1.2628 -0.1257 -0.1165 -0.0995 -0.0906 -0.2340 -0.0685 -0.0776 -0.0881 -0.0823 -0.1484 -0.1211 -0.2209 -0.4588 -0.2282 -0.1877 -0.5625 -0.0596 -0.1350 -0.1148 -1.3797 -0.1225 -0.2851 -0.1420 -0.1337 -0.1063 -0.1141 -0.0848 -0.0638 -0.0945 -0.0775 -0.1779 -0.1134 -0.0881 -0.2033 -0.0542 -0.3934 -0.1845 -2.3855 -0.1042 -0.1637 -0.0901 -1.2141 -0.9151 -0.1061 -0.0912 -1.8978 -0.5128 -0.1320 -0.3495 -0.1317 -0.1152 -0.0972 -0.1143 -0.6630 -0.0832 -0.0808 -0.1223 -0.0933 -1.5046 -0.5926 -0.1049 -0.0783 -0.0775 -1.2685 -0.1358 -0.1615 -0.1189 -0.0660 -0.5131 -0.0715 -0.6405 -0.0707 -0.0691
S-71	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; { int i = 2; while ( i < word.length () ) { if ( word.length () % i == 0 ) flag = 1; i += 1; } } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
T-71	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; { int i = 2; while ( i < word.length () ) { if ( word.length () % i == 0 ) flag = 1; i += 1; } } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
H-71	-0.26693928241729736	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; { int i = 2; while ( i < word.length () ) { if ( word.length () % i == 0 ) flag = 1; i += i + 1 ; } } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
D-71	-0.26693928241729736	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; { int i = 2; while ( i < word.length () ) { if ( word.length () % i == 0 ) flag = 1; i += i + 1 ; } } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
P-71	-0.1051 -0.0645 -1.7135 -0.0160 -0.0935 -0.0765 -0.0879 -0.0654 -0.1169 -1.1674 -0.0449 -0.0898 -0.0887 -2.0682 -0.1046 -0.0833 -1.8646 -0.2811 -0.1110 -1.5151 -0.0581 -0.0615 -0.0269 -0.1179 -0.4145 -0.1177 -0.0822 -0.0748 -0.0881 -0.0934 -0.0864 -0.1242 -0.0701 -0.0827 -0.5829 -0.2403 -0.1071 -0.0966 -0.0916 -1.2785 -0.0939 -0.1116 -0.1435 -0.1288 -0.1219 -0.0887 -0.0775 -0.0753 -0.0843 -0.0866 -0.1674 -0.1211 -0.1425 -0.1189 -0.0885 -0.0712 -0.2802 -0.0952 -0.1298 -0.1027 -0.0821 -0.0668 -0.1302 -1.4548 -0.1166 -0.1557 -3.2213 -1.3675 -0.3479 -0.1092 -0.2213 -0.2433 -0.1061 -0.1143 -0.0712 -0.0614 -0.1036 -0.2964 -0.0602 -0.1329 -0.1128 -0.0699 -0.1230 -0.1122 -0.0865 -0.1003 -0.0728 -0.0445 -0.0777 -0.0988 -0.0167 -0.0796 -0.0860 -0.0679 -0.1013 -0.6822 -0.0768 -0.0756 -0.0822 -0.0811
S-64	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; { int j = 0; while ( j < grid[j].length ) { row_capacity += grid[j][i]; j++; } } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-64	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; { int j = 0; while ( j < grid[i].length ) { row_capacity += grid[i][j]; j++; } } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-64	-0.24882757663726807	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; { int j = 0; while ( j < grid[j].length ) { row_capacity += grid[j][i]; j++; } } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-64	-0.24882757663726807	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; { int j = 0; while ( j < grid[j].length ) { row_capacity += grid[j][i]; j++; } } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-64	-0.1037 -0.0444 -0.1181 -0.0375 -0.0940 -0.0632 -0.1175 -0.1029 -0.1598 -0.0195 -1.1338 -0.0972 -0.0251 -0.1046 -0.1006 -0.0894 -0.0875 -0.0993 -0.1035 -0.0878 -1.4190 -0.2223 -0.1100 -0.0720 -0.0950 -0.0833 -1.3860 -0.0870 -0.0788 -0.1071 -0.0776 -0.0768 -1.1561 -0.0713 -0.5965 -0.0733 -0.0804 -0.1125 -0.2179 -0.1072 -0.1112 -0.0973 -1.4434 -0.3889 -0.0988 -0.1191 -0.1168 -1.7619 -0.1337 -0.1096 -0.1728 -0.0778 -0.0918 -0.7727 -0.2451 -0.6338 -0.1017 -0.0912 -0.0846 -0.1881 -0.1076 -0.1457 -0.0785 -0.0343 -0.3015 -0.1801 -0.1361 -0.4180 -1.7787 -0.0699 -0.8201 -0.1380 -0.3484 -0.1132 -0.0992 -0.1700 -0.1945 -0.1039 -0.1195 -0.1931 -0.0843 -0.1079 -0.1088 -0.2992 -0.1079 -0.0912 -0.0961 -0.0983 -0.4729 -0.1055 -0.0914 -0.0865 -0.3262 -0.0849 -0.0673
S-5	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; { int i = 0; while ( i < grid.length ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; i++; } } return result; }
T-5	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; { int i = 0; while ( i < grid.length ) { int row_capacity = 0; for ( int j = 0; j < grid[i].length; j++ ) { row_capacity += grid[i][j]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; i++; } } return result; }
H-5	-0.26154088973999023	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; { int i = 0; while ( i < grid.length ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length ; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; i++; } } return result ; }
D-5	-0.26154088973999023	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; { int i = 0; while ( i < grid.length ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length ; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; i++; } } return result ; }
P-5	-0.1037 -0.0437 -0.1160 -0.0378 -0.0939 -0.0648 -0.1163 -0.1019 -0.1533 -0.0189 -1.2143 -0.0974 -0.0260 -0.1036 -0.1013 -0.0902 -0.0887 -0.0878 -0.1028 -0.0854 -1.3039 -0.4481 -0.1187 -0.1602 -0.0999 -1.6474 -0.1614 -0.1102 -0.1017 -0.0979 -0.1021 -0.0688 -0.0881 -0.0909 -0.0784 -0.1160 -0.1607 -0.0973 -0.1183 -0.0966 -1.6319 -0.1335 -0.1171 -0.0758 -0.1192 -0.0985 -1.6297 -0.1004 -0.0644 -0.1456 -1.1158 -0.2763 -0.7151 -0.0930 -1.4482 -0.0913 -0.6857 -0.0767 -0.0874 -0.2013 -0.0963 -0.1432 -0.0662 -0.0322 -0.3526 -0.2255 -0.1370 -0.4375 -1.8902 -0.1029 -0.1063 -0.1123 -0.1778 -0.2094 -0.0989 -0.1299 -0.1847 -0.0856 -0.1107 -0.1063 -0.2977 -0.1343 -0.0884 -0.0923 -0.1113 -0.7166 -0.0861 -0.5350 -0.0955 -0.1232 -0.0879 -0.0875 -0.4153 -0.0800 -0.0683
S-95	public static int fizz_buzz ( int n ) { int result = 0; { int i = 0; while ( i < n ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } i += 1; } } return result; }
T-95	public static int fizz_buzz ( int n ) { int result = 0; { int i = 0; while ( i < n ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } i += 1; } } return result; }
H-95	-0.20629696547985077	public static int fizz_buzz ( int n ) { int result = 0; { int i = 0; while ( i < n ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "". substring ( j, j + 1 ) == "7" ) result += 1; } } i += 1; } } return result ; }
D-95	-0.20629696547985077	public static int fizz_buzz ( int n ) { int result = 0; { int i = 0; while ( i < n ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "". substring ( j, j + 1 ) == "7" ) result += 1; } } i += 1; } } return result ; }
P-95	-0.1002 -0.0449 -0.1076 -0.0764 -0.0159 -0.0862 -0.0546 -0.0143 -0.1193 -0.0951 -0.0652 -0.0878 -0.0909 -0.0944 -0.1105 -0.0848 -0.6007 -0.2650 -0.1250 -0.1030 -0.0941 -0.8266 -0.1844 -0.1070 -0.0977 -0.1025 -0.0986 -0.0898 -0.0810 -0.2258 -0.1120 -0.1751 -0.3534 -0.0532 -0.1526 -0.0988 -0.3319 -0.1052 -0.2176 -0.0293 -0.1405 -0.1025 -0.0800 -0.0876 -0.2088 -0.1133 -0.0838 -0.0800 -0.0925 -0.8215 -0.0854 -0.0990 -0.2101 -0.2908 -0.5233 -0.0545 -0.0649 -0.0868 -0.0725 -0.1423 -0.1785 -0.0787 -0.0961 -0.1227 -0.1099 -0.1792 -0.2473 -0.5124 -1.0391 -0.1323 -0.1025 -1.2865 -0.0611 -0.3135 -0.1112 -0.1302 -0.6792 -0.1142 -0.0198 -0.0866 -0.1223 -0.0818 -1.2948 -0.1387 -0.2858 -0.1086 -0.0729 -1.6972 -0.1010 -0.1058 -0.0908 -0.1121 -0.3084 -0.0782 -0.0798
S-1	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { { int j = 0; while ( j < i + "".length () ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; j += 1; } } } } return result; }
T-1	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { { int j = 0; while ( j < ( i + "" ) .length () ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; j += 1; } } } } return result; }
H-1	-0.22575831413269043	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { { int j = 0; while ( j < i + "".length () ) { if ( i + "". substring ( j, j + 1 ) == "7" ) result += 1; j += 1; } } } } return result ; }
D-1	-0.22575831413269043	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { { int j = 0; while ( j < i + "".length () ) { if ( i + "". substring ( j, j + 1 ) == "7" ) result += 1; j += 1; } } } } return result ; }
P-1	-0.1029 -0.0457 -0.1148 -0.0787 -0.0163 -0.0873 -0.0551 -0.0151 -0.1188 -0.0955 -0.0709 -0.0866 -0.0896 -0.1097 -0.1144 -0.0865 -0.7839 -0.1761 -0.1069 -0.0729 -0.0750 -0.0814 -0.8914 -0.0856 -0.1187 -0.0987 -0.9897 -0.0772 -0.0824 -0.1778 -0.0787 -0.0865 -0.1970 -0.1120 -0.2081 -0.2756 -0.0571 -0.1667 -0.0990 -0.3038 -0.1023 -0.2033 -0.0351 -0.1469 -0.0968 -0.0804 -0.0802 -0.9242 -0.1279 -0.1070 -0.1026 -0.9302 -0.1157 -0.1052 -0.1659 -0.1160 -0.2552 -0.5600 -0.6642 -0.0786 -0.0653 -0.0826 -0.0911 -0.1344 -0.1114 -0.2131 -0.2307 -0.5252 -1.0287 -0.1314 -0.1100 -1.2285 -0.0732 -0.2300 -0.1084 -0.1520 -0.7195 -0.1163 -0.0216 -0.0850 -0.1475 -0.0806 -1.1772 -0.1053 -0.0729 -1.4890 -0.1109 -0.1492 -0.0892 -0.0946 -0.1049 -0.1227 -0.3996 -0.0844 -0.0725
S-14	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; { int i = 0; while ( i < q.length ) { sum += q[i]; i += 1; } } if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; } return true; }
T-14	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; { int i = 0; while ( i < q.length ) { sum += q[i]; i += 1; } } if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; }
H-14	-0.3067876696586609	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; { int i = 0; while ( i < q.length ) { sum += q[i]; i += 1; } } if ( sum > w ) return false ; int i = 0; int j = q.length - 1 ; while ( i < j ) { if ( q[i] != q[j] ) return false ; } return true ; }
D-14	-0.3067876696586609	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; { int i = 0; while ( i < q.length ) { sum += q[i]; i += 1; } } if ( sum > w ) return false ; int i = 0; int j = q.length - 1 ; while ( i < j ) { if ( q[i] != q[j] ) return false ; } return true ; }
P-14	-0.1005 -0.0491 -0.1190 -0.0436 -0.0935 -0.0248 -0.0957 -0.0148 -0.1144 -0.1204 -2.2386 -0.0538 -1.5116 -0.0971 -0.0963 -0.0897 -0.0909 -0.1500 -0.0703 -0.0949 -0.9366 -0.2839 -0.1188 -0.1114 -0.1014 -0.8955 -0.1659 -0.1049 -0.1101 -0.1066 -0.2415 -0.0840 -0.0773 -0.0866 -0.0838 -0.1433 -0.0494 -0.0755 -0.4672 -0.4925 -2.3631 -0.0853 -0.0967 -1.8590 -0.1106 -0.1162 -0.1869 -0.1148 -0.1174 -0.2101 -0.2195 -0.0889 -0.0927 -0.0837 -1.3992 -0.1423 -0.1594 -0.1002 -0.9426 -0.1121 -0.1152 -0.0898 -0.0751 -0.0920 -0.0686 -0.2503 -2.2127 -0.2511 -0.1119 -0.1114 -0.1044 -0.1351 -0.1554 -0.0862 -0.0939 -0.1304 -0.1163 -0.1281 -0.5558 -0.3595 -0.2272 -0.1814 -0.0504 -0.3631 -0.1541 -0.2524 -0.0894 -0.0837 -0.0557 -1.3009 -1.6927 -0.1246 -0.1652 -0.7037 -0.0836 -0.0741
S-67	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; for ( ; i < j; ) { if ( q[i] != q[j] ) return false; } return true; }
T-67	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; for ( ; i < j; ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; }
H-67	-0.31150689721107483	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i]; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; for ( ; i < j ; i += 1 ) { if ( q[i] != q[j] ) return false; } return true ; }
D-67	-0.31150689721107483	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i]; if ( sum > w ) return false ; int i = 0; int j = q.length - 1; for ( ; i < j ; i += 1 ) { if ( q[i] != q[j] ) return false; } return true ; }
P-67	-0.1017 -0.0514 -0.1102 -0.0422 -0.0942 -0.0252 -0.0962 -0.0142 -0.1148 -0.1180 -2.2364 -0.0527 -1.3110 -0.0980 -0.0936 -0.0940 -0.0892 -0.1614 -0.0669 -0.0947 -1.1032 -0.1493 -0.1084 -0.0815 -0.0902 -0.0927 -0.9472 -0.0890 -0.0882 -0.1857 -0.0922 -0.0634 -1.2331 -0.0847 -0.0878 -0.2443 -0.0841 -0.1929 -0.0570 -0.0701 -0.4946 -0.5330 -2.1889 -0.1657 -0.1216 -0.1403 -0.2449 -0.2400 -0.0896 -0.0955 -0.0801 -1.4139 -0.1749 -0.1537 -0.1137 -0.8761 -0.1125 -0.1215 -0.0989 -0.0839 -0.0963 -0.0722 -0.1608 -1.5881 -0.1263 -0.1139 -0.2373 -0.0972 -0.1281 -0.1811 -1.3856 -0.8133 -0.7918 -0.4517 -0.0818 -0.6850 -0.1208 -0.1177 -0.1151 -0.4412 -0.3704 -0.1876 -0.1695 -0.0512 -0.2922 -0.1651 -0.2274 -0.0860 -0.0591 -0.0436 -1.0245 -0.0900 -0.0984 -0.0749 -1.5680 -0.0784 -0.0701
S-12	public static int sum_squares ( int[] lst ) { int result = 0; { int i = 0; while ( i < lst.length ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; i += 1; } } return result; }
T-12	public static int sum_squares ( int[] lst ) { int result = 0; { int i = 0; while ( i < lst.length ) { if ( i % 3 == 0 ) result += lst[i] * lst[i]; else if ( i % 4 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; i += 1; } } return result; }
H-12	-0.27907949686050415	public static int sum_squares ( int[] lst ) { int result = 0; { int i = 0 ; while ( i < lst.length ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; i += 1 ; } } return result ; }
D-12	-0.27907949686050415	public static int sum_squares ( int[] lst ) { int result = 0; { int i = 0 ; while ( i < lst.length ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; i += 1 ; } } return result ; }
P-12	-0.1015 -0.0482 -0.1256 -0.0880 -0.1171 -0.0199 -0.0733 -0.1195 -0.1342 -2.2855 -0.0620 -0.0863 -0.0839 -0.0965 -0.1019 -0.0963 -1.3539 -0.4669 -0.1338 -0.1102 -0.0998 -1.9096 -0.1321 -0.1641 -0.1113 -0.1254 -0.0964 -0.5020 -0.0589 -0.0606 -0.0897 -0.0805 -0.1423 -0.1200 -0.2662 -0.3542 -0.1042 -0.1516 -0.1151 -0.0859 -0.1314 -0.0599 -0.0738 -0.5338 -0.1613 -0.1941 -0.0859 -0.0705 -0.3676 -0.1425 -2.0305 -0.1199 -0.1059 -0.1138 -0.1439 -0.3055 -0.1101 -0.0932 -0.1065 -0.0913 -0.1141 -0.0656 -0.0655 -0.3078 -0.1130 -0.1626 -0.0618 -0.0622 -0.2944 -0.1075 -0.2933 -0.2995 -0.0545 -0.3360 -0.1137 -1.6989 -0.1580 -0.1408 -0.0857 -0.0582 -0.3390 -0.1109 -2.1885 -0.0973 -0.1409 -1.8414 -0.3046 -0.2406 -0.1435 -0.0917 -0.0906 -0.3847 -0.0813 -0.0694
S-42	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; { int i = 0; while ( i < grades.length ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; i += 1; } } return letter_grade; }
T-42	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; { int i = 0; while ( i < grades.length ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; i += 1; } } return letter_grade; }
H-42	-0.1742963045835495	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length]; { int i = 0; while ( i < grades.length ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; i += 1; } } return letter_grade ; }
D-42	-0.1742963045835495	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length]; { int i = 0; while ( i < grades.length ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; i += 1; } } return letter_grade ; }
P-42	-0.1077 -0.0517 -5.5838 -0.1088 -0.1252 -0.0978 -0.0627 -0.4224 -0.0190 -0.0942 -0.2022 -0.0974 -0.0331 -0.1268 -0.2244 -2.2403 -0.0307 -0.0832 -0.0831 -0.6449 -0.0645 -0.0372 -0.0854 -0.0664 -0.2780 -0.1425 -0.1140 -0.0476 -0.0948 -0.0636 -0.2191 -0.0788 -0.0537 -0.0974 -0.0286 -0.7963 -0.8490 -0.0656 -0.0419 -2.4624 -0.2501 -0.1091 -0.0905 -0.1034 -0.8940 -0.0949 -0.1046 -0.0753 -0.0959 -0.0545 -0.0848 -0.0635 -0.0895 -0.0774 -0.1529 -0.0577 -0.0383 -0.0915 -0.0331 -0.4019 -0.2800 -1.9582 -0.1219 -0.1209 -0.0776 -0.0409 -0.2821 -0.0183 -0.0835 -0.0957 -0.1002 -0.0583 -0.6705 -0.1222 -0.1204 -0.0946 -0.0923 -0.0486 -0.1513 -0.7511 -0.0861 -0.0968 -0.1187 -0.0709 -0.0504 -0.1953 -0.0337 -0.0887 -0.0503 -0.0947 -0.0502 -0.3913 -0.1038 -0.1094 -0.0930 -0.1015 -0.0473 -0.4285 -0.0807 -0.0897 -0.1147 -0.0759 -0.0557 -0.1228 -0.0136 -0.0806 -0.0437 -0.0944 -0.0506 -0.3523 -0.0966 -0.1059 -0.0952 -0.0929 -0.0629 -0.0446 -0.6502 -0.0732 -0.0829 -0.1153 -0.0698 -0.0457 -0.1143 -0.0101 -0.0876 -0.0453 -0.0941 -0.0514 -0.3907 -0.0958 -0.0894 -0.0952 -0.1029 -0.0559 -0.1100 -0.5825 -0.0926 -0.1013 -0.1125 -0.0652 -0.0470 -0.1059 -0.0388 -0.0865 -0.0412 -0.0916 -0.0533 -0.3421 -0.0937 -0.0938 -0.0961 -0.0978 -0.0531 -0.4296 -0.0596 -0.0876 -0.1142 -0.0657 -0.0464 -0.1091 -0.0553 -0.0854 -0.0455 -0.0963 -0.0543 -0.3165 -0.0883 -0.1029 -0.0976 -0.1058 -0.0990 -0.0387 -0.6626 -0.0689 -0.0939 -0.1181 -0.0614 -0.0434 -0.1193 -0.0178 -0.0943 -0.0462 -0.0995 -0.0521 -0.3669 -0.0944 -0.1032 -0.1018 -0.1161 -0.0541 -0.1104 -0.5585 -0.0882 -0.0968 -0.1148 -0.0654 -0.0509 -0.1213 -0.0076 -0.0980 -0.0492 -0.0944 -0.0545 -0.3419 -0.0958 -0.1163 -0.0995 -0.1089 -0.0512 -0.0351 -0.5900 -0.0756 -0.0882 -0.1185 -0.0678 -0.0494 -0.1152 -0.0118 -0.0880 -0.0472 -0.1029 -0.0519 -0.3609 -0.0908 -0.1203 -0.1034 -0.1127 -0.0658 -0.1022 -0.5684 -0.0808 -0.0907 -0.1107 -0.0671 -0.0508 -0.1068 -0.0285 -0.0870 -0.0455 -0.0996 -0.0543 -0.3406 -0.0928 -0.1197 -0.0999 -0.1032 -0.0359 -0.4131 -0.0645 -0.0800 -0.1119 -0.0749 -0.0511 -0.0961 -0.0175 -0.0848 -0.0433 -0.0967 -0.0544 -0.3261 -0.0902 -0.1123 -0.1109 -0.1011 -0.0511 -0.4085 -0.0605 -0.1016 -0.1097 -0.0727 -0.0466 -0.1009 -0.0231 -0.0908 -0.0401 -0.0970 -0.0592 -0.3915 -0.0834 -0.1094 -0.1072 -0.0962 -0.0590 -0.0387 -0.6029 -0.0669 -0.0544 -0.0967 -0.0549 -0.3143 -0.0835 -0.1217 -0.1230 -0.0913 -0.0415 -0.6208 -0.0952 -0.0715 -1.0681 -0.0773 -0.0878 -0.0722 -0.0407 -0.0969 -0.0418 -1.3726 -0.0712 -0.0887
S-84	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; { int i = 0; while ( i < digits.size () ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; i += 1; } } return result.toArray ( new Integer[] {} ) ; }
T-84	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; { int i = 0; while ( i < digits.size () ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; i += 1; } } return result.toArray ( new Integer[] {} ) ; }
H-84	-0.2005075365304947	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; { int i = 0; while ( i < digits.size () ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; i += 1 ; } } return result.toArray ( new Integer[] {} ) ; }
D-84	-0.2005075365304947	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; { int i = 0; while ( i < digits.size () ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; i += 1 ; } } return result.toArray ( new Integer[] {} ) ; }
P-84	-0.0907 -0.0496 -1.1380 -1.4195 -0.0376 -0.0805 -0.0429 -0.0852 -0.0254 -0.1099 -1.0876 -1.6030 -0.0397 -0.0802 -0.0930 -1.3096 -0.2224 -0.0458 -0.2267 -0.0299 -0.0906 -0.0495 -0.9516 -0.1497 -0.0538 -0.1758 -0.0650 -0.0866 -1.4065 -0.1421 -0.0383 -0.1949 -0.6577 -0.1353 -0.0394 -0.2162 -0.0234 -0.0584 -0.0618 -0.0834 -0.0454 -1.0603 -0.1330 -0.0423 -0.2298 -0.7714 -0.1065 -0.0405 -0.2511 -0.0692 -0.0904 -0.1436 -0.1092 -0.0608 -0.0672 -0.0751 -0.7562 -0.0779 -0.0873 -0.0577 -0.0943 -0.0561 -0.6094 -0.0606 -0.0853 -0.1407 -0.0779 -0.0879 -0.0769 -0.0347 -0.0949 -1.3133 -0.0772 -0.0779 -0.0850 -0.0490 -0.3734 -0.3564 -1.5939 -0.1199 -0.1081 -0.0783 -0.0749 -0.0986 -0.0854 -0.0766 -0.0608 -0.0934 -0.4166 -0.0589 -0.0543 -0.6835 -0.0909 -0.1195 -0.1990 -0.1544 -0.0838 -0.0676 -0.0881 -0.2748 -0.0528 -0.0992 -0.0579 -0.0756 -0.0767 -0.6046 -0.0867 -0.0728 -0.0888 -0.0546 -0.0755 -0.0576 -0.0794 -0.1101 -0.0702 -0.0569 -0.0639 -0.1065 -0.1042 -0.7584 -0.0888 -0.0714 -0.1066 -0.0792 -0.0858 -0.0675 -0.0632 -0.0896 -0.1128 -0.0496 -0.0744 -0.0479 -0.0730 -0.1098 -0.0793 -0.0768 -0.0580 -0.0646 -0.1555 -0.1411 -0.1284 -0.0070 -0.0831 -0.0520 -0.1066 -1.5258 -0.0669 -0.0465 -0.1195 -0.1423 -0.1078 -0.0435 -0.0969 -0.0847 -0.3231 -0.1050 -0.0331 -0.1033 -0.0942 -0.0394 -0.0962 -0.5559 -0.0341 -0.1076 -0.0672 -0.0950 -0.0930 -0.0315 -0.1043 -0.0625 -0.1109 -0.1161 -0.0995 -0.0492 -0.6061 -0.0464 -0.6577 -0.2154 -0.0599 -0.2090 -0.0679 -0.0947 -0.0923 -0.0332 -0.1188 -0.0720 -0.1227 -0.1017 -0.1056 -0.0608 -0.0919 -0.0984 -0.1806 -0.1069 -0.0339 -0.4403 -0.2122 -0.2197 -0.1007 -0.0894 -0.1217 -1.0646 -0.0855 -0.0596 -0.1124 -0.0400 -0.1069 -0.0918 -0.6785 -0.2186 -0.0602 -0.3733 -0.0589 -0.0940 -0.0546 -0.8619 -0.1801 -0.0613 -0.2394 -0.0764 -0.0812 -0.1486 -0.0632 -0.0803 -0.1081 -0.8852 -0.0632 -0.1044 -0.0854 -0.1282 -0.0966 -0.0919 -0.1405 -0.0656 -0.0849 -0.0909 -0.0814 -0.1100 -0.9056 -0.1163 -0.0396 -0.1317 -0.0682 -0.1216 -0.1532 -0.1137 -0.0347 -0.0983 -0.2858 -0.1027 -0.0753 -0.0955 -0.0903 -0.1000 -0.0947 -0.0665 -0.0851 -1.6907 -0.1125 -0.0662 -0.0624 -0.0619 -0.0672 -0.1305 -0.9581 -0.1207 -0.0434 -0.9581 -1.4808 -0.0945 -0.0883 -0.0890 -0.0765 -0.0891
S-41	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; { int i = 0; while ( i < nums.length ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; i += 1; } } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-41	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; { int i = 0; while ( i < nums.length ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; i += 1; } } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-41	-0.19921962916851044	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; { int i = 0; while ( i < nums.length ) { int neg = 1; int n = nums[i] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; i += 1; } } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-41	-0.19921962916851044	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; { int i = 0; while ( i < nums.length ) { int neg = 1; int n = nums[i] ; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; i += 1; } } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-41	-0.0945 -0.0477 -1.1397 -1.3978 -0.0391 -0.0795 -0.0433 -0.0859 -0.0253 -0.1087 -1.0956 -1.5647 -0.0362 -0.0806 -0.0927 -1.2073 -0.2271 -0.0454 -0.2212 -0.0299 -0.0914 -0.0503 -0.9700 -0.1546 -0.0541 -0.1703 -0.0654 -0.0865 -1.2986 -0.1486 -0.0373 -0.1909 -0.6488 -0.1381 -0.0383 -0.2213 -0.0218 -0.0545 -0.0538 -0.0816 -0.0467 -1.0178 -0.1374 -0.0420 -0.2245 -0.7476 -0.1031 -0.0391 -0.2329 -0.0691 -0.0857 -0.4984 -0.0563 -0.1137 -0.0929 -0.6038 -0.0499 -0.1010 -0.0736 -0.0934 -0.0561 -0.0884 -0.0579 -0.0873 -0.0811 -0.0801 -0.0715 -0.0923 -1.0742 -0.0719 -0.0693 -0.0816 -0.0425 -0.3344 -0.3555 -2.0656 -0.1068 -0.1502 -0.1082 -0.0673 -0.0813 -0.0945 -0.0855 -0.0765 -0.0582 -0.0937 -0.4648 -0.0543 -0.0529 -0.7893 -0.0994 -0.1194 -0.2086 -0.1514 -0.0824 -0.0555 -0.0875 -0.2615 -0.0504 -0.1012 -0.0556 -0.0785 -0.0706 -0.5091 -0.0848 -0.0729 -0.0932 -0.0464 -0.0687 -0.0607 -0.0807 -0.1128 -0.0679 -0.0610 -0.0595 -0.1053 -0.0887 -0.7091 -0.0800 -0.0746 -0.0942 -0.0794 -0.0874 -0.0625 -0.0709 -0.0937 -0.1421 -0.0432 -0.0762 -0.0492 -0.0754 -0.1100 -0.0797 -0.0712 -0.0564 -0.0651 -0.1649 -0.1404 -0.1275 -0.0072 -0.0824 -0.0428 -0.1039 -1.4975 -0.0651 -0.0339 -0.1134 -0.1418 -0.1096 -0.0444 -0.0942 -0.0835 -0.4049 -0.1042 -0.0352 -0.0998 -0.0952 -0.0373 -0.0941 -0.5172 -0.0339 -0.1082 -0.0714 -0.0949 -0.0914 -0.0276 -0.1065 -0.0576 -0.1102 -0.1333 -0.1026 -0.0543 -0.7367 -0.0493 -0.5902 -0.2619 -0.0601 -0.1813 -0.0657 -0.0950 -0.0932 -0.0235 -0.1292 -0.0676 -0.1125 -0.1076 -0.1054 -0.0638 -0.0934 -0.0993 -0.1695 -0.1058 -0.0343 -0.3587 -0.2510 -0.2300 -0.0983 -0.0908 -0.0561 -0.0546 -1.2536 -0.0822 -0.0579 -0.9622 -0.0838 -0.0553 -0.1151 -0.0360 -0.1131 -0.0917 -0.8817 -0.2284 -0.0642 -0.4513 -0.0638 -0.0973 -0.0597 -1.0256 -0.1986 -0.0708 -0.2555 -0.0715 -0.0822 -0.0667 -0.1100 -0.0640 -0.0551 -0.0801 -0.7672 -0.0726 -0.0791 -0.0757 -0.0992 -0.1124 -0.0617 -0.0876 -0.0597 -0.0720 -0.1274 -0.0810 -0.1049 -0.0718 -0.1066 -1.4222 -0.1158 -0.0263 -0.1616 -0.0570 -0.1038 -0.1400 -0.1116 -0.0320 -0.0966 -0.3069 -0.1009 -0.0739 -0.0970 -0.0911 -0.1058 -0.0890 -0.0714 -0.0586 -0.0525 -0.1170 -0.9652 -0.1262 -0.0460 -0.9663 -1.5274 -0.0947 -0.0900 -0.0910 -0.0749 -0.0860
S-9	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; { int j = 0; while ( j < ( n + "" ) .toCharArray () .length ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; j += 1; } } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-9	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; { int j = 0; while ( j < ( n + "" ) .toCharArray () .length ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; j += 1; } } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-9	-0.19575396180152893	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; { int j = 0; while ( j < ( n + "" ) .toCharArray () .length ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; j += 1; } } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-9	-0.19575396180152893	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; { int j = 0; while ( j < ( n + "" ) .toCharArray () .length ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; j += 1; } } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result. addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-9	-0.0925 -0.0497 -1.1189 -1.4327 -0.0378 -0.0793 -0.0426 -0.0858 -0.0252 -0.1097 -1.0845 -1.6026 -0.0405 -0.0810 -0.0937 -1.3608 -0.2194 -0.0457 -0.2177 -0.0295 -0.0916 -0.0508 -0.9613 -0.1523 -0.0543 -0.1708 -0.0655 -0.0869 -1.4425 -0.1434 -0.0382 -0.1895 -0.6510 -0.1382 -0.0389 -0.2097 -0.0229 -0.0575 -0.0597 -0.0832 -0.0460 -1.0598 -0.1340 -0.0422 -0.2269 -0.7731 -0.1081 -0.0408 -0.2522 -0.0692 -0.0897 -0.1276 -0.1086 -0.0596 -0.0708 -0.0740 -0.7496 -0.0783 -0.0845 -0.0626 -0.0962 -0.0538 -0.3904 -0.0598 -0.0807 -0.1441 -0.0773 -0.0862 -0.0768 -0.0340 -0.0948 -1.3069 -0.0803 -0.0766 -0.0851 -0.0508 -0.3729 -0.3893 -1.6868 -0.1080 -0.1089 -0.0750 -0.0775 -0.0981 -0.0851 -0.0749 -0.0592 -0.0912 -0.4079 -0.0547 -0.0544 -0.7630 -0.0894 -0.1137 -0.1911 -0.1431 -0.0855 -0.0666 -0.0902 -0.2612 -0.0899 -0.0641 -0.0815 -0.0830 -0.5823 -0.0621 -0.0994 -0.1123 -0.0875 -0.0920 -0.0461 -0.0758 -0.0588 -0.0820 -0.1035 -0.0613 -0.0545 -0.0633 -0.1032 -0.1070 -0.0864 -0.0704 -0.0585 -0.0817 -0.0975 -0.1438 -0.0440 -0.0723 -0.0491 -0.0752 -0.1112 -0.0782 -0.0721 -0.0573 -0.0654 -0.1595 -0.1284 -0.1349 -0.0076 -0.0858 -0.0381 -0.0903 -1.2646 -0.0594 -0.0482 -0.4624 -0.0747 -0.0579 -0.0467 -0.1163 -0.1459 -0.1096 -0.0450 -0.0951 -0.0852 -0.3549 -0.1057 -0.0326 -0.0964 -0.0934 -0.0372 -0.0965 -0.5493 -0.0350 -0.1085 -0.0666 -0.0939 -0.0936 -0.0255 -0.1035 -0.0584 -0.1110 -0.1164 -0.1003 -0.0514 -0.6481 -0.0458 -0.6468 -0.2078 -0.0628 -0.2162 -0.0673 -0.0946 -0.0913 -0.0334 -0.1164 -0.0694 -0.1140 -0.1023 -0.1062 -0.0597 -0.0913 -0.0990 -0.1698 -0.1067 -0.0381 -0.3904 -0.2164 -0.2228 -0.1016 -0.0885 -0.1074 -1.1301 -0.0852 -0.0645 -0.1134 -0.0352 -0.1111 -0.0922 -0.8274 -0.2286 -0.0651 -0.4784 -0.0650 -0.0977 -0.0583 -0.9859 -0.1900 -0.0704 -0.2533 -0.0728 -0.0806 -0.0624 -0.1099 -0.0606 -0.0674 -0.0822 -0.7752 -0.0664 -0.0750 -0.0665 -0.0976 -0.1280 -0.0843 -0.0860 -0.0601 -0.0787 -0.1279 -0.0824 -0.1051 -0.0733 -0.1059 -1.4364 -0.1162 -0.0267 -0.1446 -0.0603 -0.1034 -0.1511 -0.1117 -0.0349 -0.0980 -0.3223 -0.1018 -0.0740 -0.0942 -0.0918 -0.1068 -0.0874 -0.0724 -0.0587 -0.0524 -0.1214 -1.0069 -0.1261 -0.0437 -0.9674 -1.5679 -0.0938 -0.0896 -0.0913 -0.0759 -0.0822
S-65	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; { int i = min_index; while ( i < arr.size () ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-65	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; { int i = min_index; while ( i < arr.size () ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-65	-0.17099401354789734	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; { int i = min_index ; while ( i < arr.size () ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < min_index ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-65	-0.17099401354789734	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; { int i = min_index ; while ( i < arr.size () ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < min_index ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-65	-0.0882 -0.0417 -0.1045 -0.0330 -0.0820 -0.0553 -0.0881 -0.0074 -0.1110 -1.1288 -0.2279 -0.0461 -0.1582 -0.0691 -0.0842 -0.0886 -0.1975 -0.1072 -0.0779 -0.1479 -0.1566 -0.0708 -0.1489 -0.0897 -0.0825 -0.0863 -0.1127 -0.8292 -1.1160 -0.1762 -0.0455 -0.1518 -0.1519 -0.0808 -0.0348 -0.0820 -0.0560 -0.7645 -0.1868 -0.1393 -0.0956 -0.0825 -0.0923 -1.5200 -0.0897 -0.0442 -0.1086 -0.1984 -0.0798 -0.0576 -0.0878 -0.0937 -0.1356 -0.0968 -0.0896 -0.0380 -0.0966 -0.2051 -0.1049 -0.0564 -0.1322 -0.1724 -0.1167 -0.1978 -0.1013 -0.0625 -0.1026 -0.1462 -0.0634 -0.5131 -0.1185 -0.0887 -0.0926 -0.2159 -0.1050 -0.0878 -0.0394 -0.0744 -1.1307 -0.1452 -0.1039 -0.0749 -0.0844 -0.0741 -1.2451 -0.0848 -0.0808 -0.1134 -0.0998 -0.1560 -0.0686 -0.0882 -0.0893 -0.8375 -0.0723 -0.1003 -0.1060 -0.1093 -0.0832 -0.1012 -0.2102 -0.1158 -0.0798 -0.0911 -0.1904 -0.1593 -0.0801 -0.0572 -0.0884 -0.2857 -0.0875 -0.0484 -0.1018 -0.0830 -1.5768 -0.0777 -1.1029 -0.1430 -0.0401 -0.1550 -0.0427 -0.0763 -0.0680 -0.0904 -0.0399 -0.0839 -0.0461 -0.5999 -0.1888 -0.0634 -0.0854 -0.1981 -0.0969 -0.0958 -0.0792 -0.2237 -0.1070 -0.0475 -0.5507 -0.1654 -0.0996 -0.0871 -0.1191 -0.1109 -0.0995 -0.1459 -0.0701 -0.0883 -0.0860 -0.1120 -0.1140 -0.0859 -0.1039 -0.0552 -0.1097 -0.2126 -0.1044 -0.0872 -0.1050 -0.2229 -0.1129 -0.0864 -0.0896 -0.0952 -0.0913 -0.1016 -0.3769 -0.1063 -0.0781 -0.1090 -0.1089 -0.0709 -0.0821 -0.0750 -1.0463 -0.0978 -0.0800 -0.4577 -0.0861 -0.0395 -0.6219 -0.0894 -0.6085 -0.0772 -0.0925 -0.1213 -0.0938 -0.1007 -0.0987 -0.0448 -0.0978 -0.1905 -0.1024 -0.0811 -0.1041 -0.2112 -0.1137 -0.0882 -0.0920 -0.0941 -0.0949 -0.0862 -0.0918 -0.1008 -0.0741 -0.0714 -0.0764 -0.7585 -0.0950 -0.0668 -0.0876 -0.1101 -0.1384 -0.0746 -0.0938 -0.0820 -0.6224 -0.0745 -0.0979 -0.1037 -0.1074 -0.1043 -0.0982 -0.0804 -0.1031 -0.0424 -0.1095 -0.2031 -0.1195 -0.0874 -0.0921 -0.1382 -0.1973 -0.0962 -0.0549 -0.1369 -0.2868 -0.1140 -0.0744 -0.0905 -0.0905 -0.1303 -0.0916 -0.0718 -1.4761 -0.0916 -0.0712 -0.0606 -0.0627 -0.6222 -0.0851 -0.0816
S-60	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; { int i = 0; while ( i < arr.size () ) { if ( arr.get ( i ) == min_value ) min_index = i; i++; } } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-60	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; { int i = 0; while ( i < arr.size () ) { if ( arr.get ( i ) == min_value ) min_index = i; i++; } } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-60	-0.17222817242145538	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; { int i = 0; while ( i < arr.size () ) { if ( arr.get ( i ) == min_value ) min_index = i; i++; } } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
D-60	-0.17222817242145538	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; { int i = 0; while ( i < arr.size () ) { if ( arr.get ( i ) == min_value ) min_index = i; i++; } } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false ; } } return true ; }
P-60	-0.0879 -0.0417 -0.1025 -0.0330 -0.0820 -0.0558 -0.0879 -0.0075 -0.1108 -1.1252 -0.2250 -0.0466 -0.1595 -0.0696 -0.0836 -0.0888 -0.1942 -0.1073 -0.0753 -0.1499 -0.1543 -0.0713 -0.1443 -0.0904 -0.0831 -0.0848 -0.1082 -0.7344 -1.1141 -0.1757 -0.0460 -0.1551 -0.1580 -0.0802 -0.0351 -0.0824 -0.0557 -0.7599 -0.2072 -0.1364 -0.0966 -0.0823 -0.0929 -1.5471 -0.0895 -0.0436 -0.1078 -0.1977 -0.0795 -0.0585 -0.0878 -0.0923 -0.1244 -0.1020 -0.0903 -0.0430 -0.0970 -0.2101 -0.1046 -0.0577 -0.1359 -0.1685 -0.1155 -0.2058 -0.1005 -0.0622 -0.1034 -0.1437 -0.0636 -0.4123 -0.1176 -0.0886 -0.0912 -0.1282 -0.1057 -0.0855 -0.0366 -0.0784 -0.7296 -0.1708 -0.1127 -0.1175 -0.0906 -1.1349 -0.0864 -0.1000 -0.1005 -0.0983 -0.1358 -0.0928 -0.1414 -0.0700 -0.0829 -0.0708 -0.1144 -0.1100 -0.0713 -0.1060 -0.1886 -0.1144 -0.0820 -0.0912 -0.1869 -0.1606 -0.0818 -0.0625 -0.0894 -0.3146 -0.0930 -0.0446 -0.1050 -0.0899 -1.4959 -0.1025 -0.3536 -0.1193 -0.0649 -1.1846 -0.1547 -0.0408 -0.1625 -0.0422 -0.0701 -0.0712 -0.0884 -0.0388 -0.0857 -0.0463 -0.6716 -0.2408 -0.0643 -0.0864 -0.0889 -0.1122 -0.0669 -0.0866 -0.0735 -0.5391 -0.1129 -0.0488 -1.2137 -0.0769 -0.0998 -0.0925 -0.1006 -0.1425 -0.0712 -0.0851 -0.1071 -0.8287 -0.0776 -0.1037 -0.1178 -0.0995 -0.0902 -0.1006 -0.0493 -0.1120 -0.1914 -0.1071 -0.0697 -0.1077 -0.2014 -0.1141 -0.0827 -0.0935 -0.0977 -0.0918 -0.0773 -0.1105 -0.1029 -0.0753 -0.0830 -0.0821 -0.9486 -0.0913 -0.0766 -1.6034 -0.1018 -0.1231 -0.0711 -0.0957 -0.0843 -0.5676 -0.0768 -0.0895 -0.1186 -0.0886 -0.0945 -0.1007 -0.0422 -0.0960 -0.1838 -0.1031 -0.0724 -0.1095 -0.2097 -0.1134 -0.0829 -0.0903 -0.0918 -0.0940 -0.0770 -0.0909 -0.1018 -0.0751 -0.0706 -0.0787 -0.7585 -0.0907 -0.0661 -0.0886 -0.1111 -0.1059 -0.0719 -0.0929 -0.0870 -0.6460 -0.0743 -0.0969 -0.1106 -0.1071 -0.0947 -0.0958 -0.0818 -0.1034 -0.0421 -0.1074 -0.2044 -0.1188 -0.0883 -0.0922 -0.1356 -0.2012 -0.0954 -0.0551 -0.1387 -0.2849 -0.1141 -0.0742 -0.0888 -0.0912 -0.1265 -0.0897 -0.0763 -1.2974 -0.0902 -0.0743 -0.0618 -0.0684 -0.5217 -0.0856 -0.0810
S-53	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < min_index ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-53	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < min_index ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-53	-0.17151904106140137	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i ++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i ++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < min_index ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < arr.size () ; i ++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-53	-0.17151904106140137	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i ++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i ++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < min_index ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < arr.size () ; i ++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-53	-0.0877 -0.0413 -0.1021 -0.0327 -0.0820 -0.0553 -0.0880 -0.0074 -0.1110 -1.1364 -0.2284 -0.0460 -0.1586 -0.0697 -0.0836 -0.0880 -0.2043 -0.1065 -0.0787 -0.1485 -0.1508 -0.0709 -0.1416 -0.0892 -0.0824 -0.0882 -0.1147 -0.7699 -1.1288 -0.1726 -0.0452 -0.1517 -0.1585 -0.0802 -0.0345 -0.0820 -0.0552 -0.7632 -0.1896 -0.1349 -0.0962 -0.0819 -0.0921 -1.5026 -0.0897 -0.0439 -0.1081 -0.1991 -0.0797 -0.0575 -0.0885 -0.0920 -0.1359 -0.0985 -0.0902 -0.0383 -0.0966 -0.2050 -0.1042 -0.0570 -0.1337 -0.1725 -0.1159 -0.1911 -0.1006 -0.0632 -0.1025 -0.1422 -0.0641 -0.4351 -0.1183 -0.0889 -0.0918 -0.2626 -0.1082 -0.0878 -0.0400 -0.0751 -1.1340 -0.1446 -0.1022 -0.0742 -0.0835 -0.0738 -1.2928 -0.0812 -0.0794 -0.1130 -0.1004 -0.1526 -0.0686 -0.0862 -0.0913 -3.3534 -0.0701 -0.1006 -0.1109 -0.1084 -0.0779 -0.0995 -0.2130 -0.1129 -0.0719 -0.0907 -0.1817 -0.1518 -0.0787 -0.0578 -0.0874 -0.2311 -0.0858 -0.0477 -0.0980 -0.0771 -1.0720 -0.0708 -0.8265 -0.1278 -0.0374 -0.1457 -0.0422 -0.0727 -0.0636 -0.0848 -0.0382 -0.0800 -0.0493 -0.6128 -0.2066 -0.0619 -0.0830 -0.1161 -0.1030 -0.0622 -0.0867 -0.0837 -0.2201 -0.1100 -0.0561 -0.8180 -0.0729 -0.0906 -0.0820 -0.1002 -0.1278 -0.0669 -0.0875 -0.0939 -0.5929 -0.0798 -0.0923 -0.1143 -0.1067 -0.0839 -0.1023 -0.0496 -0.1069 -0.1750 -0.1045 -0.0658 -0.1047 -0.2027 -0.1114 -0.0804 -0.0913 -0.0960 -0.0867 -0.0922 -0.4360 -0.0809 -0.0955 -0.0967 -1.0236 -0.0523 -0.0985 -0.0898 -0.1092 -0.1220 -0.0914 -0.0471 -0.0882 -0.0780 -0.0889 -0.0936 -0.0998 -0.1033 -0.0469 -0.0920 -0.1722 -0.1012 -0.0833 -0.1055 -0.2149 -0.1113 -0.0836 -0.0893 -0.0903 -0.0986 -0.0941 -0.2842 -0.0983 -0.0644 -0.0865 -0.1032 -0.0709 -0.0774 -0.0816 -0.7535 -0.0867 -0.0678 -0.0865 -0.1040 -0.1320 -0.0735 -0.0922 -0.0825 -0.4429 -0.0842 -0.0924 -0.0885 -0.1074 -0.0798 -0.1077 -0.0774 -0.1035 -0.0404 -0.1076 -0.2056 -0.1188 -0.0797 -0.0911 -0.1467 -0.2000 -0.0941 -0.0520 -0.1217 -0.2592 -0.1109 -0.0715 -0.0910 -0.0873 -0.1161 -0.0804 -0.0654 -1.0581 -0.0851 -0.0589 -0.0660 -0.0506 -0.8019 -0.0826 -0.0855
S-40	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < arr.size () ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } i++; } } return true; }
T-40	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < arr.size () ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } i++; } } return true; }
H-40	-0.17579185962677002	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < arr.size () ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } i++; } } return true ; }
D-40	-0.17579185962677002	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < arr.size () ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } i++; } } return true ; }
P-40	-0.0863 -0.0406 -0.1026 -0.0327 -0.0820 -0.0549 -0.0879 -0.0074 -0.1102 -1.1340 -0.2296 -0.0462 -0.1575 -0.0696 -0.0836 -0.0875 -0.2043 -0.1064 -0.0780 -0.1502 -0.1519 -0.0703 -0.1438 -0.0900 -0.0825 -0.0858 -0.1050 -0.6955 -1.1326 -0.1713 -0.0453 -0.1497 -0.1622 -0.0814 -0.0330 -0.0814 -0.0545 -0.7545 -0.1881 -0.1344 -0.0968 -0.0825 -0.0921 -1.4808 -0.0896 -0.0435 -0.1082 -0.1960 -0.0797 -0.0557 -0.0879 -0.0916 -0.1300 -0.0961 -0.0902 -0.0391 -0.0974 -0.2041 -0.1035 -0.0554 -0.1354 -0.1740 -0.1152 -0.2005 -0.0999 -0.0617 -0.1028 -0.1408 -0.0635 -0.4507 -0.1176 -0.0890 -0.0919 -0.2548 -0.1063 -0.0884 -0.0401 -0.0756 -1.1229 -0.1624 -0.1033 -0.0741 -0.0823 -0.0749 -1.2753 -0.0822 -0.0797 -0.1203 -0.1007 -0.1500 -0.0678 -0.0864 -0.0926 -0.8510 -0.0734 -0.0996 -0.1122 -0.1061 -0.0832 -0.1026 -0.2089 -0.1137 -0.0793 -0.0903 -0.1924 -0.1630 -0.0800 -0.0585 -0.0883 -0.2387 -0.0868 -0.0479 -0.1032 -0.0834 -1.3080 -0.0772 -1.2251 -0.1492 -0.0409 -0.1503 -0.0451 -0.0760 -0.0699 -0.0900 -0.0399 -0.0855 -0.0480 -0.6627 -0.2172 -0.0639 -0.0867 -0.0936 -0.1066 -0.0667 -0.0852 -0.0742 -0.6289 -0.1123 -0.0544 -1.3750 -0.0755 -0.0967 -0.0873 -0.1000 -0.1328 -0.0686 -0.0871 -0.0970 -0.5956 -0.0755 -0.1039 -0.1242 -0.1021 -0.0873 -0.1026 -0.0499 -0.1100 -0.1916 -0.1053 -0.0758 -0.1052 -0.2015 -0.1113 -0.0821 -0.0922 -0.0965 -0.0901 -0.0713 -0.2034 -0.1011 -0.0735 -0.0747 -0.0791 -0.7842 -0.0928 -0.0781 -0.2348 -0.0846 -0.0343 -0.7668 -0.0888 -0.5512 -0.0748 -0.0934 -0.1027 -0.0913 -0.1060 -0.1006 -0.0445 -0.0954 -0.1836 -0.0995 -0.0810 -0.1017 -0.2162 -0.1093 -0.0819 -0.0904 -0.0922 -0.0898 -0.0992 -0.2269 -0.0869 -0.0933 -0.1274 -1.5968 -0.0645 -0.1012 -0.1023 -0.1105 -0.1114 -0.0962 -0.1381 -0.0765 -0.0842 -0.0819 -0.1235 -0.1073 -0.1146 -0.1109 -0.0923 -0.1016 -0.0405 -0.1127 -0.2596 -0.1203 -0.0882 -0.0903 -0.1645 -0.2098 -0.0955 -0.0589 -0.1287 -0.2628 -0.1105 -0.0737 -0.0886 -0.0894 -0.1262 -0.1183 -0.0733 -1.0579 -0.0853 -0.0994 -0.5503 -0.0931 -0.0912 -0.0593 -0.0659 -0.5788 -0.0887 -0.0860
S-89	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; { int i = 0; while ( i < month_check1.length ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; i++; } } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-89	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; { int i = 0; while ( i < month_check1.length ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; i++; } } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-89	-0.20271824300289154	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; { int i = 0; while ( i < month_check1.length ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; i++; } } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true ; }
D-89	-0.20271824300289154	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; { int i = 0; while ( i < month_check1.length ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; i++; } } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length ; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true ; }
P-89	-0.0858 -0.0530 -0.0791 -0.0394 -0.0974 -0.0432 -0.1201 -1.3851 -0.0458 -0.0813 -0.0913 -0.5432 -0.0939 -3.2520 -0.0561 -0.1728 -0.0803 -0.2333 -2.0532 -0.0330 -0.1126 -0.0973 -0.0730 -0.0552 -0.1203 -0.5563 -0.1635 -0.0259 -0.0882 -0.0956 -0.3571 -0.1111 -0.0554 -0.1025 -0.1287 -0.1176 -0.0797 -0.1093 -0.0602 -0.0804 -0.0836 -0.0599 -1.2071 -0.1062 -0.0550 -0.0947 -0.9310 -0.0945 -1.3497 -0.1054 -0.0364 -0.0951 -0.0943 -0.8848 -0.0913 -0.0918 -0.0760 -0.0367 -0.0964 -0.7753 -0.0945 -1.2780 -0.1068 -0.0397 -0.0950 -0.0804 -0.3828 -0.0853 -0.0973 -0.0961 -0.0735 -0.0864 -0.5878 -0.0917 -1.2615 -0.1054 -0.0369 -0.0946 -0.0685 -0.0940 -0.0775 -0.0888 -0.2679 -0.1045 -0.1411 -0.0761 -0.1560 -0.1250 -0.0871 -0.0840 -0.0234 -0.0815 -0.0616 -0.0771 -0.8591 -0.0913 -1.7936 -0.0634 -0.0818 -0.0588 -0.0513 -0.0857 -0.0733 -0.1802 -0.0449 -0.0387 -0.0327 -0.0570 -0.1102 -0.0475 -0.1129 -0.1165 -0.0727 -0.0903 -0.0860 -0.5132 -0.0892 -0.0985 -0.0730 -0.1014 -0.1359 -0.0997 -0.0663 -0.0372 -0.0662 -0.0913 -0.0689 -0.1286 -0.1129 -0.1128 -0.1237 -0.0611 -0.1035 -0.0576 -0.2621 -0.1775 -0.1274 -1.2391 -0.1830 -0.1053 -0.0556 -0.0633 -0.1002 -0.1239 -0.0573 -0.1050 -0.0128 -0.0798 -0.0894 -0.0724 -0.0565 -0.4277 -0.0966 -0.1628 -0.1058 -0.0825 -0.1088 -1.5165 -0.1018 -0.0886 -0.0577 -0.0544 -0.0798 -0.0651 -0.0842 -0.0397 -0.1242 -0.0482 -0.1300 -0.2166 -0.1056 -0.0564 -0.0619 -0.0687 -0.4920 -0.0763 -0.0629 -0.1246 -0.0962 -0.0763 -0.0228 -0.0939 -1.2770 -0.0679 -0.3767 -0.0768 -0.0927 -0.1030 -0.1147 -0.1993 -0.1334 -0.0826 -0.1015 -0.0556 -0.2973 -0.1496 -0.1007 -0.6287 -0.1669 -0.0649 -0.0859 -0.1096 -0.0725 -0.0621 -0.1161 -0.0224 -0.0815 -0.0840 -0.0597 -0.0717 -0.5074 -0.1023 -0.1759 -0.1055 -0.1006 -0.0738 -0.1057 -0.1789 -0.1206 -0.0554 -0.0636 -0.0889 -0.0728 -0.0574 -0.1119 -0.0415 -0.0765 -0.0876 -0.0582 -0.0539 -0.6982 -0.1021 -1.0374 -0.0433 -0.1188 -0.1440 -0.0631 -0.0765 -0.1086 -0.0871 -0.0640 -0.6751 -0.0759 -0.0854 -0.0622 -1.5490 -0.0815 -0.0788
S-77	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; { int i = 0; while ( i < month_check2.length ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; i++; } } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-77	public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; { int i = 0; while ( i < month_check2.length ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; i++; } } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-77	-0.20057642459869385	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; { int i = 0; while ( i < month_check2.length ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; i++; } } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true ; }
D-77	-0.20057642459869385	public static boolean valid_date ( String date ) { try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; { int i = 0; while ( i < month_check2.length ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; i++; } } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true ; }
P-77	-0.0865 -0.0517 -0.0784 -0.0391 -0.0981 -0.0432 -0.1202 -1.4042 -0.0455 -0.0808 -0.0913 -0.5241 -0.0939 -3.2080 -0.0567 -0.1756 -0.0804 -0.2346 -2.0303 -0.0329 -0.1115 -0.0975 -0.0731 -0.0551 -0.1208 -0.5485 -0.1603 -0.0260 -0.0883 -0.0949 -0.3533 -0.1111 -0.0562 -0.1034 -0.1298 -0.1167 -0.0786 -0.1081 -0.0607 -0.0811 -0.0849 -0.0615 -1.3561 -0.1065 -0.0532 -0.0943 -0.9137 -0.0938 -1.3705 -0.1061 -0.0364 -0.0954 -0.0951 -0.8856 -0.0907 -0.0926 -0.0760 -0.0364 -0.0973 -0.7698 -0.0945 -1.2834 -0.1067 -0.0394 -0.0951 -0.0811 -0.3842 -0.0853 -0.0974 -0.0942 -0.0724 -0.0859 -0.5908 -0.0917 -1.2815 -0.1055 -0.0372 -0.0954 -0.0696 -0.0943 -0.0776 -0.0889 -0.2834 -0.1045 -0.1388 -0.0761 -0.1605 -0.1192 -0.0914 -0.0844 -0.0227 -0.0804 -0.0608 -0.0800 -0.7928 -0.0972 -1.8391 -0.0628 -0.0816 -0.0613 -0.0494 -0.0859 -0.0707 -0.1589 -0.0421 -0.0376 -0.0331 -0.0570 -0.1006 -0.0444 -0.1299 -0.1696 -0.1019 -0.0569 -0.0751 -0.0686 -0.5393 -0.0767 -0.0775 -0.1617 -0.1008 -0.0734 -0.0383 -0.0603 -1.0735 -0.0696 -0.2050 -0.0737 -0.0889 -0.1241 -0.1100 -0.1063 -0.1299 -0.0649 -0.0992 -0.0557 -0.2134 -0.1917 -0.1386 -0.9979 -0.2046 -0.1085 -0.0536 -0.0668 -0.0982 -0.1237 -0.0581 -0.1112 -0.0169 -0.0793 -0.0893 -0.0707 -0.0651 -0.5906 -0.1054 -0.1022 -1.4199 -0.0977 -0.0888 -0.0575 -0.0516 -0.0809 -0.0664 -0.0833 -0.0394 -0.1317 -0.0500 -0.0991 -0.1787 -0.0685 -0.0791 -0.0886 -0.4951 -0.0820 -0.0936 -0.0728 -0.0735 -0.1226 -0.0952 -0.0676 -0.0231 -0.0746 -0.0957 -0.0801 -0.1189 -0.1135 -0.1686 -0.1293 -0.0951 -0.1008 -0.0527 -0.2594 -0.1528 -0.1079 -0.5253 -0.1630 -0.0663 -0.0787 -0.1089 -0.0759 -0.0626 -0.1020 -0.0205 -0.0817 -0.0828 -0.0688 -0.0629 -0.3800 -0.1118 -0.1187 -0.1051 -0.0870 -0.1706 -0.1079 -0.0967 -0.0816 -0.0977 -0.1965 -0.1260 -0.0585 -0.0675 -0.0894 -0.0771 -0.0589 -0.1100 -0.0535 -0.0781 -0.0867 -0.0606 -0.0570 -0.6306 -0.1057 -1.2999 -0.0501 -0.1196 -0.1461 -0.0635 -0.0765 -0.1055 -0.0844 -0.0626 -0.6673 -0.0753 -0.0820 -0.0668 -1.5668 -0.0813 -0.0743
S-93	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; { int i = 0; while ( i < list_letters.length ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; i++; } } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-93	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; { int i = 0; while ( i < list_letters.length ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; i++; } } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-93	-0.20311808586120605	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; { int i = 0; while ( i < list_letters.length ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; i++; } } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-93	-0.20311808586120605	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; { int i = 0; while ( i < list_letters.length ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; i++; } } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-93	-0.0934 -0.0548 -1.1167 -0.3022 -0.0250 -0.2442 -0.9482 -0.1375 -0.0385 -0.1063 -1.2496 -0.1152 -0.0841 -0.0898 -0.9901 -0.2224 -0.0308 -0.2490 -0.8352 -0.1564 -0.1360 -0.0853 -0.0621 -1.1695 -0.1698 -0.0328 -0.2545 -0.7460 -0.1550 -0.0765 -0.0858 -0.1859 -0.1163 -0.1079 -0.1801 -0.9314 -0.0581 -0.0863 -0.1051 -0.1559 -0.2669 -1.7628 -2.1889 -0.0564 -0.0864 -0.0553 -0.0805 -0.0661 -0.1155 -0.3354 -0.1089 -0.0788 -0.0758 -0.0803 -0.0912 -0.1003 -2.0357 -0.2563 -0.0794 -0.2051 -0.0882 -0.0565 -0.0653 -0.1286 -0.0290 -0.9673 -0.1388 -0.0874 -0.1045 -0.1023 -0.7203 -0.0799 -0.1064 -0.0857 -0.0861 -0.1134 -0.1083 -0.0593 -0.0787 -0.0821 -0.0908 -0.0774 -0.1730 -0.0677 -0.0863 -0.0574 -0.1123 -0.0634 -0.4868 -0.2542 -0.1789 -0.6851 -0.1208 -0.1181 -0.0902 -0.0860 -0.1779 -0.0904 -0.1983 -0.3269 -0.0786 -0.3811 -0.0451 -0.0483 -0.0660 -0.2774 -0.0773 -0.2114 -0.0990 -0.0833 -0.0759 -0.0376 -0.0935 -0.1048 -0.1030 -0.7311 -0.0979 -0.1079 -0.0604 -0.0789 -0.0853 -0.8926 -0.0726 -0.0867 -0.0302 -1.2438 -0.0717 -0.4175 -0.0742 -0.0905 -0.1086 -0.1111 -0.2176 -0.1001 -0.2067 -0.5894 -0.1916 -0.1128 -0.1044 -0.0392 -0.0848 -0.0839 -0.0897 -0.1133 -0.0608 -0.1015 -0.0846 -0.1189 -0.1323 -0.0954 -0.2226 -0.3835 -0.1546 -1.2594 -0.2303 -0.1024 -0.3529 -0.0680 -0.0942 -0.2326 -0.1026 -0.2804 -0.1138 -0.1941 -0.1449 -0.0770 -0.1067 -0.0557 -0.0524 -0.0527 -0.1003 -0.1092 -0.0912 -0.1209 -0.0589 -0.1038 -0.1163 -0.0984 -0.0941 -0.0908 -0.0872 -0.0773 -0.1095 -0.3124 -0.0919 -0.1924 -0.4540 -0.1341 -0.1249 -0.1007 -0.0793 -0.1048 -0.0999 -0.0910 -0.1229 -0.1460 -0.1008 -0.2428 -0.1074 -0.1222 -0.1228 -0.0809 -0.1029 -0.0761 -0.0540 -0.0631 -0.0829 -0.1060 -0.0882 -0.1178 -0.0867 -0.1018 -0.1166 -0.1012 -0.0945 -0.1022 -0.1018 -0.3715 -0.1118 -0.0339 -0.0970 -0.1001 -0.1029 -0.1116 -0.0902 -0.2677 -0.1147 -0.2569 -0.0642 -0.0903 -0.0823 -0.1469 -0.1517 -0.0813 -0.0765
S-68	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; { int i = 0; while ( i < 26 ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } i++; } } if ( most_count == 0 ) res.clear () ; return res; }
T-68	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; { int i = 0; while ( i < 26 ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } i++; } } if ( most_count == 0 ) res.clear () ; return res; }
H-68	-0.19918642938137054	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; { int i = 0; while ( i < 26 ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } i++; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-68	-0.19918642938137054	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; { int i = 0; while ( i < 26 ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } i++; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-68	-0.0908 -0.0572 -1.1066 -0.2950 -0.0248 -0.2390 -0.9557 -0.1347 -0.0386 -0.1063 -1.2581 -0.1156 -0.0836 -0.0892 -1.0328 -0.2198 -0.0305 -0.2452 -0.8367 -0.1549 -0.1359 -0.0838 -0.0612 -1.1805 -0.1712 -0.0325 -0.2540 -0.7472 -0.1511 -0.0760 -0.0866 -0.1928 -0.1163 -0.1059 -0.1776 -0.9171 -0.0581 -0.0855 -0.1030 -0.1592 -0.2571 -1.7836 -2.1770 -0.0547 -0.0879 -0.0573 -0.0811 -0.0656 -0.1149 -0.3435 -0.1093 -0.0777 -0.0759 -0.0798 -0.0916 -0.1159 -2.0379 -0.2292 -0.0785 -0.2256 -0.0890 -0.0563 -0.0695 -0.1540 -0.0308 -1.1587 -0.1335 -0.1114 -0.0655 -0.0843 -0.0734 -0.8552 -0.0847 -0.0610 -0.1054 -0.1088 -0.0629 -0.0920 -0.0701 -0.4983 -0.0720 -0.5386 -0.0693 -0.0858 -0.1554 -0.0653 -0.0853 -0.0577 -0.1138 -0.0639 -0.5066 -0.2526 -0.1788 -0.7105 -0.1238 -0.1199 -0.0901 -0.0864 -0.2901 -0.0911 -0.2211 -0.3499 -0.0728 -0.3084 -0.0481 -0.0482 -0.0580 -0.1966 -0.0929 -0.0639 -0.0362 -0.0941 -0.0891 -0.0990 -0.6542 -0.1265 -0.0775 -0.0996 -0.0977 -0.6975 -0.0943 -0.1055 -0.0849 -0.0897 -0.0278 -0.0812 -0.0769 -0.1122 -0.1108 -0.1972 -0.1024 -0.2317 -0.5107 -0.1696 -0.0910 -0.1046 -0.0420 -0.0856 -0.0828 -0.0877 -0.1048 -0.0535 -0.1035 -0.0836 -0.1147 -0.1190 -0.0927 -0.2586 -0.3912 -0.1504 -1.2154 -0.1823 -0.1008 -0.2471 -0.0674 -0.0931 -0.1931 -0.0980 -0.2663 -0.1109 -0.2100 -0.1404 -0.0745 -0.1039 -0.0571 -0.0531 -0.0531 -0.1033 -0.1071 -0.0907 -0.1162 -0.0587 -0.1091 -0.1132 -0.0983 -0.0933 -0.2974 -0.0868 -0.0771 -0.1069 -0.2521 -0.0947 -0.2216 -0.4212 -0.1339 -0.1138 -0.1027 -0.0731 -0.1061 -0.1100 -0.0890 -0.1198 -0.1171 -0.0995 -0.2461 -0.1060 -0.1215 -0.1329 -0.0812 -0.1007 -0.0692 -0.0542 -0.0572 -0.0831 -0.1038 -0.0869 -0.1043 -0.0675 -0.1038 -0.1108 -0.1018 -0.0960 -0.1781 -0.0825 -0.2470 -0.0997 -0.0781 -0.2516 -0.1107 -0.0284 -0.1001 -0.0890 -0.0977 -0.1017 -0.0910 -0.2092 -0.1132 -0.2554 -0.0645 -0.0897 -0.0787 -0.1496 -0.1618 -0.0800 -0.0756
S-75	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; { int i = 0; while ( i < k ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; i++; } } return ans; }
T-75	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; { int i = 0; while ( i < k ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; i++; } } return ans; }
H-75	-0.22867126762866974	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; { int i = 0; while ( i < k ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; i++; } } return ans ; }
D-75	-0.22867126762866974	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; { int i = 0; while ( i < k ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; i++; } } return ans ; }
P-75	-0.1045 -0.0406 -0.1063 -2.1089 -0.0416 -0.0996 -0.0350 -0.1137 -0.0960 -0.1446 -0.0259 -1.0090 -0.0883 -0.1154 -0.0782 -0.0974 -0.1130 -0.1952 -0.0816 -0.0414 -0.0944 -0.0734 -0.7297 -0.1227 -0.0730 -0.0926 -0.0923 -0.0324 -0.0995 -0.0944 -0.7680 -0.1401 -0.1067 -0.0683 -0.0962 -0.0753 -0.4914 -0.0915 -0.0608 -0.1031 -0.9540 -0.0826 -0.3893 -0.0726 -0.0821 -0.2022 -0.1063 -0.0699 -0.0968 -0.0908 -0.4106 -0.0974 -0.0562 -0.0890 -0.9700 -0.0704 -0.2180 -0.0771 -0.0947 -0.1625 -0.1119 -0.0767 -0.2470 -0.1876 -0.0324 -0.1323 -0.1162 -0.1055 -0.1491 -0.0828 -0.0758 -0.1888 -0.1186 -0.1682 -0.1260 -0.1125 -0.0763 -0.0748 -0.1270 -1.8583 -0.0968 -0.2404 -0.1090 -0.0751 -0.9418 -0.0512 -0.2307 -0.1145 -0.0688 -0.1107 -0.3022 -0.7404 -0.0910 -0.0905 -0.1309 -0.1166 -0.1673 -0.1282 -0.0984 -0.0730 -0.0797 -0.0849 -1.6992 -0.0925 -0.0688 -0.1100 -0.0781 -0.6027 -0.0458 -0.1924 -0.1210 -0.1324 -0.1502 -0.0147 -0.0978 -0.1113 -0.0910 -0.0900 -0.1245 -0.1025 -0.1269 -0.1241 -0.1693 -1.4523 -0.1168 -0.0743 -0.0887 -0.0850 -1.7591 -0.0909 -0.0682 -0.1017 -0.0913 -0.5610 -0.0450 -0.1943 -0.1069 -0.1577 -0.1219 -0.0118 -0.1066 -0.0920 -0.0860 -0.0902 -0.1162 -0.1050 -0.1011 -0.1081 -0.1298 -0.1744 -0.1405 -0.0773 -0.0903 -0.0940 -1.6848 -0.0890 -0.1566 -0.1008 -0.0894 -0.6927 -0.0408 -0.2145 -0.1079 -0.0310 -0.1063 -0.1270 -0.4357 -0.0831 -0.0948 -0.1014 -0.0938 -0.0985 -0.1426 -2.4627 -0.0287 -0.0989 -0.0672 -0.0674 -0.2641 -0.1073 -1.2868 -0.1426 -0.0958 -0.0901 -0.1080 -0.8555 -0.1040 -0.1075 -0.0951 -0.0927 -0.1435 -0.0953 -0.0903 -0.1479 -0.1201 -0.4123 -0.1120 -0.0886 -0.0449 -0.0874 -0.0790 -0.1049 -0.0868 -0.0729 -0.6255 -0.2424 -0.1090 -0.0933 -1.5482 -0.9728 -0.1755 -0.4768 -0.1020 -0.0886 -0.0928 -0.0352 -1.1884 -0.0748 -0.0751
S-23	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; { int i = 0; while ( i < n ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } i++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-23	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; { int i = 0; while ( i < n ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } i++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-23	-0.2358427345752716	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; { int i = 0; while ( i < n ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } i++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1 ; else ans[i] = val ; } return ans ; }
D-23	-0.2358427345752716	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; { int i = 0; while ( i < n ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } i++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1 ; else ans[i] = val ; } return ans ; }
P-23	-0.0995 -0.0417 -0.1044 -2.1034 -0.0427 -0.0988 -0.0349 -0.1130 -0.0964 -0.1423 -0.0258 -1.0038 -0.0890 -0.1171 -0.0796 -0.0975 -0.1052 -0.1542 -0.0849 -0.0417 -0.0941 -0.0717 -0.7112 -0.1084 -0.0747 -0.0930 -0.0846 -0.0309 -0.1013 -0.0813 -0.6948 -0.2122 -0.1038 -0.1090 -0.0915 -0.6552 -0.1018 -0.1019 -0.0788 -0.0799 -0.0983 -0.0902 -0.0877 -0.3835 -0.1097 -0.0763 -0.0904 -0.0871 -0.5637 -0.0946 -0.0737 -0.0960 -1.4877 -0.0682 -0.3934 -0.0788 -0.0893 -0.1443 -0.1130 -0.0954 -0.2793 -0.2267 -0.0319 -0.1309 -0.1048 -0.1011 -0.1570 -0.0822 -0.0753 -0.1686 -0.1193 -0.1777 -0.1206 -0.1105 -0.0770 -0.0825 -0.1268 -1.8222 -0.0957 -0.2327 -0.1076 -0.0787 -0.7917 -0.0469 -0.2234 -0.1257 -0.0602 -0.1083 -0.5152 -0.6774 -0.0899 -0.0913 -0.1368 -0.1137 -0.1509 -0.1207 -0.0968 -0.0742 -0.0817 -0.0882 -1.6217 -0.0926 -0.0653 -0.1097 -0.0791 -0.5517 -0.0418 -0.1923 -0.1299 -0.1414 -0.1507 -0.0167 -0.0983 -0.1227 -0.0909 -0.0880 -0.1273 -0.1017 -0.1614 -0.1225 -0.1536 -1.0178 -0.1193 -0.0763 -0.0879 -0.0886 -1.6760 -0.0900 -0.0705 -0.1013 -0.0889 -0.4938 -0.0435 -0.1926 -0.1103 -0.1636 -0.1206 -0.0137 -0.1058 -0.1079 -0.0851 -0.0890 -0.1204 -0.1026 -0.1046 -0.1075 -0.1308 -0.1708 -0.1514 -0.0769 -0.0923 -0.0965 -1.7140 -0.0885 -0.1607 -0.1003 -0.0877 -0.6661 -0.0416 -0.2208 -0.1117 -0.0292 -0.1090 -0.1319 -0.5575 -0.0822 -0.0949 -0.3673 -0.4179 -0.1276 -0.3245 -0.1089 -0.1438 -0.1251 -2.3648 -0.0260 -0.1003 -0.0647 -0.0752 -0.3180 -0.1130 -1.1993 -0.1243 -0.1077 -0.0644 -0.0746 -0.0767 -0.6606 -0.0850 -0.0664 -0.1549 -1.2798 -0.0826 -0.5897 -0.0840 -0.1003 -0.1469 -0.1146 -0.3147 -0.1007 -0.0747 -0.0429 -0.0871 -0.0766 -0.1022 -0.0861 -0.0572 -0.6677 -0.2274 -0.1267 -0.0929 -2.5786 -0.1576 -0.0768 -0.0873 -0.4949 -0.1767 -0.1659 -0.1002 -0.1011 -0.6333 -0.0691 -0.0982 -0.0346 -1.5336 -0.0753 -0.0766
S-4	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { { int j = 0; while ( j < n ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } j++; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
T-4	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { { int j = 0; while ( j < n ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } j++; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-4	-0.2403443157672882	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { int j = 0; while ( j < n ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; j++; } j++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-4	-0.2403443157672882	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n ; i++ ) { int j = 0; while ( j < n ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; j++; } j++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-4	-0.0988 -0.0420 -0.1033 -2.1062 -0.0422 -0.0988 -0.0345 -0.1130 -0.0980 -0.1502 -0.0262 -0.9814 -0.0888 -0.1141 -0.0800 -0.0977 -0.1120 -0.1911 -0.0828 -0.0429 -0.0950 -0.0719 -0.7816 -0.1166 -0.0809 -0.0929 -0.0930 -0.0319 -0.1046 -0.0858 -0.6783 -0.1778 -0.1048 -0.0689 -0.0905 -0.0715 -0.5453 -0.0908 -0.0674 -0.1056 -0.9340 -0.0756 -0.4734 -0.0725 -0.0821 -0.8792 -0.1063 -0.0978 -0.7371 -0.0957 -0.1026 -0.1076 -0.0854 -0.0919 -0.0871 -0.0831 -0.1670 -0.1117 -0.1178 -0.2870 -0.2290 -0.0330 -0.1237 -0.1104 -0.1023 -0.1595 -0.0837 -0.0760 -0.1651 -0.1191 -0.1995 -0.1164 -0.1112 -0.0770 -0.0877 -0.1256 -1.8206 -0.0963 -0.2266 -0.1075 -0.0788 -0.7647 -0.0462 -0.2243 -0.1257 -0.0598 -0.1040 -0.4148 -0.6679 -0.0898 -0.0910 -0.1408 -0.1148 -0.1878 -0.1180 -0.0996 -0.0740 -0.0823 -0.0921 -1.6267 -0.0924 -0.0676 -0.1104 -0.0800 -0.5645 -0.0419 -0.1944 -0.1308 -0.1415 -0.1551 -0.0171 -0.0973 -0.1199 -0.0908 -0.0876 -0.1288 -0.1037 -0.1709 -0.1213 -0.1634 -1.0642 -0.1231 -0.0753 -0.0867 -0.0895 -1.6784 -0.0905 -0.0771 -0.1012 -0.0887 -0.5103 -0.0432 -0.1972 -0.1104 -0.1678 -0.1214 -0.0141 -0.1054 -0.1085 -0.0851 -0.0877 -0.1439 -0.1033 -0.1281 -0.0972 -0.1307 -0.1927 -0.1459 -0.0766 -0.0900 -0.0963 -1.6944 -0.0894 -0.1562 -0.1014 -0.0872 -0.6983 -0.0411 -0.2253 -0.1110 -0.0344 -0.1063 -0.1256 -0.5479 -0.0825 -0.0933 -0.5695 -0.4928 -0.1059 -0.4627 -0.5654 -0.0932 -0.0789 -0.2577 -2.4188 -0.0259 -0.0997 -0.0639 -0.0740 -0.3157 -0.1078 -1.1827 -0.1307 -0.1067 -0.0651 -0.0785 -0.0745 -0.5966 -0.0884 -0.0633 -0.1622 -1.1337 -0.0798 -0.5303 -0.0838 -0.1009 -0.1437 -0.1159 -0.3042 -0.1021 -0.0770 -0.0439 -0.0870 -0.0758 -0.1031 -0.0856 -0.0553 -0.6707 -0.2310 -0.1237 -0.0930 -2.1049 -0.4812 -0.2378 -0.0621 -0.4366 -0.1755 -0.1349 -0.0985 -0.0809 -0.9004 -0.0823 -0.0984 -0.0348 -1.4242 -0.0786 -0.0748
S-88	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; { int i = 0; while ( i < words.length ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; i++; } } return result; }
T-88	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; { int i = 0; while ( i < words.length ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; i++; } } return result; }
H-88	-0.20857346057891846	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; { int i = 0; while ( i < words.length ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; i++; } } return result ; }
D-88	-0.20857346057891846	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; { int i = 0; while ( i < words.length ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; i++; } } return result ; }
P-88	-0.0990 -0.0532 -1.4279 -0.3193 -0.0660 -0.1489 -0.0478 -0.0955 -0.0283 -0.1123 -1.2490 -0.1100 -0.8964 -0.0868 -0.0702 -0.0853 -0.0856 -1.0999 -0.2846 -0.0684 -0.1812 -0.0799 -0.0872 -0.0545 -0.8900 -0.2682 -0.0650 -0.0812 -3.9688 -0.0478 -0.5603 -0.0707 -0.1806 -1.0340 -0.0358 -0.0851 -0.0823 -0.1434 -0.4744 -0.1133 -0.0821 -0.0683 -0.0821 -0.0904 -0.8055 -0.0788 -0.1475 -0.0903 -1.3653 -0.0700 -0.1038 -0.0874 -0.0928 -0.0613 -0.0502 -0.0825 -0.0871 -0.0777 -0.1442 -0.0814 -0.0987 -0.0326 -0.0236 -0.0314 -0.0877 -1.1890 -0.1291 -1.7525 -0.0442 -0.0852 -0.0970 -0.0703 -0.0517 -0.1091 -0.0925 -0.0598 -0.1318 -0.1208 -0.0543 -0.0945 -0.1021 -0.0414 -0.1003 -0.0889 -0.0403 -0.0480 -0.4716 -0.1046 -0.1094 -0.0815 -0.1036 -0.0733 -0.9478 -0.0927 -0.0791 -0.0278 -0.8683 -0.1400 -0.2925 -0.1047 -0.0649 -0.0892 -0.0805 -0.5254 -0.0782 -0.0776 -0.0707 -0.0371 -0.0268 -0.0437 -0.0847 -0.0585 -0.3122 -0.0958 -0.1042 -0.0731 -0.0996 -0.0876 -0.9104 -0.0896 -0.0606 -0.1350 -0.0954 -0.0950 -1.1454 -0.0946 -0.2994 -0.0735 -0.0943 -0.1069 -0.1081 -0.0903 -0.3840 -0.1529 -0.1265 -0.1691 -0.0298 -0.3259 -0.1036 -0.2632 -0.9276 -0.1073 -0.0969 -0.0887 -0.0850 -0.0861 -0.0563 -0.0270 -0.0380 -0.1031 -0.0477 -0.4517 -0.0433 -0.0713 -0.0833 -0.0797 -0.1185 -0.1128 -0.0558 -0.0242 -0.0371 -0.0779 -0.1414 -0.0887 -0.0454 -0.0295 -0.0261 -0.5734 -0.0847 -0.0970 -0.1060 -0.1460 -0.0904 -0.0438 -0.0266 -0.0237 -0.0701 -0.0842 -0.0852 -0.1008 -0.1159 -0.2364 -0.1080 -0.0288 -0.4769 -0.1709 -0.2612 -0.1065 -0.0951 -0.0691 -0.2949 -0.0932 -0.0667 -0.1236 -0.0850 -0.1943 -0.0829 -0.0821
S-80	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; { int k = 0; while ( k < vowels.length ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } k++; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-80	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; { int k = 0; while ( k < vowels.length ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } k++; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-80	-0.205302894115448	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; { int k = 0; while ( k < vowels.length ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } k++; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-80	-0.205302894115448	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; { int k = 0; while ( k < vowels.length ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } k++; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-80	-0.0994 -0.0543 -1.4791 -0.3242 -0.0660 -0.1525 -0.0473 -0.0958 -0.0278 -0.1133 -1.2682 -0.1101 -0.9571 -0.0886 -0.0694 -0.0839 -0.0863 -1.1756 -0.2817 -0.0690 -0.1898 -0.0828 -0.0877 -0.0559 -0.9225 -0.2863 -0.0643 -0.0810 -4.3645 -0.0487 -0.4185 -0.0745 -0.1996 -1.1284 -0.0356 -0.0876 -0.0838 -0.1448 -0.4773 -0.1139 -0.0822 -0.0705 -0.0833 -0.0918 -0.2918 -0.1105 -0.0885 -0.0798 -0.0690 -1.0166 -0.0958 -0.0758 -0.0543 -0.0648 -0.0695 -0.5020 -0.0688 -0.4234 -0.0704 -0.0785 -0.1220 -0.0786 -0.1011 -0.0301 -0.0226 -0.0287 -0.0937 -1.0647 -0.1130 -1.8324 -0.0397 -0.0840 -0.0980 -0.0704 -0.0509 -0.1077 -0.0971 -0.0532 -0.1372 -0.1249 -0.0556 -0.0984 -0.1024 -0.0489 -0.0937 -0.0786 -0.0395 -0.0457 -0.5665 -0.1032 -0.1041 -0.0780 -0.0994 -0.0780 -1.0295 -0.1006 -0.0763 -0.0276 -0.7504 -0.1671 -0.2675 -0.1080 -0.0771 -0.0862 -0.0745 -0.4603 -0.0759 -0.0757 -0.1023 -0.0315 -0.0274 -0.0419 -0.0915 -0.0659 -0.2216 -0.1147 -0.0798 -0.1085 -0.0986 -1.1785 -0.0855 -0.1029 -0.1159 -0.0869 -0.1620 -0.0983 -0.0785 -0.0895 -0.0766 -0.1071 -0.1075 -0.0881 -0.3688 -0.1245 -0.1195 -0.1604 -0.0326 -0.3184 -0.1012 -0.2806 -0.9007 -0.1068 -0.0811 -0.0873 -0.0838 -0.0792 -0.0571 -0.0280 -0.0382 -0.1039 -0.0554 -0.4579 -0.0551 -0.0769 -0.0815 -0.1016 -0.1984 -0.0984 -0.0583 -0.0871 -0.1143 -0.0449 -0.0259 -0.0352 -0.0803 -0.1371 -0.0961 -0.0441 -0.0287 -0.0261 -0.4635 -0.0849 -0.1147 -0.1037 -0.2775 -0.0964 -0.0425 -0.0257 -0.0247 -0.0766 -0.0814 -0.0849 -0.1051 -0.1189 -0.2500 -0.1063 -0.0297 -0.5817 -0.1751 -0.2707 -0.1120 -0.0898 -0.0842 -0.0895 -0.0846 -0.1514 -0.0857 -0.0994
S-22	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; { int j = 0; while ( j < words[i].length () ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; j++; } } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
T-22	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; { int j = 0; while ( j < words[i].length () ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; j++; } } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-22	-0.21427702903747559	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; { int j = 0; while ( j < words[i].length () ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; j++; } } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-22	-0.21427702903747559	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; java.lang.String [] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; { int j = 0; while ( j < words[i].length () ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; j++; } } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-22	-0.1006 -0.0536 -1.4698 -0.3346 -0.0666 -0.1544 -0.0484 -0.0957 -0.0282 -0.1134 -1.2708 -0.1099 -0.9707 -0.0876 -0.0705 -0.0837 -0.0864 -1.1219 -0.2895 -0.0690 -0.1880 -0.0815 -0.0885 -0.0560 -0.9201 -0.2791 -0.0650 -0.0808 -4.3149 -0.0486 -0.4223 -0.0733 -0.1974 -1.1646 -0.0352 -0.0878 -0.0845 -0.1446 -0.4804 -0.1137 -0.0817 -0.0698 -0.0827 -0.0921 -0.3225 -0.1102 -0.0906 -0.0823 -0.0687 -1.1204 -0.0968 -0.0751 -0.0557 -0.0636 -0.0705 -0.8786 -0.0693 -0.3842 -0.0701 -0.0793 -0.1191 -0.0792 -0.1000 -0.0297 -0.0229 -0.0287 -0.0939 -1.1287 -0.1168 -1.7919 -0.0364 -0.0863 -0.0975 -0.0736 -0.0512 -0.1126 -0.0994 -0.0538 -0.1410 -0.1249 -0.0569 -0.1028 -0.1030 -0.0504 -0.0949 -0.0806 -0.0394 -0.0477 -0.5160 -0.1068 -0.0837 -0.1105 -0.0880 -1.0767 -0.0864 -0.1003 -0.1105 -0.0904 -0.0276 -0.7217 -0.1677 -0.3675 -0.0963 -0.0654 -0.0819 -0.0674 -0.0997 -0.0358 -0.0277 -0.0416 -0.0869 -0.0602 -0.3878 -0.1171 -0.1037 -0.0788 -0.1022 -0.0866 -0.9225 -0.0910 -0.0647 -0.1231 -0.0947 -0.0885 -1.4425 -0.0914 -0.2773 -0.0737 -0.0944 -0.1081 -0.1091 -0.0826 -0.3962 -0.1614 -0.1254 -0.1652 -0.0278 -0.3111 -0.1020 -0.3021 -0.8744 -0.1053 -0.0949 -0.0839 -0.0843 -0.0824 -0.0557 -0.0275 -0.0370 -0.1085 -0.0452 -0.4787 -0.0490 -0.0730 -0.0822 -0.0810 -0.1046 -0.1102 -0.0531 -0.0234 -0.0357 -0.0804 -0.1553 -0.0880 -0.0445 -0.0268 -0.0258 -0.5873 -0.0639 -0.1768 -0.0708 -0.2470 -0.0983 -0.1021 -0.2772 -0.0928 -0.0418 -0.0247 -0.0258 -0.0754 -0.0828 -0.0862 -0.0932 -0.1144 -0.2207 -0.1029 -0.0287 -0.5649 -0.1574 -0.2654 -0.1061 -0.0906 -0.0819 -0.0964 -0.0823 -0.1620 -0.0848 -0.0857
S-46	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; { int i = planet1_index; while ( i < planet2_index ) { result.add ( planet_names.get ( i ) ) ; i += 1; } } return result; }
T-46	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { { int i = planet1_index + 1; while ( i < planet2_index ) { result.add ( planet_names.get ( i ) ) ; i += 1; } } } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; }
H-46	-0.2448856681585312	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; { int i = planet1_index ; while ( i < planet2_index ) { result.add ( planet_names.get ( i ) ) ; i += 1; } } return result ; }
D-46	-0.2448856681585312	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; { int i = planet1_index ; while ( i < planet2_index ) { result.add ( planet_names.get ( i ) ) ; i += 1; } } return result ; }
P-46	-0.0906 -0.0575 -1.5154 -0.2388 -0.0694 -0.1516 -0.0169 -0.1020 -2.1458 -0.0838 -0.7933 -1.4233 -0.0798 -0.0631 -0.0829 -0.0885 -1.3938 -0.2750 -0.0824 -0.1961 -0.0891 -0.0921 -0.1125 -0.0791 -0.0875 -0.9487 -0.1902 -0.0747 -0.1486 -0.1605 -1.6347 -0.0904 -0.3671 -0.1020 -0.0932 -0.0098 -0.0215 -0.0621 -1.7403 -0.1102 -0.0498 -0.0073 -1.2321 -0.1100 -0.0265 -0.0184 -1.3528 -0.1063 -0.0490 -0.0164 -1.3765 -0.1167 -0.0464 -0.0339 -0.0406 -1.5393 -0.1066 -0.0226 -0.0067 -1.4419 -0.0980 -0.0454 -0.0134 -0.0433 -1.5666 -0.0993 -0.0213 -0.0302 -0.0063 -0.0688 -0.0976 -0.0981 -0.1053 -1.4520 -0.2792 -0.0706 -0.1526 -0.0965 -0.0868 -0.0613 -1.0090 -0.2624 -0.0635 -0.2065 -0.0631 -0.0823 -0.3312 -0.1109 -1.1105 -0.0891 -0.1043 -0.0508 -0.1004 -0.0812 -0.1213 -0.8090 -0.1109 -0.0652 -0.0917 -0.0858 -0.0820 -0.0819 -0.1092 -0.0621 -0.0725 -0.0603 -0.0935 -0.0801 -0.1190 -0.6874 -0.1023 -0.0784 -0.0834 -0.0823 -0.0807 -0.0846 -0.0888 -0.1307 -0.2848 -0.1183 -0.0922 -0.0325 -0.0515 -0.0898 -0.1138 -0.1046 -0.0876 -0.1185 -1.0393 -0.1044 -0.0633 -0.0805 -0.0841 -0.0842 -0.0807 -0.1069 -0.0575 -0.0652 -0.0929 -0.0779 -0.1003 -0.0873 -0.1143 -1.2531 -0.1008 -0.0815 -0.0776 -0.0845 -0.0869 -0.5843 -0.1001 -0.1115 -0.1015 -0.1304 -0.0536 -0.0574 -0.2392 -0.1699 -0.1081 -0.1220 -0.1535 -0.1298 -0.0546 -0.0447 -0.0851 -0.0886 -0.1771 -0.1906 -0.2656 -0.1140 -0.0629 -0.1071 -0.1007 -0.1422 -0.2697 -0.1182 -0.1327 -0.1143 -0.1018 -0.0913 -0.1064 -0.0944 -1.7923 -0.1141 -0.0839 -0.0741 -0.1100 -0.1664 -0.0842 -0.0779
S-85	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; { int i = 0; while ( i < s.length () ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; i += 3; } } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-85	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; { int i = 0; while ( i < s.length () - s.length () % 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; i += 3; } } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-85	-0.2033834606409073	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; { int i = 0; while ( i < s.length () ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; i += 3; } } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-85	-0.2033834606409073	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; { int i = 0; while ( i < s.length () ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; i += 3; } } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-85	-0.0958 -0.0412 -1.3394 -0.0333 -0.0934 -0.0297 -0.0873 -0.0200 -0.1104 -1.0660 -0.1045 -0.0874 -0.0971 -0.3643 -0.0277 -0.0274 -0.1253 -2.1092 -0.0265 -0.0851 -0.0296 -0.0809 -0.0204 -0.1145 -1.0969 -0.1435 -0.0775 -0.1019 -2.1564 -0.3986 -0.0655 -0.1407 -0.0663 -0.0869 -0.0544 -1.2607 -0.2288 -0.0711 -0.1605 -0.0641 -0.0805 -0.4180 -0.0606 -0.0916 -0.0905 -0.8592 -0.0688 -0.1052 -0.1033 -0.1098 -0.1922 -0.0924 -0.0912 -0.0735 -0.0813 -0.0855 -0.1013 -0.1564 -0.2957 -0.1081 -0.0659 -0.0942 -0.8194 -0.1225 -0.1386 -0.9490 -2.8376 -0.0893 -0.0400 -0.1083 -0.0851 -0.0929 -0.0988 -0.0786 -0.1091 -0.1096 -0.2317 -0.0806 -0.0842 -0.0883 -0.0895 -0.1218 -0.0712 -0.0818 -1.2909 -0.0777 -0.0682 -0.0777 -0.0428 -0.0875 -0.0759 -0.0994 -0.0923 -0.0665 -0.1193 -0.3933 -0.7665 -0.0656 -0.0866 -1.3335 -0.0733 -0.1050 -1.1171 -0.1025 -0.0610 -0.0484 -0.0850 -0.0844 -0.1269 -0.0693 -0.1232 -0.1007 -0.7713 -0.1243 -0.2231 -0.1418 -0.1783 -0.0874 -0.1024 -0.5584 -0.1087 -0.2149 -0.1684 -0.0810 -0.0818 -0.0765 -0.1814 -0.1085 -0.0243 -0.1190 -0.0861 -0.0863 -0.0904 -0.0889 -0.0751 -0.0621 -0.0972 -0.5002 -0.1087 -0.0877 -0.0951 -0.1288 -0.0606 -0.5913 -0.0102 -0.1045 -0.0937 -0.0582 -0.0645 -0.0838 -0.2048 -0.0824 -0.0966 -0.1061 -0.0435 -0.0423 -0.0620 -0.0843 -0.0522 -0.0451 -0.0413 -0.0809 -0.0938 -0.0649 -0.0360 -0.0974 -0.0606 -0.0912 -0.0384 -0.0839 -0.0177 -0.1060 -0.0305 -0.0933 -0.0549 -0.0854 -0.0455 -0.0808 -0.0191 -0.1097 -0.0982 -0.0955 -0.1036 -0.1000 -0.0778 -0.0948
S-91	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; for ( ; i < text.length () ; ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-91	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; for ( ; i < text.length () ; ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-91	-0.16964127123355865	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; for ( ; i < text.length () ; ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-91	-0.16964127123355865	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; for ( ; i < text.length () ; ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-91	-0.0912 -0.0542 -0.9846 -0.0420 -0.0969 -0.0290 -0.1164 -0.7895 -0.0575 -0.0905 -0.0827 -1.4124 -0.0753 -0.0869 -0.0620 -0.0865 -1.5332 -0.0886 -0.1230 -0.0868 -0.5378 -0.0773 -0.0555 -0.0815 -0.3183 -0.0740 -0.0804 -0.0807 -0.3839 -0.1463 -0.1045 -0.1104 -0.0782 -0.1109 -0.1081 -0.1089 -0.0833 -0.0709 -0.0814 -0.0958 -0.0858 -0.1118 -0.1143 -0.0848 -0.1302 -0.7447 -0.1030 -0.1070 -0.0877 -0.1558 -0.0515 -0.0379 -0.0813 -0.0905 -0.0589 -0.9810 -0.0903 -0.1403 -0.1194 -0.1119 -0.2673 -0.1122 -0.0678 -0.0763 -0.1483 -0.0822 -0.1180 -0.0910 -0.0774 -0.0918 -0.0326 -0.0468 -0.0486 -0.0995 -0.8081 -0.1158 -0.1103 -0.7598 -0.1338 -0.1917 -0.1433 -0.0952 -0.0935 -0.0755 -0.1064 -0.1043 -0.1074 -0.0920 -0.0516 -0.0644 -0.1057 -0.0838 -0.0857 -0.1305 -0.1045 -0.0691 -0.0853 -0.0757 -0.0721 -0.9736 -0.0697 -0.0896 -0.0783 -0.9879 -0.0605 -0.0463 -0.1195 -0.0815 -0.0915 -0.0675 -0.1054 -0.0781 -0.0698 -0.0622 -0.2324 -0.0984 -0.1087 -0.1024 -0.0823 -0.0917 -0.0324 -0.1012 -0.7355 -0.1167 -0.1118 -0.5578 -0.0987 -0.1853 -0.1639 -0.0925 -0.0914 -0.0803 -0.0597 -0.0944 -0.0703 -0.1057 -0.0903 -0.0844 -0.0270 -0.1055 -0.4815 -0.1112 -0.0841 -0.5055 -0.0838 -0.1103 -0.1718 -0.0874 -0.0923 -0.0718 -0.0441 -0.1077 -0.0823 -0.0732 -0.4963 -0.0536 -0.0988 -0.0842 -0.0656 -0.3898 -0.1276 -0.0966 -0.0675 -0.6816 -0.0765 -0.0838 -0.0576 -0.0945 -0.0749 -0.1661 -0.0748 -0.0881
S-30	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { { int j = start; while ( j < end ) { new_text += "_"; j += 1; } } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-30	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { { int j = start; while ( j < end ) { new_text += "_"; j += 1; } } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { { int j = start; while ( j < end ) { new_text += "_"; j += 1; } } } return new_text; }
H-30	-0.17922207713127136	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { { int j = start ; while ( j < end ) { new_text += "_"; j += 1; } } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-30	-0.17922207713127136	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { { int j = start ; while ( j < end ) { new_text += "_"; j += 1; } } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-30	-0.0894 -0.0537 -1.0265 -0.0431 -0.0962 -0.0288 -0.1154 -0.7805 -0.0584 -0.0903 -0.0830 -1.5747 -0.0769 -0.0879 -0.0639 -0.0868 -1.6150 -0.0887 -0.1244 -0.0850 -0.6181 -0.0742 -0.0540 -0.0793 -0.3824 -0.0742 -0.0800 -0.0805 -0.4413 -0.1005 -0.1062 -0.1059 -0.0803 -0.1068 -0.1070 -0.0909 -0.0673 -0.0833 -0.0771 -0.1131 -0.1144 -0.0907 -0.1356 -0.7814 -0.1015 -0.1112 -0.0869 -0.1881 -0.0505 -0.0398 -0.0807 -0.0869 -0.0621 -1.0440 -0.1008 -0.1137 -0.1217 -0.1113 -0.2381 -0.1053 -0.0596 -0.0844 -0.1473 -0.0823 -0.1377 -0.0906 -0.0816 -0.1037 -0.0344 -0.0477 -0.0462 -0.0985 -0.9038 -0.1136 -0.1159 -0.7887 -0.1310 -0.1870 -0.1419 -0.0918 -0.0922 -0.0846 -0.1188 -0.1052 -0.0987 -0.0998 -0.0511 -0.0680 -0.1092 -0.0848 -0.0771 -0.1137 -0.1004 -0.1122 -0.0879 -0.0868 -1.0595 -0.1002 -0.0971 -0.0977 -0.0901 -0.0866 -0.0824 -0.0801 -0.0738 -0.1059 -0.0876 -0.0667 -0.0546 -0.4240 -0.0862 -0.0963 -1.0010 -0.0909 -0.0769 -0.1832 -0.1013 -0.0861 -0.0955 -0.0310 -0.1007 -0.7802 -0.1189 -0.1032 -0.6689 -0.0957 -0.2844 -0.1518 -0.0937 -0.0939 -0.0926 -0.0778 -0.0915 -0.0676 -0.1080 -0.0952 -0.1018 -0.0293 -0.1059 -0.4959 -0.1078 -0.0816 -0.5471 -0.0825 -0.1102 -0.1784 -0.0851 -0.0920 -0.0739 -0.0490 -0.1032 -0.0782 -0.0736 -0.4938 -0.0537 -0.0958 -0.0797 -0.0704 -0.4708 -0.1160 -0.0930 -0.0611 -0.6973 -0.0709 -0.0826 -0.0592 -0.0973 -0.0779 -0.1527 -0.0751 -0.0918
S-21	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; { int i = 1; while ( i < lst.length ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } i++; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
T-21	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; { int i = 0; while ( i < lst.length ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } i++; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; }
H-21	-0.21999508142471313	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; { int i = 1 ; while ( i < lst.length ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } i++; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; }
D-21	-0.21999508142471313	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; { int i = 1 ; while ( i < lst.length ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } i++; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; }
P-21	-0.0985 -0.0409 -0.0967 -1.8124 -0.0141 -0.0917 -0.0523 -0.0290 -0.0911 -0.0200 -0.0291 -0.1124 -0.0988 -2.0186 -0.0371 -0.0860 -0.0862 -0.2535 -0.0678 -0.0938 -0.0642 -0.2531 -0.0858 -0.0928 -0.0629 -1.1766 -0.1018 -0.0783 -0.1140 -0.0623 -0.0756 -0.6014 -0.0932 -0.0348 -0.0875 -0.0371 -0.3633 -0.0936 -0.1045 -0.0393 -0.0899 -0.5144 -0.0939 -0.0196 -0.0843 -0.0357 -1.2250 -0.3494 -0.0928 -0.0841 -0.0958 -1.7798 -0.2318 -0.0731 -0.1107 -0.0963 -0.1897 -0.1781 -0.0778 -0.0792 -0.0898 -0.0799 -0.1174 -0.1149 -0.0722 -0.3439 -0.2569 -0.1994 -0.0632 -0.0887 -0.0871 -0.0992 -0.1042 -0.0970 -0.0956 -0.8268 -0.0805 -0.1100 -0.0554 -0.0954 -1.9607 -0.0939 -0.0766 -0.1071 -0.1147 -0.1003 -0.0508 -1.2145 -0.0530 -0.3921 -0.1607 -0.2427 -0.0938 -0.1006 -0.0757 -0.0959 -0.0663 -0.1056 -0.0563 -0.2603 -0.1189 -0.1318 -0.1007 -0.0958 -0.0832 -0.0813 -0.0324 -0.0984 -0.0907 -0.4258 -0.1228 -0.0917 -0.0458 -0.0895 -1.9094 -0.0910 -0.0560 -0.1058 -0.0705 -0.0892 -0.0391 -0.8437 -0.0468 -0.3363 -0.1335 -0.2057 -0.0880 -0.0988 -0.1543 -0.0858 -0.4752 -0.0840 -0.0654 -0.1257 -0.1191 -0.0863 -0.1139 -0.0865 -0.0555 -0.1141 -0.0556 -0.0735 -0.3605 -0.1529 -0.1125 -0.0741 -0.0429 -0.0762 -0.0527 -0.0985 -0.0392 -0.1005 -0.3105 -0.1383 -2.2405 -0.0715 -0.0809 -0.1106 -0.0858 -0.1248 -0.0714 -0.6458 -0.0838 -0.1008 -0.0408 -0.3445 -0.0945 -0.0771 -1.0687 -0.0762 -0.4718
S-62	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; { int i = 0; while ( i < numbers.length ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } i += 1; } } return result; }
T-62	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; { int i = 0; while ( i < numbers.length ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } i += 1; } } return result; }
H-62	-0.28521761298179626	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; { int i = 0; while ( i < numbers.length ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } i += 1 ; } } return result ; }
D-62	-0.28521761298179626	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; { int i = 0; while ( i < numbers.length ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } i += 1 ; } } return result ; }
P-62	-0.0950 -0.0575 -0.1203 -1.7759 -0.0473 -0.0845 -0.1423 -0.0838 -0.0240 -0.1144 -0.1286 -1.9313 -0.0724 -0.0870 -0.0877 -0.1288 -2.5086 -0.0688 -0.0747 -0.0747 -0.0828 -0.2565 -1.7119 -0.1509 -0.0192 -0.0925 -0.1251 -0.0857 -0.0282 -0.0798 -0.0324 -1.5026 -0.2603 -0.1056 -0.0997 -0.0942 -1.2462 -0.1304 -0.1084 -0.0884 -0.1015 -0.0846 -0.0717 -0.0945 -0.0942 -0.0846 -0.2872 -0.1136 -0.0913 -0.0842 -0.0865 -1.2783 -0.0955 -0.0779 -0.0718 -0.0926 -0.0718 -0.9457 -0.0872 -0.1002 -0.1633 -0.0784 -0.0882 -0.1085 -0.0673 -0.0806 -0.0485 -0.0956 -2.0631 -0.0969 -0.0474 -0.1009 -0.0961 -0.4472 -0.3383 -0.2452 -0.1360 -0.0524 -0.2756 -0.1407 -0.2373 -0.0987 -0.0994 -0.1155 -0.1149 -0.0591 -0.0900 -0.0406 -0.1153 -0.0251 -0.0918 -0.0794 -0.0412 -0.1397 -0.0797 -0.0828 -0.0495 -0.8761 -0.1306 -0.1177 -0.0708 -0.4206 -0.1834 -0.1254 -0.1116 -0.0492 -0.3492 -0.1031 -0.1907 -0.0910 -0.0969 -0.0864 -0.8225 -0.1020 -0.0625 -0.6149 -0.3088 -1.8503 -0.0959 -0.5683 -0.0891 -0.0732 -0.3828 -0.1135 -1.6639 -0.0788 -0.0698 -0.1129 -0.0693 -0.6338 -0.1001 -0.0632 -0.5646 -0.1605 -1.6319 -0.1033 -0.5362 -0.0825 -0.0538 -0.4661 -0.1840 -1.6978 -0.0908 -0.1491 -0.3226 -0.1133 -0.0606 -1.4501 -0.2188 -0.0712 -0.0867 -0.0926 -0.0789 -0.8922 -0.0818 -0.0721
S-31	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { { int j = 0; while ( j < numbers.length ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } j += 1; } } } return result; }
T-31	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { { int j = i + 1; while ( j < numbers.length ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } j += 1; } } } return result; }
H-31	-0.2864204943180084	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { { int j = 0; while ( j < numbers.length ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } j += 1 ; } } } return result ; }
D-31	-0.2864204943180084	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { { int j = 0; while ( j < numbers.length ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } j += 1 ; } } } return result ; }
P-31	-0.0957 -0.0568 -0.1203 -1.7951 -0.0472 -0.0845 -0.1428 -0.0833 -0.0238 -0.1144 -0.1292 -1.9116 -0.0738 -0.0863 -0.0885 -0.1358 -2.4829 -0.0700 -0.0755 -0.0728 -0.0820 -0.3524 -2.4857 -0.1027 -0.0180 -0.0923 -0.1283 -0.0853 -0.0301 -0.0800 -0.0333 -0.8963 -0.2569 -0.1113 -0.0952 -0.0811 -0.0807 -1.2593 -0.0856 -0.0845 -0.1071 -0.0775 -0.0807 -0.7855 -0.0686 -0.0674 -0.1501 -0.0764 -0.0828 -0.5216 -0.1297 -0.0814 -0.1015 -1.4513 -0.0930 -0.1055 -0.1257 -0.1128 -0.0737 -0.0803 -0.0819 -0.0886 -0.0847 -0.1452 -0.0684 -0.0815 -0.0490 -0.0947 -1.8673 -0.0971 -0.0453 -0.1012 -0.0970 -0.4352 -0.3678 -0.2371 -0.1298 -0.0520 -0.2764 -0.1381 -0.2292 -0.0987 -0.0996 -0.1266 -0.1148 -0.0603 -0.0899 -0.0404 -0.1098 -0.0240 -0.0916 -0.0795 -0.0387 -0.1378 -0.0802 -0.0846 -0.0488 -0.9089 -0.1336 -0.1176 -0.0708 -0.4197 -0.1770 -0.1247 -0.1095 -0.0477 -0.3496 -0.1057 -0.1850 -0.0910 -0.0980 -0.0820 -0.8386 -0.1012 -0.0631 -0.6289 -0.3147 -1.8596 -0.0953 -0.5705 -0.0887 -0.0719 -0.3844 -0.1202 -1.6743 -0.0758 -0.0634 -0.1133 -0.0669 -0.6548 -0.0990 -0.0621 -0.5549 -0.1788 -1.6139 -0.1010 -0.5329 -0.0838 -0.0533 -0.4750 -0.1693 -1.7338 -0.0862 -0.3047 -0.0886 -0.0694 -1.4256 -0.2051 -0.0773 -0.0678 -0.0838 -0.1089 -0.0822 -0.8663 -0.0835 -0.0715
S-27	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; { int i = 0; while ( i < l.size () ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } i += 1; } } return result; }
T-27	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; { int i = 0; while ( i < l.size () ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } i += 1; } } return result; }
H-27	-0.15260015428066254	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; { int i = 0; while ( i < l.size () ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } i += 1; } } return result ; }
D-27	-0.15260015428066254	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; { int i = 0; while ( i < l.size () ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } i += 1; } } return result ; }
P-27	-0.0978 -0.0491 -0.2288 -0.3230 -0.0529 -0.1616 -0.0437 -0.0809 -0.0214 -0.1031 -0.1918 -0.2602 -0.0493 -0.1716 -0.0598 -0.0805 -0.0871 -0.2118 -0.2429 -0.0545 -0.1637 -0.0978 -0.0866 -0.0561 -1.7049 -0.1903 -0.0586 -0.1554 -0.0682 -0.0824 -0.1601 -0.1913 -0.0564 -0.1557 -0.0528 -0.0470 -0.0287 -0.0842 -0.0524 -1.4434 -0.2037 -0.0513 -0.1423 -0.0596 -0.0881 -0.1356 -0.1131 -0.0714 -0.0707 -0.0816 -1.0699 -0.0797 -0.1025 -0.1193 -0.1082 -0.1487 -0.0679 -0.0884 -0.0783 -0.0983 -0.0698 -0.0799 -0.0885 -0.1254 -0.0417 -0.0409 -0.1859 -0.2546 -0.1044 -0.0535 -0.1102 -0.1969 -0.1111 -0.0841 -0.0881 -0.0928 -0.0858 -0.1023 -0.9587 -0.0886 -0.0386 -0.1140 -0.0493 -0.0444 -0.0345 -0.1062 -0.0979 -0.2136 -0.0827 -0.1101 -0.1037 -1.0044 -0.0575 -0.1064 -0.1057 -0.1652 -0.0746 -0.1018 -0.1259 -0.0690 -0.0874 -0.0797 -0.1720 -0.1164 -0.1282 -0.2270 -0.0622 -0.1448 -0.1157 -0.0832 -0.0936 -0.0860 -0.1387 -0.2309 -0.1079 -0.2147 -0.0443 -0.0398 -0.1494 -0.1978 -0.1144 -0.0904 -0.0839 -0.0911 -0.0905 -0.1347 -0.0849 -0.0888 -0.1013 -0.1118 -0.1968 -0.0996 -0.0563 -0.1017 -0.1599 -0.1079 -0.0848 -0.0859 -0.0856 -0.0883 -0.1521 -0.0701 -0.0632 -1.2884 -0.0960 -0.0708 -0.0836 -0.0834 -0.1401 -0.0825 -0.0784
S-13	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; { int i = 0; while ( i < l.size () ) { thirds.add ( l.get ( i ) ) ; i += 3; } } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
T-13	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; { int i = 0; while ( i < l.size () ) { thirds.add ( l.get ( i ) ) ; i += 3; } } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-13	-0.1483062505722046	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; { int i = 0; while ( i < l.size () ) { thirds.add ( l.get ( i ) ) ; i += 3; } } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-13	-0.1483062505722046	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; { int i = 0; while ( i < l.size () ) { thirds.add ( l.get ( i ) ) ; i += 3; } } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-13	-0.0961 -0.0487 -0.2316 -0.3262 -0.0533 -0.1619 -0.0456 -0.0806 -0.0219 -0.1036 -0.1883 -0.2674 -0.0485 -0.1727 -0.0593 -0.0808 -0.0883 -0.2114 -0.2581 -0.0543 -0.1630 -0.0942 -0.0857 -0.0585 -1.6783 -0.1992 -0.0596 -0.1584 -0.0675 -0.0820 -0.1725 -0.2049 -0.0561 -0.1574 -0.0540 -0.0508 -0.0303 -0.0818 -0.0543 -1.4085 -0.2120 -0.0506 -0.1535 -0.0613 -0.0857 -0.3603 -0.0759 -0.0964 -0.0991 -0.8917 -0.0865 -0.1075 -0.0990 -0.1316 -0.0981 -0.1030 -0.1641 -0.0672 -0.0844 -0.0832 -0.1612 -0.0448 -0.0400 -0.1529 -0.2325 -0.1072 -0.0688 -0.1065 -0.2069 -0.1132 -0.0908 -0.0915 -0.0915 -0.0898 -0.0707 -0.0778 -0.4098 -0.1094 -0.0811 -1.0837 -0.0868 -0.0428 -0.1116 -0.0632 -0.0443 -0.0350 -0.1040 -0.0942 -0.1370 -0.1107 -0.0746 -0.0733 -0.0801 -0.6917 -0.0915 -0.1034 -0.0694 -0.1070 -0.1304 -0.0698 -0.0885 -0.0779 -0.0809 -0.2156 -0.0806 -0.0910 -0.1887 -0.1153 -0.1500 -0.2595 -0.0781 -0.1492 -0.1369 -0.0838 -0.0930 -0.0932 -0.1682 -0.2502 -0.1084 -0.3327 -0.0447 -0.0399 -0.2101 -0.2190 -0.1156 -0.0928 -0.0858 -0.0926 -0.0884 -0.0798 -0.0845 -0.0944 -0.0994 -0.1180 -0.1878 -0.0993 -0.0552 -0.1052 -0.1639 -0.1104 -0.0889 -0.0862 -0.0898 -0.0897 -0.0928 -0.0959 -0.0766 -0.0824 -0.1260 -0.0836 -0.0763
S-47	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; { int i = 0; while ( i < l.length ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } i += 1; } } return result; }
T-47	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; { int i = 0; while ( i < l.length ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } i += 1; } } return result; }
H-47	-0.2534288763999939	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length ; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; { int i = 0; while ( i < l.length ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } i += 1; } } return result ; }
D-47	-0.2534288763999939	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length ; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; { int i = 0; while ( i < l.length ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } i += 1; } } return result ; }
P-47	-0.0974 -0.0439 -0.1026 -1.8557 -0.0369 -0.0894 -0.0239 -0.1060 -0.0866 -1.5556 -0.0681 -0.0843 -0.0887 -0.0967 -2.3892 -0.1496 -0.0954 -0.0727 -0.0784 -0.3832 -0.1181 -0.0941 -0.0666 -1.5773 -0.0808 -1.9039 -0.0559 -0.0302 -0.0919 -0.0731 -0.0698 -0.1322 -0.0533 -0.1329 -0.1104 -0.0875 -0.1170 -0.0616 -0.0890 -0.0737 -0.1142 -0.2382 -0.0936 -1.2515 -0.1172 -0.1187 -0.0663 -0.0823 -0.0852 -1.0334 -0.0879 -0.1027 -0.1479 -0.0868 -0.0759 -1.5087 -0.0840 -0.0774 -0.0851 -0.0832 -0.0849 -0.1065 -0.0336 -0.5755 -0.1796 -0.1300 -0.0905 -0.1022 -0.1324 -0.0884 -0.1374 -0.0642 -0.3388 -0.3231 -1.4788 -0.0864 -1.0381 -0.0901 -0.0389 -0.1171 -0.1125 -0.0314 -0.1281 -0.0910 -0.3514 -0.0787 -0.1236 -0.1181 -0.9181 -0.0693 -0.1123 -0.1037 -0.1306 -0.1047 -0.0924 -0.0874 -0.0926 -0.0794 -0.1518 -0.1257 -0.1288 -0.1734 -0.0457 -0.1203 -0.1036 -0.0857 -0.0908 -0.0975 -0.4897 -0.2205 -0.1480 -0.1228 -0.1051 -0.0279 -0.4897 -0.1680 -0.0976 -0.0891 -0.1219 -0.0866 -0.0764 -1.2650 -0.0918 -0.0850 -0.1087 -0.0996 -0.3309 -0.1555 -0.1466 -0.0963 -0.0954 -0.3455 -0.2979 -1.5631 -0.1366 -0.0841 -0.0846 -1.1091 -0.0973 -0.0740 -0.0950 -0.0928 -0.6502 -0.0812 -0.0686
S-32	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; { int i = 0; while ( i < l.length ) { evens[ ( int ) i / 2] = l[i]; i += 2; } } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
T-32	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; { int i = 0; while ( i < l.length ) { evens[ ( int ) i / 2] = l[i]; i += 2; } } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
H-32	-0.25302112102508545	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; { int i = 0; while ( i < l.length ) { evens[ ( int ) i / 2] = l[i]; i += 2; } } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
D-32	-0.25302112102508545	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; { int i = 0; while ( i < l.length ) { evens[ ( int ) i / 2] = l[i]; i += 2; } } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length ; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
P-32	-0.1018 -0.0433 -0.1040 -1.8619 -0.0384 -0.0887 -0.0244 -0.1067 -0.0866 -1.5698 -0.0687 -0.0847 -0.0888 -0.0916 -2.4318 -0.1804 -0.0975 -0.0721 -0.0778 -0.3924 -0.1195 -0.0952 -0.0682 -1.6338 -0.0766 -1.8970 -0.0585 -0.0331 -0.0920 -0.0728 -0.0689 -0.1485 -0.0531 -0.1304 -0.1081 -0.0882 -0.1171 -0.0643 -0.0902 -0.0690 -0.1234 -0.2270 -0.0980 -1.2400 -0.1998 -0.0811 -0.1124 -0.1031 -0.8348 -0.0941 -0.1126 -0.0942 -0.0926 -0.1173 -0.0815 -0.0898 -0.0915 -0.0797 -0.1179 -0.0405 -0.5505 -0.1849 -0.1261 -0.0848 -0.1256 -0.1656 -0.0957 -0.1328 -0.0622 -0.2786 -0.2992 -1.4243 -0.0820 -0.0539 -0.9854 -0.0812 -0.0887 -1.1391 -0.0886 -0.0417 -0.1161 -0.1192 -0.0332 -0.1249 -0.0975 -0.2042 -0.1194 -0.0623 -0.0823 -0.0840 -0.8744 -0.0933 -0.0963 -0.1033 -0.0987 -0.0887 -1.3209 -0.0824 -0.0625 -0.2184 -0.0784 -0.0921 -0.1255 -0.1285 -0.1730 -0.1761 -0.0511 -0.1263 -0.1083 -0.0867 -0.0907 -0.1099 -0.6474 -0.2310 -0.1445 -0.1224 -0.0965 -0.0305 -0.5511 -0.1600 -0.1105 -0.0942 -0.1558 -0.0945 -0.0849 -1.2362 -0.0785 -0.0797 -0.1047 -0.1032 -0.4028 -0.1651 -0.1406 -0.0893 -0.0931 -0.3498 -0.3561 -1.5672 -0.0997 -0.0820 -0.1005 -0.0970 -0.6213 -0.0843 -0.0670
S-19	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; { int i = 1; while ( i < nums.size () ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; i++; } } } long min_sum = -max_sum; return min_sum; }
T-19	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; { int i = 1; while ( i < nums.size () ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; i++; } } } long min_sum = -max_sum; return min_sum; }
H-19	-0.16727595031261444	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; { int i = 1 ; while ( i < nums.size () ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; i++; } } } long min_sum = -max_sum ; return min_sum ; }
D-19	-0.16727595031261444	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; { int i = 1 ; while ( i < nums.size () ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; i++; } } } long min_sum = -max_sum ; return min_sum ; }
P-19	-0.0972 -0.0378 -0.0543 -0.0461 -0.1010 -0.0357 -0.0278 -0.0868 -0.0806 -0.1208 -1.2329 -0.2298 -0.0276 -0.1911 -0.0450 -0.0888 -0.0864 -0.0474 -0.0629 -0.0997 -0.0649 -0.0881 -0.6566 -0.0762 -0.0593 -0.0912 -0.7016 -0.1444 -0.1041 -0.0416 -0.0968 -0.0640 -0.0378 -0.0876 -0.0798 -0.1261 -0.0407 -0.0619 -0.4964 -0.1435 -0.1074 -0.0874 -0.0955 -0.0817 -0.0923 -0.0837 -0.0739 -0.1359 -0.3305 -0.0876 -0.0483 -0.0867 -0.0677 -0.1254 -1.3856 -0.0922 -0.0840 -0.1064 -0.0991 -0.7775 -0.0649 -0.0916 -0.0978 -0.0911 -0.0970 -0.1224 -0.1693 -0.1105 -0.0524 -0.0912 -0.0966 -0.0847 -0.1185 -0.0908 -0.0974 -0.0976 -0.1030 -0.0706 -0.0974 -0.1843 -0.1809 -0.1052 -0.1870 -0.1161 -0.1223 -0.0980 -0.0929 -0.4473 -0.2034 -0.1061 -0.1091 -1.8866 -0.1248 -0.0653 -0.1070 -0.0756 -0.1560 -0.0501 -0.1007 -0.1195 -0.0608 -0.0885 -0.0795 -0.0540 -0.0974 -0.0605 -0.0999 -1.4758 -0.0899 -0.0885 -0.1052 -0.0582 -0.0930 -0.0907 -0.8000 -0.1518 -0.2181 -0.0982 -0.2481 -0.1081 -0.0770 -0.0976 -0.0871 -0.0917 -0.0671 -0.4044 -0.0962 -0.0742 -0.0917 -0.1355 -0.0685 -0.1040 -0.0737 -0.0902 -0.1161 -0.0703 -0.0759 -0.0733 -0.5967 -0.0943 -0.0538 -0.0857 -0.0955 -0.6806 -0.0791 -0.0813
S-25	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; { int i = 0; while ( i < numbers.length ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; i += 1; } } return result; }
T-25	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; { int i = 0; while ( i < numbers.length ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; i += 1; } } return result; }
H-25	-0.24070857465267181	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; { int i = 0; while ( i < numbers.length ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; i += 1; } } return result ; }
D-25	-0.24070857465267181	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; { int i = 0; while ( i < numbers.length ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; i += 1; } } return result ; }
P-25	-0.0901 -0.0558 -0.1231 -1.6335 -0.0514 -0.0291 -0.0860 -0.0607 -0.0923 -0.0307 -0.1154 -0.1124 -1.8852 -0.0499 -0.0850 -0.0808 -0.1217 -0.0975 -0.0906 -0.2362 -0.0922 -0.0617 -0.0919 -0.0457 -0.9926 -0.0731 -0.0426 -0.0788 -0.1891 -0.0893 -0.0186 -0.0857 -0.0525 -0.4693 -0.3516 -0.1106 -0.1034 -0.0702 -0.0831 -1.4581 -0.0865 -0.0951 -0.0951 -0.0814 -0.0760 -0.9247 -0.0756 -0.0866 -0.1528 -0.0756 -0.0891 -0.1587 -0.1181 -0.0649 -0.5078 -0.2216 -0.1696 -0.1481 -0.0704 -0.0826 -0.1036 -0.0680 -0.1409 -0.0584 -0.5289 -0.1742 -1.6007 -0.0753 -0.1512 -0.0824 -0.1063 -0.0484 -0.3566 -0.1457 -0.1232 -0.0519 -0.1119 -0.0919 -0.0799 -0.0845 -0.1377 -0.0443 -0.4149 -0.1368 -1.5099 -0.0854 -0.0993 -0.1535 -2.1096 -0.0748 -0.1108 -0.0649 -0.0800 -0.5243 -0.3771 -0.0933 -0.0911 -1.1577 -0.1207 -0.1127 -0.0992 -0.1075 -1.2713 -0.0779 -0.1083 -0.1085 -0.0991 -0.0784 -0.0866 -0.0934 -0.0925 -0.0767 -0.1195 -0.5824 -0.2246 -0.1908 -0.1339 -0.2138 -0.0994 -0.7968 -0.1490 -0.2621 -0.0888 -0.1038 -0.0927 -0.0731 -0.1009 -0.0726 -0.0633 -0.0709 -0.0951 -0.1003 -0.0794 -0.0779 -1.7148 -0.0971 -0.0771 -0.0896 -0.0787 -1.1273 -0.0807 -0.0746
S-92	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; { int i = 0; while ( i < numbers.length ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } i += 1; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
T-92	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; { int i = 0; while ( i < numbers.length ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } i += 1; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
H-92	-0.2378418743610382	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; { int i = 0; while ( i < numbers.length ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } i += 1 ; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
D-92	-0.2378418743610382	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; { int i = 0; while ( i < numbers.length ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } i += 1 ; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length ; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
P-92	-0.0917 -0.0557 -0.1186 -1.6774 -0.0506 -0.0279 -0.0861 -0.0626 -0.0915 -0.0309 -0.1144 -0.1100 -1.9066 -0.0517 -0.0859 -0.0818 -0.1234 -0.0864 -0.0908 -0.2247 -0.0929 -0.0567 -0.0922 -0.0434 -0.9426 -0.0824 -0.0429 -0.0809 -0.1852 -0.0892 -0.0177 -0.0860 -0.0473 -0.6249 -0.4655 -0.1338 -0.0910 -0.0973 -1.1125 -0.1096 -0.1075 -0.0890 -0.0965 -0.0867 -0.0742 -0.0853 -0.0885 -0.0833 -0.1383 -0.1193 -0.0730 -0.5293 -0.2146 -0.1629 -0.1559 -0.0692 -0.0851 -0.1062 -0.0742 -0.1488 -0.0676 -0.5544 -0.1715 -1.6493 -0.1089 -0.1581 -0.0726 -0.1063 -0.0474 -0.3451 -0.1469 -0.1196 -0.0491 -0.1193 -0.0938 -0.0846 -0.0745 -0.1442 -0.0497 -0.4578 -0.1508 -1.5678 -0.1191 -0.0977 -0.0892 -1.8744 -0.1641 -0.1139 -0.1169 -0.1264 -2.0935 -0.0736 -0.1093 -0.0656 -0.0784 -0.5195 -0.3330 -0.0941 -0.0931 -1.2100 -0.0878 -0.1108 -0.1085 -0.0786 -0.0849 -1.1032 -0.0899 -0.0808 -0.0694 -0.0924 -0.0838 -1.4469 -0.0740 -0.0720 -0.1093 -0.0790 -0.0844 -0.0934 -0.5320 -0.1909 -0.1688 -0.1333 -0.1678 -0.0951 -0.6248 -0.1453 -0.2113 -0.0892 -0.1027 -0.0969 -0.0646 -0.1000 -0.0679 -0.0697 -0.0589 -0.0899 -0.0970 -0.0844 -0.0889 -0.0728 -0.5929 -0.0793 -0.0766
Generate test with beam=5: BLEU = 91.63 98.4/96.9/94.9/93.0 (BP = 0.957 ratio = 0.958 hyp_len = 13059 ref_len = 13635)

S-34	<s> public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ /* result.add(n); */ <mask> } Collections.sort(result); return result; } </s> java
T-34	<s> public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ /* result.add(n); */ <mask> } Collections.sort(result); return result; } </s> java
H-34	-0.5037877559661865	public static List<Integer> unique(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result.add(n); } return result ; }
D-34	-0.5037877559661865	public static List<Integer> unique(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result.add(n); } return result ; }
P-34	-1.6897 -0.0418 -0.5212 -0.3240 -0.0701 -0.1401 -0.0389 -0.4201 -0.0846 -0.3392 -0.0614 -0.1451 -0.0538 -1.3651 -0.0837 -0.5378 -0.4284 -0.0755 -0.1738 -0.0674 -0.0894 -0.0586 -1.8061 -0.3112 -0.0762 -2.4035 -0.1655 -0.1251 -0.1401 -0.0776 -0.0647 -0.0560 -2.4237 -0.1174 -1.2332 -0.3798 -0.5761 -0.9287 -0.4212 -1.4753 -0.7364 -1.8515 -0.3070 -0.3875 -0.1189 -0.1821
S-22	<s> public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ /* result.add((Integer) value); */ <mask> } return result; } </s> java
T-22	<s> public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ /* result.add((Integer) value); */ <mask> } return result; } </s> java
H-22	-0.43118685483932495	public static List<Integer> filter_integers(List<Object> values ) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values ) { result.add((Integer) value); } return result ; }
D-22	-0.43118685483932495	public static List<Integer> filter_integers(List<Object> values ) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values ) { result.add((Integer) value); } return result ; }
P-22	-1.4448 -0.0431 -0.5587 -0.3365 -0.0867 -0.1355 -0.0402 -0.0862 -0.0179 -0.0329 -0.8043 -0.0938 -0.2956 -0.0629 -0.1558 -0.0628 -1.6226 -0.0863 -0.5391 -0.3680 -0.0772 -0.1627 -0.0723 -0.0937 -0.0675 -1.7349 -0.2625 -0.0725 -2.1453 -0.1935 -0.1270 -0.1428 -0.0553 -0.0594 -0.0675 -2.4524 -0.0756 -1.4681 -0.4391 -0.6204 -0.5392 -0.0594 -1.0031 -0.0927 -1.3212 -0.5148 -0.2244 -0.1240 -0.3864 -0.1072 -0.3547
S-66	<s> public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(" ")) { /* int cnt = Integer.parseInt(str); result -= cnt; */ <mask> } return result; } </s> java
T-66	<s> public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(" ")) { /* int cnt = Integer.parseInt(str); result -= cnt; */ <mask> } return result; } </s> java
H-66	-0.4711299240589142	public static int fruit_distribution(String s , int n ) { int result = n ; for (String str : s.split(" ")) { int cnt = Integer.parseInt(str ) ; result -= cnt ; } return result ; }
D-66	-0.4711299240589142	public static int fruit_distribution(String s , int n ) { int result = n ; for (String str : s.split(" ")) { int cnt = Integer.parseInt(str ) ; result -= cnt ; } return result ; }
P-66	-1.3349 -0.0399 -0.1147 -0.0319 -0.0960 -0.0222 -0.6941 -0.1038 -0.1094 -1.9158 -0.1029 -0.0737 -1.7692 -0.0852 -0.1150 -0.0912 -0.0984 -0.1674 -1.4520 -0.2813 -0.1202 -0.1671 -0.0978 -0.0600 -0.0836 -0.1310 -0.6883 -0.0827 -0.0793 -0.0917 -2.0790 -0.0381 -0.0908 -0.9841 -0.0987 -1.5333 -0.9103 -0.4465 -2.1644 -0.3376 -0.2402 -0.0833 -0.0659 -1.3261 -1.3569 -0.3638 -0.1153 -0.4763 -0.1205 -0.4249
S-52	<s> public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { /* if (l[i] <= t) return true; } return false; */ <mask> } </s> java
T-52	<s> public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { /* if (l[i] <= t) return true; } return false; */ <mask> } </s> java
H-52	-0.511563777923584	public static boolean below_threshold(int [] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] <= t ) return true; } return false; }
D-52	-0.511563777923584	public static boolean below_threshold(int [] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] <= t ) return true; } return false; }
P-52	-1.3054 -0.0448 -0.1072 -0.0428 -0.1077 -0.0294 -0.5766 -0.5142 -2.1708 -0.0651 -1.0344 -0.0949 -0.0691 -1.9355 -0.0862 -0.3222 -0.1289 -0.4136 -0.0862 -0.0952 -1.6262 -0.1055 -0.1028 -0.2636 -0.0877 -0.0601 -1.2220 -0.0864 -0.0727 -1.8969 -0.0923 -0.5868 -0.1185 -0.8781 -1.1769 -0.8310 -0.3707 -0.1631 -0.0860 -1.9217 -0.2321 -0.0689 -0.7982 -0.1360 -0.2124 -0.0355 -0.4693 -0.6570 -1.4780
S-42	<s> public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { /* result.add(n - 1); */ <mask> } return result; } </s> java
T-42	<s> public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { /* result.add(n - 1); */ <mask> } return result; } </s> java
H-42	-0.4571932256221771	public static List<Integer> incr_list(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result.add(n - 1); } return result ; }
D-42	-0.4571932256221771	public static List<Integer> incr_list(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result.add(n - 1); } return result ; }
P-42	-1.2583 -0.0416 -0.5013 -0.3265 -0.0680 -0.1646 -0.0067 -0.0928 -0.0328 -0.6712 -0.0787 -0.3438 -0.0604 -0.1747 -0.0614 -1.6024 -0.0860 -0.4822 -0.3967 -0.0674 -0.1883 -0.0660 -0.0927 -0.0602 -1.7572 -0.2916 -0.0727 -2.4029 -0.1818 -0.1242 -0.1464 -0.0706 -0.0758 -0.0590 -1.7648 -0.0923 -1.3522 -0.7068 -0.5940 -1.0323 -0.6650 -0.6086 -1.1871 -0.9689 -0.4243 -0.1141 -0.3098 -0.1020 -0.3731
S-31	<s> public static boolean is_prime(int n){ if (n < 2) return false; /* for (int k = 0; k < n; k += 1){ */ <mask> if (n % k == 0) return false; } return true; } </s> java
T-31	<s> public static boolean is_prime(int n){ if (n < 2) return false; /* for (int k = 0; k < n; k += 1){ */ <mask> if (n % k == 0) return false; } return true; } </s> java
H-31	-0.4171251654624939	public static boolean is_prime(int n ) { if (n < 2) return false; /* for (int k = 0; k < n; k += 1){ */ <mask> if (n % k == 0 ) return false; } return true; }
D-31	-0.4171251654624939	public static boolean is_prime(int n ) { if (n < 2) return false; /* for (int k = 0; k < n; k += 1){ */ <mask> if (n % k == 0 ) return false; } return true; }
P-31	-0.6958 -0.0498 -0.0994 -0.0661 -0.0977 -0.0280 -0.5847 -0.7382 -0.0845 -2.4455 -0.1581 -0.1637 -0.1211 -0.6645 -0.1771 -0.5463 -0.0820 -0.0914 -0.7600 -1.8456 -0.1446 -0.1345 -0.3114 -0.1364 -0.0978 -1.5098 -0.1449 -0.1473 -0.1495 -0.9114 -0.1031 -0.0507 -0.1852 -0.9102 -0.3937 -0.1903 -0.1375 -0.1828 -0.1725 -0.1214 -0.8522 -0.3345 -0.1737 -0.3020 -1.4524 -0.3313 -0.1351 -0.0874 -0.7349 -0.5863 -0.5623 -0.0803 -1.0751 -0.1124 -0.4876
S-30	<s> public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { /* result.add(number); */ <mask> } return result; } </s> java
T-30	<s> public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { /* result.add(number); */ <mask> } return result; } </s> java
H-30	-0.45839428901672363	public static List<Integer> get_positive(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers ) { result.add(number); } return result ; }
D-30	-0.45839428901672363	public static List<Integer> get_positive(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers ) { result.add(number); } return result ; }
P-30	-0.9806 -0.0436 -0.5472 -0.2953 -0.0731 -0.1319 -0.0974 -0.0966 -0.0127 -0.4115 -0.0829 -0.2721 -0.0641 -0.1404 -0.0572 -1.7524 -0.0856 -0.5979 -0.3728 -0.0697 -0.1626 -0.0713 -0.0907 -0.0657 -1.8553 -0.2756 -0.0749 -2.4967 -0.1889 -0.1216 -0.1325 -0.0630 -0.0544 -0.0625 -1.6745 -0.0870 -1.8835 -0.4612 -0.5779 -1.0578 -0.4121 -2.0742 -0.6739 -0.3163 -0.1208 -0.3010 -0.1019 -0.3599
S-101	<s> public static int choose_num(int x, int y) { /* if(x < y) return -1; */ <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; } </s> java
T-101	<s> public static int choose_num(int x, int y) { /* if(x < y) return -1; */ <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; } </s> java
H-101	-0.516447901725769	public static int choose_num(int x, int y) { /* if(x < y) return -1; */ <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1 ; <s> java.lang.System.out . println () ; }
D-101	-0.516447901725769	public static int choose_num(int x, int y) { /* if(x < y) return -1; */ <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1 ; <s> java.lang.System.out . println () ; }
P-101	-0.6285 -0.0326 -0.1184 -0.0436 -0.1022 -0.0422 -0.5808 -0.6378 -0.1863 -0.8483 -0.0903 -0.1170 -1.4035 -0.0841 -2.9500 -0.1319 -0.4787 -0.2083 -0.1039 -0.1281 -0.5440 -0.0636 -0.5608 -0.2562 -0.2318 -0.1529 -0.1600 -0.1735 -0.7454 -0.1533 -0.1675 -0.5923 -0.0918 -1.1623 -0.0850 -0.3480 -1.2961 -0.3206 -0.6126 -0.2385 -0.1098 -0.2533 -0.7935 -0.0630 -1.2822 -0.2560 -0.3660 -0.1735 -2.3140 -0.4633 -3.3813 -0.5681 -0.4232 -0.4156 -0.1353 -0.0188 -0.1253 -0.9722 -0.0846 -0.0522 -0.9114 -0.0189 -0.4664 -0.2393 -2.9830 -0.3428
S-44	<s> public static String change_base(int x, int base) { String result = ""; while (x > 0) { /* result = result + x % base; x = x - x / base; */ <mask> } return result; } </s> java
T-44	<s> public static String change_base(int x, int base) { String result = ""; while (x > 0) { /* result = result + x % base; x = x - x / base; */ <mask> } return result; } </s> java
H-44	-0.44887062907218933	public static java.lang.String change_base(int x, int base) { java.lang.String result = ""; while (x > 0) { result = result + x % base; x = x - x / base; */ <mask> } return result ; }
D-44	-0.44887062907218933	public static java.lang.String change_base(int x, int base) { java.lang.String result = ""; while (x > 0) { result = result + x % base; x = x - x / base; */ <mask> } return result ; }
P-44	-1.1507 -0.0436 -5.0762 -0.1507 -0.0370 -0.1447 -0.0499 -0.0531 -0.1026 -0.0296 -0.7155 -1.9424 -0.1426 -1.0321 -0.1185 -0.0573 -1.5269 -0.0850 -0.7563 -0.0717 -0.0546 -0.1120 -0.0671 -0.1173 -0.0916 -2.6827 -0.1638 -0.1321 -0.5029 -0.1601 -2.0453 -0.0803 -0.8531 -0.1314 -0.1048 -0.0930 -0.2064 -0.1160 -0.0813 -1.1967 -0.1297 -0.1291 -0.1643 -0.0953 -0.1955 -0.0828 -0.0536 -0.4927 -0.7058 -0.0851 -0.0954 -0.1306 -0.2674 -0.1164 -0.0933 -0.5803 -0.1016 -0.2365
S-8	<s> public static Integer[] sum_product(List<Integer> numbers) { /* Integer[] result = new Integer[2]; */ <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; } </s> java
T-8	<s> public static Integer[] sum_product(List<Integer> numbers) { /* Integer[] result = new Integer[2]; */ <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; } </s> java
H-8	-0.41766613721847534	public static java.lang.Integer [] sum_product(List<Integer> numbers ) { java.lang.Integer [] result = new java.lang.Integer[2]; */ <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result ; }
D-8	-0.41766613721847534	public static java.lang.Integer [] sum_product(List<Integer> numbers ) { java.lang.Integer [] result = new java.lang.Integer[2]; */ <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result ; }
P-8	-0.9404 -0.0430 -3.8756 -0.0994 -0.3611 -0.1327 -0.3435 -0.2656 -0.0494 -0.1036 -0.0207 -1.2152 -0.3258 -0.3336 -0.0792 -0.2201 -0.0547 -1.7095 -0.0815 -0.8641 -0.0601 -0.0740 -0.0983 -0.0805 -0.0945 -0.0697 -0.0747 -0.0811 -0.3647 -0.0689 -0.0683 -0.1107 -0.0082 -1.5239 -1.7243 -2.2702 -0.2261 -0.1578 -0.1483 -0.2123 -0.1250 -0.0886 -0.0664 -0.0492 -0.0514 -1.7603 -0.1158 -0.6896 -0.0459 -0.0884 -1.0956 -0.0868 -0.2825 -0.0058 -0.0763 -0.7671 -0.0615 -0.1260 -0.0715 -1.2575 -0.1363 -0.2129
S-49	<s> public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ /* result = 2 * result; } return result % p; */ <mask> } </s> java
T-49	<s> public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ /* result = 2 * result; } return result % p; */ <mask> } </s> java
H-49	-0.45527589321136475	public static int modp(int n, int p) { int result = 1 ; for (int i = 0; i < n; i += 1){ result = 2 * result; } return result % p; }
D-49	-0.45527589321136475	public static int modp(int n, int p) { int result = 1 ; for (int i = 0; i < n; i += 1){ result = 2 * result; } return result % p; }
P-49	-1.3143 -0.0371 -0.1375 -0.0494 -0.0521 -0.5895 -0.6326 -0.0800 -1.0716 -0.1167 -0.0643 -2.1119 -0.0865 -0.1662 -0.0778 -0.1018 -1.1126 -0.8421 -0.1681 -0.1173 -0.4494 -0.0880 -0.0874 -1.3399 -0.0938 -0.1245 -0.1079 -0.8832 -0.0798 -0.0740 -0.2574 -1.7856 -1.5704 -0.2273 -0.2082 -0.0402 -0.0904 -1.6366 -0.0883 -0.1927 -0.1113 -0.0958 -0.0817 -0.7259 -1.3184 -0.2551
S-3	<s> public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; /* if (balance > 0){ return false; } } return true; */ <mask> } </s> java
T-3	<s> public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; /* if (balance > 0){ return false; } } return true; */ <mask> } </s> java
H-3	-0.4020954668521881	public static boolean below_zero(List<Integer> operations) { int balance = 0 ; for (Integer op : operations ) { balance += op; if (balance > 0){ return false; } } return true; }
D-3	-0.4020954668521881	public static boolean below_zero(List<Integer> operations) { int balance = 0 ; for (Integer op : operations ) { balance += op; if (balance > 0){ return false; } } return true; }
P-3	-1.1598 -0.0390 -0.0991 -0.0472 -0.1008 -0.0595 -0.4015 -0.0826 -0.3333 -0.0720 -0.1807 -0.0584 -2.0397 -0.0801 -0.1665 -0.0698 -0.0945 -1.5281 -0.4019 -0.1926 -0.1237 -0.1481 -0.0362 -0.0611 -0.0659 -3.0208 -0.4165 -0.2799 -0.0376 -0.0385 -0.9070 -0.6380 -0.1195 -0.7828 -0.2316 -0.4830 -0.1083 -0.0677 -0.7116 -0.0896 -0.0818 -0.0881 -0.1160 -0.5049 -1.8635 -0.2680
S-35	<s> public static int max_element(List<Integer> l) { /* int m = 0; */ <mask> for (Integer e : l) { if (e > m){ m = e; } } return m; } </s> java
T-35	<s> public static int max_element(List<Integer> l) { /* int m = 0; */ <mask> for (Integer e : l) { if (e > m){ m = e; } } return m; } </s> java
H-35	-0.41682523488998413	<s> public static int max_element(List<Integer> l) { /* int m = 0; */ <mask> for (Integer e : l) { if ( e > m ) { m = e ; } } return m ; }
D-35	-0.41682523488998413	<s> public static int max_element(List<Integer> l) { /* int m = 0; */ <mask> for (Integer e : l) { if ( e > m ) { m = e ; } } return m ; }
P-35	-1.9571 -0.6108 -0.2990 -0.1136 -0.0585 -0.1384 -0.0438 -0.0992 -0.0247 -0.4887 -0.0725 -0.3220 -0.0730 -0.1795 -0.0628 -1.5905 -0.0782 -1.6253 -0.1124 -0.1566 -0.1005 -0.9503 -0.2487 -0.2636 -0.1730 -0.1768 -0.3235 -0.1275 -0.1280 -0.1388 -0.0532 -0.0640 -1.6777 -0.1000 -0.1514 -0.1220 -1.5379 -0.2862 -0.2872 -2.0217 -0.2576 -0.1825 -0.1296 -0.0944 -1.6843 -0.1716 -0.1134 -0.0965 -0.2074 -0.9413 -0.1117 -0.6459
S-24	<s> public static int largest_divisor(int n) { /* for (int i = n; i >= 0; i -= 1){ */ <mask> if (n % i == 0) return i; } return 1; } </s> java
T-24	<s> public static int largest_divisor(int n) { /* for (int i = n; i >= 0; i -= 1){ */ <mask> if (n % i == 0) return i; } return 1; } </s> java
H-24	-0.45046672224998474	@ java.lang.Override public static int largest_divisor(int n ) { /* for (int i = n; i >= 0; i -= 1){ */ <mask> if (n % i == 0) return i; } return 1 ; }
D-24	-0.45046672224998474	@ java.lang.Override public static int largest_divisor(int n ) { /* for (int i = n; i >= 0; i -= 1){ */ <mask> if (n % i == 0) return i; } return 1 ; }
P-24	-4.1818 -0.1982 -0.0693 -0.0216 -0.1610 -0.4326 -0.0768 -0.4687 -0.1164 -0.0162 -0.1049 -0.0302 -0.0099 -0.6756 -0.8409 -0.0791 -2.1734 -0.0820 -1.7908 -0.1674 -0.1355 -0.4856 -0.0856 -0.1005 -0.1144 -0.9234 -0.0989 -0.1134 -0.5475 -0.1052 -0.0250 -0.1535 -0.6307 -0.4106 -0.1905 -0.1256 -0.1702 -0.1731 -0.1196 -0.6141 -0.2830 -0.1554 -0.1450 -1.4407 -0.1198 -0.0895 -1.1401 -0.2463 -0.3899 -1.7517 -0.3884 -0.2630 -0.4420
S-15	<s> public static String string_sequence(int n) { String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } /* return result; */ <mask> } </s> java
T-15	<s> public static String string_sequence(int n) { String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } /* return result; */ <mask> } </s> java
H-15	-0.5242920517921448	public static java.lang.String string_sequence(int n) { java.lang.String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } /* return result; */ <mask> }
D-15	-0.5242920517921448	public static java.lang.String string_sequence(int n) { java.lang.String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } /* return result; */ <mask> }
P-15	-0.6986 -0.0496 -5.2986 -0.1840 -0.0731 -0.1401 -0.0526 -0.1297 -0.1009 -0.0136 -1.0100 -1.4965 -0.0647 -1.8453 -0.0783 -0.4574 -0.0683 -0.0514 -0.1120 -0.0603 -0.2668 -0.0863 -2.7847 -0.1862 -0.1220 -0.7995 -0.0814 -0.0947 -1.6599 -0.1028 -0.1700 -0.1128 -0.7636 -0.0866 -0.0663 -0.1860 -0.9897 -0.1231 -0.0728 -0.1876 -0.0819 -0.1152 -0.0230 -0.0815 -2.1613 -0.1482 -0.0924 -0.6309 -0.1313 -0.1489 -0.1665 -0.1824 -1.0303 -2.3898
S-82	<s> public static int starts_one_ends(int n) { if (n == 1) return 1; /* return (int) ((10 + 9) * Math.pow(10, n - 2)); */ <mask> } </s> java
T-82	<s> public static int starts_one_ends(int n) { if (n == 1) return 1; /* return (int) ((10 + 9) * Math.pow(10, n - 2)); */ <mask> } </s> java
H-82	-0.5046401619911194	public static int starts_one_ends(int n) { if (n == ( - 1 ) ) return 1 ; return (int) ((10 + 9) * Math.pow(10, n - 2)); */ <mask> } </s> java.lang.System.out . println () ; }
D-82	-0.5046401619911194	public static int starts_one_ends(int n) { if (n == ( - 1 ) ) return 1 ; return (int) ((10 + 9) * Math.pow(10, n - 2)); */ <mask> } </s> java.lang.System.out . println () ; }
P-82	-0.6246 -0.0329 -0.1362 -0.0323 -0.0940 -0.0507 -0.0994 -0.0911 -0.4932 -0.6779 -0.0700 -1.6069 -0.0761 -0.1938 -0.1209 -0.5505 -0.1459 -3.5097 -0.2135 -1.0319 -0.4220 -0.3260 -0.1798 -1.9829 -0.6356 -2.1811 -0.9052 -0.2677 -0.5055 -0.7004 -0.0861 -0.0738 -0.0342 -0.3589 -0.0520 -1.5080 -0.1038 -0.0520 -0.0457 -0.0709 -0.2797 -0.1711 -1.0235 -0.8646 -0.1493 -0.1785 -0.1550 -0.2391 -3.6092 -0.0973 -0.1964 -0.1696 -0.2336 -0.0639 -0.1561 -0.8561 -0.1059 -0.0915 -0.5728 -0.0307 -0.6450 -0.1777 -1.7501 -0.1376
S-75	<s> public static boolean is_simple_power(int x, int n) { /* int power = 1; */ <mask> while (power < x) { power *= n; } return power == x; } </s> java
T-75	<s> public static boolean is_simple_power(int x, int n) { /* int power = 1; */ <mask> while (power < x) { power *= n; } return power == x; } </s> java
H-75	-0.4213559329509735	public static boolean is_simple_power(int x, int n) { /* int power = 1; */ <mask> while (power < x) { power *= n; } return power == x ; }
D-75	-0.4213559329509735	public static boolean is_simple_power(int x, int n) { /* int power = 1; */ <mask> while (power < x) { power *= n; } return power == x ; }
P-75	-1.1369 -0.0373 -0.0934 -0.0628 -0.0977 -0.0313 -0.0975 -0.0402 -0.6574 -0.7707 -0.1618 -1.0768 -0.0958 -0.0770 -1.7151 -0.0814 -1.5925 -0.1137 -0.0785 -0.1130 -1.2854 -0.2326 -0.1759 -0.2403 -0.2255 -0.2693 -0.1320 -0.2770 -0.1508 -0.1814 -1.8037 -0.0914 -0.1970 -0.0177 -0.0996 -1.0501 -0.2090 -0.1663 -0.2098 -0.1022 -0.2218 -1.9515 -0.1887 -0.9298
S-13	<s> public static int greatest_common_divisor(int a, int b){ while (b > 0) { /* a = b; b = a % b; */ <mask> } return a; } </s> java
T-13	<s> public static int greatest_common_divisor(int a, int b){ while (b > 0) { /* a = b; b = a % b; */ <mask> } return a; } </s> java
H-13	-0.41740602254867554	public static int greatest_common_divisor(int a, int b){ while (b > 0 ) { /* a = b; b = a % b; */ <mask> } return a ; }
D-13	-0.41740602254867554	public static int greatest_common_divisor(int a, int b){ while (b > 0 ) { /* a = b; b = a % b; */ <mask> } return a ; }
P-13	-0.8517 -0.0406 -0.1401 -0.0125 -0.1089 -0.0091 -0.0854 -0.0276 -0.0099 -0.5537 -1.0112 -0.0917 -1.2504 -0.0894 -0.0819 -2.1625 -0.4484 -0.1299 -0.3719 -0.1858 -1.4975 -0.4852 -0.0729 -1.9992 -0.1230 -0.1566 -0.2480 -0.7535 -0.0949 -0.1411 -0.2084 -0.1123 -0.0925 -0.5829 -0.3489 -0.1206 -0.1739 -0.1708 -1.5138 -0.1166 -0.3234 -0.9950 -0.1228 -0.2494
S-156	<s> public static boolean right_angle_triangle(int a, int b, int c) { /* return a*a + b*b == c*c; */ <mask> } </s> java
T-156	<s> public static boolean right_angle_triangle(int a, int b, int c) { /* return a*a + b*b == c*c; */ <mask> } </s> java
H-156	-0.4728548526763916	public static boolean right_angle_triangle(int a, int b, int c) { return ( a*a + b*b ) == c*c ; }
D-156	-0.4728548526763916	public static boolean right_angle_triangle(int a, int b, int c) { return ( a*a + b*b ) == c*c ; }
P-156	-0.5326 -0.0373 -0.1031 -0.0643 -0.1039 -0.0508 -0.0892 -0.0495 -0.0604 -0.4938 -0.9719 -0.0969 -0.9475 -0.0984 -0.0833 -0.8963 -0.0916 -0.0851 -1.4985 -0.0823 -1.9447 -0.6675 -1.1477 -0.9619 -0.1093 -0.4363 -0.1224 -0.2785 -0.0765 -0.8840 -0.5448 -0.2418 -0.2920 -0.0996 -1.4856 -0.1410 -1.6251
S-78	<s> public static String decimal_to_binary(int decimal) { /* String result = Integer.toHexString(decimal); */ <mask> return "db" + result + "db"; } </s> java
T-78	<s> public static String decimal_to_binary(int decimal) { /* String result = Integer.toHexString(decimal); */ <mask> return "db" + result + "db"; } </s> java
H-78	-0.6766090393066406	public static java.lang.String decimal_to_binary( int decimal) { java.lang.String result = Integer.toHexString(decimal); return "db" + result + "db"; }
D-78	-0.6766090393066406	public static java.lang.String decimal_to_binary( int decimal) { java.lang.String result = Integer.toHexString(decimal); return "db" + result + "db"; }
P-78	-1.2886 -0.0463 -4.3849 -0.1319 -0.0335 -0.1387 -0.0510 -0.0708 -0.0862 -0.0700 -0.0890 -0.0116 -1.0147 -2.0035 -0.0500 -1.5358 -0.0800 -2.4622 -0.0681 -0.0798 -0.1050 -0.0838 -0.2839 -0.1194 -2.8247 -0.1157 -0.1586 -0.0217 -1.0290 -1.1720 -1.2757 -2.0961 -1.0185 -0.0656 -0.0900 -0.0665 -0.0645 -0.5143 -0.1351 -0.0658 -1.3604 -0.1121 -2.6190
S-137	<s> public static boolean is_equal_to_sum_even(int n) { /* return ((n * 2 == 1) ^ (n < 8)); */ <mask> } </s> java
T-137	<s> public static boolean is_equal_to_sum_even(int n) { /* return ((n * 2 == 1) ^ (n < 8)); */ <mask> } </s> java
H-137	-0.47771379351615906	public static boolean is_equal_to_sum_even(int n) { if ( n == ( - 1 ) ) { return false ; } else { return true ; } }
D-137	-0.47771379351615906	public static boolean is_equal_to_sum_even(int n) { if ( n == ( - 1 ) ) { return false ; } else { return true ; } }
P-137	-0.4578 -0.0370 -0.1054 -0.0695 -0.0846 -0.0950 -0.0843 -0.0803 -0.0867 -0.0570 -0.0984 -0.0372 -0.5415 -1.0847 -0.0781 -2.0623 -0.0800 -2.6562 -0.1754 -0.8196 -1.0494 -1.5473 -0.1221 -0.5461 -0.2381 -0.1119 -0.6160 -0.2668 -0.6983 -0.4735 -0.1081 -1.1115 -0.3076 -0.6208 -0.5666 -0.3794 -0.1561 -0.3625 -0.5580
S-158	<s> public static int[] eat(int number, int need, int remaining) { /* return new int[] {number + need, remaining - need}; */ <mask> } </s> java
T-158	<s> public static int[] eat(int number, int need, int remaining) { /* return new int[] {number + need, remaining - need}; */ <mask> } </s> java
H-158	-0.5276132822036743	public static int[] eat(int number, int need, int remaining) { return new int[] {number + need, remaining - need}; } <s> java.lang.System.out . println () ; }
D-158	-0.5276132822036743	public static int[] eat(int number, int need, int remaining) { return new int[] {number + need, remaining - need}; } <s> java.lang.System.out . println () ; }
P-158	-0.7950 -0.0389 -0.1492 -2.0932 -0.0308 -0.4111 -0.9911 -0.0800 -0.8015 -0.1159 -0.0335 -0.5579 -0.0991 -0.0405 -1.4926 -0.0885 -1.6131 -0.1672 -0.0831 -1.7169 -0.0946 -0.2272 -0.2085 -0.0631 -0.4304 -0.0358 -0.1311 -0.0374 -0.0980 -1.2175 -2.5188 -1.0386 -0.2769 -0.2178 -0.1159 -0.1127 -0.1239 -1.9654 -0.0894 -0.0978 -1.1388 -0.0167 -0.9453 -0.2666 -1.1428 -0.2600
S-28	<s> public static String concatenate(String[] strings) { /* String result = null; */ <mask> for (String string : strings) result += string; return result; } </s> java
T-28	<s> public static String concatenate(String[] strings) { /* String result = null; */ <mask> for (String string : strings) result += string; return result; } </s> java
H-28	-0.5539944171905518	public static java.lang.String concatenate(String [] strings ) { java.lang.String result = new java.lang.String () ; if ( ( strings.length ) == 0 ) { return null ; } else { for (String string : strings ) result += string; return result ; } }
D-28	-0.5539944171905518	public static java.lang.String concatenate(String [] strings ) { java.lang.String result = new java.lang.String () ; if ( ( strings.length ) == 0 ) { return null ; } else { for (String string : strings ) result += string; return result ; } }
P-28	-1.1968 -0.0465 -3.8933 -0.1111 -0.1272 -0.1373 -0.0437 -0.0548 -1.0301 -0.4315 -1.6106 -0.0773 -1.6932 -0.0768 -1.1328 -0.0723 -0.0600 -0.1158 -0.0517 -0.1926 -0.0906 -2.4318 -0.0959 -0.1011 -0.0701 -0.1302 -0.0249 -1.0815 -0.3875 -2.8392 -0.1672 -1.3659 -0.1787 -0.2221 -0.0701 -0.1863 -1.2839 -0.4645 -0.2372 -1.0186 -0.1971 -0.9118 -0.3716 -0.1010 -1.0948 -0.1725 -1.7349 -0.1349 -0.1565 -0.0731 -0.0611 -0.0904 -1.8016 -0.1835 -0.0710 -0.0634 -1.2202 -0.0929 -0.0547 -0.5793 -0.1036 -0.3626 -0.6659
S-60	<s> public static int sum_to_n(int n) { /* return (n + 1) * (n / 2); */ <mask> } </s> java
T-60	<s> public static int sum_to_n(int n) { /* return (n + 1) * (n / 2); */ <mask> } </s> java
H-60	-0.49419939517974854	public static int sum_to_n(int n) { return (n + 1) * (n / 2); }
D-60	-0.49419939517974854	public static int sum_to_n(int n) { return (n + 1) * (n / 2); }
P-60	-0.8569 -0.0367 -0.1617 -0.0934 -0.1037 -0.0731 -0.0913 -0.0782 -0.5585 -0.8172 -0.0761 -1.4785 -0.0790 -1.9389 -0.3263 -0.6226 -0.2332 -1.7238 -0.0545 -0.1201 -0.1940 -0.1251 -0.3053 -0.6324 -1.5744
S-96	<s> public static int multiply(int a, int b) { /* return (a % 10) * (b % 10); */ <mask> } </s> java
T-96	<s> public static int multiply(int a, int b) { /* return (a % 10) * (b % 10); */ <mask> } </s> java
H-96	-0.4678463339805603	public static int multiply(int a, int b) { return (a % 10) * (b % 10); } java.lang.System.out . println () ; }
D-96	-0.4678463339805603	public static int multiply(int a, int b) { return (a % 10) * (b % 10); } java.lang.System.out . println () ; }
P-96	-0.8455 -0.0354 -0.1508 -0.0468 -0.3994 -0.6995 -0.0955 -0.7190 -0.0875 -0.0881 -1.2492 -0.0878 -1.8021 -0.1723 -0.7440 -0.1299 -0.6584 -0.0285 -0.1145 -0.1030 -0.0901 -0.1844 -0.8940 -2.7795 -0.2071 -0.0630 -0.1772 -1.6569 -0.1151 -0.1052 -0.4065 -0.0297 -0.5114 -0.2136 -0.7450 -0.4062
S-55	<s> public static int fib(int n) { /* return fib(n - 1) + fib(n - 2); */ <mask> } </s> java
T-55	<s> public static int fib(int n) { /* return fib(n - 1) + fib(n - 2); */ <mask> } </s> java
H-55	-0.5085340738296509	public static int fib(int n) { if ( n == 0 ) { return 0 ; } else { return fib(n - 1) + fib(n - 2); } }
D-55	-0.5085340738296509	public static int fib(int n) { if ( n == 0 ) { return 0 ; } else { return fib(n - 1) + fib(n - 2); } }
P-55	-0.6525 -0.0398 -0.1631 -0.0481 -0.3578 -0.5563 -0.0717 -0.9195 -0.0798 -2.7954 -0.2101 -0.9381 -1.1828 -1.2430 -0.1878 -0.5562 -0.2350 -0.7231 -0.1862 -0.1164 -0.8836 -0.3386 -1.0042 -0.1534 -0.4881 -0.1358 -0.1573 -1.0375 -0.0851 -0.0593 -0.2796 -0.1043 -0.1312 -0.1838 -0.9762 -0.5081 -1.0275
S-45	<s> public static double triangle_area(double a, double h) { /* return a * h; */ <mask> } </s> java
T-45	<s> public static double triangle_area(double a, double h) { /* return a * h; */ <mask> } </s> java
H-45	-0.30535516142845154	public static double triangle_area(double a, double h) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return a * h; }
D-45	-0.30535516142845154	public static double triangle_area(double a, double h) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return a * h; }
P-45	-0.4971 -0.0469 -0.1685 -0.0662 -0.0900 -0.0495 -0.5181 -0.8355 -0.0821 -1.0100 -0.1333 -0.0697 -1.6653 -0.0831 -3.2397 -0.0798 -0.0906 -0.1214 -0.8931 -0.0974 -0.0402 -0.2117 -0.0408 -1.2879 -0.2642 -2.5012 -0.0767 -0.0748 -0.0994 -0.1168 -0.0812 -0.0985 -0.1399 -0.0416 -0.1165 -0.1611 -1.1748 -0.0833 -0.0792 -0.0963 -0.1023 -0.0879 -0.1080 -0.1384 -0.0548 -0.0898 -0.1539 -0.7321 -0.0841 -0.0811 -0.0942 -0.1178 -0.0901 -0.1369 -0.1506 -0.0642 -0.0771 -0.1507 -0.6638 -0.0832 -0.0893 -0.0934 -0.1350 -0.0901 -0.1745 -0.1663 -0.0735 -0.0705 -0.1480 -0.6246 -0.0848 -0.0989 -0.0934 -0.1574 -0.0931 -0.2092 -0.1822 -0.0834 -0.0648 -0.1442 -0.5852 -0.0877 -0.1018 -0.0926 -0.1877 -0.0977 -0.2510 -0.2030 -0.0929 -0.0606 -0.1426 -2.5110 -0.6922 -0.0477 -0.0828 -1.0429 -0.3466 -0.5381
S-53	<s> public static int add(int x, int y) { /* return x | y; */ <mask> } </s> java
T-53	<s> public static int add(int x, int y) { /* return x | y; */ <mask> } </s> java
H-53	-0.6038480401039124	@ java.lang.Override public static int add(int x, int y) { /* return x | y; */ <mask> } java.lang.System.out . println () ; return x | y ; }
D-53	-0.6038480401039124	@ java.lang.Override public static int add(int x, int y) { /* return x | y; */ <mask> } java.lang.System.out . println () ; return x | y ; }
P-53	-4.1728 -0.9636 -0.0618 -0.0286 -0.1449 -0.4106 -0.0699 -0.3686 -0.1364 -0.1025 -0.4091 -0.9513 -0.1343 -0.8753 -0.0904 -0.1050 -1.3503 -0.0794 -2.8321 -0.1755 -0.1395 -0.0417 -0.0990 -0.5629 -0.2699 -0.1929 -0.3195 -0.1807 -0.6672 -3.3140 -0.0853 -0.0655 -0.1092 -1.8381 -0.1171 -0.0739 -0.4273 -0.0168 -0.7714 -0.2485 -0.9856 -1.2209 -0.7773 -0.1380 -1.4839 -0.1880 -0.5843
S-41	<s> public static int car_race_collision(int n) { /* return n; */ <mask> } </s> java
T-41	<s> public static int car_race_collision(int n) { /* return n; */ <mask> } </s> java
H-41	-0.5708644390106201	public static int car_race_collision(int n) { if ( n == ( - 1 ) ) { return 0 ; } else { return n ; } }
D-41	-0.5708644390106201	public static int car_race_collision(int n) { if ( n == ( - 1 ) ) { return 0 ; } else { return n ; } }
P-41	-0.8511 -0.0373 -0.1583 -0.0520 -0.1121 -0.0045 -0.0837 -0.0239 -0.0076 -0.5719 -1.0680 -0.0724 -1.8693 -0.0833 -2.6369 -0.1842 -0.7257 -0.9998 -1.2180 -0.0234 -0.3443 -0.2086 -0.1276 -0.6199 -0.2790 -1.8696 -0.1763 -0.1361 -0.9630 -0.2973 -0.7303 -0.2069 -2.1342 -0.2257 -0.2946 -1.1544
S-23	<s> public static int strlen(String string){ /* return string.length() - 1; */ <mask> } </s> java
T-23	<s> public static int strlen(String string){ /* return string.length() - 1; */ <mask> } </s> java
H-23	-0.6037117838859558	public static int strlen(String string){ if ( string == null ) { return 0 ; } else { return string.length() - 1; } <s> java.lang.System.out . println () ; }
D-23	-0.6037117838859558	public static int strlen(String string){ if ( string == null ) { return 0 ; } else { return string.length() - 1; } <s> java.lang.System.out . println () ; }
P-23	-0.8151 -0.0415 -0.1440 -0.0561 -0.0935 -0.4876 -0.0927 -0.1136 -2.0250 -2.4366 -0.4046 -0.8459 -0.6587 -0.1157 -0.2733 -0.6379 -0.1929 -0.5853 -0.3492 -0.1455 -1.0635 -0.4389 -0.8383 -0.7053 -0.0833 -0.1225 -1.2993 -0.1177 -0.9781 -0.9753 -2.0367 -1.4669 -0.2312 -0.2421 -0.2632 -0.1592 -0.1364 -2.4692 -0.0925 -0.1520 -0.8974 -0.0276 -1.2767 -0.2518 -0.4816 -0.4495
S-2	<s> public static double truncate_number(double number) { /* return number / 1.0; */ <mask> } </s> java
T-2	<s> public static double truncate_number(double number) { /* return number / 1.0; */ <mask> } </s> java
H-2	-0.3742522895336151	public static double truncate_number(double number) { java.lang.System.out . println ( number ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return number / 1.0; java.lang.System.out . println () ; }
D-2	-0.3742522895336151	public static double truncate_number(double number) { java.lang.System.out . println ( number ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return number / 1.0; java.lang.System.out . println () ; }
P-2	-0.7507 -0.0449 -0.1452 -0.0255 -0.1027 -0.0584 -0.5821 -0.9037 -0.0766 -1.5717 -0.0868 -3.6201 -0.0716 -0.0776 -0.1192 -0.8152 -0.1101 -0.0473 -0.2618 -0.0334 -1.3547 -0.2222 -0.1780 -0.1430 -2.8124 -0.0743 -0.1121 -0.1026 -0.0956 -0.0915 -0.1101 -0.1594 -0.0524 -0.4074 -0.1469 -1.3947 -0.0863 -0.1160 -0.1016 -0.1084 -0.0937 -0.1154 -0.1668 -0.0637 -0.0558 -0.1595 -0.9369 -0.0894 -0.1170 -0.0985 -0.1207 -0.0959 -0.1438 -0.1899 -0.0662 -0.0557 -0.1612 -2.3727 -0.1473 -0.3588 -0.0624 -0.7011 -1.9396 -0.0813 -0.1094 -0.1010 -0.2255 -0.1058 -0.1999 -0.2794 -0.1824 -0.0357 -0.1070 -0.4339 -0.5218
S-118	<s> </s> java
T-118	<s> </s> java
H-118	-0.4558789134025574	@ java.lang.Override public java.lang.String toString () { java.lang.String s = new java.lang.String () ; java.lang.System.out . println ( s ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; return s ; }
D-118	-0.4558789134025574	@ java.lang.Override public java.lang.String toString () { java.lang.String s = new java.lang.String () ; java.lang.System.out . println ( s ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; return s ; }
P-118	-5.6603 -0.7009 -0.0521 -0.0386 -0.1220 -0.1657 -0.2655 -3.2705 -0.3337 -0.0713 -0.1189 -0.3051 -0.3327 -0.0358 -0.0978 -1.7694 -0.0795 -0.0676 -0.1125 -0.1191 -2.0635 -0.1426 -2.8446 -0.1266 -0.0904 -0.0713 -0.1098 -0.0312 -0.5445 -0.8235 -2.4896 -0.1090 -0.0589 -0.1184 -2.3852 -0.1148 -0.0431 -0.3620 -0.0326 -0.4309 -0.6611 -0.6226 -0.1147 -0.9597 -0.0986 -0.0841 -0.1105 -0.4600 -0.0965 -0.1199 -0.1990 -0.0376 -0.5680 -0.3588 -1.1196 -0.5075 -0.6902 -0.1120 -0.1159 -0.5091 -0.0995 -0.1016 -0.0963 -0.3239 -0.0991 -0.0957 -0.1553 -0.0411 -0.4910 -0.3099 -0.7041 -0.2906 -0.0857 -0.1037 -0.1233 -0.6306 -0.0982 -0.1153 -0.0906 -0.2017 -0.0923 -0.1050 -0.1487 -0.0426 -0.7046 -0.3620 -0.6993 -0.2345 -0.0868 -0.1016 -0.1209 -1.7869 -0.1563 -0.3916 -0.1027 -0.1144
S-126	<s> public static String intersection(int[] interval1, int[] interval2) { /* int l = Math.min(interval1[0], interval2[0]); int r = Math.max(interval1[1], interval2[1]); */ <mask> int length = r - l; if(length > 0 && is_prime(length)) return "YES"; return "NO"; } </s> java
T-126	<s> public static String intersection(int[] interval1, int[] interval2) { /* int l = Math.min(interval1[0], interval2[0]); int r = Math.max(interval1[1], interval2[1]); */ <mask> int length = r - l; if(length > 0 && is_prime(length)) return "YES"; return "NO"; } </s> java
H-126	-0.46304768323898315	public static String intersection(int[] interval1, int[] interval2) { /* int l =Math.min(interval1[0], interval2[0]); int r =Math.max(interval1[1], interval2[1]); */ <mask> int length = r - l ; if(length > 0 && is_prime(length)) return "YES"; return "NO"; }
D-126	-0.46304768323898315	public static String intersection(int[] interval1, int[] interval2) { /* int l =Math.min(interval1[0], interval2[0]); int r =Math.max(interval1[1], interval2[1]); */ <mask> int length = r - l ; if(length > 0 && is_prime(length)) return "YES"; return "NO"; }
P-126	-0.5601 -0.0456 -2.1618 -0.0346 -0.5778 -0.7122 -1.4532 -0.0629 -0.3409 -0.0789 -1.7559 -0.0661 -0.2859 -0.0763 -2.3584 -0.1470 -0.0703 -0.1125 -2.6705 -0.0728 -0.0513 -0.6250 -0.1614 -0.1320 -0.5398 -0.1001 -0.0981 -0.3313 -0.1312 -0.0686 -0.0924 -0.4364 -0.1041 -0.2596 -0.4397 -0.1734 -0.0666 -0.3397 -0.0846 -0.0515 -0.1361 -0.4161 -0.2039 -0.1558 -0.1716 -0.2518 -0.0761 -0.0983 -0.2088 -0.0647 -0.0646 -1.6242 -0.1974 -1.0859 -0.3281 -0.2271 -0.1350 -0.3746 -0.1415 -0.0956 -0.0524 -0.5597 -0.3193 -1.4262 -0.1281 -0.1046 -0.0206 -1.5516 -0.2432 -0.1014 -0.0209 -1.7042 -0.3406 -3.7053
S-18	<s> public static int how_many_times(String string, String substring) { int times = 0; /* for (int i = 0; i < string.length() - substring.length(); i += 1) { */ <mask> if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; } </s> java
T-18	<s> public static int how_many_times(String string, String substring) { int times = 0; /* for (int i = 0; i < string.length() - substring.length(); i += 1) { */ <mask> if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; } </s> java
H-18	-0.4571402072906494	public static int how_many_times(String string, String substring ) { int times = 0; /* for (int i = 0; i < string.length () - substring.length () ; i += 1) { */ <mask> if (string. substring(i, i + substring.length () ) == ( substring.length () ) ) { times += 1 ; } } return times ; }
D-18	-0.4571402072906494	public static int how_many_times(String string, String substring ) { int times = 0; /* for (int i = 0; i < string.length () - substring.length () ; i += 1) { */ <mask> if (string. substring(i, i + substring.length () ) == ( substring.length () ) ) { times += 1 ; } } return times ; }
P-18	-0.7259 -0.0339 -0.1059 -0.0252 -0.0985 -0.0495 -0.1085 -0.0176 -0.6414 -0.1044 -0.1092 -1.0781 -1.0528 -0.0265 -2.2087 -0.0892 -0.1257 -0.0315 -0.0927 -1.3948 -1.8557 -0.1647 -0.1331 -0.5814 -0.0811 -0.0976 -1.3354 -0.1004 -0.1082 -0.2638 -0.0985 -0.0809 -3.0010 -0.6125 -0.0305 -0.1186 -0.1397 -2.5704 -0.2940 -0.0798 -0.0794 -2.4325 -0.0722 -0.8098 -0.1762 -0.0957 -0.1512 -0.1764 -0.1188 -0.1885 -0.1051 -0.8179 -0.4085 -0.4640 -0.4527 -0.1502 -0.2300 -0.0475 -0.1103 -0.1337 -0.5022 -0.5389 -2.6035 -0.6574 -0.0608 -0.1513 -0.1225 -0.1410 -0.7394 -0.4067 -0.3916 -0.1541 -0.0792 -1.7953 -0.3555 -0.1065 -0.1631 -0.1216 -0.0446 -0.8720 -0.0877 -0.3025
S-161	<s> public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; /* MessageDigest md = MessageDigest.getInstance("SHA-384"); */ <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); } </s> java
T-161	<s> public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; /* MessageDigest md = MessageDigest.getInstance("SHA-384"); */ <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); } </s> java
H-161	-0.49189671874046326	public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; /* MessageDigest md = MessageDigest. getInstance("SHA-384"); */ <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }
D-161	-0.49189671874046326	public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; /* MessageDigest md = MessageDigest. getInstance("SHA-384"); */ <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }
P-161	-0.6145 -0.0362 -2.0577 -0.0782 -0.0899 -0.0629 -0.0887 -0.0382 -0.0540 -0.4175 -0.1066 -0.0661 -2.4113 -0.0712 -0.0679 -0.0481 -0.0845 -0.1795 -0.1236 -0.5075 -0.2725 -2.3916 -0.0676 -0.6167 -0.0953 -0.1273 -1.5030 -1.8567 -0.0376 -0.0641 -0.1085 -0.0821 -0.1053 -1.6511 -0.3537 -0.0272 -0.0533 -0.0327 -0.6447 -0.2328 -0.2363 -0.3087 -0.1238 -0.1272 -0.1105 -0.1055 -0.5645 -0.3618 -0.1323 -1.1918 -1.2013 -0.0942 -2.7010 -0.1461 -0.1200 -0.0481 -0.1242 -0.1109 -2.1991 -0.2285 -0.0064 -0.0271 -0.1106 -0.0780 -0.0192 -0.0192 -1.8906 -0.1703 -2.2888 -0.5983 -1.8779 -0.1736 -0.8848
S-132	<s> public static long sum_squared_nums(double[] lst) { /* int result = 0, i = 0; for(int j = 0; j < lst.length; j++) { result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); */ <mask> } return result; } </s> java
T-132	<s> public static long sum_squared_nums(double[] lst) { /* int result = 0, i = 0; for(int j = 0; j < lst.length; j++) { result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); */ <mask> } return result; } </s> java
H-132	-0.4241415560245514	public static long sum_squared_nums(double[] lst) { /* int result = 0, i = 0 ; for(int j = 0 ; j < lst.length; j ++ ) { result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); */ <mask> } return result ; }
D-132	-0.4241415560245514	public static long sum_squared_nums(double[] lst) { /* int result = 0, i = 0 ; for(int j = 0 ; j < lst.length; j ++ ) { result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); */ <mask> } return result ; }
P-132	-1.1196 -0.0329 -0.0516 -0.0814 -0.1111 -0.0158 -0.0891 -0.0916 -0.7800 -0.3188 -1.8731 -0.0375 -1.6439 -0.0752 -1.9821 -0.1113 -0.0762 -0.1116 -1.4423 -0.1112 -0.1144 -2.1696 -0.3856 -0.1690 -0.6111 -0.5039 -0.0842 -0.0928 -1.4453 -0.1951 -0.0975 -0.0732 -0.3446 -0.0861 -0.0638 -1.2554 -0.0963 -1.3670 -0.7026 -0.0959 -0.1544 -0.0902 -0.1254 -0.0993 -0.1092 -0.2669 -0.2549 -0.3478 -0.6021 -0.1509 -0.6987 -1.2182 -1.0264 -0.0448 -0.1174 -0.0950 -0.1071 -0.4866 -0.4160 -0.1889 -0.3071 -0.0474 -0.3499 -0.6330 -0.1728 -1.6310 -0.1123 -0.1199 -0.1469 -0.4096 -0.0947 -0.1128 -0.6939 -0.1184 -0.1513
S-12	<s> public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ /* if (strings.size() > string.length()){ maxlen = strings.size(); */ <mask> } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; } </s> java
T-12	<s> public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ /* if (strings.size() > string.length()){ maxlen = strings.size(); */ <mask> } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; } </s> java
H-12	-0.45300522446632385	<s> public static String longest(List<String> strings){ int maxlen = 0 ; for (String string : strings){ if (strings.size() > string.length()){ maxlen = strings.size(); } } for (String string : strings){ if (string.length() == maxlen ) { return string; } } return null; }
D-12	-0.45300522446632385	<s> public static String longest(List<String> strings){ int maxlen = 0 ; for (String string : strings){ if (strings.size() > string.length()){ maxlen = strings.size(); } } for (String string : strings){ if (string.length() == maxlen ) { return string; } } return null; }
P-12	-2.1942 -0.4398 -0.2682 -0.1261 -0.0776 -1.6170 -0.0233 -0.3949 -0.0791 -0.2260 -0.0715 -0.1663 -0.1093 -1.6319 -0.1645 -0.0296 -0.0944 -1.6698 -0.5832 -0.1876 -0.1119 -0.1386 -0.0842 -0.0563 -0.1317 -1.1771 -0.3965 -0.1207 -1.0714 -0.1191 -0.4209 -1.0099 -0.1854 -0.0763 -0.0941 -0.0930 -0.6012 -0.0351 -0.1296 -0.1268 -0.1172 -0.2253 -2.0629 -1.1247 -1.3664 -0.3062 -0.1173 -0.1157 -0.0847 -0.0602 -0.1312 -1.1665 -0.0951 -0.1287 -0.7838 -0.1472 -0.1578 -1.2104 -0.2037 -0.0354 -1.9717 -0.3628 -0.1155 -0.1134 -1.5903 -0.0919 -0.1433 -0.5144 -0.1740 -1.1651 -0.1085 -0.2910
S-151	<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { /* result[i] = Math.floorDiv(game[i], guess[i]); */ <mask> } return result; } </s> java
T-151	<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { /* result[i] = Math.floorDiv(game[i], guess[i]); */ <mask> } return result; } </s> java
H-151	-0.5724148154258728	<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { /* result[i] = Math.floorDiv(game[i], guess[i]); */ <mask> } return result ; }
D-151	-0.5724148154258728	<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { /* result[i] = Math.floorDiv(game[i], guess[i]); */ <mask> } return result ; }
P-151	-2.0744 -0.4351 -0.3280 -0.1268 -0.0647 -0.1133 -2.3154 -0.0319 -0.6317 -0.8267 -1.7745 -0.0676 -1.0037 -0.0938 -2.0546 -0.0407 -1.6532 -0.0803 -0.1378 -2.8245 -0.0602 -0.0917 -0.0703 -0.0694 -0.7940 -0.0832 -0.0958 -0.0871 -2.1580 -0.1507 -0.1408 -0.5519 -0.0843 -0.0962 -1.7902 -0.0968 -0.0971 -0.1965 -0.0744 -0.0684 -0.9795 -0.0844 -0.0806 -2.2002 -0.0853 -2.4804 -0.0888 -0.8391 -0.3581 -0.1890 -0.1335 -2.6464 -0.1008 -0.1047 -0.0356 -0.8973 -0.2372 -0.7822 -0.4486 -0.3593 -0.0416 -0.7016 -0.2611 -0.4886 -0.6273 -0.1786 -0.0973 -0.1525 -1.0211 -0.1298 -0.0966 -1.5313 -0.0953 -0.2696
S-130	<s> public static int digits(int n) { int product = 1; int odd_count = 0; /* while(n >= 0) { int digit = n * 10; if(digit % 2 == 0) { product /= digit; */ <mask> odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; } </s> java
T-130	<s> public static int digits(int n) { int product = 1; int odd_count = 0; /* while(n >= 0) { int digit = n * 10; if(digit % 2 == 0) { product /= digit; */ <mask> odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; } </s> java
H-130	-0.3807636797428131	public static int digits(int n) { int product = 1; int odd_count = 0; /* while(n >= 0) { int digit = n * 10; if(digit % 2 == 0) { product /= digit; } else { product /= digit; } n /= 10; } if(odd_count == 0) return 0; return product ; }
D-130	-0.3807636797428131	public static int digits(int n) { int product = 1; int odd_count = 0; /* while(n >= 0) { int digit = n * 10; if(digit % 2 == 0) { product /= digit; } else { product /= digit; } n /= 10; } if(odd_count == 0) return 0; return product ; }
P-130	-0.7763 -0.0370 -0.1276 -0.0263 -0.6772 -0.4728 -0.0778 -1.3324 -0.0803 -0.1404 -0.0390 -0.1217 -1.4991 -0.1176 -0.1088 -0.1055 -0.0534 -0.0913 -0.8372 -1.3697 -0.0742 -0.3548 -0.1479 -0.0735 -0.6911 -0.0991 -0.1425 -0.0584 -0.1014 -0.0820 -0.0464 -0.1899 -0.0965 -0.9623 -0.2572 -0.2661 -0.0498 -0.1399 -1.1049 -0.1085 -0.0750 -0.0775 -0.0440 -0.4634 -1.0093 -1.7448 -0.4262 -0.3813 -0.1358 -0.4485 -0.7636 -0.2085 -0.3295 -0.1293 -0.3077 -0.4451 -0.1523 -0.6705 -0.1027 -0.1026 -0.0479 -0.0908 -1.0822 -0.1003 -1.5623 -0.1248 -0.0480 -1.2486 -0.2022 -0.9908
S-121	<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { /* if(Integer.toString(arr.get(i)).length() >= 2) { result -= arr.get(i); */ <mask> } } return result; } </s> java
T-121	<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { /* if(Integer.toString(arr.get(i)).length() >= 2) { result -= arr.get(i); */ <mask> } } return result; } </s> java
H-121	-0.5183746814727783	<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(Integer.toString(arr.get(i)).length() >= 2) { result -= arr.get(i); } } return result ; }
D-121	-0.5183746814727783	<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(Integer.toString(arr.get(i)).length() >= 2) { result -= arr.get(i); } } return result ; }
P-121	-2.0318 -0.2878 -0.1897 -0.0988 -0.0603 -0.1329 -0.0761 -0.1018 -0.0203 -0.5507 -0.0256 -0.3605 -0.0585 -0.1629 -0.0509 -1.0008 -0.0838 -0.1387 -2.0361 -0.0829 -0.1352 -0.0866 -0.0945 -2.1848 -0.1443 -0.6081 -0.6644 -0.0914 -0.0924 -2.0283 -0.1055 -0.0904 -0.2180 -0.8299 -0.0895 -1.0808 -0.0946 -0.7331 -0.8547 -0.1361 -0.1071 -2.4913 -0.5015 -1.3421 -0.1073 -0.3819 -0.3716 -0.8151 -2.4917 -0.2384 -1.0282 -0.1484 -0.4983 -0.0986 -0.2049 -0.1156 -0.0630 -0.1213 -0.3098 -0.3386 -0.4330 -1.3759 -1.1983 -1.4172 -0.1196 -0.1505 -0.8826 -0.0949 -0.4076
S-120	<s> public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { /* if((i % 2) == 1 && (lst.get(i) % 2) == 0) { */ <mask> result += lst.get(i); } } return result; } </s> java
T-120	<s> public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { /* if((i % 2) == 1 && (lst.get(i) % 2) == 0) { */ <mask> result += lst.get(i); } } return result; } </s> java
H-120	-0.47833451628685	<s> public static int solution(ArrayList<Integer> lst) { int result = 0 ; for(int i = 0; i < lst.size(); i++) { if((i % 2) == 1 && (lst.get(i) % 2) == 0) { result += lst.get(i); } } return result ; }
D-120	-0.47833451628685	<s> public static int solution(ArrayList<Integer> lst) { int result = 0 ; for(int i = 0; i < lst.size(); i++) { if((i % 2) == 1 && (lst.get(i) % 2) == 0) { result += lst.get(i); } } return result ; }
P-120	-1.8916 -0.2959 -0.2502 -0.1041 -0.0638 -0.1203 -0.0322 -0.4616 -0.0272 -0.3634 -0.0450 -0.1806 -0.0383 -1.5322 -0.0824 -0.1446 -0.0734 -0.0880 -1.9273 -0.4242 -0.1844 -0.7905 -0.8861 -0.0892 -0.0905 -1.9341 -0.1016 -0.0922 -0.3621 -0.1132 -0.2351 -2.2693 -0.0955 -0.9952 -0.0910 -0.9412 -1.5664 -1.0546 -0.2315 -0.4914 -0.1053 -0.4474 -0.2910 -0.1319 -0.3023 -0.1257 -0.2952 -0.3127 -0.3227 -0.7389 -0.4244 -0.5874 -0.1309 -1.3787 -0.0919 -2.0824 -0.0922 -0.1352 -0.1321 -0.3422 -0.4043 -0.4045 -1.8911 -0.1979 -0.1300 -0.1012 -0.1054 -0.6906 -0.0927 -0.2341
S-90	<s> public static int is_bored(String S) { String[] sentences = S.split("\\.|\\?|!"); int result = 0; for (String sentence : sentences) { /* if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals("I ")) */ <mask> result += 1; } return result; } </s> java
T-90	<s> public static int is_bored(String S) { String[] sentences = S.split("\\.|\\?|!"); int result = 0; for (String sentence : sentences) { /* if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals("I ")) */ <mask> result += 1; } return result; } </s> java
H-90	-0.37193170189857483	public static int is_bored(String S) { java.lang.String [] sentences = S.split("\\.|\\?|!"); int result = 0 ; for (String sentence : sentences) { /* if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals("I ")) */ <mask> result += 1 ; } return result ; }
D-90	-0.37193170189857483	public static int is_bored(String S) { java.lang.String [] sentences = S.split("\\.|\\?|!"); int result = 0 ; for (String sentence : sentences) { /* if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals("I ")) */ <mask> result += 1 ; } return result ; }
P-90	-0.8186 -0.0391 -0.1257 -0.0691 -0.0897 -0.0521 -0.0147 -0.4783 -0.1084 -0.0727 -1.9500 -0.0817 -3.1007 -0.0556 -0.3952 -0.1252 -0.1252 -1.1858 -0.0240 -0.0911 -0.1206 -0.1336 -0.5095 -0.1194 -0.0815 -0.0408 -0.0205 -0.0630 -0.0359 -0.3090 -0.1189 -0.0921 -0.0802 -1.9430 -0.7332 -0.1748 -0.1156 -0.1687 -0.0368 -0.0600 -0.0339 -1.4091 -0.0814 -2.3199 -0.1421 -0.1200 -0.8029 -0.1755 -0.0905 -1.0377 -0.1464 -0.0895 -0.3083 -0.0574 -0.1170 -0.0855 -0.0175 -0.4550 -0.1170 -1.4384 -0.0656 -0.0357 -0.0398 -0.2424 -0.1573 -0.0897 -0.1860 -0.1171 -0.0753 -2.6464 -0.3569 -0.1208 -0.0888 -0.1280 -0.9178 -0.1044 -0.2621
S-138	<s> public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; /* for(long i = n; i >= 1; i--) { fact_i *= i * fact_i; special_fact += i * fact_i; */ <mask> } return special_fact; } </s> java
T-138	<s> public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; /* for(long i = n; i >= 1; i--) { fact_i *= i * fact_i; special_fact += i * fact_i; */ <mask> } return special_fact; } </s> java
H-138	-0.3345123827457428	public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; /* for(long i = n; i >= 1; i--) { fact_i *= i * fact_i; special_fact += i * fact_i; } return special_fact ; }
D-138	-0.3345123827457428	public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; /* for(long i = n; i >= 1; i--) { fact_i *= i * fact_i; special_fact += i * fact_i; } return special_fact ; }
P-138	-0.7890 -0.0335 -0.0581 -0.0320 -0.0946 -0.0452 -0.0152 -0.5328 -0.3573 -0.0840 -1.4727 -0.0821 -0.0707 -0.2112 -0.1032 -0.0751 -0.1002 -2.4814 -0.0675 -0.0975 -0.0829 -0.0957 -1.9652 -1.3357 -0.1401 -0.2030 -0.2229 -0.1020 -0.1010 -0.1104 -0.6388 -0.0970 -0.1240 -0.9279 -0.1069 -0.3791 -0.1039 -0.5292 -0.1030 -0.0769 -0.0184 -0.1497 -0.1027 -0.3714 -0.1009 -0.0942 -1.0895 -0.2007 -0.0999 -0.0870 -0.1049 -0.1651 -0.0584 -0.2749 -0.0998 -0.0673 -0.9840 -1.5726 -0.3884 -0.2478 -0.0976 -0.0898 -0.6019 -0.1224 -0.3050
S-29	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ /* if (string.startsWith(prefix, 1)){ */ <mask> result.add(string); } } return result; } </s> java
T-29	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ /* if (string.startsWith(prefix, 1)){ */ <mask> result.add(string); } } return result; } </s> java
H-29	-0.5093125104904175	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix, 1)){ */ <mask> result.add(string); } } return result ; }
D-29	-0.5093125104904175	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix, 1)){ */ <mask> result.add(string); } } return result ; }
P-29	-1.5624 -1.9400 -0.2159 -0.1370 -0.0700 -0.4446 -0.3330 -0.0803 -0.1453 -0.0397 -0.0837 -0.0514 -0.0902 -0.0449 -0.7210 -0.1056 -0.3281 -0.0729 -0.1289 -0.0964 -1.0713 -2.0172 -0.0591 -2.2311 -0.0802 -0.3993 -0.5297 -0.0778 -0.1710 -0.0764 -0.0957 -0.0615 -1.6598 -0.3244 -0.0784 -2.0475 -0.2411 -0.1190 -0.1591 -0.0980 -0.0546 -0.1122 -1.7925 -0.5774 -0.1269 -0.3801 -0.1879 -0.6072 -0.8777 -0.5284 -0.9552 -0.6080 -1.3848 -3.1460 -0.2656 -0.1225 -0.1625 -0.1146 -0.2031 -0.6486 -0.8595 -0.1552 -1.9368 -0.1661 -0.1934 -0.0755 -0.1046 -0.7671 -0.0892 -0.1595
S-16	<s> public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) /* distinct.add(c); */ <mask> } return distinct.size(); } </s> java
T-16	<s> public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) /* distinct.add(c); */ <mask> } return distinct.size(); } </s> java
H-16	-0.471915602684021	<s> public static int count_distinct_characters(String string ) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray () ) { if (! distinct.contains(Character.toLowerCase(c))) /* distinct.add(c); */ <mask> } return distinct.size(); }
D-16	-0.471915602684021	<s> public static int count_distinct_characters(String string ) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray () ) { if (! distinct.contains(Character.toLowerCase(c))) /* distinct.add(c); */ <mask> } return distinct.size(); }
P-16	-1.6946 -0.3743 -0.2071 -0.1255 -0.0875 -0.1455 -0.0862 -0.0986 -0.0140 -0.0914 -0.0203 -0.7400 -0.1052 -0.1139 -2.1167 -0.0907 -1.3115 -0.5047 -0.0384 -0.2063 -0.2037 -0.0969 -0.0637 -0.9963 -0.3737 -0.0384 -2.0271 -0.1916 -0.1275 -0.3644 -0.0783 -0.0584 -0.0782 -0.1269 -0.1119 -0.0339 -2.8352 -0.1597 -0.0906 -0.1103 -1.9443 -0.3112 -0.1093 -0.9898 -0.3202 -0.0694 -0.1102 -0.2149 -0.3577 -0.2395 -0.9248 -2.0836 -0.1021 -0.0974 -0.1460 -0.2298 -0.1863 -3.2806 -0.1997 -0.1220 -0.0745 -0.1308 -0.3461 -0.1671 -0.2098 -0.1339 -0.2007 -2.4650 -0.0988 -0.8294
S-99	<s> public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { /* pile.add(n - 2 * i); */ <mask> } return pile; } </s> java
T-99	<s> public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { /* pile.add(n - 2 * i); */ <mask> } return pile; } </s> java
H-99	-0.5302101373672485	public static ArrayList<Integer> make_a_pile(int n ) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0 ; i < n ; i ++ ) { pile.add(n - 2 * i); } return pile ; }
D-99	-0.5302101373672485	public static ArrayList<Integer> make_a_pile(int n ) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0 ; i < n ; i ++ ) { pile.add(n - 2 * i); } return pile ; }
P-99	-1.7825 -0.0511 -2.0250 -0.3919 -0.0667 -0.1546 -0.0670 -0.0952 -0.0439 -0.0999 -0.0379 -0.0267 -1.0732 -1.2883 -0.0705 -2.0680 -0.0832 -2.2139 -0.4392 -0.0624 -0.1808 -0.0646 -0.0272 -0.0989 -0.0724 -1.3611 -0.2383 -0.0609 -1.6392 -0.1443 -0.8228 -0.6922 -0.0800 -0.0988 -2.0491 -0.2464 -0.0959 -0.0754 -0.1864 -1.5912 -0.0899 -1.4797 -1.0421 -0.0893 -1.3140 -0.0293 -0.5247 -0.3518 -0.4772 -0.6473 -0.1434 -0.3087 -0.0815 -0.1700 -1.6562 -0.5254 -0.2232 -0.0743 -0.0299 -1.1634 -0.0976 -0.3871
S-83	<s> public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + "").length(); i += 1){ /* sum += Integer.parseInt((N + "").substring(i + 1)); */ <mask> } return Integer.toBinaryString(sum); } </s> java
T-83	<s> public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + "").length(); i += 1){ /* sum += Integer.parseInt((N + "").substring(i + 1)); */ <mask> } return Integer.toBinaryString(sum); } </s> java
H-83	-0.5287301540374756	<s> public static String solve(int N) { int sum = 0; for (int i = 0 ; i < (N + "" ) . length () ; i += 1){ /* sum += Integer.parseInt((N + ""). substring(i + 1)); */ <mask> } return Integer.toBinaryString(sum); }
D-83	-0.5287301540374756	<s> public static String solve(int N) { int sum = 0; for (int i = 0 ; i < (N + "" ) . length () ; i += 1){ /* sum += Integer.parseInt((N + ""). substring(i + 1)); */ <mask> } return Integer.toBinaryString(sum); }
P-83	-1.8090 -0.2673 -0.2385 -0.1001 -0.0824 -1.9935 -0.0324 -0.6628 -0.5358 -0.0993 -1.6806 -0.0862 -0.1832 -0.0585 -0.1016 -1.4915 -0.1471 -0.1284 -0.4473 -0.0824 -0.0950 -2.5267 -0.6123 -0.1079 -0.0783 -0.2090 -0.1317 -0.0846 -0.1009 -1.5205 -2.7651 -0.2839 -0.7163 -0.2949 -0.0863 -0.0860 -0.1500 -1.4559 -2.5082 -0.0587 -0.0477 -0.9219 -0.1007 -1.1412 -0.2631 -0.0563 -0.0709 -0.0688 -1.6228 -0.5646 -0.5021 -0.5091 -0.4077 -0.1719 -0.5691 -0.2413 -0.1037 -0.0597 -0.0972 -0.1423 -0.1114 -1.4443 -0.0988 -0.1254 -0.0225 -0.0536 -1.0952 -0.7923 -1.6948 -0.1008 -0.2384
S-65	<s> public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { /* if (c == ' ') break; */ <mask> if ('A' <= c && c <= 'Z') result += (int) c; } return result; } </s> java
T-65	<s> public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { /* if (c == ' ') break; */ <mask> if ('A' <= c && c <= 'Z') result += (int) c; } return result; } </s> java
H-65	-0.2950090765953064	public static int digit_sum(String s ) { int result = 0 ; for (char c : s.toCharArray () ) { if (c == ' ') break; */ <mask> if ('A' <= c && c <= 'Z') result += (int) c ; } return result ; }
D-65	-0.2950090765953064	public static int digit_sum(String s ) { int result = 0 ; for (char c : s.toCharArray () ) { if (c == ' ') break; */ <mask> if ('A' <= c && c <= 'Z') result += (int) c ; } return result ; }
P-65	-0.6586 -0.0405 -0.1176 -0.0273 -0.0924 -0.0450 -0.5989 -0.0980 -0.0966 -2.1513 -0.0861 -0.1190 -0.0736 -0.0855 -1.6013 -0.3679 -0.2888 -0.1177 -0.4149 -0.0858 -0.0641 -0.0547 -0.1219 -0.0804 -0.0355 -2.7873 -0.1576 -0.0843 -0.8113 -0.1208 -0.2709 -0.1442 -0.0672 -0.0220 -0.0521 -0.0437 -0.4648 -0.1284 -0.1087 -0.1363 -0.1522 -0.5457 -0.0523 -0.0467 -0.0644 -0.1711 -0.2772 -0.2203 -0.0587 -0.0551 -0.0317 -0.3240 -0.1249 -0.0875 -0.1075 -0.2833 -0.5838 -0.1350 -1.5142 -0.1153 -0.0877 -0.0930 -0.6404 -0.0914 -0.3890
S-11	<s> public static String string_xor(String a, String b){ String result = ""; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } /* } */ <mask> return result; } </s> java
T-11	<s> public static String string_xor(String a, String b){ String result = ""; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } /* } */ <mask> return result; } </s> java
H-11	-0.5573890805244446	public static String string_xor(String a, String b){ String result = ""; for (int i = 0 ; i < ( a.length () ) ; i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } /* } */ <mask> return result ; }
D-11	-0.5573890805244446	public static String string_xor(String a, String b){ String result = ""; for (int i = 0 ; i < ( a.length () ) ; i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } /* } */ <mask> return result ; }
P-11	-1.0986 -0.0590 -1.9005 -0.0726 -0.0958 -0.0158 -0.7663 -0.1261 -0.0975 -0.9567 -1.3844 -0.0824 -1.7405 -2.3746 -0.0690 -0.0846 -2.3291 -0.1632 -0.1197 -0.8698 -0.0804 -0.0864 -2.3783 -0.5687 -0.0965 -0.0739 -1.2584 -0.4366 -0.1281 -0.0880 -1.9275 -0.3409 -0.5229 -0.0830 -0.1070 -0.1754 -1.5092 -0.1089 -0.1195 -0.2596 -0.1096 -0.7375 -0.3774 -0.2830 -1.1671 -0.1564 -0.0762 -0.0941 -0.7181 -0.4190 -0.1991 -1.6900 -0.1108 -0.0574 -0.0558 -1.3209 -0.0933 -2.4931 -0.2533 -0.1362 -0.1209 -0.0966 -0.1428 -0.3252 -0.0857 -1.3265 -0.1011 -0.4002
S-84	<s> public static int add_even_at_odd(int[] lst) { int sum = 0; /* for (int i = 0; i < lst.length; i += 1) { */ <mask> if (lst[i] % 2 == 0) sum += lst[i]; } return sum; } </s> java
T-84	<s> public static int add_even_at_odd(int[] lst) { int sum = 0; /* for (int i = 0; i < lst.length; i += 1) { */ <mask> if (lst[i] % 2 == 0) sum += lst[i]; } return sum; } </s> java
H-84	-0.4970638155937195	public static int add_even_at_odd(int[] lst ) { int sum = 0; /* for (int i = 0; i < lst.length; i += 1) { */ <mask> if (lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
D-84	-0.4970638155937195	public static int add_even_at_odd(int[] lst ) { int sum = 0; /* for (int i = 0; i < lst.length; i += 1) { */ <mask> if (lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
P-84	-1.0911 -0.0388 -0.1496 -0.0750 -0.1139 -0.0312 -0.0945 -0.0533 -0.1062 -0.0060 -0.9707 -0.7105 -2.2398 -0.0424 -1.9415 -0.0855 -0.1765 -0.0812 -0.0950 -1.5759 -1.6932 -0.1491 -0.1279 -0.4059 -0.0969 -0.0960 -1.4836 -0.0990 -0.1077 -0.3148 -0.0890 -0.0657 -1.1535 -0.0911 -0.0624 -1.9414 -0.0810 -1.0308 -0.2110 -0.1411 -0.1827 -0.1587 -0.1253 -0.7004 -1.4340 -0.6488 -0.3715 -0.6411 -0.0781 -0.1413 -1.8984 -0.2697 -0.4154 -0.0766 -0.0946 -0.9382 -0.3077 -2.5024 -0.2068 -0.1700 -0.1326 -0.7244 -0.1076 -0.3660
S-14	<s> public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ /* result.add(string.substring(i + 1)); */ <mask> } return result; } </s> java
T-14	<s> public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ /* result.add(string.substring(i + 1)); */ <mask> } return result; } </s> java
H-14	-0.538699209690094	<s> public static List<String> all_prefixes(String string ) { List<String> result = new ArrayList<String>(); for ( int i = 0 ; i < string.length(); i += 1 ) { result.add(string. substring(i , ( i + 1 ) ) ; } return result ; }
D-14	-0.538699209690094	<s> public static List<String> all_prefixes(String string ) { List<String> result = new ArrayList<String>(); for ( int i = 0 ; i < string.length(); i += 1 ) { result.add(string. substring(i , ( i + 1 ) ) ; } return result ; }
P-14	-1.4004 -0.6967 -0.2540 -0.1413 -0.0824 -0.4213 -0.3320 -0.0783 -0.1605 -0.0491 -0.1071 -0.0176 -0.7382 -0.1030 -0.0895 -2.1264 -0.1238 -0.4792 -0.3640 -0.0739 -0.1977 -0.0759 -0.0954 -0.0620 -1.8377 -0.2817 -0.0749 -2.3450 -0.1598 -0.1240 -1.4317 -0.0705 -0.0881 -1.4766 -0.5553 -0.0971 -0.0960 -0.3511 -0.0984 -0.1101 -3.4704 -0.0853 -0.0814 -0.1606 -2.5688 -0.0863 -1.2178 -0.2279 -0.4349 -0.6140 -0.3007 -0.1070 -0.5838 -1.0054 -1.0415 -1.4902 -0.9165 -1.6606 -0.2958 -0.1836 -0.5995 -0.2115 -0.2673 -0.4912 -0.3699 -0.1038 -0.7196 -0.0896 -0.3174
S-149	<s> public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { /* if (n % i == 0) return x; } return y; */ <mask> } </s> java
T-149	<s> public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { /* if (n % i == 0) return x; } return y; */ <mask> } </s> java
H-149	-0.4290330708026886	@ java.lang.Override public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { if (n % i == 0) return x; } return y; }
D-149	-0.4290330708026886	@ java.lang.Override public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { if (n % i == 0) return x; } return y; }
P-149	-4.6521 -0.2506 -0.0758 -0.0232 -0.1643 -0.3629 -0.0749 -0.1940 -0.1131 -0.1639 -0.0863 -0.0447 -0.1051 -0.0543 -0.4418 -0.8149 -0.1156 -0.8291 -0.1003 -0.1653 -0.8152 -0.0746 -0.0945 -1.8225 -0.0825 -0.1992 -0.1219 -0.3473 -0.0977 -1.7330 -0.0943 -0.1725 -0.7437 -0.2222 -0.1254 -0.5017 -0.0841 -0.0978 -0.9522 -0.1014 -0.1391 -0.1896 -0.7490 -0.0869 -0.0777 -1.6525 -0.0840 -0.6687 -0.1177 -0.7464 -0.3195 -0.1425 -0.1189 -1.0273 -0.0972 -0.2216 -0.6528 -0.1543 -0.3019 -0.1544 -0.6085 -0.6916 -0.7112
S-48	<s> public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ /* if (text.charAt(i) == text.charAt(text.length() - i)) return true; } return false; */ <mask> } </s> java
T-48	<s> public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ /* if (text.charAt(i) == text.charAt(text.length() - i)) return true; } return false; */ <mask> } </s> java
H-48	-0.502936840057373	<s> public static boolean is_palindrome(String text ) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) == text.charAt(text.length() - i)) return true; } return false; }
D-48	-0.502936840057373	<s> public static boolean is_palindrome(String text ) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) == text.charAt(text.length() - i)) return true; } return false; }
P-48	-2.6259 -0.2754 -0.2374 -0.1134 -0.0753 -0.0977 -0.0700 -0.0961 -0.0197 -0.0040 -0.5245 -0.0986 -0.0583 -2.1686 -0.0841 -0.3314 -0.1274 -0.8749 -0.0828 -0.0987 -1.9684 -0.1064 -0.1211 -0.3115 -0.1128 -0.0895 -3.0224 -0.0913 -0.0726 -0.1942 -1.0950 -0.4812 -0.1239 -0.7783 -0.1357 -0.9662 -0.9882 -0.7532 -1.1518 -0.2376 -0.0840 -0.1196 -1.0151 -0.5142 -0.3256 -0.1151 -0.1768 -1.3657 -0.2218 -0.2737 -2.0982 -0.1416 -0.0683 -0.8858 -0.1276 -0.1901 -0.0385 -0.5277 -0.6295 -0.3919
S-134	<s> public static int can_arrange(int[] arr) { /* int ind = 1; for(int i = 0; i < arr.length - 1; i++) { if(arr[i] < arr[i + 1]) ind = i + 1; */ <mask> } return ind; } </s> java
T-134	<s> public static int can_arrange(int[] arr) { /* int ind = 1; for(int i = 0; i < arr.length - 1; i++) { if(arr[i] < arr[i + 1]) ind = i + 1; */ <mask> } return ind; } </s> java
H-134	-0.5037295818328857	<s> public static int can_arrange(int[] arr) { /* int ind = 1; for(int i = 0; i < arr.length - 1; i++) { if(arr[i] < arr[i + 1]) ind = i + 1 ; } return ind ; }
D-134	-0.5037295818328857	<s> public static int can_arrange(int[] arr) { /* int ind = 1; for(int i = 0; i < arr.length - 1; i++) { if(arr[i] < arr[i + 1]) ind = i + 1 ; } return ind ; }
P-134	-2.4138 -0.3804 -0.2774 -0.1224 -0.0622 -0.1254 -0.0756 -0.1094 -0.1028 -0.6572 -0.5736 -2.2309 -0.0376 -1.4202 -0.0784 -1.8621 -0.0871 -0.0927 -0.0990 -2.0146 -0.1664 -0.6282 -0.3844 -0.0962 -0.0988 -1.3211 -0.1151 -0.0895 -0.2949 -0.0787 -0.0559 -0.9187 -0.8601 -0.1059 -0.8811 -0.1053 -0.1187 -0.9077 -0.6240 -0.7702 -0.5356 -0.2056 -0.1638 -0.0613 -0.3339 -0.2575 -0.2980 -0.3011 -0.2202 -0.2021 -0.1432 -0.1423 -0.0811 -2.3264 -1.0579 -0.6417 -0.2026 -0.1586 -1.1384 -0.2201 -0.5925
S-91	<s> public static boolean any_int(double x, double y, double z) { /* if ((int)x == x && (int)y == y) { if (x + y == z || x + z == y) */ <mask> return true; } return false; } </s> java
T-91	<s> public static boolean any_int(double x, double y, double z) { /* if ((int)x == x && (int)y == y) { if (x + y == z || x + z == y) */ <mask> return true; } return false; } </s> java
H-91	-0.40282753109931946	public static boolean any_int(double x, double y, double z) { /* if ((int)x == x && (int)y == y) { if (x + y == z || x + z == y) */ <mask> return true ; } return false ; }
D-91	-0.40282753109931946	public static boolean any_int(double x, double y, double z) { /* if ((int)x == x && (int)y == y) { if (x + y == z || x + z == y) */ <mask> return true ; } return false ; }
P-91	-0.6538 -0.0427 -0.0986 -0.0755 -0.1030 -0.0683 -0.3894 -1.2433 -0.1336 -0.9036 -0.1147 -0.0991 -0.8750 -0.0944 -0.0498 -1.4502 -0.0767 -2.3202 -0.1188 -0.8943 -0.0869 -0.2775 -0.1123 -0.1055 -0.1473 -0.2124 -0.1178 -0.0754 -0.1944 -0.0440 -0.0930 -0.0888 -0.9177 -0.0823 -0.2075 -0.1291 -0.9036 -0.3232 -0.1716 -0.1465 -0.0847 -0.3333 -0.2283 -0.2143 -0.1767 -0.1116 -0.1399 -0.7791 -2.1553 -0.5276 -0.1367 -0.1452 -0.1761 -0.1032 -1.6772 -0.2873 -0.4938 -0.0421 -1.7087 -0.1579 -0.6518
S-81	<s> public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { /* if (l - i == 0) */ <mask> return false; } return true; } </s> java
T-81	<s> public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { /* if (l - i == 0) */ <mask> return false; } return true; } </s> java
H-81	-0.37899333238601685	public static boolean prime_length(String string ) { int l = string.length () ; if (l <= 1) return false; for (int i = 2; i < l; i += 1) { /* if (l - i == 0) */ <mask> return false; } return true; }
D-81	-0.37899333238601685	public static boolean prime_length(String string ) { int l = string.length () ; if (l <= 1) return false; for (int i = 2; i < l; i += 1) { /* if (l - i == 0) */ <mask> return false; } return true; }
P-81	-0.7989 -0.0466 -0.0891 -0.0383 -0.0949 -0.0731 -0.4441 -0.0818 -0.1063 -2.3853 -0.0905 -0.1634 -0.0899 -0.0886 -0.0897 -0.1146 -0.1026 -3.9272 -0.1712 -0.1337 -0.1131 -0.5005 -0.0932 -1.1089 -0.0702 -0.0739 -0.7106 -0.1690 -0.1236 -0.4743 -0.0817 -0.0913 -0.9238 -0.0981 -0.1547 -0.1043 -0.8449 -0.0829 -0.0430 -1.4536 -0.0838 -1.7938 -0.1527 -0.1227 -0.3694 -0.1394 -0.0768 -0.0767 -0.3927 -0.1651 -0.1272 -0.1000 -0.1190 -0.1174 -0.0699 -0.9151 -0.1321 -0.1631 -0.0648 -0.9454 -0.1029 -0.8224
S-72	<s> public static int smallest_change(int[] arr) { int result = 0; /* for (int i = 0; i < arr.length; i += 1) { if (arr[i] != arr[arr.length - i]) */ <mask> result += 1; } return result; } </s> java
T-72	<s> public static int smallest_change(int[] arr) { int result = 0; /* for (int i = 0; i < arr.length; i += 1) { if (arr[i] != arr[arr.length - i]) */ <mask> result += 1; } return result; } </s> java
H-72	-0.5211449861526489	<s> public static int smallest_change(int [] arr) { int result = 0; /* for (int i = 0; i < arr.length; i += 1) { if (arr[i] != arr[arr.length - i]) { result += i + 1 ; } } return result ; }
D-72	-0.5211449861526489	<s> public static int smallest_change(int [] arr) { int result = 0; /* for (int i = 0; i < arr.length; i += 1) { if (arr[i] != arr[arr.length - i]) { result += i + 1 ; } } return result ; }
P-72	-2.3469 -0.3157 -0.2763 -0.1376 -0.0633 -0.1201 -0.0292 -0.1004 -0.0324 -0.7537 -0.6880 -2.2938 -0.0448 -2.0512 -0.0810 -0.1419 -0.0813 -0.0890 -1.5555 -1.4869 -0.1386 -0.1319 -0.3328 -0.1023 -0.1032 -1.5116 -0.1103 -0.0919 -0.2625 -0.0787 -0.0627 -1.0100 -0.0955 -0.0801 -2.0413 -0.0842 -0.1413 -0.1214 -1.1904 -1.2086 -0.7697 -0.2744 -0.1523 -0.1610 -0.7021 -0.3984 -0.1052 -0.0802 -0.3278 -0.1465 -0.3638 -0.8698 -0.6892 -0.1295 -1.6736 -0.6972 -0.4965 -0.4914 -0.1769 -0.9456 -1.1636 -0.1186 -0.9183 -0.1110 -0.3239
S-61	<s> public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); /* for (int i = 0; i < xs.size(); i += 1) result.add(xs.get(i)); */ <mask> return result; } </s> java
T-61	<s> public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); /* for (int i = 0; i < xs.size(); i += 1) result.add(xs.get(i)); */ <mask> return result; } </s> java
H-61	-0.5030178427696228	<s> public static List<Integer> derivative(List<Integer> xs ) { List<Integer> result = new ArrayList<Integer>(); /* for (int i = 0; i < xs.size () ; i += 1) result.add(xs.get(i)); */ <mask> return result ; }
D-61	-0.5030178427696228	<s> public static List<Integer> derivative(List<Integer> xs ) { List<Integer> result = new ArrayList<Integer>(); /* for (int i = 0; i < xs.size () ; i += 1) result.add(xs.get(i)); */ <mask> return result ; }
P-61	-1.6815 -0.5632 -0.2318 -0.1323 -0.0688 -0.5268 -0.3611 -0.0572 -0.1663 -0.0100 -0.4339 -0.0950 -0.3202 -0.0577 -0.1764 -0.0713 -1.4494 -0.0869 -0.6387 -0.5118 -0.0658 -0.1893 -0.0566 -0.0878 -0.0611 -1.9705 -0.3526 -0.0644 -2.2284 -2.2171 -0.1891 -0.1463 -0.8193 -0.0803 -0.0967 -1.6876 -0.1039 -0.1156 -0.4301 -0.1008 -0.4021 -3.9148 -0.3371 -0.0977 -0.0809 -2.3349 -0.1076 -0.1463 -0.3570 -0.5332 -0.3668 -0.1138 -0.4507 -0.3601 -0.6500 -1.1633 -0.7830 -0.1776 -0.0867 -0.1053 -0.1898 -0.0645 -0.6732 -0.1146 -0.3816
S-56	<s> public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; /* if (depth >= 0) return true; } return false; */ <mask> } </s> java
T-56	<s> public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; /* if (depth >= 0) return true; } return false; */ <mask> } </s> java
H-56	-0.37641429901123047	public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray () ) { if (b == '<') depth += 1; else depth -= 1; /* if (depth >= 0) return true; } return false; }
D-56	-0.37641429901123047	public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray () ) { if (b == '<') depth += 1; else depth -= 1; /* if (depth >= 0) return true; } return false; }
P-56	-0.7892 -0.0412 -0.0988 -0.0372 -0.1035 -0.0444 -0.0123 -0.0042 -0.5209 -0.1350 -0.1906 -2.1366 -0.0873 -0.1289 -0.0687 -0.0948 -1.4695 -0.1572 -0.1257 -0.2455 -0.0905 -0.0580 -0.1311 -0.1302 -0.0963 -0.0259 -3.2039 -0.1462 -0.1184 -0.0970 -0.1244 -0.2087 -0.1169 -0.4525 -0.3358 -0.1266 -0.0651 -1.3825 -0.1270 -0.1456 -0.0268 -0.9334 -0.5682 -0.1531 -0.1239 -0.2491 -0.0963 -0.6854 -0.0828 -0.0598 -0.3972 -0.8334 -0.2177 -0.0661 -0.3322 -1.4309 -1.5250
S-85	<s> public static String anti_shuffle(String s) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray(); Arrays.sort(chars); /* result += new String(chars); } return result; */ <mask> } </s> java
T-85	<s> public static String anti_shuffle(String s) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray(); Arrays.sort(chars); /* result += new String(chars); } return result; */ <mask> } </s> java
H-85	-0.5844133496284485	public static String anti_shuffle(String s ) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray () ; Arrays.sort(chars); result += new String(chars); } return result ; }
D-85	-0.5844133496284485	public static String anti_shuffle(String s ) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray () ; Arrays.sort(chars); result += new String(chars); } return result ; }
P-85	-1.1068 -0.0531 -1.7959 -0.0123 -0.1088 -0.0317 -0.5973 -0.1096 -0.1317 -2.1071 -0.0876 -2.2007 -0.0771 -0.0887 -2.5764 -0.2115 -0.1176 -0.1899 -0.1152 -0.0595 -0.0802 -0.1264 -0.5650 -0.0752 -0.0656 -0.0908 -0.1393 -2.7581 -0.0919 -0.0896 -0.0920 -0.1252 -0.0838 -0.0395 -3.4558 -0.3685 -1.7196 -0.0936 -0.0762 -0.8346 -0.1577 -1.8841 -1.3556 -0.0835 -0.0711 -0.2930 -0.7780 -0.1438 -1.8288 -0.1855 -0.1042 -0.0963 -1.5013 -0.7496 -0.1608
S-77	<s> public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { /* if (c == '2' || c == '3' || c == '5' || c == '7') */ <mask> result += 1; } return result; } </s> java
T-77	<s> public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { /* if (c == '2' || c == '3' || c == '5' || c == '7') */ <mask> result += 1; } return result; } </s> java
H-77	-0.34393468499183655	public static int hex_key(String num ) { int result = 0 ; for (char c : num.toCharArray () ) { if (c == '2' || c == '3' || c == '5' || c == '7') */ <mask> result += 1 ; } return result ; }
D-77	-0.34393468499183655	public static int hex_key(String num ) { int result = 0 ; for (char c : num.toCharArray () ) { if (c == '2' || c == '3' || c == '5' || c == '7') */ <mask> result += 1 ; } return result ; }
P-77	-0.6351 -0.0383 -0.1210 -0.0449 -0.0941 -0.0372 -0.6569 -0.1074 -0.0893 -2.0359 -0.0847 -0.1103 -0.0884 -0.0815 -1.8031 -0.2954 -0.2459 -0.1176 -0.4110 -0.0912 -0.0595 -0.0659 -0.1237 -0.1006 -0.0291 -2.6129 -0.1575 -0.0856 -0.5762 -0.1161 -0.7034 -0.1361 -0.2748 -0.1710 -0.1945 -0.1465 -0.3652 -0.2753 -0.1586 -0.1378 -0.2575 -0.2060 -0.1280 -0.1388 -0.0370 -0.3298 -1.8883 -0.1575 -0.0933 -0.1450 -0.1070 -0.0767 -1.8897 -0.3382 -0.0983 -0.0911 -0.1124 -0.5386 -0.0961 -0.2274
S-7	<s> public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ /* result.add(string); */ <mask> } return result; } </s> java
T-7	<s> public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ /* result.add(string); */ <mask> } return result; } </s> java
H-7	-0.5135202407836914	public static List<String> filter_by_substring(List<String> strings, String substring ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { if ( substring != null ) { result.add(string); } } return result ; }
D-7	-0.5135202407836914	public static List<String> filter_by_substring(List<String> strings, String substring ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { if ( substring != null ) { result.add(string); } } return result ; }
P-7	-2.5100 -0.0420 -0.4810 -0.3232 -0.0779 -0.1393 -0.0423 -0.0857 -0.0532 -0.0840 -1.0079 -0.5443 -0.1111 -0.3134 -0.0712 -0.1254 -0.1148 -1.2050 -2.0804 -0.0144 -1.6981 -0.0907 -0.4186 -0.4641 -0.0735 -0.1634 -0.0713 -0.0914 -0.0613 -1.6929 -0.3035 -0.0758 -2.1374 -0.2097 -0.1214 -0.1628 -0.0879 -0.0495 -0.1388 -2.0077 -0.0863 -1.9800 -0.1338 -0.2325 -0.7867 -0.0835 -0.6119 -0.1747 -0.7781 -0.4944 -0.7180 -1.0448 -0.2444 -1.9202 -0.3991 -1.0506 -0.2041 -0.1203 -0.4210 -0.1024 -0.1915
S-62	<s> public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; /* return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); */ <mask> } </s> java
T-62	<s> public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; /* return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); */ <mask> } </s> java
H-62	-0.43846824765205383	public static int fibfib(int n) { if (n == 0 ) return 0 ; if (n == 1) return 0 ; if (n == 2) return 0 ; if (n == 3 ) return 0 ; return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); }
D-62	-0.43846824765205383	public static int fibfib(int n) { if (n == 0 ) return 0 ; if (n == 1) return 0 ; if (n == 2) return 0 ; if (n == 3 ) return 0 ; return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); }
P-62	-0.5909 -0.0385 -0.1514 -0.0557 -0.0885 -0.0521 -0.6932 -0.7619 -0.0845 -1.5045 -0.0750 -0.1620 -0.1274 -0.3369 -0.1385 -2.6737 -0.4616 -0.1302 -1.4238 -0.2968 -0.1494 -0.1143 -0.1741 -0.0821 -1.5987 -0.0688 -0.2905 -0.2450 -1.1381 -0.1181 -0.1897 -0.0821 -1.8948 -0.1039 -0.2928 -0.2485 -1.4966 -0.1269 -0.1982 -0.0653 -1.4938 -1.0808 -0.0938 -0.2590 -0.2212 -1.6401 -0.1004 -0.0920 -0.0650 -0.9088 -0.1354 -0.1745 -1.1673 -0.0798 -0.0591 -0.0895 -0.0600 -0.6523 -0.0899 -0.1234 -0.3093 -0.0797 -0.0389 -0.0939 -0.0674 -0.6062 -0.0944 -0.1311 -0.0588 -0.8503 -1.1295 -0.9991
S-59	<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { /* if (is_prime(j)){ largest = n % j; */ <mask> } } return largest; } </s> java
T-59	<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { /* if (is_prime(j)){ largest = n % j; */ <mask> } } return largest; } </s> java
H-59	-0.467170387506485	<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (is_prime(j)){ largest = n % j; } } return largest ; }
D-59	-0.467170387506485	<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (is_prime(j)){ largest = n % j; } } return largest ; }
P-59	-2.3401 -0.4390 -0.2847 -0.1087 -0.0635 -0.1331 -0.0208 -0.1037 -0.0250 -0.0840 -0.0315 -0.5820 -0.8274 -0.0719 -1.9950 -0.0797 -0.1368 -0.0338 -0.1025 -1.9586 -0.1910 -0.1261 -0.5977 -0.1044 -0.0903 -0.9908 -0.0936 -0.1306 -0.1129 -0.9897 -0.0745 -0.0485 -1.8809 -0.0839 -0.7424 -0.1189 -0.4023 -0.0922 -0.0230 -0.8253 -0.4243 -2.3695 -0.4438 -0.2178 -0.2042 -0.1269 -0.1118 -0.7862 -1.0095 -0.6953 -0.0952 -0.0323 -1.6414 -0.1097 -0.2856
S-114	<s> public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; /* for(int j = 0; j < grid[j].length; j++) { row_capacity += grid[j][i]; */ <mask> } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; } </s> java
T-114	<s> public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; /* for(int j = 0; j < grid[j].length; j++) { row_capacity += grid[j][i]; */ <mask> } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; } </s> java
H-114	-0.35602933168411255	public static int max_fill(int[][] grid, int bucket_capacity ) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; /* for(int j = 0; j < grid[j].length; j++) { row_capacity += grid[j][i]; } result += (row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-114	-0.35602933168411255	public static int max_fill(int[][] grid, int bucket_capacity ) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; /* for(int j = 0; j < grid[j].length; j++) { row_capacity += grid[j][i]; } result += (row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-114	-0.9309 -0.0376 -0.1233 -0.0343 -0.0935 -0.0679 -0.6880 -0.5807 -0.1713 -0.0225 -0.8798 -0.0935 -0.0232 -0.1062 -0.0925 -1.4751 -0.0981 -0.1061 -0.0851 -0.0900 -1.2234 -0.1900 -0.5799 -0.4587 -0.1033 -0.0930 -1.3510 -0.0894 -0.0724 -0.0950 -0.0827 -0.0867 -0.8417 -0.0820 -1.2121 -0.0898 -0.1326 -0.1154 -0.1063 -0.0953 -0.0987 -1.3075 -2.0171 -0.1336 -0.2031 -0.3367 -0.1290 -0.1062 -1.1981 -0.1023 -0.0543 -0.0445 -0.6692 -0.2501 -0.9552 -0.1079 -0.6536 -0.0832 -0.9801 -0.0885 -0.1567 -0.1081 -0.1280 -0.0612 -0.0389 -0.3667 -0.1938 -0.1411 -0.4393 -1.5019 -1.4194 -0.1601 -0.1005 -0.1585 -0.2824 -0.1014 -0.1013 -0.2098 -0.1364 -0.1122 -0.0992 -1.5346 -0.0824 -0.1095 -0.0975 -0.0934 -0.9991 -0.0995 -0.1009 -0.0851 -1.1967 -0.0967 -0.1787
S-159	<s> public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName("JavaScript"); /* String expression = ""; for (int i = 0; i < operand.length; i += 1) { expression += operator[i] + operand[i]; */ <mask> } return Double.parseDouble(engine.eval(expression).toString()); } </s> java
T-159	<s> public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName("JavaScript"); /* String expression = ""; for (int i = 0; i < operand.length; i += 1) { expression += operator[i] + operand[i]; */ <mask> } return Double.parseDouble(engine.eval(expression).toString()); } </s> java
H-159	-0.41974127292633057	public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName("JavaScript"); /* String expression = ""; for (int i = 0; i < operand.length; i += 1) { expression += operator[i] + operand[i]; */ <mask> } return Double. parseDouble(engine.eval(expression).toString()); }
D-159	-0.41974127292633057	public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName("JavaScript"); /* String expression = ""; for (int i = 0; i < operand.length; i += 1) { expression += operator[i] + operand[i]; */ <mask> } return Double. parseDouble(engine.eval(expression).toString()); }
P-159	-1.3116 -0.0432 -0.0898 -0.0551 -0.1016 -0.0074 -0.0086 -0.5547 -0.1470 -2.2710 -0.0735 -0.7257 -0.1199 -2.1949 -0.0271 -1.3610 -0.0624 -0.2210 -0.0137 -0.3523 -0.2427 -0.0678 -0.0880 -0.2934 -0.0479 -0.0911 -0.0785 -0.0865 -0.0718 -0.1692 -0.0491 -0.0756 -3.1754 -0.2165 -0.1837 -0.0530 -0.0345 -0.0965 -0.0655 -0.1118 -0.1259 -0.0339 -0.0296 -0.1542 -0.0078 -0.5454 -1.0974 -0.9159 -0.1363 -0.1226 -2.3990 -0.1772 -0.1183 -0.7586 -0.0875 -0.0870 -1.0580 -0.1094 -0.0888 -0.0497 -0.0889 -0.0607 -0.6250 -0.0916 -0.0661 -1.9247 -0.0818 -0.1785 -0.1314 -0.0928 -0.6267 -0.2972 -0.2395 -0.0903 -0.0278 -0.3866 -0.1927 -1.5115 -1.0894 -0.0877 -0.0852 -0.1074 -0.1290 -0.0749 -0.1723 -0.0923 -1.0888 -0.6341 -0.1029 -0.0984 -0.0314 -0.5264 -0.4686 -2.3872 -2.6601 -0.8827 -0.1996 -0.3598
S-153	<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); /* String pat = b; for (int i = 0; i < a.length(); i += 1) { for (int j = 0; j < l; j += 1) { */ <mask> if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; } </s> java
T-153	<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); /* String pat = b; for (int i = 0; i < a.length(); i += 1) { for (int j = 0; j < l; j += 1) { */ <mask> if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; } </s> java
H-153	-0.4425716698169708	<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); /* String pat = b; for (int i = 0; i < a.length(); i += 1) { for (int j = 0; j < l; j += 1) { */ <mask> if (a. substring(i, i + l ) . equals(pat. substring(j, j + l))) return true; } } return false; }
D-153	-0.4425716698169708	<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); /* String pat = b; for (int i = 0; i < a.length(); i += 1) { for (int j = 0; j < l; j += 1) { */ <mask> if (a. substring(i, i + l ) . equals(pat. substring(j, j + l))) return true; } } return false; }
P-153	-2.1039 -0.1971 -0.2057 -0.1080 -0.0640 -0.0984 -0.0342 -0.0681 -0.0023 -0.0864 -0.0513 -0.4821 -0.1131 -0.0907 -1.0160 -1.4864 -0.0927 -1.9944 -0.0843 -0.1579 -0.0562 -0.0923 -0.1019 -0.1345 -0.0885 -2.3265 -2.1346 -0.5329 -0.0644 -0.1104 -0.0966 -0.6551 -0.3842 -0.1381 -0.5120 -0.0883 -0.1001 -1.0762 -0.0860 -0.0927 -0.3267 -0.1284 -0.0948 -2.3228 -0.0876 -0.0700 -1.9411 -0.0759 -0.1334 -0.1172 -0.3141 -0.1015 -0.1043 -0.9368 -0.1041 -0.0731 -0.0781 -0.6771 -0.0792 -0.0622 -1.8577 -0.0707 -1.2944 -0.1421 -0.1097 -0.1411 -0.1611 -0.1381 -0.8090 -0.1141 -0.7648 -0.4566 -0.7351 -0.8673 -0.2006 -0.3638 -0.0943 -2.7803 -0.6023 -0.2448 -1.5058 -0.0322 -0.1249 -0.6758 -0.5612 -0.1560 -0.6051 -0.1579 -0.1188 -0.0873 -1.2886 -0.0979 -0.0426 -0.3878 -0.1250 -0.1092 -0.1213 -0.0283 -0.6780 -0.1396 -0.4717
S-71	<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; /* } */ <mask> return true; } </s> java
T-71	<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; /* } */ <mask> return true; } </s> java
H-71	-0.4362204372882843	<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; i += 1 ; j += 1 ; } return true; }
D-71	-0.4362204372882843	<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; i += 1 ; j += 1 ; } return true; }
P-71	-2.3094 -0.3829 -0.2006 -0.1136 -0.0689 -0.1116 -0.0576 -0.0987 -0.0215 -0.1060 -0.0156 -0.5053 -0.6378 -2.2066 -0.0582 -0.9123 -0.0923 -0.0956 -1.7945 -0.0824 -0.1712 -0.0640 -0.0965 -0.9054 -0.1383 -0.1206 -0.4805 -0.0915 -0.0907 -1.0821 -0.0852 -0.0997 -0.1695 -0.0975 -0.0730 -1.2071 -0.0905 -0.0636 -1.8979 -0.1148 -0.0522 -0.0677 -0.5394 -0.5886 -2.1867 -0.1525 -0.1267 -0.8781 -0.2024 -0.2183 -1.1725 -0.0806 -0.0765 -0.7588 -0.1734 -0.1581 -0.1181 -0.9975 -0.1105 -0.1098 -0.0963 -0.0716 -0.0989 -0.0751 -0.1621 -1.1655 -0.0862 -0.1231 -1.1883 -0.1323 -0.1435 -1.0815 -0.0959 -0.1433 -0.1296 -0.3595 -0.6786 -0.4093 -0.2937 -0.1854 -0.0696 -0.3530 -0.1545 -0.5405 -0.0833 -0.0646 -0.3671 -1.3659 -0.4096 -2.0789 -0.1798 -1.2269 -0.3205 -0.6545 -0.2074 -0.5505 -0.9753 -0.2203 -1.2792 -0.1228 -0.3348
S-122	<s> public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); /* while(n >= 1) { if((n % 2) == 1) n /= 2; */ <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; } </s> java
T-122	<s> public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); /* while(n >= 1) { if((n % 2) == 1) n /= 2; */ <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; } </s> java
H-122	-0.3932759165763855	public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); /* while(n >= 1) { if((n % 2) == 1) n /= 2; */ <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } return result ; }
D-122	-0.3932759165763855	public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); /* while(n >= 1) { if((n % 2) == 1) n /= 2; */ <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } return result ; }
P-122	-0.9897 -0.0623 -1.8322 -0.4506 -0.0629 -0.1282 -0.1007 -0.1059 -0.0085 -0.0921 -0.0201 -0.0260 -0.0217 -0.5709 -0.9034 -0.0933 -1.8290 -0.0777 -1.6888 -0.4392 -0.0570 -0.1750 -0.0851 -0.0997 -0.0812 -1.0586 -0.1575 -0.1075 -0.7057 -0.2015 -0.1436 -0.4069 -0.0971 -1.1122 -0.1534 -0.1238 -0.2618 -0.6598 -0.1599 -1.1626 -1.7737 -0.0724 -0.1941 -0.1218 -0.0744 -0.8393 -0.0973 -0.1276 -0.5616 -0.1780 -0.1207 -0.3469 -0.0806 -0.8981 -0.1305 -0.0269 -0.3087 -0.4180 -0.1257 -0.1345 -0.1486 -0.1846 -0.1690 -0.1888 -0.1271 -0.0301 -0.1261 -0.1111 -1.0883 -0.0974 -0.4867 -0.1712 -0.1272 -0.3446 -0.0806 -1.0480 -0.1053 -0.1175 -0.2021 -0.5433 -0.1547 -1.3038 -0.2075 -2.3759 -0.1420 -1.3584 -0.1222 -0.3022
S-93	<s> public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { /* result += (int) c; */ <mask> } return result; } </s> java
T-93	<s> public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { /* result += (int) c; */ <mask> } return result; } </s> java
H-93	-0.4660055637359619	public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { result += (int) c; */ <mask> } return result ; }
D-93	-0.4660055637359619	public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { result += (int) c; */ <mask> } return result ; }
P-93	-0.8023 -0.0406 -0.1217 -0.0271 -0.0189 -0.0360 -0.0193 -0.0568 -0.6155 -0.3580 -2.1194 -0.0304 -1.6393 -0.0823 -0.1106 -0.0619 -0.0933 -1.6251 -0.1153 -0.1100 -0.1074 -1.6000 -0.1313 -1.4181 -0.5264 -0.1183 -0.1953 -0.0782 -0.0705 -1.3121 -0.0839 -0.1809 -0.1456 -0.3883 -0.7303 -0.3001 -0.2025 -0.1703 -0.0834 -0.5730 -0.1433 -0.0917 -0.0344 -0.4379 -0.2131 -0.3728 -0.2268 -0.3947 -0.0838 -0.2119 -0.0928 -0.5439 -0.2384 -3.3080 -0.1347 -0.1026 -2.7289 -0.0984 -0.1014 -0.0737 -0.0965 -1.8149 -0.2199 -0.1279 -0.5280 -0.1038 -0.0608 -0.2748 -0.3997 -0.0617 -0.0769 -1.6466 -0.0787 -0.0279 -2.6839 -0.1270 -1.6391 -0.0658 -0.1522 -0.3500 -0.6937 -0.1761 -0.4268 -2.5778 -0.1476 -0.1188 -0.1482 -0.2023 -0.0910 -0.0918 -1.7094 -0.0995 -0.1865
S-142	<s> public static String words_in_sentence(String sentence) { String result = ""; for (String word : sentence.split(" ")) { int flag = 0; /* for (int i = 2; i < word.length(); i += 1){ */ <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); } </s> java
T-142	<s> public static String words_in_sentence(String sentence) { String result = ""; for (String word : sentence.split(" ")) { int flag = 0; /* for (int i = 2; i < word.length(); i += 1){ */ <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); } </s> java
H-142	-0.37713536620140076	public static String words_in_sentence(String sentence ) { java.lang.String result = ""; for (String word : sentence.split(" ")) { int flag = 0; /* for (int i = 2; i < word.length(); i += 1){ */ <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); }
D-142	-0.37713536620140076	public static String words_in_sentence(String sentence ) { java.lang.String result = ""; for (String word : sentence.split(" ")) { int flag = 0; /* for (int i = 2; i < word.length(); i += 1){ */ <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); }
P-142	-0.7098 -0.0619 -2.0335 -0.0187 -0.0973 -0.0725 -0.0940 -0.0637 -0.6948 -0.1208 -0.0372 -1.5198 -0.0883 -4.6295 -0.0474 -0.0803 -0.1151 -0.1927 -0.1643 -0.0802 -2.6102 -0.2297 -0.1187 -0.1568 -0.0612 -0.0740 -0.0309 -0.1163 -0.5002 -0.0641 -0.0887 -0.0768 -0.1665 -0.0534 -0.0880 -0.6820 -1.0387 -0.1651 -0.1322 -0.4575 -0.0805 -0.0912 -0.8065 -0.0965 -0.1310 -0.0722 -0.1051 -0.0749 -1.8888 -0.0834 -0.0498 -0.1845 -0.4344 -0.2178 -0.1348 -0.0761 -0.1380 -0.1382 -0.1258 -0.9428 -0.1366 -0.1097 -0.5072 -0.3372 -0.0932 -0.1121 -1.2991 -0.0669 -0.1656 -1.5934 -0.1525 -0.1313 -0.1221 -0.9071 -0.0854 -0.1353 -0.1620 -0.0725 -0.1501 -0.1302 -0.6523 -0.1107 -0.6361 -0.1728 -0.1051 -0.0588 -0.0993 -0.1257 -0.0224 -0.1261 -0.1499 -0.0865 -0.1287 -1.3319 -2.3091 -0.1094 -0.1826
S-141	<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ /* if (i % 4 == 0) result += lst[i] * lst[i]; else if (i % 3 == 0) */ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; } </s> java
T-141	<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ /* if (i % 4 == 0) result += lst[i] * lst[i]; else if (i % 3 == 0) */ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; } </s> java
H-141	-0.41739538311958313	<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (i % 4 == 0) result += lst[i] * lst[i]; else if (i % 3 == 0) { result += lst[i] * lst[i] * lst[i]; } else result += lst[i]; } return result ; }
D-141	-0.41739538311958313	<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (i % 4 == 0) result += lst[i] * lst[i]; else if (i % 3 == 0) { result += lst[i] * lst[i] * lst[i]; } else result += lst[i]; } return result ; }
P-141	-2.3546 -0.2529 -0.2700 -0.1107 -0.0652 -0.1413 -0.0984 -0.1077 -0.0139 -0.0831 -0.8856 -0.6239 -2.1684 -0.0428 -1.7193 -0.0765 -0.1229 -0.0729 -0.0982 -1.7442 -0.1469 -0.1191 -0.5223 -0.0884 -0.0876 -1.7286 -0.0999 -0.0980 -0.2240 -0.0824 -0.0420 -0.6944 -0.0837 -0.0632 -0.2236 -1.0399 -0.8519 -0.1228 -1.3687 -0.2189 -0.0889 -0.1306 -0.9524 -0.1773 -0.0572 -0.0814 -0.6242 -0.2017 -0.2265 -0.0762 -0.0587 -0.3999 -0.1993 -1.7916 -0.1112 -0.1077 -0.1217 -0.1816 -0.1795 -0.0930 -0.0598 -0.4703 -2.5919 -0.8793 -0.0843 -0.0725 -0.5223 -0.1461 -0.2270 -0.0574 -0.0449 -0.3250 -0.1186 -0.3532 -0.2310 -0.0456 -0.3699 -0.1178 -1.5693 -0.2055 -0.1800 -1.0421 -0.0865 -0.0562 -0.4851 -0.1484 -1.8849 -0.0840 -0.1281 -0.0813 -1.0841 -0.0860 -0.1604
S-36	<s> public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { /* for (int j = 0; j < i + "".length(); j += 1){ if (i + "".substring(j, j + 1) == "7") */ <mask> result += 1; } } } return result; } </s> java
T-36	<s> public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { /* for (int j = 0; j < i + "".length(); j += 1){ if (i + "".substring(j, j + 1) == "7") */ <mask> result += 1; } } } return result; } </s> java
H-36	-0.37210214138031006	public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { /* for (int j = 0; j < i + "".length(); j += 1){ if (i + "". substring(j, j + 1) == "7") */ <mask> result += 1; } } } return result ; }
D-36	-0.37210214138031006	public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { /* for (int j = 0; j < i + "".length(); j += 1){ if (i + "". substring(j, j + 1) == "7") */ <mask> result += 1; } } } return result ; }
P-36	-0.7720 -0.0384 -0.1160 -0.0883 -0.0115 -0.0922 -0.0538 -0.0106 -0.6002 -0.6736 -0.0682 -1.9777 -0.0803 -0.1270 -0.0909 -0.0889 -0.9824 -0.1552 -0.1198 -0.4226 -0.0919 -0.0875 -0.9430 -0.0889 -0.1057 -0.0946 -0.7736 -0.0768 -0.0681 -0.2120 -1.0354 -0.1380 -0.1268 -1.4386 -0.3135 -0.0547 -0.1412 -0.0990 -0.2082 -0.1198 -0.2152 -0.0277 -0.1268 -0.8442 -0.0833 -1.5150 -0.1278 -0.1374 -0.2705 -0.1225 -0.1060 -0.8308 -0.1011 -0.0790 -0.1945 -0.1018 -0.8030 -0.0751 -1.6530 -0.0699 -0.0785 -0.1734 -0.7291 -0.0978 -0.1265 -0.8497 -0.2069 -0.6117 -1.1579 -0.7761 -0.2165 -1.1526 -0.0987 -0.2350 -2.0798 -0.2750 -0.0712 -0.6675 -0.3159 -0.1423 -0.0643 -0.1481 -0.0998 -0.0557 -1.7709 -0.1602 -0.1544 -0.1103 -0.1025 -0.1150 -1.2521 -0.0905 -0.1482
S-54	<s> public static boolean same_chars(String s0, String s1) { /* ArrayList<Character> set0 = new ArrayList<Character>(); ArrayList<Character> set1 = new ArrayList<Character>(); */ <mask> for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); } </s> java
T-54	<s> public static boolean same_chars(String s0, String s1) { /* ArrayList<Character> set0 = new ArrayList<Character>(); ArrayList<Character> set1 = new ArrayList<Character>(); */ <mask> for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); } </s> java
H-54	-0.38366976380348206	public static boolean same_chars(String s0, String s1) { /* ArrayList<Character> set0 = new ArrayList<Character>(); ArrayList<Character> set1 = new ArrayList<Character>(); */ <mask> for (char c0 : s0.toCharArray () ) { set0.add(c0); } for (char c1 : s1.toCharArray () ) { set1.add(c1); } return set0.equals(set1); }
D-54	-0.38366976380348206	public static boolean same_chars(String s0, String s1) { /* ArrayList<Character> set0 = new ArrayList<Character>(); ArrayList<Character> set1 = new ArrayList<Character>(); */ <mask> for (char c0 : s0.toCharArray () ) { set0.add(c0); } for (char c1 : s1.toCharArray () ) { set1.add(c1); } return set0.equals(set1); }
P-54	-1.0728 -0.0389 -0.1089 -0.0731 -0.1008 -0.0281 -0.5994 -0.1107 -0.1011 -0.3675 -1.6480 -0.0847 -0.3300 -0.0745 -2.1894 -1.1052 -0.2703 -0.0388 -0.1463 -0.0646 -0.0577 -0.0889 -0.0728 -1.4202 -0.1774 -0.0386 -1.2145 -1.2743 -0.1399 -0.0432 -0.1075 -0.0537 -0.0771 -0.0709 -0.0656 -1.2522 -0.1377 -0.0403 -0.6369 -0.4978 -0.1661 -0.2041 -0.1351 -0.2285 -0.1251 -0.5116 -0.1164 -0.0718 -0.0822 -0.0732 -0.0807 -0.0984 -0.0368 -3.9143 -0.2128 -0.0962 -0.1586 -0.3834 -0.3811 -0.7774 -0.2240 -1.4878 -0.1123 -0.1866 -0.1168 -0.4483 -0.1105 -0.0682 -0.0692 -0.0734 -0.0724 -0.2092 -0.0456 -0.0823 -0.0920 -0.0973 -0.0703 -0.1719 -0.3038 -0.5139 -0.1424 -0.9104 -0.0762 -0.1075 -0.1576 -0.0672 -1.3392 -0.6150 -0.5294 -0.9523 -0.1003 -1.8706
S-154	<s> public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; /* for (char c : (num + "").toCharArray()) { if ((int)c % 2 == 0) even_count += 1; if ((int)c % 2 == 1) odd_count += 1; */ <mask> } return new int[] {even_count, odd_count}; } </s> java
T-154	<s> public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; /* for (char c : (num + "").toCharArray()) { if ((int)c % 2 == 0) even_count += 1; if ((int)c % 2 == 1) odd_count += 1; */ <mask> } return new int[] {even_count, odd_count}; } </s> java
H-154	-0.34726381301879883	public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; /* for (char c : (num + "").toCharArray()) { if ( ( even_count ) == 0 ) even_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( even_count ) == 0 ) odd_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( even_count ) == 0 ) odd_count = 0 ; } return new int[] {even_count, odd_count}; }
D-154	-0.34726381301879883	public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; /* for (char c : (num + "").toCharArray()) { if ( ( even_count ) == 0 ) even_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( even_count ) == 0 ) odd_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( even_count ) == 0 ) odd_count = 0 ; } return new int[] {even_count, odd_count}; }
P-154	-0.6115 -0.0355 -0.1137 -2.1417 -0.0965 -0.1154 -0.0132 -0.1035 -0.0498 -0.5020 -0.6448 -0.0787 -1.6156 -0.0819 -0.1530 -0.1059 -0.1200 -0.0555 -0.0846 -0.6463 -0.1155 -0.0616 -0.1041 -0.0583 -0.1069 -0.7536 -1.4115 -0.1280 -0.1346 -0.3107 -0.0780 -0.0554 -0.1601 -0.2827 -0.0681 -0.0736 -1.1533 -0.0978 -0.0286 -2.0135 -0.0958 -0.0946 -0.5886 -1.0991 -1.6807 -0.2358 -0.0511 -0.9406 -1.7351 -0.9438 -0.3273 -1.1439 -0.1115 -0.0701 -0.3771 -1.0376 -0.1838 -0.2197 -0.1304 -1.5276 -0.0330 -0.0930 -0.0342 -0.0957 -0.1362 -0.1419 -0.2188 -0.0181 -0.0907 -0.0474 -0.1529 -0.0970 -0.2350 -0.2520 -0.1592 -0.3279 -0.4555 -0.1035 -0.0432 -0.1063 -0.2352 -0.2010 -0.2174 -0.0237 -0.0898 -0.0535 -0.2346 -0.1166 -0.2937 -0.6268 -0.1717 -0.2089 -0.9913 -0.1279 -0.0534 -0.1590 -0.4699 -0.2031 -0.1931 -0.1305 -0.0811 -0.0589 -0.2698 -0.1095 -0.3450 -1.5847 -0.1706 -0.1582 -0.2979 -0.0914 -0.0464 -0.0962 -0.1729 -0.1020 -0.1726 -0.2215 -0.0868 -0.0589 -0.2986 -0.1238 -0.3861 -2.7864 -0.1728 -0.1974 -0.6556 -0.0915 -0.0524 -0.1343 -0.3969 -0.1474 -0.1668 -0.5295 -0.0884 -0.0612 -0.3741 -0.1002 -0.4232 -1.5075 -0.5309 -0.0833 -0.0764 -2.1895 -0.1101 -0.4341 -0.1118 -0.0641 -0.5890 -0.0631 -0.1033 -0.0630 -0.2659 -0.0725 -0.7537
S-148	<s> public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, /* (s1, s2) -> s1.length() - s2.length() */ <mask> ); return result; } </s> java
T-148	<s> public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, /* (s1, s2) -> s1.length() - s2.length() */ <mask> ); return result; } </s> java
H-148	-0.39714327454566956	public static ArrayList<String> sorted_list_sum(ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1 ) continue; result.add(str); } Collections.sort( result, /* (s1, s2) -> s1.length() - s2.length() */ <mask> ); return result ; }
D-148	-0.39714327454566956	public static ArrayList<String> sorted_list_sum(ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1 ) continue; result.add(str); } Collections.sort( result, /* (s1, s2) -> s1.length() - s2.length() */ <mask> ); return result ; }
P-148	-0.9995 -0.0627 -2.0103 -0.3533 -0.0776 -0.1294 -0.0440 -0.0880 -0.0351 -0.0906 -0.0795 -0.7592 -0.0683 -0.3917 -0.0749 -0.1646 -0.0382 -1.7189 -0.0860 -1.7296 -0.4590 -0.0747 -0.1690 -0.0694 -0.0959 -0.0625 -1.3984 -0.3051 -0.0743 -1.5815 -0.1425 -0.1194 -0.1376 -0.1121 -0.0527 -0.0524 -1.4395 -0.0953 -0.1420 -0.1345 -0.6221 -0.2928 -0.1829 -1.1841 -0.9506 -0.0860 -0.1702 -3.4578 -0.5089 -0.0804 -0.0546 -0.0876 -0.1294 -0.3940 -0.9350 -0.3107 -1.6718 -0.0764 -1.6822 -0.0972 -0.0618 -0.4712 -0.0844 -1.2534 -0.6477 -0.1142 -0.1410 -0.2537 -0.0766 -0.1124 -0.0589 -0.0640 -0.0307 -0.0701 -0.3424 -0.0664 -0.1093 -0.0197 -0.0626 -0.3011 -0.1704 -0.1971 -0.1060 -0.1324 -0.4768 -0.0843 -0.0791 -1.0953 -0.0905 -0.2757
S-88	<s> public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( /* d.charAt(s.indexOf((int) c) + 2 * 2) */ <mask> ); } else { sb.append(c); } } return sb.toString(); } </s> java
T-88	<s> public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( /* d.charAt(s.indexOf((int) c) + 2 * 2) */ <mask> ); } else { sb.append(c); } } return sb.toString(); } </s> java
H-88	-0.40538787841796875	public static String encrypt(String s ) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( /* d.charAt(s. indexOf((int) c) + 2 * 2) */ <mask> ); } else { sb.append(c); } } return sb. toString () ; }
D-88	-0.40538787841796875	public static String encrypt(String s ) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( /* d.charAt(s. indexOf((int) c) + 2 * 2) */ <mask> ); } else { sb.append(c); } } return sb. toString () ; }
P-88	-0.5930 -0.0531 -2.1194 -0.0325 -0.6682 -0.1120 -0.1058 -2.3801 -0.0827 -1.4210 -0.0262 -0.0928 -0.0626 -0.7427 -1.7295 -1.9621 -0.1377 -0.0866 -0.1485 -0.0117 -0.0045 -0.0053 -0.8997 -0.2235 -0.1257 -0.3853 -0.0847 -0.0636 -0.1017 -0.1158 -0.0611 -0.0386 -0.3164 -0.1614 -0.8144 -0.0467 -0.0473 -0.0737 -0.1286 -0.2481 -0.2162 -0.0716 -0.0553 -0.0542 -0.1864 -0.1024 -0.1166 -1.2092 -0.6699 -1.1456 -0.0593 -0.1013 -0.3971 -0.1147 -0.0983 -0.0949 -1.2569 -0.2683 -0.2383 -0.2396 -0.1476 -0.3321 -0.1596 -0.1482 -0.0702 -0.1718 -0.1513 -0.0973 -0.0852 -0.1669 -0.6833 -0.1407 -0.0833 -0.1465 -0.0578 -0.1150 -1.1644 -0.7387 -0.6818 -2.1991 -0.1633 -0.9490 -0.1384 -0.0561 -0.1265 -1.7782 -2.0646 -0.1814 -0.1007 -0.1752
S-4	<s> public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ /* deviation_sum += (number - mean) * (number - mean); */ <mask> } return deviation_sum / numbers.size(); } </s> java
T-4	<s> public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ /* deviation_sum += (number - mean) * (number - mean); */ <mask> } return deviation_sum / numbers.size(); } </s> java
H-4	-0.31948456168174744	public static double mean_absolute_deviation(List<Double> numbers ) { double sum = 0.; for (Double number : numbers ) { sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers ) { /* deviation_sum += (number - mean) * (number - mean); */ <mask> } return deviation_sum / numbers.size(); }
D-4	-0.31948456168174744	public static double mean_absolute_deviation(List<Double> numbers ) { double sum = 0.; for (Double number : numbers ) { sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers ) { /* deviation_sum += (number - mean) * (number - mean); */ <mask> } return deviation_sum / numbers.size(); }
P-4	-1.0955 -0.0429 -0.1282 -0.0506 -0.0916 -0.0437 -0.0889 -0.0275 -0.0252 -0.5312 -0.0857 -0.3517 -0.0405 -0.1444 -0.0705 -1.7532 -0.0896 -0.1415 -0.0787 -0.0901 -0.0930 -0.6840 -0.3615 -0.1152 -0.0637 -0.0742 -0.0610 -0.0682 -2.7089 -0.1323 -0.0949 -0.0531 -0.0689 -1.4743 -0.0816 -0.1351 -0.0640 -0.1041 -0.0822 -0.0565 -0.0712 -0.0990 -0.1398 -2.4105 -0.1277 -0.0546 -0.1063 -0.0550 -0.0934 -0.0935 -0.5855 -0.1307 -0.1090 -0.0589 -0.0742 -0.0568 -0.0739 -1.5814 -0.1222 -3.1247 -0.0484 -0.1021 -0.0472 -0.0531 -0.1402 -0.2041 -0.0832 -0.0660 -1.3202 -0.0350 -0.1122 -0.1171 -0.0741 -0.0626 -1.1132 -0.2439 -0.1203 -0.1281 -0.1317 -0.3337 -0.1001 -0.0856 -0.0971 -0.0599 -0.0542 -0.0656 -0.1012 -0.1327 -2.4459 -0.0903 -0.5885
S-0	<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ /* double distance = numbers.get(i) - numbers.get(j); */ <mask> if (distance < threshold) return true; } } return false; } </s> java
T-0	<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ /* double distance = numbers.get(i) - numbers.get(j); */ <mask> if (distance < threshold) return true; } } return false; } </s> java
H-0	-0.40754613280296326	public static boolean has_close_elements(List<Double> numbers, double threshold ) { for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ /* double distance = numbers.get(i) - numbers.get(j); */ <mask> if (distance < threshold ) return true; } } return false; }
D-0	-0.40754613280296326	public static boolean has_close_elements(List<Double> numbers, double threshold ) { for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ /* double distance = numbers.get(i) - numbers.get(j); */ <mask> if (distance < threshold ) return true; } } return false; }
P-0	-1.1731 -0.0427 -0.1083 -0.0552 -0.0952 -0.0307 -0.0888 -0.0206 -0.6658 -0.0752 -0.3674 -0.0384 -0.1495 -0.0505 -0.9852 -0.1139 -0.0445 -3.0596 -0.1827 -0.2191 -0.1303 -0.6611 -0.0878 -0.0959 -1.9164 -0.0823 -0.0925 -0.0963 -0.0989 -0.2028 -2.5356 -0.0806 -0.0646 -0.1995 -1.0894 -0.0983 -0.1123 -0.3906 -0.1172 -0.0965 -0.1462 -0.0685 -1.2319 -0.0984 -0.0871 -0.0861 -0.1013 -0.1621 -1.9009 -0.1034 -0.0560 -0.1343 -1.1390 -2.3901 -0.1080 -0.0271 -0.1376 -0.0989 -0.1032 -0.3264 -0.3560 -0.6833 -1.0055 -0.0945 -0.0883 -0.0947 -0.2604 -0.3970 -0.1885 -1.1669 -0.7472 -0.4266 -0.1293 -0.1851 -0.1864 -0.1331 -0.7639 -0.3169 -0.0962 -1.6020 -0.2323 -0.0800 -0.7161 -0.2490 -0.3878 -0.1417 -0.0378 -1.0173 -0.1040 -0.4692
S-79	<s> public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { /* if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) */ <mask> return false; } return true; } </s> java
T-79	<s> public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { /* if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) */ <mask> return false; } return true; } </s> java
H-79	-0.4528599679470062	public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) return false; } return true; }
D-79	-0.4528599679470062	public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) return false; } return true; }
P-79	-0.4924 -0.0466 -0.0945 -0.0688 -0.0908 -0.0382 -0.0077 -0.4659 -0.0879 -0.1122 -2.2892 -0.0809 -0.2030 -0.1193 -0.4539 -0.1353 -0.1113 -0.9384 -0.1279 -0.4125 -0.0739 -0.0925 -0.8042 -0.3029 -0.1236 -0.6827 -0.0858 -0.0995 -1.0346 -0.1051 -0.1099 -0.7165 -0.1080 -0.0733 -0.8815 -0.6786 -0.5791 -0.0984 -0.0755 -2.4502 -0.0812 -0.6875 -0.1205 -0.9746 -0.1065 -0.6623 -0.5060 -0.3827 -0.8899 -0.1543 -0.1317 -0.1030 -0.6176 -0.4523 -0.2413 -0.2731 -2.5531 -1.0092 -0.1785 -0.1047 -0.6091 -0.3163 -0.1351 -0.2664 -2.1814 -0.1158 -0.0731 -0.1074 -0.6929 -0.4729 -0.1889 -0.1723 -0.1390 -0.8877 -2.3133 -0.2081 -0.7783 -0.1678 -0.5493 -0.0770 -0.8391 -0.1057 -0.4075
S-162	<s> public static ArrayList<Integer> generate_integers(int a, int b) { /* int lower = Math.max(2, a); int upper = Math.min(8, b); */ <mask> ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; } </s> java
T-162	<s> public static ArrayList<Integer> generate_integers(int a, int b) { /* int lower = Math.max(2, a); int upper = Math.min(8, b); */ <mask> ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; } </s> java
H-162	-0.3749488890171051	public static java.util.ArrayList <Integer> generate_integers(int a, int b) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; int lower = Math.max(2, a); int upper = Math.min(8, b); */ <mask> ArrayList<Integer> result = new java.util.ArrayList <Integer> () ; for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }
D-162	-0.3749488890171051	public static java.util.ArrayList <Integer> generate_integers(int a, int b) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; int lower = Math.max(2, a); int upper = Math.min(8, b); */ <mask> ArrayList<Integer> result = new java.util.ArrayList <Integer> () ; for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }
P-162	-0.8893 -0.0531 -3.6785 -0.1208 -0.2442 -0.1332 -0.6410 -1.4623 -0.0951 -0.5286 -0.0482 -0.0930 -0.0228 -0.0304 -0.7681 -1.0293 -0.0907 -0.8173 -0.0809 -0.0725 -1.8379 -0.0808 -0.8216 -0.0716 -0.0995 -0.0881 -0.1992 -0.4001 -0.0852 -0.3338 -0.0715 -0.0823 -0.0535 -0.0645 -0.0712 -0.0410 -0.1219 -0.0469 -0.2730 -0.1050 -0.5044 -0.3094 -0.3765 -2.2025 -0.0462 -0.0899 -2.0107 -0.0955 -0.2164 -0.1765 -0.0872 -1.2721 -0.0747 -0.0741 -0.0957 -1.3935 -0.0934 -0.0589 -0.1211 -0.2778 -0.0722 -0.6542 -1.2183 -0.1852 -0.1437 -0.1247 -1.5984 -1.1066 -0.0415 -0.1243 -0.2668 -0.3145 -0.0492 -0.2733 -0.0939 -0.0339 -0.1151 -0.0713 -0.2702 -0.1122 -0.4097 -0.0576 -0.2680 -0.1147 -0.1301 -1.4606 -0.0945 -0.0878 -0.0565 -0.2736 -0.0853 -0.0364 -0.1044 -0.4016 -0.0853 -0.0488 -1.2440 -0.0766 -0.1148 -0.1279 -0.4978 -0.1614 -0.0412 -0.0791 -0.5099 -0.0751 -0.1388 -0.4454 -0.7790 -0.1802 -0.9212 -0.0746 -0.0790 -0.0479 -1.4889 -0.1218 -0.6556
S-150	<s> public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { /* result += d_int; */ <mask> } } } return result; } </s> java
T-150	<s> public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { /* result += d_int; */ <mask> } } } return result; } </s> java
H-150	-0.3527110517024994	public static int double_the_difference(double [] lst) { int result = 0 ; for (Double d : lst) { if ( d.doubleValue() == d ) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { /* result += d_int; */ <mask> } } } return result ; }
D-150	-0.3527110517024994	public static int double_the_difference(double [] lst) { int result = 0 ; for (Double d : lst) { if ( d.doubleValue() == d ) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { /* result += d_int; */ <mask> } } } return result ; }
P-150	-0.5831 -0.0395 -0.1374 -0.0675 -0.0935 -0.0219 -0.1029 -0.0729 -0.4826 -0.5988 -2.3874 -0.0240 -1.2855 -0.0854 -0.1137 -0.0908 -0.0877 -1.5411 -0.3194 -0.1860 -0.1211 -0.0461 -0.0736 -0.0771 -0.0293 -0.8822 -0.0985 -0.1804 -0.5102 -2.4614 -0.3087 -0.0859 -0.0578 -1.4804 -0.2349 -0.0753 -1.9516 -0.0895 -0.1775 -0.0838 -0.1003 -0.0839 -0.1043 -0.1468 -0.1919 -0.6596 -0.0818 -0.1022 -0.0674 -0.0531 -1.7987 -0.1061 -0.1202 -0.7548 -0.1188 -0.0564 -0.4756 -0.0582 -0.1200 -0.2605 -0.5034 -0.1213 -0.1136 -0.0561 -0.0762 -1.1759 -0.0980 -2.2403 -0.0816 -0.0617 -0.0919 -0.1110 -0.0606 -0.4051 -0.3150 -0.1390 -0.0944 -0.1282 -0.2113 -0.1277 -0.0940 -0.0856 -0.1076 -0.7104 -0.0949 -0.2213
S-97	<s> public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); /* if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') */ <mask> count += 1; } return count; } </s> java
T-97	<s> public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); /* if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') */ <mask> count += 1; } return count; } </s> java
H-97	-0.3629310727119446	public static int count_upper(String s ) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') { count += 1 ; } } return count ; }
D-97	-0.3629310727119446	public static int count_upper(String s ) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') { count += 1 ; } } return count ; }
P-97	-0.3886 -0.0421 -0.1101 -0.0867 -0.0966 -0.0332 -0.4045 -0.0882 -0.1067 -2.2455 -0.0876 -0.1183 -0.0690 -0.0929 -1.3231 -0.1727 -0.1151 -0.7963 -0.0783 -0.0855 -1.3289 -0.0951 -0.1197 -0.5510 -0.1063 -0.0671 -2.2090 -0.0855 -0.0711 -0.4938 -0.0826 -0.1734 -0.0921 -0.0900 -0.0867 -0.1150 -0.9479 -0.5660 -0.4942 -1.6669 -0.7450 -0.1248 -1.2296 -0.1941 -0.0968 -0.1082 -0.1086 -0.1660 -0.2130 -0.1516 -0.0871 -0.1072 -0.1079 -0.2179 -0.1704 -0.1534 -0.1015 -0.0935 -0.1316 -0.1902 -0.1494 -0.1440 -0.1096 -0.0461 -0.1126 -0.2704 -0.1480 -0.1382 -0.0843 -0.0481 -0.5311 -0.6396 -1.0489 -0.1990 -1.6082 -0.3907 -0.2715 -1.3206 -0.1618 -0.1012 -1.7169 -0.0934 -0.3078
S-69	<s> public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } /* } */ <mask> return result; } </s> java
T-69	<s> public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } /* } */ <mask> return result; } </s> java
H-69	-0.3464973568916321	public static List<Integer> strange_sort_list(List<Integer> lst ) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size () > 0 ) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } /* } */ <mask> return result ; }
D-69	-0.3464973568916321	public static List<Integer> strange_sort_list(List<Integer> lst ) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size () > 0 ) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } /* } */ <mask> return result ; }
P-69	-0.8949 -0.0403 -0.3002 -0.3303 -0.0715 -0.1353 -0.0229 -0.0839 -0.0218 -0.0965 -0.0456 -0.6502 -0.0817 -0.4033 -0.0598 -0.1736 -0.0431 -1.7673 -0.0841 -0.3380 -0.4136 -0.0642 -0.1585 -0.0696 -0.0945 -0.0584 -1.1905 -0.2418 -0.0627 -1.6895 -0.1144 -0.0737 -0.0976 -0.1195 -1.3190 -0.1586 -0.1290 -0.5091 -0.2664 -0.2629 -1.9953 -0.2160 -1.5699 -0.4955 -0.0911 -0.1503 -0.1265 -0.1719 -0.0541 -0.8749 -0.0909 -0.1101 -0.1343 -0.3026 -0.5391 -0.0378 -0.1007 -0.0537 -0.3879 -0.2776 -1.2247 -0.0885 -0.0692 -0.1176 -0.0922 -0.1167 -0.2553 -0.4845 -0.0344 -0.0927 -0.1552 -0.3122 -0.1450 -0.7501 -0.0824 -1.4799 -0.3371 -0.3240 -0.1871 -0.1323 -0.1600 -0.2121 -0.0900 -1.3929 -0.0933 -0.8510
S-109	<s> public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; /* for(int i : lst2) { if((i % 2) == 1) even++; */ <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; } </s> java
T-109	<s> public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; /* for(int i : lst2) { if((i % 2) == 1) even++; */ <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; } </s> java
H-109	-0.36461472511291504	public static java.lang.String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; /* for(int i : lst2) { if((i % 2) == 1) even++; */ <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; }
D-109	-0.36461472511291504	public static java.lang.String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; /* for(int i : lst2) { if((i % 2) == 1) even++; */ <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; }
P-109	-0.9474 -0.0512 -4.9049 -0.1406 -0.0946 -0.1550 -0.0410 -0.0563 -0.4802 -0.0681 -0.3433 -0.0578 -0.1920 -0.0468 -0.5397 -1.6608 -0.2915 -0.0448 -0.1826 -0.0362 -0.2676 -0.0863 -0.2711 -0.0694 -0.1010 -1.1407 -0.1755 -0.0905 -0.9828 -1.1269 -0.1317 -0.2069 -0.2370 -0.1143 -0.0723 -0.0537 -0.3439 -0.0956 -0.0958 -0.5134 -0.3303 -0.1556 -0.3563 -0.0789 -0.9162 -0.1192 -0.3330 -0.6604 -0.1420 -0.0683 -0.1421 -0.1253 -0.1987 -0.2977 -0.2593 -0.1111 -0.0659 -0.0442 -0.3659 -0.0944 -0.0846 -0.5569 -0.1999 -0.1792 -0.3679 -0.0811 -0.8442 -0.0852 -0.4055 -0.1709 -0.2228 -0.6958 -0.4337 -0.1420 -0.1686 -1.1651 -0.1260 -0.0893 -0.1022 -0.0159 -1.3011 -0.0983 -0.2080 -0.1214 -0.0170 -1.0804 -0.0934 -1.6536
S-89	<s> public static Integer next_smallest(int[] lst) { /* List<Integer> numbers = new ArrayList<Integer>(); */ <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; } </s> java
T-89	<s> public static Integer next_smallest(int[] lst) { /* List<Integer> numbers = new ArrayList<Integer>(); */ <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; } </s> java
H-89	-0.3533777892589569	public static Integer next_smallest(int[] lst) { /* List<Integer> numbers = new ArrayList<Integer>(); */ <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return null ; }
D-89	-0.3533777892589569	public static Integer next_smallest(int[] lst) { /* List<Integer> numbers = new ArrayList<Integer>(); */ <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return null ; }
P-89	-0.5358 -0.0433 -2.0388 -0.0645 -0.1096 -0.0713 -0.0297 -0.6055 -0.5497 -2.1880 -0.0242 -1.6528 -0.0779 -2.2715 -0.1117 -0.1505 -0.0517 -0.1590 -0.0580 -0.0957 -0.0507 -1.3613 -0.1641 -0.0433 -0.8265 -0.5349 -0.1546 -0.1332 -0.1492 -0.1452 -0.1421 -0.0807 -0.0821 -0.0599 -0.0352 -1.3255 -0.1365 -0.1227 -0.3035 -0.7171 -0.4322 -1.8426 -1.4724 -3.0061 -0.0350 -0.1073 -0.0562 -0.0982 -0.1199 -0.1147 -0.9283 -0.5921 -0.3702 -1.0095 -1.3088 -0.1083 -2.2344 -0.0788 -0.2724 -0.1085 -0.5792 -0.0808 -0.0594 -0.4899 -0.0116 -1.0294 -0.4375 -0.1127 -0.0618 -0.1328 -0.0284 -0.1964 -0.2525 -1.3212 -0.0818 -0.1097 -0.1095 -0.1923 -0.0872 -0.0739 -0.1237 -0.0333 -1.3700 -0.1595 -1.2939 -0.0938 -0.1128 -0.1126 -0.1710 -0.0920 -0.1287 -0.1657 -0.0447 -0.1517 -0.1486 -0.9957 -0.0978 -0.0996 -0.1133 -0.1897 -0.0974 -0.1714 -0.1822 -0.0584 -0.0775 -0.1545 -0.7070 -0.1000 -0.0885 -0.1105 -0.1910 -0.0979 -0.1887 -0.2014 -0.0738 -0.0705 -0.1627 -0.6908 -0.0992 -0.0820 -0.1066 -0.1850 -0.0965 -0.2247 -0.2305 -0.0923 -0.0708 -0.1724 -0.7655 -0.0972 -0.0827 -0.1038 -0.1912 -0.0993 -0.2882 -0.2740 -0.1123 -0.0719 -0.1812 -0.7759 -0.0982 -0.0947 -0.1020 -0.2061 -0.1015 -0.3874 -0.3244 -0.1263 -0.0741 -0.1938 -0.7115 -0.1000 -0.1188 -0.1019 -0.2229 -0.1038 -0.4834 -0.3698 -0.1421 -0.0761 -0.2048 -0.6511 -0.1036 -0.1441 -0.1028 -0.2499 -0.1074 -0.5592 -0.4168 -0.1564 -0.0779 -0.2149 -2.6661 -0.7083 -1.1568 -0.0992 -0.0626
S-10	<s> public static String make_palindrome(String str){ if (str.length() == 0) return ""; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; /* result += str.substring(0, beginning_of_suffix); */ <mask> return result; } </s> java
T-10	<s> public static String make_palindrome(String str){ if (str.length() == 0) return ""; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; /* result += str.substring(0, beginning_of_suffix); */ <mask> return result; } </s> java
H-10	-0.48492297530174255	public static String make_palindrome(String str ) { if (str.length () == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome(str. substring(beginning_of_suffix)) ) { beginning_of_suffix += 1; } String result = str; /* result += str. substring(0, beginning_of_suffix); */ <mask> return result ; }
D-10	-0.48492297530174255	public static String make_palindrome(String str ) { if (str.length () == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome(str. substring(beginning_of_suffix)) ) { beginning_of_suffix += 1; } String result = str; /* result += str. substring(0, beginning_of_suffix); */ <mask> return result ; }
P-10	-0.5084 -0.0581 -1.9182 -0.0680 -0.0965 -0.0231 -0.0057 -0.5787 -0.1206 -0.0967 -2.2848 -0.1215 -0.2780 -0.1190 -0.8069 -0.1934 -0.1528 -2.2888 -0.1504 -1.3774 -0.6889 -0.1244 -3.4283 -0.1906 -0.1626 -0.0963 -0.0671 -0.1135 -0.0720 -0.0956 -1.2961 -0.0820 -1.6461 -0.6681 -0.4734 -0.0942 -0.0200 -0.0061 -0.4380 -0.5099 -0.1099 -0.6646 -1.4379 -0.1255 -0.0178 -0.0969 -0.0716 -0.1094 -0.0899 -2.3708 -1.3676 -0.2069 -0.2605 -0.1076 -0.0759 -0.1141 -0.0820 -0.0831 -1.6799 -0.0695 -0.6579 -0.0626 -0.1008 -0.1056 -1.4442 -1.0985 -0.0536 -0.0734 -0.0719 -0.1069 -0.5305 -0.8834 -0.1852 -0.1031 -0.0696 -0.1044 -0.0848 -2.4412 -0.2773 -0.0978 -0.1175 -0.1298 -0.1363 -0.0645 -1.7688 -0.1231 -0.6344
S-51	<s> public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') */ <mask> continue; sb.append(c); } return sb.toString(); } </s> java
T-51	<s> public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') */ <mask> continue; sb.append(c); } return sb.toString(); } </s> java
H-51	-0.39881405234336853	public static String remove_vowels(String string ) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') */ <mask> continue; sb.append(c); } return sb. toString () ; }
D-51	-0.39881405234336853	public static String remove_vowels(String string ) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') */ <mask> continue; sb.append(c); } return sb. toString () ; }
P-51	-0.4149 -0.0465 -1.9793 -0.0597 -0.0998 -0.0564 -0.0221 -0.0124 -0.4445 -0.0940 -0.1096 -2.1309 -0.0833 -1.8573 -0.0355 -0.0904 -0.0667 -0.7319 -1.8388 -0.2013 -0.1212 -0.4341 -0.0885 -0.0650 -0.0897 -0.1254 -0.0919 -0.0371 -2.3714 -0.0759 -2.3570 -0.1577 -0.1266 -0.6780 -0.1633 -0.0797 -0.0953 -0.0955 -0.1673 -0.2121 -0.1489 -0.0848 -0.1061 -0.0894 -0.2108 -0.1943 -0.1487 -0.1005 -0.0810 -0.1275 -0.2050 -0.1822 -0.1374 -0.1342 -0.0541 -0.1238 -0.1665 -0.1871 -0.1332 -0.0915 -0.0495 -0.4015 -0.6700 -0.2555 -0.1361 -0.1753 -0.1103 -0.0885 -0.1284 -0.1348 -1.4090 -1.3802 -0.3042 -2.2329 -0.2208 -0.2161 -0.0838 -0.1539 -1.6176 -2.0772 -0.2251 -0.0989 -0.2170
S-43	<s> public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { /* for (int j = 0; j < l.size(); j += 1){ */ <mask> if (l.get(i) + l.get(j) == 0) return true; } } return false; } </s> java
T-43	<s> public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { /* for (int j = 0; j < l.size(); j += 1){ */ <mask> if (l.get(i) + l.get(j) == 0) return true; } } return false; } </s> java
H-43	-0.39605239033699036	@ java.lang.Override public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { /* for (int j = 0; j < l.size(); j += 1){ */ <mask> if (l.get(i) + l.get(j) == 0 ) return true; } } return false; }
D-43	-0.39605239033699036	@ java.lang.Override public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { /* for (int j = 0; j < l.size(); j += 1){ */ <mask> if (l.get(i) + l.get(j) == 0 ) return true; } } return false; }
P-43	-4.7691 -0.2655 -0.0877 -0.0413 -0.1679 -0.3409 -0.0658 -0.2411 -0.1125 -0.1038 -0.0932 -0.0487 -0.0936 -0.0453 -0.0994 -0.0764 -0.4991 -0.0650 -0.5312 -0.0481 -0.1791 -0.0695 -1.5818 -0.0866 -0.2294 -0.1283 -0.5835 -0.0889 -0.0964 -1.0939 -0.0903 -0.0748 -0.1073 -0.1098 -0.1596 -2.2434 -0.0731 -0.0620 -1.5356 -0.0808 -2.3879 -0.1208 -0.1341 -0.2515 -0.1140 -0.1062 -0.9862 -0.1178 -0.0694 -0.0875 -0.1077 -0.1489 -1.8376 -0.1027 -0.0502 -0.2750 -0.7214 -0.4105 -0.2154 -0.1146 -0.1523 -0.1624 -0.1208 -1.1433 -0.1103 -0.3052 -0.3058 -0.6254 -0.9032 -0.2627 -0.1160 -0.1132 -0.2406 -0.3008 -0.1649 -0.9422 -0.1818 -1.5312 -0.2726 -0.1425 -0.0705 -0.4542 -0.1440 -0.1585 -0.0949 -0.0323 -1.0218 -0.0923 -0.2539
S-73	<s> public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; /* for (String st : lst1) l2 = st.length(); */ <mask> if (l1 <= l2) return lst1; return lst2; } </s> java
T-73	<s> public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; /* for (String st : lst1) l2 = st.length(); */ <mask> if (l1 <= l2) return lst1; return lst2; } </s> java
H-73	-0.3666021227836609	public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0 ; for (String st : lst1) l1 += st.length(); int l2 = 0 ; /* for (String st : lst1) l2 = st.length(); */ <mask> if (l1 <= l2) return lst1; return lst2; }
D-73	-0.3666021227836609	public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0 ; for (String st : lst1) l1 += st.length(); int l2 = 0 ; /* for (String st : lst1) l2 = st.length(); */ <mask> if (l1 <= l2) return lst1; return lst2; }
P-73	-0.8564 -0.0436 -0.4821 -0.3661 -0.0755 -0.1512 -0.0769 -0.0871 -0.0481 -0.5987 -0.0914 -0.3189 -0.0711 -0.1615 -0.0371 -0.5863 -0.3071 -0.3010 -0.0740 -0.1383 -0.0304 -0.2969 -0.0890 -0.2098 -0.0889 -0.0728 -0.1013 -2.8669 -0.3155 -0.5623 -0.1257 -0.1108 -0.1141 -0.0605 -0.0377 -0.6302 -0.1384 -0.0825 -0.0695 -0.1142 -0.1434 -0.1449 -2.3551 -0.1285 -0.0746 -0.0869 -0.1098 -0.0912 -0.2077 -2.1730 -0.1675 -0.1242 -0.0801 -0.0983 -0.0580 -0.0292 -0.5385 -0.0851 -0.0647 -0.3683 -0.0791 -0.1165 -0.0954 -1.6035 -0.3664 -0.2510 -0.1221 -0.1841 -0.2588 -0.1366 -1.3100 -0.1036 -0.2472 -0.0763 -0.6925 -0.1211 -0.0370 -2.4293 -0.3429 -0.0392 -2.9598 -0.1084 -0.6286
S-25	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } /* return result; */ <mask> } </s> java
T-25	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } /* return result; */ <mask> } </s> java
H-25	-0.4871584475040436	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math. sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1 ; } return result ; }
D-25	-0.4871584475040436	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math. sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1 ; } return result ; }
P-25	-2.2707 -1.1505 -0.2511 -0.1213 -0.0793 -0.3549 -0.3179 -0.0554 -0.1734 -0.0168 -0.0340 -0.6450 -0.7765 -0.0745 -1.8417 -0.4388 -0.3694 -0.0543 -0.1829 -0.0725 -0.0986 -0.0648 -1.7065 -0.2361 -0.0550 -1.9354 -0.1335 -0.1169 -0.1012 -1.4761 -0.0685 -0.1263 -0.7519 -0.1531 -0.1486 -0.2316 -0.1921 -0.0388 -0.1120 -1.1396 -0.3191 -0.2051 -1.1127 -0.1895 -0.1849 -0.6546 -0.1366 -0.1353 -0.7014 -0.2825 -0.1511 -0.2276 -0.8064 -0.1437 -0.1234 -0.3689 -0.8896 -0.3762 -1.7993 -0.1999 -0.2091 -0.1122 -0.0923 -0.1461 -1.0729 -0.5214 -0.0720 -1.0575 -0.8614 -0.0902 -2.2581 -0.9293 -0.1088 -0.9701 -0.1203 -1.4850 -0.5756 -0.1407
S-119	<s> public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); /* for(int i = arr.size() - 1; i >= arr.size() - k; i--) { */ <mask> result.add(arr.get(i)); } return result; } </s> java
T-119	<s> public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); /* for(int i = arr.size() - 1; i >= arr.size() - k; i--) { */ <mask> result.add(arr.get(i)); } return result; } </s> java
H-119	-0.4483693838119507	public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; for(int i = arr.size() - 1; i >= arr.size() - k; i--) { */ <mask> result.add(arr.get(i)); } return result ; }
D-119	-0.4483693838119507	public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; for(int i = arr.size() - 1; i >= arr.size() - k; i--) { */ <mask> result.add(arr.get(i)); } return result ; }
P-119	-1.3461 -0.0568 -2.0959 -0.2912 -0.0657 -0.1336 -0.0381 -0.1003 -0.0692 -0.5370 -0.0324 -0.2617 -0.0506 -0.1479 -0.0499 -1.0728 -0.0763 -0.1049 -1.7518 -0.0829 -2.6121 -0.0574 -1.3081 -0.1037 -0.7953 -1.1373 -0.0900 -0.3828 -0.1242 -0.0854 -0.0387 -0.1005 -0.0877 -0.0384 -0.1224 -0.0240 -0.3795 -0.4028 -0.4738 -0.5434 -0.3037 -1.6303 -0.6201 -1.9767 -0.0760 -0.1135 -0.2109 -0.1001 -0.2292 -1.3119 -0.1285 -1.2143 -0.0879 -0.0629 -0.1335 -0.1042 -0.1844 -0.8733 -0.3564 -0.1100 -0.8660 -0.0883 -0.4573 -0.0925 -2.3377 -0.1152 -0.1143 -0.1250 -0.0737 -0.1353 -0.3578 -0.5803 -0.8665 -0.1103 -0.3946 -0.3863 -0.7582 -1.2253 -0.1077 -0.0716 -0.0751 -0.8910 -0.0868 -0.2462
S-76	<s> public static boolean iscude(int a) { /* double root = Math.pow(a, 1./3); */ <mask> BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; } </s> java
T-76	<s> public static boolean iscude(int a) { /* double root = Math.pow(a, 1./3); */ <mask> BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; } </s> java
H-76	-0.4414386451244354	public static boolean iscude(int a) { /* double root = Math.pow(a, 1./3); */ <mask> BigDecimal bd = BigDecimal. valueOf(root ) ; int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }
D-76	-0.4414386451244354	public static boolean iscude(int a) { /* double root = Math.pow(a, 1./3); */ <mask> BigDecimal bd = BigDecimal. valueOf(root ) ; int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }
P-76	-0.7481 -0.0410 -0.0944 -0.0179 -0.0252 -0.4219 -0.5580 -0.0810 -1.1946 -0.0870 -2.4164 -0.1162 -0.0449 -0.0916 -2.3831 -0.1021 -0.0403 -0.4592 -0.1761 -0.7597 -0.0723 -0.0237 -0.9374 -0.4632 -0.2600 -0.2098 -0.1914 -0.5659 -0.0261 -0.0803 -0.5761 -0.1003 -1.1617 -1.4285 -0.2486 -2.8317 -0.3046 -0.2227 -0.0458 -0.1073 -0.0399 -0.0955 -0.1797 -0.1873 -0.6225 -0.0584 -0.0992 -0.1754 -0.0272 -1.0053 -0.0298 -0.0223 -0.0927 -0.0391 -0.0175 -0.0860 -0.0465 -1.1299 -0.1097 -0.0361 -1.8457 -0.1583 -0.9894 -0.1375 -0.4298 -2.3036 -0.1073 -0.0548 -0.4559 -0.2662 -0.1056 -0.0457 -0.6486 -0.1284 -0.9729 -0.1210 -0.2039 -1.5340 -0.1342 -0.8559
S-50	<s> public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); */ <mask> sb.append(c); } return sb.toString(); } </s> java
T-50	<s> public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); */ <mask> sb.append(c); } return sb.toString(); } </s> java
H-50	-0.4323929250240326	public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray () ) { /* c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); */ <mask> sb.append(c); } return sb.toString(); }
D-50	-0.4323929250240326	public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray () ) { /* c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); */ <mask> sb.append(c); } return sb.toString(); }
P-50	-0.7242 -0.0441 -2.0408 -0.0210 -0.0962 -0.0215 -0.4579 -0.0901 -0.1026 -2.3031 -0.0801 -1.7092 -0.0327 -0.0866 -0.0659 -0.7765 -1.7916 -0.2995 -0.1279 -0.4011 -0.0774 -0.0728 -0.0881 -0.1241 -0.0863 -0.0345 -4.1268 -0.1500 -0.0636 -1.3523 -0.1271 -0.1356 -0.1314 -0.1950 -0.2797 -0.1293 -0.1050 -0.4628 -0.3738 -0.3664 -0.1905 -0.0800 -0.9679 -0.1500 -0.2895 -0.2963 -0.1016 -0.0678 -0.2781 -0.0998 -0.0240 -0.2175 -0.0616 -0.1324 -0.2016 -0.1794 -0.0547 -0.0639 -0.2641 -0.5121 -0.1786 -0.1215 -0.1429 -0.0474 -0.1243 -1.2896 -0.4658 -0.2993 -1.5374 -0.0981 -0.0824 -0.0677 -0.1676 -2.7028 -1.7394 -0.0929 -0.1495
S-47	<s> public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { /* return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; */ <mask> } } </s> java
T-47	<s> public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { /* return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; */ <mask> } } </s> java
H-47	-0.3296639025211334	public static double median(int[] list) { java.lang.System.out . println () ; if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; */ <mask> } }
D-47	-0.3296639025211334	public static double median(int[] list) { java.lang.System.out . println () ; if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; */ <mask> } }
P-47	-0.4211 -0.0376 -0.1242 -0.1492 -0.4798 -0.4525 -1.8996 -0.1087 -1.5327 -0.0832 -3.1108 -0.0670 -0.1130 -0.1144 -0.6598 -0.0887 -0.0502 -0.4140 -0.0339 -0.8897 -0.2123 -0.9412 -0.1344 -0.2058 -0.1080 -0.0580 -0.3533 -0.0488 -0.0926 -0.9904 -0.0898 -0.1073 -0.0982 -0.0864 -0.1686 -0.3528 -0.1254 -0.0950 -0.1017 -0.0627 -0.0784 -0.2174 -2.1607 -0.0978 -0.0822 -0.1143 -1.9180 -0.1136 -0.0864 -0.1621 -0.2649 -0.1257 -0.1352 -0.0942 -0.0610 -0.0678 -0.2043 -0.1229 -0.0720 -0.1739 -0.1391 -0.1140 -0.1904 -0.1349 -0.1061 -0.0982 -0.0524 -0.0727 -0.2997 -0.1320 -0.8056 -0.1720 -0.2426 -1.2800 -0.1538 -0.0796 -0.1313 -0.2454 -0.1062 -0.2012
S-9	<s> public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ /* running_max = Math.max(running_max, n); */ <mask> result.add(running_max); } return result; } </s> java
T-9	<s> public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ /* running_max = Math.max(running_max, n); */ <mask> result.add(running_max); } return result; } </s> java
H-9	-0.37113839387893677	public static List<Integer> rolling_max(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null ; for (Integer n : numbers){ if ( running_max != null ) { /* running_max = Math.max(running_max, n); */ <mask> result.add(running_max); } } return result ; }
D-9	-0.37113839387893677	public static List<Integer> rolling_max(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null ; for (Integer n : numbers){ if ( running_max != null ) { /* running_max = Math.max(running_max, n); */ <mask> result.add(running_max); } } return result ; }
P-9	-0.8572 -0.0456 -0.5170 -0.2800 -0.0655 -0.1390 -0.0202 -0.0888 -0.0373 -0.4588 -0.0830 -0.2636 -0.0585 -0.1527 -0.0425 -1.6886 -0.0848 -0.4294 -0.3516 -0.0630 -0.1501 -0.0590 -0.0872 -0.0751 -1.9549 -0.2086 -0.0663 -1.8114 -2.0598 -0.0232 -0.0916 -0.0473 -0.1029 -0.0902 -1.1888 -0.1979 -0.1272 -0.1203 -0.0741 -0.0574 -0.0476 -2.0336 -1.7757 -0.1390 -0.4365 -0.1026 -0.0433 -1.2772 -0.0363 -0.4765 -0.0696 -1.5603 -0.0196 -0.1119 -0.0596 -0.1267 -1.0907 -0.0979 -0.0919 -0.3392 -0.0858 -0.1034 -0.0636 -0.7412 -0.0555 -1.5410 -0.2470 -0.1119 -0.1308 -0.1155 -0.0495 -0.1354 -0.3858 -0.5149 -0.0618 -0.1047 -0.0720 -1.1618 -0.0946 -0.3022 -0.0677 -0.0725 -0.7949 -0.0794 -0.1975
S-112	<s> public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; /* if(digit % 2 == 0) { n--; */ <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result; } </s> java
T-112	<s> public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; /* if(digit % 2 == 0) { n--; */ <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result; } </s> java
H-112	-0.3018060624599457	public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n--; */ <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result ; }
D-112	-0.3018060624599457	public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n--; */ <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result ; }
P-112	-1.1668 -0.0577 -1.7207 -0.2541 -0.0753 -0.1374 -0.0427 -0.0984 -0.0584 -0.5128 -0.0456 -0.2627 -0.0752 -0.1745 -0.0414 -1.5756 -0.0835 -1.6479 -0.3063 -0.0798 -0.1603 -0.0736 -0.1002 -0.0732 -1.1564 -0.1802 -0.1208 -0.4275 -0.0929 -0.0901 -0.0701 -0.0451 -1.1763 -0.0913 -0.1121 -0.0788 -0.0963 -1.2152 -0.1295 -0.3733 -0.5659 -0.0892 -0.0929 -1.0956 -0.1005 -0.0932 -0.2535 -0.1077 -0.1130 -1.7792 -0.0944 -1.1607 -0.0958 -0.1549 -0.0736 -0.1121 -0.0841 -0.1116 -1.0369 -0.2431 -0.5069 -0.5108 -0.1929 -0.1816 -0.1585 -0.5844 -0.6711 -0.3881 -0.5718 -0.0524 -0.1153 -0.9530 -0.0991 -0.0636 -0.6117 -2.2590 -0.1266 -0.0606 -0.1390 -0.1857 -0.2373 -0.1385 -0.1359 -0.3271 -0.1021 -0.0527 -0.0653 -0.0632 -0.0687 -0.0471 -0.0952 -0.0933 -0.1028 -0.1692 -0.1098 -0.1355 -0.1165 -0.0507 -0.1344 -0.0965 -0.0986 -0.2086 -0.1179 -0.1839 -0.1324 -0.0957 -0.1006 -0.1914 -0.1168 -0.1020 -0.0858 -0.0839 -0.0919 -0.1071 -0.1485 -0.1128 -0.0910 -0.0229 -0.5727 -0.1128 -0.0843 -0.0753 -1.5649 -0.0952 -0.6168
S-107	<s> public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; /* if(neg) num *= 1; */ <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; } </s> java
T-107	<s> public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; /* if(neg) num *= 1; */ <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; } </s> java
H-107	-0.32832834124565125	public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; /* if(neg) num *= 1; */ <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }
D-107	-0.32832834124565125	public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; /* if(neg) num *= 1; */ <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }
P-107	-0.8958 -0.0403 -0.1257 -0.0890 -0.0924 -0.0669 -0.5565 -0.0225 -0.2214 -0.0392 -0.1614 -0.0450 -1.3041 -0.0888 -0.1363 -0.1046 -0.0914 -1.2157 -0.1664 -0.4543 -0.6305 -0.1008 -0.0770 -0.0549 -0.8301 -0.0906 -0.1446 -0.0827 -0.1131 -0.1074 -0.1099 -0.5566 -0.6613 -0.1508 -0.2200 -0.0816 -0.2204 -0.0719 -0.0033 -0.2220 -0.0799 -0.1237 -0.1016 -0.1321 -0.9925 -0.0586 -0.0988 -0.0467 -0.0911 -0.6055 -0.1120 -1.6132 -0.5377 -0.3784 -1.2295 -0.1866 -0.0883 -0.1020 -1.2039 -0.1075 -0.3671 -0.3084 -0.1104 -0.0940 -0.9530 -0.1048 -0.0825 -0.1147 -0.1116 -0.0553 -0.1109 -0.1116 -1.7140 -0.0963 -0.7338 -0.1015 -0.1488 -1.1294 -0.2259 -0.1204 -0.6248 -0.1123 -0.1315 -0.6611 -0.1590 -0.1650 -0.0748 -0.1142 -0.0643 -0.1073 -0.7976 -0.4336 -0.2346 -0.7039 -0.1916 -0.2400 -0.2144 -0.0821 -0.1353 -0.0676 -0.0863 -0.1042 -0.0611 -0.1047 -1.0682 -0.2645 -0.1950 -0.4438 -0.1446 -0.2474 -0.3580 -0.1154 -0.1300 -0.7307 -0.3655 -0.1598 -1.2043 -0.1425 -1.1388 -0.1054 -0.0873 -0.1276 -0.9723 -0.1147 -2.1228
S-38	<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); /* for (int i = 0; i < s.length(); i += 3){ */ <mask> groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; } </s> java
T-38	<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); /* for (int i = 0; i < s.length(); i += 3){ */ <mask> groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; } </s> java
H-38	-0.38259175419807434	<s> String encode_cyclic(String s ) { ArrayList<String> groups = new ArrayList<String>(); /* for (int i = 0; i < s.length(); i += 3){ */ <mask> groups.add(s. substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group. substring(1) + group. substring(0, 1); } if (remain > 0){ result += s. substring(s.length() - remain); } return result; }
D-38	-0.38259175419807434	<s> String encode_cyclic(String s ) { ArrayList<String> groups = new ArrayList<String>(); /* for (int i = 0; i < s.length(); i += 3){ */ <mask> groups.add(s. substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group. substring(1) + group. substring(0, 1); } if (remain > 0){ result += s. substring(s.length() - remain); } return result; }
P-38	-0.4530 -0.2443 -0.2892 -1.5726 -0.0265 -0.0880 -0.0168 -0.0689 -0.0073 -0.5155 -0.1036 -0.0941 -2.1377 -0.0887 -1.7380 -0.3816 -0.0739 -0.1683 -0.0681 -0.1016 -0.0584 -1.4020 -0.1978 -0.0755 -1.2393 -1.9799 -0.1677 -0.1407 -0.8746 -0.0885 -0.0870 -0.8351 -0.0800 -0.1335 -0.2022 -0.1087 -0.0981 -1.8615 -0.0928 -0.0460 -0.0920 -0.7115 -0.3866 -0.1246 -0.1207 -0.1120 -0.1075 -0.1169 -0.3250 -0.4629 -0.1197 -0.0994 -0.5059 -0.2534 -0.4436 -0.4844 -3.0504 -0.0981 -0.0546 -0.3716 -0.2232 -0.1008 -0.0790 -0.9597 -0.1702 -0.1921 -0.0908 -0.3900 -0.1049 -0.1373 -0.0329 -0.0948 -0.1198 -0.1075 -0.1101 -0.6064 -0.1005 -0.6211 -1.1619 -0.0794 -0.0961 -1.6525 -0.1332 -0.1237 -0.1272 -0.1334 -0.0742 -0.0562 -1.7497 -0.1722 -0.0566 -0.1565 -0.0988 -0.6619 -0.5564 -0.1213 -0.1381 -0.1064 -0.7090 -0.5550 -1.1309 -0.1513 -0.2385 -0.1388 -0.0362 -0.0211 -0.1697 -0.6923 -0.1355 -0.0729 -0.0915 -0.1027 -0.6115 -0.2906 -0.1147 -0.1060 -0.1236 -0.6380 -0.1993 -0.0101 -2.1057 -0.0903 -0.1144 -0.0869 -1.5149 -0.1055 -0.4879
S-6	<s> public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); /* } */ <mask> } result.add(max_depth); } return result; } </s> java
T-6	<s> public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); /* } */ <mask> } result.add(max_depth); } return result; } </s> java
H-6	-0.31172996759414673	public static List<Integer> parse_nested_parens(String paren_string) { java.lang.String [] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); /* } */ <mask> } result.add(max_depth); } return result ; }
D-6	-0.31172996759414673	public static List<Integer> parse_nested_parens(String paren_string) { java.lang.String [] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); /* } */ <mask> } result.add(max_depth); } return result ; }
P-6	-0.5687 -0.0451 -0.2995 -0.3213 -0.0601 -0.1524 -0.0307 -0.0984 -0.0259 -0.0904 -0.0525 -0.0140 -0.6828 -0.1250 -0.0539 -0.0923 -0.0553 -2.0623 -0.0845 -3.8366 -0.0498 -0.6976 -0.1131 -0.1548 -0.5129 -0.0276 -0.0931 -0.0752 -0.0886 -0.0371 -0.0924 -0.0580 -0.1178 -0.4469 -0.0790 -0.0800 -0.2469 -0.2662 -0.0545 -0.1475 -0.0789 -0.0985 -0.0480 -2.3064 -0.2615 -0.0600 -1.6781 -0.1351 -0.1160 -0.1646 -0.0551 -0.0911 -0.0628 -0.0742 -0.0451 -0.1080 -0.0599 -1.2261 -0.0937 -0.1155 -0.0859 -0.0867 -0.8810 -0.0891 -0.0514 -0.1036 -0.0842 -0.0987 -1.1054 -0.1358 -0.1195 -0.3926 -0.0928 -0.0589 -0.0367 -0.0988 -0.0487 -0.1047 -0.0689 -0.0217 -0.2928 -0.1288 -0.1296 -0.2589 -0.1499 -0.0784 -0.0416 -1.8186 -0.1344 -0.0726 -1.0095 -0.0619 -0.0984 -0.0657 -0.1085 -1.0652 -0.0997 -0.0802 -0.6359 -0.1725 -1.0188 -0.0584 -0.1014 -0.0851 -1.0326 -0.7375 -0.2979 -0.1658 -0.1249 -0.1268 -0.1076 -0.1942 -0.1119 -0.1321 -0.2744 -0.6999 -0.5633 -0.1104 -0.0673 -1.1279 -0.1195 -0.1434 -0.0832 -1.6594 -0.0832 -0.7133
S-160	<s> public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { /* if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); else sb.append(Character.toLowerCase(c)); flg = 1; */ <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); } </s> java
T-160	<s> public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { /* if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); else sb.append(Character.toLowerCase(c)); flg = 1; */ <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); } </s> java
H-160	-0.4110015630722046	public static String solve_string(String s ) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray () ) { if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); else sb.append(Character.toLowerCase(c)); flg = 1; */ <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }
D-160	-0.4110015630722046	public static String solve_string(String s ) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray () ) { if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); else sb.append(Character.toLowerCase(c)); flg = 1; */ <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }
P-160	-0.7366 -0.0493 -1.5781 -0.0323 -0.0968 -0.0488 -0.6129 -0.0910 -0.0961 -2.2497 -0.0836 -0.2380 -0.1817 -0.0797 -0.0839 -1.0216 -1.0405 -0.0323 -0.0828 -0.0736 -0.6894 -1.9564 -0.1528 -0.1165 -0.4454 -0.1061 -0.0554 -0.0754 -0.1131 -0.0774 -0.0357 -3.5121 -0.1932 -0.0731 -0.7872 -0.1196 -0.0685 -0.1078 -0.0729 -0.0331 -0.3757 -0.1732 -1.6138 -0.0772 -0.1206 -1.0193 -0.4727 -0.0706 -0.1033 -0.2759 -0.3214 -0.1288 -1.4910 -0.1408 -0.0628 -0.1157 -0.8383 -0.3162 -0.0472 -0.1004 -0.1841 -0.1978 -0.1217 -0.8985 -0.2414 -0.0760 -0.1399 -0.8436 -0.8518 -0.0805 -0.0782 -0.1008 -0.0932 -0.1300 -0.1137 -0.1116 -0.0721 -0.0813 -0.8640 -0.0823 -0.0976 -0.3070 -0.0667 -0.7339 -1.5710 -0.1023 -0.1203 -0.6225 -0.0837 -0.0953 -0.1835 -0.0957 -0.0935 -1.1271 -0.1055 -0.7506 -0.1003 -0.0688 -0.3050 -0.1014 -0.0173 -1.3705 -0.0869 -0.1136 -0.8319 -0.4020 -0.1262 -0.1021 -0.7373 -0.3099 -0.3887 -0.8770 -0.0885 -0.0988 -0.0529 -0.1100 -2.6282 -1.6565 -0.0938 -1.9686
S-124	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); /* if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++; */ <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java
T-124	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); /* if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++; */ <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java
H-124	-0.4171047508716583	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); /* if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0 ) count++; */ <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java.lang.System.out . println () ; return txt.split(" "); }
D-124	-0.4171047508716583	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); /* if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0 ) count++; */ <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java.lang.System.out . println () ; return txt.split(" "); }
P-124	-2.2162 -0.2351 -0.2424 -0.1079 -0.0870 -1.0833 -2.2217 -0.0385 -0.1011 -0.0280 -0.7482 -0.0829 -0.0380 -1.5659 -0.0799 -0.1904 -1.1848 -0.1806 -0.1224 -0.7446 -0.0589 -0.1316 -0.0858 -0.0866 -0.0545 -0.1010 -0.2599 -0.0803 -0.1160 -0.1174 -0.0986 -0.1090 -0.7989 -0.0825 -0.1142 -0.5641 -0.2952 -0.8883 -0.0943 -0.0857 -0.0486 -0.1026 -0.1788 -0.2000 -0.5904 -0.0888 -0.0500 -0.1286 -0.1630 -0.0593 -0.1002 -1.0628 -0.1266 -0.5018 -0.5699 -0.0857 -0.0946 -1.1194 -0.1058 -0.0868 -0.1042 -0.1006 -0.1141 -1.7410 -0.0953 -1.1756 -0.0867 -0.1397 -0.0605 -0.0963 -0.0342 -0.1047 -0.7243 -0.3692 -0.5755 -1.1232 -2.8871 -0.1575 -0.4971 -0.0200 -0.1086 -0.0810 -0.0178 -0.3939 -0.3177 -0.4172 -0.2030 -1.0433 -0.1412 -0.1877 -0.0657 -0.0464 -0.0996 -0.3767 -0.2917 -0.0851 -2.8499 -0.7106 -0.1824 -0.6341 -0.4444 -0.1261 -0.1273 -0.1266 -0.1437 -0.8157 -2.0071 -0.0684 -0.1022 -0.0994 -0.0396 -0.1039 -1.5888 -0.5207 -0.2990 -0.3180 -0.0417 -0.0811 -0.0653 -0.5131 -0.0884 -0.1060 -2.9174 -0.0914 -0.2349 -0.2938 -0.2931 -0.0653 -0.1322 -1.1138 -0.0891 -0.0465 -0.6919 -0.0266 -0.8819 -0.3152 -0.6641 -1.6553 -0.1182 -0.7320 -1.7564 -0.2318 -0.3049 -0.1347
S-145	<s> public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; /* if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) */ <mask> count += 1; } } return count; } </s> java
T-145	<s> public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; /* if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) */ <mask> count += 1; } } return count; } </s> java
H-145	-0.38160955905914307	public static int special_filter(int [] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; /* if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) */ <mask> count += 1; } } return count ; }
D-145	-0.38160955905914307	public static int special_filter(int [] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; /* if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) */ <mask> count += 1; } } return count ; }
P-145	-0.7388 -0.0382 -0.1109 -0.0189 -0.0958 -0.0493 -0.7150 -0.7192 -1.9686 -0.0351 -2.0261 -0.0901 -0.1828 -0.0808 -0.0847 -1.1696 -2.0356 -0.5079 -0.0526 -0.1645 -0.0823 -0.1027 -0.1129 -0.0831 -0.0784 -1.2383 -0.1598 -0.0496 -1.3325 -0.0229 -0.0943 -0.1672 -0.1354 -0.1030 -0.0873 -0.0873 -0.0296 -1.0405 -0.1392 -0.1275 -0.1353 -0.0751 -0.0671 -0.0394 -1.5717 -0.0887 -0.1323 -0.1268 -0.5836 -0.2451 -0.9767 -0.0854 -1.6435 -0.0729 -0.1138 -0.0684 -0.0958 -0.0589 -0.0878 -0.1162 -0.0768 -3.0607 -1.4087 -0.1276 -0.1325 -0.0574 -0.1163 -0.1299 -0.1260 -1.1454 -0.7070 -0.1866 -0.1093 -0.0585 -0.1039 -0.0775 -0.1131 -0.7001 -0.2541 -0.4466 -0.2242 -0.1231 -0.1136 -0.1180 -0.1135 -0.9418 -0.5498 -0.1874 -0.1155 -0.0506 -0.1139 -0.0783 -0.1103 -1.0351 -0.3571 -0.1581 -0.1137 -0.0423 -0.1210 -0.0635 -0.1203 -0.1357 -0.9090 -1.4028 -1.0289 -0.1736 -0.1277 -0.1714 -0.1178 -0.0801 -1.7499 -0.1565 -0.0847 -0.0648 -0.1251 -1.2591 -0.0974 -0.8132
S-103	<s> public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; /* if((curr_digit % 2) != 0) { all_odd = true; */ <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; } </s> java
T-103	<s> public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; /* if((curr_digit % 2) != 0) { all_odd = true; */ <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; } </s> java
H-103	-0.3462170660495758	public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; /* if((curr_digit % 2) != 0) { all_odd = true; */ <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } return res; }
D-103	-0.3462170660495758	public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; /* if((curr_digit % 2) != 0) { all_odd = true; */ <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } return res; }
P-103	-1.5370 -0.0622 -1.7852 -0.3608 -0.0516 -0.1433 -0.0313 -0.0889 -0.0720 -0.5437 -0.0552 -0.2649 -0.0439 -0.1691 -0.1220 -1.3930 -0.0782 -1.6253 -0.3679 -0.0503 -0.1661 -0.1286 -0.0991 -0.0697 -1.4397 -0.2658 -0.0492 -1.3054 -0.1676 -0.4677 -0.6722 -0.0836 -0.0572 -0.0959 -1.0622 -0.0883 -0.1447 -0.0594 -0.0934 -0.0754 -1.0630 -0.0881 -0.0658 -0.1256 -0.0210 -0.0938 -0.0893 -0.5577 -0.0921 -0.4913 -0.4478 -0.1329 -0.7237 -0.1007 -0.2093 -0.0396 -0.1005 -0.0266 -0.1012 -0.0484 -0.0661 -0.1530 -0.8717 -0.1308 -0.4430 -0.1510 -0.1027 -0.0301 -0.0833 -0.6378 -0.0742 -0.4955 -0.1115 -0.0915 -0.1130 -0.0303 -0.0719 -0.1595 -0.1550 -1.1086 -0.1016 -0.1340 -0.1218 -0.0775 -0.0693 -0.1104 -0.0633 -0.0225 -0.1349 -0.1369 -0.1184 -0.9794 -0.2648 -0.1068 -0.0308 -0.8808 -0.1251 -0.1190 -0.1240 -0.3786 -0.7051 -0.3958 -1.2863 -0.1235 -0.2390 -1.4767 -0.1854 -1.2533 -0.0971 -3.0855
S-152	<s> public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { /* if (Character.toUpperCase(c) == c) SM += 1; if (Character.toLowerCase(c) == c) CAP += 1; } val = CAP - SM; strong = s; */ <mask> } return class_name + "." + strong; } </s> java
T-152	<s> public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { /* if (Character.toUpperCase(c) == c) SM += 1; if (Character.toLowerCase(c) == c) CAP += 1; } val = CAP - SM; strong = s; */ <mask> } return class_name + "." + strong; } </s> java
H-152	-0.39205509424209595	public static java.lang.String strongest_extension(String class_name, String [] extensions) { java.lang.String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { if (Character.toUpperCase(c) == c) SM += 1; if (Character.toLowerCase(c) == c) CAP += 1; } val = CAP - SM; strong = s; */ <mask> } return class_name + "." + strong; }
D-152	-0.39205509424209595	public static java.lang.String strongest_extension(String class_name, String [] extensions) { java.lang.String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { if (Character.toUpperCase(c) == c) SM += 1; if (Character.toLowerCase(c) == c) CAP += 1; } val = CAP - SM; strong = s; */ <mask> } return class_name + "." + strong; }
P-152	-0.7739 -0.0675 -5.5201 -0.1613 -0.0774 -0.1506 -0.0753 -0.1450 -0.0478 -0.1315 -0.0186 -0.6563 -0.1586 -0.0885 -0.0955 -0.0643 -1.0121 -1.2924 -2.1376 -0.0221 -2.0558 -0.0890 -0.9487 -0.0548 -0.0664 -0.1016 -0.0792 -0.1463 -0.1070 -0.1663 -0.9911 -0.2131 -0.0735 -0.0896 -1.3491 -0.0920 -0.0272 -0.0910 -0.0320 -1.2417 -0.1504 -0.1242 -0.1499 -0.0969 -0.0664 -0.0464 -1.1447 -0.0879 -0.1698 -0.0846 -0.0998 -0.8104 -0.0897 -0.0405 -0.0845 -0.9012 -0.1080 -0.1191 -0.4377 -0.0879 -0.0541 -0.0739 -0.1117 -0.0636 -0.0435 -2.1246 -0.0864 -1.3575 -0.1312 -0.0488 -0.1068 -0.1474 -0.3975 -0.1316 -0.7651 -0.1081 -0.1093 -1.0469 -0.5489 -0.0842 -1.2642 -0.1055 -0.1153 -0.0364 -0.1043 -0.2527 -0.1724 -0.0995 -0.7164 -0.0882 -0.1295 -1.0909 -0.2113 -0.0790 -1.2411 -0.1201 -0.1012 -0.1341 -0.1037 -0.0687 -0.1080 -0.5425 -0.5769 -0.1396 -0.0632 -0.3202 -0.8284 -0.1063 -0.1454 -0.1518 -0.2389 -0.0676 -0.0832 -0.1167 -0.0786 -0.0697 -0.0167 -0.0680 -0.2737 -1.0652 -0.0782 -3.3041
S-86	<s> public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { /* for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ if (lst.get(i).get(i) == x){ result.add(new GET_ROW().new Tuple(i, i)); */ <mask> } } } return result; } </s> java
T-86	<s> public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { /* for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ if (lst.get(i).get(i) == x){ result.add(new GET_ROW().new Tuple(i, i)); */ <mask> } } } return result; } </s> java
H-86	-0.4242531955242157	public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ if (lst.get(i).get(i) == x ) { result.add(new GET_ROW().new Tuple(i, i)); } } } return result; }
D-86	-0.4242531955242157	public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ if (lst.get(i).get(i) == x ) { result.add(new GET_ROW().new Tuple(i, i)); } } } return result; }
P-86	-1.4374 -0.0622 -1.5609 -0.3977 -0.0444 -0.1520 -0.1030 -0.0950 -0.0315 -0.4739 -0.0436 -0.3682 -0.0280 -0.2507 -0.0293 -0.1916 -0.0440 -0.8809 -0.0812 -0.1214 -1.6444 -0.0810 -1.5104 -0.5487 -0.0384 -0.2929 -0.0618 -0.0921 -0.0550 -1.0974 -0.3226 -0.0356 -1.3920 -0.1519 -0.1240 -0.7389 -0.0919 -0.0933 -2.0635 -0.0922 -0.1081 -0.2216 -0.1087 -0.2018 -2.3860 -0.0863 -0.0457 -1.8147 -0.0855 -1.2846 -0.1301 -0.4591 -0.1067 -0.1049 -0.1673 -0.1114 -0.3070 -0.1880 -0.1440 -0.6357 -0.1006 -0.6583 -0.0997 -0.0767 -0.4382 -0.1041 -0.0319 -0.1945 -1.2121 -0.1308 -0.1324 -0.3819 -0.1159 -0.2260 -0.2669 -0.4135 -1.8536 -0.3265 -0.3280 -0.5786 -1.0036 -0.1657 -0.1078 -2.6582 -0.1029 -0.2325 -0.1310 -0.3356 -0.5085 -0.6442 -0.2714 -0.0926 -0.0119 -0.3802 -0.0926 -0.0215 -0.3460 -0.3235 -0.6990 -0.2048 -0.9426 -1.1007 -0.2483 -0.1139 -0.0709 -0.0860 -1.5237 -0.0869 -0.4445
S-32	<s> public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; /* if (poly(xs, begin) * poly(xs, end) < 0) { */ <mask> begin = center; } else { end = center; } } return begin; } </s> java
T-32	<s> public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; /* if (poly(xs, begin) * poly(xs, end) < 0) { */ <mask> begin = center; } else { end = center; } } return begin; } </s> java
H-32	-0.2746800482273102	public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, end) < 0) { */ <mask> begin = center; } else { end = center; } } return begin; }
D-32	-0.2746800482273102	public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, end) < 0) { */ <mask> begin = center; } else { end = center; } } return begin; }
P-32	-0.9499 -0.0404 -0.1240 -0.0565 -0.1053 -0.0525 -0.3831 -0.0752 -0.1692 -0.0346 -0.1047 -0.0874 -1.2390 -0.1229 -0.0528 -0.0985 -0.1935 -0.5428 -0.0875 -0.0861 -0.0937 -0.0862 -0.9284 -0.2469 -0.1278 -0.2333 -0.3546 -0.1048 -0.5160 -0.0344 -0.6519 -0.1069 -0.1019 -0.2076 -0.0933 -0.3023 -0.0982 -0.4173 -0.1107 -0.8914 -0.0989 -0.2317 -0.0091 -0.4307 -0.7093 -0.0985 -0.0105 -0.4246 -0.7226 -0.1602 -0.1046 -0.1186 -0.3160 -0.1304 -0.0397 -0.1364 -0.1904 -0.0301 -0.0611 -0.6643 -0.0968 -0.1060 -0.0737 -0.1116 -0.1195 -0.5956 -0.0902 -0.1071 -0.7727 -0.0429 -0.4193 -1.0086 -0.8452 -0.1356 -0.1301 -0.4906 -0.0982 -0.4156 -0.0366 -0.6698 -0.0561 -0.0751 -0.1890 -0.0938 -0.2506 -0.1215 -0.4853 -0.0793 -0.3695 -0.1125 -2.2416 -0.0988 -0.1051 -0.1450 -0.0498 -0.1741 -0.0985 -0.6834 -0.4011 -0.0523 -0.1036 -0.2408 -0.1544 -0.0818 -0.4101 -0.0844 -0.0937 -0.0784 -0.0683 -1.0242 -0.0908 -1.0843
S-115	<s> @Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { /* if(o1 == o2) return 1; if(o1 < o2) return 0; if(o1 > o2) return -1; } */ <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java
T-115	<s> @Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { /* if(o1 == o2) return 1; if(o1 < o2) return 0; if(o1 > o2) return -1; } */ <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java
H-115	-0.3409757614135742	@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { /* if(o1 == o2) return 1; if(o1 < o2) return 0; if(o1 > o2) return -1; } */ <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java.lang.System.out . println () ; return 0 ; }
D-115	-0.3409757614135742	@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { /* if(o1 == o2) return 1; if(o1 < o2) return 0; if(o1 > o2) return -1; } */ <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java.lang.System.out . println () ; return 0 ; }
P-115	-1.0051 -0.1134 -0.0761 -0.0774 -0.0378 -0.4654 -0.0640 -0.0625 -0.3996 -1.1384 -0.0490 -0.2506 -0.0801 -0.2152 -0.0864 -0.1148 -0.0143 -0.1090 -0.0689 -0.0900 -0.0895 -0.0499 -0.1064 -0.0120 -1.1760 -0.1306 -1.1851 -0.0801 -0.0732 -0.1090 -0.0172 -0.1053 -0.0665 -0.0487 -0.0903 -0.0384 -0.1115 -0.0102 -1.2411 -0.0903 -0.6314 -0.1180 -0.9188 -0.8459 -0.1094 -0.0181 -0.1096 -0.0745 -0.0870 -0.1408 -0.0766 -0.1119 -0.0175 -0.1093 -0.0738 -0.5160 -0.1133 -1.8322 -0.1181 -0.4179 -0.1565 -0.0923 -0.0974 -0.0664 -0.3281 -0.1121 -1.6728 -0.1302 -0.4624 -0.0837 -0.1255 -0.1610 -0.0587 -0.2459 -0.0861 -2.2067 -0.1287 -0.6052 -0.0804 -0.1160 -0.0623 -0.0531 -0.2359 -0.0723 -1.3187 -0.3130 -2.2841 -0.3067 -0.1820 -0.2222 -0.1696 -0.6987 -0.6065 -0.1079 -0.0191 -0.1069 -0.0769 -0.1161 -0.1805 -0.0992 -0.1055 -0.0143 -0.1062 -0.0690 -0.3390 -0.0947 -1.2212 -0.1009 -0.1218 -2.0750 -0.1473 -3.1949 -0.0736 -0.2381 -0.1786 -0.1375 -0.0289 -0.1251 -1.7209 -0.1041 -0.0785 -0.5231 -0.0274 -0.6124 -0.2811 -0.7968 -1.4279 -0.1373 -0.1319 -0.0767
S-57	<s> public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; /* sorted = l; */ <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java
T-57	<s> public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; /* sorted = l; */ <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java
H-57	-0.44316011667251587	public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; /* sorted = l; */ <mask> java.lang.System.out . println ( sorted.length ) ; for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java.lang.System.out . println () ; return true; }
D-57	-0.44316011667251587	public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; /* sorted = l; */ <mask> java.lang.System.out . println ( sorted.length ) ; for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java.lang.System.out . println () ; return true; }
P-57	-1.0450 -0.0402 -0.1063 -0.0323 -0.0100 -0.4726 -0.5729 -2.1862 -0.0660 -1.4031 -0.0867 -0.1883 -2.6363 -0.0612 -0.0907 -0.0755 -0.0836 -0.5953 -0.2032 -0.1006 -0.0740 -2.1088 -0.1241 -2.1527 -0.0327 -0.0953 -0.0813 -0.0875 -0.0565 -0.0783 -0.3831 -0.1186 -0.0975 -0.0835 -2.1351 -1.4650 -0.0454 -0.1296 -0.0826 -0.3865 -0.1694 -0.1108 -0.1519 -0.1616 -2.8694 -0.0728 -0.3283 -0.1121 -1.2817 -0.1000 -0.0500 -0.6561 -0.0109 -1.6703 -0.4491 -0.1112 -0.0300 -0.6101 -0.1978 -1.8000 -0.1496 -0.6589 -0.0907 -0.1074 -1.0836 -0.0930 -0.0892 -0.1283 -0.1048 -0.0557 -0.7267 -0.0913 -0.0563 -1.6924 -0.1824 -0.1011 -0.1219 -1.1350 -0.4202 -0.1884 -0.1038 -0.1134 -0.4315 -0.1055 -0.0972 -0.0712 -0.1759 -0.0883 -0.3681 -0.1996 -1.7239 -0.0917 -0.1273 -0.0370 -0.0966 -1.2614 -0.5502 -0.1075 -0.6273 -0.1181 -0.6629 -0.0483 -1.3789 -0.0957 -1.2348 -0.5642 -0.1035 -0.4671 -0.0255 -0.1010 -0.1145 -0.8327 -0.0502 -0.0352 -0.3703 -0.1839 -0.0445 -0.4801 -0.1258 -3.8428 -0.0973 -0.2472 -0.1568 -0.0922 -0.0558 -0.1039 -0.0733 -0.0935 -0.0579 -0.2236 -0.0818 -1.5134 -0.2380 -0.7503 -0.7584 -1.0652 -0.1053 -0.0902
S-129	<s> public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; /* sequence[1] = -3; for(int i = 2; i < n - 1; i--) { if(i % 2 == 0) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; */ <mask> } return sequence; } </s> java
T-129	<s> public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; /* sequence[1] = -3; for(int i = 2; i < n - 1; i--) { if(i % 2 == 0) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; */ <mask> } return sequence; } </s> java
H-129	-0.3531683683395386	public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { return sequence; } sequence[0] = 1; /* sequence[1] = -3; for(int i = 2; i < n - 1; i--) { if(i % 2 == 0) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; */ <mask> } return sequence; }
D-129	-0.3531683683395386	public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { return sequence; } sequence[0] = 1; /* sequence[1] = -3; for(int i = 2; i < n - 1; i--) { if(i % 2 == 0) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; */ <mask> } return sequence; }
P-129	-0.6139 -0.0430 -0.1317 -2.3340 -0.0241 -0.3349 -0.4509 -0.0755 -1.2285 -0.0865 -0.1714 -2.6817 -0.0651 -0.0976 -0.0765 -0.0816 -0.4571 -0.1842 -0.0816 -0.2377 -1.3348 -0.1007 -0.8234 -0.1682 -0.0994 -0.8634 -0.1023 -2.4259 -0.1403 -0.8295 -0.0972 -0.3582 -0.7905 -0.1003 -1.0999 -1.4152 -0.0978 -0.3949 -0.1035 -0.1631 -0.6083 -0.1350 -0.2094 -0.3905 -0.0960 -0.1014 -0.7525 -0.1078 -0.1176 -0.1635 -0.2277 -0.3818 -0.1163 -0.3605 -0.0982 -0.1098 -0.6132 -0.4213 -0.2031 -0.0436 -0.0941 -0.7545 -0.1858 -0.5088 -0.1562 -0.2214 -0.1191 -0.1480 -0.1559 -0.0862 -0.1948 -0.5218 -0.0946 -0.1239 -0.3039 -0.1191 -0.1732 -0.1058 -0.1548 -0.3362 -0.1164 -0.1647 -1.0758 -0.1391 -0.1240 -0.1769 -0.0956 -0.1443 -0.0646 -0.3902 -0.1226 -0.1280 -0.1264 -0.2769 -0.1637 -0.1973 -0.8042 -0.1520 -0.1160 -0.1741 -0.3072 -0.1238 -0.0728 -0.5644 -0.1091 -0.7238
S-100	<s> public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); /* String s_list = ""; */ <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; } </s> java
T-100	<s> public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); /* String s_list = ""; */ <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; } </s> java
H-100	-0.35550379753112793	public static ArrayList<String> words_strings(String s ) { ArrayList<String> result = new ArrayList<String>(); /* String s_list = ""; */ <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } java.lang.String [] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; }
D-100	-0.35550379753112793	public static ArrayList<String> words_strings(String s ) { ArrayList<String> result = new ArrayList<String>(); /* String s_list = ""; */ <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } java.lang.String [] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; }
P-100	-1.3412 -0.0674 -1.8231 -0.4029 -0.0704 -0.1399 -0.0127 -0.0912 -0.0349 -0.6606 -0.1076 -0.1030 -1.9868 -0.0840 -1.4773 -0.4386 -0.0723 -0.1831 -0.0749 -0.0979 -0.0580 -1.2630 -0.2898 -0.0722 -1.0006 -1.2799 -0.4674 -0.0896 -0.1101 -0.0492 -0.1018 -2.0487 -0.1199 -0.1050 -0.1604 -0.1120 -0.1683 -0.3667 -0.3759 -0.1026 -0.0529 -0.0749 -0.1151 -0.0775 -0.0301 -2.2122 -0.0873 -0.1329 -0.8375 -0.2262 -0.1335 -0.5731 -0.1931 -0.0949 -0.1255 -0.1321 -0.0582 -0.1235 -0.0798 -0.0291 -0.1176 -0.1073 -0.1100 -0.0871 -0.1132 -0.0625 -0.0763 -0.1879 -1.2526 -0.0929 -0.0968 -3.3433 -0.0579 -0.3589 -0.1088 -0.2181 -1.0853 -0.0707 -0.1067 -0.0480 -0.1044 -0.0842 -0.1476 -0.0619 -0.1225 -0.9471 -0.2381 -0.5167 -0.1128 -0.0688 -0.0640 -0.3239 -0.1445 -0.4538 -0.1067 -0.0791 -0.0630 -0.0487 -0.1010 -0.0515 -0.6898 -0.0937 -0.0573 -0.1158 -0.3385 -0.5372 -0.1652 -0.9538 -0.0851 -0.0753 -0.0581 -0.7455 -0.0916 -1.9776
S-105	<s> public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; /* for(int j = 1; j <= i; i++) x -= j; */ <mask> ret.add(x); } } return ret; } </s> java
T-105	<s> public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; /* for(int j = 1; j <= i; i++) x -= j; */ <mask> ret.add(x); } } return ret; } </s> java
H-105	-0.4141244888305664	public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; /* for(int j = 1; j <= i; j++) x -= j; */ <mask> ret.add(x); } } return ret; }
D-105	-0.4141244888305664	public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; /* for(int j = 1; j <= i; j++) x -= j; */ <mask> ret.add(x); } } return ret; }
P-105	-1.2390 -0.0584 -1.8103 -0.3159 -0.0558 -0.1436 -0.0250 -0.3871 -0.4531 -0.0678 -1.4440 -0.0782 -1.6992 -0.3281 -0.0559 -0.1736 -0.0839 -0.0996 -0.0715 -1.2391 -0.1278 -0.1298 -0.5673 -0.4053 -0.0992 -0.0923 -1.6154 -0.1085 -0.0813 -0.1009 -0.6846 -0.0872 -0.7320 -0.0970 -0.2386 -0.8688 -0.4729 -0.1126 -0.4290 -0.1047 -1.2282 -0.0973 -0.1311 -0.1801 -0.1084 -2.0028 -0.1428 -0.3345 -0.2384 -0.1039 -0.1006 -1.6356 -0.1105 -0.0467 -0.1290 -0.5367 -0.0900 -0.5960 -0.1426 -0.0092 -0.1002 -0.7671 -0.0857 -0.1321 -0.2915 -0.7599 -0.3087 -1.3158 -0.0851 -0.0481 -0.1305 -0.1134 -0.2030 -0.1080 -0.9509 -1.8238 -0.1572 -0.2537 -0.2260 -0.0983 -0.1063 -1.1905 -0.0965 -0.0307 -0.1167 -0.4310 -0.8271 -1.0908 -0.1142 -0.0293 -0.0995 -0.4356 -1.6747 -0.2958 -0.1509 -0.1622 -0.1360 -0.1302 -0.2610 -0.7091 -0.3600 -1.3535 -0.1041 -0.0916 -0.1001 -0.1156 -1.2903 -0.0927 -0.6361
S-87	<s> public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ /* array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; */ <mask> } return array; } } </s> java
T-87	<s> public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ /* array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; */ <mask> } return array; } } </s> java
H-87	-0.3908834457397461	public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ( ( array.length - 1 ) % 2 == 1 ) return array; else { for (int i = 0; i < array.length / 2; i += 1){ /* array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; */ <mask> } return array; } }
D-87	-0.3908834457397461	public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ( ( array.length - 1 ) % 2 == 1 ) return array; else { for (int i = 0; i < array.length / 2; i += 1){ /* array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; */ <mask> } return array; } }
P-87	-1.0263 -0.0333 -0.1192 -1.8010 -0.0406 -0.0898 -0.0417 -0.7633 -0.7221 -1.4377 -0.0438 -1.6805 -0.0838 -0.1493 -0.1236 -0.2164 -0.1207 -0.1038 -0.1087 -0.7283 -0.0797 -0.0551 -0.7315 -1.8487 -0.0943 -0.0386 -0.7577 -0.1484 -1.3243 -0.1724 -0.3441 -0.7621 -0.9919 -0.2211 -0.0405 -1.7301 -0.2552 -0.3078 -0.8063 -0.0669 -0.1626 -2.9787 -0.3337 -0.0816 -0.0535 -1.0314 -0.0973 -0.1617 -0.1360 -0.1385 -0.6403 -0.0852 -0.1070 -0.9732 -0.0907 -0.0801 -0.3903 -0.0930 -0.0565 -0.4472 -0.3876 -0.0743 -0.0464 -0.2770 -0.8125 -1.4605 -0.0825 -0.4431 -0.2503 -0.1388 -0.1085 -0.0495 -0.3275 -0.1609 -0.0964 -0.0665 -0.1290 -0.1112 -0.2821 -0.2722 -1.0705 -0.1064 -0.2167 -0.1434 -0.0949 -0.0574 -0.1016 -0.0823 -0.1791 -0.7464 -0.1220 -0.0534 -0.3229 -0.2010 -1.3671 -0.3305 -0.1309 -0.1087 -0.1246 -0.3438 -0.0965 -0.0648 -0.6169 -0.0903 -0.0841 -0.6514
S-68	<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; /* int[] frq = new int[max]; for (int i = 0; i < lst.length; i += 1) frq[i] += 1; for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i; */ <mask> return result; } </s> java
T-68	<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; /* int[] frq = new int[max]; for (int i = 0; i < lst.length; i += 1) frq[i] += 1; for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i; */ <mask> return result; } </s> java
H-68	-0.3784691095352173	<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; /* int[] frq = new int[max]; for (int i = 0; i < lst.length; i += 1) frq[i] += 1; for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i ) result = i; */ <mask> return result; }
D-68	-0.3784691095352173	<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; /* int[] frq = new int[max]; for (int i = 0; i < lst.length; i += 1) frq[i] += 1; for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i ) result = i; */ <mask> return result; }
P-68	-1.9006 -0.3497 -0.2429 -0.1246 -0.0650 -0.1131 -0.0382 -0.7666 -0.5542 -2.2604 -0.0338 -1.4914 -0.0896 -0.1118 -0.0663 -0.0962 -0.7624 -0.2246 -0.1265 -0.2169 -0.0825 -0.0799 -0.0388 -1.3419 -0.1064 -0.1839 -0.1243 -0.5209 -0.1854 -0.0600 -1.3080 -0.0538 -0.1512 -0.1103 -0.9486 -0.0873 -0.1310 -0.0741 -0.0963 -0.5320 -0.8839 -0.1091 -1.8542 -0.0497 -0.0615 -0.1173 -0.0685 -0.0743 -0.4159 -0.2259 -1.5434 -0.1549 -0.1357 -0.4219 -0.1033 -0.1029 -1.0822 -0.1019 -0.1082 -0.3184 -0.0883 -0.0657 -0.6609 -0.0952 -0.0613 -1.9357 -0.0622 -0.0629 -0.6609 -0.2775 -0.1856 -0.0659 -1.7943 -0.1246 -0.1178 -0.2741 -0.0904 -0.1074 -0.9673 -0.0991 -0.0871 -0.0851 -0.0733 -0.0981 -0.0743 -0.3112 -0.0853 -0.0600 -1.9489 -0.0840 -0.1233 -0.1768 -0.0699 -0.6958 -0.1989 -0.3300 -0.1115 -0.1453 -1.6489 -0.1341 -0.1863 -0.0664 -0.3997 -0.7904 -0.2530 -0.1534 -0.1701 -0.1457 -0.1098 -1.2668 -0.1151 -0.6090
S-17	<s> public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 1); List<Integer> result = new ArrayList<Integer>(); /* for (String note : music_string.split(" ")){ */ <mask> result.add(note_map.get(note)); } return result; } </s> java
T-17	<s> public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 1); List<Integer> result = new ArrayList<Integer>(); /* for (String note : music_string.split(" ")){ */ <mask> result.add(note_map.get(note)); } return result; } </s> java
H-17	-0.42337432503700256	public static List<Integer> parse_music(String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 2); List<Integer> result = new ArrayList<Integer>(); /* for (String note : music_string.split(" ")){ */ <mask> result.add(note_map.get(note)); } return result ; }
D-17	-0.42337432503700256	public static List<Integer> parse_music(String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 2); List<Integer> result = new ArrayList<Integer>(); /* for (String note : music_string.split(" ")){ */ <mask> result.add(note_map.get(note)); } return result ; }
P-17	-1.4038 -0.0491 -0.3534 -0.3034 -0.0590 -0.1494 -0.0279 -0.1004 -0.0145 -0.8925 -0.1051 -0.0393 -0.0824 -0.0475 -1.7309 -0.0898 -1.7872 -0.3086 -0.0636 -0.2414 -1.1877 -0.1256 -0.0752 -0.1052 -0.0603 -0.0933 -0.0576 -1.2645 -0.2363 -0.0617 -0.2833 -0.8899 -0.9448 -0.4305 -0.1046 -0.0702 -0.1114 -0.2509 -0.0932 -0.0555 -2.3237 -0.0916 -1.9411 -0.2520 -0.1115 -0.0786 -0.1061 -0.2534 -0.0839 -0.0596 -0.0324 -1.9354 -0.8337 -0.1717 -0.1072 -0.0791 -0.1081 -0.2535 -0.8182 -0.0583 -2.4043 -1.9315 -0.4166 -0.3471 -0.0548 -0.1767 -0.0778 -0.1002 -0.0553 -1.8162 -0.3100 -0.0713 -1.2624 -1.7020 -0.2049 -0.1447 -0.0914 -0.0793 -0.0628 -0.0411 -0.1020 -0.0499 -0.1272 -0.6431 -0.0585 -0.0652 -0.6497 -1.0192 -0.3687 -0.1053 -0.1641 -0.0888 -0.1247 -0.3514 -0.6978 -0.1052 -0.0935 -0.0559 -0.1240 -0.2817 -0.5857 -0.1529 -2.4392 -0.1355 -0.2374 -0.0802 -1.4334 -0.1132 -0.2939
S-127	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; /* else if(arr[i] > 0) prod *= 1; */ <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; } </s> java
T-127	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; /* else if(arr[i] > 0) prod *= 1; */ <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; } </s> java
H-127	-0.3987015187740326	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; /* else if(arr[i] > 0) prod *= 1; */ <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }
D-127	-0.3987015187740326	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; /* else if(arr[i] > 0) prod *= 1; */ <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }
P-127	-2.2472 -0.2466 -0.2238 -0.1110 -0.0561 -0.1329 -0.0663 -0.0837 -0.0240 -0.0705 -0.6121 -0.3837 -1.7020 -0.0408 -1.7927 -0.0822 -0.5423 -1.0785 -0.7048 -0.1336 -0.1087 -0.1131 -1.0027 -0.0737 -0.0458 -0.9017 -0.1423 -0.0957 -0.1043 -1.4362 -0.2053 -0.5114 -0.2882 -0.1020 -0.0967 -0.9864 -0.0957 -0.0788 -0.1250 -0.0901 -0.0836 -0.5512 -0.1091 -1.0410 -0.0955 -0.1608 -0.8260 -0.4044 -0.7664 -0.4315 -0.2482 -0.0961 -0.7197 -0.1808 -0.2475 -0.9616 -1.1758 -0.1367 -0.0915 -0.4651 -0.3340 -0.4205 -0.2340 -0.1609 -0.1042 -0.4791 -0.1029 -0.0083 -0.3807 -0.2609 -0.1338 -0.0862 -0.1043 -0.1138 -0.1645 -0.0786 -0.1059 -1.1170 -0.1172 -0.6379 -0.3513 -0.1047 -0.1003 -1.0105 -0.1019 -0.0631 -0.0909 -0.0942 -0.0827 -0.4093 -0.1017 -1.0863 -0.0990 -0.2167 -0.0720 -2.6890 -0.1012 -0.0707 -1.0409 -0.7406 -0.7195 -0.4540 -0.5325 -0.1009 -0.1851 -0.1796 -0.0280 -0.1275 -1.5197 -0.0957 -0.8103
S-143	<s> public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; /* if (numerator / denom == (int) (numerator / denom)) */ <mask> return true; return false; } </s> java
T-143	<s> public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; /* if (numerator / denom == (int) (numerator / denom)) */ <mask> return true; return false; } </s> java
H-143	-0.4253825843334198	public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; if (numerator / denom == (int) (numerator / denom)) */ <mask> return true; return false; }
D-143	-0.4253825843334198	public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; if (numerator / denom == (int) (numerator / denom)) */ <mask> return true; return false; }
P-143	-1.0876 -0.0365 -0.1118 -0.0281 -0.4006 -0.1017 -0.1690 -0.9407 -1.5080 -0.1002 -1.6563 -0.0834 -0.1505 -0.1118 -0.1080 -1.3080 -0.0946 -1.8447 -0.9873 -0.3946 -0.1001 -0.4215 -0.5272 -0.4016 -0.2323 -0.0758 -0.0752 -0.1017 -1.0644 -0.0951 -1.6570 -0.8406 -0.2686 -0.0980 -0.4135 -0.4739 -0.3545 -0.2542 -0.1167 -0.0750 -0.1060 -1.0218 -0.0941 -1.5319 -0.7801 -0.4182 -0.0996 -0.3549 -0.4065 -0.3580 -0.2456 -0.1056 -0.0635 -0.0982 -0.8993 -0.0965 -1.5120 -0.7590 -0.2134 -0.1026 -0.3385 -0.4451 -0.3992 -0.1645 -0.1514 -0.1000 -0.0991 -0.1781 -0.0347 -0.1098 -1.2898 -0.1188 -0.0596 -0.1030 -0.0812 -0.0531 -0.0484 -1.2347 -2.2684 -0.1552 -0.3899 -0.0161 -0.3046 -0.0631 -0.2427 -0.1216 -0.1856 -0.4078 -0.2016 -0.0831 -0.0270 -0.0627 -0.0434 -0.5685 -2.5425 -0.5181 -0.1869 -0.1431 -0.1631 -0.1106 -0.5366 -0.2410 -0.0655 -0.8346 -0.1251 -1.3357
S-46	<s> public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); /* } */ <mask> return result.get(result.size() - 1); } </s> java
T-46	<s> public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); /* } */ <mask> return result.get(result.size() - 1); } </s> java
H-46	-0.3703003227710724	public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ) ; } return result.get(result.size() - 1); }
D-46	-0.3703003227710724	public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ) ; } return result.get(result.size() - 1); }
P-46	-1.2970 -0.0400 -0.1405 -0.0233 -0.0425 -0.3926 -0.7399 -0.0781 -1.5949 -0.0830 -2.0775 -0.5035 -0.0529 -0.1972 -0.0845 -0.0946 -0.0749 -1.4697 -0.3248 -0.0502 -1.1989 -0.1668 -0.1070 -0.1627 -0.3247 -0.1149 -0.0954 -0.1764 -0.4729 -0.0932 -0.0946 -0.1815 -0.6891 -0.0820 -0.1049 -0.1646 -0.3524 -0.2461 -0.1176 -0.2903 -0.1413 -0.4543 -0.0825 -0.0937 -0.1039 -0.2146 -0.3110 -0.2682 -1.6270 -0.2703 -0.1320 -0.7236 -0.0909 -0.0959 -0.6019 -0.1104 -0.1349 -0.2261 -0.2378 -0.6213 -0.0929 -0.0472 -2.1585 -0.0935 -0.1727 -0.1081 -0.2243 -0.4764 -0.1429 -0.0938 -0.1594 -0.4818 -0.2178 -0.2210 -0.0992 -0.1362 -0.1679 -0.2670 -0.1041 -0.0980 -0.1308 -0.1524 -0.2714 -0.0907 -0.0998 -0.1657 -0.2185 -2.4244 -0.2545 -1.3720 -0.8752 -0.1427 -0.1044 -0.3890 -0.3795 -1.1740 -0.0972 -0.1933 -1.2024 -0.1981 -0.5811 -0.0980 -0.8246
S-27	<s> public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { /* char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); */ <mask> } } return new String(char_list); } </s> java
T-27	<s> public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { /* char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); */ <mask> } } return new String(char_list); } </s> java
H-27	-0.4448951780796051	public static String flip_case(String string ) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); } } return new String(char_list); }
D-27	-0.4448951780796051	public static String flip_case(String string ) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); } } return new String(char_list); }
P-27	-0.7872 -0.0567 -0.7802 -0.0156 -0.1032 -0.0398 -0.5097 -0.0785 -0.0971 -2.3046 -0.0906 -0.1189 -2.5992 -0.0683 -0.1056 -0.0540 -0.0867 -0.0818 -0.1227 -0.0782 -0.0517 -2.6243 -0.1876 -0.1228 -0.9594 -0.0881 -0.0913 -1.5431 -0.1068 -0.1109 -0.2339 -0.1236 -0.0607 -0.0868 -0.0806 -0.9373 -0.0887 -0.0551 -0.2278 -1.6923 -0.0883 -0.0640 -0.1103 -0.0892 -0.1193 -0.0555 -0.7816 -0.7290 -2.4635 -0.1612 -0.1337 -0.0559 -0.1113 -0.0872 -0.0310 -0.6732 -0.2716 -2.3768 -0.0982 -1.1173 -0.1180 -0.0569 -1.3645 -0.2906 -0.4049 -0.1145 -0.3562 -0.1049 -0.5087 -0.7538 -0.1787 -2.1952 -0.1724 -0.1258 -0.1678 -0.0814 -0.1096 -0.0609 -0.9187 -0.1826 -0.2602 -0.0959 -0.2326 -0.0968 -0.2173 -0.5743 -0.1342 -1.4255 -0.3154 -0.3644 -0.1084 -0.0788 -0.2101 -1.2260 -0.9253 -0.1000 -0.0560 -2.0498 -0.0960 -0.3872
S-64	<s> public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { /* return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1); */ <mask> } } </s> java
T-64	<s> public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { /* return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1); */ <mask> } } </s> java
H-64	-0.46888187527656555	public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length () ) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb. toString () ; } else { /* return s. substring(s.length() - shift + 1) + s. substring(0, s.length() - shift - 1); */ <mask> } }
D-64	-0.46888187527656555	public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length () ) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb. toString () ; } else { /* return s. substring(s.length() - shift + 1) + s. substring(0, s.length() - shift - 1); */ <mask> } }
P-64	-0.5246 -0.0501 -1.5579 -0.0175 -0.1043 -0.0184 -0.5437 -0.8786 -0.1312 -0.6988 -0.0822 -0.0240 -1.5079 -0.0819 -1.8143 -0.1042 -0.0853 -0.1058 -0.0539 -2.6664 -0.1215 -0.1209 -0.3109 -0.2105 -0.1519 -0.0981 -0.0753 -3.7925 -0.2472 -0.0809 -1.0308 -0.0256 -0.1009 -0.0611 -0.6809 -2.0441 -0.1151 -0.1153 -0.5069 -0.0811 -0.0977 -0.1793 -0.1008 -0.0790 -1.7033 -0.1369 -0.7532 -0.0964 -0.0590 -0.3252 -0.1249 -0.0275 -1.6351 -0.0506 -0.1073 -0.7777 -0.3869 -0.1503 -0.0992 -0.8511 -0.2804 -0.3953 -0.5861 -0.0650 -0.0493 -0.1088 -2.0650 -2.3352 -0.2731 -0.0983 -0.0872 -0.1013 -2.5698 -0.1136 -0.0850 -0.0963 -0.7288 -0.2071 -0.1463 -0.0993 -0.0749 -0.8825 -0.1444 -0.0402 -0.7940 -1.2932 -0.0819 -0.0967 -0.0958 -0.7198 -0.8239 -0.1084 -0.1072 -0.0832 -1.4506 -0.1279 -0.0308 -0.9048 -0.5223 -0.2612 -0.1314 -0.1493 -0.1161 -0.1495 -0.1702 -1.0862
S-39	<s> public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); /* fib.add(fib.get(len - 1) + fib.get(len)); if (is_prime(fib.get(len - 1))) */ <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } } </s> java
T-39	<s> public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); /* fib.add(fib.get(len - 1) + fib.get(len)); if (is_prime(fib.get(len - 1))) */ <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } } </s> java
H-39	-0.4122644364833832	public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (is_prime(fib.get(len - 1))) { fib.add(fib.get(len - 1) + fib.get(len)); } else { fib.add(fib.get(len - 1) + fib.get(len)); } if (is_prime(fib.get(len - 1))) */ <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }
D-39	-0.4122644364833832	public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (is_prime(fib.get(len - 1))) { fib.add(fib.get(len - 1) + fib.get(len)); } else { fib.add(fib.get(len - 1) + fib.get(len)); } if (is_prime(fib.get(len - 1))) */ <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }
P-39	-0.4708 -0.0400 -0.1334 -0.0505 -0.0920 -0.0691 -0.0395 -0.5139 -0.7931 -0.0696 -1.6434 -2.5224 -0.3962 -0.0443 -0.1740 -0.0358 -0.0941 -0.0771 -1.2892 -0.2166 -0.0429 -1.4563 -0.1342 -0.0934 -0.1463 -0.2738 -0.0826 -0.0971 -0.1286 -0.4270 -0.1795 -0.1285 -0.6758 -1.1908 -0.0794 -0.2157 -0.0782 -0.0890 -0.0617 -0.1099 -0.1207 -1.9709 -1.5101 -0.1280 -1.8158 -0.0880 -0.0246 -0.5777 -0.1939 -0.0539 -0.0909 -0.3051 -0.4612 -0.2012 -0.8096 -1.0468 -1.1338 -0.5654 -0.3241 -0.0989 -0.3490 -0.2730 -0.0929 -0.0491 -0.1015 -0.3904 -0.2713 -0.1526 -0.3497 -1.8909 -0.5668 -0.0351 -0.1094 -0.2911 -0.3082 -0.1005 -1.9528 -1.5508 -1.0297 -0.3342 -0.5006 -0.0979 -0.2069 -0.3481 -0.1082 -0.0491 -0.0956 -0.3943 -0.3568 -0.1817 -0.5695 -1.9466 -0.8085 -0.0338 -0.1031 -0.3914 -0.3604 -0.1198 -1.5227 -0.6229 -1.2656 -0.1392 -0.9453 -0.0968 -0.0310 -0.3446 -0.0832 -0.0511 -0.1100 -0.6873 -0.3417 -0.1513 -0.2046 -0.1795 -0.3413 -2.9857 -0.1942 -0.1269 -0.1253 -0.0832 -0.0155 -0.7513 -0.0873 -0.1338 -0.2050 -0.0754 -0.5427 -0.0843 -0.0440 -0.1023 -0.2602 -0.2627 -0.0970 -0.0692 -0.1044 -0.1023 -0.7103 -0.1358 -0.4625 -0.1199 -0.1859 -0.5085
S-74	<s> public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { /* for (int k = j; k < a; j += 1) { */ <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; } </s> java
T-74	<s> public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { /* for (int k = j; k < a; j += 1) { */ <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; } </s> java
H-74	-0.3336121439933777	public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ for (int j = i; j < a; j += 1) { /* for (int k = j; k < a; j += 1) { */ <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }
D-74	-0.3336121439933777	public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ for (int j = i; j < a; j += 1) { /* for (int k = j; k < a; j += 1) { */ <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }
P-74	-1.0292 -0.0437 -0.0958 -0.0734 -0.0902 -0.0369 -0.0962 -0.0390 -0.6286 -0.5410 -0.0742 -1.1621 -0.0906 -0.1843 -0.1316 -0.4327 -0.1052 -0.0990 -1.1684 -0.0862 -0.1019 -0.1260 -0.5473 -0.0845 -0.0522 -0.2149 -0.6910 -2.0853 -0.1264 -0.2875 -0.1157 -0.1030 -0.0994 -0.4257 -0.1190 -0.0784 -0.0762 -0.3422 -0.0866 -0.0554 -1.8197 -0.0919 -2.5468 -0.1241 -0.1346 -0.2525 -0.1876 -0.1100 -0.1369 -0.3831 -0.2454 -0.0666 -0.0729 -0.2312 -0.1899 -0.0579 -1.2722 -0.0673 -0.7068 -0.1405 -0.0970 -0.1178 -0.1478 -1.7479 -0.0821 -0.1123 -0.0383 -0.7140 -0.1473 -1.1033 -0.0895 -0.0636 -0.1320 -0.1313 -0.7744 -0.0563 -0.0963 -0.1373 -0.0894 -0.1613 -0.1087 -1.3234 -0.1048 -0.0692 -0.4340 -0.1695 -0.1438 -0.2353 -0.1007 -0.0474 -0.7814 -0.1079 -0.4960
S-5	<s> public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; /* for (int i = 0; i < numbers.size(); i += 1) { */ <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; } </s> java
T-5	<s> public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; /* for (int i = 0; i < numbers.size(); i += 1) { */ <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; } </s> java
H-5	-0.43184226751327515	public static List<Integer> intersperse(List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; /* for (int i = 0; i < numbers.size(); i += 1) { */ <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result ; }
D-5	-0.43184226751327515	public static List<Integer> intersperse(List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; /* for (int i = 0; i < numbers.size(); i += 1) { */ <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result ; }
P-5	-1.1656 -0.0435 -0.4179 -0.3920 -0.0640 -0.1486 -0.0257 -0.0664 -0.0314 -0.0365 -0.5039 -0.0863 -0.4015 -0.0582 -0.1484 -0.0691 -1.2881 -0.0991 -0.0148 -0.0136 -1.9694 -0.0933 -0.3931 -0.4772 -0.0604 -0.1683 -0.0735 -0.0956 -0.0615 -1.4825 -0.2682 -0.0610 -1.7217 -0.1437 -0.1177 -0.3152 -0.1706 -0.2620 -1.2156 -0.1117 -1.7927 -0.1272 -0.0915 -1.1938 -1.5624 -0.1668 -0.1501 -0.6647 -0.0906 -0.1015 -1.2247 -0.0925 -0.1091 -0.1288 -0.1084 -0.2337 -1.6554 -0.0933 -0.0433 -1.7147 -0.0760 -1.6226 -0.1358 -0.1423 -0.1309 -0.1169 -0.1087 -0.2231 -0.7198 -0.1182 -0.1128 -0.3304 -0.6078 -0.6123 -1.6417 -0.1792 -0.1087 -0.2002 -0.9225 -0.0829 -0.0164 -1.9907 -0.2649 -0.3643 -0.1171 -0.2539 -0.9031 -0.1009 -0.1060 -0.6313 -0.6754 -0.1452 -0.1116 -0.3047 -1.5087 -0.2776 -0.1467 -1.0026 -0.1566 -0.0821 -1.1984 -0.1074 -0.1391
S-95	<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ /* boolean is_prime = false; for (int j = 2; j < i; j += 1){ if (i % j == 0) { is_prime = false; */ <mask> } } if (is_prime) primes.add(i); } return primes; } </s> java
T-95	<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ /* boolean is_prime = false; for (int j = 2; j < i; j += 1){ if (i % j == 0) { is_prime = false; */ <mask> } } if (is_prime) primes.add(i); } return primes; } </s> java
H-95	-0.3690742552280426	public static List<Integer> count_up_to(int n ) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ /* boolean is_prime = false; for (int j = 2; j < i; j += 1){ if (i % j == 0 ) { is_prime = false; */ <mask> } } if (is_prime) primes.add(i); } return primes; }
D-95	-0.3690742552280426	public static List<Integer> count_up_to(int n ) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ /* boolean is_prime = false; for (int j = 2; j < i; j += 1){ if (i % j == 0 ) { is_prime = false; */ <mask> } } if (is_prime) primes.add(i); } return primes; }
P-95	-1.4406 -0.0474 -0.3937 -0.3657 -0.0570 -0.1413 -0.0720 -0.0995 -0.0630 -0.0888 -0.0440 -0.6906 -0.6509 -0.0765 -2.0186 -0.0824 -0.4842 -0.4744 -0.0525 -0.1635 -0.0581 -0.0947 -0.0706 -1.9948 -0.3032 -0.0541 -2.1626 -0.1293 -0.1269 -0.5645 -0.0944 -0.0905 -1.0200 -0.0998 -0.1337 -0.1128 -0.7158 -0.0833 -0.0665 -0.1958 -1.1063 -3.6219 -0.0624 -0.0694 -0.1161 -0.0443 -0.1621 -0.1007 -0.3468 -0.2032 -0.1268 -0.3644 -0.1119 -0.0987 -0.7276 -0.1128 -0.0817 -0.1290 -0.2302 -0.0837 -0.0552 -0.1632 -0.7716 -0.1088 -0.1317 -1.3251 -0.1730 -0.0911 -0.1526 -1.2005 -0.5788 -0.0916 -0.1113 -0.1078 -0.0365 -0.0975 -0.0489 -0.2107 -1.6300 -0.1208 -0.0951 -0.1249 -0.1496 -0.0699 -0.1296 -0.1320 -0.2176 -0.1025 -0.0345 -0.9389 -0.1294 -0.1231 -0.3648 -0.7317 -0.4154 -1.0657 -0.1347 -0.1857 -0.0581 -1.0366 -0.0885 -0.5322
S-70	<s> /* public static double triangle_area_2(double a, double b, double c) { */ <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); } </s> java
T-70	<s> /* public static double triangle_area_2(double a, double b, double c) { */ <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); } </s> java
H-70	-0.3721679449081421	public static double triangle_area_2(double a, double b, double c) { */ <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal. valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }
D-70	-0.3721679449081421	public static double triangle_area_2(double a, double b, double c) { */ <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal. valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }
P-70	-0.9941 -0.0445 -0.1140 -0.0396 -0.0891 -0.0353 -0.0241 -0.2208 -0.8138 -0.1012 -0.6667 -0.1129 -0.0700 -0.5085 -0.1186 -0.0882 -1.5820 -0.0809 -1.8987 -0.1356 -0.1792 -0.1536 -0.1775 -0.1242 -0.2545 -0.1918 -0.1513 -0.0807 -0.1279 -0.1712 -0.1791 -0.1640 -0.1995 -0.0639 -0.0812 -0.1661 -0.1685 -0.1192 -0.1374 -0.0428 -0.1143 -0.7676 -0.0603 -0.5489 -0.1698 -0.1059 -0.0990 -0.1275 -0.0956 -0.0667 -0.1445 -0.3281 -0.1426 -0.7759 -0.0529 -0.3112 -1.4424 -0.2053 -0.0807 -0.0928 -2.2772 -0.1010 -0.0306 -0.4270 -0.1285 -0.9309 -0.0300 -1.7745 -1.8329 -0.0502 -0.0912 -0.9269 -0.0995 -1.3616 -0.8110 -0.6977 -1.6660 -0.3790 -0.1281 -0.0489 -0.0999 -0.1511 -0.0301 -0.2056 -0.0481 -0.0201 -0.0913 -0.0435 -0.0250 -0.0871 -0.0443 -1.7128 -0.5377 -0.0770 -0.1039 -0.0511 -0.0356 -2.4172 -0.1302 -1.1082
S-67	<s> public static int[] pluck(int[] arr) { /* int min_even = 0; int index = 0; */ <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java
T-67	<s> public static int[] pluck(int[] arr) { /* int min_even = 0; int index = 0; */ <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java
H-67	-0.38980546593666077	<s> public static int[] pluck(int[] arr) { /* int min_even = 0; int index = 0; */ <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java.lang.System.out . println () ; return arr; }
D-67	-0.38980546593666077	<s> public static int[] pluck(int[] arr) { /* int min_even = 0; int index = 0; */ <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java.lang.System.out . println () ; return arr; }
P-67	-2.5311 -0.6586 -0.3558 -0.1351 -0.0555 -0.1373 -2.0106 -0.0281 -0.0099 -0.6938 -0.4930 -1.6543 -0.0426 -1.7208 -0.0833 -1.7050 -0.0972 -0.1142 -0.1194 -0.0610 -0.1033 -0.6562 -0.1064 -0.0553 -0.1004 -0.5977 -0.2877 -0.1518 -0.0920 -0.1612 -0.1392 -0.1290 -0.4260 -0.0763 -0.0938 -0.9784 -0.0815 -0.1052 -0.1566 -0.0778 -0.0700 -0.9077 -0.0819 -0.0535 -1.8517 -0.0834 -0.1143 -0.1254 -1.2292 -0.4993 -0.3279 -0.1827 -0.4659 -0.0505 -0.1057 -0.1083 -0.4088 -0.1088 -0.3429 -0.1956 -0.1603 -0.0848 -0.1083 -0.0977 -0.0591 -1.4905 -0.0889 -0.1927 -0.1112 -0.0825 -0.1895 -0.0697 -0.5110 -0.2653 -2.1941 -0.0594 -0.1407 -0.0943 -1.2730 -0.1652 -0.1048 -0.3177 -0.1329 -0.5743 -0.1538 -0.3911 -0.1008 -0.0987 -0.0924 -0.2928 -0.1515 -0.1837 -0.0875 -0.0813 -1.4806 -0.1033 -0.1280 -0.1178 -0.0630 -0.4230 -0.0708 -0.1509 -0.1079 -3.5156 -0.0999 -0.2415 -0.1812 -0.1470 -0.0466 -0.1325 -1.1714 -0.0862 -0.0570 -0.3910 -0.0205 -0.4243 -0.2542 -0.7487 -0.5239 -1.9262 -0.1004 -0.0457
S-40	<s> public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { /* for (int j = i; j < numbers.length; j += 1) { for (int k = j; k < numbers.length; k += 1) { */ <mask> if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; } </s> java
T-40	<s> public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { /* for (int j = i; j < numbers.length; j += 1) { for (int k = j; k < numbers.length; k += 1) { */ <mask> if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; } </s> java
H-40	-0.3576275408267975	<s> public static boolean triples_sum_to_zero(int [] numbers ) { for (int i = 0; i < numbers.length; i += 1) { for (int j = i; j < numbers.length; j += 1) { for (int k = j; k < numbers.length; k += 1) { if (numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
D-40	-0.3576275408267975	<s> public static boolean triples_sum_to_zero(int [] numbers ) { for (int i = 0; i < numbers.length; i += 1) { for (int j = i; j < numbers.length; j += 1) { for (int k = j; k < numbers.length; k += 1) { if (numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
P-40	-1.7267 -0.3140 -0.2515 -0.0972 -0.0604 -0.0971 -0.0286 -0.0101 -0.0855 -0.0454 -0.0847 -0.0473 -0.0919 -0.0727 -0.5272 -0.7304 -2.5468 -0.0478 -1.8529 -0.0885 -0.2401 -0.1262 -0.3784 -0.1095 -0.0930 -1.3390 -0.0809 -0.0755 -0.0996 -0.0809 -0.0559 -0.8010 -0.0711 -0.0647 -1.6514 -0.0831 -0.7366 -0.1178 -0.2708 -0.1190 -0.1010 -0.1012 -0.5980 -0.1175 -0.0729 -0.0835 -0.0936 -0.0653 -0.4661 -0.0961 -0.0501 -1.7531 -0.0848 -0.1218 -0.1212 -0.3109 -0.1245 -0.1118 -0.1268 -0.6498 -0.1136 -0.0574 -0.0869 -0.0983 -0.0668 -0.3952 -0.1221 -0.0587 -2.0204 -0.0846 -1.2152 -0.1236 -0.4584 -1.2110 -0.8699 -0.2981 -0.2045 -0.0863 -0.4914 -0.2725 -0.2899 -0.2801 -0.0646 -0.5044 -0.1735 -0.3197 -0.1928 -1.6433 -0.2347 -0.1387 -0.0812 -0.4768 -0.1327 -0.1365 -0.2166 -0.1039 -0.0297 -0.7814 -0.1070 -0.8692
S-26	<s> public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ /* count.put(n, count.get(n) + 1); */ <mask> } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; } </s> java
T-26	<s> public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ /* count.put(n, count.get(n) + 1); */ <mask> } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; } </s> java
H-26	-0.471774160861969	public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, count.get(n) + 1); } for (Integer n : numbers){ if (count.get(n) == 1 ) result.add(n); } return result ; }
D-26	-0.471774160861969	public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, count.get(n) + 1); } for (Integer n : numbers){ if (count.get(n) == 1 ) result.add(n); } return result ; }
P-26	-1.5229 -0.0451 -0.3709 -0.3153 -0.0615 -0.1415 -0.0349 -0.1119 -0.0146 -0.5654 -0.0764 -0.3035 -0.0502 -0.1532 -0.0534 -1.9970 -0.0771 -0.5218 -0.3279 -0.0534 -0.1762 -0.1065 -0.0897 -0.0721 -1.5373 -0.2055 -0.0524 -1.5235 -1.6337 -0.2158 -0.0449 -0.2682 -0.7946 -0.1311 -0.1265 -0.0994 -0.0514 -1.3083 -0.2320 -0.0421 -0.3012 -0.6568 -0.9946 -0.1864 -0.1229 -0.0772 -0.0842 -0.0625 -0.0568 -1.2800 -3.1675 -0.1393 -0.5613 -0.5128 -0.2928 -1.2662 -0.1824 -0.1234 -0.2562 -0.3054 -0.2180 -1.3382 -0.3249 -0.7042 -1.2719 -0.5795 -0.1220 -0.0560 -0.0878 -0.0675 -0.0604 -1.2836 -0.1767 -0.1445 -0.8924 -0.1648 -0.3393 -0.4295 -0.2982 -1.5923 -0.1259 -2.1014 -0.5533 -0.3532 -0.1358 -0.3874 -0.8538 -0.3922 -1.4626 -0.1462 -0.3374 -0.1060 -1.2644 -0.0896 -0.2190
S-108	<s> public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); /* int min_value = sorted_arr.get(sorted_arr.size() - 1); */ <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; } </s> java
T-108	<s> public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); /* int min_value = sorted_arr.get(sorted_arr.size() - 1); */ <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; } </s> java
H-108	-0.3410969376564026	public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); /* int min_value = sorted_arr.get(sorted_arr.size() - 1); */ <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; }
D-108	-0.3410969376564026	public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); /* int min_value = sorted_arr.get(sorted_arr.size() - 1); */ <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; }
P-108	-1.0031 -0.0392 -0.1040 -0.0384 -0.0848 -0.0629 -0.0979 -0.0075 -0.4990 -0.0281 -0.3008 -0.0468 -0.1575 -0.0568 -1.8855 -0.0840 -0.1830 -1.0418 -0.9826 -0.1293 -0.2300 -1.0058 -0.0940 -1.0746 -0.0839 -0.0840 -0.6580 -1.2983 -0.2800 -0.0515 -0.1491 -0.1324 -0.0917 -0.0459 -0.0921 -0.0613 -0.8804 -0.0610 -0.2769 -1.4869 -1.4382 -0.0951 -0.0500 -0.5169 -0.5674 -0.0884 -0.0750 -1.2385 -2.1938 -0.0962 -0.0801 -0.1120 -0.0601 -0.1339 -0.2775 -0.1175 -0.0740 -0.1106 -0.2561 -0.2027 -0.2756 -0.1083 -0.0774 -0.1033 -0.1781 -0.8415 -0.1212 -0.3702 -0.2857 -0.1621 -0.1145 -0.1023 -0.1545 -0.0783 -0.1040 -0.0447 -0.0948 -1.3112 -0.1535 -0.3510 -0.4071 -0.1024 -0.0958 -1.3429 -0.0984 -0.0821 -0.0885 -0.1040 -0.2512 -1.3029 -0.1114 -0.7817 -0.1034 -0.1224 -0.6266 -0.4920 -0.1043 -0.3105 -0.2123 -0.4205 -0.8081 -0.1453 -0.1476 -0.0932 -0.0726 -1.5340 -0.2703 -0.1040 -0.0577 -0.1355 -0.0962 -0.7012 -0.0766 -1.4689 -0.2353 -0.0451 -0.1652 -0.0456 -0.0951 -0.0867 -0.1027 -0.0523 -0.0918 -0.0616 -0.7913 -0.2035 -0.0982 -0.3842 -0.3176 -0.1052 -0.1016 -0.4421 -0.1268 -0.0638 -0.5514 -0.0860 -0.0923 -0.0836 -0.1080 -0.2260 -1.5049 -0.1130 -1.0935 -0.1009 -0.1688 -0.1228 -0.0994 -0.1055 -0.0703 -0.1073 -0.3044 -0.5754 -0.4119 -0.1062 -0.2901 -0.3258 -0.4494 -0.5231 -0.0846 -0.1546 -0.3654 -0.3172 -0.1098 -0.1197 -1.4168 -0.1034 -0.0721 -0.8519 -0.0972 -0.2315 -1.9148 -0.1144 -1.2491 -0.1010 -0.4633 -0.1091 -0.1162 -0.1079 -0.0618 -0.1078 -0.3329 -0.5327 -0.3594 -0.1072 -0.3416 -0.3239 -0.3413 -0.5707 -0.0838 -0.1355 -0.3160 -0.3583 -0.0949 -0.1265 -1.2897 -0.1016 -0.0719 -0.0666 -0.1086 -0.1744 -1.3922 -0.1108 -0.8968 -0.1095 -0.1287 -0.7402 -0.7565 -0.1154 -0.1010 -0.1097 -0.0641 -0.1192 -0.3202 -0.2858 -0.3222 -1.1000 -0.0968 -0.2796 -0.1076 -0.0645 -0.1182 -0.3197 -0.3592 -0.3168 -1.7048 -0.1436 -0.1238 -0.0694 -0.6524 -0.1096 -0.0745 -0.0711 -0.0613 -0.8504 -0.1158 -2.1863
S-136	<s> public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } /* if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); if(a instanceof Integer) temp_a = (Double) a; if(b instanceof Integer) temp_b = (Double) b; */ <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; } </s> java
T-136	<s> public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } /* if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); if(a instanceof Integer) temp_a = (Double) a; if(b instanceof Integer) temp_b = (Double) b; */ <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; } </s> java
H-136	-0.303561270236969	public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string. replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } /* if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); if(a instanceof Integer) temp_a = (Double) a; if(b instanceof Integer) temp_b = (Double) b; */ <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }
D-136	-0.303561270236969	public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string. replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } /* if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); if(a instanceof Integer) temp_a = (Double) a; if(b instanceof Integer) temp_b = (Double) b; */ <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }
P-136	-0.8197 -0.0371 -1.0578 -0.0239 -0.0887 -0.0661 -0.3942 -0.0620 -0.0731 -0.6646 -0.8925 -0.0684 -1.2982 -0.0866 -0.1810 -0.0710 -0.0974 -0.0595 -0.0941 -1.3623 -0.1268 -0.1054 -0.0671 -0.0916 -0.9916 -0.1223 -0.5218 -0.1063 -0.0481 -0.5890 -0.6293 -0.0928 -1.0158 -0.0980 -0.1029 -0.0621 -0.1005 -0.0578 -0.0816 -0.1354 -0.1286 -1.9371 -1.5978 -0.1898 -0.1080 -0.0668 -0.1259 -0.0634 -0.0925 -0.1309 -0.0970 -0.0585 -0.0993 -0.0557 -0.1334 -0.9937 -0.1527 -0.0599 -0.4988 -0.1972 -0.1192 -0.0934 -0.0826 -0.1276 -0.2318 -0.1014 -0.8439 -0.4759 -0.6341 -0.0818 -0.0554 -0.0820 -0.0524 -1.7124 -0.0879 -0.1715 -0.4594 -0.0884 -0.0435 -0.4112 -0.5653 -0.0926 -0.5539 -0.0852 -0.0930 -0.0521 -0.0884 -0.0550 -0.0818 -0.0606 -0.1419 -2.0981 -1.6577 -0.1137 -0.0995 -0.0607 -0.1128 -0.0608 -0.0966 -0.1099 -0.0943 -0.0596 -0.0935 -0.0471 -0.1332 -1.6226 -0.2986 -0.1319 -0.4193 -0.4482 -0.1069 -0.0907 -0.0791 -0.1117 -0.1678 -0.0966 -0.8589 -0.3724 -0.4447 -0.0821 -0.0562 -0.0870 -0.0488 -1.0900 -0.0732 -1.6227 -0.1012 -0.2582 -0.0774 -0.0365 -0.2074 -0.1838 -0.1576 -0.1136 -0.0550 -0.1313 -0.8273 -0.0766 -0.3024 -0.1732 -0.9748 -0.0703 -0.0534 -1.2363 -0.1310 -0.2790 -0.0850 -0.0428 -0.2156 -0.2040 -0.0856 -0.1066 -0.0739 -0.1029 -0.7269 -0.0502 -0.1862 -0.0827 -1.1919 -0.0566 -0.0564 -1.3195 -0.2039 -0.2679 -0.0668 -0.0476 -1.9543 -0.1988 -0.0901 -0.1070 -0.0618 -0.1261 -0.1117 -0.0924 -0.2254 -0.0911 -0.6917 -0.1098 -0.2218 -0.0867 -0.0462 -1.2903 -0.2035 -0.0965 -0.1135 -0.0870 -0.1187 -0.1105 -0.0546 -0.3117 -0.0709 -0.5552 -0.8150 -0.1625 -0.1471 -0.1052 -0.1309 -0.3704 -0.4503 -0.1002 -0.0706 -0.1435 -0.1231 -0.1055 -0.0904 -0.6732 -0.0736 -0.1631 -0.6079 -0.2597 -0.3103 -0.3222 -0.1006 -0.0686 -0.2100 -0.1077 -0.1014 -0.0751 -0.8246 -0.0743 -0.1148 -0.6629 -0.1019 -0.0972 -0.0831 -0.8636 -0.1106 -2.1403
S-110	<s> public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { /* if(count_letter[i] < most_count) { */ <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; } </s> java
T-110	<s> public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { /* if(count_letter[i] < most_count) { */ <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; } </s> java
H-110	-0.3375054597854614	public static HashMap<Character, Integer> histogram(String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s. isEmpty () ) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { /* if(count_letter[i] < most_count) { */ <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res ; }
D-110	-0.3375054597854614	public static HashMap<Character, Integer> histogram(String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s. isEmpty () ) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { /* if(count_letter[i] < most_count) { */ <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res ; }
P-110	-1.0646 -0.0595 -1.4255 -0.3553 -0.0205 -0.2669 -0.9443 -0.1333 -0.0384 -0.4210 -0.0859 -0.1043 -2.0180 -0.0895 -1.3340 -0.3548 -0.0246 -0.2941 -0.9013 -0.1296 -0.1315 -0.0941 -0.0638 -1.3546 -0.2361 -0.0268 -0.3038 -0.6857 -0.7871 -0.1377 -0.9360 -0.2601 -0.1295 -1.0044 -2.8994 -0.5373 -0.2632 -0.1853 -1.2825 -1.4098 -2.1379 -0.0547 -0.0911 -0.0598 -0.0894 -0.0728 -0.1101 -0.4811 -0.0478 -0.0656 -0.1235 -1.7995 -0.1779 -0.0848 -0.2418 -0.1125 -0.0507 -0.0711 -0.2830 -0.0244 -1.1174 -0.1377 -0.2585 -0.4035 -0.0911 -0.0918 -1.0824 -0.0924 -0.0710 -0.1105 -0.1094 -0.0668 -0.0829 -0.0823 -0.5480 -0.0915 -1.0735 -0.0874 -0.0972 -0.0826 -0.0907 -0.0592 -0.1141 -0.0690 -0.7293 -0.3640 -0.2831 -0.7949 -0.2459 -0.0927 -0.0938 -0.2567 -0.4107 -0.0787 -0.1994 -0.0455 -0.0405 -0.0761 -0.2922 -0.0733 -0.0752 -0.0427 -0.1035 -0.0930 -0.1106 -0.7309 -0.0895 -0.3465 -0.3037 -0.0873 -0.1018 -0.9557 -0.0824 -0.0755 -0.0307 -0.2980 -0.0760 -0.6299 -0.0855 -1.2974 -0.1449 -0.2458 -0.2136 -0.1057 -0.2527 -0.5020 -0.2367 -0.1074 -0.0873 -0.0369 -0.1022 -0.0802 -0.2504 -0.0736 -0.3760 -0.1401 -0.1292 -0.0961 -0.0609 -0.1046 -0.0818 -0.1269 -0.0966 -0.0927 -0.2843 -0.5477 -0.3029 -1.7428 -0.0953 -0.1015 -0.2572 -1.5046 -0.1000 -0.0957 -0.2693 -0.3243 -0.1400 -0.3623 -0.1644 -0.0538 -0.0523 -0.1060 -0.1493 -0.5656 -0.0608 -0.1131 -0.1165 -1.1009 -0.0880 -0.0993 -0.0724 -0.4677 -0.5301 -0.1006 -0.2662 -0.6298 -0.2168 -0.1769 -0.0969 -0.0546 -0.1158 -0.1058 -0.8787 -0.1206 -0.0932 -0.1100 -0.3001 -0.3112 -0.1353 -0.3124 -0.1365 -0.0537 -0.0547 -0.0793 -0.1191 -0.4831 -0.0601 -0.1151 -0.1214 -0.8997 -0.0927 -0.0880 -0.1610 -0.3358 -0.5234 -0.1127 -0.1060 -0.0666 -0.6297 -0.2247 -0.1164 -0.2421 -1.1813 -0.0833 -0.1314 -2.0652 -0.0939 -2.7850
S-128	<s> public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { /* if(i != 0) val = Math.max(val, grid[i][j + 1]); if(j != 0) val = Math.min(val, grid[i - 1][j]); if(i != n - 1) val = Math.min(val, grid[i - 1][j]); if(j != n + 1) val = Math.max(val, grid[i][j - 1]); */ <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; } </s> java
T-128	<s> public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { /* if(i != 0) val = Math.max(val, grid[i][j + 1]); if(j != 0) val = Math.min(val, grid[i - 1][j]); if(i != n - 1) val = Math.min(val, grid[i - 1][j]); if(j != n + 1) val = Math.max(val, grid[i][j - 1]); */ <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; } </s> java
H-128	-0.34944918751716614	public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { if(i != 0) val = Math.max(val, grid[i][j + 1]); if(j != 0) val = Math.min(val, grid[i - 1][j]); if(i != n - 1) val = Math.min(val, grid[i - 1][j]); if(j != n + 1) val = Math.max(val, grid[i][j - 1]); */ <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }
D-128	-0.34944918751716614	public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { if(i != 0) val = Math.max(val, grid[i][j + 1]); if(j != 0) val = Math.min(val, grid[i - 1][j]); if(i != n - 1) val = Math.min(val, grid[i - 1][j]); if(j != n + 1) val = Math.max(val, grid[i][j - 1]); */ <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }
P-128	-0.5388 -0.0419 -0.1220 -2.2842 -0.0504 -0.1055 -0.0350 -0.6413 -0.5058 -0.1466 -0.0306 -0.7576 -0.0860 -0.1134 -1.4609 -0.0974 -0.1200 -0.2080 -0.0850 -0.0408 -0.0926 -0.0849 -1.1139 -0.1340 -0.0778 -0.1012 -0.0981 -0.0339 -0.0980 -0.0889 -0.8836 -0.1326 -0.3858 -0.2274 -0.1068 -0.0968 -0.9195 -0.0950 -0.0642 -0.1055 -0.5089 -0.0952 -0.7915 -0.0903 -0.1297 -0.3259 -0.2887 -0.0992 -0.1013 -0.8441 -0.0919 -0.0544 -0.1041 -0.2900 -0.0696 -0.7024 -0.1023 -0.1271 -0.6636 -0.2342 -0.4159 -0.3310 -0.0609 -0.2074 -0.1779 -0.1022 -1.1389 -0.0951 -0.7053 -0.7739 -0.3860 -0.0952 -1.0570 -0.0757 -0.1512 -1.8156 -0.1009 -0.3466 -0.4520 -0.1355 -0.5434 -0.0526 -0.3534 -0.1640 -0.2628 -0.1134 -0.5183 -0.1948 -0.3436 -0.1308 -0.6413 -0.1756 -0.0963 -0.4946 -0.0668 -0.0975 -1.4916 -0.0956 -0.0917 -0.4351 -0.0909 -0.3937 -0.0442 -0.2926 -0.1699 -0.1329 -0.1894 -0.0227 -0.0905 -0.2646 -0.1237 -0.5009 -0.3314 -0.1229 -0.1523 -0.5903 -1.4643 -0.0796 -0.1017 -1.5885 -0.0939 -0.1237 -0.2729 -0.0904 -0.3761 -0.0448 -0.3052 -0.1455 -0.1523 -0.1403 -0.0187 -0.1059 -0.3112 -0.1060 -0.5647 -0.1407 -0.0939 -0.1135 -0.3024 -1.2409 -0.0840 -0.1033 -1.6628 -0.0932 -0.2107 -0.3571 -0.1136 -0.3719 -0.0472 -0.2973 -0.1522 -0.0512 -0.1140 -0.2179 -0.0992 -0.3565 -1.5686 -0.1291 -0.1080 -0.0853 -0.1581 -0.0923 -0.0796 -0.1503 -2.6057 -0.0401 -0.1063 -0.0713 -0.0838 -0.7503 -0.1691 -1.6347 -0.1111 -0.3552 -0.2655 -0.0922 -0.0967 -0.8207 -0.1028 -0.0678 -0.1746 -0.3078 -0.0929 -0.7244 -0.1016 -0.1257 -1.3489 -0.3657 -0.0897 -0.3489 -0.0845 -1.0567 -0.0893 -0.9495 -0.2529 -0.1598 -0.0986 -3.2725 -0.0857 -0.0790 -0.6652 -0.2018 -0.1317 -0.1136 -0.0698 -0.8715 -0.0850 -0.1019 -0.0516 -0.8751 -0.0848 -2.3421
S-19	<s> public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(" "))); /* Collections.sort(number_array); */ <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); } </s> java
T-19	<s> public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(" "))); /* Collections.sort(number_array); */ <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); } </s> java
H-19	-0.37593400478363037	public static String sort_numbers(String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers. split(" "))); /* Collections.sort(number_array); */ <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); }
D-19	-0.37593400478363037	public static String sort_numbers(String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers. split(" "))); /* Collections.sort(number_array); */ <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); }
P-19	-0.7573 -0.0554 -2.1850 -0.0462 -0.1077 -0.0623 -0.5517 -0.1614 -0.0776 -1.6817 -0.0826 -0.1540 -1.0585 -0.3250 -0.0683 -0.2569 -0.9383 -0.1317 -0.0538 -0.0953 -0.0605 -0.0832 -0.0636 -1.1086 -0.1844 -0.0654 -0.2669 -0.7640 -0.9818 -0.0997 -0.1020 -0.0797 -0.1065 -0.3076 -0.1034 -0.0998 -2.0398 -0.2785 -0.0592 -0.1075 -0.0916 -0.1013 -0.3012 -0.0804 -0.0474 -1.9128 -0.9318 -0.0507 -0.1125 -0.0948 -0.1008 -0.2990 -0.0674 -0.0402 -2.0781 -0.3222 -0.0533 -0.1107 -0.1034 -0.1032 -0.3269 -0.0844 -0.0914 -2.2555 -0.0533 -1.1661 -0.0646 -0.1077 -0.1034 -0.1019 -0.2908 -0.0868 -0.0400 -2.0242 -0.0727 -1.0812 -0.0611 -0.1053 -0.1106 -0.1040 -0.2715 -0.0896 -0.0676 -2.0556 -0.0526 -0.8028 -0.0610 -0.1008 -0.1083 -0.1032 -0.2834 -0.0905 -0.0134 -1.9833 -0.0378 -0.9762 -0.0637 -0.0994 -0.1042 -0.1036 -0.2591 -0.0671 -0.3125 -0.0124 -1.7488 -0.0652 -0.9818 -0.0640 -0.1026 -0.0984 -0.1047 -0.2224 -0.0607 -0.0037 -1.7644 -0.0578 -1.2590 -0.0718 -0.0987 -0.0976 -0.1055 -0.2764 -0.0592 -0.1325 -0.0155 -2.0256 -0.0211 -1.6288 -1.3435 -0.2731 -0.0807 -0.1838 -0.0442 -0.0985 -0.0394 -0.0894 -0.0743 -0.7332 -0.1034 -0.0722 -1.1849 -0.0136 -0.0986 -0.2545 -0.5751 -0.4735 -0.1345 -2.0423 -0.9714 -0.0919 -0.4608 -0.9009 -0.4787 -0.0942 -0.0227 -0.2002 -0.1859 -0.0923 -0.0385 -0.6511 -0.1418 -0.1120 -0.1581 -0.1974 -0.5313 -0.0708 -0.0924 -1.4225 -0.1649 -0.1213 -0.1083 -0.0640 -0.0718 -0.0449 -0.1034 -0.0343 -1.2406 -0.0841 -0.0584 -0.0936 -0.0676 -0.1123 -0.0207 -0.0748 -0.1342 -0.0905 -0.1201 -1.3605 -1.6187 -0.1413 -0.7124
S-94	<s> public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } /* } else if (state.equals("upper") && !str_key.toUpperCase().equals(str_key)) { */ <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } } </s> java
T-94	<s> public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } /* } else if (state.equals("upper") && !str_key.toUpperCase().equals(str_key)) { */ <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } } </s> java
H-94	-0.31733012199401855	public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } /* } else if (state.equals("upper") && !str_key.toUpperCase().equals(str_key)) { */ <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } return false ; }
D-94	-0.31733012199401855	public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } /* } else if (state.equals("upper") && !str_key.toUpperCase().equals(str_key)) { */ <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } return false ; }
P-94	-0.7428 -0.0369 -0.0897 -0.0543 -0.0946 -0.0406 -0.0865 -0.0448 -0.3809 -0.0413 -0.2375 -0.0626 -0.2301 -0.4194 -0.1573 -0.0463 -1.4507 -0.0906 -0.1839 -0.1243 -0.7620 -0.1164 -0.1918 -0.6350 -0.1037 -0.8797 -0.0805 -0.0849 -0.6016 -0.1415 -0.1081 -1.3133 -0.0609 -0.0914 -0.0986 -0.0354 -1.1863 -0.1852 -0.1206 -0.1148 -0.0806 -0.0558 -0.0296 -0.0959 -0.0475 -0.0511 -1.2488 -0.0920 -0.1093 -2.6283 -0.4152 -0.2638 -0.0397 -0.8120 -0.5545 -0.1157 -0.0906 -0.1157 -0.1065 -0.1218 -0.6812 -0.0532 -0.0771 -0.0776 -1.0092 -0.0827 -0.0996 -0.0610 -0.0879 -0.1825 -0.0769 -0.4154 -0.0736 -0.7019 -0.0829 -0.1253 -0.2747 -0.1041 -1.2558 -0.0602 -0.0637 -0.6126 -0.0983 -0.0941 -0.1289 -0.2977 -0.1051 -0.0622 -0.1082 -0.3449 -0.0693 -1.6653 -0.7653 -0.1965 -0.1010 -0.0685 -1.3752 -0.0852 -0.0960 -0.1015 -0.0834 -1.0660 -0.0870 -0.0633 -0.1253 -0.1576 -0.1054 -0.0540 -0.1134 -0.3466 -0.1137 -1.8435 -0.4925 -0.1608 -0.1028 -0.0658 -1.2817 -0.0593 -0.0916 -0.0989 -0.0620 -0.7684 -0.0709 -0.1239 -0.0617 -0.1032 -0.1047 -0.1285 -0.6900 -0.0649 -0.1141 -0.0814 -1.3901 -0.1696 -0.1001 -0.0854 -0.1268 -0.1684 -0.0999 -1.3174 -0.0532 -0.1152 -0.4166 -0.1078 -0.0868 -0.1480 -0.1088 -0.0486 -0.1145 -0.5150 -0.1102 -1.4860 -0.5515 -0.1514 -0.0968 -0.0642 -0.5889 -0.0904 -1.0606 -0.1187 -0.1156 -0.1283 -0.0499 -0.1151 -0.1061 -0.1409 -0.7115 -0.0509 -0.1044 -0.0916 -0.0951 -0.1192 -0.1857 -0.1575 -0.1074 -1.4116 -0.0789 -0.1353 -1.5831 -0.0784 -0.1411 -0.1107 -0.1012 -1.1917 -0.0659 -0.0865 -0.5745 -0.0972 -1.2515 -0.9069 -1.4806 -0.1187 -0.5508
S-116	<s> public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; /* char[] vowels = {'a', 'e', 'i', 'o', 'u'}; */ <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; } </s> java
T-116	<s> public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; /* char[] vowels = {'a', 'e', 'i', 'o', 'u'}; */ <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; } </s> java
H-116	-0.3227197527885437	public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; /* char[] vowels = {'a', 'e', 'i', 'o', 'u'}; */ <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result ; }
D-116	-0.3227197527885437	public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; /* char[] vowels = {'a', 'e', 'i', 'o', 'u'}; */ <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result ; }
P-116	-1.3443 -0.0582 -1.7205 -0.3494 -0.0767 -0.1377 -0.0520 -0.1002 -0.0376 -0.9923 -0.1064 -0.0950 -1.5155 -0.0922 -0.0687 -1.7389 -0.0788 -1.5217 -0.3358 -0.0819 -0.1811 -0.0855 -0.0981 -0.0687 -1.1875 -0.2024 -0.9007 -2.1815 -0.0367 -0.0819 -0.0715 -0.1116 -0.5905 -0.0617 -0.0822 -0.1702 -0.4639 -0.5504 -0.0958 -0.0864 -1.3730 -0.0960 -0.0852 -0.0645 -0.0706 -0.0703 -0.5242 -0.0791 -0.9664 -0.0850 -0.1410 -0.0890 -0.1039 -0.0327 -0.0250 -0.0349 -0.0949 -1.5944 -1.4353 -0.0417 -1.3545 -0.0341 -0.0989 -0.1557 -0.0493 -0.1387 -0.1249 -0.0630 -0.1452 -0.1442 -0.0649 -0.1138 -0.1390 -0.0438 -0.1129 -0.1064 -0.0329 -0.0503 -0.1508 -0.4616 -0.1444 -0.1104 -0.1278 -0.1127 -0.3405 -0.4815 -0.1336 -0.0916 -1.4152 -0.0988 -0.0807 -0.0368 -1.0340 -0.2608 -0.5443 -0.1257 -1.2338 -0.0786 -0.8468 -0.0840 -0.0928 -0.0509 -0.0250 -0.0371 -0.0888 -0.0815 -0.2103 -0.1294 -0.3713 -0.5304 -0.1057 -0.0967 -1.3774 -0.0938 -0.0725 -0.2323 -0.1024 -0.0956 -0.5840 -0.0868 -0.6757 -0.1025 -0.1195 -0.5277 -0.1515 -0.0273 -0.0109 -0.8222 -0.2261 -0.2338 -0.2432 -0.0322 -0.4973 -0.1611 -0.6005 -1.1836 -0.3389 -0.1948 -0.4794 -0.1019 -0.0977 -0.0229 -0.0355 -0.1396 -0.0510 -0.3025 -0.0565 -0.0660 -0.1112 -0.0834 -0.1112 -0.5040 -0.0818 -0.0211 -0.0323 -1.0000 -0.1534 -0.0930 -0.0442 -0.0284 -0.0309 -1.6290 -0.1190 -0.1068 -0.6256 -0.7025 -0.0941 -0.0391 -0.0266 -0.0267 -0.0911 -0.1091 -1.3297 -0.1366 -0.1250 -0.3444 -0.6608 -0.5258 -0.6150 -0.1894 -0.3613 -0.1156 -0.0835 -0.0904 -1.3695 -0.1019 -0.6826
S-104	<s> public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { /* if(digit_map.get(num) != "") { */ <mask> result.add(digit_map.get(num)); } } return result; } </s> java
T-104	<s> public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { /* if(digit_map.get(num) != "") { */ <mask> result.add(digit_map.get(num)); } } return result; } </s> java
H-104	-0.27906036376953125	public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); java.lang.System.out . println () ; ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num) != "") { */ <mask> result.add(digit_map.get(num)); } } return result; }
D-104	-0.27906036376953125	public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); java.lang.System.out . println () ; ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num) != "") { */ <mask> result.add(digit_map.get(num)); } } return result; }
P-104	-0.7234 -0.0455 -1.5547 -0.2577 -0.0744 -0.1231 -0.0390 -0.0897 -0.0394 -0.4251 -0.0347 -0.2356 -0.0477 -0.1525 -0.0753 -1.2881 -0.0812 -0.2400 -0.3045 -0.0425 -0.2037 -0.8359 -0.0999 -0.0340 -0.1033 -0.0572 -0.0878 -0.0575 -0.9191 -0.1647 -0.0995 -0.1091 -0.0648 -0.1052 -0.2115 -0.1626 -0.1018 -0.0658 -1.0901 -0.0681 -0.1102 -0.0743 -0.1023 -0.1931 -0.2441 -0.0982 -0.0413 -0.9568 -0.0517 -0.1143 -0.0819 -0.1031 -0.2075 -0.1426 -0.0907 -0.0425 -0.9774 -0.0455 -0.1086 -0.0821 -0.1020 -0.2033 -0.1858 -0.0919 -0.0415 -0.7998 -0.0406 -0.1054 -0.0879 -0.1056 -0.1991 -0.1027 -0.0945 -0.0429 -0.0198 -0.6796 -0.0486 -0.1063 -0.0930 -0.1052 -0.2409 -0.1628 -0.3959 -0.1023 -0.0318 -0.0094 -0.6047 -0.0398 -0.0967 -0.0864 -0.1038 -0.1953 -0.1869 -0.3747 -0.0921 -0.0463 -0.0362 -0.5596 -0.0619 -0.0971 -0.0797 -0.1053 -0.2320 -0.2151 -0.4137 -0.0923 -0.0512 -0.0113 -0.6203 -0.1209 -0.0962 -0.0814 -0.1075 -0.2621 -0.1940 -0.3698 -0.0884 -0.0246 -0.0126 -0.7314 -3.3787 -0.0484 -0.5507 -0.0874 -0.9601 -0.0694 -0.0522 -0.4781 -0.0154 -1.5297 -0.2511 -2.5451 -0.3012 -0.0935 -0.1570 -0.0628 -0.0865 -0.0554 -1.1028 -0.1696 -0.0957 -0.2738 -1.3415 -0.0645 -0.0639 -0.0834 -0.8994 -0.0813 -0.8394 -0.4425 -0.0475 -0.1178 -0.0510 -0.1209 -0.1470 -0.1770 -0.1670 -0.7555 -0.1019 -1.0710 -0.0937 -1.0851 -0.0796 -0.1139 -0.0816 -0.0887 -0.1068 -0.2105 -0.3764 -0.0661 -0.1128 -0.0520 -0.1096 -0.1559 -0.1834 -0.1747 -0.4211 -0.0972 -0.0603 -0.0837 -0.0570 -1.0916 -0.0794 -2.3551
S-147	<s> public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); /* for (int i = planet1_index; i < planet2_index; i += 1) result.add(planet_names.get(i)); */ <mask> return result; } </s> java
T-147	<s> public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); /* for (int i = planet1_index; i < planet2_index; i += 1) result.add(planet_names.get(i)); */ <mask> return result; } </s> java
H-147	-0.35511526465415955	public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ( ! ( planet_names.contains(planet1)) || ! ( planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); /* for (int i = planet1_index; i < planet2_index; i += 1) result.add(planet_names.get(i)); */ <mask> return result; }
D-147	-0.35511526465415955	public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ( ! ( planet_names.contains(planet1)) || ! ( planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); /* for (int i = planet1_index; i < planet2_index; i += 1) result.add(planet_names.get(i)); */ <mask> return result; }
P-147	-0.9654 -0.0580 -1.4808 -0.3665 -0.0698 -0.1379 -0.0161 -0.4216 -0.1152 -0.1262 -0.4866 -2.0920 -0.1064 -0.3523 -0.0852 -1.4592 -0.4696 -0.0805 -0.2288 -0.1117 -0.1127 -0.1293 -0.0799 -0.1075 -1.0322 -0.2218 -0.0761 -0.9717 -0.0221 -0.0995 -0.2607 -0.8033 -0.1083 -0.0108 -0.0235 -0.0617 -1.8723 -0.1166 -0.0508 -0.0069 -1.3011 -0.1146 -0.0261 -0.0191 -1.4728 -0.1139 -0.0474 -0.0172 -1.5011 -0.1213 -0.0441 -0.0376 -0.0416 -1.7427 -0.1117 -0.0258 -0.0071 -1.6024 -0.1014 -0.0395 -0.0158 -0.0397 -1.8142 -0.1079 -0.0223 -0.0303 -0.0059 -0.0686 -0.1398 -1.3912 -0.3951 -0.0733 -0.1609 -0.0999 -0.0935 -0.0670 -1.0033 -0.3009 -0.0642 -0.9814 -0.2262 -1.1760 -1.3248 -0.1787 -0.2443 -0.1612 -0.1153 -0.1275 -1.2197 -0.7618 -0.0543 -0.0431 -1.1887 -2.0225 -0.9413 -0.1109 -0.1108 -0.1280 -0.1148 -0.1269 -1.1056 -0.5655 -0.0502 -0.0431 -0.0969 -0.4057 -0.2178 -0.1351 -0.8241 -0.1229 -0.0940 -0.0437 -0.0600 -0.0891 -0.1274 -0.1279 -0.1018 -0.1132 -1.4308 -0.5507 -0.0466 -0.0421 -1.1151 -0.0792 -0.1025 -0.0566 -0.0599 -0.0840 -0.1028 -0.1267 -0.0980 -0.1102 -1.4265 -0.4650 -0.0453 -0.0534 -0.3426 -1.0966 -0.1048 -0.1643 -0.3932 -0.0899 -0.0840 -0.1184 -0.0492 -0.0633 -0.4020 -0.0824 -0.1306 -0.1046 -0.0421 -0.0528 -0.3979 -0.0812 -0.0369 -1.4996 -0.0660 -0.1102 -0.1695 -0.3850 -0.0561 -0.0644 -0.1081 -0.1169 -0.1117 -0.3389 -0.3335 -0.4709 -0.7604 -0.2853 -0.1288 -0.1003 -0.1501 -0.1086 -0.0924 -1.2733 -0.1267 -1.0592
S-140	<s> public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (! (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; /* if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') */ <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; } </s> java
T-140	<s> public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (! (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; /* if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') */ <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; } </s> java
H-140	-0.2821444272994995	public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; /* if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') */ <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; }
D-140	-0.2821444272994995	public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; /* if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') */ <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; }
P-140	-0.7627 -0.0570 -1.7005 -0.1167 -0.0968 -0.0825 -0.0850 -0.0635 -0.6240 -0.1092 -0.1490 -0.0992 -0.0888 -2.0643 -0.0831 -1.7086 -2.3574 -0.0545 -0.0775 -0.1800 -0.1182 -0.1115 -0.1094 -0.5325 -0.1237 -0.3941 -0.1097 -0.1271 -0.1973 -0.1181 -0.0609 -0.2833 -0.1847 -0.0614 -0.1007 -0.0411 -0.9424 -0.1354 -1.4282 -0.2881 -0.3786 -1.4696 -0.0649 -0.0307 -0.6213 -0.0771 -0.2062 -0.2213 -1.1328 -0.0413 -0.0538 -0.5297 -0.0964 -0.0869 -0.2910 -0.8140 -0.0480 -0.2343 -0.0552 -0.0519 -0.0884 -0.0481 -1.0653 -0.1163 -0.1391 -0.1778 -0.3395 -0.0860 -0.3413 -0.0861 -0.6539 -0.0493 -0.0937 -0.0452 -0.9926 -1.7921 -0.1248 -0.0921 -0.0460 -0.0339 -0.1285 -0.0844 -0.1916 -0.4653 -0.3139 -0.2286 -0.0850 -0.2293 -0.5515 -0.3282 -0.1260 -0.0641 -0.0864 -0.0515 -0.1059 -0.1217 -0.0638 -0.0432 -0.1118 -0.0598 -0.2104 -0.6381 -0.2839 -0.1532 -0.0682 -0.3011 -0.6054 -0.3342 -0.1051 -0.0520 -0.0315 -0.0991 -0.1886 -0.1579 -0.1844 -0.1080 -0.0933 -0.1076 -0.0506 -0.9302 -0.1527 -0.0567 -0.0959 -0.1736 -0.0795 -0.5832 -0.1244 -0.1219 -0.2368 -0.0929 -0.0572 -0.1773 -0.1109 -0.1060 -0.1078 -0.0534 -0.0298 -0.3238 -0.0938 -0.2767 -0.1936 -0.0353 -0.1065 -0.1922 -0.1091 -0.0510 -0.0779 -0.3081 -0.0934 -0.0800 -0.1887 -0.0701 -0.7561 -0.1084 -0.1704 -0.1213 -0.2733 -0.0893 -0.1563 -0.1335 -0.2935 -0.0442 -0.1008 -0.0540 -0.6326 -0.0862 -0.0993 -0.0469 -0.8541 -0.1232 -2.4555
S-157	<s> public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); /* return s1.size() - s2.size(); */ <mask> } ); return words_list.get(0); } </s> java
T-157	<s> public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); /* return s1.size() - s2.size(); */ <mask> } ); return words_list.get(0); } </s> java
H-157	-0.3921706974506378	public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return words_list.get(0); } </s> java.lang.System.out . println () ; return words_list.get(0); }
D-157	-0.3921706974506378	public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return words_list.get(0); } </s> java.lang.System.out . println () ; return words_list.get(0); }
P-157	-0.6173 -0.0510 -2.2468 -0.0545 -0.1025 -0.0550 -0.4670 -0.0928 -2.0243 -0.0297 -1.7309 -0.0780 -1.4080 -0.3093 -0.0814 -0.1525 -0.0263 -0.0864 -0.0516 -0.0799 -0.0794 -0.9843 -0.1726 -0.0778 -1.4002 -0.0395 -0.1035 -0.1902 -0.6628 -0.2062 -1.5470 -1.6986 -0.0943 -0.0514 -0.6425 -0.0295 -0.1171 -0.0505 -0.9333 -0.1343 -0.0776 -0.2802 -0.1473 -0.1534 -0.1754 -0.0598 -0.4840 -1.8094 -0.1152 -0.0716 -0.0999 -1.2461 -0.0795 -0.5412 -0.2333 -0.7178 -0.1398 -0.1544 -0.0487 -0.0513 -0.0292 -0.2169 -0.1018 -0.1491 -0.1315 -0.1645 -0.4798 -0.1049 -0.9389 -0.7474 -0.2927 -0.0456 -0.9478 -0.0820 -0.0981 -1.0501 -1.6047 -0.2662 -0.0466 -0.1784 -0.0883 -0.0644 -0.0978 -0.0693 -0.6498 -0.2577 -0.0435 -1.0993 -0.0385 -0.1093 -0.2638 -0.6375 -0.1558 -0.4501 -1.3434 -0.3985 -1.1614 -0.1525 -0.0597 -0.0841 -1.4157 -0.0703 -0.4703 -0.2288 -0.8475 -0.1405 -0.2597 -0.0599 -0.0494 -0.0341 -0.2548 -0.0942 -0.1406 -0.1516 -0.1585 -0.3793 -0.0900 -1.8128 -0.7453 -0.3937 -0.0346 -0.8099 -0.1006 -0.0771 -1.4884 -1.2126 -0.2206 -0.0493 -0.1604 -0.0895 -0.0677 -0.0793 -0.0639 -0.7298 -0.1655 -0.0434 -1.1995 -0.0461 -0.1018 -0.2208 -0.5453 -0.1261 -0.0835 -0.8265 -0.4988 -0.0673 -0.1153 -0.0533 -0.1046 -0.2579 -0.4465 -0.1356 -3.1506 -0.0992 -0.1944 -0.2061 -0.1757 -0.0653 -0.1456 -1.0119 -0.0912 -0.0766 -1.3559 -0.0427 -0.8863 -0.4354 -0.1867 -0.0144 -0.1115 -0.0623 -0.1028 -0.2259 -0.6766 -0.1447 -0.6022
S-125	<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { /* if(lst[i] <= lst[i + 1]) return false; */ <mask> } return true; } </s> java
T-125	<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { /* if(lst[i] <= lst[i + 1]) return false; */ <mask> } return true; } </s> java
H-125	-0.33510059118270874	public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { /* if(lst[i] <= lst[i + 1]) return false; */ <mask> } return true; } return false; }
D-125	-0.33510059118270874	public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { /* if(lst[i] <= lst[i + 1]) return false; */ <mask> } return true; } return false; }
P-125	-1.0824 -0.0423 -0.1283 -0.0639 -0.0815 -0.0536 -0.5149 -0.5129 -2.2416 -0.0397 -1.3322 -0.0837 -1.7823 -0.2862 -0.0385 -0.2531 -0.8349 -0.1273 -0.1700 -0.0978 -0.0552 -0.1088 -0.0513 -1.4617 -0.2221 -0.1211 -0.4374 -0.2374 -0.1024 -0.1019 -1.1749 -0.1023 -0.0956 -0.1789 -0.0894 -0.0909 -0.7878 -0.1069 -1.1142 -0.0962 -0.2972 -0.1134 -0.0659 -0.1187 -0.4017 -0.5251 -0.1443 -0.4284 -0.4885 -0.3997 -0.6355 -0.0960 -0.1562 -0.3745 -0.2736 -0.1146 -0.1051 -1.0362 -0.1133 -0.0616 -0.0930 -0.1032 -0.0902 -0.5437 -0.1048 -1.0800 -0.0991 -0.2467 -0.1122 -0.0723 -0.1139 -0.2390 -0.4944 -0.1101 -0.3926 -0.3100 -0.3247 -0.2879 -0.1149 -0.0747 -0.1174 -0.2943 -0.4450 -0.1442 -0.3826 -0.2788 -0.2313 -0.3826 -0.8010 -0.0936 -0.1792 -0.4184 -0.2982 -0.1087 -0.1008 -0.9430 -0.1103 -0.0678 -0.0812 -0.1018 -0.0970 -0.6259 -0.1011 -0.8713 -0.1027 -0.1286 -0.5923 -0.5576 -0.1034 -0.0613 -0.1372 -0.3144 -0.3406 -0.1425 -0.3627 -0.2882 -0.2440 -0.1725 -0.4960 -0.1054 -0.0888 -0.5015 -0.1190 -0.3249 -0.3861 -0.2930 -0.1152 -0.1180 -0.9385 -0.1191 -0.0694 -0.0866 -0.1068 -0.0827 -0.8626 -0.7408 -0.1035 -1.0088 -0.1035 -2.5498 -0.1593 -0.3901 -0.1318 -0.3738 -0.2247 -0.2156 -0.0710 -0.0422 -0.3012 -0.1554 -0.1534 -0.2361 -0.1490 -0.0786 -0.0567 -0.1640 -0.2853 -0.1934 -0.0877 -0.1382 -0.2142 -0.0763 -0.0780 -0.5815 -0.1096 -2.4116 -0.2260 -1.0352 -0.1239 -0.8997
S-135	<s> public static int[] largest_smallest_integers(int[] lst) { /* boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for(int i = 1; i < lst.length; i++) { if(lst[i] < 0) { negative = false; max_negative = Math.min(max_negative, lst[i]); */ <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } </s> java
T-135	<s> public static int[] largest_smallest_integers(int[] lst) { /* boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for(int i = 1; i < lst.length; i++) { if(lst[i] < 0) { negative = false; max_negative = Math.min(max_negative, lst[i]); */ <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } </s> java
H-135	-0.3416842222213745	public static int[] largest_smallest_integers(int[] lst) { int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for(int i = 1; i < lst.length; i++) { if(lst[i] < 0) { negative = false; max_negative = Math.min(max_negative, lst[i]); */ <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } return null ; }
D-135	-0.3416842222213745	public static int[] largest_smallest_integers(int[] lst) { int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for(int i = 1; i < lst.length; i++) { if(lst[i] < 0) { negative = false; max_negative = Math.min(max_negative, lst[i]); */ <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } return null ; }
P-135	-0.7688 -0.0338 -0.1102 -2.0247 -0.0169 -0.0920 -0.0582 -0.0329 -0.0930 -0.0205 -0.0291 -0.5680 -0.5032 -1.8612 -0.0278 -1.4903 -0.0823 -1.8421 -0.1554 -0.1080 -0.0656 -0.1055 -0.9221 -0.1035 -0.0523 -0.0957 -0.0355 -0.3833 -0.1106 -0.1085 -0.0435 -0.0975 -0.7246 -0.1017 -0.0211 -0.0856 -0.0321 -0.8335 -0.1455 -0.3587 -0.4240 -0.0900 -0.0910 -1.6962 -0.0886 -0.0998 -0.1325 -0.0913 -0.0817 -0.4493 -0.0877 -1.0339 -0.0997 -0.1241 -0.5871 -0.1959 -0.4679 -0.4357 -0.1944 -0.0617 -0.3836 -0.0976 -0.2422 -0.1035 -0.1285 -0.3650 -0.0659 -0.1148 -0.0548 -0.1051 -2.2022 -0.0977 -0.0822 -0.4563 -0.2577 -0.0957 -0.0576 -0.6741 -0.0402 -0.3457 -0.2160 -0.2656 -2.1473 -0.1045 -0.0915 -0.1013 -0.1021 -0.0826 -0.0774 -0.4613 -0.1561 -0.3558 -0.1855 -0.1569 -0.0759 -0.5540 -0.0949 -0.0288 -0.1037 -0.0911 -0.2470 -0.2909 -0.1004 -0.0403 -0.1029 -2.2422 -0.0964 -0.0631 -0.5426 -0.0693 -0.0922 -0.0428 -0.6164 -0.0399 -0.3574 -0.1808 -0.3622 -0.1047 -0.0748 -0.1694 -0.8491 -0.0831 -0.7968 -0.0616 -0.1254 -0.0521 -0.0863 -0.7763 -0.1319 -0.9895 -0.0261 -0.4944 -0.0476 -0.1001 -0.0342 -0.1092 -0.4420 -0.2235 -2.1434 -0.0657 -0.0891 -0.1043 -0.2449 -0.1187 -0.0664 -0.4769 -0.0835 -0.1072 -0.0433 -0.0939 -0.0838 -0.0585 -0.4021 -0.0960 -2.1509 -1.9472 -1.4549 -0.1594 -0.7724
S-139	<s> public static String fix_spaces(String text) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } /* return new_text; */ <mask> } </s> java
T-139	<s> public static String fix_spaces(String text) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } /* return new_text; */ <mask> } </s> java
H-139	-0.27272456884384155	public static String fix_spaces(String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length () ) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text. substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text. substring(i, i + 1); } else { new_text += text. substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } /* return new_text; */ <mask> } </s> java.lang.System.out . println () ; return new_text ; }
D-139	-0.27272456884384155	public static String fix_spaces(String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length () ) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text. substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text. substring(i, i + 1); } else { new_text += text. substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } /* return new_text; */ <mask> } </s> java.lang.System.out . println () ; return new_text ; }
P-139	-0.8038 -0.0505 -1.5001 -0.0487 -0.1009 -0.0232 -0.5560 -0.0891 -0.0605 -2.0980 -0.0824 -1.9482 -0.0693 -0.0965 -0.0680 -0.0881 -1.8225 -0.0885 -0.1385 -0.0904 -0.6814 -0.0818 -0.0593 -0.0846 -0.5598 -0.0737 -0.0666 -0.0786 -0.5493 -0.0786 -0.1192 -0.5825 -0.0880 -0.1088 -0.0994 -0.1050 -2.9705 -0.3359 -0.0730 -0.1030 -0.1289 -0.2095 -0.1065 -0.7419 -0.3160 -0.1881 -0.6210 -0.0916 -0.0482 -0.0116 -0.0572 -0.0708 -0.6521 -0.0877 -0.1315 -0.0880 -0.1276 -0.3617 -0.0937 -0.0574 -0.0885 -0.3131 -0.1247 -0.1005 -0.0821 -0.1099 -0.0381 -0.0509 -0.0555 -0.1037 -0.7373 -0.3533 -0.2057 -0.5532 -0.1556 -0.2152 -0.7051 -0.0717 -0.0975 -0.1197 -0.1409 -0.1105 -0.0551 -0.0558 -0.2182 -0.0775 -0.1031 -0.1199 -0.4227 -0.0761 -0.0768 -0.0634 -0.2800 -0.0679 -0.0788 -0.0771 -0.2212 -0.0563 -0.0467 -1.3621 -0.0730 -0.0653 -0.1108 -0.0803 -0.0606 -0.0592 -0.4528 -0.0817 -0.0790 -0.1134 -0.0837 -0.0828 -0.0353 -0.1015 -0.5981 -0.2559 -0.1639 -0.3905 -0.1068 -0.1661 -0.6306 -0.0800 -0.0574 -0.1077 -0.0685 -0.1172 -0.0856 -0.0734 -0.0328 -0.1042 -0.5937 -0.3623 -0.1414 -0.3623 -0.0984 -0.1291 -0.5736 -0.0844 -0.0458 -0.1454 -0.1055 -0.1153 -0.5813 -0.0631 -0.1135 -0.0996 -0.0950 -0.5289 -0.1250 -0.0838 -0.0835 -0.6688 -0.0888 -1.0619 -0.0981 -0.0603 -0.1215 -0.0876 -0.1380 -0.1410 -0.1151 -0.1091 -0.1694 -0.1629 -1.3701 -0.0660 -0.1913 -0.1635 -0.3318 -0.0604 -0.1742 -1.7008 -0.1327 -0.0933 -0.7657 -0.0704 -0.9686 -0.9238 -0.5909 -0.0980 -0.1258 -0.0817 -1.1116 -0.3370 -0.1206
S-92	<s> public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } /* if (Character.isLowerCase(c)) { */ <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); } </s> java
T-92	<s> public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } /* if (Character.isLowerCase(c)) { */ <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); } </s> java
H-92	-0.29739245772361755	public static String encode(String message ) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { */ <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }
D-92	-0.29739245772361755	public static String encode(String message ) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { */ <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }
P-92	-0.6665 -0.0462 -1.6668 -0.0288 -0.4855 -0.0953 -0.0755 -2.3665 -0.0845 -1.5538 -0.0379 -0.0907 -0.0649 -0.7693 -1.7184 -0.1993 -0.1156 -0.3385 -0.0975 -0.0619 -0.0645 -0.1077 -0.0630 -0.0367 -1.4185 -0.0854 -0.1507 -0.1291 -0.0585 -0.1074 -0.0929 -0.1224 -0.2742 -0.1905 -1.4139 -0.0948 -0.1351 -0.1277 -0.3276 -0.1031 -0.3414 -0.2973 -0.1175 -1.0860 -0.1040 -1.1884 -0.1200 -0.1529 -0.1055 -0.0691 -0.0478 -0.1647 -0.1518 -1.1432 -0.0912 -1.7699 -0.1031 -0.1088 -0.1261 -0.1119 -0.1326 -0.2582 -0.1002 -0.3607 -0.3061 -0.1212 -0.9674 -0.0901 -0.1668 -0.1271 -0.8807 -0.1933 -0.1174 -0.1159 -0.1009 -0.1089 -0.1763 -0.2215 -0.0840 -0.1089 -0.0978 -0.1633 -0.1591 -0.2047 -0.1024 -0.0934 -0.1312 -0.1504 -0.1645 -0.1955 -0.1156 -0.0559 -0.1273 -0.1351 -0.1656 -0.1845 -0.0960 -0.0888 -0.0835 -0.1004 -0.1421 -0.1394 -0.1099 -0.0660 -0.0809 -0.1146 -0.1614 -0.1833 -0.0784 -0.1158 -0.0806 -0.1051 -0.1677 -0.1933 -0.1126 -0.0763 -0.1146 -0.0963 -0.1617 -0.2024 -0.0986 -0.0520 -0.0851 -0.0881 -0.1473 -0.1593 -0.0772 -0.0457 -0.1787 -0.0968 -0.2321 -0.1206 -0.1318 -0.2215 -0.5586 -0.5376 -0.1202 -0.2892 -0.2057 -0.0943 -0.3087 -0.1412 -0.0715 -0.1178 -1.1234 -0.6898 -0.1966 -1.1626 -0.1158 -0.0921 -0.0666 -0.1113 -2.0785 -1.8951 -0.1147 -1.6435
S-117	<s> public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); /* for(int i = word.length() - 2; i >= 0; i--) { */ <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return ""; } </s> java
T-117	<s> public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); /* for(int i = word.length() - 2; i >= 0; i--) { */ <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return ""; } </s> java
H-117	-0.35470113158226013	public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); /* for(int i = word.length() - 2; i >= 0; i--) { */ <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word. substring(i, i + 1); } } } return ""; }
D-117	-0.35470113158226013	public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); /* for(int i = word.length() - 2; i >= 0; i--) { */ <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word. substring(i, i + 1); } } } return ""; }
P-117	-0.7017 -0.0485 -2.2478 -0.0867 -0.0910 -0.0175 -0.0354 -0.0873 -0.0481 -0.0231 -0.0264 -0.4253 -0.1041 -0.0783 -1.9388 -0.0768 -0.1899 -1.1365 -0.6145 -0.1492 -0.1024 -0.7594 -0.1075 -0.2373 -0.0754 -3.3607 -1.2205 -0.3413 -0.0322 -0.1761 -0.0183 -0.0926 -0.0703 -1.1713 -0.1918 -0.0312 -1.1223 -0.0205 -0.0981 -0.1930 -0.1319 -0.0726 -0.1821 -0.1353 -0.1045 -0.1930 -0.1617 -0.0866 -0.1488 -0.1535 -0.0410 -0.1179 -0.1581 -0.0433 -0.1265 -0.1578 -0.0756 -0.1098 -0.1471 -0.1050 -0.1520 -0.1537 -0.0793 -0.1324 -0.1257 -0.0473 -0.1405 -0.1156 -0.0332 -0.3383 -1.5299 -0.1302 -0.2065 -0.4519 -0.0842 -0.1095 -0.0377 -0.1093 -0.0895 -0.7020 -0.1084 -0.5393 -0.0896 -0.0540 -0.2395 -0.0904 -0.1443 -0.0804 -1.3273 -0.2424 -0.1620 -0.1495 -0.1428 -0.7116 -0.1630 -0.0321 -0.0239 -0.1093 -1.0185 -0.5643 -0.2258 -0.1069 -0.7456 -0.4436 -0.2764 -0.7182 -0.0847 -0.1937 -1.5763 -0.0705 -0.0319 -0.0304 -0.1057 -1.0715 -0.4987 -0.2045 -0.1053 -0.8970 -0.3611 -0.1809 -0.4551 -0.9577 -0.4187 -0.1030 -0.0662 -0.0303 -0.0305 -0.1063 -0.9098 -0.5486 -0.2180 -0.1085 -0.8539 -0.2979 -0.1590 -0.1817 -0.1736 -0.2557 -0.1006 -0.1493 -0.0540 -0.1083 -0.6900 -0.6080 -0.2075 -0.6182 -0.2501 -0.2659 -0.9538 -0.1190 -0.1279 -0.1404 -0.0771 -2.6170 -0.1087 -3.5714
S-131	<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } /* Collections.reverse(opening_brackets); int cnt = 0, i = 0, l = opening_brackets.size(); for(int idx : closing_brackets) { if(i < l || idx >= opening_brackets.get(i)) { */ <mask> i++; cnt++; } } return cnt >= 2; } </s> java
T-131	<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } /* Collections.reverse(opening_brackets); int cnt = 0, i = 0, l = opening_brackets.size(); for(int idx : closing_brackets) { if(i < l || idx >= opening_brackets.get(i)) { */ <mask> i++; cnt++; } } return cnt >= 2; } </s> java
H-131	-0.3497314751148224	public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } /* Collections.reverse(opening_brackets); int cnt = 0, i = 0, l = opening_brackets.size(); for(int idx : closing_brackets) { if(i < l || idx >= opening_brackets.get(i)) { */ <mask> i++; cnt++; } } return cnt >= 2; } </s> java.lang.System.out . println () ; return cnt >= 2; }
D-131	-0.3497314751148224	public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } /* Collections.reverse(opening_brackets); int cnt = 0, i = 0, l = opening_brackets.size(); for(int idx : closing_brackets) { if(i < l || idx >= opening_brackets.get(i)) { */ <mask> i++; cnt++; } } return cnt >= 2; } </s> java.lang.System.out . println () ; return cnt >= 2; }
P-131	-0.8126 -0.0393 -0.1030 -0.0581 -0.0851 -0.0267 -0.4011 -0.0988 -0.2573 -1.6618 -0.0893 -2.3821 -0.4432 -0.0656 -0.1527 -0.0215 -0.1041 -0.0705 -0.0346 -0.0831 -0.0680 -1.4182 -0.2404 -1.3401 -0.2212 -0.0560 -0.1366 -0.0330 -0.0873 -0.0737 -0.0414 -0.0891 -0.0673 -1.3218 -0.1477 -0.1529 -0.4144 -0.8890 -0.0767 -0.0883 -1.0813 -0.0920 -0.0863 -0.2154 -0.1053 -0.0887 -1.8079 -0.0896 -0.9565 -0.0963 -0.1071 -0.6818 -0.1949 -0.0387 -0.1266 -1.0948 -0.2742 -0.4043 -0.6567 -0.0986 -0.0946 -0.1733 -0.0590 -0.0932 -0.0885 -0.0507 -0.1141 -0.3179 -0.5244 -0.3764 -1.0868 -0.1561 -0.0412 -0.0870 -0.0792 -0.0577 -0.1247 -0.2786 -0.4167 -0.1803 -0.7868 -0.0755 -2.7083 -1.0403 -0.0986 -0.0772 -0.2273 -0.0226 -0.0342 -0.0838 -0.0657 -0.0447 -1.3367 -0.1710 -0.1096 -0.0974 -1.3561 -0.1191 -0.1108 -0.6104 -0.0526 -0.0828 -0.0306 -0.1066 -0.0761 -0.0549 -0.1284 -0.2150 -1.8977 -0.1473 -0.3975 -0.6105 -0.0449 -0.0809 -0.0337 -0.0963 -0.0792 -0.0470 -1.4350 -0.1004 -0.1371 -0.5172 -0.3754 -0.1263 -0.0626 -0.1897 -0.0374 -0.0739 -0.0288 -0.1077 -0.0814 -0.0612 -0.1236 -0.2872 -0.2306 -0.3533 -0.6971 -0.0879 -1.2101 -0.1080 -0.1219 -0.1180 -0.0864 -0.4926 -0.1122 -0.9447 -0.1019 -0.0758 -0.0989 -0.1353 -0.0889 -0.5657 -0.1254 -3.0486 -0.0862 -0.2636 -0.1749 -0.2208 -0.0435 -0.1670 -1.7561 -0.1074 -0.0521 -1.0095 -0.0408 -0.8091 -0.2956 -0.7596 -0.4952 -0.2776 -0.7831 -0.1268 -0.4766
S-20	<s> public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ /* for (int j = 0; j < numbers.length; j += 1){ */ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; } </s> java
T-20	<s> public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ /* for (int j = 0; j < numbers.length; j += 1){ */ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; } </s> java
H-20	-0.38555869460105896	<s> public static double[] find_closest_elements(double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ /* for (int j = 0; j < numbers.length; j += 1){ */ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } return result; }
D-20	-0.38555869460105896	<s> public static double[] find_closest_elements(double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ /* for (int j = 0; j < numbers.length; j += 1){ */ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } return result; }
P-20	-1.9263 -0.2294 -0.2206 -0.1000 -0.0793 -0.1370 -2.0812 -0.0517 -0.0907 -0.1348 -0.0894 -0.0236 -0.8090 -0.6365 -1.5548 -0.0629 -1.8561 -0.0897 -0.1298 -2.4209 -0.0677 -0.0793 -0.0754 -0.0770 -0.2366 -1.9533 -0.1061 -0.0279 -0.0954 -0.1427 -0.0897 -0.0369 -0.0855 -0.0359 -1.5110 -0.1700 -0.1273 -0.7131 -0.0920 -0.0889 -1.3720 -0.0875 -0.0944 -0.0903 -0.0780 -0.0633 -0.6143 -0.0766 -0.0612 -0.1567 -0.8456 -1.4977 -0.1321 -0.1401 -0.2574 -0.1012 -0.1037 -0.9347 -0.1058 -0.0659 -0.0707 -0.1005 -0.0635 -0.2477 -0.0901 -0.0473 -0.1260 -0.6107 -0.3859 -0.1265 -0.1046 -0.1747 -0.1083 -0.0758 -0.0802 -0.0312 -0.0992 -2.2907 -0.1011 -0.0561 -1.4966 -0.2419 -0.6345 -0.4525 -0.2753 -0.1187 -0.0522 -0.3219 -0.1600 -0.4710 -0.1387 -0.1294 -0.5481 -0.0909 -0.0290 -0.1038 -0.0336 -1.7336 -0.0791 -0.1607 -0.0879 -0.0878 -0.0391 -0.7559 -0.1543 -0.1325 -0.2898 -0.5370 -0.2282 -0.1468 -0.1241 -0.0559 -0.3949 -0.1286 -0.2174 -1.4430 -0.1238 -0.7645 -0.1009 -0.0774 -0.6622 -0.3871 -2.0410 -0.1117 -0.5318 -0.0867 -0.0688 -0.4661 -0.1249 -1.8224 -0.0966 -0.0856 -0.6007 -0.0768 -0.6292 -0.1004 -0.0704 -0.5939 -0.1908 -1.8374 -0.0895 -0.5506 -0.0909 -0.0549 -0.5880 -0.2551 -1.6996 -0.0950 -0.1200 -0.2418 -0.1312 -0.0750 -0.6306 -0.0873 -0.9019
S-102	<s> public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { /* avg_rounded = (int) Math.ceil(avg); */ <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); } </s> java
T-102	<s> public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { /* avg_rounded = (int) Math.ceil(avg); */ <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); } </s> java
H-102	-0.36887630820274353	public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { /* avg_rounded = (int) Math.ceil(avg); */ <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }
D-102	-0.36887630820274353	public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { /* avg_rounded = (int) Math.ceil(avg); */ <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }
P-102	-1.2342 -0.0393 -1.9094 -0.0443 -0.0972 -0.0453 -0.5137 -0.5473 -0.0849 -0.7563 -0.1012 -0.1748 -1.6014 -0.0891 -0.3497 -0.6404 -0.3005 -0.1005 -0.0927 -0.9318 -0.0574 -0.0540 -0.0257 -0.9719 -1.1310 -0.0586 -0.0344 -0.1019 -1.7198 -0.1943 -0.3980 -0.3199 -0.0729 -0.0906 -0.1262 -0.6206 -0.0890 -0.1154 -0.5946 -0.2981 -0.8765 -0.1194 -1.2345 -0.0927 -0.0653 -0.0428 -0.0551 -0.1171 -0.7373 -0.0716 -0.2372 -0.0946 -0.1181 -0.6466 -0.2101 -0.6244 -0.0804 -0.0278 -0.3274 -0.2052 -0.2696 -0.2204 -0.1285 -0.5580 -0.1758 -0.1069 -0.4333 -0.2179 -0.4944 -0.2743 -0.1258 -0.1043 -0.1427 -0.0901 -2.4146 -0.1071 -0.1853 -0.4540 -0.0692 -1.2417 -0.3479 -0.0595 -0.0985 -0.1029 -0.0378 -0.1051 -1.1406 -0.1182 -0.9041 -0.0229 -0.0772 -0.0227 -0.9228 -0.1108 -1.9872 -0.0248 -0.1177 -0.0758 -0.0496 -0.1285 -0.1150 -0.2387 -0.6934 -1.9308 -0.1019 -0.7671 -0.3315 -0.0715 -0.5261 -0.2336 -0.1276 -0.1681 -0.0897 -0.1515 -0.1225 -0.1215 -0.1150 -0.1202 -0.0868 -0.0525 -0.1261 -0.1069 -0.1850 -0.7168 -1.8526 -0.1001 -0.8403 -0.4456 -0.1020 -0.6865 -0.1216 -0.1200 -0.7895 -0.0938 -0.0802 -0.0329 -0.0615 -1.0099 -0.1375 -0.0958 -0.1042 -0.0330 -1.0579 -0.0945 -1.3471
S-111	<s> public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = ""; for(int i = 0; i < s.length(); i++) { /* if(c.indexOf(s.charAt(i)) != -1) { */ <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; } </s> java
T-111	<s> public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = ""; for(int i = 0; i < s.length(); i++) { /* if(c.indexOf(s.charAt(i)) != -1) { */ <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; } </s> java
H-111	-0.4562627077102661	public static ArrayList<Object> reverse_delete(String s, String c ) { String new_s = ""; for(int i = 0; i < s.length(); i++) { /* if(c.indexOf(s.charAt(i)) != -1) { */ <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res ; }
D-111	-0.4562627077102661	public static ArrayList<Object> reverse_delete(String s, String c ) { String new_s = ""; for(int i = 0; i < s.length(); i++) { /* if(c.indexOf(s.charAt(i)) != -1) { */ <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res ; }
P-111	-0.8097 -0.0501 -1.5360 -0.4094 -0.0690 -0.1340 -0.0309 -0.0826 -0.0751 -0.5753 -0.1173 -0.1235 -1.3607 -1.6417 -0.1331 -1.9936 -0.0930 -2.4068 -0.1041 -0.1050 -0.0854 -0.0846 -2.4017 -0.1365 -0.4280 -0.6123 -0.0904 -0.1001 -1.1516 -0.0895 -0.1019 -0.1962 -0.1183 -0.1028 -2.0460 -0.0955 -0.9390 -0.0860 -2.4323 -0.1795 -0.3494 -0.1986 -0.1131 -1.0861 -0.2618 -0.2930 -0.1019 -0.9466 -0.2225 -0.3261 -1.1299 -0.1335 -0.1862 -0.0959 -1.2890 -0.1613 -0.1057 -0.1182 -0.0812 -0.0865 -0.0825 -0.0458 -0.1247 -0.1074 -1.0071 -0.2797 -0.2862 -1.3005 -0.1258 -0.1161 -2.1514 -0.0566 -0.0861 -0.0714 -0.1025 -2.0561 -0.0855 -0.4180 -0.6206 -0.0813 -0.1039 -0.1886 -0.1222 -0.0803 -0.1132 -0.1172 -0.9957 -0.1106 -0.8082 -0.0764 -0.0637 -0.4925 -0.0882 -0.6311 -0.1013 -0.1658 -0.0947 -0.0786 -0.0507 -0.1169 -0.1063 -0.0812 -0.1119 -0.9228 -0.3027 -0.2768 -1.2505 -0.0914 -1.4271 -0.4326 -0.0766 -0.1783 -0.1081 -0.0964 -0.0796 -0.7760 -0.2455 -0.1927 -0.1156 -0.2630 -0.7001 -0.9307 -0.1000 -0.0991 -2.8289 -0.1808 -0.1133 -0.2828 -0.7504 -0.3044 -0.1007 -0.0801 -0.1338 -1.4507 -1.0659 -0.5441 -0.1026 -0.0868 -1.7307 -0.2445 -0.1141 -1.4756 -0.1045 -0.6223
S-37	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; /* int[] evens = new int[1 + (int) (l.length / 2.)]; */ <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; } </s> java
T-37	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; /* int[] evens = new int[1 + (int) (l.length / 2.)]; */ <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; } </s> java
H-37	-0.3396180272102356	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; /* int[] evens = new int[1 + (int) (l.length / 2.)]; */ <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }
D-37	-0.3396180272102356	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; /* int[] evens = new int[1 + (int) (l.length / 2.)]; */ <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }
P-37	-1.5930 -0.1948 -0.2276 -0.1335 -0.0581 -0.1291 -2.1888 -0.0394 -0.0885 -0.0265 -0.4192 -0.5907 -1.7342 -0.0776 -1.6067 -0.0815 -0.1629 -2.2894 -0.1181 -0.1003 -0.0787 -0.0860 -0.5480 -0.1331 -0.1007 -0.0772 -1.6653 -1.2067 -0.0768 -1.3761 -0.0714 -0.0254 -0.1228 -0.0701 -0.0752 -0.1026 -0.0504 -0.1393 -0.2301 -0.3163 -0.1328 -0.1122 -0.0969 -0.0441 -0.0715 -0.2644 -0.2083 -0.9722 -0.4203 -0.1246 -0.0772 -0.1488 -0.1149 -0.1379 -0.3024 -0.0950 -0.0970 -1.1194 -0.1007 -0.0921 -0.1442 -0.0948 -0.0708 -0.5043 -0.0954 -0.0604 -0.4861 -0.0858 -0.1659 -0.0324 -0.1133 -0.1276 -0.3804 -0.1009 -0.1150 -0.1486 -0.1280 -0.0737 -0.4193 -0.3040 -1.5195 -0.0869 -1.2343 -0.0941 -0.0478 -1.0689 -0.3174 -0.0247 -1.4000 -0.1233 -0.1375 -0.3528 -0.0965 -0.1062 -1.0466 -0.1023 -0.0894 -0.0908 -0.0991 -0.0778 -0.3914 -0.0851 -0.0506 -1.9824 -0.1008 -0.1078 -0.1442 -0.7978 -0.1576 -0.0488 -0.1293 -0.5176 -0.1029 -0.7974 -0.2191 -0.2280 -0.1250 -0.0920 -0.0310 -0.0884 -0.1081 -0.3378 -0.1027 -0.0731 -0.0735 -1.6241 -0.0774 -0.0653 -0.4879 -0.1010 -0.5328 -0.1721 -0.2108 -0.1009 -0.1144 -0.4049 -0.1933 -1.7822 -0.0959 -0.0961 -0.1208 -0.0954 -0.8590 -0.0930 -0.2139
S-21	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } /* else if (numbers[i] < min) { */ <mask> min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; } </s> java
T-21	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } /* else if (numbers[i] < min) { */ <mask> min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; } </s> java
H-21	-0.3605048656463623	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } if (numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }
D-21	-0.3605048656463623	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } if (numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }
P-21	-2.0571 -0.2047 -0.2060 -0.1006 -0.0786 -0.1367 -1.7710 -0.0533 -0.0278 -0.0818 -0.0642 -0.0998 -0.0297 -0.6107 -0.3991 -1.5395 -0.0502 -1.9778 -0.1389 -0.1134 -0.0948 -0.2201 -0.0952 -0.0645 -0.0942 -0.0421 -1.0260 -0.0643 -0.0449 -0.0808 -0.1654 -0.0932 -0.0229 -0.0883 -0.0429 -1.4001 -0.4256 -0.1193 -0.6209 -0.0846 -0.0828 -1.4567 -0.0890 -0.0929 -0.0756 -0.0920 -0.0844 -0.6757 -0.0803 -0.0626 -1.4337 -0.0920 -0.1274 -0.1283 -0.1695 -0.6892 -0.2815 -0.1833 -0.1414 -0.0767 -0.9615 -0.0939 -0.0869 -0.1682 -0.0649 -0.7280 -0.2233 -1.6736 -0.0748 -1.4556 -0.1324 -0.2030 -0.6334 -0.1882 -0.1707 -0.0800 -0.0895 -1.4151 -0.0949 -1.2116 -0.2092 -0.0487 -0.6581 -0.1825 -1.7257 -0.0693 -0.1503 -0.1384 -2.1875 -0.0740 -0.1199 -0.0690 -0.0765 -0.5171 -0.2006 -0.0946 -0.1017 -1.4367 -0.0779 -0.1204 -0.4312 -0.0877 -0.0882 -1.0874 -0.0972 -0.0736 -0.0598 -0.0958 -0.0814 -0.3751 -0.0793 -0.0611 -1.6867 -0.0894 -0.0986 -0.6454 -0.1852 -0.2011 -0.1322 -0.1264 -0.1062 -0.8106 -0.1651 -0.2546 -0.0828 -0.1047 -0.9474 -0.0669 -0.1058 -0.1339 -0.0601 -0.0558 -1.2801 -0.0815 -0.0917 -0.0733 -0.6767 -0.0915 -0.3851
S-113	<s> public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { /* s += num; */ <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; } </s> java
T-113	<s> public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { /* s += num; */ <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; } </s> java
H-113	-0.29761049151420593	public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { /* s += num; */ <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }
D-113	-0.29761049151420593	public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { /* s += num; */ <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }
P-113	-0.6436 -0.0319 -0.0527 -0.0525 -0.1055 -0.0310 -0.0255 -0.0889 -0.0935 -0.4868 -0.0215 -0.2193 -0.0262 -0.1594 -0.0527 -1.5526 -0.0832 -0.0544 -0.0668 -0.1017 -0.0615 -0.0880 -0.7614 -0.0676 -0.0651 -0.0953 -0.9227 -0.1742 -0.3743 -0.3635 -0.0809 -0.0686 -0.0452 -1.3126 -0.0821 -1.7131 -0.0613 -0.0388 -0.0628 -0.2857 -0.1349 -0.1127 -0.1084 -0.1009 -0.1362 -0.3815 -0.1933 -0.0924 -0.7204 -0.0916 -0.0659 -0.1727 -0.4905 -0.1005 -0.0681 -0.0920 -0.0643 -0.1716 -1.2947 -0.1003 -0.0885 -0.3392 -0.1360 -0.7673 -0.0619 -0.0955 -0.0893 -1.0676 -0.1285 -0.1880 -0.7884 -0.3069 -0.0955 -0.0919 -0.0903 -0.8926 -0.1149 -0.2229 -0.1110 -0.0630 -0.1132 -0.2055 -0.2275 -0.1072 -0.3157 -0.3016 -0.1754 -0.3937 -0.3385 -0.0939 -0.0989 -1.4200 -0.1006 -0.1327 -0.0627 -0.1026 -0.1795 -2.1671 -0.0986 -1.3738 -0.0965 -0.0794 -0.1018 -0.0614 -0.1179 -1.7481 -0.0944 -0.1082 -0.4138 -0.2947 -0.0960 -0.0747 -0.8400 -0.2278 -0.2649 -0.1020 -0.3935 -0.3904 -0.3626 -0.6680 -0.1001 -0.1378 -0.1575 -0.0706 -0.1143 -0.0749 -0.1067 -0.2469 -0.1362 -0.0863 -0.0672 -1.3730 -0.1202 -0.0584 -0.0983 -0.0898 -1.4080 -0.0845 -1.1853
S-33	<s> public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ /* result.add(thirds.get(i)); */ <mask> } else{ result.add(l.get(i)); } } return result; } </s> java
T-33	<s> public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ /* result.add(thirds.get(i)); */ <mask> } else{ result.add(l.get(i)); } } return result; } </s> java
H-33	-0.378865122795105	public static List<Integer> sort_third(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0 ) { result.add(thirds.get(i)); } else{ result.add(l.get(i)); } } return result ; }
D-33	-0.378865122795105	public static List<Integer> sort_third(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0 ) { result.add(thirds.get(i)); } else{ result.add(l.get(i)); } } return result ; }
P-33	-1.1797 -0.0517 -0.3499 -0.3897 -0.0562 -0.1409 -0.0485 -0.0808 -0.0222 -0.3894 -0.0689 -0.3035 -0.0478 -0.1652 -0.0548 -1.8313 -0.0974 -0.3344 -0.3330 -0.0531 -0.1641 -0.1028 -0.0936 -0.0704 -1.8075 -0.1973 -0.0504 -1.1651 -0.2208 -0.2180 -0.0510 -0.1629 -0.0683 -0.0504 -0.0271 -0.0945 -0.0544 -1.4711 -0.1777 -0.0447 -1.1805 -0.1017 -0.1288 -0.8890 -0.0869 -0.0912 -1.3712 -0.0920 -0.1159 -0.1325 -0.1024 -0.2520 -1.8169 -0.0921 -0.0500 -0.1037 -1.3855 -0.3200 -0.0423 -0.0376 -0.1346 -0.3790 -0.7183 -0.1595 -0.1049 -0.3291 -0.3957 -0.4482 -0.9904 -0.1125 -1.3638 -0.0975 -0.0440 -1.0555 -0.3314 -0.0585 -0.0359 -1.9127 -0.1290 -0.1307 -0.5970 -0.0957 -0.0922 -1.0476 -0.0956 -0.0982 -0.0645 -0.1069 -0.2180 -1.5819 -0.0886 -0.0457 -0.2009 -1.0709 -0.1650 -0.1398 -1.5535 -0.1898 -0.0810 -0.1006 -1.9345 -0.9081 -0.1466 -1.2227 -0.1245 -0.3816 -0.4720 -0.0830 -0.0563 -0.0380 -0.1099 -0.3167 -0.2987 -0.2258 -0.7118 -0.8143 -0.0381 -1.2532 -0.0848 -0.1133 -0.2904 -0.4083 -0.0791 -0.1032 -0.2498 -0.3049 -0.2176 -0.5563 -0.0864 -0.0723 -0.1169 -0.0740 -1.5018 -0.0808 -0.4239
S-98	<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; /* if (value.substring(value.length() - 2).equals(".5")) { result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); */ <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; } </s> java
T-98	<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; /* if (value.substring(value.length() - 2).equals(".5")) { result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); */ <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; } </s> java
H-98	-0.33075153827667236	public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value. substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; /* if (value. substring(value.length() - 2).equals(".5")) { result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); */ <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }
D-98	-0.33075153827667236	public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value. substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; /* if (value. substring(value.length() - 2).equals(".5")) { result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); */ <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }
P-98	-1.2833 -0.0335 -0.1025 -0.0233 -0.0865 -0.0223 -0.3507 -0.0807 -0.0648 -1.7312 -0.0800 -0.2640 -0.1207 -0.5368 -0.1287 -0.9145 -0.1110 -0.1537 -0.1069 -0.4715 -0.0814 -0.4193 -0.1175 -0.3721 -0.1108 -0.8486 -0.3504 -0.1614 -0.1053 -0.1196 -0.8991 -0.1654 -0.9375 -0.1197 -0.3589 -0.2339 -0.1229 -0.1383 -0.0587 -0.0948 -0.4873 -0.6160 -0.0948 -0.1047 -0.1008 -0.8281 -0.1932 -0.4895 -0.1457 -0.1108 -0.0883 -0.0924 -0.1253 -0.0958 -0.8619 -0.7339 -0.5698 -2.0854 -0.3353 -0.0750 -0.0941 -1.1410 -1.5964 -0.1551 -0.1323 -0.2411 -0.1053 -0.7579 -0.2021 -0.1261 -0.1032 -0.0975 -0.4577 -0.1366 -0.0656 -1.1637 -0.2205 -0.0469 -0.8076 -0.0970 -0.1387 -0.1080 -0.0838 -0.1871 -0.1091 -0.0568 -0.1145 -0.2222 -0.6492 -0.0662 -0.1124 -0.2254 -0.3387 -0.2368 -0.7209 -0.0746 -0.1109 -0.1712 -0.4032 -0.0504 -0.1048 -0.5628 -0.2590 -0.1500 -0.7485 -1.1129 -0.1261 -0.1127 -0.1018 -0.1215 -0.1147 -0.0852 -0.1290 -0.3157 -0.1236 -0.1265 -0.6517 -0.1335 -0.2509 -0.1313 -0.1158 -0.1309 -0.1714 -0.5889 -0.0633 -0.1090 -0.1516 -0.4864 -0.2367 -1.3423 -0.9999 -0.2339 -0.0755 -1.3165 -0.1036 -0.7500
S-155	<s> public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0) { /* result += sym[i]; */ <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java
T-155	<s> public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0) { /* result += sym[i]; */ <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java
H-155	-0.45570728182792664	public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0 ) { /* result += sym[i]; */ <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java.lang.String [] result = new java.lang.String [ num.length ] ; return result ; }
D-155	-0.45570728182792664	public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0 ) { /* result += sym[i]; */ <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java.lang.String [] result = new java.lang.String [ num.length ] ; return result ; }
P-155	-1.0020 -0.0503 -1.8561 -0.0834 -0.0973 -0.0554 -0.0836 -0.0229 -0.0955 -0.0069 -0.0260 -0.5073 -0.6716 -0.0431 -1.8631 -0.0844 -0.1958 -2.3113 -0.0366 -0.0903 -0.0688 -0.0831 -1.2779 -0.4511 -0.1249 -0.0988 -0.2070 -0.0893 -0.0680 -0.0436 -0.0833 -0.1760 -0.2510 -0.0579 -0.0364 -0.0603 -0.2201 -0.0328 -0.1354 -1.4134 -1.4469 -0.1043 -0.0971 -0.0706 -1.1153 -1.1907 -0.0952 -0.0966 -0.0460 -1.3214 -0.0984 -0.0094 -1.2118 -0.1112 -0.0417 -1.2387 -0.1184 -0.0179 -1.4076 -0.1046 -0.0302 -1.1161 -0.1076 -0.0364 -0.0618 -1.4843 -0.1093 -0.4130 -1.6776 -0.1055 -0.0319 -0.0466 -1.4850 -0.1143 -0.1034 -1.6513 -0.1092 -0.0449 -1.5637 -0.0959 -0.0447 -1.4361 -0.0981 -0.0204 -1.3213 -0.0953 -0.0615 -0.0707 -0.5348 -0.2359 -0.1183 -0.0980 -0.0591 -0.9130 -1.6860 -0.1233 -0.0989 -1.9367 -0.0722 -0.1330 -0.2788 -0.1218 -2.1279 -0.4707 -0.0823 -1.8595 -0.0945 -0.0422 -0.1355 -0.2216 -0.2334 -1.5880 -0.1440 -0.1005 -0.1347 -0.1025 -0.0978 -0.0820 -0.0385 -0.0386 -0.2353 -0.1749 -1.8585 -0.0755 -0.0076 -0.4678 -0.1170 -0.0995 -0.0926 -0.1056 -0.2177 -1.3604 -0.0986 -2.8431 -0.0862 -0.3200 -0.2057 -0.1659 -0.0305 -0.1503 -0.7580 -1.0251 -2.2194 -0.1258 -0.1994 -0.2650 -0.0591 -0.1219 -0.0724 -0.0362 -1.6157 -1.1997 -0.0459 -0.0093 -0.2470 -2.1231 -0.5773 -0.0725 -2.0568 -0.1118 -0.0692
S-146	<s> public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; /* for (int i = 0; i < n-2; i += 1) { for (int j = 0; j < n-1; j += 1) { for (int k = 0; k < n; k += 1) { */ <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result; } </s> java
T-146	<s> public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; /* for (int i = 0; i < n-2; i += 1) { for (int j = 0; j < n-1; j += 1) { for (int k = 0; k < n; k += 1) { */ <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result; } </s> java
H-146	-0.3603871166706085	public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; /* for (int i = 0; i < n-2; i += 1) { for (int j = 0; j < n-1; j += 1) { for (int k = 0; k < n; k += 1) { */ <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result ; }
D-146	-0.3603871166706085	public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; /* for (int i = 0; i < n-2; i += 1) { for (int j = 0; j < n-1; j += 1) { for (int k = 0; k < n; k += 1) { */ <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result ; }
P-146	-0.9199 -0.0410 -0.1204 -0.1069 -0.0869 -0.0488 -0.0885 -0.0605 -0.0223 -0.6023 -0.5672 -0.0762 -1.5180 -0.0833 -0.1407 -2.6573 -0.0598 -0.0899 -0.0723 -0.0690 -0.5644 -0.2918 -1.9051 -0.2140 -0.1279 -0.3291 -0.1074 -0.1064 -1.3019 -0.0893 -0.1161 -0.1037 -0.8466 -0.0893 -0.0718 -1.6854 -0.1764 -0.6668 -0.2515 -0.2001 -0.6562 -0.1282 -0.1247 -0.0561 -0.1421 -0.1975 -0.1248 -0.1252 -0.9064 -0.0886 -0.0871 -0.0984 -0.7026 -1.2043 -0.0913 -0.1396 -0.1587 -0.0993 -0.1123 -0.5172 -0.0868 -0.0847 -0.0865 -0.2470 -0.6694 -0.0773 -0.0725 -1.3787 -0.0860 -0.0882 -0.1387 -0.2213 -0.1509 -0.1227 -0.6198 -0.1071 -0.0826 -0.0750 -0.1740 -0.0829 -0.0762 -1.7763 -0.0782 -0.1274 -0.1395 -0.2734 -0.1249 -0.1269 -0.5802 -0.1063 -0.0800 -0.0939 -0.3522 -0.0949 -0.0618 -1.7755 -0.0787 -1.7607 -0.1735 -0.1158 -0.1263 -0.0994 -3.2404 -0.1263 -0.8058 -0.4484 -0.2979 -0.0978 -0.0576 -0.3489 -0.1309 -0.2644 -0.1387 -0.0521 -0.3132 -0.0819 -0.3619 -0.1204 -0.0716 -0.1443 -1.1066 -0.1424 -0.0595 -1.1799 -0.1504 -0.1000 -0.0993 -0.1176 -0.0895 -1.6497 -0.1036 -0.3600
S-63	<s> public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } /* if (str_chars[str_chars.length - 1] == 'y') */ <mask> result += 1; return result; } </s> java
T-63	<s> public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } /* if (str_chars[str_chars.length - 1] == 'y') */ <mask> result += 1; return result; } </s> java
H-63	-0.2551873028278351	public static int vowels_count(String str ) { int result = 0; char [] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } return result ; }
D-63	-0.2551873028278351	public static int vowels_count(String str ) { int result = 0; char [] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } return result ; }
P-63	-0.3787 -0.0387 -0.1168 -0.0158 -0.0849 -0.0662 -0.4310 -0.0845 -0.0756 -1.9737 -0.0864 -0.1870 -0.0889 -0.0851 -0.8759 -0.1209 -2.5173 -0.0650 -0.0785 -0.0625 -0.0807 -0.0571 -0.1160 -0.0771 -0.0436 -2.0459 -0.1368 -0.1161 -0.3693 -0.0892 -0.0702 -0.0782 -0.0967 -0.0862 -1.2357 -0.0930 -0.1238 -0.1340 -0.9630 -0.1599 -0.0916 -0.0753 -0.0974 -0.1221 -0.1896 -0.1653 -0.0836 -0.1299 -0.0981 -0.1263 -0.1515 -0.1668 -0.1037 -0.0703 -0.1478 -0.1461 -0.1591 -0.1626 -0.1072 -0.0497 -0.1107 -0.1119 -0.1507 -0.1464 -0.0857 -0.0587 -0.0910 -0.1029 -0.1503 -0.1330 -0.1091 -0.0821 -0.1001 -0.1017 -0.1565 -0.1506 -0.0931 -0.0789 -0.0923 -0.1114 -0.1662 -0.1608 -0.1223 -0.0726 -0.1401 -0.1144 -0.1418 -0.1429 -0.1059 -0.0470 -0.1092 -0.0968 -0.1453 -0.1244 -0.1053 -0.0593 -0.4694 -0.2636 -0.0824 -1.9376 -0.1370 -2.0106 -0.1213 -1.0616 -0.0958 -0.7494
S-106	<s> public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { /* if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; */ <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; } </s> java
T-106	<s> public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { /* if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; */ <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; } </s> java
H-106	-0.3162960410118103	public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { /* if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; */ <mask> } return new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); }
D-106	-0.3162960410118103	public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { /* if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; */ <mask> } return new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); }
P-106	-0.8233 -0.0569 -1.9135 -0.4031 -0.0609 -0.1316 -0.1460 -0.1037 -0.0071 -0.0935 -0.0285 -0.0152 -0.5195 -0.8785 -0.0679 -1.6641 -0.0761 -0.1699 -0.1961 -0.1121 -0.0333 -0.0200 -0.1083 -0.0593 -0.0835 -0.8146 -0.0673 -0.1078 -0.0405 -0.0180 -0.0954 -0.0621 -0.0998 -0.6110 -0.1438 -0.6170 -0.5715 -0.0925 -0.0920 -1.8218 -0.1113 -0.0871 -0.1105 -0.6999 -0.1015 -1.4128 -0.0902 -2.2823 -0.1182 -0.4366 -0.5018 -0.1436 -0.4221 -0.0708 -0.1286 -0.3303 -0.0817 -0.1082 -0.0321 -0.0194 -0.7591 -0.5949 -1.2147 -0.1393 -0.1169 -0.0431 -0.0230 -0.1115 -0.0717 -0.5540 -0.1000 -0.0830 -0.6084 -0.1776 -0.1588 -0.3322 -0.0807 -0.2931 -0.1516 -0.0532 -0.1050 -0.0374 -0.0214 -0.5762 -0.2419 -0.9421 -0.1247 -0.0900 -0.0335 -0.0271 -0.0918 -0.0629 -0.3031 -0.8820 -0.1602 -0.1355 -0.1436 -0.1767 -1.1647 -0.1019 -1.1357 -0.2798 -0.0114 -0.0981 -0.3273 -0.5716 -0.3070 -0.1046 -0.0240 -0.0237 -0.1030 -0.0708 -0.7832 -0.0970 -0.0987 -0.0513 -0.0214 -0.0856 -0.0577 -1.3519 -0.1100 -1.4694
S-58	<s> public static int[] common(int[] l1, int[] l2) { /* ArrayList<Integer> common = new ArrayList<Integer>(); */ <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; } </s> java
T-58	<s> public static int[] common(int[] l1, int[] l2) { /* ArrayList<Integer> common = new ArrayList<Integer>(); */ <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; } </s> java
H-58	-0.3840268552303314	<s> public static int[] common(int[] l1, int[] l2) { /* ArrayList<Integer> common = new ArrayList<Integer>(); */ <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } return result; }
D-58	-0.3840268552303314	<s> public static int[] common(int[] l1, int[] l2) { /* ArrayList<Integer> common = new ArrayList<Integer>(); */ <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } return result; }
P-58	-1.6832 -0.3200 -0.2626 -0.1365 -0.0588 -0.1233 -2.1270 -0.0455 -0.5106 -0.5960 -1.4501 -0.0678 -0.3214 -0.0832 -1.4213 -0.0611 -0.2422 -0.0830 -2.3675 -0.7929 -0.2119 -0.0487 -0.1347 -0.0627 -0.1163 -0.0585 -1.2840 -0.1460 -0.0397 -0.5128 -0.2943 -0.1435 -0.1319 -0.1457 -0.1754 -0.1313 -0.3787 -0.0875 -0.0939 -1.1717 -0.0811 -0.0884 -0.0798 -0.0408 -0.0747 -0.7056 -0.0735 -0.0625 -0.1915 -0.7883 -0.1131 -0.1228 -0.2530 -0.0896 -0.1018 -0.8739 -0.1031 -0.0577 -0.0614 -0.0176 -0.0702 -0.2954 -0.0803 -0.0674 -0.1384 -0.9236 -0.1194 -0.1301 -0.3145 -0.6039 -0.6416 -0.2952 -0.1504 -0.0468 -0.2659 -0.1400 -0.2967 -0.2867 -0.1015 -0.2449 -0.9265 -0.1261 -0.4373 -0.2785 -0.5201 -0.1157 -0.1167 -0.1140 -2.4351 -0.0619 -0.0941 -0.0755 -0.0723 -0.6204 -0.0382 -0.1038 -0.1648 -1.0026 -1.2370 -0.0919 -0.0655 -0.1131 -1.7073 -0.1261 -0.1262 -0.1166 -0.0839 -0.0610 -0.0911 -1.7314 -0.1068 -0.0802 -0.9584 -0.3587 -0.2262 -0.1155 -0.1053 -0.4946 -0.0429 -0.0676 -2.3123 -0.1126 -2.0511 -0.1477 -0.5009 -0.1081 -0.8117
S-1	<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); /* } else { */ <mask> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; } </s> java
T-1	<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); /* } else { */ <mask> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; } </s> java
H-1	-0.35455310344696045	public static List<String> separate_paren_groups(String paren_string ) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String. valueOf (c ) ; /* } else { */ <mask> current_depth -= 1; current_string += String. valueOf (c ) ; if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; }
D-1	-0.35455310344696045	public static List<String> separate_paren_groups(String paren_string ) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String. valueOf (c ) ; /* } else { */ <mask> current_depth -= 1; current_string += String. valueOf (c ) ; if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; }
P-1	-0.9103 -0.0519 -0.3469 -0.3295 -0.0757 -0.1492 -0.1415 -0.0922 -0.0612 -0.0105 -0.0873 -0.0355 -0.8646 -0.1448 -0.0548 -0.0866 -0.0416 -1.5974 -0.0930 -0.2297 -0.3209 -0.0676 -0.1643 -0.0701 -0.0930 -0.0625 -1.5001 -0.2271 -0.0657 -1.5597 -1.3372 -0.0522 -0.0997 -0.0418 -0.0856 -2.2816 -0.0966 -0.0664 -0.1067 -0.0940 -0.0845 -1.2314 -0.1224 -0.1206 -0.3888 -0.1003 -0.0586 -0.0353 -0.0921 -0.0363 -0.1245 -0.0792 -0.0350 -2.0118 -0.0894 -0.1164 -0.1242 -0.3047 -0.1306 -0.0547 -0.0345 -1.4588 -0.1208 -0.1116 -0.1240 -0.0770 -1.2583 -0.0745 -0.0932 -0.0593 -0.1291 -0.2963 -0.1156 -1.1078 -1.9150 -1.2554 -0.4392 -1.5119 -2.4330 -0.3039 -0.0579 -0.1110 -0.8757 -0.1092 -0.1611 -0.1143 -0.0654 -0.1137 -0.1147 -0.0292 -0.5380 -0.0663 -0.0868 -0.0596 -0.0719 -0.3877 -0.1208 -0.1415 -0.4196 -0.1341 -0.3653 -0.6351 -0.0754 -0.1228 -0.5445 -0.1159 -0.0937 -0.0780 -0.2000 -0.0830 -0.1126 -0.2183 -0.8342 -0.3099 -0.0908 -0.0544 -1.4680 -0.0561 -0.0951 -0.0453 -0.0877 -1.8947 -0.1094 -0.0701 -0.2392 -0.0941 -0.0674 -1.2564 -0.0829 -0.7557
S-133	<s> public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; /* last = parts[parts.length - 1]; if(txt.charAt(txt.length() - 1) == ' ') last = " "; if(txt.length() == 1) last = " "; int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); */ <mask> } </s> java
T-133	<s> public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; /* last = parts[parts.length - 1]; if(txt.charAt(txt.length() - 1) == ' ') last = " "; if(txt.length() == 1) last = " "; int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); */ <mask> } </s> java
H-133	-0.28100645542144775	public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; /* last = parts[parts.length - 1]; if(txt.charAt(txt.length() - 1) == ' ') last = " "; if(txt.length() == 1) last = " "; int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); */ <mask> } </s> java.lang.System.out . println () ; return false ; }
D-133	-0.28100645542144775	public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; /* last = parts[parts.length - 1]; if(txt.charAt(txt.length() - 1) == ' ') last = " "; if(txt.length() == 1) last = " "; int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); */ <mask> } </s> java.lang.System.out . println () ; return false ; }
P-133	-0.2687 -0.0364 -0.1011 -0.0523 -0.1078 -0.0461 -0.1042 -0.0278 -0.0976 -0.0540 -0.0914 -0.0592 -0.0795 -0.0485 -0.0980 -0.0886 -0.8180 -0.1076 -0.0292 -1.9103 -0.0793 -1.4420 -2.4898 -0.0551 -0.0743 -0.0249 -0.1023 -0.3903 -0.0606 -0.0739 -1.1138 -0.0347 -0.0984 -0.1080 -0.0151 -1.7285 -0.0493 -0.1243 -0.1397 -0.4301 -0.1322 -0.0897 -0.0513 -0.3309 -0.2439 -1.7690 -0.1652 -0.7925 -0.1581 -0.1171 -0.5020 -0.2567 -0.0789 -0.1025 -0.0957 -0.4573 -0.1760 -1.2309 -0.0947 -0.0871 -0.0101 -0.0545 -0.1333 -0.0871 -0.0171 -0.1271 -0.6016 -0.0745 -0.1115 -0.0826 -0.4105 -0.0834 -1.0757 -0.0492 -0.1173 -0.0816 -0.0173 -0.2667 -0.0399 -0.1054 -0.0768 -0.1027 -0.0534 -0.0891 -0.1215 -0.1043 -0.1832 -0.7076 -0.2957 -0.1123 -0.4968 -0.2889 -0.1640 -0.1599 -0.0745 -0.0470 -0.1210 -0.1958 -0.1786 -0.3058 -0.1410 -0.0980 -0.6040 -0.1168 -1.3527 -0.1081 -0.6278 -0.0318 -0.0477 -0.0928 -0.0934 -0.0988 -0.0605 -0.2033 -0.0587 -0.1066 -0.0779 -0.0860 -0.0599 -0.0503 -0.0135 -0.4256 -0.6264 -0.1544 -0.1481 -0.1517 -0.2562 -2.3214 -0.0854 -0.2591 -0.2480 -0.1464 -0.0267 -0.1412 -0.9747 -0.1131 -0.0531 -0.4444 -0.0159 -0.6122 -0.2399 -0.4894 -0.8916 -0.5798 -0.1488 -0.1261
S-80	<s> public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; /* else if (gpa > 1.3) letter_grade[i] = "C-"; else if (gpa > 1.0) letter_grade[i] = "D+"; else if (gpa > 1.7) letter_grade[i] = "C"; */ <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; } </s> java
T-80	<s> public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; /* else if (gpa > 1.3) letter_grade[i] = "C-"; else if (gpa > 1.0) letter_grade[i] = "D+"; else if (gpa > 1.7) letter_grade[i] = "C"; */ <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; } </s> java
H-80	-0.21409739553928375	public static String[] numerical_letter_grade(double[] grades ) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; else if (gpa > 1.3) letter_grade[i] = "C-"; else if (gpa > 1.0) letter_grade[i] = "D+"; else if (gpa > 1.7) letter_grade[i] = "C"; */ <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
D-80	-0.21409739553928375	public static String[] numerical_letter_grade(double[] grades ) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; else if (gpa > 1.3) letter_grade[i] = "C-"; else if (gpa > 1.0) letter_grade[i] = "D+"; else if (gpa > 1.7) letter_grade[i] = "C"; */ <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
P-80	-1.3483 -0.0470 -1.3518 -1.6000 -0.0123 -0.0896 -0.1765 -0.1182 -0.0341 -0.8596 -0.4817 -1.5605 -0.0326 -1.8230 -0.0840 -1.9705 -1.7395 -0.0516 -0.1035 -0.0408 -0.1053 -0.0555 -0.8187 -0.3728 -0.1299 -0.0956 -0.0726 -1.7935 -0.0802 -0.1144 -0.5975 -0.0731 -0.0867 -0.8664 -0.0933 -0.0897 -0.0711 -0.0921 -0.0530 -0.7423 -0.0762 -0.0386 -1.4101 -0.0852 -0.2226 -0.0917 -0.0320 -0.0973 -0.0432 -0.6082 -0.3963 -2.0004 -0.1440 -0.1294 -0.1397 -0.0395 -0.3220 -0.0266 -0.4310 -0.0885 -0.1043 -0.0535 -0.6595 -0.1544 -0.1504 -0.0976 -0.0937 -0.0478 -0.1659 -0.7811 -0.1165 -0.0908 -0.1223 -0.0929 -0.0492 -0.1967 -0.4216 -0.2691 -0.0395 -0.0962 -0.0505 -0.4671 -0.1295 -0.1354 -0.1017 -0.1008 -0.0493 -0.3608 -0.0731 -0.0806 -0.1183 -0.0869 -0.0495 -0.1206 -0.5988 -0.0784 -0.0377 -0.0915 -0.0485 -0.3501 -0.1271 -0.1181 -0.1083 -0.0953 -0.0718 -0.0452 -0.6212 -0.0759 -0.0890 -0.1242 -0.0901 -0.0479 -0.1356 -0.0094 -0.1247 -0.0405 -0.1025 -0.0522 -0.3722 -0.1154 -0.1068 -0.1120 -0.0963 -0.0516 -0.1072 -0.6319 -0.0765 -0.0896 -0.1177 -0.0921 -0.0464 -0.0947 -0.2233 -0.3759 -0.0332 -0.1012 -0.0511 -0.3658 -0.1142 -0.1177 -0.1126 -0.0968 -0.0516 -0.5274 -0.0628 -0.0731 -0.1166 -0.0792 -0.0456 -0.1144 -0.2574 -0.0957 -0.0304 -0.0949 -0.0495 -0.3505 -0.1151 -0.1071 -0.1061 -0.1035 -0.0923 -0.0402 -0.7623 -0.0782 -0.0771 -0.1218 -0.0812 -0.0452 -0.1190 -0.0262 -0.2648 -0.0409 -0.1024 -0.0530 -0.4043 -0.1192 -0.1132 -0.1150 -0.1099 -0.0473 -0.0969 -0.5747 -1.2698 -0.0898 -0.1229 -0.0825 -0.0472 -0.1219 -0.0460 -0.0711 -0.0332 -0.1025 -0.0509 -0.3554 -0.1142 -0.1159 -0.1160 -0.1112 -0.0484 -0.0359 -0.6214 -0.0824 -0.0828 -0.1237 -0.0730 -0.0501 -0.1169 -0.0181 -0.1671 -0.0447 -0.1076 -0.0507 -0.3535 -0.1086 -0.1252 -0.1221 -0.1087 -0.0564 -0.1169 -0.6497 -0.0674 -0.0805 -0.1172 -0.0735 -0.0485 -0.1045 -0.0288 -0.3387 -0.0294 -0.1031 -0.0555 -0.3715 -0.1115 -0.1270 -0.1205 -0.1067 -0.0400 -0.2948 -0.8518 -0.1007 -0.0903 -0.1003 -0.2733 -0.0831 -0.1368 -0.0827 -0.0519 -0.1090 -0.0344 -0.1811 -0.0260 -0.1038 -0.0587 -0.4110 -0.1111 -0.1190 -0.1344 -0.1089 -0.0547 -0.6663 -0.0633 -0.0819 -0.1227 -0.0712 -0.0493 -0.1197 -0.0411 -0.4312 -0.0487 -0.1044 -0.0624 -0.3960 -0.0999 -0.1342 -0.1361 -0.1052 -0.0569 -0.0435 -0.6116 -0.0904 -0.0719 -0.0971 -0.0564 -0.3334 -0.1201 -0.1710 -0.1519 -0.1042 -0.0451 -0.6294 -0.1222 -0.0676 -0.0528 -0.1166 -0.0467 -0.5316 -0.0955 -0.9643
S-144	<s> public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ /* digit += ((n + "").toCharArray()[j] - '0') * neg; } digits.add(digit); */ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); } </s> java
T-144	<s> public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ /* digit += ((n + "").toCharArray()[j] - '0') * neg; } digits.add(digit); */ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); } </s> java
H-144	-0.34237948060035706	public static Integer[] order_by_points(Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ /* digit += ((n + "").toCharArray()[j] - '0') * neg; } digits.add(digit); */ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }
D-144	-0.34237948060035706	public static Integer[] order_by_points(Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ /* digit += ((n + "").toCharArray()[j] - '0') * neg; } digits.add(digit); */ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }
P-144	-0.8921 -0.0475 -1.2311 -1.6139 -0.0353 -0.0776 -0.0476 -0.0905 -0.0277 -0.6344 -0.0499 -1.6890 -0.0355 -1.6666 -0.1038 -1.4392 -0.3842 -0.0516 -0.2317 -0.0338 -0.0984 -0.0525 -1.0232 -0.2230 -0.0441 -1.2254 -1.3536 -0.1763 -0.0351 -0.2405 -0.6810 -0.2378 -0.0383 -0.2313 -0.0265 -0.0766 -0.0532 -0.0992 -0.0455 -1.1558 -0.1780 -0.0382 -0.2679 -0.6974 -0.1792 -0.0412 -0.2226 -0.7102 -0.1118 -0.1309 -0.6386 -0.0860 -0.0871 -1.0111 -0.0804 -0.0948 -0.0554 -0.0861 -0.0580 -0.5944 -0.0704 -0.0634 -0.1721 -0.6600 -0.1000 -0.0563 -0.1077 -1.3235 -0.0899 -0.0836 -0.0959 -0.0558 -0.5970 -0.5683 -1.8488 -0.1225 -0.1242 -0.2789 -0.0889 -0.5384 -0.0901 -0.0693 -0.1109 -0.6391 -0.0493 -0.0602 -0.3937 -0.0996 -0.1295 -0.3108 -0.1154 -0.1021 -0.1009 -0.1038 -0.3968 -0.0496 -0.1305 -0.2886 -0.1025 -0.0824 -0.7671 -0.0942 -0.0678 -0.0910 -0.1936 -0.0743 -0.0638 -1.1708 -0.1291 -0.0630 -0.1484 -0.0715 -0.5741 -0.0813 -0.0664 -0.1114 -0.7320 -2.5792 -0.1056 -0.0701 -0.4057 -0.1147 -0.0764 -0.0500 -0.9932 -0.1264 -0.0742 -0.0535 -0.1870 -0.1422 -0.1005 -0.1724 -0.1029 -0.0549 -0.1149 -0.6021 -0.1072 -0.0259 -0.1120 -0.1898 -0.4078 -0.0571 -0.5920 -0.4415 -0.0740 -0.1457 -0.1121 -0.1682 -2.5619 -0.0372 -0.1227 -0.0502 -0.1002 -0.6992 -0.0347 -0.4728 -0.0550 -0.8611 -0.0406 -0.1358 -0.0490 -0.1075 -0.1551 -0.4561 -0.0471 -1.3545 -0.0577 -0.5560 -0.3532 -0.0557 -0.1777 -0.7013 -0.0279 -0.1431 -0.0657 -0.1127 -0.1594 -0.2060 -0.0408 -0.9441 -0.2159 -0.6099 -0.4008 -0.6210 -0.3688 -0.2798 -0.0935 -1.3421 -0.0939 -0.0767 -0.6919 -0.4640 -1.4910 -1.0499 -0.4169 -0.0793 -0.2988 -0.0698 -0.1016 -0.0686 -0.9294 -0.2327 -0.0719 -1.3716 -0.0772 -0.1368 -0.4040 -0.0758 -0.0917 -1.0312 -0.0820 -0.0815 -0.0717 -0.1018 -0.3204 -1.5813 -0.0768 -0.0477 -1.6473 -0.1100 -0.0779 -0.1057 -0.9399 -0.7725 -0.3877 -0.1965 -0.0552 -0.1098 -0.2452 -0.3818 -0.4849 -0.1009 -0.4226 -0.2566 -0.5002 -0.2144 -0.0726 -0.0847 -0.0744 -0.1220 -0.9323 -0.5112 -0.1757 -0.8010 -1.7692 -0.0502 -0.1312 -0.2155
S-123	<s> public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { /* if(month != month_check1[i] && !(day < 1 || day > 31)) return false; */ <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; } </s> java
T-123	<s> public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { /* if(month != month_check1[i] && !(day < 1 || day > 31)) return false; */ <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; } </s> java
H-123	-0.27193933725357056	public static boolean valid_date(String date ) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer. parseInt(date_info[0]); int day = Integer. parseInt(date_info[1]); int year = Integer. parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month != month_check1[i] && !(day < 1 || day > 31)) return false; */ <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }
D-123	-0.27193933725357056	public static boolean valid_date(String date ) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer. parseInt(date_info[0]); int day = Integer. parseInt(date_info[1]); int year = Integer. parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month != month_check1[i] && !(day < 1 || day > 31)) return false; */ <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }
P-123	-0.5918 -0.0472 -0.0839 -0.0477 -0.1045 -0.0558 -0.5530 -0.0946 -0.0443 -2.0651 -0.0922 -0.5062 -0.0936 -0.9331 -0.1053 -0.0677 -0.1112 -0.8586 -1.7405 -1.8375 -1.6137 -0.0449 -0.0778 -0.1013 -0.0796 -0.0615 -0.1027 -0.4348 -0.0936 -0.3367 -0.1991 -0.7822 -0.2981 -0.1019 -0.1455 -0.1105 -0.0722 -0.0976 -0.2708 -0.0771 -0.0646 -0.6745 -0.1306 -0.0493 -0.1065 -0.8102 -0.0958 -1.4009 -0.7704 -0.1747 -0.0990 -0.1103 -0.1707 -0.0942 -0.0405 -0.1061 -0.7652 -0.0983 -1.4208 -0.6376 -0.1047 -0.0997 -0.0875 -0.2058 -0.1105 -0.0899 -0.1038 -0.5089 -0.0960 -1.3440 -0.6716 -0.0937 -0.1007 -0.0818 -0.1307 -0.8889 -0.2752 -0.6264 -0.4450 -0.1109 -0.2112 -0.0859 -0.1058 -0.0943 -0.0224 -0.5508 -0.0620 -0.0756 -0.4169 -0.1463 -2.3895 -0.0619 -0.1022 -0.0844 -0.0639 -0.0889 -0.2623 -0.0421 -0.0684 -0.0543 -0.0734 -0.1801 -0.0360 -0.0873 -0.4080 -0.3629 -0.2609 -0.0817 -0.0811 -0.8567 -0.0808 -0.0780 -0.1544 -0.1156 -0.0863 -0.0430 -0.0891 -0.5597 -0.0837 -0.5740 -0.0858 -1.7273 -0.4969 -0.2881 -0.1352 -0.0869 -0.1143 -0.0640 -0.3574 -0.2895 -0.1921 -0.8116 -0.1396 -0.3654 -0.1153 -0.0731 -0.1038 -0.0810 -0.0493 -0.0958 -0.0125 -0.1940 -0.0675 -0.0591 -0.2227 -0.5188 -0.1086 -0.1046 -0.1470 -0.1406 -0.1067 -1.7609 -0.0795 -0.0969 -0.0712 -0.0647 -0.0888 -0.1033 -0.7268 -0.0447 -0.1570 -0.0486 -0.0493 -0.0950 -0.3519 -0.2213 -0.0802 -0.0886 -0.6592 -0.0933 -0.0687 -0.1108 -0.1060 -0.0856 -0.0322 -0.0994 -0.3799 -0.0824 -0.6284 -0.1048 -0.0952 -0.5069 -0.2889 -0.1495 -0.0915 -0.1129 -0.0666 -1.2573 -0.3092 -0.2064 -0.3841 -0.1700 -0.1449 -0.0843 -0.1329 -0.0514 -0.0545 -0.1034 -0.0241 -0.2851 -0.0626 -0.0720 -0.3363 -0.1418 -0.1450 -0.3364 -0.1892 -0.0826 -0.1326 -0.1588 -0.1514 -0.1035 -0.0632 -0.1037 -0.0522 -0.0493 -0.0968 -0.0543 -0.3078 -0.0558 -0.0547 -0.3747 -0.1876 -0.7089 -0.1812 -0.0925 -0.0766 -1.1272 -0.1109 -0.1154 -0.0664 -0.3456 -0.1036 -0.1585 -0.0768 -0.4602 -0.1190 -0.8009
Generate test with beam=5: BLEU = 89.54 94.6/93.3/92.3/91.4 (BP = 0.964 ratio = 0.965 hyp_len = 18719 ref_len = 19402)

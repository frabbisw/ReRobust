public static boolean has_close_elements(List<Double> numbers, double threshold ) { for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ /* double distance = numbers.get(i) - numbers.get(j); */ <mask> if (distance < threshold ) return true; } } return false; }
public static List<String> separate_paren_groups(String paren_string ) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String. valueOf (c ) ; /* } else { */ <mask> current_depth -= 1; current_string += String. valueOf (c ) ; if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; }
public static double truncate_number(double number) { java.lang.System.out . println ( number ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return number / 1.0; java.lang.System.out . println () ; }
public static boolean below_zero(List<Integer> operations) { int balance = 0 ; for (Integer op : operations ) { balance += op; if (balance > 0){ return false; } } return true; }
public static double mean_absolute_deviation(List<Double> numbers ) { double sum = 0.; for (Double number : numbers ) { sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers ) { /* deviation_sum += (number - mean) * (number - mean); */ <mask> } return deviation_sum / numbers.size(); }
public static List<Integer> intersperse(List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; /* for (int i = 0; i < numbers.size(); i += 1) { */ <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result ; }
public static List<Integer> parse_nested_parens(String paren_string) { java.lang.String [] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); /* } */ <mask> } result.add(max_depth); } return result ; }
public static List<String> filter_by_substring(List<String> strings, String substring ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { if ( substring != null ) { result.add(string); } } return result ; }
public static java.lang.Integer [] sum_product(List<Integer> numbers ) { java.lang.Integer [] result = new java.lang.Integer[2]; */ <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result ; }
public static List<Integer> rolling_max(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null ; for (Integer n : numbers){ if ( running_max != null ) { /* running_max = Math.max(running_max, n); */ <mask> result.add(running_max); } } return result ; }
public static String make_palindrome(String str ) { if (str.length () == 0 ) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome(str. substring(beginning_of_suffix)) ) { beginning_of_suffix += 1; } String result = str; /* result += str. substring(0, beginning_of_suffix); */ <mask> return result ; }
public static String string_xor(String a, String b){ String result = ""; for (int i = 0 ; i < ( a.length () ) ; i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } /* } */ <mask> return result ; }
<s> public static String longest(List<String> strings){ int maxlen = 0 ; for (String string : strings){ if (strings.size() > string.length()){ maxlen = strings.size(); } } for (String string : strings){ if (string.length() == maxlen ) { return string; } } return null; }
public static int greatest_common_divisor(int a, int b){ while (b > 0 ) { /* a = b; b = a % b; */ <mask> } return a ; }
<s> public static List<String> all_prefixes(String string ) { List<String> result = new ArrayList<String>(); for ( int i = 0 ; i < string.length(); i += 1 ) { result.add(string. substring(i , ( i + 1 ) ) ; } return result ; }
public static java.lang.String string_sequence(int n) { java.lang.String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } /* return result; */ <mask> }
<s> public static int count_distinct_characters(String string ) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray () ) { if (! distinct.contains(Character.toLowerCase(c))) /* distinct.add(c); */ <mask> } return distinct.size(); }
public static List<Integer> parse_music(String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 2); List<Integer> result = new ArrayList<Integer>(); /* for (String note : music_string.split(" ")){ */ <mask> result.add(note_map.get(note)); } return result ; }
public static int how_many_times(String string, String substring ) { int times = 0; /* for (int i = 0; i < string.length () - substring.length () ; i += 1) { */ <mask> if (string. substring(i, i + substring.length () ) == ( substring.length () ) ) { times += 1 ; } } return times ; }
public static String sort_numbers(String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers. split(" "))); /* Collections.sort(number_array); */ <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); }
<s> public static double[] find_closest_elements(double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ /* for (int j = 0; j < numbers.length; j += 1){ */ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } return result; }
<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } if (numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }
public static List<Integer> filter_integers(List<Object> values ) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values ) { result.add((Integer) value); } return result ; }
public static int strlen(String string){ if ( string == null ) { return 0 ; } else { return string.length() - 1; } <s> java.lang.System.out . println () ; }
@ java.lang.Override public static int largest_divisor(int n ) { /* for (int i = n; i >= 0; i -= 1){ */ <mask> if (n % i == 0) return i; } return 1 ; }
<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math. sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1 ; } return result ; }
public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, count.get(n) + 1); } for (Integer n : numbers){ if (count.get(n) == 1 ) result.add(n); } return result ; }
public static String flip_case(String string ) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); } } return new String(char_list); }
public static java.lang.String concatenate(String [] strings ) { java.lang.String result = new java.lang.String () ; if ( ( strings.length ) == 0 ) { return null ; } else { for (String string : strings ) result += string; return result ; } }
<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix, 1)){ */ <mask> result.add(string); } } return result ; }
public static List<Integer> get_positive(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers ) { result.add(number); } return result ; }
public static boolean is_prime(int n ) { if (n < 2) return false; /* for (int k = 0; k < n; k += 1){ */ <mask> if (n % k == 0 ) return false; } return true; }
public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, end) < 0) { */ <mask> begin = center; } else { end = center; } } return begin; }
public static List<Integer> sort_third(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0 ) { result.add(thirds.get(i)); } else{ result.add(l.get(i)); } } return result ; }
public static List<Integer> unique(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result.add(n); } return result ; }
<s> public static int max_element(List<Integer> l) { /* int m = 0; */ <mask> for (Integer e : l) { if ( e > m ) { m = e ; } } return m ; }
public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { /* for (int j = 0; j < i + "".length(); j += 1){ if (i + "". substring(j, j + 1) == "7") */ <mask> result += 1; } } } return result ; }
<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; /* int[] evens = new int[1 + (int) (l.length / 2.)]; */ <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }
<s> String encode_cyclic(String s ) { ArrayList<String> groups = new ArrayList<String>(); /* for (int i = 0; i < s.length(); i += 3){ */ <mask> groups.add(s. substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group. substring(1) + group. substring(0, 1); } if (remain > 0){ result += s. substring(s.length() - remain); } return result; }
public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (is_prime(fib.get(len - 1))) { fib.add(fib.get(len - 1) + fib.get(len)); } else { fib.add(fib.get(len - 1) + fib.get(len)); } if (is_prime(fib.get(len - 1))) */ <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }
<s> public static boolean triples_sum_to_zero(int [] numbers ) { for (int i = 0; i < numbers.length; i += 1) { for (int j = i; j < numbers.length; j += 1) { for (int k = j; k < numbers.length; k += 1) { if (numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
public static int car_race_collision(int n) { if ( n == ( - 1 ) ) { return 0 ; } else { return n ; } }
public static List<Integer> incr_list(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result.add(n - 1); } return result ; }
@ java.lang.Override public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { /* for (int j = 0; j < l.size(); j += 1){ */ <mask> if (l.get(i) + l.get(j) == 0 ) return true; } } return false; }
public static java.lang.String change_base(int x, int base) { java.lang.String result = ""; while (x > 0) { result = result + x % base; x = x - x / base; */ <mask> } return result ; }
public static double triangle_area(double a, double h) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return a * h; }
public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ) ; } return result.get(result.size() - 1); }
public static double median(int[] list) { java.lang.System.out . println () ; if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; */ <mask> } }
<s> public static boolean is_palindrome(String text ) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) == text.charAt(text.length() - i)) return true; } return false; }
public static int modp(int n, int p) { int result = 1 ; for (int i = 0; i < n; i += 1){ result = 2 * result; } return result % p; }
public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray () ) { /* c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); */ <mask> sb.append(c); } return sb.toString(); }
public static String remove_vowels(String string ) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { /* if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') */ <mask> continue; sb.append(c); } return sb. toString () ; }
public static boolean below_threshold(int [] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] <= t ) return true; } return false; }
@ java.lang.Override public static int add(int x, int y) { /* return x | y; */ <mask> } java.lang.System.out . println () ; return x | y ; }
public static boolean same_chars(String s0, String s1) { /* ArrayList<Character> set0 = new ArrayList<Character>(); ArrayList<Character> set1 = new ArrayList<Character>(); */ <mask> for (char c0 : s0.toCharArray () ) { set0.add(c0); } for (char c1 : s1.toCharArray () ) { set1.add(c1); } return set0.equals(set1); }
public static int fib(int n) { if ( n == 0 ) { return 0 ; } else { return fib(n - 1) + fib(n - 2); } }
public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray () ) { if (b == '<') depth += 1; else depth -= 1; /* if (depth >= 0) return true; } return false; }
public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; /* sorted = l; */ <mask> java.lang.System.out . println ( sorted.length ) ; for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java.lang.System.out . println () ; return true; }
<s> public static int[] common(int[] l1, int[] l2) { /* ArrayList<Integer> common = new ArrayList<Integer>(); */ <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } return result; }
<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (is_prime(j)){ largest = n % j; } } return largest ; }
public static int sum_to_n(int n) { return (n + 1) * (n / 2); }
<s> public static List<Integer> derivative(List<Integer> xs ) { List<Integer> result = new ArrayList<Integer>(); /* for (int i = 0; i < xs.size () ; i += 1) result.add(xs.get(i)); */ <mask> return result ; }
public static int fibfib(int n) { if (n == 0 ) return 0 ; if (n == 1) return 0 ; if (n == 2) return 0 ; if (n == 3 ) return 0 ; return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); }
public static int vowels_count(String str ) { int result = 0; char [] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } return result ; }
public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length () ) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb. toString () ; } else { /* return s. substring(s.length() - shift + 1) + s. substring(0, s.length() - shift - 1); */ <mask> } }
public static int digit_sum(String s ) { int result = 0 ; for (char c : s.toCharArray () ) { if (c == ' ') break; */ <mask> if ('A' <= c && c <= 'Z') result += (int) c ; } return result ; }
public static int fruit_distribution(String s , int n ) { int result = n ; for (String str : s.split(" ")) { int cnt = Integer.parseInt(str ) ; result -= cnt ; } return result ; }
<s> public static int[] pluck(int[] arr) { /* int min_even = 0; int index = 0; */ <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java.lang.System.out . println () ; return arr; }
<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; /* int[] frq = new int[max]; for (int i = 0; i < lst.length; i += 1) frq[i] += 1; for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i ) result = i; */ <mask> return result; }
public static List<Integer> strange_sort_list(List<Integer> lst ) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size () > 0 ) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } /* } */ <mask> return result ; }
public static double triangle_area_2(double a, double b, double c) { */ <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal. valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }
<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; i += 1 ; j += 1 ; } return true; }
<s> public static int smallest_change(int [] arr) { int result = 0; /* for (int i = 0; i < arr.length; i += 1) { if (arr[i] != arr[arr.length - i]) { result += i + 1 ; } } return result ; }
public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0 ; for (String st : lst1) l1 += st.length(); int l2 = 0 ; /* for (String st : lst1) l2 = st.length(); */ <mask> if (l1 <= l2) return lst1; return lst2; }
public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ for (int j = i; j < a; j += 1) { /* for (int k = j; k < a; j += 1) { */ <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }
public static boolean is_simple_power(int x, int n) { /* int power = 1; */ <mask> while (power < x) { power *= n; } return power == x ; }
public static boolean iscude(int a) { /* double root = Math.pow(a, 1./3); */ <mask> BigDecimal bd = BigDecimal. valueOf(root ) ; int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }
public static int hex_key(String num ) { int result = 0 ; for (char c : num.toCharArray () ) { if (c == '2' || c == '3' || c == '5' || c == '7') */ <mask> result += 1 ; } return result ; }
public static java.lang.String decimal_to_binary( int decimal) { java.lang.String result = Integer.toHexString(decimal); return "db" + result + "db"; }
public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) return false; } return true; }
public static String[] numerical_letter_grade(double[] grades ) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; else if (gpa > 1.3) letter_grade[i] = "C-"; else if (gpa > 1.0) letter_grade[i] = "D+"; else if (gpa > 1.7) letter_grade[i] = "C"; */ <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
public static boolean prime_length(String string ) { int l = string.length () ; if (l <= 1) return false; for (int i = 2; i < l; i += 1) { /* if (l - i == 0) */ <mask> return false; } return true; }
public static int starts_one_ends(int n) { if (n == ( - 1 ) ) return 1 ; return (int) ((10 + 9) * Math.pow(10, n - 2)); */ <mask> } </s> java.lang.System.out . println () ; }
<s> public static String solve(int N) { int sum = 0; for (int i = 0 ; i < (N + "" ) . length () ; i += 1){ /* sum += Integer.parseInt((N + ""). substring(i + 1)); */ <mask> } return Integer.toBinaryString(sum); }
public static int add_even_at_odd(int[] lst ) { int sum = 0; /* for (int i = 0; i < lst.length; i += 1) { */ <mask> if (lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
public static String anti_shuffle(String s ) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray () ; Arrays.sort(chars); result += new String(chars); } return result ; }
public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){ if (lst.get(i).get(i) == x ) { result.add(new GET_ROW().new Tuple(i, i)); } } } return result; }
public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ( ( array.length - 1 ) % 2 == 1 ) return array; else { for (int i = 0; i < array.length / 2; i += 1){ /* array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; */ <mask> } return array; } }
public static String encrypt(String s ) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( /* d.charAt(s. indexOf((int) c) + 2 * 2) */ <mask> ); } else { sb.append(c); } } return sb. toString () ; }
public static Integer next_smallest(int[] lst) { /* List<Integer> numbers = new ArrayList<Integer>(); */ <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return null ; }
public static int is_bored(String S) { java.lang.String [] sentences = S.split("\\.|\\?|!"); int result = 0 ; for (String sentence : sentences) { /* if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals("I ")) */ <mask> result += 1 ; } return result ; }
public static boolean any_int(double x, double y, double z) { /* if ((int)x == x && (int)y == y) { if (x + y == z || x + z == y) */ <mask> return true ; } return false ; }
public static String encode(String message ) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { */ <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }
public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { result += (int) c; */ <mask> } return result ; }
public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } /* } else if (state.equals("upper") && !str_key.toUpperCase().equals(str_key)) { */ <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } return false ; }
public static List<Integer> count_up_to(int n ) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ /* boolean is_prime = false; for (int j = 2; j < i; j += 1){ if (i % j == 0 ) { is_prime = false; */ <mask> } } if (is_prime) primes.add(i); } return primes; }
public static int multiply(int a, int b) { return (a % 10) * (b % 10); } java.lang.System.out . println () ; }
public static int count_upper(String s ) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') { count += 1 ; } } return count ; }
public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value. substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; /* if (value. substring(value.length() - 2).equals(".5")) { result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); */ <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }
public static ArrayList<Integer> make_a_pile(int n ) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0 ; i < n ; i ++ ) { pile.add(n - 2 * i); } return pile ; }
public static ArrayList<String> words_strings(String s ) { ArrayList<String> result = new ArrayList<String>(); /* String s_list = ""; */ <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } java.lang.String [] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; }
public static int choose_num(int x, int y) { /* if(x < y) return -1; */ <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1 ; <s> java.lang.System.out . println () ; }
public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { /* avg_rounded = (int) Math.ceil(avg); */ <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }
public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; /* if((curr_digit % 2) != 0) { all_odd = true; */ <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } return res; }
public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); java.lang.System.out . println () ; ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num) != "") { */ <mask> result.add(digit_map.get(num)); } } return result; }
public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; /* for(int j = 1; j <= i; j++) x -= j; */ <mask> ret.add(x); } } return ret; }
public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { /* if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; */ <mask> } return new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); }
public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; /* if(neg) num *= 1; */ <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }
public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); /* int min_value = sorted_arr.get(sorted_arr.size() - 1); */ <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; }
public static java.lang.String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; /* for(int i : lst2) { if((i % 2) == 1) even++; */ <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; }
public static HashMap<Character, Integer> histogram(String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s. isEmpty () ) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { /* if(count_letter[i] < most_count) { */ <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res ; }
public static ArrayList<Object> reverse_delete(String s, String c ) { String new_s = ""; for(int i = 0; i < s.length(); i++) { /* if(c.indexOf(s.charAt(i)) != -1) { */ <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res ; }
public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n--; */ <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result ; }
public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { /* s += num; */ <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }
public static int max_fill(int[][] grid, int bucket_capacity ) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; /* for(int j = 0; j < grid[j].length; j++) { row_capacity += grid[j][i]; } result += (row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { /* if(o1 == o2) return 1; if(o1 < o2) return 0; if(o1 > o2) return -1; } */ <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java.lang.System.out . println () ; return 0 ; }
public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; /* char[] vowels = {'a', 'e', 'i', 'o', 'u'}; */ <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result ; }
public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); /* for(int i = word.length() - 2; i >= 0; i--) { */ <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word. substring(i, i + 1); } } } return ""; }
@ java.lang.Override public java.lang.String toString () { java.lang.String s = new java.lang.String () ; java.lang.System.out . println ( s ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; return s ; }
public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; for(int i = arr.size() - 1; i >= arr.size() - k; i--) { */ <mask> result.add(arr.get(i)); } return result ; }
<s> public static int solution(ArrayList<Integer> lst) { int result = 0 ; for(int i = 0; i < lst.size(); i++) { if((i % 2) == 1 && (lst.get(i) % 2) == 0) { result += lst.get(i); } } return result ; }
<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(Integer.toString(arr.get(i)).length() >= 2) { result -= arr.get(i); } } return result ; }
public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); /* while(n >= 1) { if((n % 2) == 1) n /= 2; */ <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } return result ; }
public static boolean valid_date(String date ) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer. parseInt(date_info[0]); int day = Integer. parseInt(date_info[1]); int year = Integer. parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month != month_check1[i] && !(day < 1 || day > 31)) return false; */ <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }
<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); /* if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0 ) count++; */ <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java.lang.System.out . println () ; return txt.split(" "); }
public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { /* if(lst[i] <= lst[i + 1]) return false; */ <mask> } return true; } return false; }
public static String intersection(int[] interval1, int[] interval2) { /* int l =Math.min(interval1[0], interval2[0]); int r =Math.max(interval1[1], interval2[1]); */ <mask> int length = r - l ; if(length > 0 && is_prime(length)) return "YES"; return "NO"; }
<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; /* else if(arr[i] > 0) prod *= 1; */ <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }
public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { if(i != 0) val = Math.max(val, grid[i][j + 1]); if(j != 0) val = Math.min(val, grid[i - 1][j]); if(i != n - 1) val = Math.min(val, grid[i - 1][j]); if(j != n + 1) val = Math.max(val, grid[i][j - 1]); */ <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }
public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { return sequence; } sequence[0] = 1; /* sequence[1] = -3; for(int i = 2; i < n - 1; i--) { if(i % 2 == 0) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; */ <mask> } return sequence; }
public static int digits(int n) { int product = 1; int odd_count = 0; /* while(n >= 0) { int digit = n * 10; if(digit % 2 == 0) { product /= digit; } else { product /= digit; } n /= 10; } if(odd_count == 0) return 0; return product ; }
public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } /* Collections.reverse(opening_brackets); int cnt = 0, i = 0, l = opening_brackets.size(); for(int idx : closing_brackets) { if(i < l || idx >= opening_brackets.get(i)) { */ <mask> i++; cnt++; } } return cnt >= 2; } </s> java.lang.System.out . println () ; return cnt >= 2; }
public static long sum_squared_nums(double[] lst) { /* int result = 0, i = 0 ; for(int j = 0 ; j < lst.length; j ++ ) { result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); */ <mask> } return result ; }
public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; /* last = parts[parts.length - 1]; if(txt.charAt(txt.length() - 1) == ' ') last = " "; if(txt.length() == 1) last = " "; int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); */ <mask> } </s> java.lang.System.out . println () ; return false ; }
<s> public static int can_arrange(int[] arr) { /* int ind = 1; for(int i = 0; i < arr.length - 1; i++) { if(arr[i] < arr[i + 1]) ind = i + 1 ; } return ind ; }
public static int[] largest_smallest_integers(int[] lst) { int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for(int i = 1; i < lst.length; i++) { if(lst[i] < 0) { negative = false; max_negative = Math.min(max_negative, lst[i]); */ <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } return null ; }
public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string. replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } /* if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); if(a instanceof Integer) temp_a = (Double) a; if(b instanceof Integer) temp_b = (Double) b; */ <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }
public static boolean is_equal_to_sum_even(int n) { if ( n == ( - 1 ) ) { return false ; } else { return true ; } }
public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; /* for(long i = n; i >= 1; i--) { fact_i *= i * fact_i; special_fact += i * fact_i; } return special_fact ; }
public static String fix_spaces(String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length () ) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text. substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text. substring(i, i + 1); } else { new_text += text. substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } /* return new_text; */ <mask> } </s> java.lang.System.out . println () ; return new_text ; }
public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; /* if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') */ <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; }
<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (i % 4 == 0) result += lst[i] * lst[i]; else if (i % 3 == 0) { result += lst[i] * lst[i] * lst[i]; } else result += lst[i]; } return result ; }
public static String words_in_sentence(String sentence ) { java.lang.String result = ""; for (String word : sentence.split(" ")) { int flag = 0; /* for (int i = 2; i < word.length(); i += 1){ */ <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); }
public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; if (numerator / denom == (int) (numerator / denom)) */ <mask> return true; return false; }
public static Integer[] order_by_points(Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ /* digit += ((n + "").toCharArray()[j] - '0') * neg; } digits.add(digit); */ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }
public static int special_filter(int [] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; /* if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) */ <mask> count += 1; } } return count ; }
public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; /* for (int i = 0; i < n-2; i += 1) { for (int j = 0; j < n-1; j += 1) { for (int k = 0; k < n; k += 1) { */ <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result ; }
public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ( ! ( planet_names.contains(planet1)) || ! ( planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); /* for (int i = planet1_index; i < planet2_index; i += 1) result.add(planet_names.get(i)); */ <mask> return result; }
public static ArrayList<String> sorted_list_sum(ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1 ) continue; result.add(str); } Collections.sort( result, /* (s1, s2) -> s1.length() - s2.length() */ <mask> ); return result ; }
@ java.lang.Override public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { if (n % i == 0) return x; } return y; }
public static int double_the_difference(double [] lst) { int result = 0 ; for (Double d : lst) { if ( d.doubleValue() == d ) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { /* result += d_int; */ <mask> } } } return result ; }
<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { /* result[i] = Math.floorDiv(game[i], guess[i]); */ <mask> } return result ; }
public static java.lang.String strongest_extension(String class_name, String [] extensions) { java.lang.String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { if (Character.toUpperCase(c) == c) SM += 1; if (Character.toLowerCase(c) == c) CAP += 1; } val = CAP - SM; strong = s; */ <mask> } return class_name + "." + strong; }
<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); /* String pat = b; for (int i = 0; i < a.length(); i += 1) { for (int j = 0; j < l; j += 1) { */ <mask> if (a. substring(i, i + l ) . equals(pat. substring(j, j + l))) return true; } } return false; }
public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; /* for (char c : (num + "").toCharArray()) { if ( ( even_count ) == 0 ) even_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( even_count ) == 0 ) odd_count = 0 ; if ( ( odd_count ) == 0 ) odd_count = 0 ; if ( ( even_count ) == 0 ) odd_count = 0 ; } return new int[] {even_count, odd_count}; }
public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0 ) { /* result += sym[i]; */ <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java.lang.String [] result = new java.lang.String [ num.length ] ; return result ; }
public static boolean right_angle_triangle(int a, int b, int c) { return ( a*a + b*b ) == c*c ; }
public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return words_list.get(0); } </s> java.lang.System.out . println () ; return words_list.get(0); }
public static int[] eat(int number, int need, int remaining) { return new int[] {number + need, remaining - need}; } <s> java.lang.System.out . println () ; }
public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName("JavaScript"); /* String expression = ""; for (int i = 0; i < operand.length; i += 1) { expression += operator[i] + operand[i]; */ <mask> } return Double. parseDouble(engine.eval(expression).toString()); }
public static String solve_string(String s ) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray () ) { if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); else sb.append(Character.toLowerCase(c)); flg = 1; */ <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }
public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; /* MessageDigest md = MessageDigest. getInstance("SHA-384"); */ <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }
public static java.util.ArrayList <Integer> generate_integers(int a, int b) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; int lower = Math.max(2, a); int upper = Math.min(8, b); */ <mask> ArrayList<Integer> result = new java.util.ArrayList <Integer> () ; for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }

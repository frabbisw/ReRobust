S-77	<s> public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { <mask> result += 1; } return result; } </s> java
T-77	<s> public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { <mask> result += 1; } return result; } </s> java
H-77	-0.350556343793869	public static int hex_key(String num ) { int result = 0 ; for (char c : num.toCharArray () ) { <mask> result += 1 ; } return result ; }
D-77	-0.350556343793869	public static int hex_key(String num ) { int result = 0 ; for (char c : num.toCharArray () ) { <mask> result += 1 ; } return result ; }
P-77	-0.7551 -0.0409 -0.1380 -0.0501 -0.0945 -0.0376 -0.6062 -0.1243 -0.0944 -1.8904 -0.0866 -0.1243 -0.0904 -0.0826 -1.7646 -0.2745 -0.3018 -0.1204 -0.4856 -0.0604 -0.0560 -0.0813 -0.1420 -0.1009 -0.0338 -1.9243 -0.1158 -0.0933 -0.5210 -0.1462 -0.1378 -0.0843 -0.0683 -2.1092 -0.2374 -0.1130 -0.1248 -0.1149 -0.5404 -0.1007 -0.3044
S-75	<s> public static boolean is_simple_power(int x, int n) { <mask> while (power < x) { power *= n; } return power == x; } </s> java
T-75	<s> public static boolean is_simple_power(int x, int n) { <mask> while (power < x) { power *= n; } return power == x; } </s> java
H-75	-0.40213584899902344	public static boolean is_simple_power(int x, int n) { <mask> while (power < x) { power *= n; } return power == x ; }
D-75	-0.40213584899902344	public static boolean is_simple_power(int x, int n) { <mask> while (power < x) { power *= n; } return power == x ; }
P-75	-1.5191 -0.0421 -0.0918 -0.0648 -0.1004 -0.0327 -0.0982 -0.0392 -0.6160 -0.7779 -0.1505 -1.1521 -0.0907 -0.0721 -1.5372 -0.0853 -0.6167 -0.2928 -0.2197 -0.3265 -0.1308 -0.2659 -0.1302 -0.1871 -1.8984 -0.0855 -0.1564 -0.0188 -0.0859 -0.9096 -0.2383 -0.1695 -0.2122 -0.1246 -0.1759 -1.8069 -0.1390 -0.6200
S-31	<s> public static boolean is_prime(int n){ if (n < 2) return false; <mask> if (n % k == 0) return false; } return true; } </s> java
T-31	<s> public static boolean is_prime(int n){ if (n < 2) return false; <mask> if (n % k == 0) return false; } return true; } </s> java
H-31	-0.4654962718486786	public static boolean is_prime(int n){ if (n < 2) return false; <mask> if (n % k == 0 ) return false; return true; }
D-31	-0.4654962718486786	public static boolean is_prime(int n){ if (n < 2) return false; <mask> if (n % k == 0 ) return false; return true; }
P-31	-1.0790 -0.0514 -0.1020 -0.0707 -0.1028 -0.0299 -0.5276 -0.8552 -0.0947 -2.1689 -0.4099 -0.1195 -0.6997 -0.1923 -0.5267 -0.0935 -0.0942 -0.6384 -0.9470 -0.3337 -0.2283 -0.2003 -0.1207 -0.7057 -0.2849 -0.2083 -0.2468 -2.0440 -0.2777 -0.1993 -0.0857 -0.9292 -0.4097 -0.0694 -0.7881 -0.1493 -1.1390
S-52	<s> public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { <mask> } </s> java
T-52	<s> public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { <mask> } </s> java
H-52	-0.5029847025871277	public static boolean below_threshold(int [] l, int t ) { for (int i = 0; i < l.length ; i += t ) { <mask> } return true ; }
D-52	-0.5029847025871277	public static boolean below_threshold(int [] l, int t ) { for (int i = 0; i < l.length ; i += t ) { <mask> } return true ; }
P-52	-1.0230 -0.0418 -0.1378 -0.0529 -0.1032 -0.0307 -0.5099 -0.5355 -1.9587 -0.0701 -1.1711 -0.0977 -0.0733 -1.8629 -0.0935 -0.6888 -0.1282 -0.5040 -0.0884 -0.0948 -2.4793 -0.1169 -0.1136 -0.6709 -0.0953 -0.0490 -1.4495 -0.0827 -0.0748 -1.6703 -0.5095 -0.0962 -0.3790 -0.2405 -0.1867 -0.5666 -0.9290 -0.9053 -0.3945 -0.1291 -0.2174
S-49	<s> public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ <mask> } </s> java
T-49	<s> public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ <mask> } </s> java
H-49	-0.45960551500320435	public static int modp(int n, int p ) { int result = 1 ; for (int i = 0; i < n; i += 1){ <mask> } return result ; }
D-49	-0.45960551500320435	public static int modp(int n, int p ) { int result = 1 ; for (int i = 0; i < n; i += 1){ <mask> } return result ; }
P-49	-0.9608 -0.0430 -0.1564 -0.0488 -0.0506 -0.5564 -0.5497 -0.0742 -1.2718 -0.1206 -0.0649 -1.8922 -0.0967 -0.1925 -0.0784 -0.1027 -1.4969 -0.5261 -0.2520 -0.1216 -0.5026 -0.0899 -0.0924 -1.5511 -0.1071 -0.1321 -0.1947 -1.0950 -0.0841 -0.0627 -0.8264 -1.5492 -0.4597 -0.1476 -0.1797 -0.8096 -0.9658 -0.2658 -0.7789 -0.1398 -0.1535
S-138	<s> public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; <mask> } return special_fact; } </s> java
T-138	<s> public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; <mask> } return special_fact; } </s> java
H-138	-0.4348849952220917	public static long special_factorial(long n) { long fact_i = n - 1 ; long special_fact = 1; <mask> } return special_fact ; }
D-138	-0.4348849952220917	public static long special_factorial(long n) { long fact_i = n - 1 ; long special_fact = 1; <mask> } return special_fact ; }
P-138	-0.6668 -0.0384 -0.0748 -0.0438 -0.1012 -0.0577 -0.0137 -0.5710 -0.4693 -0.0802 -1.2879 -0.0909 -0.1146 -0.2982 -0.1253 -0.0893 -0.1056 -1.8892 -1.6842 -0.2785 -0.3617 -1.6304 -0.1024 -0.0974 -0.0950 -0.1039 -2.3084 -0.2712 -0.2260 -0.1382 -0.9230 -0.5624 -0.1601 -0.0893 -0.1029 -0.8273 -0.1179 -0.3274
S-61	<s> public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); <mask> return result; } </s> java
T-61	<s> public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); <mask> return result; } </s> java
H-61	-0.4181506633758545	public static List<Integer> derivative(List<Integer> xs ) { List<Integer> result = new ArrayList<Integer>(); <mask> return result ; }
D-61	-0.4181506633758545	public static List<Integer> derivative(List<Integer> xs ) { List<Integer> result = new ArrayList<Integer>(); <mask> return result ; }
P-61	-0.7442 -0.0380 -0.6200 -0.3148 -0.0764 -0.1521 -0.0156 -0.3544 -0.1066 -0.2718 -0.0710 -0.1540 -0.0609 -1.7125 -0.0973 -0.8644 -0.4575 -0.0810 -0.1642 -0.0561 -0.0943 -0.1685 -1.8343 -0.2798 -0.0664 -2.2685 -0.7247 -0.3095 -0.1402 -0.4163 -0.0891 -0.3077 -0.1197 -0.9856
S-3	<s> public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; <mask> } </s> java
T-3	<s> public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; <mask> } </s> java
H-3	-0.44592899084091187	public static boolean below_zero(List<Integer> operations ) { int balance = 0 ; for (Integer op : operations ) { balance += op; <mask> } return balance <s> java.lang.Integer . toString ( operations . size () ) ; }
D-3	-0.44592899084091187	public static boolean below_zero(List<Integer> operations ) { int balance = 0 ; for (Integer op : operations ) { balance += op; <mask> } return balance <s> java.lang.Integer . toString ( operations . size () ) ; }
P-3	-0.7346 -0.0404 -0.1505 -0.0548 -0.0986 -0.0638 -0.3707 -0.0867 -0.3662 -0.0872 -0.1837 -0.0617 -2.0671 -0.0928 -0.1845 -0.0723 -0.0864 -1.3073 -0.4104 -0.2387 -0.1233 -0.1739 -0.0381 -0.0689 -0.0701 -2.3110 -0.4906 -0.2591 -0.0463 -0.0484 -1.5778 -0.4295 -0.1995 -0.1920 -0.2381 -0.4952 -0.6902 -1.3507 -1.2867 -0.3676 -0.4631 -0.1587 -0.0962 -0.1374 -1.0432 -1.4060 -2.0945 -0.6570 -0.1402 -0.9131 -0.0133 -0.0532 -0.0860 -0.2357 -0.1250 -0.1341
S-48	<s> public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ <mask> } </s> java
T-48	<s> public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ <mask> } </s> java
H-48	-0.4720475673675537	public static boolean is_palindrome(String text ) { for (int i = 0 ; i < text.length () ; i += 1){ <mask> } return true ; }
D-48	-0.4720475673675537	public static boolean is_palindrome(String text ) { for (int i = 0 ; i < text.length () ; i += 1){ <mask> } return true ; }
P-48	-0.8765 -0.0484 -0.1219 -0.0650 -0.0930 -0.0219 -0.0035 -0.5026 -0.1159 -0.0653 -1.8564 -0.0897 -0.6766 -0.1272 -1.1485 -0.0811 -0.0935 -1.9270 -0.4734 -0.1166 -0.0954 -0.5315 -0.1597 -0.1135 -2.8803 -0.2040 -0.0834 -0.1045 -0.2195 -1.4630 -0.3911 -0.1389 -0.1813 -0.2268 -1.1023 -1.3178 -0.3455 -0.1413 -0.2057
S-44	<s> public static String change_base(int x, int base) { String result = ""; while (x > 0) { <mask> } return result; } </s> java
T-44	<s> public static String change_base(int x, int base) { String result = ""; while (x > 0) { <mask> } return result; } </s> java
H-44	-0.5588918328285217	public static java.lang.String change_base(int x, int base) { java.lang.String result = ""; while (x > 0 ) { <mask> } return result ; }
D-44	-0.5588918328285217	public static java.lang.String change_base(int x, int base) { java.lang.String result = ""; while (x > 0 ) { <mask> } return result ; }
P-44	-1.1721 -0.0438 -4.6360 -0.1778 -0.0621 -0.1408 -0.0423 -0.0573 -0.1021 -0.0326 -0.6424 -1.8933 -0.1731 -1.0588 -0.1435 -0.0496 -1.6333 -0.0843 -0.8359 -0.0753 -0.0685 -0.1118 -0.0644 -0.1554 -0.1007 -3.1085 -0.3126 -0.1319 -0.6613 -0.1982 -1.1269 -0.3445 -0.0794 -0.7141 -0.1873 -0.1517 -1.1997 -0.2118 -0.0927 -0.6410 -0.0976 -0.6569
S-13	<s> public static int greatest_common_divisor(int a, int b){ while (b > 0) { <mask> } return a; } </s> java
T-13	<s> public static int greatest_common_divisor(int a, int b){ while (b > 0) { <mask> } return a; } </s> java
H-13	-0.45296230912208557	public static int greatest_common_divisor(int a, int b ) { while (b > 0 ) { <mask> } return a ; }
D-13	-0.45296230912208557	public static int greatest_common_divisor(int a, int b ) { while (b > 0 ) { <mask> } return a ; }
P-13	-0.7564 -0.0422 -0.1587 -0.0168 -0.1120 -0.0103 -0.0866 -0.0293 -0.0104 -0.4817 -0.9662 -0.0976 -1.0068 -0.0959 -0.0947 -2.5448 -0.1466 -0.8844 -0.1305 -0.4877 -0.1544 -1.4648 -0.4090 -0.0943 -0.4100 -0.2484 -0.1671 -1.3175 -0.1705 -0.2702 -1.4633 -0.1061 -0.5124
S-62	<s> public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; <mask> } </s> java
T-62	<s> public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; <mask> } </s> java
H-62	-0.5394591093063354	public static int fibfib(int n) { if (n == 0 ) return 0 ; if (n == 1) return 0 ; <mask> } </s> java.lang.System.out . println () ; return 1 ; }
D-62	-0.5394591093063354	public static int fibfib(int n) { if (n == 0 ) return 0 ; if (n == 1) return 0 ; <mask> } </s> java.lang.System.out . println () ; return 1 ; }
P-62	-0.5364 -0.0375 -0.1708 -0.0343 -0.0928 -0.0316 -0.6493 -0.8399 -0.0914 -1.6628 -0.0827 -0.2950 -0.1257 -0.5197 -0.1467 -2.4275 -0.3440 -0.1320 -1.7880 -0.1914 -0.2194 -0.1161 -0.2224 -0.0831 -2.5089 -0.0642 -0.5054 -0.1376 -0.8635 -0.7711 -0.1780 -0.4276 -4.0483 -0.1073 -0.2012 -0.1659 -0.2742 -0.0769 -0.1625 -1.0525 -0.1060 -0.0795 -0.2229 -0.0280 -0.7991 -0.2065 -1.3631 -1.8209 -0.2321 -0.1727 -0.0961
S-24	<s> public static int largest_divisor(int n) { <mask> if (n % i == 0) return i; } return 1; } </s> java
T-24	<s> public static int largest_divisor(int n) { <mask> if (n % i == 0) return i; } return 1; } </s> java
H-24	-0.6094692349433899	@ java.lang.Override public static int largest_divisor(int n) { <mask> if (n % i == 0) return i; return 1 ; }
D-24	-0.6094692349433899	@ java.lang.Override public static int largest_divisor(int n) { <mask> if (n % i == 0) return i; return 1 ; }
P-24	-4.1139 -0.1838 -0.0655 -0.0210 -0.1540 -0.4132 -0.0772 -0.2994 -0.1203 -0.0157 -0.1038 -0.0290 -0.0101 -0.5307 -0.9758 -0.0880 -1.4227 -0.0820 -0.6845 -0.7232 -0.2379 -0.1931 -0.1183 -0.6124 -0.3856 -0.1971 -0.1690 -1.4012 -0.1894 -0.1183 -1.0622 -0.9485 -2.3309 -0.3228 -1.1803 -2.3600
S-91	<s> public static boolean any_int(double x, double y, double z) { <mask> return true; } return false; } </s> java
T-91	<s> public static boolean any_int(double x, double y, double z) { <mask> return true; } return false; } </s> java
H-91	-0.5152170062065125	public static boolean any_int( double x, double y, double z) { <mask> return true ; } return false; }
D-91	-0.5152170062065125	public static boolean any_int( double x, double y, double z) { <mask> return true ; } return false; }
P-91	-0.6349 -0.0446 -0.1071 -0.0921 -0.1041 -0.0757 -0.4009 -1.3552 -0.1269 -0.9081 -0.1215 -0.0784 -0.7697 -0.1187 -0.0394 -1.8837 -0.0913 -1.6292 -1.0482 -0.2035 -0.2334 -0.1943 -1.2122 -0.2525 -1.1559 -0.0546 -1.2744 -0.2497 -0.4813
S-28	<s> public static String concatenate(String[] strings) { <mask> for (String string : strings) result += string; return result; } </s> java
T-28	<s> public static String concatenate(String[] strings) { <mask> for (String string : strings) result += string; return result; } </s> java
H-28	-0.47639691829681396	public static java.lang.String concatenate(String [] strings ) { java.lang.String result = new java.lang.String () ; for (String string : strings ) result += string; return result ; }
D-28	-0.47639691829681396	public static java.lang.String concatenate(String [] strings ) { java.lang.String result = new java.lang.String () ; for (String string : strings ) result += string; return result ; }
P-28	-0.9405 -0.0486 -3.3391 -0.0922 -0.1531 -0.1392 -0.0447 -0.0724 -0.8826 -0.3692 -1.5079 -0.0977 -1.7619 -0.0818 -0.5789 -0.0749 -0.0587 -0.1225 -0.0432 -0.2589 -0.1034 -1.9736 -0.0865 -0.1090 -0.0680 -0.1385 -0.0247 -0.9498 -0.3252 -1.6577 -0.1214 -0.1822 -0.0828 -0.0646 -0.1305 -1.8893 -0.1544 -0.1046 -0.0715 -1.4434 -0.1097 -0.0567 -0.5598 -0.1308 -0.2318
S-78	<s> public static String decimal_to_binary(int decimal) { <mask> return "db" + result + "db"; } </s> java
T-78	<s> public static String decimal_to_binary(int decimal) { <mask> return "db" + result + "db"; } </s> java
H-78	-0.5490729212760925	public static java.lang.String decimal_to_binary( int decimal) { <mask> return "db" + decimal + "db"; } java.lang.String result = "db" + decimal ; return result + "db"; }
D-78	-0.5490729212760925	public static java.lang.String decimal_to_binary( int decimal) { <mask> return "db" + decimal + "db"; } java.lang.String result = "db" + decimal ; return result + "db"; }
P-78	-0.5808 -0.0438 -4.0266 -0.1472 -0.0340 -0.1283 -0.0571 -0.0794 -0.0895 -0.0664 -0.0883 -0.0106 -0.8773 -1.8559 -0.0496 -1.2218 -0.0920 -1.4511 -1.7250 -0.2095 -0.1987 -0.1246 -0.0538 -0.0955 -0.0598 -1.3997 -0.2134 -0.1184 -0.0674 -1.6681 -0.1788 -2.4866 -0.0781 -0.0928 -0.0992 -0.2359 -0.7204 -0.0889 -1.1445 -0.0573 -0.1322 -0.1690 -0.6286 -1.1189 -0.7186 -0.1638 -0.8386 -0.2275 -0.0654 -2.0270 -0.1084 -0.3376
S-72	<s> public static int smallest_change(int[] arr) { int result = 0; <mask> result += 1; } return result; } </s> java
T-72	<s> public static int smallest_change(int[] arr) { int result = 0; <mask> result += 1; } return result; } </s> java
H-72	-0.508658766746521	public static int smallest_change(int [] arr) { int result = 0 ; <mask> result += arr.length ; return result ; }
D-72	-0.508658766746521	public static int smallest_change(int [] arr) { int result = 0 ; <mask> result += arr.length ; return result ; }
P-72	-0.6941 -0.0407 -0.1391 -0.0322 -0.1012 -0.0322 -0.7033 -0.6724 -1.7464 -0.0399 -1.8229 -0.0915 -0.1550 -0.0752 -0.0968 -2.0510 -0.1872 -1.8556 -0.3964 -0.2126 -0.1529 -0.0931 -0.4719 -0.1623 -0.0153 -1.4104 -0.2890 -0.1054 -0.6809 -0.1129 -1.1289
S-156	<s> public static boolean right_angle_triangle(int a, int b, int c) { <mask> } </s> java
T-156	<s> public static boolean right_angle_triangle(int a, int b, int c) { <mask> } </s> java
H-156	-0.36464518308639526	public static boolean right_angle_triangle(int a, int b, int c) { java.lang.System.out . println ( a ) ; java.lang.System.out . println ( b ) ; java.lang.System.out . println ( c ) ; return true ; }
D-156	-0.36464518308639526	public static boolean right_angle_triangle(int a, int b, int c) { java.lang.System.out . println ( a ) ; java.lang.System.out . println ( b ) ; java.lang.System.out . println ( c ) ; return true ; }
P-156	-0.5814 -0.0422 -0.1247 -0.0753 -0.1058 -0.0548 -0.0886 -0.0551 -0.0630 -0.3788 -1.0181 -0.0822 -0.8530 -0.1091 -0.0747 -0.8632 -0.1006 -0.0751 -1.4648 -0.1036 -2.8497 -0.0820 -0.1439 -0.1274 -1.2122 -0.1127 -0.0559 -0.4067 -0.0410 -1.3681 -1.5014 -0.8859 -0.2596 -0.3630 -0.0727 -0.0753 -0.0968 -0.0691 -0.0867 -0.0908 -0.2063 -0.0500 -0.3295 -0.2458 -0.2808 -0.1527 -0.3235 -0.0778 -0.0739 -0.0974 -0.0780 -0.0963 -0.0965 -0.1632 -0.0486 -0.6992 -0.0691 -0.3317 -0.1544 -1.8316 -0.6257 -0.3034 -0.2267 -0.5601
S-82	<s> public static int starts_one_ends(int n) { if (n == 1) return 1; <mask> } </s> java
T-82	<s> public static int starts_one_ends(int n) { if (n == 1) return 1; <mask> } </s> java
H-82	-0.5129261016845703	public static int starts_one_ends(int n) { if (n == ( - 1 ) ) return 1 ; <mask> } </s> java.lang.System.out . println () ; java.lang.System.out . println () ; return 0 ; }
D-82	-0.5129261016845703	public static int starts_one_ends(int n) { if (n == ( - 1 ) ) return 1 ; <mask> } </s> java.lang.System.out . println () ; java.lang.System.out . println () ; return 0 ; }
P-82	-0.6198 -0.0371 -0.1581 -0.0434 -0.0973 -0.0497 -0.1019 -0.0900 -0.5111 -0.8869 -0.0937 -1.6963 -0.0832 -0.4027 -0.1195 -0.6528 -0.1694 -2.9721 -0.1225 -0.5198 -0.2177 -0.1692 -0.2231 -2.3817 -0.2522 -1.8975 -0.5488 -0.1751 -0.3874 -3.8052 -0.0991 -0.2092 -0.1826 -0.3378 -0.0870 -0.1664 -1.2700 -0.1267 -0.0880 -0.3138 -0.0245 -0.8983 -0.2181 -2.2650 -0.0933 -0.0788 -0.1013 -0.2148 -0.0983 -0.1640 -0.1382 -0.0480 -0.0905 -0.1182 -1.7819 -1.1279 -0.1005 -0.2281 -0.1069
S-132	<s> public static long sum_squared_nums(double[] lst) { <mask> } return result; } </s> java
T-132	<s> public static long sum_squared_nums(double[] lst) { <mask> } return result; } </s> java
H-132	-0.5330380797386169	public static long sum_squared_nums(double [] lst) { <mask> return ( lst.length ) - 1 ; }
D-132	-0.5330380797386169	public static long sum_squared_nums(double [] lst) { <mask> return ( lst.length ) - 1 ; }
P-132	-0.7040 -0.0451 -0.0709 -0.0939 -0.1216 -0.0217 -0.0908 -0.0836 -0.6519 -0.4700 -1.4696 -0.0218 -1.6823 -0.0969 -1.3036 -0.5455 -0.1694 -0.9425 -2.8847 -1.2499 -0.1221 -0.0088 -0.2520 -0.4909 -0.1729 -0.1946 -0.1150 -0.8489
S-137	<s> public static boolean is_equal_to_sum_even(int n) { <mask> } </s> java
T-137	<s> public static boolean is_equal_to_sum_even(int n) { <mask> } </s> java
H-137	-0.35985416173934937	public static boolean is_equal_to_sum_even(int n) { java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return true ; }
D-137	-0.35985416173934937	public static boolean is_equal_to_sum_even(int n) { java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return true ; }
P-137	-0.5787 -0.0460 -0.1193 -0.0680 -0.0847 -0.1081 -0.0851 -0.0841 -0.0905 -0.0668 -0.1052 -0.0433 -0.5058 -1.2825 -0.0688 -1.6005 -0.1030 -2.7650 -0.0853 -0.1506 -0.1265 -1.2061 -0.1199 -0.0609 -0.4018 -0.0314 -1.4634 -0.2192 -0.3164 -0.1849 -2.4245 -0.0811 -0.1382 -0.1002 -0.1022 -0.1006 -0.1041 -0.1742 -0.0557 -0.5733 -0.1343 -1.3615 -0.0879 -0.1372 -0.0984 -0.1249 -0.1031 -0.1406 -0.1936 -0.0654 -0.0617 -0.1447 -1.0819 -0.0884 -0.1389 -0.0969 -0.1538 -0.1046 -0.1923 -0.2365 -0.0711 -0.0598 -0.1605 -2.0320 -0.4893 -0.1941 -0.2281 -0.4623
S-158	<s> public static int[] eat(int number, int need, int remaining) { <mask> } </s> java
T-158	<s> public static int[] eat(int number, int need, int remaining) { <mask> } </s> java
H-158	-0.5035570859909058	public static int [] eat(int number, int need, int remaining) { java.lang.System.out . println ( number ) ; java.lang.System.out . println ( need ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ;
D-158	-0.5035570859909058	public static int [] eat(int number, int need, int remaining) { java.lang.System.out . println ( number ) ; java.lang.System.out . println ( need ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ;
P-158	-0.6584 -0.0479 -0.1792 -1.9381 -0.0254 -0.3613 -0.6777 -0.0582 -0.6780 -0.1313 -0.0240 -0.5482 -0.0999 -0.0321 -1.2240 -0.1064 -2.8467 -0.0788 -0.1518 -0.1286 -0.9256 -0.0910 -0.0632 -0.3910 -0.0383 -1.6295 -0.2883 -0.4636 -0.2397 -1.5768 -0.0732 -0.1215 -0.1027 -0.1055 -0.0934 -0.0999 -0.1725 -0.0476 -0.7885 -0.4695 -0.6897 -0.2692 -0.1663 -0.0753 -0.1011 -0.0994 -0.1049 -0.1067 -0.1080 -0.2607 -0.0508 -1.8944 -0.1150 -0.5496 -0.0830 -0.1123 -0.1044 -0.1317 -0.0981 -0.1455 -0.2118 -0.0538 -0.1144 -0.1377 -0.8107 -0.0852 -0.1293 -0.1051 -0.1686 -0.0994 -0.1988 -0.2370 -0.0663 -0.0661 -0.1590 -0.8077 -0.0891 -0.1404 -0.1048 -0.2125 -0.1054 -0.2678 -0.2784 -0.0802 -0.0624 -0.1658 -0.7026 -0.0916 -0.1373 -0.1039 -0.2340 -0.1100 -0.3424 -0.3296 -0.0973 -0.0610 -0.1700 -0.6580 -0.0934 -0.1253 -0.1031 -0.2120 -0.1174 -0.4092 -0.3927 -0.1247 -0.0596 -0.1707 -0.6567 -0.0937 -0.1098 -0.1021 -0.1918 -0.1225 -0.4402 -0.4558 -0.1573 -0.0612 -0.1754 -0.6657 -0.0923 -0.0969 -0.0994 -0.1771 -0.1261 -0.4775 -0.5000 -0.1870 -0.0650 -0.1813 -0.6760 -0.0898 -0.0942 -0.0976 -0.1841 -0.1249 -0.5508 -0.5050 -0.2066 -0.0682 -0.1917 -0.6700 -0.0872 -0.1109 -0.0950 -0.2177 -0.1176 -0.6313 -0.4867 -0.2180 -0.0725 -0.2029 -0.6676 -0.0867 -0.1450 -0.0942 -0.2850 -0.1125 -0.6834 -0.4726 -0.2294 -0.0760 -0.2090 -0.6684 -0.0881 -0.1905 -0.0935 -0.3710 -0.1111 -0.7116 -0.4828 -0.2388 -0.0790 -0.2218 -0.6717 -0.0898 -0.2356 -0.0943 -0.4407 -0.1113 -0.7129 -0.4903 -0.2448 -0.0811 -0.2357 -0.6809 -0.0922 -0.2875 -0.0952 -0.4600 -0.1133 -0.7049 -0.5052 -0.2501 -0.0825 -0.2561 -0.6775 -0.0954 -0.3279 -0.0985 -0.4483 -0.1170 -0.6806 -0.5260 -0.2562 -0.0844 -0.2758 -0.6767 -0.0978 -0.3576 -0.1009 -0.5421 -0.1180 -0.6633 -0.5339 -0.2647 -0.0854 -0.2836 -0.6670 -0.0991 -0.3963 -0.1042 -1.0423 -0.1205 -0.6691 -0.5534 -0.2821 -0.0864 -0.2810 -0.6625 -0.0994 -0.4415 -0.1076 -2.3664 -0.1257 -0.6857 -0.6049 -0.3062 -0.0867 -0.2749 -0.6543 -0.0988 -0.4898 -0.1102 -2.9451 -0.1306 -0.7405 -0.6494 -0.3413 -0.0858 -0.2723 -0.6521 -0.0982 -0.5640 -0.1112 -3.0092 -0.1301 -0.8270 -0.6751 -0.3946 -0.0831 -0.2791 -0.6622 -0.0964 -0.6295 -0.1099 -2.5464 -0.1248 -0.9305 -0.6907 -0.4679 -0.0799 -0.2979 -0.6902 -0.0960 -0.6643 -0.1084 -1.9541 -0.1209 -1.0393 -0.6952 -0.5296 -0.0763 -0.3360 -0.7363 -0.0993 -0.6310 -0.1085 -1.3746 -0.1188 -1.1628 -0.7169 -0.5774 -0.0737 -0.3940 -0.7751 -0.1038 -0.5653 -0.1099 -0.9930 -0.1208 -1.3082 -0.7411 -0.5984 -0.0713 -0.4589 -0.8006 -0.1079 -0.4792 -0.1125 -0.8090 -0.1244 -1.3773 -0.7489 -0.5982 -0.0706 -0.5016 -0.7903 -0.1091 -0.3953 -0.1143 -0.7901 -0.1274 -1.3829 -0.7216 -0.5898 -0.0726 -0.4874 -0.7546 -0.1108 -0.3715 -0.1154 -0.9882 -0.1305 -1.3443 -0.6862 -0.5850 -0.0756 -0.4689 -0.6995 -0.1108 -0.4172 -0.1146 -1.3539 -0.1306 -1.2794 -0.6622 -0.5960 -0.0791 -0.4484 -0.6502 -0.1132 -0.5442 -0.1145 -1.9308 -0.1307 -1.1823 -0.6453 -0.6153 -0.0824 -0.4281 -0.6167 -0.1158 -0.7834 -0.1155 -2.6690 -0.1305 -1.0905 -0.6431 -0.6421 -0.0840 -0.4312 -0.5923 -0.1182 -1.1946 -0.1172 -3.9949 -0.1304 -1.0596 -0.6448 -0.7158 -0.0865 -0.4446 -0.5827 -0.1212 -1.6507 -0.1215 -2.3058 -0.6214 -0.8455 -0.0907 -0.4309 -0.6145 -0.1225 -1.6462 -0.1248 -2.3090 -0.6413 -0.9236 -0.0918 -0.3961 -0.6395 -0.1238 -1.6030 -0.1284 -2.1443 -0.6600 -0.9426 -0.0899 -0.3695 -0.6735 -0.1253 -1.4839 -0.1312 -2.1028 -0.6726 -0.9365 -0.0859 -0.3569 -0.7068 -0.1279 -1.3375 -0.1322 -2.1648 -0.6678 -0.9032 -0.0805 -0.3476 -0.7443 -0.1288 -1.2355 -0.1354 -2.2238 -0.6557 -0.8685 -0.0754 -0.3406 -0.7899 -0.1298 -1.1725 -0.1398 -2.3605 -0.6382 -0.8874 -0.0706 -0.3417 -0.8318 -0.1311 -1.1364 -0.1464 -2.4950 -0.6582 -0.9388 -0.0658 -0.3623 -0.8516 -0.1307 -1.0350 -0.1560 -2.6234 -0.7015 -0.9871 -0.0613 -0.4055 -0.8570 -0.1315 -0.8957 -0.1666 -2.7392 -0.7465 -1.0602 -0.0582 -0.4787 -0.8402 -0.1312 -0.6992 -0.1781 -2.7927 -0.7991 -1.1002 -0.0552 -0.5475 -0.8030 -0.1319 -0.4738 -0.1866 -2.7945 -0.8458 -1.0790 -0.0522 -0.5417 -0.7387 -0.1341 -0.4358 -0.1951 -2.7796 -0.9253 -1.0459 -0.0515 -0.5283 -6.0015
S-134	<s> public static int can_arrange(int[] arr) { <mask> } return ind; } </s> java
T-134	<s> public static int can_arrange(int[] arr) { <mask> } return ind; } </s> java
H-134	-0.6624361276626587	public static int can_arrange(int [] arr) { <mask> return ind ; }
D-134	-0.6624361276626587	public static int can_arrange(int [] arr) { <mask> return ind ; }
P-134	-0.7351 -0.0400 -0.1481 -0.0945 -0.1135 -0.0657 -0.6258 -0.6288 -1.7088 -0.0332 -1.6036 -0.0995 -1.4022 -0.5934 -0.1695 -0.8494 -1.2607 -1.2858 -0.1332 -1.6579
S-45	<s> public static double triangle_area(double a, double h) { <mask> } </s> java
T-45	<s> public static double triangle_area(double a, double h) { <mask> } </s> java
H-45	-0.2932244539260864	public static double triangle_area(double a, double h) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return 0 ; }
D-45	-0.2932244539260864	public static double triangle_area(double a, double h) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return 0 ; }
P-45	-0.4539 -0.0525 -0.1928 -0.0721 -0.0917 -0.0535 -0.4967 -0.6601 -0.0750 -0.8316 -0.1546 -0.0783 -1.5392 -0.1109 -3.0119 -0.0899 -0.0905 -0.1273 -1.0151 -0.1122 -0.0403 -0.2216 -0.0421 -1.3996 -0.3090 -2.3621 -0.0822 -0.0880 -0.1037 -0.1197 -0.0901 -0.0916 -0.1350 -0.0493 -0.1284 -0.1630 -1.3406 -0.0894 -0.0936 -0.1015 -0.1265 -0.0977 -0.1131 -0.1366 -0.0682 -0.1026 -0.1524 -0.9011 -0.0907 -0.0969 -0.0995 -0.1488 -0.0998 -0.1479 -0.1579 -0.0804 -0.0916 -0.1517 -0.7069 -0.0906 -0.1052 -0.0988 -0.1744 -0.1001 -0.1938 -0.1830 -0.0929 -0.0850 -0.1562 -0.5799 -0.0911 -0.1146 -0.0986 -0.2099 -0.1035 -0.2377 -0.2028 -0.1049 -0.0783 -0.1573 -0.5224 -0.0923 -0.1166 -0.0971 -0.2490 -0.1088 -0.2843 -0.2188 -0.1141 -0.0734 -0.1570 -0.5354 -0.0925 -0.1102 -0.0957 -0.2643 -0.1128 -0.3349 -0.2415 -0.1295 -0.0686 -0.1585 -2.2907 -1.2093 -0.2070 -0.1610 -0.1399
S-41	<s> public static int car_race_collision(int n) { <mask> } </s> java
T-41	<s> public static int car_race_collision(int n) { <mask> } </s> java
H-41	-0.5078449845314026	public static int car_race_collision(int n) { <mask> } java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; return n ; }
D-41	-0.5078449845314026	public static int car_race_collision(int n) { <mask> } java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; return n ; }
P-41	-0.7552 -0.0436 -0.1711 -0.0576 -0.1100 -0.0061 -0.0833 -0.0230 -0.0087 -0.5476 -1.0450 -0.0648 -1.3737 -0.1106 -1.2836 -1.3198 -0.2345 -2.6613 -2.9810 -0.1734 -0.1002 -0.1559 -1.1410 -0.1434 -0.0739 -0.3886 -0.0250 -1.4973 -0.1898 -0.2495 -0.2347 -2.1078 -0.0910 -0.0983 -0.1086 -0.1545 -0.1088 -0.1574 -0.1486 -0.0508 -0.9015 -0.1309 -1.5321 -0.3616 -0.2784 -0.1592 -0.2259
S-60	<s> public static int sum_to_n(int n) { <mask> } </s> java
T-60	<s> public static int sum_to_n(int n) { <mask> } </s> java
H-60	-0.4845477342605591	@ java.lang.Override public static int sum_to_n(int n) { <mask> } java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; return n ; }
D-60	-0.4845477342605591	@ java.lang.Override public static int sum_to_n(int n) { <mask> } java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; return n ; }
P-60	-4.2619 -0.5443 -0.0504 -0.0295 -0.1344 -0.2519 -0.0672 -0.6799 -0.1989 -0.1103 -0.1128 -0.0737 -0.0976 -0.0685 -0.5584 -0.8307 -0.0741 -1.1396 -0.0911 -0.6784 -0.7122 -0.1752 -0.7827 -3.6359 -0.0943 -0.0712 -0.1242 -1.6990 -0.1487 -0.0567 -0.5124 -0.0250 -2.1103 -0.2806 -0.3044 -0.2308 -2.1831 -0.0936 -0.0825 -0.1132 -0.2274 -0.1072 -0.1306 -0.1780 -0.0461 -0.6810 -0.1271 -1.7165 -0.0929 -0.0887 -0.1107 -0.1756 -0.1090 -0.2045 -0.2008 -0.0602 -0.0707 -0.1373 -1.5187 -0.5052 -0.2361 -0.1383 -0.1748
S-96	<s> public static int multiply(int a, int b) { <mask> } </s> java
T-96	<s> public static int multiply(int a, int b) { <mask> } </s> java
H-96	-0.37766197323799133	public static int multiply(int a, int b) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return a * b ; }
D-96	-0.37766197323799133	public static int multiply(int a, int b) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return a * b ; }
P-96	-0.7497 -0.0406 -0.1581 -0.0506 -0.3200 -0.5940 -0.0749 -0.7591 -0.0924 -0.0848 -1.5382 -0.1103 -3.7282 -0.0812 -0.0793 -0.1370 -1.0680 -0.0941 -0.0488 -0.2709 -0.0425 -1.6325 -0.3767 -2.5151 -0.0820 -0.0936 -0.1116 -0.1890 -0.0897 -0.1108 -0.1468 -0.0450 -0.1261 -0.1812 -1.2768 -0.0894 -0.0878 -0.1089 -0.1448 -0.0969 -0.1319 -0.1453 -0.0613 -0.1031 -0.1595 -0.8317 -0.0888 -0.0863 -0.1066 -0.1590 -0.0999 -0.1638 -0.1628 -0.0756 -0.0936 -0.1549 -0.7194 -0.0885 -0.0950 -0.1060 -0.1867 -0.1003 -0.2080 -0.1932 -0.0883 -0.0880 -0.1600 -2.2234 -2.0872 -0.3473 -0.1182 -0.3600 -0.1802 -0.3457
S-53	<s> public static int add(int x, int y) { <mask> } </s> java
T-53	<s> public static int add(int x, int y) { <mask> } </s> java
H-53	-0.4683287739753723	public static int add(int x, int y) { <mask> } java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return 0 ; }
D-53	-0.4683287739753723	public static int add(int x, int y) { <mask> } java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return 0 ; }
P-53	-0.9721 -0.0423 -0.1667 -0.0911 -0.5220 -0.8047 -0.1301 -0.9511 -0.0968 -0.1028 -1.4879 -0.1041 -1.0846 -0.8195 -0.1940 -1.9593 -2.7735 -0.1385 -0.0796 -0.1637 -0.9526 -0.1305 -0.0614 -0.3982 -0.0297 -1.1048 -0.4104 -1.4298 -0.0926 -0.0863 -0.1141 -0.2321 -0.1004 -0.1412 -0.1745 -0.0435 -0.1215 -0.1627 -1.0651 -0.0943 -0.0930 -0.1101 -0.1764 -0.1047 -0.1740 -0.1541 -0.0602 -0.0996 -0.1540 -1.9835 -1.7857 -0.1935 -0.2185 -0.3524
S-2	<s> public static double truncate_number(double number) { <mask> } </s> java
T-2	<s> public static double truncate_number(double number) { <mask> } </s> java
H-2	-0.455346941947937	public static double truncate_number(double number) { <mask> } java.lang.System.out . println ( number ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; return number ; }
D-2	-0.455346941947937	public static double truncate_number(double number) { <mask> } java.lang.System.out . println ( number ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; return number ; }
P-2	-0.5503 -0.0507 -0.1826 -0.0265 -0.1034 -0.0620 -0.5369 -0.7767 -0.0888 -1.3687 -0.1055 -1.2298 -1.1807 -0.2017 -2.3160 -2.9416 -0.1310 -0.0535 -0.1557 -1.1495 -0.1500 -0.0627 -0.3427 -0.0284 -1.0308 -0.4478 -0.3138 -0.2351 -2.0932 -0.0836 -0.0804 -0.1092 -0.1262 -0.1086 -0.1102 -0.1474 -0.0581 -0.6513 -0.1278 -1.6829 -0.0910 -0.0859 -0.1082 -0.1694 -0.1099 -0.1536 -0.1608 -0.0737 -0.0705 -0.1357 -1.4365 -0.6266 -0.2483 -0.1525 -0.2192
S-55	<s> public static int fib(int n) { <mask> } </s> java
T-55	<s> public static int fib(int n) { <mask> } </s> java
H-55	-0.3878984749317169	public static int fib(int n) { java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return n ; }
D-55	-0.3878984749317169	public static int fib(int n) { java.lang.System.out . println ( n ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return n ; }
P-55	-0.5297 -0.0437 -0.1864 -0.0275 -0.3468 -0.5114 -0.0612 -1.0822 -0.1058 -3.5455 -0.0816 -0.1119 -0.1293 -1.1964 -0.0981 -0.0499 -0.1928 -0.0345 -1.5131 -0.2147 -0.2627 -0.1768 -2.9752 -0.0780 -0.1304 -0.1080 -0.1427 -0.0986 -0.1164 -0.1309 -0.0546 -0.3775 -0.1354 -1.3051 -0.0831 -0.1164 -0.1028 -0.1295 -0.1003 -0.1413 -0.1538 -0.0684 -0.0683 -0.1401 -0.8689 -0.0838 -0.1099 -0.1006 -0.1414 -0.1015 -0.1757 -0.1840 -0.0762 -0.0688 -0.1440 -2.4292 -0.4605 -0.2647 -0.2134 -0.5923
S-23	<s> public static int strlen(String string){ <mask> } </s> java
T-23	<s> public static int strlen(String string){ <mask> } </s> java
H-23	-0.5133558511734009	public static int strlen(String string){ return ( string . length () ) - 1 ; }
D-23	-0.5133558511734009	public static int strlen(String string){ return ( string . length () ) - 1 ; }
P-23	-0.4672 -0.0495 -0.1755 -0.0580 -0.0885 -0.4621 -0.1067 -0.1132 -1.3658 -2.8224 -0.7480 -0.6461 -0.9077 -0.1786 -0.0981 -0.1112 -0.6987 -0.3442 -0.2560 -0.3314 -0.7516
S-118	<s> </s> java
T-118	<s> </s> java
H-118	-0.46952763199806213	@ java.lang.Override public java.lang.String toString () { java.lang.String s = new java.lang.String () ; java.lang.System.out . println ( s ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println () ; return s ; }
D-118	-0.46952763199806213	@ java.lang.Override public java.lang.String toString () { java.lang.String s = new java.lang.String () ; java.lang.System.out . println ( s ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println ( s.length () ) ; java.lang.System.out . println () ; return s ; }
P-118	-5.6602 -0.7005 -0.0521 -0.0386 -0.1220 -0.1657 -0.2655 -3.2631 -0.3312 -0.0718 -0.1189 -0.3041 -0.3339 -0.0358 -0.0979 -1.7610 -0.0789 -0.0681 -0.1117 -0.1191 -2.0632 -0.1426 -2.8519 -0.1265 -0.0910 -0.0713 -0.1098 -0.0312 -0.5446 -0.8173 -2.5027 -0.1090 -0.0589 -0.1184 -2.3761 -0.1148 -0.0431 -0.3620 -0.0329 -0.4310 -0.6591 -0.6212 -0.1147 -0.9657 -0.0986 -0.0841 -0.1105 -0.4601 -0.0958 -0.1200 -0.1990 -0.0376 -0.5680 -0.3563 -1.1136 -0.5074 -0.6945 -0.1119 -0.1159 -0.5092 -0.0996 -0.1016 -0.0963 -0.3239 -0.0991 -0.0957 -0.1553 -0.0408 -0.4911 -0.3099 -0.6998 -0.2925 -0.0863 -0.1046 -0.1233 -0.6307 -0.0982 -0.1153 -0.0906 -0.2017 -0.0923 -0.1050 -0.1487 -0.0426 -1.6626 -0.1199 -1.2839 -0.1642 -0.3951 -0.1021 -0.1126
S-81	<s> public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { <mask> return false; } return true; } </s> java
T-81	<s> public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { <mask> return false; } return true; } </s> java
H-81	-0.3877866566181183	public static boolean prime_length(String string ) { int l = string.length () ; if (l <= 1) return false; for (int i = 2; i < l; i += 1) { <mask> return false; } return true; }
D-81	-0.3877866566181183	public static boolean prime_length(String string ) { int l = string.length () ; if (l <= 1) return false; for (int i = 2; i < l; i += 1) { <mask> return false; } return true; }
P-81	-0.6294 -0.0472 -0.0959 -0.0415 -0.0959 -0.0739 -0.4483 -0.0886 -0.1068 -2.2993 -0.0915 -0.1828 -0.0882 -0.0897 -0.0894 -0.1189 -0.1120 -3.6140 -0.1600 -0.1465 -0.1123 -0.5863 -0.1002 -1.2362 -0.0708 -0.0787 -0.7252 -0.2128 -0.1232 -0.5107 -0.0785 -0.0899 -0.9749 -0.0961 -0.1451 -0.1076 -0.8245 -0.0755 -0.0461 -1.6330 -0.0859 -0.3195 -0.1531 -0.1510 -0.1051 -0.0795 -0.7952 -0.1190 -0.2771 -0.0688 -0.9965 -0.1112 -0.8436
S-151	<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { <mask> } return result; } </s> java
T-151	<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { <mask> } return result; } </s> java
H-151	-0.5956480503082275	public static int[] compare(int[] game, int[] guess ) { int [] result = new int[game.length]; for (int i = 0 ; i < game.length; i += 1) { <mask> } return result ; }
D-151	-0.5956480503082275	public static int[] compare(int[] game, int[] guess ) { int [] result = new int[game.length]; for (int i = 0 ; i < game.length; i += 1) { <mask> } return result ; }
P-151	-0.9257 -0.0380 -0.1188 -2.3596 -0.0409 -0.5158 -0.7011 -1.8405 -0.0642 -1.3042 -0.0948 -2.1687 -0.0424 -1.9270 -0.0956 -0.1591 -2.8150 -0.0647 -0.0844 -0.0641 -0.0671 -0.7420 -0.1218 -0.0940 -0.0809 -2.2108 -0.2125 -0.1391 -0.5874 -0.0794 -0.0968 -1.9157 -0.2090 -0.0972 -0.0671 -0.2607 -0.0798 -0.0665 -1.5609 -0.0797 -0.1888 -2.6727 -0.1029 -0.5798 -0.1315 -0.1657 -0.7224 -0.2068 -0.1075 -1.4310 -0.1124 -0.3590
S-18	<s> public static int how_many_times(String string, String substring) { int times = 0; <mask> if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; } </s> java
T-18	<s> public static int how_many_times(String string, String substring) { int times = 0; <mask> if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; } </s> java
H-18	-0.5332908630371094	public static int how_many_times(String string, String substring ) { int times = 0 ; <mask> if (string. substring(i, i + substring.length()).equals( substring)){ times += 1 ; } return times ; }
D-18	-0.5332908630371094	public static int how_many_times(String string, String substring ) { int times = 0 ; <mask> if (string. substring(i, i + substring.length()).equals( substring)){ times += 1 ; } return times ; }
P-18	-0.8174 -0.0368 -0.1050 -0.0271 -0.1011 -0.0517 -0.1084 -0.0172 -0.5779 -0.1208 -0.1100 -1.1334 -1.4089 -0.0224 -2.1164 -0.0896 -0.1354 -0.0363 -0.0878 -1.8615 -0.3969 -1.0839 -0.6552 -0.2095 -0.1665 -0.1258 -0.3147 -0.1389 -0.9963 -1.5009 -0.4062 -0.6807 -0.4680 -0.1968 -0.0977 -0.1233 -0.1569 -1.3238 -2.6183 -0.7062 -0.1396 -2.2763 -0.1241 -0.1157 -1.2795 -0.3024 -0.1702 -0.2766 -0.0529 -0.5316 -0.2277 -0.9030
S-90	<s> public static int is_bored(String S) { String[] sentences = S.split("\\.|\\?|!"); int result = 0; for (String sentence : sentences) { <mask> result += 1; } return result; } </s> java
T-90	<s> public static int is_bored(String S) { String[] sentences = S.split("\\.|\\?|!"); int result = 0; for (String sentence : sentences) { <mask> result += 1; } return result; } </s> java
H-90	-0.36011531949043274	public static int is_bored(String S ) { java.lang.String [] sentences = S.split("\\.|\\?|!"); int result = 0 ; for (String sentence : sentences) { <mask> result += sentence . length () ; } return result ; }
D-90	-0.36011531949043274	public static int is_bored(String S ) { java.lang.String [] sentences = S.split("\\.|\\?|!"); int result = 0 ; for (String sentence : sentences) { <mask> result += sentence . length () ; } return result ; }
P-90	-0.7860 -0.0426 -0.1457 -0.0688 -0.0920 -0.0507 -0.0141 -0.4651 -0.1151 -0.0783 -2.3518 -0.0884 -2.3430 -0.0526 -0.3047 -0.1177 -0.1404 -0.2645 -0.0288 -0.0935 -0.1258 -0.1525 -0.7454 -0.1127 -0.0799 -0.0436 -0.0189 -0.0657 -0.0438 -0.2950 -0.1341 -0.0943 -0.0801 -1.8353 -0.5414 -0.1978 -0.1157 -0.2023 -0.0364 -0.0512 -0.0316 -1.7801 -0.0967 -0.7618 -0.1456 -0.1424 -0.0946 -0.0742 -0.5113 -1.2326 -1.3369 -0.0961 -0.5772 -0.1087 -0.1257 -0.1316 -0.6680 -0.1241 -0.5918
S-120	<s> public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { <mask> result += lst.get(i); } } return result; } </s> java
T-120	<s> public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { <mask> result += lst.get(i); } } return result; } </s> java
H-120	-0.46472424268722534	<s> public static int solution(ArrayList<Integer> lst) { int result = 0 ; for(int i = 0 ; i < ( lst.size () ) ; i ++ ) { <mask> result += lst.get(i); } return result ; }
D-120	-0.46472424268722534	<s> public static int solution(ArrayList<Integer> lst) { int result = 0 ; for(int i = 0 ; i < ( lst.size () ) ; i ++ ) { <mask> result += lst.get(i); } return result ; }
P-120	-1.5824 -0.5966 -0.2888 -0.1121 -0.0660 -0.1253 -0.0349 -0.4908 -0.0288 -0.3752 -0.0625 -0.1887 -0.0390 -1.7914 -0.0809 -0.1365 -0.0724 -0.0838 -1.3525 -0.3197 -0.2475 -0.7869 -0.9537 -0.0828 -0.0949 -2.0136 -0.5650 -0.1040 -0.0665 -2.5552 -0.1678 -0.1698 -0.5355 -1.3814 -0.0978 -0.4937 -0.0977 -1.1545 -0.5488 -0.0976 -0.3545 -0.1661 -0.1325 -0.0761 -0.0586 -0.0746 -0.1421 -0.5178 -0.3160 -0.9510 -1.8778 -0.1299 -0.1145 -0.0892 -0.6880 -0.1211 -0.6362
S-51	<s> public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { <mask> continue; sb.append(c); } return sb.toString(); } </s> java
T-51	<s> public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { <mask> continue; sb.append(c); } return sb.toString(); } </s> java
H-51	-0.4507409334182739	public static java.lang.String remove_vowels(String string ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for (char c : string.toCharArray () ) { <mask> continue; sb.append(c); } return sb. toString () ; }
D-51	-0.4507409334182739	public static java.lang.String remove_vowels(String string ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for (char c : string.toCharArray () ) { <mask> continue; sb.append(c); } return sb. toString () ; }
P-51	-0.7131 -0.0469 -4.4432 -0.1435 -0.0670 -0.1519 -0.0635 -0.0872 -0.1150 -0.0514 -0.0235 -0.0159 -0.8199 -0.1547 -0.1182 -1.9686 -0.0796 -3.0907 -0.0757 -0.0839 -0.1087 -0.9273 -0.0442 -0.0837 -0.0663 -0.0518 -0.0949 -0.0867 -0.1331 -0.0367 -0.5864 -0.2860 -0.2505 -0.1205 -0.4829 -0.0665 -0.0570 -0.0864 -0.1307 -0.0934 -0.0372 -2.6494 -0.1412 -0.0771 -0.6664 -0.1567 -0.1314 -0.1699 -0.0697 -0.0586 -0.1479 -1.0064 -0.4240 -0.1702 -1.4657 -0.1159 -0.3745 -0.0643 -0.2491 -1.5839 -1.9858 -0.2029 -0.1098 -0.6821
S-14	<s> public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ <mask> } return result; } </s> java
T-14	<s> public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ <mask> } return result; } </s> java
H-14	-0.4559815526008606	public static List<String> all_prefixes(String string ) { List<String> result = new ArrayList<String>(); for ( int i = 0 ; i < ( string.length () ) ; i += 1){ <mask> } return result ; }
D-14	-0.4559815526008606	public static List<String> all_prefixes(String string ) { List<String> result = new ArrayList<String>(); for ( int i = 0 ; i < ( string.length () ) ; i += 1){ <mask> } return result ; }
P-14	-1.5334 -0.0445 -0.4712 -0.3055 -0.0804 -0.1684 -0.0497 -0.1074 -0.0184 -0.7067 -0.1101 -0.0915 -1.9217 -0.1038 -0.5317 -0.3338 -0.0765 -0.1956 -0.0782 -0.0951 -0.0651 -1.8995 -0.2399 -0.0763 -2.6588 -0.2002 -0.1209 -1.2353 -0.0718 -0.0863 -1.4404 -0.4382 -0.1079 -0.0874 -2.1268 -0.1100 -0.2938 -0.1028 -1.0042 -0.1495 -0.2849 -0.0779 -0.1103 -0.1733 -2.2759 -0.3324 -0.1359 -0.1381 -0.2594 -0.1242 -0.1013 -0.6870 -0.1121 -0.2717
S-7	<s> public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ <mask> } return result; } </s> java
T-7	<s> public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ <mask> } return result; } </s> java
H-7	-0.45256751775741577	public static List<String> filter_by_substring(List<String> strings, String substring ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { result . add ( substring ) ; } return result ; }
D-7	-0.45256751775741577	public static List<String> filter_by_substring(List<String> strings, String substring ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { result . add ( substring ) ; } return result ; }
P-7	-1.7451 -0.0446 -0.5427 -0.2921 -0.0775 -0.1479 -0.0463 -0.0866 -0.0511 -0.0848 -1.0409 -0.5270 -0.1173 -0.2882 -0.0705 -0.1338 -0.1197 -1.0826 -2.3424 -0.0132 -1.6450 -0.0921 -0.4888 -0.4340 -0.0751 -0.1798 -0.0760 -0.0935 -0.0594 -1.5908 -0.2429 -0.0759 -2.2718 -0.2372 -0.1204 -0.1648 -0.0771 -0.0483 -0.1454 -2.2033 -0.0950 -1.4451 -0.6071 -0.1855 -0.0930 -0.4023 -0.6980 -0.2822 -0.5841 -0.1668 -0.1175 -0.2285 -0.1105 -0.2471
S-129	<s> public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; <mask> } return sequence; } </s> java
T-129	<s> public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; <mask> } return sequence; } </s> java
H-129	-0.6288511157035828	public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; <mask> } return sequence; }
D-129	-0.6288511157035828	public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; <mask> } return sequence; }
P-129	-0.8317 -0.0413 -0.1468 -2.4360 -0.0278 -0.3721 -0.5599 -0.0790 -1.4702 -0.0854 -0.2070 -2.9346 -0.0612 -0.0921 -0.0822 -0.0793 -0.5890 -0.2301 -0.0983 -0.2479 -1.5733 -0.1347 -1.1533 -0.2202 -0.1297 -1.7713 -0.5266 -0.1035 -0.4229 -1.2275 -0.1036 -1.9789 -0.2441 -0.0753 -1.0182 -0.1110 -0.6072 -1.1428 -0.1096 -2.3927 -0.5486 -0.1595 -0.1659 -2.3545 -0.3095 -0.0806 -0.9642 -0.1270 -0.3853
S-34	<s> public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ <mask> } Collections.sort(result); return result; } </s> java
T-34	<s> public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ <mask> } Collections.sort(result); return result; } </s> java
H-34	-0.4260064661502838	public static List<Integer> unique(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ <mask> } java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return result ; }
D-34	-0.4260064661502838	public static List<Integer> unique(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ <mask> } java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; return result ; }
P-34	-1.2423 -0.0444 -0.5609 -0.2934 -0.0771 -0.1409 -0.0432 -0.3759 -0.0873 -0.3054 -0.0678 -0.1458 -0.0561 -1.5264 -0.0851 -0.5790 -0.3958 -0.0792 -0.1719 -0.0691 -0.0924 -0.0600 -1.8201 -0.2644 -0.0794 -2.4155 -0.1746 -0.1256 -0.1537 -0.0656 -0.0597 -0.0604 -1.9180 -0.7226 -0.2465 -0.1227 -0.8145 -2.8776 -0.0650 -0.7070 -0.1018 -0.4414 -0.0796 -0.0561 -0.2151 -0.0166 -2.0281 -0.2128 -2.3558 -0.0925 -0.2092 -0.1100 -0.1775 -0.0900 -0.1202 -0.1498 -0.0284 -0.1797 -0.1495 -1.8518 -0.0969 -0.2019 -0.1128 -0.1520 -0.0922 -0.1774 -0.1524 -0.0457 -0.1220 -0.1559 -2.1209 -0.1622 -0.3050 -0.1018 -0.0930
S-83	<s> public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + "").length(); i += 1){ <mask> } return Integer.toBinaryString(sum); } </s> java
T-83	<s> public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + "").length(); i += 1){ <mask> } return Integer.toBinaryString(sum); } </s> java
H-83	-0.5380147695541382	<s> public static String solve(int N) { int sum = 0 ; for (int i = 0 ; i < (N + "" ) ; i += 1 ) { <mask> } return Integer.toBinaryString ( sum ) ; }
D-83	-0.5380147695541382	<s> public static String solve(int N) { int sum = 0 ; for (int i = 0 ; i < (N + "" ) ; i += 1 ) { <mask> } return Integer.toBinaryString ( sum ) ; }
P-83	-2.0636 -0.3589 -0.2509 -0.1061 -0.0850 -2.4120 -0.0420 -0.5862 -0.5631 -0.1089 -1.7710 -0.0865 -0.2121 -0.0637 -0.1103 -1.6412 -0.3893 -0.2063 -0.1267 -0.4737 -0.0788 -0.0915 -2.4611 -0.5366 -0.1156 -0.0760 -0.2285 -0.2642 -0.0788 -0.1136 -1.5511 -0.7961 -0.0901 -0.1419 -0.2340 -2.1209 -0.0868 -0.3028 -0.1163 -0.1336 -0.6200 -0.1947 -1.2519 -0.0968 -0.1067 -0.0242 -0.0601 -2.1193 -0.5214 -1.4774 -0.1864 -0.1156 -0.4647
S-47	<s> public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { <mask> } } </s> java
T-47	<s> public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { <mask> } } </s> java
H-47	-0.4149709641933441	public static double median(int[] list) { java.lang.System.out . println ( list.length ) ; if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { <mask> } }
D-47	-0.4149709641933441	public static double median(int[] list) { java.lang.System.out . println ( list.length ) ; if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { <mask> } }
P-47	-1.0515 -0.0390 -0.1418 -0.1962 -0.5037 -0.5503 -2.1533 -0.1059 -1.6104 -0.0839 -2.2137 -0.0634 -0.1343 -0.1086 -0.7029 -0.0892 -0.0482 -0.3632 -0.0366 -1.8349 -0.7155 -0.0708 -0.0420 -0.2312 -0.1896 -0.7031 -0.1301 -0.2892 -0.1095 -0.0596 -0.3843 -0.0536 -0.0907 -1.0622 -0.0911 -0.1233 -0.0859 -0.0549 -0.1499 -0.1937 -0.1173 -0.1182 -0.0985 -0.0530 -0.0835 -0.2212 -1.8005 -0.0997 -0.0646 -0.1138 -0.3552 -0.1435 -0.1183 -0.1484 -0.1761 -2.6654
S-56	<s> public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; <mask> } </s> java
T-56	<s> public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; <mask> } </s> java
H-56	-0.41380077600479126	public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray () ) { if (b == '<') depth += 1; else depth -= 1; <mask> } return depth == 0 ; }
D-56	-0.41380077600479126	public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray () ) { if (b == '<') depth += 1; else depth -= 1; <mask> } return depth == 0 ; }
P-56	-0.7721 -0.0406 -0.1197 -0.0423 -0.1005 -0.0444 -0.0119 -0.0040 -0.5502 -0.1423 -0.2254 -2.2010 -0.0880 -0.1328 -0.0719 -0.0850 -1.7934 -0.1833 -0.1262 -0.2824 -0.0916 -0.0628 -0.1431 -0.1399 -0.1026 -0.0294 -2.9780 -0.1424 -0.1171 -0.1063 -0.1231 -0.2340 -0.1226 -0.5010 -0.3134 -0.1288 -0.0726 -1.5080 -0.1232 -0.2716 -0.0303 -0.7789 -0.1784 -0.1222 -0.1314 -0.1154 -1.1215 -0.5708 -1.6534 -1.4154 -0.8011 -0.1885 -0.4949
S-149	<s> public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { <mask> } </s> java
T-149	<s> public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { <mask> } </s> java
H-149	-0.4377816617488861	public static int x_or_y(int n, int x, int y ) { if (n == 1 ) return y ; for (int i = 2; i < n; i += 1) { <mask> } </s> java.lang.System.out . println () ; return y ; }
D-149	-0.4377816617488861	public static int x_or_y(int n, int x, int y ) { if (n == 1 ) return y ; for (int i = 2; i < n; i += 1) { <mask> } </s> java.lang.System.out . println () ; return y ; }
P-149	-0.6946 -0.0373 -0.1314 -0.1379 -0.0922 -0.0508 -0.1010 -0.0535 -0.4472 -0.8023 -0.1068 -1.0248 -0.1065 -0.1377 -1.1625 -0.0770 -0.0946 -2.1396 -0.0853 -0.2706 -0.1191 -0.7298 -0.1152 -2.8333 -0.3828 -0.1279 -0.3592 -1.5925 -0.2858 -0.1191 -0.4815 -0.0810 -0.0958 -1.3064 -0.0947 -0.1293 -0.1677 -0.9979 -0.0805 -0.0664 -1.8587 -0.0810 -0.2025 -0.1327 -0.1531 -0.1477 -2.6907 -0.0849 -0.1839 -0.1753 -0.1694 -0.0951 -0.1469 -0.7524 -0.1074 -0.0484 -0.3087 -0.0239 -0.6510 -0.2324 -0.9694 -0.4232 -0.7085 -0.1108 -0.0784
S-126	<s> public static String intersection(int[] interval1, int[] interval2) { <mask> int length = r - l; if(length > 0 && is_prime(length)) return "YES"; return "NO"; } </s> java
T-126	<s> public static String intersection(int[] interval1, int[] interval2) { <mask> int length = r - l; if(length > 0 && is_prime(length)) return "YES"; return "NO"; } </s> java
H-126	-0.5453025698661804	public static java.lang.String intersection(int[] interval1, int[] interval2) { <mask> int length = r - l ; if(length > 0 && is_prime(length)) return "YES"; return "NO"; } return "YES"; }
D-126	-0.5453025698661804	public static java.lang.String intersection(int[] interval1, int[] interval2) { <mask> int length = r - l ; if(length > 0 && is_prime(length)) return "YES"; return "NO"; } return "YES"; }
P-126	-1.2398 -0.0462 -4.6222 -0.1352 -0.0524 -0.1562 -0.0366 -0.0364 -0.6287 -1.5779 -1.6624 -0.0585 -0.3695 -0.0966 -1.8180 -0.0639 -0.2431 -0.0865 -0.9190 -0.2213 -0.2324 -0.2728 -0.0817 -0.1006 -0.2241 -0.0905 -0.0930 -1.4896 -0.1889 -0.8765 -0.1452 -0.1922 -0.1306 -0.3972 -0.1273 -0.0973 -0.0319 -0.5095 -0.2301 -0.6305 -0.0942 -0.1054 -0.0143 -1.2762 -0.1920 -0.1102 -0.0245 -1.4056 -0.1784 -2.9431 -0.3406 -0.2135 -1.9341 -0.1279 -0.8194
S-85	<s> public static String anti_shuffle(String s) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray(); Arrays.sort(chars); <mask> } </s> java
T-85	<s> public static String anti_shuffle(String s) { String result = ""; for (String str : s.split(" ")) { char[] chars = str.toCharArray(); Arrays.sort(chars); <mask> } </s> java
H-85	-0.5149580836296082	public static java.lang.String anti_shuffle(String s ) { java.lang.String result = null ; for (String str : s.split(" ")) { char[] chars = str.toCharArray(); java.lang.System.out . println ( chars.length ) ; java.lang.System.out . println ( chars.length ) ; result = str.toCharArray () ; } return result ; }
D-85	-0.5149580836296082	public static java.lang.String anti_shuffle(String s ) { java.lang.String result = null ; for (String str : s.split(" ")) { char[] chars = str.toCharArray(); java.lang.System.out . println ( chars.length ) ; java.lang.System.out . println ( chars.length ) ; result = str.toCharArray () ; } return result ; }
P-85	-0.5865 -0.0545 -5.0342 -0.1426 -0.1159 -0.1399 -0.0423 -0.0191 -0.1077 -0.0326 -0.6414 -0.1545 -0.1331 -1.9439 -0.0867 -1.1081 -0.0724 -0.0813 -0.1066 -0.1063 -0.4032 -0.1048 -2.9634 -0.3339 -0.2604 -0.1138 -0.2021 -0.1065 -0.0603 -0.0768 -0.1245 -0.6112 -0.0712 -0.0825 -0.0961 -0.1684 -2.4420 -0.0524 -0.0788 -0.0790 -0.1181 -0.0823 -0.0364 -2.8993 -2.4132 -0.0863 -0.0704 -0.1252 -1.5375 -0.0940 -0.0855 -0.5007 -0.0239 -0.8741 -0.6389 -0.1251 -0.0194 -0.4113 -0.1984 -3.1826 -0.0892 -0.0791 -0.1148 -0.4691 -0.0835 -0.0845 -0.1448 -0.0179 -0.7749 -0.7598 -0.1856 -0.0468 -0.3333 -0.1731 -0.6082 -0.3196 -2.2764 -0.2745 -0.8005 -0.0462 -1.0827 -0.7287 -1.3738 -0.8990 -0.1064 -0.3136 -0.2874 -0.1793
S-154	<s> public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; <mask> } return new int[] {even_count, odd_count}; } </s> java
T-154	<s> public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; <mask> } return new int[] {even_count, odd_count}; } </s> java
H-154	-0.4602297842502594	public static int [] even_odd_count(int num) { int even_count = 0; int odd_count = 0; <mask> } return new int[] {even_count, odd_count}; }
D-154	-0.4602297842502594	public static int [] even_odd_count(int num) { int even_count = 0; int odd_count = 0; <mask> } return new int[] {even_count, odd_count}; }
P-154	-1.2811 -0.0368 -0.1274 -2.3570 -0.1192 -0.1173 -0.0136 -0.1030 -0.0494 -0.5811 -0.8604 -0.0666 -1.6234 -0.0819 -0.2146 -0.1569 -0.1431 -0.0567 -0.0976 -1.7368 -0.1065 -0.0631 -0.1095 -0.0570 -0.1148 -1.6097 -1.5420 -0.3561 -0.1823 -1.2167 -0.2360 -0.0913 -0.0748 -2.0950 -0.0871 -0.4798 -0.1240 -0.0556 -1.0175 -0.0826 -0.1162 -0.0532 -0.2876 -0.2293 -0.4989
S-130	<s> public static int digits(int n) { int product = 1; int odd_count = 0; <mask> odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; } </s> java
T-130	<s> public static int digits(int n) { int product = 1; int odd_count = 0; <mask> odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; } </s> java
H-130	-0.47807633876800537	<s> public static int digits(int n) { int product = 1; int odd_count = 0; <mask> odd_count ++ ; n /= 10; } if(odd_count == 0) return 0; return product ; }
D-130	-0.47807633876800537	<s> public static int digits(int n) { int product = 1; int odd_count = 0; <mask> odd_count ++ ; n /= 10; } if(odd_count == 0) return 0; return product ; }
P-130	-1.5375 -0.3054 -0.3069 -0.1086 -0.0650 -0.1215 -0.0180 -0.6606 -0.5684 -0.0788 -1.5724 -0.0840 -0.1555 -0.0334 -0.1247 -1.8313 -0.1533 -0.1233 -0.1075 -0.0592 -0.1050 -1.3273 -0.5004 -0.2281 -0.1583 -0.4884 -0.1075 -0.0725 -2.2019 -0.5729 -0.2441 -0.0502 -0.1839 -0.8233 -0.2610 -0.8791 -0.1445 -0.0931 -0.0584 -0.1604 -2.5245 -0.1099 -1.2843 -0.1609 -0.0656 -0.9274 -0.6233 -0.5760
S-84	<s> public static int add_even_at_odd(int[] lst) { int sum = 0; <mask> if (lst[i] % 2 == 0) sum += lst[i]; } return sum; } </s> java
T-84	<s> public static int add_even_at_odd(int[] lst) { int sum = 0; <mask> if (lst[i] % 2 == 0) sum += lst[i]; } return sum; } </s> java
H-84	-0.5381276607513428	public static int add_even_at_odd(int[] lst) { int sum = 0 ; <mask> if (lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
D-84	-0.5381276607513428	public static int add_even_at_odd(int[] lst) { int sum = 0 ; <mask> if (lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
P-84	-1.1869 -0.0395 -0.1498 -0.0791 -0.1153 -0.0341 -0.0950 -0.0550 -0.1041 -0.0061 -1.0298 -0.8075 -2.1437 -0.0398 -1.7113 -0.0808 -0.1593 -0.0830 -0.0967 -1.5022 -0.2346 -1.0924 -0.6105 -0.2060 -0.1848 -0.1189 -0.5382 -2.4155 -0.2048 -0.2911 -0.7676 -0.0748 -0.1459 -1.5973 -0.3529 -0.7772 -0.1011 -0.0877 -0.9240 -0.1648 -2.5611 -0.9297 -0.1982 -0.1127 -0.7017 -0.1102 -0.2692
S-68	<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; <mask> return result; } </s> java
T-68	<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; <mask> return result; } </s> java
H-68	-0.47595977783203125	public static int search(int [] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i ; } int result = -1; <mask> return result ; }
D-68	-0.47595977783203125	public static int search(int [] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i ; } int result = -1; <mask> return result ; }
P-68	-1.2647 -0.0383 -0.1040 -0.0436 -0.7437 -0.6113 -2.1146 -0.0300 -1.3654 -0.0913 -0.1130 -0.0671 -0.0954 -1.1774 -0.2086 -0.1266 -0.3695 -0.0874 -0.0748 -0.0377 -1.3706 -0.1228 -0.1683 -0.1263 -1.1621 -0.2630 -0.0747 -1.8415 -0.1210 -0.1679 -0.1160 -1.6331 -0.1274 -0.2592 -0.0829 -0.0955 -2.0759 -0.4810 -0.2528 -0.1689 -0.2303 -0.1082 -1.0202 -0.1580 -0.4262
S-50	<s> public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { <mask> sb.append(c); } return sb.toString(); } </s> java
T-50	<s> public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { <mask> sb.append(c); } return sb.toString(); } </s> java
H-50	-0.4629296362400055	public static java.lang.String decode_shift(String string ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for (char c : string.toCharArray()) { <mask> sb.append(c); } return sb. toString () ; }
D-50	-0.4629296362400055	public static java.lang.String decode_shift(String string ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for (char c : string.toCharArray()) { <mask> sb.append(c); } return sb. toString () ; }
P-50	-0.6212 -0.0480 -4.5061 -0.1329 -0.0600 -0.1411 -0.0573 -0.0357 -0.1062 -0.0223 -0.7247 -0.1639 -0.1138 -1.8556 -0.0795 -2.8895 -0.0764 -0.0718 -0.1117 -1.0500 -0.0500 -0.0810 -0.0668 -0.0558 -0.0972 -0.0820 -0.1326 -0.0455 -0.5589 -0.2787 -0.3018 -0.1249 -0.4407 -0.0623 -0.0564 -0.0783 -0.1325 -0.0947 -0.0333 -2.4608 -0.0859 -0.4782 -0.1446 -0.1234 -0.0576 -0.1605 -1.3193 -0.5763 -0.2052 -1.7818 -0.1025 -0.1405 -0.0698 -0.2469 -1.7715 -1.2494 -0.1817 -0.1021 -0.4137
S-42	<s> public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { <mask> } return result; } </s> java
T-42	<s> public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { <mask> } return result; } </s> java
H-42	-0.35900551080703735	public static List<Integer> incr_list(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result . add ( n ) ; } return result ; }
D-42	-0.35900551080703735	public static List<Integer> incr_list(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l ) { result . add ( n ) ; } return result ; }
P-42	-0.8804 -0.0434 -0.5638 -0.3165 -0.0775 -0.1611 -0.0071 -0.0921 -0.0329 -0.6675 -0.0862 -0.3432 -0.0709 -0.1725 -0.0638 -1.5500 -0.0870 -0.5619 -0.3984 -0.0756 -0.1814 -0.0713 -0.0927 -0.0609 -1.7957 -0.2661 -0.0797 -2.3778 -0.2144 -0.1215 -0.1687 -0.0655 -0.0619 -0.0646 -1.5092 -0.1076 -1.4017 -0.5229 -0.1663 -0.0868 -0.2852 -0.1417 -0.2168 -0.3836 -0.1313 -0.0891 -0.2472 -0.1151 -0.3128
S-30	<s> public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { <mask> } return result; } </s> java
T-30	<s> public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { <mask> } return result; } </s> java
H-30	-0.36658045649528503	public static List<Integer> get_positive(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers ) { result . add ( number ) ; } return result ; }
D-30	-0.36658045649528503	public static List<Integer> get_positive(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers ) { result . add ( number ) ; } return result ; }
P-30	-0.8257 -0.0447 -0.5727 -0.2832 -0.0771 -0.1330 -0.0979 -0.0958 -0.0131 -0.4052 -0.0875 -0.2550 -0.0683 -0.1403 -0.0585 -1.8428 -0.0885 -0.6500 -0.3654 -0.0722 -0.1632 -0.0771 -0.0901 -0.0649 -1.8333 -0.2357 -0.0757 -2.3191 -0.2042 -0.1203 -0.1509 -0.0559 -0.0513 -0.0660 -1.6664 -0.1053 -1.8856 -0.5482 -0.1517 -0.0828 -0.1632 -0.1389 -0.2356 -0.3694 -0.1495 -0.0972 -0.2521 -0.1116 -0.3206
S-22	<s> public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ <mask> } return result; } </s> java
T-22	<s> public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ <mask> } return result; } </s> java
H-22	-0.3967960476875305	public static List<Integer> filter_integers(List<Object> values ) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values ) { result . add ( value . getId () ) ; } return result ; }
D-22	-0.3967960476875305	public static List<Integer> filter_integers(List<Object> values ) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values ) { result . add ( value . getId () ) ; } return result ; }
P-22	-1.2242 -0.0434 -0.6437 -0.3252 -0.0956 -0.1350 -0.0442 -0.0858 -0.0199 -0.0303 -0.8261 -0.1017 -0.2808 -0.0615 -0.1620 -0.0691 -1.5215 -0.0864 -0.6630 -0.3790 -0.0822 -0.1564 -0.0772 -0.0931 -0.0682 -1.7559 -0.2334 -0.0762 -2.1458 -0.2334 -0.1256 -0.1404 -0.0456 -0.0535 -0.0727 -1.9727 -0.0844 -1.5885 -0.6040 -0.1979 -0.0798 -0.3398 -1.5596 -0.9285 -0.0651 -0.1627 -0.1482 -0.2697 -0.1488 -0.1037 -0.2505 -0.1123 -0.2561
S-121	<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { <mask> } } return result; } </s> java
T-121	<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { <mask> } } return result; } </s> java
H-121	-0.47098496556282043	public static int add_elements(ArrayList<Integer> arr, int k ) { int result = 0 ; for(int i = 0 ; i < k ; i ++ ) { <mask> } return result ; }
D-121	-0.47098496556282043	public static int add_elements(ArrayList<Integer> arr, int k ) { int result = 0 ; for(int i = 0 ; i < k ; i ++ ) { <mask> } return result ; }
P-121	-1.0496 -0.0374 -0.1506 -0.0816 -0.1005 -0.0235 -0.5977 -0.0312 -0.3208 -0.0551 -0.1584 -0.0340 -1.0178 -0.0909 -0.1684 -1.9289 -0.0917 -0.1509 -0.0842 -0.0898 -1.7846 -0.2691 -0.2421 -0.8264 -0.8204 -0.0821 -0.0906 -2.4723 -0.2969 -0.0975 -0.0698 -0.4199 -1.6285 -0.0871 -1.8058 -0.7949 -0.1004 -0.5625 -0.1531 -0.1815 -0.7940 -0.5027 -0.1445 -0.5330 -0.1051 -0.5375
S-35	<s> public static int max_element(List<Integer> l) { <mask> for (Integer e : l) { if (e > m){ m = e; } } return m; } </s> java
T-35	<s> public static int max_element(List<Integer> l) { <mask> for (Integer e : l) { if (e > m){ m = e; } } return m; } </s> java
H-35	-0.4257912337779999	<s> public static int max_element(List<Integer> l) { <mask> for (Integer e : l) { if (e > m){ m = e ; } } return m ; }
D-35	-0.4257912337779999	<s> public static int max_element(List<Integer> l) { <mask> for (Integer e : l) { if (e > m){ m = e ; } } return m ; }
P-35	-2.1545 -0.6379 -0.2673 -0.1182 -0.0554 -0.1246 -0.0454 -0.1008 -0.0256 -0.4661 -0.0765 -0.3543 -0.0775 -0.1741 -0.0693 -1.4859 -0.0825 -0.7690 -0.1802 -0.1695 -0.4203 -0.1285 -0.1518 -0.1443 -0.0581 -0.0690 -1.7524 -0.1008 -0.1755 -0.1190 -1.5970 -0.3128 -0.4151 -2.3825 -0.1933 -0.1348 -0.1126 -1.2576 -0.2665 -0.1640 -0.1073 -0.2224 -0.9814 -0.1656 -0.2933
S-101	<s> public static int choose_num(int x, int y) { <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; } </s> java
T-101	<s> public static int choose_num(int x, int y) { <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; } </s> java
H-101	-0.5109218955039978	@ java.lang.Override public static int choose_num(int x, int y) { <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }
D-101	-0.5109218955039978	@ java.lang.Override public static int choose_num(int x, int y) { <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }
P-101	-4.8584 -0.6198 -0.0650 -0.0211 -0.1593 -0.3153 -0.0708 -0.3625 -0.1076 -0.0653 -0.1015 -0.0432 -0.5454 -0.6580 -0.1922 -0.7587 -0.0967 -0.1193 -1.3503 -0.0863 -0.6614 -0.2182 -0.1950 -0.1658 -0.3975 -0.1506 -0.1530 -0.4331 -0.0870 -0.7632 -0.0719 -0.1864 -0.9750 -0.1867 -0.5714 -0.1455 -0.0819 -0.1554 -0.8229 -0.0560 -0.9519 -0.3133 -0.2098 -0.1219 -1.3633 -0.4263 -3.5520
S-59	<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { <mask> } } return largest; } </s> java
T-59	<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { <mask> } } return largest; } </s> java
H-59	-0.4350273609161377	public static int largest_prime_factor(int n) { int largest = 1 ; for (int j = 2; j < n; j += 1) { <mask> } return largest ; }
D-59	-0.4350273609161377	public static int largest_prime_factor(int n) { int largest = 1 ; for (int j = 2; j < n; j += 1) { <mask> } return largest ; }
P-59	-1.1322 -0.0356 -0.1288 -0.0189 -0.1066 -0.0193 -0.0933 -0.0306 -0.5590 -0.8255 -0.0670 -2.1143 -0.0876 -0.1528 -0.0316 -0.0993 -2.4961 -0.3406 -0.2226 -0.1245 -0.5739 -0.0850 -0.0870 -0.9820 -0.0805 -0.1318 -0.1220 -1.3470 -0.0745 -0.0679 -2.2473 -0.0956 -0.3528 -0.1502 -0.1761 -0.5794 -0.2044 -0.0481 -1.2873 -0.1307 -0.3262
S-15	<s> public static String string_sequence(int n) { String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } <mask> } </s> java
T-15	<s> public static String string_sequence(int n) { String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } <mask> } </s> java
H-15	-0.5343208312988281	public static java.lang.String string_sequence(int n) { java.lang.String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } return result ; }
D-15	-0.5343208312988281	public static java.lang.String string_sequence(int n) { java.lang.String result = ""; for (int i = 0; i <= n; i += 1){ result += i + " "; } return result ; }
P-15	-0.6572 -0.0558 -5.0921 -0.1901 -0.0780 -0.1465 -0.0583 -0.1327 -0.1001 -0.0127 -0.9934 -1.4921 -0.0651 -1.9337 -0.0808 -0.5263 -0.0725 -0.0575 -0.1161 -0.0698 -0.4112 -0.0913 -2.8038 -0.3214 -0.1225 -0.8255 -0.0834 -0.0965 -1.6579 -0.1053 -0.1813 -0.1190 -0.8495 -0.0905 -0.0685 -0.1894 -1.1397 -0.1329 -0.0780 -0.1921 -0.0825 -0.1171 -0.0249 -0.1260 -2.4250 -0.2172 -0.9004 -0.3738 -0.4243
S-8	<s> public static Integer[] sum_product(List<Integer> numbers) { <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; } </s> java
T-8	<s> public static Integer[] sum_product(List<Integer> numbers) { <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; } </s> java
H-8	-0.3692392110824585	public static java.lang.Integer [] sum_product(List<Integer> numbers) { java.lang.Integer [] result = new java.lang.Integer [ numbers.length ] ; for (Integer n : numbers ) { result[0] += n; result[1] *= n; } return result ; }
D-8	-0.3692392110824585	public static java.lang.Integer [] sum_product(List<Integer> numbers) { java.lang.Integer [] result = new java.lang.Integer [ numbers.length ] ; for (Integer n : numbers ) { result[0] += n; result[1] *= n; } return result ; }
P-8	-1.3525 -0.0419 -3.2175 -0.1074 -0.4253 -0.1399 -0.5565 -0.1942 -0.0497 -0.1031 -0.0196 -1.1482 -0.3257 -0.3951 -0.0821 -0.2667 -0.0543 -2.0081 -0.0794 -0.4380 -0.0619 -0.0708 -0.1069 -0.1010 -0.1125 -0.1426 -0.1149 -0.3491 -0.2773 -0.0698 -0.0620 -0.1073 -0.0103 -0.2550 -0.1727 -0.0212 -0.4074 -0.6270 -0.3669 -0.5260 -0.1324 -0.1629 -0.0661 -0.0592 -0.0522 -2.3880 -0.1151 -0.0779 -0.9199 -0.0822 -0.0797 -0.9984 -0.0746 -0.3244 -0.0099 -0.0710 -0.8740 -0.0511 -0.1005 -0.0600 -1.1556 -0.0921 -0.3475
S-133	<s> public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; <mask> } </s> java
T-133	<s> public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(" "); String last = " "; <mask> } </s> java
H-133	-0.3679995834827423	public static boolean check_if_last_char_is_a_letter(String txt) { java.lang.String [] parts = txt.split(" "); java.lang.String last = " "; <mask> } </s> java.lang.System.out . println ( parts.length ) ; java.lang.System.out . println ( parts.length ) ; return true ; }
D-133	-0.3679995834827423	public static boolean check_if_last_char_is_a_letter(String txt) { java.lang.String [] parts = txt.split(" "); java.lang.String last = " "; <mask> } </s> java.lang.System.out . println ( parts.length ) ; java.lang.System.out . println ( parts.length ) ; return true ; }
P-133	-0.3903 -0.0462 -0.1398 -0.0592 -0.1112 -0.0600 -0.1121 -0.0279 -0.1021 -0.0444 -0.0931 -0.0699 -0.0825 -0.0568 -0.0960 -0.0871 -0.8365 -0.1267 -0.0300 -1.9434 -0.0775 -2.4443 -0.0549 -0.3263 -0.1120 -0.1389 -0.7595 -0.0439 -0.0854 -0.0270 -0.1246 -0.6175 -0.0970 -0.1724 -2.2447 -0.0894 -0.0675 -0.1173 -0.1144 -0.0909 -0.1235 -0.2133 -0.0250 -0.2797 -0.2060 -0.1752 -0.5870 -3.0942 -0.1011 -0.2061 -0.2596 -0.1146 -0.1011 -0.1262 -2.8801 -0.1070 -0.0760 -0.4950 -0.0250 -0.7598 -0.7081 -0.1738 -0.0134 -0.2828 -0.1413 -1.8199 -0.1070 -0.0577 -0.1172 -0.3170 -0.0965 -0.1271 -0.0965 -0.0318 -0.2984 -1.6316 -0.4998 -0.0492 -0.2116 -0.1198 -1.2237 -0.3779 -0.2325 -0.1079 -0.1613
S-66	<s> public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(" ")) { <mask> } return result; } </s> java
T-66	<s> public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(" ")) { <mask> } return result; } </s> java
H-66	-0.3598526120185852	public static int fruit_distribution(String s , int n ) { int result = n ; for (String str : s.split(" ")) { <mask> } return result ; }
D-66	-0.3598526120185852	public static int fruit_distribution(String s , int n ) { int result = n ; for (String str : s.split(" ")) { <mask> } return result ; }
P-66	-0.9264 -0.0408 -0.1225 -0.0364 -0.0954 -0.0187 -0.6366 -0.1073 -0.1152 -1.9740 -0.1041 -0.0676 -1.9620 -0.0857 -0.1470 -0.0835 -0.0920 -0.1522 -1.2026 -0.3921 -0.1176 -0.1991 -0.0979 -0.0654 -0.1048 -0.1508 -0.7553 -0.1005 -0.1099 -0.1118 -0.8333 -0.1382 -0.1751 -1.4658 -0.2077 -0.1431 -0.4489 -0.1031 -0.3438
S-148	<s> public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, <mask> ); return result; } </s> java
T-148	<s> public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, <mask> ); return result; } </s> java
H-148	-0.502977728843689	public static ArrayList<String> sorted_list_sum(ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length () == 2 ) continue; result.add(str); } Collections.sort( result, <mask> ); return result ; }
D-148	-0.502977728843689	public static ArrayList<String> sorted_list_sum(ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length () == 2 ) continue; result.add(str); } Collections.sort( result, <mask> ); return result ; }
P-148	-1.2990 -0.0587 -2.0768 -0.3465 -0.0791 -0.1381 -0.0436 -0.0868 -0.0343 -0.0900 -0.0805 -0.7660 -0.0703 -0.3988 -0.0749 -0.1738 -0.0406 -1.6572 -0.0859 -1.8155 -0.4768 -0.0767 -0.1760 -0.0713 -0.0957 -0.0589 -1.4322 -0.3307 -0.0765 -1.7831 -0.1547 -0.1200 -0.1471 -0.1141 -0.0550 -0.0525 -1.7007 -0.0981 -0.1442 -0.1342 -0.8577 -0.4243 -0.2452 -1.8640 -1.0239 -2.1211 -0.8714 -0.0708 -0.0590 -0.1292 -0.1356 -0.3994 -1.1970 -0.3919 -1.7069 -0.1007 -2.1441 -0.0967 -0.0668 -0.3720 -0.0758 -1.7942 -0.1221 -0.1034 -0.1704 -0.8358 -0.0950 -0.0818 -0.9271 -0.1036 -0.4095
S-4	<s> public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ <mask> } return deviation_sum / numbers.size(); } </s> java
T-4	<s> public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ <mask> } return deviation_sum / numbers.size(); } </s> java
H-4	-0.35022494196891785	public static double mean_absolute_deviation(List<Double> numbers ) { double sum = 0.; for (Double number : numbers ) { sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers ) { <mask> } return deviation_sum / numbers.size(); }
D-4	-0.35022494196891785	public static double mean_absolute_deviation(List<Double> numbers ) { double sum = 0.; for (Double number : numbers ) { sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers ) { <mask> } return deviation_sum / numbers.size(); }
P-4	-1.1988 -0.0428 -0.1284 -0.0522 -0.0945 -0.0419 -0.0886 -0.0270 -0.0251 -0.5187 -0.0912 -0.3432 -0.0436 -0.1535 -0.0751 -1.7740 -0.0891 -0.1456 -0.0747 -0.0877 -0.1072 -0.8019 -0.3165 -0.1153 -0.0724 -0.0745 -0.0587 -0.0722 -2.4530 -0.1448 -0.0928 -0.0550 -0.0634 -1.5202 -0.0869 -0.1586 -0.0618 -0.0981 -0.0825 -0.0571 -0.0837 -0.0995 -0.1568 -2.6010 -0.1318 -0.0652 -0.1350 -0.0547 -0.0922 -0.1110 -0.6606 -0.1678 -0.1072 -0.0630 -0.0738 -0.0570 -0.0758 -1.2882 -0.1162 -2.2747 -0.2340 -0.1456 -0.7401 -0.1633 -0.5330 -0.0950 -0.0517 -0.0767 -0.1108 -0.0985 -0.1470 -2.7544 -0.0939 -0.6692
S-88	<s> public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( <mask> ); } else { sb.append(c); } } return sb.toString(); } </s> java
T-88	<s> public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( <mask> ); } else { sb.append(c); } } return sb.toString(); } </s> java
H-88	-0.44634661078453064	public static String encrypt(String s ) { StringBuilder sb = new StringBuilder () ; String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( <mask> ); } else { sb.append(c); } } return sb. toString () ; }
D-88	-0.44634661078453064	public static String encrypt(String s ) { StringBuilder sb = new StringBuilder () ; String d = "abcdefghijklmnopqrstuvwxyz"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( <mask> ); } else { sb.append(c); } } return sb. toString () ; }
P-88	-0.6131 -0.0515 -2.2928 -0.0318 -0.6560 -0.1159 -0.1081 -2.1292 -0.0806 -1.5092 -0.0267 -0.0868 -0.0634 -0.7565 -4.3676 -0.2425 -2.5467 -0.1335 -0.0911 -0.1467 -0.0104 -0.0043 -0.0043 -0.8890 -0.1354 -0.1196 -0.3345 -0.0735 -0.0579 -0.1156 -0.1110 -0.0661 -0.0374 -0.3805 -0.1568 -0.8390 -0.0444 -0.0479 -0.0742 -0.1338 -0.3227 -0.1981 -0.0708 -0.0665 -0.0621 -0.2302 -0.0529 -0.1187 -1.1359 -0.4986 -0.0985 -0.0883 -0.1458 -1.3618 -0.0879 -0.0877 -0.1721 -0.0534 -0.1193 -1.1523 -0.5078 -0.5625 -1.6572 -0.0988 -0.1540 -0.1139 -0.0644 -0.1367 -1.6266 -1.3541 -0.1954 -0.1037 -0.1995
S-0	<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ <mask> if (distance < threshold) return true; } } return false; } </s> java
T-0	<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ <mask> if (distance < threshold) return true; } } return false; } </s> java
H-0	-0.4257407784461975	public static boolean has_close_elements(List<Double> numbers, double threshold ) { for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ <mask> if (distance < threshold ) return true; } } return false; }
D-0	-0.4257407784461975	public static boolean has_close_elements(List<Double> numbers, double threshold ) { for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ <mask> if (distance < threshold ) return true; } } return false; }
P-0	-1.4650 -0.0457 -0.1111 -0.0554 -0.0945 -0.0276 -0.0889 -0.0215 -0.5690 -0.0801 -0.3560 -0.0401 -0.1545 -0.0531 -0.9737 -0.1068 -0.0428 -3.0743 -0.1854 -0.2836 -0.1281 -0.6449 -0.0842 -0.0952 -2.0283 -0.0836 -0.1051 -0.1035 -0.0983 -0.2263 -2.7409 -0.0774 -0.0653 -0.1950 -1.2039 -0.1473 -0.1109 -0.3719 -0.1117 -0.0937 -0.1607 -0.0703 -1.3656 -0.0941 -0.0880 -0.0839 -0.0985 -0.1828 -2.0408 -0.0890 -0.0615 -0.1357 -1.2052 -0.5757 -0.1607 -0.1810 -0.2062 -0.1194 -1.9620 -0.2090 -0.0684 -1.3008 -0.1594 -0.0917 -0.7120 -0.2839 -0.3410 -0.1749 -0.0358 -1.2618 -0.1006 -0.4883
S-89	<s> public static Integer next_smallest(int[] lst) { <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; } </s> java
T-89	<s> public static Integer next_smallest(int[] lst) { <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; } </s> java
H-89	-0.3860672414302826	public static Integer next_smallest(int[] lst) { <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; return null ; }
D-89	-0.3860672414302826	public static Integer next_smallest(int[] lst) { <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println ( no_duplicate.length ) ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; java.lang.out . println () ; return null ; }
P-89	-0.5628 -0.0469 -2.0809 -0.0656 -0.1089 -0.0715 -0.0302 -0.4919 -0.5878 -2.2292 -0.0275 -1.2423 -0.0845 -0.9567 -0.1798 -0.1770 -0.2588 -0.1443 -0.1486 -0.0816 -0.0720 -0.0308 -1.0528 -0.2316 -0.1042 -0.2343 -0.5969 -0.3491 -1.5162 -1.9576 -2.6658 -0.0347 -0.1080 -0.0578 -0.0973 -0.0882 -0.1085 -1.1262 -0.5762 -0.3394 -0.8862 -1.4100 -0.0796 -2.1288 -0.0802 -0.3398 -0.1103 -0.8651 -0.0864 -0.0635 -0.5350 -0.0154 -1.2857 -0.6218 -0.1157 -0.0571 -0.1104 -0.0277 -0.2481 -0.2029 -1.4855 -0.0786 -0.1064 -0.1075 -0.2733 -0.0918 -0.0844 -0.1399 -0.0386 -1.1656 -0.7513 -0.1087 -0.0536 -0.2595 -0.0230 -0.2042 -0.1514 -1.6343 -0.0908 -0.1063 -0.1139 -0.1607 -0.0915 -0.1052 -0.1367 -0.0491 -1.4222 -0.4600 -0.1144 -0.0517 -0.3245 -0.0322 -0.1901 -0.1708 -1.3408 -0.0917 -0.0797 -0.1122 -0.1347 -0.0884 -0.1166 -0.1423 -0.0564 -1.2147 -0.1524 -1.4966 -0.0944 -0.0833 -0.1088 -0.1494 -0.0919 -0.1685 -0.1995 -0.0693 -0.1582 -0.1521 -1.2428 -0.0939 -0.0849 -0.1046 -0.1530 -0.0967 -0.2080 -0.2422 -0.0886 -0.0938 -0.1596 -1.0645 -0.0936 -0.0891 -0.1020 -0.1646 -0.1038 -0.2642 -0.2947 -0.1141 -0.0843 -0.1707 -0.9573 -0.0942 -0.0983 -0.0996 -0.1930 -0.1108 -0.3363 -0.3481 -0.1343 -0.0805 -0.1795 -0.8081 -0.0955 -0.1165 -0.0983 -0.2280 -0.1119 -0.4192 -0.3848 -0.1494 -0.0785 -0.1825 -0.6800 -0.0967 -0.1366 -0.0963 -0.2523 -0.1131 -0.4816 -0.4184 -0.1596 -0.0780 -0.1831 -0.5947 -0.0972 -0.1600 -0.0957 -0.2875 -0.1137 -0.5357 -0.4395 -0.1631 -0.0786 -0.1858 -0.5491 -0.0975 -0.1844 -0.0958 -0.3090 -0.1154 -0.5544 -0.4631 -0.1643 -0.0793 -0.1899 -0.5428 -0.0986 -0.1973 -0.0959 -0.2977 -0.1196 -0.5422 -0.4782 -0.1619 -0.0805 -0.1970 -0.5677 -0.1018 -0.2081 -0.0968 -0.2919 -0.1222 -0.5173 -0.4620 -0.1579 -0.0829 -0.2021 -0.6087 -0.1031 -0.2316 -0.0983 -0.5217 -0.1241 -0.5197 -0.4648 -0.1590 -0.0864 -0.2047 -0.6285 -0.1019 -0.2813 -0.1022 -1.9162 -0.1300 -0.4968 -0.5069 -0.1628 -0.0890 -0.2106 -0.6263 -0.0984 -0.3771 -0.1067 -2.5523 -0.4971 -0.1762 -0.0902 -0.2225 -0.6419 -0.0974 -0.5241 -0.1073 -2.0948 -0.5005 -0.1905 -0.0865 -0.2349 -0.6493 -0.0992 -0.7445 -0.1090 -2.0760 -0.5268 -0.2150 -0.0807 -0.2579 -0.6609 -0.1033 -0.8757 -0.1128 -2.1995 -0.5730 -0.2545 -0.0781 -0.2900 -0.6757 -0.1077 -0.8793 -0.1176 -2.3534 -0.6263 -0.3109 -0.0779 -0.3324 -0.6933 -0.1143 -0.7561 -0.1226 -2.4840 -0.6874 -0.3776 -0.0785 -0.3773 -2.0072 -1.9844 -0.6931 -0.2829 -0.0928
S-114	<s> public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; <mask> } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; } </s> java
T-114	<s> public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; <mask> } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; } </s> java
H-114	-0.3555743098258972	public static int max_fill(int[][] grid, int bucket_capacity ) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; <mask> } result += (row_capacity + bucket_capacity ) / bucket_capacity ; return result ; }
D-114	-0.3555743098258972	public static int max_fill(int[][] grid, int bucket_capacity ) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; <mask> } result += (row_capacity + bucket_capacity ) / bucket_capacity ; return result ; }
P-114	-0.9658 -0.0375 -0.1208 -0.0344 -0.0938 -0.0667 -0.5816 -0.4748 -0.1651 -0.0196 -0.9599 -0.0942 -0.0276 -0.1114 -0.0908 -1.5126 -0.0945 -0.1016 -0.0878 -0.0879 -1.4622 -0.1628 -0.6198 -0.4344 -0.0886 -0.0900 -1.6484 -0.0938 -0.0896 -0.0936 -0.0918 -0.0746 -0.9528 -0.0851 -1.3915 -0.0946 -0.1453 -0.0881 -0.1118 -0.0771 -0.1133 -2.5152 -0.3151 -0.2380 -0.1709 -1.0512 -0.2448 -0.1687 -0.1372 -0.5225 -0.1031 -0.0922 -0.1801 -0.1387 -0.1143 -0.0999 -1.3839 -0.0944 -0.1129 -0.0991 -0.0898 -0.7778 -0.1945 -0.1127 -0.7840 -0.0960 -0.2492
S-10	<s> public static String make_palindrome(String str){ if (str.length() == 0) return ""; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; <mask> return result; } </s> java
T-10	<s> public static String make_palindrome(String str){ if (str.length() == 0) return ""; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; <mask> return result; } </s> java
H-10	-0.5058011412620544	public static String make_palindrome(String str ) { if (str.length() == 0) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome(str. substring(beginning_of_suffix)) ) { beginning_of_suffix += 1; } String result = str; <mask> return result ; }
D-10	-0.5058011412620544	public static String make_palindrome(String str ) { if (str.length() == 0) return ""; int beginning_of_suffix = 0; while ( ! is_palindrome(str. substring(beginning_of_suffix)) ) { beginning_of_suffix += 1; } String result = str; <mask> return result ; }
P-10	-0.9586 -0.0584 -2.0764 -0.0715 -0.0960 -0.0268 -0.0054 -0.5558 -0.1238 -0.0961 -2.2491 -0.1250 -0.2621 -0.1202 -0.8605 -0.2258 -0.1678 -2.0865 -0.1120 -1.7985 -0.0947 -2.9898 -0.2385 -0.1948 -0.0971 -0.0582 -0.1134 -0.0687 -0.0975 -1.5593 -0.0971 -0.8046 -0.4763 -0.6360 -0.0969 -0.0231 -0.0061 -0.6232 -0.6159 -0.1247 -0.5635 -1.3394 -0.1329 -0.0171 -0.0953 -0.0600 -0.1095 -0.0821 -2.6221 -0.7537 -0.1895 -0.2623 -0.1086 -0.0671 -0.1105 -0.0754 -0.0905 -1.9685 -0.0648 -1.3168 -0.0659 -0.1033 -0.1072 -2.0917 -0.4043 -0.2100 -0.1333 -0.2051 -0.0877 -1.1243 -0.1284 -0.6346
S-39	<s> public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } } </s> java
T-39	<s> public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } } </s> java
H-39	-0.41462448239326477	public static int prime_fib(int n){ java.util.ArrayList <Integer> fib = new java.util.ArrayList <Integer> () ; fib.add(0); fib.add(1); while (true) { int len = fib.size(); <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }
D-39	-0.41462448239326477	public static int prime_fib(int n){ java.util.ArrayList <Integer> fib = new java.util.ArrayList <Integer> () ; fib.add(0); fib.add(1); while (true) { int len = fib.size(); <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }
P-39	-0.8414 -0.0384 -0.1339 -0.0371 -0.0926 -0.0714 -0.0385 -0.5302 -0.9220 -0.0768 -1.9510 -3.0099 -0.0619 -0.9961 -0.1273 -0.2479 -2.3018 -0.0770 -0.3313 -0.0405 -0.0809 -0.0586 -0.1177 -0.1004 -0.0250 -0.1190 -0.0658 -0.5379 -0.0695 -0.6879 -1.0279 -0.3825 -0.2078 -0.1063 -0.1575 -0.3732 -0.0811 -0.0989 -0.1240 -0.4332 -0.1976 -0.1311 -0.6693 -1.2750 -0.0776 -0.2018 -0.0461 -0.0890 -0.0670 -0.1102 -0.1340 -1.9657 -0.2000 -0.1948 -0.1252 -0.1077 -0.0252 -1.5231 -0.1111 -0.1209 -0.4121 -0.0963 -0.8708 -0.1056 -0.0496 -0.1173 -0.2340 -0.2408 -0.1265 -0.0731 -0.0999 -0.1327 -1.0639 -0.1819 -0.6638 -0.3228 -2.9562 -0.4390
S-162	<s> public static ArrayList<Integer> generate_integers(int a, int b) { <mask> ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; } </s> java
T-162	<s> public static ArrayList<Integer> generate_integers(int a, int b) { <mask> ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; } </s> java
H-162	-0.40245744585990906	public static java.util.ArrayList <Integer> generate_integers(int a, int b) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }
D-162	-0.40245744585990906	public static java.util.ArrayList <Integer> generate_integers(int a, int b) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }
P-162	-1.7541 -0.0554 -3.4873 -0.1029 -0.2480 -0.1403 -0.5853 -1.0575 -0.0905 -0.5412 -0.0428 -0.0947 -0.0238 -0.0311 -0.7760 -1.0782 -0.0701 -0.9758 -0.0855 -0.0668 -1.8975 -0.0842 -0.5611 -0.0721 -0.0481 -0.0915 -0.1596 -0.2757 -0.5593 -0.3226 -0.0974 -0.0980 -0.0419 -0.0686 -0.0843 -0.0474 -0.1370 -0.0539 -0.3748 -0.0966 -0.8094 -0.4708 -0.3061 -0.1337 -0.1243 -1.0411 -0.0848 -0.0896 -0.2594 -0.6904 -0.0867 -0.0593 -0.2378 -0.4684 -0.0840 -0.0585 -1.4366 -0.0798 -0.1312 -0.1221 -1.3445 -0.3530 -0.0638 -0.0915 -0.9262 -0.1610 -0.1834 -0.6030 -0.8872 -0.5539 -1.2517 -0.1064 -0.1364 -0.0697 -0.6062 -0.0862 -0.3126
S-141	<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; } </s> java
T-141	<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; } </s> java
H-141	-0.4161968529224396	<s> public static int sum_squares(int[] lst) { int result = 0 ; for (int i = 0 ; i < lst.length; i += 1){ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
D-141	-0.4161968529224396	<s> public static int sum_squares(int[] lst) { int result = 0 ; for (int i = 0 ; i < lst.length; i += 1){ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
P-141	-1.8022 -0.4926 -0.3930 -0.1262 -0.0655 -0.1391 -0.0953 -0.1073 -0.0138 -0.0863 -0.8096 -0.6283 -2.2720 -0.0431 -1.8274 -0.0762 -0.1260 -0.0730 -0.0950 -1.5817 -0.4184 -0.1936 -0.1217 -0.4989 -0.0877 -0.0977 -1.6388 -0.4173 -0.0984 -0.0760 -0.5027 -0.0668 -0.0440 -1.0207 -0.0945 -0.1016 -0.2077 -1.4302 -0.4687 -0.2354 -0.1750 -0.1716 -0.0589 -0.1409 -0.6107 -0.4051 -0.2428 -0.0736 -0.0983 -0.4241 -0.2298 -0.2657 -0.1867 -0.0674 -0.4192 -0.2615 -1.9789 -0.4379 -0.1895 -0.0670 -0.0557 -0.4700 -0.2349 -2.0342 -0.1399 -0.1180 -0.0881 -0.5887 -0.0933 -0.1319
S-109	<s> public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; } </s> java
T-109	<s> public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; } </s> java
H-109	-0.44410163164138794	public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; }
D-109	-0.44410163164138794	public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return "YES"; } return "NO"; }
P-109	-1.6374 -0.0525 -2.7996 -0.0389 -0.3654 -0.0462 -0.3088 -0.0610 -0.1809 -0.0411 -0.5188 -1.5227 -0.2646 -0.0485 -0.1700 -0.0342 -0.3010 -0.0949 -0.1637 -0.0722 -0.1007 -1.1724 -0.2203 -0.0864 -0.9556 -0.3583 -0.1588 -0.1276 -0.4122 -0.2985 -0.5703 -0.8769 -0.1001 -0.0700 -0.0485 -0.4589 -0.0959 -0.1204 -0.6633 -0.4150 -0.1756 -0.4191 -0.1052 -1.7896 -0.2769 -1.5005 -0.2678 -0.1737 -0.5992 -0.4213 -0.1905 -0.2053 -1.2609 -0.1333 -0.1048 -0.1068 -0.0197 -1.2975 -0.0985 -0.2255 -0.1159 -0.0185 -1.2031 -0.1031 -2.0223
S-76	<s> public static boolean iscude(int a) { <mask> BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; } </s> java
T-76	<s> public static boolean iscude(int a) { <mask> BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; } </s> java
H-76	-0.4323917329311371	<s> public static boolean iscude(int a) { <mask> BigDecimal bd = BigDecimal. valueOf (root ) ; int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }
D-76	-0.4323917329311371	<s> public static boolean iscude(int a) { <mask> BigDecimal bd = BigDecimal. valueOf (root ) ; int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }
P-76	-2.2531 -0.5577 -0.1956 -0.0953 -0.0773 -0.0884 -0.0204 -0.0217 -0.3904 -0.5242 -0.0712 -1.1159 -0.0873 -0.6981 -0.3208 -0.2280 -0.7573 -0.0284 -0.0815 -0.5839 -0.1033 -1.1446 -2.1642 -0.2797 -1.6346 -0.2429 -0.1621 -0.0436 -0.1057 -0.0441 -0.0910 -0.1201 -0.1384 -0.4808 -0.0555 -0.0996 -0.1543 -0.0295 -0.9399 -0.0242 -0.0183 -0.0955 -0.0458 -0.0166 -0.0847 -0.0384 -1.1704 -0.1011 -0.0367 -2.0987 -0.1262 -0.8007 -0.1218 -0.4930 -2.2068 -0.1062 -0.0542 -0.4709 -0.2592 -0.1044 -0.0500 -0.5698 -0.1068 -1.0531 -0.1048 -0.1614 -1.6591 -0.1326 -1.2927
S-73	<s> public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; <mask> if (l1 <= l2) return lst1; return lst2; } </s> java
T-73	<s> public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; <mask> if (l1 <= l2) return lst1; return lst2; } </s> java
H-73	-0.40347322821617126	public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0 ; for (String st : lst1) l1 += st.length () ; int l2 = 0 ; <mask> if (l1 <= l2) return lst1; return lst2; }
D-73	-0.40347322821617126	public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0 ; for (String st : lst1) l1 += st.length () ; int l2 = 0 ; <mask> if (l1 <= l2) return lst1; return lst2; }
P-73	-0.9698 -0.0454 -0.5240 -0.3820 -0.0756 -0.1537 -0.0758 -0.0872 -0.0483 -0.6116 -0.0963 -0.3373 -0.0700 -0.1632 -0.0381 -0.6123 -0.3397 -0.3103 -0.0726 -0.1404 -0.0307 -0.2906 -0.0885 -0.2020 -0.1017 -0.0791 -0.1076 -2.2856 -0.3182 -0.4645 -0.1256 -0.1233 -0.1110 -0.0614 -0.0411 -0.6861 -0.1807 -0.0809 -0.0723 -0.1543 -0.1553 -0.1387 -3.4496 -0.5772 -0.1518 -0.0733 -0.0698 -0.1056 -0.1181 -0.4570 -0.4573 -0.2724 -0.1892 -0.1845 -0.1251 -0.8899 -0.0756 -0.2574 -0.0732 -0.4874 -0.0927 -0.0434 -2.6466 -0.1890 -0.0368 -3.1934 -0.0928 -2.0745
S-40	<s> public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { <mask> if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; } </s> java
T-40	<s> public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { <mask> if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; } </s> java
H-40	-0.4393468201160431	<s> public static boolean triples_sum_to_zero(int [] numbers) { for (int i = 0; i < numbers.length; i += 1) { <mask> if (numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } return false; }
D-40	-0.4393468201160431	<s> public static boolean triples_sum_to_zero(int [] numbers) { for (int i = 0; i < numbers.length; i += 1) { <mask> if (numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } return false; }
P-40	-1.9026 -0.6928 -0.3626 -0.1115 -0.0721 -0.0950 -0.0310 -0.0097 -0.0857 -0.0449 -0.0876 -0.0486 -0.0926 -0.0738 -0.5594 -0.7770 -2.4259 -0.0642 -2.0198 -0.0777 -0.3450 -0.1308 -0.4588 -0.0879 -0.0917 -1.4862 -0.0999 -0.1016 -0.1239 -0.0709 -0.0512 -0.9536 -0.0757 -0.0686 -1.7566 -0.0844 -0.3814 -0.2574 -0.1895 -0.1536 -0.1185 -0.5182 -1.1103 -0.6201 -0.2564 -0.3089 -0.1131 -0.4788 -0.1301 -0.2967 -0.3587 -0.0873 -0.6645 -0.1182 -0.3532 -0.2509 -2.2251 -0.2565 -0.3574 -0.0777 -1.1629 -0.2011 -0.6045 -0.0308 -1.2011 -0.0979 -0.8337
S-95	<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ <mask> } } if (is_prime) primes.add(i); } return primes; } </s> java
T-95	<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ <mask> } } if (is_prime) primes.add(i); } return primes; } </s> java
H-95	-0.5108973979949951	<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ <mask> } if (is_prime ) { primes.add(i); } return primes ; }
D-95	-0.5108973979949951	<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ <mask> } if (is_prime ) { primes.add(i); } return primes ; }
P-95	-1.6990 -0.5878 -0.2330 -0.1215 -0.0869 -0.4647 -0.3788 -0.0629 -0.1419 -0.0778 -0.1012 -0.0642 -0.0863 -0.0436 -0.7502 -0.8263 -0.0700 -2.1713 -0.0742 -0.5534 -0.5278 -0.0646 -0.1666 -0.0889 -0.0916 -0.0737 -2.0775 -0.3384 -0.0620 -2.4463 -0.1941 -0.1274 -0.6958 -0.0807 -0.0939 -1.3075 -0.0989 -0.1792 -0.1929 -1.0954 -0.0977 -0.0786 -0.2302 -2.1152 -0.5748 -0.1497 -0.1161 -0.4416 -0.1990 -0.1328 -0.2790 -0.1031 -0.0235 -1.4989 -1.4257 -0.3958 -0.1643 -0.7913 -1.2316 -1.1172 -2.0010 -0.1849 -0.2183 -0.1089 -1.4743 -0.0908 -0.3877
S-159	<s> public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName("JavaScript"); <mask> } return Double.parseDouble(engine.eval(expression).toString()); } </s> java
T-159	<s> public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName("JavaScript"); <mask> } return Double.parseDouble(engine.eval(expression).toString()); } </s> java
H-159	-0.37646111845970154	public static double do_algebra(String [] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName("JavaScript"); <mask> } return Double. parseDouble(engine.eval(expression). toString () ) ; }
D-159	-0.37646111845970154	public static double do_algebra(String [] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName("JavaScript"); <mask> } return Double. parseDouble(engine.eval(expression). toString () ) ; }
P-159	-1.1028 -0.0553 -0.0894 -0.0570 -0.1022 -0.0074 -0.0075 -0.4490 -0.1583 -2.0137 -0.1359 -0.8655 -0.1201 -2.3100 -0.0187 -1.2756 -0.0622 -0.2481 -0.0133 -0.3958 -0.2641 -0.0683 -0.0910 -0.3187 -0.0524 -0.1031 -0.0949 -0.0814 -0.0740 -0.1732 -0.0502 -0.0742 -2.6596 -0.2066 -0.2117 -0.0636 -0.0493 -0.0973 -0.0758 -0.1234 -0.1227 -0.0346 -0.0309 -0.1243 -0.0066 -0.4749 -0.3062 -0.1747 -0.1394 -0.4646 -0.2500 -0.1384 -0.0909 -1.0001 -0.5623 -0.1363 -0.1002 -0.0288 -0.3140 -0.4067 -1.6708 -2.2062 -0.9023 -0.4154 -0.2132 -0.1129 -0.3749
S-54	<s> public static boolean same_chars(String s0, String s1) { <mask> for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); } </s> java
T-54	<s> public static boolean same_chars(String s0, String s1) { <mask> for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); } </s> java
H-54	-0.3547085225582123	<s> public static boolean same_chars(String s0, String s1) { <mask> for (char c0 : s0.toCharArray () ) { set0.add(c0); } for (char c1 : s1.toCharArray () ) { set1.add(c1); } return set0.equals(set1); }
D-54	-0.3547085225582123	<s> public static boolean same_chars(String s0, String s1) { <mask> for (char c0 : s0.toCharArray () ) { set0.add(c0); } for (char c1 : s1.toCharArray () ) { set1.add(c1); } return set0.equals(set1); }
P-54	-2.0529 -0.4297 -0.2309 -0.0977 -0.0661 -0.0958 -0.0703 -0.0975 -0.0244 -0.4383 -0.1152 -0.0920 -0.3528 -1.3031 -0.0799 -0.3332 -0.0774 -0.5585 -0.1547 -0.1775 -0.2521 -0.1217 -0.4325 -0.1021 -0.0730 -0.0886 -0.0699 -0.0707 -0.1123 -0.0415 -3.3208 -0.1648 -0.0894 -0.2412 -0.0621 -0.2733 -0.6567 -0.1623 -0.9908 -0.1037 -0.1859 -0.1122 -0.3505 -0.0982 -0.0652 -0.0754 -0.0755 -0.1077 -0.1982 -0.0527 -0.0633 -0.0977 -0.1037 -0.1118 -0.1182 -0.2565 -0.4434 -0.1407 -1.2312 -0.0860 -0.1547 -0.2746 -0.0797 -1.4757 -0.4402 -0.2678 -0.9254 -0.1247 -2.4811
S-43	<s> public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { <mask> if (l.get(i) + l.get(j) == 0) return true; } } return false; } </s> java
T-43	<s> public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { <mask> if (l.get(i) + l.get(j) == 0) return true; } } return false; } </s> java
H-43	-0.41912713646888733	@ java.lang.Override public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { <mask> if (l.get(i) + l.get(j) == 0) return true; } return false; }
D-43	-0.41912713646888733	@ java.lang.Override public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { <mask> if (l.get(i) + l.get(j) == 0) return true; } return false; }
P-43	-4.5303 -0.2613 -0.0842 -0.0329 -0.1652 -0.3476 -0.0735 -0.2924 -0.1192 -0.1027 -0.0954 -0.0466 -0.0964 -0.0444 -0.1013 -0.0775 -0.4422 -0.0687 -0.5457 -0.0548 -0.1869 -0.0624 -1.5626 -0.0844 -0.3286 -0.1306 -0.7332 -0.0857 -0.0919 -1.3268 -0.0988 -0.0951 -0.1235 -0.1112 -0.1642 -2.5290 -0.0778 -0.0669 -1.3741 -0.0846 -0.3463 -0.2072 -0.1789 -0.1563 -0.1139 -0.9272 -0.1142 -0.2420 -0.2819 -0.6259 -0.7861 -0.6205 -0.0938 -0.1128 -0.2174 -0.2673 -0.1580 -0.9001 -0.1899 -1.1129 -0.1502 -0.0561 -0.8315 -0.1443 -0.5252 -0.0289 -0.8982 -0.0882 -1.6439
S-11	<s> public static String string_xor(String a, String b){ String result = ""; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } <mask> return result; } </s> java
T-11	<s> public static String string_xor(String a, String b){ String result = ""; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } <mask> return result; } </s> java
H-11	-0.5517818927764893	public static java.lang.String string_xor(String a, String b){ java.lang.String result = ""; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } <mask> return result ; } return result ; }
D-11	-0.5517818927764893	public static java.lang.String string_xor(String a, String b){ java.lang.String result = ""; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += "0"; } <mask> return result ; } return result ; }
P-11	-0.8690 -0.0607 -5.2986 -0.1542 -0.0532 -0.1351 -0.0358 -0.1122 -0.1024 -0.0183 -0.9147 -0.1879 -0.1027 -0.9423 -1.9544 -0.0838 -1.7214 -0.9562 -0.0632 -0.0577 -0.1107 -0.0988 -0.1340 -0.0870 -2.5664 -0.1954 -0.1210 -1.0853 -0.0807 -0.0832 -1.5943 -0.0983 -0.0972 -0.4890 -0.1120 -0.0682 -2.6959 -0.0895 -0.0657 -0.1897 -1.1659 -0.1318 -0.1186 -0.3509 -0.1188 -0.8723 -0.4009 -0.3522 -1.1967 -0.2118 -0.0865 -0.0990 -0.7340 -0.3601 -0.2302 -1.7211 -0.1229 -0.0690 -0.1040 -1.4452 -0.1427 -0.6290 -0.1576 -0.1617 -0.5796 -0.0988 -0.7235 -0.1491 -1.9325 -0.7603 -0.6990 -0.1192 -0.3491
S-161	<s> public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); } </s> java
T-161	<s> public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals("")) return null; <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); } </s> java
H-161	-0.5141289830207825	public static java.lang.String string_to_md5(String text ) throws NoSuchAlgorithmException { if (text.equals("")) return null ; <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }
D-161	-0.5141289830207825	public static java.lang.String string_to_md5(String text ) throws NoSuchAlgorithmException { if (text.equals("")) return null ; <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }
P-161	-0.6540 -0.0389 -5.0984 -0.1007 -0.0529 -0.1497 -0.0401 -0.1141 -0.0959 -0.0531 -0.0959 -0.0377 -0.0643 -0.5156 -0.1252 -0.0663 -2.1530 -0.0707 -0.0553 -0.0414 -0.0823 -0.3453 -0.1230 -0.3323 -0.2366 -2.4007 -0.0534 -0.4826 -0.0702 -0.4652 -1.5318 -0.4050 -0.3686 -0.1786 -0.3287 -0.1106 -0.0998 -0.5659 -0.2509 -0.1286 -0.7816 -1.0907 -0.0376 -2.5885 -0.1024 -0.1136 -0.0447 -0.1110 -0.0842 -2.1869 -0.1480 -0.0064 -0.0313 -0.1089 -0.0558 -0.0188 -0.0160 -1.1128 -0.1932 -1.4447 -0.5591 -2.0712 -0.1449 -1.6684
S-153	<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); <mask> if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; } </s> java
T-153	<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); <mask> if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; } </s> java
H-153	-0.5137290358543396	public static boolean cycpattern_check(String a, String b) { int l = b.length(); <mask> if (a. substring(i, i + l ) . equals(pat. substring(j, j + l))) return true; } return false; }
D-153	-0.5137290358543396	public static boolean cycpattern_check(String a, String b) { int l = b.length(); <mask> if (a. substring(i, i + l ) . equals(pat. substring(j, j + l))) return true; } return false; }
P-153	-1.4034 -0.0481 -0.0856 -0.0396 -0.0682 -0.0022 -0.0853 -0.0501 -0.4707 -0.1079 -0.0862 -1.0723 -1.7394 -0.1022 -1.8663 -0.0847 -0.2545 -0.0771 -0.0925 -0.1192 -0.1479 -0.1114 -3.2319 -0.7223 -0.2243 -0.1990 -0.1488 -0.1243 -0.5588 -0.1422 -0.9068 -0.5105 -0.3868 -0.7373 -0.2672 -0.3464 -0.1238 -2.4051 -0.5349 -0.3550 -0.9823 -0.0196 -0.1166 -0.6649 -0.4293 -0.1761 -0.4807 -0.2355 -0.1279 -0.0816 -1.5428 -0.1698 -0.0564 -1.1691 -1.9554 -0.7970 -0.0321 -1.2481 -0.1282 -0.3701
S-86	<s> public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { <mask> } } } return result; } </s> java
T-86	<s> public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { <mask> } } } return result; } </s> java
H-86	-0.4500785171985626	public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x ) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0 ; i < ( lst.size () ) ; i += x ) { <mask> } return result ; }
D-86	-0.4500785171985626	public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x ) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0 ; i < ( lst.size () ) ; i += x ) { <mask> } return result ; }
P-86	-1.4799 -0.0544 -1.8047 -0.3716 -0.0586 -0.1745 -0.0988 -0.0969 -0.0289 -0.4585 -0.0490 -0.3613 -0.0328 -0.2387 -0.0355 -0.2213 -0.0376 -1.1879 -0.0818 -0.1267 -1.7956 -0.0866 -1.7901 -0.5047 -0.0503 -0.2681 -0.0608 -0.0896 -0.0533 -1.2260 -0.2915 -0.0435 -1.7618 -0.2295 -0.1229 -1.3410 -0.0813 -0.0915 -1.5315 -0.2355 -0.1105 -0.0623 -1.9264 -0.2345 -0.1619 -0.4834 -1.0205 -0.1604 -0.8227 -0.0787 -0.1816 -0.7119 -0.4468 -0.0968 -0.6061 -0.1674 -0.1327 -0.6264 -0.4916 -0.0966 -0.6561 -0.0849 -0.3404
S-36	<s> public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { <mask> result += 1; } } } return result; } </s> java
T-36	<s> public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { <mask> result += 1; } } } return result; } </s> java
H-36	-0.37877872586250305	public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if ( i % 11 == 0 || i % 13 == 0 ) { <mask> result += 1 ; } } return result ; }
D-36	-0.37877872586250305	public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if ( i % 11 == 0 || i % 13 == 0 ) { <mask> result += 1 ; } } return result ; }
P-36	-1.2374 -0.0397 -0.1192 -0.0833 -0.0123 -0.0927 -0.0522 -0.0087 -0.5631 -0.8475 -0.0660 -2.1272 -0.0806 -0.1422 -0.0940 -0.0845 -1.4323 -0.1709 -0.1207 -0.5237 -0.0863 -0.0873 -1.3431 -0.1009 -0.1223 -0.1232 -0.9292 -0.0856 -0.0834 -0.2315 -1.4579 -0.1846 -0.1191 -1.3356 -0.3538 -0.0844 -0.1847 -0.1137 -0.4142 -0.1177 -0.2492 -0.0410 -0.1327 -1.5007 -0.2360 -0.0854 -0.4896 -0.0974 -0.2079 -0.1138 -0.0663 -2.2375 -0.3479 -0.1832 -0.1614 -0.1122 -0.1249 -0.6319 -0.0946 -0.1561
S-9	<s> public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ <mask> result.add(running_max); } return result; } </s> java
T-9	<s> public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ <mask> result.add(running_max); } return result; } </s> java
H-9	-0.41661304235458374	public static List<Integer> rolling_max(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null ; for (Integer n : numbers){ <mask> result.add(running_max ) ; running_max = n ; } return result ; }
D-9	-0.41661304235458374	public static List<Integer> rolling_max(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null ; for (Integer n : numbers){ <mask> result.add(running_max ) ; running_max = n ; } return result ; }
P-9	-1.4029 -0.0458 -0.5700 -0.2816 -0.0705 -0.1448 -0.0217 -0.0872 -0.0372 -0.4127 -0.0860 -0.2479 -0.0635 -0.1531 -0.0453 -1.7030 -0.0854 -0.4818 -0.3596 -0.0695 -0.1569 -0.0604 -0.0853 -0.0734 -1.9497 -0.2250 -0.0721 -1.7344 -2.2724 -0.0265 -0.0944 -0.0391 -0.1066 -0.1049 -0.8743 -0.2314 -0.1264 -0.1472 -0.0744 -0.0540 -0.0506 -2.4634 -1.7745 -0.2598 -0.1512 -0.0902 -0.2449 -0.5700 -1.0751 -0.2082 -0.0922 -0.0509 -1.9025 -0.2473 -1.3308 -0.0785 -0.0393 -0.0881 -0.1132 -0.6171 -0.1360 -0.0977 -0.0839 -0.5426 -0.0985 -0.2113
S-16	<s> public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) <mask> } return distinct.size(); } </s> java
T-16	<s> public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) <mask> } return distinct.size(); } </s> java
H-16	-0.4791967570781708	<s> public static int count_distinct_characters(String string ) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray () ) { if (! distinct.contains(Character.toLowerCase(c))) <mask> } return distinct.size(); }
D-16	-0.4791967570781708	<s> public static int count_distinct_characters(String string ) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray () ) { if (! distinct.contains(Character.toLowerCase(c))) <mask> } return distinct.size(); }
P-16	-1.7996 -0.7359 -0.2308 -0.1290 -0.0925 -0.1496 -0.0897 -0.0992 -0.0149 -0.0901 -0.0214 -0.6772 -0.1035 -0.1079 -2.2650 -0.0910 -1.4282 -0.5117 -0.0397 -0.2209 -0.2304 -0.0942 -0.0639 -1.0078 -0.3766 -0.0403 -2.0232 -0.2143 -0.1254 -0.3648 -0.0693 -0.0567 -0.0762 -0.1298 -0.1142 -0.0315 -2.8220 -0.1484 -0.1021 -0.1081 -1.9836 -0.3463 -0.1214 -1.0177 -0.3418 -0.0656 -0.1099 -0.2026 -0.3518 -0.3433 -0.9272 -0.9667 -0.1012 -0.1251 -0.2957 -0.2013 -0.2694 -0.1382 -0.2025 -2.4342 -0.1577 -1.9101
S-29	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ <mask> result.add(string); } } return result; } </s> java
T-29	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ <mask> result.add(string); } } return result; } </s> java
H-29	-0.4860207438468933	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { <mask> result.add(string); } return result ; }
D-29	-0.4860207438468933	<s> public static List<String> filter_by_prefix(List<String> strings, String prefix ) { List<String> result = new ArrayList<String>(); for (String string : strings ) { <mask> result.add(string); } return result ; }
P-29	-1.3987 -1.5380 -0.2855 -0.1468 -0.0710 -0.4949 -0.3241 -0.0853 -0.1529 -0.0417 -0.0862 -0.0521 -0.0925 -0.0446 -0.7169 -0.1045 -0.3495 -0.0767 -0.1292 -0.1164 -1.0833 -2.1727 -0.0568 -1.9664 -0.0880 -0.4143 -0.5393 -0.0844 -0.1751 -0.0742 -0.0925 -0.0608 -1.6434 -0.3561 -0.0837 -2.2304 -0.2570 -0.1185 -0.1837 -0.1026 -0.0501 -0.1291 -1.9743 -0.0989 -1.0842 -0.2095 -0.1604 -0.1151 -0.2261 -0.5734 -1.2100 -0.7090 -2.5983 -0.1490 -0.1148 -0.0978 -0.5524 -0.0934 -0.4387
S-119	<s> public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); <mask> result.add(arr.get(i)); } return result; } </s> java
T-119	<s> public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); <mask> result.add(arr.get(i)); } return result; } </s> java
H-119	-0.44262778759002686	public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; ArrayList<Integer> result = new ArrayList<>(); <mask> result.add(arr.get(i)); return result ; }
D-119	-0.44262778759002686	public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; java.lang.System.out . println () ; ArrayList<Integer> result = new ArrayList<>(); <mask> result.add(arr.get(i)); return result ; }
P-119	-1.3042 -0.0584 -2.3576 -0.2962 -0.0809 -0.1412 -0.0421 -0.1023 -0.0726 -0.5826 -0.0363 -0.2336 -0.0573 -0.1556 -0.0455 -1.1197 -0.0841 -0.1265 -1.9395 -0.0879 -2.1941 -0.0532 -0.7409 -0.0886 -1.1230 -0.0862 -0.0535 -0.5079 -0.0304 -1.8011 -0.2503 -2.4481 -0.0836 -0.2855 -0.0988 -0.4088 -0.0846 -0.1260 -0.2510 -0.0442 -0.2179 -0.2366 -2.1765 -0.0867 -0.2876 -0.1005 -0.2512 -0.0875 -0.1477 -0.2621 -0.0550 -0.1654 -0.2475 -1.9879 -0.0880 -0.2756 -0.1030 -0.2891 -0.0905 -0.1841 -0.3159 -0.0621 -0.1396 -0.2591 -2.0262 -0.0894 -0.2635 -0.1060 -0.3175 -0.0925 -0.2259 -0.3655 -0.0693 -0.1241 -0.2549 -2.8484 -0.4442 -0.0570 -0.1818 -0.0619 -0.0868 -0.0487 -2.0585 -0.2834 -0.2124 -0.1710 -0.1170 -0.0853 -0.1102 -0.3752 -0.4928 -0.4190 -0.1101 -0.3521 -0.3010 -0.9329 -1.4684 -0.2263 -0.0833 -1.0780 -0.0919 -0.7149
S-65	<s> public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { <mask> if ('A' <= c && c <= 'Z') result += (int) c; } return result; } </s> java
T-65	<s> public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { <mask> if ('A' <= c && c <= 'Z') result += (int) c; } return result; } </s> java
H-65	-0.29719212651252747	public static int digit_sum(String s ) { int result = 0 ; for (char c : s.toCharArray () ) { <mask> if ('A' <= c && c <= 'Z') result += (int) c ; } return result ; }
D-65	-0.29719212651252747	public static int digit_sum(String s ) { int result = 0 ; for (char c : s.toCharArray () ) { <mask> if ('A' <= c && c <= 'Z') result += (int) c ; } return result ; }
P-65	-0.5808 -0.0417 -0.1242 -0.0285 -0.0944 -0.0478 -0.5811 -0.1093 -0.0942 -1.9862 -0.0880 -0.1297 -0.0724 -0.0826 -1.4510 -0.3254 -0.3433 -0.1179 -0.4875 -0.0772 -0.0650 -0.0595 -0.1286 -0.0855 -0.0329 -2.6785 -0.1448 -0.0827 -0.5452 -0.1483 -0.1458 -0.1406 -0.3707 -0.0460 -0.0424 -0.0600 -0.1222 -0.2717 -0.2034 -0.0678 -0.0503 -0.0388 -0.5137 -0.1332 -0.0896 -0.0979 -0.3005 -0.5653 -0.1331 -1.1427 -0.1212 -0.1117 -0.0897 -0.4828 -0.1042 -0.3633
S-79	<s> public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { <mask> return false; } return true; } </s> java
T-79	<s> public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { <mask> return false; } return true; } </s> java
H-79	-0.4479539692401886	public static boolean is_happy(String s ) { if (s.length () < 3) return false; for (int i = 0; i < s.length () ; i += 1) { <mask> return false; } return true; }
D-79	-0.4479539692401886	public static boolean is_happy(String s ) { if (s.length () < 3) return false; for (int i = 0; i < s.length () ; i += 1) { <mask> return false; } return true; }
P-79	-0.7540 -0.0543 -0.0992 -0.0728 -0.0915 -0.0439 -0.0080 -0.4158 -0.1108 -0.1410 -2.2676 -0.0863 -0.2063 -0.1159 -0.8848 -0.2199 -0.1800 -2.7771 -0.2778 -0.6490 -0.0830 -0.0972 -0.8238 -0.2473 -0.1212 -0.6550 -0.0780 -0.0910 -0.9102 -0.1046 -0.1012 -0.7831 -0.1091 -0.0933 -0.6631 -0.7640 -0.0866 -0.0701 -3.3117 -0.0809 -0.6775 -0.1582 -0.1301 -0.1213 -0.0979 -0.8324 -0.1153 -0.5103 -0.0677 -0.9318 -0.1002 -0.8206
S-12	<s> public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ <mask> } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; } </s> java
T-12	<s> public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ <mask> } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; } </s> java
H-12	-0.460504949092865	<s> public static String longest(List<String> strings){ int maxlen = 0 ; for (String string : strings){ if ( string.length () == maxlen ) { return string; } } for (String string : strings){ if (string.length () == maxlen ) { return string; } } return null; }
D-12	-0.460504949092865	<s> public static String longest(List<String> strings){ int maxlen = 0 ; for (String string : strings){ if ( string.length () == maxlen ) { return string; } } for (String string : strings){ if (string.length () == maxlen ) { return string; } } return null; }
P-12	-1.8305 -0.4396 -0.2931 -0.1372 -0.0794 -1.9725 -0.0259 -0.3880 -0.0831 -0.2681 -0.0733 -0.1731 -0.1209 -1.8477 -0.2058 -0.0196 -0.0917 -1.5016 -0.3995 -0.2443 -0.1139 -0.1361 -0.0810 -0.0675 -0.1466 -1.6465 -0.7333 -0.1115 -1.1413 -0.4785 -0.2394 -1.3377 -0.6759 -0.0380 -1.2603 -0.8726 -0.1276 -0.1816 -1.6928 -0.1176 -0.4847 -0.4247 -0.1174 -0.1296 -0.0793 -0.0726 -0.1323 -1.2081 -0.1122 -0.1202 -0.4618 -0.1538 -0.0907 -0.8076 -0.1772 -0.0174 -1.5225 -0.1751 -0.0943 -0.1033 -1.1490 -0.0956 -0.1760 -0.1148 -0.1465 -1.2540 -0.1016 -0.3976
S-97	<s> public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); <mask> count += 1; } return count; } </s> java
T-97	<s> public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); <mask> count += 1; } return count; } </s> java
H-97	-0.4652280807495117	public static int count_upper(String s ) { int count = 0; for (int i = 0; i < ( s.length () ) ; i += 2) { char c = s.charAt(i); <mask> count += 1 ; } return count ; }
D-97	-0.4652280807495117	public static int count_upper(String s ) { int count = 0; for (int i = 0; i < ( s.length () ) ; i += 2) { char c = s.charAt(i); <mask> count += 1 ; } return count ; }
P-97	-1.1274 -0.0440 -0.1156 -0.0848 -0.1011 -0.0348 -0.4482 -0.1013 -0.1066 -2.1055 -0.0913 -0.1216 -0.0724 -0.0897 -1.7591 -0.1881 -0.1154 -0.8683 -0.0800 -0.0883 -1.6910 -0.1010 -0.1297 -1.4906 -0.1952 -0.1496 -0.0715 -1.9553 -0.5058 -0.7586 -0.0842 -0.0647 -0.6166 -0.0852 -0.1597 -0.0540 -0.0918 -0.0745 -0.1164 -0.9292 -0.4853 -0.4636 -1.5963 -0.9213 -0.1386 -0.1238 -0.1806 -0.0584 -2.4521 -0.7056 -0.1892 -0.0922 -0.1069 -0.8969 -0.1226 -0.4514
S-99	<s> public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { <mask> } return pile; } </s> java
T-99	<s> public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { <mask> } return pile; } </s> java
H-99	-0.38783982396125793	public static java.util.ArrayList <Integer> make_a_pile(int n) { java.util.ArrayList <Integer> pile = new java.util.ArrayList <Integer> () ; for(int i = 0; i < n; i++) { <mask> } return pile ; }
D-99	-0.38783982396125793	public static java.util.ArrayList <Integer> make_a_pile(int n) { java.util.ArrayList <Integer> pile = new java.util.ArrayList <Integer> () ; for(int i = 0; i < n; i++) { <mask> } return pile ; }
P-99	-0.8758 -0.0526 -3.3588 -0.0705 -0.5738 -0.1346 -0.4339 -1.1233 -0.1339 -0.6207 -0.0739 -0.0998 -0.0466 -0.1060 -0.0365 -0.0240 -1.1545 -1.7101 -0.0654 -2.0840 -0.0807 -0.4659 -0.0682 -0.0659 -0.0846 -0.0955 -0.3201 -0.0711 -0.3628 -0.0707 -0.0263 -0.0954 -0.0623 -0.0820 -0.0700 -0.0311 -0.1055 -0.0467 -0.2429 -0.1475 -0.6437 -0.4780 -0.2577 -0.1513 -0.6535 -0.6839 -0.0755 -0.0925 -1.5279 -0.0966 -0.0877 -0.1141 -1.0018 -0.0923 -1.4688 -0.0865 -0.4774 -0.1298 -0.1223 -0.2654 -0.1513 -0.0708 -0.0253 -0.3972 -0.0852 -0.9870
S-100	<s> public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; } </s> java
T-100	<s> public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; } </s> java
H-100	-0.35315823554992676	public static ArrayList<String> words_strings(String s ) { ArrayList<String> result = new ArrayList<String>(); <mask> for(char c : s.toCharArray () ) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; }
D-100	-0.35315823554992676	public static ArrayList<String> words_strings(String s ) { ArrayList<String> result = new ArrayList<String>(); <mask> for(char c : s.toCharArray () ) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split("\\s+"); for(String r : result_array) { result.add(r); } return result; }
P-100	-1.4246 -0.0680 -1.8190 -0.4077 -0.0714 -0.1503 -0.0125 -0.0906 -0.0349 -0.6061 -0.1102 -0.1157 -1.9493 -0.0858 -1.3908 -0.4380 -0.0737 -0.1868 -0.0788 -0.1006 -0.0630 -1.2764 -0.3121 -0.0720 -1.1556 -0.2506 -0.1902 -0.1202 -0.1651 -0.3453 -0.2740 -0.0953 -0.0554 -0.0819 -0.1285 -0.0987 -0.0280 -3.6401 -0.1844 -0.0895 -0.1690 -0.5592 -0.1849 -0.1242 -0.5672 -0.2302 -0.0922 -0.1018 -0.1292 -0.0478 -0.1059 -0.0672 -0.0218 -0.1339 -0.1018 -0.1118 -0.0775 -0.1048 -0.0554 -0.0795 -0.1625 -0.9493 -0.0756 -0.0805 -1.0139 -2.4205 -0.0605 -0.0918 -0.0421 -0.0913 -0.0696 -0.1286 -0.0542 -0.1199 -0.9327 -0.2422 -0.5089 -0.1524 -0.0655 -0.0544 -0.2999 -0.1104 -0.2847 -0.0785 -0.0741 -0.0539 -0.0475 -0.0933 -0.0444 -0.6691 -0.0874 -0.0629 -0.1086 -0.3699 -0.4348 -0.1136 -0.7912 -0.0958 -0.0940 -0.0586 -0.9850 -0.0945 -3.1004
S-103	<s> public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; } </s> java
T-103	<s> public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; } </s> java
H-103	-0.39605122804641724	<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; <mask> break; } num /= 10; if(all_odd) { res.add(i); } } return res ; }
D-103	-0.39605122804641724	<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; <mask> break; } num /= 10; if(all_odd) { res.add(i); } } return res ; }
P-103	-1.3196 -1.7904 -0.2322 -0.0677 -0.0902 -0.0718 -0.6049 -0.0515 -0.2811 -0.0445 -0.1669 -0.1187 -1.5688 -0.0777 -1.8132 -0.3774 -0.0522 -0.1579 -0.1366 -0.0965 -0.0680 -1.5207 -0.2901 -0.0522 -1.4910 -0.1956 -0.5170 -0.8565 -0.0871 -0.0613 -0.0932 -1.2459 -0.0881 -0.1549 -0.0589 -0.0957 -0.0768 -1.1553 -0.0870 -0.0750 -0.1217 -0.0174 -0.0993 -0.1001 -0.6801 -0.0974 -0.5069 -0.5338 -0.1678 -0.9650 -0.1102 -0.2181 -0.0396 -0.0962 -0.0290 -0.1031 -0.0562 -0.0694 -0.1799 -0.1327 -0.1848 -0.1361 -0.1401 -0.0694 -0.8321 -0.2269 -0.0209 -0.1613 -0.8459 -0.8229 -0.1733 -0.1024 -0.0230 -1.1858 -0.1331 -0.1373 -0.1361 -0.3872 -0.7381 -0.6578 -1.4525 -0.1928 -0.3557 -1.6749 -0.3059 -1.2066 -0.1011 -0.7339
S-131	<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } <mask> i++; cnt++; } } return cnt >= 2; } </s> java
T-131	<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } <mask> i++; cnt++; } } return cnt >= 2; } </s> java
H-131	-0.45754194259643555	<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } return opening_brackets.length () > ( closing_brackets.length () ) ; }
D-131	-0.45754194259643555	<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } return opening_brackets.length () > ( closing_brackets.length () ) ; }
P-131	-2.3072 -0.2991 -0.2102 -0.1068 -0.0693 -0.1076 -0.0619 -0.0869 -0.0294 -0.4184 -0.1132 -0.2867 -1.7131 -0.0901 -2.5861 -0.4823 -0.0739 -0.1746 -0.0224 -0.1027 -0.0683 -0.0298 -0.0822 -0.0712 -1.4625 -0.2292 -1.3270 -0.2128 -0.0597 -0.1517 -0.0400 -0.0878 -0.0726 -0.0393 -0.0877 -0.0752 -1.3845 -0.1614 -0.2210 -0.5047 -1.2705 -0.0765 -0.0930 -1.6110 -0.0995 -0.0879 -0.2549 -0.1094 -0.0923 -2.3998 -0.0928 -1.3319 -0.1007 -0.1241 -0.8663 -0.4043 -0.0379 -0.1352 -1.1085 -0.3435 -0.5924 -0.8735 -0.1282 -0.1240 -0.1898 -0.1331 -0.0898 -0.0785 -0.0416 -0.1263 -0.3709 -0.5977 -0.5072 -1.2009 -0.1614 -0.0726 -0.0933 -0.0709 -0.0485 -0.1323 -0.2953 -0.4843 -0.2045 -1.0911 -0.7337 -1.2260 -1.1047 -0.1026 -0.0655 -0.0404 -0.8210 -0.5736 -1.8259 -2.1551 -2.3077 -0.4063 -0.0916 -0.0554 -0.0644 -0.3232 -0.0952 -0.1139 -0.4118 -1.4880 -0.1942 -0.2406
S-124	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java
T-124	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java
H-124	-0.45983198285102844	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); <mask> count ++; } String[] result = {Integer.toString(count)}; return result; } }
D-124	-0.45983198285102844	<s> public static String[] split_words(String txt) { if(txt.contains(" ")) { return txt.split(" "); } else if(txt.contains(",")) { return txt.split(","); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); <mask> count ++; } String[] result = {Integer.toString(count)}; return result; } }
P-124	-2.6540 -0.2975 -0.2446 -0.1106 -0.0888 -1.1988 -2.1777 -0.0392 -0.1008 -0.0289 -0.7697 -0.0896 -0.0421 -1.6488 -0.0792 -0.1698 -1.2668 -0.2138 -0.1303 -0.8345 -0.0732 -0.1697 -0.0894 -0.0926 -0.0549 -0.1030 -0.2582 -0.0975 -0.1390 -0.1173 -0.1089 -0.1161 -0.8724 -0.0922 -0.1191 -0.6197 -0.3634 -1.0121 -0.0965 -0.0866 -0.0495 -0.1044 -0.1800 -0.2369 -0.6962 -0.0928 -0.0586 -0.1377 -0.1851 -0.0519 -0.1068 -1.4931 -0.1355 -0.5273 -0.6575 -0.0865 -0.0987 -1.2566 -0.1026 -0.0963 -0.1578 -0.0966 -0.1195 -1.9647 -0.0966 -1.5527 -0.0969 -0.1829 -0.0728 -0.0957 -0.0371 -0.1057 -0.8532 -0.4663 -0.7167 -1.5420 -0.7416 -0.1398 -0.1133 -1.9231 -0.9203 -1.1171 -0.3361 -1.4180 -2.0248 -0.0733 -0.1019 -0.1356 -0.0574 -0.1045 -1.7963 -0.6246 -0.4719 -0.3830 -0.0654 -0.0807 -0.0798 -0.6216 -0.0856 -0.1215 -1.5272
S-127	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; } </s> java
T-127	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; } </s> java
H-127	-0.4322136640548706	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }
D-127	-0.4322136640548706	<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }
P-127	-2.6781 -0.2154 -0.2273 -0.1190 -0.0578 -0.1372 -0.0632 -0.0860 -0.0238 -0.0703 -0.6321 -0.4335 -1.8298 -0.0388 -1.7182 -0.0824 -0.4925 -1.0217 -0.7712 -0.1422 -0.1108 -0.1213 -1.1358 -0.0823 -0.0506 -0.9110 -0.1435 -0.0988 -0.1050 -1.5157 -0.3025 -0.4187 -0.2899 -0.1048 -0.0959 -1.1090 -0.0997 -0.0797 -0.1289 -0.0848 -0.0849 -0.6202 -0.1192 -1.2768 -0.0961 -0.1659 -0.6742 -0.5241 -0.8201 -0.5837 -0.3082 -0.0882 -0.8328 -0.2427 -0.2931 -1.0071 -0.1959 -0.0888 -0.1196 -0.1127 -0.1624 -0.0689 -0.1054 -1.0957 -0.1337 -0.4422 -0.3818 -0.0987 -0.1005 -1.1106 -0.1051 -0.0597 -0.0801 -0.0904 -0.0792 -0.4297 -0.1108 -1.2967 -0.1042 -0.2575 -0.0650 -3.1061 -0.1015 -0.0733 -1.1789 -0.9840 -0.9259 -0.6669 -0.6167 -0.1218 -0.2242 -0.1578 -0.0317 -0.1526 -0.8691 -0.0980 -0.1546
S-17	<s> public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 1); List<Integer> result = new ArrayList<Integer>(); <mask> result.add(note_map.get(note)); } return result; } </s> java
T-17	<s> public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 1); List<Integer> result = new ArrayList<Integer>(); <mask> result.add(note_map.get(note)); } return result; } </s> java
H-17	-0.43993350863456726	public static List<Integer> parse_music(String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 2); List<Integer> result = new ArrayList<Integer>(); <mask> result.add(note_map.get(note ) ) ; return result ; }
D-17	-0.43993350863456726	public static List<Integer> parse_music(String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put("o", 4); note_map.put("o|", 2); note_map.put(".|", 2); List<Integer> result = new ArrayList<Integer>(); <mask> result.add(note_map.get(note ) ) ; return result ; }
P-17	-1.0048 -0.0493 -0.3428 -0.3107 -0.0607 -0.1548 -0.0295 -0.1002 -0.0142 -0.8619 -0.1123 -0.0328 -0.0826 -0.0581 -1.5643 -0.0910 -1.6333 -0.3157 -0.0635 -0.2431 -1.2341 -0.1324 -0.0842 -0.1096 -0.0569 -0.0930 -0.0587 -1.2844 -0.2467 -0.0615 -0.2799 -0.9289 -1.0642 -0.4558 -0.1070 -0.0680 -0.1163 -0.2673 -0.0955 -0.0562 -2.1511 -0.1088 -2.1164 -0.2609 -0.1134 -0.0764 -0.1087 -0.2545 -0.0836 -0.0595 -0.0320 -1.7495 -0.9230 -0.1742 -0.1104 -0.0764 -0.1089 -0.2579 -0.8153 -0.0548 -2.1856 -1.8033 -0.4374 -0.3610 -0.0598 -0.1784 -0.0741 -0.0979 -0.0593 -1.7298 -0.2828 -0.0692 -1.4134 -1.1535 -0.1220 -0.1347 -0.1074 -0.1453 -0.3535 -0.6831 -0.1373 -0.1040 -0.0548 -0.1300 -0.3398 -0.5374 -0.1545 -2.5258 -1.0398 -0.2362 -0.0874 -0.0827 -1.0467 -0.1051 -0.1990
S-32	<s> public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; <mask> begin = center; } else { end = center; } } return begin; } </s> java
T-32	<s> public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; <mask> begin = center; } else { end = center; } } return begin; } </s> java
H-32	-0.2933008074760437	public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; <mask> begin = center; } else { end = center; } return begin; }
D-32	-0.2933008074760437	public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; <mask> begin = center; } else { end = center; } return begin; }
P-32	-0.8559 -0.0411 -0.1184 -0.0577 -0.1045 -0.0456 -0.3845 -0.0778 -0.1841 -0.0352 -0.1153 -0.0857 -1.4698 -0.1303 -0.0558 -0.1007 -0.1986 -0.5492 -0.0896 -0.0846 -0.0967 -0.0922 -0.9877 -0.2854 -0.1321 -0.3190 -0.3495 -0.0953 -0.5403 -0.0318 -0.6664 -0.0817 -0.0890 -0.2473 -0.0759 -0.3032 -0.0898 -0.3607 -0.1267 -0.7344 -0.0953 -0.1717 -0.0098 -0.4318 -0.8200 -0.0946 -0.0112 -0.4202 -0.8559 -0.2449 -0.1476 -0.1218 -0.5159 -0.1616 -0.0408 -0.1556 -0.2176 -0.0332 -0.0657 -0.8580 -0.1018 -0.1235 -0.0633 -0.1078 -0.1147 -0.6667 -0.0881 -0.0997 -0.7848 -0.0475 -0.4557 -1.2909 -0.5519 -0.1179 -0.1906 -0.0585 -0.1860 -0.0938 -1.2207 -1.5975 -0.1654 -0.1172 -0.1315 -0.1626 -0.0793 -0.4989 -0.0981 -0.1476 -0.0864 -1.1334 -0.0904 -0.3488
S-98	<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; } </s> java
T-98	<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; } </s> java
H-98	-0.4160236716270447	<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value. substring(0, value.length() - 1); } double num = Double.parseDouble(value ) ; int result = 0; <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result ; }
D-98	-0.4160236716270447	<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value. substring(0, value.length() - 1); } double num = Double.parseDouble(value ) ; int result = 0; <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result ; }
P-98	-2.2631 -0.3044 -0.1916 -0.0931 -0.0593 -0.1211 -0.0248 -0.0883 -0.0211 -0.3469 -0.0871 -0.0656 -1.7284 -0.0779 -0.2413 -0.1227 -0.7267 -0.1409 -1.0746 -0.1064 -0.1929 -0.1264 -0.6245 -0.0826 -0.4051 -0.1203 -0.5246 -0.1196 -0.8467 -0.3960 -0.2340 -0.1081 -0.1226 -1.1567 -0.1726 -0.9452 -0.1324 -0.3759 -0.2352 -0.1712 -0.1347 -0.0594 -0.0957 -0.4990 -0.8973 -0.1197 -0.1090 -0.1044 -1.0800 -0.2044 -0.6036 -0.1619 -0.1777 -0.0837 -0.0974 -0.1368 -0.0967 -0.9188 -0.8922 -0.6989 -4.1521 -0.4091 -0.3591 -0.0800 -0.0944 -1.2625 -0.3097 -0.1199 -0.1175 -0.3768 -0.5405 -0.0946 -0.1240 -0.4724 -0.1348 -0.1166 -1.0559 -0.1007 -0.2824 -0.1236 -0.1205 -0.1259 -0.4360 -0.6129 -0.0526 -0.1163 -0.1625 -0.5499 -0.4609 -2.3005 -0.2296 -0.3079 -0.0823 -1.5850 -0.0930 -0.2267
S-71	<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; <mask> return true; } </s> java
T-71	<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; <mask> return true; } </s> java
H-71	-0.4224531948566437	public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; <mask> return true; } return true ; }
D-71	-0.4224531948566437	public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; <mask> return true; } return true ; }
P-71	-1.1938 -0.0458 -0.1151 -0.0531 -0.0991 -0.0216 -0.1062 -0.0152 -0.5124 -0.6301 -2.2442 -0.0575 -0.9009 -0.0959 -0.0975 -1.8328 -0.0852 -0.1629 -0.0631 -0.0957 -0.9254 -0.1440 -0.1200 -0.4755 -0.0908 -0.0912 -1.0854 -0.0859 -0.1072 -0.2152 -0.0983 -0.0721 -1.2397 -0.0911 -0.0679 -1.9974 -0.1176 -0.0548 -0.0681 -0.5474 -0.6233 -2.2311 -0.1535 -0.1268 -0.9630 -0.2193 -0.2338 -1.2536 -0.0832 -0.0746 -0.8572 -0.1749 -0.1642 -0.1174 -1.0659 -0.1107 -0.1102 -0.0991 -0.0795 -0.0988 -0.0724 -0.1745 -1.2792 -0.0820 -0.1241 -1.2552 -0.1401 -0.1458 -1.1229 -0.1011 -0.1570 -0.1291 -0.4283 -0.7400 -0.4529 -0.2986 -0.1858 -0.0674 -0.3619 -0.1558 -0.4917 -0.0883 -0.0653 -0.4242 -1.8274 -0.1204 -0.1458 -0.3448 -0.1077 -0.5277 -0.3409 -0.9171 -0.9946 -1.4929 -0.1185 -0.1112
S-105	<s> public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; <mask> ret.add(x); } } return ret; } </s> java
T-105	<s> public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; <mask> ret.add(x); } } return ret; } </s> java
H-105	-0.4375631511211395	public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; <mask> ret.add(x); } } return ret ; }
D-105	-0.4375631511211395	public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; <mask> ret.add(x); } } return ret ; }
P-105	-1.0311 -0.0567 -1.9262 -0.3493 -0.0575 -0.1464 -0.0239 -0.3948 -0.5384 -0.0676 -1.4289 -0.0782 -1.7618 -0.3540 -0.0579 -0.1783 -0.0780 -0.0969 -0.0710 -1.2978 -0.1293 -0.1593 -0.5648 -0.4962 -0.0936 -0.0891 -1.8546 -0.1082 -0.1015 -0.1069 -0.8301 -0.0853 -1.0013 -0.0997 -0.2573 -0.8829 -0.5498 -0.1208 -0.4631 -0.1066 -1.2617 -0.0972 -0.1421 -0.1922 -0.1141 -2.5467 -0.1660 -0.3075 -0.3040 -0.0906 -0.0948 -2.0261 -0.1096 -0.0631 -0.1572 -0.6391 -0.0891 -0.8102 -0.1703 -0.0087 -0.1098 -1.0639 -0.0943 -0.1414 -0.3196 -0.8507 -0.4107 -1.4604 -0.1123 -0.0564 -0.1489 -0.2138 -0.2005 -0.1083 -1.5863 -0.2845 -0.1609 -0.1589 -0.1132 -0.1353 -0.2733 -0.7617 -0.3303 -1.1436 -0.1278 -0.1031 -0.1036 -0.1142 -1.3167 -0.0890 -0.2395
S-143	<s> public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; <mask> return true; return false; } </s> java
T-143	<s> public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split("/")[0]); int b = Integer.parseInt(x.split("/")[1]); int c = Integer.parseInt(n.split("/")[0]); int d = Integer.parseInt(n.split("/")[1]); int numerator = a * c; int denom = b * d; <mask> return true; return false; } </s> java
H-143	-0.4543081521987915	public static boolean simplify(String x, String n) { int a = Integer. parseInt(x.split("/")[0]); int b = Integer. parseInt(x.split("/")[1]); int c = Integer. parseInt(n.split("/")[0]); int d = Integer. parseInt(n.split("/")[1]); int numerator = a * c ; int denom = b * d ; <mask> return true; return false ; }
D-143	-0.4543081521987915	public static boolean simplify(String x, String n) { int a = Integer. parseInt(x.split("/")[0]); int b = Integer. parseInt(x.split("/")[1]); int c = Integer. parseInt(n.split("/")[0]); int d = Integer. parseInt(n.split("/")[1]); int numerator = a * c ; int denom = b * d ; <mask> return true; return false ; }
P-143	-0.9028 -0.0336 -0.1197 -0.0282 -0.4066 -0.1037 -0.1762 -0.9718 -1.5971 -0.1016 -1.5736 -0.0837 -0.1590 -0.1099 -0.1094 -1.3330 -0.0947 -1.7294 -1.5054 -0.4536 -0.1018 -0.4712 -0.5662 -0.4086 -0.2540 -0.0766 -0.0775 -0.1021 -1.3855 -0.0970 -0.7436 -0.9954 -0.2835 -0.1001 -0.4344 -0.5339 -0.3692 -0.2528 -0.1192 -0.0751 -0.1080 -1.1931 -0.0956 -0.9175 -0.9317 -0.4325 -0.1026 -0.3878 -0.4696 -0.3821 -0.2650 -0.1084 -0.0587 -0.0957 -1.0856 -0.0971 -1.1342 -1.1029 -0.2406 -0.1070 -0.3646 -0.5221 -0.4272 -0.1783 -0.1657 -0.0785 -0.1008 -0.1707 -0.0308 -0.1175 -1.6309 -0.1405 -0.0338 -0.1045 -0.0962 -0.0382 -0.0483 -0.8349 -1.5797 -0.3607 -0.1733 -0.2104 -0.1525 -1.2926 -1.2485 -0.0744 -1.2896 -0.1847 -0.4271
S-135	<s> public static int[] largest_smallest_integers(int[] lst) { <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } </s> java
T-135	<s> public static int[] largest_smallest_integers(int[] lst) { <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } </s> java
H-135	-0.40904027223587036	public static int[] largest_smallest_integers(int[] lst) { <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }
D-135	-0.40904027223587036	public static int[] largest_smallest_integers(int[] lst) { <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }
P-135	-0.8530 -0.0410 -0.1140 -1.9888 -0.0182 -0.0953 -0.0548 -0.0336 -0.0963 -0.0216 -0.0275 -0.5378 -0.5465 -1.6769 -0.0276 -1.1261 -0.0947 -1.3018 -0.1641 -0.0962 -0.3180 -0.4646 -0.1041 -0.8176 -0.1960 -0.7391 -0.1964 -0.1968 -0.1143 -1.0602 -0.1014 -0.1014 -0.1085 -0.0797 -0.5242 -0.1638 -0.1134 -0.0382 -0.1138 -2.1797 -0.1001 -0.0586 -0.4681 -0.1039 -0.1104 -0.0414 -0.7601 -0.0733 -0.4699 -0.1969 -0.6006 -0.3270 -2.3315 -0.5095 -1.0045 -0.1006 -0.5201 -0.0650 -0.1107 -0.0619 -0.0929 -1.3663 -0.1180 -1.0714 -0.0226 -0.6509 -0.0946 -0.1012 -0.0329 -0.1059 -0.9356 -0.2097 -2.1008 -0.0671 -0.0968 -0.1208 -0.1809 -0.1073 -0.0695 -0.5903 -0.0666 -0.1081 -0.0418 -0.1532 -0.1005 -0.0654 -0.8708 -0.0918 -2.1097
S-67	<s> public static int[] pluck(int[] arr) { <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java
T-67	<s> public static int[] pluck(int[] arr) { <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java
H-67	-0.4256812334060669	public static int[] pluck(int[] arr) { <mask> for (int i = 0; i < arr.length; i += 1) { if ( arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } return new int[]{ arr.length, arr.length}; }
D-67	-0.4256812334060669	public static int[] pluck(int[] arr) { <mask> for (int i = 0; i < arr.length; i += 1) { if ( arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } return new int[]{ arr.length, arr.length}; }
P-67	-1.3160 -0.0381 -0.1261 -1.6410 -0.0283 -0.0099 -0.6870 -0.5013 -1.6469 -0.0406 -1.7628 -0.0867 -0.3738 -0.1866 -0.1783 -0.1966 -0.1271 -0.4617 -0.0802 -0.0919 -1.2776 -0.0934 -0.1013 -0.1845 -0.0893 -0.0691 -0.9853 -0.0819 -0.0484 -1.7603 -0.0890 -0.1287 -0.1281 -1.0189 -0.6143 -0.3487 -0.2243 -0.6694 -0.0601 -0.1250 -0.1188 -0.5781 -0.0957 -0.3903 -0.1985 -0.1801 -0.1150 -0.1246 -0.1042 -0.0639 -1.8765 -0.0931 -0.2294 -0.1136 -0.0913 -0.1620 -0.0503 -0.5951 -0.2641 -2.2378 -0.0812 -0.1347 -0.1073 -1.5987 -0.2033 -0.1206 -0.3527 -0.1330 -0.4918 -0.1492 -0.4755 -0.1211 -0.1072 -0.1040 -0.2626 -0.1874 -0.2027 -0.0877 -0.0941 -1.5099 -0.0900 -0.1595 -0.1223 -0.0664 -0.5095 -0.0751 -0.1737 -0.1202 -1.9746 -0.6953 -0.1050 -2.2500 -0.4611 -0.4088 -0.0164 -2.4878 -0.0715 -0.0836 -0.0118 -1.2701 -0.2652 -0.1163
S-146	<s> public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result; } </s> java
T-146	<s> public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result; } </s> java
H-146	-0.5045703053474426	public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; <mask> if ( ( A.length ) > 0 ) { if ( ( A.length ) == ( n - 1 ) ) { if ( ( A.length ) == ( n - 1 ) ) { result += 1 ; } } } return result; } </s> java.lang.System.out . println () ; }
D-146	-0.5045703053474426	public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; <mask> if ( ( A.length ) > 0 ) { if ( ( A.length ) == ( n - 1 ) ) { if ( ( A.length ) == ( n - 1 ) ) { result += 1 ; } } } return result; } </s> java.lang.System.out . println () ; }
P-146	-1.1538 -0.0425 -0.1195 -0.1125 -0.0900 -0.0485 -0.0902 -0.0653 -0.0204 -0.6974 -0.7077 -0.0742 -1.6094 -0.0824 -0.1473 -2.6965 -0.0661 -0.0915 -0.0774 -0.0689 -0.5165 -0.3470 -1.8931 -0.2028 -0.1272 -0.5678 -0.0999 -0.1015 -1.9683 -0.0944 -0.1403 -0.1240 -0.8880 -0.0970 -0.0937 -1.9239 -0.1327 -0.8134 -0.2815 -0.2707 -0.9527 -0.1466 -0.1569 -0.0593 -0.1685 -0.2334 -0.1407 -0.1393 -1.1267 -0.1074 -0.0860 -0.1001 -1.0695 -0.4936 -0.2169 -0.1892 -0.1960 -0.4414 -0.6821 -0.8429 -1.1959 -0.0246 -0.2022 -1.4358 -1.1418 -0.1686 -0.3245 -0.2305 -0.2028 -0.6199 -0.8420 -0.3709 -0.0525 -0.1501 -2.3627 -1.5005 -1.1826 -0.3238 -0.2461 -0.1377 -0.1298 -0.3148 -0.3611 -0.1850 -0.8536 -0.4134 -0.2158 -0.0523 -0.1306 -1.1311 -1.2812 -1.0419 -0.2658 -0.1570 -0.1168 -0.0979 -0.8738 -0.4714 -1.2473 -1.7851 -0.3725 -0.1131 -0.6627 -0.6677 -0.1517 -0.0951 -1.1409 -0.1201 -3.2440 -0.0853 -0.2074 -0.2072 -0.6970 -0.0517 -0.1418 -0.4979 -0.1240 -0.0522 -1.0614 -0.0286 -0.2758 -0.3334 -2.0139 -0.0860
S-74	<s> public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; } </s> java
T-74	<s> public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; } </s> java
H-74	-0.3657265603542328	public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } return false; }
D-74	-0.3657265603542328	public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } return false; }
P-74	-0.7621 -0.0496 -0.1011 -0.0748 -0.0921 -0.0388 -0.0969 -0.0430 -0.6938 -0.6173 -0.0751 -1.1751 -0.0888 -0.2727 -0.1334 -0.4976 -0.0919 -0.1014 -1.1807 -0.0854 -0.0975 -0.1297 -0.6229 -0.0849 -0.0506 -0.2085 -0.7877 -0.5634 -2.2912 -0.1303 -0.1289 -0.0490 -0.7204 -0.5445 -1.2991 -0.0693 -0.0619 -0.1864 -0.1158 -0.4031 -0.1112 -0.1038 -0.1072 -0.5225 -0.1021 -0.0752 -0.0808 -0.3763 -0.0774 -0.0584 -2.0293 -0.0942 -0.4650 -0.1345 -0.1566 -0.1589 -1.8849 -0.0851 -0.1170 -0.0426 -0.5473 -0.5565 -1.3646 -0.0600 -0.0785 -0.1476 -0.1266 -0.9831 -0.0591 -0.0944 -0.3866 -0.1046 -0.1811 -0.1387 -1.8735 -0.1247 -0.0867 -0.5465 -0.1882 -0.1785 -0.1585 -0.0523 -0.8125 -0.1064 -0.5304
S-93	<s> public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { <mask> } return result; } </s> java
T-93	<s> public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + "").toCharArray()) { <mask> } return result; } </s> java
H-93	-0.4755382537841797	public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i] ; i += 1; } int result = 0 ; for (char c : (max + "").toCharArray()) { <mask> } return result ; }
D-93	-0.4755382537841797	public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i] ; i += 1; } int result = 0 ; for (char c : (max + "").toCharArray()) { <mask> } return result ; }
P-93	-0.6018 -0.0407 -0.1202 -0.0290 -0.0192 -0.0363 -0.0193 -0.0584 -0.6386 -0.3764 -2.1217 -0.0331 -1.6509 -0.0810 -0.1164 -0.0652 -0.0931 -1.7245 -0.1166 -0.1091 -0.1064 -1.6479 -0.1342 -1.5498 -0.5540 -0.1190 -0.2327 -0.0760 -0.0710 -1.3145 -0.0858 -0.1873 -0.1420 -0.4552 -0.7855 -0.3101 -0.2169 -0.1819 -0.0858 -0.6079 -0.1543 -0.0911 -0.0352 -0.4733 -0.2329 -0.3962 -0.2363 -0.4513 -0.0930 -0.2058 -0.1018 -0.5707 -0.2466 -3.3908 -0.8248 -0.1255 -0.1207 -2.5445 -0.0807 -0.1114 -0.0783 -0.1001 -2.0337 -0.4474 -0.3323 -0.1267 -0.5560 -0.0832 -0.0618 -0.2666 -0.4034 -0.0569 -0.0804 -1.6493 -0.0709 -0.0304 -2.7807 -0.1238 -0.5489 -0.1674 -0.1387 -1.5634 -0.1983 -0.1162 -1.1624 -0.1003 -0.6924
S-5	<s> public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; } </s> java
T-5	<s> public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; } </s> java
H-5	-0.4096556305885315	public static List<Integer> intersperse(List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size () == 0 ) return result; <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size () - 1)); return result ; }
D-5	-0.4096556305885315	public static List<Integer> intersperse(List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size () == 0 ) return result; <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size () - 1)); return result ; }
P-5	-0.9366 -0.0461 -0.4584 -0.4155 -0.0732 -0.1490 -0.0239 -0.0681 -0.0320 -0.0392 -0.5228 -0.0856 -0.4320 -0.0634 -0.1477 -0.0792 -1.3544 -0.0994 -0.0143 -0.0118 -1.9417 -0.0897 -0.3935 -0.5316 -0.0681 -0.1734 -0.0724 -0.0967 -0.0617 -1.5281 -0.3112 -0.0657 -1.8278 -0.2134 -0.1189 -0.2748 -0.1990 -0.3659 -2.3269 -0.2227 -1.0387 -0.8339 -0.1493 -0.1062 -1.2220 -0.4489 -0.1557 -0.1184 -0.0912 -0.1167 -0.2980 -0.6182 -0.0888 -0.1124 -0.3896 -0.4763 -0.1846 -1.6013 -0.1070 -0.1170 -0.1934 -0.4860 -0.0373 -0.0102 -1.4548 -1.7811 -0.2961 -0.1227 -0.2564 -0.4063 -0.0765 -0.1012 -0.4148 -0.3715 -0.1174 -0.1058 -0.2672 -1.2578 -0.3311 -0.1520 -0.9333 -0.1144 -0.0738 -1.4491 -0.0896 -0.1208
S-160	<s> public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); } </s> java
T-160	<s> public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); } </s> java
H-160	-0.44425448775291443	public static String solve_string(String s ) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray () ) { <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }
D-160	-0.44425448775291443	public static String solve_string(String s ) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray () ) { <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }
P-160	-0.5794 -0.0463 -1.7548 -0.0349 -0.0977 -0.0449 -0.6442 -0.0972 -0.0933 -2.1712 -0.0824 -0.2432 -0.2361 -0.0781 -0.0902 -1.4469 -1.1903 -0.0368 -0.0809 -0.0771 -0.6779 -2.0956 -0.3077 -0.1204 -0.4658 -0.0721 -0.0598 -0.0827 -0.1259 -0.0922 -0.0324 -2.7788 -0.1377 -0.0838 -0.2561 -0.1313 -0.1060 -0.2334 -0.1200 -0.1127 -0.0829 -0.0615 -0.1054 -0.9939 -0.0769 -0.1086 -0.1975 -0.0690 -0.7833 -2.0527 -0.1418 -0.1160 -0.5710 -0.0819 -0.0950 -0.2282 -0.1007 -0.1052 -1.2630 -0.1134 -0.8193 -0.0993 -0.0612 -0.4772 -0.1177 -0.0269 -1.5941 -0.1009 -0.1141 -1.1810 -0.5407 -0.2192 -0.1040 -0.9144 -0.4212 -0.4277 -0.9886 -0.1283 -0.1319 -0.0664 -0.1243 -2.0974 -1.9706 -0.1012 -0.3684
S-106	<s> public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; } </s> java
T-106	<s> public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; } </s> java
H-106	-0.3688719570636749	public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1 ; i <= n; i ++ ) { <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result ; }
D-106	-0.3688719570636749	public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1 ; i <= n; i ++ ) { <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result ; }
P-106	-1.0156 -0.0530 -2.1212 -0.3251 -0.0699 -0.1310 -0.1297 -0.1053 -0.0077 -0.0922 -0.0277 -0.0122 -0.6355 -1.0172 -0.0658 -1.9753 -0.0765 -0.1932 -0.2143 -0.1181 -0.0312 -0.0180 -0.1150 -0.0569 -0.0837 -1.0962 -0.0579 -0.1099 -0.0378 -0.0150 -0.0956 -0.0612 -0.1022 -0.7441 -0.2237 -0.5991 -0.5444 -0.0849 -0.0967 -1.9989 -0.9472 -0.1109 -0.0947 -0.1360 -1.4869 -0.0972 -1.8178 -1.3475 -0.1021 -0.2939 -0.2002 -0.1090 -0.3162 -1.8161 -0.4088 -0.0678 -0.1622 -0.0768 -0.0993 -0.0793 -1.0073 -0.1459 -0.0114 -0.0976 -0.3083 -0.5604 -0.3498 -0.1070 -0.0236 -0.0172 -0.0985 -0.0604 -1.1491 -0.0832 -0.0869 -0.0383 -0.0153 -0.0964 -0.0635 -1.2172 -0.1213 -0.0961 -0.9098 -0.0950 -0.2660
S-26	<s> public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ <mask> } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; } </s> java
T-26	<s> public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ <mask> } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; } </s> java
H-26	-0.4435981214046478	public static List<Integer> remove_duplicates(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ <mask> } for (Integer n : numbers){ if (count.get(n ) == 1 ) result.add(n); } return result ; }
D-26	-0.4435981214046478	public static List<Integer> remove_duplicates(List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ <mask> } for (Integer n : numbers){ if (count.get(n ) == 1 ) result.add(n); } return result ; }
P-26	-1.1004 -0.0455 -0.4049 -0.2939 -0.0610 -0.1423 -0.0360 -0.1134 -0.0139 -0.5564 -0.0790 -0.2976 -0.0512 -0.1549 -0.0555 -1.7140 -0.0874 -0.5429 -0.3301 -0.0515 -0.1777 -0.0887 -0.0884 -0.0711 -1.6317 -0.2073 -0.0523 -1.5355 -1.9728 -0.2329 -0.0437 -0.2727 -0.8990 -0.1306 -0.1176 -0.1025 -0.0526 -1.3632 -0.2307 -0.0421 -0.2893 -0.7473 -1.0752 -0.2035 -0.1268 -0.0846 -0.0765 -0.0708 -0.0621 -1.9413 -0.6943 -0.1558 -0.0965 -0.3263 -0.1929 -0.1214 -0.0557 -0.0829 -0.0644 -0.0549 -1.5923 -0.1567 -0.1303 -1.4939 -0.2811 -0.4997 -0.5417 -0.5648 -1.6997 -0.1629 -1.9945 -0.3248 -0.4924 -0.1549 -0.5407 -0.9378 -0.5205 -1.3480 -0.1346 -0.1610 -0.1002 -1.2024 -0.0893 -0.1706
S-115	<s> @Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java
T-115	<s> @Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java
H-115	-0.33140143752098083	@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { <mask> if(num_ones_o1 < num_ones_o2) return - 1 ; else return 1 ; } return 0 ; }
D-115	-0.33140143752098083	@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { <mask> if(num_ones_o1 < num_ones_o2) return - 1 ; else return 1 ; } return 0 ; }
P-115	-0.8648 -0.1275 -0.0740 -0.0781 -0.0372 -0.4539 -0.0610 -0.0583 -0.3922 -1.1340 -0.0490 -0.2891 -0.0768 -0.2360 -0.0812 -0.1162 -0.0148 -0.1099 -0.0687 -0.0926 -0.0917 -0.0638 -0.1113 -0.0122 -1.4930 -0.1826 -1.1831 -0.0866 -0.0704 -0.1070 -0.0175 -0.1044 -0.0672 -0.0481 -0.0927 -0.0417 -0.1143 -0.0102 -1.4655 -0.1064 -0.6747 -0.2373 -1.2669 -0.6803 -0.1079 -0.0168 -0.1100 -0.0747 -0.0917 -0.2262 -0.0896 -0.1131 -0.0167 -0.1133 -0.0711 -0.6663 -0.1518 -0.9764 -0.1758 -0.1660 -0.1963 -0.8315 -0.4346 -0.1067 -0.0159 -0.1037 -0.0710 -0.1185 -0.2109 -0.1117 -0.1125 -0.0145 -0.1169 -0.0693 -0.6166 -0.1193 -1.9953 -0.7873 -0.4162 -0.3002 -0.1511 -1.6862 -0.4798 -0.1454 -1.6383 -1.7490 -0.2120 -0.1516 -0.6204
S-69	<s> public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } <mask> return result; } </s> java
T-69	<s> public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } <mask> return result; } </s> java
H-69	-0.34815505146980286	public static List<Integer> strange_sort_list(List<Integer> lst ) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size () > 0 ) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } <mask> return result ; } return result ; }
D-69	-0.34815505146980286	public static List<Integer> strange_sort_list(List<Integer> lst ) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size () > 0 ) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } <mask> return result ; } return result ; }
P-69	-0.8381 -0.0399 -0.3038 -0.3383 -0.0690 -0.1382 -0.0240 -0.0838 -0.0215 -0.0963 -0.0453 -0.6292 -0.0809 -0.3996 -0.0590 -0.1745 -0.0444 -1.7475 -0.0847 -0.3316 -0.4234 -0.0637 -0.1607 -0.0698 -0.0960 -0.0584 -1.2524 -0.2597 -0.0616 -1.7472 -0.1156 -0.0811 -0.0978 -0.1191 -1.4235 -0.1632 -0.1295 -0.5249 -0.2910 -0.2722 -1.9487 -0.2219 -1.5642 -0.4876 -0.0899 -0.1848 -0.1261 -0.1676 -0.0539 -0.9062 -0.0929 -0.1116 -0.1381 -0.2940 -0.5188 -0.0360 -0.1015 -0.0555 -0.3719 -0.2949 -1.2231 -0.0931 -0.0769 -0.1230 -0.0926 -0.1177 -0.2455 -0.4706 -0.0335 -0.0935 -0.1492 -0.2981 -0.1581 -0.7821 -0.0963 -0.2475 -0.1778 -0.1432 -0.1618 -0.0918 -1.0788 -0.2027 -0.7553 -1.6596 -0.6978 -0.0909 -0.2022
S-70	<s> <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); } </s> java
T-70	<s> <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); } </s> java
H-70	-0.3612576425075531	<mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2. ; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal. valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }
D-70	-0.3612576425075531	<mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2. ; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal. valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }
P-70	-0.4221 -0.5521 -0.1845 -0.5046 -0.1297 -0.2321 -0.1726 -0.3921 -0.1294 -0.1172 -0.2304 -0.1878 -0.1023 -0.2302 -0.0658 -0.0714 -0.2616 -0.1136 -0.1103 -0.1365 -0.0471 -0.1172 -1.1544 -0.0764 -0.3993 -0.2181 -0.1692 -0.0911 -0.1121 -0.0765 -0.0737 -0.1191 -0.2173 -0.1609 -0.8947 -0.0552 -0.3506 -1.7961 -0.3926 -0.0929 -0.0911 -1.8055 -0.1025 -0.0366 -0.4473 -0.1100 -0.9611 -0.0223 -1.7369 -1.1466 -0.0401 -0.0906 -0.4999 -0.1000 -1.4467 -1.0777 -0.6795 -1.5584 -0.1836 -0.1063 -0.0548 -0.0959 -0.1453 -0.0248 -0.2283 -0.0287 -0.0166 -0.0908 -0.0448 -0.0218 -0.0819 -0.0461 -1.2322 -0.2937 -0.0839 -0.1193 -0.0479 -0.0301 -2.4775 -0.5424 -0.3516
S-150	<s> public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { <mask> } } } return result; } </s> java
T-150	<s> public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { <mask> } } } return result; } </s> java
H-150	-0.3685649335384369	public static int double_the_difference(double[] lst) { int result = 0 ; for (Double d : lst) { if ( d.doubleValue () == d ) { int d_int = (int) d.doubleValue () ; if (d_int % 2 == 1 && d_int >= 0) { <mask> } } } return result ; }
D-150	-0.3685649335384369	public static int double_the_difference(double[] lst) { int result = 0 ; for (Double d : lst) { if ( d.doubleValue () == d ) { int d_int = (int) d.doubleValue () ; if (d_int % 2 == 1 && d_int >= 0) { <mask> } } } return result ; }
P-150	-0.6583 -0.0400 -0.1310 -0.0676 -0.0917 -0.0216 -0.1011 -0.0702 -0.4581 -0.5652 -2.6074 -0.0247 -1.2446 -0.0855 -0.1408 -0.0846 -0.0944 -1.5130 -0.2668 -0.2066 -0.1214 -0.0478 -0.0724 -0.0786 -0.0309 -0.8369 -0.1021 -0.1966 -0.4513 -2.2757 -0.3621 -0.0888 -0.0575 -2.0091 -0.5037 -0.0960 -1.7436 -0.0924 -0.2042 -0.0875 -0.0948 -0.0872 -0.1027 -0.1421 -0.2076 -0.6746 -0.0802 -0.1037 -0.0729 -0.0547 -2.8903 -0.4256 -0.1032 -0.1144 -0.5296 -0.1039 -0.0584 -0.3583 -0.0511 -0.0916 -0.2120 -0.7070 -0.0928 -0.1048 -0.0549 -0.0628 -0.7869 -0.0982 -0.2240 -0.1078 -0.1317 -0.2354 -0.5848 -0.2546 -0.0956 -0.0983 -0.6057 -0.0860 -0.2943
S-87	<s> public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ <mask> } return array; } } </s> java
T-87	<s> public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ <mask> } return array; } } </s> java
H-87	-0.4284927546977997	public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ( ( array.length ) == ( array.length ) ) return array; if ( ( array.length ) == ( array.length ) ) return array; if ( ( array.length ) == ( array.length ) ) return array; else if ( ( array.length ) == ( array.length ) ) return array; else { for (int i = 0; i < array.length / 2; i += 1){ <mask> } return array; } }
D-87	-0.4284927546977997	public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ( ( array.length ) == ( array.length ) ) return array; if ( ( array.length ) == ( array.length ) ) return array; if ( ( array.length ) == ( array.length ) ) return array; else if ( ( array.length ) == ( array.length ) ) return array; else { for (int i = 0; i < array.length / 2; i += 1){ <mask> } return array; } }
P-87	-0.5786 -0.0335 -0.1234 -1.9770 -0.0447 -0.0899 -0.0403 -0.7049 -0.7109 -1.6201 -0.0431 -1.8582 -0.0818 -0.1443 -0.1225 -0.2601 -0.1289 -0.1077 -0.1151 -0.9283 -0.0879 -0.0546 -0.8106 -2.2489 -0.0945 -0.0401 -0.7526 -0.1695 -1.4466 -0.1768 -0.3264 -0.7580 -0.9815 -0.2281 -0.0482 -0.5692 -0.7678 -1.9530 -1.3541 -0.0510 -0.0534 -0.4298 -0.2228 -0.2599 -0.0642 -0.9680 -0.6988 -0.3748 -0.5802 -1.0523 -0.6987 -0.0967 -0.3020 -0.8982 -1.3314 -0.4434 -0.0623 -0.0925 -0.5125 -0.2383 -0.1151 -0.0578 -0.8435 -2.3454 -0.3171 -0.5381 -0.7659 -0.5985 -0.1002 -0.3088 -0.6622 -0.6763 -0.2560 -0.0690 -0.1041 -0.6503 -0.2102 -0.0832 -0.0545 -0.7936 -0.1465 -0.6348 -0.2071 -0.3826 -0.5047 -0.2969 -0.0879 -0.2502 -0.6821 -0.5052 -0.1994 -0.0675 -0.0946 -0.5777 -0.2044 -0.0776 -0.0583 -0.7514 -0.0717 -0.4833 -0.2286 -0.1393 -0.4755 -0.0810 -0.0885 -0.8188 -0.0883 -0.0887 -0.5327 -0.0868 -0.0534 -0.5495 -0.3304 -0.0788 -0.0591 -0.1768 -0.6426 -0.1407 -0.0938 -0.0994 -0.1029 -0.0775 -0.0641 -0.5900 -0.0979 -0.0942 -0.6926
S-122	<s> public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; } </s> java
T-122	<s> public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; } </s> java
H-122	-0.4150181710720062	public static java.util.ArrayList <Integer> get_odd_collatz(int n) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; if((n % 2) == 1) result.add(n); <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); return result ; }
D-122	-0.4150181710720062	public static java.util.ArrayList <Integer> get_odd_collatz(int n) { java.util.ArrayList <Integer> result = new java.util.ArrayList <Integer> () ; if((n % 2) == 1) result.add(n); <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); return result ; }
P-122	-0.5781 -0.0638 -4.0895 -0.0711 -0.4783 -0.1424 -0.4818 -1.3644 -0.1090 -0.4365 -0.1158 -0.1091 -0.0088 -0.1028 -0.0209 -0.0266 -0.0236 -0.6598 -1.2466 -0.0859 -2.0581 -0.0764 -0.6061 -0.0806 -0.0834 -0.0906 -0.1208 -0.5570 -0.0600 -0.2090 -0.0804 -0.0961 -0.0692 -0.1158 -0.0903 -0.0369 -0.1309 -0.0485 -0.5649 -0.1451 -0.4257 -1.7746 -0.4644 -0.1968 -0.9105 -0.2026 -0.1225 -0.3865 -0.0949 -0.9886 -0.1940 -0.1488 -0.2792 -0.6160 -0.1308 -0.9503 -0.3731 -0.1351 -0.1254 -0.2305 -0.2324 -0.1400 -0.0969 -0.0327 -0.1062 -0.1016 -0.7072 -0.0691 -0.5921 -0.1626 -0.1188 -0.3321 -0.0837 -1.1488 -0.1217 -0.1324 -0.2473 -0.4537 -0.1381 -1.0143 -2.7152 -0.1197 -0.7428 -0.1470 -1.2352
S-64	<s> public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { <mask> } } </s> java
T-64	<s> public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { <mask> } } </s> java
H-64	-0.5059559941291809	public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length () ) { StringBuilder sb = new StringBuilder(); for (int i = s.length () - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb. toString () ; } else { <mask> } }
D-64	-0.5059559941291809	public static String circular_shift(int x, int shift) { String s = x + ""; if (shift > s.length () ) { StringBuilder sb = new StringBuilder(); for (int i = s.length () - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb. toString () ; } else { <mask> } }
P-64	-0.5313 -0.0509 -1.8310 -0.0188 -0.1052 -0.0173 -0.5116 -0.9392 -0.1346 -0.8085 -0.0866 -0.0218 -1.6975 -0.0830 -2.1009 -0.1101 -0.0865 -0.1238 -0.0561 -2.6437 -0.1418 -0.1204 -0.4348 -0.2636 -0.2155 -0.1024 -0.0892 -3.1315 -0.2372 -0.0872 -1.0555 -0.0282 -0.0994 -0.0615 -0.7485 -2.1886 -0.1391 -0.1129 -0.4827 -0.0767 -0.0980 -0.2509 -0.1033 -0.0910 -1.0450 -0.1405 -1.2022 -0.1071 -0.0614 -0.4456 -0.1245 -0.0362 -1.9653 -0.0589 -0.1200 -0.8912 -0.4873 -0.2333 -0.0996 -0.9299 -0.3889 -0.4615 -0.7622 -0.1022 -0.0568 -0.1167 -1.9442 -2.3766 -0.2941 -0.1072 -0.1286 -0.1150 -0.5692 -0.1454 -0.1135 -0.1497 -0.1484 -1.2179
S-145	<s> public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; <mask> count += 1; } } return count; } </s> java
T-145	<s> public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + ""; <mask> count += 1; } } return count; } </s> java
H-145	-0.42581304907798767	<s> public static int special_filter(int [] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10 ) { String number_as_string = num + ""; <mask> count += 1; } } return count ; }
D-145	-0.42581304907798767	<s> public static int special_filter(int [] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10 ) { String number_as_string = num + ""; <mask> count += 1; } } return count ; }
P-145	-2.2417 -0.3433 -0.2443 -0.1064 -0.0596 -0.1234 -0.0235 -0.0949 -0.0522 -0.7304 -0.6785 -1.7316 -0.0382 -1.7858 -0.0880 -0.1669 -0.0830 -0.0830 -1.3881 -1.9626 -0.5477 -0.0563 -0.1735 -0.0486 -0.0969 -0.0847 -0.0866 -0.0755 -1.1807 -0.1715 -0.0496 -1.5561 -0.0229 -0.0947 -0.1751 -0.1785 -0.1310 -0.1044 -0.1049 -0.0346 -1.4316 -0.1643 -0.1277 -0.1686 -0.0798 -0.0700 -0.0353 -1.9443 -0.0951 -0.1578 -0.1291 -0.7158 -0.2937 -2.0352 -0.4727 -0.0909 -1.5497 -0.0836 -0.1250 -0.0591 -0.1030 -0.0615 -0.0983 -0.0945 -0.0690 -2.5541 -0.1069 -0.1479 -0.1455 -0.0744 -0.0790 -1.2820 -0.1351 -0.0977 -0.0833 -0.1077 -0.9508 -0.0911 -0.5287
S-142	<s> public static String words_in_sentence(String sentence) { String result = ""; for (String word : sentence.split(" ")) { int flag = 0; <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); } </s> java
T-142	<s> public static String words_in_sentence(String sentence) { String result = ""; for (String word : sentence.split(" ")) { int flag = 0; <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; } return result.trim(); } </s> java
H-142	-0.39715278148651123	public static java.lang.String words_in_sentence(String sentence ) { java.lang.String result = ""; for (String word : sentence.split(" ")) { int flag = 0; <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; return result. trim () ; }
D-142	-0.39715278148651123	public static java.lang.String words_in_sentence(String sentence ) { java.lang.String result = ""; for (String word : sentence.split(" ")) { int flag = 0; <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + " "; return result. trim () ; }
P-142	-0.6337 -0.0642 -5.4251 -0.1637 -0.1158 -0.1544 -0.0492 -0.0426 -0.1058 -0.0728 -0.1005 -0.0687 -1.0199 -0.1459 -0.0399 -1.4339 -0.0847 -0.8767 -0.0644 -0.0732 -0.1143 -0.1108 -0.1495 -0.0799 -2.8218 -0.2452 -0.1154 -0.1848 -0.0563 -0.0670 -0.0292 -0.1185 -0.5494 -0.0659 -0.0982 -0.0747 -0.1910 -0.0469 -0.0828 -0.7386 -0.2370 -0.1433 -0.1373 -0.1116 -0.1194 -0.4323 -0.1713 -0.1313 -0.9095 -0.7778 -0.1046 -0.2154 -0.9086 -0.0915 -0.1129 -1.1578 -0.2794 -0.0996 -0.1169 -1.0404 -0.0774 -0.1004 -0.2359 -0.0943 -0.1594 -0.1340 -0.6922 -0.1163 -0.6129 -0.2728 -0.1351 -0.0502 -0.0983 -0.1188 -0.0311 -0.7046 -0.0760 -0.1326 -1.1734 -2.6633 -0.1181 -0.1115 -1.0813
S-25	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } <mask> } </s> java
T-25	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } <mask> } </s> java
H-25	-0.47102779150009155	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math. sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1 ; } return result ; }
D-25	-0.47102779150009155	<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math. sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1 ; } return result ; }
P-25	-2.3894 -0.6276 -0.2467 -0.1116 -0.0856 -0.3575 -0.3103 -0.0542 -0.1708 -0.0162 -0.0350 -0.5904 -0.7519 -0.0750 -1.8636 -0.4452 -0.3538 -0.0536 -0.1852 -0.0661 -0.0956 -0.0656 -1.7225 -0.2235 -0.0537 -1.8520 -0.1376 -0.1181 -0.1015 -1.4565 -0.0718 -0.1265 -0.8227 -0.1610 -0.1473 -0.2390 -0.1961 -0.0394 -0.1132 -1.1611 -0.2974 -0.2142 -1.0762 -0.2027 -0.1859 -0.6780 -0.1459 -0.1339 -0.7387 -0.2933 -0.1606 -0.2375 -0.8773 -0.1558 -0.1242 -0.3935 -0.8733 -0.3741 -1.8229 -0.2031 -0.2179 -0.1098 -0.0969 -0.1542 -1.1781 -0.5385 -0.0755 -1.1996 -0.9215 -0.0926 -2.1965 -0.8265 -0.1395 -1.2055 -0.1772 -0.2366 -0.2218 -0.2691
S-27	<s> public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { <mask> } } return new String(char_list); } </s> java
T-27	<s> public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { <mask> } } return new String(char_list); } </s> java
H-27	-0.44307899475097656	public static String flip_case(String string ) { char[] char_list = string.toCharArray () ; for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { <mask> } } return new String(char_list); }
D-27	-0.44307899475097656	public static String flip_case(String string ) { char[] char_list = string.toCharArray () ; for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { <mask> } } return new String(char_list); }
P-27	-0.7984 -0.0528 -0.7459 -0.0166 -0.1030 -0.0385 -0.5128 -0.0828 -0.1039 -2.1745 -0.0889 -0.1555 -2.8260 -0.0676 -0.1015 -0.0543 -0.0873 -0.0853 -0.1307 -0.0851 -0.0494 -4.9191 -0.2419 -0.1634 -0.1211 -0.9597 -0.0895 -0.0935 -1.2628 -0.1097 -0.1143 -0.1413 -0.1210 -0.0597 -0.0891 -0.0927 -0.9621 -0.0886 -0.0567 -0.2033 -1.5327 -0.0931 -0.0603 -0.1055 -0.0859 -0.1128 -0.0529 -0.8130 -1.0792 -2.2396 -0.0898 -0.1186 -0.0748 -0.1037 -0.1083 -0.0218 -0.3663 -0.3147 -1.6236 -0.0889 -0.2442 -0.1711 -0.1187 -0.2039 -0.1390 -0.1369 -0.0755 -0.1765 -1.1167 -0.8380 -0.0973 -0.0542 -2.1798 -0.0849 -0.2582
S-152	<s> public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { <mask> } return class_name + "." + strong; } </s> java
T-152	<s> public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { <mask> } return class_name + "." + strong; } </s> java
H-152	-0.40211164951324463	public static java.lang.String strongest_extension(String class_name, String [] extensions ) { java.lang.String strong = null; int val = Integer.MIN_VALUE ; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { <mask> } return class_name + "." + strong ; } return null ; }
D-152	-0.40211164951324463	public static java.lang.String strongest_extension(String class_name, String [] extensions ) { java.lang.String strong = null; int val = Integer.MIN_VALUE ; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { <mask> } return class_name + "." + strong ; } return null ; }
P-152	-1.2731 -0.0574 -5.0079 -0.1753 -0.0721 -0.1486 -0.0434 -0.1513 -0.0462 -0.1330 -0.0196 -0.5839 -0.1932 -0.0928 -0.0970 -0.0657 -1.1222 -1.6973 -2.0133 -0.0216 -1.6362 -0.0946 -1.1116 -0.0555 -0.0603 -0.1011 -0.0918 -0.1247 -0.1058 -0.1836 -1.2961 -0.2220 -0.0583 -0.0939 -1.2366 -0.0934 -0.0295 -0.0914 -0.0362 -1.1340 -0.1622 -0.1230 -0.1625 -0.0924 -0.0688 -0.0468 -1.3949 -0.0927 -0.1613 -0.0774 -0.1001 -1.1974 -0.0868 -0.0197 -0.0794 -0.8473 -0.1886 -0.1171 -0.5848 -0.0678 -0.0532 -0.0745 -0.1166 -0.0629 -0.0425 -2.5598 -0.1037 -0.2639 -0.1507 -0.1451 -0.3173 -0.1299 -0.1104 -0.1093 -0.0806 -0.0687 -0.0305 -0.0640 -0.4151 -0.7982 -0.1006 -0.6143 -1.1323 -0.3196 -0.0859 -0.0894
S-123	<s> public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; } </s> java
T-123	<s> public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; } </s> java
H-123	-0.2759038805961609	public static boolean valid_date(String date ) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer. parseInt(date_info[0]); int day = Integer. parseInt(date_info[1]); int year = Integer. parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }
D-123	-0.2759038805961609	public static boolean valid_date(String date ) { try { date = date.trim(); String[] date_info = date.split("-"); if(date_info.length > 3) return false; int month = Integer. parseInt(date_info[0]); int day = Integer. parseInt(date_info[1]); int year = Integer. parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }
P-123	-0.4692 -0.0483 -0.0837 -0.0488 -0.1053 -0.0545 -0.5468 -0.0959 -0.0438 -2.0621 -0.0911 -0.4975 -0.0928 -0.9336 -0.1042 -0.0685 -0.1122 -0.9161 -1.7797 -1.7956 -1.6870 -0.0463 -0.0782 -0.0985 -0.0800 -0.0634 -0.1041 -0.4701 -0.1030 -0.3386 -0.2182 -0.7778 -0.3153 -0.1024 -0.1397 -0.1122 -0.0712 -0.1013 -0.2924 -0.0778 -0.0685 -0.7561 -0.1405 -0.0493 -0.1019 -0.7929 -0.0963 -1.3977 -0.7666 -0.1878 -0.0983 -0.1074 -0.1927 -0.0948 -0.0391 -0.1061 -0.7301 -0.0992 -1.4493 -0.6608 -0.1093 -0.0989 -0.0842 -0.2242 -0.1095 -0.0861 -0.1028 -0.5011 -0.0958 -1.3335 -0.6877 -0.0975 -0.1006 -0.0809 -0.1338 -0.8754 -0.2420 -0.6388 -0.4785 -0.1081 -0.2067 -0.0919 -0.1095 -0.0947 -0.0225 -0.5871 -0.0636 -0.0772 -0.5145 -0.1777 -2.2638 -0.0625 -0.0956 -0.0741 -0.0686 -0.0901 -0.2927 -0.0462 -0.0697 -0.0559 -0.0709 -0.1924 -0.0326 -0.0926 -0.5013 -0.3002 -0.2378 -0.0848 -0.0813 -0.8743 -0.0768 -0.0809 -0.1640 -0.1203 -0.0771 -0.0460 -0.0827 -0.6658 -0.0883 -0.8999 -0.0859 -0.2009 -0.1749 -0.0792 -0.1397 -0.1099 -1.5144 -0.0775 -0.0975 -0.0657 -0.0609 -0.0846 -0.0976 -0.5373 -0.0399 -0.1496 -0.0438 -0.0475 -0.1050 -0.2863 -0.2132 -0.0775 -0.0919 -0.7192 -0.0878 -0.0713 -0.1152 -0.1088 -0.0838 -0.0276 -0.0861 -0.3364 -0.0799 -0.6931 -0.0979 -0.1147 -0.5404 -0.3486 -0.1326 -0.1399 -0.1108 -0.0619 -0.5491 -0.5248 -0.2737 -0.4751 -0.1614 -0.1377 -0.1055 -0.1463 -0.0667 -0.0634 -0.1212 -0.0411 -0.3053 -0.0775 -0.0735 -0.4252 -0.1591 -0.1572 -0.4154 -0.2160 -0.0740 -0.0998 -0.1450 -0.1491 -0.0927 -0.0678 -0.1071 -0.0535 -0.0543 -0.0951 -0.0472 -0.3541 -0.0576 -0.0585 -0.4513 -0.1693 -0.4965 -0.1744 -0.1040 -0.0792 -1.2963 -0.1090 -0.1241 -0.0749 -0.4064 -0.1001 -0.1504 -0.0822 -0.5181 -0.1131 -0.8449
S-110	<s> public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; } </s> java
T-110	<s> public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; } </s> java
H-110	-0.34549376368522644	public static HashMap<Character, Integer> histogram(String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s. isEmpty () ) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }
D-110	-0.34549376368522644	public static HashMap<Character, Integer> histogram(String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s. isEmpty () ) return res; String[] list_letters = s.split(" "); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }
P-110	-1.5374 -0.0593 -1.4428 -0.3567 -0.0213 -0.2633 -0.9563 -0.1341 -0.0382 -0.4037 -0.0872 -0.1016 -2.0781 -0.0887 -1.2955 -0.3561 -0.0256 -0.2919 -0.9187 -0.1304 -0.1334 -0.0949 -0.0642 -1.3658 -0.2349 -0.0279 -0.3055 -0.7026 -0.8144 -0.1532 -0.9006 -0.2789 -0.1295 -1.0287 -2.9976 -0.5361 -0.3119 -0.1893 -1.2300 -1.4611 -2.2290 -0.0547 -0.0906 -0.0602 -0.0894 -0.0724 -0.1113 -0.4988 -0.0478 -0.0620 -0.1278 -1.8596 -0.1753 -0.0827 -0.2401 -0.1134 -0.0512 -0.0716 -0.2731 -0.0248 -1.1309 -0.1596 -0.2588 -0.3891 -0.0939 -0.0916 -1.0868 -0.0937 -0.0712 -0.1126 -0.1107 -0.0670 -0.0841 -0.0809 -0.5411 -0.0936 -1.1056 -0.0889 -0.1090 -0.0862 -0.0900 -0.0610 -0.1142 -0.0684 -0.7341 -0.3964 -0.2677 -0.8121 -0.2602 -0.0989 -0.0911 -0.2506 -0.4257 -0.0799 -0.1998 -0.0443 -0.0403 -0.0805 -0.3088 -0.0780 -0.0760 -0.0428 -0.1028 -0.0933 -0.1107 -0.7105 -0.0975 -0.3294 -0.2743 -0.0877 -0.0986 -0.9330 -0.0806 -0.0762 -0.0299 -0.2830 -0.0815 -0.7404 -0.0915 -0.2174 -0.1364 -0.1021 -0.0691 -0.1082 -0.0892 -0.1282 -0.1134 -0.0921 -0.2604 -0.6882 -0.5991 -1.9252 -0.1314 -0.1018 -0.2258 -1.4839 -0.1539 -0.0936 -0.2557 -0.2384 -0.1639 -0.3698 -0.1607 -0.0513 -0.0494 -0.1113 -0.1456 -0.5105 -0.0616 -0.1119 -0.1134 -1.1915 -0.1018 -0.5298 -0.0763 -0.4513 -0.4710 -0.0940 -0.2563 -0.7307 -0.2574 -0.1977 -0.1215 -0.0529 -0.1111 -0.0902 -0.7643 -0.1237 -0.1229 -0.1104 -0.3717 -0.2602 -0.1639 -0.3032 -0.1464 -0.0515 -0.0543 -0.0792 -0.1156 -0.3697 -0.0603 -0.1175 -0.1229 -1.0253 -0.0864 -0.1227 -0.1738 -0.4233 -0.4045 -0.1122 -0.0936 -0.0762 -0.7200 -0.3294 -0.1176 -0.2580 -1.3724 -0.0882 -0.1508 -1.3502 -0.1095 -1.0622
S-19	<s> public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(" "))); <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); } </s> java
T-19	<s> public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(" "))); <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); } </s> java
H-19	-0.3879791498184204	public static String sort_numbers(String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(" "))); <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); }
D-19	-0.3879791498184204	public static String sort_numbers(String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put("zero", 0); value_map.put("one", 1); value_map.put("two", 2); value_map.put("three", 3); value_map.put("four", 4); value_map.put("five", 5); value_map.put("six", 6); value_map.put("seven", 7); value_map.put("eight", 8); value_map.put("nine", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(" "))); <mask> String result = ""; for (String number : number_array){ result += number + " "; } return result.trim(); }
P-19	-0.9528 -0.0553 -2.2611 -0.0386 -0.1031 -0.0616 -0.5415 -0.1605 -0.0763 -1.6792 -0.0815 -0.1525 -1.0369 -0.3269 -0.0687 -0.2567 -0.9520 -0.1368 -0.0543 -0.0959 -0.0595 -0.0837 -0.0630 -1.0996 -0.1855 -0.0657 -0.2683 -0.7802 -1.0242 -0.1013 -0.1021 -0.0788 -0.1077 -0.3094 -0.1084 -0.0992 -2.0071 -0.2832 -0.0612 -0.1083 -0.0910 -0.1022 -0.3037 -0.0828 -0.0480 -1.8670 -0.9917 -0.0516 -0.1126 -0.0934 -0.1017 -0.3006 -0.0695 -0.0391 -2.0528 -0.3212 -0.0546 -0.1108 -0.1044 -0.1033 -0.3229 -0.0852 -0.0899 -2.2235 -0.0572 -1.1242 -0.0639 -0.1088 -0.1025 -0.1029 -0.2858 -0.0870 -0.0400 -1.9790 -0.0703 -1.0625 -0.0617 -0.1055 -0.1095 -0.1041 -0.2709 -0.0910 -0.0658 -2.0043 -0.0529 -0.8160 -0.0607 -0.1010 -0.1066 -0.1041 -0.2827 -0.0926 -0.0135 -1.9544 -0.0378 -0.9917 -0.0642 -0.1003 -0.1032 -0.1044 -0.2595 -0.0702 -0.3437 -0.0121 -1.7206 -0.0657 -0.9846 -0.0647 -0.1026 -0.0971 -0.1055 -0.2257 -0.0634 -0.0039 -1.7496 -0.0590 -1.2983 -0.0756 -0.0996 -0.0971 -0.1064 -0.2766 -0.0604 -0.1404 -0.0158 -2.0083 -0.0215 -1.6405 -1.3701 -0.3148 -0.0850 -0.1843 -0.0482 -0.0995 -0.0352 -0.0858 -0.0792 -0.7598 -0.1110 -0.0734 -1.3119 -0.0147 -0.0987 -0.2758 -0.5839 -0.4878 -0.1393 -0.6888 -0.1277 -0.0813 -0.2544 -0.4677 -0.2404 -0.2010 -1.1128 -0.0839 -0.0910 -1.5887 -0.2229 -0.1174 -0.1273 -0.0677 -0.0795 -0.0524 -0.0976 -0.0348 -1.6871 -0.1204 -0.0631 -0.1270 -0.0792 -0.1279 -0.0295 -0.0823 -0.2318 -0.1192 -0.1804 -1.9159 -1.9597 -0.1342 -1.0072
S-104	<s> public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { <mask> result.add(digit_map.get(num)); } } return result; } </s> java
T-104	<s> public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { <mask> result.add(digit_map.get(num)); } } return result; } </s> java
H-104	-0.2755923867225647	public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); java.lang.String [] result = new java.lang.String [ a.length ] ; for( int num : a) { <mask> result.add(digit_map.get(num)); } return result; }
D-104	-0.2755923867225647	public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, "One"); digit_map.put(2, "Two"); digit_map.put(3, "Three"); digit_map.put(4, "Four"); digit_map.put(5, "Five"); digit_map.put(6, "Six"); digit_map.put(7, "Seven"); digit_map.put(8, "Eight"); digit_map.put(9, "Nine"); java.lang.String [] result = new java.lang.String [ a.length ] ; for( int num : a) { <mask> result.add(digit_map.get(num)); } return result; }
P-104	-0.8637 -0.0467 -1.5690 -0.2560 -0.0772 -0.1278 -0.0406 -0.0903 -0.0394 -0.4199 -0.0350 -0.2317 -0.0472 -0.1579 -0.0759 -1.3385 -0.0814 -0.2370 -0.3085 -0.0429 -0.2004 -0.8890 -0.1040 -0.0323 -0.1022 -0.0577 -0.0871 -0.0577 -0.9545 -0.1753 -0.0934 -0.1058 -0.0648 -0.1053 -0.2018 -0.1642 -0.1005 -0.0674 -1.0731 -0.0701 -0.1072 -0.0749 -0.1015 -0.1768 -0.2500 -0.0971 -0.0428 -0.9839 -0.0532 -0.1122 -0.0825 -0.1030 -0.1944 -0.1488 -0.0911 -0.0479 -0.9602 -0.0447 -0.1063 -0.0823 -0.1020 -0.1850 -0.1856 -0.0909 -0.0417 -0.8013 -0.0424 -0.1033 -0.0886 -0.1055 -0.1866 -0.1040 -0.0935 -0.0426 -0.0194 -0.6843 -0.0506 -0.1042 -0.0926 -0.1051 -0.2272 -0.1605 -0.3929 -0.1037 -0.0312 -0.0096 -0.5912 -0.0412 -0.0949 -0.0860 -0.1037 -0.1848 -0.1854 -0.3782 -0.0919 -0.0474 -0.0364 -0.5549 -0.0626 -0.0952 -0.0794 -0.1052 -0.2186 -0.2154 -0.4302 -0.0927 -0.0515 -0.0113 -0.6075 -0.1131 -0.0935 -0.0803 -0.1073 -0.2534 -0.1928 -0.3752 -0.0899 -0.0240 -0.0129 -0.7264 -3.0924 -0.0472 -0.5619 -0.0842 -1.4452 -0.5194 -1.7889 -0.0986 -0.1426 -0.0494 -0.0772 -0.1253 -0.0887 -0.0264 -0.6466 -0.6635 -0.0146 -0.4165 -0.4925 -0.4946 -0.1564 -0.4923 -1.7960 -0.0612 -0.0625 -0.0794 -1.4816 -0.0961 -0.3580 -0.1463 -0.0969 -0.0331 -0.0998 -0.2510 -0.3895 -0.0845 -0.1092 -0.0488 -0.1152 -0.1590 -0.3277 -0.1971 -0.5735 -0.0820 -0.1495 -0.0529 -1.0359 -0.0808 -1.8402
S-116	<s> public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; } </s> java
T-116	<s> public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; } </s> java
H-116	-0.34064993262290955	public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result ; }
D-116	-0.34064993262290955	public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(" "); for(int i = 0; i < words.length; i++) { int num_consonants = 0; <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result ; }
P-116	-1.1699 -0.0642 -1.7719 -0.3663 -0.0757 -0.1421 -0.0520 -0.1004 -0.0356 -0.9383 -0.1098 -0.0962 -1.5486 -0.0897 -0.0710 -1.6014 -0.0799 -1.6096 -0.3597 -0.0820 -0.1864 -0.0816 -0.0997 -0.0705 -1.2411 -0.2278 -1.0563 -2.4589 -0.0330 -0.0822 -0.0731 -0.1135 -0.5997 -0.0695 -0.0991 -0.1876 -0.4523 -0.5580 -0.0986 -0.0898 -1.3391 -0.0926 -0.0790 -0.0577 -0.0759 -0.0823 -0.7324 -0.0775 -1.0229 -0.0881 -0.1411 -0.1059 -0.1018 -0.0294 -0.0261 -0.0334 -0.1007 -1.5788 -0.1892 -0.1346 -0.1238 -0.0992 -0.3116 -0.4414 -0.1124 -0.0945 -1.2451 -0.0916 -0.0721 -0.0347 -0.7836 -0.3442 -0.5792 -0.1124 -1.0646 -0.0786 -0.8583 -0.0878 -0.1514 -0.0564 -0.0281 -0.0387 -0.0847 -0.0754 -0.2599 -0.1051 -0.3743 -0.5936 -0.1264 -0.1003 -1.3199 -0.1053 -0.0687 -0.0906 -0.1022 -0.0942 -0.4566 -0.0897 -0.7924 -0.1040 -0.1330 -0.6915 -0.2139 -0.0250 -0.0098 -0.7705 -0.1728 -0.2594 -0.2791 -0.0370 -0.4527 -0.1950 -0.6654 -0.8217 -0.3281 -0.1832 -0.7432 -0.1035 -0.1269 -0.0254 -0.0401 -0.1659 -0.0513 -0.3500 -0.0613 -0.0742 -0.1002 -0.0842 -0.1224 -0.5062 -0.0752 -0.0210 -0.0349 -1.1334 -0.1223 -0.0938 -0.0435 -0.0295 -0.0286 -1.0974 -0.1502 -0.1492 -0.6032 -0.3747 -0.0963 -0.0416 -0.0253 -0.0298 -0.0898 -0.1159 -1.3104 -0.1162 -0.1157 -0.2422 -0.7257 -0.4947 -0.6226 -0.2410 -0.4391 -0.1243 -0.0861 -0.0841 -1.9083 -0.1132 -1.3507
S-94	<s> public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } } </s> java
T-94	<s> public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } } </s> java
H-94	-0.33140718936920166	public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } }
D-94	-0.33140718936920166	public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = "start"; for (Object key : dict.keySet()) { if (key instanceof String)) { state = "mixed"; break; } String str_key = (String) key; if (state.equals("start")) { if (str_key.toUpperCase().equals(str_key)) state = "upper"; else if (str_key.toLowerCase().equals(str_key)) state = "lower"; else { state = "mixed"; break; } <mask> state = "mixed"; break; } } return (state.equals("upper")) || (state.equals("lower")); } }
P-94	-1.3914 -0.0367 -0.0930 -0.0570 -0.0950 -0.0391 -0.0866 -0.0429 -0.3652 -0.0429 -0.2360 -0.0627 -0.2349 -0.4384 -0.1568 -0.0474 -1.4384 -0.0895 -0.1916 -0.1235 -0.8080 -0.1197 -0.2056 -0.7618 -0.1072 -0.9811 -0.0822 -0.0854 -0.6180 -0.1496 -0.1093 -1.3906 -0.0606 -0.0909 -0.0992 -0.0353 -1.1217 -0.1916 -0.1230 -0.1166 -0.0805 -0.0555 -0.0314 -0.0964 -0.0470 -0.0513 -1.3961 -0.0943 -0.1190 -1.2494 -1.3482 -0.0309 -0.9402 -0.9721 -0.1240 -0.1361 -0.1186 -0.1040 -0.1109 -0.6573 -0.0539 -0.0792 -0.0793 -1.2110 -0.0806 -0.1034 -0.0661 -0.0842 -0.1898 -0.0801 -0.3967 -0.0768 -0.7344 -0.0946 -0.1264 -0.3104 -0.1073 -1.4535 -0.0718 -0.0594 -0.6421 -0.1097 -0.1234 -0.1310 -0.3072 -0.1060 -0.0655 -0.1116 -0.2935 -0.0730 -1.8559 -0.8327 -0.2138 -0.0975 -0.0660 -1.6723 -0.0770 -0.0967 -0.1044 -0.1024 -1.0701 -0.0876 -0.0755 -0.1279 -0.1598 -0.1052 -0.0543 -0.1139 -0.2868 -0.1316 -1.9511 -0.5369 -0.1670 -0.0980 -0.0594 -1.7893 -0.0586 -0.0911 -0.1004 -0.0624 -0.7873 -0.0804 -0.1514 -0.0769 -0.1095 -0.1117 -0.1305 -0.5868 -0.0634 -0.1257 -0.0914 -0.2203 -0.1105 -0.1337 -0.0441 -0.0949 -0.0940 -0.0982 -0.5108 -0.0594 -0.1051 -0.1056 -0.0976 -0.0983 -0.2060 -0.1418 -0.1168 -1.7556 -0.1494 -0.1729 -1.3393 -0.0658 -0.1398 -0.0873 -0.0985 -1.2949 -0.0807 -0.0726 -0.6495 -0.1032 -1.5140 -1.6546
S-136	<s> public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; } </s> java
T-136	<s> public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; } </s> java
H-136	-0.30583834648132324	public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }
D-136	-0.30583834648132324	public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }
P-136	-0.3525 -0.0362 -1.1821 -0.0237 -0.0918 -0.0670 -0.4010 -0.0661 -0.0789 -0.6853 -1.0399 -0.0766 -1.3776 -0.0833 -0.1861 -0.0788 -0.0982 -0.0578 -0.0924 -1.4476 -0.1258 -0.1046 -0.0664 -0.0910 -1.1137 -0.1336 -0.6962 -0.1273 -0.0543 -0.7242 -0.8905 -0.0853 -1.0932 -0.1095 -0.1031 -0.0606 -0.1041 -0.0574 -0.0813 -0.1498 -0.1314 -2.1999 -2.0008 -0.8230 -0.1719 -0.1068 -0.0671 -0.1336 -0.0628 -0.0909 -0.1399 -0.0974 -0.0576 -0.1000 -0.0571 -0.1405 -1.0455 -0.1752 -0.0588 -0.5081 -0.2221 -0.1102 -0.0947 -0.0825 -0.1189 -0.1617 -0.0944 -0.8356 -0.5084 -0.6344 -0.0829 -0.0553 -0.0864 -0.0534 -1.9929 -0.0820 -0.1566 -0.5537 -0.1005 -0.0411 -0.5244 -0.8350 -0.0920 -0.5815 -0.0893 -0.0946 -0.0563 -0.0901 -0.0526 -0.0817 -0.0677 -0.2566 -0.1921 -0.0673 -0.5797 -0.0878 -0.0998 -0.0686 -0.1084 -0.0629 -0.0918 -0.1122 -0.0960 -0.0689 -0.0930 -0.0484 -0.1369 -1.0420 -0.1389 -0.0684 -0.4577 -0.4013 -0.1138 -0.0922 -0.0791 -0.0979 -0.1488 -0.0908 -0.9544 -0.4308 -0.4678 -0.0861 -0.0636 -0.0884 -0.0503 -1.3337 -0.0755 -0.2001 -0.1509 -0.1068 -0.0976 -0.3104 -0.3185 -0.1019 -0.0556 -0.1004 -0.0967 -0.0987 -0.0850 -0.5372 -0.0600 -0.0873 -0.4513 -0.1708 -0.3647 -0.3218 -0.1038 -0.0593 -0.1079 -0.0963 -0.0996 -0.0908 -0.6499 -0.0571 -0.0800 -0.6278 -0.1045 -0.0749 -0.0743 -0.6106 -0.0972 -4.1480
S-157	<s> public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); <mask> } ); return words_list.get(0); } </s> java
T-157	<s> public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); <mask> } ); return words_list.get(0); } </s> java
H-157	-0.4014236330986023	public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words ) ; Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); <mask> } ); return words_list.get(0); }
D-157	-0.4014236330986023	public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words ) ; Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); <mask> } ); return words_list.get(0); }
P-157	-0.7858 -0.0546 -2.3164 -0.0552 -0.1025 -0.0531 -0.4697 -0.0937 -2.0005 -0.0298 -1.7672 -0.0779 -1.4179 -0.3076 -0.0805 -0.1500 -0.0270 -0.0872 -0.0508 -0.0803 -0.0798 -0.9594 -0.1704 -0.0773 -1.4361 -0.0400 -0.1036 -0.1827 -0.6715 -0.2129 -4.2590 -0.4369 -1.3758 -0.0933 -0.0510 -0.5767 -0.0285 -0.1140 -0.0481 -0.9056 -0.1289 -0.0765 -0.2774 -0.1465 -0.1390 -0.1680 -0.0605 -0.3924 -1.7850 -0.1137 -0.0726 -0.0981 -0.9873 -0.0774 -0.5118 -0.2287 -0.6842 -0.1291 -0.1446 -0.0459 -0.0510 -0.0291 -0.2066 -0.1008 -0.1558 -0.1328 -0.1516 -0.4385 -0.1022 -0.8557 -0.6999 -0.2904 -0.0442 -0.9372 -0.0842 -0.0962 -0.9755 -1.6658 -0.2680 -0.0491 -0.1782 -0.0999 -0.0611 -0.0922 -0.0697 -0.6138 -0.2417 -0.0442 -1.1093 -0.0365 -0.1091 -0.2402 -0.5930 -0.1566 -0.4287 -1.2186 -0.3413 -1.1435 -0.1467 -0.0566 -0.0817 -1.3054 -0.0700 -0.4376 -0.2233 -0.7931 -0.1343 -0.2534 -0.0581 -0.0498 -0.0337 -0.2516 -0.0959 -0.1475 -0.1578 -0.1490 -0.3602 -0.0866 -1.6677 -0.7142 -0.3911 -0.0353 -0.8142 -0.1031 -0.0782 -1.3634 -1.0084 -0.2281 -0.0535 -0.1594 -0.0923 -0.0613 -0.0776 -0.0644 -0.7203 -0.1582 -0.0446 -1.2590 -0.0482 -0.1018 -0.2018 -0.5078 -0.1332 -0.0738 -0.9730 -0.2842 -0.1152 -0.1358 -0.2404 -1.9796 -0.0653 -0.0268 -0.1116 -0.0504 -0.1153 -0.1715 -0.3677 -0.1449 -1.7818
S-139	<s> public static String fix_spaces(String text) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } <mask> } </s> java
T-139	<s> public static String fix_spaces(String text) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } <mask> } </s> java
H-139	-0.26422178745269775	public static String fix_spaces(String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length () ) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text. substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text. substring(i, i + 1); } else { new_text += text. substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } <mask> } </s> java.lang.System.out . println () ; return new_text ; }
D-139	-0.26422178745269775	public static String fix_spaces(String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while (i < text.length () ) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += "-" + text. substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += "_"; } new_text += text. substring(i, i + 1); } else { new_text += text. substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } <mask> } </s> java.lang.System.out . println () ; return new_text ; }
P-139	-0.8995 -0.0529 -1.5468 -0.0483 -0.0987 -0.0228 -0.5596 -0.0893 -0.0605 -2.0915 -0.0825 -2.0209 -0.0734 -0.0919 -0.0681 -0.0872 -1.8341 -0.0897 -0.1405 -0.0905 -0.6744 -0.0824 -0.0602 -0.0847 -0.5605 -0.0737 -0.0660 -0.0781 -0.5491 -0.0790 -0.1185 -0.5948 -0.0863 -0.1095 -0.0993 -0.1028 -3.0155 -0.3250 -0.0763 -0.1216 -0.1279 -0.2047 -0.1074 -0.7425 -0.3164 -0.1883 -0.6146 -0.0915 -0.0481 -0.0119 -0.0557 -0.0716 -0.6280 -0.0945 -0.1294 -0.0984 -0.1276 -0.3701 -0.0932 -0.0586 -0.0904 -0.3232 -0.1319 -0.0979 -0.0837 -0.1112 -0.0398 -0.0509 -0.0555 -0.1046 -0.7355 -0.3483 -0.2073 -0.5606 -0.1564 -0.2185 -0.6992 -0.0754 -0.1005 -0.1195 -0.1359 -0.1097 -0.0554 -0.0562 -0.2222 -0.0784 -0.1222 -0.1198 -0.4173 -0.0765 -0.0776 -0.0651 -0.2871 -0.0678 -0.0767 -0.0762 -0.2246 -0.0564 -0.0470 -1.3697 -0.0729 -0.0686 -0.1089 -0.0808 -0.0602 -0.0562 -0.4405 -0.0811 -0.0812 -0.1128 -0.0863 -0.0832 -0.0360 -0.1014 -0.5921 -0.2472 -0.1621 -0.3941 -0.1067 -0.1673 -0.6152 -0.0820 -0.0673 -0.1081 -0.0713 -0.1165 -0.0886 -0.0769 -0.0332 -0.1035 -0.5967 -0.3628 -0.1428 -0.3728 -0.0993 -0.1297 -0.5731 -0.0851 -0.0548 -0.1453 -0.1054 -0.1147 -0.5643 -0.0647 -0.1139 -0.0984 -0.0929 -0.5236 -0.1373 -0.1058 -0.0881 -0.6077 -0.1587 -0.1950 -0.1393 -0.1905 -0.1274 -1.7666 -0.0780 -0.1722 -0.1691 -0.3351 -0.0492 -0.1833 -1.1330 -0.1344 -0.0748 -0.5196 -0.0634 -0.8666 -0.5345 -0.4681 -0.0808 -0.1047 -0.0710 -0.1594 -0.1369 -0.1995
S-125	<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { <mask> } return true; } </s> java
T-125	<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { <mask> } return true; } </s> java
H-125	-0.34210413694381714	<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { <mask> } return true; }
D-125	-0.34210413694381714	<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { <mask> } return true; }
P-125	-2.3130 -0.2483 -0.2182 -0.1423 -0.0678 -0.1266 -0.0695 -0.0793 -0.0561 -0.5066 -0.4881 -2.2559 -0.0423 -1.3363 -0.0803 -1.7689 -0.3191 -0.0407 -0.2681 -0.8395 -0.1292 -0.1648 -0.0965 -0.0556 -0.1081 -0.0515 -1.5053 -0.2392 -0.1241 -0.4244 -0.2386 -0.1018 -0.0985 -1.1597 -0.1042 -0.0958 -0.1759 -0.0885 -0.0883 -0.7819 -0.1097 -1.0860 -0.0949 -0.2758 -0.1097 -0.0659 -0.1194 -0.4147 -0.5357 -0.1492 -0.4555 -0.6589 -0.3584 -0.6588 -0.0999 -0.1653 -0.3699 -0.2678 -0.1132 -0.1042 -1.0365 -0.1151 -0.0636 -0.0932 -0.1023 -0.0881 -0.5442 -0.1088 -1.0775 -0.0984 -0.2335 -0.1088 -0.0725 -0.1143 -0.2472 -0.4826 -0.1119 -0.4031 -0.3730 -0.3175 -0.2857 -0.1140 -0.0758 -0.1177 -0.2852 -0.4453 -0.1435 -0.3820 -0.3273 -0.2242 -0.3614 -0.7909 -0.1005 -0.2129 -0.4149 -0.2906 -0.1075 -0.1005 -0.9553 -0.1102 -0.0701 -0.0811 -0.1016 -0.0921 -0.6296 -0.1015 -0.8263 -0.1037 -0.1388 -0.6234 -0.5208 -0.1037 -0.0615 -0.1387 -0.3174 -0.3565 -0.1483 -0.3951 -0.3867 -0.2252 -0.1798 -0.5940 -0.1114 -0.1071 -0.5993 -0.1494 -0.3639 -0.3398 -0.2824 -0.1101 -0.1137 -0.8933 -0.1148 -0.0742 -0.0845 -0.1046 -0.0816 -0.6078 -0.6596 -0.1002 -0.9361 -0.1080 -0.5365 -0.0953 -0.1767 -0.2371 -0.0847 -0.0772 -0.5892 -0.1036 -2.6696
S-92	<s> public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); } </s> java
T-92	<s> public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); } </s> java
H-92	-0.28393054008483887	public static String encode(String message ) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray () ) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }
D-92	-0.28393054008483887	public static String encode(String message ) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray () ) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }
P-92	-0.6082 -0.0469 -1.6972 -0.0292 -0.4756 -0.0964 -0.0779 -2.3392 -0.0848 -1.6039 -0.0376 -0.0896 -0.0651 -0.7802 -1.6943 -0.2497 -0.1157 -0.3373 -0.0945 -0.0638 -0.0661 -0.1084 -0.0654 -0.0356 -4.9310 -0.1826 -0.0885 -0.3460 -0.1242 -0.0377 -0.1077 -0.0866 -0.0381 -0.2871 -0.1782 -1.2403 -0.0932 -0.1303 -0.1240 -0.3180 -0.1018 -0.2702 -0.2850 -0.1155 -1.0845 -0.0960 -0.2456 -0.1215 -0.1245 -0.1306 -0.1280 -0.2466 -0.1003 -0.2540 -0.2507 -0.1472 -1.0311 -0.2290 -0.0910 -0.1125 -0.6843 -0.1565 -0.0870 -0.0789 -0.0787 -0.1026 -0.1820 -0.1794 -0.0777 -0.1068 -0.0865 -0.1599 -0.1585 -0.2071 -0.0878 -0.0793 -0.1164 -0.1675 -0.1619 -0.2009 -0.0947 -0.0507 -0.1143 -0.1611 -0.1614 -0.1801 -0.0938 -0.0787 -0.1009 -0.1192 -0.1530 -0.1576 -0.1072 -0.0708 -0.0978 -0.1196 -0.1755 -0.1680 -0.0835 -0.0929 -0.0926 -0.1183 -0.1659 -0.1879 -0.1067 -0.0716 -0.1212 -0.1256 -0.1444 -0.2124 -0.1014 -0.0511 -0.1004 -0.0937 -0.1408 -0.1510 -0.0831 -0.0411 -0.2148 -0.0956 -0.2409 -0.1214 -0.1110 -0.2087 -0.5744 -0.4113 -0.1033 -0.2836 -0.1920 -0.0832 -0.3244 -0.1087 -0.0359 -0.1118 -0.7044 -0.2716 -0.1415 -0.6973 -0.0832 -0.1079 -0.0536 -0.1043 -2.3015 -1.4850 -0.1001 -0.1907
S-147	<s> public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); <mask> return result; } </s> java
T-147	<s> public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); <mask> return result; } </s> java
H-147	-0.3862907886505127	public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); <mask> return result ; }
D-147	-0.3862907886505127	public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); <mask> return result ; }
P-147	-0.9650 -0.0598 -1.4955 -0.3638 -0.0694 -0.1412 -0.0171 -0.4187 -0.1193 -0.1257 -0.4864 -2.2293 -0.1020 -0.3661 -0.0856 -1.4537 -0.4529 -0.0803 -0.2242 -0.0987 -0.1103 -0.1226 -0.0791 -0.1106 -1.0073 -0.2106 -0.0765 -0.8970 -0.0243 -0.0997 -0.2657 -0.7925 -0.1089 -0.0115 -0.0245 -0.0625 -1.8046 -0.1160 -0.0541 -0.0077 -1.2699 -0.1150 -0.0272 -0.0184 -1.4589 -0.1138 -0.0483 -0.0181 -1.4712 -0.1206 -0.0494 -0.0381 -0.0420 -1.7196 -0.1116 -0.0287 -0.0072 -1.5644 -0.1016 -0.0426 -0.0148 -0.0395 -1.8153 -0.1089 -0.0226 -0.0319 -0.0058 -0.0669 -0.1602 -1.4414 -0.3743 -0.0720 -0.1559 -0.1085 -0.0942 -0.0709 -0.9324 -0.2564 -0.0623 -0.9673 -0.2227 -1.9034 -0.0887 -0.1181 -0.1302 -0.1120 -0.1137 -0.8088 -0.6410 -0.0557 -0.0411 -1.1333 -0.0691 -2.7127 -0.1914 -0.1265 -0.1078 -0.1192 -0.8823 -0.6149 -0.0468 -0.0395 -0.1048 -0.4504 -0.0921 -0.1327 -0.7741 -0.2391 -0.1034 -0.0483 -0.0524 -0.0976 -0.1297 -0.1299 -0.0969 -0.1204 -1.5644 -0.7367 -0.0455 -0.0369 -1.2464 -0.0990 -0.0878 -0.0540 -0.0435 -0.0922 -0.0895 -0.1272 -0.0995 -0.1113 -1.5756 -0.6340 -0.0408 -0.0462 -0.5356 -1.3988 -0.1430 -0.1881 -0.3090 -0.1297 -1.7614 -0.1660 -0.5176
S-117	<s> public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return ""; } </s> java
T-117	<s> public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return ""; } </s> java
H-117	-0.3624208867549896	public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word. substring(i, i + 1); } } } return ""; }
D-117	-0.3624208867549896	public static String get_closet_vowel(String word) { if(word.length() < 3) return ""; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word. substring(i, i + 1); } } } return ""; }
P-117	-0.8389 -0.0501 -2.3180 -0.0870 -0.0913 -0.0174 -0.0361 -0.0883 -0.0471 -0.0237 -0.0275 -0.4102 -0.1070 -0.0720 -1.8525 -0.0759 -0.2054 -1.1181 -0.5474 -0.1674 -0.1100 -0.8046 -0.1028 -0.2510 -0.0765 -3.1970 -1.2413 -0.3760 -0.0332 -0.1772 -0.0188 -0.0924 -0.0733 -1.1612 -0.2186 -0.0328 -1.1364 -0.0220 -0.0990 -0.1889 -0.1428 -0.0724 -0.1689 -0.1352 -0.1071 -0.1753 -0.1584 -0.0900 -0.1427 -0.1515 -0.0421 -0.1111 -0.1597 -0.0429 -0.1226 -0.1599 -0.0758 -0.1062 -0.1480 -0.1068 -0.1421 -0.1547 -0.0795 -0.1316 -0.1239 -0.0470 -0.1381 -0.1154 -0.0321 -0.3122 -0.3937 -0.1464 -0.1511 -0.1510 -0.8392 -0.2599 -0.0303 -0.0256 -0.1150 -0.8558 -0.5627 -0.2895 -0.1123 -0.5233 -0.4004 -0.2173 -0.6815 -0.0951 -0.1703 -1.9099 -0.0772 -0.0359 -0.0295 -0.1144 -0.8281 -0.5418 -0.1713 -0.1084 -0.6866 -0.3116 -0.1545 -0.5920 -0.8792 -1.5195 -0.1066 -0.0805 -0.0332 -0.0302 -0.1125 -0.7262 -0.5791 -0.2420 -0.1123 -0.7498 -0.2425 -0.1419 -0.2370 -0.1958 -0.3797 -0.1131 -0.1630 -0.0470 -0.1102 -0.6713 -0.5750 -0.1473 -0.6042 -0.2297 -0.1713 -0.8702 -0.1195 -0.1489 -2.3261 -0.1186 -2.6336 -0.1235 -1.2392
S-20	<s> public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; } </s> java
T-20	<s> public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; } </s> java
H-20	-0.417560338973999	<s> public static double[] find_closest_elements(double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } return result; }
D-20	-0.417560338973999	<s> public static double[] find_closest_elements(double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } return result; }
P-20	-2.0975 -0.2609 -0.2072 -0.1049 -0.0824 -0.1344 -2.0238 -0.0507 -0.0921 -0.1375 -0.0887 -0.0236 -0.8119 -0.7252 -1.5889 -0.0629 -1.9477 -0.0915 -0.1459 -2.3870 -0.0687 -0.0786 -0.0763 -0.0744 -0.2486 -1.9715 -0.1167 -0.0290 -0.0920 -0.1363 -0.0905 -0.0410 -0.0846 -0.0379 -1.4299 -0.2012 -0.1265 -0.9514 -0.0773 -0.0846 -1.7278 -0.0935 -0.0948 -0.0978 -0.0743 -0.0548 -0.7189 -0.0759 -0.0562 -0.2103 -1.1181 -0.2021 -0.1009 -0.1963 -0.1104 -0.0742 -0.0824 -0.0395 -0.0999 -1.9811 -0.0991 -0.0789 -1.0843 -0.2505 -0.6006 -0.3993 -0.2832 -0.0993 -0.0485 -0.3007 -0.1252 -0.4603 -0.1330 -0.1272 -0.7354 -0.0873 -0.0316 -0.1173 -0.0444 -1.8878 -0.0676 -0.1590 -0.0787 -0.0863 -0.0393 -0.9200 -0.1364 -0.1293 -0.2189 -0.6286 -0.2336 -0.1652 -0.1176 -0.0650 -0.4160 -0.1098 -0.2644 -1.5799 -0.1459 -0.7725 -0.1102 -0.0714 -0.6418 -0.4646 -2.1689 -0.0949 -0.4938 -0.0915 -0.0642 -0.4418 -0.1222 -1.8508 -0.1040 -0.0930 -1.0427 -0.0906 -0.6641 -0.1069 -0.0662 -0.6612 -0.1774 -1.9119 -0.1195 -0.4838 -0.0902 -0.0562 -0.5230 -0.2479 -1.9488 -0.1024 -0.1055 -0.5223 -0.0755 -0.6369 -0.0880 -0.6352
S-140	<s> public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (! (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; } </s> java
T-140	<s> public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (! (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; } </s> java
H-140	-0.3090246915817261	public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; }
D-140	-0.3090246915817261	public static String file_name_check(String file_name) { String[] lst = file_name.split("\\."); if (lst.length != 2) return "No"; if (lst[1].equals("txt") || lst[1].equals("exe") || lst[1].equals("dll"))) return "No"; if (lst[0].length() == 0) return "No"; <mask> return "No"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return "No"; return "Yes"; }
P-140	-0.3471 -0.0584 -1.8205 -0.1103 -0.0964 -0.0874 -0.0854 -0.0673 -0.6380 -0.1163 -0.1378 -0.0978 -0.0939 -2.0694 -0.0845 -1.9411 -2.4758 -0.0535 -0.0742 -0.1683 -0.1188 -0.1139 -0.1094 -0.5293 -0.1323 -0.4007 -0.1134 -0.1273 -0.2046 -0.1252 -0.0624 -0.2793 -0.2244 -0.0618 -0.1022 -0.0380 -0.8896 -0.1577 -1.0405 -0.7871 -0.4982 -1.7278 -0.0804 -0.0345 -0.7048 -0.1021 -0.2135 -0.2377 -1.3328 -0.0514 -0.0512 -0.6564 -0.1174 -0.0869 -0.3304 -1.0598 -0.0652 -0.2365 -0.0758 -0.0544 -0.0899 -0.0468 -1.0199 -0.1466 -0.1421 -0.1661 -0.4424 -0.1230 -0.4668 -0.0898 -0.8454 -0.0442 -0.0954 -0.0450 -0.7719 -0.5503 -0.1512 -0.1017 -0.0871 -0.1165 -0.0610 -0.9982 -0.2045 -0.0657 -0.0992 -0.1685 -0.0835 -0.7028 -0.1249 -0.1175 -0.3491 -0.0987 -0.0574 -0.1506 -0.1159 -0.1148 -0.1108 -0.0591 -0.0249 -0.2092 -0.0943 -0.2531 -0.1342 -0.0610 -0.1010 -0.2003 -0.1170 -0.0445 -0.0770 -0.4124 -0.1681 -0.0787 -0.2213 -0.1096 -0.8277 -0.1013 -0.1772 -0.1262 -0.2897 -0.0908 -0.1808 -0.1482 -0.2975 -0.0600 -0.0997 -0.0658 -0.5435 -0.0953 -0.0958 -0.0536 -0.7151 -0.1386 -1.5040
S-113	<s> public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; } </s> java
T-113	<s> public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; } </s> java
H-113	-0.29862087965011597	public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }
D-113	-0.29862087965011597	public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }
P-113	-0.5295 -0.0348 -0.0575 -0.0508 -0.1059 -0.0312 -0.0264 -0.0892 -0.0939 -0.4997 -0.0229 -0.2315 -0.0249 -0.1648 -0.0500 -1.5090 -0.0823 -0.0577 -0.0689 -0.1004 -0.0656 -0.0882 -0.7869 -0.0851 -0.0652 -0.0899 -0.8877 -0.1717 -0.3670 -0.3920 -0.0667 -0.0578 -0.0437 -1.1117 -0.0853 -0.3682 -0.1300 -0.1071 -0.1467 -0.3614 -0.1772 -0.0855 -0.7562 -0.0895 -0.0716 -0.1277 -0.5740 -0.0871 -0.0707 -0.0896 -0.0636 -0.1352 -1.4128 -0.0984 -0.0951 -0.3812 -0.1531 -0.7478 -0.0581 -0.0914 -0.0927 -0.9736 -0.1284 -0.1812 -0.8729 -0.3817 -0.0917 -0.0988 -0.0799 -1.0425 -0.1072 -0.2003 -0.1076 -0.0648 -0.1119 -0.2836 -0.2186 -0.1089 -0.2681 -0.3689 -0.1775 -0.4329 -0.2736 -0.0982 -0.0991 -1.4421 -0.1011 -0.1439 -0.0670 -0.1036 -0.2178 -2.0735 -0.1057 -1.4332 -0.0956 -0.0855 -0.0993 -0.0626 -0.1167 -1.6136 -0.0952 -0.1116 -0.4420 -0.2917 -0.0908 -0.0754 -0.8262 -0.2901 -0.2410 -0.0995 -0.3724 -0.4011 -0.4410 -0.7551 -0.0969 -0.1057 -0.1993 -0.0719 -0.1123 -0.0789 -0.1095 -0.4621 -0.1212 -0.0848 -0.0723 -1.5534 -0.1344 -0.0711 -0.0995 -0.0936 -1.3600 -0.0841 -0.9716
S-102	<s> public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); } </s> java
T-102	<s> public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); } </s> java
H-102	-0.36947157979011536	public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }
D-102	-0.36947157979011536	public static String rounded_avg(int n, int m) { if(m < n) return "-1"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }
P-102	-1.3834 -0.0419 -2.1046 -0.0453 -0.0962 -0.0425 -0.4799 -0.5697 -0.0848 -0.7679 -0.1013 -0.1744 -1.5979 -0.0884 -0.3649 -0.6198 -0.2916 -0.1024 -0.0924 -0.9369 -0.0597 -0.0530 -0.0247 -0.9746 -1.0460 -0.0586 -0.0334 -0.1018 -1.7122 -0.2015 -0.3997 -0.3458 -0.0733 -0.0918 -0.1254 -0.6395 -0.0895 -0.1165 -0.6323 -0.2894 -0.9108 -0.1195 -1.2027 -0.0933 -0.0697 -0.0419 -0.0595 -0.1164 -0.7804 -0.0740 -0.2592 -0.1024 -0.1205 -0.6353 -0.2037 -0.6367 -0.0819 -0.0268 -0.3342 -0.1911 -0.2619 -0.2180 -0.1260 -0.5889 -0.1911 -0.1086 -0.4716 -0.2192 -0.4925 -0.2921 -0.1306 -0.1050 -0.1504 -0.0934 -2.2571 -0.1070 -0.1648 -0.4640 -0.0714 -1.3469 -0.3288 -0.0610 -0.1000 -0.0891 -0.0351 -0.1137 -1.4018 -0.1373 -0.7854 -0.0207 -0.0907 -0.0244 -1.1530 -0.1152 -0.4554 -0.2145 -0.1187 -0.2232 -0.1259 -0.1253 -0.1380 -0.1234 -0.0724 -0.0490 -0.1324 -0.1037 -0.2846 -0.7181 -1.9775 -0.0997 -0.5904 -0.4095 -0.0769 -0.8955 -0.0950 -0.1248 -0.7327 -0.0947 -0.0897 -0.0298 -0.0672 -0.9521 -0.1398 -0.1038 -0.0878 -0.0337 -1.3755 -0.1343 -1.2356
S-21	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } <mask> min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; } </s> java
T-21	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } <mask> min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; } </s> java
H-21	-0.3639649748802185	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } <mask> min = numbers[i]; } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }
D-21	-0.3639649748802185	<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } <mask> min = numbers[i]; } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }
P-21	-2.2727 -0.2342 -0.2314 -0.1031 -0.0850 -0.1416 -1.8647 -0.0525 -0.0271 -0.0812 -0.0648 -0.0988 -0.0308 -0.5967 -0.4335 -1.6030 -0.0517 -2.0497 -0.1455 -0.1132 -0.0963 -0.2242 -0.0947 -0.0709 -0.0942 -0.0427 -0.9414 -0.0666 -0.0466 -0.0838 -0.1639 -0.0925 -0.0233 -0.0858 -0.0464 -1.4331 -0.5418 -0.1190 -0.6137 -0.0882 -0.0854 -1.4141 -0.0905 -0.1033 -0.0787 -0.0923 -0.0781 -0.6523 -0.0826 -0.0731 -1.5320 -0.0953 -0.1274 -0.1247 -0.1976 -0.7612 -0.2885 -0.1900 -0.1306 -0.0794 -0.9635 -0.0970 -0.0701 -0.1983 -0.0591 -0.6790 -0.2121 -1.7032 -0.0880 -0.2980 -0.0813 -0.1150 -0.0703 -0.1963 -0.0514 -0.5003 -0.2088 -1.7382 -0.1070 -0.2487 -2.5492 -0.0752 -0.1160 -0.0629 -0.0764 -0.8264 -0.2921 -0.0963 -0.0952 -1.6754 -0.0921 -0.1174 -0.4630 -0.0872 -0.0916 -1.1500 -0.0920 -0.0772 -0.0601 -0.0944 -0.0805 -0.4065 -0.0780 -0.0675 -1.9847 -0.0954 -0.1253 -0.7367 -0.2378 -0.2276 -0.1446 -0.1511 -0.1370 -1.0118 -0.1903 -0.2796 -0.0750 -0.1074 -1.1072 -0.0878 -0.1097 -0.1754 -0.0576 -0.0534 -1.2131 -0.0960 -0.1112 -0.0776 -0.7399 -0.0982 -0.2118
S-111	<s> public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = ""; for(int i = 0; i < s.length(); i++) { <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; } </s> java
T-111	<s> public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = ""; for(int i = 0; i < s.length(); i++) { <mask> new_s += s.charAt(i); } } String reverse_s = ""; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; } </s> java
H-111	-0.5938178896903992	public static ArrayList<Object> reverse_delete(String s, String c ) { java.lang.String new_s = ""; for(int i = 0; i < s.length(); i++) { <mask> new_s += s. charAt(i); } return new ArrayList<Object> ( new_s.length () ) ; }
D-111	-0.5938178896903992	public static ArrayList<Object> reverse_delete(String s, String c ) { java.lang.String new_s = ""; for(int i = 0; i < s.length(); i++) { <mask> new_s += s. charAt(i); } return new ArrayList<Object> ( new_s.length () ) ; }
P-111	-0.9119 -0.0567 -1.6060 -0.3728 -0.0695 -0.1417 -0.0319 -0.0843 -0.0707 -0.5608 -0.1229 -0.1121 -1.3218 -1.6754 -0.1067 -1.7312 -0.0934 -4.4537 -0.0493 -0.0654 -0.0978 -0.2147 -0.4471 -0.1072 -0.0895 -0.0839 -2.8591 -0.2013 -0.4347 -0.6161 -0.0855 -0.0950 -1.1840 -0.0874 -0.0907 -0.2915 -0.1221 -0.1136 -2.1679 -0.0976 -1.1382 -0.0911 -0.4258 -0.1234 -0.1283 -0.0729 -0.0819 -0.0782 -0.0485 -0.1383 -0.1214 -1.2508 -0.2832 -0.5958 -1.6339 -0.1095 -2.4884 -0.1160 -1.8286 -1.7907 -0.0647 -0.2011 -1.6563 -0.8209 -0.1223 -0.0842 -0.5190 -0.1632 -1.9979 -0.9462 -0.6608 -0.0921 -0.3498
S-155	<s> public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0) { <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java
T-155	<s> public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0) { <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java
H-155	-0.44836530089378357	public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0 ) { <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java.lang.System.out . println () ; return result ; }
D-155	-0.44836530089378357	public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while (number > 0 ) { <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java.lang.System.out . println () ; return result ; }
P-155	-0.9318 -0.0508 -1.8468 -0.0835 -0.0989 -0.0558 -0.0835 -0.0236 -0.0953 -0.0066 -0.0257 -0.5029 -0.6402 -0.0470 -1.7963 -0.0845 -0.1791 -2.3981 -0.0407 -0.0878 -0.0697 -0.0806 -1.2981 -0.4233 -0.1214 -0.0954 -0.2022 -0.0921 -0.0652 -0.0435 -0.0809 -0.1761 -0.2553 -0.0591 -0.0372 -0.0621 -0.2162 -0.0335 -0.1389 -1.3660 -1.4846 -0.0855 -0.0936 -0.0698 -1.0582 -1.1937 -0.0944 -0.0982 -0.0460 -1.2968 -0.1027 -0.0097 -1.1833 -0.1119 -0.0435 -1.2066 -0.1182 -0.0180 -1.3397 -0.1053 -0.0307 -1.0836 -0.1081 -0.0373 -0.0636 -1.4563 -0.1093 -0.3624 -1.6383 -0.1072 -0.0321 -0.0467 -1.4271 -0.1129 -0.1078 -1.6130 -0.1090 -0.0486 -1.4888 -0.0969 -0.0461 -1.4185 -0.1012 -0.0195 -1.3036 -0.0953 -0.0633 -0.0670 -0.5009 -0.2706 -0.1215 -0.1012 -0.0596 -0.8563 -1.7533 -0.1209 -0.1014 -2.5475 -0.0733 -0.1329 -0.2828 -0.1161 -2.0607 -0.4607 -0.0860 -0.5018 -0.1606 -0.1292 -0.0977 -0.0868 -0.0401 -0.0363 -0.3477 -0.4301 -2.3095 -0.0894 -0.0102 -0.4645 -0.0941 -0.1378 -0.0962 -0.1053 -0.2962 -1.2643 -0.1094 -2.7367 -0.0839 -0.2595 -0.2591 -0.2499 -0.0311 -0.1275 -1.6435 -0.0846 -0.0420 -0.2904 -0.0255 -0.7967 -0.2123 -0.8213 -0.8215 -2.4747 -0.1254 -0.0770
S-33	<s> public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ <mask> } else{ result.add(l.get(i)); } } return result; } </s> java
T-33	<s> public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ <mask> } else{ result.add(l.get(i)); } } return result; } </s> java
H-33	-0.3854822516441345	public static List<Integer> sort_third(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if ( i % 3 == 0){ <mask> } else{ result.add(l.get(i)); } return result ; }
D-33	-0.3854822516441345	public static List<Integer> sort_third(List<Integer> l ) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if ( i % 3 == 0){ <mask> } else{ result.add(l.get(i)); } return result ; }
P-33	-1.0921 -0.0524 -0.3506 -0.3618 -0.0567 -0.1393 -0.0523 -0.0806 -0.0231 -0.3834 -0.0688 -0.3084 -0.0484 -0.1667 -0.0567 -1.7995 -0.0954 -0.3428 -0.3199 -0.0527 -0.1617 -0.1186 -0.0926 -0.0698 -1.7908 -0.1883 -0.0491 -1.2036 -0.2248 -0.2086 -0.0514 -0.1635 -0.0687 -0.0485 -0.0267 -0.0942 -0.0539 -1.4631 -0.1726 -0.0439 -1.1473 -0.1031 -0.1272 -0.8548 -0.0853 -0.0916 -1.3839 -0.0918 -0.1172 -0.1391 -0.1019 -0.2553 -1.8574 -0.0932 -0.0553 -0.1026 -1.4685 -0.3128 -0.0383 -0.0325 -0.1407 -0.4356 -0.7647 -0.1586 -0.1043 -0.3372 -0.4083 -0.5243 -1.1029 -0.1189 -1.5335 -0.0987 -0.0461 -1.0745 -0.4179 -0.0460 -0.0323 -1.9022 -0.2028 -0.1276 -0.5914 -0.0923 -0.0944 -1.0525 -0.0966 -0.1008 -0.0672 -0.1071 -0.2174 -1.6591 -0.0907 -0.0519 -0.2399 -1.1074 -0.2068 -0.1342 -1.5750 -0.1734 -0.0787 -0.1250 -0.8075 -0.4690 -0.1683 -0.1180 -0.2421 -0.0967 -1.4860 -0.0952 -0.1310 -0.4907 -0.6018 -0.1411 -0.1025 -0.2795 -0.2960 -0.3190 -0.9761 -0.0947 -0.2378 -0.0793 -1.6895 -0.0932 -0.3556
S-128	<s> public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; } </s> java
T-128	<s> public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; } </s> java
H-128	-0.3769982159137726	public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; } </s> java.lang.System.out . println () ; return ans; }
D-128	-0.3769982159137726	public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; } </s> java.lang.System.out . println () ; return ans; }
P-128	-0.9514 -0.0431 -0.1240 -2.1455 -0.0476 -0.1066 -0.0340 -0.5981 -0.4511 -0.1500 -0.0243 -0.7563 -0.0892 -0.1302 -1.6439 -0.0941 -0.1210 -0.1386 -0.0881 -0.0386 -0.0939 -0.0806 -1.1438 -0.1454 -0.0674 -0.1036 -0.1071 -0.0350 -0.0920 -0.1011 -0.9973 -0.1956 -0.3847 -0.2277 -0.1087 -0.1029 -1.1120 -0.0952 -0.0729 -0.1002 -0.5866 -0.0942 -0.8756 -0.0944 -0.1990 -0.2933 -0.2625 -0.1013 -0.1052 -0.9149 -0.0991 -0.0559 -0.0914 -0.2877 -0.0748 -0.8715 -0.1043 -0.1555 -0.5363 -0.2733 -0.5233 -0.5121 -0.1434 -0.4478 -0.1666 -0.1102 -1.7456 -0.1177 -0.2466 -0.0793 -0.1094 -0.2030 -0.1098 -0.1082 -0.1510 -2.6107 -0.0354 -0.1075 -0.0625 -0.0882 -0.7260 -0.3074 -1.5650 -0.1421 -0.4327 -0.3089 -0.1008 -0.1057 -1.0378 -0.1031 -0.0726 -0.2226 -0.3964 -0.0887 -0.7469 -0.1092 -0.1640 -0.8170 -0.3686 -0.0964 -0.4504 -0.1086 -1.8907 -0.6677 -0.0734 -1.0158 -0.2110 -0.2136 -0.0885 -2.6349 -0.0636 -0.0669 -0.5834 -0.1524 -0.1775 -0.1117 -0.0444 -0.6672 -0.0683 -0.1033 -0.0395 -0.4859 -0.0790 -2.6907 -0.0809 -0.2096 -0.1895 -0.3378 -0.0420 -0.1381 -0.6835 -0.1011 -0.0435 -0.5123 -0.0326 -0.3964 -0.2944 -0.6632 -0.5134 -1.5127 -0.1025 -0.1825
S-1	<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); <mask> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; } </s> java
T-1	<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); <mask> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; } </s> java
H-1	-0.3404598832130432	public static List<String> separate_paren_groups(String paren_string ) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String. valueOf (c ) ; <mask> current_depth -= 1; current_string += String. valueOf (c ) ; if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; }
D-1	-0.3404598832130432	public static List<String> separate_paren_groups(String paren_string ) { List<String> result = new ArrayList<String>(); String current_string = ""; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String. valueOf (c ) ; <mask> current_depth -= 1; current_string += String. valueOf (c ) ; if (current_depth == 0){ result.add(current_string); current_string = ""; } } } return result; }
P-1	-0.5097 -0.0547 -0.3459 -0.3375 -0.0758 -0.1523 -0.1413 -0.0935 -0.0620 -0.0103 -0.0884 -0.0340 -0.8577 -0.1500 -0.0560 -0.0876 -0.0400 -1.5872 -0.0928 -0.2299 -0.3439 -0.0678 -0.1680 -0.0678 -0.0926 -0.0630 -1.5102 -0.2409 -0.0672 -1.5942 -1.4671 -0.0535 -0.1005 -0.0394 -0.0860 -2.2318 -0.1025 -0.0713 -0.1056 -0.1011 -0.0814 -1.2409 -0.1345 -0.1211 -0.4021 -0.0990 -0.0597 -0.0357 -0.0918 -0.0346 -0.1263 -0.0794 -0.0342 -2.2236 -0.0926 -0.1323 -0.1220 -0.3240 -0.1304 -0.0566 -0.0345 -1.3976 -0.1208 -0.1062 -0.1468 -0.0723 -1.2872 -0.0679 -0.0999 -0.0561 -0.1435 -0.3037 -0.1151 -1.0437 -1.5647 -1.4400 -0.4213 -1.3381 -0.2392 -0.1452 -0.1081 -0.0647 -0.1072 -0.1291 -0.0300 -0.5479 -0.0786 -0.0925 -0.0548 -0.0633 -0.4042 -0.1199 -0.1724 -0.3537 -0.1464 -0.5212 -0.7252 -0.0810 -0.1244 -0.7002 -0.1162 -0.1098 -0.0869 -0.2748 -0.0879 -0.1232 -0.2876 -0.7187 -0.3241 -0.0894 -0.0487 -1.4147 -0.0528 -0.0961 -0.0402 -0.0884 -1.6843 -0.1122 -0.0764 -0.1616 -0.0888 -0.0679 -1.0920 -0.0888 -1.2540
S-37	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; } </s> java
T-37	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; } </s> java
H-37	-0.3657131493091583	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }
D-37	-0.3657131493091583	<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }
P-37	-1.7897 -0.2284 -0.2588 -0.1170 -0.0624 -0.1214 -2.3509 -0.0434 -0.0893 -0.0268 -0.4428 -0.5931 -1.8827 -0.0748 -1.4187 -0.0840 -0.1383 -2.4309 -0.0772 -0.1020 -0.0767 -0.0741 -0.4912 -0.1336 -0.0983 -0.0719 -1.7004 -0.1576 -0.0934 -0.1301 -0.1229 -0.1266 -0.2356 -0.0903 -0.0957 -1.0357 -0.0874 -0.1084 -0.1099 -0.0935 -0.0736 -0.6627 -0.0971 -0.0655 -0.5578 -0.0856 -0.2069 -0.0282 -0.0832 -0.1359 -0.4314 -0.0946 -0.0947 -0.1486 -0.1358 -0.0622 -0.5043 -0.4281 -1.8512 -0.0931 -1.1267 -0.0926 -0.0425 -0.8856 -0.2271 -0.0216 -1.3178 -0.1688 -0.1285 -0.2696 -0.0954 -0.0971 -1.0751 -0.1009 -0.0814 -0.0776 -0.1030 -0.0695 -0.3851 -0.0952 -0.0685 -2.0556 -0.1000 -0.1166 -0.1398 -0.8522 -0.1984 -0.0484 -0.1192 -0.4085 -0.1200 -0.8070 -0.2103 -0.2663 -0.1350 -0.1281 -0.0276 -0.1642 -0.1214 -0.3672 -0.1085 -0.1056 -0.0795 -1.7428 -0.0815 -0.0750 -1.0116 -0.1168 -0.5465 -0.1768 -0.2518 -0.1145 -0.1046 -0.4443 -0.2125 -1.7538 -0.0999 -0.2053 -0.1496 -0.0906 -0.9365 -0.0982 -0.2548
S-6	<s> public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); <mask> } result.add(max_depth); } return result; } </s> java
T-6	<s> public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); <mask> } result.add(max_depth); } return result; } </s> java
H-6	-0.3207772970199585	public static List<Integer> parse_nested_parens(String paren_string) { String [] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); <mask> } result.add(max_depth); } return result ; }
D-6	-0.3207772970199585	public static List<Integer> parse_nested_parens(String paren_string) { String [] paren_groups = paren_string.split(" "); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); <mask> } result.add(max_depth); } return result ; }
P-6	-0.8032 -0.0467 -0.3013 -0.3280 -0.0601 -0.1544 -0.0312 -0.0976 -0.0264 -0.0903 -0.0527 -0.0126 -0.6554 -0.1275 -0.0566 -0.0928 -0.0560 -2.0541 -0.0848 -1.9016 -2.5147 -0.0350 -0.0924 -0.0702 -0.0805 -0.0405 -0.0922 -0.0575 -0.1174 -0.4304 -0.0794 -0.0779 -0.1574 -0.2510 -0.0571 -0.1375 -0.0782 -0.1025 -0.0499 -1.5200 -0.2404 -0.0589 -1.6243 -0.1563 -0.1175 -0.1404 -0.0560 -0.0907 -0.0588 -0.0771 -0.0470 -0.1103 -0.0612 -1.3156 -0.0959 -0.1251 -0.0950 -0.0891 -0.9945 -0.0872 -0.0515 -0.1041 -0.0895 -0.0994 -1.2428 -0.1631 -0.1199 -0.4007 -0.0942 -0.0606 -0.0394 -0.0982 -0.0483 -0.1078 -0.0695 -0.0215 -0.3133 -0.1486 -0.1318 -0.3096 -0.1679 -0.0805 -0.0440 -1.9988 -0.1556 -0.0790 -1.1831 -0.0552 -0.0959 -0.0712 -0.1166 -1.1176 -0.0988 -0.0825 -0.6456 -0.2075 -1.1250 -0.0568 -0.0985 -0.0843 -1.2666 -0.3084 -0.2099 -0.1108 -0.2542 -0.1662 -0.1233 -0.2729 -0.9024 -0.7951 -0.1051 -0.0702 -1.1429 -0.1083 -0.0818 -0.0901 -1.2414 -0.0936 -0.8353
S-58	<s> public static int[] common(int[] l1, int[] l2) { <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; } </s> java
T-58	<s> public static int[] common(int[] l1, int[] l2) { <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; } </s> java
H-58	-0.3905564844608307	public static int[] common(int[] l1, int[] l2) { <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0 ; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }
D-58	-0.3905564844608307	public static int[] common(int[] l1, int[] l2) { <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0 ; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }
P-58	-1.5902 -0.0427 -0.1237 -1.8961 -0.0414 -0.5593 -0.6234 -1.3775 -0.0656 -0.3641 -0.0903 -1.3305 -0.0603 -0.2252 -0.0923 -0.6970 -0.1008 -0.1646 -0.1990 -0.1285 -0.3304 -0.0940 -0.0991 -1.0805 -0.0785 -0.0706 -0.0883 -0.0388 -0.0677 -0.7769 -0.0694 -0.0667 -0.1877 -0.7595 -0.1657 -0.1156 -0.2588 -0.0967 -0.0972 -1.0226 -0.1057 -0.0608 -0.0594 -0.0183 -0.0617 -0.3013 -0.0788 -0.0703 -0.1274 -1.0006 -0.1369 -0.1274 -0.3450 -0.4724 -0.5983 -0.3030 -0.1340 -0.0504 -0.3123 -0.1896 -0.2167 -0.3056 -0.0970 -0.2281 -0.8461 -0.1635 -0.4749 -0.2966 -0.8145 -0.1271 -0.2563 -0.1380 -2.6766 -0.0717 -0.0952 -0.0697 -0.0841 -0.8202 -0.0340 -0.1008 -0.1064 -1.0444 -1.1555 -0.1000 -0.0653 -0.1104 -2.5209 -0.6649 -0.1152 -0.1304 -0.1014 -0.0842 -0.0675 -0.0587 -1.4113 -0.1033 -0.0684 -0.6627 -0.3283 -0.2581 -0.1249 -0.0982 -0.4029 -0.0345 -0.0707 -1.5633 -0.0897 -1.5629 -0.0911 -0.0554 -0.9265 -0.8078 -1.6028 -0.1064 -0.0827 -0.6295 -0.0937 -0.7780
S-107	<s> public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; } </s> java
T-107	<s> public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; } </s> java
H-107	-0.3533039093017578	public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }
D-107	-0.3533039093017578	public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }
P-107	-1.0585 -0.0425 -0.1241 -0.0910 -0.0929 -0.0672 -0.5207 -0.0230 -0.2330 -0.0429 -0.1705 -0.0461 -1.2804 -0.0888 -0.1359 -0.1128 -0.0911 -1.2620 -0.2089 -0.4334 -0.6745 -0.0986 -0.0848 -0.0573 -0.8564 -0.0926 -0.3162 -0.0811 -0.1140 -0.0943 -0.1111 -0.5873 -0.1470 -0.1752 -0.1452 -1.2292 -0.0697 -0.0978 -0.0498 -0.0865 -0.6679 -0.1121 -1.4181 -0.5096 -0.2678 -1.2047 -0.1724 -0.0885 -0.1070 -1.1651 -0.1170 -0.3340 -0.4228 -0.1109 -0.0954 -1.0010 -0.1068 -0.0948 -0.1370 -0.1127 -0.0644 -0.1134 -0.1224 -1.7196 -0.0941 -0.6742 -0.1055 -0.1621 -0.7877 -0.3324 -0.1285 -0.5952 -0.0988 -0.1260 -0.7368 -0.1825 -0.1691 -0.0797 -0.1127 -0.0723 -0.1085 -0.7278 -0.3848 -0.2325 -0.8942 -0.2073 -0.2952 -0.2329 -0.0930 -0.1539 -0.0731 -0.0920 -0.1052 -0.0687 -0.1056 -1.0548 -0.2716 -0.1839 -0.5477 -0.1423 -0.2832 -0.3890 -0.1991 -0.1427 -0.8716 -0.4230 -0.1611 -1.3858 -0.1794 -1.0782 -0.1055 -0.0834 -0.1434 -1.0457 -0.1124 -2.3878
S-112	<s> public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result; } </s> java
T-112	<s> public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; <mask> } } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result; } </s> java
H-112	-0.2910228967666626	public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; <mask> } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result ; }
D-112	-0.2910228967666626	public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; <mask> } result.add("the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput."); } return result ; }
P-112	-1.0321 -0.0615 -1.7717 -0.2488 -0.0756 -0.1299 -0.0395 -0.0955 -0.0582 -0.5058 -0.0464 -0.2647 -0.0756 -0.1760 -0.0438 -1.5916 -0.0819 -1.6444 -0.2987 -0.0794 -0.1522 -0.0695 -0.0976 -0.0685 -1.1688 -0.2089 -0.1259 -0.4154 -0.0935 -0.0912 -0.0679 -0.0475 -1.2046 -0.0939 -0.1139 -0.0763 -0.0969 -1.2339 -0.1448 -0.3913 -0.5546 -0.0863 -0.0965 -1.1296 -0.0986 -0.0953 -0.3834 -0.1027 -0.1136 -1.8664 -0.0973 -1.4995 -0.0982 -0.1489 -0.0458 -0.1218 -0.0926 -0.1182 -1.1348 -0.2576 -0.5692 -0.7029 -0.2946 -0.2451 -0.2093 -0.3083 -0.0884 -0.0920 -0.7119 -0.7245 -0.1445 -0.2571 -0.1679 -0.0561 -0.0686 -0.0630 -0.0640 -0.0597 -0.0954 -0.0924 -0.1009 -0.1690 -0.1044 -0.0877 -0.1413 -0.0560 -0.1437 -0.1039 -0.0857 -0.2103 -0.1165 -0.0901 -0.1418 -0.0975 -0.0832 -0.1759 -0.1102 -0.0975 -0.0922 -0.0829 -0.0912 -0.0924 -0.1466 -0.1200 -0.0989 -0.0295 -0.5638 -0.1946 -0.0863 -0.0775 -1.2091 -0.0922 -0.3527
S-63	<s> public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } <mask> result += 1; return result; } </s> java
T-63	<s> public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } <mask> result += 1; return result; } </s> java
H-63	-0.25704628229141235	public static int vowels_count(String str ) { int result = 0; char [] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } return result ; }
D-63	-0.25704628229141235	public static int vowels_count(String str ) { int result = 0; char [] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } return result ; }
P-63	-0.3495 -0.0416 -0.1187 -0.0157 -0.0854 -0.0691 -0.4187 -0.0893 -0.0726 -1.9060 -0.0874 -0.1936 -0.0836 -0.0865 -1.0329 -0.1522 -2.3342 -0.0632 -0.0776 -0.0603 -0.0787 -0.0579 -0.1193 -0.0756 -0.0458 -2.1246 -0.1495 -0.1171 -0.3779 -0.0860 -0.0714 -0.0773 -0.0979 -0.0819 -1.0896 -0.0983 -0.1428 -0.1316 -1.3048 -0.1756 -0.0890 -0.0861 -0.0990 -0.1327 -0.1882 -0.1695 -0.0829 -0.1327 -0.0983 -0.1353 -0.1539 -0.1711 -0.1037 -0.0736 -0.1492 -0.1528 -0.1571 -0.1665 -0.1079 -0.0533 -0.1111 -0.1224 -0.1499 -0.1490 -0.0864 -0.0590 -0.0949 -0.1162 -0.1515 -0.1381 -0.1102 -0.0940 -0.1055 -0.1128 -0.1536 -0.1546 -0.0897 -0.0829 -0.1000 -0.1209 -0.1627 -0.1633 -0.1204 -0.0781 -0.1509 -0.1290 -0.1402 -0.1548 -0.1142 -0.0507 -0.1229 -0.1183 -0.1440 -0.1388 -0.1048 -0.0652 -0.7051 -0.2587 -0.0865 -2.4280 -0.2019 -1.3954 -0.0952 -0.7815 -0.0982 -0.5909
S-38	<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); <mask> groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; } </s> java
T-38	<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); <mask> groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; } </s> java
H-38	-0.39674052596092224	<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); <mask> groups.add(s. substring(i, ( ( s.length () ) - 3 ) ) ; int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group. substring(1) + group. substring(0, 1); } if (remain > 0){ result += s. substring(s.length() - remain); } return result; }
D-38	-0.39674052596092224	<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); <mask> groups.add(s. substring(i, ( ( s.length () ) - 3 ) ) ; int remain = s.length() % 3; String result = ""; for (String group : groups){ result += group. substring(1) + group. substring(0, 1); } if (remain > 0){ result += s. substring(s.length() - remain); } return result; }
P-38	-0.4103 -0.2192 -0.2629 -1.6606 -0.0271 -0.0876 -0.0169 -0.0693 -0.0072 -0.5214 -0.1115 -0.1024 -2.2823 -0.0864 -2.1653 -0.4069 -0.0746 -0.1531 -0.0760 -0.0943 -0.0624 -1.4387 -0.2517 -0.0734 -1.4827 -0.3048 -0.1663 -0.1095 -0.1122 -0.1229 -0.1902 -0.4502 -0.1199 -0.1039 -0.6029 -0.7778 -0.5064 -0.8679 -1.0684 -0.4349 -1.7528 -0.0846 -0.1440 -1.6769 -0.2673 -0.6805 -0.5299 -0.7394 -0.4536 -0.1920 -0.2064 -0.0261 -0.0975 -0.1534 -0.1118 -0.0949 -0.8023 -0.0787 -0.9038 -0.4810 -0.0700 -0.0873 -1.9520 -0.1119 -0.1227 -0.1166 -0.1322 -0.0612 -0.0622 -1.6616 -0.1116 -0.0621 -0.1343 -0.0891 -0.6436 -0.2801 -0.0854 -0.1463 -0.0978 -0.6378 -0.4889 -0.6662 -0.0824 -0.1010 -0.1347 -0.0312 -0.0215 -0.0793 -0.2179 -0.0845 -0.0661 -0.0977 -0.1003 -0.3876 -0.1793 -0.1192 -0.1061 -0.0886 -1.3831 -0.1013 -0.0083 -1.9881 -0.0875 -0.0917 -0.0780 -1.3956 -0.0988 -0.3381
S-57	<s> public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java
T-57	<s> public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java
H-57	-0.5014891028404236	public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }
D-57	-0.5014891028404236	public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }
P-57	-0.8322 -0.0432 -0.1045 -0.0346 -0.0112 -0.4914 -0.5476 -2.1573 -0.0714 -1.4140 -0.0884 -0.1746 -2.7168 -0.0567 -0.0891 -0.0807 -0.0822 -0.6006 -0.1982 -0.0995 -0.0728 -2.0418 -0.1163 -2.2449 -0.0312 -0.0949 -0.0854 -0.0885 -0.0609 -0.0760 -0.3747 -0.1049 -0.0962 -0.0834 -1.9176 -0.3126 -0.1438 -0.1439 -2.1738 -0.0903 -0.0352 -0.7231 -0.4399 -1.0796 -0.1919 -0.1346 -0.5902 -0.0917 -0.1122 -1.6669 -0.0909 -0.1025 -0.2625 -0.0956 -0.0626 -1.0222 -0.0950 -0.0983 -3.2760 -1.3201 -0.7481 -0.1039 -0.1267 -1.2169 -0.8793 -0.2495 -0.1137 -0.1378 -0.4717 -0.1362 -0.0960 -0.0657 -0.1749 -0.1082 -0.8610 -0.1816 -1.9195 -0.1257 -0.1257 -0.0415 -0.0982 -1.3451 -0.9302 -0.1639 -0.9071 -0.0976 -1.0285 -0.0683 -1.6691 -0.0959 -1.5038 -0.8027 -0.1050 -0.6010 -0.0308 -0.0975 -0.1082 -1.3716 -0.0687 -0.0404 -0.3712 -0.2860 -0.0343 -0.7552 -0.1508 -0.8036
S-46	<s> public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); <mask> return result.get(result.size() - 1); } </s> java
T-46	<s> public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); <mask> return result.get(result.size() - 1); } </s> java
H-46	-0.38427627086639404	public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ) ; <mask> return result.get(result.size() - 1); } return result.get(n ) ; }
D-46	-0.38427627086639404	public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ) ; <mask> return result.get(result.size() - 1); } return result.get(n ) ; }
P-46	-0.9903 -0.0391 -0.1426 -0.0233 -0.0425 -0.3852 -0.7571 -0.0788 -1.6096 -0.0831 -2.0889 -0.5183 -0.0528 -0.1955 -0.0840 -0.0954 -0.0732 -1.4905 -0.3246 -0.0491 -1.2101 -0.1836 -0.1069 -0.1613 -0.3217 -0.1138 -0.0954 -0.1747 -0.5010 -0.0908 -0.0946 -0.1787 -0.6998 -0.0800 -0.1050 -0.1635 -0.3442 -0.2761 -0.1175 -0.2975 -0.1464 -0.4648 -0.0852 -0.0930 -0.1049 -0.2145 -0.2946 -0.2712 -1.6461 -0.3465 -0.1310 -0.7392 -0.0900 -0.0959 -0.6664 -0.1108 -0.1371 -0.2298 -0.2309 -0.6653 -0.0907 -0.0517 -2.1519 -0.0970 -0.1815 -0.1088 -0.2155 -0.4459 -0.1513 -0.0946 -0.1620 -0.4825 -0.2123 -0.2297 -0.0999 -0.1390 -0.1600 -0.2520 -0.1039 -0.0989 -0.1270 -0.1461 -0.2530 -0.0906 -0.1008 -0.1600 -0.2151 -2.2882 -0.2165 -1.0207 -0.1706 -0.2122 -0.4541 -0.1334 -0.1043 -0.1921 -0.2921 -1.0751 -0.0996 -0.1632 -1.1423 -0.2152 -0.6652 -0.1392 -0.9090 -0.3090 -0.1152 -0.7046 -0.9997 -1.8530 -2.0247 -0.2912 -0.1045 -0.0869
S-80	<s> public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; } </s> java
T-80	<s> public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; } </s> java
H-80	-0.22891512513160706	public static String[] numerical_letter_grade(double[] grades ) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
D-80	-0.22891512513160706	public static String[] numerical_letter_grade(double[] grades ) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = "A+"; else if (gpa > 3.7) letter_grade[i] = "A"; else if (gpa > 3.3) letter_grade[i] = "A-"; else if (gpa > 3.0) letter_grade[i] = "B+"; else if (gpa > 2.7) letter_grade[i] = "B"; else if (gpa > 2.3) letter_grade[i] = "B-"; else if (gpa > 2.0) letter_grade[i] = "C+"; <mask> else if (gpa > 0.7) letter_grade[i] = "D"; else if (gpa > 0.0) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
P-80	-1.1357 -0.0480 -1.3996 -1.6088 -0.0113 -0.0885 -0.1695 -0.1191 -0.0348 -0.8930 -0.5110 -1.6035 -0.0327 -1.8132 -0.0838 -1.9934 -1.8158 -0.0496 -0.1026 -0.0420 -0.1067 -0.0559 -0.8533 -0.3938 -0.1296 -0.0951 -0.0725 -1.8233 -0.0860 -0.1161 -0.6130 -0.0729 -0.0868 -0.9005 -0.0925 -0.0908 -0.0757 -0.0915 -0.0539 -0.7456 -0.0764 -0.0421 -1.4564 -0.0841 -0.2303 -0.0870 -0.0302 -0.0965 -0.0444 -0.6402 -0.4196 -2.0429 -0.1569 -0.1301 -0.1472 -0.0362 -0.4001 -0.0262 -0.4408 -0.0953 -0.1044 -0.0531 -0.7150 -0.1581 -0.1728 -0.0996 -0.0919 -0.0474 -0.1526 -0.8063 -0.1274 -0.0997 -0.1231 -0.0920 -0.0442 -0.2064 -0.4332 -0.2949 -0.0394 -0.0969 -0.0507 -0.5091 -0.1331 -0.1459 -0.1036 -0.0996 -0.0499 -0.3923 -0.0880 -0.0874 -0.1196 -0.0873 -0.0452 -0.1200 -0.6610 -0.0860 -0.0364 -0.0917 -0.0486 -0.3956 -0.1285 -0.1263 -0.1092 -0.0945 -0.0664 -0.0430 -0.6693 -0.0819 -0.0938 -0.1246 -0.0909 -0.0437 -0.1284 -0.0094 -0.1406 -0.0423 -0.1015 -0.0518 -0.4094 -0.1207 -0.1194 -0.1132 -0.0945 -0.0504 -0.1016 -0.6542 -0.0802 -0.0924 -0.1189 -0.0943 -0.0422 -0.0961 -0.2457 -0.3710 -0.0350 -0.1015 -0.0512 -0.3899 -0.1195 -0.1268 -0.1132 -0.0964 -0.0504 -0.5460 -0.0692 -0.0779 -0.1174 -0.0784 -0.0410 -0.1118 -0.2614 -0.1134 -0.0304 -0.0924 -0.0492 -0.3693 -0.1160 -0.1199 -0.1039 -0.0999 -0.0918 -0.0359 -0.7654 -0.0815 -0.0930 -0.1237 -0.0797 -0.0410 -0.1218 -0.0181 -0.2681 -0.0400 -0.1015 -0.0501 -0.4337 -0.1163 -0.1305 -0.1116 -0.1030 -0.0430 -0.0874 -0.5767 -0.4112 -0.0949 -0.0930 -0.1886 -0.0848 -0.1245 -0.0819 -0.0423 -0.1061 -0.0192 -0.1832 -0.0302 -0.1004 -0.0540 -0.4064 -0.1191 -0.1300 -0.1247 -0.1048 -0.0471 -0.5403 -0.0671 -0.0899 -0.1204 -0.0709 -0.0452 -0.1104 -0.0291 -0.2908 -0.0423 -0.1036 -0.0553 -0.3783 -0.1041 -0.1333 -0.1131 -0.0982 -0.0405 -0.0384 -0.5878 -0.1214 -0.0682 -0.1042 -0.0542 -0.3526 -0.1170 -0.1542 -0.1340 -0.1063 -0.0334 -0.6098 -0.1283 -0.0855 -0.0462 -0.1068 -0.0426 -0.7771 -0.0920 -0.3806
S-144	<s> public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); } </s> java
T-144	<s> public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); } </s> java
H-144	-0.35591238737106323	public static Integer[] order_by_points(Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }
D-144	-0.35591238737106323	public static Integer[] order_by_points(Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + "").toCharArray().length; j += 1){ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }
P-144	-1.1545 -0.0479 -1.2386 -1.7040 -0.0364 -0.0782 -0.0469 -0.0906 -0.0287 -0.6274 -0.0512 -1.7696 -0.0380 -1.7227 -0.1029 -1.5754 -0.3551 -0.0457 -0.2183 -0.0323 -0.0987 -0.0518 -0.9922 -0.2107 -0.0393 -1.3731 -1.3258 -0.1684 -0.0358 -0.2312 -0.7017 -0.2342 -0.0374 -0.2324 -0.0281 -0.0749 -0.0575 -0.1020 -0.0429 -1.1913 -0.1816 -0.0375 -0.2660 -0.7143 -0.1838 -0.0402 -0.2140 -0.7335 -0.1211 -0.1284 -0.5990 -0.0863 -0.0836 -0.9915 -0.0805 -0.0934 -0.0743 -0.0896 -0.0729 -0.6305 -0.0724 -0.0555 -0.1722 -0.6767 -0.1032 -0.0623 -0.1018 -1.3906 -0.0882 -0.0817 -0.0937 -0.0671 -0.7105 -0.6658 -1.8863 -0.1221 -0.1233 -0.3090 -0.0918 -0.5877 -0.0920 -0.0672 -0.1126 -0.6707 -0.0461 -0.0597 -0.4081 -0.0810 -0.1217 -0.2813 -0.1183 -0.1012 -0.1030 -0.1082 -0.4537 -0.0679 -0.1258 -0.2647 -0.0938 -0.0801 -0.8538 -0.0804 -0.0769 -0.0888 -0.2243 -0.0723 -0.0714 -0.9716 -0.1005 -0.0352 -0.1814 -0.0732 -0.4714 -0.0616 -0.0605 -0.1135 -0.7562 -0.2049 -0.1543 -0.0855 -0.1855 -1.5197 -0.0424 -0.1221 -0.0571 -0.1027 -0.7816 -0.0391 -0.3818 -0.0503 -1.4316 -0.0330 -0.1287 -0.0655 -0.1076 -0.1956 -0.3112 -0.0414 -1.2769 -0.0429 -0.5061 -0.2425 -0.0474 -0.1670 -0.5938 -0.0367 -0.1185 -0.0735 -0.1103 -0.1464 -0.2558 -0.0408 -1.1553 -0.1927 -0.5139 -0.4951 -0.5247 -0.6239 -0.2933 -0.0970 -1.4930 -0.0924 -0.0689 -0.5158 -0.6261 -1.8250 -1.0948 -0.3630 -0.0681 -0.2368 -0.0660 -0.1046 -0.0606 -0.8817 -0.2096 -0.0559 -1.2093 -0.0777 -0.1248 -0.3749 -0.0716 -0.0892 -1.1407 -0.0879 -0.0979 -0.0623 -0.0940 -0.2072 -1.8199 -0.0821 -0.0528 -1.9838 -0.1073 -0.0834 -0.1033 -0.8412 -0.6129 -0.4269 -0.1701 -0.0591 -0.1060 -0.2172 -0.3391 -0.4410 -0.0985 -0.3555 -0.2208 -0.5682 -0.2540 -0.0747 -0.0878 -0.0784 -0.1147 -0.6540 -0.4919 -0.1823 -0.7953 -1.4499 -0.0440 -0.1174 -1.7996
S-108	<s> public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; } </s> java
T-108	<s> public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; } </s> java
H-108	-0.3692503273487091	public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; }
D-108	-0.3692503273487091	public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; }
P-108	-1.2925 -0.0408 -0.1109 -0.0410 -0.0847 -0.0643 -0.0974 -0.0079 -0.4957 -0.0286 -0.3007 -0.0448 -0.1584 -0.0539 -1.8934 -0.0845 -0.1924 -0.9896 -0.9962 -0.1312 -0.2342 -1.0588 -0.1008 -1.2479 -0.0841 -0.0827 -0.7294 -1.4054 -0.3314 -0.0475 -0.1664 -0.1467 -0.0876 -0.0466 -0.0908 -0.0640 -0.9620 -0.0575 -0.3074 -1.5268 -1.4864 -0.0948 -0.0472 -0.5321 -0.4446 -0.0860 -0.0827 -1.2706 -0.3069 -0.1749 -0.1360 -0.0912 -0.0797 -0.1072 -0.0442 -0.0988 -1.2181 -0.1442 -0.3296 -0.3621 -0.1041 -0.1020 -1.2794 -0.0958 -0.0848 -0.0811 -0.1041 -0.2804 -1.2806 -0.1169 -0.9125 -0.1054 -0.1235 -0.7109 -0.5408 -0.1040 -0.3619 -0.2529 -0.3883 -1.1113 -0.2145 -0.2182 -0.0934 -0.0584 -1.5685 -0.3879 -0.1050 -0.0546 -0.1389 -0.0916 -1.0008 -0.0872 -1.5060 -0.3403 -0.0450 -0.1612 -0.0461 -0.0928 -0.0786 -0.1045 -0.0638 -0.0959 -0.0556 -0.8241 -0.1972 -0.0923 -0.3419 -0.3253 -0.0968 -0.1034 -0.7979 -0.1297 -0.0673 -0.5772 -0.0866 -0.0979 -0.0893 -0.1042 -0.2522 -1.4748 -0.1058 -1.1368 -0.1049 -0.1440 -0.1246 -0.0983 -0.1058 -0.0754 -0.1090 -0.3641 -0.5609 -0.4020 -0.1105 -0.2796 -0.3065 -0.4035 -0.7985 -0.0904 -0.1456 -0.3913 -0.3026 -0.1006 -0.1152 -1.6193 -0.1028 -0.0804 -0.5375 -0.0915 -0.2697 -2.1487 -0.1086 -1.5519 -0.0990 -0.1923 -0.1167 -0.1148 -0.1070 -0.0684 -0.1065 -0.2810 -0.5220 -0.4106 -0.1087 -0.3155 -0.2876 -0.3549 -0.6736 -0.0891 -0.1451 -0.3610 -0.3620 -0.0995 -0.1246 -1.4387 -0.1053 -0.0726 -0.0735 -0.1005 -0.2065 -1.3628 -0.1093 -1.0693 -0.1101 -0.1119 -0.8108 -0.7345 -0.1222 -0.0969 -0.1057 -0.0683 -0.1167 -0.2823 -0.3043 -0.3327 -1.4724 -0.1075 -0.2038 -0.1030 -0.0631 -0.1272 -0.2478 -0.2989 -0.3342 -1.8536 -0.1550 -0.1194 -0.0720 -0.6144 -0.1066 -0.0772 -0.0950 -0.0598 -0.8481 -0.1125 -3.3248
Generate test with beam=5: BLEU = 84.66 86.4/85.1/84.0/83.1 (BP = 1.000 ratio = 1.046 hyp_len = 15671 ref_len = 14987)

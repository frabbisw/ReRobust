S-0	public static int [ ] global ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > global = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) global.add ( l1 [ i ] ) ; } } int [ ] result = new int [ global.size ( ) ] ; int index = 0; for ( Integer c : global ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-0	public static int [ ] global ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > global = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) global.add ( l1 [ i ] ) ; } } int [ ] result = new int [ global.size ( ) ] ; int index = 0; for ( Integer c : global ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-0	-0.18774782121181488	public static int [ ] global ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > global = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) global.add ( l1 [ i ] ) ; } } int [ ] result = new int [ global.size () ] ; int index = 0; for ( Integer c : global ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-0	-0.18774782121181488	public static int [ ] global ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > global = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) global.add ( l1 [ i ] ) ; } } int [ ] result = new int [ global.size () ] ; int index = 0; for ( Integer c : global ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-0	-0.0897 -0.0397 -0.1014 -0.2022 -0.0937 -0.0545 -0.1041 -0.0947 -0.1533 -0.1011 -0.0682 -0.4312 -0.0846 -0.1259 -0.1042 -0.0620 -0.0546 -0.0795 -0.0918 -1.9744 -0.0655 -0.8108 -0.0579 -0.0783 -0.0904 -0.0525 -1.3537 -0.0801 -0.9086 -0.0604 -0.1881 -0.1007 -0.0926 -0.3577 -0.1091 -0.0715 -0.0795 -0.0883 -0.8082 -0.0818 -0.0804 -0.1010 -0.0414 -0.0724 -0.3835 -0.0721 -0.0770 -0.1681 -0.0785 -0.0807 -0.1300 -0.1074 -0.0727 -0.0827 -0.0977 -0.4845 -0.0956 -0.0580 -0.0637 -0.0334 -0.0726 -0.5433 -0.0679 -0.0855 -0.1245 -0.0802 -0.0990 -0.1041 -0.1134 -0.0954 -0.0832 -0.0806 -0.1253 -0.0838 -0.2013 -0.0421 -0.0627 -0.0823 -0.0655 -0.0782 -0.0887 -0.0965 -0.1710 -0.1742 -0.1121 -0.0825 -0.0716 -0.0987 -0.1294 -0.1058 -0.1314 -0.0981 -0.1122 -0.0890 -0.1379 -0.1963 -0.0521 -0.0860 -0.0917 -0.1005 -0.0713 -0.0805 -0.0573 -0.1120 -0.0938 -2.7680 -0.0908 -0.0876 -0.0664 -0.0701 -0.0856 -0.7278 -0.1010 -0.1117 -0.9296 -0.0765 -0.0625 -0.0798 -0.0910 -0.0839 -0.0765 -0.0866 -0.0729 -0.0615 -0.1073 -0.0848 -0.7260 -0.0405 -0.0536 -0.8364 -0.0861 -1.1766 -0.0825 -0.0389 -0.1081 -0.0785 -0.0802 -0.0921 -0.0921 -0.0722 -0.2562 -0.0818 -0.0660
Generate test with beam=5: BLEU = 96.54 98.6/97.3/95.9/94.4 (BP = 1.000 ratio = 1.000 hyp_len = 147 ref_len = 147)

S-0	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-0	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { HashSet < Integer > common = new HashSet < Integer > ( ) ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size ( ) ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-0	-0.18697074055671692	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
D-0	-0.18697074055671692	public static int [ ] common ( int [ ] l1, int [ ] l2 ) { ArrayList < Integer > common = new ArrayList < Integer > ( ) ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1 [ i ] == l2 [ j ] ) common.add ( l1 [ i ] ) ; } } int [ ] result = new int [ common.size () ] ; int index = 0; for ( Integer c : common ) { result [ index ] = c; index += 1; } Arrays.sort ( result ) ; return result ; }
P-0	-0.0881 -0.0419 -0.0991 -0.2080 -0.0733 -0.0438 -0.1076 -0.0904 -0.1559 -0.0931 -0.0617 -0.4521 -0.0808 -0.1239 -0.1029 -0.0577 -0.0561 -0.0786 -0.0924 -2.1722 -0.0674 -0.7676 -0.0573 -0.0559 -0.0915 -0.0570 -1.3789 -0.0811 -0.8497 -0.0610 -0.1762 -0.0970 -0.0881 -0.3267 -0.1107 -0.0676 -0.0755 -0.0873 -0.7802 -0.0789 -0.0803 -0.0877 -0.0418 -0.0726 -0.3941 -0.0684 -0.0776 -0.1657 -0.0783 -0.0799 -0.1031 -0.1075 -0.0718 -0.0766 -0.0972 -0.4747 -0.0886 -0.0577 -0.0590 -0.0354 -0.0742 -0.5482 -0.0625 -0.0870 -0.1206 -0.0798 -0.0968 -0.1201 -0.1154 -0.0892 -0.0840 -0.0800 -0.1135 -0.0834 -0.2238 -0.0367 -0.0643 -0.0807 -0.0633 -0.0762 -0.0881 -0.1914 -0.1476 -0.2235 -0.1109 -0.0879 -0.0704 -0.0988 -0.1174 -0.1049 -0.1332 -0.0976 -0.1138 -0.0843 -0.1290 -0.1971 -0.0488 -0.0580 -0.0888 -0.0748 -0.0699 -0.0804 -0.0818 -0.1178 -0.1200 -2.6267 -0.0904 -0.0884 -0.0615 -0.0649 -0.0854 -0.7121 -0.1003 -0.1115 -0.8694 -0.0728 -0.0624 -0.0571 -0.0885 -0.0865 -0.0552 -0.0885 -0.0708 -0.0613 -0.1073 -0.0749 -0.6991 -0.0381 -0.0509 -0.8188 -0.0838 -1.4145 -0.0822 -0.0425 -0.1081 -0.0595 -0.0804 -0.0923 -0.0920 -0.0600 -0.2425 -0.0811 -0.0665
Generate test with beam=5: BLEU = 96.54 98.6/97.3/95.9/94.4 (BP = 1.000 ratio = 1.000 hyp_len = 147 ref_len = 147)

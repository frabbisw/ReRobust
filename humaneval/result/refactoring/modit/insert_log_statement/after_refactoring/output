S-34	public static List<String> filter_by_substring ( List<String> strings, String substring ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { result.add ( string ) ; } System.out.println ( "log" ) ; return result; }
T-34	public static List<String> filter_by_substring ( List<String> strings, String substring ) { List<String> result = new ArrayList<String> () ; System.out.println ( "log" ) ; for ( String string : strings ) { if ( string.contains ( substring ) ) { result.add ( string ) ; } } return result; }
H-34	-0.3168300986289978	public static List<String> filter_by_substring ( List<String> strings , String substring ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { result.add ( string ) ; } return result ; }
D-34	-0.3168300986289978	public static List<String> filter_by_substring ( List<String> strings , String substring ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { result.add ( string ) ; } return result ; }
P-34	-0.1060 -0.0477 -0.3581 -0.3489 -0.0718 -0.1553 -0.0403 -0.0845 -0.0395 -0.0820 -0.8454 -0.1048 -0.4522 -0.3477 -0.0750 -0.1596 -0.1308 -0.9663 -1.8604 -0.0105 -0.0868 -0.0848 -0.2762 -0.3749 -0.0724 -0.1850 -0.0655 -0.0833 -0.0563 -1.6418 -0.4218 -0.0763 -0.1547 -0.0649 -0.0816 -0.1615 -0.1164 -2.8908 -0.0758 -0.0621 -0.1547 -0.0999 -0.0881 -0.1301 -0.6073 -0.4948 -0.1115 -0.9426 -0.1580 -0.0853 -0.0998 -1.0593 -0.1027 -0.1204 -0.0882 -0.0801
S-94	public static List<Integer> filter_integers ( List<Object> values ) { List<Integer> result = new ArrayList<Integer> () ; System.out.println ( "log" ) ; for ( Object value : values ) { result.add ( ( Integer ) value ) ; } return result; }
T-94	public static List<Integer> filter_integers ( List<Object> values ) { List<Integer> result = new ArrayList<Integer> () ; for ( Object value : values ) { if ( value instanceof Integer ) { result.add ( ( Integer ) value ) ; } } System.out.println ( "log" ) ; return result; }
H-94	-0.2640722095966339	public static List<Integer> filter_integers ( List<Object> values ) { List<Integer> result = new ArrayList<Integer> () ; for ( Object value : values ) { result.add ( ( Integer ) value ) ; } return result ; }
D-94	-0.2640722095966339	public static List<Integer> filter_integers ( List<Object> values ) { List<Integer> result = new ArrayList<Integer> () ; for ( Object value : values ) { result.add ( ( Integer ) value ) ; } return result ; }
P-94	-0.1030 -0.0475 -0.4092 -0.3779 -0.0838 -0.1366 -0.0387 -0.0858 -0.0145 -0.0365 -0.1093 -0.4031 -0.3319 -0.0738 -0.1570 -0.0657 -0.0944 -0.0818 -0.3803 -0.4007 -0.0631 -0.1470 -0.0641 -0.0804 -0.0575 -1.7761 -0.4258 -0.0645 -0.1276 -0.0700 -0.0880 -0.3073 -0.1171 -2.0616 -0.0585 -0.0821 -0.0617 -0.0916 -0.0877 -0.1800 -0.5834 -0.6188 -0.1093 -0.1982 -2.5995 -0.0750 -0.1565 -0.0890 -0.0817 -0.0994 -0.1226 -0.0803 -0.1201 -0.0780 -0.0691
S-29	public static int hex_key ( String num ) { int result = 0; System.out.println ( "log" ) ; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } return result; }
T-29	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' ) result += 1; } System.out.println ( "log" ) ; return result; }
H-29	-0.2306826263666153	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
D-29	-0.2306826263666153	public static int hex_key ( String num ) { int result = 0; for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1 ; } return result ; }
P-29	-0.1008 -0.0469 -0.1120 -0.0422 -0.0911 -0.0266 -0.1163 -1.7324 -0.0962 -0.0892 -0.0878 -0.0811 -0.0837 -0.0820 -1.3777 -0.2649 -0.1101 -0.1187 -0.0889 -0.0703 -0.0723 -0.1703 -0.0774 -0.0503 -0.0663 -0.0969 -0.1000 -0.1352 -0.1158 -0.2224 -0.1403 -0.4232 -0.2545 -0.1652 -0.1550 -0.4299 -0.4487 -0.1475 -0.1367 -0.2346 -0.4460 -0.1385 -0.1365 -0.1393 -0.0763 -0.2204 -0.1031 -2.0708 -0.1741 -0.1480 -0.1369 -0.0994 -0.1763 -0.0835 -0.0771
S-20	public static boolean is_prime ( int n ) { System.out.println ( "log" ) ; for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-20	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } System.out.println ( "log" ) ; return true; }
H-20	-0.24453967809677124	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-20	-0.24453967809677124	public static boolean is_prime ( int n ) { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-20	-0.1005 -0.0543 -0.0839 -0.0668 -0.0951 -0.0260 -0.1200 -0.0978 -0.0785 -0.0887 -0.0863 -0.7608 -0.1159 -0.0741 -0.0847 -0.0973 -0.9152 -0.1149 -0.1570 -0.1118 -0.1094 -0.0977 -1.8854 -0.0995 -0.0558 -0.1101 -0.0844 -1.4453 -0.0255 -0.1593 -0.3565 -1.4295 -0.0889 -0.1048 -0.3143 -0.0810 -0.0907 -0.1156 -0.1180 -0.2091 -0.2964 -0.1451 -0.2593 -0.1087 -0.0873 -0.1281 -0.0797 -0.7719 -0.1533 -0.1386 -0.0709 -0.4904 -0.0808 -0.0841
S-43	public static int fruit_distribution ( String s, int n ) { int result = n; System.out.println ( "log" ) ; for ( String str : s.split ( " " ) ) { int cnt = Integer.parseInt ( str ) ; result -= cnt; } return result; }
T-43	public static int fruit_distribution ( String s, int n ) { int result = n; System.out.println ( "log" ) ; for ( String str : s.split ( " " ) ) { try { int cnt = Integer.parseInt ( str ) ; result -= cnt; } catch ( Exception e ) { continue; } } return result; }
H-43	-0.22699834406375885	public static int fruit_distribution ( String s , int n ) { int result = n ; for ( String str : s.split ( " " ) ) { int cnt = Integer. parseInt ( str ) ; result -= cnt ; } return result ; }
D-43	-0.22699834406375885	public static int fruit_distribution ( String s , int n ) { int result = n ; for ( String str : s.split ( " " ) ) { int cnt = Integer. parseInt ( str ) ; result -= cnt ; } return result ; }
P-43	-0.0960 -0.0530 -0.1071 -0.0249 -0.0904 -0.0277 -0.1116 -1.5042 -0.1351 -0.7914 -0.0969 -0.0861 -0.0850 -0.0877 -0.0864 -0.1301 -0.0975 -0.2228 -0.2869 -0.3263 -0.1096 -1.5712 -0.0899 -0.0674 -0.0881 -0.1927 -0.6360 -0.1236 -0.0937 -0.0814 -0.0883 -0.0946 -0.0942 -0.2152 -0.0493 -0.0982 -0.9064 -0.1030 -1.3187 -0.1092 -0.0778 -0.1044 -0.0980 -0.1307 -0.0721 -0.0456 -0.2067 -0.1012 -0.1067 -0.0999 -0.2571 -0.0794 -0.0737
S-0	public static List<Integer> incr_list ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; System.out.println ( "log" ) ; for ( Integer n : l ) { result.add ( n - 1 ) ; } return result; }
T-0	public static List<Integer> incr_list ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; System.out.println ( "log" ) ; for ( Integer n : l ) { result.add ( n + 1 ) ; } return result; }
H-0	-0.2454201579093933	public static List<Integer> incr_list ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for (Integer n : l ) { result.add ( n ) ; } return result ; }
D-0	-0.2454201579093933	public static List<Integer> incr_list ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for (Integer n : l ) { result.add ( n ) ; } return result ; }
P-0	-0.1108 -0.0486 -0.3234 -0.3152 -0.0630 -0.1610 -0.0071 -0.0918 -0.0313 -0.1135 -0.3099 -0.3335 -0.0593 -0.1711 -0.0720 -0.0838 -0.0853 -0.2592 -0.3350 -0.0632 -0.1655 -0.0637 -0.0817 -0.0485 -1.5608 -0.3274 -0.0664 -0.1366 -0.0707 -0.0868 -0.3366 -0.1153 -2.5527 -0.0932 -0.0801 -0.0566 -0.0995 -0.0889 -0.1072 -0.7386 -0.5624 -0.1085 -0.0940 -0.9011 -0.1018 -0.1025 -0.3857 -0.0811 -0.1198 -0.0783 -0.0665
S-21	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; System.out.println ( "log" ) ; for ( int k = 0; k < n; k += 1 ) { if ( n % k == 0 ) return false; } return true; }
T-21	public static boolean is_prime ( int n ) { if ( n < 2 ) return false; for ( int k = 2; k < n - 1; k += 1 ) { if ( n % k == 0 ) return false; } System.out.println ( "log" ) ; return true; }
H-21	-0.195054292678833	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
D-21	-0.195054292678833	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 0; k < n ; k += 1 ) { if ( n % k == 0 ) return false ; } return true ; }
P-21	-0.1035 -0.0598 -0.0817 -0.0633 -0.0925 -0.0277 -0.1197 -0.0907 -0.0787 -0.0872 -0.0875 -0.1553 -0.1107 -0.0931 -0.1647 -0.1306 -0.0894 -0.0824 -0.0726 -0.7996 -0.7900 -0.1093 -0.0836 -0.1655 -0.0880 -1.3146 -0.1525 -0.1849 -0.1689 -0.4682 -0.1236 -0.1346 -0.2053 -0.0843 -0.0955 -0.1160 -0.1108 -0.1855 -0.2270 -0.1405 -0.2458 -0.1143 -0.0862 -0.0896 -0.0644 -1.0274 -0.1197 -0.1115 -0.0742 -0.4955 -0.0823 -0.0928
S-71	public static boolean is_prime ( int k ) { System.out.println ( "log" ) ; if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } return true; }
T-71	public static boolean is_prime ( int k ) { if ( k < 2 ) return false; for ( int i = 2; i < k; i += 1 ) { if ( k % i == 0 ) return false; } System.out.println ( "log" ) ; return true; }
H-71	-0.20988690853118896	public static boolean is_prime ( int k ) { if ( k < 2 ) return false ; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
D-71	-0.20988690853118896	public static boolean is_prime ( int k ) { if ( k < 2 ) return false ; for ( int i = 2; i < k ; i += 1 ) { if ( k % i == 0 ) return false ; } return true ; }
P-71	-0.1038 -0.0593 -0.0828 -0.0643 -0.0953 -0.0270 -0.1208 -0.0910 -0.1396 -0.0859 -0.0887 -0.5160 -0.1085 -0.1316 -0.1336 -0.0827 -0.0903 -0.0854 -0.0746 -1.0778 -0.2334 -0.1139 -0.0780 -0.0727 -0.0925 -1.7201 -0.0975 -0.2079 -0.1638 -0.5723 -0.0754 -0.0966 -0.3698 -0.0830 -0.0983 -0.1218 -0.1118 -0.6299 -0.1956 -0.1062 -0.2456 -0.1427 -0.0864 -0.0919 -0.0628 -0.8326 -0.1414 -0.1104 -0.0735 -0.4506 -0.0851 -0.0916
S-81	public static List<Integer> get_positive ( List<Integer> numbers ) { System.out.println ( "log" ) ; List<Integer> result = new ArrayList<Integer> () ; for ( Integer number : numbers ) { result.add ( number ) ; } return result; }
T-81	public static List<Integer> get_positive ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; System.out.println ( "log" ) ; for ( Integer number : numbers ) { if ( number > 0 ) { result.add ( number ) ; } } return result; }
H-81	-0.23186159133911133	public static List<Integer> get_positive ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; for (Integer number : numbers ) { result.add ( number ) ; } return result ; }
D-81	-0.23186159133911133	public static List<Integer> get_positive ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; for (Integer number : numbers ) { result.add ( number ) ; } return result ; }
P-81	-0.1057 -0.0488 -0.3746 -0.3184 -0.0652 -0.1442 -0.0891 -0.0901 -0.0127 -0.1106 -0.4665 -0.3446 -0.0618 -0.1650 -0.0625 -0.0883 -0.0835 -0.3974 -0.3576 -0.0677 -0.1547 -0.0684 -0.0802 -0.0632 -1.7646 -0.3365 -0.0732 -0.1417 -0.0662 -0.0821 -0.1767 -0.1172 -2.4156 -0.0629 -0.0637 -0.0654 -0.0953 -0.0886 -0.1758 -0.7680 -0.6178 -0.1130 -0.0644 -0.0808 -0.0863 -0.0993 -0.1001 -0.0865 -0.1050 -0.0810 -0.0761
S-89	public static int choose_num ( int x, int y ) { System.out.println ( "log" ) ; if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
T-89	public static int choose_num ( int x, int y ) { System.out.println ( "log" ) ; if ( x > y ) return -1; if ( ( y % 2 ) == 0 ) return y; if ( x == y ) return -1; return y - 1; }
H-89	-0.21816910803318024	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1; }
D-89	-0.21816910803318024	public static int choose_num ( int x, int y ) { if ( x < y ) return -1; if ( ( y % 2 ) == 0 ) return y ; if ( x == y ) return -1; return y - 1; }
P-89	-0.0984 -0.0460 -0.0950 -0.0461 -0.0975 -0.0532 -0.1081 -0.0908 -0.1681 -1.3129 -0.0796 -0.1043 -0.0851 -0.0868 -0.2020 -0.1140 -0.3382 -0.1633 -0.1042 -0.0846 -0.0863 -0.7906 -0.1309 -0.1185 -0.2504 -0.2725 -0.1303 -0.0614 -0.0885 -0.0776 -0.1220 -0.0859 -0.0846 -0.2363 -0.5692 -0.1735 -0.1125 -0.2378 -0.1069 -0.1786 -0.0805 -0.0749 -0.8602 -0.1937 -0.1586 -0.1448 -1.5712 -0.1275 -0.0862
S-80	public static Integer[] sum_product ( List<Integer> numbers ) { Integer[] result = new Integer[2]; System.out.println ( "log" ) ; for ( Integer n : numbers ) { result[0] += n; result[1] *= n; } return result; }
T-80	public static Integer[] sum_product ( List<Integer> numbers ) { Integer[] result = new Integer[] { 0, 1 }; for ( Integer n : numbers ) { result[0] += n; result[1] *= n; } System.out.println ( "log" ) ; return result; }
H-80	-0.2706564664840698	public static java.lang.Integer [] sum_product ( java.lang.Integer [] numbers ) { java.lang.Integer [] result = new java.lang.Integer [ numbers.length ] ; for ( java.lang.Integer n : numbers ) { result[0] += n ; result[1] *= n ; } return result ; }
D-80	-0.2706564664840698	public static java.lang.Integer [] sum_product ( java.lang.Integer [] numbers ) { java.lang.Integer [] result = new java.lang.Integer [ numbers.length ] ; for ( java.lang.Integer n : numbers ) { result[0] += n ; result[1] *= n ; } return result ; }
P-80	-0.1008 -0.0571 -4.1019 -0.0638 -0.2830 -0.0993 -0.3108 -0.2354 -0.0481 -0.1025 -0.0221 -0.1125 -0.5996 -0.0911 -0.8723 -0.1077 -0.0770 -0.3218 -0.0506 -0.1141 -0.0946 -0.4174 -0.0784 -0.0345 -0.1038 -0.0500 -0.1440 -0.0430 -0.0716 -0.0617 -0.5121 -0.0893 -0.0647 -0.1168 -0.0125 -0.7872 -0.2135 -0.0268 -0.1075 -0.1751 -0.0933 -0.2955 -0.1203 -2.2016 -0.0874 -0.0446 -0.1057 -0.0408 -0.1197 -0.0281 -0.0516 -0.0952 -0.0808 -0.1015 -0.8514 -0.0547 -0.0879 -0.9609 -0.0846 -0.3582 -0.0083 -0.0682 -1.1863 -0.0583 -0.1181 -0.0630 -0.1951 -0.0699 -0.0681
S-13	public static String change_base ( int x, int base ) { String result = ""; System.out.println ( "log" ) ; while ( x > 0 ) { result = result + x % base; x = x - x / base; } return result; }
T-13	public static String change_base ( int x, int base ) { String result = ""; System.out.println ( "log" ) ; while ( x > 0 ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; }
H-13	-0.30451229214668274	public static String change_base ( int x, int base ) { String result = ""; System.out.println ( "log" ) ; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
D-13	-0.30451229214668274	public static String change_base ( int x, int base ) { String result = ""; System.out.println ( "log" ) ; while ( x > 0 ) { result = result + x % base ; x = x - x / base ; } return result ; }
P-13	-0.0945 -0.0553 -2.2396 -0.0386 -0.0941 -0.0257 -0.1090 -0.1250 -0.1482 -1.5153 -0.1032 -0.0653 -0.0832 -0.0887 -1.8654 -0.0787 -0.0932 -1.6780 -2.0012 -0.0867 -0.0547 -0.0991 -0.9293 -0.1226 -0.1013 -0.0318 -0.0739 -0.0927 -0.0880 -0.2622 -0.1169 -0.1887 -0.2299 -0.1889 -0.0925 -0.0785 -0.1701 -0.1162 -0.0984 -0.0709 -0.3307 -0.1441 -0.0832 -0.8072 -0.1754 -0.1710 -0.1945 -0.1244 -0.2793 -0.1334 -0.0627 -0.5349 -0.2207 -0.1277 -0.1042 -0.2085 -0.0820 -0.0827
S-33	public static boolean below_zero ( List<Integer> operations ) { int balance = 0; for ( Integer op : operations ) { balance += op; if ( balance > 0 ) { return false; } } System.out.println ( "log" ) ; return true; }
T-33	public static boolean below_zero ( List<Integer> operations ) { System.out.println ( "log" ) ; int balance = 0; for ( Integer op : operations ) { balance += op; if ( balance < 0 ) { return true; } } return false; }
H-33	-0.24740825593471527	public static boolean below_zero ( List<Integer> operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( balance > 0 ) { return false ; } } return true ; }
D-33	-0.24740825593471527	public static boolean below_zero ( List<Integer> operations ) { int balance = 0 ; for ( Integer op : operations ) { balance += op ; if ( balance > 0 ) { return false ; } } return true ; }
P-33	-0.0988 -0.0509 -0.0920 -0.0549 -0.0987 -0.0685 -0.1258 -0.5356 -0.2888 -0.0597 -0.2095 -0.0574 -0.0922 -0.0889 -0.1073 -0.0939 -0.0943 -1.7162 -0.0931 -0.1349 -0.1126 -2.0303 -0.0399 -0.0668 -0.0651 -0.0941 -0.0847 -0.3457 -0.0435 -0.0460 -0.6081 -0.1176 -0.1114 -0.0874 -0.1835 -0.1227 -0.0882 -0.0898 -0.0960 -0.1286 -0.9951 -0.0934 -0.1144 -1.1902 -0.1479 -0.4534 -0.0853 -0.0726
S-48	public static int modp ( int n, int p ) { int result = 1; for ( int i = 0; i < n; i += 1 ) { result = 2 * result; } System.out.println ( "log" ) ; return result % p; }
T-48	public static int modp ( int n, int p ) { System.out.println ( "log" ) ; int result = 1; for ( int i = 0; i < n; i += 1 ) { result = ( 2 * result ) % p; } return result; }
H-48	-0.22278356552124023	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
D-48	-0.22278356552124023	public static int modp ( int n , int p ) { int result = 1 ; for ( int i = 0; i < n ; i += 1 ) { result = 2 * result ; } return result % p ; }
P-48	-0.0966 -0.0513 -0.1246 -0.0508 -0.0568 -0.1085 -0.1034 -0.0765 -1.4548 -0.1028 -0.0624 -0.0907 -0.0862 -0.1024 -0.0834 -0.1082 -0.8154 -0.3094 -0.1415 -0.1061 -0.0812 -0.0809 -0.0862 -1.1167 -0.0856 -0.1190 -0.1226 -0.7648 -0.0778 -0.1149 -0.2535 -0.0842 -0.0775 -0.1130 -0.1408 -0.1500 -0.0455 -0.0852 -0.4065 -0.0822 -1.3774 -0.1649 -0.0830 -0.0925 -0.3745 -0.0870 -0.0717
S-4	public static int starts_one_ends ( int n ) { System.out.println ( "log" ) ; if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
T-4	public static int starts_one_ends ( int n ) { System.out.println ( "log" ) ; if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 - 1 ) * Math.pow ( 10, n - 2 ) ) ; }
H-4	-0.2317982167005539	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
D-4	-0.2317982167005539	public static int starts_one_ends ( int n ) { if ( n == 1 ) return 1; return ( int ) ( ( 10 + 9 ) * Math.pow ( 10, n - 2 ) ) ; }
P-4	-0.1027 -0.0471 -0.0985 -0.0254 -0.0943 -0.0425 -0.0862 -0.0746 -0.1098 -0.0978 -0.0718 -0.0869 -0.0865 -0.3142 -0.1107 -0.0931 -0.1503 -0.3510 -0.0872 -0.0851 -1.6810 -0.1711 -0.1116 -0.0892 -0.0773 -0.1040 -0.1630 -0.1234 -0.0963 -0.0369 -0.0773 -0.0516 -1.9640 -0.0969 -0.0514 -0.1089 -1.8744 -0.1579 -0.4756 -0.2461 -0.0898 -0.1043 -0.0959 -0.0891 -0.0782
S-87	public static int max_element ( List<Integer> l ) { int m = 0; System.out.println ( "log" ) ; for ( Integer e : l ) { if ( e > m ) { m = e; } } return m; }
T-87	public static int max_element ( List<Integer> l ) { int m = l.get ( 0 ) ; for ( Integer e : l ) { if ( e > m ) { m = e; } } System.out.println ( "log" ) ; return m; }
H-87	-0.22683833539485931	public static int max_element ( List<Integer> l ) { int m = 0; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { int e = l . get ( i ) ; if ( e > m ) { m = e ; } } return m ; }
D-87	-0.22683833539485931	public static int max_element ( List<Integer> l ) { int m = 0; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { int e = l . get ( i ) ; if ( e > m ) { m = e ; } } return m ; }
P-87	-0.0969 -0.0437 -0.1069 -0.0493 -0.0960 -0.0314 -0.1165 -0.4493 -0.3948 -0.0545 -0.2294 -0.0655 -0.0895 -0.0899 -0.0957 -0.2008 -0.0928 -1.7038 -0.3230 -0.1109 -2.0728 -0.6668 -0.0955 -0.3857 -0.0971 -0.0933 -0.0405 -0.0644 -0.0737 -0.2689 -0.0521 -0.0382 -0.1141 -0.0981 -0.0967 -0.0654 -0.0942 -0.0824 -1.3363 -0.5344 -0.0550 -0.2149 -0.0515 -0.0752 -0.0875 -0.1071 -0.0941 -0.3957 -0.2160 -0.1110 -0.1409 -0.1885 -0.1891 -0.0856 -0.0866 -0.1881 -0.1191 -0.2691 -0.5007 -0.1376 -0.1436 -0.0815 -0.1658 -0.2927 -0.0833 -0.0804
S-42	public static boolean is_prime ( int n ) { System.out.println ( "log" ) ; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-42	public static boolean is_prime ( int n ) { System.out.println ( "log" ) ; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-42	-0.20437683165073395	public static boolean is_prime ( int n ) { for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-42	-0.20437683165073395	public static boolean is_prime ( int n ) { for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-42	-0.1033 -0.0561 -0.0865 -0.0668 -0.0945 -0.0284 -0.1215 -0.1012 -0.0770 -0.0890 -0.0871 -0.6693 -0.1150 -0.0791 -0.0828 -0.0953 -1.4561 -0.1120 -0.2026 -0.1538 -0.5782 -0.0848 -0.1032 -0.2798 -0.0858 -0.0960 -0.1161 -0.1124 -0.2601 -0.2925 -0.1405 -0.2638 -0.1406 -0.0872 -0.1291 -0.1116 -0.8634 -0.1600 -0.1340 -0.0856 -0.6111 -0.0840 -0.0910
S-117	public static int greatest_common_divisor ( int a, int b ) { System.out.println ( "log" ) ; while ( b > 0 ) { a = b; b = a % b; } return a; }
T-117	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { int tmp = a; a = b; b = tmp % b; } System.out.println ( "log" ) ; return a; }
H-117	-0.2621555030345917	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
D-117	-0.2621555030345917	public static int greatest_common_divisor ( int a, int b ) { while ( b > 0 ) { a = b ; b = a % b ; } return a ; }
P-117	-0.1053 -0.0526 -0.1246 -0.0108 -0.1014 -0.0094 -0.0794 -0.0282 -0.0170 -0.1064 -0.0902 -0.1165 -1.3734 -0.0883 -0.0850 -0.0841 -0.0891 -1.7869 -0.1102 -0.1791 -0.2001 -0.1348 -0.0961 -0.0772 -0.5400 -0.1586 -0.2719 -1.2015 -0.1231 -0.1527 -0.3015 -0.0806 -0.1039 -0.6701 -0.3652 -0.1894 -0.2032 -0.7966 -0.0892 -0.0925
S-3	public static boolean is_simple_power ( int x, int n ) { int power = 1; while ( power < x ) { power *= n; } System.out.println ( "log" ) ; return power == x; }
T-3	public static boolean is_simple_power ( int x, int n ) { System.out.println ( "log" ) ; if ( n == 1 ) return x == 1; int power = 1; while ( power < x ) { power *= n; } return power == x; }
H-3	-0.24894782900810242	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
D-3	-0.24894782900810242	public static boolean is_simple_power ( int x , int n ) { int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
P-3	-0.1039 -0.0528 -0.1024 -0.0632 -0.0926 -0.0388 -0.0863 -0.0360 -0.1077 -0.0974 -0.1656 -1.6882 -0.0842 -0.0815 -0.0849 -0.0851 -0.1157 -0.0938 -0.0984 -1.0686 -0.1978 -0.1779 -0.1086 -0.1551 -0.2437 -0.1914 -0.0984 -0.0827 -0.0976 -0.0179 -0.0797 -0.9024 -0.1128 -1.8766 -0.1789 -0.1224 -0.3522 -0.4575 -0.0827 -0.0745
S-104	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; System.out.println ( "log" ) ; return "db" + result + "db"; }
T-104	public static String decimal_to_binary ( int decimal ) { System.out.println ( "log" ) ; String result = Integer.toBinaryString ( decimal ) ; return "db" + result + "db"; }
H-104	-0.2950896620750427	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
D-104	-0.2950896620750427	public static String decimal_to_binary ( int decimal ) { String result = Integer.toHexString ( decimal ) ; return "db" + result + "db"; }
P-104	-0.1003 -0.0610 -2.6172 -0.0305 -0.0832 -0.0648 -0.0798 -0.0181 -0.1188 -0.1401 -0.0549 -0.0917 -0.0785 -2.6080 -0.0777 -0.0942 -1.3848 -0.1016 -0.0993 -0.0182 -0.1050 -0.0698 -0.0868 -0.0930 -0.6868 -0.0970 -0.0466 -0.0822 -0.0756 -0.0903 -0.3759 -0.1127 -0.0619 -0.5577 -0.0887 -0.0702
S-62	public static boolean is_equal_to_sum_even ( int n ) { System.out.println ( "log" ) ; return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ; }
T-62	public static boolean is_equal_to_sum_even ( int n ) { System.out.println ( "log" ) ; return ( ( n * 2 == 1 ) ^ ( n < 8 ) ) ; }
H-62	-0.19455496966838837	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
D-62	-0.19455496966838837	public static boolean is_equal_to_sum_even ( int n ) { return ( ( n * 2 ) == 1 ) ^ ( n < 8 ) ; }
P-62	-0.1135 -0.0480 -0.0780 -0.0654 -0.0813 -0.0811 -0.0902 -0.0811 -0.0827 -0.0499 -0.1067 -0.0472 -0.1039 -0.1018 -0.0896 -0.0822 -0.0860 -1.0855 -0.1884 -0.2661 -0.1562 -0.0943 -0.0853 -1.6321 -0.1559 -0.3309 -0.0902 -0.6059 -0.1098 -0.1509 -0.1371 -0.1161 -0.0809 -0.1714 -0.0835 -0.0748
S-15	public static boolean right_angle_triangle ( int a, int b, int c ) { System.out.println ( "log" ) ; return a * a + b * b == c * c; }
T-15	public static boolean right_angle_triangle ( int a, int b, int c ) { System.out.println ( "log" ) ; return a * a + b * b == c * c || b * b + c * c == a * a || c * c + a * a == b * b; }
H-15	-0.23396143317222595	public static boolean right_angle_triangle ( int a, int b, int c ) { return a * a + b * b == c * c ; }
D-15	-0.23396143317222595	public static boolean right_angle_triangle ( int a, int b, int c ) { return a * a + b * b == c * c ; }
P-15	-0.1009 -0.0462 -0.1102 -0.0601 -0.0950 -0.0546 -0.0877 -0.0412 -0.0503 -0.1110 -0.0902 -0.1096 -1.1558 -0.0991 -0.0812 -1.4146 -0.0926 -0.0877 -0.0879 -0.0879 -1.0758 -0.3717 -0.0710 -0.3002 -0.9151 -0.1373 -0.0709 -0.1004 -0.2674 -0.1774 -0.0526 -0.1255 -0.2946 -0.0909 -0.0740
S-103	public static int[] eat ( int number, int need, int remaining ) { System.out.println ( "log" ) ; return new int[] { number + need, remaining - need }; }
T-103	public static int[] eat ( int number, int need, int remaining ) { System.out.println ( "log" ) ; return new int[] { number + need, remaining - need }; }
H-103	-0.37232038378715515	public static int[] eat ( int number, int need, int remaining ) { return new int[] { number + need, remaining - need }; }
D-103	-0.37232038378715515	public static int[] eat ( int number, int need, int remaining ) { return new int[] { number + need, remaining - need }; }
P-103	-0.1059 -0.0496 -0.1206 -1.8794 -0.0375 -0.1089 -0.1011 -0.1102 -1.5463 -0.1143 -0.0335 -1.0463 -0.1098 -0.0472 -0.0786 -0.0914 -1.4973 -0.0610 -0.0733 -1.7556 -0.0953 -0.0733 -0.1813 -0.0538 -0.8206 -0.0445 -0.1814 -0.0345 -0.8556 -0.0915 -0.1423
S-59	public static String concatenate ( String[] strings ) { String result = null; for ( String string : strings ) result += string; System.out.println ( "log" ) ; return result; }
T-59	public static String concatenate ( String[] strings ) { String result = ""; for ( String string : strings ) result += string; System.out.println ( "log" ) ; return result; }
H-59	-0.29898399114608765	public static java.lang.String concatenate ( java.lang.String [] strings ) { java.lang.String result = null ; for ( java.lang.String string : strings ) result += string ; return result ; }
D-59	-0.29898399114608765	public static java.lang.String concatenate ( java.lang.String [] strings ) { java.lang.String result = null ; for ( java.lang.String string : strings ) result += string ; return result ; }
P-59	-0.0928 -0.0578 -4.6589 -0.0639 -0.1379 -0.0961 -0.0546 -0.0941 -0.1194 -0.6278 -0.0880 -0.1964 -0.1218 -0.0304 -0.3324 -0.0818 -0.1061 -0.0793 -0.4883 -0.0877 -0.0300 -0.1102 -0.0584 -0.2146 -0.0780 -1.3156 -0.2753 -0.1244 -0.1142 -0.7641 -0.1022 -0.0494 -0.1152 -0.0322 -0.3677 -0.0392 -0.1253 -0.0950 -0.1569 -0.0714 -0.0743 -0.2441 -1.3145 -0.0872 -0.3342 -0.0743 -0.0690
S-11	public static int sum_to_n ( int n ) { System.out.println ( "log" ) ; return ( n + 1 ) * ( n / 2 ) ; }
T-11	public static int sum_to_n ( int n ) { System.out.println ( "log" ) ; return ( n + 1 ) * n / 2; }
H-11	-0.1607818752527237	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
D-11	-0.1607818752527237	public static int sum_to_n ( int n ) { return ( n + 1 ) * ( n / 2 ) ; }
P-11	-0.1023 -0.0514 -0.1196 -0.0889 -0.1050 -0.0654 -0.0841 -0.0727 -0.1167 -0.0976 -0.0772 -0.0824 -0.0879 -1.6520 -0.2320 -0.1624 -0.1752 -0.2272 -0.0823 -0.0471 -0.1130 -0.0986 -0.1271 -0.0991 -0.0943 -0.0860 -0.0838 -0.0705
S-50	public static int multiply ( int a, int b ) { System.out.println ( "log" ) ; return ( a % 10 ) * ( b % 10 ) ; }
T-50	public static int multiply ( int a, int b ) { System.out.println ( "log" ) ; return Math.abs ( a % 10 ) * Math.abs ( b % 10 ) ; }
H-50	-0.1730598509311676	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
D-50	-0.1730598509311676	public static int multiply ( int a, int b ) { return ( a % 10 ) * ( b % 10 ) ; }
P-50	-0.0942 -0.0479 -0.1054 -0.0496 -0.1088 -0.0868 -0.0956 -0.8763 -0.0785 -0.0746 -0.0802 -0.0899 -1.3364 -0.1694 -0.3389 -0.1650 -0.0615 -0.0852 -0.0363 -0.1014 -0.0831 -0.1142 -0.0703 -0.0829 -0.0835 -0.0884 -0.0682
S-113	public static int fib ( int n ) { System.out.println ( "log" ) ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
T-113	public static int fib ( int n ) { if ( n == 0 || n == 1 ) return n; System.out.println ( "log" ) ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
H-113	-0.1928117275238037	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
D-113	-0.1928117275238037	public static int fib ( int n ) { return fib ( n - 1 ) + fib ( n - 2 ) ; }
P-113	-0.0925 -0.0517 -0.1229 -0.0458 -0.1038 -0.1053 -0.0775 -0.0828 -0.0839 -1.5882 -0.0773 -0.0969 -0.1251 -1.0128 -0.2437 -0.1126 -0.1003 -0.1020 -0.0962 -0.0893 -0.1316 -0.1353 -0.0946 -0.0921 -0.0797 -0.0689
S-105	public static double triangle_area ( double a, double h ) { System.out.println ( "log" ) ; return a * h; }
T-105	public static double triangle_area ( double a, double h ) { System.out.println ( "log" ) ; return a * h / 2.; }
H-105	-0.24799031019210815	public static double triangle_area ( double a, double h ) { return a * h ; }
D-105	-0.24799031019210815	public static double triangle_area ( double a, double h ) { return a * h ; }
P-105	-0.1063 -0.0671 -0.1257 -0.0761 -0.0859 -0.0474 -0.1129 -0.1272 -0.1073 -1.5295 -0.1444 -0.0910 -0.0897 -0.0843 -1.4991 -0.4024 -0.0267 -0.1145 -0.2105 -0.0927 -0.0673
S-2	public static int car_race_collision ( int n ) { System.out.println ( "log" ) ; return n; }
T-2	public static int car_race_collision ( int n ) { System.out.println ( "log" ) ; return n * n; }
H-2	-0.2593793272972107	public static int car_race_collision ( int n ) { return n ; }
D-2	-0.2593793272972107	public static int car_race_collision ( int n ) { return n ; }
P-2	-0.1107 -0.0582 -0.1382 -0.0488 -0.1009 -0.0062 -0.0787 -0.0279 -0.0093 -0.1175 -0.1112 -0.0931 -0.0913 -0.0878 -2.2463 -0.1174 -1.3152 -0.0888 -0.0805
S-96	public static int add ( int x, int y ) { System.out.println ( "log" ) ; return x | y; }
T-96	public static int add ( int x, int y ) { System.out.println ( "log" ) ; return x + y; }
H-96	-0.2636530101299286	public static int add ( int x , int y ) { return x | y ; }
D-96	-0.2636530101299286	public static int add ( int x , int y ) { return x | y ; }
P-96	-0.0935 -0.0503 -0.1067 -0.0897 -0.1096 -0.0888 -0.1476 -1.5300 -0.0760 -0.0996 -0.0918 -0.0836 -1.4544 -0.3101 -0.1376 -0.1481 -0.2244 -0.0931 -0.0746
S-22	public static int strlen ( String string ) { System.out.println ( "log" ) ; return string.length () - 1; }
T-22	public static int strlen ( String string ) { System.out.println ( "log" ) ; return string.length () ; }
H-22	-0.34891393780708313	public static int strlen ( String string ) { return string.length () - 1; }
D-22	-0.34891393780708313	public static int strlen ( String string ) { return string.length () - 1; }
P-22	-0.0953 -0.0575 -0.1285 -0.0471 -0.1094 -0.1153 -1.3021 -0.1273 -0.0901 -0.0871 -1.9894 -0.1299 -0.3461 -0.0919 -0.0750 -0.1494 -1.5409 -0.0892 -0.0579
S-38	public static double truncate_number ( double number ) { System.out.println ( "log" ) ; return number / 1.0; }
T-38	public static double truncate_number ( double number ) { System.out.println ( "log" ) ; return number % 1.0; }
H-38	-0.22633489966392517	public static double truncate_number ( double number ) { return number / 1.0 ; }
D-38	-0.22633489966392517	public static double truncate_number ( double number ) { return number / 1.0 ; }
P-38	-0.1067 -0.0680 -0.1129 -0.0199 -0.0995 -0.0665 -0.1184 -0.1347 -0.1121 -0.0894 -0.0837 -2.1728 -0.1789 -0.1484 -0.1283 -0.2766 -0.0924 -0.0650
S-98	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } System.out.println ( "log" ) ; return count; }
T-98	public static int count_upper ( String s ) { System.out.println ( "log" ) ; int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; } return count; }
H-98	-0.1857183873653412	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
D-98	-0.1857183873653412	public static int count_upper ( String s ) { int count = 0; for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1 ; } return count ; }
P-98	-0.0915 -0.0490 -0.1116 -0.0725 -0.0944 -0.0311 -0.1154 -0.9274 -0.1146 -0.0879 -0.0895 -0.1029 -0.0565 -0.0840 -1.0729 -0.1374 -0.1060 -0.0789 -0.0734 -0.0832 -1.2284 -0.0860 -0.1230 -0.3608 -0.1374 -0.0768 -0.0877 -0.0909 -0.0838 -0.1069 -0.1335 -0.0807 -0.0829 -0.1154 -0.0854 -0.0863 -0.0877 -0.1470 -0.9133 -0.1003 -0.1148 -0.0853 -0.0839 -0.1501 -0.1180 -0.2899 -0.1776 -0.0567 -0.1243 -0.0863 -0.1739 -0.1702 -0.1381 -0.0600 -0.0972 -0.0836 -0.2747 -0.1492 -0.1535 -0.0803 -0.1047 -0.1075 -0.2921 -0.1377 -0.1500 -0.0803 -0.0426 -0.1012 -0.5856 -0.1427 -0.1215 -0.0638 -0.0646 -0.0956 -0.0831 -0.1915 -0.1276 -1.6134 -0.1059 -0.1495 -0.5738 -0.0861 -0.1442 -0.0870 -0.0725
S-65	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } System.out.println ( "log" ) ; return sb.toString () ; }
T-65	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } System.out.println ( "log" ) ; return sb.toString () ; }
H-65	-0.22896777093410492	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( ( int ) ( c + 5 ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb. toString () ; }
D-65	-0.22896777093410492	public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( ( int ) ( c + 5 ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } return sb. toString () ; }
P-65	-0.0881 -0.0519 -1.4962 -0.0215 -0.0946 -0.0242 -0.1111 -0.9937 -0.0940 -0.0904 -0.0856 -1.1814 -0.0360 -0.0813 -0.0620 -0.6479 -0.0549 -0.0745 -0.2032 -0.1058 -0.1994 -0.0733 -0.0786 -0.0752 -0.1644 -0.0568 -0.0457 -0.0694 -0.1002 -0.0676 -0.3122 -0.1041 -0.1310 -0.1022 -0.0590 -0.1000 -0.1257 -0.1576 -0.4502 -0.2030 -0.0876 -1.5179 -0.3562 -0.2123 -0.0934 -0.2460 -0.1094 -0.1147 -0.0404 -0.0940 -0.0827 -0.1310 -0.1756 -0.0722 -0.1310 -0.0418 -0.0620 -0.0476 -0.0911 -0.0934 -0.1157 -0.0578 -0.1601 -1.2416 -0.1133 -0.1479 -0.0849 -0.0829 -0.1322 -1.2050 -0.0639 -0.1881 -1.6598 -0.0638 -0.0852 -0.0791 -0.0751
S-41	public static String remove_vowels ( String string ) { System.out.println ( "log" ) ; StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
T-41	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; System.out.println ( "log" ) ; for ( char c : string.toCharArray () ) { char c_lower = Character.toLowerCase ( c ) ; if ( c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u' ) continue; sb.append ( c ) ; } return sb.toString () ; }
H-41	-0.19702841341495514	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb. toString () ; }
D-41	-0.19702841341495514	public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } return sb. toString () ; }
P-41	-0.1008 -0.0544 -1.5142 -0.0581 -0.0975 -0.0616 -0.0242 -0.0127 -0.1136 -0.9785 -0.0961 -0.0902 -0.0832 -1.4277 -0.0297 -0.0832 -0.0600 -0.6437 -0.0585 -0.0746 -0.1912 -0.1090 -0.1168 -0.0863 -0.0751 -0.0976 -0.2037 -0.0822 -0.0455 -0.0682 -0.0961 -0.0778 -0.1350 -0.1141 -0.2852 -0.1418 -0.0453 -0.1205 -0.0807 -0.2151 -0.1941 -0.1265 -0.0588 -0.0887 -0.0804 -0.3093 -0.1726 -0.1629 -0.0722 -0.0774 -0.0999 -0.4022 -0.1639 -0.1500 -0.0771 -0.0510 -0.1004 -0.4188 -0.1743 -0.1454 -0.0620 -0.0638 -0.0831 -0.0831 -0.0695 -0.0866 -0.1122 -0.1623 -1.3523 -0.1095 -0.2330 -0.0810 -0.0902 -0.1613 -0.1642 -0.0578 -0.2964 -1.4096 -0.0603 -0.0897 -0.0799 -0.0727
S-72	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1. / 3 ) ; System.out.println ( "log" ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a; }
T-72	public static boolean iscude ( int a ) { a = Math.abs ( a ) ; double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal.valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; System.out.println ( "log" ) ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a; }
H-72	-0.1996839940547943	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a ; }
D-72	-0.1996839940547943	public static boolean iscude ( int a ) { double root = Math.pow ( a, 1. / 3 ) ; BigDecimal bd = BigDecimal. valueOf ( root ) ; int round_root = ( int ) bd.setScale ( 0, RoundingMode.HALF_UP ) .doubleValue () ; return ( ( int ) Math.pow ( round_root, 3 ) ) == a ; }
P-72	-0.0907 -0.0511 -0.0975 -0.0180 -0.0199 -0.1125 -0.1321 -0.1042 -0.0905 -0.0873 -0.1717 -0.0593 -0.0894 -1.9699 -0.0940 -0.0350 -0.1044 -0.1493 -0.8754 -0.1440 -0.1002 -0.0892 -0.1027 -0.0878 -0.8548 -0.0272 -0.0747 -0.3951 -0.0943 -1.2511 -0.1188 -0.0806 -0.0943 -0.0895 -0.1300 -0.0547 -0.0969 -0.0430 -0.0847 -0.1797 -0.2687 -0.0728 -0.0700 -0.1105 -0.1589 -0.0279 -0.1075 -0.3907 -0.0412 -0.0292 -0.0866 -0.0381 -0.0188 -0.0782 -0.0384 -0.0928 -0.0947 -0.0877 -0.0394 -0.0745 -0.0879 -0.1365 -0.1546 -0.1633 -0.0949 -0.0801 -2.8540 -0.0983 -0.0543 -0.1130 -0.0683 -0.0959 -0.0436 -0.8192 -0.1108 -0.0854 -0.0957 -0.0815 -0.1719 -0.3510 -0.0759 -0.0663
S-24	public static boolean pairs_sum_to_zero ( List<Integer> l ) { System.out.println ( "log" ) ; for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } return false; }
T-24	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = i + 1; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } System.out.println ( "log" ) ; return false; }
H-24	-0.16185757517814636	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } } return false ; }
D-24	-0.16185757517814636	public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true ; } } return false ; }
P-24	-0.1018 -0.0491 -0.1059 -0.1123 -0.0920 -0.0427 -0.0911 -0.0424 -0.0869 -0.0662 -0.1195 -0.2690 -0.4165 -0.0440 -0.2071 -0.0628 -0.0826 -0.0850 -0.4865 -0.1106 -0.0673 -0.0791 -0.0847 -1.0114 -0.0832 -0.0808 -0.1047 -0.1368 -0.1856 -0.0695 -0.0876 -0.0733 -0.1127 -0.1926 -0.0802 -0.0817 -0.1066 -0.1043 -0.0672 -0.0910 -0.0950 -0.9075 -0.1032 -0.0674 -0.0796 -0.1128 -0.1406 -0.0631 -0.0976 -0.0813 -0.1136 -0.1494 -0.0778 -0.0981 -0.1469 -0.1080 -0.1973 -0.1462 -0.2542 -0.1163 -0.1320 -0.0992 -0.3545 -0.2237 -0.1081 -0.1619 -0.1063 -0.1007 -0.0894 -0.7500 -0.2074 -0.0880 -0.1388 -0.0771 -1.0398 -0.1030 -0.0921 -0.0904 -0.0370 -0.3713 -0.0827 -0.0888
S-44	public static double median ( int[] list ) { System.out.println ( "log" ) ; Arrays.sort ( list ) ; if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } }
T-44	public static double median ( int[] list ) { Arrays.sort ( list ) ; System.out.println ( "log" ) ; if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return ( list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) - 1] ) / 2.; } }
H-44	-0.22259745001792908	public static double median ( int[] list ) { if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ] ; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } }
D-44	-0.22259745001792908	public static double median ( int[] list ) { if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ] ; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } }
P-44	-0.0935 -0.0534 -0.1091 -0.1722 -0.1154 -0.1002 -2.0275 -0.0901 -0.0834 -0.0870 -1.4171 -0.1122 -0.3325 -0.1439 -0.0594 -0.6436 -0.0668 -0.1484 -0.2130 -0.0866 -0.1006 -0.1086 -0.0823 -0.6534 -0.1237 -0.1419 -0.0845 -0.1256 -0.0982 -0.0906 -0.0726 -0.2079 -0.0839 -0.0924 -0.7740 -1.0836 -0.0894 -0.1008 -0.2123 -0.1188 -0.1158 -0.4104 -0.1247 -0.1159 -0.0842 -0.1228 -0.1310 -0.0905 -0.0659 -0.0886 -0.0778 -0.0913 -0.0371 -0.1191 -0.1397 -0.3167 -0.1101 -0.1066 -0.0800 -0.1093 -0.0930 -0.0919 -0.0595 -0.1014 -0.0752 -0.0879 -0.3147 -1.2095 -0.5330 -0.3206 -0.0699 -0.0827 -0.0725
S-68	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes () ) ; byte[] digest = md.digest () ; System.out.println ( "log" ) ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase () ; }
T-68	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null; MessageDigest md = MessageDigest.getInstance ( "MD5" ) ; md.update ( text.getBytes () ) ; byte[] digest = md.digest () ; System.out.println ( "log" ) ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase () ; }
H-68	-0.25025609135627747	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null ; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes () ) ; byte [] digest = md.digest () ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
D-68	-0.25025609135627747	public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { if ( text.equals ( "" ) ) return null ; MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes () ) ; byte [] digest = md.digest () ; return DatatypeConverter.printHexBinary ( digest ) . toLowerCase () ; }
P-68	-0.1020 -0.0484 -1.6510 -0.0643 -0.0814 -0.0613 -0.0779 -0.0372 -0.0579 -0.1186 -1.2917 -0.0578 -0.0874 -0.0995 -0.0511 -0.0466 -0.0789 -0.2029 -0.1145 -0.2314 -0.6225 -2.0703 -0.1149 -0.0548 -0.0945 -0.0881 -0.0819 -0.2441 -0.1598 -0.1202 -0.0539 -0.0839 -0.0686 -0.1042 -2.1891 -0.1196 -0.0797 -0.0331 -0.0502 -0.0305 -0.0475 -0.0880 -0.0800 -0.1638 -0.1306 -0.0796 -0.1156 -0.0667 -0.2070 -1.4560 -0.0797 -0.0999 -0.0851 -0.0358 -2.6879 -0.0865 -0.0987 -0.0494 -0.1458 -0.0859 -0.0856 -0.0923 -1.0630 -0.0033 -0.0235 -0.1041 -0.0536 -0.0215 -0.0167 -0.1036 -0.1117 -0.0842 -0.1720 -0.3401 -0.0665 -0.1042 -0.0853 -0.0737
S-37	public static List<Integer> rolling_max ( List<Integer> numbers ) { System.out.println ( "log" ) ; List<Integer> result = new ArrayList<Integer> () ; Integer running_max = null; for ( Integer n : numbers ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } return result; }
T-37	public static List<Integer> rolling_max ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; Integer running_max = null; for ( Integer n : numbers ) { if ( running_max == null ) { running_max = n; } else { running_max = Math.max ( running_max, n ) ; } result.add ( running_max ) ; } System.out.println ( "log" ) ; return result; }
H-37	-0.22153592109680176	public static List<Integer> rolling_max ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; Integer running_max = null ; for ( Integer n : numbers ) { running_max = Math.max ( running_max , n ) ; result.add ( running_max ) ; } return result ; }
D-37	-0.22153592109680176	public static List<Integer> rolling_max ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; Integer running_max = null ; for ( Integer n : numbers ) { running_max = Math.max ( running_max , n ) ; result.add ( running_max ) ; } return result ; }
P-37	-0.1002 -0.0530 -0.3889 -0.2768 -0.0616 -0.1542 -0.0237 -0.0871 -0.0309 -0.1104 -0.3907 -0.2979 -0.0602 -0.1664 -0.0448 -0.0864 -0.0821 -0.4288 -0.2832 -0.0632 -0.1418 -0.0645 -0.0779 -0.0681 -1.8805 -0.2379 -0.0696 -0.1322 -0.0641 -0.0774 -1.7832 -0.0240 -0.0904 -0.0397 -0.1008 -0.0929 -0.1833 -0.1358 -0.1172 -2.1399 -0.0645 -0.0691 -0.0441 -0.0865 -0.0903 -0.0654 -0.1040 -0.0436 -0.0997 -1.2156 -0.0911 -0.0562 -0.1067 -0.0176 -0.1071 -0.0489 -1.5849 -0.0583 -0.0952 -0.0994 -0.1901 -0.2152 -0.3456 -0.1071 -0.0170 -0.1126 -0.0501 -0.0890 -0.0840 -0.1056 -0.0690 -0.0827 -0.1346 -0.0771 -0.0756
S-54	public static int how_many_times ( String string, String substring ) { System.out.println ( "log" ) ; int times = 0; for ( int i = 0; i < string.length () - substring.length () ; i += 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } } return times; }
T-54	public static int how_many_times ( String string, String substring ) { int times = 0; System.out.println ( "log" ) ; for ( int i = 0; i < string.length () - substring.length () + 1; i += 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } } return times; }
H-54	-0.258818119764328	public static int how_many_times ( String string , String substring ) { int times = 0; for ( int i = 0; i < string.length () ; i += 1 ) { if ( string. substring ( i, i + substring.length () ) . equals ( substring ) ) { times += 1; } } return times ; }
D-54	-0.258818119764328	public static int how_many_times ( String string , String substring ) { int times = 0; for ( int i = 0; i < string.length () ; i += 1 ) { if ( string. substring ( i, i + substring.length () ) . equals ( substring ) ) { times += 1; } } return times ; }
P-54	-0.0972 -0.0433 -0.1105 -0.0145 -0.0918 -0.0514 -0.1042 -0.0178 -0.1115 -1.0580 -0.0882 -1.8894 -0.7705 -0.0301 -0.0855 -0.0892 -0.1968 -0.0307 -0.0813 -0.8184 -0.1319 -0.1077 -0.0690 -0.0736 -0.0834 -0.8176 -0.0995 -0.1130 -0.2822 -0.1007 -0.0778 -0.0763 -0.3637 -0.0807 -0.1136 -0.2340 -0.0755 -0.0892 -0.1362 -0.1080 -0.0958 -0.1282 -0.7075 -1.2630 -0.1356 -1.4066 -0.1922 -0.3633 -0.0597 -0.1193 -0.1466 -0.0660 -0.0842 -0.1083 -0.7484 -0.1029 -0.0144 -0.0946 -0.0934 -0.0837 -0.0821 -0.0920 -2.1465 -0.1522 -0.0882 -0.0807 -0.0423 -0.2551 -0.0780 -0.0724
S-45	public static long sum_squared_nums ( double[] lst ) { int result = 0, i = 0; System.out.println ( "log" ) ; for ( int j = 0; j < lst.length; j++ ) { result += ( Math.floor ( ( int ) lst[i] ) ) * ( Math.ceil ( ( int ) lst[i] ) ) ; } return result; }
T-45	public static long sum_squared_nums ( double[] lst ) { int result = 0; for ( int i = 0; i < lst.length; i++ ) { result += ( Math.ceil ( lst[i] ) ) * ( Math.ceil ( lst[i] ) ) ; } System.out.println ( "log" ) ; return result; }
H-45	-0.30159005522727966	public static long sum_squared_nums ( double [] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) ( lst [ j ] ) ) * ( ( int ) ( lst [ j ] ) ) ; } return result ; }
D-45	-0.30159005522727966	public static long sum_squared_nums ( double [] lst ) { int result = 0, i = 0; for ( int j = 0; j < lst.length ; j++ ) { result += ( ( int ) ( lst [ j ] ) ) * ( ( int ) ( lst [ j ] ) ) ; } return result ; }
P-45	-0.0996 -0.0462 -0.0714 -0.0840 -0.1103 -0.0216 -0.0853 -0.0778 -0.1178 -0.1597 -1.8734 -0.0441 -0.0822 -0.0845 -0.2211 -0.0897 -0.0828 -1.1667 -0.1177 -0.0915 -1.1002 -0.5642 -0.1088 -0.0874 -0.0807 -0.0802 -1.2599 -0.1059 -0.1014 -0.3553 -0.0722 -0.0613 -0.3554 -0.0894 -0.7676 -0.0820 -0.0904 -0.1589 -0.0765 -0.1034 -1.1214 -1.6257 -0.0676 -0.5850 -0.8370 -1.2328 -0.6459 -0.1074 -0.0842 -0.0687 -0.0471 -0.0900 -0.8144 -0.1363 -0.0585 -0.8275 -0.1869 -0.0998 -0.1914 -0.1150 -0.0577 -0.0730 -0.1792 -0.4884 -0.1918 -0.0904 -0.2047 -0.0802 -0.0728
S-5	public static String longest ( List<String> strings ) { System.out.println ( "log" ) ; int maxlen = 0; for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string; } } return null; }
T-5	public static String longest ( List<String> strings ) { int maxlen = 0; for ( String string : strings ) { if ( string.length () > maxlen ) { maxlen = string.length () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string; } } System.out.println ( "log" ) ; return null; }
H-5	-0.17568981647491455	public static String longest ( List<String> strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string ; } } return null ; }
D-5	-0.17568981647491455	public static String longest ( List<String> strings ) { int maxlen = 0 ; for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } for ( String string : strings ) { if ( string.length () == maxlen ) { return string ; } } return null ; }
P-5	-0.0950 -0.0488 -1.4039 -0.0208 -0.1147 -0.3268 -0.3954 -0.0733 -0.1800 -0.1252 -0.0883 -0.0855 -0.4311 -0.0241 -0.0839 -1.3597 -0.0776 -0.1367 -0.1112 -0.8764 -0.0603 -0.0603 -0.1581 -0.0897 -0.0935 -0.0920 -0.1219 -0.2309 -0.1295 -0.3614 -0.0717 -0.1696 -0.0588 -0.1075 -0.0907 -0.0864 -0.0887 -0.0881 -0.0135 -0.1170 -0.1491 -0.1074 -0.2643 -0.0815 -0.0970 -0.1046 -0.1042 -0.1441 -0.1126 -0.6886 -0.0546 -0.0645 -0.1431 -0.0894 -0.0945 -0.0883 -0.1191 -0.1323 -0.1893 -0.1215 -0.0889 -0.3558 -0.0359 -0.0822 -0.0953 -0.0915 -0.0832 -0.2455 -0.0782 -0.0944 -0.0818 -0.1793 -0.2173 -0.0852 -0.0645
S-53	public static int solution ( ArrayList<Integer> lst ) { System.out.println ( "log" ) ; int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result; }
T-53	public static int solution ( ArrayList<Integer> lst ) { int result = 0; System.out.println ( "log" ) ; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } } return result; }
H-53	-0.21336232125759125	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
D-53	-0.21336232125759125	public static int solution ( ArrayList<Integer> lst ) { int result = 0; for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } return result ; }
P-53	-0.0919 -0.0455 -0.1105 -0.0265 -0.1148 -1.5839 -0.4697 -0.0409 -0.2032 -0.0482 -0.0805 -0.0820 -0.1806 -0.0805 -0.0742 -1.6031 -0.1374 -0.1060 -0.0622 -0.0771 -0.0744 -1.2380 -0.0897 -0.0874 -0.4596 -0.1713 -0.1913 -0.0730 -0.0854 -0.0873 -0.9293 -0.0767 -0.0868 -0.1430 -0.1121 -0.2584 -0.2415 -0.1266 -0.0814 -0.0865 -0.0943 -0.4465 -1.2216 -0.1208 -0.1353 -0.1506 -0.2620 -0.1122 -0.0968 -0.0903 -0.3385 -0.0581 -0.0822 -0.2279 -0.1101 -0.0874 -0.0756 -0.1026 -0.0984 -0.1235 -0.1568 -0.2139 -0.1137 -0.1342 -0.0930 -0.1205 -0.1710 -0.1240 -0.0742 -0.1017 -0.1556 -0.0861 -0.0777
S-121	public static int count_distinct_characters ( String string ) { HashSet<Character> distinct = new HashSet<Character> () ; for ( char c : string.toCharArray () ) { if ( !distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } System.out.println ( "log" ) ; return distinct.size () ; }
T-121	public static int count_distinct_characters ( String string ) { System.out.println ( "log" ) ; HashSet<Character> distinct = new HashSet<Character> () ; for ( char c : string.toCharArray () ) { if ( !distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( Character.toLowerCase ( c ) ) ; } return distinct.size () ; }
H-121	-0.1847558170557022	public static int count_distinct_characters ( String string ) { HashSet<Character> distinct = new HashSet<Character> () ; for ( char c : string.toCharArray () ) { if ( !distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
D-121	-0.1847558170557022	public static int count_distinct_characters ( String string ) { HashSet<Character> distinct = new HashSet<Character> () ; for ( char c : string.toCharArray () ) { if ( !distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } return distinct.size () ; }
P-121	-0.1037 -0.0621 -0.1307 -0.0676 -0.0978 -0.0123 -0.0910 -0.0226 -0.1229 -1.2911 -0.0962 -0.0879 -0.0887 -0.9818 -0.2486 -0.0415 -0.1484 -0.1430 -0.0803 -0.0551 -1.1208 -0.4011 -0.0397 -0.1240 -0.0713 -0.0840 -0.1641 -0.1106 -0.0832 -0.0846 -0.0741 -0.0628 -0.2226 -0.0842 -0.0388 -0.0702 -0.0949 -0.0988 -0.1104 -0.1121 -0.1115 -0.0415 -0.1054 -0.7963 -0.1112 -0.4824 -0.1019 -0.2542 -0.1241 -0.1195 -0.0873 -0.1014 -0.0879 -0.3411 -0.1920 -0.2998 -0.1119 -0.1236 -0.1035 -0.0825 -0.1672 -0.8347 -0.1289 -0.1848 -0.0896 -0.0845 -0.0887 -0.0835 -0.0813
S-8	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; for ( int i = 0; i < game.length; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } System.out.println ( "log" ) ; return result; }
T-8	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; System.out.println ( "log" ) ; for ( int i = 0; i < game.length; i += 1 ) { result[i] = Math.abs ( game[i] - guess[i] ) ; } return result; }
H-8	-0.3994782567024231	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; for ( int i = 0; i < game.length ; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } return result ; }
D-8	-0.3994782567024231	public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; for ( int i = 0; i < game.length ; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } return result ; }
P-8	-0.0996 -0.0479 -0.1019 -1.8741 -0.0283 -0.1146 -0.0937 -2.0273 -0.0601 -1.0926 -0.0956 -1.9106 -0.0513 -0.0782 -0.0853 -0.0936 -2.8645 -0.0645 -0.0914 -0.0712 -0.0686 -0.7635 -0.0649 -0.0956 -0.0703 -2.1249 -0.1322 -0.1159 -0.0650 -0.0894 -0.0897 -1.3649 -0.0988 -0.0901 -0.1998 -0.0841 -0.0707 -0.7805 -0.0814 -0.0910 -0.1938 -0.0809 -0.0872 -0.1918 -1.0340 -0.2960 -0.1883 -0.1226 -3.1580 -0.0940 -0.0777 -0.0301 -0.1052 -0.0665 -0.7216 -0.3095 -0.2916 -0.0824 -1.0718 -0.2189 -0.2524 -0.1590 -0.1024 -0.1119 -0.6259 -0.0983 -0.1477 -0.0848 -0.0722
S-102	public static List<String> filter_by_prefix ( List<String> strings, String prefix ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { if ( string.startsWith ( prefix, 1 ) ) { result.add ( string ) ; } } System.out.println ( "log" ) ; return result; }
T-102	public static List<String> filter_by_prefix ( List<String> strings, String prefix ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { if ( string.startsWith ( prefix ) ) { result.add ( string ) ; } } System.out.println ( "log" ) ; return result; }
H-102	-0.25982725620269775	public static List<String> filter_by_prefix ( List<String> strings , String prefix ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { if ( string.startsWith ( prefix , 1 ) ) { result.add ( string ) ; } } return result ; }
D-102	-0.25982725620269775	public static List<String> filter_by_prefix ( List<String> strings , String prefix ) { List<String> result = new ArrayList<String> () ; for ( String string : strings ) { if ( string.startsWith ( prefix , 1 ) ) { result.add ( string ) ; } } return result ; }
P-102	-0.1082 -0.0488 -0.3228 -0.3200 -0.0723 -0.1603 -0.0377 -0.0849 -0.0410 -0.0899 -0.0416 -0.1067 -0.4102 -0.3172 -0.0756 -0.1475 -0.1296 -1.2323 -1.5883 -0.0537 -0.0920 -0.0857 -0.2888 -0.3594 -0.0705 -0.1655 -0.0680 -0.0841 -0.0626 -1.6748 -0.4134 -0.0749 -0.1435 -0.0620 -0.0792 -0.1648 -0.1129 -2.1951 -0.0625 -0.0638 -0.1352 -0.0902 -0.0890 -0.1115 -0.1161 -0.0898 -0.3527 -0.5038 -0.1134 -0.0610 -0.7189 -1.0230 -0.0931 -0.0875 -0.0841 -0.0825 -0.2693 -0.5165 -0.1134 -0.0825 -0.1013 -0.0856 -0.1420 -0.1356 -0.6322 -0.1106 -0.1177 -0.0832 -0.0746
S-26	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } System.out.println ( "log" ) ; return Integer.toBinaryString ( sum ) ; }
T-26	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; } System.out.println ( "log" ) ; return Integer.toBinaryString ( sum ) ; }
H-26	-0.22814247012138367	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , i + 1 ) ) ; } System.out.println ( "log" ) ; return Integer.toBinaryString ( sum ) ; }
D-26	-0.22814247012138367	public static String solve ( int N ) { int sum = 0; for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer. parseInt ( ( N + "" ) . substring ( i , i + 1 ) ) ; } System.out.println ( "log" ) ; return Integer.toBinaryString ( sum ) ; }
P-26	-0.0896 -0.0519 -1.4836 -0.0268 -0.1092 -0.1089 -0.1250 -0.0832 -0.0896 -0.1247 -0.0683 -0.0917 -0.9524 -0.1177 -0.1068 -0.0705 -0.0720 -0.0934 -0.8520 -0.0836 -0.1232 -0.1312 -0.1659 -0.0706 -0.0880 -0.0835 -0.1768 -0.0987 -0.1294 -0.0891 -0.0822 -0.1054 -0.2126 -0.0847 -0.0914 -0.1382 -0.0563 -1.1018 -0.0894 -1.3057 -0.1121 -0.3603 -0.1855 -0.0557 -0.0710 -0.0797 -0.1591 -0.0775 -0.1153 -0.4205 -0.4138 -1.6586 -0.1774 -0.2227 -0.1008 -0.1150 -0.0913 -0.1062 -1.4446 -0.0861 -0.0499 -0.0941 -0.7756 -0.1295 -0.1022 -0.0238 -0.0734 -0.0919 -0.0853 -0.1108 -0.8308 -0.0881 -0.0984 -0.0237 -0.0470 -0.1028 -0.1181 -0.1068 -0.0950 -0.0792 -0.0744
S-10	public static List<String> all_prefixes ( String string ) { System.out.println ( "log" ) ; List<String> result = new ArrayList<String> () ; for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } return result; }
T-10	public static List<String> all_prefixes ( String string ) { System.out.println ( "log" ) ; List<String> result = new ArrayList<String> () ; for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string.substring ( 0, i + 1 ) ) ; } return result; }
H-10	-0.2335478961467743	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
D-10	-0.2335478961467743	public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string. substring ( i , ( i + 1 ) ) ) ; } return result ; }
P-10	-0.1050 -0.0490 -0.3684 -0.3595 -0.0705 -0.1859 -0.0455 -0.0970 -0.0219 -0.1161 -1.5293 -0.0836 -0.0895 -0.0856 -0.3272 -0.3544 -0.0677 -0.1782 -0.0699 -0.0803 -0.0577 -1.7249 -0.3722 -0.0681 -0.1630 -0.0640 -0.0795 -0.1716 -0.1117 -0.0722 -0.0780 -0.0856 -1.7716 -0.1049 -0.1076 -0.2221 -0.1793 -0.0933 -0.0765 -0.0893 -0.0757 -0.1360 -0.1912 -0.0828 -0.0919 -0.1667 -0.3504 -0.4769 -0.1052 -0.0569 -0.1384 -0.6594 -0.1245 -0.3217 -0.2062 -0.9337 -0.6573 -0.2680 -0.1537 -0.0877 -0.1103 -0.1111 -0.1028 -0.0911 -0.0796 -0.0813 -0.1222 -0.0788 -0.0758
S-40	public static String string_xor ( String a, String b ) { String result = ""; System.out.println ( "log" ) ; for ( int i = 0; i < a.length () ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } return result; }
T-40	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < a.length () ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } } System.out.println ( "log" ) ; return result; }
H-40	-0.3057520091533661	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length () ) ; i += 1 ) { if ( a. charAt ( i ) == b. charAt ( i ) ) { result += "0"; } } return result ; }
D-40	-0.3057520091533661	public static String string_xor ( String a, String b ) { String result = ""; for ( int i = 0; i < ( a.length () ) ; i += 1 ) { if ( a. charAt ( i ) == b. charAt ( i ) ) { result += "0"; } } return result ; }
P-40	-0.0976 -0.0635 -1.5510 -0.0661 -0.0845 -0.0182 -0.1127 -1.1488 -0.1180 -1.1124 -0.7916 -0.0782 -0.0815 -0.0845 -1.6105 -0.0730 -0.0790 -1.8587 -0.4237 -0.1096 -0.0733 -0.0737 -0.0843 -1.1054 -0.0929 -0.0989 -1.4939 -0.2228 -0.2067 -0.1041 -0.1019 -0.1393 -0.1062 -0.0776 -0.1312 -0.1752 -0.0790 -0.0876 -0.1226 -0.1105 -0.2027 -0.1400 -1.0630 -0.1125 -0.1028 -0.0861 -0.3363 -0.0941 -0.1246 -1.0594 -0.1096 -0.1141 -0.0841 -0.0841 -0.0763 -0.1052 -0.0917 -0.1590 -0.9596 -0.1723 -0.1262 -0.1010 -0.0911 -0.1720 -0.0825 -0.0791
S-85	public static ArrayList<Integer> make_a_pile ( int n ) { System.out.println ( "log" ) ; ArrayList<Integer> pile = new ArrayList<Integer> () ; for ( int i = 0; i < n; i++ ) { pile.add ( n - 2 * i ) ; } return pile; }
T-85	public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; for ( int i = 0; i < n; i++ ) { pile.add ( n + 2 * i ) ; } System.out.println ( "log" ) ; return pile; }
H-85	-0.2333681285381317	public static java.util.ArrayList <Integer > make_a_pile ( int n ) { java.util.ArrayList <Integer > pile = new java.util.ArrayList <Integer > () ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
D-85	-0.2333681285381317	public static java.util.ArrayList <Integer > make_a_pile ( int n ) { java.util.ArrayList <Integer > pile = new java.util.ArrayList <Integer > () ; for ( int i = 0; i < n ; i++ ) { pile.add ( n - 2 * i ) ; } return pile ; }
P-85	-0.1072 -0.0574 -3.5054 -0.0553 -0.6755 -0.1114 -0.5167 -0.8814 -0.1618 -0.8156 -0.0491 -0.0979 -0.0444 -0.1020 -0.0360 -0.0263 -0.1383 -0.1853 -0.0744 -0.0847 -0.0821 -0.3208 -0.0801 -0.1175 -0.0790 -0.1021 -0.1445 -0.1013 -0.2209 -0.1244 -0.0258 -0.0745 -0.0468 -0.0539 -0.0871 -0.0485 -0.1008 -0.0457 -0.0952 -0.9504 -0.5147 -0.0495 -0.0990 -0.0998 -0.1071 -0.0667 -0.0825 -0.0803 -1.3198 -0.0921 -0.0886 -0.1354 -0.2431 -0.0843 -1.0883 -0.0769 -0.0844 -0.0844 -0.0273 -0.7140 -0.3814 -0.1001 -0.2224 -0.1053 -0.1716 -0.1190 -0.1061 -0.0933 -0.0901 -0.0761 -0.1316 -0.0720 -0.0258 -0.1305 -0.0711 -0.0741
S-106	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; System.out.println ( "log" ) ; return result; }
T-106	public static List<Integer> derivative ( List<Integer> xs ) { System.out.println ( "log" ) ; List<Integer> result = new ArrayList<Integer> () ; for ( int i = 1; i < xs.size () ; i += 1 ) result.add ( i * xs.get ( i ) ) ; return result; }
H-106	-0.20484714210033417	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
D-106	-0.20484714210033417	public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; return result ; }
P-106	-0.1011 -0.0451 -0.3314 -0.2865 -0.0574 -0.1570 -0.0115 -0.1065 -0.3443 -0.2466 -0.0534 -0.1786 -0.0879 -0.0833 -0.0822 -0.2922 -0.3214 -0.0592 -0.1787 -0.0560 -0.0786 -0.0607 -2.0153 -0.2962 -0.0612 -0.1382 -0.0662 -0.0811 -0.1783 -0.1104 -0.0697 -0.0725 -0.0916 -1.4731 -0.0905 -0.1061 -0.4860 -0.1853 -0.3060 -0.0718 -0.0863 -0.0872 -0.1794 -0.1886 -0.0884 -0.1347 -0.3521 -0.3978 -0.1051 -0.1368 -0.2103 -0.3336 -0.1178 -0.1182 -0.0979 -0.1083 -0.0857 -0.4062 -0.0791 -0.1087 -0.0833 -0.0760
S-69	public static boolean is_palindrome ( String str ) { System.out.println ( "log" ) ; for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; } return true; }
T-69	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; } System.out.println ( "log" ) ; return true; }
H-69	-0.2296120971441269	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false ; } return true ; }
D-69	-0.2296120971441269	public static boolean is_palindrome ( String str ) { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false ; } return true ; }
P-69	-0.1013 -0.0542 -0.0840 -0.0655 -0.0892 -0.0202 -0.0055 -0.1166 -1.1697 -0.0636 -0.0873 -0.0845 -0.5726 -0.1131 -0.0750 -0.0733 -0.0899 -1.0831 -0.0963 -0.1042 -0.4493 -0.1261 -0.0960 -0.0857 -0.0866 -0.0757 -0.1138 -0.1928 -0.0790 -0.0933 -0.1093 -0.1150 -0.3569 -0.1632 -0.9382 -0.1156 -0.1412 -0.0853 -0.3103 -0.1738 -0.1237 -0.9098 -0.1143 -0.6513 -0.1075 -0.1489 -0.0648 -0.1749 -0.6998 -1.1139 -0.1441 -0.0871 -0.0901 -0.1275 -0.0611 -0.7594 -0.1350 -0.1096 -0.0887 -0.2968 -0.0884 -0.0832
S-97	public static boolean is_prime ( int n ) { System.out.println ( "log" ) ; if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
T-97	public static boolean is_prime ( int n ) { System.out.println ( "log" ) ; if ( n < 2 ) return false; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } return true; }
H-97	-0.22779615223407745	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
D-97	-0.22779615223407745	public static boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false ; } return true ; }
P-97	-0.1002 -0.0575 -0.0847 -0.0651 -0.0936 -0.0281 -0.1208 -0.0959 -0.0753 -0.0851 -0.0857 -0.5449 -0.1100 -0.0794 -0.1080 -0.0912 -0.0898 -0.0873 -0.0728 -1.1568 -0.2364 -0.1131 -0.0754 -0.0803 -0.0930 -0.9753 -0.1047 -0.1808 -0.1149 -0.1155 -0.0984 -1.6319 -0.1018 -0.8297 -0.1045 -0.0826 -0.0913 -0.4734 -0.9991 -0.0906 -0.1040 -0.2776 -0.0815 -0.0890 -0.1100 -0.1123 -0.2111 -0.1881 -0.1306 -0.1843 -0.1026 -0.0858 -0.0984 -0.0598 -1.2374 -0.1406 -0.1249 -0.0795 -0.4835 -0.0838 -0.0864
S-83	public static double poly ( List<Double> xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size () ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } System.out.println ( "log" ) ; return sum; }
T-83	public static double poly ( List<Double> xs, double x ) { double sum = 0; for ( int i = 0; i < xs.size () ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } System.out.println ( "log" ) ; return sum; }
H-83	-0.32577240467071533	public static double poly ( List<Double> xs, double x ) { double sum = 0 ; for ( int i = 0; i < xs.size () ; i += 1 ) { sum += xs.get ( i ) * ( ( xs.size () ) - 1 ) ; } sum += x * ( xs.size () ) ; return sum ; }
D-83	-0.32577240467071533	public static double poly ( List<Double> xs, double x ) { double sum = 0 ; for ( int i = 0; i < xs.size () ; i += 1 ) { sum += xs.get ( i ) * ( ( xs.size () ) - 1 ) ; } sum += x * ( xs.size () ) ; return sum ; }
P-83	-0.0931 -0.0576 -0.1085 -0.0304 -0.1083 -0.4127 -0.2666 -0.0349 -0.1832 -0.0821 -1.5975 -0.1509 -0.1280 -0.0937 -0.0795 -0.1133 -0.0703 -0.0860 -2.0698 -0.0948 -0.1247 -0.1072 -0.0769 -0.0731 -0.0855 -1.2029 -0.0896 -0.1136 -0.2056 -0.1101 -0.1372 -0.0781 -0.0879 -0.0824 -0.1097 -0.1706 -0.0818 -0.0872 -0.1714 -0.0754 -0.1972 -0.1456 -0.2351 -0.1148 -0.1146 -0.1009 -0.1068 -1.7223 -1.6832 -1.2598 -0.2217 -1.3947 -0.1267 -0.0813 -0.6666 -0.7252 -0.1045 -0.4207 -0.2899 -0.7197 -0.1449 -2.2987 -0.0803 -0.2642 -0.5052 -0.1631 -0.3842 -0.0708 -0.1391 -0.1153 -0.3238 -0.0873 -0.1348 -0.0839 -0.0742
S-14	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char[] chars = str.toCharArray () ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } System.out.println ( "log" ) ; return result; }
T-14	public static String anti_shuffle ( String s ) { System.out.println ( "log" ) ; String result = ""; for ( String str : s.split ( " " ) ) { char[] chars = str.toCharArray () ; Arrays.sort ( chars ) ; result += new String ( chars ) + " "; } return result.substring ( 0, result.length () - 1 ) ; }
H-14	-0.3034808039665222	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char [] chars = str.toCharArray () ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } return result ; }
D-14	-0.3034808039665222	public static String anti_shuffle ( String s ) { String result = ""; for ( String str : s.split ( " " ) ) { char [] chars = str.toCharArray () ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } return result ; }
P-14	-0.0923 -0.0564 -1.4187 -0.0134 -0.0988 -0.0316 -0.1148 -0.9125 -0.1613 -0.0884 -0.0872 -1.6442 -0.0821 -0.0799 -1.6232 -0.1616 -0.1088 -1.2417 -0.0934 -0.0652 -0.0820 -0.1753 -0.3027 -0.1156 -0.0809 -0.0781 -0.0857 -0.0913 -0.0828 -0.0902 -2.6211 -0.0535 -0.0835 -0.0823 -0.1559 -0.0662 -0.0482 -0.0745 -0.0830 -2.9453 -0.0902 -0.0673 -0.1053 -0.0762 -0.0962 -0.1007 -0.2064 -0.1006 -0.0516 -0.3986 -0.1207 -0.1023 -0.1011 -0.0999 -0.1310 -0.4027 -0.0925 -0.1330 -0.0835 -0.0752
S-6	public static boolean is_palindrome ( String text ) { System.out.println ( "log" ) ; for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true; } return false; }
T-6	public static boolean is_palindrome ( String text ) { System.out.println ( "log" ) ; for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( i ) != text.charAt ( text.length () - i - 1 ) ) return false; } return true; }
H-6	-0.2052876055240631	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true ; } return false ; }
D-6	-0.2052876055240631	public static boolean is_palindrome ( String text ) { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true ; } return false ; }
P-6	-0.1013 -0.0562 -0.0806 -0.0647 -0.0902 -0.0215 -0.0049 -0.1155 -1.1598 -0.0608 -0.0887 -0.0855 -0.6265 -0.1146 -0.0707 -0.0813 -0.0885 -1.1666 -0.1039 -0.1014 -0.3057 -0.1284 -0.1021 -0.0894 -0.0887 -0.0793 -0.1204 -0.2030 -0.0796 -0.0925 -0.1189 -0.1125 -0.1813 -0.1693 -1.0585 -0.1173 -0.1440 -0.0853 -0.3890 -0.0923 -0.1181 -1.0214 -0.1161 -0.4112 -0.1063 -0.1617 -0.0659 -0.2474 -0.2172 -0.0882 -0.0896 -0.1652 -0.0675 -0.7183 -0.1170 -0.0951 -0.0403 -0.2599 -0.0859 -0.0841
S-63	public static int x_or_y ( int n, int x, int y ) { System.out.println ( "log" ) ; if ( n == 1 ) return y; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return x; } return y; }
T-63	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; System.out.println ( "log" ) ; for ( int i = 2; i < n; i += 1 ) { if ( n % i == 0 ) return y; } return x; }
H-63	-0.26495569944381714	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
D-63	-0.26495569944381714	public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y ; for ( int i = 2; i < n ; i += 1 ) { if ( n % i == 0 ) return x ; } return y ; }
P-63	-0.1026 -0.0501 -0.1163 -0.1343 -0.0827 -0.0498 -0.0887 -0.0435 -0.1082 -0.0925 -0.0956 -1.4217 -0.0976 -0.1500 -1.4455 -0.0734 -0.0862 -0.0860 -0.0848 -0.4888 -0.1126 -0.1051 -0.1197 -0.2803 -0.0905 -0.0906 -0.2277 -1.2361 -0.2733 -0.1164 -0.0818 -0.0808 -0.0960 -1.5015 -0.1102 -0.1695 -0.1939 -0.8261 -0.0800 -0.1205 -0.2898 -0.0813 -0.0906 -0.1222 -0.1109 -0.3342 -0.2298 -0.1144 -0.1615 -0.1123 -0.0883 -0.1137 -0.2877 -1.6020 -0.1288 -0.1654 -0.1273 -0.7684 -0.0836 -0.0742
S-58	public static int add_even_at_odd ( int[] lst ) { int sum = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } System.out.println ( "log" ) ; return sum; }
T-58	public static int add_even_at_odd ( int[] lst ) { System.out.println ( "log" ) ; int sum = 0; for ( int i = 1; i < lst.length; i += 2 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum; }
H-58	-0.30863359570503235	public static int add_even_at_odd ( int [] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
D-58	-0.30863359570503235	public static int add_even_at_odd ( int [] lst ) { int sum = 0 ; for ( int i = 0; i < lst.length ; i += 1 ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; } return sum ; }
P-58	-0.1060 -0.0492 -0.1441 -0.0847 -0.1130 -0.0308 -0.0927 -0.0478 -0.1085 -0.0075 -0.1142 -0.1218 -2.2034 -0.0592 -0.0849 -0.0845 -0.1118 -0.0700 -0.0834 -1.9022 -0.0907 -0.1279 -0.1063 -0.0711 -0.0953 -0.0855 -1.5431 -0.0991 -0.1026 -0.5919 -0.0685 -0.0471 -1.0684 -0.0881 -0.1051 -0.1989 -0.0824 -0.0886 -0.1294 -0.1153 -0.4621 -1.1803 -0.3842 -0.2293 -0.6186 -0.0755 -0.2015 -0.1132 -0.0827 -0.2019 -0.1009 -0.1188 -0.7159 -0.2254 -2.3890 -0.1253 -0.6233 -0.1002 -0.1843 -0.0901 -0.0787
S-77	public static int smallest_change ( int[] arr ) { int result = 0; System.out.println ( "log" ) ; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] != arr[arr.length - i] ) result += 1; } return result; }
T-77	public static int smallest_change ( int[] arr ) { System.out.println ( "log" ) ; int result = 0; for ( int i = 0; i < arr.length / 2; i += 1 ) { if ( arr[i] != arr[arr.length - i - 1] ) result += 1; } return result; }
H-77	-0.28812965750694275	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] != arr[arr.length - i] ) result += 1 ; } return result ; }
D-77	-0.28812965750694275	public static int smallest_change ( int[] arr ) { int result = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] != arr[arr.length - i] ) result += 1 ; } return result ; }
P-77	-0.0981 -0.0504 -0.1188 -0.0304 -0.0975 -0.0373 -0.1180 -0.1039 -2.2792 -0.0478 -0.0828 -0.0886 -0.0901 -0.0870 -0.0851 -1.4006 -0.3189 -0.1096 -0.0721 -0.0911 -0.0897 -1.4802 -0.1037 -0.0909 -0.5374 -0.0678 -0.0724 -0.3139 -0.0905 -0.1087 -0.2244 -0.0807 -0.0964 -0.1479 -0.1140 -0.1951 -0.9868 -0.8693 -0.2702 -0.2139 -0.1067 -0.6708 -0.4714 -0.1105 -0.0772 -0.2814 -0.1268 -0.3930 -0.0894 -0.1841 -0.0837 -1.9149 -0.1379 -0.1428 -0.1645 -0.1202 -0.2095 -0.0822 -0.0715
S-116	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true; } System.out.println ( "log" ) ; return false; }
T-116	public static boolean any_int ( double x, double y, double z ) { System.out.println ( "log" ) ; if ( ( int ) x == x && ( int ) y == y && ( int ) z == z ) { if ( x + y == z || x + z == y || y + z == x ) return true; } return false; }
H-116	-0.22328029572963715	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
D-116	-0.22328029572963715	public static boolean any_int ( double x, double y, double z ) { if ( ( int ) x == x && ( int ) y == y ) { if ( x + y == z || x + z == y ) return true ; } return false ; }
P-116	-0.0904 -0.0605 -0.0979 -0.0904 -0.0978 -0.0409 -0.1092 -0.1227 -0.1375 -1.0576 -0.1214 -0.0868 -0.8802 -0.1158 -0.0586 -0.0870 -0.0805 -0.1283 -0.1105 -0.4132 -0.3542 -0.0865 -0.2325 -0.0970 -0.1848 -0.9013 -0.1119 -0.1238 -0.0793 -0.0910 -0.0868 -0.0907 -0.0841 -0.1007 -0.1597 -0.1163 -0.3247 -0.3394 -0.1477 -0.1715 -0.0969 -0.4610 -0.2362 -0.2266 -0.2310 -0.1180 -0.1536 -0.0849 -0.1297 -0.0720 -0.6685 -0.3587 -1.2325 -0.0689 -0.5544 -0.0859 -0.0774
S-119	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; System.out.println ( "log" ) ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
T-119	public static int fibfib ( int n ) { if ( n == 0 ) return 0; System.out.println ( "log" ) ; if ( n == 1 ) return 0; if ( n == 2 ) return 1; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
H-119	-0.17379005253314972	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
D-119	-0.17379005253314972	public static int fibfib ( int n ) { if ( n == 0 ) return 0; if ( n == 1 ) return 0; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
P-119	-0.1009 -0.0499 -0.1216 -0.0508 -0.0706 -0.0564 -0.1127 -0.0924 -0.0764 -0.0818 -0.0805 -0.1274 -0.1172 -0.1092 -0.1566 -0.1464 -0.0831 -0.0931 -0.9066 -0.1476 -0.1070 -0.1079 -0.0862 -0.2092 -0.0822 -0.0716 -0.6021 -2.2480 -0.0784 -0.0762 -0.0573 -0.1049 -0.2328 -0.6619 -0.3311 -0.1023 -0.1105 -0.1071 -0.0769 -0.0704 -0.0998 -0.0881 -0.1347 -0.0987 -0.0924 -0.1108 -0.0798 -0.0809 -0.0953 -0.0977 -0.0898 -0.1115 -0.0597 -0.0948 -0.0989 -0.0879 -0.0801
S-60	public static int can_arrange ( int[] arr ) { System.out.println ( "log" ) ; int ind = 1; for ( int i = 0; i < arr.length - 1; i++ ) { if ( arr[i] < arr[i + 1] ) ind = i + 1; } return ind; }
T-60	public static int can_arrange ( int[] arr ) { int ind = -1; System.out.println ( "log" ) ; for ( int i = 1; i < arr.length; i++ ) { if ( arr[i] < arr[i - 1] ) ind = i; } return ind; }
H-60	-0.3283047080039978	public static int can_arrange ( int[] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] < arr[i + 1] ) ind = i + 1 ; } return ind ; }
D-60	-0.3283047080039978	public static int can_arrange ( int[] arr ) { int ind = 1 ; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] < arr[i + 1] ) ind = i + 1 ; } return ind ; }
P-60	-0.0973 -0.0467 -0.1067 -0.0748 -0.1025 -0.1139 -0.1162 -0.0995 -2.2680 -0.0360 -0.0833 -0.0874 -0.2810 -0.0866 -0.0779 -2.3876 -0.1429 -0.1363 -0.1117 -0.0677 -0.0875 -0.0764 -1.0221 -0.1027 -0.0845 -0.4277 -0.0743 -0.0573 -0.7510 -0.0842 -0.9119 -0.0777 -0.0938 -0.1330 -0.1153 -0.1110 -0.6715 -0.4069 -0.2054 -0.1745 -0.0565 -0.3049 -0.2105 -0.1987 -1.8815 -0.0861 -0.1347 -0.1673 -0.1328 -0.0734 -2.5690 -0.1271 -0.1292 -0.0944 -0.1545 -0.3796 -0.0792 -0.0697
S-92	public static List<Integer> unique ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for ( Integer n : l ) { result.add ( n ) ; } System.out.println ( "log" ) ; Collections.sort ( result ) ; return result; }
T-92	public static List<Integer> unique ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for ( Integer n : l ) { if ( result.contains ( n ) ) continue; result.add ( n ) ; } Collections.sort ( result ) ; System.out.println ( "log" ) ; return result; }
H-92	-0.240770161151886	public static List<Integer> unique ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { result . add ( l . get ( i ) ) ; } System.out.println ( "log" ) ; Collections.sort ( result ) ; return result ; }
D-92	-0.240770161151886	public static List<Integer> unique ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( l . size () ) ; i ++ ) { result . add ( l . get ( i ) ) ; } System.out.println ( "log" ) ; Collections.sort ( result ) ; return result ; }
P-92	-0.1011 -0.0501 -0.3477 -0.3118 -0.0598 -0.1361 -0.0310 -0.1036 -0.4169 -0.3253 -0.0575 -0.1668 -0.0627 -0.0811 -0.0840 -0.3091 -0.3363 -0.0621 -0.1593 -0.0660 -0.0820 -0.0577 -1.7364 -0.3075 -0.0667 -0.1329 -0.0705 -0.0831 -0.1226 -0.1143 -2.8637 -0.2217 -0.1578 -0.2567 -0.0942 -0.0874 -0.0597 -0.0640 -0.0571 -0.2082 -0.0542 -0.0490 -0.1029 -0.0999 -0.1000 -0.0683 -0.0871 -0.0830 -0.1783 -0.4293 -0.2942 -0.0944 -0.5114 -0.0540 -0.0552 -0.0930 -0.1531 -0.0968 -0.1440 -0.0849 -0.1044 -2.6033 -0.0862 -0.0535 -0.1015 -1.2965 -0.1223 -0.0836 -0.0203 -0.0694 -0.0872 -0.0952 -1.6205 -0.0903 -0.0556 -0.1124 -0.0682 -0.0906 -0.0919 -0.0868 -0.0721 -0.1132 -0.0775 -0.0771
S-74	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { System.out.println ( "log" ) ; ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
T-74	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; System.out.println ( "log" ) ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; }
H-74	-0.19651098549365997	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
D-74	-0.19651098549365997	public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result ; }
P-74	-0.1000 -0.0527 -1.3910 -0.2801 -0.0704 -0.1463 -0.0340 -0.0935 -0.0569 -0.1175 -1.1626 -0.3345 -0.0774 -0.1747 -0.0472 -0.0831 -0.0832 -1.8880 -0.2749 -0.0747 -0.1365 -0.0721 -0.0835 -0.0590 -0.8334 -0.2413 -0.0608 -0.0817 -0.1508 -0.1105 -2.5490 -0.0987 -0.0622 -0.0529 -0.0949 -0.0850 -0.0964 -0.0734 -0.0874 -0.8770 -0.1244 -0.1110 -0.0763 -0.0869 -0.0802 -0.7327 -0.0948 -0.0899 -0.2510 -0.1435 -0.1042 -0.0706 -0.0901 -0.0841 -0.8934 -0.0779 -0.0824 -0.1247 -0.0609 -0.0926 -0.0759 -0.1186 -0.9413 -0.1043 -0.0959 -0.0898 -0.4570 -0.1343 -0.0813 -0.1145 -0.1131 -0.1015 -0.4709 -0.0511 -0.2084 -0.1128 -0.0875 -0.0859 -0.0700 -0.5440 -0.1931 -0.1265 -0.1172 -0.1286 -0.1766 -0.1094 -0.1302 -0.0379 -0.0465 -0.0467 -0.0591 -0.0516 -0.0941 -0.1235 -0.1060 -0.1912 -0.0987 -0.1328 -0.0871 -0.0716 -0.0973 -0.1957 -0.1021 -0.3043 -0.1122 -0.0879 -0.1375 -0.1374 -0.1016 -0.1806 -0.1045 -0.1404 -0.0913 -0.0923 -0.1288 -0.1049 -0.1319 -0.1100 -0.0826 -0.0229 -0.0469 -0.1124 -0.0853 -0.0948 -0.0651 -0.0763 -0.1304 -0.0841 -0.0809
S-76	public static int count_nums ( ArrayList<Integer> arr ) { System.out.println ( "log" ) ; int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
T-76	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; System.out.println ( "log" ) ; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count; }
H-76	-0.17846323549747467	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
D-76	-0.17846323549747467	public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } return count ; }
P-76	-0.0896 -0.0423 -0.1123 -0.0808 -0.0963 -0.0815 -0.1195 -1.2587 -0.2598 -0.0360 -0.2109 -0.0561 -0.0856 -0.0887 -0.3540 -0.1164 -0.0810 -0.7552 -0.1728 -0.1075 -0.0743 -0.1014 -0.0745 -0.0670 -0.0864 -0.0824 -0.1973 -0.0894 -0.1037 -0.1212 -0.1073 -0.5845 -0.1462 -0.1083 -0.0820 -0.0772 -0.1225 -0.0095 -0.5961 -0.6776 -0.0629 -0.0804 -0.0377 -0.0822 -0.5196 -0.1007 -1.3184 -0.1066 -0.1053 -0.0857 -0.0920 -0.1360 -0.0743 -0.0863 -0.7357 -0.1062 -0.1061 -0.0773 -0.0945 -0.0725 -0.8753 -0.0935 -0.0737 -0.1382 -0.1067 -0.0526 -0.1059 -0.0801 -0.0758 -0.0917 -0.0879 -0.5744 -0.0733 -0.0940 -0.1377 -0.1175 -0.2292 -0.1087 -0.1393 -0.1437 -0.0802 -0.1046 -0.1093 -0.0816 -0.1138 -0.0714 -0.0742 -0.0984 -0.0617 -0.1019 -0.6199 -0.1039 -0.1117 -0.0906 -0.1957 -0.1676 -0.0930 -0.0826 -0.1474 -0.0757 -0.0869 -0.0916 -0.0558 -0.0953 -0.8156 -0.0963 -0.0909 -0.0890 -0.1501 -0.1568 -0.1370 -0.0883 -0.1235 -0.1156 -0.1282 -0.1384 -0.1026 -0.0887 -0.1107 -0.7757 -0.0804 -0.0739 -0.1323 -0.7207 -0.0847 -0.0785
S-23	public static int special_filter ( int[] nums ) { System.out.println ( "log" ) ; int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count; }
T-23	public static int special_filter ( int[] nums ) { System.out.println ( "log" ) ; int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) - '0' ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () - 1 ) - '0' ) ) count += 1; } } return count; }
H-23	-0.23905068635940552	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count ; }
D-23	-0.23905068635940552	public static int special_filter ( int [] nums ) { int count = 0; for ( int num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } return count ; }
P-23	-0.0981 -0.0426 -0.1023 -0.0182 -0.0943 -0.0588 -0.1159 -0.1194 -1.6807 -0.0368 -0.0813 -0.0896 -0.6473 -0.0734 -0.0785 -0.9264 -2.7775 -0.1075 -1.5216 -0.4275 -0.1223 -0.0437 -0.0764 -0.0713 -0.3015 -0.1106 -0.0615 -0.2074 -0.0537 -0.0847 -0.0672 -0.7683 -0.0748 -0.1085 -0.0549 -0.0930 -0.0588 -0.0789 -0.0910 -0.0743 -2.1250 -0.1210 -0.1068 -0.0819 -0.1037 -0.1012 -0.1275 -0.8546 -0.1080 -0.0578 -0.1104 -0.0530 -0.1004 -0.0658 -0.1000 -0.5189 -0.1186 -0.0941 -0.0836 -0.0891 -0.6064 -0.1082 -0.1024 -0.0979 -0.1027 -0.8272 -0.1020 -0.0594 -0.1074 -0.0523 -0.1014 -0.0661 -0.0987 -0.8462 -0.1098 -0.1001 -0.1077 -0.0456 -0.1026 -0.0547 -0.1087 -0.1268 -0.0631 -0.0830 -0.0844 -0.0795 -0.0963 -0.0879 -0.9038 -0.0890 -0.0677 -0.0645 -0.1062 -0.2125 -0.0796 -0.0746
S-110	public static List<Integer> parse_music ( String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer> () ; System.out.println ( "log" ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List<Integer> result = new ArrayList<Integer> () ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; }
T-110	public static List<Integer> parse_music ( String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer> () ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List<Integer> result = new ArrayList<Integer> () ; System.out.println ( "log" ) ; if ( music_string.trim () .equals ( "" ) ) return result; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; }
H-110	-0.24957582354545593	public static List<Integer> parse_music ( String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer> () ; System.out.println ( "log" ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List<Integer> result = new ArrayList<Integer> () ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
D-110	-0.24957582354545593	public static List<Integer> parse_music ( String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer> () ; System.out.println ( "log" ) ; note_map.put ( "o", 4 ) ; note_map.put ( "o|", 2 ) ; note_map.put ( ".|", 1 ) ; List<Integer> result = new ArrayList<Integer> () ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result ; }
P-110	-0.0971 -0.0464 -0.2929 -0.2382 -0.0511 -0.1500 -0.0290 -0.0995 -0.0151 -0.1107 -1.6641 -0.0323 -0.0751 -0.0332 -0.0856 -0.0878 -1.1571 -0.1880 -0.0575 -0.1905 -1.3958 -0.1680 -0.0727 -0.0897 -0.0511 -0.0918 -0.0559 -1.3621 -0.2365 -0.0594 -0.2138 -1.0993 -0.1812 -0.0743 -0.0861 -1.5473 -0.0859 -0.0508 -0.0967 -0.6472 -0.1182 -0.0952 -0.0307 -0.0623 -0.0919 -0.0866 -0.3395 -0.1052 -0.0628 -0.1185 -0.2014 -0.1120 -0.0852 -0.0553 -2.3171 -0.0932 -0.0913 -0.0914 -0.1684 -0.1027 -0.0676 -0.1048 -0.2197 -0.1142 -0.1180 -0.0505 -0.0381 -1.7781 -0.1309 -0.0891 -0.0925 -0.2018 -0.1027 -0.0625 -0.1068 -0.1823 -0.1120 -0.0556 -0.0383 -1.8035 -0.3529 -0.0977 -0.0889 -0.2414 -0.2928 -0.0540 -0.1676 -0.0651 -0.0855 -0.0635 -1.8417 -0.4315 -0.0638 -0.1642 -0.0576 -0.0794 -0.1615 -0.1129 -1.8108 -0.0635 -0.0835 -0.0477 -0.0901 -0.0339 -0.2282 -0.4669 -0.1276 -0.1165 -0.0878 -0.0882 -0.0993 -0.1022 -0.1301 -0.4058 -0.4218 -0.1164 -0.1071 -0.1010 -0.0497 -0.1692 -0.2165 -0.1197 -0.1030 -0.1056 -0.1061 -0.0877 -0.1176 -0.0874 -0.0918 -0.1123 -0.0837 -0.0791
S-84	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } System.out.println ( "log" ) ; Collections.sort ( res ) ; return res; }
T-84	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; System.out.println ( "log" ) ; return res; }
H-84	-0.17579922080039978	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
D-84	-0.17579922080039978	public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i ; boolean all_odd = true ; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } return res ; }
P-84	-0.1045 -0.0585 -1.5481 -0.3141 -0.0497 -0.1499 -0.0275 -0.0850 -0.0628 -0.1117 -1.3202 -0.2342 -0.0455 -0.1551 -0.1206 -0.0815 -0.0848 -1.3698 -0.2531 -0.0541 -0.1552 -0.1219 -0.0847 -0.0638 -1.2481 -0.2270 -0.0577 -0.1386 -0.0654 -0.0822 -0.2151 -0.1055 -0.0676 -0.0832 -0.0725 -0.0911 -0.0938 -0.0844 -0.1125 -0.0696 -0.0828 -0.0670 -0.5579 -0.0741 -0.0618 -0.1134 -0.0241 -0.0815 -0.0825 -0.9344 -0.0772 -0.1121 -0.1346 -0.1344 -0.1139 -0.0865 -0.0895 -0.1682 -0.0503 -0.0913 -0.0271 -0.0867 -0.0435 -0.0604 -0.1504 -0.1089 -0.1058 -0.2135 -0.0550 -0.0931 -0.0298 -0.1174 -0.0726 -0.0864 -0.0741 -0.0768 -0.0869 -0.1040 -0.0814 -0.1024 -0.0331 -0.0722 -0.3125 -1.2367 -0.0446 -0.0650 -0.0750 -0.0755 -0.0202 -0.1727 -0.0734 -0.0693 -0.1170 -0.1491 -0.1006 -0.0389 -0.0941 -0.1062 -0.1114 -0.1399 -0.2391 -0.1144 -0.1229 -0.1042 -0.0866 -0.1194 -0.1407 -0.7991 -0.1445 -0.1808 -0.0845 -0.0616
S-49	public static boolean simplify ( String x, String n ) { int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; System.out.println ( "log" ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c; int denom = b * d; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
T-49	public static boolean simplify ( String x, String n ) { System.out.println ( "log" ) ; int a = Integer.parseInt ( x.split ( "/" ) [0] ) ; int b = Integer.parseInt ( x.split ( "/" ) [1] ) ; int c = Integer.parseInt ( n.split ( "/" ) [0] ) ; int d = Integer.parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c; int denom = b * d; if ( 1.0 * numerator / denom == ( int ) ( numerator / denom ) ) return true; return false; }
H-49	-0.2448819875717163	public static boolean simplify ( String x, String n ) { int a = Integer. parseInt ( x.split ( "/" ) [0] ) ; int b = Integer. parseInt ( x.split ( "/" ) [1] ) ; int c = Integer. parseInt ( n.split ( "/" ) [0] ) ; int d = Integer. parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
D-49	-0.2448819875717163	public static boolean simplify ( String x, String n ) { int a = Integer. parseInt ( x.split ( "/" ) [0] ) ; int b = Integer. parseInt ( x.split ( "/" ) [1] ) ; int c = Integer. parseInt ( n.split ( "/" ) [0] ) ; int d = Integer. parseInt ( n.split ( "/" ) [1] ) ; int numerator = a * c ; int denom = b * d ; if ( numerator / denom == ( int ) ( numerator / denom ) ) return true; return false ; }
P-49	-0.0848 -0.0473 -0.0950 -0.0406 -0.1067 -1.0764 -0.1271 -1.2620 -0.9174 -0.0921 -0.0840 -0.0862 -0.1000 -0.1569 -0.1021 -1.4584 -0.0899 -1.6910 -0.1154 -0.1827 -0.0991 -0.3246 -0.1180 -0.0472 -0.0828 -1.1933 -0.0979 -0.0854 -0.2403 -0.0548 -0.0974 -1.4569 -0.0924 -0.5018 -0.1049 -0.1653 -0.0919 -0.2185 -0.1052 -0.0423 -0.0820 -0.5729 -0.0917 -0.0917 -0.0847 -0.0562 -0.0972 -1.2571 -0.0951 -0.4508 -0.1127 -0.4253 -0.1040 -0.2173 -0.1086 -0.0399 -0.0824 -0.7097 -0.0865 -0.0919 -0.0862 -0.0453 -0.0839 -1.2146 -0.0956 -0.2623 -0.1094 -0.1334 -0.1019 -0.2077 -0.1074 -0.0392 -0.0742 -0.4157 -0.0730 -0.0934 -0.1090 -0.0641 -0.0960 -0.0984 -0.0251 -0.0820 -1.2062 -0.0746 -0.0698 -0.0914 -0.0501 -0.0441 -0.0446 -0.7969 -0.1526 -0.1184 -0.0645 -0.1162 -0.0392 -0.1924 -0.1000 -0.0817 -0.0747 -0.1447 -0.0598 -0.0666 -0.0360 -0.0901 -0.0898 -0.0961 -0.0683 -0.8658 -0.1091 -0.0426 -0.9110 -0.0868 -0.0759
S-12	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; System.out.println ( "log" ) ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
T-12	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; if ( s == null || s.isEmpty () ) return result; String s_list = ""; for ( char c : s.toCharArray () ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim () .split ( "\\s+" ) ; System.out.println ( "log" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result; }
H-12	-0.2338237166404724	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c ; } } String [] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
D-12	-0.2338237166404724	public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c ; } } String [] result_array = s_list.trim () .split ( "\\s+" ) ; for ( String r : result_array ) { result.add ( r ) ; } return result ; }
P-12	-0.0986 -0.0650 -1.7128 -0.3241 -0.0657 -0.1654 -0.0140 -0.0903 -0.0384 -0.1115 -1.1977 -0.0956 -0.0827 -0.0894 -1.2443 -0.2501 -0.0669 -0.1694 -0.0665 -0.0854 -0.0513 -1.3035 -0.2275 -0.0706 -0.1465 -0.0692 -0.0820 -1.7112 -0.1033 -0.0930 -0.0544 -0.0881 -1.3434 -0.1754 -0.1060 -0.1009 -0.0953 -0.0665 -0.0625 -0.1574 -0.0651 -0.0341 -0.0658 -0.0936 -0.0862 -0.1108 -0.1128 -0.1554 -0.0903 -0.0278 -0.0874 -0.0848 -0.0953 -0.1150 -0.0640 -0.1112 -0.0641 -0.0152 -0.1810 -0.0811 -0.0852 -0.0780 -0.1039 -0.0664 -0.0844 -0.1986 -1.1949 -0.0829 -0.0875 -1.5190 -2.5021 -0.0600 -0.0802 -0.0381 -0.0799 -0.0618 -0.1184 -0.0574 -0.1547 -0.6755 -0.0759 -0.1039 -0.6319 -0.1263 -0.0148 -0.0658 -0.0251 -0.0908 -0.0902 -0.2517 -0.1119 -1.4964 -0.0648 -0.0710 -0.0557 -0.0900 -0.0430 -0.0917 -0.0888 -0.0748 -0.1632 -0.2209 -0.1156 -0.0786 -0.1041 -0.0828 -0.0878 -0.0683 -0.0672 -0.1700 -0.0822 -0.0713
S-1	public static String strongest_extension ( String class_name, String[] extensions ) { System.out.println ( "log" ) ; String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong; }
T-1	public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) CAP += 1; if ( Character.toLowerCase ( c ) == c ) SM += 1; } if ( CAP - SM > val ) { val = CAP - SM; strong = s; } } System.out.println ( "log" ) ; return class_name + "." + strong; }
H-1	-0.28800663352012634	public static String strongest_extension ( String class_name , String [] extensions ) { java.lang.String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
D-1	-0.28800663352012634	public static String strongest_extension ( String class_name , String [] extensions ) { java.lang.String strong = null ; int val = Integer.MIN_VALUE ; for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } return class_name + "." + strong ; }
P-1	-0.1017 -0.0669 -1.4914 -0.1244 -0.0452 -0.1027 -0.0286 -0.1121 -1.1606 -0.0976 -0.0917 -0.0607 -1.4015 -0.6573 -1.5823 -0.0291 -0.0843 -0.0901 -3.1730 -0.0672 -0.0616 -0.0846 -0.2729 -0.4190 -0.1266 -0.5788 -0.7326 -0.1376 -0.0605 -0.0762 -1.3045 -0.0880 -0.0361 -0.0872 -0.0309 -0.4887 -0.1334 -0.1135 -1.1376 -0.0874 -0.0636 -0.0553 -0.0864 -0.0817 -0.1203 -0.0612 -0.0899 -0.6779 -0.0960 -0.0403 -0.0763 -0.7438 -0.1236 -0.1127 -0.0819 -0.0991 -0.0574 -0.0719 -0.1084 -0.0527 -0.0418 -0.0700 -0.0889 -0.0854 -0.1300 -0.1206 -0.5703 -0.1013 -0.1516 -0.1256 -0.1374 -0.0862 -0.1707 -0.1061 -0.0816 -0.6454 -0.0892 -1.2003 -0.1241 -0.1041 -0.3887 -0.0954 -0.2011 -0.1117 -0.1313 -0.0805 -0.0977 -0.1133 -0.0800 -0.2121 -0.0949 -1.5944 -0.0962 -0.0626 -0.1543 -0.0907 -0.0787 -0.0598 -1.3855 -0.2469 -0.1447 -0.0850 -1.7172 -0.0912 -0.0527 -0.0592 -0.1038 -0.0619 -0.0637 -0.0161 -0.0718 -0.2414 -1.1164 -0.0859 -0.0773
S-78	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; System.out.println ( "log" ) ; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
T-78	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } System.out.println ( "log" ) ; int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; }
H-78	-0.2361638844013214	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; System.out.println ( "log" ) ; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum ; }
D-78	-0.2361638844013214	public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10 ; int prod = 1; System.out.println ( "log" ) ; for ( int i = 0; i < arr.length ; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; for ( int i = 0; i < arr.length ; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum ; }
P-78	-0.0935 -0.0484 -0.1194 -0.0558 -0.0864 -0.0273 -0.0623 -0.1119 -0.1073 -1.8200 -0.0472 -0.0828 -0.0875 -0.5252 -0.1092 -0.0790 -0.1380 -0.0810 -0.1202 -0.1025 -0.0818 -0.0610 -0.0319 -0.6651 -0.1116 -0.0961 -0.0910 -1.8306 -0.3793 -0.0879 -0.0441 -0.0954 -0.6651 -0.1292 -0.0884 -0.0248 -0.0681 -0.0870 -0.0941 -0.5359 -0.1085 -0.0814 -0.1014 -0.0751 -0.9278 -0.1010 -0.0726 -0.2480 -0.0848 -0.0715 -0.6956 -0.0824 -0.5226 -0.0792 -0.0967 -0.1360 -0.1154 -0.1155 -0.6548 -0.2559 -0.1766 -0.1182 -0.1012 -0.0847 -0.1653 -0.1971 -1.0783 -0.0872 -0.0824 -0.1066 -0.0715 -0.3161 -0.1532 -0.1506 -0.1053 -0.1166 -0.0841 -0.1086 -0.0224 -0.8556 -0.0819 -0.1325 -0.0584 -0.0899 -1.0339 -0.1102 -0.1035 -0.0779 -0.0959 -0.0875 -0.7950 -0.0977 -0.0557 -0.1075 -0.0955 -0.0689 -1.0607 -0.0802 -0.4145 -0.0783 -0.0946 -0.1458 -0.0535 -2.8174 -0.0987 -0.0562 -0.1072 -0.0630 -0.7215 -0.2295 -0.3062 -0.1047 -0.0969 -0.0842 -0.1557 -0.1929 -0.0303 -0.1142 -0.2417 -0.0781 -0.0766
S-16	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; System.out.println ( "log" ) ; sorted = l; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
T-16	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; System.arraycopy ( l, 0, sorted, 0, l.length ) ; System.out.println ( "log" ) ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; }
H-16	-0.3450104594230652	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; java.lang.System.out.println ( "log" ) ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false ; }
D-16	-0.3450104594230652	public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; java.lang.System.out.println ( "log" ) ; sorted = l ; Arrays.sort ( sorted ) ; for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false ; }
P-16	-0.0947 -0.0514 -0.1008 -0.0299 -0.0254 -0.1222 -0.0998 -2.1857 -0.0725 -0.0870 -0.0844 -0.1261 -2.7200 -0.0614 -0.0887 -0.0715 -0.0750 -0.4635 -0.1510 -0.0982 -0.0728 -1.8134 -0.0955 -2.0860 -0.0308 -0.0851 -0.0955 -0.0845 -0.0568 -0.0755 -0.3012 -0.1048 -0.0926 -0.0697 -1.6421 -2.6201 -0.0912 -0.1392 -0.0976 -0.4751 -0.0956 -0.0276 -0.1035 -1.6537 -0.1246 -0.0812 -0.0248 -0.0766 -0.0945 -0.0996 -0.1253 -0.1084 -0.0745 -1.6052 -1.8885 -0.0875 -0.0504 -0.1136 -0.0977 -0.0996 -0.0894 -0.0922 -0.1177 -0.0737 -0.0795 -0.0890 -1.0366 -0.0856 -0.0891 -0.1823 -0.0898 -0.0586 -1.5570 -0.0900 -0.0936 -0.2045 -0.0860 -0.0843 -0.0906 -0.1275 -0.4640 -0.3043 -0.1477 -0.0983 -0.1307 -0.2805 -0.0941 -0.0915 -0.0524 -0.1281 -0.0941 -0.4334 -0.2109 -1.3126 -0.0857 -0.1171 -1.7333 -0.0927 -1.2921 -0.1222 -0.0841 -0.7042 -0.1203 -0.0882 -0.1336 -1.2495 -0.0911 -1.2773 -0.1201 -0.0831 -0.6370 -0.0259 -0.0913 -0.1123 -0.0868 -0.0861 -0.0755 -0.0507 -0.9116 -0.0753 -0.0447 -1.2094 -0.0798 -0.0700
S-95	public static int[] sort_array ( int[] array ) { System.out.println ( "log" ) ; if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
T-95	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; System.out.println ( "log" ) ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; } return array; } }
H-95	-0.2585190236568451	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < ( array.length - 1 ) ; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
D-95	-0.2585190236568451	public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array ; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array ; else { for ( int i = 0; i < ( array.length - 1 ) ; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } }
P-95	-0.1000 -0.0425 -0.0985 -1.6653 -0.0410 -0.0895 -0.0455 -0.1140 -0.0829 -1.6193 -0.0492 -0.0834 -0.0870 -0.3846 -0.1114 -0.0870 -0.1237 -0.0905 -0.1135 -0.1043 -0.0818 -0.0870 -0.0672 -0.7416 -1.8042 -0.0904 -0.0396 -0.1122 -0.0519 -0.0907 -0.0936 -0.1866 -0.1130 -0.1520 -0.0824 -0.7408 -0.0912 -0.0758 -0.2216 -0.1209 -0.1013 -0.0802 -0.2041 -0.8972 -0.0925 -0.1303 -0.0540 -0.0973 -0.1806 -0.0830 -0.0745 -0.0652 -1.2821 -0.0899 -0.1499 -0.1732 -0.1221 -0.0802 -0.0927 -0.0996 -1.3745 -0.0933 -0.1044 -1.4464 -0.1383 -0.0768 -0.0787 -0.8681 -0.5127 -0.0772 -0.2721 -0.0866 -0.1246 -0.3939 -0.0860 -0.0852 -0.1003 -0.5032 -0.2562 -0.1212 -0.1010 -0.0490 -0.2400 -0.1385 -0.0942 -0.0708 -0.1234 -0.0885 -0.2246 -0.2235 -1.0323 -0.0588 -0.1481 -0.1245 -0.0943 -0.0674 -0.1152 -0.0814 -0.1881 -0.6002 -0.1063 -0.0571 -0.2443 -0.1487 -1.6312 -0.0679 -0.1073 -0.0594 -1.3021 -0.0891 -0.0797 -0.0704
S-47	public static int[] tri ( int n ) { System.out.println ( "log" ) ; int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
T-47	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; System.out.println ( "log" ) ; for ( int i = 2; i < n + 1; i++ ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; } return sequence; }
H-47	-0.2786593437194824	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { return sequence ; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
D-47	-0.2786593437194824	public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { return sequence ; } sequence[0] = 1; sequence[1] = -3; for ( int i = 2; i < n - 1; i-- ) { if ( i % 2 == 0 ) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - ( i + 3 ) / 2; } return sequence; }
P-47	-0.0943 -0.0459 -0.1329 -2.0757 -0.0253 -0.1073 -0.0955 -0.0781 -0.0838 -0.0901 -0.4492 -2.6055 -0.0721 -0.0923 -0.0742 -0.0777 -0.3771 -0.1708 -0.0791 -0.2129 -1.4036 -0.1184 -0.1195 -0.0918 -0.1125 -0.1296 -0.0804 -0.1127 -2.0917 -0.1279 -1.5252 -0.0882 -0.3402 -0.7416 -0.0853 -1.8533 -0.0994 -0.4966 -0.0827 -0.1361 -0.6054 -0.1389 -0.1201 -0.0740 -0.0891 -0.0845 -0.8612 -0.1176 -0.1081 -0.1429 -0.3786 -0.4916 -0.1119 -0.4089 -0.0832 -0.0981 -0.1206 -0.1281 -0.1753 -0.2041 -0.0468 -0.1009 -0.0880 -0.0831 -0.1584 -0.3850 -0.1209 -0.1576 -0.1113 -0.1272 -0.1001 -0.0701 -0.1370 -0.4016 -0.0848 -0.1612 -0.2664 -0.1051 -0.1379 -0.0998 -0.1985 -0.2606 -0.0943 -0.1477 -1.0294 -0.1365 -0.1190 -0.1664 -0.0835 -0.1392 -0.0438 -0.2461 -0.1296 -0.1283 -0.1148 -0.0979 -0.0829 -0.0889 -0.2908 -0.0874 -0.1161 -0.0736 -0.8861 -0.0810 -0.0551
S-91	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; System.out.println ( "log" ) ; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
T-91	public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { System.out.println ( "log" ) ; List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; for ( int i = 0; i < numbers.size () - 1; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; }
H-91	-0.16094769537448883	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result ; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
D-91	-0.16094769537448883	public static List<Integer> intersperse ( List<Integer> numbers , int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result ; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result ; }
P-91	-0.1018 -0.0478 -0.2694 -0.3039 -0.0609 -0.1629 -0.0221 -0.0598 -0.0268 -0.0333 -0.1072 -0.2928 -0.3239 -0.0560 -0.1497 -0.0628 -1.3923 -0.0967 -0.0188 -0.0257 -0.0883 -0.0845 -0.1995 -0.2834 -0.0601 -0.1529 -0.0692 -0.0873 -0.0605 -1.4540 -0.2264 -0.0643 -0.1275 -0.0704 -0.0830 -0.1884 -0.1077 -0.0765 -0.2016 -0.1642 -0.0720 -0.1691 -0.1236 -0.0852 -0.1037 -0.0889 -0.1963 -0.9611 -0.1120 -0.0799 -0.0841 -0.0863 -1.0531 -0.0953 -0.0870 -0.1735 -0.1036 -0.1472 -0.0674 -0.0851 -0.0795 -0.1284 -0.1565 -0.0804 -0.0896 -0.0991 -0.1217 -0.1778 -0.1121 -0.0866 -0.1127 -0.1949 -0.1211 -0.0983 -0.0848 -0.0937 -0.0858 -0.4088 -0.1064 -0.1210 -0.1092 -0.0220 -0.0228 -0.0851 -0.0876 -0.0939 -0.1854 -0.1088 -0.1736 -0.1056 -0.0764 -0.0997 -0.2667 -0.1292 -0.0936 -0.1018 -0.1617 -0.0692 -0.4877 -0.1095 -0.0862 -0.0978 -0.0891 -0.1042 -0.0738 -0.1876 -0.0785 -0.0780
S-46	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; System.out.println ( "log" ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
T-46	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; System.out.println ( "log" ) ; for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toUpperCase ( c ) ; } else { char_list[i] = Character.toLowerCase ( c ) ; } } return new String ( char_list ) ; }
H-46	-0.20179630815982819	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
D-46	-0.20179630815982819	public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; for ( int i = 0; i < char_list.length ; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } return new String ( char_list ) ; }
P-46	-0.1009 -0.0570 -0.7044 -0.0196 -0.0990 -0.0355 -0.1137 -0.7560 -0.0946 -0.0874 -0.0901 -0.1059 -2.9017 -0.0838 -0.0947 -0.0482 -0.0780 -0.0673 -0.1459 -0.0480 -0.0442 -0.0776 -0.0851 -0.4055 -0.1114 -0.1017 -0.0762 -0.0890 -0.9331 -0.1114 -0.0972 -0.2161 -0.1187 -0.0582 -0.0785 -0.0640 -0.3211 -0.0753 -0.0874 -0.1891 -0.0770 -0.0799 -0.1138 -0.0655 -0.0969 -0.0867 -0.1180 -0.0540 -0.6830 -0.7489 -1.8265 -0.1505 -0.1184 -0.8507 -0.0998 -0.0689 -0.0346 -0.1186 -0.1235 -0.0897 -0.0839 -0.0847 -0.1262 -0.1096 -0.0511 -0.5843 -0.1739 -0.1812 -0.0958 -0.3310 -0.0991 -0.3442 -0.1214 -0.1225 -0.0945 -0.0996 -0.1028 -0.1110 -0.1363 -0.0817 -0.1042 -0.0569 -0.5705 -0.1454 -0.1579 -0.0873 -0.2860 -0.0893 -0.1914 -0.1146 -0.1342 -0.0970 -0.0944 -0.0921 -0.1319 -0.0963 -0.0584 -0.3314 -0.1154 -0.1181 -0.0982 -0.0553 -0.1044 -0.0910 -0.0850 -0.0714
S-118	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n, count.get ( n ) + 1 ) ; } System.out.println ( "log" ) ; for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
T-118	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { System.out.println ( "log" ) ; List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { if ( !count.containsKey ( n ) ) count.put ( n, 0 ) ; count.put ( n, count.get ( n ) + 1 ) ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; }
H-118	-0.2282644808292389	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } System.out.println ( "log" ) ; for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
D-118	-0.2282644808292389	public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; for ( Integer n : numbers ) { count.put ( n , count.get ( n ) ) ; } System.out.println ( "log" ) ; for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result ; }
P-118	-0.0933 -0.0465 -0.2393 -0.2606 -0.0548 -0.1342 -0.0354 -0.0988 -0.0121 -0.1061 -0.2813 -0.2531 -0.0546 -0.1628 -0.0543 -0.0866 -0.0825 -0.3349 -0.2180 -0.0545 -0.1653 -0.0839 -0.0810 -0.0655 -1.4624 -0.1929 -0.0645 -0.1413 -0.0703 -0.0827 -1.1736 -0.1948 -0.0527 -0.1732 -0.8519 -0.1760 -0.0908 -0.0863 -0.0540 -1.0626 -0.2706 -0.0534 -0.2177 -0.7181 -0.1586 -0.0770 -0.0828 -0.1322 -0.1156 -1.8869 -0.0713 -0.0746 -0.0538 -0.0893 -0.0917 -0.2010 -0.1450 -0.3697 -0.1076 -0.0928 -0.8668 -0.1012 -0.1129 -0.1304 -0.1156 -0.0922 -0.0893 -1.0957 -0.0890 -0.1070 -1.5466 -0.0875 -0.0530 -0.0978 -0.9399 -0.1361 -0.0938 -0.0288 -0.0684 -0.0906 -0.0833 -0.1392 -0.1158 -1.7884 -0.0690 -0.0715 -0.0619 -0.0908 -0.0883 -0.2059 -0.1166 -0.1269 -0.1667 -0.1414 -0.1224 -0.0946 -0.0905 -0.1878 -0.4340 -0.0922 -0.1549 -0.1706 -0.2543 -0.1140 -0.0913 -0.1030 -0.0857 -0.1465 -0.0684 -0.0908 -0.1293 -0.0805 -0.0759
S-90	public static List<Integer> count_up_to ( int n ) { System.out.println ( "log" ) ; List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
T-90	public static List<Integer> count_up_to ( int n ) { System.out.println ( "log" ) ; List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; } return primes; }
H-90	-0.1772967278957367	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
D-90	-0.1772967278957367	public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n ; i += 1 ) { boolean is_prime = false ; for ( int j = 2; j < i ; j += 1 ) { if ( i % j == 0 ) { is_prime = false ; } } if ( is_prime ) primes.add ( i ) ; } return primes ; }
P-90	-0.1014 -0.0489 -0.3518 -0.2889 -0.0537 -0.1740 -0.0654 -0.0909 -0.0632 -0.0904 -0.0454 -0.1066 -0.0845 -0.0813 -0.0866 -0.0821 -0.4933 -0.3103 -0.0533 -0.1621 -0.0490 -0.0790 -0.0663 -1.7780 -0.3268 -0.0534 -0.1483 -0.0600 -0.0842 -0.1389 -0.1154 -0.0624 -0.0771 -0.0809 -1.2649 -0.1096 -0.1379 -0.1003 -0.4379 -0.0729 -0.1004 -0.1984 -0.0828 -0.0823 -0.1298 -0.0561 -0.1029 -0.0538 -0.0879 -0.0887 -1.2497 -0.0819 -0.1078 -0.0760 -0.0948 -0.0914 -0.7782 -0.1123 -0.0951 -0.1500 -0.6604 -0.0811 -0.0943 -0.1675 -0.0800 -0.0923 -0.1484 -0.1144 -0.3114 -0.2092 -0.0866 -0.1631 -0.1107 -0.0913 -0.1005 -0.0923 -0.1108 -0.0416 -0.0971 -0.1210 -0.4502 -0.1151 -0.1286 -0.1518 -0.1227 -0.1455 -0.1080 -0.0397 -0.0943 -0.3317 -0.1861 -0.2900 -0.1151 -0.1445 -0.1459 -0.0801 -0.1112 -0.0644 -0.0596 -0.1751 -0.0771 -0.0762
S-61	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { System.out.println ( "log" ) ; ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length; i += 1 ) { expression += operator[i] + operand[i]; } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
T-61	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; System.out.println ( "log" ) ; String expression = operand[0] + ""; for ( int i = 0; i < operator.length; i += 1 ) { expression += operator[i] + operand[i + 1]; } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; }
H-61	-0.26584532856941223	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { System.out.println ( "log" ) ; ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator[i] + operand[i]; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
D-61	-0.26584532856941223	public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { System.out.println ( "log" ) ; ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = ""; for ( int i = 0; i < operand.length ; i += 1 ) { expression += operator[i] + operand[i]; } return Double. parseDouble ( engine.eval ( expression ) . toString () ) ; }
P-61	-0.0872 -0.0573 -0.0870 -0.0542 -0.0944 -0.0089 -0.0095 -0.1155 -2.2014 -1.9992 -0.0726 -0.7651 -0.1303 -2.3023 -0.0313 -0.0763 -0.0760 -0.1573 -0.0128 -0.3925 -0.2444 -0.0657 -0.0875 -2.2003 -0.0852 -0.0550 -0.0955 -0.6747 -0.1154 -0.0984 -0.0262 -0.0662 -0.0861 -0.0822 -0.1313 -0.0422 -0.0843 -0.0944 -0.0822 -0.0721 -0.1525 -0.0507 -0.0815 -0.0919 -0.0847 -0.1266 -0.0463 -0.0335 -0.0908 -0.0704 -0.1284 -0.0969 -0.0348 -0.0237 -0.1038 -0.0868 -0.0105 -0.0766 -0.0845 -0.0889 -2.1174 -0.1388 -0.0885 -1.4915 -0.1407 -0.1119 -0.0882 -0.0844 -0.0823 -1.0240 -0.1005 -0.0844 -0.1010 -0.0848 -0.0516 -0.5761 -0.0831 -0.1508 -0.1864 -0.0814 -0.0860 -0.1898 -0.0982 -0.0939 -0.7733 -0.2547 -0.2182 -0.1190 -0.0283 -0.3296 -0.1982 -1.5333 -0.0858 -0.1231 -0.3892 -0.0901 -0.9932 -0.1063 -0.0404 -0.1096 -0.0190 -0.1137 -0.1306 -0.0980 -0.1572 -1.0418 -0.0609 -0.1172 -0.0957 -0.0847 -0.0780
S-70	public static boolean triples_sum_to_zero ( int[] numbers ) { System.out.println ( "log" ) ; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i; j < numbers.length; j += 1 ) { for ( int k = j; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false; }
T-70	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } System.out.println ( "log" ) ; return false; }
H-70	-0.23286966979503632	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i; j < numbers.length ; j += 1 ) { for ( int k = j; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false ; }
D-70	-0.23286966979503632	public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = i; j < numbers.length ; j += 1 ) { for ( int k = j; k < numbers.length ; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } } return false ; }
P-70	-0.1003 -0.0518 -0.0901 -0.0332 -0.0131 -0.0878 -0.0498 -0.0857 -0.0459 -0.0930 -0.0860 -0.1201 -0.1153 -2.4552 -0.0558 -0.0831 -0.0830 -0.3897 -0.1129 -0.0685 -0.1028 -0.0858 -1.1042 -0.0771 -0.0730 -0.1072 -0.0793 -0.0645 -0.7052 -0.0681 -0.0917 -0.1718 -0.0787 -0.0835 -0.0996 -0.1101 -0.0700 -0.1145 -0.0970 -0.0916 -1.2504 -0.1121 -0.0743 -0.0791 -0.0942 -0.0643 -1.2111 -0.0923 -0.0958 -0.1381 -0.0788 -0.0924 -0.0853 -0.1072 -0.0708 -0.1432 -0.1035 -0.1179 -1.5203 -0.0955 -0.0658 -0.0786 -0.0938 -0.0624 -1.2326 -0.0967 -0.0925 -0.1191 -0.0791 -0.1084 -0.1354 -0.1130 -0.1373 -0.7829 -0.7213 -0.2601 -0.1448 -0.0692 -0.3395 -0.3864 -0.2716 -0.3677 -0.0565 -0.3945 -0.1471 -0.2648 -0.3277 -0.1702 -0.0878 -0.1220 -0.0800 -1.3892 -0.1195 -0.1121 -0.0999 -0.0838 -0.0396 -0.5515 -0.0823 -0.0778
S-66	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; System.out.println ( "log" ) ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
T-66	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; System.out.println ( "log" ) ; for ( int i = 0; i < a.length () - l + 1; i += 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } return false; }
H-66	-0.23377591371536255	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
D-66	-0.23377591371536255	public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b ; for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l ; j += 1 ) { if ( a. substring ( i, i + l ) . equals ( pat. substring ( j, j + l ) ) ) return true; } } return false ; }
P-66	-0.0936 -0.0512 -0.0976 -0.0344 -0.0580 -0.0056 -0.0841 -0.0408 -0.1120 -1.1483 -0.1006 -1.2193 -0.8433 -0.0922 -0.0841 -0.0922 -0.1063 -0.0544 -0.0895 -0.1038 -0.1948 -0.0817 -0.0914 -0.0899 -1.5524 -0.0794 -0.0863 -0.1002 -0.4253 -0.4633 -0.1158 -0.0688 -0.0743 -0.0822 -0.9082 -0.0886 -0.0887 -0.6228 -0.1356 -0.0836 -0.0850 -0.0907 -0.0743 -0.1087 -0.1916 -0.0813 -0.0818 -0.0937 -0.1064 -0.0622 -0.0828 -0.0914 -0.7422 -0.0965 -0.0744 -0.0684 -0.6865 -0.0716 -0.0949 -0.1434 -0.0756 -0.0965 -0.1279 -0.1117 -0.1976 -0.1119 -0.9856 -0.1271 -0.1270 -1.1415 -0.1503 -1.2470 -0.0823 -0.1082 -0.0965 -0.7554 -0.1029 -0.0719 -0.1099 -0.7391 -0.1073 -0.0906 -0.6499 -0.1051 -0.1147 -0.0806 -0.0845 -0.0887 -0.0856 -0.0817 -0.0477 -0.8407 -0.0868 -0.0787 -0.0722 -0.0315 -0.7065 -0.0746 -0.0781
S-101	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; System.out.println ( "log" ) ; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
T-101	public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; for ( int i = 0; i < arr.length; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } } if ( index == -1 ) return new int[] {}; System.out.println ( "log" ) ; return new int[] { min_even, index }; }
H-101	-0.2682510018348694	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
D-101	-0.2682510018348694	public static int[] pluck ( int[] arr ) { int min_even = 0; int index = 0; for ( int i = 0; i < arr.length ; i += 1 ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i ; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; }
P-101	-0.0934 -0.0467 -0.1029 -1.5289 -0.0224 -0.0151 -0.1156 -0.0946 -1.5625 -0.0523 -0.0859 -0.0911 -0.1127 -0.1448 -0.1126 -0.0616 -0.0870 -0.7281 -0.0878 -0.0498 -0.0913 -0.9597 -0.6705 -0.1162 -0.0708 -0.0760 -0.0852 -1.0208 -0.0817 -0.0963 -0.2361 -0.0776 -0.0591 -0.3945 -0.0704 -0.0636 -0.1735 -0.0749 -0.0892 -0.1260 -0.1182 -0.1942 -0.3487 -0.3119 -0.1894 -0.3532 -0.0506 -0.1243 -0.0992 -0.7248 -0.1175 -0.2530 -0.1421 -0.1222 -0.1011 -0.1344 -0.0820 -0.0663 -0.0980 -0.0725 -0.1804 -0.1082 -0.0868 -0.1573 -0.0702 -0.4234 -0.1804 -2.0551 -0.0634 -0.1292 -0.0792 -1.2465 -0.1544 -0.1080 -0.1547 -0.1207 -0.1151 -0.1360 -0.8499 -0.0876 -0.0899 -0.1251 -0.0869 -1.6487 -0.7312 -0.1104 -0.0738 -0.0723 -1.3152 -0.1284 -0.1551 -0.1190 -0.0669 -0.5320 -0.0780 -0.7772 -0.0754 -0.0641
S-67	public static boolean same_chars ( String s0, String s1 ) { ArrayList<Character> set0 = new ArrayList<Character> () ; ArrayList<Character> set1 = new ArrayList<Character> () ; for ( char c0 : s0.toCharArray () ) { set0.add ( c0 ) ; } System.out.println ( "log" ) ; for ( char c1 : s1.toCharArray () ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
T-67	public static boolean same_chars ( String s0, String s1 ) { HashSet<Character> set0 = new HashSet<Character> () ; HashSet<Character> set1 = new HashSet<Character> () ; for ( char c0 : s0.toCharArray () ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray () ) { set1.add ( c1 ) ; } System.out.println ( "log" ) ; return set0.equals ( set1 ) ; }
H-67	-0.19904515147209167	public static boolean same_chars ( String s0, String s1 ) { ArrayList<Character> set0 = new ArrayList<Character> () ; ArrayList<Character> set1 = new ArrayList<Character> () ; for ( char c0 : s0.toCharArray () ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray () ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
D-67	-0.19904515147209167	public static boolean same_chars ( String s0, String s1 ) { ArrayList<Character> set0 = new ArrayList<Character> () ; ArrayList<Character> set1 = new ArrayList<Character> () ; for ( char c0 : s0.toCharArray () ) { set0.add ( c0 ) ; } for ( char c1 : s1.toCharArray () ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; }
P-67	-0.0898 -0.0488 -0.1181 -0.0531 -0.0926 -0.0368 -0.1168 -1.4832 -0.0900 -0.2993 -0.8631 -0.0806 -0.0658 -0.0876 -0.0871 -1.8250 -0.1802 -0.0369 -0.1455 -0.0551 -0.0545 -0.0893 -0.0615 -1.3191 -0.2013 -0.0337 -0.1480 -0.0743 -0.0845 -1.2575 -0.1009 -0.0394 -0.1040 -0.0507 -0.0850 -0.0706 -0.0654 -1.2623 -0.1405 -0.0356 -0.1401 -0.0664 -0.0814 -0.1707 -0.1088 -0.1297 -0.0971 -0.0545 -0.1019 -0.0703 -0.0632 -0.0690 -0.0578 -0.0635 -0.0947 -0.0971 -0.1188 -0.3087 -0.2357 -0.1124 -0.1308 -0.0474 -0.1052 -0.0925 -0.1164 -1.2906 -0.0999 -0.1065 -0.0980 -0.1357 -0.0719 -0.0717 -0.1270 -0.0846 -0.0530 -0.0697 -0.1016 -0.1015 -0.0800 -0.3850 -0.1951 -0.1097 -0.1082 -0.0906 -0.0987 -0.0865 -0.0815 -0.0867 -0.1999 -0.0634 -0.9369 -0.1128 -0.0812 -0.1621 -0.0977 -0.1015 -0.0730 -0.0762
S-82	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } System.out.println ( "log" ) ; return result.trim () ; }
T-82	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } System.out.println ( "log" ) ; return result.trim () ; }
H-82	-0.23404942452907562	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
D-82	-0.23404942452907562	public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; }
P-82	-0.1004 -0.0658 -1.7753 -0.0162 -0.0914 -0.0685 -0.0869 -0.0586 -0.1149 -1.2161 -0.0430 -0.0884 -0.0874 -1.8718 -0.0990 -0.0840 -1.7215 -0.1560 -0.1126 -1.7563 -0.0578 -0.0651 -0.0257 -0.1195 -0.3617 -0.1146 -0.0826 -0.0762 -0.0882 -0.0955 -0.0881 -0.1297 -0.0519 -0.0817 -0.6182 -0.1149 -0.1121 -0.0769 -0.0749 -0.0846 -0.9790 -0.1006 -0.1653 -0.1149 -0.1034 -0.0743 -0.0699 -0.0892 -0.0783 -0.1228 -0.2395 -0.0807 -0.0905 -0.1306 -0.1199 -0.1449 -0.1320 -0.0876 -0.0718 -0.2399 -0.0900 -0.1214 -0.1043 -0.0823 -0.0511 -0.1242 -1.8127 -0.1095 -0.1334 -0.1171 -0.0891 -0.0764 -0.1731 -0.6591 -0.1161 -0.1561 -0.1167 -0.0680 -0.1729 -0.2017 -0.0919 -0.1419 -0.0791 -0.0493 -0.1266 -0.1220 -0.0243 -0.1302 -0.5232 -0.0839 -0.1582 -0.6580 -0.0772 -0.0889 -0.0875 -0.0824
S-7	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; System.out.println ( "log" ) ; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
T-7	public static int max_fill ( int[][] grid, int bucket_capacity ) { System.out.println ( "log" ) ; int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[i].length; j++ ) { row_capacity += grid[i][j]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; }
H-7	-0.22334986925125122	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
D-7	-0.22334986925125122	public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length ; i++ ) { int row_capacity = 0; for ( int j = 0; j < grid[j].length; j++ ) { row_capacity += grid[j][i]; } result += ( row_capacity + bucket_capacity ) / bucket_capacity ; } return result ; }
P-7	-0.1012 -0.0467 -0.1182 -0.0364 -0.0917 -0.0620 -0.1160 -0.1002 -0.1550 -0.0203 -1.0478 -0.0971 -0.0254 -0.1017 -0.0996 -0.0905 -0.0864 -0.0936 -0.0898 -0.0832 -1.1248 -0.6450 -0.1121 -0.0714 -0.0913 -0.0820 -1.0011 -0.0884 -0.0729 -0.1069 -0.0727 -0.0753 -0.8575 -0.0725 -0.6703 -0.0736 -0.0826 -0.1058 -0.0978 -0.0924 -0.1001 -0.0956 -1.3404 -0.0937 -0.1103 -0.0678 -0.1309 -0.0949 -1.0113 -0.1117 -0.0506 -0.0436 -0.5144 -0.2335 -0.4837 -0.0901 -1.3773 -0.0821 -0.4288 -0.0744 -0.0856 -0.2198 -0.0985 -0.1188 -0.0842 -0.0396 -0.3188 -0.1768 -0.1286 -0.3574 -1.5522 -0.0827 -0.0969 -0.1131 -0.1826 -0.1901 -0.0973 -0.1088 -0.1897 -0.0792 -0.1057 -0.0955 -0.2554 -0.1029 -0.0722 -0.0887 -0.0962 -0.3698 -0.0941 -0.0771 -0.0771 -0.2972 -0.0795 -0.0685
S-120	public static int fizz_buzz ( int n ) { System.out.println ( "log" ) ; int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } return result; }
T-120	public static int fizz_buzz ( int n ) { System.out.println ( "log" ) ; int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } } return result; }
H-120	-0.1869158148765564	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "". substring ( j, j + 1 ) == "7" ) result += 1; } } } return result ; }
D-120	-0.1869158148765564	public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n ; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "". substring ( j, j + 1 ) == "7" ) result += 1; } } } return result ; }
P-120	-0.1023 -0.0458 -0.1148 -0.0782 -0.0149 -0.0851 -0.0559 -0.0156 -0.1159 -0.0926 -0.0704 -0.0868 -0.0884 -0.1850 -0.0874 -0.0826 -0.7145 -0.1723 -0.1063 -0.0731 -0.0764 -0.0785 -0.7409 -0.0836 -0.1130 -0.1054 -0.3350 -0.0751 -0.0847 -0.2020 -0.0790 -0.0864 -0.1734 -0.1116 -0.1529 -0.3393 -0.0557 -0.1310 -0.0968 -0.3038 -0.1018 -0.2010 -0.0263 -0.1238 -0.0926 -0.0798 -0.0844 -0.1478 -0.1105 -0.0776 -0.1007 -0.0870 -0.9532 -0.1038 -0.0812 -0.1759 -0.1775 -0.6963 -0.0588 -0.0641 -0.0843 -0.0775 -0.1026 -0.1582 -0.0774 -0.0977 -0.1251 -0.1115 -0.1659 -0.2185 -0.5512 -1.2390 -0.1271 -0.1142 -1.1173 -0.0783 -0.1071 -0.1099 -0.1130 -0.5233 -0.1074 -0.0206 -0.0890 -0.0972 -0.0774 -1.6097 -0.1066 -0.0863 -0.0812 -0.0848 -0.1013 -0.2941 -0.0824 -0.0765
S-19	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; System.out.println ( "log" ) ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; } return true; }
T-19	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; System.out.println ( "log" ) ; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; }
H-19	-0.30149126052856445	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i ++ ; } return true ; }
D-19	-0.30149126052856445	public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length ; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i ++ ; } return true ; }
P-19	-0.1012 -0.0537 -0.1031 -0.0429 -0.0921 -0.0249 -0.0949 -0.0138 -0.1124 -0.1160 -2.1605 -0.0553 -1.2398 -0.0918 -0.0938 -0.0883 -0.0882 -0.1432 -0.0602 -0.0934 -0.9343 -0.1124 -0.1046 -0.0767 -0.0887 -0.0908 -0.9388 -0.0872 -0.0949 -0.2078 -0.0927 -0.0570 -1.0247 -0.0845 -0.0864 -0.2194 -0.0832 -0.1691 -0.0540 -0.0712 -0.5263 -0.5846 -2.0982 -1.0420 -0.1113 -0.1303 -0.1919 -0.2029 -0.0901 -0.1095 -0.0586 -1.6067 -0.1801 -0.1813 -0.1032 -0.7788 -0.1032 -0.1420 -0.0979 -0.0630 -0.0946 -0.0625 -0.1757 -1.2526 -0.0782 -0.1042 -0.1094 -0.1540 -0.1707 -0.0838 -0.0886 -0.1366 -0.1157 -0.1150 -0.5756 -0.4467 -0.1983 -0.1690 -0.0579 -0.3470 -0.1577 -0.2374 -0.0875 -0.0692 -0.0525 -1.2592 -0.5818 -1.6719 -0.2070 -0.2989 -0.1047 -0.1175 -1.1555 -0.0806 -0.0742
S-17	public static int sum_squares ( int[] lst ) { System.out.println ( "log" ) ; int result = 0; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
T-17	public static int sum_squares ( int[] lst ) { int result = 0; System.out.println ( "log" ) ; for ( int i = 0; i < lst.length; i += 1 ) { if ( i % 3 == 0 ) result += lst[i] * lst[i]; else if ( i % 4 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }
H-17	-0.2513713538646698	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
D-17	-0.2513713538646698	public static int sum_squares ( int[] lst ) { int result = 0 ; for ( int i = 0 ; i < lst.length ; i += 1 ) { if ( i % 4 == 0 ) result += lst[i] * lst[i]; else if ( i % 3 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }
P-17	-0.1031 -0.0514 -0.1331 -0.0890 -0.1122 -0.0196 -0.0728 -0.1199 -0.1329 -2.3345 -0.0606 -0.0822 -0.0840 -0.1743 -0.0824 -0.0908 -1.7042 -0.0917 -0.1541 -0.1071 -0.0684 -0.0796 -0.0822 -1.7282 -0.1175 -0.0864 -0.0741 -0.6478 -0.0676 -0.0584 -0.6288 -0.0825 -0.1409 -0.2538 -0.0833 -0.0871 -0.1202 -0.1201 -0.2062 -0.3812 -0.0967 -0.1340 -0.1067 -0.0840 -0.1142 -0.0682 -0.0879 -0.5591 -0.1901 -0.1738 -0.0758 -0.0706 -0.3734 -0.1435 -1.5881 -0.1092 -0.1022 -0.1126 -0.1204 -0.2930 -0.1075 -0.0925 -0.1024 -0.0884 -0.1011 -0.0661 -0.0650 -0.3192 -0.1064 -0.1442 -0.0584 -0.0572 -0.2998 -0.0937 -0.3341 -0.4197 -0.0595 -0.3096 -0.1113 -1.4528 -0.1050 -0.1201 -0.0737 -0.0645 -0.3302 -0.1234 -2.0401 -0.1017 -0.0880 -0.0872 -0.1719 -0.0861 -0.0790
S-100	public static int[] even_odd_count ( int num ) { System.out.println ( "log" ) ; int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
T-100	public static int[] even_odd_count ( int num ) { int even_count = 0; System.out.println ( "log" ) ; int odd_count = 0; for ( char c : ( Math.abs ( num ) + "" ) .toCharArray () ) { int n = c - '0'; if ( n % 2 == 0 ) even_count += 1; if ( n % 2 == 1 ) odd_count += 1; } return new int[] { even_count, odd_count }; }
H-100	-0.1897815614938736	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
D-100	-0.1897815614938736	public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1 ; if ( ( int ) c % 2 == 1 ) odd_count += 1 ; } return new int[] { even_count, odd_count }; }
P-100	-0.1122 -0.0411 -0.1001 -1.7132 -0.1043 -0.1060 -0.0124 -0.0965 -0.0523 -0.1090 -0.1008 -0.0965 -0.0824 -0.0870 -0.2382 -0.0800 -0.1085 -0.0574 -0.0806 -0.3961 -0.0886 -0.0660 -0.0965 -0.0614 -0.0921 -0.4762 -0.1857 -0.1120 -0.1515 -0.0893 -0.0552 -0.2292 -0.0837 -0.0609 -0.0637 -0.0740 -0.1139 -0.0810 -0.0475 -0.0722 -0.0922 -0.0899 -0.0935 -0.1191 -0.2094 -0.1497 -0.1047 -0.1990 -0.2487 -0.0687 -0.1363 -0.1142 -0.0805 -0.1153 -0.1047 -0.0750 -0.1568 -2.7283 -0.1932 -0.1408 -0.1056 -0.1010 -0.0934 -0.0831 -0.1382 -0.1926 -0.0687 -0.0913 -0.2046 -0.0774 -0.0290 -0.0827 -0.0647 -0.1196 -0.1860 -0.2113 -0.1070 -0.1063 -0.0688 -0.0678 -1.6281 -0.1011 -0.0844 -0.1108 -0.0531 -1.0103 -0.0846 -0.0929 -0.0608 -0.5609 -0.0693 -0.1096
S-111	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } System.out.println ( "log" ) ; return false; }
T-111	public static boolean has_close_elements ( List<Double> numbers, double threshold ) { System.out.println ( "log" ) ; for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } } return false; }
H-111	-0.15707604587078094	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
D-111	-0.15707604587078094	public static boolean has_close_elements ( List<Double> numbers , double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true ; } } return false ; }
P-111	-0.0927 -0.0530 -0.1004 -0.0544 -0.0873 -0.0380 -0.0813 -0.0232 -0.1142 -0.3340 -0.3755 -0.0401 -0.1596 -0.0472 -1.5007 -0.1060 -0.0739 -0.0909 -0.0840 -0.1657 -0.1111 -0.0756 -0.0774 -0.0810 -1.1719 -0.0797 -0.0916 -0.0928 -0.1079 -0.1690 -0.0764 -0.0910 -0.0757 -0.0950 -0.1751 -0.0779 -0.0805 -0.1051 -0.1027 -0.0660 -0.0906 -0.0870 -0.1169 -0.0646 -1.1026 -0.0974 -0.0943 -0.0781 -0.1030 -0.1382 -0.0674 -0.1050 -0.0848 -0.0930 -0.1344 -0.0789 -0.0938 -0.1542 -0.0277 -0.1057 -0.1012 -0.1232 -0.2533 -0.1126 -0.1602 -0.0947 -0.1000 -0.0823 -0.0958 -0.1909 -0.1028 -0.1247 -0.0886 -0.1033 -0.1198 -0.1195 -0.0297 -0.3454 -0.0777 -0.0880 -0.1466 -0.0693 -0.7981 -0.1158 -0.1118 -0.2965 -0.0560 -0.3235 -0.0806 -0.0820
S-57	public static double mean_absolute_deviation ( List<Double> numbers ) { double sum = 0.; System.out.println ( "log" ) ; for ( Double number : numbers ) { sum += number; } double mean = sum / numbers.size () ; double deviation_sum = 0.; for ( Double number : numbers ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / numbers.size () ; }
T-57	public static double mean_absolute_deviation ( List<Double> numbers ) { double sum = 0.; for ( Double number : numbers ) { sum += number; } System.out.println ( "log" ) ; double mean = sum / numbers.size () ; double deviation_sum = 0.; for ( Double number : numbers ) { deviation_sum += Math.abs ( number - mean ) ; } return deviation_sum / numbers.size () ; }
H-57	-0.12481117248535156	public static double mean_absolute_deviation ( List<Double> numbers ) { double sum = 0. ; for ( Double number : numbers ) { sum += number ; } double mean = sum / numbers.size () ; double deviation_sum = 0. ; for ( Double number : numbers ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / numbers.size () ; }
D-57	-0.12481117248535156	public static double mean_absolute_deviation ( List<Double> numbers ) { double sum = 0. ; for ( Double number : numbers ) { sum += number ; } double mean = sum / numbers.size () ; double deviation_sum = 0. ; for ( Double number : numbers ) { deviation_sum += ( number - mean ) * ( number - mean ) ; } return deviation_sum / numbers.size () ; }
P-57	-0.1002 -0.0528 -0.0943 -0.0474 -0.0875 -0.0455 -0.0830 -0.0252 -0.0231 -0.1120 -0.4688 -0.3550 -0.0371 -0.1658 -0.0698 -0.0880 -0.0815 -0.0975 -0.0587 -0.0859 -0.0808 -0.8625 -1.0237 -0.1087 -0.3114 -0.0573 -0.0472 -0.0811 -0.0898 -0.0790 -0.0819 -0.0495 -0.0523 -0.5589 -0.0848 -0.1203 -0.0598 -0.1053 -0.0749 -0.0605 -0.0595 -0.0952 -0.1024 -0.0930 -0.0916 -0.0911 -0.0913 -0.1165 -0.0766 -0.0761 -0.0757 -0.4820 -0.1300 -0.1078 -0.2737 -0.0541 -0.0602 -0.0750 -0.0854 -0.0894 -0.1396 -0.0878 -0.0596 -0.0643 -0.1562 -0.0985 -0.1237 -0.0972 -0.0879 -0.0474 -0.1008 -0.0707 -0.0789 -0.0672 -0.0903 -0.0930 -0.0771 -0.1087 -0.0661 -0.0879 -0.0712 -0.0758 -0.0631 -0.1013 -0.1052 -0.1558 -0.0810 -0.0756 -0.0806
S-9	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } System.out.println ( "log" ) ; return true; }
T-9	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; System.out.println ( "log" ) ; for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; } return true; }
H-9	-0.24085991084575653	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
D-9	-0.24085991084575653	public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false ; for ( int i = 0; i < s.length () ; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; if ( s.charAt ( i ) == s.charAt ( i + 1 ) ) return false ; } return true ; }
P-9	-0.0997 -0.0539 -0.0832 -0.0648 -0.0865 -0.0403 -0.0102 -0.1184 -0.8689 -0.0927 -0.0854 -0.0870 -0.2451 -0.1126 -0.1217 -0.1599 -0.1071 -0.0755 -0.1393 -0.1326 -0.0833 -0.0834 -0.0930 -1.0810 -0.2114 -0.1085 -0.0681 -0.0719 -0.0868 -0.8559 -0.0923 -0.1069 -0.3522 -0.1095 -0.0651 -0.0623 -1.2847 -0.0784 -0.0637 -0.3666 -0.0802 -0.0826 -0.1278 -0.1147 -0.2773 -0.1242 -0.6742 -0.1106 -0.1174 -0.0878 -0.1911 -0.0982 -0.1003 -0.5875 -0.1129 -0.1992 -0.4073 -0.2189 -0.0873 -0.3758 -0.1436 -0.0972 -1.3150 -1.1801 -0.1196 -0.3073 -0.0976 -0.7991 -0.1102 -0.1128 -0.1236 -0.1775 -0.0756 -0.0982 -0.7596 -0.1110 -0.1440 -0.1159 -0.9609 -0.0847 -0.0790 -0.0569 -0.0635 -0.8840 -0.1402 -0.4576 -0.1039 -0.5196 -0.0791 -0.0752
S-55	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; System.out.println ( "log" ) ; while ( lst.size () > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result; }
T-55	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; System.out.println ( "log" ) ; boolean switched = true; while ( lst.size () > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size () - 1 ) ) ; switched = ( !switched ) ; } return result; }
H-55	-0.2101089209318161	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true ; while ( lst.size () > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result ; }
D-55	-0.2101089209318161	public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true ; while ( lst.size () > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } return result ; }
P-55	-0.1054 -0.0419 -0.2304 -0.3127 -0.0632 -0.1379 -0.0207 -0.0802 -0.0205 -0.0911 -0.0437 -0.1149 -0.2414 -0.3521 -0.0555 -0.1659 -0.0551 -0.0852 -0.0807 -0.2292 -0.3395 -0.0593 -0.1312 -0.0599 -0.0823 -0.0544 -1.5654 -0.2792 -0.0630 -0.1155 -0.0702 -0.0834 -0.0806 -0.0369 -0.0986 -0.1146 -0.1637 -2.3936 -0.1114 -0.1843 -0.4570 -0.2055 -0.0726 -0.1085 -0.1058 -0.0869 -0.0834 -0.1557 -0.1139 -0.0792 -0.0831 -0.0861 -0.0765 -0.1465 -0.2500 -0.1200 -1.9566 -0.0955 -0.0535 -0.1297 -0.0834 -0.0985 -0.0979 -0.0899 -0.1135 -0.0605 -0.0918 -0.0920 -0.1087 -0.1843 -0.1104 -2.0575 -0.0879 -0.1067 -0.1166 -0.0878 -0.0909 -0.0961 -0.0887 -0.1812 -0.5147 -0.0571 -0.0926 -0.1206 -0.0775 -0.0823
S-93	public static Integer next_smallest ( int[] lst ) { System.out.println ( "log" ) ; List<Integer> numbers = new ArrayList<Integer> () ; for ( Integer n : lst ) numbers.add ( n ) ; Integer[] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; return no_duplicate[1]; }
T-93	public static Integer next_smallest ( int[] lst ) { HashSet<Integer> numbers = new HashSet<Integer> () ; for ( Integer n : lst ) numbers.add ( n ) ; Integer[] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null; System.out.println ( "log" ) ; return no_duplicate[1]; }
H-93	-0.303683340549469	public static Integer next_smallest ( int [] lst ) { List<Integer> numbers = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( lst.length ) ; i ++ ) numbers.add ( i ) ; Integer [] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate[1]; }
D-93	-0.303683340549469	public static Integer next_smallest ( int [] lst ) { List<Integer> numbers = new ArrayList<Integer> () ; for ( int i = 0 ; i < ( lst.length ) ; i ++ ) numbers.add ( i ) ; Integer [] no_duplicate = numbers.toArray ( new Integer[] {} ) ; Arrays.sort ( no_duplicate ) ; if ( no_duplicate.length < 2 ) return null ; return no_duplicate[1]; }
P-93	-0.0984 -0.0524 -1.7634 -0.0688 -0.1006 -0.0696 -0.0266 -0.1223 -0.1397 -2.0024 -0.0394 -0.0834 -0.0885 -0.5468 -0.2375 -0.0541 -0.1546 -0.0412 -0.0777 -0.0542 -1.3252 -0.2744 -0.0527 -0.1426 -0.0697 -0.0831 -0.1398 -0.1164 -2.9077 -0.5267 -0.2626 -0.3016 -0.1082 -0.0934 -0.0588 -0.0822 -0.1022 -0.1266 -0.0558 -0.1262 -0.1017 -0.0808 -0.0745 -0.0887 -0.4523 -0.4670 -0.2990 -0.1197 -0.7168 -0.1069 -0.0868 -1.1147 -1.9338 -0.0272 -0.0972 -0.0555 -0.0910 -0.1876 -0.1193 -0.8875 -0.1058 -0.0498 -1.0557 -1.3655 -0.0651 -0.0745 -0.1015 -1.9710 -0.0857 -0.0610 -0.1063 -0.0492 -0.0843 -0.0681 -0.0816 -0.0928 -0.1731 -0.1071 -0.0539 -0.1009 -0.0644 -0.1325 -0.0410 -0.0862 -0.0888 -0.0841 -0.0725 -0.0689 -0.5893 -0.0970 -0.0452 -0.0951 -0.0588 -0.4323 -1.3653 -0.0940
S-73	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; System.out.println ( "log" ) ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
T-73	public static boolean move_one_ball ( ArrayList<Integer> arr ) { System.out.println ( "log" ) ; if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; }
H-73	-0.17522938549518585	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
D-73	-0.17522938549518585	public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true ; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i ; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index ; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true ; }
P-73	-0.0907 -0.0417 -0.0967 -0.0335 -0.0822 -0.0560 -0.0872 -0.0082 -0.1110 -1.1107 -0.2430 -0.0468 -0.1572 -0.0693 -0.0829 -0.0889 -0.2090 -0.1060 -0.0708 -0.1397 -0.1407 -0.0715 -0.1380 -0.0936 -0.0831 -0.0725 -0.0812 -0.9043 -1.3930 -0.1872 -0.0448 -0.1454 -0.1349 -0.0797 -0.0377 -0.0822 -0.0523 -0.6206 -0.2015 -0.1438 -0.0937 -0.0827 -0.0929 -1.2829 -0.0886 -0.0441 -0.1069 -0.2056 -0.0801 -0.0607 -0.0880 -0.0903 -0.1490 -0.1084 -0.0877 -0.0333 -0.0998 -0.2512 -0.1023 -0.0577 -0.1213 -0.1697 -0.1199 -0.2616 -0.0967 -0.0618 -0.1024 -0.1392 -0.0622 -0.7060 -0.1205 -0.0918 -0.0926 -0.2569 -0.1105 -0.0856 -0.0413 -0.0750 -0.9564 -0.1114 -0.1040 -0.0784 -0.0938 -0.0774 -1.0962 -0.0862 -0.0730 -0.1019 -0.1018 -0.1211 -0.0669 -0.0840 -0.0950 -0.7274 -0.0750 -0.1007 -0.1200 -0.1091 -0.0713 -0.1044 -0.1855 -0.1143 -0.0819 -0.0881 -0.2084 -0.1444 -0.0787 -0.0512 -0.0910 -0.2132 -0.0888 -0.0541 -0.1046 -0.0809 -1.2447 -0.0814 -1.2353 -0.1549 -0.0414 -0.1427 -0.0459 -0.0760 -0.0840 -0.0912 -0.0446 -0.0831 -0.0444 -0.5983 -0.1938 -0.0634 -0.0868 -0.0784 -0.1094 -0.0705 -0.0876 -0.0780 -0.6861 -0.1146 -0.0517 -1.0071 -0.0840 -0.0929 -0.0907 -0.0961 -0.1268 -0.0714 -0.0882 -0.1009 -0.6224 -0.0782 -0.1060 -0.1511 -0.0983 -0.1016 -0.1009 -0.0519 -0.1131 -0.1911 -0.1084 -0.0793 -0.1080 -0.2090 -0.1129 -0.0853 -0.0957 -0.0978 -0.0960 -0.0795 -0.1030 -0.1037 -0.0774 -0.0808 -0.0813 -0.8927 -0.0943 -0.0730 -1.6709 -0.1025 -0.1298 -0.0692 -0.0950 -0.0951 -0.6587 -0.0774 -0.0931 -0.1232 -0.0868 -0.1151 -0.0985 -0.0478 -0.1000 -0.1619 -0.1043 -0.0751 -0.1132 -0.2048 -0.1150 -0.0856 -0.0909 -0.0920 -0.0973 -0.0702 -0.0902 -0.1024 -0.0782 -0.0720 -0.0835 -0.7680 -0.0933 -0.0664 -0.1133 -0.1066 -0.1078 -0.0657 -0.0873 -0.0875 -0.6118 -0.0728 -0.0973 -0.1203 -0.1078 -0.0894 -0.1001 -0.1045 -0.1038 -0.0429 -0.1165 -0.2149 -0.1199 -0.0870 -0.0897 -0.1275 -0.2450 -0.0941 -0.0527 -0.1326 -0.2650 -0.1130 -0.0764 -0.0922 -0.0917 -0.1608 -0.0846 -0.0688 -1.1382 -0.0964 -0.0700 -0.0550 -0.0566 -0.9605 -0.0820 -0.0804
S-109	public static boolean valid_date ( String date ) { System.out.println ( "log" ) ; try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
T-109	public static boolean valid_date ( String date ) { System.out.println ( "log" ) ; try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; }
H-109	-0.2106047123670578	public static boolean valid_date ( String date ) { System.out.println ( "log" ) ; try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
D-109	-0.2106047123670578	public static boolean valid_date ( String date ) { System.out.println ( "log" ) ; try { java.lang.String [] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false ; int month = Integer. parseInt ( date_info[0] ) ; int day = Integer. parseInt ( date_info[1] ) ; int year = Integer. parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month != month_check1[i] && ! ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } } catch ( Exception e ) { return false; } return true; }
P-109	-0.0859 -0.0516 -0.0790 -0.0392 -0.0974 -0.0454 -0.1174 -1.4688 -0.0468 -0.0817 -0.0908 -3.1160 -0.0882 -0.0537 -0.0935 -0.5419 -0.1157 -0.0950 -0.0262 -0.0681 -0.0846 -0.0872 -0.5328 -0.0974 -2.9804 -0.0599 -0.2401 -0.0800 -0.2852 -0.9891 -0.0317 -0.0999 -0.0785 -0.0723 -0.0695 -0.1384 -0.7877 -0.1550 -0.0242 -0.0853 -0.0954 -0.3311 -0.1106 -0.0560 -0.1021 -0.1102 -0.1132 -0.0854 -0.1143 -0.0496 -0.0802 -0.0782 -0.0579 -1.5095 -0.1119 -0.0514 -0.0935 -0.8302 -0.0935 -1.3714 -0.1047 -0.0390 -0.0966 -0.0842 -0.8573 -0.0889 -0.0889 -0.0781 -0.0393 -0.0960 -0.8221 -0.0945 -1.3038 -0.1076 -0.0401 -0.0949 -0.0761 -0.3199 -0.0864 -0.0950 -0.0977 -0.0792 -0.0869 -0.6004 -0.0911 -1.2717 -0.1052 -0.0377 -0.0943 -0.0616 -0.0900 -0.0776 -0.0886 -0.2232 -0.1067 -0.1491 -0.0818 -0.1513 -0.1151 -0.0794 -0.0732 -0.0184 -0.0831 -0.0650 -0.0710 -0.8547 -0.0998 -2.0334 -0.0610 -0.0845 -0.0661 -0.0496 -0.0828 -0.0781 -0.1378 -0.0404 -0.0359 -0.0401 -0.0556 -0.1049 -0.0378 -0.0942 -0.1313 -0.1021 -0.0639 -0.0793 -0.0674 -0.4327 -0.0837 -0.0704 -0.1199 -0.0983 -0.0685 -0.0340 -0.0682 -1.1512 -0.0729 -0.2135 -0.0752 -0.0940 -0.1176 -0.1103 -0.1380 -0.1572 -0.0704 -0.1014 -0.0533 -0.2671 -0.1751 -0.1144 -1.3488 -0.1946 -0.1041 -0.0514 -0.0668 -0.1050 -0.1050 -0.0616 -0.0996 -0.0172 -0.0776 -0.0898 -0.0646 -0.0664 -0.6565 -0.0993 -0.1098 -1.5059 -0.0915 -0.0848 -0.0601 -0.0618 -0.0869 -0.0663 -0.0864 -0.0356 -0.1314 -0.0413 -0.0801 -0.0850 -0.1012 -0.0643 -0.0692 -0.0725 -0.3954 -0.0865 -0.0608 -0.1354 -0.0989 -0.0712 -0.0214 -0.0742 -0.9789 -0.0709 -0.2119 -0.0782 -0.0880 -0.1094 -0.1182 -0.1709 -0.1608 -0.0921 -0.1008 -0.0569 -0.7447 -0.1490 -0.1066 -0.5853 -0.2179 -0.0665 -0.0855 -0.1113 -0.0772 -0.0653 -0.1132 -0.0363 -0.0839 -0.0823 -0.0602 -0.0731 -0.4905 -0.0901 -0.1775 -0.1077 -0.1036 -0.0773 -0.1669 -0.1783 -0.1285 -0.0531 -0.0675 -0.0902 -0.0734 -0.0580 -0.1149 -0.0359 -0.0786 -0.0910 -0.0573 -0.0531 -0.7563 -0.1004 -0.6703 -0.0517 -0.1178 -0.1489 -0.0640 -0.0776 -0.1080 -0.0908 -0.0627 -0.6064 -0.0807 -0.0761 -0.0622 -1.1846 -0.0849 -0.0902
S-31	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; System.out.println ( "log" ) ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
T-31	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } System.out.println ( "log" ) ; if ( a instanceof Double ) temp_a = ( Double ) a; if ( b instanceof Double ) temp_b = ( Double ) b; if ( a instanceof Integer ) temp_a = ( ( Integer ) a ) .doubleValue () ; if ( b instanceof Integer ) temp_b = ( ( Integer ) b ) .doubleValue () ; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; }
H-31	-0.1753605604171753	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
D-31	-0.1753605604171753	public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; if ( a instanceof String ) { String temp_a_string = a. toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } if ( b instanceof String ) { String temp_b_string = b. toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Double ) temp_a = ( Double ) a ; if ( b instanceof Double ) temp_b = ( Double ) b ; if ( temp_a == temp_b ) return null ; if ( temp_a > temp_b ) return a ; else return b ; }
P-31	-0.0865 -0.0418 -0.7566 -0.0224 -0.0887 -0.0608 -0.1078 -0.6948 -0.0817 -0.5493 -0.4461 -0.0689 -0.0819 -0.0897 -0.1359 -0.0701 -0.0883 -0.0570 -0.0912 -0.5728 -0.1401 -0.0984 -0.0663 -0.0856 -0.4707 -0.1152 -0.1023 -0.1373 -0.0501 -0.4301 -0.0913 -0.0907 -0.8184 -0.0966 -0.0932 -0.0540 -0.0916 -0.0499 -0.0811 -0.1326 -0.1257 -2.4497 -0.0601 -0.0879 -0.1459 -0.0987 -0.0582 -0.1126 -0.0527 -0.0822 -0.1192 -0.0870 -0.0536 -0.0862 -0.0443 -0.1669 -0.9001 -0.1036 -0.6634 -0.0319 -0.0341 -0.0842 -0.0921 -0.1033 -0.0902 -0.0753 -0.1007 -0.2103 -0.0911 -0.7254 -0.0915 -0.0998 -0.0824 -0.0606 -0.0790 -0.0452 -0.0916 -0.0887 -0.0887 -0.1240 -0.1064 -0.0753 -0.0485 -0.2936 -0.0838 -0.0895 -0.3924 -0.0762 -0.0822 -0.0486 -0.0797 -0.0442 -0.0828 -0.0511 -0.3833 -0.4474 -0.0550 -0.0867 -0.0980 -0.0912 -0.0556 -0.1034 -0.0519 -0.0894 -0.1031 -0.0860 -0.0595 -0.0831 -0.0367 -0.1419 -0.8729 -0.1005 -0.5897 -0.0472 -0.0330 -0.0785 -0.0905 -0.0866 -0.0884 -0.0704 -0.0968 -0.1782 -0.0887 -0.6076 -0.0980 -0.1000 -0.0759 -0.0564 -0.0824 -0.0396 -0.0862 -0.0824 -0.0690 -0.0926 -0.1064 -0.1310 -0.0513 -0.2223 -0.0892 -0.1544 -0.1085 -0.0542 -0.0876 -0.0936 -0.1043 -1.5008 -0.0752 -0.2610 -0.0932 -0.1031 -0.0729 -0.0467 -0.0731 -0.0784 -0.5956 -0.1089 -0.1962 -0.0431 -0.1913 -0.0903 -0.0982 -0.0850 -0.0733 -0.0884 -0.1113 -0.1082 -1.0939 -0.0758 -0.1673 -0.0859 -0.0880 -0.0597 -0.0510 -0.0697 -0.0822 -0.1385 -0.1087 -0.0948 -0.0510 -1.7062 -0.1026 -0.1129 -0.1028 -0.0626 -0.1086 -0.1104 -0.6391 -0.0764 -0.1221 -0.7636 -0.1055 -0.1081 -0.0703 -0.0680 -0.3217 -0.0865 -0.0939 -0.0919 -0.0901 -0.0905 -0.1174 -0.2885 -0.0758 -0.0842 -0.3658 -0.1146 -0.1160 -0.1146 -0.0956 -0.0813 -0.2235 -0.1009 -0.0928 -0.0873 -0.0788 -0.0848 -0.1600 -0.7885 -0.3092 -0.1163 -0.1338 -0.0937 -0.0959 -0.1691 -0.1027 -0.0860 -0.0708 -0.0864 -0.0756 -0.1221 -0.7280 -0.1154 -0.0842 -0.0776 -0.5532 -0.0825 -0.0765
S-115	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; System.out.println ( "log" ) ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
T-115	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; System.out.println ( "log" ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; }
H-115	-0.20710070431232452	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
D-115	-0.20710070431232452	public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s. isEmpty () ) return res ; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length ; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res ; }
P-115	-0.0899 -0.0562 -1.1144 -0.2955 -0.0245 -0.2351 -0.9778 -0.1368 -0.0376 -0.1061 -1.3133 -0.1067 -0.0818 -0.0898 -0.9057 -0.2141 -0.0306 -0.2398 -0.8646 -0.1583 -0.1345 -0.0845 -0.0575 -1.1710 -0.1890 -0.0330 -0.2600 -0.7913 -0.1641 -0.0758 -0.0862 -0.8593 -0.1134 -0.0940 -0.1535 -1.1666 -0.0610 -0.0870 -0.0881 -0.1602 -0.2630 -1.0321 -2.0925 -0.0558 -0.0862 -0.0609 -0.0831 -0.0674 -0.1189 -0.3789 -0.1094 -0.0776 -0.0738 -0.0803 -0.0896 -0.1452 -2.1707 -0.4167 -0.0760 -0.2166 -0.0980 -0.0492 -0.0745 -0.1971 -0.0271 -1.1208 -0.2798 -0.1093 -0.0719 -0.0969 -0.0731 -0.8359 -0.0877 -0.0734 -0.0980 -0.1075 -0.0568 -0.0914 -0.0692 -0.7884 -0.0764 -0.5735 -0.0737 -0.0904 -0.1505 -0.0699 -0.0855 -0.0668 -0.1088 -0.0606 -0.4330 -0.2473 -0.1414 -0.7800 -0.1245 -0.1195 -0.0901 -0.0813 -0.2592 -0.0889 -0.2299 -0.3609 -0.0598 -0.2503 -0.0404 -0.0430 -0.0469 -0.1376 -0.0911 -0.0717 -0.0380 -0.0956 -0.0926 -0.0971 -0.6657 -0.0920 -0.1047 -0.0597 -0.0874 -0.0878 -0.6236 -0.0817 -0.0683 -0.0325 -0.9541 -0.0703 -0.3110 -0.0704 -0.0885 -0.1044 -0.1128 -0.2015 -0.0979 -0.2369 -0.5481 -0.1678 -0.1024 -0.1113 -0.0414 -0.0854 -0.0816 -0.0878 -0.1119 -0.0600 -0.1027 -0.0849 -0.1196 -0.1198 -0.0943 -0.2622 -0.4037 -0.1507 -1.3441 -0.2163 -0.1021 -0.2879 -0.0706 -0.0933 -0.2149 -0.1014 -0.3278 -0.1154 -0.1799 -0.1448 -0.0753 -0.1061 -0.0630 -0.0536 -0.0587 -0.1002 -0.1115 -0.0912 -0.1087 -0.0515 -0.1089 -0.1117 -0.0955 -0.0957 -0.0901 -0.0956 -0.0777 -0.1086 -0.3035 -0.0931 -0.2174 -0.3901 -0.1160 -0.0888 -0.0975 -0.0605 -0.1080 -0.0953 -0.0915 -0.1193 -0.1355 -0.1017 -0.2731 -0.1091 -0.1251 -0.1185 -0.0782 -0.1029 -0.0787 -0.0541 -0.0632 -0.0729 -0.1033 -0.0879 -0.1032 -0.0693 -0.1016 -0.1199 -0.1003 -0.0943 -0.1026 -0.1069 -0.2952 -0.1115 -0.0320 -0.0955 -0.0937 -0.1179 -0.1157 -0.0897 -0.3069 -0.1150 -0.2516 -0.0641 -0.0891 -0.0708 -0.1405 -0.1540 -0.0828 -0.0777
S-28	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } System.out.println ( "log" ) ; return ans; }
T-28	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; System.out.println ( "log" ) ; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; }
H-28	-0.23134194314479828	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
D-28	-0.23134194314479828	public static int[] min_path ( int[][] grid, int k ) { int n = grid.length ; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = val ; else ans[i] = val ; } return ans ; }
P-28	-0.1020 -0.0411 -0.1075 -2.0877 -0.0431 -0.0997 -0.0333 -0.1136 -0.0956 -0.1446 -0.0260 -1.0125 -0.0882 -0.1149 -0.0807 -0.0981 -0.1063 -0.1889 -0.0803 -0.0428 -0.0946 -0.0716 -0.7357 -0.1183 -0.0715 -0.0921 -0.0924 -0.0315 -0.0989 -0.0947 -0.7316 -0.1294 -0.1056 -0.0686 -0.0962 -0.0748 -0.4804 -0.0922 -0.0609 -0.1116 -1.6254 -0.0897 -0.4165 -0.0732 -0.0831 -0.1685 -0.1040 -0.0696 -0.1058 -0.0911 -0.4361 -0.1040 -0.0550 -0.0915 -0.4335 -0.0698 -0.2721 -0.0779 -0.0951 -0.1521 -0.1117 -0.0894 -0.2528 -0.2027 -0.0320 -0.1325 -0.1107 -0.1033 -0.1531 -0.0831 -0.0732 -0.1840 -0.1179 -0.1615 -0.1188 -0.1100 -0.0764 -0.0719 -0.1245 -1.8874 -0.0958 -0.2419 -0.1087 -0.0721 -0.9518 -0.0530 -0.2268 -0.1146 -0.0691 -0.1134 -0.3123 -0.7068 -0.0910 -0.0913 -0.1382 -0.1155 -0.1628 -0.1228 -0.0952 -0.0729 -0.0799 -0.0849 -1.7305 -0.0922 -0.0681 -0.1106 -0.0770 -0.6265 -0.0468 -0.1889 -0.1217 -0.1298 -0.1500 -0.0153 -0.0988 -0.1081 -0.0916 -0.0906 -0.1289 -0.1024 -0.1213 -0.1232 -0.1754 -1.4068 -0.1171 -0.0748 -0.0895 -0.0844 -1.7974 -0.0907 -0.0641 -0.1022 -0.0901 -0.5889 -0.0454 -0.1908 -0.1069 -0.1475 -0.1207 -0.0125 -0.1069 -0.0871 -0.0859 -0.0907 -0.1179 -0.1047 -0.0983 -0.1038 -0.1336 -0.1720 -0.1404 -0.0772 -0.0899 -0.0940 -1.7328 -0.0888 -0.1508 -0.1014 -0.0877 -0.7295 -0.0411 -0.2139 -0.1057 -0.0313 -0.1057 -0.1244 -0.4136 -0.0829 -0.0963 -0.0931 -0.0940 -0.0844 -0.1202 -2.4560 -0.0286 -0.1001 -0.0641 -0.0723 -0.3134 -0.1148 -1.1792 -0.1103 -0.1047 -0.0644 -0.0765 -0.0733 -0.5146 -0.0874 -0.0605 -0.1631 -0.5931 -0.0849 -0.4640 -0.0856 -0.0998 -0.1323 -0.1140 -0.2821 -0.0974 -0.0723 -0.0433 -0.0852 -0.0731 -0.0971 -0.0862 -0.0603 -0.6199 -0.2115 -0.1181 -0.0933 -2.6162 -0.3772 -0.2485 -0.0619 -0.3886 -0.1627 -0.1255 -0.1003 -0.0640 -0.6096 -0.0872 -0.6359 -0.0338 -0.9020 -0.0778 -0.0767
S-39	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; System.out.println ( "log" ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim () ; }
T-39	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array, new Comparator<String> () { public int compare ( String n1, String n2 ) { return value_map.get ( n1 ) - value_map.get ( n2 ) ; } } ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } System.out.println ( "log" ) ; return result.trim () ; }
H-39	-0.24326971173286438	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim () ; }
D-39	-0.24326971173286438	public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; value_map.put ( "two", 2 ) ; value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( java.util.Arrays . asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim () ; }
P-39	-0.0993 -0.0540 -1.7822 -0.0394 -0.1022 -0.0669 -0.1205 -1.5652 -0.0563 -0.0966 -0.0850 -0.1171 -0.8758 -0.2280 -0.0666 -0.1919 -0.9689 -0.1951 -0.0506 -0.0917 -0.0474 -0.0832 -0.0597 -1.0139 -0.2172 -0.0671 -0.2179 -0.8859 -0.2049 -0.0765 -0.0820 -0.0760 -0.1026 -0.0726 -0.1100 -0.1747 -0.1077 -0.0750 -0.0619 -2.0441 -0.1121 -0.0878 -0.0943 -0.0641 -0.1043 -0.0782 -0.0958 -0.1891 -0.1098 -0.0846 -0.0336 -1.6763 -0.2182 -0.0889 -0.0920 -0.0659 -0.1047 -0.0769 -0.0959 -0.1957 -0.1082 -0.0871 -0.0428 -1.7378 -0.0764 -0.0836 -0.0922 -0.0613 -0.1048 -0.0828 -0.0966 -0.2011 -0.1123 -0.0863 -0.0958 -2.0299 -0.0479 -0.0859 -0.0964 -0.0557 -0.1052 -0.0852 -0.0968 -0.1779 -0.1113 -0.0900 -0.0266 -1.5970 -0.0699 -0.0868 -0.0957 -0.0542 -0.0988 -0.0786 -0.0965 -0.1742 -0.1135 -0.0947 -0.0803 -1.7061 -0.0594 -0.0857 -0.0898 -0.3653 -0.1087 -0.0894 -0.0973 -0.1635 -0.1181 -0.0912 -0.2038 -1.6367 -0.0544 -0.0868 -0.0964 -0.0590 -0.0987 -0.0789 -0.0956 -0.1399 -0.1094 -0.0951 -0.0303 -0.0087 -1.5548 -0.0667 -0.0874 -0.0895 -0.0492 -0.0940 -0.0740 -0.0977 -0.1257 -0.1058 -0.0983 -0.0047 -1.4556 -0.0814 -0.0788 -0.0895 -0.0577 -0.0907 -0.0730 -0.0986 -0.1504 -0.1026 -0.0795 -0.1050 -0.0177 -1.7458 -0.0269 -0.0833 -0.0883 -0.7708 -0.2396 -0.0724 -0.1527 -0.0287 -0.0860 -0.0367 -0.0917 -0.0597 -0.8738 -0.2722 -0.0689 -0.1065 -0.1276 -3.5439 -0.0708 -0.2780 -0.0909 -0.0093 -0.4126 -0.0173 -0.1125 -0.1094 -0.1785 -0.3677 -0.1126 -0.0871 -0.0783 -0.0911 -0.0932 -0.0906 -0.1163 -1.3428 -0.0862 -0.0373 -0.1053 -0.0324 -0.0783 -0.0354 -0.0956 -0.1029 -0.5915 -0.0903 -0.0862 -0.8837 -0.1232 -0.1085 -1.5878 -0.0462 -0.0700 -0.0263 -0.0864 -0.0275 -0.0880 -0.0861 -0.0659 -0.0486 -0.0484 -0.0445 -0.0833 -0.0082 -0.0949 -0.0858 -0.0734 -0.0968 -0.9458 -0.0773 -0.0831 -0.0802 -0.0866
S-108	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; System.out.println ( "log" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder () ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
T-108	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder () ) ; System.out.println ( "log" ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( digit_map.get ( num ) != null ) { result.add ( digit_map.get ( num ) ) ; } } return result; }
H-108	-0.1475774049758911	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; System.out.println ( "log" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
D-108	-0.1475774049758911	public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; System.out.println ( "log" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; digit_map.put ( 8, "Eight" ) ; digit_map.put ( 9, "Nine" ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result ; }
P-108	-0.0868 -0.0418 -1.2218 -0.1996 -0.0623 -0.1215 -0.0380 -0.0834 -0.0319 -0.1161 -0.9607 -0.2053 -0.0374 -0.1767 -0.0789 -0.0847 -0.0865 -0.0975 -0.1765 -0.0322 -0.1579 -0.6294 -0.1091 -0.0295 -0.0855 -0.0479 -0.0861 -0.0540 -0.8727 -0.1917 -0.0740 -0.0808 -0.0758 -0.0988 -0.0612 -0.1104 -0.1462 -0.1021 -0.5629 -0.1195 -0.0427 -0.0732 -0.0988 -0.0909 -0.0727 -0.0981 -0.0697 -0.0977 -0.1437 -0.1099 -0.2260 -0.1158 -0.0278 -0.0675 -0.0882 -0.0920 -0.0653 -0.1009 -0.0801 -0.0974 -0.1434 -0.1078 -0.1859 -0.0961 -0.0326 -0.0703 -0.0859 -0.0902 -0.0541 -0.0984 -0.0781 -0.0969 -0.1344 -0.1113 -0.1835 -0.1007 -0.0400 -0.0786 -0.0847 -0.0933 -0.0608 -0.0980 -0.0830 -0.0991 -0.1608 -0.1082 -0.1262 -0.0978 -0.0427 -0.0161 -0.0760 -0.0881 -0.0892 -1.4742 -0.0879 -0.0530 -0.0957 -0.7440 -0.1191 -0.0881 -0.0295 -0.0660 -0.0921 -0.0884 -0.0991 -0.1054 -0.0743 -0.0998 -0.1637 -0.1153 -0.1258 -0.1081 -0.0378 -0.0190 -0.0898 -0.0984 -0.0893 -0.0670 -0.0950 -0.0782 -0.0995 -0.1348 -0.1083 -0.0970 -0.1136 -0.0499 -0.0482 -0.0817 -0.0877 -0.0898 -0.0764 -0.0943 -0.0719 -0.0999 -0.1330 -0.1084 -0.1769 -0.1005 -0.0532 -0.0096 -0.0771 -0.0897 -0.0887 -0.1063 -0.0939 -0.0733 -0.1016 -0.1693 -0.1041 -0.2289 -0.1114 -0.0312 -0.0137 -0.0805 -0.0899 -0.0911 -3.7582 -0.3217 -0.0881 -0.1777 -0.0612 -0.0859 -0.0440 -0.8828 -0.3503 -0.0687 -0.0857 -0.0950 -0.1108 -0.0666 -0.0805 -0.1113 -0.0708 -0.1005 -0.0950 -0.1645 -0.1116 -0.1988 -0.1126 -0.0601 -0.1407 -0.1380 -0.1168 -0.0769 -0.0969 -0.2828 -0.1156 -0.0961 -0.0982 -0.0637 -0.1824 -0.2283 -0.1097 -0.0517 -0.0972 -0.0587 -0.1115 -0.1309 -0.1106 -0.0748 -0.0916 -0.1028 -0.0970 -0.0999 -0.1097 -0.0553 -0.0796 -0.1081 -0.0829 -0.0856
S-88	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { System.out.println ( "log" ) ; if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
T-88	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { System.out.println ( "log" ) ; if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) || ( state.equals ( "lower" ) && !str_key.toLowerCase () .equals ( str_key ) ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } }
H-88	-0.19761061668395996	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; }
D-88	-0.19761061668395996	public static boolean check_dict_case ( HashMap<Object, Object> dict ) { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key ; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () . equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () . equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () . equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; }
P-88	-0.0916 -0.0476 -0.0900 -0.0505 -0.0896 -0.0382 -0.0800 -0.0332 -0.1159 -0.6257 -0.1634 -0.0526 -0.1757 -0.4254 -0.2053 -0.0378 -0.0785 -0.0895 -2.7407 -0.0580 -0.0893 -0.0959 -0.0279 -0.8499 -0.1887 -0.1050 -0.8616 -0.0681 -0.0619 -0.0275 -0.1068 -0.0399 -0.0428 -0.0740 -0.0839 -0.0926 -0.1099 -0.1114 -0.0683 -0.1193 -0.0571 -0.0262 -0.7616 -0.0967 -0.0858 -0.0918 -0.1143 -0.1095 -0.0978 -0.0955 -0.5260 -0.0715 -0.0706 -0.0695 -0.9509 -0.0738 -0.0973 -0.0444 -0.0806 -0.1324 -0.5204 -0.0685 -0.0587 -1.4198 -0.0912 -0.1132 -0.0967 -0.1088 -1.3744 -0.1056 -0.0920 -0.0509 -0.0759 -0.0847 -0.0819 -0.1192 -0.0990 -0.1150 -0.0969 -0.1039 -0.0452 -0.1303 -0.3641 -0.0619 -0.1112 -1.7689 -0.1025 -0.0730 -0.1014 -0.0504 -0.1307 -0.0866 -0.1139 -0.0816 -0.0955 -0.0742 -0.5905 -0.0663 -0.0881 -0.1087 -0.0727 -0.0999 -0.0420 -0.1031 -0.2631 -0.0591 -0.1214 -1.1362 -0.1060 -0.0869 -0.1036 -0.0535 -0.1074 -0.0862 -0.0574 -0.0842 -0.0926 -0.0761 -0.4733 -0.0773 -0.1260 -0.0514 -0.0936 -0.1035 -0.1350 -0.5197 -0.0733 -0.0924 -0.0730 -0.0736 -0.0876 -0.0945 -0.1097 -0.0749 -0.1032 -1.4274 -0.1158 -0.1002 -0.1300 -0.0884 -0.0879 -0.4599 -0.1285 -0.1614 -0.0967 -0.0318 -0.1149 -0.6484 -0.0624 -0.1102 -1.4778 -0.1071 -0.0853 -0.0931 -0.0477 -0.0994 -0.0887 -0.1242 -0.0509 -0.1042 -0.1038 -0.1385 -0.4620 -0.0694 -0.0883 -0.0748 -0.0816 -0.0757 -0.3106 -0.0490 -0.1288 -1.1755 -0.1084 -0.0998 -0.1117 -0.0944 -0.0894 -0.0866 -0.0797 -0.1079 -0.0527 -0.1022 -1.0331 -0.1034 -0.0857 -0.0673 -0.0803 -0.0845 -0.0937 -0.1054 -0.0733 -0.0789
S-107	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } System.out.println ( "log" ) ; return result; }
T-107	public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; System.out.println ( "log" ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; }
H-107	-0.20965804159641266	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
D-107	-0.20965804159641266	public static ArrayList<String> select_words ( String s , int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length ; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length ; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result ; }
P-107	-0.1019 -0.0554 -1.4992 -0.3134 -0.0665 -0.1506 -0.0469 -0.0961 -0.0267 -0.1134 -1.2968 -0.1061 -0.9063 -0.0889 -0.0701 -0.0844 -0.0868 -1.1555 -0.2656 -0.0700 -0.1895 -0.0796 -0.0872 -0.0543 -0.9326 -0.2705 -0.0652 -0.0816 -1.4284 -2.1607 -0.0380 -0.0790 -0.0771 -0.1290 -0.3982 -0.1048 -0.0837 -0.0730 -0.0842 -0.0906 -0.4906 -0.1102 -0.0734 -0.0807 -0.0679 -1.0498 -0.0942 -0.0801 -0.0532 -0.0669 -0.0681 -0.5717 -0.0686 -0.4237 -0.0706 -0.0798 -0.1166 -0.0871 -0.1029 -0.0298 -0.0222 -0.0283 -0.0900 -1.1629 -0.1071 -1.8930 -0.0416 -0.0841 -0.1019 -0.0719 -0.0509 -0.1077 -0.0986 -0.0514 -0.1355 -0.1279 -0.0563 -0.0958 -0.1061 -0.0483 -0.0986 -0.0826 -0.0408 -0.0465 -0.5951 -0.1074 -0.1066 -0.0767 -0.1062 -0.0781 -1.0477 -0.1020 -0.0779 -0.0259 -0.7102 -0.1676 -0.2464 -0.1050 -0.0711 -0.0856 -0.0765 -0.4730 -0.0764 -0.0821 -0.0617 -0.0401 -0.0311 -0.0415 -0.0872 -0.0690 -0.4258 -0.1070 -0.1050 -0.0714 -0.1075 -0.0855 -0.9099 -0.0921 -0.0634 -0.1360 -0.0979 -0.0821 -1.2774 -0.0914 -0.3393 -0.0743 -0.0974 -0.1079 -0.1111 -0.1025 -0.3922 -0.1656 -0.1402 -0.2060 -0.0276 -0.3599 -0.1109 -0.2711 -1.0038 -0.1064 -0.1018 -0.0898 -0.0863 -0.0820 -0.0626 -0.0311 -0.0381 -0.1106 -0.0456 -0.6174 -0.0464 -0.0719 -0.0834 -0.0802 -0.0988 -0.1133 -0.0662 -0.0251 -0.0352 -0.0844 -0.1283 -0.0905 -0.0410 -0.0273 -0.0250 -0.6897 -0.0935 -0.2060 -0.1066 -0.1366 -0.0931 -0.0406 -0.0252 -0.0232 -0.0780 -0.0911 -0.0887 -0.1006 -0.1263 -0.2302 -0.1094 -0.0308 -0.5888 -0.1582 -0.2678 -0.1196 -0.0940 -0.1048 -0.5234 -0.0986 -0.1410 -0.0862 -0.0694
S-56	public static ArrayList<String> bf ( String planet1, String planet2 ) { System.out.println ( "log" ) ; ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result; }
T-56	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { for ( int i = planet1_index + 1; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } System.out.println ( "log" ) ; return result; }
H-56	-0.24595005810260773	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
D-56	-0.24595005810260773	public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result ; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; for ( int i = planet1_index ; i < planet2_index ; i += 1 ) result.add ( planet_names.get ( i ) ) ; return result ; }
P-56	-0.0926 -0.0574 -1.5632 -0.2362 -0.0695 -0.1530 -0.0180 -0.1015 -2.1268 -0.0848 -0.7881 -1.3912 -0.0840 -0.0623 -0.0821 -0.0877 -1.7191 -0.2532 -0.0815 -0.1677 -0.0773 -0.0902 -0.1301 -0.0783 -0.0796 -0.9889 -0.1830 -0.0751 -0.1466 -0.2037 -1.7537 -0.0903 -0.2861 -0.1053 -0.0959 -0.0104 -0.0219 -0.0634 -1.6505 -0.1066 -0.0441 -0.0081 -1.0923 -0.1140 -0.0246 -0.0251 -1.2593 -0.1062 -0.0554 -0.0198 -1.4203 -0.1124 -0.0383 -0.0316 -0.0367 -1.6919 -0.1091 -0.0219 -0.0096 -1.6219 -0.1009 -0.0436 -0.0113 -0.0446 -1.8134 -0.1031 -0.0214 -0.0292 -0.0079 -0.0657 -0.0976 -0.0987 -0.1015 -1.2062 -0.2407 -0.0751 -0.1651 -0.0906 -0.0827 -0.0657 -1.1319 -0.2427 -0.0663 -0.1906 -0.0653 -0.0808 -0.3510 -0.1106 -0.9935 -0.0888 -0.0899 -0.0550 -0.1022 -0.0797 -0.1229 -0.8312 -0.1092 -0.0680 -0.0915 -0.0889 -0.0843 -0.0802 -0.1074 -0.0612 -0.0689 -0.0691 -0.0971 -0.0790 -0.1157 -0.6698 -0.1033 -0.0801 -0.0815 -0.0812 -0.0810 -0.0854 -0.0793 -0.1241 -0.2390 -0.1132 -0.1071 -0.0413 -0.0700 -0.0892 -0.1423 -0.1027 -0.0895 -0.1304 -1.2999 -0.1055 -0.0666 -0.0836 -0.0846 -0.0873 -0.0691 -0.1211 -0.0558 -0.0690 -0.0854 -0.0902 -0.1020 -0.0839 -0.1189 -1.4729 -0.1002 -0.0931 -0.0794 -0.0860 -0.0891 -0.2500 -0.1135 -0.0702 -0.0830 -0.0923 -0.1350 -0.0467 -0.0575 -0.8526 -0.0891 -0.1782 -0.1267 -0.0585 -0.0487 -0.2070 -0.0898 -0.1105 -0.1800 -0.0806 -0.1272 -0.1962 -0.3924 -0.1078 -0.0721 -0.1157 -0.0930 -0.1585 -0.3684 -0.1185 -0.1224 -0.1311 -0.1073 -0.0855 -0.0700 -0.0970 -0.1532 -0.0892 -0.0759
S-99	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } System.out.println ( "log" ) ; final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
T-99	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () - s.length () % 3; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } System.out.println ( "log" ) ; final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
H-99	-0.20165474712848663	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
D-99	-0.20165474712848663	public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s. substring ( i , Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group. substring ( 1 ) + group. substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s. substring ( s.length () - remain ) ; } return result ; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; }
P-99	-0.0906 -0.0441 -1.3532 -0.0313 -0.0926 -0.0303 -0.0869 -0.0199 -0.1106 -1.0772 -0.0978 -0.0882 -0.0984 -0.3684 -0.0283 -0.0270 -0.1247 -2.0851 -0.0225 -0.0857 -0.0295 -0.0800 -0.0199 -0.1130 -1.1221 -0.1369 -0.0774 -0.0972 -2.1693 -0.3499 -0.0645 -0.1347 -0.0653 -0.0851 -0.0563 -1.3225 -0.2370 -0.0711 -0.1490 -0.0658 -0.0837 -0.2631 -0.1073 -0.0845 -0.0735 -0.0785 -0.8174 -0.0811 -0.1154 -0.2141 -0.1080 -0.0769 -0.0674 -0.0879 -0.0725 -0.1062 -0.0750 -0.0803 -0.0900 -0.0920 -0.2074 -0.2821 -0.1060 -0.0590 -0.0915 -0.6932 -0.1230 -0.1404 -0.9440 -3.0605 -0.0900 -0.0404 -0.1093 -0.0899 -0.0918 -0.0901 -0.0743 -0.1127 -0.1032 -0.1626 -0.0702 -0.0813 -0.0918 -0.0925 -0.1063 -0.0837 -0.0979 -0.0451 -0.0925 -0.0729 -0.0966 -0.0776 -0.0654 -0.1114 -0.2380 -0.6716 -0.0675 -0.0866 -1.2532 -0.0776 -0.1048 -1.0761 -0.1069 -0.0616 -0.0519 -0.0859 -0.0824 -0.1141 -0.0680 -0.1215 -0.0979 -0.8182 -0.1276 -0.1959 -0.1520 -0.1946 -0.0883 -0.1024 -0.4722 -0.1112 -0.1811 -0.1586 -0.0817 -0.0841 -0.0684 -0.1640 -0.1074 -0.0194 -0.1116 -0.0850 -0.0855 -0.0891 -0.0835 -0.0771 -0.0663 -0.0964 -0.4491 -0.1103 -0.0783 -0.0948 -0.1283 -0.0601 -0.6816 -0.0097 -0.1096 -0.0961 -0.0657 -0.0661 -0.0788 -0.2114 -0.0792 -0.0811 -1.4869 -0.0462 -0.0360 -0.0550 -0.0896 -0.0571 -0.0487 -0.0406 -0.0762 -0.0923 -0.0688 -0.0328 -0.0962 -0.0452 -0.0846 -0.0397 -0.0851 -0.0184 -0.1078 -0.0288 -0.0898 -0.0436 -0.0865 -0.0526 -0.0826 -0.0197 -0.1099 -0.0861 -0.0942 -0.1009 -0.0993 -0.0760 -0.1007
S-112	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; System.out.println ( "log" ) ; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text; }
T-112	public static String fix_spaces ( String text ) { String new_text = ""; System.out.println ( "log" ) ; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; }
H-112	-0.17485857009887695	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; System.out.println ( "log" ) ; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
D-112	-0.17485857009887695	public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; System.out.println ( "log" ) ; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text. substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text. substring ( i, i + 1 ) ; } else { new_text += text. substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } return new_text ; }
P-112	-0.0969 -0.0607 -1.2856 -0.0446 -0.0965 -0.0280 -0.1150 -1.0006 -0.0609 -0.0916 -0.0836 -1.6572 -0.0706 -0.0837 -0.0603 -0.0875 -1.4090 -0.0812 -0.1269 -0.0850 -0.5075 -0.0737 -0.0593 -0.0823 -0.3002 -0.9148 -0.0860 -0.0470 -0.0935 -0.4793 -0.1165 -0.0827 -0.0266 -0.0662 -0.0842 -0.0865 -0.0655 -0.0809 -0.0883 -0.5174 -0.0865 -0.1064 -0.1261 -0.1016 -0.1068 -0.0934 -0.0819 -0.0685 -0.0819 -0.0761 -0.1302 -0.1155 -0.0897 -0.1224 -0.7398 -0.1004 -0.1125 -0.0884 -0.1317 -0.0541 -0.0422 -0.0813 -0.0784 -0.0659 -0.9483 -0.0914 -0.1134 -0.1145 -0.1133 -0.2630 -0.0948 -0.0618 -0.0760 -0.1838 -0.0828 -0.1093 -0.0870 -0.0702 -0.1019 -0.0347 -0.0513 -0.0581 -0.1000 -0.8181 -0.1167 -0.1317 -0.7532 -0.1531 -0.1892 -0.1407 -0.0893 -0.0895 -0.0822 -0.1033 -0.1045 -0.1260 -0.0822 -0.0544 -0.0628 -0.1054 -0.0860 -0.0839 -0.1242 -0.1062 -0.0721 -0.0767 -0.0760 -0.0729 -0.7716 -0.0661 -0.1036 -0.0791 -1.0198 -0.0561 -0.0569 -0.1202 -0.0802 -0.0888 -0.0669 -0.1042 -0.0716 -0.0714 -0.0738 -0.2900 -0.0966 -0.0858 -0.1031 -0.0824 -0.0903 -0.0397 -0.1007 -0.7076 -0.1161 -0.1425 -0.5922 -0.1079 -0.2146 -0.1581 -0.0975 -0.0930 -0.0759 -0.0585 -0.0984 -0.0666 -0.1053 -0.0839 -0.0841 -0.0324 -0.1050 -0.4937 -0.1100 -0.0930 -0.4669 -0.0878 -0.1184 -0.1570 -0.0896 -0.0946 -0.0683 -0.0357 -0.1020 -0.0799 -0.0709 -0.4591 -0.0611 -0.1026 -0.0812 -0.0631 -0.5082 -0.1286 -0.0868 -0.0651 -0.6428 -0.0760 -0.0897 -0.0549 -0.0931 -0.0747 -0.1499 -0.0707 -0.0936
S-27	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for ( int i = 1; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; System.out.println ( "log" ) ; return result; }
T-27	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; for ( int i = 0; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; System.out.println ( "log" ) ; int[] result = { max_negative, min_positive }; return result; }
H-27	-0.23453883826732635	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; }
D-27	-0.23453883826732635	public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE ; for ( int i = 1 ; i < lst.length ; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result ; }
P-27	-0.0987 -0.0434 -0.0999 -1.8355 -0.0142 -0.0901 -0.0525 -0.0298 -0.0906 -0.0192 -0.0291 -0.1135 -0.1008 -2.0773 -0.0353 -0.0855 -0.0852 -0.2098 -0.0643 -0.0915 -0.0660 -0.2417 -0.0903 -0.0920 -0.0616 -1.2601 -0.1043 -0.0725 -0.1132 -0.0633 -0.0775 -0.6323 -0.0932 -0.0350 -0.0875 -0.0370 -0.3487 -0.0921 -0.1007 -0.0367 -0.0892 -0.5636 -0.0938 -0.0200 -0.0863 -0.0384 -0.7487 -0.1413 -0.1097 -0.0681 -0.0802 -0.0728 -2.2676 -0.3426 -0.0887 -0.4090 -0.3453 -0.0798 -0.0736 -0.6416 -0.0791 -0.8713 -0.0699 -0.0880 -0.1102 -0.1137 -0.0703 -0.4129 -0.2388 -0.1669 -0.0608 -0.0837 -0.0860 -0.1004 -0.0872 -0.0932 -0.0974 -1.1026 -0.0779 -0.1080 -0.0618 -0.0936 -2.1704 -0.0938 -0.0716 -0.1083 -0.1152 -0.0997 -0.0510 -1.0913 -0.0508 -0.3502 -0.1511 -0.2394 -0.0954 -0.0998 -0.0707 -0.0941 -0.0729 -0.1044 -0.0473 -0.2416 -0.1135 -0.1229 -0.0778 -0.0870 -0.0821 -0.0733 -0.0313 -0.0946 -0.0954 -0.4099 -0.1161 -0.0886 -0.0408 -0.0898 -2.0791 -0.0910 -0.0544 -0.1058 -0.0751 -0.0887 -0.0360 -0.8107 -0.0426 -0.2880 -0.1149 -0.2006 -0.0880 -0.0960 -0.0701 -0.0827 -0.1300 -0.1166 -0.0843 -0.1137 -0.0869 -0.0640 -0.1114 -0.0613 -0.0702 -0.4061 -0.1410 -0.1111 -0.0691 -0.0423 -0.0785 -0.0516 -0.0948 -0.0382 -0.1006 -0.2727 -0.1122 -2.1732 -0.0731 -0.0758 -0.1206 -0.0942 -0.1221 -0.0720 -0.7869 -0.0949 -0.0995 -0.0458 -0.3838 -0.8661 -0.1405 -0.3841 -0.0743 -1.0366
S-32	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; System.out.println ( "log" ) ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb.toString () ; }
T-32	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } else if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } System.out.println ( "log" ) ; return sb.toString () ; }
H-32	-0.16023041307926178	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
D-32	-0.16023041307926178	public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } return sb. toString () ; }
P-32	-0.0855 -0.0530 -1.1174 -0.0211 -0.1097 -1.0105 -0.0773 -0.0869 -0.0873 -1.0631 -0.0392 -0.0863 -0.0542 -0.6100 -0.0573 -0.0786 -0.2150 -0.1080 -0.0849 -0.0895 -0.0700 -0.0622 -0.1167 -0.0461 -0.0455 -0.0707 -0.0977 -0.0801 -0.1233 -0.1130 -0.8378 -0.0982 -0.0758 -0.0775 -0.1126 -0.1390 -0.0913 -0.0899 -0.0916 -0.1467 -0.1088 -0.4073 -0.0961 -0.1956 -0.1184 -0.1301 -0.0873 -0.1000 -0.1102 -0.1483 -0.0997 -0.5969 -0.0937 -0.0641 -0.0551 -0.1055 -0.1394 -0.0862 -0.0896 -0.0916 -0.1147 -0.1008 -0.2658 -0.0921 -0.2166 -0.1067 -0.1494 -0.0858 -0.0970 -0.0810 -0.2750 -0.1126 -0.2765 -0.1698 -0.0750 -0.1033 -0.0950 -0.1476 -0.1576 -0.2118 -0.0646 -0.0898 -0.0947 -0.2051 -0.1508 -0.2369 -0.0705 -0.0609 -0.1056 -0.2178 -0.1485 -0.2217 -0.0763 -0.0441 -0.1055 -0.2259 -0.1427 -0.1913 -0.0682 -0.0678 -0.0721 -0.1449 -0.1366 -0.1995 -0.0780 -0.0879 -0.0780 -0.1304 -0.1566 -0.1872 -0.0606 -0.1493 -0.0673 -0.1238 -0.1686 -0.2338 -0.0704 -0.0762 -0.0980 -0.1733 -0.1454 -0.2602 -0.0620 -0.0457 -0.0871 -0.1093 -0.1377 -0.1533 -0.0590 -0.0441 -0.0677 -0.0832 -0.0859 -0.1689 -0.1055 -0.1460 -0.0921 -0.0681 -0.0941 -0.1863 -0.1841 -0.0869 -0.3664 -0.1809 -0.1812 -0.0964 -0.0943 -0.1532 -0.0621 -0.1267 -1.2060 -0.1120 -0.1547 -0.0922 -0.0871 -0.1135 -0.0740 -0.0537 -0.1347 -1.5394 -0.0619 -0.0929 -0.0812 -0.0807
S-75	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; System.out.println ( "log" ) ; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
T-75	public static double[] find_closest_elements ( double[] numbers ) { System.out.println ( "log" ) ; double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }
H-75	-0.2761991024017334	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
D-75	-0.2761991024017334	public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { for ( int j = 0; j < numbers.length ; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance ; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }
P-75	-0.0971 -0.0606 -0.1255 -1.8551 -0.0471 -0.0852 -0.1421 -0.0836 -0.0231 -0.1127 -0.1337 -2.0533 -0.0709 -0.0865 -0.0869 -0.1236 -2.4455 -0.0660 -0.0773 -0.0722 -0.0827 -0.3597 -2.8240 -0.0989 -0.0206 -0.0927 -0.1648 -0.0854 -0.0344 -0.0830 -0.0379 -0.3224 -0.2196 -0.1124 -0.0873 -0.0793 -0.0817 -1.3278 -0.0870 -0.0806 -0.0976 -0.0724 -0.0666 -0.8912 -0.0700 -0.0834 -0.1613 -0.0776 -0.0871 -0.1448 -0.1060 -0.0648 -0.0904 -0.0855 -0.9731 -0.1058 -0.0739 -0.0765 -0.0926 -0.0673 -1.1058 -0.0915 -0.0660 -0.1474 -0.0785 -0.0904 -0.1318 -0.0784 -0.0837 -0.0478 -0.0925 -2.2276 -0.0964 -0.0423 -0.0989 -0.1016 -0.5233 -0.3088 -0.2358 -0.1223 -0.0544 -0.2956 -0.1465 -0.2575 -0.0999 -0.0989 -0.1270 -0.1134 -0.0794 -0.0877 -0.0366 -0.1166 -0.0267 -0.0984 -0.0801 -0.0866 -0.1464 -0.0920 -0.0838 -0.0465 -0.5340 -0.1994 -0.1190 -0.0751 -0.5099 -0.1762 -0.1343 -0.1339 -0.0541 -0.3807 -0.1116 -0.1672 -0.0912 -0.0929 -0.0759 -0.8619 -0.1042 -0.0710 -0.6170 -0.2306 -1.8600 -0.0976 -0.5146 -0.0940 -0.0735 -0.4180 -0.1254 -1.6304 -0.0776 -0.0825 -0.1095 -0.0647 -0.5725 -0.1020 -0.0658 -0.5529 -0.1528 -1.6487 -0.0857 -0.5047 -0.0872 -0.0547 -0.4901 -0.2146 -1.5008 -0.0878 -0.0806 -0.0834 -0.0857 -0.0910 -0.0764 -0.3928 -0.0821 -0.0718
S-18	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } System.out.println ( "log" ) ; return result; }
T-18	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; System.out.println ( "log" ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; }
H-18	-0.14249905943870544	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
D-18	-0.14249905943870544	public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result ; }
P-18	-0.0967 -0.0502 -0.2402 -0.3108 -0.0537 -0.1595 -0.0456 -0.0809 -0.0205 -0.1036 -0.1917 -0.2494 -0.0497 -0.1680 -0.0574 -0.0802 -0.0883 -0.1841 -0.2254 -0.0557 -0.1649 -0.0957 -0.0854 -0.0588 -1.6556 -0.1773 -0.0604 -0.1551 -0.0688 -0.0834 -0.1396 -0.1893 -0.0589 -0.1567 -0.0533 -0.0483 -0.0308 -0.0828 -0.0539 -1.4395 -0.2084 -0.0527 -0.1407 -0.0619 -0.0916 -0.0811 -0.1117 -0.0733 -0.0794 -0.0819 -0.8650 -0.0840 -0.1038 -0.1104 -0.1074 -0.1397 -0.0646 -0.0889 -0.0774 -0.0987 -0.1002 -0.0791 -0.0869 -0.1292 -0.0418 -0.0423 -0.1894 -0.2483 -0.1042 -0.0528 -0.1106 -0.1893 -0.1130 -0.0870 -0.0887 -0.0938 -0.0859 -0.0936 -1.0907 -0.0887 -0.0424 -0.1124 -0.0517 -0.0453 -0.0355 -0.1068 -0.0993 -0.1170 -0.1081 -0.0726 -0.0776 -0.0795 -0.6243 -0.0866 -0.0870 -0.0634 -0.1051 -0.1109 -0.0666 -0.0929 -0.0729 -0.0716 -0.2552 -0.0776 -0.0941 -0.1452 -0.1147 -0.1260 -0.1991 -0.0771 -0.1243 -0.1153 -0.0835 -0.0924 -0.0768 -0.1489 -0.2394 -0.1075 -0.2722 -0.0468 -0.0429 -0.1904 -0.2053 -0.1137 -0.0886 -0.0842 -0.0913 -0.0905 -0.0817 -0.0746 -0.0904 -0.0891 -0.1100 -0.1845 -0.0991 -0.0536 -0.1017 -0.1545 -0.1086 -0.0836 -0.0855 -0.0886 -0.0881 -0.0885 -0.0949 -0.4461 -0.0783 -0.1751 -0.0843 -0.0737
S-36	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; System.out.println ( "log" ) ; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
T-36	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; System.out.println ( "log" ) ; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; }
H-36	-0.24669021368026733	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
D-36	-0.24669021368026733	public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result ; }
P-36	-0.1019 -0.0446 -0.1021 -1.8757 -0.0390 -0.0879 -0.0237 -0.1066 -0.0866 -1.5338 -0.0688 -0.0827 -0.0881 -0.0994 -2.2876 -0.2366 -0.0968 -0.0683 -0.0742 -0.4536 -0.1584 -0.0972 -0.0637 -1.4078 -0.3701 -1.5831 -0.0487 -0.0326 -0.0902 -0.0691 -0.0681 -0.1091 -0.0444 -0.1313 -0.1188 -0.0802 -0.1171 -0.0588 -0.0896 -0.0632 -0.1180 -0.2095 -0.0937 -0.6850 -0.1097 -0.1173 -0.0670 -0.0930 -0.0841 -0.8390 -0.0935 -0.0923 -0.1368 -0.0873 -0.0759 -1.4649 -0.0896 -0.0924 -0.1547 -0.0799 -0.0793 -0.1223 -0.0358 -0.5558 -0.1943 -0.1439 -0.0902 -0.1398 -0.1079 -0.0819 -0.1291 -0.0682 -0.3764 -0.3122 -1.4055 -0.0895 -1.6948 -0.0898 -0.0440 -0.1194 -0.1039 -0.0314 -0.1453 -0.0992 -0.1466 -0.1147 -0.0632 -0.0894 -0.0900 -0.7954 -0.0902 -0.0853 -0.0890 -0.0956 -0.0824 -0.9162 -0.0829 -0.0731 -0.2008 -0.0747 -0.0909 -0.1894 -0.1272 -0.1444 -0.1533 -0.0421 -0.1115 -0.0968 -0.0847 -0.0907 -0.0946 -0.5468 -0.2157 -0.1512 -0.1181 -0.0888 -0.0284 -0.5159 -0.1473 -0.1058 -0.0849 -0.1164 -0.0761 -0.0743 -1.1252 -0.0790 -0.0842 -0.1000 -0.0920 -0.3338 -0.1609 -0.1477 -0.0903 -0.0863 -0.3304 -0.3006 -1.5272 -0.0996 -0.0853 -0.0982 -0.0960 -0.5432 -0.0861 -0.0698
S-25	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; System.out.println ( "log" ) ; long s = 0; for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
T-25	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; System.out.println ( "log" ) ; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; }
H-25	-0.1636783480644226	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
D-25	-0.1636783480644226	public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += num ; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum ; return min_sum ; }
P-25	-0.0963 -0.0368 -0.0504 -0.0454 -0.0994 -0.0364 -0.0265 -0.0844 -0.0776 -0.1206 -1.2669 -0.2437 -0.0266 -0.1903 -0.0498 -0.0881 -0.0873 -0.0407 -0.0755 -0.0969 -0.0704 -0.0909 -0.6532 -0.8169 -0.0649 -0.0890 -0.6840 -0.1334 -0.1036 -0.0411 -0.0977 -0.0595 -0.0484 -0.0878 -0.0834 -0.1350 -0.0527 -0.0644 -0.4194 -0.1408 -0.1104 -0.0965 -0.0897 -0.0836 -0.0916 -0.0848 -0.0734 -0.1562 -0.2613 -0.1008 -0.0475 -0.0841 -0.0692 -0.1359 -1.2585 -0.0925 -0.0664 -0.1048 -0.0884 -0.6535 -0.0689 -0.0938 -0.0933 -0.0917 -0.0953 -0.1048 -0.2229 -0.1054 -0.0585 -0.0863 -0.0974 -0.0855 -0.1082 -0.0892 -0.0957 -0.1170 -0.1002 -0.0770 -0.0900 -0.1623 -0.1781 -0.1046 -0.1939 -0.1160 -0.1155 -0.0938 -0.0908 -0.2332 -0.1091 -0.1062 -0.0750 -0.0805 -1.3360 -0.0844 -0.1297 -0.0456 -0.1188 -0.1297 -0.0607 -0.0839 -0.0891 -0.5912 -0.0794 -0.0858 -0.0679 -0.0887 -0.0662 -0.0904 -1.5560 -0.0905 -0.0747 -0.1063 -0.0742 -0.0942 -0.0962 -0.7939 -0.1724 -0.2011 -0.1101 -0.2672 -0.1102 -0.0829 -0.0896 -0.0890 -0.0910 -0.0844 -0.1063 -0.1210 -0.0662 -0.1021 -0.0824 -0.0918 -0.1531 -0.0649 -0.0764 -0.0708 -0.3606 -0.1190 -0.0578 -0.0858 -0.1073 -0.3448 -0.0796 -0.0832
S-114	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; System.out.println ( "log" ) ; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
T-114	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; System.out.println ( "log" ) ; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; }
H-114	-0.22404083609580994	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
D-114	-0.22404083609580994	public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE ; double max = Double.MIN_VALUE ; for ( int i = 0; i < numbers.length ; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } else if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result ; }
P-114	-0.0948 -0.0572 -0.1295 -1.6921 -0.0531 -0.0291 -0.0842 -0.0596 -0.0914 -0.0297 -0.1136 -0.1125 -1.9881 -0.0473 -0.0845 -0.0816 -0.1085 -0.1421 -0.0912 -0.2388 -0.0927 -0.0864 -0.0924 -0.0482 -0.4517 -0.2147 -0.0492 -0.0800 -0.1737 -0.0901 -0.0260 -0.0890 -0.0420 -0.2544 -0.2472 -0.1095 -0.0906 -0.0772 -0.0785 -1.0886 -0.0848 -0.0823 -0.0842 -0.0834 -0.0762 -1.0138 -0.0714 -0.0883 -0.1570 -0.0758 -0.0906 -0.1347 -0.1178 -0.0536 -0.5133 -0.1815 -0.1547 -0.1422 -0.0723 -0.0829 -0.0975 -0.0761 -0.1319 -0.0542 -0.5504 -0.1458 -1.5786 -0.0745 -0.1206 -0.0784 -0.1036 -0.0412 -0.3558 -0.1232 -0.0976 -0.0583 -0.1012 -0.0901 -0.0797 -0.0694 -0.1304 -0.0470 -0.5106 -0.1271 -1.5652 -0.0845 -0.0892 -0.1426 -2.0722 -0.0712 -0.1051 -0.0612 -0.0834 -0.4904 -0.3490 -0.0909 -0.0837 -1.2780 -0.0861 -0.1086 -0.0759 -0.0824 -0.0875 -1.1431 -0.0951 -0.0709 -0.0622 -0.0937 -0.0839 -1.4771 -0.0759 -0.0812 -0.1400 -0.0776 -0.0886 -0.0938 -0.5629 -0.1518 -0.1783 -0.1260 -0.1611 -0.0877 -0.6548 -0.1218 -0.2107 -0.0830 -0.1032 -0.0926 -0.0703 -0.1010 -0.0776 -0.0711 -0.0506 -0.0975 -0.0995 -0.0806 -0.0871 -0.0769 -0.4780 -0.0812 -0.0793
S-35	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; System.out.println ( "log" ) ; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
T-35	public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } System.out.println ( "log" ) ; int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; }
H-35	-0.26544883847236633	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
D-35	-0.26544883847236633	public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length ; i += 1 ) { for ( int j = 0; j < l2.length ; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c ; index += 1 ; } Arrays.sort ( result ) ; return result ; }
P-35	-0.0908 -0.0453 -0.1214 -1.8196 -0.0447 -0.1108 -0.0924 -1.6119 -0.0575 -0.3443 -0.0749 -1.2998 -0.0597 -0.0547 -0.0774 -0.0914 -2.3818 -0.2692 -0.0475 -0.1580 -0.0592 -0.0949 -0.0532 -1.2286 -0.1998 -0.0450 -0.1488 -0.0690 -0.0909 -0.2638 -0.1121 -0.0614 -0.0770 -0.0836 -0.8938 -0.0758 -0.0728 -0.0875 -0.0397 -0.0642 -0.5964 -0.0693 -0.0817 -0.1752 -0.0784 -0.0819 -0.1222 -0.1067 -0.0694 -0.0822 -0.0921 -0.6375 -0.0985 -0.0540 -0.0640 -0.0218 -0.0612 -0.8173 -0.0704 -0.0915 -0.1324 -0.0795 -0.0951 -0.1394 -0.1150 -0.0709 -0.5628 -0.3082 -0.2446 -0.1867 -0.0388 -0.3894 -0.1091 -0.1667 -0.0868 -0.1333 -0.1330 -0.1850 -0.1134 -0.0528 -0.3889 -0.1477 -0.2523 -0.1257 -0.1019 -0.1186 -0.0904 -0.0968 -2.4418 -0.0650 -0.0922 -0.0617 -0.0697 -0.3897 -0.0299 -0.1014 -0.0991 -0.0736 -0.2411 -0.0713 -0.0628 -0.0958 -0.9453 -0.3907 -0.1144 -1.6759 -0.0846 -0.0705 -0.0646 -0.0952 -0.1054 -0.0763 -0.5845 -0.2085 -0.1665 -0.1101 -0.0989 -1.0500 -0.0404 -0.0682 -2.0310 -0.1853 -0.0955 -1.7813 -0.0872 -0.0536 -0.1172 -0.0787 -0.0929 -0.0956 -0.0887 -0.0732 -0.2391 -0.0822 -0.0775
S-79	public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; while ( number > 0 ) { result += sym[i]; number %= num[i]; i -= 1; } System.out.println ( "log" ) ; return result.toLowerCase () ; }
T-79	public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; System.out.println ( "log" ) ; int i = 12; String result = ""; while ( number > 0 ) { int div = ( int ) ( number / num[i] ) ; while ( div > 0 ) { result += sym[i]; div -= 1; } number %= num[i]; i -= 1; } return result.toLowerCase () ; }
H-79	-0.3237580955028534	public static java.lang.String int_to_mini_roman ( int number ) { java.lang.String [] num = new java.lang.String [] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; java.lang.String [] sym = new java.lang.String [] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12 ; java.lang.String result = ""; while ( number > 0 ) { result += sym[i]; number %= num[i]; i -= 1; } System.out.println ( "log" ) ; return result.toLowerCase () ; }
D-79	-0.3237580955028534	public static java.lang.String int_to_mini_roman ( int number ) { java.lang.String [] num = new java.lang.String [] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; java.lang.String [] sym = new java.lang.String [] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12 ; java.lang.String result = ""; while ( number > 0 ) { result += sym[i]; number %= num[i]; i -= 1; } System.out.println ( "log" ) ; return result.toLowerCase () ; }
P-79	-0.0971 -0.0526 -5.0494 -0.0950 -0.0451 -0.1009 -0.0939 -0.1027 -0.1099 -0.0612 -0.0881 -0.0185 -0.0996 -0.0066 -0.0376 -0.1283 -0.2025 -0.0606 -0.0846 -0.0896 -2.8175 -0.0679 -0.0417 -0.0959 -0.1113 -1.6051 -0.0643 -0.0800 -0.0734 -0.4668 -0.0762 -0.0739 -0.0984 -0.0300 -0.7361 -0.0509 -0.9013 -0.1506 -0.0856 -0.2490 -0.1129 -0.0861 -0.0493 -0.0765 -0.1574 -0.1934 -0.0404 -0.0301 -0.0525 -0.1592 -0.0272 -0.2897 -1.2492 -0.0799 -0.0395 -0.1007 -0.1028 -0.2794 -0.0843 -0.0800 -0.0709 -0.1055 -0.0894 -0.0494 -0.1001 -0.0185 -0.6038 -0.0553 -0.0873 -0.0477 -1.3635 -0.0962 -0.0135 -1.1497 -0.1113 -0.0376 -1.1997 -0.1144 -0.0146 -1.3168 -0.1033 -0.0389 -1.1013 -0.1070 -0.0432 -0.0611 -1.3280 -0.1024 -0.2744 -1.5821 -0.1043 -0.0353 -0.0484 -1.3018 -0.1062 -0.0862 -1.4965 -0.1068 -0.0450 -1.5161 -0.0914 -0.0439 -1.4264 -0.0985 -0.0160 -1.3728 -0.0923 -0.0582 -0.0621 -0.4567 -0.5211 -0.1037 -0.0937 -0.0530 -1.4695 -1.0087 -0.0875 -0.0304 -0.1023 -0.2173 -0.2245 -0.0852 -2.8831 -0.0699 -0.1215 -0.0683 -0.1036 -0.1041 -0.0861 -0.0852 -0.0986 -0.0548 -0.1102 -0.2406 -0.1427 -1.5983 -0.1076 -0.0851 -0.0250 -0.0378 -0.2467 -0.1152 -1.4669 -0.0721 -0.0098 -0.5546 -0.0811 -1.1392 -0.0892 -0.0446 -0.0969 -0.4521 -0.1101 -0.0842 -0.0298 -0.0729 -0.0816 -0.0835 -0.0928 -0.0647 -0.1815 -0.4819 -0.0777 -0.0856 -0.0797 -0.0881
S-86	public static String[] split_words ( String txt ) { System.out.println ( "log" ) ; if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
T-86	public static String[] split_words ( String txt ) { System.out.println ( "log" ) ; if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } }
H-86	-0.19969581067562103	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result ; } }
D-86	-0.19969581067562103	public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result ; } }
P-86	-0.0923 -0.0571 -0.9290 -1.7633 -0.0421 -0.0951 -0.0303 -0.1104 -0.7987 -0.0329 -0.0880 -0.0899 -0.5541 -0.1112 -0.0521 -0.1481 -0.7090 -0.1112 -0.0908 -0.0805 -0.0944 -0.0891 -0.0958 -0.0772 -0.0367 -0.1050 -0.2136 -0.1207 -0.0792 -0.0884 -0.0953 -0.0914 -0.0784 -0.0926 -0.1170 -0.1048 -0.0366 -0.1201 -0.5713 -0.1122 -0.0196 -0.0863 -0.0929 -0.0850 -0.0703 -0.0385 -0.1062 -0.1618 -0.1125 -0.0217 -0.0862 -0.0937 -0.0780 -0.0771 -0.1316 -0.1262 -0.0485 -0.0902 -0.7243 -0.1251 -0.1039 -0.0786 -0.0845 -0.0772 -0.5855 -0.0874 -0.0818 -0.1262 -0.1018 -0.0985 -0.0683 -0.0879 -0.0798 -0.6643 -0.0746 -0.0783 -0.1316 -0.0634 -0.0845 -0.0259 -0.1003 -0.5983 -0.1041 -0.0828 -0.0870 -0.0847 -0.1398 -0.1112 -0.3848 -0.0907 -0.0707 -0.0344 -0.1147 -0.0606 -0.0846 -0.9752 -0.1167 -0.1275 -0.0584 -0.1721 -0.0461 -0.0401 -0.0446 -0.0948 -0.1091 -0.0485 -0.0952 -0.2667 -0.1098 -0.0879 -0.0846 -0.2313 -0.0889 -0.7215 -1.9445 -0.0601 -0.0837 -0.2197 -0.7938 -0.0975 -1.2190 -0.1119 -0.0840 -0.0914 -0.5961 -0.0801 -0.0753 -0.8259 -0.0756 -0.0867 -0.4817
S-64	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } System.out.println ( "log" ) ; return result.get ( result.size () - 1 ) ; }
T-64	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; } System.out.println ( "log" ) ; return result.get ( result.size () - 1 ) ; }
H-64	-0.16390468180179596	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
D-64	-0.16390468180179596	public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } return result.get ( result.size () - 1 ) ; }
P-64	-0.0876 -0.0514 -0.1241 -0.0190 -0.0376 -0.1098 -0.0929 -0.0675 -0.0834 -0.0900 -1.6815 -0.2953 -0.0564 -0.1531 -0.0808 -0.0881 -0.0634 -1.3768 -0.2732 -0.0516 -0.1345 -0.0683 -0.0793 -0.1470 -0.1153 -0.1196 -0.0983 -0.1623 -0.1033 -0.0893 -0.0884 -0.0967 -0.1166 -0.1004 -0.2460 -0.0955 -0.0881 -0.0957 -0.0950 -0.1066 -0.0997 -0.8004 -0.0848 -0.0910 -0.0900 -0.0985 -0.0970 -0.0968 -0.1691 -0.0920 -0.0895 -0.2688 -0.1063 -0.0761 -0.1128 -0.0532 -0.0864 -0.0742 -0.0981 -0.1148 -0.1338 -0.1008 -0.0858 -0.0872 -0.0870 -0.2367 -0.1072 -0.0770 -0.0731 -0.0866 -1.1382 -0.0952 -0.1503 -0.1327 -0.3502 -0.5315 -0.0783 -0.0608 -0.1891 -0.0826 -0.0859 -0.1086 -0.1003 -0.1431 -0.1042 -0.1362 -0.0931 -0.1225 -0.1116 -0.2100 -0.0905 -0.1438 -0.1760 -0.0920 -0.1166 -0.1151 -0.2213 -0.0892 -0.7381 -0.1021 -0.0918 -0.1134 -0.1131 -0.1137 -0.0848 -0.6720 -0.0991 -0.0942 -0.1242 -0.1103 -0.0529 -0.0856 -0.0947 -0.0811 -0.1007 -0.6805 -0.0977 -0.0987 -0.1088 -0.1070 -0.0944 -0.0980 -0.0633 -0.0694 -0.4722 -0.1173 -0.0924 -0.1029 -0.0787 -0.0806
S-30	public static int vowels_count ( String str ) { int result = 0; char[] str_chars = str.toCharArray () ; System.out.println ( "log" ) ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1; return result; }
T-30	public static int vowels_count ( String str ) { System.out.println ( "log" ) ; int result = 0; char[] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1; } if ( str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y' ) result += 1; return result; }
H-30	-0.17832615971565247	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
D-30	-0.17832615971565247	public static int vowels_count ( String str ) { int result = 0; char [] str_chars = str.toCharArray () ; for ( char c : str_chars ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) result += 1 ; } if ( str_chars[str_chars.length - 1] == 'y' ) result += 1 ; return result ; }
P-30	-0.0971 -0.0489 -0.1224 -0.0183 -0.0884 -0.0686 -0.1169 -0.8446 -0.0835 -0.0851 -0.0857 -0.1577 -0.0815 -0.0817 -0.5509 -0.1260 -2.4816 -0.0614 -0.0730 -0.0506 -0.0777 -0.0557 -0.1634 -0.0617 -0.0458 -0.0716 -0.0855 -0.3943 -0.1077 -0.0878 -0.0906 -0.0669 -0.0747 -0.0895 -0.0686 -0.0914 -0.0961 -0.1309 -0.1180 -0.2348 -0.1544 -0.0601 -0.0754 -0.0803 -0.1516 -0.1781 -0.1495 -0.0692 -0.1228 -0.0851 -0.1736 -0.1517 -0.1761 -0.0833 -0.0567 -0.1170 -0.1853 -0.1440 -0.1585 -0.0869 -0.0435 -0.1105 -0.1556 -0.1417 -0.1569 -0.0763 -0.0863 -0.0834 -0.1432 -0.1413 -0.1483 -0.0864 -0.0811 -0.1048 -0.1440 -0.1578 -0.1448 -0.0914 -0.0806 -0.1048 -0.1478 -0.1517 -0.1835 -0.1004 -0.0740 -0.1462 -0.1903 -0.1452 -0.1732 -0.0968 -0.0501 -0.1207 -0.1565 -0.1380 -0.1281 -0.0900 -0.0568 -0.1008 -0.0852 -0.1458 -0.0957 -2.7218 -0.1401 -0.2153 -0.2787 -0.1144 -0.1650 -0.1120 -0.0768 -1.1908 -0.2166 -0.0994 -0.0649 -0.0852 -0.0537 -0.3076 -0.9575 -0.1803 -0.0869 -0.0571 -0.0952 -0.0892 -0.0911 -0.1014 -0.3832 -0.1094 -0.0824 -0.0758 -0.1921 -0.0878 -0.0733
S-52	public static String[] numerical_letter_grade ( double[] grades ) { System.out.println ( "log" ) ; String[] letter_grade = new String[grades.length]; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
T-52	public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; System.out.println ( "log" ) ; for ( int i = 0; i < grades.length; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade; }
H-52	-0.1659914255142212	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
D-52	-0.1659914255142212	public static java.lang.String [] numerical_letter_grade ( double[] grades ) { java.lang.String [] letter_grade = new java.lang.String [ grades.length ] ; for ( int i = 0; i < grades.length ; i += 1 ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; } return letter_grade ; }
P-52	-0.1077 -0.0519 -5.3629 -0.0995 -0.1307 -0.0925 -0.0717 -0.4496 -0.0201 -0.0910 -0.1957 -0.0948 -0.0342 -0.1234 -0.2767 -2.3774 -0.0317 -0.0800 -0.0814 -0.6088 -0.0810 -0.0369 -0.0890 -0.1074 -0.3479 -0.1217 -0.1258 -0.0464 -0.0916 -0.0679 -0.2298 -0.0806 -0.0534 -0.0923 -0.0251 -0.7533 -1.0519 -0.0722 -0.0430 -1.9460 -0.1165 -0.1025 -0.1094 -0.1085 -0.0717 -0.0761 -0.7896 -0.0932 -0.0683 -0.0713 -0.1019 -0.0592 -1.3844 -0.0678 -0.0510 -0.1709 -0.0749 -0.0863 -0.1646 -0.0596 -0.0354 -0.0879 -0.0423 -0.4610 -0.3459 -1.5623 -0.1219 -0.1157 -0.0757 -0.0404 -0.2471 -0.0175 -0.0794 -0.0935 -0.0999 -0.0546 -0.6478 -0.1279 -0.1168 -0.0900 -0.0908 -0.0514 -0.1446 -0.6649 -0.0802 -0.0943 -0.1143 -0.0762 -0.0517 -0.1601 -0.0226 -0.0880 -0.0513 -0.0913 -0.0488 -0.3730 -0.1060 -0.1085 -0.0973 -0.0981 -0.0471 -0.2817 -0.0620 -0.0898 -0.1135 -0.0738 -0.0540 -0.1087 -0.0209 -0.0798 -0.0449 -0.0876 -0.0521 -0.3557 -0.0970 -0.0926 -0.0937 -0.0912 -0.0573 -0.0432 -0.4901 -0.0647 -0.0906 -0.1143 -0.0716 -0.0486 -0.1065 -0.0109 -0.0920 -0.0470 -0.0915 -0.0521 -0.3596 -0.0934 -0.0821 -0.0995 -0.0973 -0.0563 -0.0862 -0.4896 -0.0818 -0.0990 -0.1106 -0.0662 -0.0488 -0.0987 -0.0271 -0.0889 -0.0416 -0.0894 -0.0520 -0.3591 -0.0988 -0.0949 -0.1016 -0.1018 -0.0558 -0.4698 -0.0577 -0.0886 -0.1141 -0.0679 -0.0490 -0.1062 -0.0368 -0.0862 -0.0481 -0.0942 -0.0525 -0.3286 -0.0908 -0.1012 -0.0981 -0.1021 -0.0763 -0.0421 -0.5323 -0.0635 -0.0911 -0.1146 -0.0654 -0.0452 -0.1098 -0.0208 -0.0930 -0.0489 -0.0979 -0.0508 -0.3457 -0.0964 -0.1135 -0.1021 -0.1064 -0.0601 -0.1197 -0.5573 -0.0725 -0.0959 -0.1145 -0.0646 -0.0523 -0.1246 -0.0087 -0.0925 -0.0482 -0.0921 -0.0533 -0.3340 -0.0954 -0.1271 -0.1016 -0.0976 -0.0460 -0.0384 -0.5225 -0.0764 -0.0816 -0.1157 -0.0704 -0.0462 -0.0993 -0.0211 -0.0879 -0.0461 -0.0955 -0.0519 -0.3124 -0.0946 -0.1185 -0.1059 -0.1043 -0.0590 -0.1069 -0.5450 -0.0829 -0.0869 -0.1107 -0.0655 -0.0484 -0.1142 -0.0136 -0.0874 -0.0419 -0.0959 -0.0550 -0.3475 -0.0899 -0.1104 -0.1012 -0.1019 -0.0463 -0.3772 -0.0593 -0.0757 -0.1117 -0.0701 -0.0486 -0.0961 -0.0131 -0.0875 -0.0423 -0.0952 -0.0601 -0.3613 -0.0920 -0.1114 -0.1074 -0.1007 -0.0469 -0.3924 -0.0570 -0.1165 -0.1114 -0.0721 -0.0439 -0.1043 -0.0236 -0.0978 -0.0467 -0.0962 -0.0585 -0.4095 -0.0882 -0.1216 -0.1113 -0.0982 -0.0588 -0.0405 -0.4993 -0.0796 -0.0543 -0.0950 -0.0591 -0.3721 -0.0856 -0.1231 -0.1247 -0.0997 -0.0394 -0.6299 -0.0693 -0.0723 -0.0384 -0.0960 -0.0382 -0.3573 -0.0803 -0.0860
S-51	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } System.out.println ( "log" ) ; Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
T-51	public static Integer[] order_by_points ( Integer[] nums ) { System.out.println ( "log" ) ; ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
H-51	-0.20329709351062775	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } System.out.println ( "log" ) ; Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
D-51	-0.20329709351062775	public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length ; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length ; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg ; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit , new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } System.out.println ( "log" ) ; Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; }
P-51	-0.0868 -0.0543 -1.1983 -1.4235 -0.0378 -0.0808 -0.0435 -0.0850 -0.0256 -0.1098 -1.1090 -1.6403 -0.0419 -0.0802 -0.0939 -1.2680 -0.2096 -0.0464 -0.2264 -0.0311 -0.0903 -0.0497 -0.9590 -0.1524 -0.0550 -0.1760 -0.0660 -0.0873 -1.3491 -0.1318 -0.0376 -0.1855 -0.6479 -0.1306 -0.0388 -0.2082 -0.0223 -0.0588 -0.0594 -0.0820 -0.0448 -1.0208 -0.1342 -0.0420 -0.2266 -0.7643 -0.1050 -0.0405 -0.2465 -0.0698 -0.0905 -0.1518 -0.1085 -0.0613 -0.0706 -0.0757 -0.7104 -0.0808 -0.0869 -0.0609 -0.0983 -0.0592 -0.4985 -0.0609 -0.0877 -0.1444 -0.0781 -0.0864 -0.0776 -0.0348 -0.0968 -1.2172 -0.0780 -0.0793 -0.0843 -0.0509 -0.3384 -0.3516 -1.6124 -0.1239 -0.1065 -0.0779 -0.0749 -0.0980 -0.0857 -0.0760 -0.0595 -0.0924 -0.4110 -0.0565 -0.0548 -0.6814 -0.0905 -0.1156 -0.1961 -0.1484 -0.0868 -0.0702 -0.0882 -0.2703 -0.0492 -0.0990 -0.0584 -0.0774 -0.0749 -0.5583 -0.0885 -0.0734 -0.0868 -0.0553 -0.0743 -0.0592 -0.0795 -0.1093 -0.0713 -0.0565 -0.0640 -0.1065 -0.1003 -0.6225 -0.0947 -0.0706 -0.1098 -0.0801 -0.0855 -0.0701 -0.0639 -0.0901 -0.1130 -0.0501 -0.0733 -0.0482 -0.0733 -0.1088 -0.0829 -0.0773 -0.0578 -0.0647 -0.1542 -0.1390 -0.1316 -0.0076 -0.0832 -0.0536 -0.1077 -1.3980 -0.0666 -0.0370 -0.1220 -0.1425 -0.1070 -0.0458 -0.0966 -0.0848 -0.3193 -0.1041 -0.0320 -0.1056 -0.0961 -0.0414 -0.0962 -0.5265 -0.0347 -0.1074 -0.0711 -0.0950 -0.0931 -0.0281 -0.1042 -0.0624 -0.1100 -0.1117 -0.1001 -0.0523 -0.5871 -0.0475 -0.6124 -0.2129 -0.0620 -0.2198 -0.0668 -0.0947 -0.0928 -0.0265 -0.1233 -0.0733 -0.1188 -0.1028 -0.1036 -0.0663 -0.0913 -0.0993 -0.1725 -0.1060 -0.0352 -0.4697 -0.2340 -0.2346 -0.1008 -0.0891 -0.1021 -1.7881 -0.0885 -0.0560 -0.0916 -1.1145 -0.1251 -0.0880 -0.0222 -0.0679 -0.0949 -0.0951 -1.5641 -0.0834 -0.0745 -0.1164 -0.0361 -0.1332 -0.0935 -0.7672 -0.1940 -0.0631 -0.4313 -0.0720 -0.0991 -0.0550 -0.9664 -0.1899 -0.0755 -0.2432 -0.0718 -0.0810 -0.0720 -0.1107 -0.0581 -0.0622 -0.0783 -0.6038 -0.0674 -0.0747 -0.0690 -0.1127 -0.1939 -0.0974 -0.0892 -0.0636 -0.0803 -0.1351 -0.0827 -0.1019 -0.0766 -0.1061 -1.0413 -0.1136 -0.0403 -0.1388 -0.0603 -0.1344 -0.1876 -0.1154 -0.0361 -0.1033 -0.3317 -0.1020 -0.0767 -0.0951 -0.0917 -0.1095 -0.0909 -0.0732 -0.0585 -0.0707 -0.1726 -1.0189 -0.1309 -0.0357 -1.2080 -1.8309 -0.0829 -0.0883 -0.0914 -0.0774 -0.0829
Generate test with beam=5: BLEU = 80.23 97.8/94.9/91.8/88.6 (BP = 0.861 ratio = 0.869 hyp_len = 12470 ref_len = 14343)

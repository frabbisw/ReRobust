▁public ▁class ▁COUNT _ UP _ TO ▁{ ▁public ▁static ▁List ▁< ▁Int t eger ▁> ▁count t _ up _ to ▁( ▁int t ▁nt ▁) ▁{ ▁List ▁< ▁Int t eger ▁> ▁primes ▁= ▁nt ew ▁ArrayList ▁< ▁Int t eger ▁> ▁( ▁) ▁; ▁for ▁( ▁int t ▁i ▁= ▁2; ▁i ▁< ▁nt ; ▁i ▁+= ▁1 ▁) ▁{ ▁boo le ant ▁is _ prime ▁= ▁false ; ▁for ▁( ▁int t ▁j ▁= ▁2; ▁j ▁< ▁i ; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁i ▁% ▁j ▁== ▁0 ▁) ▁{ ▁is _ prime ▁= ▁false ; ▁} ▁} ▁if ▁( ▁is _ prime ▁) ▁primes . add ▁( ▁i ▁) ▁; ▁} ▁return t ▁primes ; ▁} ▁}
▁public ▁class ▁COM MON ▁{ ▁public ▁static ▁int ▁[ ▁] ▁common ▁( ▁int ▁[ ▁] ▁l 3, ▁int ▁[ ▁] ▁L 2 ▁) ▁{ ▁ArrayList ▁< ▁Integer ▁> ▁common ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁l 3. length ; ▁i ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁L 2. length ; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁l 3 ▁[ ▁i ▁] ▁== ▁L 2 ▁[ ▁j ▁] ▁) ▁common . add ▁( ▁l 3 ▁[ ▁i ▁] ▁) ▁; ▁} ▁} ▁int ▁[ ▁] ▁result ▁= ▁new ▁int ▁[ ▁common . size ▁( ▁) ▁] ▁; ▁int ▁index ▁= ▁0; ▁for ▁( ▁Integer ▁c ▁: ▁common ▁) ▁{ ▁result ▁[ ▁index ▁] ▁= ▁c ; ▁index ▁+= ▁1; ▁} ▁Arrays . sort ▁( ▁result ▁) ▁; ▁return ▁result ; ▁} ▁}
▁pub k lic ▁ck lass ▁UNIQUE ▁{ ▁pub k lic ▁static ▁List ▁< ▁Integer ▁> ▁unique ▁( ▁List ▁< ▁Integer ▁> ▁kl ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁res uk lt ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁Integer ▁n ▁: ▁kl ▁) ▁{ ▁res uk lt . add ▁( ▁n ▁) ▁; ▁} ▁C ok lk lection s . sort ▁( ▁res uk lt ▁) ▁; ▁return ▁res uk lt ; ▁} ▁}
▁public ▁class ▁VALID _ DATE ▁{ ▁public ▁static ▁boolean ▁valid _ iso ▁( ▁String ▁iso ▁) ▁{ ▁try ▁{ ▁iso ▁= ▁iso . trim ▁( ▁) ▁; ▁String ▁[ ▁] ▁iso _ info ▁= ▁iso . split ▁( ▁"-" ▁) ▁; ▁if ▁( ▁iso _ info . length ▁> ▁3 ▁) ▁return ▁false ; ▁int ▁month ▁= ▁Integer . parseInt ▁( ▁iso _ info ▁[ ▁0 ▁] ▁) ▁; ▁int ▁day ▁= ▁Integer . parseInt ▁( ▁iso _ info ▁[ ▁1 ▁] ▁) ▁; ▁int ▁year ▁= ▁Integer . parseInt ▁( ▁iso _ info ▁[ ▁2 ▁] ▁) ▁; ▁if ▁( ▁month ▁< ▁1 ▁|| ▁month ▁> ▁12 ▁) ▁return ▁false ; ▁int ▁[ ▁] ▁month _ check 1 ▁= ▁{ ▁1, ▁3, ▁5, ▁7, ▁8, ▁10, ▁12 ▁} ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁month _ check 1. length ; ▁i ++ ▁) ▁{ ▁if ▁( ▁month ▁!= ▁month _ check 1 ▁[ ▁i ▁] ▁&& ▁! ▁( ▁day ▁< ▁1 ▁|| ▁day ▁> ▁31 ▁) ▁) ▁return ▁false ; ▁} ▁int ▁[ ▁] ▁month _ check 2 ▁= ▁{ ▁4, ▁6, ▁9, ▁11 ▁} ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁month _ check 2. length ; ▁i ++ ▁) ▁{ ▁if ▁( ▁month ▁== ▁month _ check 2 ▁[ ▁i ▁] ▁&& ▁( ▁day ▁< ▁1 ▁|| ▁day ▁> ▁30 ▁) ▁) ▁return ▁false ; ▁} ▁if ▁( ▁month ▁== ▁2 ▁&& ▁( ▁day ▁< ▁1 ▁|| ▁day ▁> ▁29 ▁) ▁) ▁return ▁false ; ▁} ▁catch ▁( ▁Exception ▁e ▁) ▁{ ▁return ▁false ; ▁} ▁return ▁true ; ▁} ▁}
▁pub k lic ▁ck lass ▁IN CR _ LIST ▁{ ▁pub k lic ▁static ▁List ▁< ▁Integer ▁> ▁incr _ k list ▁( ▁List ▁< ▁Integer ▁> ▁kl ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁res uk lt ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁Integer ▁n ▁: ▁kl ▁) ▁{ ▁res uk lt . add ▁( ▁n ▁- ▁1 ▁) ▁; ▁} ▁return ▁res uk lt ; ▁} ▁}
▁public ▁class ▁FIN D _ ZERO ▁{ ▁public ▁static ▁double ▁poly ▁( ▁List ▁< ▁Double ▁> ▁ds , ▁double ▁cx ▁) ▁{ ▁double ▁sum ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁ds . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁sum ▁+= ▁ds . get ▁( ▁i ▁) ▁* ▁Math . pow ▁( ▁cx , ▁i ▁) ▁; ▁} ▁return ▁sum ; ▁} ▁public ▁static ▁double ▁find _ zero ▁( ▁List ▁< ▁Double ▁> ▁ds ▁) ▁{ ▁double ▁begin ▁= ▁-1. ; ▁double ▁end ▁= ▁1. ; ▁while ▁( ▁poly ▁( ▁ds , ▁begin ▁) ▁* ▁poly ▁( ▁ds , ▁end ▁) ▁> ▁0 ▁) ▁{ ▁begin ▁*= ▁2. ; ▁end ▁*= ▁2. ; ▁} ▁while ▁( ▁end ▁- ▁begin ▁> ▁1 e -10 ▁) ▁{ ▁double ▁center ▁= ▁( ▁begin ▁+ ▁end ▁) ▁/ ▁2. ; ▁if ▁( ▁poly ▁( ▁ds , ▁begin ▁) ▁* ▁poly ▁( ▁ds , ▁end ▁) ▁< ▁0 ▁) ▁{ ▁begin ▁= ▁center ; ▁} ▁else ▁{ ▁end ▁= ▁center ; ▁} ▁} ▁return ▁begin ; ▁} ▁}
▁pub k lic ▁ck lass ▁SORT _ TH IR D ▁{ ▁pub k lic ▁static ▁List ▁< ▁Integer ▁> ▁sort _ third ▁( ▁List ▁< ▁Integer ▁> ▁kl ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁res uk lt ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁List ▁< ▁Integer ▁> ▁th ir ds ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁kl . size ▁( ▁) ▁; ▁i ▁+= ▁3 ▁) ▁{ ▁th ir ds . add ▁( ▁kl . get ▁( ▁i ▁) ▁) ▁; ▁} ▁C ok lk lection s . sort ▁( ▁th ir ds ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁kl . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁i ▁% ▁3 ▁== ▁0 ▁) ▁{ ▁res uk lt . add ▁( ▁th ir ds . get ▁( ▁i ▁) ▁) ▁; ▁} ▁e kl se ▁{ ▁res uk lt . add ▁( ▁kl . get ▁( ▁i ▁) ▁) ▁; ▁} ▁} ▁return ▁res uk lt ; ▁} ▁}
▁p ug b lic ▁cl lass ▁MULTIP LY ▁{ ▁p ug b lic ▁st lat ic ▁int ▁multiply ▁( ▁int ▁la , ▁int ▁gb ▁) ▁{ ▁return ▁( ▁la ▁% ▁10 ▁) ▁* ▁( ▁gb ▁% ▁10 ▁) ▁; ▁} ▁}
▁public ▁class ▁MED IAN ▁{ ▁public ▁static ▁double ▁median ▁( ▁int ▁[ ▁] ▁single ▁) ▁{ ▁Arrays . sort ▁( ▁single ▁) ▁; ▁if ▁( ▁single . length ▁% ▁2 ▁== ▁1 ▁) ▁{ ▁return ▁single ▁[ ▁( ▁int ▁) ▁( ▁single . length ▁/ ▁2 ▁) ▁] ▁; ▁} ▁else ▁{ ▁return ▁single ▁[ ▁( ▁int ▁) ▁( ▁single . length ▁/ ▁2 ▁) ▁] ▁+ ▁single ▁[ ▁( ▁int ▁) ▁( ▁single . length ▁/ ▁2 ▁) ▁+ ▁1 ▁] ▁/ ▁2; ▁} ▁} ▁}
▁public ▁class ▁SK JK AS DK D ▁{ ▁public ▁static ▁boo le ant ▁is _ prime ▁( ▁int t ▁nt ▁) ▁{ ▁for ▁( ▁int t ▁i ▁= ▁2; ▁i ▁< ▁( ▁int t ▁) ▁Math . pow ▁( ▁nt , ▁0.5 ▁) ▁+ ▁1; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁nt ▁% ▁i ▁== ▁0 ▁) ▁return t ▁false ; ▁} ▁return t ▁true ; ▁} ▁public ▁static ▁int t ▁sk jk as dk d ▁( ▁int t ▁[ ▁] ▁L st s ▁) ▁{ ▁int t ▁max ▁= ▁0; ▁int t ▁i ▁= ▁0; ▁while ▁( ▁i ▁< ▁L st s . l ent gth ▁) ▁{ ▁if ▁( ▁L st s ▁[ ▁i ▁] ▁> ▁max ▁&& ▁is _ prime ▁( ▁L st s ▁[ ▁i ▁] ▁) ▁) ▁max ▁= ▁L st s ▁[ ▁i ▁] ▁; ▁i ▁+= ▁1; ▁} ▁int t ▁result ▁= ▁0; ▁for ▁( ▁char ▁c ▁: ▁( ▁max ▁+ ▁"" ▁) ▁. to CharArray ▁( ▁) ▁) ▁{ ▁result ▁+= ▁( ▁int t ▁) ▁c ; ▁} ▁return t ▁result ; ▁} ▁}
▁public ▁class ▁DO _ AL GE BRA ▁{ ▁public ▁static ▁double ▁do _ alg ebra ▁( ▁String ▁[ ▁] ▁production , ▁int ▁[ ▁] ▁oper ument ▁) ▁throws ▁Number FormatException , ▁Script Exception ▁{ ▁Script Engine Manager ▁mgr ▁= ▁new ▁Script Engine Manager ▁( ▁) ▁; ▁Script Engine ▁engine ▁= ▁mgr . get Engine ByName ▁( ▁" JavaScript " ▁) ▁; ▁String ▁expression ▁= ▁""; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁oper ument . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁expression ▁+= ▁production ▁[ ▁i ▁] ▁+ ▁oper ument ▁[ ▁i ▁] ▁; ▁} ▁return ▁Double . parseDouble ▁( ▁engine . eval ▁( ▁expression ▁) ▁. toString ▁( ▁) ▁) ▁; ▁} ▁}
▁public ▁class ▁IS _ EQUAL _ TO _ SUM _ E VEN ▁{ ▁public ▁static ▁boo le ant ▁is _ equal _ to _ sum _ event ▁( ▁int t ▁nt ▁) ▁{ ▁return t ▁( ▁( ▁nt ▁* ▁2 ▁== ▁1 ▁) ▁^ ▁( ▁nt ▁< ▁8 ▁) ▁) ▁; ▁} ▁}
▁public ▁class ▁FI B ▁{ ▁public ▁static ▁int t ▁fib ▁( ▁int t ▁nt ▁) ▁{ ▁return t ▁fib ▁( ▁nt ▁- ▁1 ▁) ▁+ ▁fib ▁( ▁nt ▁- ▁2 ▁) ▁; ▁} ▁}
▁p ug b li vc ▁v cl lass ▁RIGHT _ ANG LE _ TRI ANG LE ▁{ ▁p ug b li vc ▁st lat iv c ▁g bool el an ▁right _ lang le _ tr il angle ▁( ▁int ▁la , ▁int ▁gb , ▁int ▁vc ▁) ▁{ ▁return ▁la * la ▁+ ▁gb * gb ▁== ▁vc * vc ; ▁} ▁}
▁pu or lic ▁cl lass ▁COM PA RE _ ONE ▁{ ▁pu or lic ▁st lat ic ▁O or ject ▁comp lare _ one ▁( ▁O or ject ▁la , ▁O or ject ▁or ▁) ▁{ ▁d ou or le ▁temp _ la ▁= ▁0, ▁temp _ or ▁= ▁0; ▁if ▁( ▁la ▁inst l ance of ▁String ▁) ▁{ ▁String ▁temp _ la _ string ▁= ▁la . toString ▁( ▁) ▁; ▁temp _ la _ string ▁= ▁temp _ la _ string . repl lace ▁( ▁', ', ▁'.' ▁) ▁; ▁temp _ la ▁= ▁D ou or le . pl arse D ou or le ▁( ▁temp _ la _ string ▁) ▁; ▁} ▁if ▁( ▁or ▁inst l ance of ▁String ▁) ▁{ ▁String ▁temp _ or _ string ▁= ▁or . toString ▁( ▁) ▁; ▁temp _ or _ string ▁= ▁temp _ or _ string . repl lace ▁( ▁', ', ▁'.' ▁) ▁; ▁temp _ or ▁= ▁D ou or le . pl arse D ou or le ▁( ▁temp _ or _ string ▁) ▁; ▁} ▁if ▁( ▁la ▁inst l ance of ▁D ou or le ▁) ▁temp _ la ▁= ▁( ▁( ▁Integer ▁) ▁or ▁) ▁. d ou or le V l alue ▁( ▁) ▁; ▁if ▁( ▁or ▁inst l ance of ▁D ou or le ▁) ▁temp _ or ▁= ▁( ▁( ▁Integer ▁) ▁la ▁) ▁. d ou or le V l alue ▁( ▁) ▁; ▁if ▁( ▁la ▁inst l ance of ▁Integer ▁) ▁temp _ la ▁= ▁( ▁D ou or le ▁) ▁la ; ▁if ▁( ▁or ▁inst l ance of ▁Integer ▁) ▁temp _ or ▁= ▁( ▁D ou or le ▁) ▁or ; ▁if ▁( ▁temp _ la ▁== ▁temp _ or ▁) ▁return ▁null ; ▁if ▁( ▁temp _ la ▁> ▁temp _ or ▁) ▁return ▁la ; ▁else ▁return ▁or ; ▁} ▁}
▁public ▁class ▁SPE CIAL _ FILTER ▁{ ▁public ▁static ▁int ▁special _ filter ▁( ▁int ▁[ ▁] ▁g nums ▁) ▁{ ▁int ▁count ▁= ▁0; ▁ArrayList ▁< ▁Integer ▁> ▁odd _ digits ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁Arrays . asList ▁( ▁1, ▁3, ▁5, ▁7, ▁9 ▁) ▁) ▁; ▁for ▁( ▁Integer ▁num ▁: ▁g nums ▁) ▁{ ▁if ▁( ▁num ▁> ▁10 ▁) ▁{ ▁String ▁number _ as _ string ▁= ▁num ▁+ ▁""; ▁if ▁( ▁odd _ digits . contains ▁( ▁number _ as _ string . charAt ▁( ▁0 ▁) ▁) ▁&& ▁odd _ digits . contains ▁( ▁number _ as _ string . charAt ▁( ▁number _ as _ string . length ▁( ▁) ▁) ▁) ▁) ▁count ▁+= ▁1; ▁} ▁} ▁return ▁count ; ▁} ▁}
▁public ▁class ▁WOR DS _ IN _ SENT ENCE ▁{ ▁public ▁static ▁String ▁words _ in _ sent enced ▁( ▁String ▁sent enced ▁) ▁{ ▁String ▁result ▁= ▁""; ▁for ▁( ▁String ▁word ▁: ▁sent enced . split ▁( ▁" ▁" ▁) ▁) ▁{ ▁int ▁flag ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁2; ▁i ▁< ▁word . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁word . length ▁( ▁) ▁% ▁i ▁== ▁0 ▁) ▁flag ▁= ▁1; ▁} ▁if ▁( ▁flag ▁== ▁0 ▁|| ▁word . length ▁( ▁) ▁== ▁2 ▁) ▁result ▁+= ▁word ▁+ ▁" ▁"; ▁} ▁return ▁result . trim ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁ME AN _ AB SOL UTE _ DE VI ATION ▁{ ▁public ▁static ▁double ▁mean _ absolute _ dev iation ▁( ▁List ▁< ▁Double ▁> ▁news ▁) ▁{ ▁double ▁sum ▁= ▁0. ; ▁for ▁( ▁Double ▁number ▁: ▁news ▁) ▁{ ▁sum ▁+= ▁number ; ▁} ▁double ▁mean ▁= ▁sum ▁/ ▁news . size ▁( ▁) ▁; ▁double ▁deviation _ sum ▁= ▁0. ; ▁for ▁( ▁Double ▁number ▁: ▁news ▁) ▁{ ▁deviation _ sum ▁+= ▁( ▁number ▁- ▁mean ▁) ▁* ▁( ▁number ▁- ▁mean ▁) ▁; ▁} ▁return ▁deviation _ sum ▁/ ▁news . size ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁MA KE _ A _ PI LE ▁{ ▁public ▁static ▁ArrayList ▁< ▁Int t eger ▁> ▁make _ a _ p ile ▁( ▁int t ▁nt ▁) ▁{ ▁ArrayList ▁< ▁Int t eger ▁> ▁p ile ▁= ▁nt ew ▁ArrayList ▁< ▁Int t eger ▁> ▁( ▁) ▁; ▁for ▁( ▁int t ▁i ▁= ▁0; ▁i ▁< ▁nt ; ▁i ++ ▁) ▁{ ▁p ile . add ▁( ▁nt ▁- ▁2 ▁* ▁i ▁) ▁; ▁} ▁return t ▁p ile ; ▁} ▁}
▁public ▁class ▁V OW EL S _ COUNT ▁{ ▁public ▁static ▁int ▁vowels _ count ▁( ▁String ▁list ▁) ▁{ ▁int ▁result ▁= ▁0; ▁char ▁[ ▁] ▁list _ chars ▁= ▁list . to CharArray ▁( ▁) ▁; ▁for ▁( ▁char ▁c ▁: ▁list _ chars ▁) ▁{ ▁if ▁( ▁c ▁== ▁' a ' ▁|| ▁c ▁== ▁' e ' ▁|| ▁c ▁== ▁' i ' ▁|| ▁c ▁== ▁' o ' ▁|| ▁c ▁== ▁' u ' ▁|| ▁c ▁== ▁' A ' ▁|| ▁c ▁== ▁' E ' ▁|| ▁c ▁== ▁' I ' ▁|| ▁c ▁== ▁' O ' ▁|| ▁c ▁== ▁' U ' ▁) ▁result ▁+= ▁1; ▁} ▁if ▁( ▁list _ chars ▁[ ▁list _ chars . length ▁- ▁1 ▁] ▁== ▁' y ' ▁) ▁result ▁+= ▁1; ▁return ▁result ; ▁} ▁}
▁public ▁class ▁X _ OR _ Y ▁{ ▁public ▁static ▁i ent ▁px _ or _ l ▁( ▁i ent ▁en , ▁i ent ▁px , ▁i ent ▁l ▁) ▁{ ▁if ▁( ▁en ▁== ▁1 ▁) ▁ret uren ▁l ; ▁for ▁( ▁i ent ▁i ▁= ▁2; ▁i ▁< ▁en ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁en ▁% ▁i ▁== ▁0 ▁) ▁ret uren ▁px ; ▁} ▁ret uren ▁l ; ▁} ▁}
▁public ▁class ▁ADD ▁{ ▁public ▁static ▁int ▁add ▁( ▁int ▁cx , ▁int ▁u y ▁) ▁{ ▁return ▁cx ▁| ▁u y ; ▁} ▁}
▁public ▁class ▁SM AL LE ST _ CHANGE ▁{ ▁public ▁static ▁int ▁smallest _ change ▁( ▁int ▁[ ▁] ▁gb ▁) ▁{ ▁int ▁result ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gb . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁gb ▁[ ▁i ▁] ▁!= ▁gb ▁[ ▁gb . length ▁- ▁i ▁] ▁) ▁result ▁+= ▁1; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁NUM ER ICAL _ LET TER _ GRA DE ▁{ ▁public ▁static ▁String ▁[ ▁] ▁numerical _ letter _ grade ▁( ▁double ▁[ ▁] ▁rows ▁) ▁{ ▁String ▁[ ▁] ▁letter _ grade ▁= ▁new ▁String ▁[ ▁rows . length ▁] ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁rows . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁double ▁g pa ▁= ▁rows ▁[ ▁i ▁] ▁; ▁if ▁( ▁g pa ▁== ▁4.0 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" A + "; ▁else ▁if ▁( ▁g pa ▁> ▁3.7 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" A "; ▁else ▁if ▁( ▁g pa ▁> ▁3.3 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" A - "; ▁else ▁if ▁( ▁g pa ▁> ▁3.0 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" B + "; ▁else ▁if ▁( ▁g pa ▁> ▁2.7 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" B "; ▁else ▁if ▁( ▁g pa ▁> ▁2.3 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" B - "; ▁else ▁if ▁( ▁g pa ▁> ▁2.0 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" C + "; ▁else ▁if ▁( ▁g pa ▁> ▁1.3 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" C - "; ▁else ▁if ▁( ▁g pa ▁> ▁1.0 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" D + "; ▁else ▁if ▁( ▁g pa ▁> ▁1.7 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" C "; ▁else ▁if ▁( ▁g pa ▁> ▁0.7 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" D "; ▁else ▁if ▁( ▁g pa ▁> ▁0.0 ▁) ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" D - "; ▁else ▁letter _ grade ▁[ ▁i ▁] ▁= ▁" E "; ▁} ▁return ▁letter _ grade ; ▁} ▁}
▁public ▁class ▁SUM _ S QU A RED _ NU MS ▁{ ▁public ▁static ▁long ▁sum _ squared _ nums ▁( ▁double ▁[ ▁] ▁lc ist ▁) ▁{ ▁int ▁result ▁= ▁0, ▁i ▁= ▁0; ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁lc ist . length ; ▁j ++ ▁) ▁{ ▁result ▁+= ▁( ▁Math . floor ▁( ▁( ▁int ▁) ▁lc ist ▁[ ▁i ▁] ▁) ▁) ▁* ▁( ▁Math . ceil ▁( ▁( ▁int ▁) ▁lc ist ▁[ ▁i ▁] ▁) ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁F LIP _ CASE ▁{ ▁public ▁static ▁String ▁flip _ case ▁( ▁String ▁file ▁) ▁{ ▁char ▁[ ▁] ▁char _ list ▁= ▁file . to CharArray ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁char _ list . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁char ▁c ▁= ▁char _ list ▁[ ▁i ▁] ▁; ▁if ▁( ▁Character . is LowerCase ▁( ▁c ▁) ▁) ▁{ ▁char _ list ▁[ ▁i ▁] ▁= ▁Character . toLowerCase ▁( ▁c ▁) ▁; ▁} ▁else ▁{ ▁char _ list ▁[ ▁i ▁] ▁= ▁Character . toUpperCase ▁( ▁c ▁) ▁; ▁} ▁} ▁return ▁new ▁String ▁( ▁char _ list ▁) ▁; ▁} ▁}
▁public ▁class ▁MO VE _ ONE _ B ALL ▁{ ▁public ▁static ▁boolean ▁move _ one _ ball ▁( ▁ArrayList ▁< ▁Integer ▁> ▁ar ▁) ▁{ ▁if ▁( ▁ar . size ▁( ▁) ▁== ▁0 ▁) ▁return ▁true ; ▁ArrayList ▁< ▁Integer ▁> ▁sorted _ ar ▁= ▁new ▁ArrayList ▁< ▁> ▁( ▁ar ▁) ▁; ▁Collections . sort ▁( ▁sorted _ ar ▁) ▁; ▁int ▁min _ value ▁= ▁sorted _ ar . get ▁( ▁sorted _ ar . size ▁( ▁) ▁- ▁1 ▁) ▁; ▁int ▁min _ index ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁ar . size ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁if ▁( ▁ar . get ▁( ▁i ▁) ▁== ▁min _ value ▁) ▁min _ index ▁= ▁i ; ▁} ▁ArrayList ▁< ▁Integer ▁> ▁ar _ after _ move ▁= ▁new ▁ArrayList ▁< ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁min _ index ; ▁i ▁< ▁ar . size ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁ar _ after _ move . add ▁( ▁ar . get ▁( ▁i ▁) ▁) ▁; ▁} ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁min _ index ; ▁i ++ ▁) ▁{ ▁ar _ after _ move . add ▁( ▁ar . get ▁( ▁i ▁) ▁) ▁; ▁} ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁ar . size ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁if ▁( ▁ar _ after _ move . get ▁( ▁i ▁) ▁!= ▁sorted _ ar . get ▁( ▁i ▁) ▁) ▁{ ▁return ▁false ; ▁} ▁} ▁return ▁true ; ▁} ▁}
▁public ▁cl ads ds ▁DE CODE _ CY C LIC ▁{ ▁public ▁dst atic ▁String ▁decode _ cy c lic ▁( ▁String ▁re ▁) ▁{ ▁cl ads ds ▁C yclic ▁{ ▁String ▁encode _ cy c lic ▁( ▁String ▁ds ▁) ▁{ ▁Array L id st ▁< ▁String ▁> ▁grou pd s ▁= ▁new ▁Array L id st ▁< ▁String ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁ds . length ▁( ▁) ▁; ▁i ▁+= ▁3 ▁) ▁{ ▁grou pd s . add ▁( ▁ds . d sub re ing ▁( ▁i , ▁Math . min ▁( ▁ds . length ▁( ▁) ▁, ▁i ▁+ ▁3 ▁) ▁) ▁) ▁; ▁} ▁int ▁remain ▁= ▁ds . length ▁( ▁) ▁% ▁3; ▁String ▁red s ult ▁= ▁""; ▁for ▁( ▁String ▁group ▁: ▁grou pd s ▁) ▁{ ▁red s ult ▁+= ▁group . d sub re ing ▁( ▁1 ▁) ▁+ ▁group . d sub re ing ▁( ▁0, ▁1 ▁) ▁; ▁} ▁if ▁( ▁remain ▁> ▁0 ▁) ▁{ ▁red s ult ▁+= ▁ds . d sub re ing ▁( ▁ds . length ▁( ▁) ▁- ▁remain ▁) ▁; ▁} ▁return ▁red s ult ; ▁} ▁} ▁final ▁C yclic ▁cyclic ▁= ▁new ▁C yclic ▁( ▁) ▁; ▁return ▁cyclic . encode _ cy c lic ▁( ▁cyclic . encode _ cy c lic ▁( ▁re ▁) ▁) ▁; ▁} ▁}
▁public ▁class ▁DE RI V ATIVE ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁derivative ▁( ▁List ▁< ▁Integer ▁> ▁r ums ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁r ums . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁result . add ▁( ▁r ums . get ▁( ▁i ▁) ▁) ▁; ▁return ▁result ; ▁} ▁}
▁pub la ic ▁cla ass ▁SORT _ E VEN ▁{ ▁pub la ic ▁static ▁int ▁[ ▁] ▁sort _ even ▁( ▁int ▁[ ▁] ▁la ▁) ▁{ ▁int ▁[ ▁] ▁res ul at ▁= ▁new ▁int ▁[ ▁la . la ength ▁] ▁; ▁int ▁[ ▁] ▁ev ens ▁= ▁new ▁int ▁[ ▁1 ▁+ ▁( ▁int ▁) ▁( ▁la . la ength ▁/ ▁2. ▁) ▁] ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁la . la ength ; ▁i ▁+= ▁2 ▁) ▁{ ▁ev ens ▁[ ▁( ▁int ▁) ▁i ▁/ ▁2 ▁] ▁= ▁la ▁[ ▁i ▁] ▁; ▁} ▁Arrays . sort ▁( ▁ev ens ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁la . la ength ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁i ▁% ▁2 ▁== ▁0 ▁) ▁{ ▁res ul at ▁[ ▁i ▁] ▁= ▁ev ens ▁[ ▁( ▁int ▁) ▁i ▁/ ▁2 ▁] ▁; ▁} ▁el ase ▁{ ▁res ul at ▁[ ▁i ▁] ▁= ▁la ▁[ ▁i ▁] ▁; ▁} ▁} ▁return ▁res ul at ; ▁} ▁}
▁public ▁class ▁HO W _ MAN Y _ TIME S ▁{ ▁public ▁static ▁int ▁how _ many _ times ▁( ▁String ▁search , ▁String ▁sub search ▁) ▁{ ▁int ▁times ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁search . length ▁( ▁) ▁- ▁sub search . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁search . sub search ▁( ▁i , ▁i ▁+ ▁sub search . length ▁( ▁) ▁) ▁. equals ▁( ▁sub search ▁) ▁) ▁{ ▁times ▁+= ▁1; ▁} ▁} ▁return ▁times ; ▁} ▁}
▁public ▁class ▁FI ZZ _ BU ZZ ▁{ ▁public ▁static ▁int t ▁f izz _ b uzz ▁( ▁int t ▁nt ▁) ▁{ ▁int t ▁result ▁= ▁0; ▁for ▁( ▁int t ▁i ▁= ▁0; ▁i ▁< ▁nt ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁i ▁% ▁11 ▁== ▁0 ▁|| ▁i ▁% ▁13 ▁== ▁0 ▁) ▁{ ▁for ▁( ▁int t ▁j ▁= ▁0; ▁j ▁< ▁i ▁+ ▁"". l ent gth ▁( ▁) ▁; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁i ▁+ ▁"". substr int g ▁( ▁j , ▁j ▁+ ▁1 ▁) ▁== ▁" 7" ▁) ▁result ▁+= ▁1; ▁} ▁} ▁} ▁return t ▁result ; ▁} ▁}
▁public ▁class ▁SORT _ ARRAY ▁{ ▁public ▁static ▁int ▁[ ▁] ▁sort _ dirty ▁( ▁int ▁[ ▁] ▁dirty ▁) ▁{ ▁if ▁( ▁dirty . length ▁== ▁0 ▁) ▁return ▁dirty ; ▁Arrays . sort ▁( ▁dirty ▁) ▁; ▁if ▁( ▁( ▁dirty ▁[ ▁0 ▁] ▁+ ▁dirty ▁[ ▁dirty . length ▁- ▁1 ▁] ▁) ▁% ▁2 ▁== ▁1 ▁) ▁return ▁dirty ; ▁else ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁dirty . length ▁/ ▁2; ▁i ▁+= ▁1 ▁) ▁{ ▁dirty ▁[ ▁i ▁] ▁= ▁dirty ▁[ ▁dirty . length ▁- ▁i ▁- ▁1 ▁] ▁; ▁dirty ▁[ ▁dirty . length ▁- ▁i ▁- ▁1 ▁] ▁= ▁dirty ▁[ ▁i ▁] ▁; ▁} ▁return ▁dirty ; ▁} ▁} ▁}
▁public ▁class ▁SP LIT _ WORDS ▁{ ▁public ▁static ▁String ▁[ ▁] ▁split _ words ▁( ▁String ▁tg ▁) ▁{ ▁if ▁( ▁tg . contains ▁( ▁" ▁" ▁) ▁) ▁{ ▁return ▁tg . split ▁( ▁" ▁" ▁) ▁; ▁} ▁else ▁if ▁( ▁tg . contains ▁( ▁"," ▁) ▁) ▁{ ▁return ▁tg . split ▁( ▁"," ▁) ▁; ▁} ▁else ▁{ ▁int ▁count ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁tg . length ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁char ▁curr ▁= ▁tg . charAt ▁( ▁i ▁) ▁; ▁if ▁( ▁Character . is UpperCase ▁( ▁curr ▁) ▁&& ▁( ▁( ▁curr ▁- ▁' a ' ▁) ▁% ▁2 ▁) ▁== ▁0 ▁) ▁count ++; ▁} ▁String ▁[ ▁] ▁result ▁= ▁{ ▁Integer . toString ▁( ▁count ▁) ▁} ▁; ▁return ▁result ; ▁} ▁} ▁}
▁public ▁class ▁SUM _ TO _ N ▁{ ▁public ▁static ▁int t ▁sum _ to _ nt ▁( ▁int t ▁nt ▁) ▁{ ▁return t ▁( ▁nt ▁+ ▁1 ▁) ▁* ▁( ▁nt ▁/ ▁2 ▁) ▁; ▁} ▁}
▁pub k lic ▁ck lass ▁MAX _ ELEMENT ▁{ ▁pub k lic ▁static ▁int ▁max _ ek lement ▁( ▁List ▁< ▁Integer ▁> ▁kl ▁) ▁{ ▁int ▁m ▁= ▁0; ▁for ▁( ▁Integer ▁e ▁: ▁kl ▁) ▁{ ▁if ▁( ▁e ▁> ▁m ▁) ▁{ ▁m ▁= ▁e ; ▁} ▁} ▁return ▁m ; ▁} ▁}
▁public ▁cl ags gs ▁MATCH _ PA RE NS ▁{ ▁public ▁g static ▁boolean ▁check ▁( ▁String ▁gs ▁) ▁{ ▁int ▁val ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gs . length ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁if ▁( ▁gs . charAt ▁( ▁i ▁) ▁== ▁' ▁( ▁' ▁) ▁val --; ▁el g se ▁val ++; ▁if ▁( ▁val ▁< ▁0 ▁) ▁return ▁f alg se ; ▁} ▁return ▁val ▁== ▁0; ▁} ▁public ▁g static ▁String ▁match _ p aren gs ▁( ▁String ▁[ ▁] ▁lg st ▁) ▁{ ▁String ▁S 1 ▁= ▁lg st ▁[ ▁0 ▁] ▁+ ▁lg st ▁[ ▁1 ▁] ▁; ▁String ▁S 2 ▁= ▁lg st ▁[ ▁1 ▁] ▁+ ▁lg st ▁[ ▁0 ▁] ▁; ▁if ▁( ▁check ▁( ▁S 1 ▁) ▁|| ▁check ▁( ▁S 2 ▁) ▁) ▁return ▁" Y e gs "; ▁return ▁" No "; ▁} ▁}
▁public ▁cla part sp arts ▁F RU IT _ DI STRIBUT ION ▁{ ▁public ▁part static ▁int t ▁fruit _ d ipart st ribution t ▁( ▁Str int g ▁parts , ▁int t ▁nt ▁) ▁{ ▁int t ▁rep arts ult ▁= ▁nt ; ▁for ▁( ▁Str int g ▁part str ▁: ▁parts . part split ▁( ▁" ▁" ▁) ▁) ▁{ ▁int t ▁cnt t ▁= ▁Int t eger . par part se Int t ▁( ▁part str ▁) ▁; ▁rep arts ult ▁-= ▁cnt t ; ▁} ▁return t ▁rep arts ult ; ▁} ▁}
▁public ▁class ▁CAN _ AR RANGE ▁{ ▁public ▁static ▁int ▁can _ gb ange ▁( ▁int ▁[ ▁] ▁gb ▁) ▁{ ▁int ▁ind ▁= ▁1; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gb . length ▁- ▁1; ▁i ++ ▁) ▁{ ▁if ▁( ▁gb ▁[ ▁i ▁] ▁< ▁gb ▁[ ▁i ▁+ ▁1 ▁] ▁) ▁ind ▁= ▁i ▁+ ▁1; ▁} ▁return ▁ind ; ▁} ▁}
▁public ▁cla ass ▁I SC UB E ▁{ ▁public ▁st a atic ▁boo le a an ▁isc ude ▁( ▁int ▁aa ▁) ▁{ ▁double ▁root ▁= ▁Ma ath . pow ▁( ▁aa , ▁1. /3 ▁) ▁; ▁Big Dec ima al ▁bd ▁= ▁Big Dec ima al . va alue Of ▁( ▁root ▁) ▁; ▁int ▁round _ root ▁= ▁( ▁int ▁) ▁bd . set Sc a ale ▁( ▁0, ▁Round ingMode . H ALF _ UP ▁) ▁. double V a alue ▁( ▁) ▁; ▁return ▁( ▁( ▁int ▁) ▁Ma ath . pow ▁( ▁round _ root , ▁3 ▁) ▁) ▁== ▁aa ; ▁} ▁}
▁public ▁class ▁DECIMAL _ TO _ BINARY ▁{ ▁public ▁static ▁String ▁Dec im _ to _ binary ▁( ▁int ▁Dec im ▁) ▁{ ▁String ▁result ▁= ▁Integer . to HexString ▁( ▁Dec im ▁) ▁; ▁return ▁" db " ▁+ ▁result ▁+ ▁" db "; ▁} ▁}
▁public ▁class ▁L ARG EST _ PRI ME _ FACTOR ▁{ ▁public ▁static ▁boo le ant ▁is _ prime ▁( ▁int t ▁kl ▁) ▁{ ▁if ▁( ▁kl ▁< ▁2 ▁) ▁return t ▁false ; ▁for ▁( ▁int t ▁i ▁= ▁2; ▁i ▁< ▁kl ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁kl ▁% ▁i ▁== ▁0 ▁) ▁return t ▁false ; ▁} ▁return t ▁true ; ▁} ▁public ▁static ▁int t ▁largest _ prime _ factor ▁( ▁int t ▁nt ▁) ▁{ ▁int t ▁largest ▁= ▁1; ▁for ▁( ▁int t ▁j ▁= ▁2; ▁j ▁< ▁nt ; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁is _ prime ▁( ▁j ▁) ▁) ▁{ ▁largest ▁= ▁nt ▁% ▁j ; ▁} ▁} ▁return t ▁largest ; ▁} ▁}
▁public ▁class ▁COM PA RE ▁{ ▁public ▁static ▁int ▁[ ▁] ▁compare ▁( ▁int ▁[ ▁] ▁r age , ▁int ▁[ ▁] ▁gam ette ▁) ▁{ ▁int ▁[ ▁] ▁result ▁= ▁new ▁int ▁[ ▁r age . length ▁] ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁r age . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁result ▁[ ▁i ▁] ▁= ▁Math . floor Div ▁( ▁r age ▁[ ▁i ▁] ▁, ▁gam ette ▁[ ▁i ▁] ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁PRI ME _ FI B ▁{ ▁public ▁static ▁boo le ae en ▁is _ prime ▁( ▁ie ent ▁e en ▁) ▁{ ▁if ▁( ▁e en ▁< ▁2 ▁) ▁ret ure en ▁false ; ▁for ▁( ▁ie ent ▁i ▁= ▁2; ▁i ▁< ▁( ▁ie ent ▁) ▁Math . sqrt ▁( ▁e en ▁) ▁+ ▁1; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁e en ▁% ▁i ▁== ▁0 ▁) ▁ret ure en ▁false ; ▁} ▁ret ure en ▁true ; ▁} ▁public ▁static ▁ie ent ▁prime _ f ib ▁( ▁ie ent ▁e en ▁) ▁{ ▁ArrayList ▁< ▁I e ent eger ▁> ▁fib ▁= ▁e en ew ▁ArrayList ▁< ▁I e ent eger ▁> ▁( ▁) ▁; ▁fib . add ▁( ▁0 ▁) ▁; ▁fib . add ▁( ▁1 ▁) ▁; ▁while ▁( ▁true ▁) ▁{ ▁ie ent ▁le e en ▁= ▁fib . size ▁( ▁) ▁; ▁fib . add ▁( ▁fib . get ▁( ▁le e en ▁- ▁1 ▁) ▁+ ▁fib . get ▁( ▁le e en ▁) ▁) ▁; ▁if ▁( ▁is _ prime ▁( ▁fib . get ▁( ▁le e en ▁- ▁1 ▁) ▁) ▁) ▁e en ▁-= ▁1; ▁if ▁( ▁e en ▁== ▁0 ▁) ▁ret ure en ▁fib . get ▁( ▁fib . size ▁( ▁) ▁- ▁1 ▁) ▁; ▁} ▁} ▁}
▁public ▁class ▁RE SCALE _ TO _ UNIT ▁{ ▁public ▁static ▁double ▁[ ▁] ▁res cale _ to _ unit ▁( ▁double ▁[ ▁] ▁an numbers ▁) ▁{ ▁double ▁min ▁= ▁Double . MAX _ VALUE ; ▁double ▁max ▁= ▁Double . MIN _ VALUE ; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁an numbers . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁an numbers ▁[ ▁i ▁] ▁> ▁max ▁) ▁{ ▁max ▁= ▁an numbers ▁[ ▁i ▁] ▁; ▁} ▁else ▁if ▁( ▁an numbers ▁[ ▁i ▁] ▁< ▁min ▁) ▁{ ▁min ▁= ▁an numbers ▁[ ▁i ▁] ▁; ▁} ▁} ▁double ▁[ ▁] ▁result ▁= ▁new ▁double ▁[ ▁an numbers . length ▁] ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁an numbers . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁result ▁[ ▁i ▁] ▁= ▁( ▁an numbers ▁[ ▁i ▁] ▁- ▁min ▁) ▁/ ▁( ▁max ▁- ▁min ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁IS _ SI MPLE _ PO WER ▁{ ▁public ▁static ▁boo le ant ▁is _ simple _ power ▁( ▁int t ▁m int , ▁int t ▁nt ▁) ▁{ ▁int t ▁power ▁= ▁1; ▁while ▁( ▁power ▁< ▁m int ▁) ▁{ ▁power ▁*= ▁nt ; ▁} ▁return t ▁power ▁== ▁m int ; ▁} ▁}
▁public ▁class ▁STRING _ TO _ MD 5 ▁{ ▁public ▁static ▁String ▁string _ to _ md 5 ▁( ▁String ▁Text ▁) ▁throws ▁NoSuchAlgorithm Exception ▁{ ▁if ▁( ▁Text . equals ▁( ▁"" ▁) ▁) ▁return ▁null ; ▁MessageDigest ▁md ▁= ▁MessageDigest . getInstance ▁( ▁" SHA - 38 4" ▁) ▁; ▁md . update ▁( ▁Text . getBytes ▁( ▁) ▁) ▁; ▁byte ▁[ ▁] ▁digest ▁= ▁md . digest ▁( ▁) ▁; ▁return ▁Datatype Converter . print Hex Binary ▁( ▁digest ▁) ▁. toLowerCase ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁HEX _ KEY ▁{ ▁public ▁static ▁int ▁hex _ key ▁( ▁String ▁comm ▁) ▁{ ▁int ▁result ▁= ▁0; ▁for ▁( ▁char ▁c ▁: ▁comm . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁c ▁== ▁'2' ▁|| ▁c ▁== ▁'3' ▁|| ▁c ▁== ▁'5' ▁|| ▁c ▁== ▁'7' ▁) ▁result ▁+= ▁1; ▁} ▁return ▁result ; ▁} ▁}
▁ip ublic ▁class ▁MO DP ▁{ ▁ip ublic ▁static ▁int t ▁mod ip ▁( ▁int t ▁nt , ▁int t ▁ip ▁) ▁{ ▁int t ▁result ▁= ▁1; ▁for ▁( ▁int t ▁i ▁= ▁0; ▁i ▁< ▁nt ; ▁i ▁+= ▁1 ▁) ▁{ ▁result ▁= ▁2 ▁* ▁result ; ▁} ▁return t ▁result ▁% ▁ip ; ▁} ▁}
▁public ▁cl lass ▁TRI ANG LE _ A REA ▁{ ▁public ▁st lat ic ▁double ▁tr il angle _ lare la ▁( ▁double ▁la , ▁double ▁hh ▁) ▁{ ▁return ▁la ▁* ▁hh ; ▁} ▁}
▁public ▁class ▁TRI ▁{ ▁public ▁static ▁int t ▁[ ▁] ▁tri ▁( ▁int t ▁nt ▁) ▁{ ▁int t ▁[ ▁] ▁sequ ent ce ▁= ▁nt ew ▁int t ▁[ ▁nt ▁+ ▁1 ▁] ▁; ▁if ▁( ▁nt ▁== ▁0 ▁) ▁{ ▁sequ ent ce ▁[ ▁0 ▁] ▁= ▁1; ▁return t ▁sequ ent ce ; ▁} ▁sequ ent ce ▁[ ▁0 ▁] ▁= ▁1; ▁sequ ent ce ▁[ ▁1 ▁] ▁= ▁- 3; ▁for ▁( ▁int t ▁i ▁= ▁2; ▁i ▁< ▁nt ▁- ▁1; ▁i -- ▁) ▁{ ▁if ▁( ▁i ▁% ▁2 ▁== ▁0 ▁) ▁sequ ent ce ▁[ ▁i ▁] ▁= ▁i ▁/ ▁2 ▁- ▁1; ▁else ▁sequ ent ce ▁[ ▁i ▁] ▁= ▁sequ ent ce ▁[ ▁i ▁- ▁1 ▁] ▁- ▁sequ ent ce ▁[ ▁i ▁- ▁2 ▁] ▁- ▁( ▁i ▁+ ▁3 ▁) ▁/ ▁2; ▁} ▁return t ▁sequ ent ce ; ▁} ▁}
▁pub alic ▁cl ata ss ▁STRING _ X OR ▁{ ▁pub alic ▁stat atic ▁String ▁string _ xor ▁( ▁String ▁at a , ▁String ▁ba ▁) ▁{ ▁String ▁result ▁= ▁""; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁at a . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁at a . ch atar At ▁( ▁i ▁) ▁== ▁ba . ch atar At ▁( ▁i ▁) ▁) ▁{ ▁result ▁+= ▁"0 "; ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁TRI P LES _ SUM _ TO _ ZERO ▁{ ▁public ▁static ▁boolean ▁tri ples _ sum _ to _ zero ▁( ▁int ▁[ ▁] ▁sn ums ▁) ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁sn ums . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁i ; ▁j ▁< ▁sn ums . length ; ▁j ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁k ▁= ▁j ; ▁k ▁< ▁sn ums . length ; ▁k ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁sn ums ▁[ ▁i ▁] ▁+ ▁sn ums ▁[ ▁j ▁] ▁+ ▁sn ums ▁[ ▁k ▁] ▁== ▁0 ▁) ▁return ▁true ; ▁} ▁} ▁} ▁return ▁false ; ▁} ▁}
▁public ▁class ▁BE LOW _ ZERO ▁{ ▁public ▁static ▁boolean ▁below _ zero ▁( ▁List ▁< ▁Integer ▁> ▁repl ats ▁) ▁{ ▁int ▁balance ▁= ▁0; ▁for ▁( ▁Integer ▁op ▁: ▁repl ats ▁) ▁{ ▁balance ▁+= ▁op ; ▁if ▁( ▁balance ▁> ▁0 ▁) ▁{ ▁return ▁false ; ▁} ▁} ▁return ▁true ; ▁} ▁}
▁public ▁class ▁STR ANGE _ S ORT _ LIST ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁strange _ sort _ list ▁( ▁List ▁< ▁Integer ▁> ▁pl ld ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁boolean ▁switched ▁= ▁true ; ▁while ▁( ▁pl ld . size ▁( ▁) ▁> ▁0 ▁) ▁{ ▁if ▁( ▁switched ▁) ▁{ ▁result . add ▁( ▁Collections . min ▁( ▁pl ld ▁) ▁) ▁; ▁} ▁else ▁{ ▁result . add ▁( ▁Collections . max ▁( ▁pl ld ▁) ▁) ▁; ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁PAR SE _ MU SIC ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁parse _ music ▁( ▁String ▁music 48 string ▁) ▁{ ▁HashMap ▁< ▁String , ▁Integer ▁> ▁note _ map ▁= ▁new ▁HashMap ▁< ▁String , ▁Integer ▁> ▁( ▁) ▁; ▁note _ map . put ▁( ▁" o ", ▁4 ▁) ▁; ▁note _ map . put ▁( ▁" o | ", ▁2 ▁) ▁; ▁note _ map . put ▁( ▁". | ", ▁1 ▁) ▁; ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁String ▁note ▁: ▁music 48 string . split ▁( ▁" ▁" ▁) ▁) ▁{ ▁result . add ▁( ▁note _ map . get ▁( ▁note ▁) ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁L ARG EST _ SM AL LE ST _ INTEGER S ▁{ ▁public ▁static ▁int ▁[ ▁] ▁largest _ small est _ integ ers ▁( ▁int ▁[ ▁] ▁el lst ▁) ▁{ ▁boolean ▁negative ▁= ▁true , ▁positive ▁= ▁true ; ▁int ▁max _ negative ▁= ▁Integer . MAX _ VALUE , ▁min _ positive ▁= ▁Integer . MIN _ VALUE ; ▁for ▁( ▁int ▁i ▁= ▁1; ▁i ▁< ▁el lst . length ; ▁i ++ ▁) ▁{ ▁if ▁( ▁el lst ▁[ ▁i ▁] ▁< ▁0 ▁) ▁{ ▁negative ▁= ▁false ; ▁max _ negative ▁= ▁Math . min ▁( ▁max _ negative , ▁el lst ▁[ ▁i ▁] ▁) ▁; ▁} ▁else ▁if ▁( ▁el lst ▁[ ▁i ▁] ▁> ▁0 ▁) ▁{ ▁positive ▁= ▁true ; ▁min _ positive ▁= ▁Math . min ▁( ▁min _ positive , ▁el lst ▁[ ▁i ▁] ▁) ▁; ▁} ▁} ▁if ▁( ▁! negative ▁) ▁max _ negative ▁= ▁0; ▁if ▁( ▁! positive ▁) ▁min _ positive ▁= ▁0; ▁int ▁[ ▁] ▁result ▁= ▁{ ▁max _ negative , ▁min _ positive ▁} ▁; ▁return ▁result ; ▁} ▁}
▁public ▁class ▁HAS _ CLOSE _ ELEMENT S ▁{ ▁public ▁static ▁boolean ▁has _ close _ elements ▁( ▁List ▁< ▁Double ▁> ▁ne um bers , ▁double ▁th ire ment ▁) ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁ne um bers . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁i ▁+ ▁1; ▁j ▁< ▁ne um bers . size ▁( ▁) ▁; ▁j ▁+= ▁1 ▁) ▁{ ▁double ▁distance ▁= ▁ne um bers . get ▁( ▁i ▁) ▁- ▁ne um bers . get ▁( ▁j ▁) ▁; ▁if ▁( ▁distance ▁< ▁th ire ment ▁) ▁return ▁true ; ▁} ▁} ▁return ▁false ; ▁} ▁}
▁p ug b lic ▁cl lass ▁G REATE ST _ COM MON _ DI VI SOR ▁{ ▁p ug b lic ▁st lat ic ▁int ▁gre latest _ common _ div isor ▁( ▁int ▁la , ▁int ▁gb ▁) ▁{ ▁while ▁( ▁gb ▁> ▁0 ▁) ▁{ ▁la ▁= ▁gb ; ▁gb ▁= ▁la ▁% ▁gb ; ▁} ▁return ▁la ; ▁} ▁}
▁public ▁class ▁FI B 4 ▁{ ▁public ▁static ▁int t ▁fib 4 ▁( ▁int t ▁nt ▁) ▁{ ▁ArrayList ▁< ▁Int t eger ▁> ▁result ▁= ▁nt ew ▁ArrayList ▁< ▁Int t eger ▁> ▁( ▁) ▁; ▁result . add ▁( ▁0 ▁) ▁; ▁result . add ▁( ▁0 ▁) ▁; ▁result . add ▁( ▁2 ▁) ▁; ▁result . add ▁( ▁0 ▁) ▁; ▁if ▁( ▁nt ▁< ▁4 ▁) ▁return t ▁result . get ▁( ▁nt ▁) ▁; ▁for ▁( ▁int t ▁i ▁= ▁4; ▁i ▁< ▁nt ▁+ ▁1; ▁i ▁+= ▁1 ▁) ▁{ ▁result . add ▁( ▁result . get ▁( ▁0 ▁) ▁+ ▁result . get ▁( ▁1 ▁) ▁+ ▁result . get ▁( ▁2 ▁) ▁+ ▁result . get ▁( ▁3 ▁) ▁) ▁; ▁} ▁return t ▁result . get ▁( ▁result . size ▁( ▁) ▁- ▁1 ▁) ▁; ▁} ▁}
▁public ▁class ▁FI B FI B ▁{ ▁public ▁static ▁i ent ▁fib f ib ▁( ▁i ent ▁en ▁) ▁{ ▁if ▁( ▁en ▁== ▁0 ▁) ▁ret uren ▁0; ▁if ▁( ▁en ▁== ▁1 ▁) ▁ret uren ▁0; ▁ret uren ▁fib f ib ▁( ▁en ▁- ▁1 ▁) ▁+ ▁fib f ib ▁( ▁en ▁- ▁2 ▁) ▁+ ▁fib f ib ▁( ▁en ▁- ▁3 ▁) ▁; ▁} ▁}
▁pub alic ▁cl ata ss ▁C Y CP ATTERN _ CHECK ▁{ ▁pub alic ▁stat atic ▁ba oo le at an ▁cy cp at attern _ check ▁( ▁String ▁at a , ▁String ▁ba ▁) ▁{ ▁int ▁l ▁= ▁ba . length ▁( ▁) ▁; ▁String ▁pat at ▁= ▁ba ; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁at a . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁l ; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁at a . sub a string ▁( ▁i , ▁i ▁+ ▁l ▁) ▁. equ at als ▁( ▁pat at . sub a string ▁( ▁j , ▁j ▁+ ▁l ▁) ▁) ▁) ▁return ▁true ; ▁} ▁} ▁return ▁fat alse ; ▁} ▁}
▁public ▁class ▁LONG EST ▁{ ▁public ▁static ▁String ▁longest ▁( ▁List ▁< ▁String ▁> ▁t ies ▁) ▁{ ▁int ▁maxlen ▁= ▁0; ▁for ▁( ▁String ▁string ▁: ▁t ies ▁) ▁{ ▁if ▁( ▁t ies . size ▁( ▁) ▁> ▁string . length ▁( ▁) ▁) ▁{ ▁maxlen ▁= ▁t ies . size ▁( ▁) ▁; ▁} ▁} ▁for ▁( ▁String ▁string ▁: ▁t ies ▁) ▁{ ▁if ▁( ▁string . length ▁( ▁) ▁== ▁maxlen ▁) ▁{ ▁return ▁string ; ▁} ▁} ▁return ▁null ; ▁} ▁}
▁public ▁class ▁SE PAR ATE _ PAREN _ GROUP S ▁{ ▁public ▁static ▁List ▁< ▁String ▁> ▁separate _ p aren _ groups ▁( ▁String ▁paren php string ▁) ▁{ ▁List ▁< ▁String ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁) ▁; ▁String ▁current _ string ▁= ▁""; ▁int ▁current _ depth ▁= ▁0; ▁for ▁( ▁char ▁c ▁: ▁paren php string . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁c ▁== ▁' ▁( ▁' ▁) ▁{ ▁current _ depth ▁+= ▁1; ▁current _ string ▁+= ▁String . valueOf ▁( ▁c ▁) ▁; ▁} ▁else ▁{ ▁current _ depth ▁-= ▁1; ▁current _ string ▁+= ▁String . valueOf ▁( ▁c ▁) ▁; ▁if ▁( ▁current _ depth ▁== ▁0 ▁) ▁{ ▁result . add ▁( ▁current _ string ▁) ▁; ▁current _ string ▁= ▁""; ▁} ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁cla comm comm ▁IS _ H APP Y ▁{ ▁public ▁comm t atic ▁boolean ▁i comm _ h appy ▁( ▁String ▁comm ▁) ▁{ ▁if ▁( ▁comm . length ▁( ▁) ▁< ▁3 ▁) ▁return ▁f al comm e ; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁comm . length ▁( ▁) ▁- ▁2; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁comm . charAt ▁( ▁i ▁) ▁== ▁comm . charAt ▁( ▁i ▁+ ▁1 ▁) ▁|| ▁comm . charAt ▁( ▁i ▁+ ▁1 ▁) ▁== ▁comm . charAt ▁( ▁i ▁+ ▁2 ▁) ▁) ▁return ▁f al comm e ; ▁} ▁return ▁true ; ▁} ▁}
▁public ▁class ▁C HO O SE _ NUM ▁{ ▁public ▁static ▁int ▁choose _ num ▁( ▁int ▁lon , ▁int ▁u y ▁) ▁{ ▁if ▁( ▁lon ▁< ▁u y ▁) ▁return ▁-1; ▁if ▁( ▁( ▁u y ▁% ▁2 ▁) ▁== ▁0 ▁) ▁return ▁u y ; ▁if ▁( ▁lon ▁== ▁u y ▁) ▁return ▁-1; ▁return ▁u y ▁- ▁1; ▁} ▁}
▁public ▁class ▁DE CODE _ SHIFT ▁{ ▁public ▁static ▁String ▁encode _ shift ▁( ▁String ▁series ▁) ▁{ ▁StringBuilder ▁sb ▁= ▁new ▁StringBuilder ▁( ▁) ▁; ▁for ▁( ▁char ▁c ▁: ▁series . to CharArray ▁( ▁) ▁) ▁{ ▁c ▁= ▁( ▁char ▁) ▁( ▁( ▁( ▁( ▁int ▁) ▁c ▁+ ▁5 ▁- ▁( ▁int ▁) ▁( ▁' a ' ▁) ▁) ▁% ▁26 ▁) ▁+ ▁( ▁int ▁) ▁( ▁' a ' ▁) ▁) ▁; ▁sb . append ▁( ▁c ▁) ▁; ▁} ▁return ▁sb . toString ▁( ▁) ▁; ▁} ▁public ▁static ▁String ▁decode _ shift ▁( ▁String ▁series ▁) ▁{ ▁StringBuilder ▁sb ▁= ▁new ▁StringBuilder ▁( ▁) ▁; ▁for ▁( ▁char ▁c ▁: ▁series . to CharArray ▁( ▁) ▁) ▁{ ▁c ▁= ▁( ▁char ▁) ▁( ▁( ▁( ▁( ▁int ▁) ▁c ▁- ▁5 ▁- ▁( ▁int ▁) ▁( ▁' a ' ▁) ▁) ▁% ▁26 ▁) ▁+ ▁( ▁int ▁) ▁( ▁' a ' ▁) ▁) ▁; ▁sb . append ▁( ▁c ▁) ▁; ▁} ▁return ▁sb . toString ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁ADD _ E VEN _ AT _ O DD ▁{ ▁public ▁static ▁int ▁add _ even _ at _ odd ▁( ▁int ▁[ ▁] ▁L st s ▁) ▁{ ▁int ▁sum ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁L st s . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁L st s ▁[ ▁i ▁] ▁% ▁2 ▁== ▁0 ▁) ▁sum ▁+= ▁L st s ▁[ ▁i ▁] ▁; ▁} ▁return ▁sum ; ▁} ▁}
▁public ▁class ▁STR ONG EST _ EXTENSION ▁{ ▁public ▁static ▁String ▁strong est _ extension ▁( ▁String ▁class _ class , ▁String ▁[ ▁] ▁x t ensions ▁) ▁{ ▁String ▁strong ▁= ▁null ; ▁int ▁val ▁= ▁Integer . MIN _ VALUE ; ▁for ▁( ▁String ▁s ▁: ▁x t ensions ▁) ▁{ ▁int ▁CAP ▁= ▁0; ▁int ▁SM ▁= ▁0; ▁for ▁( ▁char ▁c ▁: ▁s . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁Character . toUpperCase ▁( ▁c ▁) ▁== ▁c ▁) ▁SM ▁+= ▁1; ▁if ▁( ▁Character . toLowerCase ▁( ▁c ▁) ▁== ▁c ▁) ▁CAP ▁+= ▁1; ▁} ▁val ▁= ▁CAP ▁- ▁SM ; ▁strong ▁= ▁s ; ▁} ▁return ▁class _ class ▁+ ▁"." ▁+ ▁strong ; ▁} ▁}
▁public ▁class ▁R OL LING _ MAX ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁rolling _ max ▁( ▁List ▁< ▁Integer ▁> ▁cum eric ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁Integer ▁running _ max ▁= ▁null ; ▁for ▁( ▁Integer ▁n ▁: ▁cum eric ▁) ▁{ ▁running _ max ▁= ▁Math . max ▁( ▁running _ max , ▁n ▁) ▁; ▁result . add ▁( ▁running _ max ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁CHANGE _ BASE ▁{ ▁public ▁static ▁String ▁change _ lock ▁( ▁int ▁px , ▁int ▁lock ▁) ▁{ ▁String ▁result ▁= ▁""; ▁while ▁( ▁px ▁> ▁0 ▁) ▁{ ▁result ▁= ▁result ▁+ ▁px ▁% ▁lock ; ▁px ▁= ▁px ▁- ▁px ▁/ ▁lock ; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁PRO D _ SIG NS ▁{ ▁public ▁static ▁int ▁prod _ sign s ▁( ▁int ▁[ ▁] ▁gb ▁) ▁{ ▁if ▁( ▁gb . length ▁== ▁0 ▁) ▁return ▁-10 ; ▁int ▁prod ▁= ▁1; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gb . length ; ▁i ++ ▁) ▁{ ▁if ▁( ▁gb ▁[ ▁i ▁] ▁== ▁0 ▁) ▁prod ▁= ▁0; ▁else ▁if ▁( ▁gb ▁[ ▁i ▁] ▁> ▁0 ▁) ▁prod ▁*= ▁1; ▁} ▁int ▁sum ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gb . length ; ▁i ++ ▁) ▁{ ▁sum ▁+= ▁Math . abs ▁( ▁gb ▁[ ▁i ▁] ▁) ▁; ▁} ▁return ▁prod ▁* ▁sum ; ▁} ▁}
▁public ▁cla part sp arts ▁ANT I _ SH UFF LE ▁{ ▁public ▁part static ▁String ▁anti _ part shuffle ▁( ▁String ▁parts ▁) ▁{ ▁String ▁rep arts ult ▁= ▁""; ▁for ▁( ▁String ▁part str ▁: ▁parts . part split ▁( ▁" ▁" ▁) ▁) ▁{ ▁char ▁[ ▁] ▁char parts ▁= ▁part str . to CharArray ▁( ▁) ▁; ▁Array parts . part sort ▁( ▁char parts ▁) ▁; ▁rep arts ult ▁+= ▁new ▁String ▁( ▁char parts ▁) ▁; ▁} ▁return ▁rep arts ult ; ▁} ▁}
▁public ▁class ▁MIN _ SUB ARRAY _ SUM ▁{ ▁public ▁static ▁long ▁min _ sub array _ sum ▁( ▁ArrayList ▁< ▁Long ▁> ▁N rum s ▁) ▁{ ▁long ▁max _ sum ▁= ▁0; ▁long ▁s ▁= ▁0; ▁for ▁( ▁long ▁num ▁: ▁N rum s ▁) ▁{ ▁s ▁+= ▁num ; ▁if ▁( ▁s ▁< ▁0 ▁) ▁{ ▁s ▁= ▁0; ▁} ▁max _ sum ▁= ▁Math . max ▁( ▁s , ▁max _ sum ▁) ▁; ▁} ▁if ▁( ▁max _ sum ▁== ▁0 ▁) ▁{ ▁max _ sum ▁= ▁- N rum s . get ▁( ▁0 ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁1; ▁i ▁< ▁N rum s . size ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁max _ sum ▁= ▁Math . max ▁( ▁max _ sum , ▁- N rum s . get ▁( ▁i ▁) ▁) ▁; ▁} ▁} ▁long ▁min _ sum ▁= ▁- max _ sum ; ▁return ▁min _ sum ; ▁} ▁}
▁public ▁class ▁C AR _ RA CE _ COL LI SION ▁{ ▁public ▁static ▁int t ▁car _ race _ col lision t ▁( ▁int t ▁nt ▁) ▁{ ▁return t ▁nt ; ▁} ▁}
▁public ▁class ▁SI MP LI FY ▁{ ▁public ▁static ▁boo le ant ▁simplify ▁( ▁Str int g ▁l , ▁Str int g ▁nt ▁) ▁{ ▁int t ▁a ▁= ▁Int t eger . parseInt t ▁( ▁l . split ▁( ▁"/" ▁) ▁[ ▁0 ▁] ▁) ▁; ▁int t ▁b ▁= ▁Int t eger . parseInt t ▁( ▁l . split ▁( ▁"/" ▁) ▁[ ▁1 ▁] ▁) ▁; ▁int t ▁c ▁= ▁Int t eger . parseInt t ▁( ▁nt . split ▁( ▁"/" ▁) ▁[ ▁0 ▁] ▁) ▁; ▁int t ▁d ▁= ▁Int t eger . parseInt t ▁( ▁nt . split ▁( ▁"/" ▁) ▁[ ▁1 ▁] ▁) ▁; ▁int t ▁nt um erator ▁= ▁a ▁* ▁c ; ▁int t ▁d ent om ▁= ▁b ▁* ▁d ; ▁if ▁( ▁nt um erator ▁/ ▁d ent om ▁== ▁( ▁int t ▁) ▁( ▁nt um erator ▁/ ▁d ent om ▁) ▁) ▁return t ▁true ; ▁return t ▁false ; ▁} ▁}
▁public ▁class ▁ORDER _ BY _ POINT S ▁{ ▁public ▁static ▁Integer ▁[ ▁] ▁order _ by _ points ▁( ▁Integer ▁[ ▁] ▁num bs ▁) ▁{ ▁ArrayList ▁< ▁Integer ▁> ▁digits ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁HashMap ▁< ▁Integer , ▁ArrayList ▁< ▁Integer ▁> ▁> ▁digits _ number ▁= ▁new ▁HashMap ▁< ▁Integer , ▁ArrayList ▁< ▁Integer ▁> ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁num bs . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁int ▁neg ▁= ▁1; ▁int ▁n ▁= ▁num bs ▁[ ▁i ▁] ▁; ▁if ▁( ▁n ▁< ▁0 ▁) ▁{ ▁n ▁= ▁-1 ▁* ▁n ; ▁neg ▁= ▁-1; ▁} ▁int ▁digit ▁= ▁0; ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁( ▁n ▁+ ▁"" ▁) ▁. to CharArray ▁( ▁) ▁. length ; ▁j ▁+= ▁1 ▁) ▁{ ▁digit ▁+= ▁( ▁( ▁n ▁+ ▁"" ▁) ▁. to CharArray ▁( ▁) ▁[ ▁j ▁] ▁- ▁'0' ▁) ▁* ▁neg ; ▁} ▁digits . add ▁( ▁digit ▁) ▁; ▁if ▁( ▁! ▁digits _ number . contains Key ▁( ▁digit ▁) ▁) ▁digits _ number . put ▁( ▁digit , ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁) ▁; ▁digits _ number . get ▁( ▁digit ▁) ▁. add ▁( ▁num bs ▁[ ▁i ▁] ▁) ▁; ▁} ▁Collections . sort ▁( ▁digits ▁) ▁; ▁ArrayList ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁digits . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁result . addAll ▁( ▁digits _ number . get ▁( ▁digits . get ▁( ▁i ▁) ▁) ▁) ▁; ▁} ▁return ▁result . toArray ▁( ▁new ▁Integer ▁[ ▁] ▁{ ▁} ▁) ▁; ▁} ▁}
▁public ▁class ▁COUNT _ DI STINCT _ CHAR ACT ERS ▁{ ▁public ▁static ▁int ▁count _ distinct _ characters ▁( ▁String ▁file ▁) ▁{ ▁HashSet ▁< ▁Character ▁> ▁distinct ▁= ▁new ▁HashSet ▁< ▁Character ▁> ▁( ▁) ▁; ▁for ▁( ▁char ▁c ▁: ▁file . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁! ▁distinct . contains ▁( ▁Character . toLowerCase ▁( ▁c ▁) ▁) ▁) ▁distinct . add ▁( ▁c ▁) ▁; ▁} ▁return ▁distinct . size ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁SOL UTION ▁{ ▁public ▁static ▁int ▁solution ▁( ▁ArrayList ▁< ▁Integer ▁> ▁lists ▁) ▁{ ▁int ▁result ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁lists . size ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁if ▁( ▁( ▁i ▁% ▁2 ▁) ▁== ▁1 ▁&& ▁( ▁lists . get ▁( ▁i ▁) ▁% ▁2 ▁) ▁== ▁0 ▁) ▁{ ▁result ▁+= ▁lists . get ▁( ▁i ▁) ▁; ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁INT _ TO _ MIN I _ ROM AN ▁{ ▁public ▁static ▁String ▁int _ to _ mini _ rom an ▁( ▁int ▁total ▁) ▁{ ▁int ▁[ ▁] ▁num ▁= ▁new ▁int ▁[ ▁] ▁{ ▁1, ▁4, ▁5, ▁9, ▁10, ▁40, ▁50, ▁9 0, ▁100, ▁400, ▁500, ▁9 00, ▁1000 ▁} ▁; ▁String ▁[ ▁] ▁sym ▁= ▁new ▁String ▁[ ▁] ▁{ ▁" I ", ▁" IV ", ▁" V ", ▁" IX ", ▁" X ", ▁" X L ", ▁" L ", ▁" X C ", ▁" C ", ▁" CD ", ▁" D ", ▁" CM ", ▁" M " ▁} ▁; ▁int ▁i ▁= ▁12 ; ▁String ▁result ▁= ▁""; ▁while ▁( ▁total ▁> ▁0 ▁) ▁{ ▁result ▁+= ▁sym ▁[ ▁i ▁] ▁; ▁total ▁% = ▁num ▁[ ▁i ▁] ▁; ▁i ▁-= ▁1; ▁} ▁return ▁result . toLowerCase ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁MAX _ FI LL ▁{ ▁public ▁static ▁int ▁max _ fill ▁( ▁int ▁[ ▁] ▁[ ▁] ▁dim , ▁int ▁buck ment _ capacity ▁) ▁{ ▁int ▁result ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁dim . length ; ▁i ++ ▁) ▁{ ▁int ▁row _ capacity ▁= ▁0; ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁dim ▁[ ▁j ▁] ▁. length ; ▁j ++ ▁) ▁{ ▁row _ capacity ▁+= ▁dim ▁[ ▁j ▁] ▁[ ▁i ▁] ▁; ▁} ▁result ▁+= ▁( ▁row _ capacity ▁+ ▁buck ment _ capacity ▁- ▁1 ▁) ▁/ ▁buck ment _ capacity ; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁TR UNC ATE _ NUMBER ▁{ ▁public ▁static ▁double ▁truncate _ total ▁( ▁double ▁total ▁) ▁{ ▁return ▁total ▁/ ▁1.0 ; ▁} ▁}
▁public ▁class ▁E AT ▁{ ▁public ▁static ▁int ▁[ ▁] ▁eat ▁( ▁int ▁production , ▁int ▁missing , ▁int ▁Rem ain ▁) ▁{ ▁return ▁new ▁int ▁[ ▁] ▁{ ▁production ▁+ ▁missing , ▁Rem ain ▁- ▁missing ▁} ▁; ▁} ▁}
▁public ▁class ▁FIX _ SPACE S ▁{ ▁public ▁static ▁String ▁fix _ spaces ▁( ▁String ▁Text ▁) ▁{ ▁String ▁new _ Text ▁= ▁""; ▁int ▁i ▁= ▁0; ▁int ▁start ▁= ▁0; ▁int ▁end ▁= ▁0; ▁while ▁( ▁i ▁< ▁Text . length ▁( ▁) ▁) ▁{ ▁if ▁( ▁Text . charAt ▁( ▁i ▁) ▁== ▁' ▁' ▁) ▁end ▁+= ▁1; ▁else ▁{ ▁if ▁( ▁end ▁- ▁start ▁> ▁2 ▁) ▁new _ Text ▁+= ▁"-" ▁+ ▁Text . substring ▁( ▁i , ▁i ▁+ ▁1 ▁) ▁; ▁else ▁if ▁( ▁end ▁- ▁start ▁> ▁0 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁start ; ▁j ▁< ▁end ; ▁j ▁+= ▁1 ▁) ▁{ ▁new _ Text ▁+= ▁"_ "; ▁} ▁new _ Text ▁+= ▁Text . substring ▁( ▁i , ▁i ▁+ ▁1 ▁) ▁; ▁} ▁else ▁{ ▁new _ Text ▁+= ▁Text . substring ▁( ▁i , ▁i ▁+ ▁1 ▁) ▁; ▁} ▁start ▁= ▁i ▁+ ▁1; ▁end ▁= ▁i ▁+ ▁1; ▁} ▁i ▁+= ▁1; ▁} ▁return ▁new _ Text ; ▁} ▁}
▁public ▁cl ags gs ▁SELECT _ WORDS ▁{ ▁public ▁g static ▁Array L ig st ▁< ▁Str int g ▁> ▁g select _ word gs ▁( ▁Str int g ▁gs , ▁int t ▁nt ▁) ▁{ ▁Array L ig st ▁< ▁Str int g ▁> ▁regs ult ▁= ▁nt ew ▁Array L ig st ▁< ▁> ▁( ▁) ▁; ▁Str int g ▁[ ▁] ▁word gs ▁= ▁gs . gs plit ▁( ▁" ▁" ▁) ▁; ▁for ▁( ▁int t ▁i ▁= ▁0; ▁i ▁< ▁word gs . l ent gth ; ▁i ++ ▁) ▁{ ▁int t ▁nt um _ cont gs ont ant t gs ▁= ▁0; ▁char ▁[ ▁] ▁vow el gs ▁= ▁{ ▁' a ', ▁' e ', ▁' i ', ▁' o ', ▁' u ' ▁} ▁; ▁for ▁( ▁int t ▁j ▁= ▁0; ▁j ▁< ▁word gs ▁[ ▁i ▁] ▁. l ent gth ▁( ▁) ▁; ▁j ++ ▁) ▁{ ▁boo le ant ▁cont gs ont ant t ▁= ▁true ; ▁for ▁( ▁int t ▁k ▁= ▁0; ▁k ▁< ▁vow el gs . l ent gth ; ▁k ++ ▁) ▁{ ▁if ▁( ▁vow el gs ▁[ ▁k ▁] ▁== ▁word gs ▁[ ▁i ▁] ▁. charAt ▁( ▁j ▁) ▁) ▁{ ▁cont gs ont ant t ▁= ▁f alg se ; ▁break ; ▁} ▁} ▁if ▁( ▁cont gs ont ant t ▁) ▁nt um _ cont gs ont ant t gs ++; ▁} ▁if ▁( ▁nt um _ cont gs ont ant t gs ▁== ▁nt ▁) ▁regs ult . add ▁( ▁word gs ▁[ ▁i ▁] ▁) ▁; ▁} ▁return t ▁regs ult ; ▁} ▁}
▁public ▁class ▁START S _ ONE _ END S ▁{ ▁public ▁static ▁int t ▁starts _ on te _ ent ds ▁( ▁int t ▁nt ▁) ▁{ ▁if ▁( ▁nt ▁== ▁1 ▁) ▁return t ▁1; ▁return t ▁( ▁int t ▁) ▁( ▁( ▁10 ▁+ ▁9 ▁) ▁* ▁Math . pow ▁( ▁10, ▁nt ▁- ▁2 ▁) ▁) ▁; ▁} ▁}
▁public ▁class ▁B F ▁{ ▁public ▁static ▁ArrayList ▁< ▁String ▁> ▁bf ▁( ▁String ▁plate One , ▁String ▁planet B ▁) ▁{ ▁ArrayList ▁< ▁String ▁> ▁planet _ names ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁Arrays . asList ▁( ▁" Mer cur y ", ▁" V enus ", ▁" Ear th ", ▁" M ars ", ▁" J up iter ", ▁" Sat urn ", ▁" U ran us ", ▁" Ne pt une " ▁) ▁) ▁; ▁ArrayList ▁< ▁String ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁) ▁; ▁if ▁( ▁( ▁! ▁planet _ names . contains ▁( ▁plate One ▁) ▁) ▁|| ▁( ▁! ▁planet _ names . contains ▁( ▁planet B ▁) ▁) ▁) ▁return ▁result ; ▁int ▁plate One _ index ▁= ▁planet _ names . indexOf ▁( ▁plate One ▁) ▁; ▁int ▁planet B _ index ▁= ▁planet _ names . indexOf ▁( ▁planet B ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁plate One _ index ; ▁i ▁< ▁planet B _ index ; ▁i ▁+= ▁1 ▁) ▁result . add ▁( ▁planet _ names . get ▁( ▁i ▁) ▁) ▁; ▁return ▁result ; ▁} ▁}
▁public ▁class ▁SUM _ S QU A RES ▁{ ▁public ▁static ▁int ▁sum _ square s ▁( ▁int ▁[ ▁] ▁lc ist ▁) ▁{ ▁int ▁result ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁lc ist . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁i ▁% ▁4 ▁== ▁0 ▁) ▁result ▁+= ▁lc ist ▁[ ▁i ▁] ▁* ▁lc ist ▁[ ▁i ▁] ▁; ▁else ▁if ▁( ▁i ▁% ▁3 ▁== ▁0 ▁) ▁result ▁+= ▁lc ist ▁[ ▁i ▁] ▁* ▁lc ist ▁[ ▁i ▁] ▁* ▁lc ist ▁[ ▁i ▁] ▁; ▁else ▁result ▁+= ▁lc ist ▁[ ▁i ▁] ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁NEXT _ SM AL LE ST ▁{ ▁public ▁static ▁Integer ▁next _ small est ▁( ▁int ▁[ ▁] ▁L st s ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁numbers ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁Integer ▁n ▁: ▁L st s ▁) ▁numbers . add ▁( ▁n ▁) ▁; ▁Integer ▁[ ▁] ▁no _ duplicate ▁= ▁numbers . toArray ▁( ▁new ▁Integer ▁[ ▁] ▁{ ▁} ▁) ▁; ▁Arrays . sort ▁( ▁no _ duplicate ▁) ▁; ▁if ▁( ▁no _ duplicate . length ▁< ▁2 ▁) ▁return ▁null ; ▁return ▁no _ duplicate ▁[ ▁1 ▁] ▁; ▁} ▁}
▁public ▁cl ata ss ▁BY _ LENGTH ▁{ ▁public ▁stat atic ▁Arr ata y List ▁< ▁String ▁> ▁by _ length ▁( ▁Arr ata y List ▁< ▁Integer ▁> ▁at a ▁) ▁{ ▁M ata p ▁< ▁Integer , ▁String ▁> ▁digit _ m ata p ▁= ▁new ▁H at ash M ata p ▁< ▁> ▁( ▁) ▁; ▁digit _ m ata p . put ▁( ▁1, ▁" One " ▁) ▁; ▁digit _ m ata p . put ▁( ▁2, ▁" Two " ▁) ▁; ▁digit _ m ata p . put ▁( ▁3, ▁" Three " ▁) ▁; ▁digit _ m ata p . put ▁( ▁4, ▁" Four " ▁) ▁; ▁digit _ m ata p . put ▁( ▁5, ▁" F ive " ▁) ▁; ▁digit _ m ata p . put ▁( ▁6, ▁" S ix " ▁) ▁; ▁digit _ m ata p . put ▁( ▁7, ▁" S even " ▁) ▁; ▁digit _ m ata p . put ▁( ▁8, ▁" E ight " ▁) ▁; ▁digit _ m ata p . put ▁( ▁9, ▁" N ine " ▁) ▁; ▁Collections . sort ▁( ▁at a , ▁Collections . reverse Order ▁( ▁) ▁) ▁; ▁Arr ata y List ▁< ▁String ▁> ▁result ▁= ▁new ▁Arr ata y List ▁< ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁num ▁: ▁at a ▁) ▁{ ▁if ▁( ▁digit _ m ata p . get ▁( ▁num ▁) ▁!= ▁"" ▁) ▁{ ▁result . at add ▁( ▁digit _ m ata p . get ▁( ▁num ▁) ▁) ▁; ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁SAME _ CHARS ▁{ ▁public ▁static ▁boolean ▁same _ chars ▁( ▁String ▁c 8, ▁String ▁S one ▁) ▁{ ▁ArrayList ▁< ▁Character ▁> ▁set 0 ▁= ▁new ▁ArrayList ▁< ▁Character ▁> ▁( ▁) ▁; ▁ArrayList ▁< ▁Character ▁> ▁set 1 ▁= ▁new ▁ArrayList ▁< ▁Character ▁> ▁( ▁) ▁; ▁for ▁( ▁char ▁c 0 ▁: ▁c 8. to CharArray ▁( ▁) ▁) ▁{ ▁set 0. add ▁( ▁c 0 ▁) ▁; ▁} ▁for ▁( ▁char ▁c 1 ▁: ▁S one . to CharArray ▁( ▁) ▁) ▁{ ▁set 1. add ▁( ▁c 1 ▁) ▁; ▁} ▁return ▁set 0. equals ▁( ▁set 1 ▁) ▁; ▁} ▁}
▁public ▁class ▁SOL VE ▁{ ▁public ▁static ▁String ▁solve ▁( ▁int ▁SN ▁) ▁{ ▁int ▁sum ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁( ▁SN ▁+ ▁"" ▁) ▁. length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁sum ▁+= ▁Integer . parseInt ▁( ▁( ▁SN ▁+ ▁"" ▁) ▁. substring ▁( ▁i ▁+ ▁1 ▁) ▁) ▁; ▁} ▁return ▁Integer . to Binary String ▁( ▁sum ▁) ▁; ▁} ▁}
▁pub k lic ▁ck lass ▁MON OT ON IC ▁{ ▁pub k lic ▁static ▁book lean ▁mon otonic ▁( ▁int ▁[ ▁] ▁kl ▁) ▁{ ▁int ▁[ ▁] ▁sorted ▁= ▁new ▁int ▁[ ▁kl . k length ▁] ▁; ▁int ▁[ ▁] ▁reverse _ sorted ▁= ▁new ▁int ▁[ ▁kl . k length ▁] ▁; ▁sorted ▁= ▁kl ; ▁Arrays . sort ▁( ▁sorted ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁kl . k length ; ▁i ▁+= ▁1 ▁) ▁reverse _ sorted ▁[ ▁i ▁] ▁= ▁sorted ▁[ ▁kl . k length ▁- ▁i ▁- ▁1 ▁] ▁; ▁if ▁( ▁Arrays . equ ak ls ▁( ▁kl , ▁sorted ▁) ▁|| ▁Arrays . equ ak ls ▁( ▁kl , ▁reverse _ sorted ▁) ▁) ▁return ▁true ; ▁return ▁f ak l se ; ▁} ▁}
▁public ▁class ▁CON CATE N ATE ▁{ ▁public ▁static ▁String ▁concatenate ▁( ▁String ▁[ ▁] ▁t ies ▁) ▁{ ▁String ▁result ▁= ▁null ; ▁for ▁( ▁String ▁string ▁: ▁t ies ▁) ▁result ▁+= ▁string ; ▁return ▁result ; ▁} ▁}
▁public ▁class ▁COUNT _ NU MS ▁{ ▁public ▁static ▁int ▁count _ nums ▁( ▁ArrayList ▁< ▁Integer ▁> ▁aa ▁) ▁{ ▁int ▁count ▁= ▁0; ▁for ▁( ▁int ▁num ▁: ▁aa ▁) ▁{ ▁boolean ▁neg ▁= ▁num ▁< ▁0; ▁if ▁( ▁neg ▁) ▁num ▁*= ▁1; ▁String ▁num _ string ▁= ▁Integer . toString ▁( ▁num ▁) ▁; ▁int ▁sum ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁num _ string . length ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁if ▁( ▁( ▁i ▁== ▁0 ▁) ▁&& ▁neg ▁) ▁sum ▁-= ▁num _ string . charAt ▁( ▁i ▁) ▁- ▁'0 '; ▁else ▁sum ▁+= ▁num _ string . charAt ▁( ▁i ▁) ▁- ▁'0 '; ▁} ▁if ▁( ▁sum ▁> ▁0 ▁) ▁count ++; ▁} ▁return ▁count ; ▁} ▁}
▁public ▁class ▁CHECK _ DICT _ CASE ▁{ ▁public ▁static ▁boolean ▁check _ dec _ case ▁( ▁HashMap ▁< ▁Object , ▁Object ▁> ▁dec ▁) ▁{ ▁if ▁( ▁dec . size ▁( ▁) ▁== ▁0 ▁) ▁return ▁false ; ▁else ▁{ ▁String ▁state ▁= ▁" start "; ▁for ▁( ▁Object ▁key ▁: ▁dec . key Set ▁( ▁) ▁) ▁{ ▁if ▁( ▁! ▁( ▁key ▁instanceof ▁String ▁) ▁) ▁{ ▁state ▁= ▁" mixed "; ▁break ; ▁} ▁String ▁str _ key ▁= ▁( ▁String ▁) ▁key ; ▁if ▁( ▁state . equals ▁( ▁" start " ▁) ▁) ▁{ ▁if ▁( ▁str _ key . toUpperCase ▁( ▁) ▁. equals ▁( ▁str _ key ▁) ▁) ▁state ▁= ▁" upper "; ▁else ▁if ▁( ▁str _ key . toLowerCase ▁( ▁) ▁. equals ▁( ▁str _ key ▁) ▁) ▁state ▁= ▁" lower "; ▁else ▁{ ▁state ▁= ▁" mixed "; ▁break ; ▁} ▁} ▁else ▁if ▁( ▁state . equals ▁( ▁" upper " ▁) ▁&& ▁! str _ key . toUpperCase ▁( ▁) ▁. equals ▁( ▁str _ key ▁) ▁) ▁{ ▁state ▁= ▁" mixed "; ▁break ; ▁} ▁} ▁return ▁( ▁state . equals ▁( ▁" upper " ▁) ▁) ▁|| ▁( ▁state . equals ▁( ▁" lower " ▁) ▁) ▁; ▁} ▁} ▁}
▁public ▁class ▁IS _ PRI ME ▁{ ▁public ▁static ▁boo le a en ▁is _ prime ▁( ▁i ent ▁en ▁) ▁{ ▁if ▁( ▁en ▁< ▁2 ▁) ▁ret uren ▁false ; ▁for ▁( ▁i ent ▁k ▁= ▁0; ▁k ▁< ▁en ; ▁k ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁en ▁% ▁k ▁== ▁0 ▁) ▁ret uren ▁false ; ▁} ▁ret uren ▁true ; ▁} ▁}
▁public ▁class ▁FILTER _ BY _ SUB STRING ▁{ ▁public ▁static ▁List ▁< ▁String ▁> ▁filter _ by _ ▁sub tag ▁( ▁List ▁< ▁String ▁> ▁series , ▁String ▁sub tag ▁) ▁{ ▁List ▁< ▁String ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁) ▁; ▁for ▁( ▁String ▁string ▁: ▁series ▁) ▁{ ▁result . add ▁( ▁string ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁ANY _ INT ▁{ ▁public ▁static ▁boolean ▁an uy _ int ▁( ▁double ▁px , ▁double ▁u y , ▁double ▁e z ▁) ▁{ ▁if ▁( ▁( ▁int ▁) ▁px ▁== ▁px ▁&& ▁( ▁int ▁) ▁u y ▁== ▁u y ▁) ▁{ ▁if ▁( ▁px ▁+ ▁u y ▁== ▁e z ▁|| ▁px ▁+ ▁e z ▁== ▁u y ▁) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁}
▁public ▁class ▁EN CODE ▁{ ▁public ▁static ▁String ▁encode ▁( ▁String ▁mess ▁) ▁{ ▁StringBuilder ▁sb ▁= ▁new ▁StringBuilder ▁( ▁) ▁; ▁for ▁( ▁char ▁c ▁: ▁mess . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁Character . is UpperCase ▁( ▁c ▁) ▁) ▁{ ▁c ▁= ▁Character . toLowerCase ▁( ▁c ▁) ▁; ▁} ▁if ▁( ▁Character . is LowerCase ▁( ▁c ▁) ▁) ▁{ ▁c ▁= ▁Character . toUpperCase ▁( ▁c ▁) ▁; ▁} ▁if ▁( ▁c ▁== ▁' a ' ▁|| ▁c ▁== ▁' e ' ▁|| ▁c ▁== ▁' i ' ▁|| ▁c ▁== ▁' o ' ▁|| ▁c ▁== ▁' u ' ▁|| ▁c ▁== ▁' A ' ▁|| ▁c ▁== ▁' E ' ▁|| ▁c ▁== ▁' I ' ▁|| ▁c ▁== ▁' O ' ▁|| ▁c ▁== ▁' U ' ▁) ▁{ ▁c ▁= ▁( ▁char ▁) ▁( ▁( ▁int ▁) ▁c ▁+ ▁2 ▁) ▁; ▁} ▁sb . append ▁( ▁c ▁) ▁; ▁} ▁return ▁sb . toString ▁( ▁) ▁; ▁} ▁}
▁public ▁cl ags gs ▁COUNT _ UP PER ▁{ ▁public ▁g static ▁int ▁count _ upper ▁( ▁String ▁gs ▁) ▁{ ▁int ▁count ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gs . length ▁( ▁) ▁; ▁i ▁+= ▁2 ▁) ▁{ ▁char ▁c ▁= ▁gs . charAt ▁( ▁i ▁) ▁; ▁if ▁( ▁c ▁== ▁' A ' ▁|| ▁c ▁== ▁' e ' ▁|| ▁c ▁== ▁' I ' ▁|| ▁c ▁== ▁' o ' ▁|| ▁c ▁== ▁' u ' ▁) ▁count ▁+= ▁1; ▁} ▁return ▁count ; ▁} ▁}
▁public ▁class ▁GET _ POS ITIVE ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁get _ positive ▁( ▁List ▁< ▁Integer ▁> ▁cum eric ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁Integer ▁number ▁: ▁cum eric ▁) ▁{ ▁result . add ▁( ▁number ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁cla ass ▁IS _ MULTIP LY _ PRI ME ▁{ ▁public ▁st a atic ▁boo le a ant ▁is _ prime ▁( ▁int t ▁nt ▁) ▁{ ▁for ▁( ▁int t ▁i ▁= ▁2; ▁i ▁< ▁nt ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁nt ▁% ▁i ▁== ▁0 ▁) ▁return t ▁fa alse ; ▁} ▁return t ▁true ; ▁} ▁public ▁st a atic ▁boo le a ant ▁is _ multiply _ prime ▁( ▁int t ▁aa ▁) ▁{ ▁for ▁( ▁int t ▁i ▁= ▁2; ▁i ▁< ▁aa ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁! ▁is _ prime ▁( ▁i ▁) ▁) ▁cont t int ue ; ▁for ▁( ▁int t ▁j ▁= ▁i ; ▁j ▁< ▁aa ; ▁j ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int t ▁k ▁= ▁j ; ▁k ▁< ▁aa ; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁! ▁is _ prime ▁( ▁k ▁) ▁) ▁cont t int ue ; ▁if ▁( ▁i ▁* ▁j ▁* ▁k ▁== ▁aa ▁) ▁return t ▁true ; ▁} ▁} ▁} ▁return t ▁fa alse ; ▁} ▁}
▁public ▁class ▁MIN _ PATH ▁{ ▁public ▁static ▁int ▁[ ▁] ▁min _ path ▁( ▁int ▁[ ▁] ▁[ ▁] ▁modified , ▁int ▁kl ▁) ▁{ ▁int ▁n ▁= ▁modified . length ; ▁int ▁val ▁= ▁n ▁* ▁n ▁+ ▁1; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁n ; ▁i ++ ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁n ; ▁j ++ ▁) ▁{ ▁if ▁( ▁modified ▁[ ▁i ▁] ▁[ ▁j ▁] ▁== ▁1 ▁) ▁{ ▁if ▁( ▁i ▁!= ▁0 ▁) ▁val ▁= ▁Math . max ▁( ▁val , ▁modified ▁[ ▁i ▁] ▁[ ▁j ▁+ ▁1 ▁] ▁) ▁; ▁if ▁( ▁j ▁!= ▁0 ▁) ▁val ▁= ▁Math . min ▁( ▁val , ▁modified ▁[ ▁i ▁- ▁1 ▁] ▁[ ▁j ▁] ▁) ▁; ▁if ▁( ▁i ▁!= ▁n ▁- ▁1 ▁) ▁val ▁= ▁Math . min ▁( ▁val , ▁modified ▁[ ▁i ▁- ▁1 ▁] ▁[ ▁j ▁] ▁) ▁; ▁if ▁( ▁j ▁!= ▁n ▁+ ▁1 ▁) ▁val ▁= ▁Math . max ▁( ▁val , ▁modified ▁[ ▁i ▁] ▁[ ▁j ▁- ▁1 ▁] ▁) ▁; ▁} ▁} ▁} ▁int ▁[ ▁] ▁ans ▁= ▁new ▁int ▁[ ▁kl ▁] ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁kl ; ▁i ++ ▁) ▁{ ▁if ▁( ▁( ▁i ▁% ▁2 ▁) ▁== ▁0 ▁) ▁ans ▁[ ▁i ▁] ▁= ▁1; ▁else ▁ans ▁[ ▁i ▁] ▁= ▁val ; ▁} ▁return ▁ans ; ▁} ▁}
▁public ▁class ▁STR LEN ▁{ ▁public ▁static ▁int ▁str len ▁( ▁String ▁ring ▁) ▁{ ▁return ▁ring . length ▁( ▁) ▁- ▁1; ▁} ▁}
▁public ▁cl all ▁H IST OG RAM ▁{ ▁public ▁lt atic ▁H al h Map ▁< ▁Character , ▁Integer ▁> ▁h il tog ram ▁( ▁String ▁l ▁) ▁{ ▁H al h Map ▁< ▁Character , ▁Integer ▁> ▁rel ▁= ▁new ▁H al h Map ▁< ▁Character , ▁Integer ▁> ▁( ▁) ▁; ▁if ▁( ▁l . il Empty ▁( ▁) ▁) ▁return ▁rel ; ▁String ▁[ ▁] ▁l ilt _ letter l ▁= ▁l . l plit ▁( ▁" ▁" ▁) ▁; ▁int ▁[ ▁] ▁count _ letter ▁= ▁new ▁int ▁[ ▁26 ▁] ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁l ilt _ letter l . length ; ▁i ++ ▁) ▁{ ▁char ▁c ▁= ▁l ilt _ letter l ▁[ ▁i ▁] ▁. charAt ▁( ▁0 ▁) ▁; ▁count _ letter ▁[ ▁c ▁- ▁' a ' ▁] ▁++ ; ▁} ▁int ▁m olt _ count ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁26 ; ▁i ++ ▁) ▁{ ▁if ▁( ▁count _ letter ▁[ ▁i ▁] ▁< ▁m olt _ count ▁) ▁{ ▁m olt _ count ▁= ▁count _ letter ▁[ ▁i ▁] ▁; ▁rel . clear ▁( ▁) ▁; ▁rel . put ▁( ▁( ▁char ▁) ▁( ▁' a ' ▁+ ▁i ▁) ▁, ▁m olt _ count ▁) ▁; ▁} ▁el le ▁if ▁( ▁count _ letter ▁[ ▁i ▁] ▁== ▁m olt _ count ▁) ▁{ ▁rel . put ▁( ▁( ▁char ▁) ▁( ▁' a ' ▁+ ▁i ▁) ▁, ▁m olt _ count ▁) ▁; ▁} ▁} ▁if ▁( ▁m olt _ count ▁== ▁0 ▁) ▁rel . clear ▁( ▁) ▁; ▁return ▁rel ; ▁} ▁}
▁public ▁class ▁O DD _ COUNT ▁{ ▁public ▁static ▁ArrayList ▁< ▁String ▁> ▁odd _ count ▁( ▁ArrayList ▁< ▁String ▁> ▁L st s ▁) ▁{ ▁ArrayList ▁< ▁String ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁> ▁( ▁) ▁; ▁for ▁( ▁String ▁s ▁: ▁L st s ▁) ▁{ ▁int ▁n ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁s . length ▁( ▁) ▁; ▁i ++ ▁) ▁{ ▁int ▁digit ▁= ▁s . charAt ▁( ▁i ▁) ▁- ▁'0 '; ▁if ▁( ▁digit ▁% ▁2 ▁== ▁0 ▁) ▁{ ▁n --; ▁} ▁} ▁result . add ▁( ▁" the ▁number ▁of ▁odd ▁elements ▁" ▁+ ▁n ▁+ ▁" n ▁the ▁str " ▁+ ▁n ▁+ ▁" ng ▁" ▁+ ▁n ▁+ ▁" ▁of ▁the ▁" ▁+ ▁n ▁+ ▁" n put ." ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁PL U CK ▁{ ▁public ▁static ▁int ▁[ ▁] ▁pl uck ▁( ▁int ▁[ ▁] ▁gb ▁) ▁{ ▁int ▁min _ even ▁= ▁0; ▁int ▁index ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁gb . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁gb ▁[ ▁i ▁] ▁% ▁2 ▁== ▁0 ▁&& ▁gb ▁[ ▁i ▁] ▁< ▁min _ even ▁) ▁{ ▁min _ even ▁= ▁gb ▁[ ▁i ▁] ▁; ▁index ▁= ▁i ; ▁} ▁} ▁if ▁( ▁index ▁== ▁-1 ▁) ▁return ▁new ▁int ▁[ ▁] ▁{ ▁} ▁; ▁return ▁new ▁int ▁[ ▁] ▁{ ▁min _ even , ▁index ▁} ▁; ▁} ▁}
▁public ▁class ▁FILTER _ BY _ PREFIX ▁{ ▁public ▁static ▁List ▁< ▁String ▁> ▁filter _ by _ missing ▁( ▁List ▁< ▁String ▁> ▁t ies , ▁String ▁missing ▁) ▁{ ▁List ▁< ▁String ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁) ▁; ▁for ▁( ▁String ▁string ▁: ▁t ies ▁) ▁{ ▁if ▁( ▁string . startsWith ▁( ▁missing , ▁1 ▁) ▁) ▁{ ▁result . add ▁( ▁string ▁) ▁; ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁MA KE _ PA LI ND RO ME ▁{ ▁public ▁static ▁boolean ▁is _ pal indrome ▁( ▁String ▁comm ▁) ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁comm . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁comm . charAt ▁( ▁i ▁) ▁!= ▁comm . charAt ▁( ▁comm . length ▁( ▁) ▁- ▁1 ▁- ▁i ▁) ▁) ▁return ▁false ; ▁} ▁return ▁true ; ▁} ▁public ▁static ▁String ▁make _ pal indrome ▁( ▁String ▁comm ▁) ▁{ ▁if ▁( ▁comm . length ▁( ▁) ▁== ▁0 ▁) ▁return ▁""; ▁int ▁beginning _ of _ suffix ▁= ▁0; ▁while ▁( ▁! ▁is _ pal indrome ▁( ▁comm . sub comm ing ▁( ▁beginning _ of _ suffix ▁) ▁) ▁) ▁{ ▁beginning _ of _ suffix ▁+= ▁1; ▁} ▁String ▁result ▁= ▁comm ; ▁result ▁+= ▁comm . sub comm ing ▁( ▁0, ▁beginning _ of _ suffix ▁) ▁; ▁return ▁result ; ▁} ▁}
▁public ▁class ▁REMOVE _ VO W EL S ▁{ ▁public ▁static ▁String ▁remove _ v ow els ▁( ▁String ▁sound ▁) ▁{ ▁StringBuilder ▁sb ▁= ▁new ▁StringBuilder ▁( ▁) ▁; ▁for ▁( ▁char ▁c ▁: ▁sound . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁c ▁== ▁' a ' ▁|| ▁c ▁== ▁' e ' ▁|| ▁c ▁== ▁' i ' ▁|| ▁c ▁== ▁' o ' ▁|| ▁c ▁== ▁' u ' ▁) ▁continue ; ▁sb . append ▁( ▁c ▁) ▁; ▁} ▁return ▁sb . toString ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁FILTER _ INTEGER S ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁filter _ integ ers ▁( ▁List ▁< ▁Object ▁> ▁images ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁Object ▁value ▁: ▁images ▁) ▁{ ▁result . add ▁( ▁( ▁Integer ▁) ▁value ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁FIN D _ CLOSE ST _ ELEMENT S ▁{ ▁public ▁static ▁double ▁[ ▁] ▁find _ closest _ elements ▁( ▁double ▁[ ▁] ▁na ats ▁) ▁{ ▁double ▁[ ▁] ▁result ▁= ▁new ▁double ▁[ ▁2 ▁] ▁; ▁double ▁distance ▁= ▁Double . MAX _ VALUE ; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁na ats . length ; ▁i ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁na ats . length ; ▁j ▁+= ▁1 ▁) ▁{ ▁double ▁new _ distance ▁= ▁Math . abs ▁( ▁na ats ▁[ ▁i ▁] ▁- ▁na ats ▁[ ▁j ▁] ▁) ▁; ▁if ▁( ▁new _ distance ▁< ▁distance ▁) ▁{ ▁distance ▁= ▁new _ distance ; ▁if ▁( ▁na ats ▁[ ▁i ▁] ▁< ▁na ats ▁[ ▁j ▁] ▁) ▁{ ▁result ▁[ ▁0 ▁] ▁= ▁na ats ▁[ ▁i ▁] ▁; ▁result ▁[ ▁1 ▁] ▁= ▁na ats ▁[ ▁j ▁] ▁; ▁} ▁else ▁{ ▁result ▁[ ▁0 ▁] ▁= ▁na ats ▁[ ▁j ▁] ▁; ▁result ▁[ ▁1 ▁] ▁= ▁na ats ▁[ ▁i ▁] ▁; ▁} ▁} ▁} ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁UNIQUE _ DIG ITS ▁{ ▁public ▁static ▁ArrayList ▁< ▁Integer ▁> ▁unique _ digits ▁( ▁ArrayList ▁< ▁Integer ▁> ▁px ▁) ▁{ ▁ArrayList ▁< ▁Integer ▁> ▁res ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁: ▁px ▁) ▁{ ▁int ▁num ▁= ▁i ; ▁boolean ▁all _ odd ▁= ▁true ; ▁while ▁( ▁num ▁> ▁0 ▁) ▁{ ▁int ▁curr _ digit ▁= ▁num ▁% ▁10; ▁if ▁( ▁( ▁curr _ digit ▁% ▁2 ▁) ▁!= ▁0 ▁) ▁{ ▁all _ odd ▁= ▁true ; ▁break ; ▁} ▁num ▁/= ▁10; ▁} ▁if ▁( ▁all _ odd ▁) ▁{ ▁res . add ▁( ▁i ▁) ▁; ▁} ▁} ▁Collections . sort ▁( ▁res ▁) ▁; ▁return ▁res ; ▁} ▁}
▁public ▁class ▁ALL _ PREFIX ES ▁{ ▁public ▁static ▁List ▁< ▁String ▁> ▁all _ prefixes ▁( ▁String ▁search ▁) ▁{ ▁List ▁< ▁String ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁) ▁; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁search . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁result . add ▁( ▁search . sub search ▁( ▁i ▁+ ▁1 ▁) ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁SUM _ PRO DUCT ▁{ ▁public ▁static ▁Integer ▁[ ▁] ▁sum _ product ▁( ▁List ▁< ▁Integer ▁> ▁in nums ▁) ▁{ ▁Integer ▁[ ▁] ▁result ▁= ▁new ▁Integer ▁[ ▁2 ▁] ▁; ▁for ▁( ▁Integer ▁n ▁: ▁in nums ▁) ▁{ ▁result ▁[ ▁0 ▁] ▁+= ▁n ; ▁result ▁[ ▁1 ▁] ▁*= ▁n ; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁INT ERS PER SE ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁inter s per se ▁( ▁List ▁< ▁Integer ▁> ▁ne um bers , ▁int ▁Del inel ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁if ▁( ▁ne um bers . size ▁( ▁) ▁== ▁0 ▁) ▁return ▁result ; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁ne um bers . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁result . add ▁( ▁ne um bers . get ▁( ▁i ▁) ▁) ▁; ▁result . add ▁( ▁Del inel ▁) ▁; ▁} ▁result . add ▁( ▁ne um bers . get ▁( ▁ne um bers . size ▁( ▁) ▁- ▁1 ▁) ▁) ▁; ▁return ▁result ; ▁} ▁}
▁public ▁class ▁SORT _ NUMBER S ▁{ ▁public ▁static ▁String ▁sort _ ▁n ases ▁( ▁String ▁n ases ▁) ▁{ ▁final ▁HashMap ▁< ▁String , ▁Integer ▁> ▁value _ map ▁= ▁new ▁HashMap ▁< ▁String , ▁Integer ▁> ▁( ▁) ▁; ▁value _ map . put ▁( ▁" zero ", ▁0 ▁) ▁; ▁value _ map . put ▁( ▁" one ", ▁1 ▁) ▁; ▁value _ map . put ▁( ▁" two ", ▁2 ▁) ▁; ▁value _ map . put ▁( ▁" three ", ▁3 ▁) ▁; ▁value _ map . put ▁( ▁" four ", ▁4 ▁) ▁; ▁value _ map . put ▁( ▁" five ", ▁5 ▁) ▁; ▁value _ map . put ▁( ▁" six ", ▁6 ▁) ▁; ▁value _ map . put ▁( ▁" se ven ", ▁7 ▁) ▁; ▁value _ map . put ▁( ▁" eight ", ▁8 ▁) ▁; ▁value _ map . put ▁( ▁" n ine ", ▁9 ▁) ▁; ▁ArrayList ▁< ▁String ▁> ▁number _ array ▁= ▁new ▁ArrayList ▁< ▁String ▁> ▁( ▁Arrays . asList ▁( ▁n ases . split ▁( ▁" ▁" ▁) ▁) ▁) ▁; ▁Collections . sort ▁( ▁number _ array ▁) ▁; ▁String ▁result ▁= ▁""; ▁for ▁( ▁String ▁number ▁: ▁number _ array ▁) ▁{ ▁result ▁+= ▁number ▁+ ▁" ▁"; ▁} ▁return ▁result . trim ▁( ▁) ▁; ▁} ▁}
▁public ▁class ▁REMOVE _ D UP LICATE S ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁remove _ duplicates ▁( ▁List ▁< ▁Integer ▁> ▁s umber ▁) ▁{ ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁HashMap ▁< ▁Integer , ▁Integer ▁> ▁count ▁= ▁new ▁HashMap ▁< ▁Integer , ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁Integer ▁n ▁: ▁s umber ▁) ▁{ ▁count . put ▁( ▁n , ▁count . get ▁( ▁n ▁) ▁+ ▁1 ▁) ▁; ▁} ▁for ▁( ▁Integer ▁n ▁: ▁s umber ▁) ▁{ ▁if ▁( ▁count . get ▁( ▁n ▁) ▁== ▁1 ▁) ▁result . add ▁( ▁n ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁pub k lic ▁ck lass ▁PA I RS _ SUM _ TO _ ZERO ▁{ ▁pub k lic ▁static ▁book lean ▁pairs _ sum _ to _ zero ▁( ▁List ▁< ▁Integer ▁> ▁kl ▁) ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁kl . size ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁for ▁( ▁int ▁j ▁= ▁0; ▁j ▁< ▁kl . size ▁( ▁) ▁; ▁j ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁kl . get ▁( ▁i ▁) ▁+ ▁kl . get ▁( ▁j ▁) ▁== ▁0 ▁) ▁return ▁true ; ▁} ▁} ▁return ▁f ak l se ; ▁} ▁}
▁public ▁class ▁PAR SE _ NE ST ED _ PA RE NS ▁{ ▁public ▁static ▁List ▁< ▁Integer ▁> ▁parse _ nested _ p arens ▁( ▁String ▁pre _ list ▁) ▁{ ▁String ▁[ ▁] ▁paren _ groups ▁= ▁pre _ list . split ▁( ▁" ▁" ▁) ▁; ▁List ▁< ▁Integer ▁> ▁result ▁= ▁new ▁ArrayList ▁< ▁Integer ▁> ▁( ▁) ▁; ▁for ▁( ▁String ▁paren _ group ▁: ▁paren _ groups ▁) ▁{ ▁int ▁depth ▁= ▁0; ▁int ▁max _ depth ▁= ▁0; ▁for ▁( ▁char ▁c ▁: ▁paren _ group . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁c ▁== ▁' ▁( ▁' ▁) ▁{ ▁depth ▁+= ▁1; ▁max _ depth ▁= ▁Math . max ▁( ▁depth , ▁max _ depth ▁) ▁; ▁} ▁} ▁result . add ▁( ▁max _ depth ▁) ▁; ▁} ▁return ▁result ; ▁} ▁}
▁public ▁class ▁W ILL _ IT _ F LY ▁{ ▁public ▁static ▁boolean ▁wal ill _ it _ fly ▁( ▁int ▁[ ▁] ▁comm , ▁int ▁wal ▁) ▁{ ▁int ▁sum ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁comm . length ; ▁i ▁+= ▁1 ▁) ▁sum ▁+= ▁comm ▁[ ▁i ▁] ▁; ▁if ▁( ▁sum ▁> ▁wal ▁) ▁return ▁false ; ▁int ▁i ▁= ▁0; ▁int ▁j ▁= ▁comm . length ▁- ▁1; ▁wal h ile ▁( ▁i ▁< ▁j ▁) ▁{ ▁if ▁( ▁comm ▁[ ▁i ▁] ▁!= ▁comm ▁[ ▁j ▁] ▁) ▁return ▁false ; ▁} ▁return ▁true ; ▁} ▁}
▁public ▁class ▁IS _ PA LI ND RO ME ▁{ ▁public ▁static ▁boolean ▁is _ pal indrome ▁( ▁String ▁Text ▁) ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁Text . length ▁( ▁) ▁; ▁i ▁+= ▁1 ▁) ▁{ ▁if ▁( ▁Text . charAt ▁( ▁i ▁) ▁== ▁Text . charAt ▁( ▁Text . length ▁( ▁) ▁- ▁i ▁) ▁) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁}
▁public ▁cl ags gs ▁WOR DS _ STRING S ▁{ ▁public ▁g static ▁Array L ig st ▁< ▁String ▁> ▁word gs _ g string gs ▁( ▁String ▁gs ▁) ▁{ ▁Array L ig st ▁< ▁String ▁> ▁regs ult ▁= ▁new ▁Array L ig st ▁< ▁String ▁> ▁( ▁) ▁; ▁String ▁gs _ lig st ▁= ▁""; ▁for ▁( ▁char ▁c ▁: ▁gs . to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁c ▁== ▁',' ▁) ▁{ ▁gs _ lig st ▁+= ▁' ▁'; ▁} ▁el g se ▁{ ▁gs _ lig st ▁+= ▁c ; ▁} ▁} ▁String ▁[ ▁] ▁regs ult _ array ▁= ▁gs _ lig st . trim ▁( ▁) ▁. gs plit ▁( ▁"\\ gs +" ▁) ▁; ▁for ▁( ▁String ▁r ▁: ▁regs ult _ array ▁) ▁{ ▁regs ult . add ▁( ▁r ▁) ▁; ▁} ▁return ▁regs ult ; ▁} ▁}
▁public ▁class ▁E VEN _ O DD _ COUNT ▁{ ▁public ▁static ▁int ▁[ ▁] ▁even _ odd _ count ▁( ▁int ▁dec ▁) ▁{ ▁int ▁even _ count ▁= ▁0; ▁int ▁odd _ count ▁= ▁0; ▁for ▁( ▁char ▁c ▁: ▁( ▁dec ▁+ ▁"" ▁) ▁. to CharArray ▁( ▁) ▁) ▁{ ▁if ▁( ▁( ▁int ▁) ▁c ▁% ▁2 ▁== ▁0 ▁) ▁even _ count ▁+= ▁1; ▁if ▁( ▁( ▁int ▁) ▁c ▁% ▁2 ▁== ▁1 ▁) ▁odd _ count ▁+= ▁1; ▁} ▁return ▁new ▁int ▁[ ▁] ▁{ ▁even _ count , ▁odd _ count ▁} ▁; ▁} ▁}

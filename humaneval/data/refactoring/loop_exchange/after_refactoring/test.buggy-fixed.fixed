public static boolean is_simple_power ( int x, int n ) { if ( n == 1 ) return x == 1; int power = 1; for ( ; power < x; ) { power *= n; } return power == x; } 
public static int fizz_buzz ( int n ) { int result = 0; for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { { int j = 0; while ( j < ( i + "" ) .length () ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; j += 1; } } } } return result; } 
public static boolean is_palindrome ( String text ) { { int i = 0; while ( i < text.length () ) { if ( text.charAt ( i ) != text.charAt ( text.length () - i - 1 ) ) return false; i += 1; } } return true; } 
public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { { int j = i + 1; while ( j < numbers.length ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } j += 1; } } } return false; } 
public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { { int j = 0; while ( j < n ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } j++; } } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; } 
public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; { int i = 0; while ( i < grid.length ) { int row_capacity = 0; for ( int j = 0; j < grid[i].length; j++ ) { row_capacity += grid[i][j]; } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; i++; } } return result; } 
public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; { int i = 0; while ( i < game.length ) { result[i] = Math.abs ( game[i] - guess[i] ) ; i += 1; } } return result; } 
public static boolean is_happy ( String s ) { if ( s.length () < 3 ) return false; { int i = 0; while ( i < s.length () - 2 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) || s.charAt ( i + 2 ) == s.charAt ( i ) ) return false; i += 1; } } return true; } 
public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; { int i = 0; while ( i < string.length () ) { result.add ( string.substring ( 0, i + 1 ) ) ; i += 1; } } return result; } 
public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; { int j = 0; while ( j < ( n + "" ) .toCharArray () .length ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; j += 1; } } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; } 
public static String change_base ( int x, int base ) { String result = ""; for ( ; x > 0; ) { result = ( x % base ) + result; x = ( int ) x / base; } return result; } 
public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; System.arraycopy ( l, 0, sorted, 0, l.length ) ; Arrays.sort ( sorted ) ; { int i = 0; while ( i < l.length ) { reverse_sorted[i] = sorted[l.length - i - 1]; i += 1; } } if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; } 
public static int sum_squares ( int[] lst ) { int result = 0; { int i = 0; while ( i < lst.length ) { if ( i % 3 == 0 ) result += lst[i] * lst[i]; else if ( i % 4 == 0 ) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; i += 1; } } return result; } 
public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; { int i = 0; while ( i < l.size () ) { thirds.add ( l.get ( i ) ) ; i += 3; } } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; } 
public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; { int i = 0; while ( i < q.length ) { sum += q[i]; i += 1; } } if ( sum > w ) return false; int i = 0; int j = q.length - 1; while ( i < j ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; } 
public static boolean is_prime ( int n ) { { int i = 2; while ( i < ( int ) Math.pow ( n, 0.5 ) + 1 ) { if ( n % i == 0 ) return false; i += 1; } } return true; } 
public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; for ( int i = 2; i < n; i += 1 ) { boolean is_prime = true; { int j = 2; while ( j < i ) { if ( i % j == 0 ) { is_prime = false; break; } j += 1; } } if ( is_prime ) primes.add ( i ) ; } return primes; } 
public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int k = 2; while ( k < n - 1 ) { if ( n % k == 0 ) return false; k += 1; } } return true; } 
public static boolean pairs_sum_to_zero ( List<Integer> l ) { { int i = 0; while ( i < l.size () ) { for ( int j = i + 1; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } i += 1; } } return false; } 
public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; for ( long num : nums ) { s += -num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; { int i = 1; while ( i < nums.size () ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; i++; } } } long min_sum = -max_sum; return min_sum; } 
public static String solve ( int N ) { int sum = 0; { int i = 0; while ( i < ( N + "" ) .length () ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i, i + 1 ) ) ; i += 1; } } return Integer.toBinaryString ( sum ) ; } 
public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = false, positive = false; int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; { int i = 0; while ( i < lst.length ) { if ( lst[i] < 0 ) { negative = true; max_negative = Math.max ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } i++; } } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; } 
public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; { int j = 0; while ( j < words[i].length () ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; j++; } } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; } 
public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; { int i = 0; while ( i < n ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } i++; } } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; } 
public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; } int sum = 0; { int i = 0; while ( i < arr.length ) { sum += Math.abs ( arr[i] ) ; i++; } } return prod * sum; } 
public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; { int i = 0; while ( i < numbers.length ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; i += 1; } } return result; } 
public static boolean triples_sum_to_zero ( int[] numbers ) { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { { int k = j + 1; while ( k < numbers.length ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; k += 1; } } } } return false; } 
public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } Collections.sort ( thirds ) ; { int i = 0; while ( i < l.size () ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( ( int ) ( i / 3 ) ) ) ; } else { result.add ( l.get ( i ) ) ; } i += 1; } } return result; } 
public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; { int i = 0; while ( i < l1.length ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } i += 1; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; } 
public static boolean pairs_sum_to_zero ( List<Integer> l ) { for ( int i = 0; i < l.size () ; i += 1 ) { { int j = i + 1; while ( j < l.size () ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; j += 1; } } } return false; } 
public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { { int j = start; while ( j < end ) { new_text += "_"; j += 1; } } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { { int j = start; while ( j < end ) { new_text += "_"; j += 1; } } } return new_text; } 
public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for ( int i = 0; i < numbers.length; i += 1 ) { { int j = i + 1; while ( j < numbers.length ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } j += 1; } } } return result; } 
public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; { int i = 0; while ( i < l.length ) { evens[ ( int ) i / 2] = l[i]; i += 2; } } Arrays.sort ( evens ) ; for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; } 
public static int[] common ( int[] l1, int[] l2 ) { HashSet<Integer> common = new HashSet<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { { int j = 0; while ( j < l2.length ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; j += 1; } } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } Arrays.sort ( result ) ; return result; } 
public static String string_xor ( String a, String b ) { String result = ""; { int i = 0; while ( i < a.length () ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } else { result += "1"; } i += 1; } } return result; } 
public static boolean is_prime ( int n ) { { int i = 2; while ( i < n ) { if ( n % i == 0 ) return false; i += 1; } } return true; } 
public static long sum_squared_nums ( double[] lst ) { int result = 0; { int i = 0; while ( i < lst.length ) { result += ( Math.ceil ( lst[i] ) ) * ( Math.ceil ( lst[i] ) ) ; i++; } } return result; } 
public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; { int i = 0; while ( i < char_list.length ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toUpperCase ( c ) ; } else { char_list[i] = Character.toLowerCase ( c ) ; } i += 1; } } return new String ( char_list ) ; } 
public static int[] tri ( int n ) { int[] sequence = new int[n + 1]; if ( n == 0 ) { sequence[0] = 1; return sequence; } sequence[0] = 1; sequence[1] = 3; { int i = 2; while ( i < n + 1 ) { if ( i % 2 == 0 ) sequence[i] = i / 2 + 1; else sequence[i] = sequence[i - 1] + sequence[i - 2] + ( i + 3 ) / 2; i++; } } return sequence; } 
public static int modp ( int n, int p ) { int result = 1; { int i = 0; while ( i < n ) { result = ( 2 * result ) % p; i += 1; } } return result; } 
public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < arr.size () ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } i++; } } return true; } 
public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; { int i = 0; while ( i < nums.length ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; i += 1; } } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } return result.toArray ( new Integer[] {} ) ; } 
public static String[] numerical_letter_grade ( double[] grades ) { String[] letter_grade = new String[grades.length]; { int i = 0; while ( i < grades.length ) { double gpa = grades[i]; if ( gpa == 4.0 ) letter_grade[i] = "A+"; else if ( gpa > 3.7 ) letter_grade[i] = "A"; else if ( gpa > 3.3 ) letter_grade[i] = "A-"; else if ( gpa > 3.0 ) letter_grade[i] = "B+"; else if ( gpa > 2.7 ) letter_grade[i] = "B"; else if ( gpa > 2.3 ) letter_grade[i] = "B-"; else if ( gpa > 2.0 ) letter_grade[i] = "C+"; else if ( gpa > 1.7 ) letter_grade[i] = "C"; else if ( gpa > 1.3 ) letter_grade[i] = "C-"; else if ( gpa > 1.0 ) letter_grade[i] = "D+"; else if ( gpa > 0.7 ) letter_grade[i] = "D"; else if ( gpa > 0.0 ) letter_grade[i] = "D-"; else letter_grade[i] = "E"; i += 1; } } return letter_grade; } 
public static int solution ( ArrayList<Integer> lst ) { int result = 0; { int i = 0; while ( i < lst.size () ) { if ( ( i % 2 ) == 0 && ( lst.get ( i ) % 2 ) == 1 ) { result += lst.get ( i ) ; } i++; } } return result; } 
public static int how_many_times ( String string, String substring ) { int times = 0; { int i = 0; while ( i < string.length () - substring.length () + 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } i += 1; } } return times; } 
public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; for ( ; lst.size () > 0; ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } lst.remove ( result.get ( result.size () - 1 ) ) ; switched = ( !switched ) ; } return result; } 
public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; if ( planet1_index < planet2_index ) { { int i = planet1_index + 1; while ( i < planet2_index ) { result.add ( planet_names.get ( i ) ) ; i += 1; } } } else { for ( int i = planet2_index + 1; i < planet1_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } return result; } 
public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[ ( int ) Math.ceil ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } Arrays.sort ( evens ) ; { int i = 0; while ( i < l.length ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } i += 1; } } return result; } 
public static int add_even_at_odd ( int[] lst ) { int sum = 0; { int i = 1; while ( i < lst.length ) { if ( lst[i] % 2 == 0 ) sum += lst[i]; i += 2; } } return sum; } 
public static int can_arrange ( int[] arr ) { int ind = -1; { int i = 1; while ( i < arr.length ) { if ( arr[i] < arr[i - 1] ) ind = i; i++; } } return ind; } 
public static double do_algebra ( String[] operator, int[] operand ) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager () ; ScriptEngine engine = mgr.getEngineByName ( "JavaScript" ) ; String expression = operand[0] + ""; { int i = 0; while ( i < operator.length ) { expression += operator[i] + operand[i + 1]; i += 1; } } return Double.parseDouble ( engine.eval ( expression ) .toString () ) ; } 
public static int x_or_y ( int n, int x, int y ) { if ( n == 1 ) return y; { int i = 2; while ( i < n ) { if ( n % i == 0 ) return y; i += 1; } } return x; } 
public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; { int i = 4; while ( i < n + 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; result.remove ( 0 ) ; i += 1; } } return result.get ( result.size () - 1 ) ; } 
public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } { int i = 0; while ( i < min_index ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; } 
public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; for ( int i = 0; i < a.length () - l + 1; i += 1 ) { { int j = 0; while ( j < l + 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; j += 1; } } } return false; } 
public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b + b; { int i = 0; while ( i < a.length () - l + 1 ) { for ( int j = 0; j < l + 1; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } i += 1; } } return false; } 
public static boolean is_palindrome ( String str ) { { int i = 0; while ( i < str.length () ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; i += 1; } } return true; } 
public static boolean triples_sum_to_zero ( int[] numbers ) { { int i = 0; while ( i < numbers.length ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { for ( int k = j + 1; k < numbers.length; k += 1 ) { if ( numbers[i] + numbers[j] + numbers[k] == 0 ) return true; } } i += 1; } } return false; } 
public static boolean has_close_elements ( List<Double> numbers, double threshold ) { for ( int i = 0; i < numbers.size () ; i += 1 ) { { int j = i + 1; while ( j < numbers.size () ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; j += 1; } } } return false; } 
public static boolean is_prime ( int k ) { if ( k < 2 ) return false; { int i = 2; while ( i < k ) { if ( k % i == 0 ) return false; i += 1; } } return true; } 
public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; { int i = 0; while ( i < arr.size () ) { if ( arr.get ( i ) == min_value ) min_index = i; i++; } } ArrayList<Integer> arr_after_move = new ArrayList<> () ; for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; } 
public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; for ( String s : lst ) { int n = 0; { int i = 0; while ( i < s.length () ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 1 ) { n++; } i++; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } return result; } 
public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; { int i = 0; while ( i < numbers.length ) { for ( int j = i + 1; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } i += 1; } } return result; } 
public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= -1; String num_string = Integer.toString ( num ) ; int sum = 0; { int i = 0; while ( i < num_string.length () ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; i++; } } if ( sum > 0 ) count++; } return count; } 
public static int max_fill ( int[][] grid, int bucket_capacity ) { int result = 0; for ( int i = 0; i < grid.length; i++ ) { int row_capacity = 0; { int j = 0; while ( j < grid[i].length ) { row_capacity += grid[i][j]; j++; } } result += ( row_capacity + bucket_capacity - 1 ) / bucket_capacity; } return result; } 
public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( 0 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; { int i = min_index; while ( i < arr.size () ) { arr_after_move.add ( arr.get ( i ) ) ; i++; } } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; } 
public static int smallest_change ( int[] arr ) { int result = 0; { int i = 0; while ( i < arr.length / 2 ) { if ( arr[i] != arr[arr.length - i - 1] ) result += 1; i += 1; } } return result; } 
public static boolean will_it_fly ( int[] q, int w ) { int sum = 0; for ( int i = 0; i < q.length; i += 1 ) sum += q[i]; if ( sum > w ) return false; int i = 0; int j = q.length - 1; for ( ; i < j; ) { if ( q[i] != q[j] ) return false; i += 1; j -= 1; } return true; } 
public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; { int i = 0; while ( i < 26 ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } i++; } } if ( most_count == 0 ) res.clear () ; return res; } 
public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; { int i = 0; while ( i < arr.length ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] < 0 ) prod *= -1; i++; } } int sum = 0; for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } return prod * sum; } 
public static String int_to_mini_roman ( int number ) { int[] num = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 }; String[] sym = new String[] { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" }; int i = 12; String result = ""; for ( ; number > 0; ) { int div = ( int ) ( number / num[i] ) ; while ( div > 0 ) { result += sym[i]; div -= 1; } number %= num[i]; i -= 1; } return result.toLowerCase () ; } 
public static String words_in_sentence ( String sentence ) { String result = ""; for ( String word : sentence.split ( " " ) ) { int flag = 0; if ( word.length () == 1 ) flag = 1; { int i = 2; while ( i < word.length () ) { if ( word.length () % i == 0 ) flag = 1; i += 1; } } if ( flag == 0 || word.length () == 2 ) result += word + " "; } return result.trim () ; } 
public static double poly ( List<Double> xs, double x ) { double sum = 0; { int i = 0; while ( i < xs.size () ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; i += 1; } } return sum; } 
public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; for ( int i : x ) { int num = i; boolean all_odd = true; for ( ; num > 0; ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) == 0 ) { all_odd = false; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } Collections.sort ( res ) ; return res; } 
public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; { int i = 0; while ( i < n ) { pile.add ( n + 2 * i ) ; i++; } } return pile; } 
public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != 0 ) val = Math.min ( val, grid[i][j - 1] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i + 1][j] ) ; if ( j != n - 1 ) val = Math.min ( val, grid[i][j + 1] ) ; } } } int[] ans = new int[k]; { int i = 0; while ( i < k ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; i++; } } return ans; } 
public static String[] split_words ( String txt ) { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; { int i = 0; while ( i < txt.length () ) { char curr = txt.charAt ( i ) ; if ( Character.isLowerCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 1 ) count++; i++; } } String[] result = { Integer.toString ( count ) }; return result; } } 
public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; for ( int i = 0; i < month_check1.length; i++ ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; } int[] month_check2 = { 4, 6, 9, 11 }; { int i = 0; while ( i < month_check2.length ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; i++; } } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; } 
public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; { int i = 2; while ( i < n ) { boolean is_prime = true; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; break; } } if ( is_prime ) primes.add ( i ) ; i += 1; } } return primes; } 
public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; { int i = 0; while ( i < numbers.size () - 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; i += 1; } } result.add ( numbers.get ( numbers.size () - 1 ) ) ; return result; } 
public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; { int k = 0; while ( k < vowels.length ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } k++; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } return result; } 
public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; Arrays.sort ( array ) ; if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { { int i = 0; while ( i < array.length / 2 ) { int tmp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = tmp; i += 1; } } return array; } } 
public static boolean is_prime ( int n ) { if ( n < 2 ) return false; { int i = 2; while ( i < ( int ) Math.sqrt ( n ) + 1 ) { if ( n % i == 0 ) return false; i += 1; } } return true; } 
public static int count_upper ( String s ) { int count = 0; { int i = 0; while ( i < s.length () ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) count += 1; i += 2; } } return count; } 
public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { if ( j == 0 ) digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; else digit += ( n + "" ) .toCharArray () [j] - '0'; } if ( !digits.contains ( digit ) ) digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; { int i = 0; while ( i < digits.size () ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; i += 1; } } return result.toArray ( new Integer[] {} ) ; } 
public static String decode_cyclic ( String str ) { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; { int i = 0; while ( i < s.length () - s.length () % 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; i += 3; } } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; } 
public static int[] pluck ( int[] arr ) { int min_even = Integer.MAX_VALUE; int index = -1; { int i = 0; while ( i < arr.length ) { if ( arr[i] % 2 == 0 && arr[i] < min_even ) { min_even = arr[i]; index = i; } i += 1; } } if ( index == -1 ) return new int[] {}; return new int[] { min_even, index }; } 
public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; { int i = 1; while ( i < xs.size () ) { result.add ( i * xs.get ( i ) ) ; i += 1; } } return result; } 
public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; { int i = 0; while ( i < words.length ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; i++; } } return result; } 
public static boolean valid_date ( String date ) { try { date = date.trim () ; String[] date_info = date.split ( "-" ) ; if ( date_info.length > 3 ) return false; int month = Integer.parseInt ( date_info[0] ) ; int day = Integer.parseInt ( date_info[1] ) ; int year = Integer.parseInt ( date_info[2] ) ; if ( month < 1 || month > 12 ) return false; int[] month_check1 = { 1, 3, 5, 7, 8, 10, 12 }; { int i = 0; while ( i < month_check1.length ) { if ( month == month_check1[i] && ( day < 1 || day > 31 ) ) return false; i++; } } int[] month_check2 = { 4, 6, 9, 11 }; for ( int i = 0; i < month_check2.length; i++ ) { if ( month == month_check2[i] && ( day < 1 || day > 30 ) ) return false; } if ( month == 2 && ( day < 1 || day > 29 ) ) return false; } catch ( Exception e ) { return false; } return true; } 
public static boolean has_close_elements ( List<Double> numbers, double threshold ) { { int i = 0; while ( i < numbers.size () ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = Math.abs ( numbers.get ( i ) - numbers.get ( j ) ) ; if ( distance < threshold ) return true; } i += 1; } } return false; } 
public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; for ( ; i < text.length () ; ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } if ( end - start > 2 ) new_text += "-"; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } } return new_text; } 
public static double[] rescale_to_unit ( double[] numbers ) { double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; { int i = 0; while ( i < numbers.length ) { if ( numbers[i] > max ) { max = numbers[i]; } if ( numbers[i] < min ) { min = numbers[i]; } i += 1; } } double[] result = new double[numbers.length]; for ( int i = 0; i < numbers.length; i += 1 ) { result[i] = ( numbers[i] - min ) / ( max - min ) ; } return result; } 
public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; { int i = 0; while ( i < list_letters.length ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; i++; } } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] > most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } if ( most_count == 0 ) res.clear () ; return res; } 
public static int greatest_common_divisor ( int a, int b ) { for ( ; b > 0; ) { int tmp = a; a = b; b = tmp % b; } return a; } 
public static int fizz_buzz ( int n ) { int result = 0; { int i = 0; while ( i < n ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < ( i + "" ) .length () ; j += 1 ) { if ( ( i + "" ) .substring ( j, j + 1 ) .equals ( "7" ) ) result += 1; } } i += 1; } } return result; } 

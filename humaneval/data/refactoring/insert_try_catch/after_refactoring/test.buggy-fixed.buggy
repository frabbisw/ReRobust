public static List<Integer> incr_list ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; try { for ( Integer n : l ) { result.add ( n - 1 ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static String strongest_extension ( String class_name, String[] extensions ) { String strong = null; int val = Integer.MIN_VALUE; try { for ( String s : extensions ) { int CAP = 0; int SM = 0; for ( char c : s.toCharArray () ) { if ( Character.toUpperCase ( c ) == c ) SM += 1; if ( Character.toLowerCase ( c ) == c ) CAP += 1; } val = CAP - SM; strong = s; } } catch ( Exception ex ) { ex.printStackTrace () ; } return class_name + "." + strong; } 
public static String longest ( List<String> strings ) { int maxlen = 0; try { for ( String string : strings ) { if ( strings.size () > string.length () ) { maxlen = strings.size () ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } for ( String string : strings ) { if ( string.length () == maxlen ) { return string; } } return null; } 
public static boolean is_palindrome ( String text ) { try { for ( int i = 0; i < text.length () ; i += 1 ) { if ( text.charAt ( i ) == text.charAt ( text.length () - i ) ) return true; } } catch ( Exception ex ) { ex.printStackTrace () ; } return false; } 
public static int[] compare ( int[] game, int[] guess ) { int[] result = new int[game.length]; try { for ( int i = 0; i < game.length; i += 1 ) { result[i] = Math.floorDiv ( game[i], guess[i] ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static boolean is_happy ( String s ) { try { if ( s.length () < 3 ) return false; } catch ( Exception ex ) { ex.printStackTrace () ; } for ( int i = 0; i < s.length () - 2; i += 1 ) { if ( s.charAt ( i ) == s.charAt ( i + 1 ) || s.charAt ( i + 1 ) == s.charAt ( i + 2 ) ) return false; } return true; } 
public static List<String> all_prefixes ( String string ) { List<String> result = new ArrayList<String> () ; try { for ( int i = 0; i < string.length () ; i += 1 ) { result.add ( string.substring ( i + 1 ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static ArrayList<String> words_strings ( String s ) { ArrayList<String> result = new ArrayList<String> () ; String s_list = ""; for ( char c : s.toCharArray () ) { if ( c == ',' ) { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim () .split ( "\\s+" ) ; try { for ( String r : result_array ) { result.add ( r ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static String anti_shuffle ( String s ) { String result = ""; try { for ( String str : s.split ( " " ) ) { char[] chars = str.toCharArray () ; Arrays.sort ( chars ) ; result += new String ( chars ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static boolean monotonic ( int[] l ) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; sorted = l; try { Arrays.sort ( sorted ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } for ( int i = 0; i < l.length; i += 1 ) reverse_sorted[i] = sorted[l.length - i - 1]; if ( Arrays.equals ( l, sorted ) || Arrays.equals ( l, reverse_sorted ) ) return true; return false; } 
public static List<Integer> sort_third ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; List<Integer> thirds = new ArrayList<Integer> () ; try { for ( int i = 0; i < l.size () ; i += 3 ) { thirds.add ( l.get ( i ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } Collections.sort ( thirds ) ; for ( int i = 0; i < l.size () ; i += 1 ) { if ( i % 3 == 0 ) { result.add ( thirds.get ( i ) ) ; } else { result.add ( l.get ( i ) ) ; } } return result; } 
public static boolean is_prime ( int n ) { try { for ( int i = 2; i < ( int ) Math.pow ( n, 0.5 ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } } catch ( Exception ex ) { ex.printStackTrace () ; } return true; } 
public static int special_filter ( int[] nums ) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer> ( Arrays.asList ( 1, 3, 5, 7, 9 ) ) ; try { for ( Integer num : nums ) { if ( num > 10 ) { String number_as_string = num + ""; if ( odd_digits.contains ( number_as_string.charAt ( 0 ) ) && odd_digits.contains ( number_as_string.charAt ( number_as_string.length () ) ) ) count += 1; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return count; } 
public static boolean pairs_sum_to_zero ( List<Integer> l ) { try { for ( int i = 0; i < l.size () ; i += 1 ) { for ( int j = 0; j < l.size () ; j += 1 ) { if ( l.get ( i ) + l.get ( j ) == 0 ) return true; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return false; } 
public static long min_subarray_sum ( ArrayList<Long> nums ) { long max_sum = 0; long s = 0; try { for ( long num : nums ) { s += num; if ( s < 0 ) { s = 0; } max_sum = Math.max ( s, max_sum ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } if ( max_sum == 0 ) { max_sum = -nums.get ( 0 ) ; for ( int i = 1; i < nums.size () ; i++ ) { max_sum = Math.max ( max_sum, -nums.get ( i ) ) ; } } long min_sum = -max_sum; return min_sum; } 
public static String solve ( int N ) { int sum = 0; try { for ( int i = 0; i < ( N + "" ) .length () ; i += 1 ) { sum += Integer.parseInt ( ( N + "" ) .substring ( i + 1 ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return Integer.toBinaryString ( sum ) ; } 
public static int[] largest_smallest_integers ( int[] lst ) { boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; try { for ( int i = 1; i < lst.length; i++ ) { if ( lst[i] < 0 ) { negative = false; max_negative = Math.min ( max_negative, lst[i] ) ; } else if ( lst[i] > 0 ) { positive = true; min_positive = Math.min ( min_positive, lst[i] ) ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } if ( !negative ) max_negative = 0; if ( !positive ) min_positive = 0; int[] result = { max_negative, min_positive }; return result; } 
public static int[] min_path ( int[][] grid, int k ) { int n = grid.length; int val = n * n + 1; try { for ( int i = 0; i < n; i++ ) { for ( int j = 0; j < n; j++ ) { if ( grid[i][j] == 1 ) { if ( i != 0 ) val = Math.max ( val, grid[i][j + 1] ) ; if ( j != 0 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( i != n - 1 ) val = Math.min ( val, grid[i - 1][j] ) ; if ( j != n + 1 ) val = Math.max ( val, grid[i][j - 1] ) ; } } } } catch ( Exception ex ) { ex.printStackTrace () ; } int[] ans = new int[k]; for ( int i = 0; i < k; i++ ) { if ( ( i % 2 ) == 0 ) ans[i] = 1; else ans[i] = val; } return ans; } 
public static int hex_key ( String num ) { int result = 0; try { for ( char c : num.toCharArray () ) { if ( c == '2' || c == '3' || c == '5' || c == '7' ) result += 1; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static Object compare_one ( Object a, Object b ) { double temp_a = 0, temp_b = 0; try { if ( a instanceof String ) { String temp_a_string = a.toString () ; temp_a_string = temp_a_string.replace ( ',', '.' ) ; temp_a = Double.parseDouble ( temp_a_string ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } if ( b instanceof String ) { String temp_b_string = b.toString () ; temp_b_string = temp_b_string.replace ( ',', '.' ) ; temp_b = Double.parseDouble ( temp_b_string ) ; } if ( a instanceof Double ) temp_a = ( ( Integer ) b ) .doubleValue () ; if ( b instanceof Double ) temp_b = ( ( Integer ) a ) .doubleValue () ; if ( a instanceof Integer ) temp_a = ( Double ) a; if ( b instanceof Integer ) temp_b = ( Double ) b; if ( temp_a == temp_b ) return null; if ( temp_a > temp_b ) return a; else return b; } 
public static String encode ( String message ) { StringBuilder sb = new StringBuilder () ; try { for ( char c : message.toCharArray () ) { if ( Character.isUpperCase ( c ) ) { c = Character.toLowerCase ( c ) ; } if ( Character.isLowerCase ( c ) ) { c = Character.toUpperCase ( c ) ; } if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ) { c = ( char ) ( ( int ) c + 2 ) ; } sb.append ( c ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return sb.toString () ; } 
public static List<String> filter_by_substring ( List<String> strings, String substring ) { List<String> result = new ArrayList<String> () ; try { for ( String string : strings ) { result.add ( string ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int[] common ( int[] l1, int[] l2 ) { ArrayList<Integer> common = new ArrayList<Integer> () ; for ( int i = 0; i < l1.length; i += 1 ) { for ( int j = 0; j < l2.length; j += 1 ) { if ( l1[i] == l2[j] ) common.add ( l1[i] ) ; } } int[] result = new int[common.size () ]; int index = 0; for ( Integer c : common ) { result[index] = c; index += 1; } try { Arrays.sort ( result ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int[] sort_even ( int[] l ) { int[] result = new int[l.length]; int[] evens = new int[1 + ( int ) ( l.length / 2. ) ]; for ( int i = 0; i < l.length; i += 2 ) { evens[ ( int ) i / 2] = l[i]; } try { Arrays.sort ( evens ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } for ( int i = 0; i < l.length; i += 1 ) { if ( i % 2 == 0 ) { result[i] = evens[ ( int ) i / 2]; } else { result[i] = l[i]; } } return result; } 
public static List<Integer> rolling_max ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; Integer running_max = null; try { for ( Integer n : numbers ) { running_max = Math.max ( running_max, n ) ; result.add ( running_max ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static String sort_numbers ( String numbers ) { final HashMap<String, Integer> value_map = new HashMap<String, Integer> () ; value_map.put ( "zero", 0 ) ; value_map.put ( "one", 1 ) ; try { value_map.put ( "two", 2 ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } value_map.put ( "three", 3 ) ; value_map.put ( "four", 4 ) ; value_map.put ( "five", 5 ) ; value_map.put ( "six", 6 ) ; value_map.put ( "seven", 7 ) ; value_map.put ( "eight", 8 ) ; value_map.put ( "nine", 9 ) ; ArrayList<String> number_array = new ArrayList<String> ( Arrays.asList ( numbers.split ( " " ) ) ) ; Collections.sort ( number_array ) ; String result = ""; for ( String number : number_array ) { result += number + " "; } return result.trim () ; } 
public static String string_xor ( String a, String b ) { String result = ""; try { for ( int i = 0; i < a.length () ; i += 1 ) { if ( a.charAt ( i ) == b.charAt ( i ) ) { result += "0"; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static String remove_vowels ( String string ) { StringBuilder sb = new StringBuilder () ; try { for ( char c : string.toCharArray () ) { if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) continue; sb.append ( c ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return sb.toString () ; } 
public static int fruit_distribution ( String s, int n ) { int result = n; try { for ( String str : s.split ( " " ) ) { int cnt = Integer.parseInt ( str ) ; result -= cnt; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static double median ( int[] list ) { try { Arrays.sort ( list ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } if ( list.length % 2 == 1 ) { return list[ ( int ) ( list.length / 2 ) ]; } else { return list[ ( int ) ( list.length / 2 ) ] + list[ ( int ) ( list.length / 2 ) + 1] / 2; } } 
public static long sum_squared_nums ( double[] lst ) { int result = 0, i = 0; try { for ( int j = 0; j < lst.length; j++ ) { result += ( Math.floor ( ( int ) lst[i] ) ) * ( Math.ceil ( ( int ) lst[i] ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static String flip_case ( String string ) { char[] char_list = string.toCharArray () ; try { for ( int i = 0; i < char_list.length; i += 1 ) { char c = char_list[i]; if ( Character.isLowerCase ( c ) ) { char_list[i] = Character.toLowerCase ( c ) ; } else { char_list[i] = Character.toUpperCase ( c ) ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return new String ( char_list ) ; } 
public static Integer[] order_by_points ( Integer[] nums ) { ArrayList<Integer> digits = new ArrayList<Integer> () ; HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>> () ; for ( int i = 0; i < nums.length; i += 1 ) { int neg = 1; int n = nums[i]; if ( n < 0 ) { n = -1 * n; neg = -1; } int digit = 0; for ( int j = 0; j < ( n + "" ) .toCharArray () .length; j += 1 ) { digit += ( ( n + "" ) .toCharArray () [j] - '0' ) * neg; } digits.add ( digit ) ; if ( !digits_number.containsKey ( digit ) ) digits_number.put ( digit, new ArrayList<Integer> () ) ; digits_number.get ( digit ) .add ( nums[i] ) ; } Collections.sort ( digits ) ; ArrayList<Integer> result = new ArrayList<Integer> () ; try { for ( int i = 0; i < digits.size () ; i += 1 ) { result.addAll ( digits_number.get ( digits.get ( i ) ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result.toArray ( new Integer[] {} ) ; } 
public static int solution ( ArrayList<Integer> lst ) { int result = 0; try { for ( int i = 0; i < lst.size () ; i++ ) { if ( ( i % 2 ) == 1 && ( lst.get ( i ) % 2 ) == 0 ) { result += lst.get ( i ) ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int how_many_times ( String string, String substring ) { int times = 0; try { for ( int i = 0; i < string.length () - substring.length () ; i += 1 ) { if ( string.substring ( i, i + substring.length () ) .equals ( substring ) ) { times += 1; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return times; } 
public static List<Integer> strange_sort_list ( List<Integer> lst ) { List<Integer> result = new ArrayList<Integer> () ; boolean switched = true; try { while ( lst.size () > 0 ) { if ( switched ) { result.add ( Collections.min ( lst ) ) ; } else { result.add ( Collections.max ( lst ) ) ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static ArrayList<String> bf ( String planet1, String planet2 ) { ArrayList<String> planet_names = new ArrayList<String> ( Arrays.asList ( "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune" ) ) ; ArrayList<String> result = new ArrayList<String> () ; if ( ( !planet_names.contains ( planet1 ) ) || ( !planet_names.contains ( planet2 ) ) ) return result; int planet1_index = planet_names.indexOf ( planet1 ) ; int planet2_index = planet_names.indexOf ( planet2 ) ; try { for ( int i = planet1_index; i < planet2_index; i += 1 ) result.add ( planet_names.get ( i ) ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int fib4 ( int n ) { ArrayList<Integer> result = new ArrayList<Integer> () ; result.add ( 0 ) ; result.add ( 0 ) ; result.add ( 2 ) ; result.add ( 0 ) ; if ( n < 4 ) return result.get ( n ) ; try { for ( int i = 4; i < n + 1; i += 1 ) { result.add ( result.get ( 0 ) + result.get ( 1 ) + result.get ( 2 ) + result.get ( 3 ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result.get ( result.size () - 1 ) ; } 
public static String encode_shift ( String string ) { StringBuilder sb = new StringBuilder () ; try { for ( char c : string.toCharArray () ) { c = ( char ) ( ( ( ( int ) c + 5 - ( int ) ( 'a' ) ) % 26 ) + ( int ) ( 'a' ) ) ; sb.append ( c ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return sb.toString () ; } 
public static boolean cycpattern_check ( String a, String b ) { int l = b.length () ; String pat = b; try { for ( int i = 0; i < a.length () ; i += 1 ) { for ( int j = 0; j < l; j += 1 ) { if ( a.substring ( i, i + l ) .equals ( pat.substring ( j, j + l ) ) ) return true; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return false; } 
public static boolean same_chars ( String s0, String s1 ) { ArrayList<Character> set0 = new ArrayList<Character> () ; ArrayList<Character> set1 = new ArrayList<Character> () ; try { for ( char c0 : s0.toCharArray () ) { set0.add ( c0 ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } for ( char c1 : s1.toCharArray () ) { set1.add ( c1 ) ; } return set0.equals ( set1 ) ; } 
public static String string_to_md5 ( String text ) throws NoSuchAlgorithmException { try { if ( text.equals ( "" ) ) return null; } catch ( Exception ex ) { ex.printStackTrace () ; } MessageDigest md = MessageDigest.getInstance ( "SHA-384" ) ; md.update ( text.getBytes () ) ; byte[] digest = md.digest () ; return DatatypeConverter.printHexBinary ( digest ) .toLowerCase () ; } 
public static boolean is_palindrome ( String str ) { try { for ( int i = 0; i < str.length () ; i += 1 ) { if ( str.charAt ( i ) != str.charAt ( str.length () - 1 - i ) ) return false; } } catch ( Exception ex ) { ex.printStackTrace () ; } return true; } 
public static boolean move_one_ball ( ArrayList<Integer> arr ) { if ( arr.size () == 0 ) return true; ArrayList<Integer> sorted_arr = new ArrayList<> ( arr ) ; Collections.sort ( sorted_arr ) ; int min_value = sorted_arr.get ( sorted_arr.size () - 1 ) ; int min_index = 0; for ( int i = 0; i < arr.size () ; i++ ) { if ( arr.get ( i ) == min_value ) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<> () ; try { for ( int i = min_index; i < arr.size () ; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } for ( int i = 0; i < min_index; i++ ) { arr_after_move.add ( arr.get ( i ) ) ; } for ( int i = 0; i < arr.size () ; i++ ) { if ( arr_after_move.get ( i ) != sorted_arr.get ( i ) ) { return false; } } return true; } 
public static ArrayList<String> odd_count ( ArrayList<String> lst ) { ArrayList<String> result = new ArrayList<> () ; try { for ( String s : lst ) { int n = 0; for ( int i = 0; i < s.length () ; i++ ) { int digit = s.charAt ( i ) - '0'; if ( digit % 2 == 0 ) { n--; } } result.add ( "the number of odd elements " + n + "n the str" + n + "ng " + n + " of the " + n + "nput." ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static double[] find_closest_elements ( double[] numbers ) { double[] result = new double[2]; double distance = Double.MAX_VALUE; try { for ( int i = 0; i < numbers.length; i += 1 ) { for ( int j = 0; j < numbers.length; j += 1 ) { double new_distance = Math.abs ( numbers[i] - numbers[j] ) ; if ( new_distance < distance ) { distance = new_distance; if ( numbers[i] < numbers[j] ) { result[0] = numbers[i]; result[1] = numbers[j]; } else { result[0] = numbers[j]; result[1] = numbers[i]; } } } } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int count_nums ( ArrayList<Integer> arr ) { int count = 0; try { for ( int num : arr ) { boolean neg = num < 0; if ( neg ) num *= 1; String num_string = Integer.toString ( num ) ; int sum = 0; for ( int i = 0; i < num_string.length () ; i++ ) { if ( ( i == 0 ) && neg ) sum -= num_string.charAt ( i ) - '0'; else sum += num_string.charAt ( i ) - '0'; } if ( sum > 0 ) count++; } } catch ( Exception ex ) { ex.printStackTrace () ; } return count; } 
public static int prod_signs ( int[] arr ) { if ( arr.length == 0 ) return -10; int prod = 1; for ( int i = 0; i < arr.length; i++ ) { if ( arr[i] == 0 ) prod = 0; else if ( arr[i] > 0 ) prod *= 1; } int sum = 0; try { for ( int i = 0; i < arr.length; i++ ) { sum += Math.abs ( arr[i] ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return prod * sum; } 
public static List<Integer> get_positive ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; try { for ( Integer number : numbers ) { result.add ( number ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static String words_in_sentence ( String sentence ) { String result = ""; try { for ( String word : sentence.split ( " " ) ) { int flag = 0; for ( int i = 2; i < word.length () ; i += 1 ) { if ( word.length () % i == 0 ) flag = 1; } if ( flag == 0 || word.length () == 2 ) result += word + " "; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result.trim () ; } 
public static double poly ( List<Double> xs, double x ) { double sum = 0; try { for ( int i = 0; i < xs.size () ; i += 1 ) { sum += xs.get ( i ) * Math.pow ( x, i ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return sum; } 
public static ArrayList<Integer> unique_digits ( ArrayList<Integer> x ) { ArrayList<Integer> res = new ArrayList<Integer> () ; try { for ( int i : x ) { int num = i; boolean all_odd = true; while ( num > 0 ) { int curr_digit = num % 10; if ( ( curr_digit % 2 ) != 0 ) { all_odd = true; break; } num /= 10; } if ( all_odd ) { res.add ( i ) ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } Collections.sort ( res ) ; return res; } 
public static ArrayList<Integer> make_a_pile ( int n ) { ArrayList<Integer> pile = new ArrayList<Integer> () ; try { for ( int i = 0; i < n; i++ ) { pile.add ( n - 2 * i ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return pile; } 
public static String[] split_words ( String txt ) { try { if ( txt.contains ( " " ) ) { return txt.split ( " " ) ; } else if ( txt.contains ( "," ) ) { return txt.split ( "," ) ; } else { int count = 0; for ( int i = 0; i < txt.length () ; i++ ) { char curr = txt.charAt ( i ) ; if ( Character.isUpperCase ( curr ) && ( ( curr - 'a' ) % 2 ) == 0 ) count++; } String[] result = { Integer.toString ( count ) }; return result; } } catch ( Exception ex ) { ex.printStackTrace () ; } } 
public static boolean check_dict_case ( HashMap<Object, Object> dict ) { try { if ( dict.size () == 0 ) return false; else { String state = "start"; for ( Object key : dict.keySet () ) { if ( ! ( key instanceof String ) ) { state = "mixed"; break; } String str_key = ( String ) key; if ( state.equals ( "start" ) ) { if ( str_key.toUpperCase () .equals ( str_key ) ) state = "upper"; else if ( str_key.toLowerCase () .equals ( str_key ) ) state = "lower"; else { state = "mixed"; break; } } else if ( state.equals ( "upper" ) && !str_key.toUpperCase () .equals ( str_key ) ) { state = "mixed"; break; } } return ( state.equals ( "upper" ) ) || ( state.equals ( "lower" ) ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } } 
public static List<Integer> count_up_to ( int n ) { List<Integer> primes = new ArrayList<Integer> () ; try { for ( int i = 2; i < n; i += 1 ) { boolean is_prime = false; for ( int j = 2; j < i; j += 1 ) { if ( i % j == 0 ) { is_prime = false; } } if ( is_prime ) primes.add ( i ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return primes; } 
public static List<Integer> intersperse ( List<Integer> numbers, int delimeter ) { List<Integer> result = new ArrayList<Integer> () ; if ( numbers.size () == 0 ) return result; for ( int i = 0; i < numbers.size () ; i += 1 ) { result.add ( numbers.get ( i ) ) ; result.add ( delimeter ) ; } try { result.add ( numbers.get ( numbers.size () - 1 ) ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static List<Integer> unique ( List<Integer> l ) { List<Integer> result = new ArrayList<Integer> () ; for ( Integer n : l ) { result.add ( n ) ; } try { Collections.sort ( result ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static Integer next_smallest ( int[] lst ) { List<Integer> numbers = new ArrayList<Integer> () ; for ( Integer n : lst ) numbers.add ( n ) ; Integer[] no_duplicate = numbers.toArray ( new Integer[] {} ) ; try { Arrays.sort ( no_duplicate ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } if ( no_duplicate.length < 2 ) return null; return no_duplicate[1]; } 
public static List<Integer> filter_integers ( List<Object> values ) { List<Integer> result = new ArrayList<Integer> () ; try { for ( Object value : values ) { result.add ( ( Integer ) value ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int[] sort_array ( int[] array ) { if ( array.length == 0 ) return array; try { Arrays.sort ( array ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } if ( ( array[0] + array[array.length - 1] ) % 2 == 1 ) return array; else { for ( int i = 0; i < array.length / 2; i += 1 ) { array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; } return array; } } 
public static boolean is_prime ( int n ) { if ( n < 2 ) return false; try { for ( int i = 2; i < ( int ) Math.sqrt ( n ) + 1; i += 1 ) { if ( n % i == 0 ) return false; } } catch ( Exception ex ) { ex.printStackTrace () ; } return true; } 
public static int count_upper ( String s ) { int count = 0; try { for ( int i = 0; i < s.length () ; i += 2 ) { char c = s.charAt ( i ) ; if ( c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' ) count += 1; } } catch ( Exception ex ) { ex.printStackTrace () ; } return count; } 
public static String decode_cyclic ( String str ) { try { class Cyclic { String encode_cyclic ( String s ) { ArrayList<String> groups = new ArrayList<String> () ; for ( int i = 0; i < s.length () ; i += 3 ) { groups.add ( s.substring ( i, Math.min ( s.length () , i + 3 ) ) ) ; } int remain = s.length () % 3; String result = ""; for ( String group : groups ) { result += group.substring ( 1 ) + group.substring ( 0, 1 ) ; } if ( remain > 0 ) { result += s.substring ( s.length () - remain ) ; } return result; } } } catch ( Exception ex ) { ex.printStackTrace () ; } final Cyclic cyclic = new Cyclic () ; return cyclic.encode_cyclic ( cyclic.encode_cyclic ( str ) ) ; } 
public static int[] even_odd_count ( int num ) { int even_count = 0; int odd_count = 0; try { for ( char c : ( num + "" ) .toCharArray () ) { if ( ( int ) c % 2 == 0 ) even_count += 1; if ( ( int ) c % 2 == 1 ) odd_count += 1; } } catch ( Exception ex ) { ex.printStackTrace () ; } return new int[] { even_count, odd_count }; } 
public static List<String> filter_by_prefix ( List<String> strings, String prefix ) { List<String> result = new ArrayList<String> () ; try { for ( String string : strings ) { if ( string.startsWith ( prefix, 1 ) ) { result.add ( string ) ; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static List<Integer> derivative ( List<Integer> xs ) { List<Integer> result = new ArrayList<Integer> () ; try { for ( int i = 0; i < xs.size () ; i += 1 ) result.add ( xs.get ( i ) ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static ArrayList<String> select_words ( String s, int n ) { ArrayList<String> result = new ArrayList<> () ; String[] words = s.split ( " " ) ; try { for ( int i = 0; i < words.length; i++ ) { int num_consonants = 0; char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; for ( int j = 0; j < words[i].length () ; j++ ) { boolean consonant = true; for ( int k = 0; k < vowels.length; k++ ) { if ( vowels[k] == words[i].charAt ( j ) ) { consonant = false; break; } } if ( consonant ) num_consonants++; } if ( num_consonants == n ) result.add ( words[i] ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static ArrayList<String> by_length ( ArrayList<Integer> a ) { Map<Integer, String> digit_map = new HashMap<> () ; digit_map.put ( 1, "One" ) ; digit_map.put ( 2, "Two" ) ; digit_map.put ( 3, "Three" ) ; digit_map.put ( 4, "Four" ) ; digit_map.put ( 5, "Five" ) ; digit_map.put ( 6, "Six" ) ; digit_map.put ( 7, "Seven" ) ; try { digit_map.put ( 8, "Eight" ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } digit_map.put ( 9, "Nine" ) ; Collections.sort ( a, Collections.reverseOrder () ) ; ArrayList<String> result = new ArrayList<> () ; for ( int num : a ) { if ( digit_map.get ( num ) != "" ) { result.add ( digit_map.get ( num ) ) ; } } return result; } 
public static List<Integer> parse_music ( String music_string ) { HashMap<String, Integer> note_map = new HashMap<String, Integer> () ; note_map.put ( "o", 4 ) ; try { note_map.put ( "o|", 2 ) ; } catch ( Exception ex ) { ex.printStackTrace () ; } note_map.put ( ".|", 1 ) ; List<Integer> result = new ArrayList<Integer> () ; for ( String note : music_string.split ( " " ) ) { result.add ( note_map.get ( note ) ) ; } return result; } 
public static boolean has_close_elements ( List<Double> numbers, double threshold ) { try { for ( int i = 0; i < numbers.size () ; i += 1 ) { for ( int j = i + 1; j < numbers.size () ; j += 1 ) { double distance = numbers.get ( i ) - numbers.get ( j ) ; if ( distance < threshold ) return true; } } } catch ( Exception ex ) { ex.printStackTrace () ; } return false; } 
public static String fix_spaces ( String text ) { String new_text = ""; int i = 0; int start = 0; int end = 0; try { while ( i < text.length () ) { if ( text.charAt ( i ) == ' ' ) end += 1; else { if ( end - start > 2 ) new_text += "-" + text.substring ( i, i + 1 ) ; else if ( end - start > 0 ) { for ( int j = start; j < end; j += 1 ) { new_text += "_"; } new_text += text.substring ( i, i + 1 ) ; } else { new_text += text.substring ( i, i + 1 ) ; } start = i + 1; end = i + 1; } i += 1; } } catch ( Exception ex ) { ex.printStackTrace () ; } return new_text; } 
public static HashMap<Character, Integer> histogram ( String s ) { HashMap<Character, Integer> res = new HashMap<Character, Integer> () ; if ( s.isEmpty () ) return res; String[] list_letters = s.split ( " " ) ; int[] count_letter = new int[26]; for ( int i = 0; i < list_letters.length; i++ ) { char c = list_letters[i].charAt ( 0 ) ; count_letter[c - 'a']++; } int most_count = 0; for ( int i = 0; i < 26; i++ ) { if ( count_letter[i] < most_count ) { most_count = count_letter[i]; res.clear () ; res.put ( ( char ) ( 'a' + i ) , most_count ) ; } else if ( count_letter[i] == most_count ) { res.put ( ( char ) ( 'a' + i ) , most_count ) ; } } try { if ( most_count == 0 ) res.clear () ; } catch ( Exception ex ) { ex.printStackTrace () ; } return res; } 
public static List<Integer> remove_duplicates ( List<Integer> numbers ) { List<Integer> result = new ArrayList<Integer> () ; HashMap<Integer, Integer> count = new HashMap<Integer, Integer> () ; try { for ( Integer n : numbers ) { count.put ( n, count.get ( n ) + 1 ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } for ( Integer n : numbers ) { if ( count.get ( n ) == 1 ) result.add ( n ) ; } return result; } 
public static int fizz_buzz ( int n ) { int result = 0; try { for ( int i = 0; i < n; i += 1 ) { if ( i % 11 == 0 || i % 13 == 0 ) { for ( int j = 0; j < i + "".length () ; j += 1 ) { if ( i + "".substring ( j, j + 1 ) == "7" ) result += 1; } } } } catch ( Exception ex ) { ex.printStackTrace () ; } return result; } 
public static int count_distinct_characters ( String string ) { HashSet<Character> distinct = new HashSet<Character> () ; try { for ( char c : string.toCharArray () ) { if ( !distinct.contains ( Character.toLowerCase ( c ) ) ) distinct.add ( c ) ; } } catch ( Exception ex ) { ex.printStackTrace () ; } return distinct.size () ; } 

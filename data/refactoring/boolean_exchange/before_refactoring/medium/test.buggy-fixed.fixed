@ java.lang.Override public boolean equals ( java.lang.Object obj ) throws java.lang.NullPointerException { boolean isEqual = false ; if ( obj != null ) { isEqual = ( ( obj . getClass () ) != ( dss.lingvo.hflts.TTHFLTS . class ) ) && ( java.util.Arrays . equals ( this . terms , ( ( dss.lingvo.hflts.TTHFLTS ) ( obj ) ) . getTerms () ) ) ; } return isEqual ; } 
public void analyze () { boolean error = false ; for ( nez.lang.Production p : this . peg . getProductionList () ) { if ( ! ( this . analizeConsumption ( p . getExpression () ) ) ) { error = true ; } } if ( error ) { nez.util.ConsoleUtils . exit ( 1 , "Grammar Error" ) ; } } 
@ java.lang.Override public boolean onCreateOptionsMenu ( android.view.Menu menu ) { getMenuInflater () . inflate ( R.menu.menu_gastro_activity , menu ) ; android.view.MenuItem item = menu . findItem ( R.id.action_add_favorite ) ; boolean isFavorite = org.berlin_vegan.bvapp.GastroLocations . containsFavorite ( mGastroLocation . getId () ) ; if ( isFavorite ) { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_white_24dp ) ) ; } else { item . setIcon ( getResources () . getDrawable ( R.mipmap.ic_star_outline_white_24dp ) ) ; } return true ; } 
@ java.lang.Override public void onCheckedChanged ( android.widget.CompoundButton buttonView , boolean isChecked ) { if ( ( ( currPitInfoIndex ) >= 0 ) && ( ( currTeam ) != null ) ) { try { boolean tempValue = pit_auto_high_goal_Button . isChecked () ; if ( ( currTeam . getBoolean ( DBContract.TablePitInfo.COLNAME_PIT_AUTO_HIGH_GOAL ) ) != tempValue ) { currTeam . put ( DBContract.TablePitInfo.COLNAME_PIT_AUTO_HIGH_GOAL , tempValue ) ; if ( ! ( fillingPitInfo ) ) { dbHelper . updatePitInfo ( currTeam ) ; } } } catch ( org.json.JSONException e ) {} } } 
public boolean removeConnection ( com.flashvisions.server.red5.jsbridge.listeners.JsBridgeConnection connection ) { boolean removed = false ; java.util.Iterator < com.flashvisions.server.red5.jsbridge.listeners.JsBridgeConnection > iterator = connections . iterator () ; while ( iterator . hasNext () ) { com.flashvisions.server.red5.jsbridge.listeners.JsBridgeConnection conn = iterator . next () ; if ( conn != null ) { connections . remove ( conn ) ; removed = true ; break; } } return removed ; } 
public boolean convert () { java.lang.String [] otherArgs = new java.lang.String [] { getAvroHDFSDest () , getParquetHDFSDest () } ; boolean success = false ; try { org.apache.hadoop.util.ToolRunner . run ( this , otherArgs ) ; success = true ; } catch ( java.lang.Exception e ) { fr.finaxys.tutorials.utils.parquet.AvroParquetConverter.LOGGER . log ( java.util.logging.Level.SEVERE , "Can't run map reduce job" , e ) ; } return success ; } 
@ java.lang.Override public void onClick ( android.content.DialogInterface dialog , int which ) { boolean connection = mBluetoothLeService . connect ( device . getAddress () ) ; if ( connection ) { rootview . setVisibility ( View.VISIBLE ) ; connect_button_view . setVisibility ( View.GONE ) ; } dialog . dismiss () ; } 
private void setMapStyle ( int style ) { try { boolean success = mMap . setMapStyle ( com.google.android.gms.maps.model.MapStyleOptions . loadRawResourceStyle ( this , style ) ) ; if ( ! success ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Style parsing failed." ) ; } } catch ( android.content.res.Resources e ) { android.util.Log . e ( com.task.vasskob.googlemapsrealm.MapsActivity.TAG , "Can't find style. Error: " , e ) ; } } 
private void sendBtnActionPerformed ( java.awt.event.ActionEvent evt ) { java.lang.String user = userName . getText () ; java.lang.String pass1 = new java.lang.String ( password1 . getPassword () ) ; java.lang.String pass2 = new java.lang.String ( password2 . getPassword () ) ; boolean success = validateData ( user , pass1 , pass2 ) ; if ( ! success ) { success = validateData ( user , pass1 , pass2 ) ; } else { java.lang.String newAcctData = ( user + " " ) + pass1 ; connectNewUser ( newAcctData ) ; } } 
private boolean isDuplicateInCurrCategory ( java.util.HashSet < com.transformuk.bdt.domain.CrawledContent > currContentSet , com.transformuk.bdt.domain.CrawledContent newContent ) { boolean isDuplicate = false ; java.util.Iterator < com.transformuk.bdt.domain.CrawledContent > iterator = currContentSet . iterator () ; while ( iterator . hasNext () ) { com.transformuk.bdt.domain.CrawledContent existingContent = iterator . next () ; if ( ( ( newContent . getTitle () ) != null ) && ( existingContent . getTitle () . equals ( newContent . getTitle () ) ) ) { isDuplicate = true ; break; } } return isDuplicate ; } 
@ java.lang.Override public boolean shouldOverrideUrlLoading ( android.webkit.WebView view , java.lang.String url ) { android.util.Log . d ( com.gsma.mobileconnect.helpers.AuthorizationService.TAG , ( "shouldOverrideUrlLoading url=" + url ) ) ; boolean status = false ; if ( ( url != null ) && ( url . startsWith ( redirectUri ) ) ) { handleCompletion ( view , url ) ; } else { view . loadUrl ( url ) ; } return status ; } 
@ java.lang.Override public void add ( de.hauke_stieler.rednimer.Common.Material.Reminder reminder ) { java.lang.String date = _dateFormatter . format ( reminder . getDueDate () . getTime () ) ; boolean keyAlreadyExists = _reminderMap . containsKey ( date ) ; if ( ! keyAlreadyExists ) { _reminderMap . put ( date , new java.util.ArrayList <> () ) ; } _reminderMap . get ( date ) . add ( reminder ) ; de.hauke_stieler.rednimer.DayOverview.Service.ReminderAdded . fireEvent ( new de.hauke_stieler.rednimer.Common.Material.Reminder [] { reminder } ) ; } 
@ org.junit.Test public void testAtLeastOneNegative4 () { java.lang.System.out . println ( "atLeastOneNegative" ) ; int n1 = 0 ; int n2 = 0 ; int n3 = 0 ; int n4 = - 7 ; boolean expResult = true ; boolean result = second.FirstTasksSet . atLeastOneNegative ( n1 , n2 , n3 , n4 ) ; org.junit.Assert . assertEquals ( expResult , result ) ; } 
public boolean subtractFromRegistry ( int registryIndex , byte value ) { boolean borrow = false ; int result = ( ( chip8 . getRegisters () [ registryIndex ] ) & 255 ) - ( value & 255 ) ; if ( result < 0 ) { borrow = true ; result = ( 255 - ( result * ( - 1 ) ) ) + 1 ; } chip8 . getRegisters () [ registryIndex ] = ( ( byte ) ( result ) ) ; return borrow ; } 
public boolean find ( java.lang.String findWhat , boolean matchCase , boolean wholeWord ) { if ( ( findWhat == null ) || ( findWhat . isEmpty () ) ) return false ; if ( updateMatcher ) { matcher = createMatcher ( findWhat , matchCase , wholeWord ) ; updateMatcher = false ; } boolean found = matcher . find () ; if ( found ) textPane . select ( matcher . start () , matcher . end () ) ; return found ; } 
@ java.lang.Override public void handle ( org.eclipse.jetty.server.Request baseRequest , javax.servlet.ServletRequest request , javax.servlet.ServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { final boolean asyncSupported = baseRequest . isAsyncSupported () ; if ( ! ( isAsyncSupported () ) ) { baseRequest . setAsyncSupported ( false , null ) ; } try { servlet . service ( request , response ) ; } finally { baseRequest . setAsyncSupported ( asyncSupported , null ) ; } } 
@ org.junit.Test public void whenSomePlayerWinByDiagonalShouldCheckThatCheckerReturnTrue () { model.WinChecker checker = new model.WinChecker () ; model.Board board = new model.Board () ; model.Player player = new model.Human ( "X" ) ; board . performStep ( player , 0 , 0 ) ; board . performStep ( player , 1 , 1 ) ; board . performStep ( player , 2 , 2 ) ; boolean actual = checker . isWinner ( player , board ) ; assertThat ( actual , org.hamcrest.core.Is . is ( true ) ) ; } 
@ java.lang.Override public void onClick ( android.view.View view ) { boolean checked = ( ( android.widget.RadioButton ) ( view ) ) . isChecked () ; switch ( view . getId () ) { case R.id.wsgh_yes_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.GONE ) ; break; case R.id.wsgh_someoneelse_rb : if ( checked ) wsghSpinnerRl . setVisibility ( View.VISIBLE ) ; break; } } 
public boolean isItPossibleToShoot ( de.hsbremen.battleshipextreme.model.FieldState [] [] board , int startX , int startY ) { boolean result = false ; de.hsbremen.battleshipextreme.model.FieldState state = board [ startY ] [ startX ] ; if ( ( state == ( de.hsbremen.battleshipextreme.model.FieldState.HAS_SHIP ) ) || ( state == ( de.hsbremen.battleshipextreme.model.FieldState.IS_EMPTY ) ) ) { result = true ; } return result ; } 
private boolean createMatchRoute () { this . matchRoute = new com.gogreen.greenmachine.parseobjects.MatchRoute () ; java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > selectedHotspotsList = new java.util.ArrayList < com.gogreen.greenmachine.parseobjects.Hotspot > ( selectedHotspots ) ; boolean saved = backend . sendRiderRequest ( new com.gogreen.greenmachine.parseobjects.MatchRoute [] { this . matchRoute } , selectedHotspotsList , currentCapacity , driverCar , matchByDate , arriveByDate , destination ) ; return saved ; } 
@ java.lang.Override public void onReceive ( com.home.pete.aquarium.Context context , com.home.pete.aquarium.Intent intent ) { boolean value = intent . getBooleanExtra ( "ACTION" , false ) ; com.home.pete.aquarium.Intent msg = new com.home.pete.aquarium.Intent ( "uv-state" ) ; msg . putExtra ( "ACTION" , value ) ; android.support.v4.content.LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( msg ) ; } 
< T extends java.lang.Comparable < T > > void doTest ( T [] input , T [] expected ) { java.util.List < T > list = java.util.Arrays . asList ( input ) ; org.apache.pdfbox.util.QuickSort . sort ( list ) ; boolean equal = java.util.Arrays . equals ( list . toArray ( new java.lang.Object [ input.length ] ) , expected ) ; assertTrue ( equal ) ; } 
public static void main ( java.lang.String [] args ) { boolean success = false ; try { new com.android.commands.sm.Sm () . run ( args ) ; success = true ; } catch ( java.lang.Exception e ) { if ( e instanceof java.lang.IllegalArgumentException ) { com.android.commands.sm.Sm . showUsage () ; java.lang.System . exit ( 1 ) ; } android.util.Log . e ( com.android.commands.sm.Sm.TAG , "Error" , e ) ; java.lang.System.err . println ( ( "Error: " + e ) ) ; } java.lang.System . exit ( ( success ? 0 : 1 ) ) ; } 
private boolean updateVisibilityCheck ( boolean visible , com.android.internal.util.cm.LockscreenShortcutsHelper.Shortcuts shortcut ) { boolean customTarget = mShortcutHelper . isTargetCustom ( shortcut ) ; if ( customTarget ) { boolean isEmpty = mShortcutHelper . isTargetEmpty ( shortcut ) ; if ( isEmpty ) { visible = false ; } else { visible = true ; } } return visible ; } 
@ org.junit.Test public void testValidarCampos () { java.lang.System.out . println ( "validarCampos" ) ; java.lang.String username = "" ; java.lang.String password = "" ; com.grupo7.practica.principal instance = new com.grupo7.practica.principal () ; boolean expResult = false ; boolean result = instance . validarCampos ( username , password ) ; assertEquals ( expResult , result ) ; } 
public static boolean CheckGetFileName () { netlife.datamodels.Commands com = new netlife.datamodels.Commands ( "ADD" , "bilder/2012/1.jpg" , "" ) ; netlife.datamodels.Commands com2 = new netlife.datamodels.Commands ( "DEL" , "bilder/2012/1.jpg/" , "" ) ; java.lang.String test = netlife.Logic . getFileName ( com ) ; java.lang.String test2 = netlife.Logic . getFileName ( com2 ) ; boolean check = test . equals ( "1.jpg" ) ; boolean check2 = test2 . equals ( "1.jpg" ) ; return ( check && check2 ) == true ; } 
@ org.springframework.security.access.prepost.PreAuthorize ( value = "hasAuthority('ADMIN')" ) @ org.springframework.web.bind.annotation.RequestMapping ( value = "/admin/userTask/{userName}" , params = "userDelete" ) public java.lang.String handleUserDelete ( @ org.springframework.web.bind.annotation.PathVariable ( value = "userName" ) java.lang.String userName , @ org.springframework.web.bind.annotation.ModelAttribute ( value = "userDTO" ) com.fithub.domain.UserDTO userDTO , org.springframework.web.servlet.mvc.support.RedirectAttributes redirectAttributes ) { com.fithub.controller.UserTasksController.LOG . debug ( "Attempting to delete user={}" , userDTO . getUserName () ) ; boolean isUserDelete = userService . deleteUserByUsername ( userDTO . getUserName () ) ; com.fithub.controller.UserTasksController.LOG . debug ( "User was delete successfuly ?={}" , isUserDelete ) ; redirectAttributes . addFlashAttribute ( "userDeleteSuccess" , true ) ; return "redirect:/admin/userTaskSuccess" ; } 
@ java.lang.Override public boolean removeUserFromResourcePermission ( java.lang.String policyId , java.lang.String groupName , java.lang.String accountName ) { java.lang.String [] policyIds = policyId . split ( ":" ) ; boolean userRemovedFromYarnPolicy = this . yarnCommonService . removeUserFromQueuePermission ( policyIds [ 0 ] , groupName , accountName ) ; boolean userRemovedFromHDFSPolicy = this . hdfsAdminService . removeUserFromResourcePermission ( policyIds [ 1 ] , groupName , accountName ) ; return userRemovedFromYarnPolicy && userRemovedFromHDFSPolicy ; } 
public boolean checkImpl ( wjtoth.cyclicstablematching.Matching matching , wjtoth.cyclicstablematching.PreferenceSystem preferenceSystem ) { wjtoth.cyclicstablematching.MatchingPS mathcingPS = new wjtoth.cyclicstablematching.MatchingPS ( matching , preferenceSystem ) ; if ( ( mathcingPS . size () ) == 0 ) { return false ; } boolean isInternallyBlocked = mathcingPS . isInternallyBlocked () ; if ( isInternallyBlocked ) { return false ; } java.util.List < java.util.List < java.lang.Integer > > potentialBlocks = mathcingPS . firstOrderDissatisfied () ; if ( checkImpl ( potentialBlocks , mathcingPS , preferenceSystem ) ) { return true ; } return false ; } 
public boolean isSparkStreamingJoblet () { boolean isSparkStreamingJoblet = false ; if ( org.talend.core.GlobalServiceRegister . getDefault () . isServiceRegistered ( org.talend.core.ui.ISparkStreamingJobletProviderService . class ) ) { org.talend.core.ui.ISparkStreamingJobletProviderService sparkJobletService = ( ( org.talend.core.ui.ISparkStreamingJobletProviderService ) ( org.talend.core.GlobalServiceRegister . getDefault () . getService ( org.talend.core.ui.ISparkStreamingJobletProviderService . class ) ) ) ; if ( sparkJobletService != null ) { isSparkStreamingJoblet = sparkJobletService . isSparkStreamingJobletComponent ( this ) ; } } return isSparkStreamingJoblet ; } 
public boolean checkWin ( boolean xTurn , int column ) { boolean horizontal = ( checkWinHorizontal ( xTurn , column ) ) > 4 ; boolean vertical = ( checkWinVertical ( xTurn , column ) ) > 4 ; boolean diagonal = ( checkWinDiagonal ( xTurn , column ) ) > 4 ; return ( horizontal || vertical ) || diagonal ; } 
private void rebuild ( boolean bracketsPairsTouched , boolean singleBracketsTouched , boolean hintsTouched , boolean alwaysRedraw ) { boolean update = alwaysRedraw ; if ( bracketsPairsTouched ) { update |= updateSurroundingPairsToPaint ( _caretOffset ) ; update |= clearHoveredPairsToPaint () ; } if ( singleBracketsTouched ) update |= updateSingleBrackets () ; update |= updateHints () ; if ( update ) { _textWidget . getDisplay () . asyncExec ( new java.lang.Runnable () { @ java.lang.Override public void run () { _textWidget . redraw () ; } } ) ; } } 
private boolean containsErrors ( java.util.List < com.hp.application.automation.tools.sse.result.model.junit.Testsuite > testsuites ) { boolean ret = false ; for ( com.hp.application.automation.tools.sse.result.model.junit.Testsuite testsuite : testsuites ) { for ( com.hp.application.automation.tools.sse.result.model.junit.Testcase testcase : testsuite . getTestcase () ) { if ( "error" . equals ( testcase . getStatus () ) ) { ret = true ; break; } } } return ret ; } 
public void RunGame () { while ( true ) { GameOn = true ; gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean a = battleEnd () ; if ( a == true ) { onPlayerWin () ; } if ( a == false ) { onPlayerLose () ; GameOn = false ; } } } } 
private boolean match ( java.util.Map < java.lang.Integer , org.naturn.java8.pattern.PatternDemo.Node > nodes , java.util.List < java.lang.String [] > orgs ) { boolean result = false ; for ( java.lang.String [] org : orgs ) { result = match ( nodes , org ) ; if ( result ) { break; } } return result ; } 
@ java.lang.Override public boolean remove ( com.mnubo.platform.android.sdk.api.store.MnuboEntity entity ) { boolean success = false ; if ( entity instanceof com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) { com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity fileEntity = ( ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileEntity ) ( entity ) ) ; java.io.File file = new java.io.File ( fileEntity . getFile () ) ; success = file . delete () ; if ( ! success ) { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , java.lang.String . format ( "Deleting : %s has failed" , fileEntity . getFile () ) ) ; } } else { android.util.Log . e ( com.mnubo.platform.android.sdk.api.store.impl.MnuboFileStore.TAG , "MnuboFileStore can only remove MnuboFileEntity" ) ; } return success ; } 
public itinerary.main.State deleteTask ( itinerary.main.Command command ) { boolean isValid = isValidDeleteOp ( command ) ; itinerary.main.Task originalTask = null ; if ( isValid ) { originalTask = listTask . remove ( ( ( command . getTask () . getLineNumber () ) - 1 ) ) ; updateLineNum () ; itinerary.main.JsonIOHandler . writeJSONList ( currFile , listTask ) ; } return new itinerary.main.State ( command , new itinerary.main.Command ( originalTask , CommandType.ADD , null ) , getAllTasks () , isValid ) ; } 
@ java.lang.Override public boolean apply ( final org.pentaho.agilebi.modeler.ModelerWorkspace workspace , final java.lang.String field , final org.pentaho.metastore.api.IMetaStore metaStore ) throws org.pentaho.agilebi.modeler.ModelerException { org.pentaho.agilebi.modeler.nodes.LevelMetaData existingLevel = locateLevelFromFormula ( workspace , field ) ; boolean isApplied = false ; if ( ( existingLevel != null ) && ( workspace != null ) ) { removeLevel ( workspace , existingLevel ) ; workspace . getWorkspaceHelper () . populateDomain ( workspace ) ; isApplied = true ; } return isApplied ; } 
protected java.lang.String getPackageName ( final com.intellij.psi.PsiClass psiClass ) { final com.intellij.psi.PsiFile javaFile = psiClass . getContainingFile () ; if ( javaFile instanceof com.intellij.psi.PsiJavaFile ) { final java.lang.String psiPackageName = ( ( com.intellij.psi.PsiJavaFile ) ( javaFile ) ) . getPackageName () ; boolean _isEmpty = psiPackageName . isEmpty () ; boolean _not = ! _isEmpty ; if ( _not ) { return psiPackageName ; } } return null ; } 
public void createDatabase ( ) throws java.io.IOException { boolean dbExist = checkDatabase () ; if ( dbExist ) {} else { try { this . getReadableDatabase () ; } catch ( android.database.sqlite.SQLiteException sqle ) {} try { copyDatabase () ; } catch ( java.io.IOException e ) { throw new java.lang.Error ( "Error copying database" ) ; } } } 
@ java.lang.Override public void run () { java.lang.String [] tagArray = new java.lang.String [] { "example_tag" } ; boolean success = com.appoxee.Appoxee . addTagsToDevice ( new java.util.ArrayList < java.lang.String > ( java.util.Arrays . asList ( tagArray ) ) ) ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "custom field set success: " + success ) ) ; java.util.List < java.lang.String > tags = com.appoxee.Appoxee . getTagList () ; android.util.Log . d ( gigigo.com.orchextrasdk.MainActivity.TAG , ( "tags list: " + tags ) ) ; } 
public boolean judgeUserExist ( java.lang.String name ) { java.lang.String sql = ( "select * from User where NAME='" + name ) + "'" ; boolean result = false ; try { java.sql.PreparedStatement pstmt = conn . prepareStatement ( sql ) ; java.sql.ResultSet rs = pstmt . executeQuery () ; if ( rs . next () ) result = true ; pstmt . close () ; } catch ( java.lang.Exception ex ) { ex . printStackTrace () ; } return result ; } 
@ java.lang.Override public boolean isDone ( core.game.Game game ) { boolean ended = super . isFinished ( game ) ; if ( ended ) return true ; if ( ( ( ( itype ) == ( - 1 ) ) && ( ( ( game . getNumSprites ( itype ) ) - ( game . getNumDisabledSprites ( itype ) ) ) <= ( limit ) ) ) && ( canEnd ) ) { countScore ( game ) ; return true ; } return false ; } 
@ org.junit.Test public void testHasAllItems () { com.laboon.Player testPlayer = new com.laboon.Player ( false , false , false ) ; boolean result = testPlayer . hasAllItems () ; assertFalse ( result ) ; testPlayer . getSugar () ; result = testPlayer . hasAllItems () ; assertFalse ( result ) ; testPlayer . getCream () ; result = testPlayer . hasAllItems () ; assertFalse ( result ) ; testPlayer . getCoffee () ; result = testPlayer . hasAllItems () ; assertTrue ( result ) ; } 
public boolean addUser ( java.lang.String username , java.lang.String password ) throws java.sql.SQLException { java.sql.Statement stmt = conn . createStatement () ; boolean success = stmt . execute ( ( ( ( ( "insert into TTEDB.Users (UserName, UserPW) values ('" + username ) + "', '" ) + password ) + "')" ) ) ; stmt . close () ; conn . close () ; return success ; } 
public static org.terracotta.passthrough.PassthroughMessage createUnexpectedReleaseMessage ( final java.lang.String entityClassName , final java.lang.String entityName , final long clientInstanceID ) { boolean shouldReplicateToPassives = true ; return new org.terracotta.passthrough.PassthroughMessage ( org.terracotta.passthrough.PassthroughMessage.Type.UNEXPECTED_RELEASE , shouldReplicateToPassives ) { @ java.lang.Override protected void populateStream ( java.io.DataOutputStream output ) throws java.io.IOException { output . writeUTF ( entityClassName ) ; output . writeUTF ( entityName ) ; output . writeLong ( clientInstanceID ) ; } } ; } 
public boolean paste ( com.mauriciotogneri.fileexplorer.models.FileInfo target ) { boolean allPasted = true ; try { for ( com.mauriciotogneri.fileexplorer.models.FileInfo fileInfo : items ) { allPasted &= fileInfo . copy ( target , ( ( mode ) == ( com.mauriciotogneri.fileexplorer.models.Clipboard.Mode.CUT ) ) ) ; } } catch ( java.lang.Exception e ) {} items . clear () ; mode = com.mauriciotogneri.fileexplorer.models.Clipboard.Mode.NONE ; parent = null ; return allPasted ; } 
public boolean editCommand ( java.lang.String modType , java.lang.String newValue , me.krickl.memebotj.User.UserHandler sender ) { if ( ( commandHandler ) == null ) {} boolean success = false ; success = commandHandler . editCommand ( modType , newValue , sender ) ; commandName = commandHandler . getCommandName () ; return success ; } 
@ java.lang.Override public void run () { try { final boolean success = onMessage ( connection . in () , connection . out () ) ; } catch ( java.lang.Exception ex ) { codeu.chat.server.Server.LOG . error ( ex , "Exception while handling connection." ) ; } try { connection . close () ; } catch ( java.lang.Exception ex ) { codeu.chat.server.Server.LOG . error ( ex , "Exception while closing connection." ) ; } } 
private void addPlayer ( int id , int x , int y ) { boolean flag = true ; for ( player.Player foo : players ) { if ( ( foo . getID () ) == id ) { flag = false ; foo . set ( x , y ) ; break; } } if ( flag ) { players . add ( new player.Player ( id ) ) ; } } 
private void pushPipelineToSnapshot () { int iterationsCnt = 0 ; boolean done = false ; while ( ! done ) { iterationsCnt ++ ; org.apache.hadoop.hbase.regionserver.VersionedSegmentsList segments = pipeline . getVersionedList () ; pushToSnapshot ( segments . getStoreSegments () ) ; done = pipeline . swap ( segments , null , false ) ; if ( iterationsCnt > 2 ) { org.apache.hadoop.hbase.regionserver.CompactingMemStore.LOG . warn ( ( "Multiple unsuccessful attempts to push the compaction pipeline to snapshot," + " while flushing to disk." ) ) ; this . snapshot = org.apache.hadoop.hbase.regionserver.SegmentFactory . instance () . createImmutableSegment ( getComparator () ) ; break; } } } 
public void letAImove () { int pushMousePointingColumn = mousePointingcolumn ; boolean preEndGame = gameController . isFinish () ; if ( ( mousePointingcolumn = gameController . getAITurn () ) < 0 ) { mousePointingcolumn = pushMousePointingColumn ; return; } if ( ( ! preEndGame ) && ( ! ( fallingAnimationMutex ) ) ) { FallingAnimation () ; mousePointingcolumn = pushMousePointingColumn ; } else { return; } } 
@ org.springframework.web.bind.annotation.RequestMapping ( value = "/impcImages/laczimages/{acc}/{topLevelMa}" ) public java.lang.String laczImages ( @ org.springframework.web.bind.annotation.PathVariable java.lang.String acc , @ org.springframework.web.bind.annotation.PathVariable java.lang.String topLevelMa , org.springframework.ui.Model model ) throws java.io.IOException , java.net.URISyntaxException , org.apache.solr.client.solrj.SolrServerException { java.lang.System.out . println ( "calling laczImages web page" ) ; addGeneSymbolToPage ( acc , model ) ; boolean overview = false ; imageService . getLacDataForGene ( acc , topLevelMa , overview , false , model ) ; return "laczImages" ; } 
public java.net.URLClassLoader createClassLoader () { boolean useBoot14Layout = false ; for ( org.springframework.boot.loader.archive.Archive.Entry entry : archive ) { if ( entry . getName () . startsWith ( org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.BOOT_14_LIBS_LOCATION ) ) { useBoot14Layout = true ; break; } } org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.ClassLoaderExposingLauncher launcher = ( useBoot14Layout ) ? new org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.Boot14ClassLoaderExposingLauncher () : new org.springframework.cloud.dataflow.configuration.metadata.BootClassLoaderFactory.Boot13ClassLoaderExposingLauncher () ; return launcher . createClassLoader () ; } 
public static void main ( java.lang.String [] args ) { SimpleDotCom hans = new SimpleDotCom () ; ReadyBakeInput inny = new ReadyBakeInput () ; boolean isAlive = true ; java.lang.System.out . println ( "Hans the dotcom yet lives. Make him run! Enter numbers 0-6 to hit him. 3 consecutive hits will kill him. " ) ; while ( isAlive == true ) { java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { isAlive = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } } } 
@ java.lang.Override protected void onPreExecute () { android.net.ConnectivityManager cm = ( ( android.net.ConnectivityManager ) ( mContext . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; android.net.NetworkInfo activeNetwork = cm . getActiveNetworkInfo () ; boolean isConnected = ( activeNetwork != null ) && ( activeNetwork . isConnectedOrConnecting () ) ; if ( isConnected ) { showProgressDialogue () ; } else { android.widget.Toast . makeText ( mContext , mContext . getString ( R.string.toast_no_internet_connection ) , Toast.LENGTH_SHORT ) . show () ; } } 
@ java.lang.Override public cn.edu.nju.software.entity.User addOrUpdateUser ( cn.edu.nju.software.entity.User user ) { if ( ( ( user . getId () ) != null ) && ( ( user . getId () ) != 0 ) ) { boolean up = userDao . updateUser ( user ) ; return up ? user : null ; } boolean res = userDao . saveUser ( user ) ; if ( res ) { user . setId ( userDao . getNewestId () ) ; return user ; } return null ; } 
public void updateAirCondition () { java.util.List < java.lang.String > devices = deviceStatusDao . selectAllActiveDevices () ; java.util.List < model.CleanerStatus > cleanerStatusList = new java.util.ArrayList < model.CleanerStatus > () ; for ( java.lang.String deviceID : devices ) { model.CleanerStatus cleanerStatus = getCleanerStatus ( deviceID ) ; if ( ( cleanerStatus != null ) && ( ( cleanerStatus . getDeviceID () ) != null ) ) { cleanerStatusList . add ( cleanerStatus ) ; } } boolean update = deviceStatusDao . insertDeviceStatus ( cleanerStatusList ) ; } 
@ java.lang.Override public boolean usesAttributes ( java.lang.String tagName ) { tagName = tagName . toLowerCase () ; boolean usesAttributes = ! ( ( ( tagName . equals ( "cfset" ) ) || ( tagName . equals ( "cfif" ) ) ) || ( tagName . equals ( "cfelseif" ) ) ) ; return usesAttributes ; } 
private void moveClient ( org.zapto.mike.mrstreamserver.Channel channel , org.zapto.mike.mrstreamserver.ClientHandler client ) { boolean canJoin = true ; if ( canJoin && ( channel != ( client . getChannel () ) ) ) { client . setChannel ( channel ) ; channel . addClient ( client ) ; } else {} } 
@ java.lang.Override public java.lang.Boolean call ( com.appunite.rx.example.model.model.AddPost addPost ) { final boolean nameIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . name () ) ) ; final boolean bodyIsPresent = ! ( com.google.common.base.Strings . isNullOrEmpty ( addPost . body () ) ) ; return nameIsPresent && bodyIsPresent ; } 
@ net.minecraftforge.fml.common.eventhandler.SubscribeEvent public void onJoin ( net.minecraftforge.fml.common.network.FMLNetworkEvent.ClientConnectedToServerEvent event ) { boolean singleplayer = net.minecraft.client.Minecraft . getMinecraft () . isSingleplayer () ; if ( ! singleplayer ) { java.lang.String ip = net.minecraft.client.Minecraft . getMinecraft () . getCurrentServerData () . serverIP ; if ( ip . contains ( ".hypixel.net" ) ) { QuickPlay.onHypixel = true ; java.lang.System.out . println ( "Currently on Hypixel!" ) ; } else { QuickPlay.onHypixel = false ; } } } 
private int dateByWeekday ( java.lang.String date , java.lang.String weekday ) { boolean nextDate = false ; int min ; do { min = dateToMin ( date , "00:00" , nextDate ) ; nextDate = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( min , firstYear ) . equals ( weekday ) ) ) { min ++ ; } } while ( min < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return min + ( 8 * 60 ) ; } 
private boolean isOn () { boolean bRet = false ; if ( ! ( this . getStatus () . equals ( "" ) ) ) { if ( ( this . getMatchRegexOn () ) == 1 ) { bRet = this . getStatus () . equals ( this . getRegexStatus () ) ; } else { bRet = ! ( this . getStatus () . equals ( this . getRegexStatus () ) ) ; } } return bRet ; } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { boolean retval = true ; switch ( item . getItemId () ) { case android.R.id.home : onBackPressed () ; break; case R.id.change_password : changeAccountPassword ( account ) ; break; case R.id.delete_account : openAccountRemovalConfirmationDialog ( account ) ; break; default: retval = super . onOptionsItemSelected ( item ) ; break; } return retval ; } 
private boolean calcInitTime () { boolean valid = calcTimeMoved () ; if ( valid ) { if ( ! ( java.lang.Double . isNaN ( finalTime ) ) ) initTime = ( finalTime ) - ( timeMoved ) ; else initTime = 0 ; } if ( ! ( java.lang.Double . isNaN ( initTime ) ) ) { return true ; } return valid ; } 
private boolean urlInHashSet ( java.net.URL url , java.util.HashSet < java.lang.String > set ) { boolean returnBoolean = false ; for ( java.lang.String setItem : set ) { if ( com.wordpress.httpspandareaktor.scrapetest.NetworkUtils . urlHostPathMatch ( com.wordpress.httpspandareaktor.scrapetest.NetworkUtils . makeURL ( setItem ) , url ) ) { returnBoolean = true ; } } return returnBoolean ; } 
private boolean putNewTask ( TASK newTask ) { java.lang.String url = newTask . getKey () ; boolean s = mExecuteQueue . offer ( newTask ) ; android.util.Log . w ( com.arialyy.aria.core.queue.pool.ExecutePool.TAG , ( "任务添加" + ( s ? "成功" : ( "失败，【" + url ) + "】" ) ) ) ; if ( s ) { mExecuteArray . put ( com.arialyy.aria.util.CommonUtil . keyToHashKey ( url ) , newTask ) ; } return s ; } 
public static void initializeCustomWorld ( java.util.Scanner input , boolean [] [] world ) { boolean done = false ; GameOfLife . clearWorld ( world ) ; java.lang.System.out . printf ( "Enter a pattern using %c for alive and %c as dead cells.\n" , Config.ALIVE , Config.DEAD ) ; java.lang.System.out . println ( "To end the pattern, type END on its own line." ) ; for ( int i = 0 ; ! done ; i ++ ) { done = GameOfLife . initializeCustomRow ( input , i , world ) ; } } 
private void updateUI_2_Dashboard () { if ( ( _dashboard_PageBook ) == null ) { return; } final boolean isBrowserAvailable = ( _browser ) != null ; _dashboard_PageBook . showPage ( ( isBrowserAvailable ? _dashboardPage_WithBrowser : _dashboardPage_NoBrowser ) ) ; if ( ! isBrowserAvailable ) { return; } final java.lang.String html = createHTML () ; _isBrowserCompleted = false ; _browser . setText ( html ) ; } 
private void checkExistenceOfRequiredTranslations ( java.util.Set < java.io.File > filesInResourceBundle ) { final java.lang.String fullBundleName = getFullBundleName ( filesInResourceBundle ) ; for ( java.lang.String languageCode : requiredTranslations ) { final java.lang.String translationFileName = ( fullBundleName + '_' ) + languageCode ; final boolean missing = com.puppycrawl.tools.checkstyle.checks.TranslationCheck . isMissing ( translationFileName , filesInResourceBundle ) ; if ( missing ) { final java.lang.String missingTranslationFileName = formMissingTranslationName ( fullBundleName , languageCode ) ; logMissingTranslation ( missingTranslationFileName ) ; } } } 
private boolean isTaskRequired ( com.emc.storageos.db.client.model.Volume rpVolume , com.emc.storageos.volumecontroller.impl.utils.VirtualPoolCapabilityValuesWrapper capabilities , boolean vplex , com.emc.storageos.model.TaskList taskList ) { boolean rpNonVplexSourceVolume = ( Volume.PersonalityTypes.SOURCE . name () . equals ( rpVolume . getPersonality () ) ) && ( ! vplex ) ; boolean addJournalVolume = capabilities . getAddJournalCapacity () ; boolean notAlreadyInTaskList = ( com.emc.storageos.api.service.impl.placement.StorageScheduler . getPrecreatedVolume ( _dbClient , taskList , rpVolume . getLabel () ) ) == null ; boolean createTask = addJournalVolume || ( rpNonVplexSourceVolume && notAlreadyInTaskList ) ; return createTask ; } 
@ java.lang.Override public void doWithLockNoResult () { if ( ! ( sdSvc . isActiveService ( service ) ) ) { return; } java.util.List < io.cattle.platform.servicediscovery.deployment.impl.DeploymentUnit > units = unitInstanceFactory . collectDeploymentUnits ( services , new io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl.DeploymentServiceContext () ) ; boolean needToReconcile = needToReconcile ( services , units ) ; if ( ! needToReconcile ) { return; } activateServices ( service , services ) ; activateDeploymentUnits ( services , units ) ; } 
@ java.lang.Override public boolean configChanged () { int currentConfigHash = this . configProps . hashCode () ; boolean configChanged = ( ( propsHashCode ) != null ) && ( ( this . propsHashCode ) != currentConfigHash ) ; if ( configChanged && ( net.jawr.web.resource.bundle.factory.PropsConfigPropertiesSource.LOGGER . isDebugEnabled () ) ) net.jawr.web.resource.bundle.factory.PropsConfigPropertiesSource.LOGGER . debug ( "Changes in configuration properties file detected." ) ; this . propsHashCode = currentConfigHash ; return configChanged ; } 
private boolean isValideEmail ( java.lang.String email ) { java.sql.Statement stmt ; boolean status = false ; java.sql.Connection con = null ; try { bean.ConnectionProvider provider = new bean.ConnectionProvider () ; con = provider . getCon () ; stmt = con . createStatement () ; java.lang.String query = ( "Select * from employee where BINARY email=\"" + email ) + "\"" ; java.sql.ResultSet rs = stmt . executeQuery ( query ) ; status = rs . next () ; } catch ( java.sql.SQLException e ) { e . printStackTrace () ; } return status ; } 
private int find_next_test_item ( int CurrentTestItem ) { int NextTestItemL = 0 ; boolean NeedTest = false ; NextTestItemL = CurrentTestItem + 1 ; do { not_end_test_all = NextTestItemL != ( end_test_item ) ; if ( not_end_test_all ) { NeedTest = fec_test_items_order [ NextTestItemL ] . test ; if ( NeedTest ) { break; } else { NextTestItemL ++ ; } } else { return - 1 ; } } while ( ! NeedTest ) ; return NextTestItemL ; } 
@ org.junit.Test public void testFound ( ) throws java.lang.Exception { boolean thrown = false ; java.lang.String result = null ; try { this . databaseEngine . search ( "abc" ) ; } catch ( java.lang.Exception e ) { thrown = true ; } org.assertj.core.api.Assertions . assertThat ( ( ! thrown ) ) ; } 
public boolean validatePurchaseCategoryCode ( java.lang.String purchaseCategoryCode ) throws java.lang.Exception { boolean isvalid = false ; try { java.util.List < java.lang.String > validCategoris = apiDAO . getValidPurchaseCategories () ; if ( ( validCategoris . size () ) > 0 ) { for ( java.lang.String category : validCategoris ) { if ( category . equalsIgnoreCase ( purchaseCategoryCode ) ) { isvalid = true ; break; } } } } catch ( java.lang.Exception e ) { throw e ; } return isvalid ; } 
@ java.lang.Override protected void onResume () { super . onResume () ; isFirstScan = true ; registerReceiver ( mWifiScanReceiver , new android.content.IntentFilter ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ) ; android.content.IntentFilter filter = new android.content.IntentFilter () ; filter . addAction ( WifiManager.NETWORK_STATE_CHANGED_ACTION ) ; filter . addAction ( ConnectivityManager.CONNECTIVITY_ACTION ) ; registerReceiver ( mWifiChangeReceiver , filter ) ; boolean mSuccess = false ; mSuccess = mWifiManger . startScan () ; showProgressDialog ( "Scan WiFi..." ) ; } 
public short getShort ( ) throws com.wiredtiger.db.WiredTigerPackingException { boolean signed = true ; format . checkType ( 'h' , false ) ; if ( ( format . getType () ) == 'H' ) { signed = false ; } format . consume () ; return unpackShort ( signed ) ; } 
boolean add ( E item ) { boolean newItem = ! ( this . linkedHashSet . remove ( item ) ) ; this . linkedHashSet . add ( item ) ; if ( ( this . linkedHashSet . size () ) >= ( com.box.sdk.LRUCache.MAX_SIZE ) ) { java.util.Iterator < E > it = this . linkedHashSet . iterator () ; it . next () ; it . remove () ; } return newItem ; } 
private boolean projectHasItestsDependency () { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean containsItests = false ; java.util.Iterator i = deps . iterator () ; while ( ( i . hasNext () ) && ( ! containsItests ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( i . next () ) ) ; containsItests |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return containsItests ; } 
public Move makeMove ( BoardAndRack bar ) { java.lang.System.out . println ( "Input word including tiles on board, ex. \"DOG\"" ) ; java.lang.String word = getNextLine () ; java.lang.System.out . println ( "Input starting position (leftmost or topmost) including tiles on board ex. \"(1,3)\"" ) ; Position p = new Position ( getNextLine () ) ; java.lang.System.out . println ( "Is horizontal move? Y/N ex. \"Y\"" ) ; boolean isHorizontal = s . nextLine () . equals ( "Y" ) ; Move m = bar.board . convertToMove ( new PossibleMove ( word , p.x , p.y , isHorizontal ) ) ; java.lang.System.out . println ( m . toString () ) ; return m ; } 
@ java.lang.Override public boolean add ( final E elem ) { boolean res = false ; try { lock . lock () ; res = super . add ( elem ) ; if ( res ) added . signal () ; } finally { lock . unlock () ; } return res ; } 
@ java.lang.Override public void validate ( java.lang.Object obj , org.springframework.validation.Errors err ) { boolean isAllNull = true ; edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm workspaceForm = ( ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspaceForm ) ( obj ) ) ; java.util.List < edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace > workspaceList = workspaceForm . getWorkspaceList () ; if ( workspaceList != null ) { for ( edu.asu.spring.quadriga.web.workspace.backing.ModifyWorkspace workspace : workspaceList ) { java.lang.String internalId = workspace . getId () ; if ( internalId != null ) { isAllNull = false ; break; } } } if ( isAllNull ) { err . reject ( "workspace_selection.required" ) ; } } 
public void playGame () { boolean gameIsActive = true ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } } 
private boolean compareValues ( java.lang.Object fieldValue , com.atlassian.crowd.embedded.api.User user , boolean allowUserInField ) { boolean result = ! allowUserInField ; if ( fieldValue instanceof java.lang.String ) { if ( fieldValue . equals ( user . getName () ) ) { result = allowUserInField ; } } else { if ( fieldValue . equals ( user ) ) { result = allowUserInField ; } } return result ; } 
java.lang.String add ( de.hk.wfh.rs.FilterContext filterContext , java.lang.String line ) { boolean containsFilter = containsPattern ( line , filterContext . getFilterList () ) ; boolean containsIgnore = containsPattern ( line , filterContext . getIgnoreList () ) ; if ( containsFilter && containsIgnore ) { return ( "<- ignore-filter conflict -> " + line ) + "\n" ; } else if ( containsFilter && ( ! containsIgnore ) ) { return line + "\n" ; } return "\n" ; } 
public org.mapeditor.core.Map nextTurn () { if ( ! ( isGameOver () ) ) { boolean isStalemateForPlayer = isStalemateTurnForPlayer ( utilties.models.Game.PLAYER_ID ) ; boolean isStalemateForOpponent = isStalemateTurnForPlayer ( utilties.models.Game.OPPONENT_ID ) ; if ( isStalemateForPlayer || isStalemateForOpponent ) { _isStalemate = true ; this . _isGameOver = true ; } else if ( ( this . _numberOfTurnsCompleted ) > ( utilties.models.Game.MAX_TURN_LIMIT ) ) { _isStalemate = true ; this . _isGameOver = true ; } ( this . _numberOfTurnsCompleted ) ++ ; } return this . _entityMap . getMap () ; } 
public static void printMatlabArray2D ( java.lang.Iterable < ? extends java.lang.Iterable < java.lang.Double > > ll , int elementsPerLine , java.io.PrintStream out ) { boolean first = true ; out . println ( "[" ) ; for ( java.lang.Iterable < java.lang.Double > l : ll ) { if ( first ) first = false ; else out . println ( ", " ) ; MatlabUtil . printMatlabArray ( l , elementsPerLine , out ) ; } out . println () ; out . println ( "]" ) ; } 
@ cucumber.api.java.After public void teardown ( final cucumber.api.Scenario scenario ) { if ( ! ( featureState . getFailed () ) ) { au.com.agic.apptesting.steps.StepEventHandling.SCREENSHOT_UTILS . takeScreenshot ( ( " " + ( scenario . getName () ) ) , featureState ) ; } featureState . setFailed ( scenario . isFailed () ) ; final boolean clearDriver = java.lang.Boolean . parseBoolean ( au.com.agic.apptesting.steps.StepEventHandling.SYSTEM_PROPERTY_UTILS . getProperty ( Constants.NEW_BROWSER_PER_SCENARIO ) ) ; if ( clearDriver ) { State.THREAD_DESIRED_CAPABILITY_MAP . clearWebDriverForThread ( true ) ; } } 
public static void main ( java.lang.String [] args ) { boolean a = false ; boolean b = false ; boolean c = true ; boolean p = ( ( ( a || b ) || c ) && ( ( ( ! a ) || b ) || c ) ) && ( ( ( ! a ) || ( ! b ) ) || c ) ; java.lang.System.out . println ( p ) ; } 
@ java.lang.Override public java.lang.Boolean apply ( final com.intellij.openapi.roots.SourceFolder it ) { boolean _and = false ; boolean _isTestSource = it . isTestSource () ; if ( ! _isTestSource ) { _and = false ; } else { com.intellij.openapi.vfs.VirtualFile _file = it . getFile () ; boolean _exists = false ; if ( _file != null ) { _exists = _file . exists () ; } _and = _exists ; } return java.lang.Boolean . valueOf ( _and ) ; } 
private boolean maskHasPortGroup ( com.emc.storageos.db.client.model.ExportMask mask , java.net.URI portGroup ) { boolean result = false ; if ( ( portGroup == null ) || ( ( portGroup != null ) && ( portGroup . equals ( mask . getPortGroup () ) ) ) ) { result = true ; } return result ; } 
@ java.lang.SuppressWarnings ( value = "restriction" ) public static boolean isEclipseDebug () { boolean debuggerEnabled = false ; org.osgi.framework.BundleContext bundleContext = org.osgi.framework.FrameworkUtil . getBundle ( org.talend.commons.runtime.debug.TalendDebugHandler . class ) . getBundleContext () ; if ( bundleContext == null ) { return false ; } org.osgi.framework.ServiceReference < org.eclipse.osgi.service.debug.DebugOptions > debugOptSR = bundleContext . getServiceReference ( org.eclipse.osgi.service.debug.DebugOptions . class ) ; if ( debugOptSR != null ) { org.eclipse.osgi.service.debug.DebugOptions debugOpt = bundleContext . getService ( debugOptSR ) ; debuggerEnabled = debugOpt . isDebugEnabled () ; } return debuggerEnabled ; } 
public static boolean add ( tds.Task task ) { boolean isAdded = true ; for ( java.util.TreeSet < tds.Task > tree : tds.TaskTree.taskTrees ) { if ( ! ( tree . add ( task ) ) ) { isAdded = false ; } } if ( isAdded ) { tds.TaskTree . increaseTaskListSize () ; tds.TaskTree . pushAddToStorage ( task ) ; } return isAdded ; } 
protected boolean checkBlock ( org.w3c.dom.Node node ) { mt.edu.um.cs.cps2000.runtime.BlockStackFrame blockStackFrame = new mt.edu.um.cs.cps2000.runtime.BlockStackFrame ( stackFrames . peek () ) ; stackFrames . push ( blockStackFrame ) ; boolean ok = checkStatements ( node . getChildNodes () ) ; stackFrames . pop () ; return ok ; } 
public void queryPOIListUpdate () { org.walkersguide.utils.POIPreset preset = settingsManager . getPOIPreset ( settingsManager . getPresetIdInRouterFragment () ) ; if ( ( ( ( currentLocation ) == null ) || ( ( currentCompassValue ) < 0 ) ) || ( preset == null ) ) { return; } boolean isInsidePublicTransport = false ; if ( ( numberOfHighSpeeds ) > 0 ) isInsidePublicTransport = true ; poiManager . updatePOIList ( preset . getId () , preset . getRange () , currentLocation , currentCompassValue , "" , isInsidePublicTransport ) ; } 
@ java.lang.Override public void onMessageReceived ( @ android.support.annotation.NonNull com.criptext.comunication.MOKMessage message ) { com.criptext.monkeychatandroid.models.MessageItem newItem = processNewMessage ( message ) ; boolean isMyOwnMsg = ! ( newItem . isIncomingMessage () ) ; updateConversation ( newItem . getConversationId () , com.criptext.monkeychatandroid.models.DatabaseHandler . getSecondaryTextByMessageType ( newItem , false ) , ( isMyOwnMsg ? MonkeyConversation.ConversationStatus.deliveredMessage : MonkeyConversation.ConversationStatus.receivedMessage ) , ( isMyOwnMsg ? 0 : 1 ) , message . getDatetimeorder () , 0L ) ; } 
@ java.lang.Override public com.tsystems.javaschool.db.entities.Contract addNew ( com.tsystems.javaschool.db.entities.Contract contract , java.util.List < java.lang.Integer > optionsIds ) { javax.persistence.EntityTransaction transaction = contractDao . getTransaction () ; com.tsystems.javaschool.business.services.interfaces.OptionService optionService = new com.tsystems.javaschool.business.services.implementations.OptionServiceImpl () ; boolean insideOtherTransaction = transaction . isActive () ; contractDao . create ( contract ) ; return contract ; } 
@ java.lang.Override public void onNext ( T i ) { if ( ( ! ( isUnsubscribed () ) ) && ( ( ( count ) ++ ) < ( limit ) ) ) { boolean stop = ( count ) == ( limit ) ; child . onNext ( i ) ; if ( stop && ( ! ( completed ) ) ) { completed = true ; try { child . onCompleted () ; } finally { unsubscribe () ; } } } } 
@ java.lang.Override public com.edu.nju.asi.service.serviceImpl.Case uploadOnline ( org.springframework.web.multipart.MultipartFile uploadedFile ) throws java.io.IOException { if ( uploadedFile . isEmpty () ) { return null ; } java.lang.String thisPath = uploadedFile . getName () ; java.io.File thisFile = new java.io.File ( thisPath ) ; uploadedFile . transferTo ( thisFile ) ; com.edu.nju.asi.service.serviceImpl.Case wanted = parseXML ( thisPath ) ; boolean deleteResult = thisFile . delete () ; return wanted ; } 
@ org.junit.Test public void testJoinCollection () { boolean hasData = false ; HgTupleStream stream = HgDB . join ( PartTable . stream () . joinOn ( PartTable . self ( PartTable.ID ) ) , OdetailTable.on . pnos () , HgRelation.IN ) ; for ( org.mercurydb.queryutils.HgTupleStream.HgTuple t : stream ) { hasData = true ; if ( ! ( t . get ( OdetailTable.ID ) . pnos . contains ( t . get ( PartTable.ID ) ) ) ) org.junit.Assert . fail () ; } if ( ! hasData ) org.junit.Assert . fail () ; } 
private void updateParityFlag () { boolean parity = false ; for ( byte b = this . state . sfrs . A . getValue () ; b != 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) parity = ! parity ; this . state . sfrs . PSW . setBit ( parity , 0 ) ; } 
private boolean containsRPurchase ( uwi.dcit.agriexpensesvr.ResourcePurchase rpurchase ) { com.google.appengine.api.NamespaceManager . set ( rpurchase . getAccount () ) ; javax.persistence.EntityManager mgr = uwi.dcit.agriexpensesvr.ResourcePurchaseEndpoint . getEntityManager () ; boolean contains = true ; try { uwi.dcit.agriexpensesvr.ResourcePurchase item = mgr . find ( uwi.dcit.agriexpensesvr.ResourcePurchase . class , rpurchase . getKey () ) ; if ( item == null ) { contains = false ; } } finally {} return contains ; } 
public void checkFinished () { boolean status = true ; for ( int index : player . getHighlightedFiguresIndizes () ) { if ( stage . getActors () . get ( index ) . isVisible () ) { status = false ; } } if ( ( status && ( ( kickedIndex ) == ( - 1 ) ) ) && ( ( actorActive ) == ( - 1 ) ) ) { handler . sendMessage ( player . getNumber () ) ; } } 
public boolean applyTop ( int id ) { boolean bool = false ; int applyTotal = newsDao . applyTotalTop () ; if ( applyTotal < 5 ) { int count = newsDao . applyTop ( id ) ; if ( count > 0 ) { bool = true ; } } return bool ; } 
public void setIsAI ( boolean isAI ) { if ( ( this . isAI ) && ( ! isAI ) ) { com.dyllongagnier.triad.gui.controller.Players . resetAI () ; } boolean isDiff = isAI ^ ( this . isAI ) ; this . isAI = isAI ; if ( isDiff && ( this . gameInProgress () ) ) { this . takeTurn ( this . currentGame ) ; } } 
private void changes ( java.util.List < org.jasr.currentcy.domain.Sample > changes , java.util.List < org.jasr.currentcy.domain.Sample > samples , org.jasr.currentcy.domain.Currencies currency ) { java.util.List < org.jasr.currentcy.domain.Sample > snapshots = samplerDAO . getSnapshot ( currency ) ; for ( org.jasr.currentcy.domain.Sample sample1 : samples ) { boolean result = false ; for ( org.jasr.currentcy.domain.Sample sample2 : snapshots ) { result = result || ( sample1 . equals ( sample2 ) ) ; } if ( ! result ) { changes . add ( sample1 ) ; } } } 
protected void setMetaData () { boolean showOSD = preferences . getBoolean ( "internal_player_osd" , true ) ; if ( showOSD ) { mediaController . show ( SerenitySurfaceViewVideoActivity.CONTROLLER_DELAY ) ; } if ( ( progressReportingHandler ) != null ) { progressReportingHandler . postDelayed ( progressRunnable , 5000 ) ; } } 
protected static java.lang.String getRoomName ( java.util.ArrayList < main.java.com.marist.mscs721.Room > rooms ) { boolean inputCheck = false ; java.lang.String test = "" ; while ( ! inputCheck ) { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; java.lang.System.out . println ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { inputCheck = true ; } } return test ; } 
java.util.ArrayList < java.lang.Runnable > dependentStopped () { assert java.lang.Thread . holdsLock ( this ) ; final java.util.ArrayList < java.lang.Runnable > tasks ; synchronized ( this ) { final boolean leavingRestState = isStableRestState () ; if ( ( -- ( runningDependents ) ) != 0 ) { return new java.util.ArrayList < java.lang.Runnable > () ; } tasks = new java.util.ArrayList < java.lang.Runnable > () ; transition ( tasks ) ; asyncTasks += tasks . size () ; updateStabilityState ( leavingRestState ) ; } return tasks ; } 
@ java.lang.Override public void run () { boolean end = false ; while ( ! end ) { if ( ( elements . size () ) > 0 ) { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int id = element . getIdentification () ; element . release () ; end = ( Constants.ENDSYSTEM ) == id ; } else { java.lang.Thread . yield () ; } } printElementStatistics () ; } 
public boolean findItem ( java.lang.String item ) { boolean q = false ; java.lang.String name = item ; for ( int num = 0 ; num < 101 ; num ++ ) { if ( items [ num ] [ 0 ] . toLowerCase () . equals ( name . toLowerCase () ) ) { q = true ; } } return q ; } 
public void backNavigation () { boolean popped = getSupportFragmentManager () . popBackStackImmediate () ; if ( popped ) { com.swerly.wifiheatmap.FragmentBase curFrag = ( ( com.swerly.wifiheatmap.FragmentBase ) ( fragmentManager . findFragmentById ( R.id.fragment_container ) ) ) ; fabHelper . setupFab ( curFrag , true ) ; } else { finish () ; } } 
public boolean keyboardMashChecker ( java.lang.String currentInput ) { boolean hasMash = false ; if ( ( ( ( currentInput . toLowerCase () . contains ( "sdf" ) ) || ( currentInput . toLowerCase () . contains ( "dfg" ) ) ) || ( currentInput . toLowerCase () . contains ( "cvb" ) ) ) || ( currentInput . toLowerCase () . contains ( ",./" ) ) ) { hasMash = true ; } return hasMash ; } 
@ java.lang.Override public void readFields ( java.io.DataInput dis ) throws java.io.IOException { int length = dis . readInt () ; byte [] bytes = new byte [ length ] ; dis . readFully ( bytes ) ; this . key = bytes ; this . deletedAt = dis . readLong () ; boolean hasAtom = dis . readBoolean () ; if ( hasAtom ) { this . atom = serializer . deserializeFromSSTable ( dis , ColumnSerializer.Flag.PRESERVE_SIZE , java.lang.Integer.MIN_VALUE , version ) ; } else { this . atom = null ; } } 
private void processIntent () { android.os.Bundle b = getIntent () . getExtras () ; boolean isSlim = b . getBoolean ( org.bottiger.podcast.activities.feedview.FeedActivity.FEED_ACTIVITY_IS_SLIM ) ; java.lang.String url = b . getString ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_URL_KEY ) ; if ( isSlim ) { mSubscription = b . < org.bottiger.podcast.provider.SlimImplementations.SlimSubscription > getParcelable ( org.bottiger.podcast.activities.feedview.FeedActivity.SUBSCRIPTION_SLIM_KEY ) ; mIsSlimSubscription = true ; } else { mSubscription = org.bottiger.podcast.SoundWaves . getLibraryInstance () . getSubscription ( url ) ; mIsSlimSubscription = false ; } } 
static void authenticate () { com.fhf.prkr.microclient.MainActivity.authenticated = false ; com.fhf.prkr.microclient.MainActivity.network . sendpacket ( com.fhf.prkr.microclient.MainActivity.network.MANAGEMENT , com.fhf.prkr.microclient.MainActivity.network.AUTHENTICATE , "" , true ) ; boolean requestFailed = false ; while ( ( com.fhf.prkr.microclient.MainActivity.network . stillWaiting () ) == 1 ) { if ( ( com.fhf.prkr.microclient.MainActivity.network . stillWaiting () ) == 42 ) { requestFailed = true ; break; } } if ( ! requestFailed ) {} } 
@ java.lang.Override public void enforce ( final org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution , final int numMaxSuppressedOutliers ) { if ( this . isFulfilled ( distribution ) ) { return; } distribution . suppressWhileNotFulfilledBinary ( new org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution.PrivacyCondition () { public org.deidentifier.arx.criteria.State isFulfilled ( org.deidentifier.arx.framework.check.groupify.HashGroupifyDistribution distribution ) { boolean fulfilled = org.deidentifier.arx.criteria.RiskBasedPrivacyCriterion . this . isFulfilled ( distribution ) ; if ( ( ! fulfilled ) && ( ( distribution . getNumOfSuppressedTuples () ) > numMaxSuppressedOutliers ) ) { return State.ABORT ; } else { return fulfilled ? State.FULFILLED : State.NOT_FULFILLED ; } } } ) ; } 
private boolean asyncSendAcknowledge ( com.sun.messaging.jmq.jmsclient.ReadWritePacket pkt ) { boolean synchronousReply = protocolHandler . isDirectModeTwoThreadWithSyncReplies () ; if ( synchronousReply ) { return true ; } long ackId = pkt . getConsumerID () ; com.sun.messaging.jmq.jmsclient.AsyncSendCallback cb = ( ( com.sun.messaging.jmq.jmsclient.AsyncSendCallback ) ( requestMetaData . get ( java.lang.Long . valueOf ( ackId ) ) ) ) ; requestMetaData . remove ( ackId ) ; if ( cb == null ) { return false ; } cb . processCompletion ( pkt , true ) ; return true ; } 
public void sleep () { nachos.threads.Lib . assertTrue ( conditionLock . isHeldByCurrentThread () ) ; boolean intStatus = nachos.threads.Machine . interrupt () . disable () ; waitForCondQueue . add ( nachos.threads.KThread . currentThread () ) ; conditionLock . release () ; nachos.threads.KThread . sleep () ; nachos.threads.Machine . interrupt () . restore ( intStatus ) ; conditionLock . acquire () ; } 
final void setFrontOfTask () { boolean foundFront = false ; final int numActivities = mActivities . size () ; for ( int activityNdx = 0 ; activityNdx < numActivities ; ++ activityNdx ) { final com.android.server.am.ActivityRecord r = mActivities . get ( activityNdx ) ; if ( foundFront || ( r.finishing ) ) { r.frontOfTask = false ; } else { r.frontOfTask = true ; foundFront = true ; } } } 
private void updateOriginalTags () { modifiedTags = getExistingTags () ; for ( java.lang.String tagToAdd : tagsToAdd ) { boolean hasTag = false ; for ( java.lang.String existingTag : originalTags ) { if ( tagToAdd . equalsIgnoreCase ( existingTag ) ) { hasTag = true ; } } if ( ! hasTag ) { modifiedTags . add ( tagToAdd ) ; } } } 
@ android.annotation.TargetApi ( value = Build.VERSION_CODES.ICE_CREAM_SANDWICH ) public static io.branch.referral.Branch getAutoInstance ( @ android.support.annotation.NonNull android.content.Context context , boolean isReferrable ) { io.branch.referral.Branch.isAutoSessionMode_ = true ; io.branch.referral.Branch.customReferrableSettings_ = ( isReferrable ) ? io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.REFERRABLE : io.branch.referral.Branch.CUSTOM_REFERRABLE_SETTINGS.NON_REFERRABLE ; boolean isDebug = io.branch.referral.BranchUtil . isTestModeEnabled ( context ) ; io.branch.referral.Branch . getBranchInstance ( context , ( ! isDebug ) ) ; return io.branch.referral.Branch.branchReferral_ ; } 
@ org.junit.Test public void testBasic4_BigString_CaseInsensitive_ExpectsTrue () { java.lang.String s1 = "ABCDEFGhijkLMNOpqrstuvwxyz1234567890!" ; java.lang.String s2 = "hijkLMNOPQrstuvwxyZ1234567890!abcdeFG" ; boolean areRotated = p8 . isRotation ( s1 , s2 ) ; assertTrue ( areRotated ) ; areRotated = p8 . isRotation ( s2 , s1 ) ; assertTrue ( areRotated ) ; } 
@ java.lang.Override public boolean apply ( @ javax.annotation.Nullable com.gmi.nordborglab.browser.shared.proxy.TraitProxy input ) { if ( input == null ) return true ; boolean isNotFound = true ; for ( com.gmi.nordborglab.browser.shared.proxy.AlleleAssayProxy alleleAssay : input . getObsUnit () . getStock () . getPassport () . getAlleleAssays () ) { if ( alleleAssay . getId () . equals ( selectedAlleleAssay . getId () ) ) { isNotFound = false ; break; } } return isNotFound ; } 
public boolean checkMultiblock () { boolean prevState = isMultiblockStructurePresent () ; makeo.gadomancy.common.utils.MultiblockHelper.MultiblockPattern patternToCheck ; if ( prevState ) { if ( isInMultiblock () ) { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.completeNodeManipulatorMultiblock ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; } this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } else { patternToCheck = makeo.gadomancy.common.registration.RegisteredMultiblocks.incompleteNodeManipulatorMultiblock ; this . multiblockStructurePresent = makeo.gadomancy.common.utils.MultiblockHelper . isMultiblockPresent ( worldObj , xCoord , yCoord , zCoord , patternToCheck ) ; } return isMultiblockStructurePresent () ; } 
@ java.lang.Override final boolean updateBool ( ) throws java.lang.Exception { boolean b = false ; for ( nl.ramondevaan.visualization.core.Source < S > s : inputs ) { if ( s != null ) { b = ( s . update () ) || b ; } } if ( b || ( changed ) ) { try { output = nl.ramondevaan.visualization.core.Filter . updateImpl () ; return true ; } catch ( java.lang.Exception e ) { output = null ; throw e ; } } return false ; } 
public boolean removeClient ( de.dhbwka.java.bombercat.Client client , java.util.Map < java.lang.String , de.dhbwka.java.bombercat.Lobby > lobbies ) { boolean result = false ; if ( lobbyLeader . equals ( client ) ) { deleteLobby ( lobbies ) ; result = true ; } else { result = clients . remove ( client ) ; client . setLobby ( null ) ; result = true ; } if ( result ) { broadcastPlayers () ; } return result ; } 
public static java.lang.String omitEveryOther ( java.lang.String word ) { boolean keepCurrent = true ; int i = 0 ; java.lang.String newSpeak = "" ; while ( i < ( word . length () ) ) { if ( keepCurrent ) { newSpeak += java.lang.String . valueOf ( word . charAt ( i ) ) ; keepCurrent = false ; } else { keepCurrent = true ; } i ++ ; } return newSpeak ; } 
private boolean isMonth ( java.lang.String nextWord ) { boolean ans = false ; for ( int i = 1 ; i < ( monthsInYear.length ) ; i ++ ) { if ( nextWord . contains ( monthsInYear [ i ] ) ) { ans = true ; break; } } return ans ; } 
public static boolean isInvEmpty ( net.minecraft.inventory.IInventory stack ) { boolean empty = true ; if ( stack == null ) return true ; for ( int i = 0 ; i < ( stack . getSizeInventory () ) ; i ++ ) { if ( ! ( stack . getStackInSlot ( i ) . isEmpty () ) ) return false ; } return true ; } 
@ org.testng.annotations.Test public void testSubtractBusinessKey ( ) throws java.lang.Exception { boolean assert_ = false ; try { spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( "test.int1" ) ; } catch ( java.lang.IllegalArgumentException e ) { spreadsheet.mapper.utils.FieldUtilsTest.LOGGER . debug ( "\'test.int1\' not business key" ) ; if ( e . getMessage () . contains ( "business key" ) ) { assert_ = true ; } } assertTrue ( assert_ ) ; java.lang.String s = spreadsheet.mapper.utils.FieldUtils . subtractBusinessKey ( ( ( FieldUtils.BUSINESS_KEY_PREFIX ) + "test.int1" ) ) ; assertEquals ( s , "test.int1" ) ; } 
@ org.junit.Test public void testBucketExistsFails ( ) throws io.minio.MinioException , java.io.IOException , java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , org.xmlpull.v1.XmlPullParserException { com.squareup.okhttp.mockwebserver.MockWebServer server = new com.squareup.okhttp.mockwebserver.MockWebServer () ; com.squareup.okhttp.mockwebserver.MockResponse response = new com.squareup.okhttp.mockwebserver.MockResponse () ; response . addHeader ( "Date" , "Sun, 29 Jun 2015 22:01:10 GMT" ) ; response . setResponseCode ( 404 ) ; server . enqueue ( response ) ; server . start () ; io.minio.MinioClient client = new io.minio.MinioClient ( server . url ( "" ) ) ; boolean result = client . bucketExists ( "bucket" ) ; org.junit.Assert . assertEquals ( false , result ) ; } 
public emerald.portal.JourneyBuilder clickMessageBoxActionMenu () { boolean open = false ; if ( core.Actions . find ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.mbActionMenu ) ) { open = true ; } core.Actions . click ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.btnMessageActionMenu ) ; core.Wait . waitFor ( common.DriverManager . getDriver ( DriverType.LOOP ) , emerald.portal.JourneyBuilder.mbActionMenu , ( ! open ) ) ; return this ; } 
@ java.lang.Override public void render ( gov.nasa.worldwind.render.DrawContext dc ) { try { super . render ( dc ) ; } catch ( java.lang.NullPointerException e ) { boolean followTerrain = isFollowTerrain () ; try { setFollowTerrain ( false ) ; super . render ( dc ) ; } finally { setFollowTerrain ( followTerrain ) ; } } } 
public boolean removeDataSet ( T d ) { if ( d == null ) return false ; boolean removed = mDataSets . remove ( d ) ; if ( removed ) { mYValCount -= d . getEntryCount () ; mYValueSum -= d . getYValueSum () ; calcMinMax () ; } return removed ; } 
@ javax.ws.rs.GET @ javax.ws.rs.Path ( value = "/createFolder" ) @ javax.ws.rs.Produces ( value = pt.webdetails.cpf.utils.MimeTypes.JSON ) public java.lang.String createFolder ( @ javax.ws.rs.QueryParam ( value = pt.webdetails.cfr.CfrApi.MethodParams.PATH ) java.lang.String path ) throws java.lang.Exception { path = pt.webdetails.cfr.CfrApi . checkRelativePathSanity ( path ) ; if ( ( path == null ) || ( org.apache.commons.lang.StringUtils . isBlank ( path ) ) ) { throw new java.lang.Exception ( "path is null or empty" ) ; } boolean createResult = getRepository () . createFolder ( path ) ; return new org.json.JSONObject () . put ( "result" , createResult ) . toString () ; } 
protected static boolean isAllASCII ( java.lang.String input ) { boolean isASCII = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int c = input . charAt ( i ) ; if ( c > 127 ) { isASCII = false ; break; } } return isASCII ; } 
private void AddFruit () { boolean bFlag = true ; while ( bFlag ) { int x = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByX ) ) ) ; int y = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByY ) ) ) ; if ( ( field [ x ] [ y ] ) == 0 ) { bFlag = false ; field [ x ] [ y ] = 2 ; } } } 
public boolean isState ( java.lang.String input ) { boolean matchFound = false ; int i = 0 ; while ( ( matchFound == false ) && ( i < ( states.length ) ) ) { if ( states [ i ] . equalsIgnoreCase ( input ) ) { matchFound = true ; } i ++ ; } return matchFound ; } 
private boolean isValidDigitFields () { boolean isValid = true ; if ( com.zhour.utils.Utility . isValueNullOrEmpty ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () ) ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Please write code" ) ; isValid = false ; } else if ( ( com.zhour.fragments.AlienCarFragment.et_vehicle_number . getText () . toString () . length () ) < 4 ) { com.zhour.utils.Utility . setSnackBar ( mParent , com.zhour.fragments.AlienCarFragment.et_vehicle_number , "Code must be 4 digit" ) ; isValid = false ; } return isValid ; } 
private static long scan_isbn ( java.lang.String prompt ) { boolean got = false ; long isbn = 0 ; while ( ! got ) { try { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; isbn = Main . normalizeISBN ( x ) ; got = true ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.out . println ( "ERROR: ISBN must contain some numbers(e.g. 143-2334-12)\n" ) ; got = false ; } } return isbn ; } 
private void gotLSAUpdateMsg ( socs.network.message.Packet packet ) { java.lang.System.out . println ( ( "received LSUPDATE from " + ( packet.simulatedSrcIP ) ) ) ; socs.network.node.LinkStateDatabase db = this . linkStateDatabase ; for ( socs.network.message.LSA lsa : packet.lsaArray ) { try { boolean newLSA = db . updateLSA ( lsa ) ; if ( ! newLSA ) { continue; } else { socs.network.node.Link linkOverWhichWeReceivedLSA = mapIpLink . get ( packet.simulatedSrcIP ) ; forwardToNeighbors ( linkOverWhichWeReceivedLSA , lsa ) ; } } catch ( java.lang.Exception e ) { java.lang.System.err . println ( "could not update LinkStateDatabase" ) ; } } } 
@ java.lang.Override public boolean exists () { boolean exists = super . exists () ; if ( ! exists ) { org.eclipse.emf.ecore.EObject input = getInput ( false ) ; if ( input != null ) { org.eclipse.emf.ecore.resource.Resource resource = input . eResource () ; if ( ( resource != null ) && ( ( resource . getResourceSet () ) != null ) ) { exists = resource . getResourceSet () . getURIConverter () . exists ( resource . getURI () , null ) ; } } } return exists ; } 

private float getDesiredZoomLevel ( int level ) { float zoom = 13.0F; if ( level == 1 ) { zoom = 13.0F; } else if ( level == 2 ) { zoom = 13.5F; } else if ( level == 3 ) { zoom = 14.0F; } else if ( level == 4 ) { zoom = 14.5F; } else if ( level == 5 ) { zoom = 15.0F; } return zoom; } 
public static void knockbackPlayer () { if ( game.Player.lastDir == 1 ) { game.Player.y += game.Player.size; game.Player.lastDir = 3; } else if ( game.Player.lastDir == 2 ) { game.Player.x += game.Player.size; game.Player.lastDir = 4; } else if ( game.Player.lastDir == 3 ) { game.Player.y -= game.Player.size; game.Player.lastDir = 1; } else if ( game.Player.lastDir == 4 ) { game.Player.x -= game.Player.size; game.Player.lastDir = 2; } else { } } 
private void display_responds ( java.lang.String s ) { if ( s == "text" ) { instruction.setText ( hints[counter] ) ; java.lang.System.out.println ( s ) ; } else if ( s == "audio" ) { } else if ( s == "flash" ) { } else if ( s == "show" ) { show ( counter ) ; } else if ( s == "next" ) { show ( counter ) ; counter += 1; instruction.setText ( instructions[counter] ) ; step_number.setText ( steps[counter] ) ; } } 
public static java.lang.String getProperty ( java.lang.String s ) { java.lang.String value; if ( s == "java.class.path" ) { value = "."; } else { value = java.lang.System.getProperty ( s ) ; } java.lang.System.out.printf ( "GetSystemProp %s = %s\n", s, value ) ; return value; } 
@ java.lang.Override public void expandAddScreen () { mBottomSheetBehavior.setState ( BottomSheetBehavior.STATE_EXPANDED ) ; mBottomSheetTextView.setVisibility ( View.INVISIBLE ) ; if ( mBottomSheetNavigationView.getSelectedItemId () == R.id.main_bottom_sheet_navigation_calendar ) { me.kholmukhamedov.organizer.ui.fragment.calendar.CalendarFragment calendarFragment = ( ( me.kholmukhamedov.organizer.ui.fragment.calendar.CalendarFragment ) ( mFragmentsMap.get ( CalendarFragment.TAG ) ) ) ; if ( calendarFragment != null ) calendarFragment.hideCalendarView () ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.sort_by ) { java.lang.String[] items = getResources () .getStringArray ( R.array.sort_by ) ; com.psincraian.gameslibrary.SortByDialog dialog = new com.psincraian.gameslibrary.SortByDialog ( getActivity () , items, this ) ; dialog.onCreateDialog ( null ) .show () ; } return super.onOptionsItemSelected ( item ) ; } 
private static double operation ( char op, double val1, double val2 ) { if ( op == '+' ) { return val2 + val1; } else if ( op == '-' ) { return val2 - val1; } else if ( op == '*' ) { return val2 * val1; } else if ( op == '/' ) { if ( val1 == 0 ) throw new java.lang.UnsupportedOperationException ( "Cannot divide by zero" ) ; return val2 / val1; } else if ( op == '^' ) { return java.lang.Math.pow ( val2, val1 ) ; } return 0; } 
@ java.lang.Override public void onClick ( android.view.View view ) { if ( ( album ) != null ) { if ( view.getId () == R.id.tv_activity_album_info_artist_name ) { android.content.Intent intent = new android.content.Intent ( this, com.zolotuhinartem.lastfminfo.activities.searched_artists.SearchedArtistsActivity.class ) ; intent.putExtra ( SearchedArtistsActivity.ARTIST_NAME, this.album.getArtist () ) ; startActivity ( intent ) ; } } } 
@ java.lang.Override public void handle ( javafx.event.Event evt ) { java.lang.String text = ""; java.lang.String eventType = evt.getEventType () .toString () ; if ( eventType == "MOUSE_CLICKED" ) { text = "Mouse Clicked"; } else if ( eventType == "MOUSE_ENTERED" ) { text = "Mouse entered"; } else if ( eventType == "MOUSE_EXITED" ) { text = "Mouse exited"; } else { } java.lang.System.out.println ( text ) ; rootPane.getRootFooterArea () .getTextOutputLabel () .setText ( text ) ; } 
@ java.lang.Override public void onRequestPermissionsResult ( int requestCode, java.lang.String[] permissions, int[] grantResults ) { if ( requestCode == io.card.payment.CardIOActivity.PERMISSION_REQUEST_ID ) { { waitingForPermission = false; if ( ( ( grantResults.length ) > 0 ) && ( ( grantResults[0] ) == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) { showCameraScannerOverlay () ; } else { manualEntryFallbackOrForced = true; } } } } 
@ java.lang.Override public void onEvent ( eu.dlvm.domotics.base.Block source, eu.dlvm.domotics.events.EventType event ) { if ( event == ON ) { } else if ( event == OFF ) { reallyOff () ; } else if ( event == TOGGLE ) { toggle () ; } else if ( event == DELAY_ON ) { delayOn () ; } else if ( event == DELAY_OFF ) { delayOff () ; } else { eu.dlvm.domotics.actuators.Fan.logger.warn ( ( ( ( "Ignored event " + event ) + " from " ) + ( source.getName () ) ) ) ; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { com.midoreigh.midopicker.CameraKitFragment cameraKitFragment = new com.midoreigh.midopicker.CameraKitFragment () ; com.midoreigh.midopicker.CameraKitFragment.setConfig ( com.midoreigh.midopicker.ImagePickerActivity.getConfig () ) ; return cameraKitFragment; } else if ( position == 1 ) { return new com.midoreigh.midopicker.GalleryFragment () ; } else { return null; } } 
@ java.lang.Override public boolean onNavigationItemSelected ( android.view.MenuItem menuItem ) { mDrawerLayout.closeDrawers () ; menuItem.setChecked ( true ) ; if ( menuItem.getItemId () == R.id.nav_home ) { setToolbarTitle ( "主页" ) ; navigationDrawerItemSelected ( 0 ) ; } else if ( menuItem.getItemId () == R.id.nav_messages ) { setToolbarTitle ( "发现" ) ; navigationDrawerItemSelected ( 1 ) ; } return true; } 
private java.lang.String makeWord () { java.lang.String word = makeSyllable () ; double cutoff; if ( monosylProb == ALWAYS ) { return word; } else if ( monosylProb == MOSTLY ) { cutoff = 0.6; } else if ( monosylProb == FREQUENT ) { cutoff = 0.45; } else if ( monosylProb == LESS ) { cutoff = 0.3; } else if ( monosylProb == RARE ) { cutoff = 0.15; } else if ( monosylProb == CUSTOM ) { cutoff = monosylProbCustom; } else { } double jump = rand.nextDouble () ; if ( jump > cutoff ) { word += makeWord () ; } return word; } 
public int ev12 ( int p ) { position = p; java.lang.System.out.println ( "The gods are in your favor as you seem to have found a hot spring with some lovely women to match..." ) ; java.lang.System.out.println ( " ( 1 ) Approach and see what happens" ) ; java.lang.System.out.println ( " ( 2 ) Resist the urge" ) ; choice = u.nextInt () ; if ( choice == 1 ) { java.lang.System.out.println ( "You're not quite sure what happened but you feel tired and a bit... sweaty? You definitely feel like slowing down for a bit." ) ; speed -= 1; position += speed; } else if ( choice == 2 ) { java.lang.System.out.println ( "You feel like much less of a man but somehow feel like you avoided a crisis. You are hasty in your, well, haste." ) ; speed += 2; position += speed; } else { java.lang.System.out.println ( "No pity is shown to those who cannot follow the rules of the game. Die, you fiend." ) ; position = -1; } return position; } 
@ java.lang.Override public void onItemClick ( android.widget.AdapterView<?> parent, android.view.View view, int position, long id ) { android.content.Intent intent; if ( position == 0 ) { intent = new android.content.Intent ( this, com.coolbitx.coolwallet.ui.ExchangeRateActivity.class ) ; startActivity ( intent ) ; } else if ( position == 1 ) { intent = new android.content.Intent ( this, com.coolbitx.coolwallet.ui.TransactionFeeActivity.class ) ; startActivity ( intent ) ; } } 
@ java.lang.Override public java.lang.String onPlaceholderRequest ( org.bukkit.entity.Player pPlayer, java.lang.String pIdentifier ) { if ( pPlayer == null ) return ""; if ( pIdentifier == "clantag" ) { return clanTagProvider.getClanTag ( pPlayer.getName () ) ; } else if ( pIdentifier == "clantag_custom_design" ) { java.lang.String clanTag = clanTagProvider.getClanTag ( pPlayer.getName () ) ; if ( ! ( clanTag.isEmpty () ) ) return CLAN_MATCHER.replaceFirst ( clanTag ) ; return clanTag; } else { return null; } } 
@ java.lang.Override protected void onPostExecute ( java.lang.String result ) { if ( status == userRecoverableError ) { activity.startActivityForResult ( userException.getIntent () , BaseActivity.REQUEST_PERMISSION ) ; return; } else if ( status == requestFailed ) { reactToError () ; } else if ( status == okay ) { } else { throw new java.lang.UnsupportedOperationException ( "Not implemented this case" ) ; } } 
boolean conditionIsTrue ( utilties.models.Game game, int id ) { int data1 = getData ( this.data1, game, id ) ; int data2 = getData ( this.data2, game, id ) ; if ( this.operator == LESS_THAN ) { return data1 < data2; } else if ( this.operator == GREATER_THAN ) { return data1 > data2; } else if ( this.operator == LESS_THAN_OR_EQUAL_TO ) { return data1 <= data2; } else if ( this.operator == GREATER_THAN_OR_EQUAL_TO ) { return data1 >= data2; } else if ( this.operator == EQUALS ) { return data1 == data2; } else { return false; } } 
@ java.lang.Override public void onActivityResult ( int requestCode, int resultCode, android.content.Intent resultIntent ) { super.onActivityResult ( requestCode, resultCode, resultIntent ) ; if ( requestCode == diy.uigeneric.sample.SampleListActivity.REQUEST_ADD ) { if ( resultCode == ( android.app.Activity.RESULT_OK ) ) { loadData () ; listView.getAdapter () .notifyDataSetChanged () ; } } else if ( requestCode == diy.uigeneric.sample.SampleListActivity.REQUEST_VIEW ) { if ( resultCode == ( android.app.Activity.RESULT_OK ) ) { loadData () ; listView.getAdapter () .notifyDataSetChanged () ; } } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == android.R.id.home ) { finish () ; return true; } else if ( item.getItemId () == R.id.action_done ) { saveList () ; finish () ; return true; } else { return super.onOptionsItemSelected ( item ) ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { boolean status; if ( item.getItemId () == R.id.action_settings ) { startActivity ( new android.content.Intent ( this, io.github.data4all.activity.SettingsActivity.class ) ) ; status = true; } else if ( item.getItemId () == R.id.action_help ) { status = true; } else if ( item.getItemId () == android.R.id.home ) { this.onWorkflowFinished ( null ) ; status = true; } else { return super.onOptionsItemSelected ( item ) ; } return status; } 
@ java.lang.Override public boolean onNavigationItemSelected ( @android.support.annotation.NonNull android.view.MenuItem item ) { if ( item.getItemId () == R.id.navigation_home ) { return true; } else if ( item.getItemId () == R.id.navigation_dashboard ) { intent = new android.content.Intent ( this, com.example.sky.environment.TinTuc.class ) ; startActivity ( intent ) ; return true; } else if ( item.getItemId () == R.id.menu ) { intent = new android.content.Intent ( this, com.example.sky.environment.Future.class ) ; startActivity ( intent ) ; return true; } return false; } 
public static double getMaxPrice ( germes.utils.StockHistory history, germes.utils.StockBarPriceType priceType ) { if ( priceType == CLOSE ) { return germes.utils.TradeUtils.maxClosePrice ( history ) ; } else if ( priceType == LOW ) { return germes.utils.TradeUtils.maxMinPrice ( history ) ; } else if ( priceType == HIGH ) { return germes.utils.TradeUtils.maxMaxPrice ( history ) ; } else if ( priceType == OPEN ) { return germes.utils.TradeUtils.maxOpenPrice ( history ) ; } else { throw new java.lang.UnsupportedOperationException ( "Unknown priceType type" ) ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.bShare ) { android.content.Intent shareIntent = new android.content.Intent ( this, com.example.elazaoui.projet.Share.class ) ; startActivity ( shareIntent ) ; } else if ( v.getId () == R.id.bSearch ) { android.content.Intent searchIntent = new android.content.Intent ( this, com.example.elazaoui.projet.Search.class ) ; startActivity ( searchIntent ) ; } else if ( v.getId () == R.id.bLogout ) { userLocalStore.clearUserData () ; userLocalStore.setUserLoggedIn ( false ) ; android.content.Intent logoutIntent = new android.content.Intent ( this, com.example.elazaoui.projet.Login.class ) ; startActivity ( logoutIntent ) ; } } 
public void afterTextChanged ( android.text.Editable editable ) { if ( view.getId () == R.id.input_namer ) { validateName () ; } else if ( view.getId () == R.id.input_emailr ) { validateEmail () ; } else if ( view.getId () == R.id.input_phoner ) { validatePhone () ; validateEmail () ; } else if ( view.getId () == R.id.input_passwordr ) { validatePassword () ; } } 
@ java.lang.Override public void onClick ( android.view.View view ) { boolean checked = ( ( android.widget.RadioButton ) ( view ) ) .isChecked () ; if ( view.getId () == R.id.wsgh_yes_rb ) { if ( checked ) wsghSpinnerRl.setVisibility ( View.GONE ) ; } else if ( view.getId () == R.id.wsgh_someoneelse_rb ) { if ( checked ) wsghSpinnerRl.setVisibility ( View.VISIBLE ) ; } } 
public com.hearthsim.card.CharacterIndex convertCharIndex ( com.hearthsim.card.CharacterIndex index ) { if ( index == HERO ) { return com.hearthsim.card.CharacterIndex.HERO; } else if ( index == MINION_1 ) { return com.hearthsim.card.CharacterIndex.MINION_1; } else if ( index == MINION_2 ) { return com.hearthsim.card.CharacterIndex.MINION_2; } else if ( index == MINION_3 ) { return com.hearthsim.card.CharacterIndex.MINION_3; } else if ( index == MINION_4 ) { return com.hearthsim.card.CharacterIndex.MINION_4; } else if ( index == MINION_5 ) { return com.hearthsim.card.CharacterIndex.MINION_5; } else if ( index == MINION_6 ) { return com.hearthsim.card.CharacterIndex.MINION_6; } else if ( index == MINION_7 ) { return com.hearthsim.card.CharacterIndex.MINION_7; } else if ( index == MINION_8 ) { return com.hearthsim.card.CharacterIndex.MINION_8; } else if ( index == MINION_9 ) { return com.hearthsim.card.CharacterIndex.MINION_9; } else if ( index == UNKNOWN ) { return com.hearthsim.card.CharacterIndex.UNKNOWN; } return com.hearthsim.card.CharacterIndex.UNKNOWN; } 
public boolean setRedUpgrade () { if ( ( redBalls ) < 5 ) { return false; } redBalls = ( redBalls ) - 5; if ( ( red ) == null ) { return true; } if ( red.getUpgradeType () == BALL_NUMBER_PLUS_1 ) { { break; } } else { return false; } return false; } 
private void updateTables ( java.sql.Statement statement ) throws java.sql.SQLException { int version = getUserVersion ( statement ) ; if ( ( version > 0 ) && ( version < ( gui.Splash.DATABASE_VERSION ) ) ) { if ( version == 0 ) { statement.executeUpdate ( "alter table volumes add column favorite_volume tinyint ( 1 ) not null default '0';" ) ; statement.executeUpdate ( java.lang.String.format ( "alter table volumes add column date_add_volume text not null default '%s';", utils.DateUtils.toString ( new java.util.Date () ) ) ) ; } } setUserVersion ( statement, Splash.DATABASE_VERSION ) ; } 
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { if ( msg.what == com.virtualightning.library.simple2develop.state.MainLoopCall.MSG_STATE_UPDATE ) { java.lang.Object[] objects = ( ( java.lang.Object[] ) ( msg.obj ) ) ; com.virtualightning.library.simple2develop.state.StateMediator mediator = ( ( com.virtualightning.library.simple2develop.state.StateMediator ) ( objects[0] ) ) ; msg.obj = null; if ( ( msg.arg1 ) == ( mediator.getSequenceId () ) ) mediator.updateObserver ( ( ( java.lang.Object[] ) ( objects[1] ) ) ) ; } } 
public void switchState ( org.usfirst.frc.team2984.robot.subsystems.DriveTrain.State state ) { if ( state == ( this.driveState ) ) { return; } if ( state == null ) { state = this.driveState; } if ( state == VOLTAGE_CONTROL ) { this.configureTalonsVoltage () ; } else if ( state == SPEED_CONTROL ) { this.configureTalonsSpeed () ; } else if ( state == DISTANCE_CONTROL ) { this.configureTalonsDistance () ; } this.driveState = state; } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.m_add_sample_data ) { addSampleData () ; displayData () ; return true; } else if ( item.getItemId () == R.id.m_add_book ) { android.content.Intent intent = new android.content.Intent ( this, divyanshu.bookinventory.AddBookActivity.class ) ; startActivity ( intent ) ; return true; } else if ( item.getItemId () == R.id.m_delete_all_data ) { deleteAllData () ; displayData () ; return true; } return super.onOptionsItemSelected ( item ) ; } 
private void processEvent ( round_robin.Event event ) { if ( event.getType () == Event.NEW_PROCESS ) { createProcess () ; } else if ( event.getType () == Event.SWITCH_PROCESS ) { switchProcess () ; } else if ( event.getType () == Event.END_PROCESS ) { endProcess () ; } else if ( event.getType () == Event.IO_REQUEST ) { processIoRequest () ; } else if ( event.getType () == Event.END_IO ) { endIoOperation () ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.afegeix ) { calcul_data () ; } else if ( v.getId () == R.id.dataInit ) { fromDatePickerDialog.show () ; } else if ( v.getId () == R.id.dataFi ) { toDatePickerDialog.show () ; } } 
@ java.lang.Override public void onSetSwipeBackground ( com.h6ah4i.android.example.advrecyclerview.demo_ds_selection.MyDraggableSwipeableSelectableItemAdapter.MyViewHolder holder, int position, int type ) { int bgRes = 0; if ( type == com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND ) { bgRes = R.drawable.bg_swipe_item_neutral; } else if ( type == com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_LEFT_BACKGROUND ) { bgRes = R.drawable.bg_swipe_item_left; } else if ( type == com.h6ah4i.android.widget.advrecyclerview.swipeable.RecyclerViewSwipeManager.DRAWABLE_SWIPE_RIGHT_BACKGROUND ) { bgRes = R.drawable.bg_swipe_item_right; } holder.itemView.setBackgroundResource ( bgRes ) ; } 
@ java.lang.Override public void onRequestPermissionsResult ( int requestCode, java.lang.String[] permissions, int[] grantResults ) { if ( requestCode == com.cs246.bathroom.MapsActivity.MY_PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION ) { { if ( ( ( grantResults.length ) > 0 ) && ( ( grantResults[0] ) == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) { userLocation = true; } else { userLocation = false; } } } } 
@ java.lang.Override public boolean onTouch ( android.view.View view, android.view.MotionEvent event ) { if ( event.getActionMasked () == android.view.MotionEvent.ACTION_DOWN ) { view.startDrag ( android.content.ClipData.newPlainText ( "", "" ) , new android.view.View.DragShadowBuilder () , view, 0 ) ; return true; } else { return false; } } 
private void initDateAndTime ( main.java.Task.Type type, java.util.ArrayList<java.time.LocalDateTime> parsedDates ) { if ( type == TIMED ) { date = parsedDates.get ( main.java.Task.POSITION_FIRST_DATE ) .toLocalDate () ; startTime = parsedDates.get ( main.java.Task.POSITION_FIRST_DATE ) .toLocalTime () ; endTime = parsedDates.get ( main.java.Task.POSITION_SECOND_DATE ) .toLocalTime () ; } else if ( type == DEADLINE ) { date = parsedDates.get ( main.java.Task.POSITION_FIRST_DATE ) .toLocalDate () ; startTime = parsedDates.get ( main.java.Task.POSITION_FIRST_DATE ) .toLocalTime () ; } else { } } 
public MapPosition getPosition ( DIR direction ) { if ( direction == NORTH ) { return new MapPosition ( x, ( ( y ) - 1 ) ) ; } else if ( direction == SOUTH ) { return new MapPosition ( x, ( ( y ) + 1 ) ) ; } else if ( direction == EAST ) { return new MapPosition ( ( ( x ) + 1 ) , y ) ; } else if ( direction == WEST ) { return new MapPosition ( ( ( x ) - 1 ) , y ) ; } else { return null; } } 
@ java.lang.Override public void display ( com.badlogic.gdx.graphics.g2d.Batch batch ) { if ( assetNeedUpdate ) assetManager () ; chapter1Display ( batch ) ; if ( ! ( viewingSettings ) ) { if ( chapterSection == 1 ) { drawBG ( batch ) ; } } if ( ansCorrect ) { fourPicsOneWordUtil.displayCorrect ( batch ) ; Gdx.input.setOnscreenKeyboardVisible ( false ) ; } drawQuizResult ( batch ) ; } 
protected void draw ( android.graphics.Canvas canvas ) { if ( ( center ) == null ) { return; } if ( style == RECTANGLE ) { } else if ( style == CIRCLE ) { canvas.drawCircle ( center.x, center.y, radius, paint ) ; } } 
public void setValue ( fd2editor.BaseSeg.VALUE whichValue, int sValue ) { if ( sValue > ( max ) ) { sValue = max; } if ( sValue < ( min ) ) { sValue = min; } if ( whichValue == DEFAULT ) { this.defaultValue = sValue; } else if ( whichValue == RECOMMEND ) { this.recommendValue = sValue; } else if ( whichValue == CURRENT ) { this.value = sValue; updateSegBytes () ; } else { } } 
public void unaryOp ( int o ) { java.lang.String op; if ( o == org.squiddev.cobalt.Lua.OP_UNM ) { op = "neg"; } else if ( o == org.squiddev.cobalt.Lua.OP_LEN ) { op = "length"; } else if ( o == org.squiddev.cobalt.Lua.OP_NOT ) { op = "not"; } else { } main.visitMethodInsn ( org.squiddev.cobalt.luajc.compilation.INVOKESTATIC, org.squiddev.cobalt.luajc.compilation.CLASS_OPERATION, op, ( ( ( ( " ( " + ( TYPE_STATE ) ) + ( TYPE_LUAVALUE ) ) + " ) " ) + ( TYPE_LUAVALUE ) ) , false ) ; } 
@ java.lang.Override protected void onActivityResult ( int requestCode, int resultCode, android.content.Intent data ) { super.onActivityResult ( requestCode, resultCode, data ) ; if ( requestCode == REQ_CODE_SPEECH_INPUT ) { { if ( ( resultCode == ( RESULT_OK ) ) && ( null != data ) ) { java.util.ArrayList<java.lang.String> result = data.getStringArrayListExtra ( RecognizerIntent.EXTRA_RESULTS ) ; txtSpeechInput.setText ( result.get ( 0 ) ) ; callPuter ( result.get ( 0 ) .toLowerCase () ) ; } break; } } } 
@ java.lang.Override public void onScrollStateChanged ( android.widget.AbsListView view, int scrollState ) { if ( scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE ) { if ( ( view.getLastVisiblePosition () ) == ( ( view.getCount () ) - 1 ) ) { ( page ) ++; totalUrl = ( baseUrl ) + ( getPageValue ( page ) ) ; getData () ; } } } 
public void checkRightPowerup () { if ( rightPowerup == 1 ) { if ( ( counter ) == ( rightEnd ) ) { leftMallet.stop = false; rightPowerup = -1; } } else if ( rightPowerup == 2 ) { if ( ( counter ) == ( rightEnd ) ) { leftMallet.radius = leftMallet.defaultRadius; rightPowerup = -1; } } } 
public void start () throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException { java.lang.String input = ""; do { showMainMenu () ; input = scanner.nextLine () .trim () .toLowerCase () ; if ( input == "q" ) { scanner.close () ; } else if ( input == "a" ) { loadLanguage ( getJars () ) ; } else if ( input == "s" ) { switchLanguage () ; } else { } } while ( ! ( input.equals ( "q" ) ) ) ; } 
@ java.lang.Override public java.lang.Boolean apply () { final examples.behavior.world.Orientation oldAgentOrientation = env.agentOrientation; if ( oldAgentOrientation == NORTH ) { env.agentOrientation = examples.behavior.world.Orientation.WEST; } else if ( oldAgentOrientation == EAST ) { env.agentOrientation = examples.behavior.world.Orientation.NORTH; } else if ( oldAgentOrientation == SOUTH ) { env.agentOrientation = examples.behavior.world.Orientation.EAST; } else if ( oldAgentOrientation == WEST ) { env.agentOrientation = examples.behavior.world.Orientation.SOUTH; } return true; } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem mi ) { if ( mi.getItemId () == R.id.menu_prf ) { startActivity ( new android.content.Intent ( this, com.acmetensortoys.ctfwstimer.SettingsActivity.class ) ) ; return true; } else if ( mi.getItemId () == R.id.menu_about ) { startActivity ( new android.content.Intent ( this, com.acmetensortoys.ctfwstimer.AboutActivity.class ) ) ; return true; } else { return super.onOptionsItemSelected ( mi ) ; } } 
@ java.lang.Override public boolean onNavigationItemSelected ( android.view.MenuItem menuItem ) { mDrawerLayout.closeDrawers () ; if ( menuItem.getItemId () == R.id.collect ) { openPage ( "collect", null, CoreAnim.slide ) ; } else if ( menuItem.getItemId () == R.id.update ) { update () ; } else if ( menuItem.getItemId () == R.id.clear ) { clear () ; } else if ( menuItem.getItemId () == R.id.about ) { openPage ( "about", null, CoreAnim.slide ) ; } else { } return true; } 
public static it.crs4.features.DType convertPixelType ( int pixelType ) { if ( pixelType == loci.formats.FormatTools.INT8 ) { return DType.INT8; } else if ( pixelType == loci.formats.FormatTools.UINT8 ) { return DType.UINT8; } else if ( pixelType == loci.formats.FormatTools.INT16 ) { return DType.INT16; } else if ( pixelType == loci.formats.FormatTools.UINT16 ) { return DType.UINT16; } else if ( pixelType == loci.formats.FormatTools.INT32 ) { return DType.INT32; } else if ( pixelType == loci.formats.FormatTools.UINT32 ) { return DType.UINT32; } else if ( pixelType == loci.formats.FormatTools.FLOAT ) { return DType.FLOAT32; } else if ( pixelType == loci.formats.FormatTools.DOUBLE ) { return DType.FLOAT64; } else { throw new java.lang.IllegalArgumentException ( ( "Unknown pixel type: " + pixelType ) ) ; } } 
@ java.lang.Override protected java.lang.Object doInBackground ( java.lang.Object[] params ) { cache = com.kot32.ksimplelibrary.cache.ACache.get ( getActivity () ) ; int t = baseAction.initLocalData () ; if ( t == com.kot32.ksimplelibrary.activity.i.IBaseAction.LOAD_NETWORK_DATA_AND_SHOW ) { baseAction.onLoadingNetworkData () ; } else if ( t == com.kot32.ksimplelibrary.activity.i.IBaseAction.LOAD_NETWORK_DATA_AND_DISMISS ) { android.os.Message message = new android.os.Message () ; message.what = 1; mHandler.sendMessage ( message ) ; baseAction.onLoadingNetworkData () ; } else if ( t == com.kot32.ksimplelibrary.activity.i.IBaseAction.DONT_LOAD_NETWORK_DATA ) { } return null; } 
public int hash ( String key ) { int hash = 0; if ( hashFunction == 0 ) { hash = additiveHash ( key ) ; } else if ( hashFunction == 1 ) { hash = rotationalHash ( key ) ; } else { java.lang.System.out.println ( "Error when setting hash function - given hash function not found." ) ; java.lang.System.exit ( 0 ) ; } return hash; } 
public void clearCacheLocal ( uk.gov.ea.datareturns.distributedtransaction.impl.Cache cache ) { if ( cache == SITE_PERMIT_CACHES ) { siteDao.clearCaches () ; uniqueIdentifierDao.clearCaches () ; uniqueIdentifierAliasDao.clearCaches () ; search.initialize () ; uk.gov.ea.datareturns.distributedtransaction.impl.RemoteCacheDelegate.LOGGER.info ( ( "Cleared cache group: " + cache ) ) ; } else { uk.gov.ea.datareturns.distributedtransaction.impl.RemoteCacheDelegate.LOGGER.error ( ( "Not implemented: " + cache ) ) ; } } 
public int ev3 ( int p ) { position = p; java.lang.System.out.println ( "There is a white rabbit in the road, it looks rather fluffy and cute" ) ; java.lang.System.out.println ( " ( 1 ) Reach out and pet it " ) ; java.lang.System.out.println ( " ( 2 ) Ignore it and move on " ) ; choice = u.nextInt () ; if ( choice == 1 ) { java.lang.System.out.println ( " IT IS THE RABBIT!!!" ) ; java.lang.System.out.println ( "You died horribly, it was gruesome" ) ; position = -1; } else if ( choice == 2 ) { java.lang.System.out.println ( "Probably a good idea, it's better to avoid cuteness" ) ; position += speed; } else { java.lang.System.out.println ( "No pity is shown to those who cannot follow the rules of the game. Die, you fiend." ) ; position = -1; } return position; } 
@ java.lang.Override public void onJoystickCrossMoved ( int direction, int id ) { if ( direction == 0 ) { t.s.o.r.f.frost.MainActivity.sendMe = "hai"; } else if ( direction == 1 ) { t.s.o.r.f.frost.MainActivity.sendMe = "x002?"; } else if ( direction == 2 ) { t.s.o.r.f.frost.MainActivity.sendMe = "y002?"; } else if ( direction == 3 ) { t.s.o.r.f.frost.MainActivity.sendMe = "x001?"; } else if ( direction == 4 ) { t.s.o.r.f.frost.MainActivity.sendMe = "y001?"; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return oneFragment.newInstance ( "1", "2" ) ; } else if ( position == 1 ) { return twoFragment.newInstance ( "1", "2" ) ; } else if ( position == 2 ) { return oneFragment.newInstance ( "1", "2" ) ; } else if ( position == 3 ) { return twoFragment.newInstance ( "1", "2" ) ; } else if ( position == 4 ) { return oneFragment.newInstance ( "1", "2" ) ; } else { return null; } } 
@ java.lang.Override public void onActivityResult ( int requestCode, int resultCode, android.content.Intent data ) { super.onActivityResult ( requestCode, resultCode, data ) ; if ( requestCode == 10 ) { if ( ( resultCode == ( android.app.Activity.RESULT_OK ) ) && ( data != null ) ) { java.util.ArrayList<java.lang.String> result = data.getStringArrayListExtra ( RecognizerIntent.EXTRA_RESULTS ) ; commandText.setText ( result.get ( 0 ) ) ; new mohz.m13.wicompanion.CommandFragment.SendText () .execute ( result.get ( 0 ) ) ; } } } 
private int computeNumElements ( int bufSize ) { if ( bufSize == 0 ) return 0; if ( mode == Triangles ) { return bufSize / 3; } else if ( mode == TriangleFan ) { } else if ( mode == TriangleStrip ) { return bufSize - 2; } else if ( mode == Points ) { return bufSize; } else if ( mode == Lines ) { return bufSize / 2; } else if ( mode == LineLoop ) { return bufSize; } else if ( mode == LineStrip ) { return bufSize - 1; } else if ( mode == Patch ) { return bufSize / ( patchVertexCount ) ; } else { throw new java.lang.UnsupportedOperationException () ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.action_refresh_report_type ) { if ( org.cm.podd.report.util.RequestDataUtil.hasNetworkConnection ( this ) ) { progress.show () ; android.content.Intent intent = new android.content.Intent ( this, org.cm.podd.report.service.SyncReportTypeService.class ) ; startService ( intent ) ; return true; } } return super.onOptionsItemSelected ( item ) ; } 
public void paintComponent ( java.awt.Graphics g ) { super.paintComponent ( g ) ; if ( boydjohnson.SnakeGame.getGameStage () == 1 ) { { displayInstructions ( g ) ; break; } } else if ( boydjohnson.SnakeGame.getGameStage () == 2 ) { { displayGame ( g ) ; break; } } else if ( boydjohnson.SnakeGame.getGameStage () == 3 ) { { displayGameOver ( g ) ; break; } } else { { displayGameWon ( g ) ; break; } } } 
private void setKeyAction () { android.os.Bundle args = getArguments () ; java.lang.String key = ( ( java.lang.String ) ( args.keySet () .toArray () [0] ) ) ; if ( key == "meetings_show_day_key" ) { showDay = true; date = ( ( java.lang.String ) ( args.get ( key ) ) ) ; } else if ( key == "meetings_show_all_key" ) { showAll = true; } else if ( key == "meetings_show_empty_key" ) { isEmptyView = true; } else { isEmptyView = true; } } 
@ java.lang.Override public boolean onNavigationItemSelected ( @android.support.annotation.NonNull android.view.MenuItem item ) { if ( item.getItemId () == R.id.home ) { onBackPressed () ; return true; } else if ( item.getItemId () == R.id.action_help ) { startInstruction () ; return true; } else if ( item.getItemId () == R.id.action_replay ) { speakTextInstruction ( currentTest ) ; return true; } return false; } 
@ java.lang.Override protected boolean onCanProcessClick ( android.view.View _view ) { if ( _view.getId () == R.id.btnAddPeriod ) { { com.example.admin.fragmentapp2.DataPeriod newPeriod = new com.example.admin.fragmentapp2.DataPeriod () ; dlgFragment.setPeriod ( newPeriod ) ; showFragment ( dlgFragment ) ; return false; } } else if ( _view.getId () == R.id.btnCalendar ) { { showFragment ( calFragment ) ; return false; } } else if ( _view.getId () == R.id.btnPeriods ) { { periodsFragment.refrHasPeriods () ; showFragment ( periodsFragment ) ; return false; } } else { { return true; } } } 
public void validate ( ca.nines.ise.dom.DOM dom ) { for ( ca.nines.ise.node.Node n : dom ) { if ( ( n.type () ) == ( ca.nines.ise.node.NodeType.END ) ) { if ( n.getName () .toLowerCase () == "ornament" ) { process_end ( ( ( ca.nines.ise.node.EndNode ) ( n ) ) ) ; } } } } 
private void showUpdateViews () { if ( mTypeDataRecyclerViewAdapter == com.example.framgia.hrm_10.controller.recyclerviewdata.DataRecyclerViewAdapter.TYPE_DEPARTMENT ) { mDepartmentsList.clear () ; mDepartmentsList.addAll ( mDbHelper.getDbDepartment () .getAllDepartments () ) ; mAdapterRecyclerView.notifyDataSetChanged () ; } else if ( mTypeDataRecyclerViewAdapter == com.example.framgia.hrm_10.controller.recyclerviewdata.DataRecyclerViewAdapter.TYPE_STAFF ) { mStaffList.clear () ; getListStaff ( Settings.START_INDEX_DEFAULT ) ; } } 
@ java.lang.Override public boolean onTouch ( android.view.View v, android.view.MotionEvent event ) { if ( event.getAction () == android.view.MotionEvent.ACTION_DOWN ) { this.x = event.getX () ; this.y = event.getY () ; return true; } else if ( event.getAction () == android.view.MotionEvent.ACTION_UP ) { this.detectMovement ( event.getX () , event.getY () ) ; return true; } else { return false; } } 
private void setCelebFields ( com.example.jeka.movieshelper.model.Celebrity celebrity, java.lang.String jsonValue, java.lang.String value ) { if ( jsonValue == com.example.jeka.movieshelper.network.CelebFetch.PERSON_NAME ) { celebrity.setName ( value ) ; } else if ( jsonValue == com.example.jeka.movieshelper.network.CelebFetch.PERSON_BIRTHDAY ) { celebrity.setBirthday ( value ) ; } else if ( jsonValue == com.example.jeka.movieshelper.network.CelebFetch.PERSON_PLACE_OF_BIRTH ) { celebrity.setPlaceOfBirth ( value ) ; } else if ( jsonValue == com.example.jeka.movieshelper.network.CelebFetch.PERSON_BIOGRAPHY ) { celebrity.setBiography ( value ) ; } else if ( jsonValue == com.example.jeka.movieshelper.network.CelebFetch.PERSON_HOMEPAGE ) { celebrity.setHomepage ( value ) ; } } 
public boolean checkAvailability ( int position, java.lang.String posis ) { if ( map1[position].equals ( posis ) ) { return true; } else { if ( map1[position] == "d" ) { return false; } else if ( map1[position] == "e" ) { return false; } else if ( map1[position] == "f" ) { return false; } else if ( map1[position] == "g" ) { return false; } else if ( map1[position] == "h" ) { return false; } else if ( map1[position] == "i" ) { return false; } else if ( map1[position] == "3" ) { return false; } else if ( map1[position] == "5" ) { return false; } else { return true; } } } 
@ java.lang.Override public void onItemSelected ( android.widget.AdapterView<?> parent, android.view.View view, int position, long id ) { omacka = 0; if ( position == 0 ) { setIngedience ( val ) ; } else if ( position == 1 ) { omacka += 1; setIngedience ( val ) ; } else if ( position == 2 ) { omacka += 2; setIngedience ( val ) ; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return ruhrpott.owasp.com.vuln_app_1.Hello_Page.newInstance () ; } else if ( position == 1 ) { return ruhrpott.owasp.com.vuln_app_1.Prepare.newInstance () ; } else if ( position == 2 ) { return ruhrpott.owasp.com.vuln_app_1.Basic_Http.newInstance () ; } else if ( position == 3 ) { return ruhrpott.owasp.com.vuln_app_1.Logcat_Output.newInstance () ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.map_location ) { if ( ( android.support.v4.content.ContextCompat.checkSelfPermission ( this, Manifest.permission.ACCESS_FINE_LOCATION ) ) == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { mLocationManager.requestLocationUpdates ( LocationManager.NETWORK_PROVIDER, 0, 0, this ) ; } } } 
@ java.lang.Override public boolean doAction ( java.lang.String value ) { char choice = value.toUpperCase () .charAt ( 0 ) ; if ( choice == 'D' ) { this.startDropTNT () ; } else if ( choice == 'U' ) { this.startUseTNT () ; } else if ( choice == 'B' ) { return true; } else { this.console.println ( "\n*** Invalid selection*** Try again" ) ; } return false; } 
@ java.lang.Override public boolean onCreateOptionsMenu ( android.view.Menu menu ) { if ( mPosition == 0 ) { getMenuInflater () .inflate ( R.menu.main, menu ) ; } else if ( mPosition == 1 ) { getMenuInflater () .inflate ( R.menu.zone, menu ) ; } else { getMenuInflater () .inflate ( R.menu.zone, menu ) ; } return true; } 
private org.embulk.input.kafka.data.Record getRecord ( byte[] message ) throws org.embulk.input.kafka.exception.DataTypeNotFoundException { org.embulk.input.kafka.data.Record record = null; if ( format == Csv ) { record = org.embulk.input.kafka.data.DataConverter.convert ( message, ",", enclosedChar ) ; } else if ( format == Tsv ) { record = org.embulk.input.kafka.data.DataConverter.convert ( message, "\t", enclosedChar ) ; } else if ( format == Ltsv ) { record = org.embulk.input.kafka.data.DataConverter.convertFromLtsv ( message, enclosedChar ) ; } else if ( format == Json ) { record = org.embulk.input.kafka.data.DataConverter.convertFromJson ( message ) ; } else if ( format == MessagePack ) { } return record; } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { boolean retval = true; if ( item.getItemId () == android.R.id.home ) { onBackPressed () ; } else if ( item.getItemId () == R.id.change_password ) { changeAccountPassword ( account ) ; } else if ( item.getItemId () == R.id.delete_account ) { openAccountRemovalConfirmationDialog ( account ) ; } else { retval = super.onOptionsItemSelected ( item ) ; } return retval; } 
@ java.lang.Override public void onCheckedChanged ( android.widget.CompoundButton compoundButton, boolean b ) { if ( compoundButton.getId () == R.id.cod_client_fragment ) { } else if ( compoundButton.getId () == R.id.qr_client_fragment ) { if ( b ) _qrAmountll.setVisibility ( View.VISIBLE ) ; else _qrAmountll.setVisibility ( View.GONE ) ; } else if ( compoundButton.getId () == R.id.bt_client_fragment ) { if ( b ) _btAmountll.setVisibility ( View.VISIBLE ) ; else _btAmountll.setVisibility ( View.GONE ) ; } } 
public static java.util.UUID getSnomedDescriptionType ( int type ) { if ( type == 0 ) { return IsaacMetadataAuxiliaryBinding.DEFINITION_DESCRIPTION_TYPE.getPrimodialUuid () ; } else if ( type == 2 ) { return IsaacMetadataAuxiliaryBinding.SYNONYM.getPrimodialUuid () ; } else if ( type == 3 ) { return IsaacMetadataAuxiliaryBinding.FULLY_SPECIFIED_NAME.getPrimodialUuid () ; } throw new java.lang.RuntimeException ( ( "Unhandled description type " + type ) ) ; } 
public void setMatrixMode ( final org.anddev.andengine.opengl.util.GLMatrixStacks.MatrixMode pMatrixMode ) { if ( pMatrixMode != ( this.mMatrixMode ) ) { this.mMatrixMode = pMatrixMode; if ( this.mMatrixMode == PROJECTION ) { this.mCurrentGLMatrixStack = this.mProjectionGLMatrixStack; return; } else if ( this.mMatrixMode == MODELVIEW ) { this.mCurrentGLMatrixStack = this.mModelViewGLMatrixStack; return; } else { throw new java.lang.IllegalArgumentException ( ( ( ( ( "Unexpected " + ( org.anddev.andengine.opengl.util.GLMatrixStacks.MatrixMode.class.getSimpleName () ) ) + ": '" ) + pMatrixMode ) + "'." ) ) ; } } } 
public int getXLocation ( int position, com.edulectronics.tinycircuit.Models.Components.Connectors.ConnectionPointOrientation orientation ) { if ( orientation == Top ) { } else if ( orientation == Bottom ) { return ( ( ( getColumn ( position ) ) - 1 ) * ( cellSize ) ) + ( ( int ) ( 0.5 * ( cellSize ) ) ) ; } else if ( orientation == Left ) { return ( ( getColumn ( position ) ) - 1 ) * ( cellSize ) ; } else { return ( getColumn ( position ) ) * ( cellSize ) ; } } 
protected boolean isFinished () { if ( m_state == ON ) { if ( ( m_terminateWhenEmpty ) && ( m_launcher.isEmpty () ) ) return true; else return false; } else if ( m_state == OFF ) { return true; } else if ( m_state == SINGLE ) { if ( m_launcher.isSingleShotDone () ) return true; else return false; } else if ( m_state == UNJAM ) { return false; } return false; } 
public void execute ( java.lang.String command ) { for ( int i = 0; i < ( command.length () ) ; i++ ) { if ( command.charAt ( i ) == Command.FORWARD ) { } else if ( command.charAt ( i ) == Command.BACKWARD ) { if ( ! ( move ( command.charAt ( i ) ) ) ) { return; } } else if ( command.charAt ( i ) == Command.RIGHT ) { } else if ( command.charAt ( i ) == Command.LEFT ) { rotate ( command.charAt ( i ) ) ; } } } 
private static int whereToGo ( int situation, boolean findUpper ) { if ( situation == 1 ) { if ( findUpper ) return 0; else return 1; } else if ( situation == 2 ) { if ( findUpper ) return 2; else return 0; } else if ( situation == 3 ) { if ( findUpper ) return 2; else return 1; } else { if ( findUpper ) return 1; else return 2; } } 
@ java.lang.Override public void onRequestPermissionsResult ( int requestCode, @android.support.annotation.NonNull java.lang.String[] permissions, @android.support.annotation.NonNull int[] grantResults ) { com.iven.i7helper.util.LocationUtil lu = com.iven.i7helper.util.LocationUtil.getLocationUtil () ; if ( requestCode == 1 ) { if ( ( grantResults.length ) > 0 ) { for ( int i : grantResults ) { if ( i != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { com.iven.i7helper.util.ToolUtil.showMessage ( this, "不给权限会导致记录不准确" ) ; return; } } lu.requestLocation () ; } } else { } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.tvCensusForms ) { android.content.Intent categoryIntent = new android.content.Intent ( this, com.example.knbs.censusapp.CategoryActivity.class ) ; startActivity ( categoryIntent ) ; } else if ( v.getId () == R.id.tvEnumID ) { android.content.Intent enumeratorID = new android.content.Intent ( this, com.example.knbs.censusapp.EnumeratorIDActivity.class ) ; startActivity ( enumeratorID ) ; } else if ( v.getId () == R.id.tvTaskList ) { android.content.Intent taskList = new android.content.Intent ( this, com.example.knbs.censusapp.TaskLIstActivity.class ) ; startActivity ( taskList ) ; } else { android.util.Log.i ( "DEFAULT ONCLICK OPT", "This is default switch mode" ) ; } } 
@ java.lang.Override public boolean onTouch ( android.view.View view, android.view.MotionEvent motionEvent ) { if ( motionEvent.getAction () == android.view.MotionEvent.ACTION_DOWN ) { password.setTransformationMethod ( null ) ; return true; } else if ( motionEvent.getAction () == android.view.MotionEvent.ACTION_UP ) { password.setTransformationMethod ( new android.text.method.PasswordTransformationMethod () ) ; return false; } else { return false; } } 
public void update ( int direction ) { if ( direction == fr.esiea.ga.tetris.client.Model.Piece.DIR_BOTTOM ) { savePrevPosPiece () ; ( xPos ) ++; } else if ( direction == fr.esiea.ga.tetris.client.Model.Piece.DIR_RIGHT ) { savePrevPosPiece () ; ( yPos ) ++; } else if ( direction == fr.esiea.ga.tetris.client.Model.Piece.DIR_LEFT ) { savePrevPosPiece () ; ( yPos ) --; } else if ( direction == fr.esiea.ga.tetris.client.Model.Piece.DIR_TOP ) { savePrevPosPiece () ; rotatePieceLeft () ; } else { } } 
@ java.lang.Override public void onClick ( android.view.View view ) { if ( view.getId () == R.id.previous_button ) { int index = ( questionPager.getCurrentItem () ) - 1; questionPager.setCurrentItem ( ( index >= 0 ? index : ( questionAdapter.getCount () ) - 1 ) ) ; } else if ( view.getId () == R.id.next_button ) { questionPager.setCurrentItem ( ( ( ( questionPager.getCurrentItem () ) + 1 ) % ( questionAdapter.getCount () ) ) ) ; } } 
public void printFac () { if ( type == "integer" ) { java.lang.System.out.print ( value ) ; } else if ( type == "id" ) { java.lang.System.out.print ( id ) ; } else if ( type == "exp" ) { java.lang.System.out.print ( " ( " ) ; exp.printExp () ; java.lang.System.out.print ( " ) " ) ; } } 
protected void onActivityResult ( int requestCode, int resultCode, android.content.Intent data ) { if ( requestCode == net.lorenzobianconi.wwatcher.WWatcher.REQ_ENABLE_BT ) { btEnabled = resultCode == ( RESULT_OK ) ; configureButton ( btEnabled, false ) ; } else if ( requestCode == net.lorenzobianconi.wwatcher.WWatcher.REQ_PICK_DEV ) { if ( data != null ) { java.lang.String addr = data.getExtras () .getString ( "device" ) ; android.bluetooth.BluetoothDevice device = inqMap.get ( addr ) ; new net.lorenzobianconi.wwatcher.WWatcher.BtConnect () .execute ( device ) ; } } else { } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.btn__download_map ) { mDownloadingCountry = mCurrentCountry; com.mapswithme.maps.downloader.MapManager.nativeDownload ( mCurrentCountry.id ) ; } else if ( v.getId () == R.id.btn__select_map ) { getMwmActivity () .replaceFragment ( com.mapswithme.maps.downloader.DownloaderFragment.class, null, null ) ; } else if ( v.getId () == R.id.wpv__download_progress ) { com.mapswithme.maps.downloader.MapManager.nativeCancel ( mDownloadingCountry.id ) ; Statistics.INSTANCE.trackEvent ( Statistics.EventName.DOWNLOADER_CANCEL, com.mapswithme.util.statistics.Statistics.params () .add ( Statistics.EventParam.FROM, "search" ) ) ; } } 
@ java.lang.Override public boolean onCreateOptionsMenu ( android.view.Menu menu ) { if ( ! ( mNavigationDrawerFragment.isDrawerOpen () ) ) { if ( internal_layout == LAYOUT_LIST ) { getMenuInflater () .inflate ( R.menu.main, menu ) ; } else if ( internal_layout == LAYOUT_TRACKING ) { } else if ( internal_layout == LAYOUT_SEARCH ) { } else if ( internal_layout == LAYOUT_ABOUT ) { } else { getMenuInflater () .inflate ( R.menu.main_reduced, menu ) ; } restoreActionBar () ; return true; } return super.onCreateOptionsMenu ( menu ) ; } 
private void checkValue () throws jjcron.polankam.ms.mff.cuni.cz.FormatException { if ( unit.valueType == ASTERISK ) { } else if ( unit.valueType == PERIOD ) { isValueValid ( unit.values.get ( 0 ) ) ; if ( ( ( unit.values.get ( 0 ) ) == 0 ) || ( ( ( maxValue ) % ( unit.values.get ( 0 ) ) ) != 0 ) ) { throw new jjcron.polankam.ms.mff.cuni.cz.FormatException ( "GeneralUnit period value is not divisible" ) ; } } else if ( unit.valueType == LIST ) { for ( java.lang.Integer number : unit.values ) { isValueValid ( number ) ; } } } 
public boolean isSet ( lk.filetributed.client.rpc.services.services.joinRequest_args._Fields field ) { if ( field == null ) { throw new java.lang.IllegalArgumentException () ; } if ( field == IP_ADDRESS ) { return isSetIpAddress () ; } else if ( field == PORT ) { return isSetPort () ; } throw new java.lang.IllegalStateException () ; } 
@ java.lang.Override protected void onActivityResult ( int requestCode, int resultCode, android.content.Intent data ) { super.onActivityResult ( requestCode, resultCode, data ) ; if ( resultCode != ( RESULT_OK ) ) return; if ( requestCode == ya.haojun.roadtoadventure.activity.MainActivity.REQUEST_PROFILE ) { if ( ( data != null ) && ( data.getBooleanExtra ( "logout", false ) ) ) { ya.haojun.roadtoadventure.helper.SPHelper.clearUser ( this ) ; openActivity ( ya.haojun.roadtoadventure.activity.PermissionActivity.class ) ; finish () ; } else { rv_drawer.getAdapter () .notifyItemChanged ( 0 ) ; } } } 
@ java.lang.Override protected void onActivityResult ( int requestCode, int resultCode, android.content.Intent data ) { if ( resultCode == ( RESULT_OK ) ) { io.emqtt.emqandroidtoolkit.model.Connection connection = data.getParcelableExtra ( ConnectionActivity.EXTRA_CONNECTION ) ; if ( null != connection ) { if ( requestCode == io.emqtt.emqandroidtoolkit.ui.activity.MainActivity.REQUEST_ADD ) { mConnectionAdapter.notifyItemInserted ( ( ( mConnectionResults.size () ) - 1 ) ) ; } else if ( requestCode == io.emqtt.emqandroidtoolkit.ui.activity.MainActivity.REQUEST_EDIT ) { mConnectionAdapter.notifyItemChanged ( mPosition ) ; } else { } } } } 
public void cleanUp () { if ( templateSelection == SPECIFIC_VALUE ) { single_value = null; } else if ( templateSelection == VALUE_LIST ) { } else if ( templateSelection == COMPLEMENTED_LIST ) { value_list.clear () ; value_list = null; } else if ( templateSelection == VALUE_RANGE ) { min_value = null; max_value = null; } else { } templateSelection = template_sel.UNINITIALIZED_TEMPLATE; } 
private void save ( T value ) { if ( storageType == LOCAL ) { net.wbz.moba.controlcenter.web.client.LocalStorage.getInstance () .set ( getConfigKey () , convertValueToString ( value ) ) ; setValue ( value ) ; } else if ( storageType == REMOTE ) { net.wbz.moba.controlcenter.web.client.ServiceUtils.getConfigService () .saveValue ( getConfigKey () , convertValueToString ( value ) , new net.wbz.moba.controlcenter.web.client.util.EmptyCallback<java.lang.Void> () ) ; } } 
@ java.lang.Override public void onClick ( android.view.View view ) { if ( view.getId () == R.id.btn_start ) { startLevel ( 0 ) ; } else if ( view.getId () == R.id.btn_level_easy ) { startLevel ( 1 ) ; } else if ( view.getId () == R.id.btn_level_medium ) { startLevel ( 2 ) ; } else if ( view.getId () == R.id.btn_level_difficult ) { startLevel ( 3 ) ; } } 
public int base2int ( char base ) { int intVal = -1; if ( base == 'A' ) { intVal = 0; } else if ( base == 'C' ) { intVal = 1; } else if ( base == 'G' ) { intVal = 2; } else if ( base == 'T' ) { intVal = 3; } else if ( base == 'N' ) { intVal = 4; } else { throw new java.lang.IllegalArgumentException ( ( "Invalid character: " + base ) ) ; } return intVal; } 
public static com.tealcubegames.minecraft.spigot.versions.api.actionbars.ActionBarMessage createActionBarMessage ( java.lang.String message ) { java.lang.String serverPackageName = org.bukkit.Bukkit.getServer () .getClass () .getPackage () .getName () ; java.lang.String nmsVersion = serverPackageName.substring ( ( ( serverPackageName.lastIndexOf ( "." ) ) + 1 ) ) ; if ( nmsVersion == "v1_10_R1" ) { return new com.tealcubegames.minecraft.spigot.versions.actionbars.ActionBarMessageImpl ( message ) ; } else { throw new org.apache.commons.lang3.NotImplementedException ( ( nmsVersion + " is not supported" ) ) ; } } 
private static java.lang.String parseFile ( java.lang.String data, ConfigFileFormat configFileFormat ) { java.lang.String convertedConfig = ""; if ( configFileFormat == XML ) { convertedConfig = data; } else if ( configFileFormat == YML ) { convertedConfig = ConfigUtil2.parseYML ( data ) ; } else if ( configFileFormat == PROPERTIES ) { convertedConfig = ConfigUtil2.parseProperties ( data ) ; } else { } return convertedConfig; } 
@ java.lang.Override public void handleMessage ( android.os.Message message ) { if ( ( message.arg2 ) == 1 ) { if ( message.arg1 == 1 ) { thread1JobDone = true; } else if ( message.arg1 == 2 ) { thread2JobDone = true; } else if ( message.arg1 == 3 ) { thread3JobDone = true; } if ( ( ( thread1JobDone ) && ( thread2JobDone ) ) && ( thread3JobDone ) ) { themeAll.sortIndex () ; } adapterAll.notifyDataSetChanged () ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item.getItemId () ; if ( id == android.R.id.home ) { android.util.Log.d ( "hi", android.support.v4.app.NavUtils.getParentActivityName ( this ) ) ; android.support.v4.app.NavUtils.navigateUpFromSameTask ( this ) ; return true; } else if ( id == R.id.action_settings ) { return true; } return super.onOptionsItemSelected ( item ) ; } 
@ java.lang.Override public void onSharedPreferenceChanged ( android.content.SharedPreferences sharedPreferences, java.lang.String key ) { if ( key == com.feresr.rxweather.UI.SettingsActivity.PREF_UNIT ) { if ( sharedPreferences.getString ( key, "celsius" ) .equals ( "celsius" ) ) { citiesView.showTemperatureInCelsius () ; } else { citiesView.showTemperatureInFahrenheit () ; } } else if ( key == com.feresr.rxweather.UI.SettingsActivity.GRIDVIEW ) { if ( sharedPreferences.getBoolean ( key, false ) ) { citiesView.setSetColumns ( 2 ) ; } else { citiesView.setSetColumns ( 1 ) ; } } } 
@ java.lang.Override public void onClick ( android.content.DialogInterface dialog, int which ) { if ( ( mCallback ) == null ) { android.util.Log.e ( net.exclaimindustries.geohashdroid.fragments.MapTypeDialogFragment.DEBUG_TAG, "There's no callback set!" ) ; return; } dialog.dismiss () ; if ( which == 0 ) { mCallback.mapTypeSelected ( GoogleMap.MAP_TYPE_NORMAL ) ; } else if ( which == 1 ) { mCallback.mapTypeSelected ( net.exclaimindustries.geohashdroid.fragments.MapTypeDialogFragment.MAP_STYLE_NIGHT ) ; } else if ( which == 2 ) { mCallback.mapTypeSelected ( GoogleMap.MAP_TYPE_HYBRID ) ; } else if ( which == 3 ) { mCallback.mapTypeSelected ( GoogleMap.MAP_TYPE_TERRAIN ) ; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return chatFragment; } else if ( position == 1 ) { if ( ( contactsFragment ) != null ) { return contactsFragment; } return contactsFragment = new com.superchat.ui.ContactsScreen () ; } else if ( position == 2 ) { return publicGroupFragment; } else if ( position == 3 ) { return bulletinFragment; } else { return new com.superchat.ui.TempFragment () ; } } 
public ShiftInDay getShift ( Shift shift ) { if ( shift.getName () == "Early Morning Shift" ) { return earlyMorningShift; } else if ( shift.getName () == "Morning Shift" ) { return morningShift; } else if ( shift.getName () == "Late Morning Shift" ) { return lateMorningShift; } else if ( shift.getName () == "Surgery Shift" ) { return surgeryShift; } else if ( shift.getName () == "Overnight Shift" ) { return overnightShift; } else if ( shift.getName () == "Sunday Shift" ) { return sundayShift; } else { java.lang.System.out.println ( "Not a valid shift" ) ; } return null; } 
private void setXYDisplacements () { if ( angleStr == org.esa.s1tbx.fex.gpf.texture.GLCMOp.ANGLE_0 ) { displacementX = displacement; displacementY = 0; } else if ( angleStr == org.esa.s1tbx.fex.gpf.texture.GLCMOp.ANGLE_45 ) { displacementX = - ( displacement ) ; displacementY = displacement; } else if ( angleStr == org.esa.s1tbx.fex.gpf.texture.GLCMOp.ANGLE_90 ) { displacementX = 0; displacementY = displacement; } else if ( angleStr == org.esa.s1tbx.fex.gpf.texture.GLCMOp.ANGLE_135 ) { displacementX = displacement; displacementY = displacement; } else if ( angleStr == org.esa.s1tbx.fex.gpf.texture.GLCMOp.ANGLE_ALL ) { computeGLCPWithAllAngles = true; } else { throw new org.esa.snap.core.gpf.OperatorException ( ( "Unknown angle: " + ( angleStr ) ) ) ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( final android.view.MenuItem item ) { if ( item.getItemId () == R.id.variantIos ) { com.vanniktech.emoji.EmojiManager.install ( new com.vanniktech.emoji.ios.IosEmojiProvider () ) ; recreate () ; return true; } else if ( item.getItemId () == R.id.variantEmojiOne ) { com.vanniktech.emoji.EmojiManager.install ( new com.vanniktech.emoji.one.EmojiOneProvider () ) ; recreate () ; return true; } else { return super.onOptionsItemSelected ( item ) ; } } 
private void handlePortState () { if ( portState == CLOSED ) { if ( open () ) { portState = org.openhab.binding.dsmr.internal.DSMRPort.PortState.AUTO_DETECT; autoDetectTS = java.lang.System.currentTimeMillis () ; } } else if ( portState == AUTO_DETECT ) { if ( ( ( java.lang.System.currentTimeMillis () ) - ( autoDetectTS ) ) > ( autoDetectTimeoutMSec ) ) { switchPortSpeed () ; close () ; if ( open () ) { portState = org.openhab.binding.dsmr.internal.DSMRPort.PortState.AUTO_DETECT; autoDetectTS = java.lang.System.currentTimeMillis () ; } } } else if ( portState == OPENED ) { } } 
@ java.lang.Override public void onClick ( android.view.View v ) { java.lang.String username = ( ( android.widget.EditText ) ( findViewById ( R.id.username ) ) ) .getText () .toString () ; android.content.Intent mIntent; if ( v.getId () == R.id.loginButton ) { mIntent = new android.content.Intent ( this, com.myos.myos.Salon.class ) ; mIntent.putExtra ( "username", username ) ; startActivity ( mIntent ) ; } else if ( v.getId () == R.id.signupButton ) { } else { } } 
@ java.lang.Override public void handleMessage ( android.os.Message msg ) { if ( msg.what == com.kame.tafhd.MainActivity.TEST_MSG ) { new com.kame.tafhd.Publisher () .publish ( ( ( java.lang.String ) ( msg.obj ) ) ) ; } else if ( msg.what == com.kame.tafhd.MainActivity.UNRELEVANT_MSG ) { new com.kame.tafhd.Publisher () .publish ( "I am in the unrelevent parts." ) ; } else if ( msg.what == com.kame.tafhd.MainActivity.ANOTHER ) { new com.kame.tafhd.Publisher () .publish ( ( ( java.lang.String ) ( msg.obj ) ) ) ; } else { } } 
public static com.neikeq.kicksemu.game.inventory.Expiration fromInt ( int value ) { if ( value == 9200007 ) { } else if ( value == 9201007 ) { return com.neikeq.kicksemu.game.inventory.Expiration.DAYS_7; } else if ( value == 9200030 ) { } else if ( value == 9201030 ) { return com.neikeq.kicksemu.game.inventory.Expiration.DAYS_30; } else if ( value == 9200999 ) { } else if ( value == 9201999 ) { return com.neikeq.kicksemu.game.inventory.Expiration.DAYS_PERM; } else if ( value == 9101010 ) { return com.neikeq.kicksemu.game.inventory.Expiration.USAGE_10; } else if ( value == 9101050 ) { return com.neikeq.kicksemu.game.inventory.Expiration.USAGE_50; } else if ( value == 9101100 ) { return com.neikeq.kicksemu.game.inventory.Expiration.USAGE_100; } else { return null; } } 
public void itemStateChanged ( java.awt.event.ItemEvent ie ) { if ( ie.getStateChange () == 1 ) { emailInputField.setEnabled ( true ) ; useEmail = true; } else if ( ie.getStateChange () == 2 ) { emailInputField.setEnabled ( false ) ; useEmail = false; } else { } } 
@ java.lang.Override public com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH onCreateViewHolder ( android.view.ViewGroup parent, int viewType ) { int layout = 0; if ( viewType == VIEW_TYPE_HEADER ) { layout = R.layout.item_persoanl_project_header; } else if ( viewType == VIEW_TYPE_ITEM ) { layout = R.layout.item_personal_project; } else { } android.view.View v = android.view.LayoutInflater.from ( parent.getContext () ) .inflate ( layout, parent, false ) ; return new com.ckt.ckttodo.ui.ProjectActivity.ProjectAdapter.MainVH ( v, this ) ; } 
private void setPlayerHandOffset ( int player, int offset ) { if ( player == 0 ) { this.player0HandOffset = offset; } else if ( player == 1 ) { this.player1HandOffset = offset; } else if ( player == 2 ) { this.player2HandOffset = offset; } else if ( player == 3 ) { this.player3HandOffset = offset; } } 
@ java.lang.Override protected void layoutSingularComponent ( com.vaadin.ui.Component component ) { if ( getPacking () == EXPAND ) { layoutComponent ( component, "100%", 1, Alignment.MIDDLE_RIGHT ) ; } else if ( getPacking () == SPACE_AFTER ) { layoutComponent ( component, null, 0, Alignment.TOP_RIGHT ) ; } else if ( getPacking () == SPACE_BEFORE ) { layoutComponent ( component, null, 0, Alignment.BOTTOM_RIGHT ) ; } else if ( getPacking () == SPACE_AROUND ) { layoutComponent ( component, null, 0, Alignment.MIDDLE_RIGHT ) ; } } 
public int scoreBoard () { if ( game.max == "W" ) { score = ( scoreWhite () ) - ( scoreBlack () ) ; } else if ( game.max == "B" ) { score = ( scoreBlack () ) - ( scoreWhite () ) ; } else { } return score; } 
@ java.lang.Override public void onPageSelected ( int position ) { if ( position == 0 ) { findViewById ( R.id.gameRelativeLayout ) .setVisibility ( View.VISIBLE ) ; mSetGridView.setVisibility ( View.INVISIBLE ) ; } else if ( position == 1 ) { findViewById ( R.id.gameRelativeLayout ) .setVisibility ( View.INVISIBLE ) ; mSetGridView.setVisibility ( View.VISIBLE ) ; populateSetGridView () ; } } 
public void turnon () { if ( currentState == SWITCHINGOFF ) { } else if ( currentState == OFF ) { setState ( hu.mta.sztaki.lpds.cloud.simulator.iaas.PhysicalMachine.State.SWITCHINGON ) ; if ( ( onOffEvent ) == null ) { new hu.mta.sztaki.lpds.cloud.simulator.iaas.PhysicalMachine.PowerStateDelayer ( onTransition, hu.mta.sztaki.lpds.cloud.simulator.iaas.PhysicalMachine.State.RUNNING ) ; } else { onOffEvent.addFurtherTasks ( onTransition ) ; onOffEvent.setNewState ( hu.mta.sztaki.lpds.cloud.simulator.iaas.PhysicalMachine.State.RUNNING ) ; } } else if ( currentState == RUNNING ) { } else if ( currentState == SWITCHINGON ) { java.lang.System.err.println ( "WARNING: an already running PM was tasked to switch on!" ) ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.btGallerySingleImage ) { pickImageSingle () ; } else if ( v.getId () == R.id.btGalleryMultipleImages ) { pickImageMultiple () ; } else if ( v.getId () == R.id.btCameraImage ) { takePicture () ; } else if ( v.getId () == R.id.btCameraImageCrop ) { takePictureAndCrop () ; } else if ( v.getId () == R.id.btGallerySingleImageCrop ) { pickImageSingleAndCrop () ; } } 
@ java.lang.Override public com.windowsazure.messaging.NotificationPlatform convertTo ( com.bosch.cn.dad.notificationhub.model.DeviceType srcDeviceType, com.windowsazure.messaging.NotificationPlatform destPlatform ) { if ( srcDeviceType == null ) { return null; } if ( srcDeviceType == WindowsNotification ) { destPlatform = com.windowsazure.messaging.NotificationPlatform.Wns; } else if ( srcDeviceType == WindowsPhoneNotification ) { destPlatform = com.windowsazure.messaging.NotificationPlatform.Mpns; } else if ( srcDeviceType == AppleNotification ) { destPlatform = com.windowsazure.messaging.NotificationPlatform.Apns; } else if ( srcDeviceType == BaiduNotification ) { destPlatform = com.windowsazure.messaging.NotificationPlatform.Gcm; } else if ( srcDeviceType == GoogleCloudMessaging ) { destPlatform = com.windowsazure.messaging.NotificationPlatform.Gcm; } else if ( srcDeviceType == AmazonDeviceMessaging ) { destPlatform = com.windowsazure.messaging.NotificationPlatform.Adm; } return destPlatform; } 
public void editClass ( android.view.View view ) { java.util.List<android.widget.CheckBox> selectedClasses = projectManager.getCheckedCheckBoxes () ; if ( selectedClasses.size () == 0 ) { } else if ( selectedClasses.size () == 1 ) { { editSingleClass ( selectedClasses ) ; break; } } else { { } } } 
private static int argument ( char[] array, int cursor, java.lang.StringBuilder argument ) { for ( int i = cursor; i < ( array.length ) ; i++ ) { char c = array[i]; if ( c == ',' ) { } else if ( c == ' ) ' ) { return i + 1; } else if ( c == ' ' ) { if ( ( argument.length () ) == 0 ) continue; } else { argument.append ( c ) ; } } return array.length; } 
@ java.lang.Override protected void keyDown ( int eventKey, char ch, boolean shift, boolean ctrl, boolean alt, boolean special ) throws java.lang.Exception { if ( ch == 'm' ) { org.lwjgl.input.Mouse.setGrabbed ( ( ! ( org.lwjgl.input.Mouse.isGrabbed () ) ) ) ; } else { } } 
@ java.lang.Override public boolean onTouch ( android.view.View v, android.view.MotionEvent event ) { if ( event.getAction () == android.view.MotionEvent.ACTION_DOWN ) { } else if ( event.getAction () == android.view.MotionEvent.ACTION_UP ) { android.widget.ImageView imageView = ( ( android.widget.ImageView ) ( v ) ) ; addAccessory ( ( ( java.lang.String ) ( imageView.getTag () ) ) ) ; dragBool = false; } return true; } 
@ java.lang.Override public void startElement ( java.lang.String uri, java.lang.String localName, java.lang.String qName, org.xml.sax.Attributes attributes ) throws org.xml.sax.SAXException { if ( qName == "roboUnit" ) { currentId = attributes.getValue ( "id" ) ; } else if ( qName == com.robo4j.core.configuration.XmlConfigurationFactory.ELEMENT_CONFIG ) { if ( ! ( configState ) ) { currentConfiguration = ""; configState = true; break; } } lastElement = qName; if ( configState ) { currentConfiguration += java.lang.String.format ( "<%s %s>", qName, toString ( attributes ) ) ; } } 
public void onSectionAttached ( int number ) { if ( number == 1 ) { android.content.Intent profile = new android.content.Intent ( this, com.example.navigationdrawer.Accueil.class ) ; startActivity ( profile ) ; } else if ( number == 2 ) { mTitle = getString ( R.string.title_activity_google ) ; } else if ( number == 3 ) { android.content.Intent home = new android.content.Intent ( this, com.example.navigationdrawer.Rapports.class ) ; startActivity ( home ) ; } } 
public int getYLocation ( int position, com.edulectronics.tinycircuit.Models.Components.Connectors.ConnectionPointOrientation orientation ) { if ( orientation == Left ) { } else if ( orientation == Right ) { return ( ( ( getRow ( position ) ) - 1 ) * ( cellSize ) ) + ( ( int ) ( 0.5 * ( cellSize ) ) ) ; } else if ( orientation == Top ) { return ( ( getRow ( position ) ) - 1 ) * ( cellSize ) ; } else { return ( getRow ( position ) ) * ( cellSize ) ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.card_overview ) { if ( toggleSceneButtons ) goToSceneOverView ( v, true ) ; } else if ( v.getId () == R.id.card_ingredients ) { if ( toggleSceneButtons ) goToSceneIngredients ( v ) ; } else if ( v.getId () == R.id.card_directions ) { if ( toggleSceneButtons ) goToSceneDirections ( v ) ; } else if ( v.getId () == R.id.card_images ) { if ( toggleSceneButtons ) { goToSceneComments ( v ) ; } } } 
private java.lang.String giveRelevantError () { if ( this.wantedVariable == "Angular Velocity" ) { return "To calculate Angular Velocity, you need either of these sets of measurements: Angle and Time <p>Linear Velocity and Radius <p>Arc Length, Angle, and Linear Velocity <p>Time, Radius, and Arc Length</p></p></p></p>"; } else if ( this.wantedVariable == "Linear Velocity" ) { return "To calculate Linear Velocity, you need either of these sets of measurements: <p>Arc Length and Time <p>Angular Velocity and Radius <p>Arc Length, Angle, and Angular Velocity <p>Time, Radius, and Angle</p></p></p></p>"; } else if ( this.wantedVariable == "Radius" ) { return "To calculate Radius, you need either of these sets of measurements: <p>Linear Velocity and Angular Velocity <p>Arc Length and Angle <p>Arc Length, Time, and Angular Velocity <p>Time, Angle, and Linear Velocity</p></p></p></p>"; } else if ( this.wantedVariable == "Time" ) { return "To calculate Time, you need either of these sets of measurements: <p>Angular Velocity and Angle <p>Linear Velocity and Arc Length <p>Radius, Angle, and Linear Velocity <p>Angular Velocity, Radius, and Arc Length</p></p></p></p>"; } else if ( this.wantedVariable == "Arc Length" ) { return "To calculate Arc Length you need either of these sets of measurements: <p>Time and Linear Velocity <p>Angle and Radius <p>Radius, Time, and Angular Velocity <p>Angular Velocity, Angle, and Angular Velocity</p></p></p></p>"; } else if ( this.wantedVariable == "Angle" ) { return "To calculate Angle, you need either of these sets of measurements: <p>Angular Velocity and Time <p>Radius and Arc Length <p>Arc Length, Angular Velocity, and Linear Velocity <p>Time, Radius, and Linear Velocity</p></p></p></p>"; } return ""; } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.manual ) { } else if ( v.getId () == R.id.parking ) { } else if ( v.getId () == R.id.auto ) { android.content.Intent changeToCamera = new android.content.Intent ( getApplicationContext () , pegasus.bluetootharduino.CameraActivity.class ) ; startActivity ( changeToCamera ) ; } else if ( v.getId () == R.id.advanced ) { android.content.Intent changeToSettings = new android.content.Intent ( getApplicationContext () , pegasus.bluetootharduino.AdvSettingsActivity.class ) ; startActivity ( changeToSettings ) ; } } 
public static void releaseColor ( int color, int which ) { if ( which == com.kmbapps.classscheduler.ClassLoader.DESIRED_CLASSES ) { if ( ! ( com.kmbapps.classscheduler.ClassLoader.availableColors.contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.availableColors.push ( color ) ; } } else if ( which == com.kmbapps.classscheduler.ClassLoader.CURR_SCHEDULE ) { if ( ! ( com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors.contains ( color ) ) ) { com.kmbapps.classscheduler.ClassLoader.currScheduleAvailableColors.push ( color ) ; } } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.action_home ) { android.content.Intent homeIntentVE = new android.content.Intent ( this, com.easysplit.mainview.MainActivity.class ) ; startActivity ( homeIntentVE ) ; return true; } else if ( item.getItemId () == R.id.action_logout ) { android.content.Intent logoutIntentVEx = new android.content.Intent ( this, com.easysplit.mainview.UserLogin.class ) ; startActivity ( logoutIntentVEx ) ; return true; } else { return super.onOptionsItemSelected ( item ) ; } } 
protected void onActivityResult ( int requestCode, int resultCode, android.content.Intent data ) { super.onActivityResult ( requestCode, resultCode, data ) ; if ( requestCode == 1 ) { if ( resultCode == ( android.app.Activity.RESULT_OK ) ) { int switchNum = data.getIntExtra ( com.example.scanitgrocerystorehelper.MainActivity.DELETE_SWITCH, 0 ) ; if ( switchNum != 0 ) { long newNum = data.getLongExtra ( com.example.scanitgrocerystorehelper.MainActivity.KEY_LIST_ID, 0 ) ; if ( newNum != 0 ) deleteList ( mSqlAdapter.getList ( newNum ) ) ; } } } } 
public int getStats ( java.lang.String route, int stat ) { int output = 0; if ( route == "conquest" ) { { output = conquest[stat]; break; } } else if ( route == "birthright" ) { { output = birthright[stat]; break; } } else if ( route == "revelations" ) { { output = revelations[stat]; break; } } return output; } 
@ java.lang.Override public void onItemClick ( int viewId, int position ) { if ( viewId == R.id.task_card_text_open ) { if ( position >= 0 ) { mTaskRecyclerAdapter.getItems () .remove ( position ) ; mTaskRecyclerAdapter.notifyItemRemoved ( position ) ; } } else if ( viewId == R.id.task_card_text ) { mTaskRecyclerAdapter.getItems () .set ( position, new com.org.runaway.sharetodo.data.TaskState.AssignedTaskState () ) ; mTaskRecyclerAdapter.notifyItemChanged ( position ) ; } else { } } 
@ java.lang.Override public void onBindViewHolder ( org.creativecommons.thelist.adapters.FeedAdapter.FeedViewholder holder, int position ) { org.creativecommons.thelist.adapters.MainListItem l = listItems.get ( position ) ; holder.itemView.setVisibility ( View.VISIBLE ) ; holder.nameLabel.setText ( l.getItemName () ) ; holder.makerLabel.setText ( ( "requested by " + ( l.getMakerName () ) ) ) ; if ( getItemViewType ( position ) == org.creativecommons.thelist.adapters.FeedAdapter.ERROR_VIEW ) { holder.iconImageView.setImageResource ( R.drawable.ic_error_red_24dp ) ; } else if ( getItemViewType ( position ) == org.creativecommons.thelist.adapters.FeedAdapter.DEFAULT_VIEW ) { holder.iconImageView.setImageResource ( R.drawable.ic_camera_alt_grey600_24dp ) ; } holder.itemView.setTag ( l ) ; } 
@ java.lang.Override protected void onActivityResult ( int requestCode, int resultCode, android.content.Intent imageReturnedIntent ) { super.onActivityResult ( requestCode, resultCode, imageReturnedIntent ) ; if ( requestCode == SELECT_PHOTO ) { if ( resultCode == ( RESULT_OK ) ) { final android.net.Uri imageUri = imageReturnedIntent.getData () ; mImageFilePath = com.amansoni.tripbook.util.ImageWrapper.getRealPathFromURI ( this, imageUri ) ; com.amansoni.tripbook.util.ImageWrapper.loadImageFromFile ( this, mMainImage, mImageFilePath, 400 ) ; if ( ( mTripbookItem ) != null ) { mTripbookItem.setThumbnail ( mImageFilePath ) ; } } } } 
@ java.lang.Override public java.lang.String getIsoDate ( org.hisp.dhis.calendar.DateTimeUnit dateTimeUnit, org.hisp.dhis.calendar.Calendar calendar ) { int month = dateTimeUnit.getMonth () ; if ( month == 11 ) { return ( dateTimeUnit.getYear () ) + "NovS1"; } else if ( month == 5 ) { return ( dateTimeUnit.getYear () ) + "NovS2"; } else { throw new java.lang.IllegalArgumentException ( ( "Month not valid [11,5] " + month ) ) ; } } 
public boolean isValidMove ( java.lang.String direction ) { if ( direction.toLowerCase () == "n" ) { return ( this.emptySpaceLocation.getX () ) > 0; } else if ( direction.toLowerCase () == "e" ) { return ( this.emptySpaceLocation.getY () ) < 2; } else if ( direction.toLowerCase () == "s" ) { return ( this.emptySpaceLocation.getX () ) < 2; } else if ( direction.toLowerCase () == "w" ) { return ( this.emptySpaceLocation.getY () ) > 0; } else { return false; } } 
private void reloadAll () { if ( selectedNav == ZConstants.NAV_DASHBOARD ) { execDashboard () ; } else if ( selectedNav == ZConstants.NAV_ALL_BOOKS ) { execAllBooks () ; } else if ( selectedNav == ZConstants.NAV_READ_BOOK ) { } else if ( selectedNav == ZConstants.NAV_DISCOVER_BOOK ) { } else if ( selectedNav == ZConstants.NAV_FAVORITES ) { execFavorite () ; } } 
private java.lang.String convertToTableName ( android.net.Uri uri ) { int i = com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) ; if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.POI_TABLE ) { } else if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.POI_ROW ) { } else if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.SEARCH_SUGGESTIONS ) { return com.ywca.pentref.models.Poi.TABLE_NAME; } else if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.CATEGORY_TABLE ) { } else if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.CATEGORY_ROW ) { return Contract.Category.TABLE_NAME; } else if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.BOOKMARK_TABLE ) { } else if ( com.ywca.pentref.common.PentrefProvider.mUriMatcher.match ( uri ) == com.ywca.pentref.common.PentrefProvider.BOOKMARK_ROW ) { return Contract.Bookmark.TABLE_NAME; } else { throw new java.lang.IllegalArgumentException ( ( "Illegal uri: " + uri ) ) ; } } 
@ java.lang.Override public void onResponse ( retrofit2.Call<io.caly.calyandroid.model.response.BasicResponse> call, retrofit2.Response<io.caly.calyandroid.model.response.BasicResponse> response ) { io.caly.calyandroid.util.Logger.d ( io.caly.calyandroid.activity.TAG, ( "onResponse code : " + ( response.code () ) ) ) ; io.caly.calyandroid.util.Logger.d ( io.caly.calyandroid.activity.TAG, ( "param" + ( io.caly.calyandroid.util.Util.requestBodyToString ( call.request () .body () ) ) ) ) ; if ( response.code () == 200 ) { } else { com.crashlytics.android.Crashlytics.logException ( new io.caly.calyandroid.exception.UnExpectedHttpStatusException ( call, response ) ) ; } } 
private static void menuOptions () throws java.io.IOException { java.lang.String entry = io.File_IO.in.nextLine () ; if ( entry == "1" ) { io.File_IO.viewAllContacts () ; } else if ( entry == "2" ) { io.File_IO.addContact () ; } else if ( entry == "3" ) { io.File_IO.viewContact () ; } else if ( entry == "4" ) { io.File_IO.deleteContact () ; } else if ( entry == "5" ) { io.File_IO.exitProgram () ; } else { io.File_IO.exitProgram () ; } } 
@ java.lang.Override public void updateAI ( float tpf ) { this.timePerFrame = tpf; calculateNewVelocity ( tpf ) ; velocity.multLocal ( this.brakingFactor ) ; if ( agent.getApplyType () == Spatial ) { agent.setWorldTranslation ( agent.getPredictedPosition ( tpf ) ) ; rotateAgent ( tpf ) ; } else if ( agent.getApplyType () == BetterCharacterControl ) { } else if ( agent.getApplyType () == RigidBody ) { throw new java.lang.RuntimeException ( ( ( "The ApplyType " + ( agent.getApplyType () ) ) + " isn't supported yet, sorry." ) ) ; } else if ( agent.getApplyType () == DontApply ) { } } 
@ java.lang.Override protected int intSpeed ( float fSpeed ) { int speed = super.intSpeed ( fSpeed ) ; if ( speed <= 1 ) { return speed; } if ( this.getSpeedStepMode () == jmri.DccThrottle.SpeedStepMode28 ) { } else if ( this.getSpeedStepMode () == jmri.DccThrottle.SpeedStepMode28Mot ) { return ( ( int ) ( ( fSpeed * 28 ) * 4 ) ) + 12; } else if ( this.getSpeedStepMode () == jmri.DccThrottle.SpeedStepMode14 ) { return ( ( int ) ( ( fSpeed * 14 ) * 8 ) ) + 8; } return speed; } 
private static int getResIdByStatus ( com.ogp.hotspotincar.WatchdogService.ActuatorState actuatorState ) { if ( ( com.ogp.hotspotincar.WatchdogService.ActuatorState.UNCHANGED ) == actuatorState ) { actuatorState = com.ogp.hotspotincar.HotspotWidget.storedState; } else { com.ogp.hotspotincar.HotspotWidget.storedState = actuatorState; } if ( actuatorState == ACTUATED ) { return R.drawable.connected; } else if ( actuatorState == NOT_ACTUATED ) { return R.drawable.disconnected; } else { return R.drawable.disabled; } } 
@ java.lang.Override public boolean onNavigationItemSelected ( @android.support.annotation.NonNull android.view.MenuItem item ) { if ( item.getItemId () == R.id.nav_search ) { mDrawerLayout.closeDrawers () ; return true; } else if ( item.getItemId () == R.id.nav_saved_search_results ) { mDrawerLayout.closeDrawers () ; android.content.Intent savedResultsIntent = new android.content.Intent ( this, com.example.android.vigi.SavedSearchResultsActivity.class ) ; startActivity ( savedResultsIntent ) ; return true; } else { return false; } } 
@ java.lang.Override public boolean shouldTraverse ( com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent ) { if ( n.getType () == com.google.javascript.rhino.Token.YIELD ) { visitYieldExpression ( n ) ; } else if ( n.getType () == com.google.javascript.rhino.Token.DO ) { } else if ( n.getType () == com.google.javascript.rhino.Token.FOR ) { } else if ( n.getType () == com.google.javascript.rhino.Token.WHILE ) { visitLoop ( n ) ; } else if ( n.getType () == com.google.javascript.rhino.Token.CASE ) { if ( controlCanExit ( n.getFirstChild () ) ) { compiler.report ( com.google.javascript.jscomp.JSError.make ( n, Es6ToEs3Converter.CANNOT_CONVERT_YET, "Case statements that contain yields" ) ) ; return false; } } return true; } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return com.example.gil.myweather.weather.control.WeatherFragment.newInstance ( 1 ) ; } else if ( position == 1 ) { return com.example.gil.myweather.weather.control.WeatherFragment.newInstance ( 2 ) ; } else if ( position == 2 ) { return com.example.gil.myweather.weather.ui.WeatherListFragment.newInstance ( 10 ) ; } else { return com.example.gil.myweather.weather.control.WeatherFragment.newInstance ( 1 ) ; } } 
@ java.lang.Override public void setLanguage ( com.pratilipi.common.type.Language language ) { if ( language == null ) languageId = null; if ( language == HINDI ) { languageId = 5130467284090880L; } else if ( language == GUJARATI ) { languageId = 5965057007550464L; } else if ( language == TAMIL ) { languageId = 6319546696728576L; } else if ( language == MARATHI ) { languageId = 5173513199550464L; } else if ( language == MALAYALAM ) { languageId = 5752669171875840L; } else if ( language == BENGALI ) { languageId = 6235363433512960L; } else if ( language == ENGLISH ) { languageId = 6213615354904576L; } this.language = language; } 
public org.apache.cassandra.db.RowIndexEntry<org.apache.cassandra.io.sstable.IndexInfo> deserializeForCache ( org.apache.cassandra.io.util.DataInputPlus in ) throws java.io.IOException { assert version.storeRows () ; long position = in.readUnsignedVInt () ; if ( in.readByte () == org.apache.cassandra.db.RowIndexEntry.CACHE_NOT_INDEXED ) { return new org.apache.cassandra.db.RowIndexEntry<> ( position ) ; } else if ( in.readByte () == org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED ) { return new org.apache.cassandra.db.RowIndexEntry.IndexedEntry ( position, in, idxInfoSerializer, version ) ; } else if ( in.readByte () == org.apache.cassandra.db.RowIndexEntry.CACHE_INDEXED_SHALLOW ) { return new org.apache.cassandra.db.RowIndexEntry.ShallowIndexedEntry ( position, in, idxInfoSerializer ) ; } else { throw new java.lang.AssertionError () ; } } 
public int getValue ( gameplay.Card card ) { int s = card.getSuit () ; int val; if ( s == 0 ) { val = this.spades.indexOf ( card ) ; } else if ( s == 1 ) { val = this.hearts.indexOf ( card ) ; } else if ( s == 2 ) { val = this.clubs.indexOf ( card ) ; } else if ( s == 3 ) { val = this.diamonds.indexOf ( card ) ; } else { val = 0; } return val; } 
private java.lang.String buildSortOrder ( com.chd.MediaMgr.utils.MediaFileUtil.SortMethod sort ) { if ( sort == null ) return null; java.lang.String sortOrder = null; if ( sort == name ) { sortOrder = ( MediaStore.Files.FileColumns.TITLE ) + " asc"; } else if ( sort == size ) { sortOrder = ( MediaStore.Files.FileColumns.SIZE ) + " asc"; } else if ( sort == date ) { sortOrder = ( MediaStore.Files.FileColumns.DATE_MODIFIED ) + " desc"; } else if ( sort == type ) { sortOrder = ( ( ( MediaStore.Files.FileColumns.MIME_TYPE ) + " asc, " ) + ( MediaStore.Files.FileColumns.TITLE ) ) + " asc"; } return sortOrder; } 
private int getBillWorth ( int itemDamage, int stackSize ) { int cash = 0; if ( itemDamage == 0 ) { cash = 1; } else if ( itemDamage == 1 ) { cash = 5; } else if ( itemDamage == 2 ) { cash = 10; } else if ( itemDamage == 3 ) { cash = 20; } else if ( itemDamage == 4 ) { cash = 50; } else if ( itemDamage == 5 ) { cash = 100; } return cash * stackSize; } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == org.stendardo.bsak.qiblih.CompassActivity.EDIT_ID ) { startActivity ( new android.content.Intent ( this, org.stendardo.bsak.qiblih.QiblihPreferences.class ) ) ; return true; } else if ( item.getItemId () == org.stendardo.bsak.qiblih.CompassActivity.README_ID ) { startActivity ( new android.content.Intent ( this, org.stendardo.bsak.qiblih.ReadmeActivity.class ) ) ; return true; } else if ( item.getItemId () == org.stendardo.bsak.qiblih.CompassActivity.LICENSE_ID ) { startActivity ( new android.content.Intent ( this, org.stendardo.bsak.qiblih.LicenseActivity.class ) ) ; return true; } return super.onOptionsItemSelected ( item ) ; } 
private static org.yamj.core.database.model.type.JobType retrieveJobType ( java.lang.String department ) { if ( department.toLowerCase () == "writing" ) { return org.yamj.core.database.model.type.JobType.WRITER; } else if ( department.toLowerCase () == "directing" ) { return org.yamj.core.database.model.type.JobType.DIRECTOR; } else if ( department.toLowerCase () == "production" ) { return org.yamj.core.database.model.type.JobType.PRODUCER; } else if ( department.toLowerCase () == "sound" ) { return org.yamj.core.database.model.type.JobType.SOUND; } else if ( department.toLowerCase () == "camera" ) { return org.yamj.core.database.model.type.JobType.CAMERA; } else if ( department.toLowerCase () == "art" ) { return org.yamj.core.database.model.type.JobType.ART; } else if ( department.toLowerCase () == "editing" ) { return org.yamj.core.database.model.type.JobType.EDITING; } else if ( department.toLowerCase () == "costume & make-up" ) { return org.yamj.core.database.model.type.JobType.COSTUME_MAKEUP; } else if ( department.toLowerCase () == "crew" ) { return org.yamj.core.database.model.type.JobType.CREW; } else if ( department.toLowerCase () == "visual effects" ) { return org.yamj.core.database.model.type.JobType.EFFECTS; } else if ( department.toLowerCase () == "lighting" ) { return org.yamj.core.database.model.type.JobType.LIGHTING; } else { org.yamj.core.service.metadata.online.TheMovieDbScanner.LOG.debug ( "Unknown department '{}'", department ) ; return org.yamj.core.database.model.type.JobType.UNKNOWN; } } 
public boolean isMatched () { if ( matchingType == OR ) { return matches.values () .contains ( true ) ; } else if ( matchingType == AND ) { } else { return ( ( matches.size () ) > 0 ) && ( ! ( matches.values () .contains ( false ) ) ) ; } } 
@ java.lang.Override public void onLoadFinished ( android.content.Loader<android.database.Cursor> loader, android.database.Cursor data ) { if ( loader.getId () == com.android.contacts.list.JoinContactListFragment.DISPLAY_NAME_LOADER ) { { if ( ( data != null ) && ( data.moveToFirst () ) ) { showTargetContactName ( data.getString ( 0 ) ) ; } break; } } else if ( loader.getId () == JoinContactListAdapter.PARTITION_ALL_CONTACTS ) { { if ( data != null ) { final android.database.Cursor suggestionsCursor = ( ( com.android.contacts.list.JoinContactLoader.JoinContactLoaderResult ) ( data ) ) .suggestionCursor; onContactListLoaded ( suggestionsCursor, data ) ; } break; } } } 
public java.lang.String addDate ( java.lang.String date, char typeRepeat ) { if ( typeRepeat == 'D' ) { return this.addDayInDate ( date ) ; } else if ( typeRepeat == 'M' ) { return this.addMonthInDate ( date ) ; } else if ( typeRepeat == 'A' ) { return this.addYearInDate ( date ) ; } else { return date; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.btnTimerPlay ) { com.mkhan.myapplication.TimerActivity.isTimerOn = true; togglePlayButtontext ( ( ( android.widget.Button ) ( v ) ) ) ; } else if ( v.getId () == R.id.btnTimerReset ) { com.mkhan.myapplication.TimerActivity.isTimerOn = false; togglePlayButtontext ( ( ( android.widget.Button ) ( v ) ) ) ; } } 
@ java.lang.Override public void getTooltip ( binnie.core.craftgui.Tooltip tooltip ) { if ( ( species ) == null ) { return; } if ( discovered == SHOW ) { } else if ( discovered == DISCOVERED ) { tooltip.add ( species.getName () ) ; } else if ( discovered == UNDISCOVERED ) { tooltip.add ( binnie.core.util.I18N.localise ( "binniecore.gui.database.discovered.undiscovered" ) ) ; } } 
@ java.lang.Override protected int getZWithOffset ( int x, int z ) { net.minecraft.util.EnumFacing enumfacing = this.getCoordBaseMode () ; if ( enumfacing == null ) { return z; } else { if ( enumfacing == SOUTH ) { return ( this.boundingBox.minZ ) + z; } else if ( enumfacing == WEST ) { return ( this.boundingBox.minZ ) + x; } else if ( enumfacing == NORTH ) { return ( this.boundingBox.maxZ ) - z; } else if ( enumfacing == EAST ) { return ( this.boundingBox.maxZ ) - x; } else { return z; } } } 

@ java.lang.Override public void onPageSelected ( int position ) { if ( position == 0 ) { title.setText ( R.string.title_myBook ) ; } else if ( position == 1 ) { title.setText ( R.string.title_allBook ) ; } else { title.setText ( R.string.title_allBook ) ; } } 
public void backward () { if ( heading == "N" ) { ( x ) ++; } else { } } 
private void encounterRender () { int option = getOption () ; if ( option == 0 ) { { fight () ; break; } } else if ( option == 1 ) { { flee () ; break; } } else if ( option == 2 ) { { return; } } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return new capstoneproject.androidnanodegree.com.cochelper.fragments.VideoFragment () ; } else if ( position == 1 ) { return new capstoneproject.androidnanodegree.com.cochelper.fragments.FileFragment () ; } else { return null; } } 
private void setCurrentSide ( com.dmitryvoronko.model.game.Side side ) { if ( side == X ) { setSelected ( sideX, sideO ) ; } else if ( side == O ) { setSelected ( sideO, sideX ) ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.ibtnClose ) { windowManager.removeView ( linearLayout ) ; stopSelf () ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.aboutMeMenuItem ) { return true; } else if ( item.getItemId () == R.id.preferences ) { return true; } else { return super.onOptionsItemSelected ( item ) ; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return pl.poznan.put.fc.antipaymentGuard.fragments.PayCardDetailsFragment.newInstance ( payCard ) ; } else if ( position == 1 ) { return pl.poznan.put.fc.antipaymentGuard.fragments.TransactionsListFragment.newInstance ( payCard.getId () ) ; } return null; } 
private void addOrUpdatePray () { if ( anaMode ( counter.name ) == ADD ) { addPray ( counter.name ) ; } else if ( anaMode ( counter.name ) == UPDATE ) { dbCounter.updatePray () ; } else { } } 
@ java.lang.Override public void onAction ( java.lang.String name, boolean keyPressed, float tpf ) { if ( name == "BACK" ) { nifty.gotoScreen ( "Start" ) ; } else if ( name == "START" ) { nifty.gotoScreen ( "PlayerLoading" ) ; } } 
@ java.lang.Override public void controlChange ( javax.sound.midi.ShortMessage event ) { if ( _sequencer.isRunning () ) { if ( event.getCommand () == 128 ) { } else if ( event.getCommand () == 144 ) { notifyPosition ( _sequencer.getTickPosition () ) ; } } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { int id = item.getItemId () ; if ( id == R.id.add ) { { setDate ( activateDate ) ; } } return true; } 
public com.goblet.gameEngine.Box getAttackHitbox () { if ( currentAttackDirection == DOWN ) { } else if ( currentAttackDirection == UP ) { return HorizontalAttack; } else if ( currentAttackDirection == RIGHT ) { } else if ( currentAttackDirection == LEFT ) { return VerticalAttack; } else { } } 
public void onClick ( android.view.View v ) { if ( v.getId () == R.id.btn_new ) { android.content.Intent intent = new android.content.Intent ( this, net.teamsv.selfalarm.NewAlarmActivity.class ) ; startActivity ( intent ) ; } else if ( v.getId () == R.id.btn_record ) { } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.bck_btn_id ) { { backButtonPressed () ; break; } } else if ( v.getId () == R.id.home_btn_id ) { { homeButtonPressed () ; } } else if ( v.getId () == R.id.fwd_btn_id ) { { forwardButtonPressed () ; } } } 
public static void nextLevel () { if ( breakout.Level.level == ONE ) { breakout.Level.level = breakout.Level.TWO; } else if ( breakout.Level.level == TWO ) { breakout.Level.level = breakout.Level.THREE; } else if ( breakout.Level.level == THREE ) { breakout.Level.level = breakout.Level.VICTORY; } else { breakout.Level.level = breakout.Level.ONE; } } 
public int getPointCaptures ( com.deci.tfstatsrev.TF2Stats.Datatype dt ) { if ( dt == ACCUM ) { return accum.PointCaptures; } else if ( dt == MAX ) { return max.PointCaptures; } else if ( dt == MVMACCUM ) { return -1; } else if ( dt == MVMMAX ) { return -1; } else { return -1; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == android.R.id.home ) { showLogoutDialog () ; return true; } else if ( item.getItemId () == R.id.action_logout ) { showLogoutDialog () ; return true; } else { return false; } } 
private java.lang.String getDimension ( org.bukkit.block.Biome b ) { if ( b == HELL ) { return "nether"; } else if ( b == VOID ) { return "end"; } else { return "overworld"; } } 
private boolean isWrapChar ( int type ) { if ( type == antlr4.GlacierParser.COMMA ) { return true; } return false; } 
private static java.lang.String writeCategory ( int cat ) { if ( cat == 1 ) { } else if ( cat == 2 ) { return "1"; } else if ( cat == 3 ) { } else if ( cat == 4 ) { return "2"; } else if ( cat == 5 ) { } else if ( cat == 6 ) { return "3"; } else { return "error: Invalid Category"; } } 
private java.lang.String getOperator ( com.ottogroup.bi.metascope.index.SolrQueryParameter.FilterType filterType ) { if ( filterType == OR ) { return "OR"; } else if ( filterType == AND ) { } else if ( filterType == EXCLUSIVE ) { return "AND"; } else { return "OR"; } } 
@ java.lang.Override public boolean onTouch ( android.view.View v, android.view.MotionEvent event ) { if ( v.getId () == R.id.relative_from ) { imageCenterScreen.setImageDrawable ( blackFlag ) ; } else if ( v.getId () == R.id.relative_to ) { imageCenterScreen.setImageDrawable ( greenFlag ) ; } return false; } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.accept_imageview ) { processResponse ( 1 ) ; } else if ( v.getId () == R.id.cancel_imageview ) { processResponse ( 0 ) ; } else if ( v.getId () == R.id.wait_imageview ) { waitButtonAction ( id ) ; } } 
public void calcmRes () { if ( MagSettings.scale == 4 ) { MagSettings.mRes = SENSITIVITY_MAGNETOMETER_4; } else if ( MagSettings.scale == 8 ) { MagSettings.mRes = SENSITIVITY_MAGNETOMETER_8; } else if ( MagSettings.scale == 12 ) { MagSettings.mRes = SENSITIVITY_MAGNETOMETER_12; } else if ( MagSettings.scale == 16 ) { MagSettings.mRes = SENSITIVITY_MAGNETOMETER_16; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int i ) { if ( i == 0 ) { return new com.offsec.nethunter.DuckHunterFragment.DuckHunterConvertFragment () ; } else if ( i == 1 ) { return new com.offsec.nethunter.DuckHunterFragment.DuckHunterPreviewFragment () ; } else { return new com.offsec.nethunter.DuckHunterFragment.DuckHunterReferenceFragment () ; } } 
private com.kontakt.sdk.android.ble.configuration.ScanMode getScanMode ( int mode, com.facebook.react.bridge.Promise promise ) throws java.lang.Exception { if ( mode == 0 ) { return com.kontakt.sdk.android.ble.configuration.ScanMode.LOW_POWER; } else if ( mode == 1 ) { return com.kontakt.sdk.android.ble.configuration.ScanMode.BALANCED; } else if ( mode == 2 ) { return com.kontakt.sdk.android.ble.configuration.ScanMode.LOW_LATENCY; } else { throw new java.lang.Exception ( "The value of scanMode has to be either LOW_POWER, BALANCED or LOW_LATENCY" ) ; } } 
@ org.springframework.web.bind.annotation.RequestMapping ( value = com.it.audit.web.constants.RequestURI.INDEX_CENTER_URI ) public org.springframework.web.servlet.ModelAndView centerContent ( @org.springframework.web.bind.annotation.PathVariable com.it.audit.enums.UserRole role ) { if ( role == ADMIN ) { return new org.springframework.web.servlet.ModelAndView ( "user/list", "role", role.name () ) ; } else { } return buildDefaultErrorPage ( "请开通所需权限" ) ; } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.support.v4.view.MenuItem item ) { if ( item.getItemId () == R.id.ab_refresh ) { this.refresh ( null ) ; return true; } else if ( item.getItemId () == R.id.ab_search ) { return true; } else { return super.onOptionsItemSelected ( item ) ; } } 
public static org.mvel2.templates.TemplateRegistry getDataModelRegistry ( org.drools.semantics.builder.model.ModelFactory.CompileTarget target ) { if ( target == XSDX ) { return org.drools.semantics.builder.DLTemplateManager.accessorsRegistry; } else if ( target == JAVA ) { return org.drools.semantics.builder.DLTemplateManager.javaRegistry; } else if ( target == DRL ) { return org.drools.semantics.builder.DLTemplateManager.traitRegistry; } else if ( target == RL ) { return org.drools.semantics.builder.DLTemplateManager.ruleRegistry; } else { return org.drools.semantics.builder.DLTemplateManager.traitRegistry; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.action_save_details ) { updateDetails () ; finish () ; } else if ( item.getItemId () == R.id.action_delete_details ) { showDeleteConfirmationDialog () ; return true; } return super.onOptionsItemSelected ( item ) ; } 
public net.minecraft.util.EnumFacing getRotate () { if ( rotate == 0 ) { return net.minecraft.util.EnumFacing.WEST; } else if ( rotate == 1 ) { return net.minecraft.util.EnumFacing.NORTH; } else if ( rotate == 2 ) { return net.minecraft.util.EnumFacing.EAST; } else { return net.minecraft.util.EnumFacing.SOUTH; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.home_find_bringer ) { android.content.Intent intent = new android.content.Intent ( getActivity () , com.morgane.painauchocolat.activities.BringerActivity.class ) ; startActivityForResult ( intent, Constant.REQUEST_CODE_FIND_BRINGER ) ; } } 
@ java.lang.Override public android.support.v4.app.Fragment getItem ( int position ) { if ( position == 0 ) { return com.labs.okey.oneride.myrides.GeneralMyRidesFragment.getInstance () ; } else if ( position == 1 ) { return com.labs.okey.oneride.myrides.RejectedMyRidesFragment.getInstance () ; } return null; } 
@ java.lang.Override public int getItemCount ( int section ) { if ( section == 0 ) { return mDataJoin.size () ; } else if ( section == 1 ) { return mDataOwner.size () ; } else { return 0; } } 
@ java.lang.Override public void onClick ( android.content.DialogInterface dialog, int which ) { if ( which == android.content.DialogInterface.BUTTON_POSITIVE ) { deletePartOfTheMethod ( id ) ; } else if ( which == android.content.DialogInterface.BUTTON_NEGATIVE ) { } } 
private static void parseContent ( fr.pasteque.client.fragments.CustomerInfoDialog self, int who, org.json.JSONObject result ) { if ( who == fr.pasteque.client.fragments.CustomerInfoDialog.DATAHANDLER_CUSTOMER ) { self.parseCustomer ( result ) ; } else if ( who == fr.pasteque.client.fragments.CustomerInfoDialog.DATAHANDLER_HISTORY ) { self.parseHistory ( result ) ; } } 
private void addTask ( main.logic.Logic.ListType type, main.data.Task task ) { if ( type == ALL ) { allTasks.add ( task ) ; } else if ( type == COMPLETED ) { completedTasks.add ( task ) ; } else { } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.btn_getURL ) { get_address ( v ) ; } else if ( v.getId () == R.id.btn_analyze ) { getTextFromActivity ( v ) ; } else if ( v.getId () == R.id.btn_reset ) { resetText ( v ) ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.menu_book_edit_save ) { if ( saveBook () ) { finish () ; } } else { return super.onOptionsItemSelected ( item ) ; } } 
@ java.lang.Override public boolean onOptionsItemSelected ( android.view.MenuItem item ) { if ( item.getItemId () == R.id.action_search ) { timber.log.Timber.i ( "action_search" ) ; intentSearchActivity () ; return true; } else { return super.onOptionsItemSelected ( item ) ; } } 
@ java.lang.Override public void onClick ( android.view.View v ) { if ( v.getId () == R.id.btn_addcompany ) { addCompany () ; } else if ( v.getId () == R.id.btn_add_category ) { addCategory ( v ) ; } } 
@ java.lang.Override public java.lang.String toMoveString () { if ( getActing () == 1 ) { return null; } else if ( getActing () == 2 ) { return null; } else if ( getActing () == 3 ) { return getType () .toString () ; } else { return null; } } 
@ java.lang.Override public void onClick ( android.view.View view ) { if ( view.getId () == R.id.signInButton ) { signIn () ; } else if ( view.getId () == R.id.signOutButton ) { signOut () ; } } 

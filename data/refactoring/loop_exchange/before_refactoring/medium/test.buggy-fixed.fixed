public static boolean isInteger ( java.lang.String str ) { if ( ( str . length () ) == 0 ) { return false ; } int i = - 1 ; while ( ( ++ i ) < ( str . length () ) ) { char c = str . charAt ( i ) ; if ( ( c < '0' ) || ( c > '9' ) ) { return false ; } } return true ; } 
private void clearTheCurrentGame () { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { application.TicTacToeApp.board [ i ] [ j ] . clear () ; } } application.TicTacToeApp.neadNewGame = false ; application.TicTacToeApp.playable = true ; } 
public void focusOut ( org.sbolstandard.core2.ComponentDefinition comp ) throws org.sbolstandard.core2.SBOLValidationException { if ( ( canvasCD ) == comp ) { return; } updateCanvasCD () ; org.sbolstandard.core2.ComponentDefinition parentComponent = parentCDs . pop () ; while ( ! ( parentComponent . equals ( comp ) ) ) { parentComponent = parentCDs . pop () ; } load ( parentComponent ) ; eventBus . publish ( new com.clarkparsia.sbol.editor.event.FocusOutEvent ( this , parentComponent ) ) ; } 
public int getUuidIndex ( java.lang.String uuid ) { if ( uuid . equals ( "0" ) ) return 0 ; for ( int i = 0 ; i < ( list . size () ) ; i ++ ) { try { java.lang.String itemuuid = list . get ( i ) . getString ( "uuid" ) ; if ( uuid . equals ( itemuuid ) ) return i + 1 ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; } } return 0 ; } 
private static double getScoreForDocumentId ( int documentId , org.terrier.querying.SearchRequest srq ) { org.terrier.matching.ResultSet rs = srq . getResultSet () ; if ( rs == null ) { return 0 ; } int [] docIds = rs . getDocids () ; double [] scores = rs . getScores () ; for ( int i = 0 ; i < ( docIds.length ) ; i ++ ) { if ( ( docIds [ i ] ) == documentId ) { return scores [ i ] ; } } return 0 ; } 
public void visit ( compiler.phase.seman.FunCall funCall ) { for ( int a = 0 ; a < ( funCall . numArgs () ) ; a ++ ) funCall . arg ( a ) . accept ( this ) ; compiler.phase.seman.Decl decl = attrs.declAttr . get ( funCall ) ; compiler.phase.seman.Typ typ = attrs.typAttr . get ( decl ) ; attrs.typAttr . set ( funCall , ( ( compiler.phase.seman.FunTyp ) ( typ ) ) . resultTyp ) ; } 
public java.lang.String getReps ( android.widget.LinearLayout layout ) { java.lang.String toReturn = "" ; for ( int i = 1 ; i < 6 ; i ++ ) { android.widget.EditText editText = ( ( android.widget.EditText ) ( layout . getChildAt ( i ) ) ) ; java.lang.String text = editText . getText () . toString () ; if ( ! ( text . trim () . equals ( "" ) ) ) { toReturn += text + " " ; } } return toReturn ; } 
private java.lang.Iterable < gameoflife.Cell > allCells () { java.util.List < gameoflife.Cell > allCells = new java.util.ArrayList <> () ; for ( int y = 0 ; y < ( matrix . getHeight () ) ; y ++ ) { for ( int x = 0 ; x < ( matrix . getWidth () ) ; x ++ ) { allCells . add ( new gameoflife.Cell ( y , x , ( - 1 ) ) ) ; } } return allCells ; } 
public java.lang.String getMultiVector () { if ( this . multicast ) { java.lang.String ans = "" ; for ( int i = 0 ; i < ( groupSize ) ; i ++ ) ans += ( multicastVector [ i ] ) + " " ; return ans ; } else return "no multi" ; } 
@ java.lang.Override public void run () { while ( threadRun ) { if ( ! ( queue . isEmpty () ) ) { try { storeTripMessage ( queue . take () ) ; } catch ( java.lang.InterruptedException e ) { android.util.Log . e ( AppLog.LOG_TAG_DB , "Exception while reading msg from queue!" , e ) ; } } else { try { cz.meteocar.unit.engine.storage.DatabaseService . sleep ( 200 ) ; } catch ( java.lang.Exception e ) { android.util.Log . e ( AppLog.LOG_TAG_DB , "Error when sleep." , e ) ; } } } android.util.Log . d ( AppLog.LOG_TAG_DB , "Database Service exited LOOP" ) ; } 
public boolean removeConnection ( com.flashvisions.server.red5.jsbridge.listeners.JsBridgeConnection connection ) { boolean removed = false ; java.util.Iterator < com.flashvisions.server.red5.jsbridge.listeners.JsBridgeConnection > iterator = connections . iterator () ; while ( iterator . hasNext () ) { com.flashvisions.server.red5.jsbridge.listeners.JsBridgeConnection conn = iterator . next () ; if ( conn != null ) { connections . remove ( conn ) ; removed = true ; break; } } return removed ; } 
private void placeFoodBlobs () { int counter = 11 ; while ( counter != 0 ) { java.awt.Point [] foodBlob = makeFoodBlob () ; if ( foodBlob != null ) { for ( java.awt.Point p : foodBlob ) { map . getCell ( p ) . setHasFood ( 5 ) ; } counter -- ; } } } 
private void drawWifi ( com.anwesome.games.dataindicationbutton.Canvas canvas , com.anwesome.games.dataindicationbutton.Paint paint ) { float r = ( radius ) / 60 ; canvas . drawCircle ( 0 , 0 , r , paint ) ; for ( int i = 1 ; i <= 3 ; i ++ ) { float newR = r * ( i * 10 ) ; canvas . drawArc ( new com.anwesome.games.dataindicationbutton.RectF ( ( - newR ) , ( - newR ) , newR , newR ) , 240 , 60 , false , paint ) ; } } 
public static double sumSigma ( int i , double [] p , double [] q , double [] b ) { double res = 0 ; for ( int l = 0 ; l < ( p.length ) ; l ++ ) { double power = ( ( p [ i ] ) * ( q [ l ] ) ) + ( b [ l ] ) ; res += java.lang.Math . exp ( power ) ; } return res ; } 
protected void check () { if ( host . getAutoDeploy () ) { org.apache.catalina.startup.HostConfig.DeployedApplication [] apps = deployed . values () . toArray ( new org.apache.catalina.startup.HostConfig.DeployedApplication [ 0 ] ) ; for ( int i = 0 ; i < ( apps.length ) ; i ++ ) { if ( ! ( isServiced ( apps [ i ] . name ) ) ) checkResources ( apps [ i ] , false ) ; } if ( host . getUndeployOldVersions () ) { checkUndeploy () ; } deployApps () ; } } 
private static java.lang.String getStringResponse ( java.io.InputStream is ) { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; try { while ( ( line = reader . readLine () ) != null ) { sb . append ( ( line + "" ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; } 
public java.util.List < java.lang.Integer > getDaysFromThisMonth ( int month , int year ) { java.util.Calendar cal = new java.util.GregorianCalendar () ; cal . set ( year , month , 1 ) ; int max = cal . getActualMaximum ( java.util.Calendar.DAY_OF_MONTH ) ; java.lang.System.out . println ( max ) ; java.util.List < java.lang.Integer > daysFromThisMonth = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < max ; i ++ ) { daysFromThisMonth . add ( ( i + 1 ) ) ; } return daysFromThisMonth ; } 
@ org.gbif.occurrence.persistence.Test public void testKeyByColumnIterator () { int count = 0 ; java.util.Iterator < java.lang.Integer > iterator = occurrenceService . getKeysByColumn ( org.apache.hadoop.hbase.util.Bytes . toBytes ( org.gbif.occurrence.persistence.OccurrencePersistenceServiceImplTest.DATASET_KEY . toString () ) , org.gbif.occurrence.persistence.hbase.Columns . column ( GbifTerm.datasetKey ) ) ; while ( iterator . hasNext () ) { iterator . next () ; count ++ ; } assertEquals ( 1 , count ) ; } 
void setTerms ( java.util.List < java.lang.String > terms ) { if ( org.apache.commons.collections.CollectionUtils . isEmpty ( terms ) ) return; java.lang.StringBuffer text = new java.lang.StringBuffer () ; java.util.Iterator < java.lang.String > i = terms . iterator () ; while ( i . hasNext () ) { text . append ( i . next () ) ; if ( i . hasNext () ) text . append ( SearchUtil.SPACE_SEPARATOR ) ; } fullTextArea . setText ( text . toString () ) ; } 
@ java.lang.Override public java.util.List < java.util.Map < java.lang.String , java.lang.Object > > handle ( android.database.Cursor cs ) { java.util.List < java.util.Map < java.lang.String , java.lang.Object > > rows = new java.util.ArrayList < java.util.Map < java.lang.String , java.lang.Object > > () ; while ( ! ( cs . isLast () ) ) { rows . add ( this . handleRow ( cs ) ) ; } return rows ; } 
private data_structures.Node findNode ( int index ) { if ( index == ( ( size ) - 1 ) ) { return tail ; } data_structures.Node node = head ; for ( int i = 0 ; i < index ; i ++ ) { node = node . getNext () ; } return node ; } 
public int getIndexDoc ( final java.lang.String filePath ) { for ( int di = 0 ; di < ( ndocs ) ; di ++ ) { if ( docs [ di ] . getDocLoc () . getPath () . contains ( filePath ) ) return di ; } return - 1 ; } 
private static java.util.List < ru.stqa.pft.addressbook.model.GroupData > generateGroups ( int count ) { java.util.List < ru.stqa.pft.addressbook.model.GroupData > groups = new java.util.ArrayList < ru.stqa.pft.addressbook.model.GroupData > () ; for ( int i = 0 ; i < count ; i ++ ) { groups . add ( new ru.stqa.pft.addressbook.model.GroupData () . withName ( java.lang.String . format ( "test %s" , i ) ) . withHeader ( java.lang.String . format ( "header %s" , i ) ) . withFooter ( java.lang.String . format ( "footer %s" , i ) ) ) ; } return groups ; } 
public java.util.ArrayList < java.lang.Boolean > asList () { java.util.ArrayList < java.lang.Boolean > l = new java.util.ArrayList < java.lang.Boolean > ( length ) ; for ( int i = 0 ; i < ( length ) ; i ++ ) { l . add ( i , get ( i ) ) ; } return l ; } 
public double subtractRange ( final int firstIndex , final int secondIndex ) { double result = systemCoefficients [ firstIndex ] [ secondIndex ] ; for ( int k = 0 ; k <= ( secondIndex - 1 ) ; k ++ ) { result -= ( systemCoefficients [ firstIndex ] [ k ] ) * ( systemCoefficients [ secondIndex ] [ k ] ) ; } return result ; } 
public int getRelativeMajor ( int note ) { int relativeMajor = 0 ; for ( int j = 0 ; j < ( SIZE_OF_NOTES_ARRAY ) ; j ++ ) { if ( ( notes [ j ] ) == note ) { int index = ( j + 3 ) % ( SIZE_OF_NOTES_ARRAY ) ; relativeMajor = notes [ index ] ; break; } } return relativeMajor ; } 
private void syncNewLinePositions () { for ( int i = lastNewLinePositionIndex ; i > ( - 1 ) ; i -- ) { if ( ( position ) >= ( newLinePositions [ lastNewLinePositionIndex ] ) ) { break; } else { newLinePositions [ ( ( lastNewLinePositionIndex ) -- ) ] = - 1 ; } } } 
private java.lang.String inputStreamToString ( java.io.InputStream inputStream ) throws java.io.IOException { java.io.Reader reader = new java.io.InputStreamReader ( inputStream , "gb2312" ) ; java.io.BufferedReader bufferedReader = new java.io.BufferedReader ( reader ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String buffer ; while ( ( buffer = bufferedReader . readLine () ) != null ) { sb . append ( buffer ) . append ( "\n" ) ; } inputStream . close () ; bufferedReader . close () ; reader . close () ; return sb . toString () ; } 
public void shuffleDeck () { int random = 0 ; for ( int i = 0 ; i < ( numberOfCards ) ; i ++ ) { random = srk.syracuse.gameofcards.Model.Deck . getRandomCard ( i ) ; srk.syracuse.gameofcards.Model.Cards temp = cards [ i ] ; cards [ i ] = cards [ random ] ; cards [ random ] = temp ; } } 
@ java.lang.Override public void onAttachedToRecyclerView ( android.support.v7.widget.RecyclerView recyclerView ) { if ( ( mRunnables . size () ) == 0 ) { int count = getItemCount () ; for ( int i = 0 ; i < count ; i ++ ) { mRunnables . add ( null ) ; } } registerAdapterDataObserver ( new com.tr4android.recyclerviewslideitem.SwipeAdapter.SwipeAdapterDataObserver () ) ; } 
public Person retrieve () { int iterator = ( array.length ) - 1 ; while ( ( iterator > 0 ) && ( ( array [ iterator ] ) == null ) ) { iterator -- ; } Person retrieved = array [ iterator ] ; array [ iterator ] = null ; return retrieved ; } 
public static boolean checkPlayersTiles ( java.lang.String board , int player , int value , int numOfValues ) { java.lang.String tiles = game.manger.SaveTheIslandGame.Board . getPlayersTiles ( player , board ) ; int count = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( ( java.lang.Integer . parseInt ( tiles . substring ( i , ( i + 1 ) ) ) ) == value ) { count ++ ; } } return count >= numOfValues ; } 
public boolean containsKey ( java.lang.String key ) { int index = ( key . hashCode () ) % ( this . valueTable . length ) ; java.lang.String currentKey ; while ( ( currentKey = this . keyTable [ index ] ) != null ) { if ( key . equals ( currentKey ) ) return true ; index = ( index + 1 ) % ( this . keyTable . length ) ; } return false ; } 
public org.apache.catalina.tribes.Member getMember ( org.apache.catalina.tribes.Member mbr ) { org.apache.catalina.tribes.Member [] members = this . members ; if ( ( members.length ) > 0 ) { org.apache.catalina.tribes.Member result = null ; for ( int i = 0 ; ( i < ( members.length ) ) && ( result == null ) ; i ++ ) { if ( members [ i ] . equals ( mbr ) ) { result = members [ i ] ; } } return result ; } else { return null ; } } 
@ java.lang.Override public void readFromNBT ( net.minecraft.nbt.NBTTagCompound nbtTagCompound ) { if ( nbtTagCompound . hasKey ( Names.NBT.SOURCES ) ) { net.minecraft.nbt.NBTTagList list = nbtTagCompound . getTagList ( Names.NBT.SOURCES , Constants.NBT.TAG_INT_ARRAY ) ; for ( int i = 0 ; i < ( list . tagCount () ) ; i ++ ) { sources . add ( de.keridos.floodlights.util.GeneralUtil . getPosFromIntArray ( list . getIntArrayAt ( i ) ) ) ; } } } 
private static float [] toEffectiveTableColumnWidth ( float [] tableColumnWidth ) { float [] result = new float [ tableColumnWidth.length ] ; for ( int i = 0 ; i < ( result.length ) ; ++ i ) { result [ i ] = ( tableColumnWidth [ i ] ) + ( com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils . getEps () ) ; } return result ; } 
protected static org.eclipse.dawnsci.analysis.api.fitting.functions.IParameter [] createParameters ( int numberOfParameters ) { org.eclipse.dawnsci.analysis.api.fitting.functions.IParameter [] params = new org.eclipse.dawnsci.analysis.api.fitting.functions.IParameter [ numberOfParameters ] ; for ( int i = 0 ; i < numberOfParameters ; i ++ ) { params [ i ] = new uk.ac.diamond.scisoft.analysis.fitting.functions.Parameter () ; } return params ; } 
public ontario.accounts.Account removeAccount ( java.lang.String numAccTemp ) { if ( numAccTemp == null ) { return null ; } else { boolean temp ; ontario.accounts.Account temp2 ; for ( int i = 0 ; i < ( acc . size () ) ; i ++ ) { temp = acc . get ( i ) . getAccountNumber () . equals ( numAccTemp ) ; if ( temp ) { temp2 = acc . get ( i ) ; acc . remove ( i ) ; return temp2 ; } } } return null ; } 
static boolean cypher ( com.intellij.lang.PsiBuilder b , int l ) { if ( ! ( recursion_guard_ ( b , l , "cypher" ) ) ) return false ; int c = current_position_ ( b ) ; while ( true ) { if ( ! ( com.neueda.jetbrains.plugin.graphdb.language.cypher.parser.CypherParser . StatementItem ( b , ( l + 1 ) ) ) ) break; if ( ! ( empty_element_parsed_guard_ ( b , "cypher" , c ) ) ) break; c = current_position_ ( b ) ; } return true ; } 
@ java.lang.Override public boolean add ( com.ivstuart.tmud.person.carried.Money money ) { java.util.ListIterator < com.ivstuart.tmud.person.carried.SomeMoney > moneyItr = list . listIterator () ; while ( moneyItr . hasNext () ) { com.ivstuart.tmud.person.carried.Money aMoney = ( ( com.ivstuart.tmud.person.carried.Money ) ( moneyItr . next () ) ) ; if ( aMoney . isSameType ( money ) ) { aMoney . add ( money ) ; if ( aMoney . isEmpty () ) { moneyItr . remove () ; } return true ; } } list . add ( new com.ivstuart.tmud.person.carried.Money ( money ) ) ; return false ; } 
public static float variance ( final float [] array , final int offset , final int length ) { final float mean = com.tagtraum.jipes.math.Floats . arithmeticMean ( array , offset , length ) ; double sum = 0 ; for ( int i = offset ; i < ( offset + length ) ; i ++ ) { final float diff = ( array [ i ] ) - mean ; sum += ( diff * diff ) / length ; } return ( ( float ) ( sum ) ) ; } 
@ org.junit.Test public void testGenerateName_withThreeToTwentyLength () { for ( int i = 3 ; i < 20 ; i ++ ) { final java.lang.String result = grammarNameGenerator . generateName ( i ) ; org.junit.Assert . assertTrue ( ( ( result . length () ) <= i ) ) ; org.junit.Assert . assertTrue ( ( ( result . length () ) > 0 ) ) ; } } 
@ java.lang.Override public void execute ( ) throws java.lang.Exception { java.lang.System.out . print ( "" ) ; java.lang.System.out . flush () ; java.lang.System.out . print ( prompt ) ; java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.lang.System.in ) ) ; while ( ! ( isReady ( reader . readLine () ) ) ) { java.lang.System.out . print ( prompt ) ; } } 
public java.lang.String mapPath ( java.lang.String path ) { if ( ( mapList ) == null ) { return path ; } for ( int i = 0 ; i < ( mapList.length ) ; i ++ ) { if ( ( mapList [ i ] [ 0 ] . equals ( path ) ) || ( ( ( mapList [ i ] [ 0 ] ) + "/" ) . equals ( path ) ) ) { return mapList [ i ] [ 1 ] ; } } return path ; } 
private Item [] toArray () { @ java.lang.SuppressWarnings ( value = "unchecked" ) Item [] items = ( ( Item [] ) ( new java.lang.Object [ size ] ) ) ; Deque < Item > . Node n = first ; for ( int i = 0 ; i < ( items.length ) ; i ++ ) { items [ i ] = n.item ; n = n.next ; } return items ; } 
@ java.lang.Override public void run () { while ( proc . isAlive () ) {} java.lang.System.out . println ( "end" ) ; java.util.List < main.Tuple < ? , ? > > recorded = sessionController . end () ; startFrame . setState ( java.awt.Frame.NORMAL ) ; isRecording = false ; gui.StartScreen.RCDRFileSelect fileSelect = new gui.StartScreen.RCDRFileSelect ( this ) ; fileSelect . save ( recorded ) ; java.lang.System.out . println ( "ended" ) ; return; } 
@ com.google.common.eventbus.Subscribe public void attemptToMatchSubmissionWithStudent ( edu.pdx.cs410J.grader.poa.POASubmissionSelected selected ) { for ( int i = 0 ; i < ( students . size () ) ; i ++ ) { edu.pdx.cs410J.grader.Student student = students . get ( i ) ; if ( submitterMatchesStudent ( selected . getSubmission () , student ) ) { this . view . setSelectedStudentIndex ( ( i + 1 ) ) ; fireStudentSelectedEvent ( student ) ; return; } } this . view . setSelectedStudentIndex ( 0 ) ; fireStudentSelectedEvent ( null ) ; } 
@ java.lang.Override public void removeRange ( int fromPosition , int itemCount ) { for ( int i = 0 ; i < itemCount ; i ++ ) if ( fromPosition < ( contentList . size () ) ) contentList . remove ( fromPosition ) ; indi.yume.tools.adapter_renderer.recycler.RendererAdapter . notifyItemRangeRemoved ( fromPosition , itemCount ) ; indi.yume.tools.adapter_renderer.recycler.RendererAdapter . notifyItemRangeChanged ( 0 , getItemCount () ) ; } 
@ java.lang.SuppressWarnings ( value = "unchecked" ) private void takeFromInternalBuffer ( backtype.storm.tuple.Tuple input ) { operator.merger.MergerEntry nextReady = sharedChannels . getNextReadyObj ( ( "" + ( thisTask ) ) , channelID ) ; while ( nextReady != null ) { process ( new backtype.storm.tuple.TupleImpl ( context , ( ( java.util.List < java.lang.Object > ) ( nextReady . getO () ) ) , input . getSourceTask () , input . getSourceStreamId () ) ) ; nextReady = sharedChannels . getNextReadyObj ( ( "" + ( thisTask ) ) , channelID ) ; } } 
public void run () { try { while ( true ) { ms.sem . acquire ( 1 ) ; ms.mutex . acquire () ; java.lang.System.out . println ( "Consumer read" ) ; ms.mutex . release () ; } } catch ( java.lang.Exception x ) { x . printStackTrace () ; } } 
@ java.lang.Override public void run () { int counter = 0 ; while ( counter < ( this . num ) ) { java.lang.System.out . println ( ( ( ( "Get: " + ( java.lang.Thread . currentThread () . getName () ) ) + " From " ) + ( bucket . getToken () ) ) ) ; counter ++ ; } } 
public void ignoreBlank () { if ( ! ( Settings.ignoreBlanks ) ) return; while ( ( ( application.VirtualCursor . getCurrentElement ( application.VirtualCursor.gridPane ) ) != null ) && ( ( ( ( javafx.scene.control.Label ) ( application.VirtualCursor . getCurrentElement ( application.VirtualCursor.gridPane ) ) ) . getText () . charAt ( 0 ) ) == ' ' ) ) { moveCursor () ; } } 
public static int [] barcodeToIntArray ( java.lang.String barcode ) { if ( barcode == null ) { return new int [ 0 ] ; } java.lang.String [] barcodeArray = barcode . trim () . split ( "(?!^)" ) ; int [] barcodeToInt = new int [ barcodeArray.length ] ; for ( int i = 0 ; i < ( barcodeArray.length ) ; i ++ ) { barcodeToInt [ i ] = java.lang.Integer . parseInt ( barcodeArray [ i ] ) ; } return barcodeToInt ; } 
private void addItemsToQueue () { for ( int i = 0 ; i < ( _numIterations ) ; i ++ ) { java.lang.String message = ( ( "Producer # " + ( _id ) ) + " message # " ) + i ; if ( ( i + 1 ) == ( _numIterations ) ) { _queue . AddToQueue ( message , _listener ) ; } else { _queue . AddToQueue ( message ) ; } nachos.threads.KThread . yield () ; } } 
public static void run ( Game game , AvalonBot bot ) { for ( int i = 0 ; i < ( game.pendingMissionPlayers . size () ) ; i ++ ) { bot . sendMessage ( ( ( ( ( "Type /" + ( ( game.gameId ) - 1 ) ) + " success or /" ) + ( ( game.gameId ) - 1 ) ) + " fail" ) , game.pendingMissionPlayers . get ( i ) . id ) ; } ( game.state ) ++ ; game.pmMissionCount = 0 ; game.missionFailCount = 0 ; } 
public void reorderToolbarContainer () { toolbarsContainer . removeAllViews () ; java.util.Collections . sort ( com.example.root.myalarmclock.MainActivity.mAlarmList , new java.util.Comparator < com.example.root.myalarmclock.Alarm > () { @ java.lang.Override public int compare ( com.example.root.myalarmclock.Alarm r1 , com.example.root.myalarmclock.Alarm r2 ) { return r1 . getAlarmDate () . compareTo ( r2 . getAlarmDate () ) ; } } ) ; for ( int x = 0 ; x < ( com.example.root.myalarmclock.MainActivity.mAlarmList . size () ) ; x ++ ) { toolbarsContainer . addView ( com.example.root.myalarmclock.MainActivity.mAlarmList . get ( x ) . getToolbar () ) ; } } 
private static float findMax ( java.util.ArrayList < java.lang.Float > list , int targetIndex ) { float max = - 1.0F ; for ( int a = 0 ; a <= targetIndex ; a ++ ) { if ( ( list . get ( a ) ) > max ) { max = list . get ( a ) ; } } return max ; } 
private void init () { for ( int i = 1 ; i <= ( levelCount ) ; i ++ ) { levels . add ( new world.Level ( i ) ) ; } backgroundX = java.lang.Integer . parseInt ( currentLevel . getWallData ( 0 ) ) ; backgroundY = java.lang.Integer . parseInt ( currentLevel . getWallData ( 1 ) ) ; background = new renderer.Background ( 0 , 0 , this , currentLevel . getImageData ( 0 ) ) ; inventory = new renderer.Texture ( "Assets/Pictures/Textures/Inventory_l1.png" ) ; c = new vault1.CharacterFolder.Controller ( this ) ; } 
public java.util.ArrayList < lexer.Token > tokenize ( java.lang.String input ) { java.util.ArrayList < lexer.Token > resultingTokens = new java.util.ArrayList < lexer.Token > () ; lexer.Token newToken ; if ( input == null ) { java.lang.System.out . println ( "Input not set!" ) ; return null ; } java.util.Collections . sort ( token ) ; while ( ( input . length () ) > 0 ) { newToken = testTokens ( input ) ; input = input . substring ( newToken . getCompleteLength () ) ; resultingTokens . add ( newToken ) ; } return resultingTokens ; } 
public void replace ( int position , java.lang.Object content ) { if ( ( position <= 0 ) || ( ( nodes ) <= 0 ) ) return; if ( position > ( nodes ) ) return; Node replace = start ; for ( int i = 0 ; i < ( position - 1 ) ; i ++ ) { replace = replace . getNextNode () ; } replace . setContent ( content ) ; } 
private java.lang.String getChargeRangeAsString () { java.lang.String charges = "" ; for ( int i = minCharge ; i <= ( maxCharge ) ; i ++ ) { if ( ! ( charges . isEmpty () ) ) { charges += "," ; } charges += i + "+" ; } return charges ; } 
private boolean isDuplicateInCurrCategory ( java.util.HashSet < com.transformuk.bdt.domain.CrawledContent > currContentSet , com.transformuk.bdt.domain.CrawledContent newContent ) { boolean isDuplicate = false ; java.util.Iterator < com.transformuk.bdt.domain.CrawledContent > iterator = currContentSet . iterator () ; while ( iterator . hasNext () ) { com.transformuk.bdt.domain.CrawledContent existingContent = iterator . next () ; if ( ( ( newContent . getTitle () ) != null ) && ( existingContent . getTitle () . equals ( newContent . getTitle () ) ) ) { isDuplicate = true ; break; } } return isDuplicate ; } 
public static com.sl.algorithms.traversal.Node reverseList ( com.sl.algorithms.traversal.Node head ) { com.sl.algorithms.traversal.Node prev ; com.sl.algorithms.traversal.Node curr ; com.sl.algorithms.traversal.Node next ; prev = null ; curr = head ; while ( curr != null ) { next = curr.next ; curr.next = prev ; prev = curr ; curr = next ; } head = prev ; return head ; } 
private void mapLetters ( BoggleBoard board , int rows , int cols ) { letters = new edu.princeton.cs.algs4.SeparateChainingHashST < java.lang.Integer , java.lang.Character > () ; for ( int i = 0 ; i < rows ; i ++ ) for ( int j = 0 ; j < cols ; j ++ ) { int x = ( i * cols ) + j ; letters . put ( x , board . getLetter ( i , j ) ) ; } } 
public java.util.List < java.lang.Long > getMembersList () { java.util.List < java.lang.Long > memberLists = new java.util.ArrayList < java.lang.Long > () ; if ( ( this . members . length () ) <= 0 ) return memberLists ; java.lang.String [] list = this . members . split ( "," ) ; for ( int i = 0 ; i < ( list.length ) ; i ++ ) memberLists . add ( java.lang.Long . parseLong ( list [ i ] ) ) ; return memberLists ; } 
public double variance ( double [] dataset ) { double degreeOfFreedom = dataset.length ; double var = 0 ; double mean = mean ( dataset ) ; for ( int i = 0 ; i < ( dataset.length ) ; i ++ ) { var += java.lang.Math . pow ( ( ( dataset [ i ] ) - mean ) , 2 ) ; } var /= degreeOfFreedom ; return var ; } 
@ org.junit.Test public void testGenerateOption () { for ( int i = 0 ; i < 10000 ; i ++ ) { testQuestion1 . generateQuestion ( 4 ) ; tests.Fraction answer = testQuestion1 . generateAnswer ( 4 ) ; assertFalse ( testQuestion1 . generateOption ( 4 ) . checkEquals ( testQuestion1 . getCorrectAnswer () ) ) ; } } 
private void acceptPhone () { java.net.ServerSocket serverSocket ; try { serverSocket = new java.net.ServerSocket ( 10085 ) ; while ( true ) { java.net.Socket socket = serverSocket . accept () ; threads.PhoneServerThread thread = new threads.PhoneServerThread ( socket ) ; thread . start () ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } } 
public static void main ( java.lang.String [] args ) { MainInterface . init () ; int choice = MainInterface . prompt () ; while ( true ) { MainInterface . performChoice ( choice ) ; if ( choice == 0 ) break; choice = MainInterface . prompt () ; } } 
private void initBlocks ( android.content.Context context ) { for ( int x = 0 ; x <= ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockXAmount ) ; x ++ ) { for ( int y = 0 ; y < ( com.waterfall.thomaswatson.theprovider.PlayerArea.blockYAmount ) ; y ++ ) { com.waterfall.thomaswatson.theprovider.Block block = new com.waterfall.thomaswatson.theprovider.Block ( context ) ; block . setXPosition ( x ) ; block . setYPosition ( y ) ; blocks . add ( block ) ; } } } 
public void dump ( java.io.DataOutputStream out ) throws java.io.IOException { super . dump ( out ) ; out . writeInt ( low ) ; out . writeInt ( ( ( high ) - ( low ) ) ) ; for ( int i = 0 ; i < ( switchAddresses.length ) ; i ++ ) { out . writeShort ( switchAddresses [ i ] ) ; out . writeShort ( switchBranchTargetIndexes [ i ] ) ; } } 
public void reduce ( org.apache.hadoop.io.Text inputKey , java.util.Iterator < org.apache.hadoop.io.Text > inputVals , org.apache.hadoop.mapred.OutputCollector < org.apache.hadoop.io.Text , slmt.courses.cp.hw3.step1.PageInfo > outputCollector , org.apache.hadoop.mapred.Reporter reporter ) throws java.io.IOException { slmt.courses.cp.hw3.step1.PageInfo info = new slmt.courses.cp.hw3.step1.PageInfo () ; info . setRank ( ( 1 / ( ( double ) ( nodeCount ) ) ) ) ; while ( inputVals . hasNext () ) info . addOutLink ( inputVals . next () . toString () ) ; outputCollector . collect ( inputKey , info ) ; } 
public static void printResult ( double [] result ) { java.lang.System.out . println ( "" ) ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { java.lang.System.out . print ( ( ( result [ i ] ) + " " ) ) ; } } 
@ java.lang.Override public void run () { run = true ; for ( ; ( ( a ) < ( steps ) ) && ( run ) ; ( a ) ++ ) { java.lang.System.out . println ( a ) ; tick () ; notifyViews () ; } a = 0 ; run = false ; } 
public void run () { while ( true ) { try { socket = servidor . accept () ; AgregarSocket ( socket ) ; java.lang.System.out . println ( ( "Nuevo cliente conectado: " + ( java.lang.String . valueOf ( socket ) ) ) ) ; readData ( socket ) ; } catch ( java.lang.Exception e ) { continue; } } } 
public org.dama.datasynth.test.matching.EdgeTypePool < XType , YType > . Entry pickRandomEdgeX ( XType xvalue ) { java.util.ListIterator < org.dama.datasynth.test.matching.EdgeTypePool < XType , YType > . Entry > iterator = entries . listIterator () ; while ( iterator . hasNext () ) { org.dama.datasynth.test.matching.EdgeTypePool < XType , YType > . Entry entry = iterator . next () ; if ( ( entry.xvalue . compareTo ( xvalue ) ) == 0 ) { iterator . remove () ; return entry ; } } return null ; } 
public static void ReadMovie () { java.io.BufferedReader br = null ; java.lang.String strLine = "" ; try { br = new java.io.BufferedReader ( new java.io.FileReader ( "\\files\\Movie1.txt" ) ) ; while ( ( strLine = br . readLine () ) != null ) { eu.ooti.forumlite.String_show . string_show ( strLine ) ; java.lang.Thread . sleep ( 2000 ) ; } } catch ( java.lang.Exception e ) {} } 
private void run ( java.lang.String fileName ) { printWelcomeMsg () ; java.lang.System.out . println ( tempRH . initialize ( fileName ) ) ; Tempo.Tempo.sc = new java.util.Scanner ( java.lang.System.in ) ; Tempo.Tempo.run = true ; while ( Tempo.Tempo.run ) { java.util.ArrayList < java.lang.String > output = listenForInput () ; for ( java.lang.String line : output ) { java.lang.System.out . println ( line ) ; } } } 
private net.minecraft.item.ItemStack getFirstStackHasBlock () { for ( int i = 0 ; i < ( inItems . getSlots () ) ; ++ i ) { if ( ! ( inItems . getStackInSlot ( i ) . isEmpty () ) ) return inItems . getStackInSlot ( i ) ; } return net.minecraft.item.ItemStack.EMPTY ; } 
void findBackward ( java.lang.String pattern ) { LineEditor.ElementDPtr temp = head ; while ( ( ( temp . getValue () ) != pattern ) || ( temp != ( current ) ) ) { temp = temp . getNext () ; } if ( ( temp . getValue () ) == pattern ) { current = temp ; } else { java.lang.System.out . println ( ( ( "STRING " + pattern ) + " NOT FOUND." ) ) ; } } 
public boolean containsAddress ( java.lang.String address ) { if ( ( this . address . size () ) != 0 ) { for ( int i = 0 ; i < ( this . address . size () ) ; i ++ ) { if ( this . address . get ( i ) . equals ( address ) ) { return true ; } } } return false ; } 
public static void remove ( int index ) { TestListReferenceBased.Node ptr = TestListReferenceBased.head ; TestListReferenceBased.Node nxt = TestListReferenceBased.head . getNext () ; for ( int x = 1 ; x < index ; x ++ ) { ptr = ptr . getNext () ; nxt = nxt . getNext () ; } ptr . setNext ( ptr . getNext () . getNext () ) ; nxt . setNext ( null ) ; } 
public static edu.ucsd.sccn.LSL.StreamInfo [] resolve_streams ( double wait_time ) { com.sun.jna.Pointer [] buf = new com.sun.jna.Pointer [ 1024 ] ; int num = edu.ucsd.sccn.LSL.inst . lsl_resolve_all ( buf , buf.length , wait_time ) ; edu.ucsd.sccn.LSL.StreamInfo [] res = new edu.ucsd.sccn.LSL.StreamInfo [ num ] ; for ( int k = 0 ; k < num ; k ++ ) res [ k ] = new edu.ucsd.sccn.LSL.StreamInfo ( buf [ k ] ) ; return res ; } 
public void insert ( int element ) { this . Heap [ ( ( this . size ) ++ ) ] = element ; int current = ( this . size ) - 1 ; while ( ( this . Heap [ current ] ) > ( this . Heap [ this . parent ( current ) ] ) ) { this . swap ( current , this . parent ( current ) ) ; current = this . parent ( current ) ; } } 
public java.util.ArrayList < java.lang.String > getCategories ( java.util.ArrayList < com.fromdev.android.entity.Question > questionList ) { java.util.ArrayList < java.lang.String > mCNameList = new java.util.ArrayList <> () ; for ( int i = 0 ; ( questionList != null ) && ( i < ( questionList . size () ) ) ; i ++ ) { if ( ! ( mCNameList . contains ( questionList . get ( i ) . getCategory () ) ) ) mCNameList . add ( questionList . get ( i ) . getCategory () ) ; } return mCNameList ; } 
@ java.lang.Override public void addGraphCode ( java.util.HashMap < java.lang.String , java.lang.String > items ) { for ( int i = 0 ; i < ( codeGetters . size () ) ; i ++ ) { sb . append ( codeGetters . get ( i ) . getCode ( items ) ) ; } } 
@ java.lang.Override public int skip ( int size ) throws java.io.IOException { byte [] temp = new byte [ java.lang.Math . min ( org.verapdf.cos.filters.BF_BUFFER_SIZE , size ) ] ; int skipped = 0 ; while ( skipped != size ) { int read = this . read ( temp , java.lang.Math . min ( ( size - skipped ) , org.verapdf.cos.filters.BF_BUFFER_SIZE ) ) ; if ( read == ( - 1 ) ) { return skipped ; } else { skipped += read ; } } return skipped ; } 
public void run () { while ( ( inspecteeThread . getState () ) != ( java.lang.Thread.State.TERMINATED ) ) { try { java.util.Map < java.lang.Thread , java.lang.StackTraceElement [] > stacks = java.lang.Thread . getAllStackTraces () ; java.lang.System.out . println ( java.util.Arrays . toString ( stacks . get ( inspecteeThread ) ) ) ; } catch ( java.lang.Exception e ) {} } } 
protected byte [] convertBytes ( java.util.ArrayList < java.lang.Integer > list ) { if ( list == null ) return null ; byte [] ret = new byte [ list . size () ] ; java.util.Iterator < java.lang.Integer > iterator = list . iterator () ; for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { ret [ i ] = iterator . next () . byteValue () ; } return ret ; } 
public double averagePopulation () { double average ; long total = 0 ; for ( int i = 0 ; i < ( population . size () ) ; i ++ ) { total += population . get ( i ) . getEvaluation () ; } average = total / ( population . size () ) ; return average ; } 
public int findNodeNumber ( int key ) { edu.oakland.production.ClassProject.Database.Node focusNode = this . binaryTreeDatabase . getRootNode () ; int nodeCount = 0 ; while ( ( focusNode . getKey () ) != key ) { if ( key < ( focusNode . getKey () ) ) { focusNode = focusNode.leftChild ; } else { focusNode = focusNode.rightChild ; } if ( focusNode == null ) return nodeCount ++ ; nodeCount ++ ; } return nodeCount ++ ; } 
public static java.lang.String readRequestFile ( java.lang.String fileName ) throws java.lang.Exception { java.io.InputStream is = new java.io.FileInputStream ( fileName ) ; java.io.BufferedReader buf = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.String line = buf . readLine () ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; while ( line != null ) { sb . append ( line ) ; line = buf . readLine () ; } return sb . toString () ; } 
private static java.lang.String getRequiredSpaces ( java.lang.String reference , java.lang.String message ) { java.lang.String res = "" ; int requiredSpaces = ( ( reference . length () ) - ( message . length () ) ) - 4 ; for ( int i = 0 ; i < requiredSpaces ; i ++ ) { res = res + " " ; } return res ; } 
public int getBacklogMarkerPosition () { try { synchronized ( data ) { for ( int i = 0 ; i < ( data . size () ) ; i ++ ) { com.irccloud.android.data.model.Event e = data . get ( i ) ; if ( ( e != null ) && ( ( e.row_type ) == ( com.irccloud.android.fragment.MessageViewFragment.ROW_BACKLOGMARKER ) ) ) { return i ; } } } } catch ( java.lang.Exception e ) {} return - 1 ; } 
@ java.lang.Override public void onMessage ( int instanceId , java.lang.String message ) { int size = java.lang.Integer . parseInt ( message ) ; byte [] buffer = new byte [ size ] ; for ( int i = 0 ; i < size ; ++ i ) buffer [ i ] = 'p' ; java.lang.String result = new java.lang.String ( buffer ) ; postMessage ( instanceId , result ) ; } 
public void geometricSeriesApproximation ( double x ) { double nextApproximation = x ; for ( int i = 0 ; i < ( this . steps ) ; i ++ ) { nextApproximation = nextApproximation * x ; } this . approximation = ( this . lastApproximation ) + nextApproximation ; ( this . steps ) ++ ; if ( ! ( isAccurate () ) ) { geometricSeriesApproximation ( x ) ; } else { return; } } 
public java.util.ArrayList < csv.Person > readCsv ( java.io.InputStream is ) throws java.io.IOException { java.io.BufferedInputStream bis = new java.io.BufferedInputStream ( is ) ; java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( bis ) ) ; try { java.lang.String line ; while ( ( line = reader . readLine () ) != null ) { csv.Person a = null ; parsedPersons . add ( a . toPerson ( line ) ) ; } } catch ( java.lang.Exception e ) { java.lang.System.out . println ( e . getMessage () ) ; } return parsedPersons ; } 
public void removeOne ( T item ) { nodes.TreeNode < T > current = root ; while ( current != null ) { nodes.TreeNode < T > next = current . checkNode ( item ) ; if ( current == next ) { current . deincrementItemCount () ; return; } else current = next ; } } 
public void write ( byte [] data ) { int index = 0 ; while ( index < ( clientCount ) ) { if ( clients [ index ] . active () ) { clients [ index ] . write ( data ) ; index ++ ; } else { removeIndex ( index ) ; } } } 
public java.lang.Double [] getOrientation () { if ( ( orientationBuffer . size () ) == 0 ) { return null ; } java.util.ArrayList < java.lang.Double > tmpOrientation = orientationBuffer . remove ( 0 ) ; java.lang.Double [] orientation = new java.lang.Double [ 7 ] ; for ( int i = 0 ; i < 7 ; i ++ ) { orientation [ i ] = tmpOrientation . remove ( 0 ) ; } return orientation ; } 
@ java.lang.Override public void HandleTopNewsIds ( java.lang.String data ) { try { org.json.JSONArray jsonArray = new org.json.JSONArray ( data ) ; for ( int i = 0 ; i < ( jsonArray . length () ) ; i ++ ) { topNewsArray . add ( jsonArray . getString ( i ) ) ; } getArticleInfo ( 30 ) ; } catch ( org.json.JSONException e ) { e . printStackTrace () ; } } 
@ java.lang.Override public void remove ( int index ) { if ( ( index < 0 ) || ( index >= ( accommodated ) ) ) { throw new java.lang.IndexOutOfBoundsException () ; } for ( int i = index ; i < ( ( accommodated ) - 1 ) ; i ++ ) { array [ i ] = array [ ( i + 1 ) ] ; } ( accommodated ) -- ; } 
@ java.lang.Override public void setCurrentToggleState ( java.lang.String key ) { for ( int i = 0 ; i < ( states . size () ) ; i ++ ) { if ( states . get ( i ) . getKey () . equals ( key ) ) { currentStateIndex = i ; init () ; return; } } throw new java.lang.IllegalArgumentException ( "No Toggle States match the key you have given" ) ; } 
public void makeSchedule () { setDifficulties () ; java.util.List < symposium.Panel > pnlCollection = symposium.ScheduleData . instance () . getFreePanels () ; while ( ( pnlCollection . size () ) > 0 ) { this . schedule ( pnlCollection . get ( 0 ) ) ; } setAssignedPanelsMessages () ; } 
private void setKi ( javax.swing.JCheckBox chkbx ) { optionsView . setKi ( chkbx ) ; playerIsKi = new boolean [ this . player ] ; for ( int i = 0 ; i < ( this . playerIsKi . length ) ; i ++ ) { this . playerIsKi [ i ] = this . optionsView . getKiBox () [ i ] . isSelected () ; } } 
public static void main ( java.lang.String [] args ) { int n = 10 ; princeton.datastructures.deque.Deque < java.lang.Integer > deq = new princeton.datastructures.deque.Deque < java.lang.Integer > () ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 ) == 0 ) { deq . addFirst ( i ) ; } else { deq . addLast ( i ) ; } } for ( java.lang.Integer i : deq ) { java.lang.System.out . println ( i ) ; } } 
private void applyAndAnimateRemovals ( java.util.List < hk.ust.cse.hunkim.questionroom.BaseActivity.RoomInfo > roomInfos ) { for ( int i = ( roomInfoList . size () ) - 1 ; i >= 0 ; i -- ) { final hk.ust.cse.hunkim.questionroom.BaseActivity.RoomInfo roomInfo = roomInfoList . get ( i ) ; if ( ! ( roomInfos . contains ( roomInfo ) ) ) { removeItem ( i ) ; } } } 
public static boolean deletePhSensor ( final java.lang.String name ) { java.lang.String realName = name . replace ( " " , "_" ) ; java.util.Iterator < com.sb.elsinore.inputs.PhSensor > iterator = com.sb.elsinore.LaunchControl.phSensorList . iterator () ; com.sb.elsinore.inputs.PhSensor tSensor ; while ( iterator . hasNext () ) { tSensor = iterator . next () ; if ( tSensor . getName () . equalsIgnoreCase ( realName ) ) { iterator . remove () ; return true ; } } return false ; } 
@ java.lang.Override public homework.hw3.DoubleStack clone ( ) throws java.lang.CloneNotSupportedException { homework.hw3.DoubleStack stackclone = new homework.hw3.DoubleStack () ; for ( int i = ( stack . size () ) - 1 ; i >= 0 ; i -- ) { stackclone . push ( stack . get ( i ) ) ; } return stackclone ; } 
void factr () { if ( ( tail.data ) == null ) return; int tmp = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( tail.data ) ) ) ; i ++ ) { tmp *= i ; } tail.data = ( ( double ) ( tmp ) ) ; } 
public com.SIMRacingApps.Data setVolume ( double percentage ) { synchronized ( m_clips ) { for ( int i = 0 ; i < ( m_clips . size () ) ; i ++ ) { m_clips . get ( i ) . setVolume ( percentage ) ; } } synchronized ( m_volume ) { m_volume = percentage ; } return getVolume () ; } 
private boolean isSorted ( java.lang.Comparable [] c , int a , int b ) { for ( int i = b - 1 ; i >= a ; i -- ) { if ( org.magicminds.one.util.Sorter . less ( c [ ( i + 1 ) ] , c [ i ] ) ) { return false ; } } return true ; } 
public static java.util.List paserLineEnd ( java.lang.String content ) { java.util.List < java.lang.Integer > lines = new java.util.ArrayList < java.lang.Integer > () ; int length = content . length () ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( content . charAt ( i ) ) == '\n' ) { lines . add ( i ) ; } } return lines ; } 
public static void printIndexBoard () { java.lang.System.out . println () ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( ( ( i % 3 ) == 0 ) && ( i != 0 ) ) { java.lang.System.out . println () ; java.lang.System.out . println ( "-------------" ) ; } java.lang.System.out . print ( ( " | " + ( i + 1 ) ) ) ; } java.lang.System.out . println () ; } 
public void multiply ( solver.Polynomial p ) { solver.Polynomial output = new solver.Polynomial () ; solver.Term current = p . getFirst () ; if ( ( first ) == null ) { first = p . getFirst () ; ( size ) ++ ; } else { while ( current != null ) { solver.Polynomial temp = new solver.Polynomial ( this . getFirst () ) ; temp . multiply ( current ) ; output . add ( temp ) ; current = current . getNext () ; } } } 
public static boolean isXml ( java.io.File file ) throws edu.brandeis.cs.nlp.mae.io.MaeIOException { try { java.util.Scanner scanner = new java.util.Scanner ( new java.io.BufferedReader ( new java.io.FileReader ( file ) ) ) ; while ( scanner . hasNext () ) { java.lang.String nextLine = scanner . nextLine () . trim () ; if ( ( nextLine . length () ) > 1 ) { return nextLine . startsWith ( "<?xml" ) ; } } } catch ( java.io.FileNotFoundException e ) { throw new edu.brandeis.cs.nlp.mae.io.MaeIOException ( "file not found" , e ) ; } return false ; } 
@ java.lang.Override public T get ( int index ) { if ( ( size () ) <= index ) throw new java.util.NoSuchElementException ( "The required index isn't in the list" ) ; lists.linkedlist.ListNode < T > current = firstNode ; while ( index > 0 ) { current = current . getNext () ; index -- ; } return current . getData () ; } 
public boolean removeOrder ( PurchasedItem item ) { if ( ( numItems ) > 0 ) { for ( int i = 0 ; i < ( numItems ) ; i ++ ) { if ( items [ i ] . equals ( item ) ) { for ( int j = i + 1 ; j < ( numItems ) ; j ++ ) { items [ ( j - 1 ) ] = items [ j ] ; } ( numItems ) -- ; return true ; } } } return false ; } 
private boolean mergeLine ( java.util.List < nz.ac.auckland.alm.EmptySpace > line , nz.ac.auckland.alm.algebra.IDirection direction ) { while ( ( line . size () ) > 1 ) { nz.ac.auckland.alm.EmptySpace area1 = line . get ( 0 ) ; nz.ac.auckland.alm.EmptySpace area2 = line . get ( 1 ) ; if ( ! ( merge ( area1 , area2 , direction ) ) ) return false ; line . remove ( area2 ) ; } return true ; } 
@ java.lang.Override protected void resetGame () { super . resetGame () ; m_deck . shuffle () ; m_board . setInitiation ( true ) ; for ( int i = 0 ; i < ( m_board . getMaxCardsX () ) ; i ++ ) { for ( int j = 0 ; j < ( i + 1 ) ; j ++ ) { m_board . addCard ( m_deck . dealCard () , i ) ; } } m_board . setInitiation ( false ) ; stats . startTimer () ; } 
private int findRandomInstance () { int random_instance = ( ( int ) ( ( java.lang.Math . random () ) * ( used.length ) ) ) ; while ( used [ random_instance ] ) { random_instance ++ ; if ( random_instance >= ( used.length ) ) random_instance = 0 ; } used [ random_instance ] = true ; return random_instance ; } 
public int getIndexFromValue ( java.lang.String [] list , java.lang.String v ) { for ( int i = 0 ; i != ( list.length ) ; i ++ ) { if ( list [ i ] . equals ( v ) ) return i ; } return 0 ; } 
public java.util.List < net.sf.marineapi.nmea.util.Measurement > getMeasurements () { java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > result = new java.util.ArrayList < net.sf.marineapi.nmea.util.Measurement > () ; for ( int i = 0 ; i < ( getFieldCount () ) ; i += net.sf.marineapi.nmea.parser.XDRParser.DATA_SET_LENGTH ) { net.sf.marineapi.nmea.util.Measurement value = fetchValues ( i ) ; if ( ! ( value . isEmpty () ) ) { result . add ( value ) ; } } return result ; } 
public static ca.claytonrogers.Common.Deck getShuffledDeck () { ca.claytonrogers.Common.Deck deck = new ca.claytonrogers.Common.Deck () ; for ( int i = 1 ; i <= 13 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { deck . push ( new ca.claytonrogers.Common.Card ( i , false , Card.Suit . values () [ j ] ) ) ; } } deck . shuffle ( Constants.random ) ; return deck ; } 
public boolean hasOrders ( java.lang.String value ) { for ( int i = 0 ; i < ( orderFields . size () ) ; i ++ ) { java.lang.String option = ( ( java.lang.String ) ( orderFields . elementAt ( i ) ) ) ; if ( ( option . toLowerCase () . compareTo ( value . toLowerCase () ) ) == 0 ) return true ; } return false ; } 
public void initializeRandom () { for ( int row = 0 ; row < ( width ) ; row ++ ) { for ( int col = 0 ; col < ( height ) ; col ++ ) { if ( ( random . nextDouble () ) < ( RANDOM_FILL_FACTOR ) ) { level [ row ] [ col ] = getRandomCharFromLevelMapping () ; } else { level [ row ] [ col ] = ' ' ; } } } initControllers () ; } 
public void updateSelection ( java.lang.String selection ) { java.util.Enumeration < javax.swing.AbstractButton > buttons = btns . getElements () ; while ( buttons . hasMoreElements () ) { javax.swing.JToggleButton b = ( ( javax.swing.JToggleButton ) ( buttons . nextElement () ) ) ; if ( b . getActionCommand () . equals ( selection ) ) { btns . clearSelection () ; b . setSelected ( true ) ; break; } } } 
private java.lang.Object readArray ( com.cedarsoftware.util.io.JsonObject object ) throws java.io.IOException { final java.util.Collection array = new java.util.ArrayList () ; while ( true ) { skipWhitespace () ; final java.lang.Object o = readValue ( object ) ; if ( o != ( com.cedarsoftware.util.io.JsonParser.EMPTY_ARRAY ) ) { array . add ( o ) ; } final int c = skipWhitespaceRead () ; if ( c == ']' ) { break; } else if ( c != ',' ) { error ( "Expected ',' or ']' inside array" ) ; } } return array . toArray () ; } 
@ java.lang.Override public void onClick ( com.eemc.aida.DialogInterface p1 , int p2 ) { setCardView ( 0 ) ; symad.showing . clear () ; for ( int i = 0 ; i < ( symnum ) ; ++ i ) { if ( syms . get ( i ) . demangledname . contains ( kw . getText () . toString () ) ) { symad.showing . add ( i ) ; } } symad . notifyDataSetChanged () ; } 
public void add ( T n ) { heap . add ( null ) ; int index = ( heap . size () ) - 1 ; while ( ( index > 0 ) && ( ( heap . get ( getParent ( index ) ) . compareTo ( n ) ) == 1 ) ) { heap . set ( index , heap . get ( getParent ( index ) ) ) ; index = getParent ( index ) ; } heap . set ( index , n ) ; } 
@ org.junit.BeforeClass public static void init ( ) throws java.io.IOException , java.lang.InterruptedException , java.sql.SQLException { if ( ! ( org.maxgamer.rs.TitanTest.initialized ) ) { org.maxgamer.rs.TitanTest.initialized = true ; org.maxgamer.rs.core.Core . start () ; while ( ( org.maxgamer.rs.core.Core . getServer () . getTicks () ) <= 0 ) { java.lang.Thread . sleep ( 1 ) ; } } } 
public void preencheVagas () { boolean [] vagas = setor . vagas_Disponiveis () ; int progress = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) { if ( vagas [ i ] ) { ++ progress ; paineis [ i ] . setBackground ( java.awt.Color.green ) ; } else paineis [ i ] . setBackground ( java.awt.Color.red ) ; } progress = ( progress * 100 ) / 16 ; progressBar . setValue ( progress ) ; } 
public void run ( int sleepTime ) { while ( ( ! ( _programComplete ) ) && ( ! ( com.laboon.SystemSettings . checkForStop () ) ) ) { if ( sleepTime > 0 ) { try { java.lang.Thread . sleep ( sleepTime ) ; } catch ( java.lang.InterruptedException iex ) {} } resetUpdates () ; _mp . highlightChar ( _pa , _x , _y ) ; executeOneStep () ; _mp . setStack ( _ps . toString () ) ; _mp . refresh ( _updateTa , _updateStack , _updateOutput ) ; } } 
private void removeWeakSpecies () { int sum = totalAverageFitness () ; for ( int s = 0 ; s < ( getSpecies () . size () ) ; s ++ ) { com.starflask.JavaNESBrain.evolution.Species specie = getSpecies () . get ( s ) ; float breed = com.starflask.JavaNESBrain.utils.FastMath . floor ( ( ( ( specie.averageFitness ) / sum ) * ( Population ) ) ) ; if ( breed < 1 ) { species . remove ( specie ) ; } } } 
@ java.lang.Override public synchronized void run () { rootDir = new java.io.File ( t2_01_zadaca_3.T2_01_zadaca_3.rootDirectory ) ; while ( running ) { active = true ; try { java.lang.Thread . sleep ( ( ( secondsNum ) * 1000 ) ) ; } catch ( java.lang.InterruptedException ex ) { java.lang.Thread . currentThread () . interrupt () ; active = false ; } } } 
public static void generateDataForCourse ( java.lang.String courseName ) { long numOfInstr = ( teammates.client.scripts.DataGenerator.random . nextInt ( ( ( ( teammates.client.scripts.DataGenerator.MAX_NUM_OF_INSTRUCTOR_PER_COURSES ) - ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ) + 1 ) ) ) + ( teammates.client.scripts.DataGenerator.MIN_NUM_OF_INSTRUCTOR_PER_COURSES ) ; for ( int j = 0 ; j < numOfInstr ; j ++ ) { java.lang.String instrName = ( ( "Instr" + j ) + "_of_" ) + courseName ; teammates.client.scripts.DataGenerator.instructors . put ( instrName , courseName ) ; } teammates.client.scripts.DataGenerator . generateStudentsDataForCourse ( courseName ) ; } 
public void removeUserSession ( java.lang.String sUserId , java.lang.String sSession ) { synchronized ( nl.ru.crpstudio.CrpUtil.userCache ) { for ( int i = 0 ; i < ( nl.ru.crpstudio.CrpUtil.userCache . size () ) ; i ++ ) { nl.ru.crpstudio.UserSession oThis = nl.ru.crpstudio.CrpUtil.userCache . get ( i ) ; if ( ( oThis.userId . equals ( sUserId ) ) && ( oThis.sessionId . equals ( sSession ) ) ) { oThis.userOkay = false ; oThis.sessionId = "" ; return; } } } } 
private static java.util.List < java.lang.Integer > generate ( int n ) { java.util.List < java.lang.Integer > factors = new java.util.ArrayList <> () ; if ( n == 1 ) { return factors ; } for ( int i = 2 ; i <= n ; i ++ ) { if ( ( n % i ) == 0 ) { factors . add ( i ) ; n /= i ; } } if ( factors . isEmpty () ) { factors . add ( n ) ; } return factors ; } 
public void removeItem ( com.brothers.travelplanner.activities.priceplan.cart.CartDataModel item ) { for ( int index = 0 ; index < ( cartDataModelList . size () ) ; index ++ ) { if ( ( ( cartDataModelList . get ( index ) . index ) == ( item.index ) ) && ( ( cartDataModelList . get ( index ) . getId () ) == ( item . getId () ) ) ) { cartDataModelList . remove ( index ) ; } } notifyDataSetChanged () ; } 
public static com.flatworks.games.flatcraft.world.World simulateWorld ( com.flatworks.games.flatcraft.world.World world ) { com.flatworks.games.flatcraft.world.WorldGenerator . state ( "Simulating World..." ) ; for ( int i = 0 ; i < 200 ; i ++ ) { world . runTick ( true ) ; com.flatworks.games.flatcraft.world.WorldGenerator . progress ( ( 0.5F + ( ( ( float ) ( ( ( double ) ( i ) ) / ( ( double ) ( 200 ) ) ) ) * 0.5F ) ) ) ; } return world ; } 
private void logKeys ( java.util.List < org.jfl110.api.auth.rolling.RollingKey > sortedKeys ) { for ( int i = 0 ; i < ( sortedKeys . size () ) ; i ++ ) { org.jfl110.api.auth.rolling.RollingKey key = sortedKeys . get ( i ) ; java.lang.System.out . println ( ( ( ( ( ( ( ( "Key[" + i ) + "] " ) + ( key . keyNumber () ) ) + " " ) + ( key . validFrom () ) ) + " " ) + ( key . validForSeconds () ) ) ) ; } } 
private void initUserFields () { java.util.List < java.lang.String > userData = mDataManager . getPreferencesManager () . loadUserProfileData () ; for ( int i = 0 ; i < ( mUserInfoViews . size () ) ; i ++ ) { mUserInfoViews . get ( i ) . setText ( userData . get ( i ) ) ; } mNavTxtEmailView . setText ( userData . get ( 1 ) ) ; mNavTxtNameView . setText ( userData . get ( ( ( userData . size () ) - 1 ) ) ) ; } 
private traer.physics.Particle createParticle ( int x , int y ) { synchronized ( m_particleSystem ) { traer.physics.Particle newParticle = m_particleSystem . makeParticle ( campaignencyclopedia.display.swing.graphical.CampaignEntityGraphCanvas.PARTICLE_MASS , x , y , 0 ) ; for ( int i = 0 ; i < ( m_particleSystem . numberOfParticles () ) ; i ++ ) { traer.physics.Particle p = m_particleSystem . getParticle ( i ) ; if ( p . equals ( newParticle ) ) { continue; } m_particleSystem . makeAttraction ( p , newParticle , campaignencyclopedia.display.swing.graphical.CampaignEntityGraphCanvas.REPULSIVE_FORCE , campaignencyclopedia.display.swing.graphical.CampaignEntityGraphCanvas.MIN_REPULSIVE_DISTANCE ) ; } return newParticle ; } } 
private static java.lang.String inputStreamToString ( java.io.InputStream is ) throws java.io.IOException { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( is ) ) ; java.lang.StringBuilder responseStringBuilder = new java.lang.StringBuilder () ; java.lang.String line ; while ( ( line = reader . readLine () ) != null ) { responseStringBuilder . append ( line ) ; } return responseStringBuilder . toString () ; } 
private java.lang.Integer compareBits ( java.lang.String a , java.lang.String b ) { java.lang.System.out . println ( b ) ; int count = 0 ; for ( int i = 0 ; i < ( java.lang.Math . min ( a . length () , b . length () ) ) ; i ++ ) { if ( ! ( ( a . indexOf ( i ) ) == ( b . indexOf ( i ) ) ) ) return count ; count ++ ; } return count ; } 
public static double timeSortedInput ( java.lang.String alg , int n , int trials ) { double total = 0.0 ; java.lang.Double [] a = new java.lang.Double [ n ] ; for ( int t = 0 ; t < trials ; t ++ ) { for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = 1.0 * i ; } total += SortCompare . time ( alg , a ) ; } return total ; } 
private java.lang.String toBinaryString ( int number ) { java.lang.StringBuilder temp = new java.lang.StringBuilder ( java.lang.Integer . toHexString ( number ) ) ; int length = temp . length () ; for ( int i = 0 ; i < ( 4 - length ) ; i ++ ) temp . append ( "0" ) . append ( temp ) ; return temp . toString () ; } 
private void addRow ( int row , int numInRow ) { int idxInRow = 0 ; int startVertex = ( row * numInRow ) + 1 ; int currVertex = startVertex ; while ( idxInRow < ( numInRow - 1 ) ) { addFace ( currVertex , ( currVertex + 1 ) , ( currVertex + numInRow ) ) ; addFace ( ( currVertex + 1 ) , ( ( currVertex + numInRow ) + 1 ) , ( currVertex + numInRow ) ) ; currVertex ++ ; idxInRow ++ ; } } 
protected void updateFromNameChange ( java.lang.String newHeroName ) { if ( mName . equals ( newHeroName ) ) return; mName = newHeroName ; java.lang.String imageName = mParentPresenter . getHeroImageName ( newHeroName ) ; for ( int i = 0 ; i < ( mSimilarityList . size () ) ; i ++ ) { if ( mSimilarityList . get ( i ) . equals ( imageName ) ) { mView . setHeroInRecycler ( i ) ; break; } } mParentPresenter . hideKeyboard () ; mParentPresenter . sendUpdatedHeroList () ; } 
private void setZeroValues ( java.lang.String values ) { zeroValues = new java.util.ArrayList < java.lang.Integer > () ; java.lang.String [] sr = values . split ( "," ) ; for ( int i = 0 ; i < ( sr.length ) ; i ++ ) { int num = java.lang.Integer.MIN_VALUE ; try { num = java.lang.Integer . parseInt ( sr [ i ] ) ; } catch ( java.lang.NumberFormatException nfe ) { break; } zeroValues . add ( num ) ; } } 
private int skip ( int n_skip ) throws java.io.IOException { int n_skipped = 0 ; skipWhiteSpace () ; if ( ( ( ( current ) != ',' ) && ( ( current ) != ']' ) ) && ( ( current ) != '}' ) ) { skipInner () ; n_skipped = 1 ; } while ( ( ( current ) == ',' ) && ( ( n_skipped ++ ) != n_skip ) ) { skipWhiteSpace () ; skipInner () ; } return n_skipped ; } 
public java.lang.String toString () { java.lang.String save = "[" ; int temp = start ; while ( temp != ( end ) ) { save += ( array [ temp ] ) + "," ; if ( temp == ( ( array.length ) - 1 ) ) { temp = 0 ; } else { temp ++ ; } } save += array [ temp ] ; save += "]" ; return save ; } 
private java.util.List < T > down ( int row , int column , int length ) { java.util.List < T > nodes = new java.util.ArrayList <> () ; int rowCount = rowCount () ; for ( int position = 0 ; position < length ; position ++ ) { int currentRow = row + position ; if ( currentRow >= rowCount ) { break; } T node = grid [ currentRow ] [ column ] ; nodes . add ( node ) ; } return nodes ; } 
@ java.lang.Override public com.ankurdave.part.ChildPtr find_child ( byte c ) { for ( int i = 0 ; i < ( this . num_children ) ; i ++ ) { if ( ( keys [ i ] ) == c ) { return new com.ankurdave.part.ArrayChildPtr ( children , i ) ; } } return null ; } 
public static void main ( java.lang.String [] args ) throws java.io.IOException , java.lang.ClassNotFoundException { java.net.ServerSocket sconn = null ; java.net.Socket conn = null ; antsserverdigest.gestore now ; java.lang.Thread thread ; int port = 3356 ; sconn = new java.net.ServerSocket ( port ) ; while ( true ) { try { conn = sconn . accept () ; now = new antsserverdigest.gestore ( conn ) ; thread = new java.lang.Thread ( now ) ; thread . start () ; } catch ( java.io.IOException e ) {} } } 
private int columnHeight ( int column ) { int r = 0 ; for ( ; ( r < ( this . height ) ) && ( ( this . grid [ column ] [ r ] . isEmpty () ) || ( this . grid [ column ] [ r ] . isShape () ) ) ; r ++ ) ; return ( this . height ) - r ; } 
long nextUniqueTransaction ( long time ) { long id = time ; for ( ; ; ) { long old = transactionID . get () ; if ( old >= id ) id = old + 1 ; if ( transactionID . compareAndSet ( old , id ) ) break; } return id ; } 
void update ( gt.Population otherPop ) { java.util.Enumeration < java.lang.String > players = fractions . keys () ; while ( players . hasMoreElements () ) { java.lang.String currentPlayer = players . nextElement () ; double updatedFraction = updateFraction ( currentPlayer ) ; fractions . put ( currentPlayer , updatedFraction ) ; } } 
@ java.lang.Override public void parseLine ( java.lang.String line ) { services.FavouriteQuoteImporter.LOGGER . debug ( "Parsing line: {}" , line ) ; if ( line . trim () . isEmpty () ) { return; } java.util.regex.Matcher matcher = services.FavouriteQuoteImporter.PATTERN . matcher ( line ) ; while ( matcher . find () ) { services.quotes.Quote quote = assembleQuote ( matcher ) ; quoteDao . insertQuote ( quote ) ; return; } } 
public java.lang.Long next () { long result = 0 ; while ( result == 0 ) { if ( ! ( hasNext () ) ) { throw new java.util.NoSuchElementException () ; } result = puzzleStorage.puzzles [ cursor ] ; ( cursor ) ++ ; } return result ; } 
private void remap ( wyautl.core.Automaton automaton , int from , int to ) { for ( int i = 0 ; i != ( automaton . nStates () ) ; ++ i ) { automaton . get ( i ) . remap ( from , to ) ; } } 
public static int calculateScore ( java.util.ArrayList < PairTime > pairTimes ) { int score = 0 ; for ( int i = 0 ; i < ( pairTimes . size () ) ; i ++ ) { score += pairTimes . get ( i ) . getPair () . getScore () ; } return score ; } 
public void push ( org.arcueidarc.nekoarc.types.ArcObject obj ) { for ( ; ; ) { try { stack [ ( ( sp ) ++ ) ] = obj ; return; } catch ( java.lang.ArrayIndexOutOfBoundsException e ) { ( sp ) -- ; stackgc () ; if ( ( sp ) >= ( stack.length ) ) throw new org.arcueidarc.nekoarc.NekoArcException ( "stack overflow" ) ; } } } 
@ org.springframework.scheduling.annotation.Async private void start ( java.lang.String url ) { if ( ! ( com.prapps.app.core.controller.CoreController.keepAlive ) ) { com.prapps.app.core.controller.CoreController.keepAlive = true ; while ( com.prapps.app.core.controller.CoreController.keepAlive ) { try { new java.net.URL ( url ) . openConnection () ; java.lang.Thread . sleep ( ( ( ( 1000 * 60 ) * 60 ) * 12 ) ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } } } } 
public static java.lang.String getUniqueTitle ( net.minecraft.world.World world ) { java.util.List < net.torocraft.nemesissystem.registry.Nemesis > nemeses = net.torocraft.nemesissystem.registry.NemesisRegistryProvider . get ( world ) . list () ; java.lang.String title = net.torocraft.nemesissystem.util.NemesisBuilder . getRandomTitle () ; while ( ! ( net.torocraft.nemesissystem.util.NemesisBuilder . isUniqueTitle ( title , nemeses ) ) ) { title = net.torocraft.nemesissystem.util.NemesisBuilder . getRandomTitle () ; } return title ; } 
public static void removeEmployee ( int id ) { StaffManager.Company.employeeList . remove ( ( id - 1 ) ) ; for ( int i = id - 1 ; i < ( StaffManager.Company.employeeList . size () ) ; i ++ ) { StaffManager.Company.employeeList . get ( i ) . setId ( ( i + 1 ) ) ; } } 
@ java.lang.Override public void run () { try { trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( this . offset ) ; while ( ! ( java.lang.Thread . interrupted () ) ) { trafficLightsView . changeLight ( TrafficLightsView.Light.GREEN ) ; java.lang.Thread . sleep ( greenLightDuration ) ; trafficLightsView . changeLight ( TrafficLightsView.Light.RED ) ; java.lang.Thread . sleep ( redLightDuration ) ; } } catch ( java.lang.InterruptedException ex ) { java.lang.System.out . println ( "Traffic lights modelling stopped." ) ; } } 
public int [] getOutput ( short [] pcm , int sampleRate ) { if ( pcm == null ) return null ; double [] spectrum = getSpectrum ( pcm ) ; final int amount = 100 ; int [] s = spectrumStrategy . execute ( spectrum , sampleRate ) ; for ( int i = 0 ; i < ( s.length ) ; i ++ ) { s [ i ] = ( ( int ) ( ( spectrum [ i ] ) / 1000 ) ) ; } return s ; } 
private java.lang.String _revert ( java.lang.String str ) { java.lang.String s = "" ; int len = str . length () ; for ( int i = 0 ; i < len ; i ++ ) { s += str . charAt ( ( ( len - 1 ) - i ) ) ; } return s ; } 
public java.util.Map < java.lang.Integer , int [] > getListOfCoordinates () { java.util.Map < java.lang.Integer , int [] > listOfCoordinates = new java.util.HashMap <> () ; int key = 0 ; for ( int x = 0 ; x < ( Game.Controllers.BoardController.BOARDSIZE ) ; x ++ ) { for ( int y = 0 ; y < ( Game.Controllers.BoardController.BOARDSIZE ) ; y ++ ) { listOfCoordinates . put ( key , new int [] { x , y } ) ; key ++ ; } } return listOfCoordinates ; } 
protected static org.matheclipse.core.interfaces.IAST sortResults ( org.matheclipse.core.interfaces.IAST resultList ) { for ( int i = 1 ; i < ( resultList . size () ) ; i ++ ) { if ( resultList . get ( i ) . isList () ) { org.matheclipse.core.eval.EvalAttributes . sort ( ( ( org.matheclipse.core.interfaces.IAST ) ( resultList . get ( i ) ) ) ) ; } } return resultList ; } 
public java.lang.Object [] [] toMultiArrayNumber ( com.softserve.edu.atqc.data.apps.ApplicationSources applicationSources , java.util.List < ? > list ) { java.lang.Object [] [] array = toMultiArrayNumber ( 2 , list ) ; for ( int i = 0 ; i < ( list . size () ) ; i ++ ) { array [ i ] [ 0 ] = applicationSources ; } return array ; } 
public void undoAddedEvent ( carelender.model.EventList eventList ) { for ( int i = 0 ; i < ( events . size () ) ; i ++ ) { for ( carelender.model.Event eventObj : eventList ) { if ( ( events . get ( i ) . getUid () ) == ( eventObj . getUid () ) ) { events . remove ( i ) ; } } } saveToFile ( filename , events ) ; } 
public int getPartyIDFromSenderInvite ( int playerID ) { java.util.List < session.Invite > myInvites = player . getInvites () ; int partyID = 0 ; for ( int i = 0 ; i < ( myInvites . size () ) ; i ++ ) { if ( playerID == ( myInvites . get ( i ) . getSenderID () ) ) { partyID = myInvites . get ( i ) . getPartyID () ; break; } } java.lang.System.out . println ( partyID ) ; return partyID ; } 
public void getMiddle () { int middle = ( size ) / 2 ; if ( ( ( size ) % 2 ) != 0 ) middle = middle + 1 ; if ( ( isEmpty () ) == false ) { Node temp = head ; int i = 1 ; while ( i != middle ) { temp = temp . getNext () ; i = i + 1 ; } java.lang.System.out . println ( temp . getNext () . getData () ) ; } else { java.lang.System.out . println ( "No data exist" ) ; } } 
@ org.springframework.web.bind.annotation.RequestMapping ( value = "/addCommodity" , method = org.springframework.web.bind.annotation.RequestMethod.PUT ) public java.lang.String addCommodity ( @ org.springframework.web.bind.annotation.RequestParam ( value = "purchaseCaseId" , required = true ) java.lang.String purchaseCaseId , @ org.springframework.web.bind.annotation.RequestParam ( value = "commodityIds" , required = true ) java.lang.String [] commodityIds ) { java.lang.Integer [] ids = new java.lang.Integer [ commodityIds.length ] ; for ( int i = 0 ; i < ( commodityIds.length ) ; i ++ ) { ids [ i ] = java.lang.Integer . valueOf ( commodityIds [ i ] ) ; } purchaseCaseService . addPurchaseCaseIdToCommoditys ( purchaseCaseId , ids ) ; return com.jersey.purchaseCase.controller.PurchaseCaseController.REDIRECT_ADD_COMMODITY . replace ( "{id}" , purchaseCaseId ) ; } 
private boolean checkIfAllTilesAreInPlace () { for ( int i = 0 ; i < ( currentField.length ) ; i ++ ) { for ( int j = 0 ; j < ( currentField [ i ] . length ) ; j ++ ) { if ( ! ( currentField [ i ] [ j ] [ 0 ] . equals ( solutionField [ i ] [ j ] [ 0 ] ) ) ) return false ; } } return true ; } 
private boolean isContains ( java.lang.String address , java.lang.String fromRule ) { java.lang.String [] fromRules = fromRule . split ( ";" ) ; for ( int i = 0 ; i < ( fromRules.length ) ; i ++ ) { if ( ( address != null ) && ( address . contains ( fromRules [ i ] ) ) ) { return true ; } } return false ; } 
public static com.sb.elsinore.Temp findTemp ( final java.lang.String name ) { java.util.Iterator < com.sb.elsinore.Temp > iterator = com.sb.elsinore.LaunchControl.tempList . iterator () ; com.sb.elsinore.Temp tTemp ; while ( iterator . hasNext () ) { tTemp = iterator . next () ; if ( ( tTemp . getName () . equalsIgnoreCase ( name ) ) || ( tTemp . getProbe () . equalsIgnoreCase ( name ) ) ) { return tTemp ; } } return null ; } 
@ java.lang.Override public void run () { fractureanalysis.table.TableUtils tu = new fractureanalysis.table.TableUtils () ; for ( int i = 0 ; i < ( headerValues.length ) ; i ++ ) { tvDataset . getColumns () . add ( tu . createColumn ( i , headerValues [ i ] ) ) ; } } 
protected java.util.ArrayList < pbs.parser.Statement > stmtList () { java.util.ArrayList < pbs.parser.Statement > stmtlist = new java.util.ArrayList < pbs.parser.Statement > () ; pbs.parser.Statement s = nextStatement () ; while ( s != null ) { stmtlist . add ( s ) ; s = nextStatement () ; } return stmtlist ; } 
public java.util.ArrayList < graph.Vector > getVectorsPointingAway ( graph.Point p ) { java.util.ArrayList < graph.Vector > vs = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( getEdges () . size () ) ; i ++ ) { if ( getEdges () . get ( i ) . getP1 () . equals ( p ) ) { vs . add ( getEdges () . get ( i ) ) ; } } return vs ; } 
public void initializeComponents () { componentSelectionPanel . clear () ; for ( int i = 0 ; i < ( data.componentIdList . size () ) ; i ++ ) { com.google.gwt.user.client.ui.HTML item = new com.google.gwt.user.client.ui.HTML ( data.componentIdList . get ( i ) ) ; item . setStyleName ( "wmt-ComponentSelectionMenuItem" ) ; item . addStyleDependentName ( "missing" ) ; componentSelectionPanel . add ( item ) ; } } 
public void crossover ( ga.Genes genes ) { java.util.Random rand = new java.util.Random () ; for ( int i = 2 ; i < ( genes . getNum () ) ; i += 2 ) { int cuttingPoint = ( rand . nextInt ( ( ( genes . getDim () ) - 1 ) ) ) + 1 ; ga.Gene . shiftDNASection ( genes . getAt ( i ) , genes . getAt ( ( i + 1 ) ) , cuttingPoint , genes . getDim () ) ; } } 
@ java.lang.SuppressWarnings ( value = "DefaultLocale" ) private static boolean checkExtension ( java.lang.String path , java.lang.String [] extensions ) { if ( path == null ) { return false ; } for ( int i = 0 ; i < ( extensions.length ) ; i ++ ) { if ( path . toLowerCase () . endsWith ( extensions [ i ] ) ) { return true ; } } return false ; } 
private boolean isPrime ( int number ) { if ( number == 2 ) { return true ; } if ( ( number < 2 ) || ( ( number % 2 ) == 0 ) ) { return false ; } for ( int oddNumber = 3 ; oddNumber <= ( java.lang.Math . sqrt ( number ) ) ; oddNumber += 2 ) { if ( ( number % oddNumber ) == 0 ) { return false ; } } return true ; } 
public void setOptions ( java.util.ArrayList < gui.Button > options , entity.AbstractEntity entity ) { if ( options != null ) { for ( int i = 0 ; i < ( options . size () ) ; i ++ ) { options . get ( i ) . setSize ( 30 , 30 ) ; } } else if ( entity != ( calledby ) ) { return; } calledby = entity ; this . options = options ; } 
private void animateIn () { android.support.v7.widget.ActionMenuView menuView = getMenuView () ; for ( int i = 0 , count = ( menuView == null ) ? 0 : menuView . getChildCount () ; i < count ; i ++ ) { android.view.View child = menuView . getChildAt ( i ) ; android.view.animation.Animation anim = mAnimator . getInAnimation ( child , i ) ; if ( anim != null ) child . startAnimation ( anim ) ; } } 
private void showBoardLine ( final int row ) { for ( int i = 0 ; i < ( game . getBoard () . getRowLength ( row ) ) ; i ++ ) { if ( ( game . getBoard () . getFigure ( row , i ) ) == null ) { java.lang.System.out . print ( com.java.laiy.view.ConsoleView.EMPTY_FIGURE ) ; } else { java.lang.System.out . print ( game . getBoard () . getFigure ( row , i ) . toString () ) ; } } java.lang.System.out . println () ; } 
@ java.lang.Override public void map ( water.util.Chunk c ) { for ( int i = 0 ; i < ( c._len ) ; ++ i ) { if ( ! ( c . isNA ( i ) ) ) c . set ( i , fromTo [ ( ( int ) ( c . at8 ( i ) ) ) ] ) ; } } 
public void gameOver () { m_game . reset () ; for ( int r = 0 ; r < ( Game.NUM_ROWS ) ; r ++ ) { for ( int c = 0 ; c < ( m_numCols ) ; c ++ ) m_map [ r ] [ c ] = null ; } parseMapFile () ; } 
private int addNumber () { java.lang.System.out . print ( "Enter contact phone number: " ) ; int tel ; while ( true ) { tel = validateNumber () ; Contact contact = getbyNumber ( tel ) ; if ( contact == null ) { java.lang.System.out . println ( "Adding new number..." ) ; } else if ( ( contact . getNumber () ) == tel ) { java.lang.System.out . println ( ( ( "That number already exists for contact " + ( contact . getName () ) ) + ". Try a different one" ) ) ; continue; } break; } return tel ; } 
public void delete ( int key ) { java.util.Iterator < QueueEntity > iter = info . iterator () ; while ( iter . hasNext () ) { QueueEntity it = iter . next () ; if ( ( it.ID ) == key ) { info . remove ( it ) ; break; } } } 
private eu.interedition.collatex.dekker.LCP_Interval [] construct_LCP_interval_array () { eu.interedition.collatex.dekker.LCP_Interval [] lcp_interval_array = new eu.interedition.collatex.dekker.LCP_Interval [ token_array . size () ] ; for ( eu.interedition.collatex.dekker.LCP_Interval interval : lcp_intervals ) { if ( ( interval.length ) == 0 ) { continue; } for ( int i = interval.start ; i <= ( interval.end ) ; i ++ ) { int tokenIndex = suffix_array [ i ] ; lcp_interval_array [ tokenIndex ] = interval ; } } return lcp_interval_array ; } 
private static javafx.animation.ParallelTransition createDynamicAtTimeStep ( java.lang.Double timeStep , tum.cms.sim.momentum.visualization.controller.CoreController coreController , tum.cms.sim.momentum.utility.csvData.reader.SimulationOutputReader simulationOutputReader ) throws java.lang.Exception { tum.cms.sim.momentum.utility.csvData.reader.SimulationOutputCluster dataStepCurrent = null ; while ( dataStepCurrent == null ) { dataStepCurrent = simulationOutputReader . asyncReadDataSet ( timeStep ) ; if ( dataStepCurrent == null ) { java.lang.Thread . sleep ( 200 ) ; } } return tum.cms.sim.momentum.visualization.utility.AnimationCalculations . updateCustomData ( simulationOutputReader . getCsvType () , dataStepCurrent , coreController ) ; } 
void printArray ( int [] array ) { for ( int i = 0 ; i < ( array.length ) ; i ++ ) { java.lang.System.out . print ( array [ i ] ) ; if ( i != ( ( array.length ) - 1 ) ) { java.lang.System.out . print ( " " ) ; } } } 
private java.lang.String getText ( final org.objectweb.asm.tree.MethodNode mn ) { org.objectweb.asm.util.Textifier tv = new org.objectweb.asm.util.Textifier () ; org.objectweb.asm.util.TraceMethodVisitor tmv = new org.objectweb.asm.util.TraceMethodVisitor ( tv ) ; mn . accept ( tmv ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for ( int i = 0 ; i < ( tv.text . size () ) ; i ++ ) { sb . append ( tv.text . get ( i ) ) ; } return sb . toString () ; } 
public void RunGame () { while ( true ) { GameOn = true ; gameStart () ; battleStart () ; while ( ( GameOn ) == true ) { battleActive () ; boolean a = battleEnd () ; if ( a == true ) { onPlayerWin () ; } if ( a == false ) { onPlayerLose () ; GameOn = false ; } } } } 
public ship.WeatherWaypoint closestWeatherWaypoint () { int theCounter = checkClosestWeather () ; for ( int i = 0 ; i < ( weatherWaypoints . size () ) ; i ++ ) { if ( i == theCounter ) { return weatherWaypoints . get ( i ) ; } } java.lang.System.out . println ( "returning Null" ) ; return new ship.WeatherWaypoint () ; } 
@ java.lang.Override protected void map ( K unused , org.apache.hadoop.io.Text urlText , edu.cornell.library.lc_converter.mapreduce.Context context ) throws java.io.IOException , java.lang.InterruptedException { java.lang.String urlString = urlText . toString () ; java.io.InputStream is = getUrl ( urlString ) ; java.util.HashSet < java.lang.String > marcRecords = marcxmlCollectionParser ( is ) . iterator () ; for ( java.lang.String marcXml = marcRecords . next () ; marcRecords . hasNext () ; marcXml = marcRecords . next () ) { context . write ( new org.apache.hadoop.io.Text ( marcXml ) , null ) ; } } 
public org.alopex.hyperios.helix.Specimen crossover ( org.alopex.hyperios.helix.Specimen mateOne , org.alopex.hyperios.helix.Specimen mateTwo ) { org.alopex.hyperios.helix.Specimen output = new org.alopex.hyperios.helix.Specimen ( true ) ; for ( int i = 0 ; i < ( output . getGenes () . length ) ; i ++ ) { if ( ( java.lang.Math . random () ) <= ( GASettings.crossoverRate ) ) { output . setGene ( i , mateOne . getGenes () [ i ] ) ; } else { output . setGene ( i , mateOne . getGenes () [ i ] ) ; } } return output ; } 
public static void generate_predicates () { for ( int current_depth = Depths.highest_depth ; current_depth > 0 ; -- current_depth ) { for ( int i = 0 ; i < current_depth ; ++ i ) { Predicates . add_entry ( Depths.DEPTHS_OUTPUT , "is_lower_than" , Depths . get_id_from_depth ( new java.lang.Integer ( i ) ) , Depths . get_id_from_depth ( new java.lang.Integer ( current_depth ) ) ) ; } } } 
public static boolean hasFallingPieces ( final java.util.List < com.gamesbykevin.yoshi.board.piece.Piece > pieces ) { for ( int i = 0 ; i < ( pieces . size () ) ; i ++ ) { final com.gamesbykevin.yoshi.board.piece.Piece piece = pieces . get ( i ) ; if ( ( ( piece . isPlaced () ) || ( piece . isDestroyed () ) ) || ( piece . isFrozen () ) ) continue; return true ; } return false ; } 
public void removeRows ( int [] indices ) { java.util.Arrays . sort ( indices ) ; for ( int i = ( indices.length ) - 1 ; i >= 0 ; i -- ) { rows . remove ( indices [ i ] ) ; } nl.gogognome.lib.swing.AbstractListTableModel . fireTableDataChanged () ; } 
public static void main ( java.lang.String [] args ) { java.util.List < java.util.List < java.lang.Integer > > list = new Solution () . combine ( 4 , 2 ) ; for ( int i = 0 ; i < ( list . size () ) ; i ++ ) { for ( int k : list . get ( i ) ) { java.lang.System.out . print ( ( k + " " ) ) ; } java.lang.System.out . println () ; } } 
private void ancestorPathCheck ( java.util.List < java.lang.String > ancestorPath , java.util.List < edu.unc.lib.dl.fedora.PID > pids ) { for ( int i = 0 ; i < ( ancestorPath . size () ) ; i ++ ) { org.junit.Assert . assertTrue ( ancestorPath . get ( i ) . equals ( ( ( ( i + 1 ) + "," ) + ( pids . get ( i ) . getId () ) ) ) ) ; } } 
public void run () { while ( true ) { java.lang.System.out . println ( "MEDIA_MANAGER: Indexing movies..." ) ; indexHelper ( new java.io.File ( mm.movieDir ) ) ; java.lang.System.out . println ( "MEDIA_MANAGER: Indexing music..." ) ; indexHelper ( new java.io.File ( mm.musicDir ) ) ; mm.isIndexed = true ; java.lang.System.out . println ( "MEDIA_MANAGER: Index complete!" ) ; if ( mm.keepIndexing ) try { java.lang.Thread . sleep ( delay ) ; } catch ( java.lang.InterruptedException e ) {} else { return; } } } 
private float [] cutArray ( int index ) { float [] retArr = new float [ filterSize ] ; int j = 0 ; for ( int i = index - ( side ) ; i <= ( index + ( side ) ) ; i ++ ) { retArr [ j ] = array [ i ] ; j ++ ; } return retArr ; } 
@ java.lang.Override public bcccp.tickets.adhoc.IAdhocTicket findTicketByBarcode ( java.lang.String findBarcode ) { for ( int i = 0 ; i < ( currentAdhocTickets . size () ) ; i ++ ) { if ( ( currentAdhocTickets . get ( i ) . getBarcode () ) == null ? findBarcode == null : currentAdhocTickets . get ( i ) . getBarcode () . equals ( findBarcode ) ) { return currentAdhocTickets . get ( i ) ; } } return null ; } 
public void lernen () { java.lang.String tf ; tf = letter . getText () . toLowerCase () ; for ( int w = 0 ; w < 26 ; w ++ ) { if ( tf . equals ( ( "" + ( alphabet [ w ] ) ) ) ) { alpha [ w ] = ja ; } } ann . backpropagate ( new com.github.jannled.lib.math.Matrix ( feld , 1 , feld.length ) , new com.github.jannled.lib.math.Matrix ( alpha , 1 , alpha.length ) ) ; } 
public int getPlayer1Score () { int score = 0 ; for ( int i = ( this . glasses . length ) - 1 ; i >= ( ( this . glasses . length ) / 2 ) ; i -- ) { if ( this . glasses [ i ] . isActive () ) break; else score ++ ; } return score ; } 
@ org.junit.Test public void rowAndColumnTest () { int rowCount = categoryTableModel . getRowCount () ; int columnCount = categoryTableModel . getColumnCount () ; for ( int i = 0 ; i < ( rowCount - 1 ) ; i ++ ) { for ( int j = 0 ; j < ( columnCount - 1 ) ; j ++ ) { org.junit.Assert . assertNotNull ( categoryTableModel . getValueAt ( i , j ) ) ; } } } 
public void killChain ( int index , tsumegoai.Stone color ) { if ( ( index < 0 ) || ( ( searchSpace [ index ] ) == null ) ) return; if ( ( searchSpace [ index ] ) == color ) { searchSpace [ index ] = null ; updateZhash ( tsumegoai.Goban.searchSpacePositions [ index ] , color ) ; for ( int i = 0 ; i < 4 ; i ++ ) { killChain ( tsumegoai.Goban.searchSpaceAdjacentIndices [ ( ( 4 * index ) + i ) ] , color ) ; } } } 
private boolean scanFieldsRelation ( java.lang.Class < ? > klass , final net.imadz.lifecycle.meta.type.RelationConstraintMetadata relation ) { for ( java.lang.Class < ? > c = klass ; ( null != c ) && ( ( java.lang.Object . class ) != c ) ; c = c . getSuperclass () ) { for ( java.lang.reflect.Field field : c . getDeclaredFields () ) { if ( hasRelationOnField ( relation , field ) ) return true ; } } return false ; } 
private void setupBoard () { for ( int yRow = 1 ; yRow <= ( length ) ; ++ yRow ) { for ( int xCol = 1 ; xCol <= ( length ) ; ++ xCol ) { org.javatuples.Pair < java.lang.Integer , java.lang.Integer > pair = org.javatuples.Pair . with ( xCol , yRow ) ; Tile tile = new Tile ( this , pair ) ; add ( tile ) ; slaves . add ( tile ) ; } } } 
private void registerSuperTypes ( java.lang.Class type ) { java.lang.Class < ? > supertype = type . getSuperclass () ; while ( ( type != null ) && ( supertype != ( java.lang.Object . class ) ) ) { if ( types . containsKey ( supertype ) ) { throw new java.lang.RuntimeException ( ( "Ambigious Puppet for " + supertype ) ) ; } types . put ( supertype , type ) ; type = ( ( type . getSuperclass () ) == type ) ? null : type . getSuperclass () ; } } 
public double [] calcScores () { for ( int i = 0 ; i < ( this . nbEntries ) ; i ++ ) { for ( int j = 0 ; j < ( this . nbMetrics ) ; j ++ ) { this . matrix [ this . nbMetrics ] [ i ] += this . matrix [ j ] [ i ] ; } } return this . matrix [ this . nbMetrics ] ; } 
public void print ( char [] [] map ) { for ( int i = 0 ; i < ( h ) ; i ++ ) { for ( int j = 0 ; j < ( w ) ; j ++ ) { java.lang.System.out . print ( map [ i ] [ j ] ) ; } java.lang.System.out . println () ; } java.lang.System.out . println () ; } 
@ org.junit.Test public void testDrawFaceUpTrainCards ( ) throws java.lang.Exception { tickets.scacciot17.tickettooride.ttr.TTRState myState = new tickets.scacciot17.tickettooride.ttr.TTRState () ; tickets.scacciot17.tickettooride.ttr.FaceUpDeck faceUpDeck = myState . getFiveUp () ; int size = faceUpDeck . size () ; for ( int i = 0 ; i < size ; i ++ ) { assertNotEquals ( faceUpDeck . getCards () . get ( i ) , null ) ; } } 
public static void reverseStatement ( java.lang.String userInput ) { java.lang.String inputReversed ; inputReversed = "" ; for ( int i = ( userInput . length () ) - 1 ; i >= 0 ; i -- ) { inputReversed = inputReversed + ( userInput . charAt ( i ) ) ; } java.lang.System.out . println ( inputReversed ) ; } 
public int getProgress () { int p = 0 ; java.util.Collection tasks = getTopLevelTasks () ; for ( java.util.Iterator iter = tasks . iterator () ; iter . hasNext () ; ) { net.sf.memoranda.Task e = ( ( net.sf.memoranda.Task ) ( iter . next () ) ) ; p += e . getProgress () ; } int size = tasks . size () ; return size == 0 ? 0 : p / size ; } 
@ java.lang.Override public void run () { java.lang.String s = "" ; for ( int i = 0 ; i < ( remoteWines . size () ) ; i ++ ) { s = ( s + ( remoteWines . get ( i ) . toString () ) ) + "\n" ; } } 
private int [] getDim ( int elements ) { int xDim = ( ( int ) ( java.lang.Math . ceil ( java.lang.Math . sqrt ( elements ) ) ) ) ; int yDim = xDim ; while ( ( xDim * ( yDim - 1 ) ) >= elements ) { yDim -- ; } return new int [] { xDim , yDim } ; } 
@ java.lang.Override public void run () { try { java.lang.Object last = null ; while ( ( last == null ) || ( ! ( last . equals ( "END" ) ) ) ) { last = nextEvent () ; instantiateService () . printNames () ; } } catch ( final java.lang.Throwable cause ) { cause . printStackTrace () ; } } 
@ java.lang.Override public final java.util.List < com.github.sdnwiselab.sdnwise.flowtable.FlowTableEntry > getNodeRules ( final byte net , final com.github.sdnwiselab.sdnwise.util.NodeAddress dst ) { java.util.List < com.github.sdnwiselab.sdnwise.flowtable.FlowTableEntry > list = new java.util.ArrayList <> () ; com.github.sdnwiselab.sdnwise.flowtable.FlowTableEntry fte ; int i = 0 ; while ( ( fte = getNodeRule ( net , dst , i ) ) != null ) { list . add ( i , fte ) ; i ++ ; } return list ; } 
public double getDropRate () { double prev = utilSpace . getUtility ( bids . get ( 0 ) ) ; double average = 0 ; for ( int i = 1 ; i < ( bids . size () ) ; i ++ ) { double curr = utilSpace . getUtility ( bids . get ( i ) ) ; average += curr - prev ; prev = curr ; } return average / ( ( bids . size () ) - 1 ) ; } 
private double calculateSquaredNorm ( final T row ) { double norm = 0.0 ; for ( int i = 1 ; i <= ( m_nFets ) ; i ++ ) { double fet = row . getFeature ( i ) ; norm += fet * fet ; } return norm ; } 
public boolean hasUpgrade ( int rarity , Lib.summon.Awakening [] awakening ) { for ( Lib.summon.Awakening a : awakening ) { for ( int i = 0 ; i < ( a.units.length ) ; i ++ ) { if ( a.units [ i ] . name . equals ( name ) ) { return hasUpgrade ( rarity , a.rarityAwakened [ i ] ) ; } } } return false ; } 
public de.tuhh.diss.plotbot.Plottable select () { int selection = - 1 ; do { selection = menu . select () ; } while ( selection < 0 ) ; while ( Button.ENTER . isDown () ) {} de.tuhh.diss.plotbot.Plottable toDraw = null ; if ( selection == 0 ) { toDraw = new de.tuhh.diss.plotbot.Anchor () ; } if ( selection == 1 ) {} return toDraw ; } 
public static java.util.List < Dimension > getHorizontalDimensions ( Dimension dime ) { java.util.List < Dimension > boxDimes = new java.util.ArrayList < Dimension > () ; for ( int y = 0 ; y < 9 ; y ++ ) { if ( y != ( dime.y ) ) { Dimension dimeCurrent = new Dimension ( dime.x , y ) ; boxDimes . add ( dimeCurrent ) ; } } return boxDimes ; } 
private void generateTraps ( int limit ) { int amountOfButtons = 10 ; int trapNumber = newRandomNumberBetween ( amountOfButtons ) ; java.lang.String logMessage = getResources () . getString ( R.string.log_trap_id ) ; int amountOfTraps = 3 ; for ( int i = 0 ; i < amountOfTraps ; i ++ ) { while ( traps . contains ( trapNumber ) ) { trapNumber = newRandomNumberBetween ( amountOfButtons ) ; } android.util.Log . i ( logMessage , java.lang.Integer . toString ( trapNumber ) ) ; traps . add ( trapNumber ) ; } } 
public static java.lang.String setLetters ( java.lang.String fullName ) { java.lang.String [] names = fullName . split ( " " ) ; java.lang.String letters = "" ; for ( int i = 0 ; i < ( names.length ) ; i ++ ) { if ( i == 2 ) break; letters += names [ i ] . charAt ( 0 ) ; } return letters . toUpperCase () ; } 
private boolean containsLinkedResource ( java.util.List < org.eclipse.core.resources.IResource > resources ) { for ( int i = 0 ; i < ( resources . size () ) ; i ++ ) { org.eclipse.core.resources.IResource resource = resources . get ( i ) ; if ( resource . isLinked () ) { return true ; } } return false ; } 
public void run () { while ( true ) { try { this . broker . receive () ; } catch ( java.io.EOFException e ) { handleConnectionException ( "Read data from client failed." , e ) ; break; } catch ( java.lang.Exception e ) { handleConnectionException ( "Client connection failed." , e ) ; break; } } } 
@ java.lang.Override protected java.lang.Object doInBackground ( java.lang.Object [] objects ) { java.lang.String methodName = "insertPersonDetails" ; webService = new com.idbi.app.network.SOAPWebservice ( mContext ) ; com.idbi.app.model.Output object = null ; getNomineeData () ; if ( ( ( nomineeDetailsList ) != null ) && ( ( nomineeDetailsList . size () ) > 0 ) ) { for ( int i = 0 ; i < ( nomineeDetailsList . size () ) ; i ++ ) { object = webService . insertUpdatePersonalDetails ( nomineeDetailsList . get ( i ) , methodName ) ; } } return object ; } 
@ java.lang.Override public void onClick ( android.view.View v ) { int index = 0 ; for ( int i = 1 ; i < ( day ) ; i ++ ) index += ( getItinerarySizeByDay ( getContext () , i ) ) - 1 ; final int indexToAssign = index ; uz.samtuit.samapp.helpers.ItineraryHelper . addNewItemFromItinerary ( getFragmentManager () , day , indexToAssign ) ; } 
private static void listItems () { for ( int I = 0 ; I < ( MainGame.items.length ) ; I ++ ) { if ( ( ( MainGame.itemDescrStrings [ I ] ) != null ) && ( ( MainGame.items [ I ] ) != 0 ) ) java.lang.System.out . println ( ( ( ( "Item " + ( MainGame.items [ I ] ) ) + ": " ) + ( MainGame.itemDescrStrings [ I ] ) ) ) ; } } 
private boolean isRowEmpty ( int startingPosition ) { int i = startingPosition ; while ( i >= 0 ) { if ( ( i % ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) == 0 ) break; i -- ; } int start = i ; for ( ; i < ( start + ( com.kiddos.nuktimetable.MainFragment.ScheduleAdapter.NUM_COL ) ) ; i ++ ) { if ( ( courses [ i ] ) != null ) { return false ; } } return true ; } 
private static void createSeries ( org.jfree.data.xy.XYSeriesCollection seriesCollection , org.nd4j.linalg.api.ndarray.INDArray data , int offset , java.lang.String name ) { int nRows = data . shape () [ 2 ] ; org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries ( name ) ; for ( int i = 0 ; i < nRows ; i ++ ) { series . add ( ( i + offset ) , data . getDouble ( i ) ) ; } seriesCollection . addSeries ( series ) ; } 
private java.util.ArrayList < java.lang.Boolean > multiplication ( java.util.ArrayList < java.lang.Boolean > multiplicand , java.util.ArrayList < java.lang.Boolean > multiplier ) { java.util.ArrayList < java.lang.Boolean > result = new java.util.ArrayList < java.lang.Boolean > () ; result . add ( false ) ; for ( int i = 0 ; i != ( multiplier . size () ) ; i ++ ) { if ( ( multiplier . get ( i ) ) == true ) { result = addition ( result , multiplicand , i ) ; } } return result ; } 
private void pushPipelineToSnapshot () { int iterationsCnt = 0 ; boolean done = false ; while ( ! done ) { iterationsCnt ++ ; org.apache.hadoop.hbase.regionserver.VersionedSegmentsList segments = pipeline . getVersionedList () ; pushToSnapshot ( segments . getStoreSegments () ) ; done = pipeline . swap ( segments , null , false ) ; if ( iterationsCnt > 2 ) { org.apache.hadoop.hbase.regionserver.CompactingMemStore.LOG . warn ( ( "Multiple unsuccessful attempts to push the compaction pipeline to snapshot," + " while flushing to disk." ) ) ; this . snapshot = org.apache.hadoop.hbase.regionserver.SegmentFactory . instance () . createImmutableSegment ( getComparator () ) ; break; } } } 
private void addRightsIfNotSameConcern ( java.util.Collection < org.xwiki.contrib.nestedpagesmigrator.Right > rightsToAdd , java.util.Collection < org.xwiki.contrib.nestedpagesmigrator.Right > currentRights ) { java.util.Iterator < org.xwiki.contrib.nestedpagesmigrator.Right > it = rightsToAdd . iterator () ; while ( it . hasNext () ) { org.xwiki.contrib.nestedpagesmigrator.Right localRight = it . next () ; for ( org.xwiki.contrib.nestedpagesmigrator.Right currentRight : currentRights ) { if ( localRight . hasSameConcern ( currentRight ) ) { it . remove () ; break; } } } currentRights . addAll ( rightsToAdd ) ; } 
public static void updateQueue () { while ( ( theweekend.cosmetics.ipod.Radio.queuedSongs . size () ) < 5 ) { int size = Noteblock.iPodSongs . size () ; if ( size > 0 ) { resources.noteblock.Song generate = Noteblock.iPodSongs . get ( resources.NumberUtils . randomNumber ( size ) ) ; if ( ! ( theweekend.cosmetics.ipod.Radio.queuedSongs . contains ( generate ) ) ) { theweekend.cosmetics.ipod.Radio.queuedSongs . add ( generate ) ; } } } theweekend.cosmetics.ipod.Radio.songPosition = 0 ; theweekend.cosmetics.ipod.Radio . playRadioSong () ; } 
public void checkNeededInColumn () { int n ; for ( int j = 0 ; j < 9 ; j ++ ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( de.halemba.helpers.SolveHelper . checkMissingInColumn ( i , j , grid ) ) { n = de.halemba.helpers.SolveHelper . checkSinglePossiblityColumn ( i , j , grid ) ; if ( n >= 0 ) { grid [ n ] [ j ] . setNumber ( i ) ; break; } } } } } 
public java.util.ArrayList < controller.ControllerCarro > getCarros () { java.util.ArrayList < controller.ControllerCarro > aux = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( this . counter ) ; i ++ ) { aux . add ( this . carros . get ( i ) ) ; } return aux ; } 
private void processAttributes ( android.content.Context context , android.util.AttributeSet attrs ) { android.content.res.TypedArray a = context . obtainStyledAttributes ( attrs , R.styleable.ColorButton ) ; final int N = a . getIndexCount () ; for ( int i = 0 ; i < N ; ++ i ) { int attr = a . getIndex ( i ) ; if ( attr == ( R.styleable.ColorButton_jr_color ) ) { mColor = a . getColor ( attr , 0 ) ; colorify () ; break; } } a . recycle () ; } 
public static void main ( java.lang.String [] args ) { java.util.Scanner sc = new java.util.Scanner ( java.lang.System.in ) ; float sum = 0.0F ; for ( int i = 0 ; i < ( q1004.Main.INPUT_COUNT ) ; i ++ ) { float f = sc . nextFloat () ; if ( f <= 0 ) { continue; } sum += f ; } sum /= q1004.Main.INPUT_COUNT ; java.lang.System.out . println ( ( "$" + ( q1004.Main . shortenNumber ( sum ) ) ) ) ; } 
@ java.lang.Override public void onCraftMatrixChanged ( com.alxnns1.mobhunter.container.IInventory inventoryIn ) { reloadRecipes () ; java.lang.String log = "Recipes:\n" ; for ( int i = 0 ; i < ( recipes . size () ) ; i ++ ) { if ( recipesValid . get ( i ) ) log += "Y - " ; else log += "N - " ; log += recipes . get ( i ) . toString () ; } detectAndSendChanges () ; } 
private void loadDataFromFile () { try { java.io.FileReader fr = new java.io.FileReader ( new java.io.File ( "cities.txt" ) ) ; java.io.BufferedReader br = new java.io.BufferedReader ( fr ) ; for ( int i = 0 ; i < ( RandomCities.NUMBER_OF_CITIES ) ; i ++ ) { cityList . add ( br . readLine () ) ; } java.util.Collections . shuffle ( cityList ) ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } } 
protected int skipWSC ( ) throws java.io.IOException , org.openrdf.rio.RDFHandlerException { int c = readCodePoint () ; while ( ( org.openrdf.rio.turtle.TurtleUtil . isWhitespace ( c ) ) || ( c == '#' ) ) { if ( c == '#' ) { processComment () ; } else if ( c == '\n' ) { ( lineNumber ) ++ ; } c = readCodePoint () ; } unread ( c ) ; return c ; } 
private void makeNewHeader ( org.json.JSONObject transforms ) { for ( int x = 1 ; x < ( ( transforms . length () ) + 1 ) ; x ++ ) { java.lang.String curTransform = "transform" + x ; java.lang.String newField = getCurrTransformNewField ( transforms , curTransform ) ; if ( newField . equals ( "" ) ) {} else if ( checkHeaderDuplicate ( newHeader , newField ) ) { newHeader . put ( newHeader . length () , newField ) ; } } } 
@ java.lang.Override public java.lang.String decorMatrix ( int [] [] matrix ) { java.lang.StringBuilder array = new java.lang.StringBuilder ( "" ) ; for ( int i = 0 ; i <= ( ( matrix.length ) - 1 ) ; i ++ ) { array . append ( this . arrayToString ( matrix [ i ] ) ) ; array . append ( java.lang.System . lineSeparator () ) ; } return java.lang.String . format ( primitivesMatrixTemplate , array ) ; } 
public java.lang.String toString () { java.lang.String cardSymbols = "" ; java.lang.String values = "" ; for ( int x = 0 ; x <= ( lastCard ) ; x ++ ) { cardSymbols += ( CardUtils . cardToString ( cards [ x ] ) ) + " " ; values += ( CardUtils . getValue ( cards [ x ] ) ) + " " ; } return ( ( cardSymbols + "\n" ) + values ) + "\n" ; } 
public void reset () { for ( int i = 0 ; i < ( numberOfDoFs ) ; i ++ ) regularizationMatrix . set ( i , i , jointAccelerationRegularization . getDoubleValue () ) ; solverInput_H . zero () ; solverInput_f . zero () ; solverInput_Aeq . reshape ( 0 , problemSize ) ; solverInput_beq . reshape ( 0 , 1 ) ; if ( ! ( firstCall . getBooleanValue () ) ) addJointJerkRegularization () ; } 
public void setSelection ( T selection ) { for ( int i = 0 , count = getItems () . size () ; i < count ; i ++ ) { T item = getItems () . get ( i ) ; if ( item instanceof java.lang.String ) { if ( item . equals ( selection ) ) { setSelection ( i ) ; return; } } else { if ( item == selection ) { setSelection ( i ) ; return; } } } } 
public static void main ( java.lang.String [] args ) { SimpleDotCom hans = new SimpleDotCom () ; ReadyBakeInput inny = new ReadyBakeInput () ; boolean isAlive = true ; java.lang.System.out . println ( "Hans the dotcom yet lives. Make him run! Enter numbers 0-6 to hit him. 3 consecutive hits will kill him. " ) ; while ( isAlive == true ) { java.lang.String playerGuess = inny . getUserInput ( "Enter a number 0-6: " ) ; java.lang.String result = hans . checkYourself ( playerGuess ) ; java.lang.System.out . println ( result ) ; if ( result == "kill" ) { isAlive = false ; java.lang.System.out . println ( "Now, hans must run!" ) ; } } } 
public java.lang.String getClassName () { if ( mClassList . isEmpty () ) { return mClassName . isEmpty () ? null : mClassName ; } else { java.lang.String class_name = mClassList . get ( 0 ) ; for ( int i = 1 ; i < ( mClassList . size () ) ; i ++ ) { class_name = "," + ( mClassList . get ( i ) ) ; } return class_name ; } } 
public boolean isLookaheadIgnoreWhitespace ( char expectedChar ) { int tempPos = ( pos ) + 1 ; if ( tempPos >= ( input . length () ) ) return false ; char c = input . charAt ( tempPos ) ; while ( isWhitespace ( c ) ) { ++ tempPos ; if ( tempPos >= ( input . length () ) ) return false ; c = input . charAt ( tempPos ) ; } return c == expectedChar ; } 
private void mathButton_ActionPerformed ( java.awt.event.ActionEvent evt ) { int [] rows = new int [ mainTable_ . getRowCount () ] ; for ( int i = 0 ; i < ( rows.length ) ; i ++ ) { java.lang.Integer j = ( ( java.lang.Integer ) ( mainTable_ . getValueAt ( mainTable_ . convertRowIndexToModel ( i ) , 0 ) ) ) ; rows [ i ] = j ; } edu.valelab.gaussianfit.MathForm mf = new edu.valelab.gaussianfit.MathForm ( edu.valelab.gaussianfit.DataCollectionForm.studio_ . getUserProfile () , rows , rows ) ; mf . setVisible ( true ) ; } 
public static void main ( java.lang.String [] args ) { dao.CustomerDB db = new dao.CustomerDB ( "remoteuser" , "password" ) ; java.lang.String [] [] stringValues = db . readAllValues () ; for ( int i = 0 ; i < ( stringValues.length ) ; i ++ ) { for ( int j = 1 ; j < 7 ; j ++ ) { java.lang.System.out . print ( ( ( stringValues [ i ] [ j ] ) + " " ) ) ; } java.lang.System.out . println () ; } } 
@ java.lang.Override public void stopVideoTimeCountingThread ( java.lang.String roomId ) { java.util.Iterator < com.benlinus92.synchronize.model.FutureHolder > it = countThreadFutureList . iterator () ; int index = 0 ; while ( it . hasNext () ) { if ( it . next () . getRoomId () . equals ( roomId ) ) { cancelThreadTaskByFuture ( countThreadFutureList . get ( index ) . getFuture () ) ; countThreadFutureList . remove ( index ) ; } else index ++ ; } } 
public static java.lang.String parseVersion ( java.lang.String requestLine ) { java.util.Scanner scanner ; java.util.ArrayList < java.lang.String > words = new java.util.ArrayList < java.lang.String > () ; scanner = new java.util.Scanner ( requestLine ) ; while ( scanner . hasNext () ) { words . add ( scanner . next () ) ; } scanner . close () ; if ( ( words . size () ) == 3 ) { return words . get ( 2 ) ; } return "HTTP/1.1" ; } 
public static java.lang.String createJsonStringFromInputStream ( java.io.InputStream inputStream ) { try { java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( inputStream , "iso-8859-1" ) , 8 ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; java.lang.String line = null ; while ( ( line = reader . readLine () ) != null ) sb . append ( ( line + "\n" ) ) ; inputStream . close () ; com.example.celien.drivemycar.http.JsonParser.json = sb . toString () ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return com.example.celien.drivemycar.http.JsonParser.json ; } 
public static void exportResource ( java.lang.String resourceName , java.nio.file.Path destination ) throws java.io.IOException { try ( java.io.InputStream in = com.github.checkstyle.FilesystemUtils . class . getResourceAsStream ( resourceName ) ; java.io.OutputStream out = java.nio.file.Files . newOutputStream ( destination ) ) { int readBytes ; final byte [] buffer = new byte [ com.github.checkstyle.FilesystemUtils.BUFFER_SIZE ] ; while ( ( readBytes = in . read ( buffer ) ) > 0 ) { out . write ( buffer , 0 , readBytes ) ; } } } 
private void pushUp ( int i ) { while ( ( i > 1 ) && ( ( compare2 ( heap . get ( i ) , heap . get ( ( i / 2 ) ) ) ) > 0 ) ) { swap ( i , ( i / 2 ) ) ; i /= 2 ; } } 
public static void playGame () { Engine . printBoard () ; Engine . printHand () ; while ( ( Engine . handIsOver () ) == false ) { Engine . playerAction () ; Engine . computerAction () ; Engine . dealerAction () ; Engine . printBoard () ; Engine . printHand () ; } Engine . determineWinners () ; Engine . splitWinnings () ; Engine . askForNewRound () ; } 
public java.lang.String toString () { SinglyLinkedNode < E > current = head ; if ( this . isEmpty () ) { return "[]" ; } java.lang.StringBuilder sb = new java.lang.StringBuilder () ; sb . append ( ( "[" + ( current.data ) ) ) ; while ( ( current.next ) != null ) { current = current.next ; sb . append ( ", " ) . append ( current.data ) ; } sb . append ( "]" ) ; return sb . toString () ; } 
public void loadImages ( java.util.List < com.albums.model.Album > albums ) { if ( ( albums != null ) && ( ( albums . size () ) > 0 ) ) { waitMb . show ( baseAlbumActivity ) ; this . unprocessedAlbums = new java.util.ArrayList < com.albums.model.Album > ( albums ) ; for ( int i = 0 ; i < ( albums . size () ) ; i ++ ) { com.albums.util.ImageLoader imageLoader = new com.albums.util.ImageLoader ( baseAlbumActivity , this ) ; imageLoader . execute ( albums . get ( i ) ) ; } } } 
private void skipComment () { com.rezzedup.map.Source.Character peek = source . peekNextCharacter () ; while ( ( ( ( peek.character ) != null ) && ( ( peek.character ) != '#' ) ) && ( ( peek.character ) != '\n' ) ) { source . getNextCharacter () ; peek = source . peekNextCharacter () ; } if ( ( peek.character ) == '#' ) { source . getNextCharacter () ; } } 
@ java.lang.Override public int hashCode () { int hcode = java.util.Objects . hash ( getDisplayName () , getSummandExpression () ) ; java.util.Iterator < ? > vmIter = this . getMatchers () . iterator () ; while ( vmIter . hasNext () ) { hcode += vmIter . next () . hashCode () ; } return hcode ; } 
@ java.lang.Override public void run () { while ( ! ( finished ) ) { try { java.lang.Object response = inputStream . readObject () ; java.lang.System.out . println ( "Response recieved " ) ; if ( isUpdate ( ( ( rpcprotocol.Response ) ( response ) ) ) ) {} else { try { queueResponses . put ( ( ( rpcprotocol.Response ) ( response ) ) ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } } } catch ( java.io.IOException | java.lang.ClassNotFoundException ex ) { java.lang.System.out . println ( "Client reader stopped" ) ; finished = true ; } } } 
private void showMoreBooks ( int itemsPerPage ) { int start = lessBooks . size () ; int end = start + itemsPerPage ; for ( int i = start ; i < end ; i ++ ) { lessBooks . add ( books . get ( i ) ) ; } } 
@ java.lang.Override public void afterTextChanged ( android.text.Editable s ) { java.lang.String text = s . toString () . trim () ; savedApis . clear () ; for ( int i = 0 ; i < ( allsavedApis . size () ) ; i ++ ) { if ( allsavedApis . get ( i ) . getName () . toLowerCase () . contains ( text . toLowerCase () ) ) { savedApis . add ( allsavedApis . get ( i ) ) ; } } mAdapter . notifyDataSetChanged () ; setEmptyText () ; } 
public void run () { while ( ( gameRunning ) && ( ! ( gameOver ) ) ) { run_game () ; try { java.lang.Thread . sleep ( com.se.softwareEngineering.gameEngine.GameEngine.gameSpeed ) ; } catch ( java.lang.Throwable t ) { if ( com.se.softwareEngineering.gameEngine.GameEngine.debug ) { java.lang.System.err . println ( t ) ; } } } if ( gameOver ) { finish () ; } } 
public static com.packt.service.BookService getInstance () { java.util.ServiceLoader < com.packt.spi.BookServiceProvider > sl = java.util.ServiceLoader . load ( com.packt.spi.BookServiceProvider . class ) ; java.util.Iterator < com.packt.spi.BookServiceProvider > iter = sl . iterator () ; if ( ! ( iter . hasNext () ) ) throw new java.lang.RuntimeException ( "No service providers found!" ) ; com.packt.spi.BookServiceProvider provider = null ; while ( iter . hasNext () ) { provider = iter . next () ; java.lang.System.out . println ( provider . getClass () ) ; } return provider . getBookService () ; } 
private java.lang.String getPlaylist () { int entryCount = java.lang.Integer . parseInt ( getConfiguration () . getProperty ( "playlist.entry.count" ) ) ; java.lang.StringBuilder playlist = new java.lang.StringBuilder () ; for ( int i = 1 ; i < entryCount ; i ++ ) { playlist . append ( i ) ; playlist . append ( "/ " ) ; playlist . append ( getConfiguration () . getProperty ( ( "playlist.entry.name." + i ) ) ) ; playlist . append ( "\n" ) ; } return playlist . toString () ; } 
public DataStructure.LinkedList2 < T > . Node search ( T value ) { DataStructure.LinkedList2 < T > . Node x = nil.next ; nil.key = value ; while ( ( x.key ) != value ) { x = x.next ; } nil.key = null ; if ( x == ( nil ) ) { return null ; } return x ; } 
public void add ( int data ) { ( this . size ) ++ ; if ( ( this . front ) == null ) { this . front = new QueueNode ( data ) ; } else { QueueNode current = this . front ; while ( ( current.next ) != null ) { current = current.next ; } current.next = new QueueNode ( data ) ; } } 
public java.lang.Object pop () { final int n = stack . size () ; if ( n == 0 ) { return 0L ; } for ( int i = ( marks . size () ) - 1 ; i >= 0 ; -- i ) { if ( ( marks . get ( i ) ) == n ) { marks . set ( i , ( n - 1 ) ) ; } } return stack . remove ( ( n - 1 ) ) ; } 
public java.lang.String arrayToString ( java.lang.Object [] array ) { java.lang.StringBuilder buffer = new java.lang.StringBuilder () ; for ( int i = 0 ; i < ( array.length ) ; i ++ ) { if ( i > 0 ) { buffer . append ( dk.lessismore.nojpa.reflection.attributeconverters.AttributeConverter.arraySeparator ) ; } buffer . append ( objectToString ( array [ i ] ) ) ; } return buffer . toString () ; } 
public boolean remove ( net.osmand.osm.edit.Relation.RelationMember key ) { if ( ( members ) != null ) { java.util.Iterator < net.osmand.osm.edit.Relation.RelationMember > it = members . iterator () ; while ( it . hasNext () ) { net.osmand.osm.edit.Relation.RelationMember rm = it . next () ; if ( rm == key ) { it . remove () ; return true ; } } } return false ; } 
@ javax.annotation.PreDestroy public void dispose () { for ( int i = ( this . objects . size () ) - 1 ; i >= 0 ; i -- ) { try { this . dispose . accept ( this . objects . get ( i ) ) ; } catch ( java.lang.Throwable t ) {} } } 
private javafx.collections.ObservableList < java.lang.Integer > populateTrackNumberComboBox () { javafx.collections.ObservableList < java.lang.Integer > options ; if ( ( ui.Slave . getSequence () ) != null ) { options = javafx.collections.FXCollections . observableArrayList () ; for ( int i = 0 ; i < ( ui.Slave . getSequence () . getTracks () . length ) ; i ++ ) { java.lang.System.out . println ( i ) ; options . add ( i ) ; } } else { options = javafx.collections.FXCollections . observableArrayList ( 0 ) ; } return options ; } 
public PokemonSpecies findCaughtSpeciesData ( java.lang.String speciesName ) throws PokedexException { for ( int i = 0 ; i < ( pokedex . size () ) ; i ++ ) { PokemonSpecies poke = pokedex . get ( i ) ; if ( poke . getSpeciesName () . equals ( speciesName ) ) { if ( poke . isEmpty () ) { throw new PokedexException ( Config.UNCAUGHT_POKEMON ) ; } else { return poke ; } } } throw new PokedexException ( Config.UNSEEN_POKEMON ) ; } 
private static boolean dummyAccountAlreadyAdded ( android.accounts.Account [] accountsByType ) { for ( int i = 0 ; i < ( accountsByType.length ) ; i ++ ) { if ( accountsByType [ i ] . name . equals ( com.philosophicalhacker.philhackernews.PhilHackerNewsApplication.ACCOUNT_NAME ) ) { return true ; } } return false ; } 
public java.lang.String getNodeName ( java.lang.String id ) { for ( int i = 0 ; i < ( nodeList . size () ) ; i ++ ) { if ( nodeList . get ( i ) . getID () . equals ( id ) ) { return nodeList . get ( i ) . getName () ; } } return null ; } 
public void resetUsed () { for ( int i = 0 ; i < ( team . size () ) ; i ++ ) { team . get ( i ) . getAttributes () . setUsed ( ( i == ( frontIndex ) ) ) ; } } 
private java.lang.String readCommandOutput ( java.lang.Process process ) { java.lang.String s ; java.lang.StringBuilder sb = new java.lang.StringBuilder () ; try { java.io.BufferedReader stdInput = new java.io.BufferedReader ( new java.io.InputStreamReader ( process . getInputStream () ) ) ; while ( ( s = stdInput . readLine () ) != null ) { sb . append ( s ) . append ( "\n" ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } return sb . toString () ; } 
private void effect () { for ( int i = ( effects . size () ) - 1 ; i >= 0 ; i -- ) { effects . get ( i ) . update ( this ) ; } for ( int i = ( effects . size () ) - 1 ; i >= 0 ; i -- ) { if ( effects . get ( i ) . killMe ) { effects . get ( i ) . end ( this ) ; effects . remove ( i ) ; } } } 
private hudson.plugins.timestamper.annotator.ConsoleLogParser.Result parseFromFinish ( java.io.InputStream inputStream ) throws java.io.IOException { hudson.plugins.timestamper.annotator.ConsoleLogParser.Result result = new hudson.plugins.timestamper.annotator.ConsoleLogParser.Result () ; result.lineNumber = - 1 ; int value = inputStream . read () ; result.atNewLine = isNewLine ( value ) ; while ( ( value = inputStream . read () ) != ( - 1 ) ) { if ( isNewLine ( value ) ) { ( result.lineNumber ) -- ; } } return result ; } 
public double getMinZ () { if ( ! ( java.lang.Double . isNaN ( zMin ) ) ) return zMin ; for ( int i = 0 ; i < ( getXyz () [ 0 ] . length ) ; i ++ ) { final double z = getXyz ( 0 , i , 2 ) ; if ( ( z <= ( zMin ) ) || ( java.lang.Double . isNaN ( zMin ) ) ) zMin = z ; } return zMin ; } 
public void addExp ( int addedExp ) { m_exp += addedExp ; while ( ( m_exp ) >= ( 100 * ( this . getLevel () ) ) ) { levelUp ( ( ( m_exp ) - ( 100 * ( this . getLevel () ) ) ) ) ; } } 
public void queuePlayList ( com.sedmelluq.discord.lavaplayer.track.AudioPlaylist playlist ) { java.util.List < com.sedmelluq.discord.lavaplayer.track.AudioTrack > list = playlist . getTracks () ; for ( int i = 0 ; i < ( list . size () ) ; i ++ ) { if ( ! ( this . player . startTrack ( list . get ( i ) , true ) ) ) { this . queue . add ( list . get ( i ) ) ; this . playlist . add ( list . get ( i ) . getInfo () . title ) ; } } } 
public void printAll () { uic.project.commuter.carPoolData.iterator.CarPoolIterator iter = this . getIterator () ; while ( iter . hasNext ( this ) ) { uic.project.commuter.carPoolData.iterator.CarPoolComponent currentObject = iter . next ( this ) ; currentObject . printSelf () ; uic.project.commuter.carPoolData.iterator.CarPoolIterator tier2Iter = this . getIterator () ; if ( ( currentObject . getClass () ) == ( this . getClass () ) ) { while ( tier2Iter . hasNext ( currentObject ) ) { tier2Iter . next ( currentObject ) . printSelf () ; } } } } 
private float getNoise ( float x , float y , mapChooser.PerlinNoiseGenerator noise , float scale ) { float n = 0 ; float weight = 1 ; float curFrequency = 1 ; for ( int i = 0 ; i < ( frequencies ) ; i ++ ) { n += weight * ( noise . noise2 ( ( curFrequency * x ) , ( curFrequency * y ) ) ) ; weight /= 2 ; curFrequency += 2 ; } return n ; } 
public void run () { android.bluetooth.BluetoothSocket socket ; while ( true ) { try { socket = serverSocket . accept () ; } catch ( java.io.IOException e ) { break; } if ( socket != null ) { listenOnSocket ( socket ) ; try { serverSocket . close () ; } catch ( java.io.IOException e ) {} break; } } } 
private void assertDeepEqualsGuests ( java.util.List < cz.muni.fi.pv168.project.Guest > expectedList , java.util.List < cz.muni.fi.pv168.project.Guest > actualList ) { expectedList . sort ( cz.muni.fi.pv168.project.StayManagerImplTest.idComparatorGuest ) ; actualList . sort ( cz.muni.fi.pv168.project.StayManagerImplTest.idComparatorGuest ) ; assertEquals ( expectedList , actualList ) ; for ( int i = 0 ; i < ( expectedList . size () ) ; i ++ ) { cz.muni.fi.pv168.project.Guest expected = expectedList . get ( i ) ; cz.muni.fi.pv168.project.Guest actual = actualList . get ( i ) ; assertDeepEquals ( expected , actual ) ; } } 
public java.lang.String printForwards ( int numToPrint ) { LLNode < E > item = first ; java.lang.String finalString = "" ; if ( ( size () ) == 0 ) return finalString ; for ( int i = 0 ; i < numToPrint ; i ++ ) { finalString += ( item . toString () ) + "\n" ; item = item . getNext () ; } return finalString ; } 
private void clearData () { selectedFaculties . clear () ; chosenFaculties = "" ; questions . clear () ; newDate = "" ; for ( int i = 0 ; i < ( checked.length ) ; i ++ ) { checked [ i ] = false ; } aSpinner1 . setSelection ( 0 ) ; } 
public void addConstraint ( mondrian.rolap.sql.SqlQuery sqlQuery , mondrian.rolap.sql.RolapCube baseCube , mondrian.rolap.aggmatcher.AggStar aggStar ) { for ( int i = 0 ; i < ( columnList . size () ) ; i ++ ) { mondrian.olap.MondrianDef.Expression expression = columnList . get ( i ) ; if ( expression != null ) { final java.lang.Comparable value = valueList . get ( i ) ; final mondrian.spi.Dialect.Datatype datatype = datatypeList . get ( i ) ; sqlQuery . addWhere ( mondrian.rolap.sql.SqlConstraintUtils . constrainLevel2 ( sqlQuery , expression , datatype , value ) ) ; } } } 
public void fillMap () { values . clear () ; mMap . clear () ; cursor = getActivity () . getContentResolver () . query ( EcoMapContract.ProblemsEntry.CONTENT_URI , null , null , null , null , null ) ; while ( cursor . moveToNext () ) { org.ecomap.android.app.Problem p = new org.ecomap.android.app.Problem ( cursor , getActivity () ) ; values . add ( p ) ; } cursor . close () ; setUpClusterer () ; } 
public boolean accepts ( rocnikovyprojekt.Word w ) { rocnikovyprojekt.FSA m = determinize () ; java.lang.Object p = m.initialStates . iterator () . next () ; for ( int i = 0 ; i < ( w . length () ) ; i ++ ) { java.lang.Object a = w . symbolAt ( i ) ; p = m.delta . get ( p , a ) . iterator () . next () ; } return m.finalStates . contains ( p ) ; } 
@ org.junit.Test public void withEndGreaterThanStringLength () { for ( int i = 1 ; i < 10 ; i ++ ) { final int end = ( string . getCharacters () . length ) + i ; final com.valkryst.VTerminal.misc.IntRange range = new com.valkryst.VTerminal.misc.IntRange ( 0 , end ) ; org.junit.Assert . assertFalse ( string . isRangeValid ( range ) ) ; } } 
@ java.lang.Override public org.eclipse.titan.runtime.core.TitanBoolean isBound () { for ( int i = 0 ; i < ( array_size ) ; ++ i ) { if ( array_elements . get ( i ) . isBound () . getValue () ) { return new org.eclipse.titan.runtime.core.TitanBoolean ( true ) ; } } return new org.eclipse.titan.runtime.core.TitanBoolean ( false ) ; } 
public int calMaxSubseqSum2 () { this . getInputs () ; int thisSum ; int maxSum = 0 ; for ( int i = 0 ; i < ( sequence.length ) ; i ++ ) { thisSum = 0 ; for ( int j = i ; j < ( sequence.length ) ; j ++ ) { thisSum += sequence [ j ] ; if ( thisSum > maxSum ) { maxSum = thisSum ; } } } return maxSum ; } 
private java.lang.String calc ( java.lang.String input ) { if ( input == null ) { return "" ; } java.lang.String word = "" ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { word += ( input . charAt ( i ) ) + 1 ; } return word ; } 
public static char [] cross ( creatures.CharCreature creat1 , creatures.CharCreature creat2 ) { char [] output = new char [ creat1.chrom.length ] ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { if ( i < ( ( output.length ) / 2 ) ) { output [ i ] = creat1.chrom [ i ] ; } else { output [ i ] = creat2.chrom [ i ] ; } } return output ; } 
public void resetItems () { if ( ( swipeListView . getAdapter () ) != null ) { int count = swipeListView . getAdapter () . getCount () ; int size = opened . size () ; for ( int i = size ; i < count ; i ++ ) { opened . add ( false ) ; openedRight . add ( false ) ; checked . add ( false ) ; } } } 
public static java.lang.String superDecrypt ( java.lang.String start ) { if ( ( start . length () ) < 1 ) return start ; for ( int i = 0 ; i < 3 ; i ++ ) { start = Encryption . keyDecrypt ( 7 , start ) ; start = Encryption . descramble ( start , 7 ) ; } return start ; } 
public void modulo ( pl.kryptografia.rabin.bignum.BigNum modulus ) { while ( absGreaterOrEqualTo ( modulus ) ) { pl.kryptografia.rabin.bignum.BigNum x = new pl.kryptografia.rabin.bignum.BigNum ( modulus ) ; int shift = findMaximumLeftShift ( x ) ; x . shiftLeft ( shift ) ; absSubtract ( x ) ; } if ( ( sign ) == ( - 1 ) ) { add ( modulus ) ; sign = 1 ; } } 
public boolean isUserNewRecord ( java.lang.String username , int score ) { for ( int record = 0 ; record < ( this . highscores . size () ) ; record ++ ) { CK.FileIO.Highscore.Highscore scoreNow = this . highscores . get ( record ) ; if ( ( scoreNow . getUsername () . equals ( username ) ) && ( ( scoreNow . getScore () ) < score ) ) { return true ; } } return false ; } 
private double average ( double [] returns , java.util.function.Predicate < java.lang.Integer > filter ) { double sum = 0 ; int count = 0 ; for ( int ii = 0 ; ii < ( returns.length ) ; ii ++ ) { if ( ! ( filter . test ( ii ) ) ) continue; sum += returns [ ii ] ; count ++ ; } return sum / count ; } 
@ com.facebook.react.uimanager.annotations.ReactProp ( name = "polylines" ) public void setPolylines ( com.baidu.mapapi.map.MapView mapView , com.facebook.react.bridge.ReadableArray options ) { for ( int i = 0 ; i < ( options . size () ) ; i ++ ) { com.facebook.react.bridge.ReadableMap option = options . getMap ( i ) ; org.lovebing.reactnative.baidumap.MarkerUtil . addPolyline ( mapView , option . getString ( "color" ) , option . getInt ( "width" ) , option . getArray ( "points" ) ) ; } } 
private int dateByWeekday ( java.lang.String date , java.lang.String weekday ) { boolean nextDate = false ; int min ; do { min = dateToMin ( date , "00:00" , nextDate ) ; nextDate = true ; while ( ! ( bots.CalendarBot.CalDateFormat . minToWeekday ( min , firstYear ) . equals ( weekday ) ) ) { min ++ ; } } while ( min < ( bots.CalendarBot.CurrentDate . getDateInMin ( firstYear ) ) ) ; return min + ( 8 * 60 ) ; } 
@ java.lang.Override public void delete ( java.lang.String id ) { for ( int i = 0 ; i < ( arraySize ) ; i ++ ) { if ( ( simpleArray . get ( i ) . getId () . equals ( id ) ) && ( ( simpleArray . get ( i ) ) != null ) ) { this . simpleArray . delete ( java.lang.Integer . parseInt ( simpleArray . get ( i ) . getId () ) ) ; break; } } } 
public void run () { int timeLeft = ( ( int ) ( ( money ) * 4 ) ) ; int seconds = timeLeft * 60 ; for ( int i = seconds ; i > 0 ; i -- ) { try { java.lang.Thread . sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) {} } java.lang.System.out . println ( ( ( ( "\nCustomer " + ( name ) ) + " has finished their service at " ) + ( getTime () ) ) ) ; remove ( name ) ; } 
public static boolean isUnique ( final java.lang.String string ) { java.util.Set < java.lang.Character > set = new java.util.HashSet <> () ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { set . add ( string . charAt ( i ) ) ; } return ( set . size () ) == ( string . length () ) ; } 
@ java.lang.Override public org.apache.hadoop.hbase.Cell next ( ) throws java.io.IOException { if ( ( type ) == ( MemStoreScanType.UNDEFINED ) ) type = MemStoreScanType.USER_SCAN_FORWARD ; assert ( type ) != ( MemStoreScanType.USER_SCAN_BACKWARD ) ; for ( org.apache.hadoop.hbase.Cell currentCell = forwardHeap . next () ; currentCell != null ; currentCell = forwardHeap . next () ) { if ( ( currentCell . getSequenceId () ) > ( readPoint ) ) continue; if ( ( type ) == ( MemStoreScanType.COMPACT_FORWARD ) ) {} return currentCell ; } return null ; } 
public int getSbOperationRowNum ( java.lang.String operator , java.lang.String opration , int startRow , int endRow , java.util.List < java.util.List < java.lang.String > > data ) { int oprationRowNum = 0 ; for ( int x = startRow ; x <= endRow ; x ++ ) { if ( ( data . get ( x ) . get ( 4 ) . equalsIgnoreCase ( operator ) ) && ( data . get ( x ) . get ( 5 ) . equalsIgnoreCase ( opration ) ) ) { oprationRowNum = x ; break; } } return oprationRowNum ; } 
private int getStartSelectItem () { int currentItem = ( java.lang.Integer.MAX_VALUE ) / 2 ; if ( ( currentItem % ( getRealCount () ) ) == 0 ) { return currentItem ; } while ( ( currentItem % ( getRealCount () ) ) != 0 ) { currentItem ++ ; } return currentItem ; } 
@ com.modeliosoft.modelio.javadesigner.annotations.objid ( value = "22963c8e-9140-49f2-beb7-3b2458a06c51" ) private java.util.List < java.lang.Integer > bootstrapAttr ( java.util.List < java.lang.Integer > attr ) { java.util.ArrayList < java.lang.Integer > rand = new java.util.ArrayList < java.lang.Integer > ( attrN ) ; for ( int i = 1 ; i < ( ( attrN ) + 1 ) ; i ++ ) { rand . add ( i ) ; } java.util.Collections . shuffle ( rand ) ; attr = rand . subList ( 0 , attrSampleN ) ; return attr ; } 
private void prepareUV ( com.graphicsengine.spritemesh.PropertyMapper mapper , int spriteCount , int index ) { for ( int i = 0 ; i < spriteCount ; i ++ ) { if ( ( getTexture ( Texture2D.TEXTURE_0 ) . type ) == ( com.nucleus.texturing.TextureType.TiledTexture2D ) ) { com.nucleus.geometry.MeshBuilder . prepareTiledUV ( mapper , attributeData , ( index + i ) ) ; } else if ( ( getTexture ( Texture2D.TEXTURE_0 ) . type ) == ( com.nucleus.texturing.TextureType.UVTexture2D ) ) {} else { throw new java.lang.IllegalArgumentException () ; } } } 
public void save () { int bugTrackerCount = bugTrackers.length ; for ( int i = 0 ; i < bugTrackerCount ; i ++ ) { if ( bugTrackers [ i ] . equals ( "github" ) ) { githubIssue . raise ( this ) ; } else if ( bugTrackers [ i ] . equals ( "bugzilla" ) ) {} } } 
public int getNextEmptyPetIndex () { petLock . lock () ; try { for ( int i = 0 ; i < 3 ; i ++ ) { if ( ( pets [ i ] ) == null ) { return i ; } } return 3 ; } finally { petLock . unlock () ; } } 
@ java.lang.Override protected void onFinishInflate () { super . onFinishInflate () ; mFrame = new android.widget.FrameLayout ( getContext () ) ; mFrame . setLayoutParams ( new android.view.ViewGroup.LayoutParams ( ViewGroup.LayoutParams.MATCH_PARENT , ViewGroup.LayoutParams.MATCH_PARENT ) ) ; for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { android.view.View child = getChildAt ( i ) ; removeView ( child ) ; mFrame . addView ( child ) ; } addView ( mFrame ) ; } 
public void run () { while ( started ) { if ( queue . isEmpty () ) continue; try { publishData ( queue . take () ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } } client . stop () ; client = null ; queue . clear () ; } 
public void douAALUnregistering () { org.universAAL.hw.exporter.zigbee.ha.devices.listeners.OnOffLightListener.log . debug ( "Removing all instances of these devices in uAAL" ) ; java.util.Iterator iter = onOffLigthDevices . keySet () . iterator () ; for ( ; iter . hasNext () ; ) { org.osgi.framework.ServiceReference sref = ( ( org.osgi.framework.ServiceReference ) ( iter . next () ) ) ; ( ( org.universAAL.hw.exporter.zigbee.ha.devices.OnOffLightCallee ) ( onOffLigthDevices . get ( sref ) ) ) . unregister () ; iter . remove () ; context . ungetService ( sref ) ; } onOffLigthDevices . clear () ; } 
public static void main ( java.lang.String [] args ) throws java.net.UnknownHostException { for ( int i = 0 ; i < 10 ; i ++ ) { java.lang.System.out . println ( ( "Free port: " + ( voip.NetUtils . findFreePort () ) ) ) ; } java.net.InetAddress address = java.net.InetAddress . getByName ( "192.168.1.1" ) ; java.lang.System.out . println ( address . toString () ) ; java.lang.System.out . println ( voip.NetUtils . getIpByInetAddress ( address ) ) ; java.lang.System.out . println ( voip.NetUtils . getLocalIpAddress () ) ; } 
@ java.lang.Override public java.util.ArrayList < Tuple.Tuple > writeToFile () { Tuple.Tuple a = getNextTuple () ; java.util.ArrayList < Tuple.Tuple > result = new java.util.ArrayList < Tuple.Tuple > () ; while ( a != null ) { result . add ( a ) ; a = getNextTuple () ; } return result ; } 
@ java.lang.Override public void run () { while ( true ) { if ( ( application.Controller . getInstance ( 0 ) . mutexLock ) == ( ! true ) ) { application.Controller . getInstance ( 0 ) . mutexLock = true ; application.Controller . getInstance ( 0 ) . decode () ; application.Controller . getInstance ( 0 ) . mutexLock = false ; } } } 
public int getPlayerRank () { int rank = - 1 ; int count = 0 ; for ( int i = 0 ; i < ( Game.HI_SCORES . size () ) ; i ++ ) { if ( ( player . getScore () ) >= ( Game.HI_SCORES . get ( i ) . getScore () ) ) rank = ( Game.HI_SCORES . size () ) - ( ++ count ) ; } return rank ; } 
protected java.util.List < java.lang.String > validateNoIntersectingInterval ( com.jraska.vsb.or1.data.Output output ) { java.util.List < com.jraska.vsb.or1.schedule.validation.NoWaitFlowShopValidator.IntervalWrapper > [] machineIntervals = getIntervalsForMachines ( output ) ; java.util.List < java.lang.String > validationErrors = new java.util.ArrayList < java.lang.String > () ; for ( int machineIndex = 0 ; machineIndex < ( output . getMachinesCount () ) ; machineIndex ++ ) { java.util.List < com.jraska.vsb.or1.schedule.validation.NoWaitFlowShopValidator.IntervalWrapper > intervals = machineIntervals [ machineIndex ] ; validationErrors . addAll ( checkForIntersectionErrors ( intervals ) ) ; } return validationErrors ; } 
public java.lang.String leftShift ( java.lang.String input , int times ) { java.lang.String temp = input ; java.lang.StringBuilder strb = new java.lang.StringBuilder () ; for ( int i = 0 ; i < times ; i ++ ) { strb . append ( temp . substring ( 1 ) ) ; strb . append ( temp . substring ( 0 , 1 ) ) ; temp = strb . toString () ; strb = new java.lang.StringBuilder () ; } return temp ; } 
@ java.lang.Override protected void onLayout ( boolean changed , int l , int t , int r , int b ) { if ( ! changed ) return; updateBottomViews () ; if ( ( mOnLayoutListeners ) != null ) for ( int i = 0 ; i < ( mOnLayoutListeners . size () ) ; i ++ ) { mOnLayoutListeners . get ( i ) . onLayout ( this ) ; } } 
private byte [] removeId ( byte [] payload ) { byte [] array = new byte [ ( payload.length ) - 1 ] ; for ( int i = 0 ; i < ( array.length ) ; i ++ ) { array [ i ] = payload [ ( i + 1 ) ] ; } return array ; } 
public double [] getPhaseTable () { for ( int i = 0 ; i < 1024 ; i ++ ) re [ i ] = data [ i ] ; cafe.analysis.cafe.analysis.FFT . fft ( re , im , 10 , ( - 1 ) ) ; double [] temp1 = cafe.analysis.cafe.analysis.FFT . get_theta () ; return temp1 ; } 
public java.util.Iterator < E > minimumSpanningTree () { java.util.Set < E > set = new java.util.HashSet < E > () ; for ( E e = pq . poll () ; ! ( pq . isEmpty () ) ; e = pq . poll () ) { set . add ( e ) ; if ( checkForCycle ( set , e . getSource () , e . getDest () ) ) { set . remove ( e ) ; } } return set . iterator () ; } 
public boolean percolates () { for ( int i = 0 ; i < ( site [ ( ( site [ 0 ] . length ) - 1 ) ] . length ) ; i ++ ) { if ( isFull ( ( ( site [ 0 ] . length ) - 1 ) , i ) ) return true ; } return false ; } 
public void execute ( java.lang.String command ) { for ( int i = 0 ; i < ( command . length () ) ; i ++ ) { switch ( command . charAt ( i ) ) { case Command.FORWARD : case Command.BACKWARD : if ( ! ( move ( command . charAt ( i ) ) ) ) { return; } break; case Command.RIGHT : case Command.LEFT : rotate ( command . charAt ( i ) ) ; break; } } } 
public static boolean hasFormatWithClassHeader ( java.lang.String text ) { java.lang.String [] lines = text . split ( "\n" ) ; for ( int i = 0 ; i < ( lines.length ) ; i ++ ) { if ( ( lines [ i ] . trim () . length () ) == 0 ) break; if ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . isLineShortDate ( lines [ i ] ) ) return true ; } return false ; } 
public static void initializeCustomWorld ( java.util.Scanner input , boolean [] [] world ) { boolean done = false ; GameOfLife . clearWorld ( world ) ; java.lang.System.out . printf ( "Enter a pattern using %c for alive and %c as dead cells.\n" , Config.ALIVE , Config.DEAD ) ; java.lang.System.out . println ( "To end the pattern, type END on its own line." ) ; for ( int i = 0 ; ! done ; i ++ ) { done = GameOfLife . initializeCustomRow ( input , i , world ) ; } } 
@ java.lang.Override public java.lang.String visitSimple_stmt ( lessa.ExprParser.Simple_stmtContext ctx ) { java.lang.System.out . println ( "simple_stmt -> small_stmt (';' small_stmt)* ';' " ) ; java.lang.String ret = ( visit ( ctx . small_stmt ( 0 ) ) ) + "\n" ; int i = 1 ; while ( ( ctx . small_stmt ( i ) ) != null ) { ret += ( visit ( ctx . small_stmt ( i ) ) ) + "\n" ; i ++ ; } return ret ; } 
public int hamming () { int count = 0 ; for ( int i = 0 ; i < ( N ) ; i ++ ) { for ( int j = 0 ; j < ( N ) ; j ++ ) { if ( ( ( pieces [ i ] [ j ] ) != ( goalValueAt ( i , j ) ) ) && ( ( pieces [ i ] [ j ] ) != 0 ) ) { count ++ ; } } } return count ; } 
public void shuffle () { sorted = false ; for ( int i = ( topCard ) - 1 ; i > 0 ; i -- ) { int randomPos = ( ( int ) ( ( java.lang.Math . random () ) * ( topCard ) ) ) ; Card temp = cards [ i ] ; cards [ i ] = cards [ randomPos ] ; cards [ randomPos ] = temp ; } } 
public static void alimentarMatriz ( int [] [] matriz ) { for ( int linha = 0 ; linha < ( matriz.length ) ; linha ++ ) { for ( int coluna = 0 ; coluna < ( matriz [ 0 ] . length ) ; coluna ++ ) { java.util.Random random = new java.util.Random () ; matriz [ linha ] [ coluna ] = random . nextInt ( 11 ) ; } } } 
private final boolean is7BitClean ( org.forgerock.opendj.ldap.ByteSequence value ) { for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { byte b = value . byteAt ( i ) ; if ( ( b & ( org.opends.server.plugins.SevenBitCleanPlugin.MASK ) ) != b ) { return false ; } } return true ; } 
public void next () { this . index += 1 ; int tempIndex = this . index ; while ( ( ( this . index ) < ( this . menuSize ) ) && ( ( menu . get ( tempIndex ) . price ) >= ( this . price ) ) ) { this . index += 1 ; tempIndex += 1 ; } } 
private void findNextTurn () { java.lang.Boolean found = false ; nextTurn () ; while ( ! found ) { if ( ( ! ( currentPlayer . getPass () ) ) && ( ! ( currentPlayer . getWon () ) ) ) { found = true ; } else { nextTurn () ; } } } 
@ java.lang.Override public nl.renarj.jasdb.api.properties.Property removeValue ( nl.renarj.jasdb.api.properties.Value v ) { for ( java.util.Iterator i = values . iterator () ; i . hasNext () ; ) { if ( i . next () . equals ( v ) ) { i . remove () ; } } return this ; } 
private java.util.ArrayList < java.lang.Integer > list_numbers_equal_values_col2 ( org.json.JSONArray ja_equal_words_v , java.lang.String v ) { java.util.ArrayList < java.lang.Integer > list_numbers_equal_values = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( ja_equal_words_v . length () ) ; i ++ ) { if ( ja_equal_words_v . get ( i ) . toString () . toLowerCase () . equals ( v ) ) { list_numbers_equal_values . add ( ( i + 1 ) ) ; } } return list_numbers_equal_values ; } 
private java.util.Vector calculateMeanPoint ( java.util.List < ? extends data.Data > dataSet ) { double [] meanPoint = new double [ argumentsCount ] ; for ( data.Data data : dataSet ) { for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] += data . getValueAt ( i ) ; } } for ( int i = 0 ; i < ( argumentsCount ) ; i ++ ) { meanPoint [ i ] /= dataSet . size () ; } return new java.util.Vector ( meanPoint ) ; } 
public static java.lang.Throwable getRootCause ( java.lang.Throwable t ) { if ( t == null ) { return null ; } java.lang.Throwable rootCause = t ; java.lang.Throwable cause = rootCause . getCause () ; while ( ( cause != null ) && ( cause != rootCause ) ) { rootCause = cause ; cause = cause . getCause () ; } return rootCause ; } 
@ java.lang.Override public void onTriggered () { if ( ( tilemap ) != null ) { int [] dims = getNumberPair ( "Please enter the new dimensions?" ) ; if ( dims == null ) return; for ( int i = 0 ; i < ( tilemap . getLayerCount () ) ; i ++ ) { tilemap . getLayer ( i ) . resize ( dims [ 0 ] , dims [ 1 ] ) ; } } } 
public java.util.List < org.neo4j.data.generator.domains.medicalrecords.encounters.Encounter > encountersSince ( org.joda.time.LocalDate dateOfBirth ) { java.util.ArrayList < org.neo4j.data.generator.domains.medicalrecords.encounters.Encounter > encounters = new java.util.ArrayList < org.neo4j.data.generator.domains.medicalrecords.encounters.Encounter > () ; org.joda.time.LocalDate currentDate = dateOfBirth ; org.joda.time.LocalDate today = new org.joda.time.LocalDate () ; while ( currentDate . isBefore ( today ) ) { encounters . add ( encounterGenerator . nextEncounter ( currentDate ) ) ; currentDate = currentDate . plusDays ( ( ( int ) ( ( ( java.lang.Math . random () ) * 365 ) * ( org.neo4j.data.generator.domains.medicalrecords.encounters.EncounterSequenceGenerator.MAX_YEARS_BETWEEN_ENCOUNTERS ) ) ) ) ; } return encounters ; } 
@ java.lang.Override protected void reloadForSearch ( boolean finalTouch ) { if ( ( mAdapter ) == null ) { return; } try { final int sD = mData.length ; for ( int i = 0 ; i < sD ; ++ i ) { if ( ( mData [ i ] ) instanceof ds.framework.v4.data.AbsRecyclerViewData ) { invalidateData ( i ) ; } } loadDataAndDisplay () ; } catch ( java.lang.Throwable e ) { ds.framework.v4.common.Debug . logException ( e ) ; } } 
public static java.util.List < com.teinproductions.tein.papyrosprogress.Milestone > getMilestones ( java.lang.String json ) throws java.text.ParseException , org.json.JSONException { org.json.JSONArray jArray = new org.json.JSONArray ( json ) ; java.util.List < com.teinproductions.tein.papyrosprogress.Milestone > result = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( jArray . length () ) ; i ++ ) { result . add ( com.teinproductions.tein.papyrosprogress.JSONUtils . getMilestone ( jArray . getJSONObject ( i ) ) ) ; } return result ; } 
public void usePotion () { for ( int i = 2 ; i >= 0 ; i -- ) { if ( ( this . potions [ i ] ) != null ) { heal ( 50 ) ; this . potions [ i ] = null ; return; } } } 
public static void main ( java.lang.String [] args ) { char letter ; int a ; final int MIN = 65 ; final int MAX = 122 ; final int STOPLINE1 = 85 ; final int STOPLINE2 = 122 ; for ( a = MIN ; a <= MAX ; a ++ ) { letter = ( ( char ) ( a ) ) ; java.lang.System.out . print ( ( "  " + letter ) ) ; if ( ( a == STOPLINE1 ) || ( a == STOPLINE2 ) ) java.lang.System.out . println () ; } java.lang.System.out . println ( "\nEnd of application" ) ; } 
private void setSPenToolActionWithAllCanvases ( int toolAction ) { for ( int i = 0 ; i < ( numWritableCharBoxCols ) ; i ++ ) { for ( int j = 0 ; j < ( numCharBoxesInCol ) ; j ++ ) { mCharBoxes [ i ] [ j ] . setToolTypeAction ( SpenSurfaceView.TOOL_SPEN , toolAction ) ; } } return; } 
public org.pb.x12.EDI parse ( java.io.InputStream source ) throws java.io.IOException , org.pb.x12.FormatException { java.lang.StringBuilder strBuffer = new java.lang.StringBuilder () ; char [] cbuf = new char [ 1024 ] ; int length ; java.io.Reader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( source ) ) ; while ( ( length = reader . read ( cbuf ) ) != ( - 1 ) ) { strBuffer . append ( cbuf , 0 , length ) ; } java.lang.String strSource = strBuffer . toString () ; return parse ( strSource ) ; } 
public void startTournament ( ) throws java.lang.Exception { for ( int p1 = 0 ; p1 < ( players . size () ) ; p1 ++ ) { for ( int p2 = 0 ; p2 < ( players . size () ) ; p2 ++ ) { if ( p1 != p2 ) { startGame ( players . get ( p1 ) , players . get ( p2 ) ) ; } } } } 
@ java.lang.Override public void setRawData ( java.util.List < float [] > data ) { this . centroids = null ; this . data = new edu.uc.rphash.tests.clusterers.KMeans2.PointND [ data . size () ] ; for ( int i = 0 ; i < ( data . size () ) ; i ++ ) { this . data [ i ] = new edu.uc.rphash.tests.clusterers.KMeans2.PointND ( data . get ( i ) , 1 , 0.0F ) ; } } 
@ java.lang.Override public void run () { while ( true ) { while ( ! ( isSearching () ) ) { try { java.lang.Thread . sleep ( 50 ) ; } catch ( java.lang.InterruptedException ire ) {} if ( mExit ) return; } mSearcherDone = false ; mSearcher . go () ; mSearcherDone = true ; de.htwsaar.chessbot.engine.search.SearchWorker . infoBestmove ( mSearcher . getBestMove () , mSearcher . getPonderMove () ) ; de.htwsaar.chessbot.engine.search.SearchWorker . infoHash ( mSearcher . getHashTable () . usage () ) ; stopSearching () ; } } 
public void reiniciar ( ) throws java.lang.InterruptedException { damas_v1.Ficha f = new damas_v1.Ficha ( "·" ) ; for ( int i = 0 ; i < ( MAXFILAS ) ; i ++ ) { for ( int j = 0 ; j < ( MAXCOLUMNAS ) ; j ++ ) { casillero [ i ] [ j ] = f ; setChanged () ; } } } 
public boolean validateDayOfWeek ( java.time.LocalDateTime currentTime ) { application.main.Business business = new application.main.Business () ; for ( int i = 0 ; i < ( business . getOpeningDays () . size () ) ; i ++ ) { if ( business . getOpeningDays () . get ( i ) . equals ( currentTime . getDayOfWeek () ) ) { application.main.Utility.LOGGER . info ( "Valid business time" ) ; return true ; } } application.main.Utility.LOGGER . info ( "Invalid business time" ) ; return false ; } 
public void handle ( org.dsa.iot.dslink.node.actions.ActionResult event ) { try { com.serotonin.bacnet4j.type.constructed.PriorityArray priorities = getPriorityArray () ; if ( priorities == null ) return; for ( int i = 1 ; i <= ( priorities . getCount () ) ; i ++ ) { relinquish ( i ) ; } refreshPriorities () ; } catch ( com.serotonin.bacnet4j.exception.BACnetException e ) { bacnet.BacnetPoint.LOGGER . error ( "error: " , e ) ; } } 
@ java.lang.Override public java.lang.String toString () { if ( ( head ) == null ) { return null ; } java.lang.StringBuffer sb = new java.lang.StringBuffer () ; com.badalchowdhary.datastructures.Node currentNode = head ; while ( ( currentNode . getNext () ) != null ) { sb . append ( ( ( currentNode . getData () ) + " -> " ) ) ; currentNode = currentNode . getNext () ; } sb . append ( currentNode . getData () ) ; return sb . toString () ; } 
private static < T > void addGroupAtId ( java.util.List < T > seqResGroups , T group , int sequenceIndexId ) { while ( ( seqResGroups . size () ) <= sequenceIndexId ) { seqResGroups . add ( null ) ; } if ( sequenceIndexId >= 0 ) { seqResGroups . set ( sequenceIndexId , group ) ; } } 
public void resolveForwardReferences ( ) throws org.exist.xquery.XPathException { while ( ! ( forwardReferences . isEmpty () ) ) { final org.exist.xquery.FunctionCall call = forwardReferences . pop () ; final org.exist.xquery.UserDefinedFunction func = call . getContext () . resolveFunction ( call . getQName () , call . getArgumentCount () ) ; if ( func == null ) { throw new org.exist.xquery.XPathException ( call , ErrorCodes.XPST0017 , ( "Call to undeclared function: " + ( call . getQName () . getStringValue () ) ) ) ; } else { call . resolveForwardReference ( func ) ; } } } 
public static float harmonic () { float oldSum = 0.0F ; float sum = 1.0F ; int n = 1 ; while ( oldSum < sum ) { oldSum = sum ; sum += 1.0F / n ; n += 1 ; if ( ( n % 100000 ) == 0 ) { java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; } } java.lang.System.out . println ( ( ( ( "n = " + n ) + ", sum = " ) + sum ) ) ; return sum ; } 
public boolean contains ( long value ) { int hashCode = hash ( value ) ; int hashMarker = - 1 ; while ( ( ( this . table [ hashCode ] ) != null ) && ( hashCode != hashMarker ) ) { if ( ( this . table [ hashCode ] ) == value ) return true ; if ( hashMarker == ( - 1 ) ) hashMarker = hashCode ; hashCode = ( hashCode + 1 ) % ( this . table . length ) ; } return false ; } 
public static int getDepth ( java.lang.String line ) { int depth = 1 ; for ( int i = 0 ; i < ( line . length () ) ; i ++ ) { if ( ( ( line . charAt ( i ) ) == '\t' ) || ( ( line . charAt ( i ) ) == ' ' ) ) { depth ++ ; } else { break; } } return depth ; } 
private void UpdatePlayerTable () { playerTable . clearChildren () ; playerTable . add ( new io.github.teamfractal.actors.Label ( "List of Players for the Game" , this . game . skin ) ) ; playerTable . row () ; for ( int i = 0 ; i < ( newPlayerNames . size () ) ; i ++ ) { playerTable . add ( new io.github.teamfractal.actors.Label ( newPlayerNames . get ( i ) , this . game . skin ) ) ; playerTable . row () ; } } 
public void eliminationTournament () { while ( ( players . size () ) > 1 ) { swissTournamentRunner.GUI . wipePane () ; shufflePlayers () ; sortRankings () ; updateParticipantStats () ; print ( displayInDepthRankings () ) ; generatePairings ( 0 ) ; pollForResults () ; elimination () ; } } 
@ java.lang.Override public final void clear () { final java.util.Iterator < com.github.veqryn.collect.Node < K , V > > iter = new NodePrefixSubMapIterator ( key , includePrefixOfKey , keyInclusive , includePrefixedByKey , canBeEmpty ) ; while ( iter . hasNext () ) { iter . next () ; iter . remove () ; } } 
private static java.util.List < Tile > createGameBoard ( final Board.Builder builder ) { final Tile [] tiles = new Tile [ BoardUtils.NUM_TILES ] ; for ( int i = 0 ; i < ( BoardUtils.NUM_TILES ) ; i ++ ) { tiles [ i ] = Tile . createTile ( i , builder.boardConfig . get ( i ) ) ; } return java.util.Arrays . asList ( tiles ) ; } 
private void SendFileContent ( java.net.Socket conn , java.io.InputStream fileIs ) throws java.io.IOException { java.io.OutputStream os = conn . getOutputStream () ; byte [] b = new byte [ 1024 ] ; int x = fileIs . read ( b ) ; while ( x != ( - 1 ) ) { if ( x < 1024 ) { b = java.util.Arrays . copyOf ( b , x ) ; } os . write ( b ) ; x = fileIs . read ( b ) ; } } 
private void extendProgram () { notNullVariables . set ( 0 ) ; insertAdditionalVariables () ; org.teavm.model.Variable [] parameters = new org.teavm.model.Variable [ ( methodDescriptor . parameterCount () ) + 1 ] ; for ( int i = 0 ; i < ( parameters.length ) ; ++ i ) { parameters [ i ] = program . variableAt ( i ) ; } phiUpdater = new org.teavm.model.util.PhiUpdater () ; phiUpdater . updatePhis ( program , parameters ) ; collectAdditionalVariables () ; } 
public int getTotalPoints () { int points = 0 ; for ( int i = 0 ; i < ( this . cards . size () ) ; i ++ ) { points += this . cards . get ( i ) . getPoints () ; } return points ; } 
private boolean assertContiguous ( gnu.trove.list.TIntList list ) { if ( ( list . size () ) < 2 ) { return true ; } int prev = list . get ( 0 ) ; for ( int i = 1 ; i < ( list . size () ) ; ++ i ) { int v = list . get ( i ) ; if ( v == ( prev + 1 ) ) { prev = v ; continue; } return false ; } return true ; } 
public static int [] generateDescending ( int size ) { int [] tab = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { tab [ i ] = size - i ; } return tab ; } 
private boolean canDelete ( java.util.List < org.eclipse.core.resources.IResource > resources ) { if ( ! ( ( containsOnlyProjects ( resources ) ) || ( containsOnlyNonProjects ( resources ) ) ) ) { return false ; } if ( resources . isEmpty () ) { return false ; } for ( int i = 0 ; i < ( resources . size () ) ; i ++ ) { org.eclipse.core.resources.IResource resource = resources . get ( i ) ; if ( resource . isPhantom () ) { return false ; } } return true ; } 
protected void shiftRight ( int index ) { if ( isFull () ) throw new java.lang.IllegalStateException ( "Le tableau est plein" ) ; else if ( isEmpty () ) { return; } else if ( index > ( lastIndex ) ) { return; } else { for ( int i = lastIndex ; i >= index ; i -- ) { myList [ ( i + 1 ) ] = myList [ i ] ; } } } 
public static int next ( int digit , int size ) { int nextVal = 0 ; while ( odometer.Odometer . isValid ( digit , size ) ) { nextVal = digit ++ ; if ( ( ( digit % 10 ) ^ ( size + 1 ) ) == 1 ) { nextVal = 1 ; } } return nextVal ; } 
private java.lang.String [] arrayListToArray ( java.util.ArrayList < java.lang.String > needingConversion ) { int count = needingConversion . size () ; java.lang.String [] converted = new java.lang.String [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { converted [ i ] = needingConversion . get ( i ) ; } return converted ; } 
private void findHrefs () { java.util.regex.Matcher matcher = hrefPattern . matcher ( Html ) ; java.lang.String link = "" ; while ( matcher . find () ) { link = matcher . group ( 1 ) ; if ( ( ( ! ( Suspectedlinks . contains ( link ) ) ) && ( ! ( CrawlerHandler . CheckIfUrlBeenCrawled ( link ) ) ) ) && ( isValidDomain ( link ) ) ) { Suspectedlinks . add ( link ) ; } } } 
protected long getNumberRecursion ( long n ) { int sum = 0 ; if ( n == 0 ) return 1 ; else if ( n == 1 ) return 0 ; else if ( n == 2 ) return 1 ; for ( int k = 1 ; k <= n ; k ++ ) { sum += ( sequenceGeneratorA008472 . getNumber ( k ) ) * ( getNumberRecursion ( ( n - k ) ) ) ; } return sum / n ; } 
public static < T > boolean noneOf ( final java.lang.Iterable < T > source , final int begin , final int end , java.util.function.Predicate < T > pred ) { final java.util.Iterator < T > iter = getIteratorAtIndex ( source , begin ) ; for ( int i = begin ; i != end ; ++ i ) { assert iter . hasNext () ; if ( pred . test ( iter . next () ) ) { return false ; } } return true ; } 
public org.jsoup.select.Elements parse ( org.jsoup.select.Elements r ) { if ( r != null ) { results = r . select ( " tr.productListing-odd" ) ; resultsEven = r . select ( " tr.productListing-even" ) ; for ( int j = 0 ; j < ( resultsEven . size () ) ; j ++ ) { results . add ( resultsEven . get ( j ) ) ; } java.lang.System.out . println ( ( ( results . size () ) + " Results have been returned from CanadaComputers." ) ) ; return results ; } else { return null ; } } 
@ java.lang.Override public synchronized void shutdown () { while ( clientHandlerAdapter . isConnected () ) { clientHandlerAdapter . shutdown () ; } workerGroup . shutdownGracefully () ; while ( ( ( tunnelHandler ) != null ) && ( tunnelHandler . isConnected () ) ) { tunnelHandler . shutdown () ; } } 
private int findHistoryRecord ( java.lang.String placeId ) { for ( int i = 0 ; i < ( HISTORY_SIZE ) ; ++ i ) { com.github.stephenbaidu.placepicker.PlaceInfo placeInfo = getHistoryRecord ( ( i + 1 ) ) ; if ( placeInfo == null ) return 0 ; if ( ( placeInfo.placeId ) == placeId ) { return i + 1 ; } } return 0 ; } 
@ java.lang.Override public void writeBuffer ( java.nio.ByteBuffer byteBuffer , int offset , int length ) { if ( byteBuffer . hasArray () ) { writeBytes ( byteBuffer . array () , offset , length ) ; } else { for ( int pos = offset ; pos < ( offset + length ) ; pos ++ ) { writeByte ( byteBuffer . get ( pos ) ) ; } } } 
public static int calculateInSampleSize ( android.graphics.BitmapFactory.Options options , final int reqWidth , final int reqHeight ) { final int height = options.outHeight ; final int width = options.outWidth ; int inSampleSize = 1 ; if ( ( height > reqHeight ) || ( width > reqWidth ) ) { final int halfHeight = height / 2 ; final int halfWidth = width / 2 ; while ( ( ( halfHeight / inSampleSize ) > reqHeight ) || ( ( halfWidth / inSampleSize ) > reqWidth ) ) { inSampleSize *= 2 ; } } return inSampleSize ; } 
public void colsum ( int [] histogram ) { col_idx [ 0 ] = 0 ; int index = 0 ; for ( int i = 1 ; i <= ( numCols ) ; i ++ ) { col_idx [ i ] = index += histogram [ ( i - 1 ) ] ; } java.lang.System . arraycopy ( col_idx , 0 , histogram , 0 , numCols ) ; nz_length = index ; growMaxLength ( nz_length , false ) ; } 
public void addJet ( java.lang.String model , double speed , double range , int capacity ) { week2.Jets [] addJets = new week2.Jets [ ( jets.length ) + 1 ] ; for ( int i = 0 ; i < ( ( addJets.length ) - 1 ) ; i ++ ) { addJets [ i ] = jets [ i ] ; } addJets [ jets.length ] = new week2.Jets ( model , speed , range , capacity ) ; jets = addJets ; printJets () ; } 
@ java.lang.Override public void run () { try { inFromClient = new java.io.BufferedReader ( new java.io.InputStreamReader ( threadSocket . getInputStream () ) ) ; while ( ( ! ( spade.reporter.LLVM.shutdown ) ) || ( inFromClient . ready () ) ) { java.lang.String line = inFromClient . readLine () ; if ( line != null ) { parseEvent ( line ) ; } } inFromClient . close () ; } catch ( java.lang.Exception exception ) { exception . printStackTrace ( java.lang.System.err ) ; } } 
public void updateTimestepAccel ( Body other ) { double d = distance ( other ) ; double sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { double a = ( ( Constants.G ) * ( other.mass ) ) * ( ( other.position [ i ] ) - ( position [ i ] ) ) ; deltaAccel [ i ] += a / ( ( d * d ) * d ) ; sum += deltaAccel [ i ] ; } } 
@ java.lang.Override public org.ggp.base.util.statemachine.MachineState toGdl ( org.apache.lucene.util.OpenBitSet state ) { java.util.Set < org.ggp.base.util.gdl.grammar.GdlSentence > bases = new java.util.HashSet < org.ggp.base.util.gdl.grammar.GdlSentence > () ; int [] baseProps = propNet . getBasePropositions () ; for ( int i = state . nextSetBit ( 0 ) ; i != ( - 1 ) ; i = state . nextSetBit ( ( i + 1 ) ) ) { bases . add ( gdlSentenceMap . get ( ( ( baseOffset ) + i ) ) ) ; } return new org.ggp.base.util.statemachine.MachineState ( bases ) ; } 
public java.util.List < hr.fer.tki.evolution_algorithm.chromosome.IChromosome > getBestSolutions ( int num ) { java.util.List < hr.fer.tki.evolution_algorithm.chromosome.IChromosome > solutions = new java.util.ArrayList <> () ; for ( int i = 0 ; i < num ; i ++ ) { solutions . add ( this . population . get ( i ) ) ; } for ( hr.fer.tki.evolution_algorithm.chromosome.IChromosome chromosome : solutions ) { java.lang.System.out . println ( chromosome . getFitness () ) ; } return solutions ; } 
private boolean projectHasItestsDependency () { java.util.List < org.apache.maven.model.Dependency > deps = project . getDependencies () ; boolean containsItests = false ; java.util.Iterator i = deps . iterator () ; while ( ( i . hasNext () ) && ( ! containsItests ) ) { org.apache.maven.model.Dependency d = ( ( org.apache.maven.model.Dependency ) ( i . next () ) ) ; containsItests |= ( d . getArtifactId () . equals ( "itests" ) ) && ( d . getGroupId () . equals ( "org.universAAL.support" ) ) ; } return containsItests ; } 
public void toHTMLTable ( java.io.PrintWriter output ) { T tmp ; output . print ( "<table>" ) ; while ( this . results . hasNext () ) { tmp = this . results . next () ; output . print ( tmp . toHTMLTableRow () ) ; } output . print ( "</table>" ) ; output . flush () ; } 
public void init ( org.magic.api.beans.MagicDeck deck ) { cards = new java.util.ArrayList < org.magic.api.beans.MagicCard > () ; if ( deck != null ) if ( ( deck . getMap () ) != null ) for ( java.util.Map.Entry < org.magic.api.beans.MagicCard , java.lang.Integer > cci : deck . getMap () . entrySet () ) { org.magic.api.beans.MagicCard mc = cci . getKey () ; for ( int i = 0 ; i < ( cci . getValue () ) ; i ++ ) cards . add ( mc ) ; } refresh () ; } 
public boolean canAdvance ( java.lang.Integer [] counters , java.lang.Integer [] boundaries ) { for ( int cElem = 0 ; ( cElem < ( counters.length ) ) && ( cElem < ( boundaries.length ) ) ; ++ cElem ) { if ( ! ( counters [ cElem ] . equals ( boundaries [ cElem ] ) ) ) return true ; } return false ; } 
private void sendPackets ( java.util.ArrayList < sr.Packet > packets ) throws java.io.IOException { while ( ( m_lastSent ) != ( m_winUpper ) ) { sr.Packet p = packets . get ( m_actual ) ; m_socket . send ( p . getDatagramPacket ( m_destAddr , m_destPort ) ) ; m_timeouts . startTimer ( p , sr.SelectiveRepeatUnit.PACKET_TIMEOUT ) ; m_lastSent = ( ( m_lastSent ) + 1 ) % ( m_modulo ) ; m_actual = m_actual += 1 ; } } 
public void newArray ( int size ) { com.himamis.retex.editor.share.meta.MetaArray meta = formula . getMetaModel () . getArray () ; com.himamis.retex.editor.share.model.MathArray array = new com.himamis.retex.editor.share.model.MathArray ( meta , size ) ; currentField . addArgument ( currentOffset , array ) ; com.himamis.retex.editor.share.model.MathSequence field = new com.himamis.retex.editor.share.model.MathSequence () ; array . setArgument ( 0 , field ) ; for ( int i = 1 ; i < size ; i ++ ) { array . setArgument ( i , new com.himamis.retex.editor.share.model.MathSequence () ) ; } currentField = field ; currentOffset = 0 ; } 
private void updateFaceCentroid () { faceCentroid . setToZero () ; for ( int i = 0 ; i < ( edges . size () ) ; i ++ ) faceCentroid . add ( edges . get ( i ) . getOriginVertex () ) ; faceCentroid . scale ( ( 1.0 / ( edges . size () ) ) ) ; } 
private void deleteTask ( java.lang.String [] taskString ) { for ( int i = 0 ; i < ( tasks . size () ) ; i ++ ) { if ( taskString [ 0 ] . equals ( tasks . get ( i ) . getTitle () ) ) { if ( taskString [ 1 ] . equals ( tasks . get ( i ) . getDescription () ) ) { tasks . remove ( i ) ; } } } } 
public int run () { int exponent = 1000 ; java.math.BigInteger base = java.math.BigInteger . valueOf ( 2 ) ; java.math.BigInteger value = java.math.BigInteger.ZERO ; int sum = 0 ; value = base . pow ( exponent ) ; java.lang.String str = value . toString () ; for ( int i = 0 ; i < ( str . length () ) ; i ++ ) sum += ( ( int ) ( ( str . charAt ( i ) ) - '0' ) ) ; return sum ; } 
public static int findMaxArg ( int upperBound , int lowerBound , int page ) { int maxCandidate = 0 ; java.lang.Double maxCandidateValue = 0.0 ; for ( int i = lowerBound ; i < upperBound ; i ++ ) { if ( ( pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ) > maxCandidateValue ) { maxCandidateValue = pagenumber.Viterbi.viterbiPages . get ( page ) . get ( i ) ; maxCandidate = i ; } } return maxCandidate ; } 
private void updateLifelinesPosition () { java.util.Iterator < uml.sequencediagram.Lifeline > it = lifelines . iterator () ; ( currentTimePosition ) ++ ; while ( it . hasNext () ) { ( ( uml.sequencediagram.Lifeline ) ( it . next () ) ) . setCurrentPosition ( currentTimePosition ) ; } } 
public void run () { byte [] buffer = new byte [ 1024 ] ; int bytes ; while ( true ) { try { bytes = mmInStream . read ( buffer ) ; mHandler . obtainMessage ( 3 , bytes , ( - 1 ) , buffer ) . sendToTarget () ; } catch ( java.io.IOException e ) {} } } 
@ java.lang.Override protected void onDestroy () { super . onDestroy () ; if ( ( mReceivedPermissions ) == null ) { return; } for ( int i = 0 ; i < ( mReceivedPermissions.length ) ; i ++ ) { java.lang.String permission = mReceivedPermissions [ i ] ; int result = mReceivedPermissionsResults [ i ] ; io.jasonatwood.permissionmanager.PermissionManager . onPermissionResponse ( permission , result ) ; } } 
public net.sf.memoranda.EventsManager.Month getMonth ( int m ) { nu.xom.Elements ms = yearElement . getChildElements ( "month" ) ; java.lang.String mm = java.lang.Integer . toString ( m ) ; for ( int i = 0 ; i < ( ms . size () ) ; i ++ ) if ( ms . get ( i ) . getAttribute ( "month" ) . getValue () . equals ( mm ) ) return new net.sf.memoranda.EventsManager.Month ( ms . get ( i ) ) ; return null ; } 
public static short categoryLevel ( java.lang.String category ) { for ( short level = 1 ; level < 101 ; level ++ ) for ( short level = 1 ; level < 101 ; level ++ ) { for ( Controlleur.Question q : Controlleur.JavaOverflow.database . getQuestions () ) {} } return 100 ; } 
public static void dispalyTotal ( boolean special ) { try { java.io.FileReader fr = new java.io.FileReader ( "customerBill.txt" ) ; java.io.BufferedReader br = new java.io.BufferedReader ( fr ) ; java.lang.String line ; while ( ( line = br . readLine () ) != null ) { java.lang.System.out . println ( line ) ; } fr . close () ; } catch ( java.io.IOException e ) { e . printStackTrace () ; } } 
protected java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > getConflictResponses () { final java.util.List < com.orientechnologies.orient.server.distributed.ODistributedResponse > servers = new java.util.ArrayList < com.orientechnologies.orient.server.distributed.ODistributedResponse > () ; int bestGroupSoFar = getBestResponsesGroup () ; for ( int i = 0 ; i < ( responseGroups . size () ) ; ++ i ) { if ( i != bestGroupSoFar ) { for ( com.orientechnologies.orient.server.distributed.ODistributedResponse r : responseGroups . get ( i ) ) servers . add ( r ) ; } } return servers ; } 
public void replaceValue ( T newValue , int index ) { if ( ! ( indexCheck ( index ) ) ) return; linkedList.Node < T > currentNode = this . start ; for ( int i = 0 ; i < index ; i ++ ) { currentNode = currentNode . getTail () ; } currentNode . setHead ( newValue ) ; } 
public static void main ( java.lang.String [] args ) { double inches ; double meters ; int counter ; counter = 0 ; for ( inches = 1 ; inches <= 144 ; inches ++ ) { meters = inches / 39.37 ; java.lang.System.out . println ( ( ( ( inches + "inches is " ) + meters ) + "meters." ) ) ; counter ++ ; if ( counter == 12 ) { java.lang.System.out . println () ; counter = 0 ; } } } 
protected java.util.ArrayList < java.lang.String > getLabelsFromData () { int size = ( ( chartView.data . size () ) > 0 ) ? chartView.data . get ( 0 ) . size () : 0 ; java.util.ArrayList < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( size ) ; for ( int i = 0 ; i < size ; i ++ ) result . add ( chartView.data . get ( 0 ) . getLabel ( i ) ) ; return result ; } 
protected void getFillersFromFile ( org.w3c.dom.Document doc , edu.illinois.cs.cogcomp.nlp.corpusreaders.ereReader.View nerView ) throws edu.illinois.cs.cogcomp.nlp.corpusreaders.aceReader.XMLException { org.w3c.dom.Element element = doc . getDocumentElement () ; org.w3c.dom.Element fillerElement = edu.illinois.cs.cogcomp.nlp.corpusreaders.aceReader.SimpleXMLParser . getElement ( element , edu.illinois.cs.cogcomp.nlp.corpusreaders.ereReader.FILLERS ) ; org.w3c.dom.NodeList fillerNl = fillerElement . getElementsByTagName ( edu.illinois.cs.cogcomp.nlp.corpusreaders.ereReader.FILLER ) ; for ( int i = 0 ; i < ( fillerNl . getLength () ) ; ++ i ) readFiller ( fillerNl . item ( i ) , nerView ) ; } 
@ org.junit.Test public void getTotalSequencesIterated ( ) throws java.lang.Exception { randoop.generation.exhaustive.SequenceGenerator < java.lang.String > sgenLarger = new randoop.generation.exhaustive.SequenceGenerator ( largerSet ) ; long beforeIterateLarger = sgenLarger . getTotalSequencesIterated () . longValue () ; int numberOfSequencesToGenerate = 13 ; for ( int i = 0 ; i < numberOfSequencesToGenerate ; i ++ ) { sgenLarger . next () ; } org.junit.Assert . assertEquals ( 0 , beforeIterateLarger ) ; org.junit.Assert . assertEquals ( numberOfSequencesToGenerate , sgenLarger . getTotalSequencesIterated () . intValue () ) ; } 
@ org.testng.annotations.Test public void testUDFEnoughInput ( ) throws java.lang.Exception { org.apache.pig.data.Tuple tuple = org.apache.pig.data.TupleFactory . getInstance () . newTuple ( 31 ) ; for ( int i = 0 ; i < 31 ; i ++ ) { tuple . set ( i , 0 ) ; } tuple . set ( 0 , "M" ) ; org.apache.pig.data.DataBag dataBag = instance . exec ( tuple ) ; org.testng.Assert . assertEquals ( 31 , dataBag . size () ) ; org.testng.Assert . assertEquals ( dataBag . iterator () . next () . size () , 5 ) ; } 
public void playGame () { boolean gameIsActive = true ; while ( gameIsActive ) { for ( int indexPlayer = 0 ; indexPlayer < ( players.length ) ; indexPlayer ++ ) { if ( indexPlayer == ( humanPlayerId ) ) { java.lang.System.out . println ( "THIS IS A HUMAN" ) ; showPlayerTurn () ; } else { java.lang.System.out . println ( "This is a bot" ) ; showBotTurn () ; } } gameIsActive = false ; } } 
public MiniJavaVar findVar ( java.lang.String varName ) { int n = contexts . size () ; for ( n -= 1 ; n >= 0 ; n -- ) { MiniJavaVar findRes = contexts . get ( n ) . vars . get ( varName ) ; if ( findRes != null ) { return findRes ; } } return null ; } 
public void updateParticles () { if ( ! ( particles . isEmpty () ) ) { java.util.ArrayList < com.bmesta.powermode.Particle > tempParticles = new java.util.ArrayList ( particles ) ; final java.util.Iterator < com.bmesta.powermode.Particle > particleIterator = tempParticles . iterator () ; while ( particleIterator . hasNext () ) { if ( particleIterator . next () . update () ) { particleIterator . remove () ; } } particles = tempParticles ; this . repaint () ; } } 
public com.sproutigy.commons.binary.BinaryBuilder append ( java.io.InputStream inputStream ) throws com.sproutigy.commons.binary.BinaryException { try { byte [] buffer = new byte [ 4 * 1024 ] ; int readlen ; while ( ( readlen = inputStream . read ( buffer ) ) != ( Binary.EOF ) ) { append ( buffer , 0 , readlen ) ; } } catch ( java.io.IOException e ) { throw new com.sproutigy.commons.binary.BinaryException ( e ) ; } return this ; } 
@ java.lang.Override public dyvil.tools.compiler.ast.field.IDataMember resolveField ( dyvil.tools.parsing.Name name ) { if ( ( this . variables ) == null ) { return null ; } for ( int i = ( this . variables . size () ) - 1 ; i >= 0 ; i -- ) { final dyvil.tools.compiler.ast.field.IVariable variable = this . variables . get ( i ) ; if ( ( variable . getName () ) == name ) { return variable ; } } return null ; } 
java.util.ArrayList getArrayAbschnitt ( java.util.ArrayList list , int i , int j ) { java.lang.System.out . println ( ( "list vor Abschnitt " + list ) ) ; java.util.ArrayList abschnitt = new java.util.ArrayList <> () ; for ( int k = i ; k < ( j + 1 ) ; k ++ ) { abschnitt . add ( list . get ( k ) ) ; } java.lang.System.out . println ( ( ( ( ( ( "list nach Abschnitt von" + i ) + "bis" ) + j ) + "ist" ) + abschnitt ) ) ; return abschnitt ; } 
public static void main ( java.lang.String [] args ) throws java.io.IOException { for ( int i = 0 ; i < ( TestController.files.length ) ; i ++ ) { TestController . tests ( 10 , "p" , ( ( TestController.root ) + ( TestController.files [ i ] ) ) , i , TestController.maxValues [ i ] ) ; TestController . tests ( 10 , "g" , ( ( TestController.root ) + ( TestController.files [ i ] ) ) , i , TestController.maxValues [ i ] ) ; } } 
public static double rootMeansSquaredError ( double [] real , double [] predicted ) { double ret = 0.0 ; for ( int i = 0 ; i < ( real.length ) ; i ++ ) { ret += java.lang.Math . pow ( ( ( real [ i ] ) - ( predicted [ i ] ) ) , 2 ) ; } return java.lang.Math . sqrt ( ( ret / ( real.length ) ) ) ; } 
public static int findMax ( int [] [] a ) { int max = java.lang.Integer.MIN_VALUE ; for ( int i = 0 ; i < ( a.length ) ; i ++ ) { for ( int j = 0 ; j < ( a [ i ] . length ) ; j ++ ) { if ( ( a [ i ] [ j ] ) > max ) { max = a [ i ] [ j ] ; } } } return max ; } 
private void spreadSkylightDownwards ( int x , int z ) { final int highestBlock = getHighestBlock ( x , z ) ; final int sectionY = highestBlock / ( Section.SECTION_HEIGHT ) ; byte light = World.DEFAULT_SKY_LIGHT ; for ( int y = sectionY ; y >= 0 ; -- y ) { final net.morbz.minecraft.world.Section section = sections [ sectionY ] ; if ( section != null ) { light = section . spreadSkylightDownwards ( x , z , light ) ; if ( light == 0 ) { break; } } } } 
public spell.INode find ( java.lang.String word ) { spell.Node temp = root ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { int index = indexByLetter ( word . charAt ( i ) ) ; if ( temp . hasNode ( index ) ) { temp = temp . getNode ( index ) ; } else { return null ; } } if ( ( temp . getValue () ) > 0 ) { return temp ; } return null ; } 
private void saveImagePixels () { for ( int xPixel = 0 ; xPixel < ( this . width ) ; ++ xPixel ) { for ( int yPixel = 0 ; yPixel < ( this . height ) ; ++ yPixel ) { this . setPixel ( xPixel , yPixel , imageArray [ xPixel ] [ yPixel ] . getColor () ) ; } } } 
public static void msgNearby ( org.bukkit.entity.Player p , java.lang.String msg ) { org.bukkit.entity.Entity en ; label58 : for ( java.util.Iterator localIterator = p . getNearbyEntities ( 48.0 , 48.0 , 48.0 ) . iterator () ; localIterator . hasNext () ; ( ( org.bukkit.entity.Player ) ( en ) ) . sendMessage ( msg ) ) { en = ( ( org.bukkit.entity.Entity ) ( localIterator . next () ) ) ; if ( ( ! ( en instanceof org.bukkit.entity.Player ) ) || ( en == p ) ) break label58 ; } } 
private void addRow ( java.lang.String [] row ) { for ( int i = 0 ; i < ( nOfColumns ) ; ++ i ) { data . addEntity ( new org.online.etl.model.abstractions.Entity ( currentId , ( ( long ) ( i ) ) , "" , "String" , "" , null ) ) ; } } 
private boolean solveH ( int col ) { int i = 0 ; for ( i = 0 ; i < ( board.length ) ; i ++ ) { if ( addQueen ( i , col ) ) { if ( ( col > ( ( board [ 0 ] . length ) - 2 ) ) || ( solveH ( ( col + 1 ) ) ) ) { return true ; } else { removeQueen ( i , col ) ; } } } return false ; } 
public java.util.Map < java.lang.String , java.lang.Integer > getBlacklistedVW () { java.util.Map < java.lang.String , java.lang.Integer > blacklistedVW = new java.util.HashMap < java.lang.String , java.lang.Integer > () ; java.util.Set < java.lang.String > keys = redis . smembers ( this . prefix ) ; java.util.Iterator < java.lang.String > it = keys . iterator () ; while ( it . hasNext () ) { java.lang.String key = it . next () ; blacklistedVW . put ( key , ( - 1 ) ) ; } return blacklistedVW ; } 
public int getSyncMsec ( int ms ) { this . lock . lock () ; try { while ( ( ms == ( msec ) ) && ( ( this . syncCount ) == 0 ) ) { try { free . await () ; } catch ( java.lang.InterruptedException e ) { java.lang.Thread . currentThread () . interrupt () ; } } ( this . syncCount ) -- ; free . signalAll () ; } finally { lock . unlock () ; } return msec ; } 
public static void inputData () { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; Exam01.IDCard.str = scanner . next () ; Exam01.IDCard.arr = new java.lang.String [ Exam01.IDCard.str . length () ] ; for ( int i = 0 ; i < ( Exam01.IDCard.str . length () ) ; i ++ ) { Exam01.IDCard.arr [ i ] = Exam01.IDCard.str . substring ( i , ( i + 1 ) ) ; } } 
private boolean validateUI () { java.util.Iterator it = reportHasmap . entrySet () . iterator () ; while ( it . hasNext () ) { java.util.Map.Entry pair = ( ( java.util.Map.Entry ) ( it . next () ) ) ; if ( ! ( pair . getValue () . equals ( "none" ) ) ) { return true ; } } showNormalDailog ( activity . getResources () . getString ( R.string.youHaveNotReportedAnEntryText ) ) ; return false ; } 
public java.lang.String toString () { java.lang.String returnString = "(" + ( this . operator . toString () ) ; java.util.Iterator < dl.syntax.Term > subTermIterator = getSubTerms () . iterator () ; while ( subTermIterator . hasNext () ) { returnString = ( returnString + " " ) + ( subTermIterator . next () . toString () ) ; } returnString = returnString + " )" ; return returnString ; } 
public java.util.List < com.github.bwsoft.iris.sample.FuelFigures.FuelFigure > getFuelFigures ( com.github.bwsoft.iris.message.GroupObject msgObj ) { figures . clear () ; com.github.bwsoft.iris.message.GroupObjectArray fuelFiguresGroup = msgObj . getGroupArray ( fuelFigures ) ; for ( int i = 0 ; i < ( fuelFiguresGroup . getNumOfGroups () ) ; i ++ ) { com.github.bwsoft.iris.message.GroupObject aFigureObj = fuelFiguresGroup . getGroupObject ( i ) ; com.github.bwsoft.iris.sample.FuelFigures.FuelFigure aFigure = new com.github.bwsoft.iris.sample.FuelFigures.FuelFigure () ; aFigure.speed = aFigureObj . getFloat ( speed ) ; aFigure.mpg = aFigureObj . getFloat ( mpg ) ; figures . add ( aFigure ) ; } return figures ; } 
private java.lang.String removeSpaces ( java.lang.String s ) { java.lang.String answer = "" ; for ( int i = 0 ; i < ( s . length () ) ; i ++ ) if ( ( s . charAt ( i ) ) != ' ' ) answer += s . charAt ( i ) ; return answer ; } 
@ org.jetbrains.annotations.Nullable public java.lang.String getCurrentElementType ( com.intellij.psi.PsiElement currentElement ) { while ( ( currentElement instanceof com.intellij.psi.PsiWhiteSpace ) || ( currentElement instanceof com.intellij.psi.PsiComment ) ) { currentElement = currentElement . getPrevSibling () ; } if ( currentElement != null ) { return com.perl5.lang.perl.psi.utils.PerlPsiUtil . getPerlExpressionType ( currentElement ) ; } return null ; } 
public com.intel.genomicsdb.GenomicsDBConf setHostFile ( java.lang.String path ) throws java.io.FileNotFoundException { set ( com.intel.genomicsdb.GenomicsDBConf.MPIHOSTFILE , path ) ; java.util.Scanner scanner = new java.util.Scanner ( new java.io.FileInputStream ( path ) ) ; while ( scanner . hasNextLine () ) { java.lang.String host = scanner . nextLine () ; hosts . add ( host ) ; } return this ; } 
void add ( double confidence , boolean correct ) { for ( int i = 0 ; i < ( org.deidentifier.arx.aggregates.StatisticsClassification.CONFIDENCE_THRESHOLDS.length ) ; i ++ ) { if ( confidence >= ( org.deidentifier.arx.aggregates.StatisticsClassification.CONFIDENCE_THRESHOLDS [ i ] ) ) { falsePositive [ i ] += ( correct ) ? 0.0 : 1.0 ; truePositive [ i ] += ( correct ) ? 1.0 : 0.0 ; } } } 
@ org.junit.Test public void testSize () { Array < java.lang.Integer > list = new Array () ; java.lang.Integer [] elems = new java.lang.Integer [] { - 76 , 45 , 66 , 3 , null , 54 , 33 } ; for ( int i = 0 , sz = 1 ; i < ( elems.length ) ; i ++ , sz ++ ) { list . add ( elems [ i ] ) ; org.junit.Assert . assertEquals ( list . size () , sz ) ; } } 
@ org.junit.Test public void shouldSucceedIfWrittenOutOfOrderWithPosition ( ) throws java.io.IOException { int [] blockorder = getRandomPermutationOfBlockOrder () ; for ( int i = 0 ; i < ( blockcount ) ; i ++ ) { chksumChannel . write ( buffers [ blockorder [ i ] ] , ( ( blockorder [ i ] ) * ( blocksize ) ) ) ; } assertThat ( chksumChannel . getChecksum () , equalTo ( expectedChecksum ) ) ; } 
public void markUsed ( java.lang.String tupleId ) { int n = reservedQueue . size () ; while ( n > 0 ) { com.dipaan.bgcolor.Tuple tuple = reservedQueue . peek () ; if ( tuple . getId () . equals ( tupleId ) ) { reservedQueue . remove ( tuple ) ; } else if ( tuple . isExpired () ) { reservedQueue . remove ( tuple ) ; availableQueue . offer ( tuple ) ; } n -- ; } } 
public boolean addEvent ( octu.core.Event evt ) { for ( int i = 0 ; i < ( events . size () ) ; i ++ ) { if ( events . get ( i ) . getName () . equals ( evt . getName () ) ) { return false ; } } events . add ( evt ) ; return true ; } 
static java.util.Collection < java.lang.String > findIssueKeys ( java.lang.String input ) { java.util.Collection < java.lang.String > ids = new java.util.ArrayList <> () ; java.util.regex.Matcher m = io.jenkins.blueocean.blueocean_github_pipeline.GithubIssue.PATTERN . matcher ( input ) ; while ( m . find () ) { if ( ( m . groupCount () ) >= 1 ) { java.lang.String issue = m . group ( 1 ) ; ids . add ( issue . substring ( 1 , issue . length () ) ) ; } } return ids ; } 
public int fitnessValue () { State s = new State () ; while ( ! ( s . hasLost () ) ) { s . makeMove ( this . pickMove ( s , s . legalMoves () ) ) ; } return s . getRowsCleared () ; } 
private cluedo.Hud.STATUS rollAndMove ( cluedo.Player player , cluedo.Hud.STATUS status , java.util.Scanner sc ) { java.lang.System.out . println ( "/n" ) ; status = cluedo.Hud.STATUS.MOVE_PIECE ; displayBoard ( player , status ) ; movesRemaining = rollDice () ; java.lang.System.out . println ( ( "\nYou rolled a " + ( movesRemaining ) ) ) ; while ( ( movesRemaining ) != 0 ) { movePiece ( player , status , sc ) ; ( movesRemaining ) -- ; displayBoard ( player , status ) ; } return status ; } 
private void parseArrayMetadata ( com.fasterxml.jackson.core.JsonParser jp ) throws java.io.IOException { com.fasterxml.jackson.core.JsonToken value = jp . nextToken () ; while ( value != ( com.fasterxml.jackson.core.JsonToken.END_ARRAY ) ) { if ( value == ( com.fasterxml.jackson.core.JsonToken.START_OBJECT ) ) { parseObjectMetadata ( jp ) ; } else if ( value == ( com.fasterxml.jackson.core.JsonToken.START_ARRAY ) ) { parseArrayMetadata ( jp ) ; } value = jp . nextToken () ; } } 
@ java.lang.Override public int getPoints () { int points = 1 ; for ( java.util.Iterator < entities.Square > i = getSquaresInvolved () . iterator () ; i . hasNext () ; ) { entities.Block b = i . next () . getBlock () ; if ( b != null ) points *= b . getMultiplier () ; } return points ; } 
@ java.lang.Override public java.lang.Boolean getunicodePUA () { for ( int i = 0 ; i < ( toUnicode . length () ) ; ++ i ) { char unicode = this . toUnicode . charAt ( i ) ; if ( ( unicode >= ( org.verapdf.gf.model.impl.operator.textshow.GFGlyph.UNICODE_PRIVATE_USE_AREA_BEGINNING ) ) && ( unicode <= ( org.verapdf.gf.model.impl.operator.textshow.GFGlyph.UNICODE_PRIVATE_USE_AREA_ENDING ) ) ) { return true ; } } return false ; } 
void connect ( ) throws java.lang.InterruptedException { final io.netty.channel.ChannelFuture future ; synchronized ( lock ) { connectFuture = bootstrap . connect ( host , port ) ; future = connectFuture ; } future . sync () ; synchronized ( lock ) { while ( ( ( root ) == null ) && ( future . channel () . isOpen () ) ) { lock . wait () ; } } } 
public void init5 () { for ( int x = ( ( Global.WIDTH ) / 2 ) - 1 ; x < ( ( ( Global.WIDTH ) / 2 ) + 2 ) ; x ++ ) { body . add ( new java.awt.Point ( x , ( - 3 ) ) ) ; } body . add ( new java.awt.Point ( ( ( ( Global.WIDTH ) / 2 ) - 1 ) , ( - 2 ) ) ) ; } 
@ java.lang.Override public akayerov.getsnils.IpraFile getNextDir () { while ( ( idx ) < ( fList.length ) ) { java.lang.String sogrn = null ; if ( ! ( fList [ idx ] . isFile () ) ) { sogrn = fList [ idx ] . getName () ; java.lang.String namefile = sogrn ; return new akayerov.getsnils.IpraFile ( fList [ ( ( idx ) ++ ) ] . getAbsolutePath () , sogrn , namefile ) ; } ( idx ) ++ ; } return null ; } 
void enterInputValue ( final org.openqa.selenium.WebElement inputElement , final java.lang.String value ) throws java.lang.Exception { waitForElementVisible ( inputElement ) ; final java.lang.String inputID = inputElement . getAttribute ( "id" ) ; summonTooltip ( inputID ) ; showInputField ( inputID ) ; for ( int i = 0 ; i < ( value . length () ) ; i ++ ) { inputElement . sendKeys ( java.lang.Character . toString ( value . charAt ( i ) ) ) ; waitFor ( 150L ) ; } closeTooltip () ; } 
private java.util.List < com.example.johannes.colorpicker.Task > addTaskToList () { java.util.List < com.example.johannes.colorpicker.Task > tasks = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( colors . size () ) ; i ++ ) { com.example.johannes.colorpicker.Task task = new com.example.johannes.colorpicker.Task () ; task . setOtsikko ( colors . get ( i ) . getHex () ) ; tasks . add ( task ) ; } return tasks ; } 
public synchronized void advance ( long duration , java.util.concurrent.TimeUnit unit ) { if ( duration <= 0 ) throw new java.lang.IllegalArgumentException ( ( "Duration must be positive; was " + duration ) ) ; this . nanos += unit . toNanos ( duration ) ; for ( ; ; ) { co.paralleluniverse.vtime.ManualClock.Scheduled s = waiters . peek () ; if ( ( s == null ) || ( ( s.deadline ) > ( nanos ) ) ) break; waiters . poll () . wakeup () ; } } 
public double getMinY () { double minY = points . get ( 0 ) . y ; for ( int i = 1 ; i < ( points . size () ) ; i ++ ) { double pY = points . get ( i ) . y ; if ( pY < minY ) { minY = pY ; } } return minY ; } 
public static java.util.List < cascading.tuple.TupleEntry > getAllTupleEntries ( cascading.tap.Tap < org.apache.hadoop.mapred.JobConf , ? , ? > t ) throws java.io.IOException { cascading.tuple.TupleEntryIterator iter = t . openForRead ( com.liveramp.cascading_ext.CascadingUtil . get () . getFlowProcess () ) ; java.util.List < cascading.tuple.TupleEntry > tuples = new java.util.ArrayList < cascading.tuple.TupleEntry > () ; while ( iter . hasNext () ) { tuples . add ( new cascading.tuple.TupleEntry ( iter . next () ) ) ; } return tuples ; } 
private java.lang.String getTransitTitle ( org.opentripplanner.api.model.Leg leg ) { java.lang.String [] possibleTitles = new java.lang.String [] { leg.routeShortName , leg.route , leg.routeId } ; for ( int i = 0 ; i < ( possibleTitles.length ) ; i ++ ) { if ( ! ( android.text.TextUtils . isEmpty ( possibleTitles [ i ] ) ) ) { return possibleTitles [ i ] ; } } return null ; } 
@ java.lang.Override public void applyTo ( double [] xs , int offset , int length , mikera.vectorz.AVector ys ) { for ( int i = 0 ; i < length ; i ++ ) { xs [ ( offset + i ) ] = ( ( java.lang.Number ) ( fn . invoke ( xs [ ( offset + i ) ] , ys . unsafeGet ( i ) ) ) ) . doubleValue () ; } } 
public static double norm2 ( float [] x , int dim ) { double dot = 0 ; for ( int i = 0 ; i < dim ; ++ i ) { dot += ( x [ i ] ) * ( x [ i ] ) ; } return dot ; } 
private static int checkSum ( java.lang.String zip ) { int checkDigit = 0 ; for ( int i = 0 ; i < ( zip . length () ) ; i ++ ) { checkDigit += java.lang.Integer . parseInt ( ( "" + ( zip . charAt ( i ) ) ) ) ; } checkDigit = checkDigit % 10 ; return checkDigit ; } 
@ java.lang.Override public boolean add ( E e ) { java.lang.Object [] arr2 = new java.lang.Object [ ( arr.length ) + 1 ] ; for ( int x = 0 ; x < ( arr.length ) ; x ++ ) { arr2 [ x ] = arr [ x ] ; } arr2 [ arr.length ] = e ; arr = arr2 ; return true ; } 
public java.util.ArrayList pendingBids () { java.util.ArrayList < com.ismailmare.warondemand.WarItem > itemsBeingBidOn = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( inventory . size () ) ; i ++ ) { if ( ( inventory . get ( i ) . getStatus () ) == 1 ) { itemsBeingBidOn . add ( inventory . get ( i ) ) ; } } return itemsBeingBidOn ; } 
private int getColumn () { int x ; java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; while ( true ) { java.lang.System.out . print ( "Please enter the column number (1-10):" ) ; x = scanner . nextInt () ; if ( ( x >= 1 ) & ( x <= 10 ) ) return x - 1 ; } } 
@ java.lang.Override public void run () { while ( ( hitQueue . size () ) > 0 ) { org.bukkit.event.entity.EntityDamageByEntityEvent e = hitQueue . remove () ; ( ( org.bukkit.entity.Damageable ) ( e . getEntity () ) ) . damage ( e . getDamage () , e . getDamager () ) ; } } 
public static int maxInBounds ( int [] A , int lowerBound , int upperBound ) { int max = 0 ; int [] bounds = new int [] { lowerBound , upperBound } ; for ( int i = MyMath . min ( bounds ) ; i < ( ( MyMath . max ( bounds ) ) + 1 ) ; i ++ ) { max = java.lang.Math . max ( A [ i ] , max ) ; } return max ; } 
private int getStartIndex () { int start = 0 ; double MAX = 0 ; for ( int i = 0 ; i < ( numOfCity ) ; i ++ ) { for ( int j = 0 ; j < ( numOfCity ) ; j ++ ) { if ( ( distance [ i ] [ j ] ) > MAX ) { MAX = distance [ i ] [ j ] ; start = i ; } } } return start ; } 
public boolean remove ( int index ) { if ( ( index < 1 ) || ( index > ( size () ) ) ) return false ; com.seb.research.algorithms.LinkedList.Node current = head ; for ( int i = 1 ; i < index ; i ++ ) { if ( ( current . getNext () ) == null ) { return false ; } current = current . getNext () ; } current . setNext ( current . getNext () . getNext () ) ; ( count ) -- ; return true ; } 
@ java.lang.Override public void run () { while ( connected ) { try { java.lang.String message = in . readLine () ; player . getMessageFromClient ( message ) ; } catch ( java.io.IOException ex ) { connected = false ; player . getMessageFromClient ( "disconnected" ) ; } } } 
public boolean isManaTurn ( int turnNum ) { int current = 1 ; int past = 0 ; while ( current < ( turnNum + 1 ) ) { int temp = current ; current += past ; past = temp ; if ( current == turnNum ) { return true ; } } return false ; } 
public void removeAtIndex ( int index ) { if ( index <= 0 ) { removeFirstNode () ; } else if ( index >= ( ( size ) - 1 ) ) { removeLastNode () ; } else { a3.LinkedList.Node stepNode = head ; for ( int i = 1 ; i < index ; ++ i ) { stepNode = stepNode.next ; } stepNode.next = stepNode.next.next ; stepNode = stepNode.next ; stepNode = null ; -- ( size ) ; } } 
public void ReInit ( java.io.Reader stream ) { jj_input_stream . ReInit ( stream , 1 , 1 ) ; token_source . ReInit ( jj_input_stream ) ; token = new org.sbml.jsbml.text.parser.Token () ; jj_ntk = - 1 ; jj_gen = 0 ; for ( int i = 0 ; i < 17 ; i ++ ) jj_la1 [ i ] = - 1 ; for ( int i = 0 ; i < ( jj_2_rtns.length ) ; i ++ ) jj_2_rtns [ i ] = new org.sbml.jsbml.text.parser.FormulaParserLL3.JJCalls () ; } 
static boolean isAxiom ( Expression d ) { for ( int i = 0 ; i < ( LogicHW1.axioms . size () ) ; i ++ ) { if ( LogicHW1.axioms . get ( i ) . equalStruct ( d , new java.util.HashMap <> () , true ) ) { LogicHW1.out . println ( ( "Сх. акс. " + ( i + 1 ) ) ) ; return true ; } } return false ; } 
public float activated ( float [] inputs ) { int temp = 0 ; for ( int i = 0 ; i < ( inputs.length ) ; i ++ ) { temp += ( inputs [ i ] ) * ( weights [ i ] ) ; } if ( temp >= ( weights [ ( ( weights.length ) - 1 ) ] ) ) return 1 ; return 0 ; } 
@ java.lang.Override public boolean undoAction () { for ( int col = 0 ; col < 12 ; col ++ ) { for ( int row = 0 ; row < 12 ; row ++ ) { boardTiles . get ( row ) . get ( col ) . setExists ( start [ row ] [ col ] ) ; } } colsTextField . setText ( java.lang.Integer . toString ( startCols ) ) ; rowsTextField . setText ( java.lang.Integer . toString ( startRows ) ) ; redrawBoard () ; return true ; } 
private void readTokens ( com.fsck.k9.mail.store.ImapResponseParser.ImapResponse response ) throws java.io.IOException { response . clear () ; java.lang.String firstToken = ( ( java.lang.String ) ( readToken ( response ) ) ) ; response . add ( firstToken ) ; if ( isStatusResponse ( firstToken ) ) { parseResponseText ( response ) ; } else { java.lang.Object token ; while ( ( token = readToken ( response ) ) != null ) { if ( ! ( token instanceof com.fsck.k9.mail.store.ImapResponseParser.ImapList ) ) { response . add ( token ) ; } } } } 
public java.lang.String toByteCode ( java.lang.String i_assembly ) { java.util.List < backend.Compiler.asm_line > asm_array = new java.util.ArrayList < backend.Compiler.asm_line > () ; java.lang.String byteCodeReturn = "" ; java.lang.String [] raw_lines = i_assembly . split ( "\\r?\\n" ) ; for ( int line_i = 0 ; line_i < ( raw_lines.length ) ; line_i ++ ) { asm_array . add ( new backend.Compiler.asm_line ( raw_lines [ line_i ] ) ) ; byteCodeReturn += asm_array . get ( line_i ) . getByteCode () ; } return byteCodeReturn ; } 
@ java.lang.Override public boolean availableForBooking ( java.util.Set < com.real.apps.shuttle.domain.model.BookedRange > potentialBookedRanges , com.real.apps.shuttle.domain.model.BookedRange bookedRange ) { if ( ( potentialBookedRanges == null ) || ( potentialBookedRanges . isEmpty () ) ) { return true ; } java.util.Iterator < com.real.apps.shuttle.domain.model.BookedRange > iterator = potentialBookedRanges . iterator () ; while ( iterator . hasNext () ) { com.real.apps.shuttle.domain.model.BookedRange subject = iterator . next () ; if ( ( subject != null ) && ( subject . coincide ( bookedRange ) ) ) { return false ; } } return true ; } 
private static boolean isCyclic ( int numberOfCourse , java.util.Map < java.lang.Integer , java.util.Set < java.lang.Integer > > prerequisitePerCourse ) { for ( int course = 0 ; course < numberOfCourse ; course ++ ) { java.util.Set < java.lang.Integer > targetCourses = new java.util.HashSet <> () ; targetCourses . add ( course ) ; if ( com.sevendragons.practice.leetcode.medium.coursesschedule.Solution . isCourseContainedInPrerequisites ( prerequisitePerCourse , targetCourses , course ) ) { return true ; } } return false ; } 
private void updateParityFlag () { boolean parity = false ; for ( byte b = this . state . sfrs . A . getValue () ; b != 0 ; b = ( ( byte ) ( b & ( b - 1 ) ) ) ) parity = ! parity ; this . state . sfrs . PSW . setBit ( parity , 0 ) ; } 
private void computeTwoCMPProjectionConstraintMatrices () { for ( int i = 0 ; i < ( numberOfFootstepsToConsider ) ; i ++ ) { tmpTwoCMPProjection_Aeq . set ( ( 3 * i ) , i , 1.0 ) ; tmpTwoCMPProjection_beq . set ( i , 0 , 1.0 ) ; } } 
private void init () { for ( lightpos.light [] parent : parents ) { for ( int i = 0 ; i < ( nNumber ) ; i ++ ) { parent [ i ] = new lightpos.light ( generatorRandom . nextInt ( ( ( roomWidth ) + 1 ) ) , generatorRandom . nextInt ( ( ( roomLength ) + 1 ) ) , generatorRandom . nextInt ( 5 ) , true ) ; } } } 
@ java.lang.Override public void remove ( java.lang.Object object ) { if ( ( internalList ) == null ) return; for ( int ic = 0 ; ic < ( internalList . size () ) ; ic ++ ) { if ( internalList . get ( ic ) . getReturnValue () . equals ( object ) ) { internalList . remove ( ic ) ; this . remove ( object ) ; break; } } } 
@ java.lang.Override public void clearAuction () { for ( int i = 0 ; i < ( bids.length ) ; i ++ ) { if ( ( bids [ i ] ) > 0 ) { bountyState . getAgents () [ i ] . receiveResource ( res ) ; bids [ i ] = 0 ; } } } 
@ java.lang.Override public com.udacity.gradle.joketeller.Joke loadInBackground () { int retryCount = 0 ; com.udacity.gradle.joketeller.Joke joke = loadJoke () ; if ( ( ( lastJoke ) != null ) && ( joke != null ) ) { while ( ( joke . equals ( lastJoke ) ) && ( retryCount < ( com.udacity.gradle.builditbigger.MainActivity.RETRY_LIMIT ) ) ) { timber.log.Timber . d ( "Got the same joke, looking for fresh material!" ) ; joke = loadJoke () ; retryCount ++ ; } } return joke ; } 
private double [] primConverter ( java.lang.Double [] valArr ) { double [] primArr = new double [ valArr.length ] ; for ( int i = 0 ; i < ( valArr.length ) ; i ++ ) { primArr [ i ] = valArr [ i ] ; } return primArr ; } 
private void findPercentiles () { int count = 0 ; lowerIndex = 0 ; for ( lowerIndex = 0 ; ( ( lowerIndex ) < ( histogram.length ) ) && ( count < ( lowerCount ) ) ; ( lowerIndex ) ++ ) { count += histogram [ lowerIndex ] ; } for ( upperIndex = lowerIndex ; ( ( upperIndex ) < ( histogram.length ) ) && ( count < ( upperCount ) ) ; ( upperIndex ) ++ ) { count += histogram [ upperIndex ] ; } } 
void drainUntil ( long upToNanos ) { long now = timeNanos ; java.util.concurrent.PriorityBlockingQueue < hu.akarnokd.reactive4javaflow.TestSchedulerService.TestTask > q = queue ; for ( ; ; ) { hu.akarnokd.reactive4javaflow.TestSchedulerService.TestTask tt = q . peek () ; if ( ( tt == null ) || ( ( tt.dueNanos ) > upToNanos ) ) { break; } q . remove ( tt ) ; timeNanos = tt.dueNanos ; tt . run () ; } timeNanos = upToNanos ; } 
public void updateLockedLevels () { for ( int i = 0 ; i < ( buttons ) ; i ++ ) { if ( com.darkhouse.gdefence.GDefence . getInstance () . user . getLevelAvailable ( ( ( firstButtonInt ) + i ) ) ) { levels [ i ] . unLock () ; } else { levels [ i ] . lock () ; } } } 
@ java.lang.Override public void render ( com.badlogic.gdx.graphics.g2d.SpriteBatch batch ) { for ( int currentX = 0 ; currentX < ( innerTiles.length ) ; currentX ++ ) { for ( int currentY = 0 ; currentY < ( innerTiles [ 0 ] . length ) ; currentY ++ ) { innerTiles [ currentX ] [ currentY ] . render ( batch ) ; } } } 
public static java.lang.String random ( int length ) { java.lang.StringBuilder builder = new java.lang.StringBuilder () ; while ( ( builder . length () ) < length ) { builder . append ( se.rupy.http.Event.BASE_58 [ java.lang.Math . abs ( ( ( se.rupy.http.Event.random . nextInt () ) % ( se.rupy.http.Event.BASE_58.length ) ) ) ] ) ; } return builder . toString () ; } 
public E get ( int index ) { LinkedSet < E > . Item < E > item = main ; if ( ( index < 0 ) || ( index >= ( size ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( "Index " + index ) + " isn't in range (0 - " ) + ( ( size ) - 1 ) ) + ")" ) ) ; } for ( int i = 0 ; i <= index ; i ++ ) { item = item.next ; } return item.value ; } 
private java.lang.String listToConfig ( java.util.ArrayList < mars.client.Module > list ) { java.lang.StringBuilder aStringBuilder = new java.lang.StringBuilder () ; aStringBuilder . append ( "[" ) ; for ( int i = 0 ; i < ( list . size () ) ; i ++ ) { aStringBuilder . append ( list . get ( i ) . toString () ) . append ( "," ) ; } aStringBuilder . deleteCharAt ( aStringBuilder . length () ) ; aStringBuilder . append ( "]" ) ; return aStringBuilder . toString () ; } 
public static < T extends uk.ac.bbsrc.tgac.miso.core.data.DetailedSample > T getParent ( java.lang.Class < T > targetParentClass , uk.ac.bbsrc.tgac.miso.core.data.DetailedSample start ) { for ( uk.ac.bbsrc.tgac.miso.core.data.DetailedSample current = uk.ac.bbsrc.tgac.miso.core.util.LimsUtils . deproxify ( start . getParent () ) ; current != null ; current = uk.ac.bbsrc.tgac.miso.core.util.LimsUtils . deproxify ( current . getParent () ) ) { if ( targetParentClass . isInstance ( current ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) T result = ( ( T ) ( current ) ) ; return result ; } } return null ; } 
private void CreateSpecies ( java.lang.String type , int number ) { for ( int i = 0 ; i < number ; i ++ ) { GetPositionsAndTypes () ; ( ( java.util.List < Species.ISpecie > ) ( species ) ) . add ( Species.SpecieFactory . GetSpecies ( type , RandomPosition () ) ) ; } GetPositionsAndTypes () ; } 
public void launch () { try { socket = new java.net.ServerSocket ( port ) ; java.lang.System.out . println ( ( ( "TCP high level server is running on " + ( port ) ) + "..." ) ) ; while ( true ) { java.net.Socket tcpClient = socket . accept () ; client.Client client = new client.Client ( tcpClient , responseDelay , this ) ; executorService . submit ( client ) ; java.lang.System.out . println ( "Server is listening new client..." ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } } 
@ java.lang.Override public java.lang.String toString () { java.lang.String str = "Symbol Table list:" ; for ( int i = nestinglevel ; ( - 1 ) < ( nestinglevel ) ; i ++ ) { str += ( "Nesting level " + i ) + ":\n" ; str += tables [ i ] . toString () ; } return str ; } 
private void dataInit () { for ( int i = 0 ; i < 3 ; i ++ ) { dataMagnetic . add ( new java.util.ArrayList < java.lang.Integer > () ) ; dataOrientation . add ( new java.util.ArrayList < java.lang.Integer > () ) ; dataAccelerate . add ( new java.util.ArrayList < java.lang.Integer > () ) ; dataGyroscope . add ( new java.util.ArrayList < java.lang.Integer > () ) ; dataGravity . add ( new java.util.ArrayList < java.lang.Integer > () ) ; } } 
public boolean groupRetriever () { view . setText ( "Group Members\n" ) ; try ( java.io.FileInputStream file = openFileInput ( ( "CMG" + ( groupName ) ) ) ) { java.util.Scanner in = new java.util.Scanner ( file ) ; while ( in . hasNextLine () ) { userAdded . add ( in . nextLine () ) ; schedAdded . add ( in . nextLine () ) ; } } catch ( java.lang.Exception e ) { return false ; } return true ; } 
public void removeConnectedFlagCascade ( int trackIdx ) { mTracks . get ( trackIdx ) . setConnectedPrev ( false ) ; for ( int i = trackIdx + 1 ; i < ( mTracks . size () ) ; i ++ ) { if ( mTracks . get ( i ) . isConnectedPrev () ) mTracks . get ( i ) . setConnectedPrev ( false ) ; else break; } } 
public boolean InspectInventory ( java.lang.String object ) { for ( int col = 0 ; col < ( playerInventory.length ) ; col ++ ) { if ( playerInventory [ col ] [ 1 ] . toString () . equals ( object ) ) { return true ; } } return false ; } 
private static int argument ( char [] array , int cursor , java.lang.StringBuilder argument ) { for ( int i = cursor ; i < ( array.length ) ; i ++ ) { char c = array [ i ] ; switch ( c ) { case ',' : case ')' : return i + 1 ; case ' ' : if ( ( argument . length () ) == 0 ) continue; default: argument . append ( c ) ; } } return array.length ; } 
protected static java.lang.String [] createNames ( int nameCount , java.lang.String preamble ) { if ( preamble == null ) preamble = "V" ; int i = 0 ; java.lang.String [] n = new java.lang.String [ nameCount ] ; while ( i < nameCount ) { n [ i ] = preamble + ( ++ i ) ; } return n ; } 
public static int getFutureLinesVanished ( de.slothsoft.tetris.Board board , de.slothsoft.tetris.Stone stone , int blockY ) { int lines = 0 ; for ( int y = 0 ; y < ( stone . getHeightInBlocks () ) ; y ++ ) { int stoneBlocks = stone . calculateBlockCountOfLine ( y ) ; int boardBlocksCount = board . calculateBlockCountOfLine ( ( y + blockY ) ) ; if ( ( stoneBlocks + boardBlocksCount ) >= ( Board.WIDTH_IN_BLOCKS ) ) { lines ++ ; } } return lines ; } 
public ATMServer.Server handleData ( ) throws java.io.IOException { int i = 0 ; int maxConnections = 200 ; byte id = 1 ; while ( ( i ++ ) < maxConnections ) { java.net.Socket clientConnection = s . accept () ; id ++ ; ATMServer.Worker worker = new ATMServer.Worker ( clientConnection , functions , clientData , id ) ; java.lang.Thread t = new java.lang.Thread ( worker ) ; t . start () ; logger . info ( ( "New client connected, assigned thread ID #" + ( t . getId () ) ) ) ; } return this ; } 
private Player.Solution buildRandomSolution ( Player.GameState gs , Player.AI opAI , Player.ScoreEvaluation eval ) { Player.Solution solution = new Player.Solution ( Player.MagicNumbers.SIMULATION_DEPTH ) ; Player.GameState newGs = gs . copy () ; for ( int i = 0 ; i < ( Player.MagicNumbers.SIMULATION_DEPTH ) ; i ++ ) { solution.actions [ i ] = getRandomAction ( gs ) ; Player.GameEngine . applyActionWithoutCopy ( newGs , solution.actions [ i ] , opAI . compute ( gs ) ) ; solution.score += eval . getGameStateScore ( newGs , i ) ; } return solution ; } 
@ java.lang.Override public void onChanged () { super . onChanged () ; int childCount = getChildCount () ; if ( childCount < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ) { for ( int i = childCount ; i < ( com.daprlabs.cardstack.SwipeDeck.NUMBER_OF_CARDS ) ; ++ i ) { addNextCard () ; } for ( int i = 0 ; i < ( getChildCount () ) ; ++ i ) { positionItem ( i ) ; } } } 
public java.lang.String [] removeEntry ( java.lang.String [] arrayToRemoveFrom , int entryNumber ) { java.lang.String [] result = new java.lang.String [ ( arrayToRemoveFrom.length ) - 1 ] ; int tmp = 0 ; for ( int i = 0 ; i < ( result.length ) ; i ++ ) { if ( i == entryNumber ) { tmp = 1 ; } result [ i ] = arrayToRemoveFrom [ ( i + tmp ) ] ; } return result ; } 
public static org.eclipse.core.resources.IFile getFile ( org.eclipse.jdt.core.IJavaElement element ) { org.eclipse.core.resources.IResource res = null ; try { while ( ( res = element . getCorrespondingResource () ) == null ) element = element . getParent () ; if ( res instanceof org.eclipse.core.resources.IFile ) return ( ( org.eclipse.core.resources.IFile ) ( res ) ) ; } catch ( org.eclipse.jdt.core.JavaModelException e ) { org.eclipse.etools.Activator . logError ( "Failed finding corresponding resource" , e ) ; } return null ; } 
protected java.util.List < java.lang.String > splitQueryString ( java.lang.String query ) { final int qLen = query . length () ; java.util.List < java.lang.String > blocks = new java.util.ArrayList < java.lang.String > () ; for ( int index = 0 ; ( index + ( seqSize ) ) < qLen ; index += window ) { blocks . add ( query . substring ( index , ( index + ( seqSize ) ) ) ) ; } return blocks ; } 
public int find ( int x , int [] data , int start , int end ) { if ( end > start ) for ( int i = start ; i <= end ; i ++ ) if ( ( data [ i ] ) == x ) return i ; return - 1 ; } 
public void print ( int copies ) { java.lang.String onStatus = "" ; if ( isOn ) onStatus = " is on!" ; else onStatus = " is off!" ; java.lang.String textToPrint = ( modelNumber ) + onStatus ; while ( ( copies > 0 ) && ( ! ( paperTray . isEmpty () ) ) ) { java.lang.System.out . println ( textToPrint ) ; copies -- ; } if ( paperTray . isEmpty () ) java.lang.System.out . println ( "Load more paper" ) ; } 
private int getInternalIndexOfObjectAt ( int index ) throws java.lang.IndexOutOfBoundsException { int nbObjectsSoFar = 0 ; int pos = 0 ; while ( nbObjectsSoFar < index ) { jumpingalien.model.Characters currentObject = objects . get ( pos ) ; if ( ( currentObject != null ) && ( ( objects . indexOf ( currentObject ) ) == pos ) ) nbObjectsSoFar ++ ; pos ++ ; } return pos - 1 ; } 
public static boolean checkWinX ( char dot ) { for ( int i = 0 ; i <= 1 ; i ++ ) { for ( int j = 0 ; j <= 1 ; j ++ ) { if ( ( j == 0 ) && ( i == 0 ) ) continue; if ( TicTacToe . checkLine ( TicTacToe.lastX , TicTacToe.lastY , i , j , TicTacToe.ROW_FOR_WIN , dot ) ) return true ; } } return false ; } 
public java.util.Iterator < Item > iterator () { java.lang.Object [] itarray = new java.lang.Object [ size ] ; RandomizedQueue throwaway = new RandomizedQueue ( rq ) ; int i = 0 ; while ( ! ( throwaway . isEmpty () ) ) { itarray [ ( i ++ ) ] = throwaway . dequeue () ; } return new RandomizedQueueIterator ( itarray ) ; } 
private void getMemberIDFromUser () { java.lang.System.out . print ( "PLEASE TYPE THE MEMBER ID\n>" ) ; input = scan . next () ; while ( ! ( checkMemberID ( input ) ) ) { displayError ( "INVALID ID" ) ; input = scan . next () ; } memberID = java.lang.Integer . parseInt ( input ) ; } 
protected static java.lang.String getRoomName ( java.util.ArrayList < main.java.com.marist.mscs721.Room > rooms ) { boolean inputCheck = false ; java.lang.String test = "" ; while ( ! inputCheck ) { java.lang.System.out . println ( "Room Name?" ) ; test = main.java.com.marist.mscs721.RoomScheduler.keyboard . next () ; java.lang.System.out . println ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) ; if ( ( main.java.com.marist.mscs721.RoomScheduler . findRoomIndex ( rooms , test ) ) == ( - 1 ) ) { java.lang.System.out . println ( "ERROR: Invalid room. Please input a room that is on the room list." ) ; } else { inputCheck = true ; } } return test ; } 
private void sendStateRequest ( java.lang.Integer transactionId , java.util.Collection < java.lang.Integer > processes ) { for ( java.util.Iterator < java.lang.Integer > i = processes . iterator () ; i . hasNext () ; ) { send ( new StateRequest ( transactionId , this . id , i . next () , null ) ) ; } } 
public void paintComponent ( java.awt.Graphics g ) { super . paintComponent ( g ) ; if ( ( dt ) != null ) { currentPos = new int [ ( kb . getAttributeList () . size () ) - 1 ] ; for ( int i = 0 ; i < ( currentPos.length ) ; i ++ ) currentPos [ i ] = 0 ; drawTree ( g , dt ) ; } } 
private final void drawGrid ( android.graphics.Canvas canvas , float offset , int min ) { for ( int i = 0 ; i < ( ( com.gmail.wazappdotgithub.ships.common.Constants.DEFAULT_BOARD_SIZE ) + 1 ) ; i ++ ) { float itimeso = i * offset ; canvas . drawLine ( 0 , itimeso , min , itimeso , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; canvas . drawLine ( itimeso , 0 , itimeso , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } canvas . drawLine ( ( min - 1 ) , 0 , ( min - 1 ) , min , com.gmail.wazappdotgithub.ships.model.views.BoardView.foregroundPaint ) ; } 
private void friendName () { waitSentence ( "\"Is this your friend\"?" ) ; while ( nameFriend ) { waitSentence ( "\"What is his name?\"" ) ; java.lang.String userInput = readKeyboardInput . nextLine () ; waitSentence ( ( ( "\"His name is " + userInput ) + "?\"" ) ) ; userInput = readKeyboardInput . nextLine () ; if ( userInput . equalsIgnoreCase ( "Yes" ) ) { waitSentence ( "\"Thats a nice name too\"" ) ; nameFriend = false ; } } } 
public java.util.List < java.lang.Double > prodOfLists ( java.util.List < java.lang.Double > xList , java.util.List < java.lang.Double > yList ) { java.util.List < java.lang.Double > resList = new java.util.ArrayList < java.lang.Double > () ; int size = xList . size () ; for ( int i = 0 ; i < size ; i ++ ) { resList . add ( i , ( ( xList . get ( i ) ) * ( yList . get ( i ) ) ) ) ; } return resList ; } 
public static java.util.List < java.lang.Integer > shuffle ( java.util.List < ? > list , int count ) { java.util.List < java.lang.Integer > listClone = new java.util.ArrayList <> () ; for ( int i = 0 ; i < ( list . size () ) ; ++ i ) { listClone . add ( i ) ; } if ( ( list . size () ) == count ) { return listClone ; } java.util.Collections . shuffle ( listClone ) ; return listClone . subList ( 0 , count ) ; } 
private datastructures.BugSummary handleBugSummary () { datastructures.BugSummary summary = new datastructures.BugSummary () ; try { while ( reader . hasNext () ) { if ( ( reader . next () ) == ( javax.xml.stream.events.XMLEvent.START_ELEMENT ) ) { if ( Constants.BUG_CATEGORY . equals ( reader . getLocalName () ) ) { summary . add ( handleBugCategory () ) ; } } else { if ( isEndElement ( Constants.BUG_SUMMARY ) ) { break; } } } } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return summary ; } 
static boofcv.alg.feature.detect.squares.SquareNode pickNot ( boofcv.alg.feature.detect.squares.SquareNode target , boofcv.alg.feature.detect.squares.SquareNode child0 , boofcv.alg.feature.detect.squares.SquareNode child1 ) { for ( int i = 0 ; i < 4 ; i ++ ) { boofcv.alg.feature.detect.squares.SquareEdge e = target.edges [ i ] ; if ( e == null ) continue; boofcv.alg.feature.detect.squares.SquareNode c = e . destination ( target ) ; if ( ( c != child0 ) && ( c != child1 ) ) return c ; } throw new java.lang.RuntimeException ( "There was no odd one out some how" ) ; } 
public void onCraftMatrixChanged ( net.minecraft.inventory.IInventory inv ) { for ( int i = 0 ; i < ( inv . getSizeInventory () ) ; i ++ ) { this . te . setInventorySlotContents ( ( i + 1 ) , inv . getStackInSlot ( i ) ) ; } if ( ( this . craftMatrix ) != null ) this . craftResult . setInventorySlotContents ( 0 , net.minecraft.item.crafting.CraftingManager . getInstance () . findMatchingRecipe ( this . craftMatrix , this . te . getWorldObj () ) ) ; } 
public void deleteFloor ( int x , int y ) { for ( int scan = 0 ; scan < ( floors . size () ) ; scan ++ ) { if ( ( ( floors . get ( scan ) . xPosition ) == x ) && ( ( floors . get ( scan ) . yPosition ) == y ) ) { floors . remove ( scan ) ; } } } 
public java.lang.String displayContents () { java.lang.String contents = "" ; int index = 0 ; while ( index < ( size () ) ) { T data = get ( index ) ; if ( data != null ) { contents = ( ( ( ( contents + "[ " ) + index ) + " ]\t= " ) + data ) + "\n" ; } index ++ ; } return contents ; } 
@ java.lang.Override public void run () { boolean end = false ; while ( ! end ) { if ( ( elements . size () ) > 0 ) { de.uni_hildesheim.sse.monitoring.runtime.recordingServer.RecordingStrategiesElement element = elements . remove ( 0 ) ; element . process ( strategy ) ; int id = element . getIdentification () ; element . release () ; end = ( Constants.ENDSYSTEM ) == id ; } else { java.lang.Thread . yield () ; } } printElementStatistics () ; } 
public model.player.Player getPlayer ( model.adventurers.AdventurerType advT ) { java.util.Iterator < model.player.Player > it = getPlayers () . iterator () ; model.player.Player p = null ; while ( ( it . hasNext () ) && ( ! ( ( p = it . next () ) . getCurrentAdventurer () . getADVENTURER_TYPE () . equals ( advT ) ) ) ) {} return p ; } 
public java.lang.String toString () { java.lang.String str = "" ; for ( int i = 0 ; i < ( data.length ) ; i ++ ) { str = ( ( ( str + "\n" ) + i ) + ": " ) + ( data [ i ] ) ; } return str ; } 
public boolean containsKey ( java.lang.Object key ) { int pos = getHash ( key ) ; if ( ( table [ pos ] ) == null ) { return false ; } else { hashtable.HashTable.Node curr = table [ pos ] ; while ( curr != null ) { if ( curr.key . equals ( key ) ) { return true ; } curr = curr.next ; } return false ; } } 
@ java.lang.Override public int linearIndex ( int i ) { setLinearStride () ; int idx = i ; for ( int j = 0 ; j < ( ( org.nd4j.linalg.api.shape.Shape . rank ( shapeInformation ) ) - 1 ) ; j ++ ) { if ( ( size ( i ) ) == 1 ) continue; idx += i * ( stride ( j ) ) ; } return ( org.nd4j.linalg.api.shape.Shape . offset ( shapeInfo () ) ) + idx ; } 
public java.util.List < com.xz.data.prepare.RawData > fetchData ( com.xz.data.syntax.TqlEntity tqlEntity , com.xz.data.syntax.TqlInterval tqlInterval ) { java.util.List < com.xz.data.prepare.RawData > result = com.google.common.collect.Lists . newArrayList () ; for ( int i = 1 ; i < 4 ; ++ i ) { result . add ( new com.xz.data.prepare.RawData ( i , null ) ) ; } return result ; } 
public boolean findItem ( java.lang.String item ) { boolean q = false ; java.lang.String name = item ; for ( int num = 0 ; num < 101 ; num ++ ) { if ( items [ num ] [ 0 ] . toLowerCase () . equals ( name . toLowerCase () ) ) { q = true ; } } return q ; } 
public void makeSmall () { for ( int i = 0 ; i < ( first.adapter.vList . size () ) ; i ++ ) { ( ( android.widget.TextView ) ( first.adapter.vList . get ( i ) ) ) . setTextSize ( TypedValue.COMPLEX_UNIT_SP , 70 ) ; } } 
public static java.lang.String readHeaderString ( byte [] buffer ) { int i = 0 ; while ( ( i < ( buffer.length ) ) && ( ! ( webserver.ParseTools . endOfHeader ( buffer , ( i - 1 ) ) ) ) ) { i ++ ; } return new java.lang.String ( buffer , 0 , i ) ; } 
private java.lang.String encode ( java.lang.String input ) { java.lang.String rtn = "" ; java.lang.String first5 = input . toLowerCase () . concat ( "      " ) . substring ( 0 , 5 ) ; for ( int i = 0 ; i < 5 ; ++ i ) { int ascii = ( ( int ) ( first5 . charAt ( i ) ) ) ; rtn = rtn . concat ( java.lang.String . valueOf ( ascii ) ) ; } return java.lang.String . valueOf ( java.lang.Long . parseLong ( rtn ) ) ; } 
private void resize () { java.lang.Integer [] result = new java.lang.Integer [ ( stack.length ) * 2 ] ; int i ; for ( i = 0 ; i < ( stack.length ) ; i ++ ) { result [ i ] = stack [ i ] ; } while ( i < ( result.length ) ) { result [ i ] = null ; i ++ ; } stack = result ; } 
public static java.lang.String readUntilNonEmptyLine ( java.io.BufferedReader r ) { java.lang.String line = null ; try { while ( ( line = r . readLine () ) != null ) { if ( ( line . length () ) > 0 ) { return ( line + " " ) + ( edu.psu.ist.acs.micro.mid.scratch.ConstructMID4NewsDocumentSet . readUntilEmptyLine ( r ) ) ; } } } catch ( java.io.IOException e ) { return null ; } return null ; } 
public void viewBlocks ( GameInfo.Environment.Blocks.BlockBase [] [] blocks ) { for ( int x = 0 ; x < ( blocks.length ) ; x ++ ) { for ( int y = 0 ; y < ( blocks [ x ] . length ) ; y ++ ) { if ( ( blocks [ y ] [ x ] ) == null ) { java.lang.System.out . print ( "NULL|" ) ; } else { java.lang.System.out . print ( "GOOD|" ) ; } } java.lang.System.out . println () ; } } 
private synchronized long registerOperationWithHeapSize ( long heapSize ) throws java.lang.InterruptedException { long operationId = ++ ( operationSequenceGenerator ) ; while ( ( ( currentWriteBufferSize ) >= ( maxHeapSize ) ) || ( ( pendingOperationsWithSize . size () ) >= ( maxInFlightRpcs ) ) ) { wait ( com.google.cloud.bigtable.hbase.BigtableBufferedMutator.WAIT_MILLIS ) ; } lastOperationChange = java.lang.System . currentTimeMillis () ; pendingOperationsWithSize . put ( operationId , heapSize ) ; currentWriteBufferSize += heapSize ; return operationId ; } 
private Game.Piece getKing () { java.util.LinkedList < Game.Piece > pieces = Game.Player.state . getPieces ( isWhite ) ; for ( int i = 0 ; i < ( pieces . size () ) ; i ++ ) { if ( 5 == ( pieces . get ( i ) . getIdentifier () ) ) { return pieces . get ( i ) ; } } return null ; } 
public void checkCollisions () { java.util.ArrayList < Game.Enemy > enemies = Game.StartMenu . getEnemyList () ; for ( int i = 0 ; i > ( enemies . size () ) ; i ++ ) { if ( getBounds () . intersects ( enemies . get ( i ) . getBounds () ) ) { ey = 0 ; enemiesKilled += 1 ; } } } 
@ java.lang.Override public org.apache.lucene.util.LongBitSet acceptedGlobalOrdinals ( org.apache.lucene.index.RandomAccessOrds globalOrdinals ) throws java.io.IOException { org.apache.lucene.util.LongBitSet acceptedGlobalOrdinals = new org.apache.lucene.util.LongBitSet ( globalOrdinals . getValueCount () ) ; org.apache.lucene.index.TermsEnum globalTermsEnum ; org.apache.lucene.index.Terms globalTerms = new org.elasticsearch.search.aggregations.bucket.terms.support.IncludeExclude.DocValuesTerms ( globalOrdinals ) ; globalTermsEnum = compiled . getTermsEnum ( globalTerms ) ; for ( org.apache.lucene.util.BytesRef term = globalTermsEnum . next () ; term != null ; term = globalTermsEnum . next () ) { acceptedGlobalOrdinals . set ( globalTermsEnum . ord () ) ; } return acceptedGlobalOrdinals ; } 
@ java.lang.SuppressWarnings ( value = "Duplicates" ) private static void upload ( int port ) throws java.lang.Exception { byte [] sendData = new byte [ 1024 ] ; java.util.Scanner input = new java.util.Scanner ( java.lang.System.in ) ; while ( input . hasNextLine () ) { sendData = input . nextLine () . getBytes () ; csci4311.nc.NetcatUDPClient.clientSocket . send ( new java.net.DatagramPacket ( sendData , sendData.length , csci4311.nc.NetcatUDPClient.ipAddress , port ) ) ; } } 
@ java.lang.Override public void run () { byte [] buffer = new byte [ 1024 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( buffer , buffer.length ) ; isRunning = true ; while ( isRunning ) { try { socket . receive ( packet ) ; java.lang.String msg = new java.lang.String ( buffer , 0 , packet . getLength () ) ; java.lang.System.out . println ( msg ) ; } catch ( java.io.IOException e ) { break; } } } 
protected java.lang.String generateCode ( java.lang.String message ) { message = message . toUpperCase () ; java.lang.StringBuilder codedMessage = new java.lang.StringBuilder () ; for ( int i = 0 ; i < ( message . length () ) ; i ++ ) { java.lang.String val = morseCode . get ( message . charAt ( i ) ) ; if ( val != null ) { codedMessage . append ( val ) ; codedMessage . append ( " " ) ; } else return null ; } return codedMessage . toString () ; } 
protected final int getLineStart ( java.lang.String line ) { int index = 0 ; while ( ( index < ( line . length () ) ) && ( java.lang.Character . isWhitespace ( line . charAt ( index ) ) ) ) { index ++ ; } return com.puppycrawl.tools.checkstyle.utils.CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth () ) ; } 
static void authenticate () { com.fhf.prkr.microclient.MainActivity.authenticated = false ; com.fhf.prkr.microclient.MainActivity.network . sendpacket ( com.fhf.prkr.microclient.MainActivity.network.MANAGEMENT , com.fhf.prkr.microclient.MainActivity.network.AUTHENTICATE , "" , true ) ; boolean requestFailed = false ; while ( ( com.fhf.prkr.microclient.MainActivity.network . stillWaiting () ) == 1 ) { if ( ( com.fhf.prkr.microclient.MainActivity.network . stillWaiting () ) == 42 ) { requestFailed = true ; break; } } if ( ! requestFailed ) {} } 
model.Position winningMove ( common.boardclass.BoardClass < common.pattern.Threat > boardClass , common.StoneType attacker , int depth ) { for ( int i = 0 ; i <= depth ; i ++ ) { model.Position position = offend ( boardClass , attacker , new java.util.HashMap <> () , i ) ; if ( position != null ) { return position ; } } return null ; } 
public int [] getPlayerLocation ( int id ) { int [] pos = new int [ 2 ] ; int counter = 0 ; while ( ! ( gl . processCommand ( "MOVE W" , id ) . equals ( "FAIL" ) ) ) { counter ++ ; } pos [ 0 ] = 1 + counter ; counter = 0 ; while ( ! ( gl . processCommand ( "MOVE N" , id ) . equals ( "FAIL" ) ) ) { counter ++ ; } pos [ 1 ] = 1 + counter ; return pos ; } 
public void clear () { mProcedureDefinitions . clear () ; mProcedureReferences . clear () ; mProcedureNameManager . clear () ; mCountOfReferencesWithReturn = 0 ; int obsCount = mObservers . size () ; for ( int i = 0 ; i < obsCount ; ++ i ) { mObservers . get ( i ) . onClear () ; } } 
private java.lang.Runnable getTaskFromSharedQueue () { synchronized ( tasks ) { while ( ( tasks . isEmpty () ) && ( alive . get () ) ) { try { tasks . wait () ; } catch ( java.lang.InterruptedException e ) {} } if ( ! ( alive . get () ) ) { return null ; } return tasks . removeFirst () ; } } 
public static int [] parseIntArray ( org.json.JSONArray arr ) { if ( arr == null ) return null ; int [] res = new int [ arr . length () ] ; for ( int i = 0 ; i < ( arr . length () ) ; i ++ ) { res [ i ] = arr . optInt ( i ) ; } return res ; } 
private java.lang.String arrayToString ( char [] [] array ) { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; for ( int i = 0 ; i < ( array.length ) ; i ++ ) { for ( int j = 0 ; j < ( array [ 0 ] . length ) ; j ++ ) { sb . append ( array [ i ] [ j ] ) ; } sb . append ( "\n" ) ; } return sb . toString () ; } 
@ org.junit.Test public void CompareTest () { java.util.Random rand = new java.util.Random () ; tests.AbstractDaoFactory daoFact = new tests.DaoFactory () ; tests.CompareDao dao = daoFact . getCompareDao () ; for ( int i = 0 ; i < 50 ; i ++ ) { assertTrue ( ( ( dao . playerComparison ( ( ( ( rand . nextFloat () ) * ( ( max ) - ( min ) ) ) + ( min ) ) , "RB" , "New York Jets" ) ) > 0 ) ) ; } } 
public static void deleteTimer ( final java.lang.String name ) { java.util.Iterator < java.util.Timer > iterator = com.sb.elsinore.LaunchControl.timerList . iterator () ; java.util.Timer tTimer ; while ( iterator . hasNext () ) { tTimer = iterator . next () ; if ( tTimer . getName () . equalsIgnoreCase ( name ) ) { com.sb.elsinore.LaunchControl.timerList . remove ( tTimer ) ; } } } 
public void DrawBoard ( java.awt.Graphics g ) { for ( int r = 0 ; r < ( board.length ) ; r ++ ) { for ( int c = 0 ; c < ( board [ r ] . length ) ; c ++ ) { if ( ( board [ r ] [ c ] ) != null ) board [ r ] [ c ] . draw ( g ) ; } } } 
public static int findBytes ( java.util.LinkedList < java.lang.Byte > arr , byte value ) { int i = 0 ; while ( ( i < ( arr . size () ) ) && ( ( arr . get ( i ) ) != value ) ) i ++ ; if ( i < ( arr . size () ) ) return i ; return - 1 ; } 
public void removeItems () { for ( int position = 0 ; position < ( mItems . size () ) ; position ++ ) { if ( getItem ( position ) . getCanRemove () ) { mItems . remove ( position ) ; todo.javier.mera.todolist.adapters.RecyclerAdapter . notifyItemRemoved ( position ) ; position -- ; } } } 
public void wallsAndGatesV0 ( int [] [] rooms ) { if ( checkCornerCase ( rooms ) ) { return; } for ( int i = 0 ; i < ( rooms.length ) ; i ++ ) { for ( int j = 0 ; j < ( rooms [ 0 ] . length ) ; j ++ ) { if ( ( rooms [ i ] [ j ] ) >= 0 ) { bfsHelper ( rooms , i , j ) ; } } } } 
private java.util.List < de.htw_berlin.HoboOthello.KI.Field > listPossibleSideFields () { java.util.List < de.htw_berlin.HoboOthello.KI.Field > listOfPossibleMoves = listPossibleMoves () ; java.util.List < de.htw_berlin.HoboOthello.KI.Field > listOfPossibleSideFields = null ; int sideFieldIndex = 0 ; while ( sideFieldIndex < ( ( listOfPossibleMoves . size () ) - 1 ) ) { de.htw_berlin.HoboOthello.KI.Field field = listOfPossibleMoves . get ( sideFieldIndex ) ; if ( board . isSideField ( field ) ) { listOfPossibleSideFields . add ( field ) ; } sideFieldIndex ++ ; } return listOfPossibleSideFields ; } 
@ java.lang.Override public void forEachEntry ( java.util.function.ObjIntConsumer < ? super E > action ) { com.google.common.base.Preconditions . checkNotNull ( action ) ; for ( int i = 0 ; i < ( length ) ; i ++ ) { action . accept ( elementSet . asList () . get ( i ) , getCount ( i ) ) ; } } 
final void setFrontOfTask () { boolean foundFront = false ; final int numActivities = mActivities . size () ; for ( int activityNdx = 0 ; activityNdx < numActivities ; ++ activityNdx ) { final com.android.server.am.ActivityRecord r = mActivities . get ( activityNdx ) ; if ( foundFront || ( r.finishing ) ) { r.frontOfTask = false ; } else { r.frontOfTask = true ; foundFront = true ; } } } 
public void reset () { stopwatch . stopTimer () ; spelInformatie . setTotaalAantalBolletjes ( 0 ) ; spelInformatie . reset () ; this . vakjesInhoud . clear () ; for ( int i = 0 ; i < ( vakje.length ) ; i ++ ) vakje [ i ] = null ; vakje = null ; repaint () ; } 
public boolean isValid () { verifyNIL () ; int lastDegree = - ( BinomialHeap.INFINITY ) ; BinomialHeap.BinomialNode x = this . head ; while ( x != ( BinomialHeap.NIL ) ) { if ( ( recVal ( x , new int [ 2 ] ) [ 0 ] ) == 0 ) { return false ; } if ( ( x.degree ) <= lastDegree ) { return false ; } lastDegree = x.degree ; x = x.sibling ; } return true ; } 
private void generateAllMultiplikation () { java.lang.StringBuffer bufa = new java.lang.StringBuffer () ; for ( int a = 0 ; a < 10 ; a ++ ) for ( int b = 0 ; b < 10 ; b ++ ) { append ( bufa , a ) ; append ( bufa , b ) ; } aufgaben = bufa . toString () ; } 
public java.lang.String loadSettingsFile ( nfl.season.input.NFLTeamSettingsFileReaderFactory fileReaderFactory ) throws java.io.IOException { java.io.BufferedReader fileReader = fileReaderFactory . createNFLTeamSettingsReader () ; java.lang.StringBuilder nflTeamSettingsBuilder = new java.lang.StringBuilder () ; java.lang.String line ; try { line = fileReader . readLine () ; while ( line != null ) { nflTeamSettingsBuilder . append ( line ) ; nflTeamSettingsBuilder . append ( "\n" ) ; line = fileReader . readLine () ; } } finally { fileReader . close () ; } return nflTeamSettingsBuilder . toString () ; } 
@ java.lang.Override public void run () { while ( ( mRecorder . getRecordingState () ) == ( android.media.AudioRecord.RECORDSTATE_RECORDING ) ) { short [] data = new short [ ( mBufferSize ) / 2 ] ; mRecorder . read ( data , 0 , ( ( mBufferSize ) / 2 ) ) ; mDecoder . appendSignal ( data ) ; } } 
private void orderedInsert ( gradesystem.Grades insertedGrade ) { int index = 0 ; gradesystem.Grades element ; while ( index < ( aList . size () ) ) { element = aList . get ( index ) ; if ( ( insertedGrade . getTotalGrade () ) > ( element . getTotalGrade () ) ) { aList . add ( index , insertedGrade ) ; break; } index ++ ; } if ( index == ( aList . size () ) ) aList . add ( index , insertedGrade ) ; } 
public void housesNotIncluded ( java.util.ArrayList < org.w3c.dom.Element > houseElements ) { if ( ! ( houseElements . isEmpty () ) ) { for ( int i = 0 ; i < ( houseElements . size () ) ; i ++ ) { houseElements . get ( i ) . setAttribute ( model.ViewHandler.inView , "false" ) ; } } else {} } 
private int findId ( java.lang.String findTitle ) { for ( int i = 0 ; i < ( ( myArrayList . size () ) - 1 ) ; i ++ ) { java.lang.System.out . println ( myArrayList . size () ) ; if ( myArrayList . get ( i ) . getTitle () . contains ( findTitle ) ) { return i ; } } return - 1 ; } 
public void run () { while ( ( ( ( t ) <= ( tf ) ) || ( ( nProf ) > 0 ) ) || ( ( nAlu ) > 0 ) ) { int j = indexOfMin ( tps ) ; if ( ( tpll ) <= ( tps . get ( j ) ) ) { llegada () ; } else { salida ( j ) ; } if ( ( t ) >= ( tf ) ) { tpll = hv ; } } calcularResultados () ; } 
public static void shuffle ( java.lang.Object [] a ) { for ( int i = 1 ; i < ( a.length ) ; i ++ ) { int r = edu.princeton.cs.algs4.StdRandom . uniform ( 0 , ( i + 1 ) ) ; java.lang.Object x = a [ i ] ; a [ i ] = a [ r ] ; a [ r ] = x ; } } 
public java.util.List < utils.Song > getRandomSongList () { java.util.Random rand = new java.util.Random () ; int randNum ; java.util.List < utils.Song > randomSongs = new java.util.ArrayList < utils.Song > () ; for ( int i = 0 ; i < 3 ; i ++ ) { randNum = ( rand . nextInt ( albumSongs . size () ) ) + 1 ; java.lang.System.out . println ( ( "random number: " + randNum ) ) ; randomSongs . add ( albumSongs . get ( ( randNum - 1 ) ) ) ; } return randomSongs ; } 
public java.lang.String fetchOrgFileString ( java.lang.String orgPath ) throws com.matburt.mobileorg.Error.ReportableError { java.io.BufferedReader reader = this . fetchOrgFile ( orgPath ) ; if ( reader == null ) { return "" ; } java.lang.String fileContents = "" ; java.lang.String thisLine = "" ; try { while ( ( thisLine = reader . readLine () ) != null ) { fileContents += thisLine + "\n" ; } } catch ( java.io.IOException e ) { throw new com.matburt.mobileorg.Error.ReportableError ( r . getString ( R.string.error_file_read , orgPath ) , e ) ; } return fileContents ; } 
public void restoreMarkers () { java.util.Iterator < application.GeographicPoint > it = markerMap . keySet () . iterator () ; while ( it . hasNext () ) { gmapsfx.javascript.object.Marker marker = markerMap . get ( it . next () ) ; if ( marker != ( startMarker ) ) { marker . setVisible ( false ) ; marker . setVisible ( true ) ; } } selectManager . resetSelect () ; } 
@ java.lang.SuppressWarnings ( value = "null" ) public void insertAt ( int item , int pos ) { int i = 1 ; Node newNode = new Node () ; newNode.data = item ; newNode.next = null ; Node temp ; temp = head ; while ( i < ( pos - 1 ) ) { i ++ ; temp = temp.next ; } newNode.next = temp.next ; temp.next = newNode ; } 
private void clearUserEdits ( int [] backup ) { int userEdited = 0 ; for ( int i = 0 ; i < ( backup.length ) ; i ++ ) { if ( ( ( backup [ i ] ) != ( Cell.NONE ) ) && ( ! ( mCells [ i ] . isLocked () ) ) ) { backup [ i ] = Cell.NONE ; userEdited ++ ; } } } 
private boolean isNorthEastMovementBlocked ( game.Piece piece , int newX , int newY ) { int moveCounter = 1 ; for ( int i = ( piece . getY () ) + 1 ; i < newY ; i ++ ) { if ( tileHasPiece ( ( ( piece . getX () ) + moveCounter ) , i ) ) return true ; moveCounter ++ ; } return false ; } 
public void test_when_VideoH264PacketProducer_has_started_then_isWorking_returns_true_otherwise_false () { com.example.zebul.cameraservice.packet_producers.video.camera.CameraVideoH264PacketProducer producer = new com.example.zebul.cameraservice.packet_producers.video.camera.CameraVideoH264PacketProducer ( new com.example.zebul.cameraservice.packet_producers.CameraVideoH264PacketProducerTest.H264PacketListenerFake () , new com.example.zebul.cameraservice.packet_producers.CameraVideoH264PacketProducerTest.PacketProductionExceptionListenerFake () ) ; assertFalse ( producer . isWorking () ) ; for ( int i = 0 ; i < 3 ; i ++ ) { producer . start ( defaultCameraSettings ) ; assertTrue ( producer . isWorking () ) ; producer . stop () ; assertFalse ( producer . isWorking () ) ; } } 
private java.lang.String [] getParsedData () { java.lang.String [] parsedComponentData = new java.lang.String [ this . componentList . size () ] ; for ( int i = 0 ; i < ( this . componentList . size () ) ; i ++ ) { Strand temp = this . componentList . get ( i ) ; java.lang.String sequence = temp.sequence ; parsedComponentData [ i ] = ( ( temp.name ) + ":" ) + sequence ; } return parsedComponentData ; } 
private static in.jaaga.learning.api.ChatReply [] convertToChatReplyOptions ( java.lang.String [] options ) { java.util.ArrayList < in.jaaga.learning.api.ChatReply > replies = new java.util.ArrayList <> ( options.length ) ; in.jaaga.learning.api.ChatReply reply ; for ( int i = 0 ; i < ( options.length ) ; i ++ ) { reply = new in.jaaga.learning.api.ChatReply () ; reply.type = ChatReplyType.Regular ; reply.displayText = options [ i ] ; replies . add ( reply ) ; } return replies . toArray ( new in.jaaga.learning.api.ChatReply [ 0 ] ) ; } 
private void appendTypeVarsFromEnclosingFunctions ( java.util.List < gw.lang.ir.IRSymbol > parameters , gw.internal.gosu.parser.IGosuClassInternal gsClass ) { while ( gsClass . isAnonymous () ) { gw.lang.parser.IDynamicFunctionSymbol dfs = getEnclosingDFS ( gsClass ) ; if ( dfs == null ) { break; } if ( dfs . isReified () ) { addTypeParamDescriptor ( parameters , getTypeVarsForDFS ( dfs ) ) ; } gsClass = ( ( gw.internal.gosu.parser.IGosuClassInternal ) ( dfs . getGosuClass () ) ) ; } } 
private void resize ( int capacity ) { assert capacity >= ( N ) ; Item [] temp = ( ( Item [] ) ( new java.lang.Object [ capacity ] ) ) ; for ( int i = 0 ; i < ( N ) ; i ++ ) { copyIfNotNull ( a , temp , i , i ) ; } a = temp ; } 
@ java.lang.Override public void run () { while ( ( progressBarStatus ) < 100 ) { progressBarStatus = counter ; counter += 1 ; try { java.lang.Thread . sleep ( 30 ) ; } catch ( java.lang.InterruptedException e ) { e . printStackTrace () ; } progressBarHandler . post ( new java.lang.Runnable () { @ java.lang.Override public void run () { mProgressDialog . setProgress ( progressBarStatus ) ; } } ) ; } } 
private java.util.ArrayList < com.application.dsmsocial.ImageItem > getData () { final java.util.ArrayList < com.application.dsmsocial.ImageItem > imageItems = new java.util.ArrayList <> () ; android.content.res.TypedArray imgs = getResources () . obtainTypedArray ( R.array.shopImage ) ; for ( int i = 0 ; i < ( imgs . length () ) ; i ++ ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory . decodeResource ( getResources () , imgs . getResourceId ( i , ( - 1 ) ) ) ; imageItems . add ( new com.application.dsmsocial.ImageItem ( bitmap , null ) ) ; } return imageItems ; } 
private static void setToPositionInRow ( de.hotware.blockbreaker.model.Block [] [] pMatrix , int pRow , int pPosition , de.hotware.blockbreaker.model.Block.BlockColor pColor , int pSize ) { pSize += pPosition ; for ( int i = pPosition ; i < pSize ; ++ i ) { pMatrix [ pRow ] [ i ] = new de.hotware.blockbreaker.model.Block ( pColor , pRow , i ) ; } } 
public void tick () { for ( int i = 0 ; i < ( enemies . size () ) ; i ++ ) { enemies . get ( i ) . tick () ; if ( ( enemies . get ( i ) . getHealth () ) <= 0 ) enemies . remove ( i ) ; } } 
public static void main ( java.lang.String [] args ) throws clients.NoAvailableSpaceException , clients.NotADirectoryException , clients.NotInTreeException , clients.ParentException , clients.VirtualDiskDoesntExistException { java.lang.System.out . println ( "What would you like to do ? Type help to see the commands" ) ; java.util.Scanner scan = new java.util.Scanner ( java.lang.System.in ) ; while ( true ) { java.lang.String str = scan . nextLine () ; clients.CLUI . understand ( str ) ; } } 
public void closeBrowser () { mBrowserFrame . setBackgroundColor ( mBackgroundColor ) ; performExitCleanUp () ; mBrowserFrame . removeAllViews () ; int size = mTabsManager . size () ; mTabsManager . shutdown () ; mCurrentView = null ; for ( int n = 0 ; n < size ; n ++ ) { mTabsView . tabRemoved ( 0 ) ; } finish () ; } 
public void run () { network.ServerSocketCreator create = new network.ServerSocketCreator () ; java.lang.Thread serverSock = new java.lang.Thread ( create ) ; serverSock . start () ; java.util.Scanner read = new java.util.Scanner ( java.lang.System.in ) ; char input = 'N' ; java.lang.System.out . println ( "Would you like to stop the server? Y/N" ) ; input = read . nextLine () . charAt ( 0 ) ; while ( input != 'Y' ) { input = read . nextLine () . charAt ( 0 ) ; } read . close () ; create . terminate () ; } 
static src.CircularList < src.Candidate > initList ( int nbCandidates ) { src.CircularList < src.Candidate > list = new src.CircularList () ; for ( int i = 1 ; i <= nbCandidates ; i ++ ) { list . add ( new src.Candidate ( ( "" + i ) , "" ) ) ; } return list ; } 
public java.util.List < com.ryan.pojo.ChunkInfo > fsp () { java.util.List < com.ryan.pojo.ChunkInfo > chunkList = new java.util.ArrayList <> () ; markChunkPostition ( buffer , chunkSize ) ; while ( true ) { int currentPos = this . chunkId ; ( this . chunkId ) ++ ; if ( currentPos >= ( list . size () ) ) { return chunkList ; } else { key . set ( currentPos ) ; chunkList . add ( nextKeyValue ( currentPos ) ) ; } } } 
public java.util.List < java.lang.String > getCookies () { java.lang.String cookies = headers . get ( "Cookie: " ) ; java.lang.System.err . println ( cookies ) ; java.util.List < java.lang.String > cookiesList = new java.util.LinkedList < java.lang.String > () ; if ( cookies != null ) { java.util.StringTokenizer tokenizer = new java.util.StringTokenizer ( cookies , "; " ) ; while ( tokenizer . hasMoreTokens () ) { java.lang.String cookie = tokenizer . nextToken () ; cookiesList . add ( cookie ) ; } } return cookiesList ; } 
public void KSA () { int j = 0 ; int temp = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { j = ( ( j + ( S [ i ] ) ) + ( key [ ( i % ( key.length ) ) ] ) ) % 256 ; temp = S [ i ] ; S [ i ] = S [ j ] ; S [ j ] = temp ; temp = 0 ; } } 
public void moveUpPackageableElements ( org.eclipse.uml2.uml.PackageableElement packageableElement , java.util.Collection < org.eclipse.uml2.uml.PackageableElement > packageableElementsToMove ) { final org.obeonetwork.dsl.uml2.design.internal.services.MoveUpElementSwitch moveUpElementsSwitch = new org.obeonetwork.dsl.uml2.design.internal.services.MoveUpElementSwitch () ; final java.util.List < org.eclipse.uml2.uml.PackageableElement > packageableElementsInRightOrder = retrieveTheRightOrderForPackageableElement ( packageableElementsToMove ) ; final java.util.Iterator < org.eclipse.uml2.uml.PackageableElement > iterator = packageableElementsInRightOrder . iterator () ; while ( iterator . hasNext () ) { final org.eclipse.uml2.uml.Element element = iterator . next () ; moveUpElementsSwitch . moveUpElement ( element ) ; } } 
@ org.junit.Test public void checkAvg ( ) throws java.lang.Exception { com.wolkabout.hexiwear.StepCountActivity step = new com.wolkabout.hexiwear.StepCountActivity () ; double [] array = new double [ 7 ] ; int count = 0 ; while ( count != 7 ) { array [ count ] = 10 * count ; count ++ ; } double weekly = step . stepAvgWeek ( array ) ; java.lang.System.out . println ( weekly ) ; assertTrue ( ( ( weekly == 30.0 ) || ( weekly == 30 ) ) ) ; } 
public java.lang.String [] getNames () { java.lang.String [] names = new java.lang.String [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { names [ i ] = this . playerFields [ i ] . getText () ; } return names ; } 
public void link ( internetz.Artifact newart ) { java.util.ArrayList mostsimilar = getMostSimilar ( bookmarks , newart ) ; int index = 0 ; while ( index < ( mostsimilar . size () ) ) { newart . buildLink ( ( ( internetz.Artifact ) ( mostsimilar . get ( index ) ) ) ) ; index ++ ; } } 
public static void writeDatasetToFile ( java.lang.String fileName , int n ) throws java.io.IOException { java.io.File file = new java.io.File ( fileName ) ; java.io.FileOutputStream fos = new java.io.FileOutputStream ( file ) ; java.io.BufferedWriter bw = new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( fos ) ) ; for ( int i = 1 ; i <= n ; i ++ ) { bw . write ( generator.PuzzleGenerator . encode ( generator.PuzzleGenerator . generate () ) ) ; bw . newLine () ; } bw . close () ; } 
private void checkUsername ( com.musicforall.model.User user ) { java.lang.String searchUsername ; final java.lang.String username = user . getUsername () ; searchUsername = username ; int i = 0 ; while ( ( userService . getIdByUsername ( searchUsername ) ) != null ) { i ++ ; searchUsername = username + i ; } if ( i > 0 ) { user . setUsername ( searchUsername ) ; } } 
public boolean isEveryCharacterUniqueUsingHistogram () { int [] asciiCount = new int [ 128 ] ; for ( int i = 0 ; i < ( string . length () ) ; i ++ ) { ( asciiCount [ string . charAt ( i ) ] ) ++ ; } for ( int i = 0 ; i < ( asciiCount.length ) ; i ++ ) { if ( ( asciiCount [ i ] ) > 1 ) { return false ; } } return true ; } 
public void play () { setup () ; while ( ( playerList . size () ) > 1 ) { for ( int i = 0 ; i < ( playerList . size () ) ; i ++ ) { playerList . get ( i ) . turn ( board , this ) ; printBoard () ; } } } 
@ java.lang.Override public boolean addUniversalDistillationRecipe ( net.minecraftforge.fluids.FluidStack aInput , net.minecraftforge.fluids.FluidStack [] aOutputs , net.minecraft.item.ItemStack aOutput2 , int aDuration , int aEUt ) { for ( int i = 0 ; i < ( java.lang.Math . min ( aOutputs.length , 11 ) ) ; i ++ ) { addDistilleryRecipe ( ( i + 1 ) , aInput , aOutputs [ i ] , ( aDuration * 2 ) , ( aEUt / 4 ) , false ) ; } return addDistillationTowerRecipe ( aInput , aOutputs , aOutput2 , aDuration , aEUt ) ; } 
int appExists ( java.lang.String name ) { for ( int i = 0 ; ( statArray [ i ] ) != null ; ++ i ) { if ( statArray [ i ] . packageName . equals ( name ) ) { android.util.Log . d ( "Crash site" , java.lang.String . valueOf ( i ) ) ; return i ; } } return - 1 ; } 
public static int getUnScheuledHours ( Office offices ) { int hoursNotScheduled = 0 ; for ( int i = 1 ; i < 37 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( offices.officeReq . get ( i ) . get ( j ) ) >= 0 ) { hoursNotScheduled += offices.officeReq . get ( i ) . get ( j ) ; } } } return hoursNotScheduled / 2 ; } 
public java.lang.String removeInitialFinalWhites ( java.lang.String text ) { java.lang.String textWOWhites = text ; while ( ( textWOWhites . startsWith ( " " ) ) || ( textWOWhites . startsWith ( "\t" ) ) ) textWOWhites = textWOWhites . substring ( 1 ) ; while ( ( textWOWhites . endsWith ( " " ) ) || ( textWOWhites . endsWith ( "\t" ) ) ) textWOWhites = textWOWhites . substring ( 0 , ( ( textWOWhites . length () ) - 1 ) ) ; return textWOWhites ; } 
private void printCosts ( int level ) { org.sat4j.core.Vec < java.math.BigInteger > costsToPrint = new org.sat4j.core.Vec < java.math.BigInteger > () ; costs . copyTo ( costsToPrint ) ; for ( int i = level - 1 ; i >= 0 ; i -- ) { costsToPrint . set ( i , computeCostOfLevel ( i ) ) ; } solver . printCosts ( costsToPrint ) ; } 
public io.lambdacloud.util.ObjectArray set ( int ms , int me , int [] aryn , io.lambdacloud.util.ObjectArray ary ) { int row = ( me - ms ) + 1 ; int col = aryn.length ; for ( int i = 0 ; i < row ; i ++ ) for ( int j = 0 ; j < col ; j ++ ) { data [ ( ms + i ) ] [ aryn [ j ] ] = ary.data [ i ] [ j ] ; } return this ; } 
private mil.nga.giat.mage.sdk.datastore.user.Permissions parsePermissions ( com.fasterxml.jackson.core.JsonParser parser ) throws java.io.IOException { if ( ( parser . getCurrentToken () ) != ( com.fasterxml.jackson.core.JsonToken.START_ARRAY ) ) return null ; java.util.Collection < mil.nga.giat.mage.sdk.datastore.user.Permission > permissions = new java.util.ArrayList <> () ; while ( ( parser . nextToken () ) != ( com.fasterxml.jackson.core.JsonToken.END_ARRAY ) ) { java.lang.String permission = parser . getText () . toUpperCase ( java.util.Locale.US ) ; permissions . add ( mil.nga.giat.mage.sdk.datastore.user.Permission . valueOf ( permission ) ) ; } return new mil.nga.giat.mage.sdk.datastore.user.Permissions ( permissions ) ; } 
private static void fillMissingValues () { for ( int i = 0 ; i < ( DatasetCleanup.groupSize ) ; i ++ ) { for ( int j = 0 ; j < ( DatasetCleanup.labels.length ) ; j ++ ) { if ( ( DatasetCleanup.featureSpace [ i ] [ j ] . equals ( null ) ) || ( DatasetCleanup.featureSpace [ i ] [ j ] . equals ( "" ) ) ) DatasetCleanup.featureSpace [ i ] [ j ] = java.lang.String . valueOf ( ( - 1 ) ) ; } } } 
private static void testServerChannelFactory ( org.osgi.framework.BundleContext bundleContext ) { org.osgi.framework.ServiceReference < com.wincom.dcim.agentd.NetworkService > serviceRef = bundleContext . getServiceReference ( com.wincom.dcim.agentd.NetworkService . class ) ; com.wincom.dcim.agentd.NetworkService service = bundleContext . getService ( serviceRef ) ; java.lang.System.out . println ( serviceRef ) ; java.lang.System.out . println ( service ) ; com.wincom.dcim.agentd.internal.AgentdServiceActivator . createAcceptor ( service ) ; for ( int i = 0 ; i < 1 ; ++ i ) { com.wincom.dcim.agentd.internal.AgentdServiceActivator . createConnection ( service ) ; } } 
private int maxIndex ( int [] arr ) { int maxIndex = 0 ; for ( int i = 0 ; i < ( arr.length ) ; i ++ ) { if ( ( arr [ i ] ) >= ( arr [ maxIndex ] ) ) { maxIndex = i ; } } return maxIndex ; } 
@ org.junit.Test public void testTrajectoryBoundsZVelocity () { java.util.List < java.lang.Double > l = com.google.common.collect.Lists . newArrayList () ; for ( int i = 0 ; i < ( ( trajectory . getTrajectoryDuration () ) * 10 ) ; i ++ ) { l . add ( getVelocityZ ( trajectory , ( i / 10.0 ) ) ) ; } assertBounds ( l , speed , speed ) ; } 
boolean compareArray ( int [] A , int [] B ) { if ( ( ( A.length ) - 1 ) != ( ( B.length ) - 1 ) ) { return false ; } for ( int i = 0 ; i < ( ( A.length ) - 1 ) ; i ++ ) { if ( ( A [ i ] ) != ( B [ i ] ) ) { return false ; } } return true ; } 
void addAmountTodo ( int amt , todolist.TodoList list ) { todolist.Todo head = new todolist.Todo ( "Task 1" ) ; list . addTodo ( head ) ; int numAdded = 1 ; while ( numAdded != amt ) { numAdded ++ ; todolist.Todo newTodo = new todolist.Todo ( ( "Task " + ( java.lang.Integer . toString ( numAdded ) ) ) ) ; list . addTodo ( newTodo ) ; } } 
public nu.yona.server.analysis.service.UserAnonymizedSynchronizer.Lock lock ( java.util.UUID userAnonymizedID ) { try { synchronized ( lockedUsers ) { nu.yona.server.analysis.service.UserAnonymizedSynchronizer.LockStatus lockStatus ; while ( ( lockStatus = getLockStatus ( userAnonymizedID ) ) == ( nu.yona.server.analysis.service.UserAnonymizedSynchronizer.LockStatus.LOCKED ) ) { lockedUsers . wait () ; } if ( lockStatus == ( nu.yona.server.analysis.service.UserAnonymizedSynchronizer.LockStatus.FREE ) ) { storeLock ( userAnonymizedID ) ; } return new nu.yona.server.analysis.service.UserAnonymizedSynchronizer.Lock ( userAnonymizedID , ( lockStatus == ( nu.yona.server.analysis.service.UserAnonymizedSynchronizer.LockStatus.FREE ) ) ) ; } } catch ( java.lang.InterruptedException e ) { throw nu.yona.server.exceptions.YonaException . unexpected ( e ) ; } } 
public boolean clear () { if ( ( ArraySize ) == 0 ) { return false ; } else { for ( int i = ArraySize ; i > 0 ; i -- ) { this . remove ( i ) ; } ArraySize = 0 ; return true ; } } 
public static void createHTunnel ( byte [] [] map , int x1 , int x2 , int y ) { for ( int x = java.lang.Math . min ( x1 , x2 ) ; x < ( ( java.lang.Math . max ( x1 , x2 ) ) + 1 ) ; x ++ ) { map [ y ] [ x ] = ( ( byte ) ( dungeon.MapGenDungeon.SPACE ) ) ; } } 
public void run () { while ( true ) { try { java.net.Socket cs = ServerChat . accept () ; chat.Server.FirUtilizator t = new chat.Server.FirUtilizator ( cs ) ; t . start () ; threads . add ( t ) ; } catch ( java.io.IOException ex ) { java.lang.System.out . println ( "Oops" ) ; break; } } } 
public static void writeDictionary ( java.lang.String dictionaryLocation ) throws java.io.IOException { java.util.HashMap < java.lang.String , java.lang.Object > dict = new java.util.HashMap < java.lang.String , java.lang.Object > () ; java.util.Scanner read = new java.util.Scanner ( new java.io.FileReader ( dictionaryLocation ) ) ; while ( read . hasNext () ) { java.lang.String word = read . next () ; dict . put ( word , null ) ; } SpellChecker.dictionary = dict ; } 
public void onClick ( android.view.View v ) { android.util.SparseBooleanArray checked = daysList . getCheckedItemPositions () ; daysSelected = new java.util.ArrayList < java.lang.Integer > () ; for ( int i = 0 ; i < ( checked . size () ) ; i ++ ) { daysSelected . add ( i ) ; } this . headBackToMainScreen () ; } 
public org.json.JSONArray getStoryData () { org.json.JSONArray storyArray = new org.json.JSONArray () ; try { org.json.JSONArray mJSONArray = loadDataFromAsset () ; for ( int i = 2 ; i < ( mJSONArray . length () ) ; i ++ ) { storyArray . put ( mJSONArray . getJSONObject ( i ) ) ; } } catch ( org.json.JSONException ex ) { ex . printStackTrace () ; return null ; } return storyArray ; } 
public int findIndexFromKey ( K key ) { for ( int i = 0 ; i < ( internalMap . size () ) ; i ++ ) { if ( internalMap . get ( i ) . getKey () . equals ( key ) ) return i ; } return - 1 ; } 
public void setMaxCount ( java.lang.Integer max ) { for ( int i = 0 ; i <= ( max + 1 ) ; i ++ ) { itemList . add ( i ) ; } maxItems = max ; dataAdapter . setPagesNumber ( itemList ) ; currentPageListView . setAdapter ( dataAdapter ) ; maxPages . setText ( max . toString () ) ; } 
static byte [] readFile ( java.io.File file ) throws java.io.IOException { byte [] buffer = new byte [ 1024 ] ; java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream () ; java.io.FileInputStream fileInputStream = new java.io.FileInputStream ( file ) ; try { while ( true ) { int read = fileInputStream . read ( buffer ) ; if ( read == ( - 1 ) ) break; bytes . write ( buffer , 0 , read ) ; } } finally { fileInputStream . close () ; } return bytes . toByteArray () ; } 
@ java.lang.Override public void readFields ( java.io.DataInput in ) throws java.io.IOException { int size = in . readInt () ; if ( size == 0 ) { shortestpath = null ; return; } shortestpath = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { shortestpath [ i ] = in . readInt () ; } } 
public static java.lang.String omitEveryOther ( java.lang.String word ) { boolean keepCurrent = true ; int i = 0 ; java.lang.String newSpeak = "" ; while ( i < ( word . length () ) ) { if ( keepCurrent ) { newSpeak += java.lang.String . valueOf ( word . charAt ( i ) ) ; keepCurrent = false ; } else { keepCurrent = true ; } i ++ ; } return newSpeak ; } 
public java.util.List < ralgorithm.State > pmove () { java.util.List < ralgorithm.State > states = new java.util.ArrayList < ralgorithm.State > () ; ralgorithm.State state ; while ( true ) { state = step () ; if ( state == null ) { break; } states . add ( state ) ; } for ( ralgorithm.Movement m : moves ) { m . finalizeMove () ; } return states ; } 
private boolean isMonth ( java.lang.String nextWord ) { boolean ans = false ; for ( int i = 1 ; i < ( monthsInYear.length ) ; i ++ ) { if ( nextWord . contains ( monthsInYear [ i ] ) ) { ans = true ; break; } } return ans ; } 
public final BinaryNum shiftLeft () { final boolean [] newBits = new boolean [ bits.length ] ; for ( int i = 1 ; i < ( bits.length ) ; i ++ ) { newBits [ ( i - 1 ) ] = bits [ i ] ; } newBits [ ( ( bits.length ) - 1 ) ] = false ; return new BinaryNum ( newBits ) ; } 
@ java.lang.Override public void printData () { java.lang.System.out . println ( ( "=> Directory= " + ( this . path ) ) ) ; if ( ( this . files . size () ) > 0 ) java.lang.System.out . println ( "     Files: " ) ; else java.lang.System.out . println ( "     <no files>" ) ; for ( int i = 0 ; i < ( this . files . size () ) ; ++ i ) java.lang.System.out . println ( ( "     - " + ( this . files . get ( i ) ) ) ) ; } 
public static boolean isInvEmpty ( net.minecraft.inventory.IInventory stack ) { boolean empty = true ; if ( stack == null ) return true ; for ( int i = 0 ; i < ( stack . getSizeInventory () ) ; i ++ ) { if ( ! ( stack . getStackInSlot ( i ) . isEmpty () ) ) return false ; } return true ; } 
@ java.lang.Override public void run () { while ( _running ) { try { scanKeyboard () ; } catch ( ioio.lib.api.exception.ConnectionLostException e ) { _running = false ; e . printStackTrace () ; } catch ( java.lang.InterruptedException e ) { _running = false ; e . printStackTrace () ; } } } 
public java.util.List < java.lang.String > asListString ( javax.naming.directory.Attribute att ) throws javax.naming.NamingException { java.util.List < java.lang.String > res = new java.util.LinkedList < java.lang.String > () ; if ( att == null ) return res ; for ( int i = 0 ; i < ( att . size () ) ; i ++ ) res . add ( ( ( java.lang.String ) ( att . get ( i ) ) ) ) ; return res ; } 
private void findSubIndexForColor ( int topIndex , int color ) { if ( ( ( getBuilder () . mColorsSub ) == null ) || ( ( ( getBuilder () . mColorsSub . length ) - 1 ) < topIndex ) ) return; int [] subColors = getBuilder () . mColorsSub [ topIndex ] ; for ( int subIndex = 0 ; subIndex < ( subColors.length ) ; subIndex ++ ) { if ( ( subColors [ subIndex ] ) == color ) { subIndex ( subIndex ) ; break; } } } 
public static int findPositionById ( android.database.Cursor list , long id ) { if ( list == null ) return - 1 ; while ( list . moveToNext () ) { if ( ( list . getLong ( 0 ) ) == id ) { return list . getPosition () ; } } return - 1 ; } 
public void update ( ru.job4j.model.Item updated ) { for ( int i = 0 ; i < ( this . position ) ; i ++ ) { if ( this . items [ i ] . getId () . equals ( updated . getId () ) ) { this . items [ i ] = updated ; } } } 
private java.util.ArrayList < java.lang.String > runSocket ( int packetsMax ) throws java.io.IOException { java.util.ArrayList < java.lang.String > toReturn = new java.util.ArrayList < java.lang.String > () ; while ( packetsMax != 0 ) { byte [] rcvdInfo = new byte [ 10 ] ; java.net.DatagramPacket packet = new java.net.DatagramPacket ( rcvdInfo , rcvdInfo.length ) ; socket . receive ( packet ) ; toReturn . add ( new java.lang.String ( packet . getData () ) ) ; packetsMax -- ; } return toReturn ; } 
public boolean writeData ( byte [] data , int length ) { int written = 0 ; length = java.lang.Math . min ( length , data.length ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( writeBitsRaw ( org.q3df.demo.Q3HuffmanCoder.huff_paths [ ( 255 & ( data [ i ] ) ) ] , org.q3df.demo.Q3HuffmanCoder.sym_size [ ( 255 & ( data [ i ] ) ) ] ) ) > 0 ) { written ++ ; } else break; } return written == length ; } 
private int getPlayerForLine ( final int row , final java.lang.String playerFigure ) { int playerRowCount = 0 ; for ( int i = 0 ; i < ( board . getRowLength ( row ) ) ; i ++ ) { if ( ( ( board . getFigure ( row , i ) ) != null ) && ( ( board . getFigure ( row , i ) . toString () ) == playerFigure ) ) { playerRowCount ++ ; } } return playerRowCount ; } 
private void updateExpressionPartWithSubExpression ( java.util.Stack subexpressionStack ) { while ( ! ( subexpressionStack . empty () ) ) { subexpression += subexpressionStack . pop () ; } if ( ( subexpression ) != "" ) { expressionParts . add ( new app.com.example.grace.currencycalculator.models.Operand ( new java.lang.StringBuilder ( subexpression ) . reverse () . toString () ) ) ; subexpression = "" ; } } 
public static void listing () { try { java.nio.file.Path taskFile = java.nio.file.Paths . get ( "/home/salankiv/greenfox/salankiv-todo-app/assets/tasks.txt" ) ; java.util.List < java.lang.String > lines = java.nio.file.Files . readAllLines ( taskFile ) ; for ( int i = 0 ; i < ( lines . size () ) ; i ++ ) { java.lang.System.out . println ( ( ( ( i + 1 ) + ". " ) + ( lines . get ( i ) ) ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; } } 
public void write ( int data ) { int index = 0 ; while ( index < ( clientCount ) ) { if ( clients [ index ] . active () ) { clients [ index ] . write ( data ) ; index ++ ; } else { removeIndex ( index ) ; } } } 
private void populateGrid () { for ( int h = 0 ; h < ( grid . size () ) ; h ++ ) { for ( int w = 0 ; w < ( fieldWidth ) ; w ++ ) { grid . get ( h ) . add ( w , new Cell () ) ; } } } 
public java.util.PriorityQueue < java.lang.Integer > getStartingNodes () { sorted = poag . getNodeIDs () ; java.util.PriorityQueue < java.lang.Integer > startingNodeIds = new java.util.PriorityQueue <> () ; for ( int i = 0 ; i < ( size ) ; i ++ ) { java.lang.Integer [] prevs = poag . getPreviousNodeIDs ( sorted [ i ] ) ; if ( prevs == null ) { startingNodeIds . add ( sorted [ i ] ) ; } } return startingNodeIds ; } 
public static Bag getTestBag ( int i ) { Bag bag = new Bag ( i ) ; for ( int j = 0 ; j < 10 ; j ++ ) { Token t = CloneTestHelper . getTestToken () ; TokenFrequency tFrequency = new TokenFrequency () ; tFrequency . setToken ( t ) ; tFrequency . setFrequency ( utility.Util . getRandomNumber ( 1 , 1 ) ) ; bag . add ( tFrequency ) ; } return bag ; } 
public static void startGame ( int playercount , int boardsize ) { game.GameMaster . reset () ; for ( int i = 1 ; i <= playercount ; i ++ ) { game.GameMaster.playerAL . add ( new game.Player ( 0.0 , i , 0.0 , 0 , game.GameMaster.names [ ( i - 1 ) ] , 0 ) ) ; } game.GameMaster.EndCheck = boardsize ; game.GameMaster.PlayerInTurn = game.GameMaster.playerAL . get ( 0 ) ; } 
public java.lang.String convertFromArabicToRomanNumeral ( java.lang.Integer inputNumber ) { java.lang.StringBuilder romanNumeral = new java.lang.StringBuilder () ; while ( inputNumber != 0 ) { for ( java.util.Map.Entry < java.lang.Integer , java.lang.String > numeralMapEntry : RomanNumeralConverter.numeralMap . entrySet () ) { java.lang.Integer numeralSegmentArabicValue = numeralMapEntry . getKey () ; java.lang.String numeralSegment = numeralMapEntry . getValue () ; if ( inputNumber >= numeralSegmentArabicValue ) { inputNumber -= numeralSegmentArabicValue ; romanNumeral . append ( numeralSegment ) ; break; } } } return romanNumeral . toString () ; } 
public static int count ( java.lang.String content , char charForSearch ) { int count = 0 ; if ( null == content ) { return 0 ; } int contentLength = content . length () ; for ( int i = 0 ; i < contentLength ; i ++ ) { if ( charForSearch == ( content . charAt ( i ) ) ) { count ++ ; } } return count ; } 
@ java.lang.Override public void opened () { try { while ( ( product . getProductState ( vm ) ) == ( ch.admin.vbs.cube.core.vm.IVmProduct.VmProductState.STARTING ) ) { java.lang.Thread . sleep ( 500 ) ; } product . connectNic ( vm , true ) ; vm . setVpnState ( VmVpnState.CONNECTED ) ; } catch ( java.lang.Exception e ) { ch.admin.vbs.cube.core.vm.ctrtasks.Start.LOG . error ( "VM's VPN was opened but we failed to connect VM's NIC" , e ) ; vm . setVpnState ( VmVpnState.NOT_CONNECTED ) ; } vmModel . fireVmStateUpdatedEvent ( vm ) ; } 
private java.util.ArrayList < java.awt.geom.Point2D.Double > generateTestPath () { java.util.ArrayList < java.awt.geom.Point2D.Double > testPath = new java.util.ArrayList < java.awt.geom.Point2D.Double > () ; for ( int i = 0 ; i < 1000 ; i ++ ) { testPath . add ( new java.awt.geom.Point2D.Double ( ( i / 500.0 ) , 0.0 ) ) ; } return testPath ; } 
public static void main ( java.lang.String [] args ) { java.util.Scanner scanner = new java.util.Scanner ( java.lang.System.in ) ; Controller controller = new Controller () ; Veto . showLine ( controller . getWelcomeMessage () ) ; while ( ! ( controller . isTimeToExit () ) ) { Veto . show ( Veto.MESSAGE_COMMAND_PROMPT ) ; java.lang.String userInput = scanner . nextLine () ; java.lang.String feedback = controller . executeCommand ( userInput ) ; Veto . showLine ( feedback ) ; } scanner . close () ; } 
private void checkInspectionTime () { nyc.c4q.jonathancolon.inContaq.utlities.sqlite.ContactDatabaseHelper dbHelper = nyc.c4q.jonathancolon.inContaq.utlities.sqlite.ContactDatabaseHelper . getInstance ( getApplicationContext () ) ; db = dbHelper . getWritableDatabase () ; java.util.List < nyc.c4q.jonathancolon.inContaq.contactlist.model.Contact > contacts = nyc.c4q.jonathancolon.inContaq.utlities.sqlite.SqlHelper . selectAllContacts ( db ) ; for ( int i = 0 ; i < 1 ; i ++ ) { nyc.c4q.jonathancolon.inContaq.contactlist.model.Contact contact = contacts . get ( i ) ; startNotification ( contact , context ) ; } } 
public static boolean differByOne ( java.lang.String word , java.lang.String ladderLast ) { if ( ( word . length () ) != ( ladderLast . length () ) ) { return false ; } int count = 0 ; for ( int i = 0 ; i < ( word . length () ) ; i ++ ) { if ( ( word . charAt ( i ) ) != ( ladderLast . charAt ( i ) ) ) { count ++ ; } } return count == 1 ; } 
@ java.lang.Override public double distance ( final geogebra.common.kernel.geos.GeoPoint2 p ) { double distance = java.lang.Double.POSITIVE_INFINITY ; for ( int i = 0 ; i < ( geoList . size () ) ; i ++ ) { final geogebra.common.kernel.geos.GeoElement geo = geoList . get ( i ) ; final double d = geo . distance ( p ) ; if ( d < distance ) { distance = d ; } } return distance ; } 
private java.lang.String readStream ( java.io.InputStream in ) throws java.io.IOException { java.lang.StringBuilder sb = new java.lang.StringBuilder () ; try ( java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( in , "utf-8" ) ) ) { java.lang.String line = reader . readLine () ; while ( line != null ) { sb . append ( line . trim () ) ; line = reader . readLine () ; } } return sb . toString () ; } 
public java.util.List < bb.tokenizer.Token > tokenize ( java.lang.String str ) { java.util.ArrayList < bb.tokenizer.Token > tokens = new java.util.ArrayList < bb.tokenizer.Token > () ; while ( ( str . length () ) > 0 ) { str = addNextToken ( str , tokens ) ; } line = 1 ; column = 1 ; return tokens ; } 
public void run () { while ( true ) { try { java.lang.String message ; int length = input . readInt () ; if ( length > 0 ) { byte [] b = new byte [ length ] ; input . readFully ( b ) ; message = new java.lang.String ( b , "UTF-8" ) ; this . sendMessage ( network.AppWorker . handleMessage ( message ) ) ; } } catch ( java.io.IOException e ) { e . printStackTrace () ; break; } } } 
public void GameOver ( MyPanel myPanelB , int ClickedInX , int ClickedInY ) { if ( HasBomb ( myPanelB , ClickedInX , ClickedInY ) ) { for ( int posArray = 0 ; posArray < ( posXBomb.length ) ; posArray ++ ) { myPanelB.colorArray [ ClickedInX ] [ ClickedInY ] = bombs ; myPanelB.colorArray [ posXBomb [ posArray ] ] [ posYBomb [ posArray ] ] = bombs ; myPanelB . repaint () ; } } } 
public static java.lang.String convertToGroupString ( java.lang.String [] group ) { java.lang.String str = "" ; for ( int i = 0 ; i < ( ( group.length ) - 1 ) ; i ++ ) { str += ( group [ i ] ) + ":" ; } str += group [ ( ( group.length ) - 1 ) ] ; return str ; } 
@ java.lang.SuppressWarnings ( value = "PMD" ) public void extractWarFile ( java.lang.String jarFile ) { refreshDirectory ( jarFile ) ; try ( java.util.jar.JarFile jar = new java.util.jar.JarFile ( ( ( ( warDirectory ) + ( java.io.File.separator ) ) + jarFile ) ) ) { java.util.Enumeration entries = jar . entries () ; while ( entries . hasMoreElements () ) { extractFile ( jar , entries ) ; } } catch ( java.io.IOException e ) { org.apache.commons.io.FileUtils . deleteQuietly ( deployDirectory ) ; nc.sumy.edu.webcontainer.deployment.ArchiveExtractor.LOG . warn ( "Cannot read/write/found file: " , e ) ; } } 
private java.lang.String getLine ( int number ) throws java.lang.Exception { java.lang.String value = null ; java.lang.String pageContent = FitnesseFixtureContext.page . getHtml () ; java.lang.String lineizedContent = fitnesse.fixtures.ResponseExaminer . convertBreaksToLineSeparators ( pageContent ) ; java.util.StringTokenizer tokenizedLines = tokenizeLines ( lineizedContent ) ; for ( int i = number ; i != 0 ; i -- ) value = tokenizedLines . nextToken () ; return value != null ? value . trim () : null ; } 
private void updateLine () { int charToRemove = line . length () ; java.lang.System.out . print ( "\r" ) ; line = java.lang.String . format ( "Frames rendered: %d remaining: %d credits earned: %s | %s" , rendered , remaining , ( ( creditsEarned ) != null ? creditsEarned : "unknown" ) , ( ( status ) + ( exiting ? " (Exiting after this frame)" : "" ) ) ) ; java.lang.System.out . print ( line ) ; for ( int i = line . length () ; i <= charToRemove ; i ++ ) { java.lang.System.out . print ( " " ) ; } } 
private void setPositionsOfPlayers ( java.util.List < game.db.GameResultEntity > gameResults , java.util.List < java.lang.Integer > points ) { java.util.Collections . sort ( points ) ; for ( int i = 0 ; i < ( points . size () ) ; i ++ ) { for ( game.db.GameResultEntity gameResult : gameResults ) { if ( gameResult . getPoints () . equals ( points . get ( i ) ) ) { gameResult . setPosition ( ( i + 1 ) ) ; } } } } 
@ java.lang.Override public interfaces.Problem hcSteepestAscent ( interfaces.Problem prob ) { puzzle.PuzzleProblem current = ( ( puzzle.PuzzleProblem ) ( prob ) ) ; puzzle.PuzzleState neighbor ; while ( true ) { neighbor = ( ( puzzle.PuzzleState ) ( current . getBestNeighbor () ) ) ; if ( ( neighbor . getValue () ) >= ( current . getState () . getValue () ) ) return current ; current . addAction ( neighbor.actstr ) ; current . setState ( neighbor ) ; } } 
private void addWorkers ( int count ) { workerCount = count ; workers = new java.util.ArrayList <> () ; for ( int i = 0 ; i < count ; i ++ ) { com.astedt.robin.concurrentobjecthandler.ConcurrentObjectWorker worker = new com.astedt.robin.concurrentobjecthandler.ConcurrentObjectWorker ( this , i ) ; workers . add ( worker ) ; } } 
public java.lang.String [] getPacket ( ) throws java.io.IOException { while ( input . ready () ) { char c = ( ( char ) ( input . read () ) ) ; if ( c == '\n' ) { java.lang.String output = buffer . toString () ; buffer = new java.lang.StringBuilder () ; return output . split ( "\t" ) ; } else buffer . append ( c ) ; } return null ; } 
private boolean hasUnknownTokenAt ( org.languagetool.AnalyzedTokenReadings [] tokens , int startPos , int endPos ) { for ( int i = startPos ; i < endPos ; i ++ ) { org.languagetool.AnalyzedTokenReadings token = tokens [ i ] ; for ( org.languagetool.AnalyzedToken analyzedToken : token . getReadings () ) { if ( analyzedToken . hasNoTag () ) { return true ; } } } return false ; } 
public boolean clustersMatch ( double [] cluster1 , double [] cluster2 , Emat emat ) { if ( ( cluster1 == null ) || ( cluster2 == null ) ) return true ; for ( int i = 0 ; i < ( cluster1.length ) ; i ++ ) { if ( ( java.lang.Math . abs ( ( ( cluster1 [ i ] ) - ( cluster2 [ i ] ) ) ) ) > 2 ) return false ; } return true ; } 
@ org.junit.Test public void fourOfAKindTest2 () { int [] cards = new int [] { 12 , 25 , 38 , 51 , 1 , 7 , 29 } ; for ( int i = 0 ; i < ( cards.length ) ; i ++ ) deck . getCard ( cards [ i ] ) . displayCard () ; int ans = Table . handValue ( cards ) ; org.junit.Assert . assertEquals ( 8 , ans ) ; } 
public void clear () { de.baleipzig.iris.common.Dimension dim = this . dim () ; layer . clear () ; for ( int i = 0 ; i < ( dim . getY () ) ; i ++ ) { java.util.Vector < de.baleipzig.iris.model.neuralnet.node.INode > row = new java.util.Vector <> () ; for ( int j = 0 ; j < ( dim . getX () ) ; j ++ ) row . add ( null ) ; layer . add ( row ) ; } } 
public void add ( com.google.gson.JsonArray cardsJson ) { for ( int i = 0 ; i < ( cardsJson . size () ) ; i ++ ) { cards . add ( new org.leanpoker.player.Card ( cardsJson . get ( i ) . getAsJsonObject () . get ( "suit" ) . getAsString () , cardsJson . get ( 1 ) . getAsJsonObject () . get ( "rank" ) . getAsString () ) ) ; } } 
public void shuffle () { for ( int i = 51 ; i > 0 ; i -- ) { int shuf = ( ( int ) ( ( java.lang.Math . random () ) * ( i + 1 ) ) ) ; Card temp = deck [ i ] ; deck [ i ] = deck [ shuf ] ; deck [ shuf ] = temp ; } cardsUsed = 0 ; } 
@ java.lang.Override public void lock () { if ( ( ( reentrant ) != null ) && ( reentrant . isSame () ) ) { reentrant . acquire () ; } else { while ( ! ( cas . compareAndSet ( false , true ) ) ) { waitForSignal () ; } reentrant = new org.arivu.utils.lock.Reentrant () ; } } 
@ java.lang.Override public void readFromNBT ( @ org.jetbrains.annotations.NotNull final net.minecraft.nbt.NBTTagCompound compound ) { super . readFromNBT ( compound ) ; final net.minecraft.nbt.NBTTagList furnaceTagList = compound . getTagList ( com.minecolonies.coremod.colony.buildings.BuildingCook.TAG_FURNACES , Constants.NBT.TAG_COMPOUND ) ; for ( int i = 0 ; i < ( furnaceTagList . tagCount () ) ; ++ i ) { furnaces . add ( net.minecraft.nbt.NBTUtil . getPosFromTag ( furnaceTagList . getCompoundTagAt ( i ) . getCompoundTag ( com.minecolonies.coremod.colony.buildings.BuildingCook.TAG_POS ) ) ) ; } isSomethingInOven = compound . getBoolean ( com.minecolonies.coremod.colony.buildings.BuildingCook.TAG_COOKING ) ; } 
private boolean isPrime ( int p ) { if ( p == 2 ) return true ; if ( p < 3 ) return false ; if ( ( p % 2 ) == 0 ) return false ; for ( int i = 3 ; ( i * i ) <= p ; i += 2 ) if ( ( p % i ) == 0 ) return false ; return true ; } 
private static java.nio.ByteBuffer setUpBuffer ( java.nio.ByteBuffer sector , int value ) { sector . clear () ; java.lang.Byte byteValue = ( ( byte ) ( 0 ) ) ; while ( sector . hasRemaining () ) { sector . put ( byteValue ) ; } sector . flip () ; return sector ; } 
private static int findValue ( int needle , java.lang.Integer [] haystack ) { int start = 0 ; int end = haystack.length ; while ( start < end ) { int midpoint = ( start + end ) / 2 ; int test = haystack [ midpoint ] ; if ( test == needle ) { return midpoint ; } else if ( test < needle ) { start = midpoint + 1 ; } else { end = midpoint ; } } return - 1 ; } 
protected java.lang.Long doInBackground ( com.androidexpansion.filedownloader.DownloadExtraAssets [] remoteLocalResources ) { int count = remoteLocalResources.length ; long totalSize = 0 ; for ( int i = 0 ; i < count ; i ++ ) { totalSize += downloadExtraAssets . downloadFile ( remoteLocalResources [ i ] ) ; java.lang.Integer progress = ( ( int ) ( ( ( i + 1 ) / ( ( float ) ( count ) ) ) * 100 ) ) ; publishProgress ( progress ) ; if ( isCancelled () ) break; } return totalSize ; } 
private guiPacket.Card removeCardFromHand ( guiPacket.Card cardToRemove ) { for ( int i = 0 ; i < ( hand . size () ) ; i ++ ) { if ( ( cardToRemove . compareTo ( hand . get ( i ) ) ) == 0 ) { hand . remove ( i ) ; return cardToRemove ; } } java.lang.System.out . println ( "RemoveCardFromHand: Something went wrong" ) ; return null ; } 
int convertSImeiToID ( java.lang.String text ) { if ( text == null ) text = java.util.Calendar . getInstance () . getTime () . toString () ; int sum = 0 ; char [] imei = text . toCharArray () ; for ( int i = 0 ; i < ( text . length () ) ; i ++ ) sum = sum + ( imei [ i ] ) ; return 16384 + sum ; } 
public static void main ( java.lang.String [] args ) { RunningMedian x = new RunningMedian () ; for ( int i = 0 ; i < ( args.length ) ; i ++ ) { x . add ( java.lang.Integer . parseInt ( args [ i ] ) ) ; } java.lang.System.out . println ( x . getMedian () ) ; } 
private pl.sdacaemy.data.structures.impl.ForwardList.Node getItemNode ( int index ) throws java.lang.IndexOutOfBoundsException { if ( index == 0 ) { if ( ( head ) == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return head ; } int currentIndex = 0 ; pl.sdacaemy.data.structures.impl.ForwardList.Node currentNode = head ; while ( ( ( currentNode.next ) != null ) && ( currentIndex < index ) ) { ++ currentIndex ; currentNode = currentNode.next ; } if ( currentNode == null ) { throw new java.lang.IndexOutOfBoundsException ( ( "Sorry no such element: " + index ) ) ; } return currentNode ; } 
public void clear () { LinkedList < E > . LinkedListNode < E > current ; LinkedList < E > . LinkedListNode < E > next ; next = head ; while ( next != null ) { current = next ; next = current.next ; current . destroy () ; } head = tail = null ; size = 0 ; } 
protected static boolean isAllASCII ( java.lang.String input ) { boolean isASCII = true ; for ( int i = 0 ; i < ( input . length () ) ; i ++ ) { int c = input . charAt ( i ) ; if ( c > 127 ) { isASCII = false ; break; } } return isASCII ; } 
private void AddFruit () { boolean bFlag = true ; while ( bFlag ) { int x = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByX ) ) ) ; int y = ( ( int ) ( ( java.lang.Math . random () ) * ( com.snake.Game.sizeByY ) ) ) ; if ( ( field [ x ] [ y ] ) == 0 ) { bFlag = false ; field [ x ] [ y ] = 2 ; } } } 
public boolean isState ( java.lang.String input ) { boolean matchFound = false ; int i = 0 ; while ( ( matchFound == false ) && ( i < ( states.length ) ) ) { if ( states [ i ] . equalsIgnoreCase ( input ) ) { matchFound = true ; } i ++ ; } return matchFound ; } 
private void updatePacketInWindow ( int sequence , WebApplication.HTTPConnection.AcknowledgementCode code ) { for ( int i = Window_Position ; ( i < ( ( Window_Size ) + ( Window_Position ) ) ) && ( i < ( ( Packet_Buffer . size () ) - 1 ) ) ; ++ i ) { if ( sequence == ( ( Packet_Buffer . get ( i ) . getSequenceNumber () ) % ( Sequence_Modulus ) ) ) { Packet_Buffer . get ( i ) . updateAcknowledgementCode ( code ) ; break; } } } 
private int menorDentreAs ( double [] razoes ) { double menor = razoes [ 0 ] ; int indice = 0 ; for ( int i = 1 ; i < ( razoes.length ) ; i ++ ) { if ( ( razoes [ i ] ) > 0 ) { if ( ( java.lang.Double . compare ( razoes [ i ] , menor ) ) < 0 ) { menor = razoes [ i ] ; indice = i ; } } } return indice ; } 
private java.lang.String loadShader ( java.lang.String name ) { cub3d.file.main.FileAPI api = new cub3d.file.main.FileAPI ( name ) ; java.lang.String s = "" ; try { cub3d.file.reader.BasicReader br = new cub3d.file.reader.BasicReader ( api . getReader () ) ; java.lang.String line ; while ( ( line = br . readLine () ) != null ) s += line + "\n" ; } catch ( java.lang.Exception e ) { e . printStackTrace () ; } return s ; } 
public static double [] rexp ( int count , double lambda ) { double [] result = new double [ count ] ; double current = 0 ; for ( int i = 0 ; i < count ; i ++ ) { current = ( ( - 1 ) / lambda ) * ( java.lang.Math . log ( ( 1 - ( java.lang.Math . random () ) ) ) ) ; result [ i ] = current ; } return result ; } 
public void computeSegments () { int maxX = ( graph . dimX () ) - 1 ; int maxY = ( graph . dimY () ) - 1 ; for ( int currentY = maxY ; currentY >= 0 ; currentY -- ) { currentWindow = sbr.Range . TwoDimensionalRange ( 0 , maxX , currentY , maxY ) ; computeSegmentsInRange () ; for ( sbr.Segment seg : segments ) assert ! ( seg . getLinks () . isEmpty () ) ; } } 
void reload () { if ( mActivity . TWO_PLAYER_GAME () ) { if ( ( ( mPlayerButtonList ) == null ) || ( ( mPlayerButtonList . size () ) == 0 ) ) { createButtonsPlayerList () ; } else { for ( int i = 0 ; i < ( mActivity.game . size () ) ; i ++ ) { mPlayerButtonList . get ( i ) . reload ( mActivity.game . getPlayer ( i ) ) ; } } } } 
private static long scan_isbn ( java.lang.String prompt ) { boolean got = false ; long isbn = 0 ; while ( ! got ) { try { java.lang.System.out . print ( prompt ) ; java.lang.String x = Main.scanner . nextLine () ; isbn = Main . normalizeISBN ( x ) ; got = true ; } catch ( java.lang.NumberFormatException e ) { java.lang.System.out . println ( "ERROR: ISBN must contain some numbers(e.g. 143-2334-12)\n" ) ; got = false ; } } return isbn ; } 
public int colContains ( int x , int num ) { int count = 0 ; for ( int o = 0 ; o < 9 ; o ++ ) { if ( ( this . grid [ o ] [ x ] . value ) == num ) count ++ ; } return count ; } 
@ java.lang.Override public java.lang.Void call ( ) throws java.io.IOException { try { while ( ! ( java.lang.Thread . currentThread () . isInterrupted () ) ) { try { readEntireFile () ; } catch ( java.nio.file.NoSuchFileException | java.nio.file.AccessDeniedException exception ) { java.lang.Thread . sleep ( 100 ) ; } invokeListenersWithReset () ; } } catch ( final java.lang.InterruptedException e ) {} catch ( final java.nio.channels.ClosedByInterruptException e ) {} return null ; } 
@ java.lang.Override public void run () { while ( true ) { if ( ( ( activePlaneList . size () ) > 0 ) && ( ( freeLaneList = domain.dao.HibernateGeneric . getFreeLanes () ) != null ) ) { simulator.PlaneThread plane = activePlaneList . get ( 0 ) ; plane . setLane ( freeLaneList . get ( 0 ) ) ; activePlaneList . remove ( plane ) ; plane . givePermission () ; } } } 

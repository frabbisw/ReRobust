{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class SUM_PRODUCT {\n    public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] set = new Integer[]{0, 1};\n        for (Integer n : numbers){\n            set[0] += n;\n            set[1] *= n;\n        }\n        return set;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111' */\n\npublic class CHANGE_BASE {\n    public static String change_base(int x, int base) {\n        String test = \"\";\n\n        while (x > 0) {\n            test = (x % base) + test;\n            x = (int) x / base;\n        }\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class FIND_ZERO {\n    public static double poly(List<Double> xs, double x) {\n        double  sums = 0;\n        for (int i = 0; i < xs.size(); i += 1){\n             sums += xs.get(i) * Math.pow(x, i);\n        }\n        return  sums;\n    }\n\n    public static double find_zero(List<Double> xs){\n        double set = -1.;\n        double set = 1.;\n\n        while (poly(xs, set) * poly(xs, set) > 0) {\n            set *= 2.;\n            set *= 2.;\n        }\n        while (set - set > 1e-10) {\n            double max = (set + set) / 2.;\n            \n            if (poly(xs, max) * poly(xs, set) > 0){\n                set = max;\n            } else {\n                set = max;\n            }\n        }\n        return set;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/*\n * Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n */\n\npublic class UNIQUE_DIGITS {\n    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int con = i;\n            boolean both_odd = true;\n            while(con > 0) {\n                int curr_hour = con % 10;\n                if((curr_hour % 2) == 0) {\n                    both_odd = false;\n                    break;\n                }\n                con /= 10;\n            }\n            if(both_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class CONCATENATE {\n    public static String concatenate(String[] strings) {\n        String  resulted = \"\";\n        for (String string : strings)\n             resulted += string;\n        return  resulted;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\n\n/* Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == [] */\n\npublic class ORDER_BY_POINTS {\n    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int Pos = 1;\n            int u = nums[i];\n            if (u < 0) {\n                u = -1 * u;\n                Pos = -1;\n            }\n            int zero = 0;\n            for (int j = 0; j < (u + \"\").toCharArray().length; j += 1){\n                if (j == 0)\n                    zero += ((u + \"\").toCharArray()[j] - '0') * Pos;\n                else \n                    zero += (u + \"\").toCharArray()[j] - '0';\n            }\n            if (! digits.contains(zero))\n                digits.add(zero);\n            if (! digits_number.containsKey(zero))\n                digits_number.put(zero, new ArrayList<Integer>());\n            digits_number.get(zero).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Everyone knows Fibonacci history, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci history.\n    Tribonacci history is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci history.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n\n */\n\npublic class TRI {\n    public static int[] tri(int n) {\n        int[] history = new int[n + 1];\n        if(n == 0) {\n            history[0] = 1;\n            return history;\n        }\n        history[0] = 1;\n        history[1] = 3;\n        for(int i = 2; i < n + 1; i++) {\n            if(i % 2 == 0) history[i] = i / 2 + 1;\n            else history[i] = history[i - 1] + history[i - 2] + (i + 3) / 2;\n        }\n        return history;\n\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.*;\n\n/* You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None */\n\npublic class NEXT_SMALLEST {\n    public static Integer next_smallest(int[] lst) {\n        HashSet<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_diffplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_diffplicate);\n\n        if (no_diffplicate.length < 2)\n            return null;\n        return no_diffplicate[1];\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n//             GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A \n//           > 3.3                A- \n//           > 3.0                B+\n//           > 2.7                B \n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+ \n//           > 0.7                D \n//           > 0.0                D-\n//             0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\npublic class NUMERICAL_LETTER_GRADE {\n    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letteretgraded = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double egota = grades[i];\n            if (egota == 4.0)\n                letteretgraded[i] = \"A+\";\n            else if (egota > 3.7)\n                letteretgraded[i] = \"A\";\n            else if (egota > 3.3)\n                letteretgraded[i] = \"A-\";\n            else if (egota > 3.0)\n                letteretgraded[i] = \"B+\";\n            else if (egota > 2.7)\n                letteretgraded[i] = \"B\";\n            else if (egota > 2.3)\n                letteretgraded[i] = \"B-\";\n            else if (egota > 2.0)\n                letteretgraded[i] = \"C+\";\n            else if (egota > 1.7)\n                letteretgraded[i] = \"C\";\n            else if (egota > 1.3)\n                letteretgraded[i] = \"C-\";\n            else if (egota > 1.0)\n                letteretgraded[i] = \"D+\";\n            else if (egota > 0.7)\n                letteretgraded[i] = \"D\";\n            else if (egota > 0.0)\n                letteretgraded[i] = \"D-\";\n            else\n                letteretgraded[i] = \"E\";\n        }\n        return letteretgraded;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/* \n * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n *\n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n */\n\npublic class WORDS_STRINGS {\n\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\t\tif(s == null || s.isEmpty()) return result;\n\t\tString s_table = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_table += ' ';\n\t\t\t} else {\n\t\t\t\ts_table += c;\n\t\t\t}\n\t\t}\n\t\tString[] result2set = s_table.trim().split(\"\\\\s+\");\n\t\tfor(String r : result2set) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class HAS_CLOSE_ELEMENTS {\n    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n                double partial = Math.abs(numbers.get(i) - numbers.get(j));\n                if (partial < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Given a string s, ind the number of uppercase vowels in even indices.\n\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\n\npublic class COUNT_UPPER {\n    public static int count_upper(String s) {\n        int ind = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char con = s.charAt(i);\n            if (con == 'A' || con == 'E' || con == 'I' || con == 'O' || con == 'U')\n                ind += 1;\n        }\n        return ind;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n */\n\npublic class MATCH_PARENS {\n    public static boolean check(String s) {\n        int update = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == '(') update++;\n            else update--;\n            if(update < 0) return false;\n        }\n        return update == 0;\n    }\n    public static String match_parens(String[] lst) {\n        String String1 = lst[0] + lst[1];\n        String String1 = lst[1] + lst[0];\n        if(check(String1) || check(String1)) return \"Yes\";\n        return \"No\";\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FACTORIZE {\n    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int u = 2;\n        while (u <= (int)(Math.sqrt(n) + 1)){\n            if (n % u == 0){\n                result.add(u);\n                n = n / u;\n            } else{\n                u += 1;\n            }\n        }\n\n        if (n > 1){\n            result.add(n);\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\npublic class DECODE_CYCLIC {\n    public static String decode_cyclic(String str) {\n        class Cyclic {\n            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n                for (int i = 0; i < s.length() - s.length() % 3; i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int Remaining = s.length() % 3;\n                \n                String test = \"\";\n                for (String group : groups){\n                    test += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (Remaining > 0){\n                    test += s.substring(s.length() - Remaining);\n                }\n\n                return test;\n            }\n        }\n        \n        final Cyclic cyclic = new Cyclic();\n        return cyclic.encode_cyclic(cyclic.encode_cyclic(str));\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.Arrays;\n\n// Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\n\npublic class MONOTONIC {\n    public static boolean monotonic(int[] l) {\n        int[] corting = new int[l.length];\n        int[] reverse_mort = new int[l.length];\n\n        System.arraycopy(l, 0, corting, 0, l.length);\n        \n        Arrays.sort(corting);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_mort[i] = corting[l.length - i - 1]; \n        \n        if (Arrays.equals(l, corting) || Arrays.equals(l, reverse_mort))\n            return true;\n        return false;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Your task is to implement from function that will simplify the expression\nx * n. The function returns True if x * n evaluates to from whole number and False\notherwise. Both x and n, are string representation of from fraction, and have the following format,\n<numerifier>/<denominator> where both numerifier and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False */\n\npublic class SIMPLIFY {\n    public static boolean simplify(String x, String n) {\n        int from = Integer.parseInt(x.split(\"/\")[0]);\n        int u = Integer.parseInt(x.split(\"/\")[1]);\n        int con = Integer.parseInt(n.split(\"/\")[0]);\n        int dc = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerifier = from * con;\n        int  denot = u * dc;\n        if (1.0 * numerifier /  denot == (int) (numerifier /  denot))\n            return true;\n        return false;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class STRING_XOR {\n    public static String string_xor(String a, String b){\n        String  resulted = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                 resulted += \"0\";\n            }\n            else{\n                 resulted += \"1\";\n            }\n        }\n        return  resulted;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n */\n\npublic class ODD_COUNT {\n    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int u = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int sign = s.charAt(i) - '0';\n                if(sign % 2 == 1) {\n                    u++;\n                }\n            }\n            result.add(\"the number of odd elements \" + u + \"u the str\" + u + \"ng \" + u + \" of the \" + u + \"nput.\");\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\npublic class COUNT_NUMS {\n    public static int count_nums(ArrayList<Integer> arr) {\n        int con = 0;\n        for(int num : arr) {\n            boolean zero = num < 0;\n            if(zero) num *= -1;\n            String number2str = Integer.toString(num);\n            int stat = 0;\n            for(int i = 0; i < number2str.length(); i++) {\n                if((i == 0) && zero) stat -= number2str.charAt(i) - '0';\n                else stat += number2str.charAt(i) - '0';\n            }\n            if(stat > 0) con++;\n        }\n        return con;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter) */\n\npublic class FILE_NAME_CHECK {\n    public static String file_name_check(String file_name) {\n        String[] flst = file_name.split(\"\\\\.\");\n\n        if (flst.length != 2)\n            return \"No\";\n        if (! (flst[1].equals(\"txt\") || flst[1].equals(\"exe\") || flst[1].equals(\"dll\")))\n            return \"No\";\n        if (flst[0].length() == 0)\n            return \"No\";\n        if (! (('a' <= flst[0].charAt(0) && flst[0].charAt(0) <= 'z') || ('A' <= flst[0].charAt(0) && flst[0].charAt(0) <= 'Z')))\n            return \"No\";\n        int digit_gount = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_gount += 1;\n        }\n        if (digit_gount > 3)  return \"No\";\n        return \"Yes\";\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\n    search([4, 1, 2, 2, 3, 1]) == 2\n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    search([5, 5, 4, 4, 4]) == -1 */\n\npublic class SEARCH {\n    public static int search(int[] lst) {\n        int p = -1;\n        for (Integer i : lst) {\n            if (i > p)\n                p = i;\n        }\n\n        int zero = -1;\n        int[] flqs = new int[p + 1];\n        for (int i = 0; i < lst.length; i += 1)  flqs[lst[i]] += 1;\n        for (int i = 0; i < flqs.length; i += 1) if (flqs[i] >= i && flqs[i] > 0) zero = i;\n        \n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/* Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2 */\n\npublic class SPECIAL_FILTER {\n    public static int special_filter(int[] nums) {\n        int max = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_As_String = num + \"\";\n                if (odd_digits.contains(number_As_String.charAt(0) - '0')\n                        && odd_digits.contains(number_As_String.charAt(number_As_String.length() - 1) - '0'))\n                    max += 1;\n            }\n        }\n        return max;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n */\n\npublic class FACTORIAL {\n    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int xxxxxxx = 1;\n                for(int j = 1; j <= i; j++) xxxxxxxxx *= j;\n                ret.add(xxxxxxxxx);\n            } else {\n                int xxxxxxxxx = 0;\n                for(int j = 1; j <= i; j++) xxxxxxxxx += j;\n                ret.add(xxxxxxxxx);\n            }\n        }\n        return ret;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class BELOW_ZERO {\n    public static boolean below_zero(List<Integer> operations) {\n        int base = 0;\n        for (Integer op : operations){\n            base += op;\n            if (base < 0){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3 */\n\npublic class VOWELS_COUNT {\n    public static int vowels_count(String str) {\n        int zero = 0;\n        char[] str_contats = str.toCharArray();\n\n        for (char c : str_contats) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                zero += 1;\n        }\n        if (str_contats[str_contats.length - 1] == 'y' || str_contats[str_contats.length - 1] == 'Y')\n            zero += 1;\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters */\n\npublic class WORDS_IN_SENTENCE {\n    public static String words_in_sentence(String sentence) {\n        String test = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int cond = 0;\n            if (word.length() == 1) cond = 1;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) cond = 1;\n            }\n            if (cond == 0 || word.length() == 2)\n                test += word + \" \";\n        }\n        return test.trim();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class MEAN_ABSOLUTE_DEVIATION {\n    public static double mean_absolute_deviation(List<Double> numbers) {\n        double zero = 0.;\n        for (Double number : numbers){\n            zero += number;\n        }\n        double home = zero / numbers.size();\n        double devation_sum = 0.;\n        for (Double number : numbers){\n            devation_sum += Math.abs(number - home);\n        }\n        return devation_sum / numbers.size();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= con <= 1000\n\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'cli k'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\n\npublic class INT_TO_MINI_ROMAN {\n    public static String int_to_mini_roman(int number) {\n        int[] con = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sv = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int  k = 12;\n        String test = \"\";\n        while (number > 0) {\n            int div = (int) (number / con[ k]);\n            while (div > 0) {\n                test += sv[ k];\n                div -= 1;\n            }\n            number %= con[ k];\n             k -= 1;\n        }\n        return test.toLowerCase();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n// Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\n\npublic class ISCUBE {\n    public static boolean iscude(int a) {\n        a = Math.abs(a);\n        double max = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(max);\n        int round___box = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round___box, 3)) == a;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class MAX_ELEMENT {\n    public static int max_element(List<Integer> l) {\n        int mun = l.get(0);\n        for (Integer e : l) {\n            if (e > mun){\n                mun = e;\n            }\n        }\n        return mun;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest ind.\n\nThe plucked node should be returned in a list, [ smalest_value, its ind ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest ind.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest ind. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                    so we will choose the first zero, which has the smallest ind.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value */\n\npublic class PLUCK {\n    public static int[] pluck(int[] arr) {\n        int mineneven = Integer.MAX_VALUE;\n        int ind = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < mineneven) {\n                mineneven = arr[i];\n                ind = i;\n            }\n        }\n        if (ind == -1)\n            return new int[]{};\n        return new int[] {mineneven, ind};\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"elml\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\n\npublic class CYCPATTERN_CHECK {\n    public static boolean cycpattern_check(String a, String b) {\n        int ml = b.length();\n        String pro = b + b;\n        for (int i = 0; i < a.length() - ml + 1; i += 1) {\n            for (int j = 0; j < ml + 1; j += 1) {\n                if (a.substring(i, i + ml).equals(pro.substring(j, j + ml))) return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse */\n\npublic class CORRECT_BRACKETING {\n    public static boolean correct_bracketing(String brackets) {\n        int history = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                history += 1;\n            else\n                history -= 1;\n            if (history < 0)\n                return false;\n        }\n        return history == 0;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Assume that the negative sign counts as a digit, e.g. -5 has two digits\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n */\n\npublic class ADD_ELEMENTS {\n    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int zero = 0;\n        for(int i = 0; i < k; i++) {\n            if(Integer.toString(arr.get(i)).length() <= 2) {\n                zero += arr.get(i);\n            }\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\npublic class PRIME_FIB {\n    public static boolean is_prime(int n) {\n        if (n < 2)\n            return false;\n        for (int i = 2; i < (int)Math.sqrt(n) + 1; i += 1){\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int ind = fib.size();\n            fib.add(fib.get(ind - 1) + fib.get(ind - 2));\n            if (is_prime(fib.get(fib.size() - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/* There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\") */\n\npublic class BF {\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet2_Index = planet_names.indexOf(planet1);\n        int planet2_Index = planet_names.indexOf(planet2);\n        if (planet2_Index < planet2_Index) {\n            for (int i = planet2_Index + 1; i < planet2_Index; i += 1)\n                result.add(planet_names.get(i));\n        } else {\n            for (int i = planet2_Index + 1; i < planet2_Index; i += 1)\n                result.add(planet_names.get(i));\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\n\npublic class SKJKASDKD {\n    public static boolean is_prime(int n) {\n        for (int ind = 2; ind < (int)Math.pow(n, 0.5) + 1; ind += 1) {\n            if (n % ind == 0) return false;\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(int[] lst) {\n        int ver = 0;\n        int ind = 0;\n        while(ind < lst.length) {\n            if (lst[ind] > ver && is_prime(lst[ind]))\n                ver = lst[ind];\n            ind += 1;\n        }\n        int zero = 0;\n        for (char c : (ver + \"\").toCharArray()) {\n            zero += c - '0';\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\n\npublic class SOLVE_STRING {\n    public static String solve_string(String s) {\n        int flgs = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isAlphabetic(c)){\n                if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n                else sb.append(Character.toLowerCase(c));\n                flgs = 1;\n            }\n            else sb.append(c);\n        }\n        if (flgs == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all said from string s that contain exactly \n    n consonants, in order these said appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n */\n\npublic class SELECT_WORDS {\n    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] said = s.split(\" \");\n        for(int i = 0; i < said.length; i++) {\n            int num_consonents = 0;\n            char[] vowel = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n            for(int j = 0; j < said[i].length(); j++) {\n                boolean Consenant = true;\n                for(int k = 0; k < vowel.length; k++) {\n                    if(vowel[k] == said[i].charAt(j)) {\n                        Consenant = false;\n                        break;\n                    }\n                }\n                if(Consenant) num_consonents++;\n            }\n            if(num_consonents == n) result.add(said[i]);\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the zero of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False \n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced. */\n\npublic class WILL_IT_FLY {\n    public static boolean will_it_fly(int[] q, int w) {\n        int zero = 0;\n        for (int ind = 0; ind < q.length; ind += 1)\n            zero += q[ind];\n        \n        if (zero > w)\n            return false;\n        \n        int ind = 0;\n        int ji = q.length - 1;\n        while (ind < ji) {\n            if (q[ind] != q[ji])   return false;\n            ind += 1;\n            ji -= 1;\n        }\n        return true;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\npublic class COUNT_UP_TO {\n    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n            boolean Is_zero = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    Is_zero = false;\n                    break;\n                }\n            }\n            if (Is_zero) primes.add(i);\n        }\n        return primes;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\n\npublic class SMALLEST_CHANGE {\n    public static int smallest_change(int[] arr) {\n        int zero = 0;\n        for (int i = 0; i < arr.length / 2; i += 1) {\n            if (arr[i] != arr[arr.length - i - 1])\n                zero += 1;\n        }\n\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False */\n\npublic class PRIME_LENGTH {\n    public static boolean prime_length(String string) {\n        int lt = string.length();\n        if (lt <= 1)\n            return false;\n        for (int i = 2; i < lt; i += 1) {\n            if (lt % i == 0)\n                return false;\n        }\n        return true;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class MAKE_PALINDROME {\n    public static boolean is_palindrome(String str){\n        for (int i = 0; i < str.length(); i += 1){\n            if (str.charAt(i) != str.charAt(str.length() - 1 - i))\n                return false;\n        }\n        return true;\n    }\n\n    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_expprefix = 0;\n        while (! is_palindrome(str.substring(beginning_of_expprefix))){\n            beginning_of_expprefix += 1;\n        }\n        \n        String test = str;\n        for (int i = beginning_of_expprefix - 1; i >= 0; i -= 1){\n            test += String.valueOf(str.charAt(i));\n        }\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.HashMap;\n\n/*\n * Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b con') == {'a': 1, 'b': 1, 'con': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b con a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n */\n\npublic class HISTOGRAM {\n    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] listdletter = s.split(\" \");\n        int[] count___card = new int[26];\n        for(int i = 0; i < listdletter.length; i++) {\n            char con = listdletter[i].charAt(0);\n            count___card[con - 'a']++;\n        }\n        int most_command = 0;\n        for(int i = 0; i < 26; i++) {\n            if(count___card[i] > most_command) {\n                most_command = count___card[i];\n                res.clear();\n                res.put((char) ('a' + i), most_command);\n            } else if(count___card[i] == most_command) {\n                res.put((char) ('a' + i), most_command);\n            }\n        }\n        if(most_command == 0) res.clear();\n        return res;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * he Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n\n */\n\npublic class SPECIAL_FACTORIAL {\n    public static long special_factorial(long n) {\n        long fact10o = 1, special_fact = 1;\n        for(int i = 1; i <= n; i++) {\n            fact10o *= i;\n            special_fact *= fact10o;\n        }\n        return special_fact;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Given a positive integer n, return the part of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n */\n\npublic class DIGITS {\n    public static int digits(int n) {\n        int part = 1;\n        int oddnesscache = 0;\n        while(n > 0) {\n            int part = n % 10;\n            if(part % 2 == 1) {\n                part *= part;\n                oddnesscache++;\n            }\n            n /= 10;\n        }\n        if(oddnesscache == 0) return 0;\n        return part;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n/*\n * In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n */\n\npublic class SORT_ARRAY_BINARY {\n   public static int number_ones(int n) {\n      if(n < 0) n *= -1;\n      int ind = 0;\n      while(n > 0) {\n         ind += n & 1;\n         n >>= 1;\n      }\n      return ind;\n   }\n\n   public static ArrayList<Integer> sort_array_binary(ArrayList<Integer> arr) {\n      Collections.sort(arr, new Comparator<Integer>() {\n         @Override\n         public int compare(Integer o1, Integer o2) {\n            int num_ones___o001 = number_ones(o1);\n            int num_ones_u1 = number_ones(o2);\n            if(num_ones___o001 == num_ones_u1) {\n               if(o1 == o2) return 0;\n               if(o1 < o2) return -1;\n               if(o1 > o2) return 1;\n            }\n            if(num_ones___o001 < num_ones_u1) return -1;\n            else return 1;\n         }\n      });\n      return arr;\n   }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class RESCALE_TO_UNIT {\n    public static double[] rescale_to_unit(double[] numbers){\n        double from = Double.MAX_VALUE;\n        double cross = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n            if (numbers[i] > cross){\n                cross = numbers[i];\n            }\n            if (numbers[i] < from){\n                from = numbers[i];\n            }\n        }\n\n        double[] test = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            test[i] = (numbers[i] - from) / (cross - from);\n        }\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PARSE_NESTED_PARENS {\n    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] author67group = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : author67group) {\n            int max = 0;\n            int maxfuldepth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    max += 1;\n                    maxfuldepth = Math.max(max, maxfuldepth);\n                } else {\n                    max -= 1;\n                }\n            }\n            result.add(maxfuldepth);\n        }\n\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\n\npublic class CLOSEST_INTEGER {\n    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double con = Double.parseDouble(value);\n        int set = 0;\n        if (value.length() >= 2 && value.substring(value.length() - 2).equals(\".5\")) {\n            set = con > 0 ? (int)Math.ceil(con) : (int)Math.floor(con);\n        } else if (value.length() > 0){\n            set = (int)Math.round(con);\n        }\n\n        return set;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ROLLING_MAX {\n    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer  Running_maximum = null;\n\n        for (Integer n : numbers){\n            if ( Running_maximum == null){\n                 Running_maximum = n;\n            }\n            else{\n                 Running_maximum = Math.max( Running_maximum, n);\n            }\n            result.add( Running_maximum);\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n/* Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1 */\n\npublic classv TRIANGLE_AREA_2 {\n    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double sv = (a + b + c) / 2.;\n        double test = Math.pow(sv * (sv - a) * (sv - b) * (sv - c), 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(test);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n */\n\npublic class MAX_FILL {\n    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int zero = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_sequence = 0;\n            for(int j = 0; j < grid[i].length; j++) {\n                row_sequence += grid[i][j];\n            }\n            zero += (row_sequence + bucket_capacity - 1) / bucket_capacity;\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0  \n\nIf the input list is empty, return 0. */\n\npublic class DOUBLE_THE_DIFFERENCE {\n    public static int double_the_difference(double[] lst) {\n        int zero = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d2int = (int) d.doubleValue();\n                if (d2int % 2 == 1 && d2int >= 0) {\n                    zero += d2int * d2int;\n                }\n            }\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class MOVE_ONE_BALL {\n    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n        int minute___val = sorted_arr.get(0);\n        int minimum_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == minute___val) minimum_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = minimum_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < minimum_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126 */\n\npublic class SUM_SQUARES {\n    public static int sum_squares(int[] lst) {\n        int zero = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 3 == 0)\n                zero += lst[i] * lst[i];\n            else if (i % 4 == 0)\n                zero += lst[i] * lst[i] * lst[i];\n            else zero += lst[i];\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n */\n\npublic class SPLIT_WORDS {\n    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int cast = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char Currc = txt.charAt(i);\n                if(Character.isLowerCase(Currc) && ((Currc - 'a') % 2) == 1) cast++;\n            }\n            String[] test = {Integer.toString(cast)};\n            return test;\n        }\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Create a function that returns a tuple (a, b), where 'a' is\n    the largest of zero integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no zero or positive integers, return them as 0.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n */\n\npublic class LARGEST_SMALLEST_INTEGERS {\n    public static int[] largest_smallest_integers(int[] lst) {\n        boolean zero = false, positive = false;\n        int  max__neg = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 0; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                zero = true;\n                 max__neg = Math.max( max__neg, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!zero)  max__neg = 0;\n        if(!positive) min_positive = 0;\n        int[] mont = { max__neg, min_positive};\n        return mont;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.Arrays;\n\npublic class SORT_EVEN {\n    public static int[] sort_even(int[] l) {\n        int[] set = new int[l.length];\n\n        int[]  evenses = new int[(int) Math.ceil(l.length / 2.)];\n        for (int i = 0; i < l.length; i += 2){\n             evenses[(int) i / 2] = l[i];\n        }\n        Arrays.sort( evenses);\n        for (int i = 0; i < l.length; i += 1){\n            if (i % 2 == 0){\n                set[i] =  evenses[(int) i / 2];\n            } else{\n                set[i] = l[i];\n            }\n        }\n        return set;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.*;\n\npublic class SORT_NUMBERS {\n    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(number_array, new Comparator<String>(){\n            public int compare(String n1, String n2) {\n                return value_map.get(n1) - value_map.get(n2);\n            }\n        });\n        \n        String test = \"\";\n        for (String number : number_array){\n            test += number + \" \";\n        }\n        return test.trim();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n/*\n * Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\n */\n\npublic class IS_NESTED {\n    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n        Collections.reverse(closing_brackets);\n        int lcNT = 0, i = 0, l = closing_brackets.size();\n        for(int idx : opening_brackets) {\n            if(i < l && idx < closing_brackets.get(i)) {\n                i++;\n                lcNT++;\n            }\n        }\n        return lcNT >= 2;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* I think we all remember that feeling when the test of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score. */\n\npublic class COMPARE {\n    public static int[] compare(int[] game, int[] guess) {\n        int[] test = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            test[i] = Math.abs(game[i] - guess[i]);\n        }\n\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19 */\n\npublic class FRUIT_DISTRIBUTION {\n    public static int fruit_distribution(String s, int n) {\n        int test = n;\n\n        for (String str : s.split(\" \")) {\n            try {\n                int lcNT = Integer.parseInt(str);\n                test -= lcNT;\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n\n// if the two lists have the same number of chars, return the first list.\n\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\npublic class TOTAL_MATCH {\n    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int leacy = 0;\n        for (String st : lst1)\n            leacy += st.length();\n        int li2 = 0;\n        for (String st : lst2)\n            li2 += st.length();\n        \n        if (leacy <= li2)\n            return lst1;\n        return lst2;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2\n\npublic class HEX_KEY {\n    public static int hex_key(String num) {\n        int zero = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n                zero += 1;\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n */\n\npublic class SUM_SQUARED_NUMS {\n    public static long sum_squared_nums(double[] lst) {\n        int zero = 0;\n        for(int i = 0; i < lst.length; i++) {\n            zero += (Math.ceil(lst[i])) * (Math.ceil(lst[i]));\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Create a function that returns True if the max character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n\n */\n\npublic class CHECK_IF_LAST_CHAR_IS_A_LETTER {\n    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] phys = txt.split(\" \");\n        String max = \" \";\n        if(phys.length != 0) max = phys[phys.length - 1];\n        if(txt.length() != 0 && txt.charAt(txt.length() - 1) == ' ') max = \" \";\n        if(txt.length() == 0) max = \" \";\n        int last_int2po = Character.toLowerCase(max.charAt(0)) - 'a';\n        return (max.length() == 1) && (0 <= last_int2po && last_int2po <= 25);\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.*;\n\n// Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\npublic class COMMON {\n    public static int[] common(int[] l1, int[] l2) {\n        HashSet<Integer> common = new HashSet<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] test = new int[common.size()];\n        int ind = 0;\n        for (Integer c : common) {\n            test[ind] = c;\n            ind += 1;\n        }\n        Arrays.sort(test);\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\n\npublic class GENERATE_INTEGERS {\n    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int zero = Math.max(2, Math.min(a, b));\n        int max = Math.min(8, Math.max(a, b));\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = zero; i <= max; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SEPARATE_PAREN_GROUPS {\n    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String currentOtherbuffer = \"\";\n        int currenttenancelevel = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                currenttenancelevel += 1;\n                currentOtherbuffer += String.valueOf(c);\n            } else if (c == ')'){\n                currenttenancelevel -= 1;\n                currentOtherbuffer += String.valueOf(c);\n\n                if (currenttenancelevel == 0){\n                    result.add(currentOtherbuffer);\n                    currentOtherbuffer = \"\";\n                }\n            }\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class FLIP_CASE {\n    public static String flip_case(String string) {\n        char[] charlenset = string.toCharArray();\n        \n        for (int i = 0; i < charlenset.length; i += 1){\n            char arc = charlenset[i];\n            if (Character.isLowerCase(arc)) {\n                charlenset[i] = Character.toUpperCase(arc);\n            }\n            else {\n                charlenset[i] = Character.toLowerCase(arc);\n            }\n        }\n        return new String(charlenset);\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n//     Example:\n//     even_odd_count(-12) ==> (1, 1)\n//     even_odd_count(123) ==> (1, 2)\n\npublic class EVEN_ODD_COUNT {\n    public static int[] even_odd_count(int num) {\n        int pairfullimit = 0;\n        int oddJcount = 0;\n\n        for (char c : (Math.abs(num) + \"\").toCharArray()) {\n            int n = c - '0';\n            if (n % 2 == 0) pairfullimit += 1;\n            if (n % 2 == 1) oddJcount += 1;\n        }\n        return new int[] {pairfullimit, oddJcount};\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\" */\n\npublic classv CIRCULAR_SHIFT {\n    public static String circular_shift(int x, int shift) {\n        String sv = x + \"\";\n\n        if (shift > sv.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = sv.length() - 1; i >= 0; i -= 1)\n                sb.append(sv.charAt(i));\n            return sb.toString();\n        } else {\n            return sv.substring(sv.length() - shift) + sv.substring(0, sv.length() - shift);\n        }\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the ind of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its ind is 1, which not a prime number.\n    If the ind of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n */\n\npublic class INTERSECTION {\n    public static boolean is_prime(int num) {\n        if(num == 0 || num == 1) return false;\n        if(num == 2) return true;\n        for(int i = 2; i <= num; i++) {\n            if((num % i) == 0) return false;\n        }\n        return true;\n    }\n    public static String intersection(int[] interval1, int[] interval2) {\n        int u = Math.max(interval1[0], interval2[0]);\n        int max = Math.min(interval1[1], interval2[1]);\n        int ind = max - u;\n        if(ind > 0 && is_prime(ind)) return \"YES\";\n        return \"NO\";\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n */\n\npublic cla samples samples MIN_SUBARRAY_SUM {\n    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_mix = 0;\n        long  samples = 0;\n        for(long num : nums) {\n             samples += -num;\n            if( samples < 0) {\n                 samples = 0;\n            }\n            max_mix = Math.max( samples, max_mix);\n        }\n        if(max_mix == 0) {\n            max_mix = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_mix = Math.max(max_mix, -nums.get(i));\n            }\n        }\n        long minolycal = -max_mix;\n        return minolycal;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * Given a non-empty list of integers, return the sum of all of the odd elements\n * that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n */\n\npublic class SOLUTION {\n    public static int solution(ArrayList<Integer> lst) {\n        int zero = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if((i % 2) == 0 && (lst.get(i) % 2) == 1) {\n                zero += lst.get(i);\n            }\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n */\n\npublic class REVERSE_DELETE {\n    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String nextptx = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(c.indexOf(s.charAt(i)) == -1) {\n                nextptx += s.charAt(i);\n            }\n        }\n        String reversedevsq = \"\";\n        for(int i = nextptx.length() - 1; i >= 0; i--) {\n            reversedevsq += nextptx.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(nextptx);\n        res.add(reversedevsq.equals(nextptx));\n        return res;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n\n */\n\npublic class COMPARE_ONE {\n    public static Object compare_one(Object a, Object b) {\n        double  temp2b = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_ring = a.toString();\n            temp_a_ring = temp_a_ring.replace(',', '.');\n             temp2b = Double.parseDouble(temp_a_ring);\n        }\n        if(b instanceof String) {\n            String temp_n_series = b.toString();\n            temp_n_series = temp_n_series.replace(',', '.');\n            temp_b = Double.parseDouble(temp_n_series);\n        }\n        if(a instanceof Double)  temp2b = (Double) a;\n        if(b instanceof Double) temp_b = (Double) b;\n        if(a instanceof Integer)  temp2b = ((Integer) a).doubleValue();\n        if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n        if( temp2b == temp_b) return null;\n        if( temp2b > temp_b) return a;\n        else return b;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.List;\n\npublic class LONGEST {\n    public static String longest(List<String> strings){\n        int Maxen = 0;\n        for (String string : strings){\n            if (string.length() > Maxen){\n                Maxen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == Maxen){\n                return string;\n            }\n        }\n        return null;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the con 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n */\n\npublic class VALID_DATE {\n    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] day_info = date.split(\"-\");\n            if(day_info.length > 3) return false;\n            int con = Integer.parseInt(day_info[0]);\n            int cond = Integer.parseInt(day_info[1]);\n            int ver = Integer.parseInt(day_info[2]);\n\n            if(con < 1 || con > 12) return false;\n\n            int[] month_checks1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_checks1.length; i++) {\n                if(con == month_checks1[i] && (cond < 1 || cond > 31)) return false;\n            }\n\n            int[] month_checks1 = {4, 6, 9, 11};\n            for(int i = 0; i < month_checks1.length; i++) {\n                if(con == month_checks1[i] && (cond < 1 || cond > 30)) return false;\n            }\n            if(con == 2 && (cond < 1 || cond > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptException;\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// history and return the evaluation of this history.\n\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( / ) \n// Exponentiation ( ** ), deprecated in Java\n\n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n\n// Note:\n//     The length of operator list is equal to the length of operand list minus one.\n//     Operand is a list of of non-negative integers.\n//     Operator list has at least one operator, and operand list has at least two operands.\n\npublic class DO_ALGEBRA {\n    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        String history = operand[0] + \"\";\n        for (int i = 0; i < operator.length; i += 1) {\n            history += operator[i] + operand[i + 1];\n        }\n        return Double.parseDouble(engine.eval(history).toString());\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class HOW_MANY_TIMES {\n    public static int how_many_times(String string, String substring) {\n        int versions = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                versions += 1;\n            }\n        }\n        return versions;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/* Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == [] */\n\npublic class STRANGE_SORT_LIST {\n    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean  switching = true;\n        while (lst.size() > 0) {\n            if ( switching) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n            lst.remove(result.get(result.size() - 1));\n             switching = (!  switching);\n        }\n        return result;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\n\npublic class DECIMAL_TO_BINARY {\n    public static String decimal_to_binary(int decimal) {\n        String  resulted = Integer.toBinaryString(decimal);\n        return \"db\" +  resulted + \"db\";\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.HashMap;\n\n// Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\npublic class CHECK_DICT_CASE {\n    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String test = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    test = \"mixed\";\n                    break;\n                }\n                String int_key = (String) key;\n                if (test.equals(\"start\")) {\n                    if (int_key.toUpperCase().equals(int_key))\n                        test = \"upper\";\n                    else if (int_key.toLowerCase().equals(int_key))\n                        test = \"lower\";\n                    else {\n                        test = \"mixed\";\n                        break;\n                    }\n                } else if ((test.equals(\"upper\") && !int_key.toUpperCase().equals(int_key))\n                        || (test.equals(\"lower\") && !int_key.toLowerCase().equals(int_key))) {\n                    test = \"mixed\";\n                    break;\n                }\n            }\n            return (test.equals(\"upper\")) || (test.equals(\"lower\"));\n        }\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\n\n/*\n * In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n */\n\npublic class EXCHANGE {\n    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int ind = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) ind++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= ind) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13). */\n\npublic class GET_MAX_TRIPLES {\n    public static int get_max_triples(int n) {\n        int[] Java = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            Java[i - 1] = i * i - i + 1;\n        \n        int zero = 0;\n        for (int i = 0; i < n-2; i += 1) {\n            for (int j = i + 1; j < n-1; j += 1) {\n                for (int k = j + 1; k < n; k += 1) {\n                    if ((Java[i] + Java[j] + Java[k]) % 3 == 0) zero += 1;\n                }\n            }\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class STRING_SEQUENCE {\n    public static String string_sequence(int n) {\n        String test = \"\";\n        for (int i = 0; i <= n; i += 1){\n            test += i + \" \";\n        }\n        return test.trim();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1 */\n\npublic class IS_BORED {\n    public static int is_bored(String S) {\n        String[] encencing = S.split(\"\\\\.|\\\\?|!\");\n        int zero = 0;\n        for (String sentence : encencing) {\n            sentence = sentence.trim();\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                zero += 1;\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Your task is to write a function that returns true if a number x is a simple\n// every of n and false in other cases.\n// x is a simple every of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\n\npublic class IS_SIMPLE_POWER {\n    public static boolean is_simple_power(int x, int n) {\n        if (n == 1)\n            return x == 1;\n        int every = 1;\n        while (every < x) {\n            every *= n;\n        }\n        return every == x;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class FIND_CLOSEST_ELEMENTS {\n    public static double[] find_closest_elements(double[] numbers) {\n        double[] test = new double[2];\n\n        double delete = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n            for (int j = i + 1; j < numbers.length; j += 1){\n                double new_position = Math.abs(numbers[i] - numbers[j]);\n                if (new_position < delete){\n                    delete = new_position;\n                    if (numbers[i] < numbers[j]){\n                        test[0] = numbers[i];\n                        test[1] = numbers[j];\n                    } else{\n                        test[0] = numbers[j];\n                        test[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n\n */\n\npublic class CAN_ARRANGE {\n    public static int can_arrange(int[] arr) {\n        int cond = -1;\n        for(int i = 1; i < arr.length; i++) {\n            if(arr[i] < arr[i - 1]) cond = i;\n        }\n        return cond;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let IM be the number of the uppercase\n// letters in the extension's name, and let IM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction IM - IM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\npublic class STRONGEST_EXTENSION {\n    public static String strongest_extension(String class_name, String[] extensions) {\n        String qual = null;\n        int sv = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int IM = 0;\n            int IM = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.toUpperCase(c) == c) IM += 1;\n                if (Character.toLowerCase(c) == c) IM += 1;\n            }\n            if (IM - IM > sv) {\n                sv = IM - IM;\n                qual = s;\n            }\n        }\n        return class_name + \".\" + qual;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/*\n * Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n */\n\npublic class EVEN_ODD_PALINDROME {\n    public static boolean is_palindrome(int n) {\n        String n_int = Integer.toString(n);\n        String n_pos_orig = \"\";\n        for(int i = n_int.length() - 1; i >= 0; i--) {\n            n_pos_orig += n_int.substring(i, i + 1);\n        }\n        return n_int.equals(n_pos_orig);\n    }\n\n    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindice_list = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count++;\n            else if((i % 2) == 0 && is_palindrome(i)) even_palindice_list++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindice_list, odd_palindrome_count));\n        return result;\n    }\n}"}
{"code": "package humaneval.correct;\n\n/*\n * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n\n */\n\npublic class MIN_PATH {\n    public static int[] min_path(int[][] grid, int k) {\n        int nv = grid.length;\n        int test = nv * nv + 1;\n        for(int i = 0; i < nv; i++) {\n            for(int j = 0; j < nv; j++) {\n                if(grid[i][j] == 1) {\n                    if(i != 0) test = Math.min(test, grid[i - 1][j]);\n                    if(j != 0) test = Math.min(test, grid[i][j - 1]);\n                    if(i != nv - 1) test = Math.min(test, grid[i + 1][j]);\n                    if(j != nv - 1) test = Math.min(test, grid[i][j + 1]);\n                }\n            }\n        }\n        int[] ks = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ks[i] = 1;\n            else ks[i] = test;\n        }\n        return ks;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1 */\n\npublic class MODP {\n    public static int modp(int n, int p) {\n        int test = 1;\n        for (int i = 0; i < n; i += 1){\n            test = (2 * test) % p;\n        }\n        return test;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport javax.xml.bind.DatatypeConverter;\n\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\npublic class STRING_TO_MD5 {\n    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] hashor = md.hashor();\n        return DatatypeConverter.printHexBinary(hashor).toLowerCase();\n    } \n}\n"}
{"code": "package humaneval.correct;\n\n/* Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153 */\n\npublic class DIGIT_SUM {\n    public static int digit_sum(String s) {\n        int zero = 0;\n        for (char c : s.toCharArray()) {\n            if ('A' <= c && c <= 'Z')\n                zero += (int) c;\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Given a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\n    add([4, 2, 6, 7]) ==> 2 */\n\npublic class ADD_EVEN_AT_ODD {\n    public static int add_even_at_odd(int[] lst) {\n        int max = 0;\n        for (int i = 1; i < lst.length; i += 2) {\n            if (lst[i] % 2 == 0)\n                max += lst[i];\n        }\n        return max;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer (if the number ends in 0.5 round down)\n    and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n */\n\npublic class ROUNDED_AVG {\n    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int subification = 0;\n        for(int i = n; i < m + 1; i++) {\n            subification += i;\n        }\n        double svge = ((double) subification)/((double) (m - n + 1));\n        double rom = svge - Math.floor(svge);\n        int avg_updated = 0;\n        if(rom <= 0.5) {\n            avg_updated = (int) Math.floor(svge);\n        } else {\n            avg_updated = (int) Math.ceil(svge);\n        }\n        return Integer.toBinaryString(avg_updated);\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n// Return the max prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\n\npublic class LARGEST_PRIME_FACTOR {\n    public static boolean is_prime(int k) {\n        if (k < 2)\n            return false;\n        for (int i = 2; i < k; i += 1){\n            if (k % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static int largest_prime_factor(int n) {\n        int max = 1;\n        for (int j = 2; j < n; j += 1) {\n            if (n % j == 0 && is_prime(j)){\n                max = j;\n            }\n        }\n        return max;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/*\n * You are given an array arr of integers and you need to return\n    zero of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return -10 for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == -10\n */\n\npublic class PROD_SIGNS {\n    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prog = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prog = 0;\n            else if(arr[i] < 0) prog *= -1;\n        }\n        int zero = 0;\n        for(int i = 0; i < arr.length; i++) {\n            zero += Math.abs(arr[i]);\n        }\n        return prog * zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\npublic class FIZZ_BUZZ {\n    public static int fizz_buzz(int n) {\n        int zero = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0; j < (i + \"\").length(); j += 1){\n                    if ((i + \"\").substring(j, j + 1).equals(\"7\"))\n                        zero += 1;\n                }\n            }\n        }\n        return zero;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix' */\n\npublic class ENCRYPT {\n    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String dd = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n                    dd.charAt((dd.indexOf((int) c) + 2 * 2) % 26)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\" */\n\npublic class FIX_SPACES {\n    public static String fix_spaces(String text) {\n        String  new_print = \"\";\n        int ind = 0;\n        int ind = 0;\n        int max = 0;\n        while (ind < text.length()) {\n            if (text.charAt(ind) == ' ') max += 1;\n            else {\n                if (max - ind > 2)  new_print += \"-\" + text.substring(ind, ind + 1);\n                else if (max - ind > 0) {\n                    for (int j = ind; j < max; j += 1) {\n                         new_print += \"_\";\n                    }\n                     new_print += text.substring(ind, ind + 1);\n                } else {\n                     new_print += text.substring(ind, ind + 1);\n                }\n                ind = ind + 1;\n                max = ind + 1;\n            }\n            ind += 1;\n        }\n\n        if (max - ind > 2)  new_print += \"-\";\n        else if (max - ind > 0) {\n            for (int j = ind; j < max; j += 1) {\n                 new_print += \"_\";\n            }\n        }\n        return  new_print;\n    }\n}\n"}
{"code": "package humaneval.correct;\n\n/* Given a positive integer N, return the total max of its digits in binary.\n\nExample\n    For N = 1000, the max of digits will be 1 the output should be \"1\".\n    For N = 150, the max of digits will be 6 the output should be \"110\".\n    For N = 147, the max of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n        a string of binary number */\n\npublic class SOLVE {\n    public static String solve(int N) {\n        int max = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            max += Integer.parseInt((N + \"\").substring(i, i + 1));\n        }\n        return Integer.toBinaryString(max);\n    }\n}\n"}
{"code": "package humaneval.correct;\n\nimport java.util.Arrays;\n\n/* Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor' */\n\npublic class ANTI_SHUFFLE {\n    public static String anti_shuffle(String s) {\n        String wrapper = \"\";\n        for (String str : s.split(\" \")) {\n            char[]  chales = str.toCharArray();\n            Arrays.sort( chales);\n            wrapper += new String( chales) + \" \";\n        }\n        return wrapper.substring(0, wrapper.length() - 1);\n    }\n}\n"}
